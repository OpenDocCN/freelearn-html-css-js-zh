- en: Chapter 8. JavaScript Implementations, Syntax Basics, and Variable Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript (JS) is a programming language mostly used to produce dynamic and
    user-interactive webpages. A huge number of websites and all the latest Internet
    browsers (clients) use and support JavaScript. It is a part of the stack of technologies
    that every web developer must learn; these include HTML (the content), CSS (the
    presentation of content), and JS (behavior of the content when a user interacts
    with the webpage).
  prefs: []
  type: TYPE_NORMAL
- en: Previously, the use of JavaScript was just limited to input validations. For
    example, it can produce an error message if the user enters invalid information
    or tries to submit a form with missing information. Now, JS is acknowledged as
    a fully-fledged programming language that is capable of manipulating with complex
    calculations and deals with all aspects of a client window. JS enhances the webpage
    by making it more interactive. For instance, a page with scattered thumbnails
    can be converted into a pretty stylish image gallery, content of the website can
    be loaded without forcing the client to reload it over and over, different sorts
    of error handling can be done in a nice way, user polls can be created and their
    results can be viewed on a website, and playing with HTML elements on the go and
    much more is made possible by the power of JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript is quick—real quick. It responds instantly to user actions, such
    as clicking, double-clicking, resizing, dragging, scrolling, and so on. JavaScript
    has a syntax that is similar to that of the Java language. The name *JavaScript*
    causes confusion for many people. Only the syntax of JS resembles the syntax of
    the Java language. Otherwise, it has nothing to do with the Java programming language
    at all.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some of the key differences between Java (programming language)
    and JS (scripting language):'
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript is embedded into HTML and runs in a browser, while Java requires
    a **Java Virtual Machine** (**JVM**) for its execution; however, Java applets
    can run in browsers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript is known as a client-side language as it runs in the browser on the
    client end, but now, Node.js is the gateway of JS to the server end. On the other
    hand, Java runs on the web server, for example, **Apache Tomcat**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript is usually interpreted by the client, while Java is compiled and
    then executed by a JVM.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript was created by **Netscape** (now Mozilla) while Java was developed
    by **Sun Microsystems** (now Oracle).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: History of JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Brendan Eich of Netscape (now Mozilla) developed JavaScript in 1995\. Originally,
    it was named as **Mocha**, later its name was changed to **Livescript**, and finally
    it was renamed to JavaScript. After its launch, Microsoft introduced **Jscript**—their
    own version of JavaScript that was included in Internet Explorer. Netscape submitted
    JavaScript to **European** **Computer Manufacturers Association**(**ECMA**) for
    standardization and specification. The standardized version was named **ECMAScript**.
    ECMAScript is a trademarked scripting language specification standardized by ECMA
    International.
  prefs: []
  type: TYPE_NORMAL
- en: The ECMAScript V5 introduced a new mode called the **strict mode**; this brought
    forward better and thorough error checking to avoid constructs that cause errors.
    Many ambiguities from the third version were removed and real-world implementations
    were added.
  prefs: []
  type: TYPE_NORMAL
- en: The ECMAScriptV6 added plenty of new syntax for writing complex programs. It
    introduced classes and modules extending the semantics from V5\. Iterators were
    also added in this version along with many Python-styled semantics, including
    proxies, arrow functions, generators and generator expressions, maps, sets, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: Evolution of JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After the standardization of JavaScript as ECMAScript, the next step was to
    have complete control over **Document Object Model** (**DOM**).
  prefs: []
  type: TYPE_NORMAL
- en: The HTML is parsed into DOM by the web browser's DOM API. DOM is the client
    understanding of the webpage. All the elements/nodes are converted into a tree-like
    structure known as **DOM Tree**. The members of this tree can be manipulated on
    the fly using different methods such as `getElementById()` and `getElementsByName()`.
    The HTML source we see in developer tools, such as **Inspect Element**, **Fire
    Bug**, and so on are DOM View. These development tools also help a lot to modify
    our DOM instantly.
  prefs: []
  type: TYPE_NORMAL
- en: Later, **Asynchronous JavaScript and XML** (**AJAX**) was introduced to make
    asynchronous applications. The data was sent to and received from the web server
    without reloading or refreshing the whole DOM Tree (asynchronously).
  prefs: []
  type: TYPE_NORMAL
- en: As JavaScript advanced, different JS libraries were developed to ease DOM manipulation.
    Some of the popular libraries are jQuery, Prototype, and Mootools. The primary
    feature of these libraries is to handle DOM manipulations, animations, and AJAX.
    The most famous and widely used JS library is jQuery. Furthermore, a server-side
    version of JavaScript was developed and named **Node.js**.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, you will learn about JavaScript, its history, and its evolution.
    You will learn about its implementations and syntax. Function references and complete
    examples for how to use it in different cases are also provided.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript implementations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As JavaScript and ECMA Script are used in similar context, JavaScript has much
    more to offer than ECMAScript. It is implemented in the following three parts:'
  prefs: []
  type: TYPE_NORMAL
- en: Core JavaScript (ECMAScript)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Document Object Model (DOM)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browser Object Model (BOM)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Core JavaScript (ECMAScript)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JavaScript supports mobile devices as well as desktop computers; this feature
    makes it a cross-platform scripting language. However, it is not much useful if
    used alone, which is why it is used along with server-side languages to make powerful
    and interactive applications. It can be easily integrated within a web browser
    environment, enabling users to have complete control over the browser's objects
    and events.
  prefs: []
  type: TYPE_NORMAL
- en: 'The core capabilities of JavaScript are also called ECMAScript. ECMAScript
    is not actually browser-dependent or environment-dependent. It is a set of core
    language elements that are used in different environments such as **ScriptEase**
    and **Flash** **Action Script**. Hence, we can say that ECMA Script contains definitions
    for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Language syntax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keywords/reserved words
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Statements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control structures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Objects (for example, array, date, math and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Therefore, ECMAScript defines all of the functions, methods, properties, and
    objects of a scripting language. Other scripting languages such as JavaScript
    are implementations of ECMAScript.
  prefs: []
  type: TYPE_NORMAL
- en: ECMAScript is implemented differently in various browsers, after which DOM and
    BOM are included.
  prefs: []
  type: TYPE_NORMAL
- en: Document object model (DOM)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DOM is an **Application** **Programming Interface**(**API**) for HTML and XML
    documents. It is a logical structure of the web document. It is a hierarchical
    tree view of the nodes that are present in the document. The browser translates
    the document into DOM and only understands it. DOM enables developers to take
    control over the nodes and to make changes to the document on the fly.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, this is a simple webpage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Browser object model (BOM)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While DOM deals with the document, **Browser Object Model** (**BOM**) deals
    with the browser window. BOM enables programmers to perform several actions on
    the browser window, which is not directly related to and has no impact on the
    HTML document itself. BOM also deals with the browser objects, such as history,
    screen, navigator, and location.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: BOM is implemented differently in different clients.
  prefs: []
  type: TYPE_NORMAL
- en: Client-side JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JavaScript is primarily known as a client-side scripting language. Any language
    that is used to write programs or scripts that are executed in a client (any web
    browser such as Internet Explorer, Safari, Google Chrome, Mozilla Firefox, Opera,
    and so on) is called a **client-side scripting language**. These scripts make
    your HTML look interactive and dynamic. JavaScript enables user to interact with
    the web page's content and the client window itself.
  prefs: []
  type: TYPE_NORMAL
- en: Adding JavaScript into a web page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Mostly, JavaScript code is embedded into the HTML within the `<script>` tags
    and can be viewed by viewing the source of the page. A good practice to embed
    JavaScript into your page is to place all the scripts in a separate file (a JavaScript
    file having the `.js` file extension). Then, this file can be included on the
    page. When the page is interpreted, it will be treated the same as if it was embedded
    on the same page.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The JavaScript files must be of a `.js` extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since, the client is expecting HTML all the time, anything else such as styles
    or scripts have to be enclosed in their specific tags; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The JavaScript interpreter is evoked as soon as the browser's rendering engine
    discovers any `<script>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most of the time, JavaScript lies within the `<head>` tags of the web document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `type` attribute specifies that the code enclosed within these `<script>`
    tags is plain code written in JavaScript. It is not compulsory to mention the
    `type` attribute. The preceding code can be written without it as well and will
    work exactly the same.
  prefs: []
  type: TYPE_NORMAL
- en: Although `<script>` tags can be placed anywhere within an HTML document, another
    good practice is to place it at the end of the document before closing the `</body>`
    tag so that all the pages are loaded before any script executes.
  prefs: []
  type: TYPE_NORMAL
- en: Loading external JavaScript files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just like external CSS files are included into the web page, JavaScript can
    also be included into the webpage from external JavaScript files. Let''s take
    a look at the following HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `src` attribute is very similar to that used in the image `<img>` tags.
    It just mentions the reference path to the external JavaScript files, which are
    later included into the page. Do not add any other JavaScript code into the `<script>`
    tags, which import external JS files. If needed, place another `<script>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'Multiple external JS files can also be included, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In cases where external JavaScript libraries, such as jQuery and MooTools are
    used, the order in which the files are included has to be taken care of.
  prefs: []
  type: TYPE_NORMAL
- en: Writing our first program in JavaScript
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't worry; it is not at all an alien language. It is a high-level language
    and can be understood very easily as its statements, keywords, and other syntax
    is based on basic English. The simplest way to learn any programming language
    is to jump into it and play with its code. To get your feet wet in JavaScript,
    we will write a very basic JavaScript program.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following are the prerequisites that are required to write our first JavaScript
    program:'
  prefs: []
  type: TYPE_NORMAL
- en: A web browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A text/code editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A web document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Create a `index.html` file in any code editor you are comfortable with. Copy
    and paste the following code into your document. It is a simple HTML code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `<script>` tag after a `<title>` tag before closing the `</head>`
    tag in the head section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Insert `alert("hello world"); document.write('<h2>This text has been added by
    JavaScript!</h2>');` within the script tags.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `alert` attribute is a JavaScript function that creates a popup with the
    message written inside the quotes and parentheses. The message is treated as a
    string passed to the alert function. Similarly, `document.write` is a JavaScript
    function that outputs the given string on the webpage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Double-click on the `index.html` file to execute and open it in the browser.
    A popup will appear with an alert message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** to close the alert box and the webpage will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: This was your first step into the world of JavaScript, although it was very
    basic and did not show the real power of JavaScript. We will be practicing advanced
    JavaScript code in the chapters that follow.
  prefs: []
  type: TYPE_NORMAL
- en: Server-side JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The server is responsible for serving web pages in programming languages. The
    client sends a request to the server with a command, and the server responds to
    that client request. Server-side programming is the name given to programs that
    run on the server. We will study this in further detail in [Chapter 11](ch11.html
    "Chapter 11. Extending JavaScript and ECMAScript 6"), *Extending JavaScript and
    ECMA Script 6*.
  prefs: []
  type: TYPE_NORMAL
- en: The term *server-side* means that the control over webpages is handled by web
    servers rather than web pages. Web crossing runs that script and sends information
    in the form of HTML to each user's browsers.
  prefs: []
  type: TYPE_NORMAL
- en: '**Rhino** and **Node** are both commonly used to create servers. Server-side
    scripting is not downloaded to client''s browser.'
  prefs: []
  type: TYPE_NORMAL
- en: Server side
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Server side refers to operations that are performed by the server in a client–server
    relationship in a computer networking. The term *server side* can also be understood
    as anything outside of the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Client side
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Anything that is at *client side* means that it is running inside the web browser.
  prefs: []
  type: TYPE_NORMAL
- en: Scripting with Rhino
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Rhino is a JavaScript engine/interpreter developed and written in the Java language
    and managed by the Mozilla foundation ([http://www.mozilla.org/rhino](http://www.mozilla.org/rhino))
    as open source software. It enables and allows JavaScript program elements to
    access the complete Java API.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Rhino is a JavaScript open source implementation written in pure Java. Rhino
    is used to provide scripting to end users. Basically, Rhino converts JavaScript
    scripts into classes. It is used for server-side programming in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'MDN mentions the following: "Scripting Java has many uses. It allows us to
    write powerful scripts quickly by making use of the many Java libraries available."
    More information on things such as the `this` statement would extend the general
    statement and give some insight into the `this` statement''s implementation and
    its purpose.'
  prefs: []
  type: TYPE_NORMAL
- en: We can use Rhino scripting as a shell for acting like a debugger. This shell
    runs code in a batch mode. Batch mode refers to batch processing, which means
    automated processing without human intervention. Batch is the opposite of interactive.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Being open source, Rhino is a free program provided by Mozilla and can be downloaded
    from [http://www.mozilla.org/rhino](http://www.mozilla.org/rhino). Rhino is distributed
    as a JAR file. To start it with a command line, you can execute the Rhino JAR
    on a file from the command-line interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The 1.7R2 version of Rhino uses ECMAScript 3, while the 1.7R3 version of Rhino
    partially uses ECMAScript 5\. The latest stable release of Rhino is 1.7R5, which
    was released on January 29, 2015.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few functions with their usage and description:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Function | Usage | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `print` | `print(x)` | This is a global print function that prints to the
    console |'
  prefs: []
  type: TYPE_TB
- en: '| `version` | `version(170)` | This is used to tell Rhino that we want the
    JS 1.7 features |'
  prefs: []
  type: TYPE_TB
- en: '| `load` | `load(file1,file2…)` | This loads and executes one or more files
    of JavaScript code |'
  prefs: []
  type: TYPE_TB
- en: '| `readFile` | `readFile(file)` | This reads a text file and returns its contents
    as a string |'
  prefs: []
  type: TYPE_TB
- en: '| `readUrl` | `readUrl(url)` | This reads the textual contents of a URL and
    returns the output as a string |'
  prefs: []
  type: TYPE_TB
- en: '| `spawn` | `spawn(f)` | This runs `f()` or `load` and executes the `f` file
    in a new thread |'
  prefs: []
  type: TYPE_TB
- en: '| `runCommand` | `runCommand(cmd,[args..])` | This runs a system command with
    zero or more command-line args |'
  prefs: []
  type: TYPE_TB
- en: '| `quit` | `quit()` | This makes Rhino exit |'
  prefs: []
  type: TYPE_TB
- en: 'Here is a simple example that displays the message in the `strNote` string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You can find some more useful scripts at [http://www.rhinoscript.org/](http://www.rhinoscript.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Node.js
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Node.js is an implementation of JavaScript that allows JavaScript to run outside
    the browser and perform OS-based and network-based tasks. It is a runtime interface
    for JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'Node uses Google V8, which implements ECMAScript 5 standards, meaning that
    there is not much difference between the syntax of JavaScript and Node. For example,
    if you want to print out "Hello World" in the console, you will write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Node.js is a super fast interface that runs on the Google Chrome V8 engine.
    Node.js is easy to use, fast, and scalable. Like JavaScript client-side programming,
    Node.js provides abstraction. So, by this abstraction, Node.js can handle a huge
    amount of code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example or server-side coding in Node.js:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The language syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The language syntax is basically a means of communication. In a programming
    language, it's a formal way of communicating with algorithms, from both algorithms
    to programmer and programmer to machine. This is because a machine works on given
    instructions.
  prefs: []
  type: TYPE_NORMAL
- en: These instructions are meant to be written in a specific format, so that a machine
    could understand and compile it properly. That specific format is defined by some
    general rules of a programming language, known as language syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'A computer contains a list of instructions to be executed. Every computer language
    has different syntax and rules. To use different languages, we must have knowledge
    of their language syntax, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Syntax (a set of symbols and rules)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Semantics (for transforming term to term)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pragmatics (the particular construct of a language)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similarly, other languages in JavaScript have a unique syntax. JavaScript is
    not a language of Java; these are two different languages and the syntaxes for
    both languages are different. JavaScript is a powerful and expressive language.
    JavaScript's statements are separated by a semicolon at the end.
  prefs: []
  type: TYPE_NORMAL
- en: The JavaScript language syntax is much easy for beginners who have an idea of
    object-oriented programming. JavaScript is contained between the `<scripts>…</script>`
    tags. These are treated as HTML tags in any web browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can place your JavaScript code anywhere on your webpage, but I prefer the
    way of defining your script using the `<head>` tag. So, the structure of your
    script will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Basically, the `<script>` tag when written writing `<head>` tag, tells the browser
    that this scripts need to be executed first when the web page loads. Although,
    its a good practice to include javaScript is to place it at the bottom of a web
    page. There are two important attributes of this `script` tag.
  prefs: []
  type: TYPE_NORMAL
- en: Language
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `language` attribute will tell which language attribute you are using; typically,
    it's JavaScript. It is the default value if the attribute is absent.
  prefs: []
  type: TYPE_NORMAL
- en: Type
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `type` attribute is the same as the preceding explanation. This is not a
    required attribute. Its value is set as `text/javascript`, which shows that this
    scripting language is in use.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The character set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A character set is basically a list of characters recognized by computer hardware
    and software. It is represented by a number. Earlier ASCII was used as standard
    character set encoding for web pages. There were lots of character encoding problems
    that were almost solved after the arrival of HTML5 and XML. JavaScript provides
    support for different types of languages and their characters. The character set
    attribute shows the character encoding in external files. For HTML5, there is
    a default character set encoding is UTF-8.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some common values of character set encoding such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ISO-8859-1**: This is used to encode the Latin alphabet'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**UTF-8**: This is used for Unicode encoding that is compatible with ASCII'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, if your frontend page is in Spanish, and you do not use the character
    set property in your page, then it will not show some special characters in Spanish
    clearly. For this, you must declare a character set property in the top `<head>`
    tag of your page, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For this, you can also change your web server's configuration to serve as UTF-8\.
    Alternatively, we can send a content-type header to our server-side script.
  prefs: []
  type: TYPE_NORMAL
- en: In JavaScript, the `charset` property returns the character encoding of the
    current document. The syntax for reading the `characterSet` property from the
    document is `document.characterSet;`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can define the `characterSet` attribute in the `<script>` tag in the parent
    page of our website, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another way is to add the UTF-8 character set into the server configuration
    file (`.htaccess`), as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: So, character set encoding will apply to all JavaScript pages in your application.
  prefs: []
  type: TYPE_NORMAL
- en: Case sensitivity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: HTML is not a case-sensitive language, but XML and JavaScript are case sensitive
    languages.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JavaScript is a case-sensitive language. Case sensitivity in JavaScript does
    not only apply to variable names but also to JavaScript keywords and JavaScript's
    event handlers. For example, if you have the `firstname` and `firstName` variables,
    then these will be two different variables. In JavaScript, while calling a function,
    you must write its name exactly the same way as it was defined, matching the letter
    case.
  prefs: []
  type: TYPE_NORMAL
- en: A popular convention also used in JavaScript's primitive methods is to use camel
    case, in which a phrase is written with the first letter of the first word in
    lowercase and every successive word has an uppercase first letter, which makes
    it easier to read.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples of some functions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`toUpper();`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`toArray();`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Keywords in JavaScript are all in lowercase such as `while`, `for`, `if`, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'JavaScript has functions that are built into the language; they take strings
    and transform them to the uppercase or lowercase. This can make handling strings
    easier to manipulate when the input has varying cases. The following are the two
    parameters the functions can take:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.toUpperCase()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.toLowerCase()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `.toUppercase()` function will convert letters into uppercase and the `.toLowerCase()`
    function will convert letters into lowercase. These are the built-in and case-sensitive
    functions of JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Whitespaces and line breaks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whitespaces and line breaks are used to format and indent code in a neat and
    consistent manner so that the code becomes readable and easy to understand.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Spaces, Tabs, New lines which are not a part of a string are called whitespaces.
    JavaScript removes whitespaces and line breaks between tokens in the programs,
    Spaces and Line breaks that are a part of a string are not removed when script
    is executed.
  prefs: []
  type: TYPE_NORMAL
- en: In any text, there are three types of line breaks:`\r\n` or as `\r` or `\n`.
  prefs: []
  type: TYPE_NORMAL
- en: 'These line breaks occur in different types of operating systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '`\r\n` is usually created on Windows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\n` is usually created on OS X'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to remove line breaks from any text, then we must deal with all
    types of line breaks because the text could be from these three sources Windows,
    Linux, and Mac.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have several methods to remove line breaks from any text. For example, we
    have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In this code, we have used a regular expression for removing line breaks from
    our text. This will remove line breaks `\r\n`, then `\n`, and finally `\r`. We
    used the suffix `gm` at the end of the regular expression because `m` shows that
    line breaks should be removed from all the text and `g` shows that it should be
    done more than once.
  prefs: []
  type: TYPE_NORMAL
- en: Regular expressions are discussed in detail in [Chapter 8](ch08.html "Chapter 8. JavaScript
    Implementations, Syntax Basics, and Variable Types"), *JavaScript Expressions,
    Operators, Statements, and Arrays*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, there are some spaces between texts; you can remove these whitespaces
    using JavaScript. There are different functions of JavaScript for removing all
    leading spaces from a string; you can use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This piece of code uses a regular expression, which checks multiple occurrences
    of white spaces at beginning and end of string.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `g` in this regular expression shows that the global search should be performed
    while checking the text. There are more methods, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The `string.replace()` function is used to replace all leading whitespaces with
    an empty string
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `str.trim()` function is used to remove spaces from both sides of a string
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Unicode escape sequence
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Every Unicode escape sequence consists of six characters with a much defined
    syntax: four characters following `\u`. Smaller code is accompanied by leading
    zeroes but the length of the sequence is maintained. For example, `\u00a9` has
    two leading zeros. Similarly, the copyright symbol can be represented as `\u00A9`.'
  prefs: []
  type: TYPE_NORMAL
- en: Any character with a code point that is less than 65536 can be escaped using
    the hexadecimal value of its code point, prefixed with `\u`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A code point (also known as **character code**) is a numerical representation
    of a specific Unicode character.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The JavaScript Unicode escape sequence allows you to place special characters
    in a string. Browsers that support JavaScript can use the escape function.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the next line within the same string, we can use `\n`. Let''s take a
    look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'To add quotes within a string, we can use something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This Unicode escape sequence starts with a backslash (`\`) followed by characters.
    This backslash is the escape sequence character. To insert a backslash itself,
    just add another backslash "`\`" before the next one. Also called double backslash
    (`\\`).
  prefs: []
  type: TYPE_NORMAL
- en: You can specify a Unicode character by `\uaaaa`, where `aaaa` is a hexadecimal
    number. So a Unicode escape character can represent a 16-bit character.
  prefs: []
  type: TYPE_NORMAL
- en: 'A Unicode escape sequence represents a Unicode sequence, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A backslash (`\`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A character (`u`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A hexadecimal number (`0-9`)(`a-f`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, the word cat will be represented as `\u732b`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A Unicode escape sequence can also be used in comments and literals. Consider
    the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The hexadecimal part of this kind of a character escape is case-insensitive,
    which means `\u041a` and `\u041A` are equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also represent an escape sequence to represent a Unicode character
    ["`\u03b1`"] as ["`a`"].The Unicode escape for the character `é`, for example,
    is `\u00E9`, and the following two JavaScript strings are identical:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The `==` operator tries to convert the values to the same type before testing
    if they're the same; whereas, `===` does not do this. It requires objects to be
    of the same type to be equal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some examples of the escape sequence for some characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Unicode | Escape sequence | Meaning |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `\u000B` | `\v` | Vertical tab |'
  prefs: []
  type: TYPE_TB
- en: '| `\u000A` | `\n` | New line |'
  prefs: []
  type: TYPE_TB
- en: '| `\u0009` | `\t` | White spaces |'
  prefs: []
  type: TYPE_TB
- en: '| `\u000C` | `\f` | Form field |'
  prefs: []
  type: TYPE_TB
- en: '| `\u000D` | `\r` | Line terminator |'
  prefs: []
  type: TYPE_TB
- en: '| `\u0020` |   | Whitespace |'
  prefs: []
  type: TYPE_TB
- en: Normalization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Unicode standard (which can be found at [http://unicode.org/standard/standard.html](http://unicode.org/standard/standard.html))
    defines the most acceptable pattern of encoding characters and the normalization
    method. Javascript presupposes that the code it is reading and interpreting has
    all the Unicode representations normalized. ECMAScript V6 has a string prototype
    function (`string.prototype.normalize()`) to fix any unaddressed encodings.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ECMAScript 6 introduces `String.prototype.normalize()`, which takes care of
    Unicode normalization.
  prefs: []
  type: TYPE_NORMAL
- en: Identifiers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Identifiers are used to give names to functions and variables. There are certain
    rules for these identifiers and these rules are the same for all programming languages.
    Identifiers can contain letters and a digest of the complete Unicode character
    set. These JavaScript identifiers include variables, objects, functions, properties,
    methods, events, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the rules for identifiers:'
  prefs: []
  type: TYPE_NORMAL
- en: Identifiers cannot start with a number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifiers can contain numbers, letters, underscore, and the dollar sign (`$`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be of any length
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are case-sensitive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We must not use reserved words for identifiers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can also use Unicode characters as identifiers. Unicode escape sequences
    such as `\uaaaa`, can also be used as identifiers. We must avoid using global
    methods or properties as identifiers.
  prefs: []
  type: TYPE_NORMAL
- en: 'A best practice while writing identifiers is to use one word and use camel
    case. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: myNote
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: myNewNotebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: $sum
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `var` variable is a valid identifier name, but it is an invalid identifier
    because of the reserved word. If you use a valid identifier, then your browser
    will handle it correctly; however, if you use an invalid identifier, your browser
    will show a warning recognizing it as a bug.
  prefs: []
  type: TYPE_NORMAL
- en: Reserved keywords
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Reserved words are keywords in JavaScript. There are some words that cannot
    be used as a function or a variable name. These reserved words are also identifiers.
    These reserved words are reserved for JavaScript engine. If you use these reserved
    words as a function, variable, or a method name, then your browser will show a
    warning and your script may fail.
  prefs: []
  type: TYPE_NORMAL
- en: Reserved words are basically keywords that have special meaning in JavaScript,
    for example, `break`, `case`, `do`, `delete`, `else`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three types of reserved words:'
  prefs: []
  type: TYPE_NORMAL
- en: Protected reserved words
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New reserved word
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Future reserved words
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Protected reserved words
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Protected reserved words cannot be used as a variable or a function name. If
    we use these, then there will be a compilation error in it. Here are a few protected
    reserved words:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Break` | `case` | `catch` |'
  prefs: []
  type: TYPE_TB
- en: '| `class` | `const` | `Continue` |'
  prefs: []
  type: TYPE_TB
- en: '| `Debugger` | `Default` | `Delete` |'
  prefs: []
  type: TYPE_TB
- en: '| `do` | `Else` | `Export` |'
  prefs: []
  type: TYPE_TB
- en: '| `Extends` | `False` | `If` |'
  prefs: []
  type: TYPE_TB
- en: '| `Import` | `in` | `var` |'
  prefs: []
  type: TYPE_TB
- en: New reserved words
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'JavaScript also released new keywords, and these reserved words have a special
    meaning for the current version of JavaScript. These reserved keywords can also
    be used as identifiers. Once you declare it as an identifier, then it will forget
    that it was a keyword. Here are some examples of new reserved keywords:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Abstract` | `Boolean` | `byte` |'
  prefs: []
  type: TYPE_TB
- en: '| `char` | `enum` | `final` |'
  prefs: []
  type: TYPE_TB
- en: '| `doubke` | `implements` | `int` |'
  prefs: []
  type: TYPE_TB
- en: '| `interface` | `internal` | `long` |'
  prefs: []
  type: TYPE_TB
- en: '| `set` | `short` | `static` |'
  prefs: []
  type: TYPE_TB
- en: '| `uint` | `ulong` | `ushort` |'
  prefs: []
  type: TYPE_TB
- en: Future reserved words
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Future reserved words are proposed for future extensions of JavaScript. These
    are also used as an identifier in the current version of JavaScript. When you
    choose a word as an identifier, it is also important to note whether it is already
    the name of JavaScript reserved keyword. Here are some examples of future reserved
    words:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `asset` | `event` |'
  prefs: []
  type: TYPE_TB
- en: '| `namespace` | `require` |'
  prefs: []
  type: TYPE_TB
- en: '| `transient` | `violate` |'
  prefs: []
  type: TYPE_TB
- en: '| `ensure` | `goto` |'
  prefs: []
  type: TYPE_TB
- en: '| `native` | `synchronized` |'
  prefs: []
  type: TYPE_TB
- en: '| `use` | `Invariant` |'
  prefs: []
  type: TYPE_TB
- en: Comments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In any programming language, comments are used to make your code readable. In
    JavaScript, comments are used to explain JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: Another use of comments is to write them to add hints, suggestions, and warnings
    into our JavaScript code, so if someone other than the developer wants to change
    or modify your script, they can easily modify it. Use of comments in a script
    is considered as a best practice. Comments are also used to disable the execution
    of some parts of code. In debugging, comments are very helpful, so it is a valuable
    debugging tool for developers.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three different types of comments you can put into your JavaScript
    script:'
  prefs: []
  type: TYPE_NORMAL
- en: Multiple-line comments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One-line comments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The HTML comment opening sequence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple-line comments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can write multiple lines between the comment boundaries; this block of code
    will not be executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: One-line comments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Adding two forward slashes in the beginning of the line comments it. The text
    between `//` and the end of the line is commented and will not be compiled. Double
    forward slash is used to comment one line at a time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The HTML comment opening sequence
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JavaScript treats the HTML comment's opening sequence, that is, `<!-- as //
    comment`. It does not recognize the closing sequence of HTML comment, that is,
    `-->` HTML styled comments are not usually used within JavaScript code blocks
    as `//` is much handy. It is recommended not to use HTML comments in JS as that
    was an old practice. They were used to hide incompatible JavaScript code from
    old browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Literals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Literals are used to represent values for the different data structures in
    JavaScript; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`3.14`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`to be or not to be`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following sections, we will cover the literal types for JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Object literals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An object literal is used to hold values in an object.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: An object literal holds pairs of comma-separated lists of property names and
    associated values, and they are enclosed within `{}`. It is possible for an object
    literal to have no values as well. In an object literal, each `name:value` pair
    is separated by a comma.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of an object literal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Array literals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An array literal contains a list of expressions that represent an array element.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Array literals contain values inside an array. They are placed inside array
    brackets `[]` and each element is separated by a comma (`,`). Just like an object
    literal, an array can be empty and contain `0` elements. When you create an array
    literal it is specified values as its element and its length is specified as a
    number of arguments of this array. Here is an example of an array literal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Boolean literals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As the name suggests, a Boolean literal has Boolean values, so its value is
    either `true` or `false`.
  prefs: []
  type: TYPE_NORMAL
- en: Integers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Integer literals must contain values that are only integers.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In JavaScript, an integer literal must contain a digit from 0 to 9\. Commas
    and brackets are not allowed in integer literals. Integers can be negative or
    positive. If there is no sign present then it is consider as positive.
  prefs: []
  type: TYPE_NORMAL
- en: Floating point literals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A floating point literal is used to contain floating numbers—numbers that have
    a decimal point, fraction, or exponent.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Examples of floating point literals are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: String literals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: String literals, as the name suggests, hold only string values, that is, values
    placed inside a pair of quotation marks.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A string literal contains characters placed inside quotation marks. You can
    also create a null string to not contain anything. Two or more strings can be
    joined together using the `+` sign. Special characters can be inserted in the
    string. A few special characters are `\n`, `\r`, `\b`, `\t`, to name a few.
  prefs: []
  type: TYPE_NORMAL
- en: 'A few examples of string examples are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Statements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JavaScript also supports a set of statements used to identify a set of instructions
    and carry out tasks. There are different types of statements in JavaScript such
    as `if`, `for`, `while`, and so on. The basic purpose of using these statements
    is to evaluate or check whether certain conditions are being met. These statements
    are common for all programming languages.
  prefs: []
  type: TYPE_NORMAL
- en: Conditional statements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As the name suggests, conditional statements are based on conditions and the
    `if` and `then` rule. For example, "if you work hard, you will get rewarded".
    Here, working hard is the condition of getting rewarded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The loop statement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In a loop statement, a condition is provided within a set of parentheses. If
    the condition evaluates to `true`, then the loop will continue working, and if
    the condition equates to `false`, the program will jump to the next line after
    the loop. An exception is the `do while` loop, which will always execute at least
    once. There are different types of loops in programming languages; they are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The for loops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `for`/`in` loops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `while` loops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `do/while` loops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is an example that shows how the `while` loop is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Loops are covered in more detail in [Chapter 8](ch08.html "Chapter 8. JavaScript
    Implementations, Syntax Basics, and Variable Types"), *JavaScript Expressions,
    Operators, Statements, and Arrays*.
  prefs: []
  type: TYPE_NORMAL
- en: Object manipulation statements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Object manipulation statements in JavaScript are used to access the object's
    properties and methods at runtime to perform certain functions. JavaScript uses
    the `for…in` and `with` statements to manipulate objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example that shows how the object car can be manipulated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Exception handling statements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `try`, `catch`, `throw`, and `finally` statements are used in JavaScript
    exception handling. Let''s take a look at the following description:'
  prefs: []
  type: TYPE_NORMAL
- en: The `try` statement tests code for errors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `catch` statement usually follows the `try` statement and catches and handles
    the error found in the `try` block.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `throw` statement creates custom errors or alerts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `finally` statement executes code after `try` and `catch`, regardless of
    the result. Usually, this block of code is used to clean up and release resources.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is an example showing how exceptions are handled using the `try` and `catch`
    block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Optional semicolon
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Semicolons in JavaScript are used to separate statements from each other. Let's
    say, if you have two different statements and you just write them, then it will
    not be understandable. So, JavaScript uses semicolons to separate statements.
    It will make your code clear and meaningful. If you do not use semicolon in JavaScript,
    then it will make your statements complex, meaning that the end of one of your
    statements could be the start of your statement.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Placing semicolons in your code can help you prevent a lot of errors. Absence
    of semicolons, from your code block will treat it as a single line of code when
    compiled resulting in several errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'JavaScript does not consider a line break as a semicolon. Here is an example
    of the use of semicolons in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A semicolon in JavaScript is not a terminator; these are just separators used
    to separate statements.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript automatically inserts a semicolon at the end of your statement. You
    should not put a semicolon after the closing curly bracket. Similarly, at times,
    putting a semicolon after round brackets `()` is also a bad idea, and importantly,
    the code will not run.
  prefs: []
  type: TYPE_NORMAL
- en: 'If there is a `for` loop in your script, then put a semicolon after the first
    and second statements and don''t put a semicolon after third statement. It will
    produce a syntax error. For example, if you have a `for` loop like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will give you a syntax error. The right way of doing this
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are some rules for semicolons:'
  prefs: []
  type: TYPE_NORMAL
- en: Insert a semicolon when an assignment operator is used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insert a semicolon after rite operand of assignment operator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insert a semicolon after a closing round bracket of a function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insert a semicolon after keywords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you declare a variable insert a semicolon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A computer works on a set of given instructions; it cannot differentiate between
    a number and a character. For example, if you write some numbers, such as `12345`,
    and some character, `abcsd`, it cannot tell integers from characters. So, data
    types are used for this. The datatype tells which type of data is being used or
    referenced in a statement.
  prefs: []
  type: TYPE_NORMAL
- en: In all programming languages (C, C++, Java, JavaScript), data types are used.
    Every data type has a specific function of storing data. Many classical computer
    programming languages require you to specify the data type when you declare a
    data object. JavaScript does not have this requirement. Similarly, some databases
    require declaration of the data types for storing data.
  prefs: []
  type: TYPE_NORMAL
- en: 'JavaScript is a dynamic language. This means that if you declare an object,
    then its data type can be changed dynamically, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: In the first statement, the data type is an integer; in the second statement,
    the data type is a character; and in third statement, the data type is a Boolean.
    So, in JavaScript, the data type dynamically changes while the program is being
    processed.
  prefs: []
  type: TYPE_NORMAL
- en: There are six major data types defined in ECMAScript standard.
  prefs: []
  type: TYPE_NORMAL
- en: '`Null`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Undefined`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Boolean`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`String`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Symbol`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Number`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JavaScript considers integer values and floating point values to be the same.
    It doesn't distinguish between the two. All numbers in JavaScript are represented
    as floating point type values.
  prefs: []
  type: TYPE_NORMAL
- en: Here, `Null` and `undefined` are trivial data types in JavaScript because each
    of these defines single values. JavaScript also supports a composite data type,
    which is known as the object. Objects in JavaScript are treated as an associative
    array.
  prefs: []
  type: TYPE_NORMAL
- en: Functions in JavaScript are also treated as objects. So, functions can also
    be stored as a variable.
  prefs: []
  type: TYPE_NORMAL
- en: The typeof operator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Operators are used to find the type of a JavaScript variable. For example,
    you have two numbers variables, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Here, `5` and `1` `are` operands and `+` is an operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax of this operator is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Typeof` operator is a unary operator; it returns a string that indicates
    the typeof expressions. The `typeof` operator returns information as a string.
    There are six possible values that can be returned as a string. They are `string`,
    `number`, `object`, `function`, `Boolean`, and `undefined`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some examples of the `typeof` operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '`typeof("5"+"1")`: This will return a string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`typeof(5+1)`: This will return a number'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`typeof(5+"1")`: This will return a string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`typeof(5*"1")`: This will return a number'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `typeof` operator is not a function. Operands are written in round brackets,
    so it looks like a function, but these are not functions. When you use the `typeofnull`
    operator, it returns an object.
  prefs: []
  type: TYPE_NORMAL
- en: The undefined type
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In JavaScript, an empty variable or a variable without values has an undefined
    value. And, `typeof` is also undefined. If you want to empty a variable, you can
    assign it an undefined value; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In JavaScript, `undefined` is a property of the `global` object. This means
    that the value is undefined and we declare it in the global scope of the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are basically three `property` attributes of `undefined`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Writeable`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Enumerable`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Configurable`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These three `property` attributes show that, for modern browsers, these properties
    are not writeable, enumerable, and configurable. And, we should avoid overriding
    these properties. The `undefined` type is a primitive type in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Undefined` type shows that a variable has not been assigned a value. All
    browsers, such as Firefox, Google Chrome, Opera, and Safari, support the `undefined`
    property according to ECMAScript.
  prefs: []
  type: TYPE_NORMAL
- en: Undefined is a built-in type in the JavaScript library. Every type of function
    for which the value is not defined is consider as an `undefined` type. For example,
    if you have a function without the `return` statement, the result of that function
    will be considered as undefined.
  prefs: []
  type: TYPE_NORMAL
- en: Being a property of a global object, its value is initially undefined. We can
    access it as a global variable, although it's a global property. A simple idea
    of an undefined type is when a variable is not defined in your script, but it
    does exist and you are considering it as a global variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Whenever a function executes in a script, and it finishes executing without
    returning a value, then it returns the `undefined` type, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Here, in this example, the variable `abc` is defined but no value has been assigned
    to it. Notice that `undefined` type is a primitive property of a object declared
    in a global scope. Here, defining it as a global object does not mean that it
    cannot be redefined. It can be redefined according to ECMAScript. So, `undefined`
    is not a reserved word; it can be used as a variable name in other scopes outside
    of its global scope.
  prefs: []
  type: TYPE_NORMAL
- en: When you use comparison operators, you can also declare the `undefined` type
    there to know whether a variable has a value or not.
  prefs: []
  type: TYPE_NORMAL
- en: The null type
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In JavaScript, `null` shows an empty value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The data type of `null` is an object in JavaScript. `Null` shows that value
    does not exist in the script. When you want to empty a value, you declare it as
    a `null`. `Null` can be expected in places where we are expecting some values,
    but we find nothing.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a big difference between the `null` and `undefined` type. The data
    type of `null` is an object and the data type of `undefined` is undefined. In
    the `identity` operator, `null` cannot be undefined, but in the `equality` operator,
    `null` can be undefined. This is because the `equality` operator will cast the
    value on the left to the same type before making a comparison.
  prefs: []
  type: TYPE_NORMAL
- en: 'Undefined means a variable is declared but values is not assigned. For instance,
    `var abc`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '*"You may wonder why the typeof operator returns object for a value that is
    null. This was actually an error in the original JavaScript implementation that
    was then copied in ECMAScript. Today, it is rationalized that null is considered
    a placeholder for an object, even though, technically, it is a primitive value."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*- Professional JS For Web Developers, Wrox Press*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The number type
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is only one type of number in JavaScript. Numbers can be written with
    or without decimals. Much larger or smaller numbers can be written with scientific
    notation.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Unlike other programming languages where we have several numeric data types
    like integer, float, double, and so on. JavaScript has a Number data type for
    all numeric values. JavaScript has three symbolic values for this type: infinity,
    and NaN (not a valid number). NaN defined in the number type in JavaScript shows
    that it is a reserved word, and its value is not a number in reality.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is no difference between an integer and a floating point value in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'Integer values can be positive numbers, 0, or negative numbers. They can be
    of any base number like base 10, 16, or 8\. But mostly, in JavaScript, numbers
    are written to base 10\. To check the largest or smallest number representable
    or available in JavaScript, you can use constants of maximum and minimum values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Firefox or Chrome, it is `Number.MAX_VALUE`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the number type, you only check a number that has two representations, for
    example, if you have the number 0, then it has two representations—one is -0 and
    the other is +0\. JavaScript numbers can be written with or without a decimal
    point; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'If the number is too large or too short, then we use a scientific notation''s
    exponent for it. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: The limit is `1e+21` (the console displays a scientific notation from the power
    of 10).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In other programming languages, we can define numbers as `float`, `integer`,
    `long`, and `short`. But, in JavaScript, there is only one data type for numbers,
    that is, `numbers`. These numbers follow the IEEE standard and also these numbers
    are double-point precision.
  prefs: []
  type: TYPE_NORMAL
- en: The Boolean type
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In programming languages, the `Boolean` type works on the Boolean logic in which
    variables return results as `true` or `false`. These `true` and `false` are basically
    literals. The Boolean logic is used usually in comparison operators, for example,
    lesser or greater than, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Any variable can be assigned a `Boolean` value written as `true` or `false`
    in lower case.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In JavaScript, when you declare a `Boolean` data type to a variable, then the
    variable should not have any quote. Here is how you should use boolean assignment:
    `var abc = "true"; //string assignment` and `var abc = true; //boolean assignment`.
    The `Boolean` variables are also used in the `if`, `if` then `else`, and `while`
    loop.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example showing how Boolean variables are used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: The `Boolean` operators are also used when there is a lack of or presence of
    a value. For example, if we have a checkbox in our script, then its value is present
    or not depending on whether it is checked or not.
  prefs: []
  type: TYPE_NORMAL
- en: In other data types, there is an unlimited number of values a variable can take,
    but for the `Boolean` data types, there are only two—`true` and `false`. This
    data type is usually used when we have a controlled structure such as a comparison,
    the `if else` loop, and the `while` loop. These are controlled structures. The
    `If` and `else` statement performs one action if the value is `true`; otherwise,
    it will perform another action, that is, `false`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use the `Boolean` data type as a comparative expression. A comparative
    expression is an expression that evaluates `0`, `null`, and `undefined` as `false`
    and other values as `true`. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, the result of `A+B` is stored in `C` first and then this expression
    is evaluated. If you want to check that the `C` value is equal to `A+B`, then
    you must use the comparison operator for this, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The string type
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In JavaScript, anything that is written between quotes is treated as a string.
    Double or single quotes can be used.
  prefs: []
  type: TYPE_NORMAL
- en: Strings literals can be defined in two ways. One way is to write a string in
    double quotes and the other way is to write a string in single quotes.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is no special type of representation of a single character in JavaScript.
    If you want to represent a single character in JavaScript, then you must define
    a single character string, for example, the character `a`. An empty string is
    a zero length string, for example "".
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In JavaScript, the text data is represented in the form of the `string` data
    type. In programming languages, string is a combination of characters and numbers.
    A JavaScript string is an ordered sequence of zero or more characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The restriction for writing these strings is that you must use the same quotation
    mark at the beginning and end. This means that a string that starts with a single
    quote must end with a single quote, and the same rule applies for double quotation
    marks. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: If there is a problem in a string and it cannot show some characters. For a
    representation of these characters, there is a technique in JavaScript—we define
    the escape sequence for this. This means that the character which we cannot write
    directly is written using an escape sequence. For example, if we want to insert
    a quotation mark within a string, we can do it by preceding quotation mark with
    a backslash. It is known as escaping the quotation mark. Similarly, string literals
    are unable to represent nonprinting characters such as tab, new line, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'An escape sequence is a combination of characters starting with a backslash.
    Some escape sequences are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '\b: BackspaceDeletes the previous character and moves cursor one space backwards.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '\n: New lineEnds the current line and moves the cursor to a new line. If used
    in the middle of a string it will move the text after `\n` to new line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '\f: Form feedIt is a page-break ASCII control character. It tells printer to
    continue printing on new page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '\v: Vertical tabIt was used to control the vertical movement on page. It is
    rarely used now.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '\t: Horizontal tab control the insertion of text horizontally on page. It is
    inserted usually using the *Tab* key on the keyboard.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '\" : Double QuotesA double quotes is preceded with a backslash to insert it
    within a string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '\'' : Single QuotesA single quotes is preceded with a backslash to insert it
    within a string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '\\: Backslash to insert a backslash within a string we escape it with another
    backslash.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is an example of this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Its output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: The object type
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Object is a sequence of primitive and, sometimes, reference data types stored
    as name-value pairs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In JavaScript, objects are written into curly brackets. Each item of an object
    is called a **property**. Property values can be defined as any valid data type
    as well as functions or methods. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'We can say that the object is a list of items, and each item in the list has
    some method and function stored as its name-value pair:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In JavaScript, everything is like an object, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: Regular expressions are objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Numbers are objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Strings are objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mathematical notations are objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arrays and functions are objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Objects are objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The property name of any item can be a string or number. When a property is
    a number, then the way of writing this property is different; we will write it
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: In JavaScript, objects are used to store data and for writing your own custom
    methods and functions. Primitive values are, for example, `null`, `undefined`,
    `true`, and `false else`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Object properties are basically variables that are used in methods and function
    internally. They can also be global variables for the whole page. There is a difference
    between a method and a function. A function is a standalone unit of an object,
    but a method is attached to an object and it is used with `this` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Variable, scope, and memory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we describe a variable in JavaScript, there is no limit to how much data
    this variable holds. The maximum is described by the browser''s capacity depending
    on how much data it can hold. Let''s take a look the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: We can define a variable in JavaScript using the `var` keyword. We can define
    the value of a variable immediately or later. A variable that we define outside
    the boundary of a function is a global variable.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Creating too many global variables in JavaScript is a very bad approach. The
    major reason why global variables are discouraged in JavaScript is because in
    JavaScript, all the code shares a single global namespace, also JavaScript has
    implied global variables, that is, variables that are not explicitly declared
    in local scope are automatically included with global namespaces. Relying too
    much on global variables can result in conflicts between various scripts on the
    same page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Every function in a script can access a global variable. When you define a
    variable in a function, then its scope is inside that function. Let''s take a
    look at the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The scope of a global variable never stops during the execution of the whole
    page even it is not needed.
  prefs: []
  type: TYPE_NORMAL
- en: If you fail to write `var` inside the function, then this variable is considered
    as a global variable. If you define a variable with the same global variable name,
    then it will be considered as a global variable.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript dynamically allocates memory to variables. When the scope of these
    variables is dereferenced or finished, it is automatically removed from the memory
    by the garbage collector. So, its disadvantage is that the unwanted variables
    remain in the memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to save memory:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the function scope
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dereferencing these variables manually
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The use of the function scope is more appropriate as variables get dereferenced
    when the function ends, thus saving memory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Variable declaration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JavaScript variables can be identified by unique names. These unique names are
    known as **identifiers**. Variables in JavaScript are used to store information.
    Identifiers can be of any length and size, for example, `a`, `b`, `myName`.
  prefs: []
  type: TYPE_NORMAL
- en: When you declare a variable in JavaScript, the machine will save it in the memory
    so that you can store or retrieve data from memory when needed. Variable names
    should be unique in the script.
  prefs: []
  type: TYPE_NORMAL
- en: The rules to declare variable names in JavaScript are the same as those for
    identifiers, as discussed previously.
  prefs: []
  type: TYPE_NORMAL
- en: 'When a code starts its execution, it first processes the variable declaration.
    These variables can be declared globally as well as within a function. We can
    declare multiple comma-separated variables, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'When we store data into a variable, this process is called **variable initialization**.
    We can initialize a variable at the time of its creation or later when we want
    to use it, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Here, in this example, the variable `a` stores the value `1`, and `b` stores
    `2`, and then we create the variable `c` and define its value later.
  prefs: []
  type: TYPE_NORMAL
- en: The variable scope
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A variable scope is a frame where a variable exists in a program. We can define
    a scope of a variable in a program. Basically, the scope is a set of methods,
    functions, and objects that we have access to.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two scopes of variables in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: Local scope variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Global scope variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Local scope variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A variable when defined inside a function is called a local scope variable,
    as this variable can only be accessed into this function. Function variables will
    be local to this variable.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'For a variable, which is defined in the local scope, a variable of the same
    name can be used in a different function. When a function starts, the local variable
    is created and when the function ends, the local variable is deleted. In JavaScript,
    always declare variables before using them; failing to do this will throw some
    exceptions. In a function, if you have a local and a global variable with the
    same name, then the local variable will get priority over the global variable.
    So, avoid using the same variable name. Let''s take a look at the following code
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Global scope variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A global variable can be declared anywhere in a JavaScript program. They can
    be accessed from everywhere. A global scope variable remains in the memory throughout
    the execution of scripts on the page. This results in memory depletion.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Basically, global variables are window objects. Global variables are generally
    defined outside of the function and all functions in a webpage can access this
    global variable. If you give some value to a variable which is not declared, then
    this variable will be considered as a global variable. When you close a web page,
    the global variable will be deleted. For frontend developers in HTML, the window
    object is a global variable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Primitive and reference values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two types of values a variable can have:'
  prefs: []
  type: TYPE_NORMAL
- en: Primitive type values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reference type values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Primitive type values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Generally objects are aggregated from properties and those properties can be
    used to reference the object. Primitive (value, data type) is not an object and
    has no methods associated to it.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In JavaScript, there are five types of the primitive type: `string`, `number`,
    `null`, `undefined`, and `Boolean`. A primitive value is stored directly in the
    stack. These values are stored in the same location from which they are accessed.
    Because of its fixed size, it can be easily manipulated.'
  prefs: []
  type: TYPE_NORMAL
- en: Reference type values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Reference type values are specialized objects similar to arrays and functions
    stored in a heap. A pointer is used to locate their location into the memory.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In JavaScript, a variable holding a reference type value is stored in the heap
    memory. These objects cannot be easily manipulated because they contain arbitrary
    elements and properties. When a reference value is passed to a function, the function
    modifies its values or contents, and that change can be seen by the object, which
    calls the function and other functions that have references to the object.
  prefs: []
  type: TYPE_NORMAL
- en: The execution context and scope
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The scope and context are not the same things. Every function in JavaScript
    has a scope and a context. When we declare a function in JavaScript, this function
    can be accessed in different and various contexts and scopes. JavaScript follows
    design patterns for scopes and context.
  prefs: []
  type: TYPE_NORMAL
- en: The main difference between a scope and context is that scope is function based
    and context is object based. The scope is used to access a function when it is
    invoked. Whereas the context is used with the `this` keyword, so it is basically
    a reference type.
  prefs: []
  type: TYPE_NORMAL
- en: 'The scope is associated with the execution context when the execution context
    starts. There is a chain of scope with it, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'In JavaScript, the environment in which the code is executed is classified
    into the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Global code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Function code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eval code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The global code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The global code is a default environment where the code is executed for the
    first time, that is, the external `.js` files and local inline code are loaded.
  prefs: []
  type: TYPE_NORMAL
- en: The function code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The function code is the environment in which flow control enters the function
    body during the code execution. Every return from the function exits the current
    execution context.
  prefs: []
  type: TYPE_NORMAL
- en: The eval code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The code is supplied to built-in `eval` functions. The `eval` code calls the
    context and creates an execution context.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: In this example you call the function with the context you want and run `eval`
    within that function.
  prefs: []
  type: TYPE_NORMAL
- en: Garbage collection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is no separate memory management in JavaScript. A browser decides when
    a cleanup is needed. Garbage collection is basically knowing if the variables
    are still being used or will be used in future throughout the program execution
    and if not collect and remove them. In simple words, the track of reference made
    to an object is kept in background. once it becomes idle or reaches zero it can
    be collected by the GC.
  prefs: []
  type: TYPE_NORMAL
- en: We can clean memory manually, but in some cases, there is no need for manual
    memory cleaning. We cannot force JavaScript to clean memory because this task
    is done on runtime by the garbage collector. Some heavy applications, such as
    computer games, require a lot of memory and slowdown your system; so, in this
    case, it only depends on your code and how you structured your application code
    for use of computer memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can structure your code by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Objects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you declare an object, try to reuse that object by deleting its properties
    and restoring it to an empty object such as `{}`. This process is known as recycling
    the objects. When an object is created for the first time (`new foo();`), memory
    is allocated to it. So, if an object is already declared, we can reuse it in our
    script.
  prefs: []
  type: TYPE_NORMAL
- en: Arrays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you use an array in your script, clear that array after using it. Assigning
    `[]` to an array is often used as a shorthand to clear it, but it actually creates
    a new empty array and garbages the old one. You can set the array length to `0`,
    (`arr.length = 0;`); this will also clear the array but while reusing the same
    array object.
  prefs: []
  type: TYPE_NORMAL
- en: Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you need to call a function more than one time, then you can optimize our
    code by assigning a permanent variable to the function rather than calling it
    again and again.
  prefs: []
  type: TYPE_NORMAL
