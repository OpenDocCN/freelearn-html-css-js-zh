- en: Chapter 7. Fetching Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Fetching remote resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetching with `FetchEvent`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetching a JSON file during service worker installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proxying
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prefetching
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look at how to request files and resources from different
    sources, which in more technical terms perform fetch actions against different
    resources. We will look at fetching a JSON file during the service worker installation,
    using the service worker as a proxy middleware, and prefetching a list of specific
    resource URLs during the installation process, so that you have the resources
    handy before loading the page.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start off this chapter by looking at a simple example of fetching a resource
    from two different resources.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching remote resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fetching remote resources can be done in different ways. In this recipe, we
    are going to look at two standard ways of fetching a remote resource using a service
    worker, with and without **cross-origin HTTP requests** (**CORS**).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about CORS at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the *Setting up GitHub pages for
    SSL* recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service Worker Basics"),
    *Learning Service Worker Basics*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `index.html`, `index.js`, `service-worker.js`, and `style.css` file
    from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/07/01/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/07/01/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open up a browser and go to `index.html`. You will see two images fetched from
    two different protocols, `https` and `https-acao`:![How to do it...](img/B05381_07_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At the beginning of the `index.js` file, we are testing two different protocols
    for loading resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '`https`: HTTP with **Secure Socket Layer** (**SSL**) protocol'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`https-acao`: SSL protocol with the `Access-Control-Origin=*` header'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will use two different URLs, which will be loaded multiple times:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also use two different methods for fetching resources, with or without
    CORS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will check to see whether the service worker is registered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If that is not the case, we register it and reload the page to ensure that
    the client is under the service worker''s control:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The two `for` loops go through the provided protocols array and make requests
    for each protocol. They also build a DOM image element with each URL and go through
    each mode of the `fetchModes` array.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `init` object contains any custom settings that you may want to apply to
    the request. Let''s look at the properties of the `init` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '`method`: The request method, for example, `GET`, and `POST`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mode`: The mode you want to use for the request, for example, `cors`, `no-cors`,
    or `same-origin`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cache`: The cache mode you want to use for the request, for example `default`,
    `no-store`, `reload`, `no-cache`, `force-cache`, or `only-if-cached`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `buildImage` function takes two arguments, `protocol` and `url`. It creates
    an image element on the fly and attaches the URL as the source of that image.
    Then it goes on to add that image to the DOM tree, where the ID is one of `https-acao-image`,
    `https-image`, or `http–image`. JavaScript has no control over the URL handling
    at this point; the browser handles the URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Images will be rendered for HTTPS requests only, as service workers only support
    connections over SSL.
  prefs: []
  type: TYPE_NORMAL
- en: The requests over SSL with the `Access-Control-Origin=*` header (Access Control
    Allow Origin) will return results successfully.
  prefs: []
  type: TYPE_NORMAL
- en: By default, fetching a resource from a third-party URL will fail if CORS is
    not supported by it. You can add a non-CORS option to the Request to overcome
    this. However, this will cause an opaque response, which means that you won't
    be able to tell whether the response was successful or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `fireRequest` function takes three arguments, `fetchMode`, `protocol`,
    and `init`. This function returns another function, which we can call as a composition.
    We start with fetching the given resource directly from the remote resource:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If the fetch was successful, we print it into the console as well as log it
    on the web page. The same applies if the request fails, only this time we print
    the error.
  prefs: []
  type: TYPE_NORMAL
- en: 'The helper function log finds the DOM element by the ID and adds a paragraph
    element, as well as a class attribute to depict the type of the message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `index.html` file, we have style declarations in the head section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In our `log()` function, we set the undefined type to success so that it will
    display the color green when we add it to `classList`. The error type will display
    red, as declared in the preceding styles.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching with FetchEvent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `FetchEvent` class is a fetch action dispatched on the service worker. It
    contains details about requests as well as responses. It provides all important
    `FetchEvent.reponseWith()` methods, which we can use to provide a response back
    to the page that is controlled by the service worker.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `index.html`, `index.js`, `service-worker.js`, `adeobe-log.png`, and
    `style.css` files from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/07/02/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/07/02/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open up a browser and go to `index.html`:![How to do it...](img/B05381_07_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open up the Developer Toolbar (*Cmd* + *Alt* + *I* or *F12*). Now refresh the
    page and look at the messages in the console. You will see the fetch requests
    are logged in the console:![How to do it...](img/B05381_07_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are simply printing out different stages within the fetch event handler
    of the service worker to the console. The fetch method of our `service-worker.js`
    file looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Let's discuss some of these API methods in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Cache.addAll()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This method takes in a URL array, retrieves the response, and then adds that
    result to a specified cache. The specified cache in our example is `''fetch-event-cache''`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: ExtendableEvent.waitUntil()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This method extends the lifetime of an event. In our example, we are waiting
    until the resources are cached:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: FetchEvent.respondWith()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This method resolves by returning a `Response` object or a network error to
    the `Fetch` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Fetching a JSON file during service worker installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going to learn how to cache resource files using a JSON
    file by specifying the names of the resource files in it. Usually, this is done
    by keeping an array in the service worker JavaScript file, but you might want
    them in a separate location, for reasons such as versioning, for example.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download all the files from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/07/03/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/07/03/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open up a browser and go to the `index.html` file:![How to do it...](img/B05381_07_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open up the DevTools (*Cmd* + *Alt* + *I* or *F12*) and make sure the **Preserve
    log** checkbox is clicked. Now refresh the page and you will see the log messages
    retrieving files from the cache:![How to do it...](img/B05381_07_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you look at the **Resources** tab, you will see the cached resources:![How
    to do it...](img/B05381_07_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We only require one action, which is at the time of the initial load for caching
    the assets and registering the service worker. So at the time of installation,
    we load the JSON file, parse JSON, and add the files to the cache. Our `service-worker.js`
    file looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Return a response from the cache if it was found:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The client claims the service worker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We will list the resource file names in the `files.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We will add a section to our `index.html` file for the images:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Proxying
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A proxy is an intermediary between a web browser and the Internet. In this recipe,
    we will learn how to use the service worker as a proxy middleware.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes: *Setting
    up GitHub pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for
    Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download all the files from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/07/04/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/07/04/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open up a browser and go to `index.html`:![How to do it...](img/B05381_07_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the first link to navigate to the `/hello` link:![How to do it...](img/B05381_07_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open up DevTools (*Cmd* + *Alt* + *I* or *F12*) to see the log messages
    on the **Console** tab:![How to do it...](img/B05381_07_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the first link to navigate to the `/hello/world` link:![How to
    do it...](img/B05381_07_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are adding two links to the `index.html` file where we are planning to create
    a proxy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We create a proxy for requests to the local URLs, inside the `service-worker.js`
    file, containing a `hello` string as well as `hello/world`. The client will recognize
    this as a local resource:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We pass these handlers into the fetch event listener as callbacks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Prefetching
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Prefetching resources during the service worker installation phase can easily
    enable offline viewing of a website. In this recipe, we will look into be prefetching
    resources including pages and images.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes: *Setting
    up GitHub pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for
    Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download all the files from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/07/05/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/07/05/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open up a browser and go to the `index.html` file:![How to do it...](img/B05381_07_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open up the Developer Toolbar (*Cmd* + *Alt* + *I* or *F12*) and look at the
    messages in the console. You will see the resources have been successfully cached:![How
    to do it...](img/B05381_07_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now go offline by selecting offline on the DevTools **Network** tab:![How to
    do it...](img/B05381_07_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the **prefetched.txt** link. The linked text file will open in
    a new tab:![How to do it...](img/B05381_07_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **prefetched.html** link. The linked page will open in a new tab:![How
    to do it...](img/B05381_07_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **apple-log.png** link. The linked image will open in a new tab:![How
    to do it...](img/B05381_07_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you examine the console, you will find the links have been served from the
    cache:![How to do it...](img/B05381_07_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `index.html` file, we are adding a section with links to the prefetched
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `service-worker.js` file, we start with declaring the cache version
    at the top in case you have to force pages controlled by the service worker to
    use a new cache:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We also list the resources to be cached:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The following line will construct a new URL from the list we have given it,
    using the service worker''s script location as its base:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we add a cache busting timestamp to the query string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We have to make sure to specify `{mode: ''no-cors''}` if there is a possibility
    that the server delivering the resource does not support CORS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we fetch the resources and cache them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s look at the activate event handler. We make sure to delete all the
    caches that aren''t in the `currentChaches` object we declared at the start:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The fetch event listener is where the service worker looks for the cached resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
