- en: Chapter 7. Fetching Resources
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。获取资源
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Fetching remote resources
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取远程资源
- en: Fetching with `FetchEvent`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `FetchEvent` 获取
- en: Fetching a JSON file during service worker installation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在服务工作者安装期间获取JSON文件
- en: Proxying
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代理
- en: Prefetching
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预加载
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, we will look at how to request files and resources from different
    sources, which in more technical terms perform fetch actions against different
    resources. We will look at fetching a JSON file during the service worker installation,
    using the service worker as a proxy middleware, and prefetching a list of specific
    resource URLs during the installation process, so that you have the resources
    handy before loading the page.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何从不同的来源请求文件和资源，这在更技术性的术语中是对不同资源执行获取操作。我们将查看在服务工作者安装期间获取JSON文件，使用服务工作者作为代理中间件，并在安装过程中预加载一系列特定的资源URL，以便在加载页面之前手头就有这些资源。
- en: Let's start off this chapter by looking at a simple example of fetching a resource
    from two different resources.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从查看一个简单的例子开始，这个例子展示了从两个不同的资源中获取资源。
- en: Fetching remote resources
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取远程资源
- en: Fetching remote resources can be done in different ways. In this recipe, we
    are going to look at two standard ways of fetching a remote resource using a service
    worker, with and without **cross-origin HTTP requests** (**CORS**).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 获取远程资源可以通过不同的方式完成。在本食谱中，我们将探讨使用服务工作者以两种标准方式获取远程资源，一种是有**跨源HTTP请求**（**CORS**），另一种则没有。
- en: 'You can learn more about CORS at the following link:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下链接中了解更多关于CORS的信息：
- en: '[https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)'
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the *Setting up GitHub pages for
    SSL* recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service Worker Basics"),
    *Learning Service Worker Basics*.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作者，你需要在浏览器设置中开启服务工作者实验功能。如果你还没有这样做，请参考[第1章](ch01.html "第1章。学习服务工作者基础")的第一个食谱，*学习服务工作者基础*：*设置服务工作者*。服务工作者仅在HTTPS上运行。要了解如何设置支持此功能的发展环境，请参考[第1章](ch01.html
    "第1章。学习服务工作者基础")的*设置GitHub页面以支持SSL*食谱。
- en: How to do it...
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置你的文件结构：
- en: 'Copy the `index.html`, `index.js`, `service-worker.js`, and `style.css` file
    from the following location:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下位置复制 `index.html`、`index.js`、`service-worker.js` 和 `style.css` 文件：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/07/01/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/07/01/)'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/07/01/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/07/01/)'
- en: Open up a browser and go to `index.html`. You will see two images fetched from
    two different protocols, `https` and `https-acao`:![How to do it...](img/B05381_07_01.jpg)
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并转到 `index.html`。你会看到两个来自不同协议（`https` 和 `https-acao`）的图片：![如何操作...](img/B05381_07_01.jpg)
- en: How it works...
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'At the beginning of the `index.js` file, we are testing two different protocols
    for loading resources:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `index.js` 文件的开始部分，我们正在测试两种不同的协议来加载资源：
- en: '`https`: HTTP with **Secure Socket Layer** (**SSL**) protocol'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`https`：带有**安全套接字层**（**SSL**）协议的HTTP'
- en: '`https-acao`: SSL protocol with the `Access-Control-Origin=*` header'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`https-acao`: 带有 `Access-Control-Origin=*` 头的SSL协议'
- en: 'We will use two different URLs, which will be loaded multiple times:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用两个不同的URL，这些URL将被多次加载：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We will also use two different methods for fetching resources, with or without
    CORS:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用两种不同的方法来获取资源，一种是有CORS，另一种则没有：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, we will check to see whether the service worker is registered:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将检查服务工作者是否已注册：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If that is not the case, we register it and reload the page to ensure that
    the client is under the service worker''s control:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不是这样，我们将注册它并重新加载页面以确保客户端处于服务工作者的控制之下：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The two `for` loops go through the provided protocols array and make requests
    for each protocol. They also build a DOM image element with each URL and go through
    each mode of the `fetchModes` array.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 两个 `for` 循环遍历提供的协议数组并对每个协议进行请求。它们还使用每个 URL 构建一个 DOM 图像元素，并遍历 `fetchModes` 数组的每个模式。
- en: 'The `init` object contains any custom settings that you may want to apply to
    the request. Let''s look at the properties of the `init` object:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`init` 对象包含你可能想要应用于请求的任何自定义设置。让我们看看 `init` 对象的属性：'
- en: '`method`: The request method, for example, `GET`, and `POST`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`method`: 请求方法，例如，`GET` 和 `POST`'
- en: '`mode`: The mode you want to use for the request, for example, `cors`, `no-cors`,
    or `same-origin`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mode`: 你想要用于请求的模式，例如，`cors`、`no-cors` 或 `same-origin`'
- en: '`cache`: The cache mode you want to use for the request, for example `default`,
    `no-store`, `reload`, `no-cache`, `force-cache`, or `only-if-cached`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cache`: 你想要用于请求的缓存模式，例如 `default`、`no-store`、`reload`、`no-cache`、`force-cache`
    或 `only-if-cached`'
- en: 'The `buildImage` function takes two arguments, `protocol` and `url`. It creates
    an image element on the fly and attaches the URL as the source of that image.
    Then it goes on to add that image to the DOM tree, where the ID is one of `https-acao-image`,
    `https-image`, or `http–image`. JavaScript has no control over the URL handling
    at this point; the browser handles the URLs:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`buildImage` 函数接受两个参数，`protocol` 和 `url`。它动态创建一个图像元素，并将 URL 作为该图像的源。然后它继续将该图像添加到
    DOM 树中，其中 ID 是 `https-acao-image`、`https-image` 或 `http–image` 之一。在此点，JavaScript
    对 URL 处理没有控制权；浏览器处理 URL：'
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Images will be rendered for HTTPS requests only, as service workers only support
    connections over SSL.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 只有 HTTPS 请求的图像将被渲染，因为服务工作者只支持通过 SSL 的连接。
- en: The requests over SSL with the `Access-Control-Origin=*` header (Access Control
    Allow Origin) will return results successfully.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 带有 `Access-Control-Origin=*` 头部（访问控制允许源）的 SSL 请求将成功返回结果。
- en: By default, fetching a resource from a third-party URL will fail if CORS is
    not supported by it. You can add a non-CORS option to the Request to overcome
    this. However, this will cause an opaque response, which means that you won't
    be able to tell whether the response was successful or not.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，如果第三方 URL 不支持 CORS，则从第三方 URL 获取资源将失败。你可以在请求中添加非 CORS 选项来克服这一点。然而，这将导致一个不透明的响应，这意味着你将无法判断响应是否成功。
- en: 'The `fireRequest` function takes three arguments, `fetchMode`, `protocol`,
    and `init`. This function returns another function, which we can call as a composition.
    We start with fetching the given resource directly from the remote resource:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`fireRequest` 函数接受三个参数，`fetchMode`、`protocol` 和 `init`。此函数返回另一个函数，我们可以将其作为组合调用。我们从直接从远程资源获取指定的资源开始：'
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If the fetch was successful, we print it into the console as well as log it
    on the web page. The same applies if the request fails, only this time we print
    the error.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果获取成功，我们将它打印到控制台并在网页上记录。如果请求失败，也适用同样的方法，只是这次我们打印错误。
- en: 'The helper function log finds the DOM element by the ID and adds a paragraph
    element, as well as a class attribute to depict the type of the message:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 辅助函数 log 通过 ID 查找 DOM 元素，并添加一个段落元素以及一个类属性来描述消息的类型：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the `index.html` file, we have style declarations in the head section:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `index.html` 文件中，我们在头部部分有样式声明：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In our `log()` function, we set the undefined type to success so that it will
    display the color green when we add it to `classList`. The error type will display
    red, as declared in the preceding styles.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 `log()` 函数中，我们将未定义类型设置为成功，以便当我们将其添加到 `classList` 时，它将显示绿色。错误类型将显示红色，如前面声明的样式。
- en: Fetching with FetchEvent
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 FetchEvent 进行获取
- en: The `FetchEvent` class is a fetch action dispatched on the service worker. It
    contains details about requests as well as responses. It provides all important
    `FetchEvent.reponseWith()` methods, which we can use to provide a response back
    to the page that is controlled by the service worker.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`FetchEvent` 类是一个在服务工作者上分发的获取动作。它包含有关请求以及响应的详细信息。它提供了所有重要的 `FetchEvent.reponseWith()`
    方法，我们可以使用这些方法向由服务工作者控制页面提供响应。'
- en: Getting ready
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作者，你需要在浏览器设置中开启服务工作者实验功能。如果你还没有这样做，请参考[第1章](ch01.html "第1章. 学习服务工作者基础")的第一个菜谱，*学习服务工作者基础*：*设置服务工作者*。服务工作者仅在HTTPS上运行。要了解如何设置支持此功能的发展环境，请参考[第1章](ch01.html
    "第1章. 学习服务工作者基础")的以下菜谱，*学习服务工作者基础*：*设置GitHub页面以支持SSL*，*在Windows上设置SSL*，和*在Mac上设置SSL*。
- en: How to do it...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置你的文件结构：
- en: 'Copy the `index.html`, `index.js`, `service-worker.js`, `adeobe-log.png`, and
    `style.css` files from the following location:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下位置复制`index.html`，`index.js`，`service-worker.js`，`adeobe-log.png`和`style.css`文件：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/07/02/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/07/02/)'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/07/02/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/07/02/)'
- en: Open up a browser and go to `index.html`:![How to do it...](img/B05381_07_02.jpg)
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并转到`index.html`：![如何操作...](img/B05381_07_02.jpg)
- en: Open up the Developer Toolbar (*Cmd* + *Alt* + *I* or *F12*). Now refresh the
    page and look at the messages in the console. You will see the fetch requests
    are logged in the console:![How to do it...](img/B05381_07_03.jpg)
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开开发者工具栏（*Cmd* + *Alt* + *I* 或 *F12*）。现在刷新页面并查看控制台中的消息。你将看到fetch请求被记录在控制台中：![如何操作...](img/B05381_07_03.jpg)
- en: How it works...
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We are simply printing out different stages within the fetch event handler
    of the service worker to the console. The fetch method of our `service-worker.js`
    file looks like the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是将服务工作者fetch事件处理程序中的不同阶段打印到控制台。我们的`service-worker.js`文件的fetch方法看起来如下：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Let's discuss some of these API methods in more detail.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地讨论一些这些API方法。
- en: Cache.addAll()
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Cache.addAll()
- en: 'This method takes in a URL array, retrieves the response, and then adds that
    result to a specified cache. The specified cache in our example is `''fetch-event-cache''`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法接受一个URL数组，检索响应，然后将该结果添加到指定的缓存。在我们的例子中，指定的缓存是`'fetch-event-cache'`：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: ExtendableEvent.waitUntil()
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ExtendableEvent.waitUntil()
- en: 'This method extends the lifetime of an event. In our example, we are waiting
    until the resources are cached:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法延长了事件的寿命。在我们的例子中，我们等待资源被缓存：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: FetchEvent.respondWith()
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FetchEvent.respondWith()
- en: 'This method resolves by returning a `Response` object or a network error to
    the `Fetch` object:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法通过返回一个`Response`对象或网络错误到`Fetch`对象来解析：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Fetching a JSON file during service worker installation
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在服务工作者安装期间获取JSON文件
- en: In this recipe, we are going to learn how to cache resource files using a JSON
    file by specifying the names of the resource files in it. Usually, this is done
    by keeping an array in the service worker JavaScript file, but you might want
    them in a separate location, for reasons such as versioning, for example.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何通过指定JSON文件中资源文件的名称来使用JSON文件缓存资源文件。通常，这是通过在服务工作者JavaScript文件中保持一个数组来完成的，但你可能希望它们位于单独的位置，例如出于版本控制的原因。
- en: Getting ready
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作者，你需要在浏览器设置中开启服务工作者实验功能。如果你还没有这样做，请参考[第1章](ch01.html "第1章. 学习服务工作者基础")的第一个配方，*学习服务工作者基础*：*设置服务工作者*。服务工作者仅在HTTPS上运行。要了解如何设置支持此功能的发展环境，请参考[第1章](ch01.html
    "第1章. 学习服务工作者基础")的以下配方：*设置GitHub页面以支持SSL*，*在Windows上设置SSL*，以及*在Mac上设置SSL*。
- en: How to do it...
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置你的文件结构：
- en: 'Download all the files from the following location:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下位置下载所有文件：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/07/03/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/07/03/)'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/07/03/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/07/03/)'
- en: Open up a browser and go to the `index.html` file:![How to do it...](img/B05381_07_04.jpg)
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并转到`index.html`文件：![如何操作...](img/B05381_07_04.jpg)
- en: Now open up the DevTools (*Cmd* + *Alt* + *I* or *F12*) and make sure the **Preserve
    log** checkbox is clicked. Now refresh the page and you will see the log messages
    retrieving files from the cache:![How to do it...](img/B05381_07_05.jpg)
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开开发者工具（*Cmd* + *Alt* + *I* 或 *F12*）并确保点击了**保留日志**复选框。现在刷新页面，你会看到从缓存检索文件的日志消息：![如何操作...](img/B05381_07_05.jpg)
- en: If you look at the **Resources** tab, you will see the cached resources:![How
    to do it...](img/B05381_07_06.jpg)
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你查看**资源**选项卡，你会看到缓存的资源：![如何操作...](img/B05381_07_06.jpg)
- en: How it works...
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We only require one action, which is at the time of the initial load for caching
    the assets and registering the service worker. So at the time of installation,
    we load the JSON file, parse JSON, and add the files to the cache. Our `service-worker.js`
    file looks like this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要执行一个动作，即在初始加载时缓存资源和注册服务工作者。因此，在安装时，我们加载JSON文件，解析JSON，并将文件添加到缓存中。我们的`service-worker.js`文件看起来像这样：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Return a response from the cache if it was found:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在缓存中找到响应，则返回：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The client claims the service worker:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端声明服务工作者：
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We will list the resource file names in the `files.json` file:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`files.json`文件中列出资源文件名：
- en: '[PRE15]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We will add a section to our `index.html` file for the images:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`index.html`文件中添加一个用于图像的部分：
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Proxying
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代理
- en: A proxy is an intermediary between a web browser and the Internet. In this recipe,
    we will learn how to use the service worker as a proxy middleware.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 代理是网络浏览器和互联网之间的中介。在本教程中，我们将学习如何使用服务工作者作为代理中间件。
- en: Getting ready
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes: *Setting
    up GitHub pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for
    Mac*.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作者，你需要在浏览器设置中开启服务工作者实验功能。如果你还没有这样做，请参考[第1章](ch01.html "第1章. 学习服务工作者基础")的第一个配方，*学习服务工作者基础*：*设置服务工作者*。服务工作者仅在HTTPS上运行。要了解如何设置支持此功能的发展环境，请参考以下配方：*设置GitHub页面以支持SSL*，*在Windows上设置SSL*，以及*在Mac上设置SSL*。
- en: How to do it...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置你的文件结构：
- en: 'Download all the files from the following location:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下位置下载所有文件：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/07/04/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/07/04/)'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/07/04/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/07/04/)'
- en: Open up a browser and go to `index.html`:![How to do it...](img/B05381_07_07.jpg)
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并转到`index.html`：![如何操作...](img/B05381_07_07.jpg)
- en: Now click on the first link to navigate to the `/hello` link:![How to do it...](img/B05381_07_08.jpg)
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击第一个链接导航到`/hello`链接：![如何操作...](img/B05381_07_08.jpg)
- en: Now open up DevTools (*Cmd* + *Alt* + *I* or *F12*) to see the log messages
    on the **Console** tab:![How to do it...](img/B05381_07_09.jpg)
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开开发者工具(*Cmd* + *Alt* + *I* 或 *F12*)，在**控制台**标签页查看日志消息：![如何操作...](img/B05381_07_09.jpg)
- en: Now click on the first link to navigate to the `/hello/world` link:![How to
    do it...](img/B05381_07_10.jpg)
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击第一个链接导航到`/hello/world`链接：![如何操作...](img/B05381_07_10.jpg)
- en: How it works...
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We are adding two links to the `index.html` file where we are planning to create
    a proxy:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在计划创建代理的`index.html`文件中添加了两个链接：
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We create a proxy for requests to the local URLs, inside the `service-worker.js`
    file, containing a `hello` string as well as `hello/world`. The client will recognize
    this as a local resource:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`service-worker.js`文件中为请求本地URL创建了一个代理，包含一个`hello`字符串以及`hello/world`。客户端会将其识别为本地资源：
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We pass these handlers into the fetch event listener as callbacks:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这些处理程序作为回调函数传递给fetch事件监听器：
- en: '[PRE19]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Prefetching
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预取
- en: Prefetching resources during the service worker installation phase can easily
    enable offline viewing of a website. In this recipe, we will look into be prefetching
    resources including pages and images.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务工作者安装阶段预取资源可以轻松实现网站的离线查看。在本食谱中，我们将探讨预取包括页面和图像在内的资源。
- en: Getting ready
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes: *Setting
    up GitHub pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for
    Mac*.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用服务工作者，你需要在浏览器设置中开启服务工作者实验功能。如果你还没有这样做，请参考[第1章](ch01.html "第1章. 学习服务工作者基础")的第一个食谱，*学习服务工作者基础*：*设置服务工作者*。服务工作者仅在HTTPS上运行。要了解如何设置支持此功能的发展环境，请参考以下食谱：*设置GitHub页面以支持SSL*，*设置Windows的SSL*，和*设置Mac的SSL*。
- en: How to do it...
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these instructions to set up your file structure:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下说明设置你的文件结构：
- en: 'Download all the files from the following location:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下位置下载所有文件：
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/07/05/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/07/05/)'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/07/05/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/07/05/)'
- en: Open up a browser and go to the `index.html` file:![How to do it...](img/B05381_07_11.jpg)
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并转到`index.html`文件：![如何操作...](img/B05381_07_11.jpg)
- en: Open up the Developer Toolbar (*Cmd* + *Alt* + *I* or *F12*) and look at the
    messages in the console. You will see the resources have been successfully cached:![How
    to do it...](img/B05381_07_12.jpg)
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开开发者工具栏(*Cmd* + *Alt* + *I* 或 *F12*)，查看控制台中的消息。你会看到资源已被成功缓存：![如何操作...](img/B05381_07_12.jpg)
- en: Now go offline by selecting offline on the DevTools **Network** tab:![How to
    do it...](img/B05381_07_13.jpg)
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在通过在开发者工具的**网络**标签页选择离线来离线：![如何操作...](img/B05381_07_13.jpg)
- en: Now click on the **prefetched.txt** link. The linked text file will open in
    a new tab:![How to do it...](img/B05381_07_14.jpg)
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击**prefetched.txt**链接。链接的文本文件将在新标签页中打开：![如何操作...](img/B05381_07_14.jpg)
- en: Click on the **prefetched.html** link. The linked page will open in a new tab:![How
    to do it...](img/B05381_07_15.jpg)
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**prefetched.html**链接。链接的页面将在新标签页中打开：![如何操作...](img/B05381_07_15.jpg)
- en: Click on the **apple-log.png** link. The linked image will open in a new tab:![How
    to do it...](img/B05381_07_16.jpg)
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**apple-log.png**链接。链接的图片将在新标签页中打开：![如何操作...](img/B05381_07_16.jpg)
- en: If you examine the console, you will find the links have been served from the
    cache:![How to do it...](img/B05381_07_17.jpg)
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你检查控制台，你会找到链接是从缓存中提供的：![如何操作...](img/B05381_07_17.jpg)
- en: How it works...
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In the `index.html` file, we are adding a section with links to the prefetched
    files:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在`index.html`文件中，我们添加了一个包含指向预取文件的链接的部分：
- en: '[PRE20]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the `service-worker.js` file, we start with declaring the cache version
    at the top in case you have to force pages controlled by the service worker to
    use a new cache:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `service-worker.js` 文件中，我们在顶部声明缓存版本，以防您需要强制服务工作者控制的页面使用新的缓存：
- en: '[PRE21]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We also list the resources to be cached:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还列出了要缓存的资源：
- en: '[PRE22]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The following line will construct a new URL from the list we have given it,
    using the service worker''s script location as its base:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行将根据我们提供的列表构建一个新的 URL，使用服务工作者脚本的当前位置作为其基础：
- en: '[PRE23]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next, we add a cache busting timestamp to the query string:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们在查询字符串中添加一个缓存破坏时间戳：
- en: '[PRE24]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We have to make sure to specify `{mode: ''no-cors''}` if there is a possibility
    that the server delivering the resource does not support CORS:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '如果有可能服务器不支持 CORS，则必须确保指定 `{mode: ''no-cors''}`：'
- en: '[PRE25]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Next, we fetch the resources and cache them:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们获取资源并将它们缓存起来：
- en: '[PRE26]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now let''s look at the activate event handler. We make sure to delete all the
    caches that aren''t in the `currentChaches` object we declared at the start:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看激活事件处理器。我们确保删除所有不在我们最初声明的 `currentChaches` 对象中的缓存：
- en: '[PRE27]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The fetch event listener is where the service worker looks for the cached resources:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 获取事件监听器是服务工作者查找缓存资源的地方：
- en: '[PRE28]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
