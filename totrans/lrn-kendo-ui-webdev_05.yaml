- en: Chapter 5. HTML Editor and Custom Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Interactive HTML editors are an important part of any website that encourages
    users to post their own written content. Forums and blogs frequently offer these
    controls so that users can create content with attractive styling just as if it
    was created in a word processor. It is especially useful for users who are unfamiliar
    with how to format text using HTML tags or CSS styles. For that matter, even users
    who are familiar with HTML and CSS can appreciate not having to type it all out.
    This chapter will introduce the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Kendo Editor widget basics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the Editor widget tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using HTML snippets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing the Editor widget tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the HTML Editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Kendo Editor widget creates an area on a web page where a user can create
    formatted text content. To see a basic example in action, copy this code into
    a new HTML page called `HtmlEditor.html`. This will allow you to see the widget
    in use on an actual page and will provide a starting point for the rest of the
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This is assuming all default settings since no settings or options are explicitly
    set.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that we have bound the `kendoEditor` function to a `textarea` element,
    this is important and you should always bind HTML Editor controls to a `textarea`
    element so that the functionality can degrade gracefully for browsers that may
    not support the required JavaScript features.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we had implemented this using ASP.NET MVC, it would look like this in the
    view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note again that the Kendo MVC extensions will generate the HTML Editor within
    a `textarea` element, which is why the style declaration for `textarea` elements
    works in the page output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Regardless of whether you use HTML or an MVC view, this is how the page output
    looks with all defaults assumed. I have added some text using the HTML Editor
    features to illustrate the purpose of the control:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the HTML Editor](img/4346OT_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Take a look at all of the tool buttons across the top of the Editor widget.
    Click on them as you type text to observe what they do. Also, note that the different
    buttons generated by the Kendo HTML Editor all support the HTML `tabindex` so
    you can use the *Tab* key and the *Shift* + *Tab* key combination to move back
    and forth respectively between the commands in order if you want.
  prefs: []
  type: TYPE_NORMAL
- en: For many sites, this is probably sufficient functionality already. To use the
    formatted text that the user has created, simply retrieve the value of the `textarea`
    element and it will contain both the content and HTML markup.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Don''t forget to check your input**'
  prefs: []
  type: TYPE_NORMAL
- en: Since you are openly allowing the user to post HTML markup within the content
    of his or her data, take extra care to sanitize the input before you place it
    into a database or load it into another page. Even though the HTML markup generated
    by the Kendo tool is safe, you can never trust the final markup that is transmitted
    to the server from the user's browser and must always treat it as if it may contain
    harmful code.
  prefs: []
  type: TYPE_NORMAL
- en: Before you use the formatted text, however, you also need to check whether the
    value you are processing has been HTML encoded or not. If you retrieve the raw
    value of the `textarea` element from the DOM, you will get HTML encoded data.
    This means that `<strong>text</strong>` becomes `&lt;strong&gt;text&lt;/strong&gt;`
    which may or may not be what you actually want.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the non-HTML encoded data, you need to call the `value()` function on
    the `kendoEditor` object by using code like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: But again, you need to be careful with what you are doing. You cannot post non-HTML
    encoded data like this to most web servers without bypassing some important security
    measures. The safer option would be to post the data to the web server in an HTML
    encoded form, then decode it and sanitize on the server-side before using it.
    This way you can still rightly reject some potentially malicious code from the
    page outright before starting the process of interpreting the user input.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an updated page with some buttons that show you the different outputs
    from the DOM `val()` function versus the `kendoEditor value()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This is the text retrieved from the Kendo `value()` function.
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the HTML Editor](img/4346OT_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is the text retrieved from the `innerHTML` of the Editor Widget.
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the HTML Editor](img/4346OT_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding and removing buttons from the toolbar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a few more standard tools that are available in the HTML Editor toolbar
    that are not included by default:'
  prefs: []
  type: TYPE_NORMAL
- en: Subscript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Superscript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View HTML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To include these tools, you need to specify the `tools` property when you create
    the `kendoEditor` object like this and list the specific tools that you want displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If you specify `tools` you need to name all the standard tools too, if you
    leave any out they will be removed from the toolbar on your page. Conversely,
    here is how you would add the subscript and superscript tools using ASP.NET MVC,
    curiously the `viewHtml` is not available in this method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: It could hardly be more concise, especially since with this method all of the
    default tools are assumed and you only have to add those that you want to include.
    If you wanted to clear out the default list of tools and then add only those that
    you want, you would first call `Clear()` within the `Tools` lambda expression
    and then add the specific tools that you wanted afterwards.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the output with all of the standard tools included:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding and removing buttons from the toolbar](img/4346OT_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding the Styles tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Styles tool can be added to the HTML Editor toolbar to give the user access
    to some predefined styles that you have created. This could be useful if your
    users are using a special theme or if there are global styles that you want the
    users to have easy access to. To enable this, you configure the tools through
    the `kendoEditor` object and specify which options should appear in a drop-down
    list of styles. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are the contents of the `StyleTool.css` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: To make this work, I added the Style tool to the list of tools and then added
    the `style` configuration property and the optional `stylesheets` configuration
    property. The `style` configuration property defines the different options that
    appear in the Styles drop-down list, and which CSS classnames should be applied
    when these styles are selected for some text in the HTML editor `textarea`. The
    `stylesheets` configuration option allows you to import some additional stylesheets
    if they are necessary to display your custom styles.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how you would implement these styles using ASP.NET MVC:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output from this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the Styles tool](img/4346OT_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: I included some styled text for the sake of demonstration and clicked on the
    **Styles** drop-down list to show how the options in that list are also styled
    to match their respective CSS classes.
  prefs: []
  type: TYPE_NORMAL
- en: Tool for inserting HTML snippets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Snippets tool is a special toolbar option that is designed to insert predefined
    blocks of text into the editor window with a single click. It can be used for
    adding canned responses to common questions, signature blocks, time stamps, or
    any number of scenarios where pre-typed text would be useful. To enable this,
    just like the **Styles** option you configure the tools through the `kendoEditor`
    object and specify which options should appear in a drop-down list of styles.
    Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Notice that this requires very little configuration to enable. We have included
    the `insertHtml` option in the `tools` configuration property and then added the
    `insertHtml` configuration property at the end of the `kendoEditor` definition.
    Inside the `insertHtml` configuration property, we have included an array of very
    simple objects. They define the title of each item that should appear in the drop-down
    list and the exact mark-up that should be pasted into the HTML Editor when the
    title is selected.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how you would implement these Snippets using ASP.NET MVC:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output from this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tool for inserting HTML snippets](img/4346OT_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Customizing HTML Editor tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Kendo HTML Editor control allows you to add your own custom options to
    the toolbar. This is a remarkable touch of flexibility in the Kendo UI framework,
    and is something that you may find quite useful if the available built-in tools
    do not completely suit your needs. The HTML Editor can accept at least three types
    of custom tools. There could be more but these three appear in the published documentation
    on the Kendo UI website:'
  prefs: []
  type: TYPE_NORMAL
- en: Override Built-in Tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom Template Tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom In-line Tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drop-down list tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you would like to alter some of the built-in drop-down list tools, you can
    redefine which options appear inside them. This does not alter the nature of the
    tools or what the tools do. It only determines which options appear in the drop-down
    lists of the tools when you click on them. As an example, consider limiting which
    options appear in the font tool. By replacing the contents of the `items` array,
    you can customize exactly which options appear in the tool when it displays on
    the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This code sample demonstrates a customized `fontName` tool limited to two specific
    options. These two fonts are not included in the default `fontName` tool as we
    saw before, but you could also include default fonts in this custom list as well.
    Here is the output of the HTML Editor configured with this custom tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Drop-down list tools](img/4346OT_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You will notice that the first two options in the list are not options that
    I defined in my source code—**inherited font** and **Verdana**. These appear because
    the HTML Editor is enabling the font on the page from the outer containing HTML
    markup and is calling it the **inherited font**. It then labels this same font
    by name in case that helps the user make a font selection, so **inherited font**
    and **Verdana** are actually both referring to the same font inherited from the
    outer HTML markup of the overall page.
  prefs: []
  type: TYPE_NORMAL
- en: This type of custom tool configuration should work with any of the custom tools
    that appear as a drop-down list such as the font name, font size, and format block
    tools.
  prefs: []
  type: TYPE_NORMAL
- en: Button tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It seems unlikely that you will need to override many of these controls since
    it would probably be more effective to create your own tool instead. Just in case
    you wanted to see how it was done, however, here is a sample of code taken from
    the Kendo UI website that demonstrates how to replace the `viewHtml` tool with
    custom code that replaces its functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the code as it appears on the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Button tools](img/4346OT_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This source code includes both a template and the `kendoEditor` configuration.
    You can see that this code is basically opening a dialog, filling it with the
    content from the HTML Editor control, wiring up the events for the buttons inside
    the dialog, and then displaying it to the user. It gives an example, at least,
    of what overriding one of the built-in tools looks like. Note that the logic for
    the tool's execution is inside a property called `exec`; this is common for all
    custom button tools as well. The `tooltip` property is the text that is displayed
    when the mouse is hovered over the button in the toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: Custom template tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to create your own custom tool that has a drop-down list of options,
    the custom template tool is the best choice. It allows you to use a Kendo UI template
    to markup how the tool should be displayed on the toolbar, and you can wire up
    its functionality separately so that your tool can do whatever it needs to do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You can see the Kendo template where the `label` and `select` elements are declared.
    The behavior for the `select` element is defined in the jQuery code, but the custom
    drop-down list tool is added to the HTML Editor through the `tools` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the output of the page with this custom tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Custom template tools](img/4346OT_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is how you create custom tools that behave as a drop-down list. As you
    can see, the behavior is left completely up to you so you, can create whatever
    tool you need for your site's use case.
  prefs: []
  type: TYPE_NORMAL
- en: Custom in-line tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to create your own button tool on the toolbar, the in-line tool
    is the right choice. It allows you to define a tool name and the code to execute
    when that tool is selected from the toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This code shows a custom tool called `addHr` that will add an `hr` element to
    the HTML Editor control when clicked. You can also see the use of the `exec` function
    on the `kendoEditor` where you can indicate one of the built-in functions/tools
    of the HTML Editor and then provide an object that supplies the parameters for
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the output from this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Custom in-line tools](img/4346OT_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the HTML Editor API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Kendo HTML Editor widget has a large set of API configuration options which
    allow you to fine-tune the widget to the specific needs and situation of your
    web page. It also exposes a set of methods and events that you can use to programmatically
    enable and react to functionality that the Edit widget exposes as it runs on the
    page. These options, taken together, are how you extend the Editor widget beyond
    its out of the box abilities.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have already covered some of this in the material above, but here are the
    configuration options available for the HTML Editor control. As always, please
    check the Kendo UI Web documentation at `docs.kendoui.com/api/web/editor` for
    a more detailed list of configuration settings for these options, and to get the
    latest changes or additions to the API.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As with any HTML element or JavaScript object in a complex site, a web page
    fires events as the user performs certain actions within a page. By hooking into
    these events with your own JavaScript code, you can react to the page''s changes
    and data in real time and organize the functionality of your page based on actions
    that the user performs. The HTML Editor control fires the following events in
    response to user actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`change`: This event fires every time that the data inside of the Editor Widget
    changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`execute`: This event fires fires when a tool is executed. It fires every time
    a tool bar button has been clicked and the code behind that button has been executed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keydown`: The keydown event fires every time a user presses a key down while
    typing inside of the Editor Widget window. Hooking into this event allows you
    to respond to text as the user is typing it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keyup`: The keydown event fires every time a user presses and releases a key
    while typing inside of the editor widget window. Hooking into this event allows
    you to respond to text as the user is typing it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`paste`: The paste event fires every time text is pasted into the Editor Widget
    area.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`select`: The select event fires every time text inside of the Editor Widget
    has been selected by a user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The HTML Editor gives you a lot of functionality for a very small amount of
    necessary coding. In most cases, the default control will meet all of your needs
    for HTML editing on a normal site. But, if you find yourself with a need for a
    highly customized tool, this HTML Editor supports a rich API, detailed configuration
    options, and easily accessible events for capturing and responding to use actions.
    This is a control that is not appropriate for every site, but when you need something
    like this, it is a tremendous boost to productivity to find it all in such a useful
    and usable package.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover two very important Kendo widgets—Menu and
    ListView. These widgets give you the ability to create responsive and feature-rich
    cascading page menus and organized data structures inside of your pages with the
    same Kendo approach that you have seen in all of the previous chapters. Building
    on what you already know, using these new widgets will be easy and you should
    be up and running before you know it.
  prefs: []
  type: TYPE_NORMAL
