- en: Chapter 5. HTML Editor and Custom Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章。HTML 编辑器和自定义工具
- en: 'Interactive HTML editors are an important part of any website that encourages
    users to post their own written content. Forums and blogs frequently offer these
    controls so that users can create content with attractive styling just as if it
    was created in a word processor. It is especially useful for users who are unfamiliar
    with how to format text using HTML tags or CSS styles. For that matter, even users
    who are familiar with HTML and CSS can appreciate not having to type it all out.
    This chapter will introduce the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 交互式 HTML 编辑器是任何鼓励用户发布自己书面内容的网站的的重要组成部分。论坛和博客经常提供这些控件，以便用户可以像在文字处理程序中创建内容一样创建具有吸引力的样式的内容。对于不熟悉如何使用
    HTML 标签或 CSS 样式格式化文本的用户来说，这尤其有用。就这一点而言，甚至熟悉 HTML 和 CSS 的用户也会欣赏不必全部输入。本章将介绍以下主题：
- en: Kendo Editor widget basics
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kendo 编辑器小部件基础
- en: Configuring the Editor widget tools
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置编辑器小部件工具
- en: Using HTML snippets
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 HTML 片段
- en: Customizing the Editor widget tools
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义编辑器小部件工具
- en: Understanding the HTML Editor
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 HTML 编辑器
- en: The Kendo Editor widget creates an area on a web page where a user can create
    formatted text content. To see a basic example in action, copy this code into
    a new HTML page called `HtmlEditor.html`. This will allow you to see the widget
    in use on an actual page and will provide a starting point for the rest of the
    chapter.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Kendo 编辑器小部件在网页上创建了一个区域，用户可以在其中创建格式化文本内容。要查看一个基本示例的实际操作，请将此代码复制到一个名为 `HtmlEditor.html`
    的新 HTML 页面中。这将允许您在真实页面上查看小部件的使用情况，并为本章的其余部分提供一个起点。
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is assuming all default settings since no settings or options are explicitly
    set.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是假设所有默认设置，因为没有明确设置任何设置或选项。
- en: Note
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that we have bound the `kendoEditor` function to a `textarea` element,
    this is important and you should always bind HTML Editor controls to a `textarea`
    element so that the functionality can degrade gracefully for browsers that may
    not support the required JavaScript features.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们已经将 `kendoEditor` 函数绑定到 `textarea` 元素上，这是很重要的，您应该始终将 HTML 编辑器控件绑定到 `textarea`
    元素上，以便在可能不支持所需 JavaScript 功能的浏览器中功能可以优雅地降级。
- en: 'If we had implemented this using ASP.NET MVC, it would look like this in the
    view:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用 ASP.NET MVC 实现了这个功能，那么在视图中看起来会是这样：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note again that the Kendo MVC extensions will generate the HTML Editor within
    a `textarea` element, which is why the style declaration for `textarea` elements
    works in the page output.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 再次注意，Kendo MVC 扩展将在 `textarea` 元素内生成 HTML 编辑器，这就是为什么 `textarea` 元素的样式声明在页面输出中起作用的原因。
- en: 'Regardless of whether you use HTML or an MVC view, this is how the page output
    looks with all defaults assumed. I have added some text using the HTML Editor
    features to illustrate the purpose of the control:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您使用 HTML 还是 MVC 视图，这是在所有默认设置假设下的页面输出外观。我使用 HTML 编辑器功能添加了一些文本，以说明控件的目的：
- en: '![Understanding the HTML Editor](img/4346OT_05_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![理解 HTML 编辑器](img/4346OT_05_01.jpg)'
- en: Take a look at all of the tool buttons across the top of the Editor widget.
    Click on them as you type text to observe what they do. Also, note that the different
    buttons generated by the Kendo HTML Editor all support the HTML `tabindex` so
    you can use the *Tab* key and the *Shift* + *Tab* key combination to move back
    and forth respectively between the commands in order if you want.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 查看编辑器小部件顶部的所有工具按钮。在键入文本时单击它们，以观察它们的作用。此外，请注意，Kendo HTML 编辑器生成的不同按钮都支持 HTML `tabindex`，因此您可以使用
    *Tab* 键和 *Shift* + *Tab* 键组合来分别在前一个和下一个命令之间移动，如果您想这样做的话。
- en: For many sites, this is probably sufficient functionality already. To use the
    formatted text that the user has created, simply retrieve the value of the `textarea`
    element and it will contain both the content and HTML markup.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多网站来说，这已经足够的功能了。要使用用户创建的格式化文本，只需检索 `textarea` 元素的值，它将包含内容和 HTML 标记。
- en: Tip
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Don''t forget to check your input**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**不要忘记检查您的输入**'
- en: Since you are openly allowing the user to post HTML markup within the content
    of his or her data, take extra care to sanitize the input before you place it
    into a database or load it into another page. Even though the HTML markup generated
    by the Kendo tool is safe, you can never trust the final markup that is transmitted
    to the server from the user's browser and must always treat it as if it may contain
    harmful code.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你允许用户在其数据内容中公开发布 HTML 标记，因此在将其放入数据库或加载到另一个页面之前，请务必对输入进行清理。即使 Kendo 工具生成的 HTML
    标记是安全的，你也永远不能信任从用户的浏览器发送到服务器的最终标记，并且必须始终将其视为可能包含有害代码。
- en: Before you use the formatted text, however, you also need to check whether the
    value you are processing has been HTML encoded or not. If you retrieve the raw
    value of the `textarea` element from the DOM, you will get HTML encoded data.
    This means that `<strong>text</strong>` becomes `&lt;strong&gt;text&lt;/strong&gt;`
    which may or may not be what you actually want.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在使用格式化文本之前，你还需要检查你正在处理的值是否已被 HTML 编码。如果你从 DOM 中检索 `textarea` 元素的原始值，你将得到
    HTML 编码的数据。这意味着 `<strong>text</strong>` 变为 `&lt;strong&gt;text&lt;/strong&gt;`，这可能是你想要的，也可能不是。
- en: 'To get the non-HTML encoded data, you need to call the `value()` function on
    the `kendoEditor` object by using code like this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取非 HTML 编码的数据，你需要使用如下代码在 `kendoEditor` 对象上调用 `value()` 函数：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: But again, you need to be careful with what you are doing. You cannot post non-HTML
    encoded data like this to most web servers without bypassing some important security
    measures. The safer option would be to post the data to the web server in an HTML
    encoded form, then decode it and sanitize on the server-side before using it.
    This way you can still rightly reject some potentially malicious code from the
    page outright before starting the process of interpreting the user input.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 但再次提醒，你需要小心行事。你不能在不绕过一些重要安全措施的情况下将非 HTML 编码的数据像这样发布到大多数 Web 服务器上。更安全的选项是将数据以
    HTML 编码的形式发布到 Web 服务器上，然后在服务器端对其进行解码和清理，然后再使用它。这样，你仍然可以在开始解释用户输入之前，直接拒绝页面中的一些潜在恶意代码。
- en: 'Here is an updated page with some buttons that show you the different outputs
    from the DOM `val()` function versus the `kendoEditor value()` function:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个更新后的页面，其中包含一些按钮，展示了 DOM `val()` 函数与 `kendoEditor value()` 函数的不同输出：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This is the text retrieved from the Kendo `value()` function.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这是从 Kendo `value()` 函数检索到的文本。
- en: '![Understanding the HTML Editor](img/4346OT_05_08.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![理解 HTML 编辑器](img/4346OT_05_08.jpg)'
- en: This is the text retrieved from the `innerHTML` of the Editor Widget.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是从编辑器小部件的 `innerHTML` 中检索到的文本。
- en: '![Understanding the HTML Editor](img/4346OT_05_09.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![理解 HTML 编辑器](img/4346OT_05_09.jpg)'
- en: Adding and removing buttons from the toolbar
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从工具栏添加和删除按钮
- en: 'There are a few more standard tools that are available in the HTML Editor toolbar
    that are not included by default:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 编辑器工具栏中还有一些标准工具，默认情况下并未包含：
- en: Subscript
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下标
- en: Superscript
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上标
- en: View HTML
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看HTML
- en: 'To include these tools, you need to specify the `tools` property when you create
    the `kendoEditor` object like this and list the specific tools that you want displayed:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要包含这些工具，你需要在创建 `kendoEditor` 对象时指定 `tools` 属性，如下所示，并列出你想要显示的具体工具：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you specify `tools` you need to name all the standard tools too, if you
    leave any out they will be removed from the toolbar on your page. Conversely,
    here is how you would add the subscript and superscript tools using ASP.NET MVC,
    curiously the `viewHtml` is not available in this method:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你指定了 `tools`，则需要命名所有标准工具，如果你省略了任何工具，它们将不会显示在你的页面工具栏上。相反，以下是使用 ASP.NET MVC
    添加下标和上标工具的方法，令人好奇的是，这种方法中不可用 `viewHtml`：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It could hardly be more concise, especially since with this method all of the
    default tools are assumed and you only have to add those that you want to include.
    If you wanted to clear out the default list of tools and then add only those that
    you want, you would first call `Clear()` within the `Tools` lambda expression
    and then add the specific tools that you wanted afterwards.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这几乎是最简洁的，特别是使用这种方法时，所有默认工具都被假定，你只需要添加你想要包含的工具。如果你想清除默认的工具列表，然后只添加你想要的工具，你首先需要在
    `Tools` lambda 表达式中调用 `Clear()`，然后添加你想要的特定工具。
- en: 'Here is the output with all of the standard tools included:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是包含所有标准工具的输出：
- en: '![Adding and removing buttons from the toolbar](img/4346OT_05_02.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![从工具栏添加和删除按钮](img/4346OT_05_02.jpg)'
- en: Adding the Styles tool
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加样式工具
- en: 'The Styles tool can be added to the HTML Editor toolbar to give the user access
    to some predefined styles that you have created. This could be useful if your
    users are using a special theme or if there are global styles that you want the
    users to have easy access to. To enable this, you configure the tools through
    the `kendoEditor` object and specify which options should appear in a drop-down
    list of styles. Here is an example:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here are the contents of the `StyleTool.css` file:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To make this work, I added the Style tool to the list of tools and then added
    the `style` configuration property and the optional `stylesheets` configuration
    property. The `style` configuration property defines the different options that
    appear in the Styles drop-down list, and which CSS classnames should be applied
    when these styles are selected for some text in the HTML editor `textarea`. The
    `stylesheets` configuration option allows you to import some additional stylesheets
    if they are necessary to display your custom styles.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how you would implement these styles using ASP.NET MVC:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here is the output from this code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the Styles tool](img/4346OT_05_03.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
- en: I included some styled text for the sake of demonstration and clicked on the
    **Styles** drop-down list to show how the options in that list are also styled
    to match their respective CSS classes.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Tool for inserting HTML snippets
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Snippets tool is a special toolbar option that is designed to insert predefined
    blocks of text into the editor window with a single click. It can be used for
    adding canned responses to common questions, signature blocks, time stamps, or
    any number of scenarios where pre-typed text would be useful. To enable this,
    just like the **Styles** option you configure the tools through the `kendoEditor`
    object and specify which options should appear in a drop-down list of styles.
    Here is an example:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Notice that this requires very little configuration to enable. We have included
    the `insertHtml` option in the `tools` configuration property and then added the
    `insertHtml` configuration property at the end of the `kendoEditor` definition.
    Inside the `insertHtml` configuration property, we have included an array of very
    simple objects. They define the title of each item that should appear in the drop-down
    list and the exact mark-up that should be pasted into the HTML Editor when the
    title is selected.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how you would implement these Snippets using ASP.NET MVC:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here is the output from this code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '![Tool for inserting HTML snippets](img/4346OT_05_04.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: Customizing HTML Editor tools
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Kendo HTML Editor control allows you to add your own custom options to
    the toolbar. This is a remarkable touch of flexibility in the Kendo UI framework,
    and is something that you may find quite useful if the available built-in tools
    do not completely suit your needs. The HTML Editor can accept at least three types
    of custom tools. There could be more but these three appear in the published documentation
    on the Kendo UI website:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Kendo HTML 编辑器控件允许您将自定义选项添加到工具栏中。这是 Kendo UI 框架中的一个显著灵活性体现，如果您觉得现有的内置工具不完全满足您的需求，这可能会非常有用。HTML
    编辑器可以接受至少三种类型的自定义工具。可能还有更多，但这些三种在 Kendo UI 网站上发布的文档中有所体现：
- en: Override Built-in Tools
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 覆盖内置工具
- en: Custom Template Tools
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义模板工具
- en: Custom In-line Tools
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义内联工具
- en: Drop-down list tools
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下拉列表工具
- en: 'If you would like to alter some of the built-in drop-down list tools, you can
    redefine which options appear inside them. This does not alter the nature of the
    tools or what the tools do. It only determines which options appear in the drop-down
    lists of the tools when you click on them. As an example, consider limiting which
    options appear in the font tool. By replacing the contents of the `items` array,
    you can customize exactly which options appear in the tool when it displays on
    the page:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想修改一些内置的下拉列表工具，您可以重新定义其中显示哪些选项。这不会改变工具的本质或工具的功能。它只决定当您点击工具时，下拉列表中显示哪些选项。例如，考虑限制字体工具中显示的选项。通过替换`items`数组的内容，您可以自定义工具在页面显示时精确显示哪些选项：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This code sample demonstrates a customized `fontName` tool limited to two specific
    options. These two fonts are not included in the default `fontName` tool as we
    saw before, but you could also include default fonts in this custom list as well.
    Here is the output of the HTML Editor configured with this custom tool:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码示例演示了一个自定义的`fontName`工具，限制为两个特定的选项。这两个字体在我们之前看到的默认`fontName`工具中并未包含，但您也可以在这个自定义列表中包含默认字体。以下是使用此自定义工具配置的
    HTML 编辑器的输出：
- en: '![Drop-down list tools](img/4346OT_05_05.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![下拉列表工具](img/4346OT_05_05.jpg)'
- en: You will notice that the first two options in the list are not options that
    I defined in my source code—**inherited font** and **Verdana**. These appear because
    the HTML Editor is enabling the font on the page from the outer containing HTML
    markup and is calling it the **inherited font**. It then labels this same font
    by name in case that helps the user make a font selection, so **inherited font**
    and **Verdana** are actually both referring to the same font inherited from the
    outer HTML markup of the overall page.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到列表中的前两个选项并不是我在源代码中定义的选项——**继承的字体**和**Verdana**。这是因为 HTML 编辑器正在从外部的包含 HTML
    标记中启用字体，并将其称为**继承的字体**。然后它通过名称标记这个相同的字体，以便帮助用户进行字体选择，所以**继承的字体**和**Verdana**实际上都指的是从整个页面的外部
    HTML 标记中继承的同一字体。
- en: This type of custom tool configuration should work with any of the custom tools
    that appear as a drop-down list such as the font name, font size, and format block
    tools.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这种自定义工具配置应该适用于任何以下拉列表形式出现的自定义工具，例如字体名称、字体大小和格式块工具。
- en: Button tools
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按钮工具
- en: 'It seems unlikely that you will need to override many of these controls since
    it would probably be more effective to create your own tool instead. Just in case
    you wanted to see how it was done, however, here is a sample of code taken from
    the Kendo UI website that demonstrates how to replace the `viewHtml` tool with
    custom code that replaces its functionality:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能不需要覆盖许多这些控件，因为创建自己的工具可能更有效。不过，如果您想看看如何实现，这里有一个从 Kendo UI 网站上摘取的代码示例，展示了如何用自定义代码替换`viewHtml`工具的功能：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here is the code as it appears on the page:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这是页面上的代码显示：
- en: '![Button tools](img/4346OT_05_10.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![按钮工具](img/4346OT_05_10.jpg)'
- en: This source code includes both a template and the `kendoEditor` configuration.
    You can see that this code is basically opening a dialog, filling it with the
    content from the HTML Editor control, wiring up the events for the buttons inside
    the dialog, and then displaying it to the user. It gives an example, at least,
    of what overriding one of the built-in tools looks like. Note that the logic for
    the tool's execution is inside a property called `exec`; this is common for all
    custom button tools as well. The `tooltip` property is the text that is displayed
    when the mouse is hovered over the button in the toolbar.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Custom template tools
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to create your own custom tool that has a drop-down list of options,
    the custom template tool is the best choice. It allows you to use a Kendo UI template
    to markup how the tool should be displayed on the toolbar, and you can wire up
    its functionality separately so that your tool can do whatever it needs to do:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You can see the Kendo template where the `label` and `select` elements are declared.
    The behavior for the `select` element is defined in the jQuery code, but the custom
    drop-down list tool is added to the HTML Editor through the `tools` property.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the output of the page with this custom tool:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '![Custom template tools](img/4346OT_05_06.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
- en: This is how you create custom tools that behave as a drop-down list. As you
    can see, the behavior is left completely up to you so you, can create whatever
    tool you need for your site's use case.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Custom in-line tools
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to create your own button tool on the toolbar, the in-line tool
    is the right choice. It allows you to define a tool name and the code to execute
    when that tool is selected from the toolbar.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This code shows a custom tool called `addHr` that will add an `hr` element to
    the HTML Editor control when clicked. You can also see the use of the `exec` function
    on the `kendoEditor` where you can indicate one of the built-in functions/tools
    of the HTML Editor and then provide an object that supplies the parameters for
    it.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the output from this code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '![Custom in-line tools](img/4346OT_05_07.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
- en: Using the HTML Editor API
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Kendo HTML Editor widget has a large set of API configuration options which
    allow you to fine-tune the widget to the specific needs and situation of your
    web page. It also exposes a set of methods and events that you can use to programmatically
    enable and react to functionality that the Edit widget exposes as it runs on the
    page. These options, taken together, are how you extend the Editor widget beyond
    its out of the box abilities.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Configuration options
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have already covered some of this in the material above, but here are the
    configuration options available for the HTML Editor control. As always, please
    check the Kendo UI Web documentation at `docs.kendoui.com/api/web/editor` for
    a more detailed list of configuration settings for these options, and to get the
    latest changes or additions to the API.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Events
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As with any HTML element or JavaScript object in a complex site, a web page
    fires events as the user performs certain actions within a page. By hooking into
    these events with your own JavaScript code, you can react to the page''s changes
    and data in real time and organize the functionality of your page based on actions
    that the user performs. The HTML Editor control fires the following events in
    response to user actions:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在复杂网站中的任何HTML元素或JavaScript对象一样，当用户在页面内执行某些操作时，网页会触发事件。通过使用自己的JavaScript代码挂钩到这些事件，你可以实时响应页面的变化和数据，并根据用户执行的操作组织页面的功能。HTML编辑器控件会根据用户操作触发以下事件：
- en: '`change`: This event fires every time that the data inside of the Editor Widget
    changes.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`change`: 当编辑器窗口内的数据发生变化时，此事件会触发。'
- en: '`execute`: This event fires fires when a tool is executed. It fires every time
    a tool bar button has been clicked and the code behind that button has been executed.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execute`: 当一个工具被执行时，此事件会触发。它会在每次工具栏按钮被点击且该按钮背后的代码被执行时触发。'
- en: '`keydown`: The keydown event fires every time a user presses a key down while
    typing inside of the Editor Widget window. Hooking into this event allows you
    to respond to text as the user is typing it.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keydown`: 当用户在编辑器窗口内按下键时，keydown事件会触发。通过挂钩到这个事件，你可以对用户正在输入的文本做出响应。'
- en: '`keyup`: The keydown event fires every time a user presses and releases a key
    while typing inside of the editor widget window. Hooking into this event allows
    you to respond to text as the user is typing it.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keyup`: 当用户在编辑器窗口内按下并释放键时，keydown事件会触发。通过挂钩到这个事件，你可以对用户正在输入的文本做出响应。'
- en: '`paste`: The paste event fires every time text is pasted into the Editor Widget
    area.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`paste`: 当文本被粘贴到编辑器窗口区域时，paste事件会触发。'
- en: '`select`: The select event fires every time text inside of the Editor Widget
    has been selected by a user.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`select`: 当用户在编辑器窗口内选择文本时，select事件会触发。'
- en: Summary
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The HTML Editor gives you a lot of functionality for a very small amount of
    necessary coding. In most cases, the default control will meet all of your needs
    for HTML editing on a normal site. But, if you find yourself with a need for a
    highly customized tool, this HTML Editor supports a rich API, detailed configuration
    options, and easily accessible events for capturing and responding to use actions.
    This is a control that is not appropriate for every site, but when you need something
    like this, it is a tremendous boost to productivity to find it all in such a useful
    and usable package.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: HTML编辑器为你提供了大量的功能，而所需的编码量却很少。在大多数情况下，默认控件将满足你在普通网站上对HTML编辑的所有需求。但是，如果你发现自己需要高度定制的工具，这个HTML编辑器支持丰富的API、详细的配置选项以及易于访问的事件，用于捕获和响应用户操作。这是一个不适合每个网站的控件，但当你需要这样的工具时，在这样一个有用且易用的包中找到它将极大地提高生产力。
- en: In the next chapter, we will cover two very important Kendo widgets—Menu and
    ListView. These widgets give you the ability to create responsive and feature-rich
    cascading page menus and organized data structures inside of your pages with the
    same Kendo approach that you have seen in all of the previous chapters. Building
    on what you already know, using these new widgets will be easy and you should
    be up and running before you know it.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍两个非常重要的Kendo控件——菜单和ListView。这些控件允许你使用在所有前几章中看到过的相同的Kendo方法，在你的页面中创建响应式和功能丰富的级联页面菜单以及组织良好的数据结构。基于你已有的知识，使用这些新控件将会很容易，你很快就会开始运行。
