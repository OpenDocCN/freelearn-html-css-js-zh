["```js\naTuple = (60,65,71,75,90)\n```", "```js\n(60,65,71,75,90) : ( number, number1, number2, number3, number4 )\n```", "```js\nlet \\\n (a,b,c,d,e) = aTuple \\\nin \\\n a + b + c + d + e\n```", "```js\n271 : number\n```", "```js\nlet \\\n (a,b,c,d,e) = aTuple \\\nin \\\n (a + b + c + d + e) / 5\n```", "```js\n72.2 : Float\n```", "```js\n(a,b,c,d,e) = aTuple \\\n```", "```js\nlet \\\n (a,b,c,d,e) = aTuple \\\nin \\\n (a+b+c) / 3\n```", "```js\n65.33333333333333 : Float\n```", "```js\nlet \\\n (a,b,c,d,e) = aTuple \\\nin \\\n e-a\n```", "```js\n30 : number\n```", "```js\naTupleOfStrings = (\"Hello\", \"Big\", \"Wild\", \"Funny\", \"World\")\n```", "```js\nlet \\\n (a, b) = aTupleOfStrings\nin \\\n a ++ e\n```", "```js\n-- TYPE MISMATCH --------------------------------------------- repl-temp-000.elm\n\n`aTupleOfStrings` is being used in an unexpected way.\n\n5| (a,e) = aTupleOfStrings\n ^^^^^^^^^^^^^^^\nBased on its definition, `aTupleOfStrings` has this type:\n\n ( String, String, String, String, String )\n\nBut you are trying to use it as:\n\n ( a, b )\n```", "```js\nlet \\\n (a,_,_,_,e) = aTupleOfStrings \\\nin \\\n a ++ e\n```", "```js\n''HelloWorld'' : String\n```", "```js\nlet \\\n (greeting,_,_,_,planetDescription) = aTupleOfStrings \\\nin \\\n greeting ++ planetDescription\n```", "```js\nmodule Main exposing (main)\n\nimport Html exposing (Html, text)\n\ngreeting = (\"Hello\", \"World\")\n\nmain : Html msg\nmain =\n    case greeting of \n        (\"Hello\", \"World\") ->\n            text \"Tuple contained: Hello, World!\"\n\n        (\"Hello\", _) ->\n            text \"Tuple contained: Hello \"\n\n        (_, \"World\") ->\n            text \"Tuple contained: World!\"\n\n        (_, _) ->\n            text \"There were neither 'Hello' nor 'World' in the greeting Tuple\"\n```", "```js\n(_, _) ->\n```", "```js\nTuple had: Hello, World!\n```", "```js\ngreeting = (\"Howdy\", \"World\")\n```", "```js\nTuple had: World!\n```", "```js\ngreeting = (\"Howdy\", \"Earth\")\n```", "```js\nThere were neither 'Hello' nor 'World' in the greeting Tuple\n```", "```js\nmodule Main exposing (main)\n\nimport Html exposing (..)\n\nn = 100\nmodulusTest = (n % 3, n % 5)\n\nmain : Html msg\nmain = \n  text <| let fizzBuzz n = \n              case modulusTest of\n                (0, 0) -> \"fizzBuzz\"\n                (0, _) -> \"fizz\"\n                (_, 0) -> \"buzz\"\n                (_,_) -> toString n\n          in fizzBuzz n\n```", "```js\nmain = \n  text (let fizzBuzz n = \n              case modulusTest of\n                (0, 0) -> \"fizzBuzz\"\n                (0, _) -> \"buzz\"\n                (_, 0) -> \"fizz\"\n                (_,_) -> toString n\n        in fizzBuzz n)\n```", "```js\nmodule Main exposing (main)\n\nimport Html exposing (..)\n\nn = 70\nmodulusTest = (n % 3, n % 7)\n\nmain : Html msg\nmain = \n  text (let fizzBuzz n = \n              case modulusTest of\n                (0, 0) -> \"Divisible by 21, seven, and three\"\n                (0, _) -> \"Divisible by three\"\n                (_, 0) -> \"Divisible by seven\"\n                (_,_) -> toString n\n        in fizzBuzz n)\n```", "```js\nnestedTuples = (1, 2, 3, (5, 10, 15, (100, 50, 0)))\n```", "```js\n(1,2,3,(5,10,15,(100,50,0)))\n : ( number\n , number1\n , number2\n , ( number3, number4, number5, ( number6, number7, number8 ) )\n      )\n```", "```js\nlet \\\n (a, b, c, (d, e, f, (g, h, i))) = nestedTuples \\\nin \\\n i\n```", "```js\n0 : number\n```", "```js\nmodule Main exposing (main)\n\nimport Html exposing (..)\n\nmain : Html msg\nmain = \n  text (toString (\n              let \n                  (a,b,c,(d,e,f,(g,h,i))) = (1, 2, 3, (5, 10, 15, (100, 50, 0)))\n              in\n                  i\n              ))\n```", "```js\nmodule Main exposing (main)\n\nimport Html exposing (..)\n\nmain : Html msg\nmain = \n  text (toString (\n              let \n                  (_,_,c,(_,_,f,(_,_,i))) = (1, 2, 3, (5, 10, 15, (100, 50, 0)))\n              in\n                  i\n              ))\n```", "```js\nmodule Main exposing (main)\n\nimport Html exposing (..)\n\nraceTimes = { first = 60, second = 65, third = 71, fourth = 75, fifth = 90 }\n\naverageRunnerTime record =\n    let \n        {first, second, third, fourth, fifth} = record\n    in\n        (first + second + third + fourth + fifth) / 5\n\nmain : Html msg\nmain = \n  text (toString (\n              averageRunnerTime raceTimes\n              ))\n```", "```js\n72.2\n```", "```js\nraceTimes = { first = 60, second = 65, third = 71, fourth = 75, fifth = 90 }\n```", "```js\n{ first = 60, second = 65, third = 71, fourth = 75, fifth = 90 }\n : { fifth : number\n , first : number1\n , fourth : number2\n , second : number3\n , third : number4\n }\n```", "```js\n{ fifth } = raceTimes\n```", "```js\n90 : number\n```", "```js\nmodule Main exposing (main)\n\nimport Html exposing (..)\n\nextractorFunction { fifth } =\n    fifth\n\nraceTimes = { first = 60, second = 65, third = 71, fourth = 75, fifth = 90 }\nfifth = raceTimes\n\nmain : Html msg\nmain = \n  text (toString (\n              extractorFunction raceTimes\n              ))\n```", "```js\nmodule Main exposing (main)\n\nimport Html exposing (..)\n\nraceTimes = { first = 60, second = 65, third = 71, fourth = 75, fifth = 90 }\nfifth = raceTimes\n\nmain : Html msg\nmain = \n  text (toString (\n              fifth\n              ))\n```", "```js\n{ first = 60, second = 65, third = 71, fourth = 75, fifth = 90 }\n```", "```js\nmodule Main exposing (main)\n\nimport Html exposing (..)\n\nraceTimes = { first = 60, second = 65, third = 71, fourth = 75, fifth = 90 }\nfifth = raceTimes\n\nmain : Html msg\nmain = \n  text (toString (\n              raceTimes.fifth\n              ))\n```", "```js\nmodule Main exposing (main)\n\nimport Html exposing (..)\n\nextractorFunction { first, fifth } =\n    first, fifth\n\nraceTimes = { first = 60, second = 65, third = 71, fourth = 75, fifth = 90 }\n{first, fifth} = raceTimes\n\nmain : Html msg\nmain = \n  text (toString (\n              extractorFunction raceTimes\n              ))\n```", "```js\nSYNTAX PROBLEM\nLine 6, Column 10\nI am looking for one of the following things:\n\n\"'\"\na field access like .name\nan expression\nan infix operator like (+)\nend of input\nmore letters in this name\nwhitespace\n```", "```js\nmodule Main exposing (main)\n\nimport Html exposing (..)\n\nextractorFunction { first, fifth } =\n    (first, fifth)\n\nraceTimes = { first = 60, second = 65, third = 71, fourth = 75, fifth = 90 }\n{first, fifth} = raceTimes\n\nmain : Html msg\nmain = \n  text (toString (\n              extractorFunction raceTimes\n              ))\n```", "```js\nextractorFunction { first, fifth } =\n    first, fifth\n```", "```js\nmodule Main exposing (main)\n\nimport Html exposing (..)\n\nraceTimes = { first = 60, second = 65, third = 71, fourth = 75, fifth = 90 }\n\nmain : Html msg\nmain = \n  text <|\n      toString (raceTimes.first)\n      ++ \", \" \n      ++ toString (raceTimes.fifth)\n```", "```js\nmain =\n  Html.beginnerProgram\n    { model = model\n    , view = view\n    , update = update\n    }\n```", "```js\nmain =\n    Html.program\n        { init = init\n        , view = view\n        , update = update\n        , subscriptions = subscriptions\n        }\n```", "```js\nconcatTwoWords wordOne wordTwo = wordOne ++ \" \" ++ wordTwo\n```", "```js\nconcatTwoWords \"User\" \"Experience\"\n```", "```js\n\"User Experience\"\n```", "```js\nmodule Main exposing (main)\n\nimport Html exposing (Html, text)\n\nconcatTwoWords : String -> String -> String\nconcatTwoWords wordOne wordTwo = wordOne ++ \" \" ++ wordTwo\n\nmain : Html msg\nmain =\n    text (concatTwoWords \"User\" \"Experience\")\n```", "```js\nconcatTwoWords : String -> String -> String\n```", "```js\nmodule Main exposing (main)\n\nimport Html exposing (Html, text)\n\nconcatTwoWords : String -> String -> String\nconcatTwoWords wordOne wordTwo = wordOne ++ \" \" ++ wordTwo\n\nmain : Html msg\nmain =\n    text (concatTwoWords \"User\")\n```", "```js\nThe argument to function text is causing a mismatch.\n\nFunction text is expecting the argument to be:\n\nString\nBut it is:\n\nString -> String\nHint: It looks like a function needs 1 more argument.\n```", "```js\npartiallyApply = concatTwoWords wordOne\n```", "```js\npartiallyApplyAgain = partiallyApply wordTwo\n```", "```js\nmodule Main exposing (main)\n\nimport Html exposing (Html, text)\n\nwordOne = \"User\"\nwordTwo = \"Experience\"\n\nconcatTwoWords : String -> String -> String\nconcatTwoWords wordOne wordTwo = wordOne ++ \" \" ++ wordTwo\n\npartiallyApply = concatTwoWords wordOne\npartiallyApplyAgain = partiallyApply wordTwo\n\nmain : Html msg\nmain =\n    text (partiallyApplyAgain)\n```"]