- en: Chapter 10. Building a Game – Pacman
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will build the game called **Pacman**. We will learn how
    to program with the help of HTML5 Canvas in Opa, including drawing shapes, texts,
    and images on the canvas. We will also discuss how to use an external JavaScript
    library. The complete source code can be found at [https://github.com/winbomb/opapackt/tree/master/opacman](https://github.com/winbomb/opapackt/tree/master/opacman).
    Following is a screenshot of our Pacman game:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a Game – Pacman](img/3749OS_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The project structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create an empty Opa project with the `opa create opacman` command. We need
    to modify the project structure. Let''s first have a look at the modified project
    structure of our Pacman game:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The project structure](img/3749OS_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is a brief description of the project files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`src`: The source code, `ghost.opa` and `pacman.opa` define the type of ghost
    and Pacman, `render.opa` takes charge of drawing on the canvas, and `game.opa`
    contains the game logic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resources`: This folder contains the required resources, including images,
    sounds, and styles'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resources/js`: `Preloadjs.min.js` and `soundjs.min.js` are two open source
    JavaScript libraries and are used to preload game resources and to play sounds'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plugins`: `Preloader.js` is a plugin that we write to load game resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We need to rewrite the `opa.conf` file to include the source code in the `src`
    directory:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`opacman.game` has the following files:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`src/game.opa`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/ghost.opa`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/pacman.opa`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/render.opa`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We need to modify `Makefile` to remove database support as we do not need the
    database in this application. We also need to tell the compiler to compile the
    plugins with source code. These two jobs can be done by changing `FLAG` with the
    following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The HTML5 Canvas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First of all, we need a canvas element on which to draw our graphics. The HTML5
    Canvas element is an HTML tag similar to the `<div>`, `<a>`, and `<table>` tags,
    with the exception that its contents are rendered with JavaScript. In Opa, we
    create a canvas element the exact same way in which we create other HTML elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This code creates a canvas with the `gamecanvas` ID. When the canvas element
    is ready, the `Game.gamestart` function will be invoked to start the game.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next we must get the canvas context. It is important for us to understand the
    difference between the canvas element and the canvas context. The canvas element
    is a DOM node embedded in the HTML page, whereas the canvas context is an object
    with properties and methods that you can use to render graphics inside the canvas
    element. The context can be 2D or 3D (WebGL). In our Pacman game, we are using
    the 2D context. To get the canvas 2D context, we use the `Canvas.get_context_2d`
    function. The following code fragment demonstrates how to get the canvas context
    for a given ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note that each canvas element can only have one context. If we use the `Canvas.get_context_2d`
    method multiple times for the same element, it will return the same context.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing a shape
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have the context of our canvas element, we can draw graphics on
    it. Opa and JavaScript use similar code to draw the graphics. The primary difference
    between them is that the drawing functions in Opa are static. All drawing methods
    can be found in the `Canvas` module.
  prefs: []
  type: TYPE_NORMAL
- en: Using the fill and stroke properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Whenever we wish to draw shapes on a canvas, there are two properties that
    we need to set: `Stroke` and `Fill`. `Stroke` and `fill` determine how the shape
    is drawn. The `stroke` property is used for the outline of a shape; the `fill`
    property is used for the inside of a shape. In the following example, the first
    two lines fill a rectangle, whereas the last three lines stroke a rectangle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the result of the preceding code fragment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the fill and stroke properties](img/3749OS_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that we used `Canvas.save` and `Canvas.restore` in the preceding code.
    Each canvas context maintains a stack of drawing states such as `fillStyle` and
    `strokeStyel`. Since a canvas can only have one 2D context, `Canvas.save` and
    `Canvas.restore` are used to save and restore canvas states in short.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing a curve
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our game, we create our Pacman by drawing an arc on the canvas. When the
    Pacman's mouth is open, we draw a pie, and when it's closed, we draw a circle.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can draw the pie and the circle both with the `Canvas.arc` function. Arcs
    are defined by a center point, a radius, a starting angle, an ending angle, and
    the drawing direction (either clockwise or counterclockwise). The following diagram
    shows how we should draw the Pacman when he is facing left:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Drawing a curve](img/3749OS_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'First, we move to the center point and begin drawing from the starting angle
    `5*PI/4`. We then draw an arc to the ending angle `3*PI/4` moving clockwise. Finally,
    we fill and stroke the shape. Here is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Drawing an image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To display an image on HTML5 Canvas in Opa, we can use the `Canvas.draw_image`
    function that requires an image object and a destination point. Since the `draw_image`
    method requires an image object, we must first create an image and wait for it
    to load before we can draw it on the canvas. In our game, we will preload all
    images and sounds at the beginning of the game as you will see later. The `Canvas.draw_image`
    function is declared as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The first argument that we pass to `draw_image` is the canvas context that
    we retrieved. The second argument is the image object of type `Canvas.image`.
    The `Canvas.image` type is declared as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`Image.image` is an external type. It is identical to the image type that we
    created in JavaScript with the `new Image()` code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We preload the images when the game starts. When needed, we will obtain an
    image object by calling the plugin function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition to the draw_image function, there are two more functions that we
    can use to draw images on canvas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: To set the size of an image, we can use `draw_image_with_dimensions`. This will
    scale the image to the target size. The `draw_image_full` function is even more
    powerful, as we can use it to crop the image.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing the text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To display texts on a canvas in Opa, we can use the `Canvas.fill_text` or `Canvas.stroke_text`
    method. We can change the fill style or stroke style by invoking `Canvas.set_fill_style`
    or `Canvas.set_stroke_style` respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set the font of the text, use the `Canvas.set_font` function. We should
    pass the font information to the method; the font information is a string matching
    the following pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code draws the word "start" twice, one is filled and the other
    is stroked, both with font information `italic bold 40px verdana`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the preceding code fragment is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Drawing the text](img/3749OS_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Binding the external JavaScript library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our Pacman game, we need to preload game resources such as images and sounds.
    We need to play sounds and music as well. Of course, we could write our own code
    to accomplish these tasks. However, why reinvent the wheel? There are numerous
    JavaScript libraries that make our job easier. The following section shows how
    to bind an existing JavaScript library into our game.
  prefs: []
  type: TYPE_NORMAL
- en: Preloading the resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a program requires multiple images and sounds, as is the case with our
    Pacman game, it's usually a good idea to load all of the resources before displaying
    or playing them. There are many excellent JavaScript libraries available. For
    our purposes, the Preload JS 0.3.0 (for resource) and SoundJS 0.4.0 (for sounds)
    libraries are a good fit. You can download Preload JS 0.3.0 from [https://github.com/CreateJS/PreloadJS](https://github.com/CreateJS/PreloadJS)
    and the SoundJS 0.4.0 library is available at [https://github.com/CreateJS/SoundJS](https://github.com/CreateJS/SoundJS).
  prefs: []
  type: TYPE_NORMAL
- en: 'To bind the JavaScript library, we must register those functions that we plan
    to call from within our Opa code. We have discussed how to bind JavaScript in
    [Chapter 6](ch06.html "Chapter 6. Binding with Other Languages"), *Binding with
    Other Languages*. In our Pacman game, we register a `preload` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The `preload` function uses `PreloadJS` to preload resources, and will invoke
    a callback when it is finished. We can call the `preload` function in Opa in the
    following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The complete code can be found in `plugins/preloader.js` and `/src/game.opa`.
  prefs: []
  type: TYPE_NORMAL
- en: Playing sounds
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We bind the `SoundJS` library and play sounds by registering a function in the
    `preloader.js` plugin file. The function invokes methods from SoundJS to build
    a sound instance and then play it. The `SoundJS` library is entirely out of the
    scope of this book. For more details regarding the use of this library visit the
    SoundJS homepage.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we built a game called **Pacman**. First, we discussed how
    to declare an HTML5 Canvas element and how to get canvas context. Then, we reviewed
    how to draw shapes, images, and texts on a canvas. Finally, we showed how to write
    a plugin and embed external JavaScript libraries in the application.
  prefs: []
  type: TYPE_NORMAL
