["```js\nfunction fetchAuthUserThenCartsPromiseThen(username,\n  password) {\n  return fetch('https://fakestoreapi.com/auth/login', {\n    method: 'POST',\n    body: JSON.stringify({\n      username,\n      password,\n    }),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  }).then((res) => res.json());\n}\n```", "```js\nimport jwt_decode from 'https://esm.sh/jwt-decode';\nfunction fetchAuthUserThenCartsPromiseThen(username,\n  password) {\n  return // no change to the fetch() call\n    .then((res) => res.json())\n    .then((responseData) => {\n      const parsedValues = jwt_decode(responseData.token);\n      const userId = parsedValues.sub;\n      return userId;\n    })\n    .then((userId) =>\n      fetch(`https://fakestoreapi.com/carts/user/${userId}\n        ?sort=desc`)\n    )\n    .then((res) => res.json());\n}\n```", "```js\nconst username = 'kevinryan';\nconst password = 'kev02937@';\nconst userCartsDataPromiseThen = await\n  fetchAuthUserThenCartsPromiseThen(\n  username,\n  password\n);\nassert.deepEqual(userCartsDataPromiseThen, [\n  {\n    __v: 0,\n    date: '2020-01-01T00:00:00.000Z',\n    id: 4,\n    products: [\n      {\n        productId: 1,\n        quantity: 4,\n      },\n    ],\n    userId: 3,\n  },\n  {\n    __v: 0,\n    date: '2020-03-01T00:00:00.000Z',\n    id: 5,\n    products: [\n      {\n        productId: 7,\n        quantity: 1,\n      },\n      {\n        productId: 8,\n        quantity: 1,\n      },\n    ],\n    userId: 3,\n  },\n]);\n```", "```js\nconst output = syncGetAuthUserCarts();\nconsole.log(output);\n```", "```js\npromisifiedGetAuthUserCarts().then((output) => {\n  console.log(output);\n});\n```", "```js\nconst output = await promisifiedGetAuthUserCarts();\nconsole.log(output);\n```", "```js\nasync function fetchAuthUserThenCartsAsyncAwait\n  (username, password) {\n  const authResponse = await fetch('https://fakestoreapi.com/auth/login', {\n    method: 'POST',\n    body: JSON.stringify({\n      username,\n      password,\n    }),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const authData = await authResponse.json();\n}\n```", "```js\nImport jwt_decode from 'https://esm.sh/jwt-decode';\nasync function fetchAuthUserThenCartsAsyncAwait\n  (username, password) {\n  // no change to /auth/login API call code\n  const parsedValues = jwt_decode(authData.token);\n  const userId = parsedValues.sub;\n}\n```", "```js\nasync function fetchAuthUserThenCartsAsyncAwait\n  (username, password) {\n  // no change to /auth/login call or token parsing logic\n  const userCartsResponse = await fetch(\n    `https://fakestoreapi.com/carts/user/${userId}?sort=desc`\n  );\n  const userCartsResponseData = await userCartsResponse.\n    json();\n  return userCartsResponseData;\n}\n```", "```js\nconst username = 'kevinryan';\nconst password = 'kev02937@';\nconst userCartsDataAsyncAwait = await fetchAuthUserThenCartsAsyncAwait(\n  username,\n  password\n);\nassert.deepEqual(userCartsDataAsyncAwait, userCartsDataPromiseThen);\n```", "```js\nconst response = await fetch(url);\nconst data = await response.json();\n```", "```js\nconst data = await fetch(url).then((response) => response.json());\n```", "```js\nfunction fetchCartPromiseThen(cartId = '1') {\n  return fetch(`https://fakestoreapi.com/carts/${cartId}`).\n    then((res) =>\n    res.json()\n  );\n}\n```", "```js\nfunction fetchCartPromiseThen(cartId = '1') {\n    // no change to previous operations\n    .then((cart) => {\n      const productUrls = cart.products.map(\n        (p) => `https://fakestoreapi.com/products/$\n           {p.productId}`\n      );\n    })\n}\n```", "```js\nfunction fetchCartPromiseThen(cartId = '1') {\n    // no change to previous operations\n    .then((cart) => {\n      // no change to productUrls generation\n      return Promise.all([\n        { cart },\n        ...productUrls.map((url) => fetch(url).then\n          ((res) => res.json())),\n      ]);\n    })\n}\n```", "```js\nfunction fetchCartPromiseThen(cartId = '1') {\n    // no change to previous operations\n    .then(([prev, ...products]) => {\n      return {\n        ...prev,\n        products,\n      };\n    });\n}\n```", "```js\nconst cartDataFromPromiseThen = await fetchCartPromiseThen\n  ('1');\n```", "```js\nassert.deepEqual(cartDataFromPromiseThen.cart, {\n  __v: 0,\n  date: '2020-03-02T00:00:00.000Z',\n  id: 1,\n  products: [\n    {\n      productId: 1,\n      quantity: 4,\n    },\n    {\n      productId: 2,\n      quantity: 1,\n    },\n    {\n      productId: 3,\n      quantity: 6,\n    },\n  ],\n  userId: 1,\n});\n```", "```js\nassert.deepEqual(cartDataFromPromiseThen.products[0], {\n  category: \"men's clothing\",\n  description:\n    'Your perfect pack for everyday use and walks in the\n     forest. Stash your laptop (up to 15 inches) in the\n     padded sleeve, your everyday',\n  id: 1,\n  image: 'https://fakestoreapi.com/img/\n    81fPKd-2AYL._AC_SL1500_.jpg',\n  price: 109.95,\n  rating: {\n    count: 120,\n    rate: 3.9,\n  },\n  title: 'Fjallraven - Foldsack No. 1 Backpack, Fits 15\n    Laptops',\n});\nassert.deepEqual(cartDataFromPromiseThen.\n  products[1], {\n  category: \"men's clothing\",\n  description:\n    'Slim-fitting style, contrast raglan long sleeve, three-button henley placket, light weight & soft fabric for breathable and comfortable wearing. And Solid stitched shirts with round neck made for durability and a great fit for casual fashion wear and diehard baseball fans. The Henley style round neckline includes a three-button placket.',\n  id: 2,\n  image:\n    'https://fakestoreapi.com/img/\n       71-3HjGNDUL._AC_SY879._SX._UX._SY._UY_.jpg',\n  price: 22.3,\n  rating: {\n    count: 259,\n    rate: 4.1,\n  },\n  title: 'Mens Casual Premium Slim Fit T-Shirts ',\n});\nassert.deepEqual(cartDataFromPromiseThen.products[2], {\n  category: \"men's clothing\",\n  description:\n    'great outerwear jackets for Spring/Autumn/Winter, suitable for many occasions, such as working, hiking, camping, mountain/rock climbing, cycling, traveling or other outdoors. Good gift choice for you or your family member. A warm hearted love to Father, husband or son in this thanksgiving or Christmas Day.',\n  id: 3,\n  image: 'https://fakestoreapi.com/img/\n    71li-ujtlUL._AC_UX679_.jpg',\n  price: 55.99,\n  rating: {\n    count: 500,\n    rate: 4.7,\n  },\n  title: 'Mens Cotton Jacket',\n});\n```", "```js\nPromise.resolve({ id: 1 })\n  .then((cart) => {\n    const productUrls = [];\n    return Promise.all([{ cart }, ...productUrls.map(()\n      => {})]);\n  })\n  .then(([prev, ...products]) => {});\n```", "```js\nfunction fetchCartFunctionVariable() {\n  let loadedCart = null;\n  return Promise.resolve({ id: 1 })\n    .then((cart) => {\n      loadedCart = cart;\n      const productUrls = [];\n      return Promise.all(productUrls.map(() => {}));\n    })\n    .then((products) => ({\n      cart: loadedCart,\n      products,\n    }));\n}\n```", "```js\nassert.deepEqual(await fetchCartFunctionVariable(), {\n  cart: { id: 1 },\n  products: [],\n});\n```", "```js\nasync function fetchCartAsyncAwait(cartId = '1') {\n  const cart = await fetch(`https://fakestoreapi.com/carts/${cartId}`).then(\n    (res) => res.json()\n  );\n}\n```", "```js\nasync function fetchCartAsyncAwait(cartId = '1') {\n  // no change to cart fetching\n  const productUrls = cart.products.map(\n    (p) => `https://fakestoreapi.com/products/${p.productId}`\n  );\n  const products = await Promise.all(\n    productUrls.map((url) => fetch(url).then((res)\n      => res.json()))\n  );\n}\n```", "```js\nasync function fetchCartAsyncAwait(cartId = '1') {\n  // no changes to cart or products fetching\n  return {\n    cart,\n    products,\n  };\n}\n```", "```js\nconst cartDataFromAsyncAwait = await fetchCartAsyncAwait\n  ('1');\nassert.deepEqual(cartDataFromPromiseThen.cart,\n  cartDataFromAsyncAwait.cart);\nassert.deepEqual(\n  cartDataFromPromiseThen.products,\n  cartDataFromAsyncAwait.products\n);\n```", "```js\nfunction fetchWithCancel(url) {\n  const abortController = new AbortController();\n  const response = fetch(url, { signal:\n    abortController.signal }).then((res) =>\n    res.json()\n  );\n  return {\n    response,\n  };\n}\n```", "```js\nfunction fetchWithCancel(url) {\n  // no changes to contents\n  return {\n    // no changes to other keys in the object\n    cancel: () => abortController.abort(),\n  };\n}\n```", "```js\nfunction fetchWithCancel(url) {\n  // no change to abortController initiationisalition\n  const response = fetch(url, { signal: abortController.signal })\n    .then((res) => res.json())\n    .catch((err) => {\n      if (err.name === 'AbortError') return 'Aborted';\n      throw err;\n    });\n  // no change to return value\n}\n```", "```js\nconst fetchProduct1 = fetchWithCancel\n  ('https://fakestoreapi.com/products/1');\nconst fetchProduct2 = fetchWithCancel('https://fakestoreapi.com/products/2');\nfetchProduct1.cancel();\n```", "```js\nassert.deepEqual(await fetchProduct1.response, 'Aborted');\nassert.deepEqual(await fetchProduct2.response, {\n  category: \"men's clothing\",\n  description:\n    'Slim-fitting style, contrast raglan long sleeve, three-button henley placket, light weight & soft fabric for breathable and comfortable wearing. And Solid stitched shirts with round neck made for durability and a great fit for casual fashion wear and diehard baseball fans. The Henley style round neckline includes a three-button placket.',\n  id: 2,\n  image:\n    'https://fakestoreapi.com/img\n      /71-3HjGNDUL._AC_SY879._SX._UX._SY._UY_.jpg',\n  price: 22.3,\n  rating: {\n    count: 259,\n    rate: 4.1,\n  },\n  title: 'Mens Casual Premium Slim Fit T-Shirts ',\n});\n```", "```js\nasync function fetchWithTimeout(url, timeout = 500) {\n  const abortController = new AbortController();\n  return fetch(url, { signal: abortController.signal });\n}\n```", "```js\nasync function fetchWithTimeout(url, timeout = 500) {\n  // no change to abortController\n  setTimeout(() => {\n    abortController.abort();\n  }, timeout);\n  // no change to fetch call or return\n}\n```", "```js\nconst timedoutFetchShouldSucceedData = await fetchWithTimeout(\n  'https://fakestoreapi.com/products/1',500\n)\n  .then((res) => res.json())\n  .catch((error) => {\n    if (error.name === 'AbortError') {\n      return 'Aborted';\n    }\n    throw error;\n  });\nconsole.assert(\n  timedoutFetchShouldSucceedData.id === 1,\n  'fetchWithTimeout with 500ms timeout should have\n    succeeded'\n);\n```", "```js\nconst timedoutFetchShouldAbort = await fetchWithTimeout(\n  'https://fakestoreapi.com/products/1',10\n)\n  .then((res) => res.json())\n  .catch((error) => {\n    if (error.name === 'AbortError') {\n      return 'Aborted';\n    }\n    throw error;\n  });\nconsole.assert(\n  timedoutFetchShouldAbort === 'Aborted',\n  'fetchWithTimeout with 10ms timeout should have\n    aborted but did not'\n);\n```", "```js\nfunction throttle(fn, timeout) {\n  let isThrottled = false;\n  return (...args) => {\n    isThrottled = true;\n    return fn(...args);\n  };\n}\n```", "```js\nfunction throttle(fn, timeout) {\n  // no change to existing variable definitions\n  let lastCallArgs = null;\n  return (...args) => {\n    if (isThrottled) {\n      lastCallArgs = args;\n      return;\n    }\n    // no change to \"initial call\" case\n  };\n}\n```", "```js\nfunction throttle(fn, timeout) {\n  // no change to existing variable definitions\n  return (...args) => {\n    // no change to short-circuit logic\n    setTimeout(() => {\n      isThrottled = false;\n      return fn(...lastCallArgs);\n    }, timeout);\n    // no change to \"initial call\" case\n  };\n}\n```", "```js\nlet messages = [];\nconst storeMessage = (message) => {\n  messages.push(message);\n};\n```", "```js\nconst throttledStoreMessage = throttle(storeMessage, 1);\nthrottledStoreMessage('throttle-1');\nthrottledStoreMessage('throttle-2');\nthrottledStoreMessage('throttle-3');\nthrottledStoreMessage('throttle-4');\nthrottledStoreMessage('throttle-5');\nthrottledStoreMessage('throttle-6');\nthrottledStoreMessage('throttle-7');\nthrottledStoreMessage('throttle-8');\nthrottledStoreMessage('throttle-9');\nthrottledStoreMessage('throttle-10');\nawait timeout();\nassert.deepEqual(messages, ['throttle-1', 'throttle-10']);\nfunction timeout(ms = 0) {\n  return new Promise((r) => setTimeout(r, ms));\n}\n```", "```js\nmessages = [];\nthrottledStoreMessage('throttle-1');\nthrottledStoreMessage('throttle-2');\nthrottledStoreMessage('throttle-3');\nthrottledStoreMessage('throttle-4');\nthrottledStoreMessage('throttle-5');\nawait timeout();\nthrottledStoreMessage('throttle-6');\nthrottledStoreMessage('throttle-7');\nthrottledStoreMessage('throttle-8');\nthrottledStoreMessage('throttle-9');\nthrottledStoreMessage('throttle-10');\nassert.deepEqual(messages, ['throttle-1', 'throttle-5', 'throttle-6']);\nawait timeout();\nassert.deepEqual(messages, [\n  'throttle-1',\n  'throttle-5',\n  'throttle-6',\n  'throttle-10',\n]);\n```", "```js\nfunction debounce(fn, timeout) {\n  let timeoutId;\n  return (...args) => {\n    timeoutId = setTimeout(() => {\n      fn(...args);\n    }, timeout);\n  };\n}\n```", "```js\nfunction debounce(fn, timeout) {\n  // no change to variable declarations\n  return (...args) => {\n    clearTimeout(timeoutId);\n    // no change to setTimeout logic\n  };\n}\n```", "```js\nmessages = [];\nconst debouncedStoredMessage = debounce(storeMessage, 1);\ndebouncedStoredMessage('debounce-1');\ndebouncedStoredMessage('debounce-2');\ndebouncedStoredMessage('debounce-3');\ndebouncedStoredMessage('debounce-4');\ndebouncedStoredMessage('debounce-5');\ndebouncedStoredMessage('debounce-6');\ndebouncedStoredMessage('debounce-7');\ndebouncedStoredMessage('debounce-8');\ndebouncedStoredMessage('debounce-9');\ndebouncedStoredMessage('debounce-10');\nassert.deepEqual(messages, []);\nawait timeout();\nassert.deepEqual(messages, ['debounce-10']);\n```", "```js\nmessages = [];\ndebouncedStoredMessage('debounce-1');\ndebouncedStoredMessage('debounce-2');\ndebouncedStoredMessage('debounce-3');\ndebouncedStoredMessage('debounce-4');\ndebouncedStoredMessage('debounce-5');\nawait timeout();\ndebouncedStoredMessage('debounce-6');\ndebouncedStoredMessage('debounce-7');\ndebouncedStoredMessage('debounce-8');\ndebouncedStoredMessage('debounce-9');\ndebouncedStoredMessage('debounce-10');\nassert.deepEqual(messages, ['debounce-5']);\nawait timeout();\nassert.deepEqual(messages, ['debounce-5', 'debounce-10']);\n```", "```js\nfunction batch(inputArray, batchSize) {\n  const batchCount = Math.ceil(inputArray.length /\n    batchSize);\n  const batches = Array.from({ length: batchCount });\n}\n```", "```js\nfunction batch(inputArray, batchSize) {\n  // no change to existing size computations\n  return batches.map((_, batchNumber) => {\n    return inputArray.slice(\n      batchNumber * batchSize,\n      (batchNumber + 1) * batchSize\n    );\n  });\n}\n```", "```js\nfunction batch(inputArray, batchSize) {\n  const batchCount = Math.ceil(inputArray.length /\n    batchSize);\n  return Array.from({ length: batchCount }, (_,\n    batchNumber) => {\n    return inputArray.slice(\n      batchNumber * batchSize,\n      (batchNumber + 1) * batchSize\n    );\n  });\n}\n```", "```js\nassert.deepEqual(batch([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 4), [\n  [1, 2, 3, 4],\n  [5, 6, 7, 8],\n  [9, 10, 11],\n]);\nassert.deepEqual(batch([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 3), [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n  [10, 11],\n]);\n```", "```js\nconst numberResolverBatches = batch(\n  [Promise.resolve(1), Promise.resolve(2), Promise.resolve(3)],\n  2\n);\nconsole.assert(numberResolverBatches.length === 2);\nconsole.assert(numberResolverBatches[0].length === 2);\nconsole.assert(numberResolverBatches[1].length === 1);\n```", "```js\nasync function resolveBatches(batchedPromises) {\n  const flattenedBatchOutput = [];\n  for (const batch of batchedPromises) {\n    const resolved = await Promise.all(batch);\n    flattenedBatchOutput.push(...resolved);\n  }\n  return flattenedBatchOutput;\n}\nconst batchOutput = await resolveBatches(numberResolverBatches);\nassert.deepEqual(batchOutput, [1, 2, 3]);\n```"]