- en: Chapter 10. Deploying HTML5 Games
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*We have created several HTML5 games throughout the book. In this chapter,
    we discuss several approaches through which we can deploy our games to let others
    play them.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the game to a web page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying the game as a mobile web app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrapping the game into an OS X app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying the game to the App Store.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are different channels to deploy HTML5 games. We can put the game online
    in a normal web page or deploy it as a mobile web app. Otherwise, we can deploy
    the game on the Chrome Web Store. For native app stores, we have different app
    store options according to the types of the games. We choose desktop or mobile
    app stores to deploy our games. For desktop games, we can deploy the game to the
    Mac App Store or Windows Store. For games for mobile devices, we can deploy them
    to the iOS app store and Android app stores.
  prefs: []
  type: TYPE_NORMAL
- en: The most direct approach to deploy HTML5 games to app stores is by using Web
    View components from the target platform to host the HTML file and the related
    assets.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the deploying materials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When deploying the game, we usually need to prepare for the store listing. This
    means we need to make the app icon, several screenshots, and game description.
    Some stores may optionally accept a short game play video.
  prefs: []
  type: TYPE_NORMAL
- en: Putting the game on the Web
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The requirement of the server depends on the technology we used in the game.
    For games that only involved client-side HTML, CSS, and JavaScript, we can use
    any web hosting, including the static website hosting service. Often, these static
    hosting services allow you to easily upload the website in a ZIP file or via cloud
    storage such as Dropbox.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon S3 is also an affordable choice for hosting a static website. For example,
    my HTML5 games are hosted on S3 with **Amazon CloudFront** as the Content Delivery
    Network (CDN) to boost the caching and loading performance. You can check out
    a site for HTML5 games at [http://makzan.net/html5-games-list/](http://makzan.net/html5-games-list/).
  prefs: []
  type: TYPE_NORMAL
- en: Another popular and free way to host static websites is via the GitHub page.
    GitHub is a service that hosts the Git repository, and it provides every repository
    with a static website hosting feature. You can learn more about it in their guide
    at [https://help.github.com/categories/github-pages-basics/](https://help.github.com/categories/github-pages-basics/).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some services mentioned in this chapter require you to use Git version control
    to push the code to their server. Git is a code version control system. You may
    learn about it via the online resource at [http://git-scm.com/book/](http://git-scm.com/book/).
  prefs: []
  type: TYPE_NORMAL
- en: Hosting the node.js server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For games that require a server, such as the multiplayer game, we need to host
    the game server. Take our draw-and-guess game as an example; we need a hosting
    that supports the running of the Node.js server. To get a list of hosting that
    supports running Node.js, go to: [https://github.com/joyent/node/wiki/Node-Hosting](https://github.com/joyent/node/wiki/Node-Hosting).'
  prefs: []
  type: TYPE_NORMAL
- en: Some of them, such as Heroku, are free during low usage and charge you after
    your application gets popular and needs to use more server resources. This pricing
    model is good for us to test the game with the public without paying a high price
    for a server renting fee.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying as a mobile web app in the home screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can make the game able to be installed on mobile devices' home screens by
    configuring several `meta` tags.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – adding a meta tag for a mobile web app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will take an audio game as an example to begin with. Let''s perform the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `index.html` file in the code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the following code within the head section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Test the game on an iOS device or a simulator. To do this, try tapping on the
    **Share** button and then select **Add to Home Screen**. You should see the icon
    and the name of the game. Continue to add the game to the home screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, open the game from the home screen. It will open in fullscreen mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the home button to enable the app-switching screen. You will
    be able to see that the app has its own place, similar to a natively installed
    application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are developing on Mac, you may use the iOS simulator that comes with
    the free Xcode development IDE from Apple. Simply drag the HTML file into the
    simulator, and you can test your game in mobile Safari.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have added several `meta` tags that are recognized by mobile operating systems,
    specifically iOS. The idea of a mobile web app was introduced with the debut of
    the first iPhone in 2007\. We tell the system that our web browser is capable
    of being displayed like an app. Then, the system makes the web page very similar
    to an app to the user's perspective.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default icon size is 60 x 60\. We can also provide pixel-perfect icons
    by specifying each dimension for the iPhone and iPad:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Building an HTML5 game into a Mac OS X app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, I will show you how we can wrap an HTML5 game with a Web View
    and build it into a native application. This section includes code with other
    programming languages in a different development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action—putting the HTML5 games into a Mac app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Follow the steps in Mac Xcode. We need a Mac and the Apple Xcode to create a
    Mac OS X app. Download Xcode from the Mac App Store if you haven't got it.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Even if you don't have a Mac, you can still have a look at how we wrap the Web
    View with an application. The concept is more important than the steps in this
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Launch Xcode and create a new project. Select **Cocoa Application** under **OS
    X**:![Time for action—putting the HTML5 games into a Mac app](img/B04290_10_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Options View, give the name of the game as **Product Name**. **Organization
    Name** can be your name or a company's name. Use a reversed domain as **Organization
    Identifier**. Choose **Objective-C** for this code example. We keep the default
    value for the other options.![Time for action—putting the HTML5 games into a Mac
    app](img/B04290_10_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Main.storyboard` file from the left panel. In the bottom-right panel,
    choose the third tab (which is highlighted in blue in the following screenshot).
    Drag the **Web View** component into the Window View. The Web View should become
    full width and height when you drag and drop it into the view:![Time for action—putting
    the HTML5 games into a Mac app](img/B04290_10_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the bottom of the window, there are several icons that configure how you
    can handle the resizing of the app window. Keep the **Web View** selected and
    then select the second icon that pops up a window, as shown in the following screenshot.
    Click on the four spacing icons that are beside the **0** input at the top to
    turn them into solid red lines:![Time for action—putting the HTML5 games into
    a Mac app](img/B04290_10_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After selecting the four spacings at the top, click on the **Add Constraints**
    button. This tells the Web View to maintain **0** spacing between all the four
    edges when the window resizes.![Time for action—putting the HTML5 games into a
    Mac app](img/B04290_10_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we set the window size to fit our game. To do this, select the window.
    On the top-right panel, choose the fifth tab. Then, we make the window's size
    exactly 1,300 px width and 600 px height:![Time for action—putting the HTML5 games
    into a Mac app](img/B04290_10_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we enable the **Show Assistant Editor** option in the **View** menu. Keep
    the `Main.storyboard` option on the left and open the `ViewController.h` file
    in the right panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the left panel, identify the **Web View** component. Right-click on the component
    and drag it to the interface section in the `ViewController.h` file. This allows
    us to name the component for future reference. Name the Web View component as
    `gameWebView`:![Time for action—putting the HTML5 games into a Mac app](img/B04290_10_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have now configured the view. Let's move on to the code. We used the Web
    View component that is part of the WebKit framework. We need to include it in
    the project. To do this, select the **CarGame** project on the left panel. In
    the **Linked Framework and Libraries** section under the **General** tab, click
    on the plus icon to add the WebKit framework:![Time for action—putting the HTML5
    games into a Mac app](img/B04290_10_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we should see `WebKit.framework` in the **Linked Frameworks and Libraries**
    section:![Time for action—putting the HTML5 games into a Mac app](img/B04290_10_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the `ViewController.m` file and put the following code inside the
    `viewDidLoad` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, your `ViewController.m` file should look like the following screenshot:![Time
    for action—putting the HTML5 games into a Mac app](img/B04290_10_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click on the **Play** button on the top left of the Xcode that is shown
    in the following screenshot:![Time for action—putting the HTML5 games into a Mac
    app](img/B04290_10_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After you click on the Play button, the application will build and open a window
    with our car game running, as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action—putting the HTML5 games into a Mac app](img/B04290_10_11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just wrapped our game with a native application by using the Web View component.
    We used Xcode and Objective-C to demonstrate the behind-the-scenes scenario of
    wrapping the Web View. You can actually apply the same techniques in other languages
    and platforms, for example, using Swift in iOS or even building Windows applications
    with their Web View components in the Windows platform.
  prefs: []
  type: TYPE_NORMAL
- en: Building an HTML5 game into a mobile app with the Web View
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We had a glimpse of how wrapping the game in a Web View works. It's very similar
    to wrapping a Web View into a mobile app. For example, in iOS, we use the Xcode
    and create an iPhone or iPad project to which we add a Web View in the default
    view. Inside the Web View, we load the HTML file by using a similar technique
    in the Mac app section.
  prefs: []
  type: TYPE_NORMAL
- en: For an Android app, we can use Android Studio. Android uses a different programming
    language; it uses Java, but the concept is the same. We create a Web View component
    in the main view and load our HTML5 game via a URL.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that we need a certificate to deploy an iOS app into app store.
    To obtain the certificate, we need to join the Apple Developer Program that requires
    an annual fee. For the Mac app, we can distribute the game on our own or deploy
    it to the Mac App Store with a Mac developer certificate.
  prefs: []
  type: TYPE_NORMAL
- en: Building with the PhoneGap build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is another option to build Android and iPhone apps from web apps—by using
    the PhoneGap build service. The service allows you to upload a ZIP file of the
    web game. Then, it uses Web View to display the HTML, similar to our previous
    Web View examples.
  prefs: []
  type: TYPE_NORMAL
- en: '![Building with the PhoneGap build](img/B04290_10_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The difference is that PhoneGap provides several hardware resources via its
    JavaScript API. Since our game hasn't used any PhoneGap API, it gives pretty much
    the same result as wrapping the Web View ourselves and building using the PhoneGap.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't have any native programming experience, PhoneGap or a similar cloud
    building service is a good choice. If you are comfortable with native development
    environment, I prefer wrapping the Web View myself. This provides more flexibility
    for future development in case we need to mix native and Web View to make it a
    hybrid application.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Besides a PhoneGap build, there are other services that try to put HTML5 games
    into the native app platform. CocoonJS ([https://www.ludei.com/cocoonjs/](https://www.ludei.com/cocoonjs/))
    is another platform for this purpose. Instead of just wrapping the Web View inside
    a native application, CocoonJS tries to convert the canvas drawing API into the
    operating system's OpenGL command to gain further performance.
  prefs: []
  type: TYPE_NORMAL
- en: App store's reviewing process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are different review processes per deploying channel. For example, Apple
    often takes 1 to 4 weeks to review the app before allowing it on their app stores.
    On the other hand, Google often takes hours to review apps on the Play Store.
    If you are new to the store, it often takes an extra week to get familiar with
    its configuration tool. So, be ready 4 weeks in advance if you need to push the
    game on the app stores to a deadline, such as a client project.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We didn't go through the process of uploading our game to app stores because
    their configuration and store listing may change over time. The important thing
    is to have all the material and target builds ready. With all the material ready,
    uploading and configuring for each store shouldn't be a burden.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about publishing the game to different platforms.
    Specifically, we discussed static website hosting services to deploy our HTML5
    games. We listed servers that run node.js. We updated our code to work well with
    the home screen web app. We tried to put our HTML5 game into Web View in Xcode.
    We also discussed the building of mobile apps and their review process.
  prefs: []
  type: TYPE_NORMAL
- en: We discussed different aspects of making HTML5 games with CSS3 and JavaScript
    in nine chapters. We learned how to build a traditional Ping Pong game in DOM
    and built a card-matching game in CSS3 and an Untangle puzzle game with Canvas.
    Then, we explored how to add sounds to the game and created a mini piano musical
    game around it. Next, we discussed saving and loading game statuses by using the
    local storage. We also built a draw-and-guess real-time multiplayer game with
    WebSockets. Then, we created a car game with a physics engine in this chapter.
    Finally, we discussed how we can deploy our HTML5 games to different platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Throughout the book, we built different types of games, and you learned some
    essential techniques that you need to make HTML5 games. The next step is to go
    on and deploy your own games. To help develop your own games, there are some resources
    that can be helpful. The following list gives some useful links for HTML5 game
    development:'
  prefs: []
  type: TYPE_NORMAL
- en: 'General HTML5:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML5 Game Development ([http://www.html5gamedevelopment.com/](http://www.html5gamedevelopment.com/))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML5 Rocks ([http://www.html5rocks.com/](http://www.html5rocks.com/))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML5 game engines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ImpactJS ([http://impactjs.com/](http://impactjs.com/))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: CreateJS ([http://createjs.com/](http://createjs.com/))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Phaser ([http://phaser.io/](http://phaser.io/))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Game sprites and textures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lost Garden ([http://lunar.lostgarden.com/labels/free%20game%20graphics.html](http://lunar.lostgarden.com/labels/free%20game%20graphics.html))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: HasGraphics sprites, textures, and tilesets ([http://hasgraphics.com/category/sprites/](http://hasgraphics.com/category/sprites/))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Subtle Patterns ([http://subtlepatterns.com](http://subtlepatterns.com))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
