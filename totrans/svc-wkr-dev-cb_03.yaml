- en: Chapter 3. Accessing Offline Content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Caching critical resources for offline use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing cached content first
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a cache and network race
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using window.caches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing stale-while-revalidate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You don't need network access for your laptop or smartphone to be useful. Especially
    in areas where mobile data is expensive, with some proper planning, you can download
    certain apps that you can sync via free Wi-Fi, and then use them offline elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile apps such as Google Maps, FeedMe, and Wikipedia give us offline apps,
    which can be used anywhere regardless of the Internet. Making our own app offline-compatible
    is a great way of winning the hearts of our clients.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start this chapter by looking at how to cache critical resources for use
    offline.
  prefs: []
  type: TYPE_NORMAL
- en: Caching critical resources for offline use
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we look at how we can cache a set of critical resources to enable
    users to go offline and provide the user with the same experience. In the meantime,
    we will notify the user that they can go offline and continue to use the same
    features.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure. Alternatively, you
    can download the files from the following location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/03/01/](https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/03/01/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we must create an `index.html` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript file called `index.js`, in the same folder as the `index.html`
    file, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript file called `game.js`, in the same folder as the `index.html`
    file, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript file called `service-worker.js`, in the same folder as
    the `index.html` file, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript file called `style.css`, in the same folder as the `index.html`
    file, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open up a browser and go to the `index.html` file:![How to do it...](img/B05381_03_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see the **Ready to go offline!** message. This means that we can play
    the game offline. Now open up DevTools (*Cmd* + *Alt* + *I* or *F12*), go to the
    **Network** tab, click on the dropdown displaying **No throttling**, and select
    **Offline**:![How to do it...](img/B05381_03_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now refresh your browser, and you will be able to continue playing the game.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can select a company name from the dropdown and click the **Try** button:![How
    to do it...](img/B05381_03_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Every time the selection does not match the result, it will show a message saying
    **Boo! Try again..**, and you will see the attempts count:![How to do it...](img/B05381_03_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once your selection matches you will get a success message with the attempt
    count, and you will see the attempts count:![How to do it...](img/B05381_03_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our `index.html` file contains the structure for the dropdown, buttons, and
    image. The dropdown contains the options for the brand:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The values for the options are specified by numbers, which later match up with
    the images, so the order is important. As you can see, they start with 0, to adhere
    to the 0-based index of the array where we are going to store the names of the
    companies later on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `style.css` file contains all the styles we need for our page. The top
    two declarations are common styles for all the elements and the body element respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The styles for failed and successful messages contain orange and green colors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The notification message is initially hidden. This is done by assigning a class
    with `display:none`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The first of the three JavaScript files, `index.js`, performs service worker
    registration, and then listens to the `controllerchange` event. It also handles
    the event for the reset button.
  prefs: []
  type: TYPE_NORMAL
- en: The game engine for our little game is in the `game.js` file. So let's go through
    what's happening inside this file.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we declare two variables at the top, `attempts` and `images`, with initial
    values; `attempts` contains the initial value for tries, 0, and `images`, which
    is an array constant, has the brand names in order. The order of the brands is
    important so that it matches the dropdown in the `index.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'When the user clicks the `try` button, the game logic in the callback function
    is handled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'There is a lot going on in the declaration section in the callback handler.
    So let''s look at each initialization:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First we grab the logo from the **Document Object Model** (**DOM**):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also capture the user `choice` and `attempts` element from the DOM, and
    the result element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then we capture the data attribute from the logo element, and we generate a
    random number with `getRandomIndex()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We generate a random number for the next index, as long as it is not the one
    we already have for the index:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we are set the brand images source to the image at the random index we
    created. Then we set the `data-image` attribute to the same index:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For example, this may create an HTML element like the following on our web
    page:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We make sure the class name for the result element is cleared before adding
    a new one. Then we increase the attempts count:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we find out whether the new index is equal to the choice the user made.
    Note that we have used a double equation instead of triple deliberately, because
    the choice is a string and `newIndex` is an integer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s move on to the `service-worker.js` file. There we handle three events:
    install, fetch, and activate. In the install event handler, we cache all the dependencies—the
    files we need to go offline:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the fetch handler, we check whether the resources are in the cache.
    If yes, then the response is provided by the cache:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Otherwise, return the result from the server itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we are forcing a `controllerchange` event on `navigator.serviceWorker`
    by calling `claim()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Registering a service worker in detail* recipe of [Chapter 1](ch01.html
    "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker Basics*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Loading CSS offline* recipe of [Chapter 2](ch02.html "Chapter 2. Working
    with Resource Files"), *Working with Resource Files*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing cached content first
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are a regular visitor to a certain website, chances are that you may
    be loading most of the resources, such as CSS and JavaScript files, from your
    cache, rather than from the server itself. This saves us necessary bandwidth for
    the server, as well as requests over the network. Having control over which content
    we deliver from the cache and server is a great advantage. Server workers provide
    us with this powerful feature by having programmatic control over the content.
    In this recipe, we are going to look at the methods that enable us to do so by
    creating a performance art event viewer web app.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure. Alternatively, you
    can download the files from the following location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/03/02/](https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/03/02/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we must create an `index.html` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a CSS file called `style.css` in the same folder as the `index.html`
    file. You can find the source code in the following location on GitHub:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/03/02/style.css](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/03/02/style.css)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a JavaScript file called `index.js` in the same folder as the `index.html`
    file. You can find the source code in the following location on GitHub:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/03/02/index.js](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/03/02/index.js)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open up a browser and go to `index.html`:![How to do it...](img/B05381_03_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, we are requesting data from the network with caching enabled. Click on
    the **Fetch** button:![How to do it...](img/B05381_03_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you click **Fetch** again, the data has been retrieved first from cache,
    and then from the network, so you see duplicate data (see that the last line is
    the same as the first):![How to do it...](img/B05381_03_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we are going to select the **Disabled** checkbox under the **Network** label,
    and click the **Fetch** button again, in order to fetch data only from the cache:![How
    to do it...](img/B05381_03_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Disabled** checkbox under the **Network** label, as well as the
    **Cache** label, and click the **Fetch** button again:![How to do it...](img/B05381_03_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `index.js` file, we are setting a page-specific name for the cache,
    as the caches are origin-based, and no other page should use the same cache name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'If you inspect the **Resources** tab of the development tools, you will find
    the cache inside the **Cache Storage** tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B05381_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we have already fetched network data, we don''t want the cache fetch to
    complete and overwrite the data that we just got from the network. We use the
    `networkDataReceived` flag to let the cache fetch callbacks to know whether a
    network fetch has already completed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We are storing elapsed time for the network and cache in two variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The source URL, for example, is pointing to a file location in GitHub via RawGit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to set up your own source URL, you can easily do so by creating
    a gist or a repository on GitHub, and creating a file with your data in JSON format
    (you don''t need the `.json` extension). Once you''ve done that, copy the URL
    of the file, head over to [https://rawgit.com](https://rawgit.com), and paste
    the link there to obtain another link with a content type header, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B05381_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Between the time we press the **Fetch** button and when the data is received,
    we have to make sure the user doesn''t change the search criteria, or press the
    **Fetch** button again. To handle this situation, we disable the controls:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The returned data will be rendered to the screen in rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Each item of the `events` array will be printed to the screen as rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B05381_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The function `handleFetchComplete` is the callback for both the cache and the
    network.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the disabled checkbox is checked, we are simulating a network error by throwing
    an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Because request bodies can only be read once, we have to clone the response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We place the cloned response in the cache using `cache.put` as a key/value
    pair. This helps subsequent cache fetches to find this update data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we read the response in JSON format. Also, we make sure that any in-flight
    cache requests will not be overwritten by the data we have just received, using
    the `networkDataReceived` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'To prevent overwriting the data we received from the network, we make sure
    only to update the page if the network request has not yet returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'When the user presses the **Fetch** button, they make nearly simultaneous requests
    of the network and the cache for data. This happens on a page load in a real-world
    application, instead of as a result of a user action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'We start by disabling any user input while the network fetch requests are initiated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'We request data using the `fetch` API with a cache-busting URL, as well as
    the no-cache option in order to support Firefox, which hasn''t implemented the
    caching options yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to simulate network delays, we wait before calling the network fetch
    callback. In situations where the callback errors out, we have to make sure that
    we reject the promise we received from the original fetch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'To simulate cache delays, we wait before calling the cache fetch callback.
    If the callback errors out, we make sure that we reject the promise we got from
    the original call to match:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The `formatDate` function is a helper function for us to convert the date format
    we receive in the response into a much more readable format on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: If you use a different date format, you can shuffle the position of the array
    in the return statement to your preferred format.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a cache and network race
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If your client is using older and slower hardware, including older hard drives,
    there is a chance that accessing resources from a hard drive could be slower than
    accessing the same resources on a faster Internet connection. But just because
    some of your users are using slower hardware, it doesn't justify accessing resources
    already in the hardware over the network all the time, because some users may
    have faster hardware that could be a waste of data. To resolve this issue, we
    can implement a solution that performs a race condition, and fetch data according
    to which resolves first.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure. Alternatively, you
    can download the files from the following location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/03/03/](https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/03/03/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we must create an `index.html` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript file called `style.css` in the same folder as the `index.html`
    file with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript file called `index.js`, in the same folder as the `index.html`
    file, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript file called `service-worker.js`, in the same folder as
    the `index.html` file with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open up a browser and go to the `index.html` file:![How to do it...](img/B05381_03_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open up DevTools (*Cmd* + *Alt* + *I* or *F12*), go to the **Network** tab,
    click on the dropdown, and select **GPRS(50 kb/s)** in order to simulate a slower
    network speed:![How to do it...](img/B05381_03_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Refresh the page and you will see the same page. But if you view the network
    requests, you will be able to find out that the service worker kicked in:![How
    to do it...](img/B05381_03_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `service-worker.js` file, we are caching the necessary resources for
    us to go offline and still use the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Then we create a function called `resolveAny`. The purpose of this function
    is to handle race conditions in a proper manner. The promise has a function called
    `race()`. This function is of no help to us, as it rejects if a promise has rejected
    before fulfilling.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `resolveAny` function returns a new promise. Inside the promise, we make
    sure the array we pass in is an array of promises:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we make sure that we resolve the current promise as soon as another one
    in the array gets resolved:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'We also make sure to reject if all promises are rejected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: The callback function of the event listener for fetch calls the `resolveAny`
    function and passes in two functions, `caches.match(event.request)` and `fetch(event.request)`.
    Both these functions send the same request, resulting in a race condition.
  prefs: []
  type: TYPE_NORMAL
- en: Using window.caches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we look at how to prefetch specific resources during the installation
    of the service worker, as well as how to use the window.cache to make requests
    against the Cache Storage API, not within the scope of the service worker, but
    from the context of the HTML document.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure. Alternatively, you
    can download the files from the following location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/03/04/](https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/03/04/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we must create an `index.html` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a CSS file called `style.css` in the same folder as the `index.html`
    file. You can find the source code on GitHub at the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/03/04/style.css](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/03/04/style.css)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a JavaScript file called `index.js`, in the same folder as the `index.html`
    file, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript file called `app.js` in the same folder as the `index.html`
    file. The source code for this file can be found on GitHub at the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/03/04/app.js](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/03/04/app.js)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create an HTML file called `prefetched.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript file called `service-worker.js`, in the same folder as
    the `index.html` file, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open up a browser and go to the `index.html` file. You will see one prefetched
    bookmark:![How to do it...](img/B05381_03_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a bookmark by typing a URL and clicking on the **Add** button on the right:![How
    to do it...](img/B05381_03_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can delete a bookmark by clicking on the tick icon on the right-hand side
    of the bookmark.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add another bookmark and refresh the page. You will see the bookmarks are intact.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our `service-worker.js` file, we maintain a cache version in order to use
    a fresh cache by incrementing the `cacheVersion` value. When the updated service
    worker kicks in, the old caches will be removed as a part of the activate event
    handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'The following resource will be displayed as a bookmarked URL when you load
    the page for the first time, and the event will be logged in your developer console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'If there is a possibility that the resources being fetched are served off a
    server that does not support CORS, it is important to use `{mode: ''no-cors''}`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The `catch()` method handles any exceptions from the `caches.open()` and `cache.addAll()`
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'In the event handler for activate, we delete all caches that are not named
    in `currentCaches`. While in this example there is only one cache, the same logic
    handles cases where there are multiple versioned caches:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'If this cache name isn''t present in the array of "expected" cache names, then
    delete it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s move on to the `app.js` file, where most of the work is taking place.
    The `initializeBookmarks` function attaches an event listener to the form for
    the submit button. In the callback for submit, the value of the text field is
    extracted and then a list is generated with it. This list is then attached to
    the unordered list represented by the ID of the articles in the `index.html` file.
    We then call the `showBookmarks()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'We also add an event listener to the unordered articles list for the click
    event. Inside the callback, we remove the item itself if it''s a list (`li`) element.
    This is how we remove articles from the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `showBookmarks()` function, we clear out any of the previous URLs, in
    case this function was called after adding a new URL to the cache:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'We then iterate over all the available caches, and for each of the caches,
    iterate over all of the URLs, adding each cache to the bookmark list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s look at the function that actually uses `window.fetch()` to retrieve
    a response from the network and store it in the named cache. The important thing
    here is that the service worker controlling this page has no fetch event handler,
    therefore this request is made without the involvement of the service worker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'The `addRequestToBookmarks()` function is a helper function for adding a cached
    request to the list of the cached bookmarks. In this function, we''re creating
    a span, a button, and a list item, and appending those to the unordered articles
    list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, the `removeCachedBookmark()` function removes the cache entry by a given
    a cache name and a URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'The `waitUntilInstalled()` helper function returns a promise which gets resolved
    once the service worker registration passes the `installing` state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'If the current registration portrays the `installing` service worker, then
    we make sure to wait until the installation step, where the resources are pre-fetched,
    completes to display the bookmark list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'If that''s not the case, and this isn''t the `installing` service worker, then
    we can safely assume the installation must have been completed during a previous
    visit to the current page, and the resources have already been prefetched. Therefore
    we can now show the list of bookmarks right away:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Implementing stale-while-revalidate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having the latest version of the cache is sometimes not absolutely necessary
    for resources such as certain images of a web page. We can use the cached version
    if available, and fetch an update next time.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure. Alternatively, you
    can download the files from the following location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/03/05/](https://github.com/szaranger/szaranger.github.io/tree/master/service-workers/03/05/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we must create an `index.html` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript file called `index.js` in the same folder as the `index.html`
    file with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript file called `service-worker.js`, in the same folder as
    the `index.html` file, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Download the `adobe-log.png` image from the source code, or use your own image
    in the same folder as the `index.html` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open up a browser and go to `index.html`. You will see the **Registration status:
    successful** message and the logo:![How to do it...](img/B05381_03_19.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now if you refresh the page and inspect the **Console** tab of the Developer
    Tools, you will be able to see that the `adobe-logo.png` file has been fetched
    from the cache.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our `service-worker.js` file, we make sure that if a cached version is available,
    we use it instead of a network request, but fetch an update the next time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
