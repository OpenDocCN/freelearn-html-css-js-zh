["```js\n    function Shape(){ \n    this.name = 'Shape'; \n    this.toString = function () { \n        return this.name; \n      }; \n    } \n\n    function TwoDShape(){ \n      this.name = '2D shape'; \n    } \n\n    function Triangle(side, height){ \n      this.name = 'Triangle'; \n      this.side = side; \n      this.height = height; \n      this.getArea = function () { \n        return this.side * this.height / 2; \n      }; \n    } \n\n```", "```js\n    TwoDShape.prototype = new Shape(); \n    Triangle.prototype = new TwoDShape(); \n\n```", "```js\n    TwoDShape.prototype.constructor = TwoDShape; \n    Triangle.prototype.constructor = Triangle; \n\n```", "```js\n    >var my = new Triangle(5, 10); \n    >my.getArea(); \n    25 \n\n```", "```js\n    >my.toString(); \n    \"Triangle\" \n\n```", "```js\n    >my.constructor === Triangle; \n    true \n\n```", "```js\n    > my instanceof Shape; \n    true \n    > my instanceofTwoDShape; \n    true \n    > my instanceof Triangle; \n    true \n    > my instanceof Array; \n    false \n\n```", "```js\n    >Shape.prototype.isPrototypeOf(my); \n    true \n    >TwoDShape.prototype.isPrototypeOf(my); \n    true \n    >Triangle.prototype.isPrototypeOf(my); \n    true \n    >String.prototype.isPrototypeOf(my); \n    false \n\n```", "```js\n    >var td = new TwoDShape(); \n    >td.constructor === TwoDShape; \n    true \n    >td.toString(); \n    \"2D shape\" \n    >var s = new Shape(); \n    >s.constructor === Shape; \n    true \n\n```", "```js\n    function Shape(){ \n    this.name = 'Shape'; \n    } \n\n```", "```js\n    function Shape() {} \n    Shape.prototype.name = 'Shape'; \n\n```", "```js\n    // constructor \n    function Shape() {} \n\n    // augment prototype \n    Shape.prototype.name = 'Shape'; \n    Shape.prototype.toString = function () { \n      return this.name; \n    }; \n\n    // another constructor \n    function TwoDShape() {} \n\n    // take care of inheritance \n    TwoDShape.prototype = new Shape(); \n    TwoDShape.prototype.constructor = TwoDShape; \n\n    // augment prototype \n    TwoDShape.prototype.name = '2D shape'; \n\n```", "```js\n    function Triangle(side, height) { \n    this.side = side; \n    this.height = height; \n    } \n    // take care of inheritance \n    Triangle.prototype = new TwoDShape(); \n    Triangle.prototype.constructor = Triangle; \n\n    // augment prototype \n    Triangle.prototype.name = 'Triangle'; \n    Triangle.prototype.getArea = function () { \n    return this.side * this.height / 2; \n    }; \n\n```", "```js\n    >var my = new Triangle(5, 10); \n    >my.getArea(); \n    25 \n    >my.toString(); \n    \"Triangle\" \n\n```", "```js\n    >my.hasOwnProperty('side'); \n    true \n    >my.hasOwnProperty('name'); \n    false \n\n```", "```js\n    >TwoDShape.prototype.isPrototypeOf(my); \n    true \n    > my instanceof Shape; \n    true \n\n```", "```js\n    function Shape() {} \n    // augment prototype \n    Shape.prototype.name = 'Shape'; \n    Shape.prototype.toString = function () { \n      return this.name; \n    }; \n\n    function TwoDShape() {} \n    // take care of inheritance \n    TwoDShape.prototype = Shape.prototype; \n    TwoDShape.prototype.constructor = TwoDShape; \n    // augment prototype \n    TwoDShape.prototype.name = '2D shape'; \n\n    function Triangle(side, height) { \n      this.side = side; \n      this.height = height; \n    } \n\n    // take care of inheritance \n    Triangle.prototype = TwoDShape.prototype; \n    Triangle.prototype.constructor = Triangle; \n    // augment prototype \n    Triangle.prototype.name = 'Triangle'; \n    Triangle.prototype.getArea = function () { \n      return this.side * this.height / 2; \n    }; \n\n```", "```js\n    >var my = new Triangle(5, 10); \n    >my.getArea(); \n    25 \n    >my.toString(); \n    \"Triangle\" \n\n```", "```js\n    Triangle.prototype.name = 'Triangle'; \n\n```", "```js\n    >var s = new Shape(); \n    >s.name; \n    \"Triangle\" \n\n```", "```js\n    function Shape() {} \n    // augment prototype \n    Shape.prototype.name = 'Shape'; \n    Shape.prototype.toString = function () { \n    return this.name; \n    }; \n\n    function TwoDShape() {} \n    // take care of inheritance \n    var F = function () {}; \n    F.prototype = Shape.prototype; \n    TwoDShape.prototype = new F(); \n    TwoDShape.prototype.constructor = TwoDShape; \n    // augment prototype \n    TwoDShape.prototype.name = '2D shape'; \n\n    function Triangle(side, height) { \n    this.side = side; \n    this.height = height; \n    } \n\n    // take care of inheritance \n    var F = function () {}; \n    F.prototype = TwoDShape.prototype; \n    Triangle.prototype = new F(); \n    Triangle.prototype.constructor = Triangle; \n    // augment prototype \n    Triangle.prototype.name = 'Triangle'; \n    Triangle.prototype.getArea = function () { \n    return this.side * this.height / 2; \n    }; \n\n```", "```js\n    >var my = new Triangle(5, 10); \n    >my.getArea(); \n    25 \n    >my.toString(); \n    \"Triangle\" \n\n```", "```js\n    >my.__proto__ === Triangle.prototype; \n    true \n    >my.__proto__.constructor === Triangle; \n    true \n    >my.__proto__.__proto__ === TwoDShape.prototype; \n    true \n    >my.__proto__.__proto__.__proto__.constructor === Shape; \n    true \n\n```", "```js\n    >var s = new Shape(); \n    >s.name; \n    \"Shape\" \n    >\"I am a \" + new TwoDShape(); // calling toString() \n    \"I am a 2D shape\" \n\n```", "```js\n    function Shape() {} \n    // augment prototype \n    Shape.prototype.name = 'Shape'; \n    Shape.prototype.toString = function () { \n    var const = this.constructor; \n    returnconst.uber \n        ? this.const.uber.toString() + ', ' + this.name \n        : this.name; \n    }; \n\n    function TwoDShape() {} \n    // take care of inheritance \n    var F = function () {}; \n    F.prototype = Shape.prototype; \n    TwoDShape.prototype = new F(); \n    TwoDShape.prototype.constructor = TwoDShape; \n    TwoDShape.uber = Shape.prototype; \n    // augment prototype \n    TwoDShape.prototype.name = '2D shape'; \n\n    function Triangle(side, height) { \n    this.side = side; \n    this.height = height; \n    } \n\n    // take care of inheritance \n    var F = function () {}; \n    F.prototype = TwoDShape.prototype; \n    Triangle.prototype = new F(); \n    Triangle.prototype.constructor = Triangle; \n    Triangle.uber = TwoDShape.prototype; \n    // augment prototype \n    Triangle.prototype.name = 'Triangle'; \n    Triangle.prototype.getArea = function () { \n    return this.side * this.height / 2; \n    }; \n\n```", "```js\n    >var my = new Triangle(5, 10); \n    >my.toString(); \n    \"Shape, 2D shape, Triangle\" \n\n```", "```js\n    function extend(Child, Parent) { \n    var F = function () {}; \n    F.prototype = Parent.prototype; \n    Child.prototype = new F(); \n    Child.prototype.constructor = Child; \n    Child.uber = Parent.prototype; \n    } \n\n```", "```js\n    extend(TwoDShape, Shape); \n    extend(Triangle, TwoDShape); \n\n```", "```js\n    // inheritance helper \n    function extend(Child, Parent) { \n      var F = function () {}; \n      F.prototype = Parent.prototype; \n      Child.prototype = new F(); \n      Child.prototype.constructor = Child; \n      Child.uber = Parent.prototype; \n    } \n\n    // define -> augment \n    function Shape() {} \n    Shape.prototype.name = 'Shape'; \n    Shape.prototype.toString = function () { \n      return this.constructor.uber \n        ? this.constructor.uber.toString() + ', ' + this.name \n        : this.name; \n    }; \n\n    // define -> inherit -> augment \n    function TwoDShape() {} \n    extend(TwoDShape, Shape); \n    TwoDShape.prototype.name = '2D shape'; \n\n    // define \n    function Triangle(side, height) { \n      this.side = side; \n      this.height = height; \n    } \n    // inherit \n    extend(Triangle, TwoDShape); \n    // augment \n    Triangle.prototype.name = 'Triangle'; \n    Triangle.prototype.getArea = function () { \n      return this.side * this.height / 2; \n    }; \n\n```", "```js\n    > new Triangle().toString(); \n    \"Shape, 2D shape, Triangle\" \n\n```", "```js\n    function extend2(Child, Parent) { \n      var p = Parent.prototype; \n      var c = Child.prototype; \n      for (var i in p) { \n        c[i] = p[i]; \n      } \n      c.uber = p; \n    } \n\n```", "```js\n    var Shape = function () {}; \n    var TwoDShape = function () {}; \n    Shape.prototype.name = 'Shape'; \n    Shape.prototype.toString = function () { \n      return this.uber \n        ? this.uber.toString() + ', ' + this.name \n        : this.name; \n    }; \n\n```", "```js\n    > extend(TwoDShape, Shape); \n    >var td = new TwoDShape(); \n    >td.name; \n    \"Shape\" \n    >TwoDShape.prototype.name; \n    \"Shape\" \n    >td.__proto__.name; \n    \"Shape\" \n    >td.hasOwnProperty('name'); \n    false \n    > td.__proto__.hasOwnProperty('name'); \n    false \n\n```", "```js\n    >extend2(TwoDShape, Shape); \n    >var td = new TwoDShape(); \n    > td.__proto__.hasOwnProperty('name'); \n    true \n    > td.__proto__.hasOwnProperty('toString'); \n    true \n    > td.__proto__.toString === Shape.prototype.toString; \n    true \n\n```", "```js\n    >td.toString(); \n    \"Shape, Shape\" \n\n```", "```js\n    >TwoDShape.prototype.name = \"2D shape\"; \n    >td.toString(); \n    \"Shape, 2D shape\" \n\n```", "```js\n    > function Papa() {} \n    >function Wee() {} \n    >Papa.prototype.name = 'Bear';  \n    >Papa.prototype.owns = [\"porridge\", \"chair\", \"bed\"]; \n\n```", "```js\n    >extend2(Wee, Papa); \n\n```", "```js\n    >Wee.prototype.hasOwnProperty('name'); \n    true \n    >Wee.prototype.hasOwnProperty('owns'); \n    true \n\n```", "```js\n    >Wee.prototype.owns; \n    [\"porridge\", \"chair\", \"bed\"] \n    >Wee.prototype.owns=== Papa.prototype.owns; \n    true \n\n```", "```js\n    >Wee.prototype.name += ', Little Bear'; \n    \"Bear, Little Bear\" \n    >Papa.prototype.name; \n    \"Bear\" \n\n```", "```js\n    >Wee.prototype.owns.pop(); \n    \"bed\" \n    >Papa.prototype.owns; \n    [\"porridge\", \"chair\"] \n\n```", "```js\n    >Wee.prototype.owns= [\"empty bowl\", \"broken chair\"]; \n    >Papa.prototype.owns.push('bed'); \n    >Papa.prototype.owns; \n    [\"porridge\", \"chair\", \"bed\"] \n\n```", "```js\n    Child.prototype = new Parent(); \n\n```", "```js\n    function extendCopy(p) { \n      var c = {}; \n      for (var i in p) { \n        c[i] = p[i]; \n      } \n      c.uber = p; \n      return c; \n    } \n\n```", "```js\n    var shape = { \n    name: 'Shape', \n    toString: function () { \n    return this.name; \n    } \n    }; \n\n```", "```js\n    var twoDee = extendCopy(shape); \n    twoDee.name = '2D shape'; \n    twoDee.toString = function () { \n    return this.uber.toString() + ', ' + this.name; \n    }; \n\n```", "```js\n    var triangle = extendCopy(twoDee); \n    triangle.name = 'Triangle'; \n    triangle.getArea = function () { \n    return this.side * this.height / 2; \n    }; \n\n```", "```js\n    >triangle.side = 5; \n    >triangle.height = 10; \n    >triangle.getArea(); \n    25 \n    >triangle.toString(); \n    \"Shape, 2D shape, Triangle\" \n\n```", "```js\n    function deepCopy(p, c) { \n      c = c || {}; \n      for (var i in p) { \n        if (p.hasOwnProperty(i)) { \n          if (typeof p[i] === 'object') { \n            c[i] = Array.isArray(p[i]) ? [] : {}; \n    deepCopy(p[i], c[i]); \n          } else { \n            c[i] = p[i]; \n          } \n        } \n      } \n      return c; \n    } \n\n```", "```js\n    var parent = { \n      numbers: [1, 2, 3], \n      letters: ['a', 'b', 'c'], \n      obj: { \n        prop: 1 \n      }, \n      bool: true \n    }; \n\n```", "```js\n    >var mydeep = deepCopy(parent); \n    >var myshallow = extendCopy(parent); \n    >mydeep.numbers.push(4,5,6); \n    6 \n    >mydeep.numbers; \n    [1, 2, 3, 4, 5, 6] \n    >parent.numbers; \n    [1, 2, 3] \n    >myshallow.numbers.push(10); \n    4 \n    >myshallow.numbers; \n    [1, 2, 3, 10] \n    >parent.numbers; \n    [1, 2, 3, 10] \n    >mydeep.numbers; \n    [1, 2, 3, 4, 5, 6] \n\n```", "```js\n        if (Array.isArray !== \"function\") { \n        Array.isArray = function (candidate) { \n            return  \n        Object.prototype.toString.call(candidate) ===  \n        '[object Array]'; \n        }; \n        } \n\n    ```", "```js\n    function object(o) { \n    function F() {} \n    F.prototype = o; \n    return new F(); \n    } \n\n```", "```js\n    function object(o) { \n    var n; \n    function F() {} \n    F.prototype = o; \n    n = new F(); \n    n.uber = o; \n    return n; \n    } \n\n```", "```js\n    var triangle = object(twoDee); \n    triangle.name = 'Triangle'; \n    triangle.getArea = function () { \n    return this.side * this.height / 2; \n    }; \n\n```", "```js\n    >triangle.toString(); \n    \"Shape, 2D shape, Triangle\" \n\n```", "```js\n    >var square = Object.create(triangle); \n\n```", "```js\n        function objectPlus(o, stuff) { \n          var n; \n          function F() {} \n          F.prototype = o; \n          n = new F(); \n          n.uber = o; \n\n         for (var i in stuff) { \n            n[i] = stuff[i]; \n            } \n          return n; \n        } \n\n    ```", "```js\n    var shape = { \n    name: 'Shape', \n    toString: function () { \n    return this.name; \n    } \n    }; \n\n```", "```js\n    var twoDee = objectPlus(shape, { \n      name: '2D shape', \n      toString: function () { \n        return this.uber.toString() + ', ' + this.name; \n      } \n    }); \n\n```", "```js\n    var triangle = objectPlus(twoDee, { \n      name: 'Triangle', \n      getArea: function () { return this.side * this.height / 2; \n     }, \n      side: 0, \n      height: 0 \n    }); \n\n```", "```js\n    var my = objectPlus(triangle, { \n      side: 4, height: 4 \n    }); \n    >my.getArea(); \n    8 \n    >my.toString(); \n    \"Shape, 2D shape, Triangle, Triangle\" \n\n```", "```js\n    >objectPlus(triangle, { \n      side: 4,  \n      height: 4, \n      name: 'My 4x4' \n    }).toString(); \n    \"Shape, 2D shape, Triangle, My 4x4\" \n\n```", "```js\n    function multi() { \n      var n = {}, stuff, j = 0, len = arguments.length; \n      for (j = 0; j <len; j++) { \n        stuff = arguments[j]; \n        for (var i in stuff) { \n          if (stuff.hasOwnProperty(i)) { \n            n[i] = stuff[i]; \n          } \n        } \n      } \n      return n; \n    } \n\n```", "```js\n    var shape = { \n      name: 'Shape', \n      toString: function () { \n        return this.name; \n      } \n    }; \n\n    var twoDee = { \n      name: '2D shape', \n      dimensions: 2 \n    }; \n\n    var triangle = multi(shape, twoDee, { \n      name: 'Triangle', \n      getArea: function () { \n        return this.side * this.height / 2; \n      }, \n      side: 5, \n      height: 10 \n    }); \n\n```", "```js\n    >triangle.getArea(); \n    25 \n    >triangle.dimensions; \n    2 \n    >triangle.toString(); \n    \"Triangle\" \n\n```", "```js\n    var twoD = { \n      name: '2D shape', \n      dimensions: 2 \n    }; \n\n```", "```js\n            function triangle(s, h) { \n              var that = object(twoD); \n              that.name ='Triangle'; \n              that.getArea = function () { \n                return this.side * this.height / 2; \n              }; \n              that.side = s; \n              that.height = h; \n              return that; \n            } \n\n    ```", "```js\n    >var t = triangle(5, 10); \n   >t.dimensions; \n    2 \n    >var t2 = new triangle(5,5); \n    >t2.getArea(); \n    12.5 \n\n```", "```js\n    function Shape(id) { \n      this.id = id; \n    } \n    Shape.prototype.name = 'Shape'; \n    Shape.prototype.toString = function () { \n      return this.name; \n    }; \n\n```", "```js\n   function Triangle() { \n    Shape.apply(this, arguments); \n    } \n    Triangle.prototype.name = 'Triangle'; \n\n```", "```js\n    >var t = new Triangle(101); \n    >t.name; \n    \"Triangle\" \n\n```", "```js\n    >t.id; \n    101 \n    >t.toString(); \n    \"[object Object]\" \n\n```", "```js\n    function Triangle() { \n      Shape.apply(this, arguments); \n    } \n    Triangle.prototype = new Shape(); \n    Triangle.prototype.name = 'Triangle'; \n\n```", "```js\n    function Shape(id) { \n      this.id = id; \n    } \n    function Triangle() { \n      Shape.apply(this, arguments); \n    } \n    Triangle.prototype = new Shape(101); \n\n```", "```js\n    >var t = new Triangle(202); \n    >t.id; \n    202 \n\n```", "```js\n    >t.__proto__.id; \n    101 \n    > delete t.id; \n    true \n    >t.id; \n    101 \n\n```", "```js\n    function Shape(id) { \n      this.id = id; \n    } \n    Shape.prototype.name = 'Shape'; \n    Shape.prototype.toString = function () { \n      return this.name; \n    }; \n\n    function Triangle() { \n      Shape.apply(this, arguments); \n    } \n    extend2(Triangle, Shape); \n    Triangle.prototype.name = 'Triangle'; \n\n```", "```js\n   >var t = new Triangle(101); \n    >t.toString(); \n    \"Triangle\" \n    >t.id; \n    101 \n\n```", "```js\n    >typeoft.__proto__.id; \n    \"undefined\" \n\n```", "```js\n    >t.uber.name; \n    \"Shape\" \n\n```", "```js\n    <canvas height=\"600\" width=\"800\" id=\"canvas\" /> \n\n```", "```js\n    <script> \n    // ... code goes here \n    </script> \n\n```", "```js\n    function Point(x, y) { \n      this.x = x; \n      this.y = y; \n    } \n\n```", "```js\n    function Line(p1, p2) { \n      this.p1 = p1; \n      this.p2 = p2; \n      this.length = Math.sqrt( \n      Math.pow(p1.x - p2.x, 2) + \n      Math.pow(p1.y - p2.y, 2) \n      ); \n    } \n\n```", "```js\n    function Shape() { \n      this.points = []; \n      this.lines= []; \n      this.init(); \n    } \n\n```", "```js\n    Shape.prototype = { \n      // reset pointer to constructor \n      constructor: Shape, \n\n      // initialization, sets this.context to point \n      // to the context if the canvas object \n      init: function () { \n        if (this.context === undefined) { \n          var canvas = document.getElementById('canvas'); \n          Shape.prototype.context = canvas.getContext('2d'); \n        } \n      }, \n\n      // method that draws a shape by looping through this.points \n      draw: function () { \n        var i, ctx = this.context; \n        ctx.strokeStyle = this.getColor(); \n        ctx.beginPath(); \n        ctx.moveTo(this.points[0].x, this.points[0].y); \n        for (i = 1; i<this.points.length; i++) { \n          ctx.lineTo(this.points[i].x, this.points[i].y); \n        } \n        ctx.closePath(); \n        ctx.stroke(); \n      }, \n\n      // method that generates a random color \n      getColor: function () { \n        var i, rgb = []; \n        for (i = 0; i< 3; i++) { \n          rgb[i] = Math.round(255 * Math.random()); \n        } \n        return 'rgb(' + rgb.join(',') + ')'; \n      }, \n\n      // method that loops through the points array, \n      // creates Line instances and adds them to this.lines \n     getLines: function () { \n        if (this.lines.length> 0) { \n          return this.lines; \n        } \n        var i, lines = []; \n        for (i = 0; i<this.points.length; i++) { \n          lines[i] = new Line(this.points[i],  \n          this.points[i + 1] || this.points[0]); \n        } \n        this.lines = lines; \n        return lines; \n      }, \n\n     // shell method, to be implemented by children \n      getArea: function () {}, \n\n      // sums the lengths of all lines \n      getPerimeter: function () { \n        var i, perim = 0, lines = this.getLines(); \n        for (i = 0; i<lines.length; i++) { \n          perim += lines[i].length; \n        } \n        return perim; \n      } \n    }; \n\n```", "```js\n    function Triangle(a, b, c) { \n      this.points = [a, b, c]; \n\n      this.getArea = function () { \n        var p = this.getPerimeter(), \n        s = p / 2; \n        return Math.sqrt( s * (s - this.lines[0].length) * \n          (s - this.lines[1].length) * (s - this.lines[2].length)); \n      }; \n    } \n\n```", "```js\n    Area = s(s-a)(s-b)(s-c) \n\n```", "```js\n    function Rectangle(p, side_a, side_b){ \n    this.points = [ \n    p, \n    new Point(p.x + side_a, p.y),// top right \n    new Point(p.x + side_a, p.y + side_b), // bottom right \n    new Point(p.x, p.y + side_b)// bottom left \n    ]; \n    this.getArea = function () { \n    return side_a * side_b; \n    }; \n    } \n\n```", "```js\n    function Square(p, side){ \n      Rectangle.call(this, p, side, side); \n    } \n\n```", "```js\n    (function () { \n    var s = new Shape(); \n    Triangle.prototype = s; \n    Rectangle.prototype = s; \n    Square.prototype = s; \n    })(); \n\n```", "```js\n    >var p1 = new Point(100, 100); \n    >var p2 = new Point(300, 100); \n    >var p3 = new Point(200, 0); \n\n```", "```js\n    >var t = new Triangle(p1, p2, p3); \n\n```", "```js\n    >t.draw(); \n    >t.getPerimeter(); \n    482.842712474619 \n    >t.getArea(); \n    10000.000000000002 \n\n```", "```js\n    >var r = new Rectangle(new Point(200, 200), 50, 100); \n    >r.draw(); \n    >r.getArea(); \n    5000 \n    >r.getPerimeter(); \n    300 \n\n```", "```js\n    >var s = new Square(new Point(130, 130), 50); \n    >s.draw(); \n    >s.getArea(); \n    2500 \n    >s.getPerimeter(); \n    200 \n\n```", "```js\n    > new Square(p1, 200).draw(); \n\n```", "```js\n            var my = objectMulti(obj, another_obj, a_third, { \n            additional: \"properties\" \n            }); \n\n    ```", "```js\nChild.prototype = new Parent();   \n\n```", "```js\nChild.prototype = Parent.prototype;   \n\n```", "```js\nfunction extend(Child, Parent) {   \n var F = function(){};   \n F.prototype = Parent.prototype;   \nChild.prototype = new F();   \nChild.prototype.constructor = Child;   \nChild.uber = Parent.prototype;   \n}   \n\n```", "```js\nfunction extend2(Child, Parent) {   \nvar p = Parent.prototype;   \nvar c = Child.prototype;   \n for (var i in p) {   \n c[i] = p[i];   \n }   \nc.uber = p;   \n}   \n\n```", "```js\nfunction extendCopy(p) {   \nvar c = {};    \n for (var i in p) {   \n c[i] = p[i];   \n }   \nc.uber = p;   \n return c;   \n}   \n\n```", "```js\nfunction object(o){   \n function F() {}   \nF.prototype = o;   \n return new F();   \n}   \n\n```", "```js\nfunction objectPlus(o, stuff) {   \nvar n;   \n function F() {}   \nF.prototype = o;   \n n = new F();   \nn.uber = o;   \n for (var i in stuff) {   \n n[i] = stuff[i];   \n }   \n return n;   \n}   \n\n```", "```js\nfunction multi() {   \nvar n = {}, stuff, j = 0,   \nlen = arguments.length;   \n for (j = 0; j <len; j++) {   \n stuff = arguments[j];   \n for (var i in stuff) {   \n n[i] = stuff[i];   \n }   \n }   \n return n;   \n}    \n\n```", "```js\nfunction parasite(victim) {   \nvar that = object(victim);   \nthat.more = 1;   \n return that;   \n}   \n\n```", "```js\nfunction Child() {   \nParent.apply(this, arguments);   \n}   \n\n```", "```js\nfunction Child() {   \nParent.apply(this, arguments);   \n}   \n\nextend2(Child, Parent);   \n\n```"]