- en: Chapter 7. Throwing in Some Sass
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up until now we've covered a bunch of different Bootstrap components and how
    to use them. In this chapter, we're going to change gears and learn about Sass,
    which will allow you to customize the look and feel of your components. I'll start
    by introducing some Sass basics that you need to know, move on to writing some
    basic code, and then show you the power of using variables in your components
    to save yourself valuable time when creating your web app or project.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Learning the basics of Sass
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sass stands for **Syntactically Awesome Style Sheets**. If you've never used
    or heard of Sass before, it's a CSS preprocessor. A preprocessor extends regular
    CSS by allowing the use of things such as variables, operators, and mixins in
    CSS. Sass is written during the development stage of your project and it needs
    to be compiled into regular CSS before you deploy your project into production.
    I'll cover that in more detail in the next section but don't worry because Harp.js
    makes this really easy to do.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Up until version 4 of Bootstrap, the CSS preprocessor used was actually Less.
    For a good while both Sass and Less were popular in frontend design circles. However,
    over the last few years, while Sass has emerged as the best choice for developers,
    the Bootstrap team decided to make the change in version 4\. If you are familiar
    with Less but have never used Sass, don't worry as they are pretty similar to
    use so it won't take much to get you up-to-speed.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Using Sass in the blog project
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As I mentioned in the previous section, Sass is part of the development process
    and the browser cannot read it in its native format. Before you can deploy the
    project, you need to convert or compile the Sass files into regular CSS files.
    Normally this would require you to install a Ruby gem and you would have to manually
    compile your code before you can test it. Luckily for us, Harp.js actually has
    an Sass compiler built into it. So when you run the `harp compile` command to
    build your templates, it will also build your Sass files into regular CSS. I bet
    you're starting to like Harp even more after learning that.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Updating the blog project
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we go any further, we need to make a few updates to our blog project
    to set it up for Sass. Head to your project directory and navigate to the CSS
    directory. In this directory, create a new file called `custom.scss`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The file extension used for Sass files is `.scss`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'What we''re doing here is creating a custom style sheet that we are going to
    use to overwrite some of the default Bootstrap look-and-feel CSS. To do this,
    we need to load this custom file after the Bootstrap framework CSS file in our
    layout file. Open up `_layout.ejs` in the root of the project directory and insert
    the following line of code after `bootstrap.min.css`. Both lines together should
    look like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Note here that I''m using the `.css` file extension for `custom.css`. This
    is because, after the files are compiled, the template will be looking for the
    actual CSS file, not the Sass file. The critical part is just that the actual
    filenames match and that you use `.css` in the layout file. Before we go any further,
    let''s test out our Sass file to make sure it is set up properly. Open up `custom.scss`
    in your text editor and add the following code:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is just a simple way to make sure that Sass is compiling to CSS and is
    being inserted into our layout. Compile your project and launch the server. If
    you''ve done everything correctly the background for your homepage should be red
    and look like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '![Updating the blog project](img/00115.jpeg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
- en: Hopefully this is what you're seeing and you can confirm you've set up your
    file correctly. Once you've successfully done this, delete the CSS we entered
    in the Sass file.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's perfectly acceptable to write regular CSS in Sass files. Ideally, you want
    to combine regular CSS code with Sass syntax to take full advantage of the preprocessor.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Now that you've finished setting up your files, let's start to learn a little
    bit more about using Sass in your project.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Using variables
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Sass, variables are called by using the `$` sign character. If you''re familiar
    with Less, the `@` symbol is used for variables. So in that case, all you would
    need to do is use `$` instead of `@`. To write a variable, start with the `$`
    sign and then insert a descriptive keyword that can be anything you like. Here
    are a few examples of generic variable names:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'I''ve named these pretty generically and they actually match some CSS property
    names. This is a good idea and they are easy to reuse and make sense of if multiple
    developers are working on the same project. However, like I said, you can name
    your variables whatever you want. If you''d like to get more creative, you could
    name variables like this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: These are extreme examples and it is advisable not to name your variables in
    this way. To you `$awesome-background-color` might mean red but to another person
    it could mean anything. It's always a good idea to name your variables in a descriptive
    manner that makes sense.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'I''ve shown you how to write the variable name but the other side of the equation
    is the actual value for the variable. Let''s add in some sample values for our
    first set of variable names:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You write Sass variables the same way that you would write CSS properties. It's
    also worth noting that you should enter your variables at the very top of your
    style sheet so that they can be used in all of the CSS you write after them.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Using the variables in CSS
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we''ve written some variables, let''s actually insert them into some
    CSS. After the variables in `custom.scss`, enter the following code:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'So instead of using actual values for our CSS properties, we''re using the
    variable names that we set up. This starts to get more powerful as we add more
    CSS. Let''s reuse some of these variables:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In this example, you can see a few things going on that I should explain:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: For the `<h1>` tag, I'm not using any variables. I'm using regular CSS property
    values.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the `<h2>` tag, I'm reusing the same variables to insert the `font-size`
    and `font-family` values.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As your style sheet grows longer, I'm sure you'll see the value in this strategy.
    For example, if I decide I want to change my `font-size` to `24px`, all I need
    to do is change the value for the `$text-size` variable to `24px`. I don't have
    to go through my entire style sheet and change all the values individually. These
    are just the basics of what you can do with variables. Let's look at a more advanced
    use case.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Using other variables as variable values
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'That might sound like a bit of a mouthful, but you can actually use a variable
    as the default value for another variable. A good example of where you might want
    to do this is when you are defining a color palette. You can switch the hex values
    to readable names and then use them for your other variables. This is much easier
    to scan and understand when you are debugging your code. Here''s an example of
    what I mean:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let me break down what is happening here for you:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: First I've created three color variables for `black`, `white,` and `red`
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next I've created three CSS property variables for `background-color`, `text-color`,
    and `link-color`; the values for these CSS property variables are the color variables
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instead of using hex number values for the CSS property variables, I used a
    color keyword variable which is much easier to read and understand. That concludes
    the introduction to variables in Sass. Next we'll learn about importing different
    files into `custom.css` and using partials.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Importing partials in Sass
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the `/components` directory, create a new Sass file and name it `_buttons.scss`.
    Make sure you always insert an underscore at the start of the filename of a partial.
    The compiler will then ignore these files as the underscore means it is being
    inserted into another file. Enter the following at the top of the file as a marker:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Save the buttons file and then open up `custom.scss` and add the following
    line of code to the file:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: That line of code uses the `@import` rule, which will allow us to import the
    `_buttons.scss` file into our main theme file that we are calling `custom.scss`.
    As I've mentioned, the reason you need to do this is for maintainability. This
    makes the code much easier to read and to add/remove components, which is just
    another way of saying it makes it more modular.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we can test this out to make sure it works, we need to add some code
    to our `_buttons.scss` file. Let''s add some simple CSS to change the primary
    button as an example:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'After adding this code, save the file and do a `harp compile`. Then launch
    the server and check out the home page; the buttons will be green like this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 添加此代码后，保存文件并执行 `harp compile`。然后启动服务器并查看主页；按钮将像这样变绿：
- en: '![Importing partials in Sass](img/00116.jpeg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![在 Sass 中导入部分](img/00116.jpeg)'
- en: After testing that out, you may want to take that custom code out unless you
    want the buttons to remain green. That's just a simple example of how you can
    use partials to make your Bootstrap components more modular. I'll get into that
    topic in greater depth in a future chapter but for now we are going to focus on
    using Sass mixins.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 测试完之后，你可能想要移除那个自定义代码，除非你希望按钮保持绿色。这只是如何使用部分来使你的 Bootstrap 组件更加模块化的一个简单例子。我将在未来的章节中更深入地探讨这个话题，但现在我们将专注于使用
    Sass 混合器。
- en: Using mixins
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用混合器
- en: 'Writing something in CSS, such as, for example, browser vendor prefixes, can
    be really tedious. Mixins allow you to group CSS declarations together so that
    you can reuse them through your project. This is a great because you can include
    the code for, say, a `border-radius`, using one line of code instead of multiple
    lines for each browser. To start, open up `custom.scss` and insert the following
    code at the top of the file:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CSS 中编写某些内容，例如浏览器供应商前缀，可能非常繁琐。混合器允许你将 CSS 声明分组在一起，这样你就可以在整个项目中重用它们。这很好，因为你可以使用一行代码而不是为每个浏览器编写多行代码来包含
    `border-radius` 的代码。首先，打开 `custom.scss` 并在文件顶部插入以下代码：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s go over a few things that are happening here:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下这里发生的一些事情：
- en: A mixin is always started in Sass with the `@mixin` keyword
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 混合器总是以 Sass 中的 `@mixin` 关键字开始
- en: Following that, you want to include the property name to target as well as set
    a variable, in this case `$radius`
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随后，你想要包含要针对的属性名称以及设置一个变量，在这个例子中是 `$radius`
- en: We then apply the `$radius` variable to each browser prefix instance
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们将 `$radius` 变量应用于每个浏览器前缀实例
- en: 'We''ve set up the mixin to handle the `border-radius` property but we still
    need to add the corner value to an element. Let''s change the `border-radius`
    value for the default Bootstrap button. Open up `_buttons.scss` and insert the
    following code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经设置了混合器来处理 `border-radius` 属性，但我们还需要将角落值添加到元素中。让我们更改默认 Bootstrap 按钮的 `border-radius`
    值。打开 `_buttons.scss` 并插入以下代码：
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let me explain what is happening here:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我来解释这里发生了什么：
- en: I'm targeting all Bootstrap buttons by inserting the `.btn` class
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我通过插入 `.btn` 类来针对所有 Bootstrap 按钮
- en: Inserting the `@include` keyword will grab the `border-radius` mixin
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插入 `@include` 关键字将获取 `border-radius` 混合器
- en: Lastly, I've provided a value of `20px`, which will make our buttons look really
    rounded on each end
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我提供了一个 `20px` 的值，这将使我们的按钮在每个端点看起来非常圆润
- en: 'Save your file, run the `harp compile` command, and then, when you view the
    project in the browser, it should look like this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 保存你的文件，运行 `harp compile` 命令，然后，当你用浏览器查看项目时，它应该看起来像这样：
- en: '![Using mixins](img/00117.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![使用混合器](img/00117.jpeg)'
- en: That concludes a fairly simple example of how to use mixins in Bootstrap 4\.
    You can use them for many other reasons but replacing CSS3 vendor prefixes is
    one of the most common and useful. Next we'll cover a slightly more complicated
    topic in Sass, which is the use of operators.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了 Bootstrap 4 中使用混合器的相当简单的例子。你可以出于许多其他原因使用它们，但替换 CSS3 供应商前缀是最常见和最有用的之一。接下来，我们将覆盖
    Sass 中一个稍微复杂的话题，即运算符的使用。
- en: How to use operators
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用运算符
- en: 'Sass allows you to perform basic math operations in CSS, which is useful for
    a number of reasons. First of all, you can use the following operators `+`, `-`,
    `*`, `/`, and `%`. To give you an understanding of how you can use operators in
    CSS, let''s learn how to convert a pixel-based grid into percentages. We''ll create
    two columns in pixels and then use some Sass to convert them to percentages. Open
    up `custom.scss` and insert the following code:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Sass 允许你在 CSS 中执行基本的数学运算，这有几个原因很有用。首先，你可以使用以下运算符 `+`, `-`, `*`, `/`, 和 `%`。为了让你了解如何在
    CSS 中使用运算符，让我们学习如何将基于像素的网格转换为百分比。我们将创建两个像素列，然后使用一些 Sass 将它们转换为百分比。打开 `custom.scss`
    并插入以下代码：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, I''ve created two columns here. The `.left-column` class will have a width
    of 70% after we compile this Sass operator. The `.right-column` class will have
    a width of 30%. So if we add those together we''ll get roughly a three-quarter
    layout with a larger column on the left and a smaller column on the right. Run
    a `harp compile` command to build this code and then open up `custom.css` in the
    `/www/css folder`. There you should find the following code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As you can see, our Sass operators have been converted into regular percentage
    values. That's just one way you can use operators in Sass; I'd encourage you to
    play around more with them. Next we're going to learn how to set up a library
    of Sass variables that you can use to create a Bootstrap theme.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Creating a collection of variables
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the main things you'll want to do when using Sass in Bootstrap is to
    create a library of global variables that can be used throughout your theme. Think
    of things such as colors, backgrounds, typography, links, borders, margins, and
    padding. It's best to only define these common properties once and then you can
    reuse them through different components. Before we go too far, we need to create
    a new `.scss` file. Open up your text editor, create a new file, and call it `_variables.scss`.
    Save that file to the `/css/components` directory. For now, you can just leave
    it blank.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Importing the variables to your custom style sheet
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we''ve created the variables Sass file, we need to import it into
    our custom style sheet. Open up `custom.css` in your text editor and paste the
    following line of code at the top of the file:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: It's important to note that this file must be at the top of your custom style
    sheet file. The variables will cascade through all the code that follows them
    so they must load first. Let's start filling out our variables file with a color
    palette.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Adding a color palette
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Save the custom style sheet and then go back to the variables file. Let''s
    start by inserting a color palette into the variables file like this:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'As you can see, I''ve set up a palette of several colors that I''ll use through
    my components and later my theme. Here are a few key points to keep in mind:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: It's good to have two variations for your key colors. This comes in handy for
    a component such as a button where `$red` would be the static color and `$red2`
    would be the hover or active color for the button.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I'm guessing you can already see how using variable names such as `$purple`
    is much more readable than hex values in a long style sheet.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding some background colors
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next thing you should add to your collection of variables is background
    colors. As we move through this variables file, we're going to create a variable
    for all properties that get used over and over again in our style sheet.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following background color variables to the file:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let me explain, as best practice, how I have set this up:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: First of all, I'm using the color variables we just set up as the values for
    our new background color variables. This keeps things simple and it also allows
    you to change the color and have it cascade through all your other variables.
    This is a great time-saving tip.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the very least, it's a good idea to define a `primary`, `secondary`, and
    `inverse` background color variable. Note how I'm reusing the same language here
    that Bootstrap uses. This is a good practice to follow. Feel free to define additional
    background colors if you think you'll need them in your project.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the background color variables is pretty simple. Next let's set up
    our base typography variables.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Setting up variables for typography
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next section of variables we are going to set up is for the base typography
    styles. Insert the following code after the background colors:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let me explain why I''m setting the following variables for the typography:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: For consistency, it's good to have a body and heading typeface. In this case,
    I'm using the same font stack for both but you could easily change the heading
    variable to something else. As you are coding your CSS, it's really easy to think
    of the `font-family` in either the body or heading version, compared with trying
    to remember the entire font stack for each, which also involves much more typing.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the `$base-font-size` variable, we are going to use a pixel value. This
    is one of the only places you'll see pixels and it's set to the base em size that
    everything else will work off. Remember that ems are a relative sizing unit, so
    if you ever want to make all your components a little bigger or smaller, you can
    just tweak this one pixel value.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also need a `$font-size` variable, which will be set to `1em`. This is a
    base unit and it can easily be changed in other selectors by using Sass operators.
    The reason we set it to `1em` is because it simply makes the math easy to do.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, I set the `$base-line-height` to `1.75` because I like a little extra
    line spacing in my copy. You could choose to leave this out if you are fine with
    the Bootstrap default, which is closer to `1.5`.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we've set up our typography variables, let's move on to coding our
    text colors.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Coding the text color variables
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As with the background colors, we need to set up some common color styles for
    text, as well as defining some colors for base HTML tags such as `<pre>` and `<code>`.
    Insert the following markup after the typography variables in the file:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Let me break down how each variable is set up:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: As in the background color variables, we are using a variable name for the value
    of our text color variables. I've included a variable called `$primary-text` and
    set it to black, following the same naming convention that was previously established.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I've added `$light-text` and `$loud-text` variables so we can easily apply lighter
    or darker text throughout our components.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I've also included an `$inverse-text` variable to be used with the corresponding
    background color.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, I've set up default colors for the `<pre>` and `<code>` tags, which
    we will use to overwrite the default colors so they match our theme and color
    palette.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That finishes off the color variables that I recommend setting up. Feel free
    to add more if you have other uses you want to cover. Next we'll continue with
    some text colors by adding links.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: Coding variables for links
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An extension of basic text colors will be colors for links in our project.
    Go ahead and add the following code after the text colors in the file:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In this case, I've decided to only define a primary link color to keep things
    simple. In your own projects, you will likely want to come up with a couple more
    variations.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: For the static link color, I'm using the `$purple` color variable.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the hover and active states of the primary link, I'm using `$purple2`. As
    I previously mentioned, this is an example of why it's a good idea to have two
    variations of each color in your palette.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Like I said, I've kept the link variables simple. It's nice to try and keep
    your set of variables as compact as possible. If you have too many then it starts
    to defeat the purpose of using them as it will be harder to remember them in your
    code. Next let's cover the variables we should set up for borders.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: Setting up border variables
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another CSS property that gets used often is borders. That makes it a great
    candidate for Sass variables. Insert the following code after the link colors
    in the file:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Let me explain why I''ve set up the border variables in this manner:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: When you are deciding on a value for `$border-color`, you should pick a color
    that you think will get used the most often in your components. Something like
    `$grey` is always a safe bet in most designs.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As with the color value, you should set the `$border-size` to the most common
    border size you anticipate using. It's also a good idea to set this to `1px` because
    you can easily do the math to apply a Sass operator if you want a thinner or thicker
    border.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Again for the `$border-type`, set it to the value you will use the most, which
    is probably going to be solid.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, set up a common `$border-focus` color. This is primarily used in form
    inputs once they are active. It's a good idea to pick a contrasting color for
    this variable so it really stands out when the input is in focus.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That concludes all the border variables I would recommend including. Next let's
    include some basic layout variables.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Adding variables for margin and padding
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For consistent spacing throughout your designs, it''s a good idea to use variables
    for `margin` and `padding` so that you can standardize on size. These properties
    are also used often so it''s smart to make them variables that can be reused.
    Add the following code after the border markup:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: All I'm doing here is setting a base size (for both `padding` and `margin`)
    `1em`. Again, it's a good idea to set both of these to `1em` because it is easy
    to do the math if you want to use Sass operators to increase or decrease the values
    of specific components. Those are the last variables that I would recommend adding
    to your variables file. However, we should add at least one mixin to the file
    before we are finished.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: Adding mixins to the variables file
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since mixins will also be used through a number of your components, you should
    define them in this variables file. Then they will be available to all the CSS
    code that follows them in the custom theme file. At the very least, I would recommend
    setting up a mixin for `border-radius`, which I will show you how to do next.
    You may also want to include additional mixins for other CSS3 features.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Coding a border-radius mixin
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We talked a little bit about mixins earlier but let''s review them again now
    that we are actually applying them to our project. Insert the following code after
    the layout variables in your file:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In Less, it is possible to set a global value for all your `border-radius`
    in a mixin. However, with Sass you have to set up the above formula but then on
    the actual selectors that follow you have to set the actual `border-radius` value.
    An example of that would look like this:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In this example, I''ve added the `border-radius` mixin to a CSS class called
    `.my-component`. The component will have a `border-radius` of `5px` applied to
    it. You will need to repeat this step on any CSS class or component where you
    want to apply the `border-radius` mixin. That concludes our variables Sass file.
    We went over a bunch of code there, so let''s see what it all looks like together.
    I''ve also included some CSS comments in the following code to help remind you
    what each section does:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Now that we have all our variables and mixins set up, let's go ahead and start
    to learn how to apply them. We'll continue to build on the button example we started
    earlier by extending it into a custom look and feel.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Customizing components
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's first start by customizing a single component; later on I'll talk about
    creating a theme where you customize all the components in Bootstrap. To get started,
    we'll build on the button component we started to work on earlier. In this next
    step we are going to expand on the CSS we have added to fully customize the component.
    What you want to do is overwrite all the CSS classes and properties that you want
    to change. In some cases, this might only be a few things but in other scenarios
    you may want to change quite a bit.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the button component
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start, open up `_buttons.scss` located in `/css/components` in our project
    directory. The first thing we need to customize is the base `.btn` CSS class.
    Once we have applied some changes there, we''ll add more CSS to control the look
    and feel of the different button variations. Insert the following CSS at the top
    of the file for the base button class:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'To keep things simple, I''m only going to overwrite a few properties. You''re
    totally free to get more creative and change additional properties to make your
    buttons look different from the Bootstrap default link. Let''s break down what
    I''ve done:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: First I've set the `background-color` and `border-color` to use the `$grey`
    from our color palette. This is a good time to point out that if you want to do
    a full theme you need to overwrite all the Bootstrap default colors on all components
    to match your color palette.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next I've inserted the `border-radius` mixin and given it a value of `20px`.
    This will make the buttons really rounded. I'm going for this look so you can
    clearly see that the button has been customized.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you have saved these changes, go to the terminal and run the `harp compile`
    command from the root of the project directory. Then fire up the server and open
    the home page of the project that has a bunch of buttons on it. Your buttons should
    now look like this:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing the button component](img/00118.jpeg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
- en: Now that might not look too useful, but it's important that we customize the
    base `.btn` class first; now we'll continue building the component out by applying
    our color palette to all of the different button variations.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Extending the button component to use our color palette
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this next section, we will extend the button component further by applying
    our color palette to all the different Bootstrap button variations. Before we
    get to all the different button types, let''s start by customizing the `.btn-primary`
    variation. Enter the following code in the `_buttons.scss` file after the base
    `.btn` styles:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'There are a few different things going on so let''s review them all:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: There are two sections of CSS for each button variation. The first is the static
    state of the button. The second is the hover and active states of the button.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the static state we use the `.btn-primary` class and insert the `background-color`
    and `border-color` properties. I want to make my primary button purple so I've
    inserted the `$purple` Sass variable to overwrite the Bootstrap default color.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the other states, we have `.btn-primary:hover` and `.btn-primary:active`.
    In this case, I'm using the second purple color variable which is `$purple2`.
    On the hover or active button there will be a slightly darker shade of purple.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Save the file, run a `harp compile` in the terminal, and then open up the home
    page in your browser. If everything was coded correctly, your buttons should now
    look like this:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '![Extending the button component to use our color palette](img/00119.jpeg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the primary button is now purple! It''s as simple as that;
    you can start to apply a custom look and feel to the button component. Let''s
    build out the rest of the button color variations by entering the following code
    into the `_buttons.scss` file:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，主按钮现在变成了紫色！就这么简单；您现在可以开始为按钮组件应用自定义的外观和感觉。让我们通过在`_buttons.scss`文件中输入以下代码来构建按钮颜色的其他变体：
- en: '[PRE30]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'That''s a bunch of code but it should be fairly easy to understand. I''ve simply
    followed the same steps I completed for the primary button for every other button
    variation. Along the way, I''ve replaced the default Bootstrap color values with
    our custom color palette. Once you''re done, all of your buttons should now look
    like this:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码有很多，但应该相当容易理解。我只是为每个按钮变体重复了为主按钮完成相同的步骤。在这个过程中，我将默认的Bootstrap颜色值替换成了我们的自定义调色板。完成之后，您所有的按钮现在应该看起来像这样：
- en: '![Extending the button component to use our color palette](img/00120.jpeg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![扩展按钮组件以使用我们的调色板](img/00120.jpeg)'
- en: We've now successfully customized the entire button component. As I mentioned
    earlier, there may be additional things you might want to do to the buttons. However,
    at the very least, we've done enough to show how you can make the component your
    own. The next step in this process is to go through every Bootstrap component
    one by one and apply the same customization process. We call this writing your
    own Bootstrap theme.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经成功自定义了整个按钮组件。正如我之前提到的，您可能还想对按钮做一些其他的事情。然而，至少我们已经做了足够的事情来展示您如何使组件成为自己的。这个过程的下一步是逐个通过每个Bootstrap组件并应用相同的自定义过程。我们称之为编写您自己的Bootstrap主题。
- en: Writing a theme
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写主题
- en: Creating your own Bootstrap theme is a bit of an undertaking. The good news
    is that once you've done it you can reuse a ton of the code for future themes.
    That's where the real power in making your code modular comes into play. Instead
    of starting over from scratch each time, you can reuse old code and just extend
    it. In the last section, we learned how to customize the button component that
    was the start of our own theme. Let's first start by looking at some common Bootstrap
    components that you'll want to customize for your own themes.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自己的Bootstrap主题是一项相当大的任务。好消息是，一旦您完成了它，您就可以为未来的主题重用大量的代码。这就是使您的代码模块化的真正力量所在。您不必每次都从头开始，可以重用旧代码并对其进行扩展。在上一个部分中，我们学习了如何自定义按钮组件，这是我们自己的主题的开始。让我们首先看看一些常见的Bootstrap组件，您可能想要为您的主题进行自定义。
- en: Common components that need to be customized
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 需要自定义的通用组件
- en: There are many ways that you can theme Bootstrap. In some cases, you may only
    need to customize a few components to get a unique look and feel going. However,
    you may want to do a more thorough theming process so that your theme doesn't
    resemble the default Bootstrap look at all. In this section, let's start by listing
    some of the common components you will most likely want to customize.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过多种方式为主题Bootstrap。在某些情况下，您可能只需要自定义几个组件来获得独特的外观和感觉。然而，您可能希望进行更彻底的主题化过程，以便您的主题完全不像是默认的Bootstrap外观。在本节中，让我们首先列出一些您最可能想要自定义的通用组件。
- en: 'Next we''ll go through the process of writing the code to customize a few so
    you get an idea as to how it works. Here''s a list of components that I would
    recommend customizing:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将通过编写代码来自定义一些组件，以便您了解其工作原理。以下是我推荐自定义的组件列表：
- en: Buttons
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按钮
- en: Drop-downs
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下拉菜单
- en: Alerts
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 警报
- en: Navbar
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航栏
- en: Typography
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字体
- en: Tables
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表格
- en: This list is just a starting place. If you want to create a unique theme, you
    should really try to customize all Bootstrap components. At the very least, you
    should change them to use your custom color palette, typography, and layout styles.
    We've already covered buttons so let's jump into customizing the drop-down component,
    which is an extension of the button.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表只是一个起点。如果您想要创建一个独特的主题，您真的应该尝试自定义所有Bootstrap组件。至少，您应该将它们更改为使用您的自定义调色板、字体和布局样式。我们已经涵盖了按钮，让我们跳到自定义下拉菜单组件，它是按钮的扩展。
- en: Theming the drop-down component
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主题化下拉菜单组件
- en: The drop-down component requires a medium-sized amount of customization so it's
    a good starting place to get an idea of what is involved in this process. It also
    builds on the code we wrote for the button so it's a natural second step. It's
    important to note that some components will require a good amount of CSS to customize
    them, while others will only need a little bit. Let's start by creating a new
    Sass file for drop-downs. From your project folder, create a new file called `_dropdown.scss`
    in the `css/components` directory. You can leave the file blank for now, just
    save it.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve created the new Sass file for the drop-down component, we need
    to import it into our main theme is called `custom.scss`. Open up the custom style
    sheet in your text editor and insert the following line of code after the `@import`
    for the button component:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now we are ready to start coding our custom drop-down styles. Open up `_dropdown.scss`
    in your text editor and let''s insert this first section of CSS:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: As with the buttons in the previous section, I'm only going to change the most
    basic properties to demonstrate how you can customize the component. Feel free
    to customize additional properties to get a more unique look and feel.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: Let's break down what is happening here. The drop-down component is made up
    of the base `.dropdown-menu` CSS class. This controls how the menu will look.
    Here I've simply changed the text color to use for the `$primary-text` variable.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need to do some work on the list of links that appear in our drop-down
    menu. Insert the following CSS after the first section you just entered:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Let me break down what is happening here:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: These CSS classes control the hover and focus states for each list item in our
    drop-down menu. Again, I've set it to use our `$primary-text` font color.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you hover on a list item, the background color changes. I've changed that
    background color to use our `$secondary-background` color variable. In this case
    you should use the background color variable, not a customized color variable.
    The reason for this is it's easier to keep track of what background colors you
    are using as you progress through the writing of your code.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The last thing we need to do is update the actual drop-down button trigger
    with some additional code. Enter the last part of CSS into the file:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: When the drop-down button trigger is clicked the `.open` CSS class will dynamically
    be inserted into the HTML code. This initiates a unique variation on the button
    class, a drop-down toggle focus. That may sound complicated but what you need
    to know is that you need to set this selector to our `$purple2` color so it matches
    the rest of the button.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: I've overwritten the `background-color` and `border-color` properties to use
    `$purple2` from our color palette.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s it, the drop-down component has now been themed to match our look and
    feel. If you preview it in the browser it should look like this when the menu
    is open:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '![Theming the drop-down component](img/00121.jpeg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![主题化下拉组件](img/00121.jpeg)'
- en: Now that we've finished with the drop-down component let's move on to learning
    how to theme the alerts component.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了下拉组件，让我们继续学习如何为主题警报组件。
- en: Customizing the alerts component
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义警报组件
- en: 'The alerts component in Bootstrap is fairly easy to theme. As with the button
    component, it comes in a few variations. Let''s start by coding up the CSS for
    the default color method. Create a new file called `_alerts.scss` and save it
    to the `css/components` directory. Don''t forget to import it into `custom.scss`
    with the following line of code:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap中的警报组件主题化相当简单。与按钮组件一样，它有几个变体。让我们首先编写默认颜色方法的CSS。创建一个名为 `_alerts.scss`
    的新文件，并将其保存到 `css/components` 目录中。别忘了使用以下代码行将其导入到 `custom.scss` 文件中：
- en: '[PRE35]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Once you''ve set up the file, let''s get started with the code for the success
    alert component:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你设置了文件，让我们开始编写成功警报组件的代码：
- en: '[PRE36]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'What you''re now seeing should start to look familiar. However, I have introduced
    something new that I need to explain:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在看到的应该开始变得熟悉。然而，我介绍了一些新内容，我需要解释：
- en: This is the success alert so it should be green in color. The first thing I've
    done is change the text color to use the green from our palette with the `$green`
    variable.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一个成功警报，所以它应该是绿色的。我首先做的事情是将文本颜色更改为使用我们调色板中的绿色 `$green` 变量。
- en: For the `background-color` and `border-color` properties, I'm using something
    new, a Sass function. In this case, I want a green color that is slightly lighter
    than my text. Instead of introducing another green color variable, I can use a
    Sass function to lighten the base `$green` variable color.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 `background-color` 和 `border-color` 属性，我使用了一个新的东西，Sass函数。在这种情况下，我想得到一个比我的文本稍微浅一点的绿色。而不是引入另一个绿色颜色变量，我可以使用Sass函数来加亮基
    `$green` 变量颜色。
- en: To create the function, you use the `lighten` keyword. Inside the brackets you
    need to include the variable name you want to target, in this case `$green`, and
    finally include a percentage value for how much to lighten it by. This is a nice
    little trick to save you having to create more variables.
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要创建函数，你使用 `lighten` 关键字。在括号内，你需要包含你想要的目标变量名，在这个例子中是 `$green`，最后包含一个百分比值来指定加亮的程度。这是一个节省你创建更多变量的好方法。
- en: 'Once you code this up it should look like this in the browser:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你将这段代码编写完成，在浏览器中应该看起来是这样的：
- en: '![Customizing the alerts component](img/00122.jpeg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![自定义警报组件](img/00122.jpeg)'
- en: 'As you can see, we are using the green color values from our color palette.
    Let''s continue and customize the colors for the rest of the alert bar variations.
    Enter the following code into the `_alerts.scss` file:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们正在使用我们调色板中的绿色值。让我们继续，并为剩余的警报栏变体自定义颜色。将以下代码输入到 `_alerts.scss` 文件中：
- en: '[PRE37]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The other alerts follow the same pattern as the success version. They should
    look like this in the browser when you are done:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 其他警报遵循与成功版本相同的模式。当你完成时，在浏览器中它们应该看起来像这样：
- en: '![Customizing the alerts component](img/00123.jpeg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![自定义警报组件](img/00123.jpeg)'
- en: As you can see, the alerts are now using our color palette. Let's move on to
    the last component that I will show you how to customize, which is typography.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，警报现在正在使用我们的调色板。让我们继续到最后一个组件，我将向你展示如何自定义，那就是排版。
- en: Customizing the typography component
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义排版组件
- en: 'The typography component isn''t difficult to customize. We''ll build off the
    base variables we set up to apply them to the appropriate HTML tags. As we did
    with our other components, start with creating a new file called `_typography.scss`
    and save it to the `css/components` directory. Once you do this, import the file
    into `custom.scss` with the following line of code:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 排版组件并不难自定义。我们将基于我们设置的基变量来应用它们到适当的HTML标签。就像我们处理其他组件一样，首先创建一个名为 `_typography.scss`
    的新文件，并将其保存到 `css/components` 目录中。一旦完成，使用以下代码行将其导入到 `custom.scss` 文件中：
- en: '[PRE38]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Let''s start customizing the type by applying some styles to the base header
    tags:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从通过应用一些样式到基本标题标签开始自定义类型：
- en: '[PRE39]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Here I''ve simply used the `$heading-copy` variable and applied it to all the
    HTML heading tags. This will allow our custom heading typeface to be used for
    all headers. I''ve also added the `$primary-text` variable so that our headers
    are using the correct text color. Next let''s take a look at a few miscellaneous
    text styles that you will likely want to overwrite:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'As we did with our base variables, I''m now applying some of them on actual
    selectors. Let''s break it down:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: For the `<small>` HTML tag, I want it to look more subtle so I've set the text
    color to use the `$light-text` variable.
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I purposely set up color text variables for the HTML `<pre>` and `<code>` tags.
    I've now applied the `$pre-text` and `$code-text` variables to these tags.
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That covers some of the basic typography styles you're going to want to customize.
    There are more you could add but I will let you explore these on your own. That
    also goes for all the Bootstrap components. We have only scratched the surface
    of the level of customizing you can do for your Bootstrap theme. However, I think
    I've given you a good introduction to what you need to do for coding your own
    Bootstrap themes.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'That brings this lesson to a close. We''ve covered a ton of new content in
    this lesson including: the basics of Sass, how to use Sass in Bootstrap, how to
    create a library of Sass variables, how to apply those variables to customize
    Bootstrap components, and, finally, how to start writing your own Bootstrap theme.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: Now it's time to try some hands-on projects. Before jumping to the next lesson,
    I recommend you to go through the steps mentioned in the Build Process Manual
    (code bundle).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: Assessments
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which of the following is the right CSS code?
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.test { background: "red"; }`'
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`class test { background: red; }`'
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`body { background: red; }`'
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.test { "background": "red"; }`'
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which among the following is the correct symbol to declare variable in CSS
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`var`'
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$`'
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`%`'
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.`'
  id: totrans-246
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the correct syntax to import a `test.scss` file in Sass?
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@import "components/_test.scss";`'
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`#import "components/test.scss";`'
  id: totrans-249
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`#import "components/_test.scss";`'
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@import "components/test.scss";`'
  id: totrans-251
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following code adds `background color` variables to the file?
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$primary-background: $white;`'
  id: totrans-253
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`background-color: $white;`'
  id: totrans-254
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$background-color: white;`'
  id: totrans-255
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`background-color: white;`'
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which among the following selectors selects links on `mouse over`?
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`:link`'
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`:hover`'
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`:focus`'
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`:selection`'
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
