- en: Chapter 5. Reporting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we will create the report and display it with four different
    types of graphs on the dashboard.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'You will learn to:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Create a pie chart to display the quotation and bill data
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a bar chart to display the data of the customer
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a line chart to display the quotation and bill data by month
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a radar chart for monetary amounts
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display each chart inside a panel
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Layout four panels in the dashboard
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating charts on dashboard
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First create four empty panels and make it so that the **component test** (**CT**)
    can display them. These panels are for a pie chart, bar chart, line chart, and
    a radar chart. This process is very simple and now you should have four empty
    panels prepared.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: To create each chart class as before, we will copy a different `view.html` and
    create a new HTML, modify the title and the JavaScript file.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Pie chart for CT
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create the class name with `MyApp.view.dashboard.Pie`. Please see the
    following source files for the code:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '`01_making_charts_on_dashboard/ct/dashboard/pie_view.html`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`01_making_charts_on_dashboard/ct/dashboard/pie_view.js`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We''ll now implement the class specified in the previous code (source file:
    `01_making_charts_on_dashboard/app/view/dashboard/Pie.js`).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Bar chart for CT
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The content is the same as for the bar chart. Let''s create the class name
    with `MyApp.view.dashboard.Bar`. Please see the following source files for the
    code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '`01_making_charts_on_dashboard/ct/dashboard/bar_view.html`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`01_making_charts_on_dashboard/ct/dashboard/bar_view.js`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`01_making_charts_on_dashboard/app/view/dashboard/Bar.js`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Line chart for CT
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The same as with a pie chart and bar chart, let''s create the class name with
    `MyApp.view.dashboard.Line`. Please see the following source files for the code:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '`01_making_charts_on_dashboard/ct/dashboard/line_view.html`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`01_making_charts_on_dashboard/ct/dashboard/line_view.js`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`01_making_charts_on_dashboard/app/view/dashboard/Line.js`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Radar chart for CT
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the same way as the other charts, let''s create the class name with `MyApp.view.dashboard.Radar`.
    Please see the following source files for the code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '`01_making_charts_on_dashboard/ct/dashboard/radar_view.html`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`01_making_charts_on_dashboard/ct/dashboard/radar_view.js`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`01_making_charts_on_dashboard/app/view/dashboard/Radar.js`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Layout to dashboard
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So, let''s arrange these four panels onto the dashboard (source file: `02_layout_to_dashboard/app/view/dashboard/DashBoard.js`).'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, in the `requires` parameter on the dashboard panel, set up the four panels
    you made earlier. You can specify the `xtype` in items by doing this.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Next comes the layout part. In the `hbox` layout divide the top and bottom equally
    into two equal areas, then in each area divide the left and right with the `vbox`
    layout.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An important point is that `container` is being specified by the `xtype`. Having
    seen a variety of Ext JS code, in this case a lot of code doesn't specify the
    `xtype`. In such a case, `panel` will be specified as the initial value.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一个重要点是`container`是由`xtype`指定的。在看过各种Ext JS代码后，在这种情况下，很多代码没有指定`xtype`。在这种情况下，`panel`将被指定为初始值。
- en: If you just want to execute the layout, you should specify the `container` parameter.
    If you don't do that and use `panel`, an unnecessary DOM will be created just
    for carrying out the layout and will badly affect the performance.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想执行布局，你应该指定`container`参数。如果你不这样做而使用`panel`，将只为执行布局而创建不必要的DOM，这将严重影响性能。
- en: Now that you have successfully divided the dashboard into four parts, in order
    to adjust the appearance, make the adjustments to the padding. Of course, it's
    okay to do this directly with CSS.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经成功将仪表板分为四个部分，为了调整外观，对填充进行调整。当然，直接使用CSS来做这个也可以。
- en: In each of the four areas, set up the chart panels with `xtype`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在四个区域中的每一个，使用`xtype`设置图表面板。
- en: Hopefully your database is starting to take shape. Let's continue and implement
    the various charts.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你的数据库已经开始成形。让我们继续并实现各种图表。
- en: '![Layout to dashboard](img/5446OS_05_01.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![布局到仪表板](img/5446OS_05_01.jpg)'
- en: Creating a pie chart
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建饼图
- en: First, we made the CT for display purposes, but now let's create the CT to make
    it run.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们为了显示目的创建了CT，但现在让我们创建一个可以运行的CT。
- en: We will use the `Direct` function, so let's prepare that as well. In reality
    we've done this already.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`Direct`函数，所以让我们也准备一下。实际上，我们已经这样做过了。
- en: 'Duplicate a different `app.html` and change the JavaScript file like we have
    done before. Please see the source file for the code: `03_making_a_pie_chart/ct/dashboard/pie_app.html`.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 复制一个不同的`app.html`并像我们之前做的那样更改JavaScript文件。请参阅源文件中的代码：`03_making_a_pie_chart/ct/dashboard/pie_app.html`。
- en: Implementing the Direct function
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现Direct函数
- en: Next, prepare the `Direct` function to read the data.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，准备读取数据的`Direct`函数。
- en: 'First, it''s the `config.php` file that defines the `API`. Let''s gather them
    together and implement the four graphs (source file: `04_implement_direct_function/php/config.php`).'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，是`config.php`文件定义了`API`。让我们把它们放在一起并实现四个图表（源文件：`04_implement_direct_function/php/config.php`）。
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, let''s create the following methods to acquire data for the various charts:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建以下方法来获取各种图表的数据：
- en: '`getPieData`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getPieData`'
- en: '`getBarData`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getBarData`'
- en: '`getLineData`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getLineData`'
- en: '`getRadarData`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getRadarData`'
- en: 'First, implement the `getPieData` method for the pie chart. We''ll implement
    the `Direct` method to get the data for the pie chart. Please see the actual content
    for the source code (source file: `04_implement_direct_function/php/classes/ MyAppDashBoard.php`).'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，实现饼图的`getPieData`方法。我们将实现获取饼图数据的`Direct`方法。请参阅源代码的实际内容（源文件：`04_implement_direct_function/php/classes/
    MyAppDashBoard.php`）。
- en: This is acquiring valid quotation and bill data items. With the data to be sent
    back to the client, set the array in items and set up the various names and data
    in a key array. You will now combine the definitions in the next model.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在获取有效的报价和账单数据项。对于要发送回客户端的数据，设置数组在`items`中，并在键数组中设置各种名称和数据。现在，将下一个模型中的定义组合起来。
- en: Preparing the store for the pie chart
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为饼图准备存储
- en: 'Charts need a store, so let''s define the store and model (source file: `05_prepare_the_store_for_the_pie_chart/app/model/
    Pie.js`).'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图表需要一个存储，所以让我们定义存储和模型（源文件：`05_prepare_the_store_for_the_pie_chart/app/model/
    Pie.js`）。
- en: 'We''ll create the `MyApp.model.Pie` class that has the `name` and `data` fields.
    Connect this with the data you set with the return value of the `Direct` function.
    If you increased the number of fields inside the model you just defined, make
    sure to amend the return field values, otherwise it won''t be applied to the chart,
    so be careful. We''ll use the model we made in the previous step and implement
    the store (source file: `05_prepare_the_store_for_the_pie_chart/app/model/ Pie.js`).'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建具有`name`和`data`字段的`MyApp.model.Pie`类。将其与`Direct`函数的返回值设置的数据连接起来。如果你在刚刚定义的模型内部增加了字段数量，请确保修改返回字段值，否则它将不会应用于图表，所以请小心。我们将使用之前步骤中制作的模型并实现存储（源文件：`05_prepare_the_store_for_the_pie_chart/app/model/
    Pie.js`）。
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Then, define the store using the model we made and set up the `Direct` function
    we made earlier in the proxy.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用我们制作的模型定义存储，并在代理中设置我们之前制作的`Direct`函数。
- en: Creating the View
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建视图
- en: 'We have now prepared the presentation data. Now, let''s quickly create the
    view to display it (source file: `06_making_the_view/app/view/dashboard/Pie.js`).'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经准备好了演示数据。现在，让我们快速创建视图来显示它（源文件：`06_making_the_view/app/view/dashboard/Pie.js`）。
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Implementing the controller
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现控制器
- en: With the previous code, data is not being read by the store and nothing is being
    displayed.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面的代码，数据没有被存储读取，也没有任何内容被显示。
- en: 'In the same way that reading was performed with `onShow`, let''s implement
    the controller (source file: `06_making_the_view/app/controller/DashBoard.js`):'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 与使用 `onShow` 读取阅读内容的方式相同，让我们实现控制器（源文件：`06_making_the_view/app/controller/DashBoard.js`）：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'With the charts we create from now on, as we create them it would be good to
    add the reading process to `onShow`. Let''s take a look at our pie chart which
    appears as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始创建的图表，在创建它们时，将阅读过程添加到 `onShow` 中会很好。让我们看看我们的饼图，如下所示：
- en: '![Implementing the controller](img/5446OS_05_02.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![实现控制器](img/5446OS_05_02.jpg)'
- en: Creating a bar chart
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建条形图
- en: 'In the same way as with the pie chart, first prepare the CT. Again in the same
    way as creating the pie chart, let''s change the JavaScript file and create the
    bar chart HTML (source file: `07_making_a_bar_chart/ct/dashboard/bar_app.html`).'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 与饼图相同，首先准备 CT。再次与创建饼图相同，让我们更改 JavaScript 文件并创建条形图 HTML（源文件：`07_making_a_bar_chart/ct/dashboard/bar_app.html`）。
- en: 'Apart from the created class name (`MyApp.view.dashboard.Bar`), the JavaScript
    file here is the same as the pie chart (source file: `07_making_a_bar_chart/ct/dashboard/bar_app.js`).'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 除了创建的类名（`MyApp.view.dashboard.Bar`）外，这里的 JavaScript 文件与饼图相同（源文件：`07_making_a_bar_chart/ct/dashboard/bar_app.js`）。
- en: Implementing the Direct function
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现Direct函数
- en: Now, it's the `Direct` function. As the definition is already made in `config.php`,
    I will not repeat it here.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是 `Direct` 函数。由于定义已经在 `config.php` 中完成，所以这里不再重复。
- en: 'Let''s go ahead and implement the `Direct` method (`getBarData`) to get the
    data for the bar chart. Please refer to the source code in the source file if
    you want to see the content (source file: `08_implement_direct_function/php/classes/
    MyAppDashBoard.php`). It will acquire the count for the levels of quotations or
    bills created for each client.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续实现 `Direct` 方法（`getBarData`）以获取条形图的数据。如果您想查看源代码内容，请参考源文件（源文件：`08_implement_direct_function/php/classes/MyAppDashBoard.php`）。它将获取为每个客户创建的报价或账单级别的计数。
- en: Preparing the store for the chart
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为图表准备存储
- en: Next comes the model store in the same way as we did for the pie chart. The
    name is the client name; quotation and bill are where the various counts are stored.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是模型存储，与创建饼图的方式相同。名称是客户端名称；报价和账单是存储各种计数的地方。
- en: 'We''ll now create the `MyApp.model.Bar` class that has the fields, such as
    `name`, `quotation`, and `bill` (source file: `09_prepare_the_store_for_the_pie_chart/app/model/
    Bar.js`).'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建 `MyApp.model.Bar` 类，它包含字段，例如 `name`、`quotation` 和 `bill`（源文件：`09_prepare_the_store_for_the_pie_chart/app/model/Bar.js`）。
- en: 'We''ll implement the store using the model we made in the previous step. It
    is the same way as we did for the pie chart so just see the source file if you
    need reference. Be careful as the model `name`, `StoreId`, and `Direct` method
    titles are different (source file: `09_prepare_the_store_for_the_pie_chart/app/store/
    Bar.js`).'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用之前步骤中创建的模型来实现存储。这与创建饼图的方式相同，所以如果需要参考，请查看源文件。请注意，模型 `name`、`StoreId` 和 `Direct`
    方法名称不同（源文件：`09_prepare_the_store_for_the_pie_chart/app/store/Bar.js`）。
- en: Creating the view
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建视图
- en: 'Let''s go ahead and define the content inside so that we can display it (source
    file: `10_making_the_view/app/view/dashboard/Bar.js`):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义其内容，以便我们可以显示它（源文件：`10_making_the_view/app/view/dashboard/Bar.js`）：
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Implementing the controller
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现控制器
- en: 'Like what we did with `onShow`, I''ll put this implementation in a postscript
    (source file: `11_making_the_view/app/controller/DashBoard.js`).'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们在 `onShow` 中所做的一样，我将把这个实现放在附录中（源文件：`11_making_the_view/app/controller/DashBoard.js`）。
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let''s take a look at our bar chart which appears as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们的条形图，如下所示：
- en: '![Implementing the controller](img/5446OS_05_03.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![实现控制器](img/5446OS_05_03.jpg)'
- en: Creating a line chart
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建折线图
- en: 'As before, let''s set out by creating the CT. In the same way as for the pie
    chart, change the JavaScript file to be read and create the line chart HTML (source
    file: `12_making_a_line_chart/ct/dashboard/line_app.html`).'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前一样，让我们从创建 CT 开始。与饼图相同，更改要读取的 JavaScript 文件并创建折线图 HTML（源文件：`12_making_a_line_chart/ct/dashboard/line_app.html`）。
- en: 'In this JavaScript file, everything is the same as the pie chart apart from
    the create class name: `MyApp.view.dashboard.Line` (source file: `12_making_a_line_chart/ct/dashboard/line_app.js`).'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个 JavaScript 文件中，除了创建类名 `MyApp.view.dashboard.Line`（源文件：`12_making_a_line_chart/ct/dashboard/line_app.js`）之外，一切与饼图相同。
- en: Implementing the Direct function
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现 Direct 函数
- en: 'In the same way, implement the `Direct` function. Let''s implement the `Direct`
    method (`getLineData`) to acquire data in the same way as we did for the bar chart.
    Please refer to the source file if you want to see the source code (source file:
    `13_implement_direct_function/php/classes/ MyAppDashBoard.php`).'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 以同样的方式，实现 `Direct` 函数。让我们实现 `Direct` 方法（`getLineData`）以获取与条形图相同的数据。如果您想查看源代码，请参考源文件（源文件：`13_implement_direct_function/php/classes/
    MyAppDashBoard.php`）。
- en: Preparing the store for the chart
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备图表的存储
- en: 'Create the model store in a similar way. We''ll create the `MyApp.model.Line`
    class that has the fields `name`, `quotation`, and `bill` (source file: `14_prepare_the_store_for_the_pie_chart/app/model/
    Line.js`).'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以类似的方式创建模型存储。我们将创建具有字段 `name`、`quotation` 和 `bill` 的 `MyApp.model.Line` 类（源文件：`14_prepare_the_store_for_the_pie_chart/app/model/
    Line.js`）。
- en: 'We''ll now implement the store using the model we made in the previous step.
    The details are the same as in the pie chart. Refer to the following source file
    for the code. Again, the model `name`, `StoreId`, and `Direct` method titles have
    changed so take note of this (source file: `14_prepare_the_store_for_the_pie_chart/app/store/
    Line.js`).'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将使用之前步骤中创建的模型实现存储。细节与饼图相同。有关代码，请参考以下源文件。再次，模型 `name`、`StoreId` 和 `Direct`
    方法标题已更改，请注意这一点（源文件：`14_prepare_the_store_for_the_pie_chart/app/store/ Line.js`）。
- en: Creating the view
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建视图
- en: 'Let''s make the `quotation` and `bill` variables to display per month. With
    the `Direct` function, at most it can receive output of 12 months, and in case
    that the data doesn''t exist, the number of months will decrease (source file:
    `15_making_the_view/app/view/dashboard/Line.js`).'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将 `quotation` 和 `bill` 变量设置为按月显示。使用 `Direct` 函数，最多可以接收 12 个月的输出，如果数据不存在，月份的数量将减少（源文件：`15_making_the_view/app/view/dashboard/Line.js`）。
- en: '[PRE12]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Implementing the controller
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现 controller
- en: 'As it is the same process, I will add a postscript about the command to read
    the controller store (source file: `16_making_the_view/app/controller/DashBoard.js`).'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 由于过程相同，我将添加关于读取控制器存储的命令的附录（源文件：`16_making_the_view/app/controller/DashBoard.js`）。
- en: '[PRE13]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s take a look at our line chart which appears as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们的线形图，它如下所示：
- en: '![Implementing the controller](img/5446OS_05_04.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![实现 controller](img/5446OS_05_04.jpg)'
- en: Creating a radar chart
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建雷达图
- en: Now, let's make the final CT.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们制作最终的 CT。
- en: 'In the same way as the pie chart, change the JavaScript file to be read and
    create the radar chart HTML (source file: `17_making_a_radar_chart/ct/dashboard/radar_app.html`).'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 与饼图相同的方式，修改 JavaScript 文件以读取并创建雷达图 HTML（源文件：`17_making_a_radar_chart/ct/dashboard/radar_app.html`）。
- en: 'Again, everything is the same as the pie chart in this JavaScript file apart
    from the create class name: `MyApp.view.dashboard.Radar` (source file: `17_making_a_radar_chart/ct/dashboard/radar_app.js`).'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，在这个 JavaScript 文件中，除了创建类名 `MyApp.view.dashboard.Radar`（源文件：`17_making_a_radar_chart/ct/dashboard/radar_app.js`）之外，一切与饼图相同。
- en: Implementing the Direct function
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现 Direct 函数
- en: 'As the title says, let''s implement the `Direct` function. As before, we''ll
    implement the `Direct` method (`getRadarData`) to acquire the data for the radar
    chart. Please refer to the following source file for details (source file: `18_implement_direct_function/php/classes/
    MyAppDashBoard.php`).'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 正如标题所说，让我们实现 `Direct` 函数。和之前一样，我们将实现 `Direct` 方法（`getRadarData`）以获取雷达图的数据。有关详细信息，请参考以下源文件（源文件：`18_implement_direct_function/php/classes/
    MyAppDashBoard.php`）。
- en: You've guessed it, the process is exactly the same as the `getLineData`. So,
    there's no need to implement it unnecessarily, but if you want to display different
    data on the radar chart, please amend this method.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经猜到了，过程与 `getLineData` 完全相同。因此，没有必要不必要地实现它，但如果您想在雷达图上显示不同的数据，请修改此方法。
- en: Preparing the store for the chart
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备图表的存储
- en: 'Let''s prepare the store. We''ll create the `MyApp.model.Radar` class that
    has the `name`, `quotation`, and `bill` fields (source file: `19_prepare_the_store_for_the_pie_chart/app/model/
    Radar.js`).'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们准备存储。我们将创建具有 `name`、`quotation` 和 `bill` 字段的 `MyApp.model.Radar` 类（源文件：`19_prepare_the_store_for_the_pie_chart/app/model/
    Radar.js`）。
- en: 'Again, we''ll implement the store with the model we made in the previous step.
    The details are the same as for the pie chart, and again be careful because the
    model `name`, `StoreId`, and `Direct` method titles are different (source file:
    `19_prepare_the_store_for_the_pie_chart/app/store/ Radar.js`).'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们将使用我们在上一步中制作的模型来实现存储。细节与饼图相同，再次请注意，因为模型 `name`、`StoreId` 和 `Direct` 方法名称不同（源文件：`19_prepare_the_store_for_the_pie_chart/app/store/
    Radar.js`）。
- en: Creating the view
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建视图
- en: 'Next, we will create the view (source file: `20_making_the_view/app/view/dashboard/Radar.js`):'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建视图（源文件：`20_making_the_view/app/view/dashboard/Radar.js`）：
- en: '[PRE14]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Implementing the controller
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现控制器
- en: 'Postscript the store''s data reading settings in `onShow` (source file: `21_making_the_view/app/controller/DashBoard.js`).'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `onShow` 中设置存储的数据读取设置（源文件：`21_making_the_view/app/controller/DashBoard.js`）。
- en: '[PRE15]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Finally, let''s look at our radar chart which appears as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看看我们的雷达图表，它看起来如下：
- en: '![Implementing the controller](img/5446OS_05_05.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![实现控制器](img/5446OS_05_05.jpg)'
- en: In the near future, the chart should look like the previous chart. However,
    in the current Ext JS 4.2.2-GPL Version, setting the store to a chart and acquiring
    the data from the server causes a bug that distorts the display of the lines and
    the labels. The bug has been confirmed as EXTJSIV-7778.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在不久的将来，图表应该看起来像之前的图表。然而，在当前的 Ext JS 4.2.2-GPL 版本中，将存储设置到图表并从服务器获取数据会导致一个错误，该错误扭曲了线条和标签的显示。该错误已被确认为
    EXTJSIV-7778。
- en: In the case of the previous chart, we managed to display it by taking the exact
    same response received from the server and setting it in the store's local data.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个图表的情况下，我们通过将服务器接收到的确切响应设置在存储的本地数据中，成功地显示了它。
- en: '![Implementing the controller](img/5446OS_05_06.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![实现控制器](img/5446OS_05_06.jpg)'
- en: Summary
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You must agree this is starting to look like an application!
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须同意这已经开始看起来像一个应用程序了！
- en: The dashboard is the first screen you see right after logging in. Charts are
    extremely effective in order to visually check a large and complicated amount
    of data. If you keep adding panels as and when you feel it's needed, you'll increase
    its practicability. This sample will become a customizable base for you to use
    in future projects.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表板是您登录后看到的第一个屏幕。图表在视觉上检查大量复杂的数据时非常有效。如果您觉得需要，随时添加面板，这将增加其实用性。这个示例将成为您在未来的项目中可定制的基线。
- en: Now, in the next and final chapter we'll move on to data management.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在下一章和最后一章中，我们将继续学习数据管理。
