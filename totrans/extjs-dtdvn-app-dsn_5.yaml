- en: Chapter 5. Reporting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we will create the report and display it with four different
    types of graphs on the dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will learn to:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a pie chart to display the quotation and bill data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a bar chart to display the data of the customer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a line chart to display the quotation and bill data by month
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a radar chart for monetary amounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display each chart inside a panel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Layout four panels in the dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating charts on dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First create four empty panels and make it so that the **component test** (**CT**)
    can display them. These panels are for a pie chart, bar chart, line chart, and
    a radar chart. This process is very simple and now you should have four empty
    panels prepared.
  prefs: []
  type: TYPE_NORMAL
- en: To create each chart class as before, we will copy a different `view.html` and
    create a new HTML, modify the title and the JavaScript file.
  prefs: []
  type: TYPE_NORMAL
- en: Pie chart for CT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create the class name with `MyApp.view.dashboard.Pie`. Please see the
    following source files for the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`01_making_charts_on_dashboard/ct/dashboard/pie_view.html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`01_making_charts_on_dashboard/ct/dashboard/pie_view.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ll now implement the class specified in the previous code (source file:
    `01_making_charts_on_dashboard/app/view/dashboard/Pie.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Bar chart for CT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The content is the same as for the bar chart. Let''s create the class name
    with `MyApp.view.dashboard.Bar`. Please see the following source files for the
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`01_making_charts_on_dashboard/ct/dashboard/bar_view.html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`01_making_charts_on_dashboard/ct/dashboard/bar_view.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`01_making_charts_on_dashboard/app/view/dashboard/Bar.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Line chart for CT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The same as with a pie chart and bar chart, let''s create the class name with
    `MyApp.view.dashboard.Line`. Please see the following source files for the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`01_making_charts_on_dashboard/ct/dashboard/line_view.html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`01_making_charts_on_dashboard/ct/dashboard/line_view.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`01_making_charts_on_dashboard/app/view/dashboard/Line.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Radar chart for CT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the same way as the other charts, let''s create the class name with `MyApp.view.dashboard.Radar`.
    Please see the following source files for the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`01_making_charts_on_dashboard/ct/dashboard/radar_view.html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`01_making_charts_on_dashboard/ct/dashboard/radar_view.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`01_making_charts_on_dashboard/app/view/dashboard/Radar.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Layout to dashboard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So, let''s arrange these four panels onto the dashboard (source file: `02_layout_to_dashboard/app/view/dashboard/DashBoard.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now, in the `requires` parameter on the dashboard panel, set up the four panels
    you made earlier. You can specify the `xtype` in items by doing this.
  prefs: []
  type: TYPE_NORMAL
- en: Next comes the layout part. In the `hbox` layout divide the top and bottom equally
    into two equal areas, then in each area divide the left and right with the `vbox`
    layout.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An important point is that `container` is being specified by the `xtype`. Having
    seen a variety of Ext JS code, in this case a lot of code doesn't specify the
    `xtype`. In such a case, `panel` will be specified as the initial value.
  prefs: []
  type: TYPE_NORMAL
- en: If you just want to execute the layout, you should specify the `container` parameter.
    If you don't do that and use `panel`, an unnecessary DOM will be created just
    for carrying out the layout and will badly affect the performance.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have successfully divided the dashboard into four parts, in order
    to adjust the appearance, make the adjustments to the padding. Of course, it's
    okay to do this directly with CSS.
  prefs: []
  type: TYPE_NORMAL
- en: In each of the four areas, set up the chart panels with `xtype`.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully your database is starting to take shape. Let's continue and implement
    the various charts.
  prefs: []
  type: TYPE_NORMAL
- en: '![Layout to dashboard](img/5446OS_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a pie chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we made the CT for display purposes, but now let's create the CT to make
    it run.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the `Direct` function, so let's prepare that as well. In reality
    we've done this already.
  prefs: []
  type: TYPE_NORMAL
- en: 'Duplicate a different `app.html` and change the JavaScript file like we have
    done before. Please see the source file for the code: `03_making_a_pie_chart/ct/dashboard/pie_app.html`.'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the Direct function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, prepare the `Direct` function to read the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, it''s the `config.php` file that defines the `API`. Let''s gather them
    together and implement the four graphs (source file: `04_implement_direct_function/php/config.php`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s create the following methods to acquire data for the various charts:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getPieData`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getBarData`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getLineData`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getRadarData`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'First, implement the `getPieData` method for the pie chart. We''ll implement
    the `Direct` method to get the data for the pie chart. Please see the actual content
    for the source code (source file: `04_implement_direct_function/php/classes/ MyAppDashBoard.php`).'
  prefs: []
  type: TYPE_NORMAL
- en: This is acquiring valid quotation and bill data items. With the data to be sent
    back to the client, set the array in items and set up the various names and data
    in a key array. You will now combine the definitions in the next model.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the store for the pie chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Charts need a store, so let''s define the store and model (source file: `05_prepare_the_store_for_the_pie_chart/app/model/
    Pie.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll create the `MyApp.model.Pie` class that has the `name` and `data` fields.
    Connect this with the data you set with the return value of the `Direct` function.
    If you increased the number of fields inside the model you just defined, make
    sure to amend the return field values, otherwise it won''t be applied to the chart,
    so be careful. We''ll use the model we made in the previous step and implement
    the store (source file: `05_prepare_the_store_for_the_pie_chart/app/model/ Pie.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Then, define the store using the model we made and set up the `Direct` function
    we made earlier in the proxy.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the View
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have now prepared the presentation data. Now, let''s quickly create the
    view to display it (source file: `06_making_the_view/app/view/dashboard/Pie.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Implementing the controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the previous code, data is not being read by the store and nothing is being
    displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the same way that reading was performed with `onShow`, let''s implement
    the controller (source file: `06_making_the_view/app/controller/DashBoard.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'With the charts we create from now on, as we create them it would be good to
    add the reading process to `onShow`. Let''s take a look at our pie chart which
    appears as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing the controller](img/5446OS_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a bar chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the same way as with the pie chart, first prepare the CT. Again in the same
    way as creating the pie chart, let''s change the JavaScript file and create the
    bar chart HTML (source file: `07_making_a_bar_chart/ct/dashboard/bar_app.html`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Apart from the created class name (`MyApp.view.dashboard.Bar`), the JavaScript
    file here is the same as the pie chart (source file: `07_making_a_bar_chart/ct/dashboard/bar_app.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the Direct function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, it's the `Direct` function. As the definition is already made in `config.php`,
    I will not repeat it here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and implement the `Direct` method (`getBarData`) to get the
    data for the bar chart. Please refer to the source code in the source file if
    you want to see the content (source file: `08_implement_direct_function/php/classes/
    MyAppDashBoard.php`). It will acquire the count for the levels of quotations or
    bills created for each client.'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the store for the chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next comes the model store in the same way as we did for the pie chart. The
    name is the client name; quotation and bill are where the various counts are stored.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll now create the `MyApp.model.Bar` class that has the fields, such as
    `name`, `quotation`, and `bill` (source file: `09_prepare_the_store_for_the_pie_chart/app/model/
    Bar.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll implement the store using the model we made in the previous step. It
    is the same way as we did for the pie chart so just see the source file if you
    need reference. Be careful as the model `name`, `StoreId`, and `Direct` method
    titles are different (source file: `09_prepare_the_store_for_the_pie_chart/app/store/
    Bar.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s go ahead and define the content inside so that we can display it (source
    file: `10_making_the_view/app/view/dashboard/Bar.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Implementing the controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Like what we did with `onShow`, I''ll put this implementation in a postscript
    (source file: `11_making_the_view/app/controller/DashBoard.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a look at our bar chart which appears as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing the controller](img/5446OS_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a line chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As before, let''s set out by creating the CT. In the same way as for the pie
    chart, change the JavaScript file to be read and create the line chart HTML (source
    file: `12_making_a_line_chart/ct/dashboard/line_app.html`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this JavaScript file, everything is the same as the pie chart apart from
    the create class name: `MyApp.view.dashboard.Line` (source file: `12_making_a_line_chart/ct/dashboard/line_app.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the Direct function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the same way, implement the `Direct` function. Let''s implement the `Direct`
    method (`getLineData`) to acquire data in the same way as we did for the bar chart.
    Please refer to the source file if you want to see the source code (source file:
    `13_implement_direct_function/php/classes/ MyAppDashBoard.php`).'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the store for the chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the model store in a similar way. We''ll create the `MyApp.model.Line`
    class that has the fields `name`, `quotation`, and `bill` (source file: `14_prepare_the_store_for_the_pie_chart/app/model/
    Line.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll now implement the store using the model we made in the previous step.
    The details are the same as in the pie chart. Refer to the following source file
    for the code. Again, the model `name`, `StoreId`, and `Direct` method titles have
    changed so take note of this (source file: `14_prepare_the_store_for_the_pie_chart/app/store/
    Line.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s make the `quotation` and `bill` variables to display per month. With
    the `Direct` function, at most it can receive output of 12 months, and in case
    that the data doesn''t exist, the number of months will decrease (source file:
    `15_making_the_view/app/view/dashboard/Line.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Implementing the controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As it is the same process, I will add a postscript about the command to read
    the controller store (source file: `16_making_the_view/app/controller/DashBoard.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a look at our line chart which appears as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing the controller](img/5446OS_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a radar chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's make the final CT.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the same way as the pie chart, change the JavaScript file to be read and
    create the radar chart HTML (source file: `17_making_a_radar_chart/ct/dashboard/radar_app.html`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, everything is the same as the pie chart in this JavaScript file apart
    from the create class name: `MyApp.view.dashboard.Radar` (source file: `17_making_a_radar_chart/ct/dashboard/radar_app.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the Direct function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As the title says, let''s implement the `Direct` function. As before, we''ll
    implement the `Direct` method (`getRadarData`) to acquire the data for the radar
    chart. Please refer to the following source file for details (source file: `18_implement_direct_function/php/classes/
    MyAppDashBoard.php`).'
  prefs: []
  type: TYPE_NORMAL
- en: You've guessed it, the process is exactly the same as the `getLineData`. So,
    there's no need to implement it unnecessarily, but if you want to display different
    data on the radar chart, please amend this method.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the store for the chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s prepare the store. We''ll create the `MyApp.model.Radar` class that
    has the `name`, `quotation`, and `bill` fields (source file: `19_prepare_the_store_for_the_pie_chart/app/model/
    Radar.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, we''ll implement the store with the model we made in the previous step.
    The details are the same as for the pie chart, and again be careful because the
    model `name`, `StoreId`, and `Direct` method titles are different (source file:
    `19_prepare_the_store_for_the_pie_chart/app/store/ Radar.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we will create the view (source file: `20_making_the_view/app/view/dashboard/Radar.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Implementing the controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Postscript the store''s data reading settings in `onShow` (source file: `21_making_the_view/app/controller/DashBoard.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s look at our radar chart which appears as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing the controller](img/5446OS_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the near future, the chart should look like the previous chart. However,
    in the current Ext JS 4.2.2-GPL Version, setting the store to a chart and acquiring
    the data from the server causes a bug that distorts the display of the lines and
    the labels. The bug has been confirmed as EXTJSIV-7778.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of the previous chart, we managed to display it by taking the exact
    same response received from the server and setting it in the store's local data.
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing the controller](img/5446OS_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You must agree this is starting to look like an application!
  prefs: []
  type: TYPE_NORMAL
- en: The dashboard is the first screen you see right after logging in. Charts are
    extremely effective in order to visually check a large and complicated amount
    of data. If you keep adding panels as and when you feel it's needed, you'll increase
    its practicability. This sample will become a customizable base for you to use
    in future projects.
  prefs: []
  type: TYPE_NORMAL
- en: Now, in the next and final chapter we'll move on to data management.
  prefs: []
  type: TYPE_NORMAL
