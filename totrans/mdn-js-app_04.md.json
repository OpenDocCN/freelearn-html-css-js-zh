["```js\n{\n  \"name\": \"Custom-PeerServer\",\n  \"dependencies\": {\n    \"peer\": \"0.2.8\",\n    \"express\": \"4.13.3\"\n  }\n}\n```", "```js\n./peerjs â€“port 8080\n\n```", "```js\nStarted PeerServer on ::, port: 8080, path: / (v. 0.2.8)\n\n```", "```js\npeer = new Peer(id, {key: \"\"});\n```", "```js\npeer = new Peer(id, {host: \"localhost\", port: 8080});\n```", "```js\nvar PeerServer = require(\"peer\").PeerServer;\nvar server = PeerServer({port: 8080});\n\nserver.on(\"connection\", function(id) {\n  console.log(id + \" has connected to the PeerServer\");\n});\n\nserver.on(\"disconnect\", function(id) {\n  console.log(id + \" has disconnected from the PeerServer\");\n});\n```", "```js\npeer = new Peer(id, {key: \"\"});\n```", "```js\npeer = new Peer(id, {host: \"localhost\", port: 8080});\n```", "```js\nvar express = require(\"express\");\nvar app = express();\n\nvar server = app.listen(8080);\n\napp.use(\"/signaling\", function(httpRequest, httpResponse, next){\n  //check whether peer is allowed to connect or not.\n\n  next();\n});\n\nvar ExpressPeerServer = require(\"peer\").ExpressPeerServer(server, {debug: true});\n\napp.use(\"/signaling\", ExpressPeerServer);\n\nExpressPeerServer.on(\"connection\", function(id){\n\n});\n\nExpressPeerServer.on(\"disconnect\", function(id){\n\n});\n```", "```js\nvar express = require(\"express\");\nvar app = express();\n\napp.use(express.static(__dirname + \"/public\"));\n\napp.get(\"/\", function(httpRequest, httpResponse, next){\n  httpResponse.sendFile(__dirname + \"/public/html/index.html\");\n})\n\nvar server = app.listen(8080);\n```", "```js\nvar requestIp = require(\"request-ip\");\nvar geoip = require(\"geoip-lite\");\n\napp.use(\"/signaling\", function(httpRequest, httpResponse, next){\n\n  var clientIp = requestIp.getClientIp(httpRequest);\n  var geo = geoip.lookup(clientIp);\n\n  if(geo != null)\n  {\n    if(geo.country == \"IN\")\n    {\n      next();\n    }\n    else\n    {\n      httpResponse.end();\n    }\n  }\n  else\n  {\n    next();\n  }\n});\n\nvar ExpressPeerServer = require(\"peer\").ExpressPeerServer(server);\n\napp.use(\"/signaling\", ExpressPeerServer);\n\nvar connected_users = [];\n\nExpressPeerServer.on(\"connection\", function(id){\n  var idx = connected_users.indexOf(id); \n  if(idx === -1) //only add id if it's not in the array yet\n  {\n    connected_users.push(id);\n  }\n});\n\nExpressPeerServer.on(\"disconnect\", function(id){\n  var idx = connected_users.indexOf(id); \n  if(idx !== -1) \n  {\n    connected_users.splice(idx, 1);\n  }\n\n  idx = waiting_peers.indexOf(id);\n  if(idx !== -1) \n  {\n    waiting_peers.splice(idx, 1);\n  }  \n});\n```", "```js\nvar waiting_peers = [];\n\napp.get(\"/find\", function(httpRequest, httpResponse, next){\n\n  var id = httpRequest.query.id;\n\n  if(connected_users.indexOf(id) !== -1)\n  {\n\n    var idx = waiting_peers.indexOf(id); \n     if(idx === -1) \n    {\n      waiting_peers.push(id);\n    }\n\n    if(waiting_peers.length > 1)\n    {\n      waiting_peers.splice(idx, 1);  \n      var user_found = waiting_peers[0];\n      waiting_peers.splice(0, 1);\n      httpResponse.send(user_found);\n    }\n    else\n    {\n      httpResponse.status(404).send(\"Not found\");\n    }\n  }\n  else\n  {\n    httpResponse.status(404).send(\"Not found\");\n  }\n})\n```", "```js\nwindow.addEventListener(\"load\", function(){\n  MediaStreamTrack.getSources(function(devices){\n    var audioCount = 1;\n    var videoCount = 1;\n\n    for(var count = 0; count < devices.length; count++)\n    {\n      if(devices[count].kind == \"audio\")\n      {\n        var name = \"\";\n\n        if(devices[count].label == \"\")\n        {\n          name = \"Microphone \" + audioCount;\n          audioCount++;\n        }\n        else\n        {\n          name = devices[count].label;\n        }\n\n        document.getElementById(\"audioInput\").innerHTML = document.getElementById(\"audioInput\").innerHTML + \"<option value='\" + devices[count].id + \"'>\" + name + \"</option>\";\n      }\n      else if(devices[count].kind == \"video\")\n      {\n        var name = \"\";\n\n        if(devices[count].label == \"\")\n        {\n          name = \"Webcam \" + videoCount;\n          videoCount++;\n        }\n        else\n        {\n          name = devices[count].label;\n        }\n\n        document.getElementById(\"videoInput\").innerHTML = document.getElementById(\"videoInput\").innerHTML + \"<option value='\" + devices[count].id + \"'>\" + name + \"</option>\";\n      }\n    }\n  });\n});\n```", "```js\nvar peer = null;\nvar dc = null;\nvar mc = null;\nvar ms = null;\nvar rms = null;\n\nwindow.addEventListener(\"load\", function(){\n  peer = new Peer({host: \"localhost\", port: 8080, path: \"/signaling\", debug: true}); \n\n  peer.on(\"disconnected\", function(){\n\n    var interval = setInterval(function(){\n      if(peer.open == true || peer.destroyed == true)\n      {\n        clearInterval(interval);\n      }\n      else\n      {\n        peer.reconnect();\n      }\n    }, 4000)\n  })\n\n  peer.on(\"connection\", function(dataConnection){\n    if(dc == null || dc.open == false)\n    {\n      dc = dataConnection;\n\n      dc.on(\"data\", function(data){\n        document.getElementById(\"messages\").innerHTML = document.getElementById(\"messages\").innerHTML + \"<li><span class='right'>\" + data + \"</span><div class='clear'></div></li> \";\n        document.getElementById(\"messages-container\").scrollTop = document.getElementById(\"messages-container\").scrollHeight;\n      })\n\n      dc.on(\"close\", function(){\n        document.getElementById(\"messages\").innerHTML = \"\";\n      })\n    }\n    else\n    {\n      dataConnection.close();\n    }\n  })\n\n  peer.on(\"call\", function(mediaConnection){\n    if(mc == null || mc.open == false)\n    {\n      mc = mediaConnection;\n      navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n      navigator.getUserMedia({video: true, audio: true}, function(mediaStream) {\n        ms = mediaStream;\n        mc.answer(mediaStream);\n        mc.on(\"stream\", function(remoteStream){\n          rms = remoteStream;\n          document.getElementById(\"peerVideo\").setAttribute(\"src\", URL.createObjectURL(remoteStream));\n          document.getElementById(\"peerVideo\").play();\n        })\n\n      }, function(e){ alert(\"An error occured while retrieving webcam and microphone stream\"); })\n    }\n    else\n    {\n      mediaConnection.close();\n    }\n  })\n});\n```", "```js\nfunction ajaxRequestObject()\n{\n  var request;\n  if(window.XMLHttpRequest)\n  {\n    request = new XMLHttpRequest();\n  }\n  else if(window.ActiveXObject) \n  {\n    try \n    {\n      request = new ActiveXObject('Msxml2.XMLHTTP');\n    }\n    catch (e)\n    {\n      request = new ActiveXObject('Microsoft.XMLHTTP');\n    }\n  }\n\n  return request;\n}\n\nfunction connectToNextPeer()\n{\n  var request = ajaxRequestObject();\n\n  var url = \"/find?id=\" + peer.id;\n\n  request.open(\"GET\", url);\n\n  request.addEventListener(\"load\", function(){\n    if(request.readyState === 4) \n    {\n      if(request.status === 200) \n      {\n        dc = peer.connect(request.responseText, {reliable: true, ordered: true});\n\n        dc.on(\"data\", function(data){\n          document.getElementById(\"messages\").innerHTML = document.getElementById(\"messages\").innerHTML + \n          \"<li><span class='right'>\" + data + \"</span><div class='clear'></div></li>\";\n          document.getElementById(\"messages-container\").scrollTop = document.getElementById(\"messages-container\").scrollHeight;\n        })\n\n        dc.on(\"close\", function(){\n          document.getElementById(\"messages\").innerHTML = \"\";\n        })\n\n        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n\n        var audioInputID = document.getElementById(\"audioInput\").options[document.getElementById(\"audioInput\").selectedIndex].value;\n        var videoInputID = document.getElementById(\"videoInput\").options[document.getElementById(\"videoInput\").selectedIndex].value;\n\n        navigator.getUserMedia({video: {mandatory: {sourceId: videoInputID}}, audio: {mandatory: {sourceId: audioInputID}}}, function(mediaStream) {\n          ms = mediaStream;\n\n          if(document.getElementById(\"audioToggle\").checked)\n          {\n            var tracks = ms.getAudioTracks();\n            if(document.getElementById(\"audioToggle\").checked)\n            {\n              tracks[0].enabled = true;\n            }\n            else\n            {\n              tracks[0].enabled = false;\n            }\n          }\n\n          if(document.getElementById(\"videoToggle\").checked)\n          {\n            var tracks = ms.getVideoTracks();\n            if(document.getElementById(\"videoToggle\").checked)\n            {\n              tracks[0].enabled = true;\n            }\n            else\n            {\n              tracks[0].enabled = false;\n            }\n          }\n\n          mc = peer.call(request.responseText, ms);\n\n          mc.on(\"stream\", function(remoteStream){\n            rms = remoteStream;\n            document.getElementById(\"peerVideo\").setAttribute(\"src\", URL.createObjectURL(remoteStream));\n            document.getElementById(\"peerVideo\").play();\n          })\n\n        }, function(e){ alert(\"An error occured while retrieving webcam and microphone stream\"); });\n\n      }\n    }\n  }, false);\n\n  request.send(null);\n}\n\nfunction communication()\n{\n  if(peer != null && peer.disconnected == false && peer.destroyed == false)\n  {\n    if(dc == null || mc == null || dc.open == false || mc.open == false)\n    {\n      connectToNextPeer();\n    }\n  }\n}\n\nsetInterval(communication, 4000);\n```", "```js\ndocument.getElementById(\"message-input-box\").addEventListener(\"keypress\", function(){\n  if(dc != null && dc.open == true)\n  {\n    var key = window.event.keyCode;\n    if (key == 13) \n    {\n      var message = document.getElementById(\"message-input-box\").value;\n      document.getElementById(\"message-input-box\").value = \"\";\n      dc.send(message);\n      document.getElementById(\"messages\").innerHTML = document.getElementById(\"messages\").innerHTML + \"<li><span class='left'>\" + message + \"</span><div class='clear'></div></li> \";\n      document.getElementById(\"messages-container\").scrollTop = document.getElementById(\"messages-container\").scrollHeight;\n    }\n    else\n    {\n      return;\n    }\n  }\n})\n```", "```js\ndocument.getElementById(\"videoToggle\").addEventListener(\"click\", function(){\n  if(ms !== null)\n  {\n    var tracks = ms.getVideoTracks();\n\n    if(document.getElementById(\"videoToggle\").checked)\n    {\n      tracks[0].enabled = true;\n    }\n    else\n    {\n      tracks[0].enabled = false;\n    }\n  }\n});\n\ndocument.getElementById(\"audioToggle\").addEventListener(\"click\", function(){\n  if(ms !== null)\n  {\n    var tracks = ms.getAudioTracks();\n\n    if(document.getElementById(\"audioToggle\").checked)\n    {\n      tracks[0].enabled = true;\n    }\n    else\n    {\n      tracks[0].enabled = false;\n    }\n  }\n});\n```", "```js\ndocument.getElementById(\"next\").addEventListener(\"click\", function(){\n  if(mc != null)\n  {\n    mc.close();\n  }\n\n  if(dc != null)\n  {\n    dc.close();\n  }\n\n  connectToNextPeer();  \n})\n```", "```js\nsetInterval(function(){\n  if(dc == null || mc == null || dc.open == false || mc.open == false)\n  {\n    document.getElementById(\"peerStatus\").innerHTML = \"Waiting for a free peer\";\n  }\n  else\n  {\n    document.getElementById(\"peerStatus\").innerHTML = \"Connected to a peer\";\n  }\n\n  if(peer != null && peer.disconnected == false && peer.destroyed == false)\n  {\n    document.getElementById(\"peerServerStatus\").innerHTML = \"Connected to PeerServer\";\n  }\n  else\n  {\n    document.getElementById(\"peerServerStatus\").innerHTML = \"Not connected to PeerServer\";\n  }\n}, 4000);\n```"]