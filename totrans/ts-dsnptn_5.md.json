["```js\nfunction process(callback) { \n  stepOne((error, resultOne) => { \n    if (error) { \n      callback(error); \n       return; \n      } \n\n  stepTwo(resultOne, (error, resultTwo) => { \n    if (error) { \n      callback(error); \n        return; \n    } \n\n    callback(undefined, resultTwo + 1); \n    }); \n  }); \n} \n\n```", "```js\nfunction process() { \n  return stepOne() \n    .then(result => stepTwo(result)) \n\n.then(result => result + 1); \n}\n\n```", "```js\nimport * as FS from 'fs'; \n\nFS.readFile('some-file.txt', 'utf-8', (error, text) => { \n  if (error) { \n    console.error(error); \n    return; \n  } \n\n  console.log('Content:', text); \n});  \n\n```", "```js\nFS \n  .readFile('some-file.txt', 'utf-8') \n  .then(text => { \n    console.log('Content:', text); \n  }) \n  .catch(reason => { \n    Console.error(reason); \n  }); \n\n```", "```js\nfunction readFile(path: string, options: any): Promise<string> { \n  return new Promise((resolve, reject) => { \n    FS.readFile(path, options, (error, result) => { \n      if (error) { \n        reject(error); \n      } else { \n        resolve(result); \n      } \n    }); \n  }); \n} \n\n```", "```js\nimport * as Path from 'path'; \nimport * as express from 'express'; \n\nlet app = express(); \n\napp.set('engine', 'hbs'); \napp.set('views', Path.join(__dirname, '../views')); \n\napp.get('/page', (req, res) => { \n  res.render('page', { \n    title: 'Hello, Express!', \n    content: '...' \n  }); \n}); \n\napp.get('/data', (req, res) => { \n  res.json({ \n    version: '0.0.0', \n    items: [] \n  }); \n}); \n\napp.listen(1337); \n\n```", "```js\nimport { Request, Response } from 'express'; \n\nexport function page(req: Request, res: Response): void { \n  res.render('page', { \n    title: 'Hello, Express!', \n    content: '...' \n  }); \n} \n\n```", "```js\nimport * as glob from 'glob'; \n\nlet controllersDir = Path.join(__dirname, 'controllers'); \n\nlet controllerPaths = glob.sync('**/*.js', { \n    cwd: controllersDir \n}); \n\nfor (let path of controllerPaths) { \n    let controller = require(Path.join(controllersDir, path)); \n    let urlPath = path.replace(/\\\\/g, '/').replace(/\\.js$/, ''); \n\n    for (let actionName of Object.keys(controller)) { \n        app.get( \n            `/${urlPath}/${actionName}`, \n            controller[actionName] \n        ); \n    } \n} \n\n```", "```js\nexport function foo(req: Request, res: Response): void { \n    Promise \n        .all([ \n            Post.getContent(), \n            Post.getComments() \n        ]) \n        .then(([post, comments]) => { \n            res.render('foo', { \n                post, \n                comments \n            }); \n        }); \n} \n\n```", "```js\nimport { Request, Response, NextFunction } from 'express'; \n\nexport function foo( \n  req: Request, \n  res: Response, \n  next: NextFunction \n): void { \n  Promise \n    // ... \n    .catch(reason => next(reason)); \n} \n\n```", "```js\nexport function foo(req: Request, res: Response) { \n  return Promise \n    .all([ \n      Post.getContent(), \n      Post.getComments() \n    ]) \n    .then(([post, comments]) => { \n      res.render('foo', { \n        post, \n        comments \n            }); \n        }); \n}\n\n```", "```js\nexport class Response { }\n\nexport class PageResponse extends Response {    \n  constructor(view: string, data: any) { }\n}\n\nexport function foo(req: Request) { \n  return Promise \n    .all([ \n      Post.getContent(), \n      Post.getComments() \n    ]) \n    .then(([post, comments]) => { \n      return new PageResponse('foo', { \n        post, \n        comments \n      }); \n    }); \n} \n\n```", "```js\nexport function foo(req: Request) { \n  return Promise \n    .all([ \n      Post.getContent(), \n      Post.getComments() \n    ]) \n    .then(([post, comments]) => { \n      return { \n        post, \n        comments \n      }; \n    }); \n} \n\n```", "```js\napp.get(`/${urlPath}/${actionName}`, controller[actionName]); \n\n```", "```js\nlet action = controller[actionName]; \n\napp.get(`/${urlPath}/${actionName}`, (req, res, next) => { \n  Promise \n    .resolve(action(req)) \n    .then(result => { \n      if (result instanceof Response) { \n        result.applyTo(res); \n      } else if (existsView(actionName)) { \n        new PageResponse(actionName, result).applyTo(res); \n      } else { \n        new JSONResponse(result).applyTo(res); \n      } \n    }) \n    .catch(reason => next(reason)); \n}); \n\n```", "```js\nexport default class Controller { \n  @get({ \n    view: 'custom-view-path' \n  }) \n    foo(req: Request) { \n      return { \n        title: 'Action foo', \n        content: 'Content of action foo' \n      }; \n    } \n} \n\n```", "```js\nimport ExtendableError from 'extendable-error'; \n\nclass ExpectedError extends ExtendableError { \n  constructor( \n    message: string, \n    public code: number \n  ) { \n    super(message); \n  } \n} \n\n```", "```js\nproject \n├─controllers \n├─core \n│  │ index.ts \n│  │ \n│  ├─product \n│  │   index.ts \n│  │   order.ts \n│  │   shipping.ts \n│  │ \n│  └─user \n│      index.ts \n│      account.ts \n│      statistics.ts \n│ \n├─helpers \n├─models \n├─utils \n└─views \n\n```", "```js\nconst Order = require('../core/product/order'); \n\n```", "```js\nimport * as Order from '../core/product/order'; \n\n```", "```js\nimport * as Order from './order'; \nimport * as Shipping from './shipping'; \n\nexport { Order, Shipping } \n\n```", "```js\nexport * from './order'; \nexport * from './shipping'; \n\n```", "```js\ntype Callback = () => void; \n\nlet isReady = false; \nlet callbacks: Callback[] = []; \n\nsetTimeout(() => { \n  callbacks.forEach(callback => callback()); \n  callbacks = undefined; \n  }, 100); \nexport function ready(callback: Callback): void { \n  if (!callbacks) { \n    callback(); \n  } else { \n    callbacks.push(callback); \n  } \n} \n\n```", "```js\nimport { ready } from './foo'; \n\nlet i = 0; \n\nready(() => { \n  console.log(i); \n}); \n\ni++; \n\n```", "```js\nexport function ready(callback: Callback): void { \n  if (!callbacks) { \n    setImmediate(() => callback()); \n  } else { \n    callbacks.push(callback); \n  } \n}\n\n```", "```js\nlet results = ['1', '2', '3'].map(parseInt); \n\n```", "```js\n[parseInt('1', 0), parseInt('2', 1), parseInt('3', 2)]; \n\n```", "```js\nclass Storage { \n  private constructor() { } \n\n  open(): Promise<Storage> { \n    return openDatabase()             \n      .then(db => new Storage(db)) \n  } \n} \n\n```", "```js\nclass Storage { \n  private dbPromise: Promise<IDBDatabase>; \n\n  get dbReady(): Promise<IDBDatabase> {         \n    if (this.dbPromise) { \n      return this.dbPromise; \n    } \n\n    // ...     } \n\n  get<T>(): Promise<T> { \n    return this             \n      .dbReady \n      .then(db => { \n        // ... \n      }); \n  } \n} \n\n```", "```js\ntype Middleware = (host: Host) => Promise<void>; \n\nclass Host { \n  middlewares: Middleware[] = []; \n\n  start(): Promise<void> { \n    return this \n      .middlewares \n      .reduce((promise, middleware) => { \n        return promise.then(() => middleware(this)); \n      }, Promise.resolve()); \n  } \n} \n\n```", "```js\nBuffer <00 00 00 02 7b 7d> \n\n```", "```js\nfunction buildPacket(data: any): Buffer { \n  let json = JSON.stringify(data); \n  let jsonBuffer = new Buffer(json); \n\n  let packet = new Buffer(4 + jsonBuffer.length); \n\n  packet.writeUInt32BE(jsonBuffer.length, 0); \n  jsonBuffer.copy(packet, 4, 0); \n\n  return packet; \n} \n\n```", "```js\n// 00 00 00 02 7b 7d \n{} \n\n// 00 00 00 0f 7b 22 6b 65 79 22 3a 22 76 61 6c 75 65 22 7d \n{\"key\":\"value\"} \n\n```", "```js\nclass Parser extends EventEmitter { \n  private buffer = new Buffer(0); \n  private state = State.header; \n\n  append(buffer: Buffer): void { \n    this.buffer = Buffer.concat([this.buffer, buffer]); \n    this.parse(); \n  } \n\n  private parse(): void { } \n\n  private parseHeader(): boolean { } \n\n  private parseBody(): boolean { } \n} \n\n```", "```js\nimport * as Net from 'net'; \n\nlet parser = new Parser(); \nlet client = Net.connect(port); \n\nclient.on('data', (data: Buffer) => { \n  parser.append(data); \n}); \n\nparser.on('data', (data: any) => { \n  console.log('Data received:', data); \n});  \n\n```"]