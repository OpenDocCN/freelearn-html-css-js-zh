- en: Chapter 7. Publishing Your App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, you have all the knowledge needed to build a bot that can increase
    your productivity and improve communications across teams. Hopefully, by now you
    have already thought of an idea for a bot that will not just make your own life
    easier but may also be useful for others. In this chapter, you will learn how
    to make your bot accessible to users outside of your own team and across the Slack
    community.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the steps necessary to add your bot to the Slack app directory
    and to make it accessible to others. We will review the following steps to add
    your bot onto the Slack app directory:'
  prefs: []
  type: TYPE_NORMAL
- en: Registering your bot and obtaining tokens
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the OAuth process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the **Add to Slack** button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scopes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Submitting your app or bot to the app directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monetizing your bot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Slack app directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to make adding apps easy for their users, Slack has created the app
    directory ([https://slack.com/apps](https://slack.com/apps)). This is a place
    to shop for apps and bots to add to your Slack team. Like other app stores available,
    every app submitted to the app directory is controlled and has to be approved
    by Slack itself to counteract spam and abuse.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible for other teams to use your bot by means of webhooks, as we saw
    in the previous chapter. However, if you are trying to reach a wide audience and
    potentially monetize your bot, the app directory is the most efficient way.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Slack app directory](img/B05384_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The app directory makes adding new apps easy
  prefs: []
  type: TYPE_NORMAL
- en: The end goal of this chapter is to allow users to add a bot to their Slack team
    by clicking an **Add to Slack** button, which we will cover in detail later.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by registering an app. In this example, we will add the *Wikibot*
    bot, which we built in [Chapter 3](ch03.html "Chapter 3. Adding Complexity"),
    *Adding Complexity*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that our registering of Wikibot (and the use of the Wikipedia API)
    is for demonstrative purposes only. Always check the terms and conditions of a
    third-party API before using it for a bot you intend to publish. In the case of
    Wikibot, for example, we can use the Wikipedia API but aren't allowed to publish
    a bot named `Wikipedia bot`, as we do not own the trademark.
  prefs: []
  type: TYPE_NORMAL
- en: Registering your app and obtaining tokens
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Certain unique tokens are required in order to successfully authenticate with
    Slack's OAuth servers. This is necessary so that Slack can determine whether we
    are who we say we are and whether our app or bot is actually integrated with the
    team we are attempting to get access to.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by navigating to the Slack new app registration page at [https://api.slack.com/applications/new](https://api.slack.com/applications/new).
    Fill out the form by picking a name for your bot, the team it originated from,
    descriptions of your bot, links to help pages, and a redirect URI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering your app and obtaining tokens](img/B05384_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Be as descriptive as you can when filling out this form
  prefs: []
  type: TYPE_NORMAL
- en: After saving your settings, you can choose to set up a bot user, webhook, or
    slash command. For Wikibot, we will be setting up a bot user.
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering your app and obtaining tokens](img/B05384_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If your specified username is taken, Slack will edit it slightly to avoid conflicts
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve saved your changes, you should be presented with OAuth information
    on the next screen. First, make sure to save the **Client ID** and **Client Secret**
    codes from this page before moving on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering your app and obtaining tokens](img/B05384_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Never share your client secret with anyone
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This process does not make your bot visible to the entire Slack user base; it
    simply registers your intent to develop an app. You will be able to test your
    app through the OAuth process. We will cover how to submit your bot to the app
    directory in a later section.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the OAuth process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to implement a bot user in a team that is not our own, we require a
    bot token similar to the ones we created earlier for our own team. We can request
    this token, but first we must prove that we are who we say we are using the OAuth
    process. **OAuth** (**Open Authentication**) is an open standard for authentication
    used by many companies, large and small.
  prefs: []
  type: TYPE_NORMAL
- en: 'The authentication process works through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The user clicks the **Add to Slack** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Slack sends a request to the redirect URI provided in our app's settings page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the request is received on our server, we redirect it to the authorization
    API endpoint ([https://slack.com/oauth/authorize](https://slack.com/oauth/authorize))
    and include the following parameters in the query string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`client_id`: This is the unique ID given to us when we first created our app.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scope`: This includes the permissions we require for our app. We will go into
    more detail on scopes later in this chapter.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`redirect_uri`: This is an optional parameter. This is the URI that Slack will
    send the authorization results to. If left blank, the `redirect_uri` specified
    in the app settings page is used.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`State`: This is a string we create; it could contain data we wish to preserve
    or function as our own identification method. For example, we could populate this
    field with a secret phrase that only we know, which we can later use to ensure
    that this request came from a trusted source.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Team`: This is the Slack team ID we wish to restrict our application to. This
    is useful when debugging our integration.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Slack sends a HTTP GET request to the redirect URI provided in our previous
    request. If absent, it defaults to the URI we provided in our app''s settings
    page. The request contains the following parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`code`: This is a temporary code generated by Slack, and it is used to confirm
    our identity'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`state`: This is the string we created earlier, and it can be used to make
    sure this request is legitimate'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Armed with all the tools and codes we need, we make a request for a bot user
    token from Slack in another HTTP GET request, passing the following parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`client_id`: This is the unique client ID given to us in the app''s settings
    page'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`client_secret`: This is the unique and secret ID given to us in the app''s
    settings page'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`code`: This is the code given to us by the request in step 4'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`redirect_uri`: This must match the previous `redirect_`uri if one was sent;
    otherwise, it is optional'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, if all went well, we will receive a response from Slack with all the
    data we require. It should look something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To make this a bit easier to understand, let''s look at a chart of these transactions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the OAuth process](img/B05384_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Slack's OAuth authorization procedure
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s look at the preceding code example. In order to make our lives
    a bit easier, we will use the Express web framework ([http://expressjs.com/](http://expressjs.com/))
    and the familiar `superagent` AJAX library. Make sure to install both by using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s put our server together; create or reuse an `index.js` file and
    paste the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The highlighted areas indicate where you should fill in your own tokens and
    URIs.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is highly recommended to use a service such as `ngrok` in order for your
    locally started server to be accessible from the Internet. Visit [https://ngrok.com/](https://ngrok.com/)
    for more details and setup instructions. You should use `ngrok` only for development
    purposes. In production, you should use a dedicated server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the Slack button documentation page ([https://api.slack.com/docs/slack-button#button-widget](https://api.slack.com/docs/slack-button#button-widget))
    and scroll down till you see the following test interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the OAuth process](img/B05384_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can use this area to test that your integrations authenticate properly
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Add to Slack** button and you should be presented with a screen
    that asks you to confirm whether you''d like to authorize your bot for use in
    your channel. Click on the **Authorize** button and switch over to your terminal.
    The bot token we need will show up in a log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use our token to start our bot user and have it respond to and interact
    with users from other teams. Let''s do that with Wikibot now. We will take the
    Wikibot code featured earlier in this book and alter it to function with the OAuth
    procedure outlined before. Replace the contents of `index.js` with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s try this out. Run the Node application after making sure that your `client_id`,
    `client_secret`, and `redirect_uri` are inserted in the highlighted sections of
    the preceding code. To test the integration, navigate to the documentation on
    the **Add to Slack** button here: [https://api.slack.com/docs/slack-button#button-widget](https://api.slack.com/docs/slack-button#button-widget).
    As before, scroll down till you see the test widget, tick the **bot** box, and
    click on the **Add to Slack** button.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Below this test widget is the embed code you should use when placing the **Add
    to Slack** button on your website.
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the OAuth process](img/B05384_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note how Slack has automatically renamed our bot to @wikibot2 to avoid conflict
  prefs: []
  type: TYPE_NORMAL
- en: 'Once authorized, you should see the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '**You have successfully installed Wikibot! You can now start using it in your
    Slack team, but make sure to invite the bot to your channel first with the /invite
    command!**'
  prefs: []
  type: TYPE_NORMAL
- en: We returned a simple string in this example. As per best practices, we need
    to redirect to a web page with some instructions on how to operate Wikibot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch to the Slack client and to the channel you''d like to incorporate Wikibot.
    As we discussed in [Chapter 2](ch02.html "Chapter 2. Your First Bot"), *Your First
    Bot*, bot users have to be manually invited to a channel, so let''s do that and
    test our bot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the OAuth process](img/B05384_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Our bot is successfully integrated and working!
  prefs: []
  type: TYPE_NORMAL
- en: Wikibot will now continue to function as long as our Node service is running.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at the other scopes available for our use.
  prefs: []
  type: TYPE_NORMAL
- en: Scopes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'OAuth scopes allow you to specify exactly what access your app needs to perform
    its functions. In the previous example, we requested the `bot` scope, which gives
    our bots access to all the actions a bot user can perform. For example, the `channels:history`
    scope gives us access to the channel''s chat history and `users:read` allows us
    to access the full list of users in the team. There is a long list of scopes available
    (which you can review at [https://api.slack.com/docs/oauth-scopes](https://api.slack.com/docs/oauth-scopes)),
    but we will focus on the three most likely to be used scopes in our apps:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bot`: This provides a bot token, allowing us to connect to the team as a bot
    user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`incoming-webhook`: This provides an incoming webhook token'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commands`: This provides a Slack token, which we can use to ensure that the
    incoming slash command requests are valid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Scopes of the bot variety automatically include a subset of other scopes needed
    for the bot to perform. For more information, visit [https://api.slack.com/bot-users#bot-methods](https://api.slack.com/bot-users#bot-methods).
  prefs: []
  type: TYPE_NORMAL
- en: 'Multiple scopes can be requested without issue. Here''s an example of the bot,
    incoming webhook and command scopes being requested in our initial redirect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Note how the requested scopes are separated with a `+` symbol. This will return
    the following object after we authenticate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Instead of using the `+` symbol, scopes can also be comma separated.
  prefs: []
  type: TYPE_NORMAL
- en: We now have all the pieces we need to create a bot (the `bot_access`_token),
    an incoming webhook (the `url` parameter in the `incoming_webhook` object), and
    the `access_token` we use for slash commands.
  prefs: []
  type: TYPE_NORMAL
- en: Submitting your app to the app directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you have tested your integration within your team''s channel, and you
    are happy with your bot, it''s time to submit it to the app directory. To do so,
    first ensure that your application conforms to Slack''s checklist for deploying
    an app ([https://api.slack.com/docs/slack-apps-checklist](https://api.slack.com/docs/slack-apps-checklist)).
    In short, your app must:'
  prefs: []
  type: TYPE_NORMAL
- en: Request only those scopes that are actually in use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display the **Add to Slack** button on a webpage. You are required to have your
    own website with instructions and help for new users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have an appropriate name (for example, no trademark or copyright infringement).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have an app or bot icon that is clear and distinctive.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have a high-quality icon that is at least 512 x 512 pixels in size.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include short and long descriptions of your bot's actions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include an installation link (this can simply be a webpage displaying the **Add
    to Slack** button and a guide on how to use your bot).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Feature an customer support link and e-mail, in case users run into problems
    installing your bot.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include a link to a privacy policy. Your bot could potentially be listening
    on private conversations, so you will need to specify exactly what data your bot
    will be collecting (if any).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have correct formatting and spelling. Your bot should use clear language and
    not contain any errors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that our example, Wikibot, fails the *appropriate name* clause, as Wikipedia
    is clearly a registered trademark to which we do not own the rights. On this basis
    alone, Wikibot would be rejected.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have confirmed that your app or bot conforms to the previous points,
    you can submit your application for review at [https://api.slack.com/submit](https://api.slack.com/submit).
  prefs: []
  type: TYPE_NORMAL
- en: Like other app stores, a review process is mandatory for all new submissions.
    The length of the review period is highly dependent on the complexity of your
    app and on the quantity of submissions the Slack admissions team has to process.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you are ready to publish your app to the Slack app directory, you require
    hosting. A great way to get your bot up and running quickly is to use Beep Boop
    [https://beepboophq.com/](https://beepboophq.com/). A paid service, Beep Boop
    will host your Slack bots for you so you can focus on developing rather than infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: To ensure that your bot reaches your intended audience, consider submitting
    it to useful websites such as Botwiki ([http://botwiki.org](http://botwiki.org)),
    botlist ([http://botlist.co](http://botlist.co)), and Product Hunt ([http://www.producthunt.com](http://www.producthunt.com))
    in order to get maximum exposure.
  prefs: []
  type: TYPE_NORMAL
- en: Monetizing your bot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Monetizing your bot, of course, is entirely optional and how you monetize it
    is dependent on the function of your bot and whether there is a market. Bear in
    mind that if your goal is to sell your bots for a one-off price, the Slack app
    directory does not support monetary transfers.
  prefs: []
  type: TYPE_NORMAL
- en: All apps in the app directive are free to install, but how you convert your
    user base to paying customers is left up to you.
  prefs: []
  type: TYPE_NORMAL
- en: There are a variety of methods to do this and there is no single correct way
    or Slack-*sanctioned* method. A popular method employed by companies such as Zoho
    Expense ([https://www.zoho.com/us/expense/slack-integration/](https://www.zoho.com/us/expense/slack-integration/))
    is a payment plan based on users. The service is free for small teams, but once
    you require more than three users to have access, you have to migrate to a paid
    tier.
  prefs: []
  type: TYPE_NORMAL
- en: The idea here is similar to APIs we have encountered, such as Wolfram Alpha.
    This means using a tiered approach where a free tier exists (tied either to amount
    of calls made or an expiration date), but paid tiers are optional if more requests
    are needed.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that when attempting to monetize your bot, the "try before you buy"
    sales tactic is key here. Users are unlikely to convert into paying customers
    if they don't have an idea of how your bot works and whether it is actually beneficial
    for them. Consider having either a free trial period or a free tier with limited
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Above all, the most important aspect is ensuring that you have a product that
    is truly worth paying for. As useful as our *to-do* bot from [Chapter 4](ch04.html
    "Chapter 4. Using Data"), *Using Data* is, it's unlikely that anyone would pay
    money for such a simple bot, as free alternatives are readily available or easily
    recreated.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, the focus of your bot should be the solving of a particular problem
    first and monetizing a distant second.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you saw how to make your app accessible to other teams via
    the Slack App Directory. You saw how to request scopes from Slack to ensure that
    your apps have the correct permissions to perform actions. Finally, you learned
    how to correctly authenticate your apps with Slack and obtain the tokens required
    to make your bots, webhooks, and slash commands work.
  prefs: []
  type: TYPE_NORMAL
- en: By following the lessons in this book, you have obtained all the knowledge and
    tools required to create a world-class Slack bot. It is now up to you to create
    the next leap forward in bot technology and to push the boundaries of how we interact
    with bots to solve problems and achieve optimum efficiency.
  prefs: []
  type: TYPE_NORMAL
- en: To perhaps inspire you further, you should be aware that chat bots in general
    and Slack bots in particular are enjoying an unprecedented explosion in popularity
    and recognition.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the beginning of his keynote speech at the 2016 Microsoft Build developers
    conference, Microsoft CEO Satya Nadella prophesized the future of bots:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"Bots are the new apps. People-to-people conversations, people-to-digital
    assistants, people-to-bots and even digital assistants-to-bots. That''s the world
    you''re going to get to see in the years to come."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'His argument is an intriguing one: that bots will potentially replace apps
    as the main source of communication between a company and their clients.'
  prefs: []
  type: TYPE_NORMAL
- en: Facebook has also seen the potential in bots. In April 2016, they announced
    bots for their Messenger Platform, which is expected to see tremendous activity
    in the coming months and years.
  prefs: []
  type: TYPE_NORMAL
- en: Although this book focused on building bots specifically for the Slack platform,
    the techniques, best practices, and theory are all valid for any bot platform.
    Armed with this knowledge, you have everything you need to become a competent
    developer in this new bot revolution.
  prefs: []
  type: TYPE_NORMAL
- en: Happy coding!
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this book, we used the Node Slack client directly to build our bots. Following
    this package on GitHub is the best way of staying up to date with new features
    and changes in the Slack ecosystem. There are, however, alternatives to using
    the official Node Slack client. Botkit ([https://github.com/howdyai/botkit](https://github.com/howdyai/botkit))
    is a fantastic package meant to abstract away a lot of the underlying concepts
    and streamline the bot creation process. Botkit also supports creating bots for
    Facebook Messenger for easy cross-platform bot development. If you wish to bootstrap
    the creation of your bot and get it up and running as soon as possible, consider
    using Botkit.
  prefs: []
  type: TYPE_NORMAL
