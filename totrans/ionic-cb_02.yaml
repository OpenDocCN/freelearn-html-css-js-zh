- en: Adding Ionic Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加Ionic组件
- en: 'In this chapter, we will cover the following tasks related to using Ionic components:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下与使用Ionic组件相关联的任务：
- en: Adding multiple pages using tabs
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用标签添加多个页面
- en: Adding left and right menu navigation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加左右菜单导航
- en: Navigating multiple pages with state parameters
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用状态参数导航多个页面
- en: Using menu, tags, and segment together in an app
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一个应用中同时使用菜单、标签和段
- en: Using the Ionic grid to create a complex UI
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ionic网格创建复杂的UI
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: It's possible to write a simple app with a handful of pages. Ionic provides
    a lot of out-of-the-box components that allow simple plug and play operations.
    When an app grows, managing different views and their custom data at a specific
    time or triggered event can be very complex. Ionic comes with some changes to
    the handling of state and navigation. In Ionic 1, you could use UI-Router for
    advanced routing management mechanisms. In Ionic, `NavController` enables the
    push/pop implementation of the navigation.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 可以用少量页面编写一个简单的应用。Ionic提供许多开箱即用的组件，允许简单的即插即用操作。当应用增长时，管理不同视图及其特定时间或触发事件的自定义数据可能会非常复杂。Ionic对状态和导航的处理进行了一些更改。在Ionic
    1中，你可以使用UI-Router进行高级路由管理机制。在Ionic中，`NavController`实现了导航的push/pop实现。
- en: Since Ionic introduces many new components, you have to understand how these
    components impact on your app's state hierarchy and when each state is triggered.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Ionic引入了许多新的组件，你必须理解这些组件如何影响你的应用状态层次结构，以及何时触发每个状态。
- en: Adding multiple pages using tabs
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用标签添加多个页面
- en: This section will explain how to work with the Ionic tab interface and expand
    it to other use cases. The example used is very basic, with three tabs and some
    sample Ionic components in each tab. This is a very common structure that you
    will find in many apps. You will learn how Ionic structures the tab interface
    and how it translates to individual folders and files.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将解释如何使用Ionic标签界面，并将其扩展到其他用例。所使用的示例非常基础，包含三个标签页，每个标签页中都有一些示例Ionic组件。这是你在许多应用中都会遇到的一种非常常见的结构。你将学习Ionic如何构建标签界面，以及它是如何转换为单个文件夹和文件的。
- en: 'In this example, you will build three tabs, as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，你将构建三个标签页，如下所示：
- en: A tab showing a simple text-only page to explain where to place the components
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个显示简单纯文本页面的标签页，以解释组件的放置位置
- en: A tab showing a signup form
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个显示注册表单的标签页
- en: A tab showing a horizontal slider box
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个显示水平滑块框的标签页
- en: Although the app is very straightforward, it will teach you a lot of key concepts
    in Angular and Ionic. Some of them are the component decorators, themes, and the
    TypeScript compiler process.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个应用非常直接，但它将教会你许多Angular和Ionic的关键概念。其中一些是组件装饰器、主题和TypeScript编译器过程。
- en: 'Here is a screenshot of the example app with the middle tab selected:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是选中中间标签的示例应用的截图：
- en: '`![](img/2e7600d3-4b95-4510-aaef-93f904a575b9.png)`'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/2e7600d3-4b95-4510-aaef-93f904a575b9.png)'
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Since this is the first app you are building from scratch, you need to ensure
    that you have followed through [Chapter 1](20b1308f-b7ed-4c5b-9a16-b05600ee41bc.xhtml),
    *Creating Our First App with Ionic*, to set up the environment and Ionic CLI.
    If you already had Ionic 1, it must be updated. For this, you can use the same
    command line as was used to install it, which is as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是你从头开始构建的第一个应用，你需要确保你已经按照[第1章](20b1308f-b7ed-4c5b-9a16-b05600ee41bc.xhtml)，“使用Ionic创建我们的第一个应用”，来设置环境和Ionic
    CLI。如果你已经有了Ionic 1，它必须更新。为此，你可以使用安装它时使用的相同命令行，如下所示：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'The following are the instructions to create example app:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是为创建示例应用提供说明：
- en: 'Create a new `PagesAndTabs` app using the `tabs` template and go into the `PagesAndTabs`
    folder to start Visual Studio Code, as shown:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`tabs`模板创建一个新的`PagesAndTabs`应用，并进入`PagesAndTabs`文件夹以启动Visual Studio Code，如下所示：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `blank` template only gives you a basic page. Open the `Finder` app in
    Mac or Windows Explorer in Windows to see the following folder structure:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`blank`模板只提供了一个基本页面。在Mac上打开`Finder`应用或在Windows上打开Windows资源管理器，可以看到以下文件夹结构：'
- en: '![](img/ee8602dc-b8c1-4a93-b348-955428c1da1b.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ee8602dc-b8c1-4a93-b348-955428c1da1b.png)'
- en: You will only modify what is in the `/src` folder and not `/www`, as in Ionic
    1\. Everything in the `/src` folder will be built and the `/www` folder will be
    created automatically. We will also reserve the folder names and filenames as
    much as possible, since the main goal here is to understand how the tab template
    works and the areas you can modify.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需修改 `/src` 文件夹中的内容，而不是 `/www`，正如在 Ionic 1 中那样。`/src` 文件夹中的所有内容都将被构建，而 `/www`
    文件夹将自动创建。我们还将尽可能保留文件夹名称和文件名，因为这里的主要目标是理解标签模板的工作方式和你可以修改的区域。
- en: Open and edit the `/src/pages/tabs/tabs.html` template file with the
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令打开并编辑 `/src/pages/tabs/tabs.html` 模板文件：
- en: 'following code:'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下代码：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The new template only updates the title and icons. This is because this example
    wants to reserve the naming of the tab `root` variables. You could add more tabs
    using `<ion-tab>`, as needed.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 新的模板只更新标题和图标。这是因为这个示例想要保留 `root` 变量的命名。你可以根据需要使用 `<ion-tab>` 添加更多标签页。
- en: 'To add a page, you need to ensure that `tab1Root` points to an existing folder
    and template. Since you will reuse the existing tab structure, you can just modify
    the `/src/pages/home/home.html` template, as shown, as this is your first page:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加一个页面，你需要确保 `tab1Root` 指向一个现有的文件夹和模板。由于你将重用现有的标签结构，你只需修改 `/src/pages/home/home.html`
    模板，如下所示，因为这将是你的第一个页面：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Also, in the same `/home` folder, edit `home.ts`, which corresponds to the
    same template, and enter the code here:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，在同一个 `/home` 文件夹中，编辑 `home.ts`，它与相同的模板相对应，并在其中输入代码：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For the second page, `tab2Root`, you will follow a similar process by editing
    the `/src/pages/about/about.html` template as shown:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于第二页，`tab2Root`，你将遵循类似的过程，通过编辑 `/src/pages/about/about.html` 模板，如下所示：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Edit `about.ts` in the same folder as in the preceding step:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前一步骤相同的文件夹中编辑 `about.ts`：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Finally, for the `tab3Root` page, you can change the template so that it will
    show a slider in `/src/pages/contact/contact.html`, as follows:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，对于 `tab3Root` 页面，你可以更改模板，使其在 `/src/pages/contact/contact.html` 中显示滑块，如下所示：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the `/contact` folder, you need to edit `contact.ts` with the following
    code:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `/contact` 文件夹中，你需要使用以下代码编辑 `contact.ts`：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Go to your Terminal and type the following command line to run the app:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往你的终端，并输入以下命令行来运行应用：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works...
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'There is actually a lot of new information and a lot of concepts in this simple
    app. At a higher level, this is how the app is structured:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这个简单的应用中包含了很多新的信息和许多概念。在更高层次上，这是应用的结构方式：
- en: When you run the app, Cordova loads the `/www/index.html` file to open first.
    All of your code and templates are combined into one file, `/www/build/main.js`.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你运行应用时，Cordova 会加载 `/www/index.html` 文件作为第一个打开的文件。你所有的代码和模板都将合并到一个文件中，即 `/www/build/main.js`。
- en: The `/app` folder is where most of your logic belongs. It starts with `app.component.ts`
    as the Bootstrap file.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/app` 文件夹是大多数逻辑所在的地方。它以 `app.component.ts` 作为引导文件。'
- en: Each subfolder under the `/pages` folder will represent a page, which is a new
    concept in Ionic. A page consists of an HTML template, TypeScript code, and an
    `.scss` file to customize that specific template only.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/pages` 文件夹下的每个子文件夹将代表一个页面，这是 Ionic 中的一个新概念。一个页面由一个 HTML 模板、TypeScript 代码和一个
    `.scss` 文件组成，用于自定义该特定模板。'
- en: The `/theme` folder will contain variables and customizations at a global level
    to override the default theme from Ionic.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/theme` 文件夹将包含全局级别的变量和自定义设置，以覆盖来自 Ionic 的默认主题。'
- en: Now, let's start with everything inside the `/app` folder.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们从 `/app` 文件夹中的所有内容开始。
- en: 'The `app.component.ts` file only imports all the required pages and components
    to start the app. This example needs the following four imports by default:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.component.ts` 文件只导入启动应用所需的所有页面和组件。此示例默认需要以下四个导入：'
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You must always import `Component`, `Platform`, and `StatusBar` from Ionic,
    because that will give you the `@Component` decorator to Bootstrap your app. A
    decorator is placed in front of its class to provide metadata for the class. The
    following example shows that the `MyApp` class has the characteristics of a component
    with a `template` property:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须始终从 Ionic 中导入 `Component`、`Platform` 和 `StatusBar`，因为这将为你提供 `@Component`
    装饰器来引导你的应用。装饰器放置在其类之前，为类提供元数据。以下示例显示 `MyApp` 类具有组件的特性，具有 `template` 属性：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Since this is a simple example, you don''t need to declare much except the
    template information. Similar to Ionic 1, you can use either `template` or `templateUrl`
    to point to a local file. In our case, it is `app.html` and it has the following
    content:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个简单的示例，你不需要声明很多，除了模板信息。类似于 Ionic 1，你可以使用 `template` 或 `templateUrl` 来指向一个本地文件。在我们的例子中，它是
    `app.html`，内容如下：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Classes are another new concept in ES6\. However, developers have been declaring
    classes in various programming languages, such as Java and C#. In ES6, you can
    use classes to be able to efficiently reuse code with better abstraction. A class
    could exist within that file context only. Consider the following example:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 类是 ES6 中的另一个新概念。然而，开发者已经在各种编程语言中声明了类，例如 Java 和 C#。在 ES6 中，你可以使用类来更有效地重用代码，并实现更好的抽象。类可以仅存在于该文件上下文中。考虑以下示例：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'However, if you want to use that class somewhere else, you have to export:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你想在其他地方使用该类，你必须导出：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In a class, you can have the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个类中，你可以有以下几种：
- en: A variable, such as `this.a` or `this.b`
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个变量，例如 `this.a` 或 `this.b`
- en: A method, such as `doSomething()`
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个方法，例如 `doSomething()`
- en: A constructor that automatically executes (or initializes) when an object is
    created using the class
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个在用该类创建对象时自动执行（或初始化）的构造函数
- en: More information about classes can be found at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于类的信息可以在以下找到 [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes).
- en: 'Another nice thing about ES6 is the arrow function, as shown:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: ES6 的另一个优点是箭头函数，如下所示：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The preceding is the same as:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的内容等同于：
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'An example (by passing a parameter) is as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例（通过传递参数）如下所示：
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The same code can be rewritten as shown:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的代码可以重写为如下所示：
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'More information about the arrow function can be found at:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于箭头函数的信息可以在以下找到：
- en: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions).'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions).'
- en: One important thing in `app.component.ts` is that you must declare a `root`
    page. You can see that from the template via `[root]="rootPage"`, and then again
    in the constructor via `this.rootPage = TabsPage`. The square brackets, `[]`,
    around `root` mean that it's a property of that DOM node. This is a new concept
    from Angular as it's trying to get rid of using a DOM property, such as `ngmodel`
    (which tends to result in lower performance). The assignment here is to tell Ionic
    2 that you will use `TabsPage`, which was imported earlier, and assign that as
    a `root` page. Then, the `ion-nav` directive will look at its own `root` property
    to start rendering the page. There seem to be a lot of abstractions and boilerplate
    compared to Ionic 1\. However, this practice is recommended to ensure better separation
    and scaling.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `app.component.ts` 中有一个重要的事情，那就是你必须声明一个 `root` 页面。你可以从模板中通过 `[root]="rootPage"`
    看到它，然后在构造函数中再次通过 `this.rootPage = TabsPage`。围绕 `root` 的方括号 `[]` 表示它是一个 DOM 节点的属性。这是
    Angular 的新概念，因为它试图摆脱使用 DOM 属性，如 `ngmodel`（这往往会导致性能降低）。这里的赋值是告诉 Ionic 2 你将使用之前导入的
    `TabsPage`，并将其作为 `root` 页面。然后，`ion-nav` 指令将查看自己的 `root` 属性以开始渲染页面。与 Ionic 1 相比，这里似乎有更多的抽象和样板代码。然而，这种做法是为了确保更好的分离和扩展。
- en: 'Once you understand how `app.component.ts` works, it''s easier to grasp the
    concepts from the other pages. Let''s take a look at the `/pages/tabs/tabs.ts`
    file, because that''s where you define the `TabsPage` class. From this file, you
    need to import three other pages, which are the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你理解了 `app.component.ts` 的工作原理，理解其他页面的概念就会更容易。让我们看看 `/pages/tabs/tabs.ts` 文件，因为在那里你定义了
    `TabsPage` 类。从这个文件中，你需要导入三个其他页面，如下所示：
- en: '[PRE19]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The template for this page is in `tabs.html`. However, you could also put the
    template in a string inside the `.ts` file, as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 该页面的模板位于 `tabs.html`。然而，你也可以在 `.ts` 文件中将模板放在一个字符串中，如下所示：
- en: '[PRE20]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: ES6 also introduces a new feature, called a multiline template string. You probably
    realize that the preceding template string does not have any `join()` or string
    combine (`+`) operators. The reason is that you can use back-tick (`` ` `` ``
    ` ``) to allow a multiline template.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: ES6还引入了一个新特性，称为多行模板字符串。您可能已经意识到前面的模板字符串没有`join()`或字符串连接(`+`)运算符。原因是您可以使用反引号（``
    ` ``）来允许多行模板。
- en: 'So, instead of doing this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您不需要这样做：
- en: '[PRE21]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You can now do this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以这样做：
- en: '[PRE22]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Below the page decorator, you need to export `TabsPage` (so that you can use
    it in `app.component.ts`) and tell the constructor to use `tab1Root`, `tab2Root`,
    and `tab3Root` as the roots for other pages in the tab navigation, as shown:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面装饰器下方，您需要导出`TabsPage`（以便您可以在`app.component.ts`中使用它），并告诉构造函数使用`tab1Root`、`tab2Root`和`tab3Root`作为标签导航中其他页面的根，如下所示：
- en: '[PRE23]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Ionic tab declaration is very similar to Ionic 1, shown as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic标签声明与Ionic 1非常相似，如下所示：
- en: '[PRE24]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: You just have to make sure that the `root` property is pointing to another page.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您只需确保`root`属性指向另一个页面。
- en: '`tab1Root` is actually very simple to understand, because it''s a text page
    where you add your own content and design within the `<ion-content>` element,
    as shown:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`tab1Root`实际上非常容易理解，因为它是一个文本页面，您可以在`<ion-content>`元素内添加自己的内容和设计，如下所示：'
- en: '[PRE25]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If you want to change the title, you can simply change the following line:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想更改标题，您可以简单地更改以下行：
- en: '[PRE26]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '`tab2Root` and `tab3Root` are very similar in terms of how they are structured.
    Ionic gives you the convenience of binding to an event right in the `AboutPage`
    class, as shown:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`tab2Root`和`tab3Root`在结构上非常相似。Ionic为您提供了便利，可以在`AboutPage`类中直接绑定到事件，如下所示：'
- en: '[PRE27]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In the preceding example from `about.ts`, if the user enters `tab2Root`, it
    will call the `ionViewWillEnter()` function automatically. This is a significant
    improvement because, in Ionic 1, you had to use `$ionicView.enter` on the `$scope`
    variable. Again, the concept of `$scope` no longer exists in Angular.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的`about.ts`示例中，如果用户输入`tab2Root`，它将自动调用`ionViewWillEnter()`函数。这是一个显著的改进，因为在Ionic
    1中，您必须在`$scope`变量上使用`$ionicView.enter`。再次强调，`$scope`的概念在Angular中不再存在。
- en: For a scalable app, it's better to separate templates into different files and
    avoid co-mingling templates inside the JavaScript code. `templateUrl` must always
    point to the relative location of the `.html` file.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对于可扩展的应用，最好将模板分离到不同的文件中，并避免在JavaScript代码中混合模板。`templateUrl`必须始终指向`.html`文件的相对位置。
- en: 'In `./src/pages/contact/contact.html`, you can use the slider box and bind
    to slide the change event, as shown:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在`./src/pages/contact/contact.html`中，您可以使用滑动框并绑定到滑动更改事件，如下所示：
- en: '[PRE28]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: To get an event in Angular (or Ionic), you have to use parentheses, `( )`, because
    the concept of `ng-click` or similar is no longer available. In this case, if
    the slide is changed based on `ionSlideDidChange`, the `ion-slides` directive
    will trigger the `onSlideChanged()` function in the `ContactPage` class.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Angular（或Ionic）中获取事件，您必须使用括号`( )`，因为`ng-click`或类似的概念已不再可用。在这种情况下，如果幻灯片根据`ionSlideDidChange`更改，`ion-slides`指令将触发`ContactPage`类中的`onSlideChanged()`函数。
- en: You cannot really run the TypeScript directly without having TypeScript to transpile
    the code into JavaScript. This process happens automatically behind the scenes
    when you run `ionic serve`. Also, when you change some code in the project, Ionic
    will detect those changes and rebuild the files before updating the browser. There
    is no need to hit refresh every time.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您不能在没有TypeScript进行代码转译成JavaScript的情况下直接运行TypeScript。当您运行`ionic serve`时，这个过程会在幕后自动发生。同样，当您在项目中更改一些代码时，Ionic会检测这些更改并在更新浏览器之前重新构建文件。您无需每次都刷新。
- en: See also
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: 'The Mozilla Developer Network has very extensive documentation on ECMAScript
    6, which you can find at the following link: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla](https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla).'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mozilla开发者网络提供了关于ECMAScript 6的非常广泛的文档，您可以通过以下链接找到：[https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla](https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla)。
- en: For Angular 2-specific information, you can read directly from the Angular 2
    documentation at [https://angular.io/docs/ts/latest/index.html](https://angular.io/docs/ts/latest/index.html).
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Angular 2特定的信息，您可以直接从Angular 2文档中阅读，文档链接为[https://angular.io/docs/ts/latest/index.html](https://angular.io/docs/ts/latest/index.html)。
- en: Adding left and right menu navigation
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加左右菜单导航
- en: Menu navigation is a very common component in many mobile apps. You can use
    the menu to allow users to change to different pages in the app, including login
    and logout. The menu could be placed on the left or right of the app. Ionic also
    lets you detect events and further customize the menu's look and feel.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单导航是许多移动应用中非常常见的组件。您可以使用菜单让用户在应用中切换到不同的页面，包括登录和登出。菜单可以放置在应用的左侧或右侧。Ionic还允许您检测事件并进一步自定义菜单的外观和感觉。
- en: 'This is a screenshot of the app you will develop:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您将要开发的应用的截图：
- en: '![](img/5a13886d-c553-468a-b09f-4ae07792b691.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5a13886d-c553-468a-b09f-4ae07792b691.png)'
- en: The app will have two pages and two menus. You can toggle either the left or
    right menu (but not both at the same time). In reality, it is much less likely
    that you will have both menus, but for the purposes of demonstration, this app
    will include both menus as the app will show the different properties of the menus
    that you can set. The left menu will change the page and the right menu will allow
    you to capture the exact item that is clicked on.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用将包含两个页面和两个菜单。您可以切换左侧或右侧菜单（但不能同时切换）。实际上，同时拥有两个菜单的可能性很小，但为了演示目的，这个应用将包含两个菜单，以便展示您可以设置的菜单的不同属性。左侧菜单将改变页面，而右侧菜单将允许您捕捉到点击的确切项目。
- en: Getting ready
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This app can run on your web browser, so there is no need to have a physical
    device available. Again, you only need to have Ionic available on your computer.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用可以在您的网页浏览器上运行，因此不需要有物理设备。再次强调，您只需要在您的计算机上安装Ionic。
- en: How to do it...
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Here are the instructions to create example app:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是创建示例应用的说明：
- en: 'Create a new `LeftRightMenu` app using the `sidemenu` template, as shown, and
    go to the `LeftRightMenu` folder:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`sidemenu`模板创建一个新的`LeftRightMenu`应用，如图所示，并进入`LeftRightMenu`文件夹：
- en: '[PRE29]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Check that your app folder structure is similar to the following:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认您的应用文件夹结构类似于以下结构：
- en: '![](img/eb073147-0ce7-4f20-bc3d-e816948c1896.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/eb073147-0ce7-4f20-bc3d-e816948c1896.png)'
- en: 'Edit `./src/app/app.component.ts` and replace it with the following code:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`./src/app/app.component.ts`并将其替换为以下代码：
- en: '[PRE30]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Open and edit the`./src/app/app.html` file with the following code:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开并编辑以下代码的`./src/app/app.html`文件：
- en: '[PRE31]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: There are two menus as siblings in this template. They are also at the same
    level as `ion-nav` and not a parent or child. This structure is important for
    menu navigation to work.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个模板中，有两个菜单作为兄弟元素。它们也与`ion-nav`处于同一级别，而不是父或子。这种结构对于菜单导航来说很重要。
- en: 'Now let''s create two pages, for which you only have to modify the standard
    pages from the `sidemenu` template. Open and edit the `./src/app/pages/home/home.html`
    template:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建两个页面，您只需要修改`sidemenu`模板中的标准页面。打开并编辑`./src/app/pages/home/home.html`模板：
- en: '[PRE32]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In the same folder, open and edit the `.css` classes via `home.scss`, as shown:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一文件夹中，打开并编辑`.css`类通过`home.scss`，如图所示：
- en: '[PRE33]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Note that since you're using the `sidemenu` template, it already comes with
    a second page (for example, list). There is no need to modify that page in this
    specific example.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，由于您正在使用`sidemenu`模板，它已经包含了一个第二页（例如，列表）。在这个特定示例中，您不需要修改该页面。
- en: 'Open and edit the template for the second page at `./src/pages/list/list.html`,
    as shown:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开并编辑第二个页面的模板`./src/pages/list/list.html`，如图所示：
- en: '[PRE34]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Go to your Terminal and run the app:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往您的终端并运行应用：
- en: '[PRE35]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: How it works...
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Since this app is just an introduction to menu navigation, it will not manage
    page routing and state parameters. At a higher level, this is how the app flows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个应用只是对菜单导航的介绍，它不会管理页面路由和状态参数。在更高层次上，这是应用的流程：
- en: '`app.ts` loads both of the `menu` templates in `app.html`.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app.ts`在`app.html`中加载了两个`menu`模板。'
- en: The left menu will trigger the `openPage()` function to open `PageTwo`.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左侧菜单将触发`openPage()`函数以打开`PageTwo`。
- en: The right menu will trigger the `rightMenuClick()` function to change the `this.text`
    property and be displayed on the screen.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右侧菜单将触发`rightMenuClick()`函数以改变`this.text`属性并在屏幕上显示。
- en: 'In the `app.html` template, the left menu has the following properties:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在`app.html`模板中，左侧菜单具有以下属性：
- en: '[PRE36]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'However, the right menu has the following assigned instead:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，右侧菜单有以下的分配：
- en: '[PRE37]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The `side` property will determine where on the screen the menu should show.
    There are two types of menus. The `overlay` option will leave the center page
    as it is, without moving. The `reveal` option will push the entire screen to show
    the menu. Which type you pick depends on the design of your app.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`side` 属性将决定菜单应在屏幕上的哪个位置显示。有两种类型的菜单。`overlay` 选项将保持中心页面不变，不移动。`reveal` 选项将推动整个屏幕以显示菜单。你选择哪种类型取决于你应用程序的设计。'
- en: 'Each `ion-menu` directive must have `[content]="content"` declared because
    it will use the content area to bind swipe left or right. In this case, it is
    basically a local variable in `ion-nav`, as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 `ion-menu` 指令都必须声明 `[content]="content"`，因为它将使用内容区域来绑定左右滑动。在这种情况下，它基本上是 `ion-nav`
    中的一个局部变量，如下所示：
- en: '[PRE38]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The use of `ion-toolbar` inside `ion-menu` is optional if you want to have
    the title for your menu. The key to having a menu item displayed is to use `ion-list`
    and `ion-item`. You can loop through an array to display the menu items dynamically,
    as illustrated:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要为菜单设置标题，`ion-menu` 内的 `ion-toolbar` 的使用是可选的。要显示菜单项的关键是使用 `ion-list` 和 `ion-item`。你可以通过循环数组来动态显示菜单项，如图所示：
- en: '[PRE39]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '`*ngFor` is a replacement for `ng-repeat` in Ionic 1\. You need to use `let
    p` because it''s the same as declaring a local variable named `p`. This is best
    practice for variable isolation. Otherwise, the concept is very similar to Ionic
    1, as you can grab `p.title` for each item in the `pages` array.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`*ngFor` 是在 Ionic 1 中 `ng-repeat` 的替代品。你需要使用 `let p`，因为它与声明一个名为 `p` 的局部变量相同。这是变量隔离的最佳实践。否则，其概念与
    Ionic 1 非常相似，你可以为 `pages` 数组中的每个项目获取 `p.title`。'
- en: 'On the right menu, instead of going to a different page via `nav.setRoot()`,
    you just set some text and dynamically display the text inside the menu, as shown:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在右侧菜单中，你不需要通过 `nav.setRoot()` 跳转到不同的页面，你只需设置一些文本，并在菜单中动态显示文本，如图所示：
- en: '[PRE40]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: So, if the `text` variable doesn't exist (which means that the user has not
    clicked on anything yet), the `ion-card` will not show anything via `*ngIf`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果 `text` 变量不存在（这意味着用户尚未点击任何内容），则 `ion-card` 将不会通过 `*ngIf` 显示任何内容。
- en: 'For each page, you have to declare the same `ion-navbar`. Otherwise, you will
    lose the top navigation and buttons to the menus:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个页面，你必须声明相同的 `ion-navbar`。否则，你将失去顶部导航和菜单按钮：
- en: '[PRE41]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Note that `leftMenu` and `rightMenu` must be the same `id` you used earlier,
    in the `app.html` template.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`leftMenu` 和 `rightMenu` 必须与你在 `app.html` 模板中使用的相同 `id`。
- en: 'On the first page, there are two buttons to trigger the menus from within the
    content page as well, as shown:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一页，还有两个按钮可以触发内容页内的菜单，如图所示：
- en: '[PRE42]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: These two buttons also call `menuToggle` to trigger the menu. The buttons are
    placed within the Ionic grid system. Since Ionic uses Flexbox, it is very simple
    to use—you just need to create `ion-col` and `ion-row`. The `width` property,
    with a number, will determine the width percentage.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个按钮同样调用 `menuToggle` 来触发菜单。按钮被放置在 Ionic 网格系统中。由于 Ionic 使用 Flexbox，使用起来非常简单——你只需要创建
    `ion-col` 和 `ion-row`。带有数字的 `width` 属性将决定宽度百分比。
- en: See also
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: 'For further usage of the Ionic menu, you can check out the following link:'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要进一步了解 Ionic 菜单的使用，你可以查看以下链接：
- en: '[http://ionicframework.com/docs/v2/components/#menus](http://ionicframework.com/docs/v2/components/#menus).'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://ionicframework.com/docs/v2/components/#menus](http://ionicframework.com/docs/v2/components/#menus).'
- en: 'The API documentation for the Ionic menu is also available at:'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ionic 菜单的 API 文档也可在以下地址找到：
- en: '[http://ionicframework.com/docs/v2/api/components/menu/Menu/](http://ionicframework.com/docs/v2/api/components/menu/Menu/).'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://ionicframework.com/docs/v2/api/components/menu/Menu/](http://ionicframework.com/docs/v2/api/components/menu/Menu/).'
- en: Navigating multiple pages with state parameters
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用状态参数导航多个页面
- en: App navigation is an important topic because it's at the core of a user's experience.
    You want to manage the user's expectation of what will happen after they submit
    a form or after they go to a new tab. In addition, you may want to ensure that
    the user data is available on the correct page or in the correct state. This could
    also get more complicated when the requirement of a back navigation is involved.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序导航是一个重要的话题，因为它是一个用户体验的核心。你希望管理用户在提交表单或打开新标签页后对会发生什么的预期。此外，你可能还想确保用户数据在正确的页面或正确的状态下可用。当涉及到返回导航的要求时，这可能会变得更加复杂。
- en: 'This section will teach you how to work with `NavController` and `NavParams`,
    which are the two important base classes to manage all navigation for the app.
    This is a screenshot of the app you will develop:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将教你如何使用 `NavController` 和 `NavParams`，这两个是管理应用所有导航的重要基类。这是你将开发的应用的截图：
- en: '![](img/c5a208d6-feb9-4bac-be69-714097e96b51.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c5a208d6-feb9-4bac-be69-714097e96b51.png)'
- en: This app has three different examples of how to navigate to a different page
    and how to
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用展示了三种不同的导航到不同页面以及如何
- en: pass parameters. When you click on any button, it will show the second page,
    which is
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 传递参数。当你点击任何按钮时，它将显示第二页，该页如下
- en: 'as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示：
- en: '![](img/a25881d9-955f-4e69-8fb4-37505926a447.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a25881d9-955f-4e69-8fb4-37505926a447.png)'
- en: The second page, basically, captures parameters and displays them on the screen.
    It also gives you three different options to navigate back to the previous page.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 第二页基本上是捕获参数并在屏幕上显示它们。它还提供了三个不同的选项来导航回上一页。
- en: 'In this example, you will learn the following:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，你将学习以下内容：
- en: How to use `NavController` and `NavParams`
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 `NavController` 和 `NavParams`
- en: How to use `[navPush]` and `[navParams]` directly in the template
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在模板中直接使用 `[navPush]` 和 `[navParams]`
- en: How to add two-way data binding in an input box
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在输入框中添加双向数据绑定
- en: How to use the pipe to convert a JSON object to a string and render it on the
    screen
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用管道将 JSON 对象转换为字符串并在屏幕上渲染
- en: Getting ready
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You only need to have the Ionic CLI available to run this app.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需要有可用的 Ionic CLI 来运行此应用。
- en: How to do it...
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Here are the instructions:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是说明：
- en: 'Create a new `Navigation` app using the blank template, as shown, and go into
    the `Navigation` folder:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用空白模板创建一个新的 `Navigation` 应用，如图所示，并进入 `Navigation` 文件夹：
- en: '[PRE43]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Edit `./src/app/app.module.ts` with the following code:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码编辑 `./src/app/app.module.ts`：
- en: '[PRE44]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The main reason you have to modify this file is to declare `OtherPage` as a
    dynamically loaded module via `NgModule`. You will have to declare `OtherPage`
    again in the `home.ts` file.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须修改此文件的主要原因是为了通过 `NgModule` 声明 `OtherPage` 为一个动态加载的模块。你将不得不在 `home.ts` 文件中再次声明
    `OtherPage`。
- en: 'Edit `./src/app/pages/home/home.html`:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `./src/app/pages/home/home.html`：
- en: '[PRE45]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Edit `./src/app/pages/home/home.ts` with the following code:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码编辑 `./src/app/pages/home/home.ts`：
- en: '[PRE46]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Create the `./src/app/pages/otherPage` folder
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `./src/app/pages/otherPage` 文件夹
- en: 'Create the `otherPage.html` file in the previously created `otherPage` folder:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在之前创建的 `otherPage` 文件夹中创建 `otherPage.html` 文件：
- en: '[PRE47]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'In the same folder, add `otherPage.ts` as well, with the following code:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一文件夹中，添加 `otherPage.ts`，代码如下：
- en: '[PRE48]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Go to your Terminal and run the app:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入你的终端并运行应用：
- en: '[PRE49]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'You can also generate new pages using Ionic CLI''s generate commands. For example,
    to generate a new page you can use the following ionic command: `ionic generate
    page pageName`. Here, `pageName` is the name of the new page.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用 Ionic CLI 的生成命令来生成新的页面。例如，要生成一个新页面，你可以使用以下 ionic 命令：`ionic generate page
    pageName`。在这里，`pageName` 是新页面的名称。
- en: You can not only generate pages but components, pipes, and many other things.
    Take a look at [https://ionicframework.com/docs/cli/generate/.](https://ionicframework.com/docs/cli/generate/)
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 你不仅可以生成页面，还可以生成组件、管道以及许多其他东西。请查看 [https://ionicframework.com/docs/cli/generate/](https://ionicframework.com/docs/cli/generate/)
- en: How it works...
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'At a high level, this is how the app is structured:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 从高层次来看，这是应用的架构：
- en: The app will Bootstrap via `app.ts` and load `home.html` as the `root` page
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用将通过 `app.ts` 启动并加载 `home.html` 作为 `root` 页面
- en: Everything in the `/home` folder is your first page
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/home` 文件夹中的所有内容都是你的第一页'
- en: Everything in the `/otherPage` folder is your second page
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/otherPage` 文件夹中的所有内容都是你的第二页'
- en: These two pages communicate using `NavParams` (or `navParams` from
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这两个页面使用 `NavParams`（或来自
- en: the template)
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: （模板））
- en: 'Let''s take a look at `home.ts`. You must import both `NavController` and `NavParams`:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 `home.ts`。你必须导入 `NavController` 和 `NavParams`：
- en: '[PRE50]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'For your constructor, you need to do a few things, which are as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 对于你的构造函数，你需要做一些事情，如下所示：
- en: '[PRE51]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The `this.navCtrl` variable will reference the imported `NavController`. You
    are supposed to bring it in like this in order to use the navigation feature internally.
    `myString` and `myJSON` are just variables that you will pass in the parameter
    to the second page. You also have to bring in the class for `OtherPage` and make
    it accessible to `navPush`, later in your template.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`this.navCtrl` 变量将引用导入的 `NavController`。你应该像这样将其引入，以便使用内部导航功能。`myString` 和
    `myJSON` 是你将传递给第二页参数的变量。你还需要在模板中稍后使 `OtherPage` 类可用，并使其对 `navPush` 可访问。'
- en: 'The `gotoOtherPage()` method, as shown, does one simple thing: it pushes the
    page to the current navigation:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如所示，`gotoOtherPage()` 方法做了一件事：将页面推送到当前导航：
- en: '[PRE52]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: By doing so, your app will switch to `OtherPage` right away, and this will also
    include the parameters.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做，你的应用将立即切换到 `OtherPage`，这也会包括参数。
- en: 'The `home.html` template for the first page demonstrates the following three
    scenarios:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 第一页（即 `home.html`）的 `home.html` 模板演示了以下三种情况：
- en: 'You can use `[navPush]` and `[navParams]` directly inside the template. You
    just need to pass the internal object of the class handling this page. So, in
    this case, you have to pass `otherPage` and not `OtherPage` (notice the uppercase
    `O`):'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以直接在模板中使用 `[navPush]` 和 `[navParams]`。你只需要传递处理此页面的类的内部对象。因此，在这种情况下，你必须传递 `otherPage`
    而不是 `OtherPage`（注意大写 `O`）：
- en: '[PRE53]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'You can also pass a JSON object as a param into `[navPush]`:'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你也可以将 JSON 对象作为参数传递给 `[navPush]`：
- en: '[PRE54]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The third scenario is to navigate to a new page manually, as shown, using a
    method implemented inside the page class:'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三种情况是手动导航到新页面，如下所示，使用页面类内部实现的方法：
- en: '[PRE55]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Unlike Angular 1 or Ionic 1, you cannot use `ng-model` to do two-way binding
    anymore. The new syntax will be `[(ngModel)]` for any input element instead.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Angular 1 或 Ionic 1 不同，你不能再使用 `ng-model` 进行双向绑定。新的语法将是任何输入元素的 `[(ngModel)]`。
- en: In your second page, you just need to make `NavController` and `NavParams` available
    in the class from the constructor.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的第二页中，你只需要从构造函数中使 `NavController` 和 `NavParams` 可用。
- en: 'Let''s take a look at your `otherPage.js` file:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看你的 `otherPage.js` 文件：
- en: '[PRE56]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The template for the second page (that is, `otherPage.html`) is very simple.
    First, the navigation bar on the top is to enable the default back button:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 第二页（即 `otherPage.html`）的模板非常简单。首先，顶部的导航栏是为了启用默认的返回按钮：
- en: '[PRE57]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The back button is an automatic mechanism in Ionic, so you don't have to worry
    about when it will be shown.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 返回按钮是 Ionic 中的自动机制，所以你不必担心它何时会显示。
- en: 'The following code will display the variable content if the state parameter
    exists:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将在存在状态参数的情况下显示变量内容：
- en: '[PRE58]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The `ion-card` leverages `*ngIf` to decide whether this DOM should be rendered
    or not. Since `params.data` could be a JSON object, you need to convert it to
    a string to display it on the screen. Angular 1 has filters, but Angular renamed
    this feature as pipes. However, the basic concept is the same. The `{{ params.data
    | json }}` code basically tells Angular to apply the `json` function to `params.data`
    and render the output.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`ion-card` 使用 `*ngIf` 来决定是否渲染此 DOM。由于 `params.data` 可能是一个 JSON 对象，你需要将其转换为字符串以在屏幕上显示。Angular
    1 有过滤器，但 Angular 将此功能重命名为管道。然而，基本概念是相同的。`{{ params.data | json }}` 代码基本上告诉 Angular
    将 `json` 函数应用于 `params.data` 并渲染输出。'
- en: 'You could go back to the previous page using the `nav.pop()` function, as shown:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `nav.pop()` 函数返回上一页，如下所示：
- en: '[PRE59]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Alternatively, you could go back using a directive `navPop` and put that inside
    your button, as shown:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以使用指令 `navPop` 返回，并将其放入你的按钮中，如下所示：
- en: '[PRE60]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: So, those are the possibilities within the Ionic navigation features.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这些都是 Ionic 导航功能中的可能性。
- en: See also
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: 'For more information, refer to the official Ionic documentation for `NavController`
    and `NavParams` at the following links:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请参阅以下链接中的官方 Ionic 文档，了解 `NavController` 和 `NavParams`：
- en: '[https://ionicframework.com/docs/api/navigation/NavController/](https://ionicframework.com/docs/api/navigation/NavController/)'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://ionicframework.com/docs/api/navigation/NavController/](https://ionicframework.com/docs/api/navigation/NavController/)'
- en: '[https://ionicframework.com/docs/api/navigation/NavParams/](https://ionicframework.com/docs/api/navigation/NavParams/)'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://ionicframework.com/docs/api/navigation/NavParams/](https://ionicframework.com/docs/api/navigation/NavParams/)'
- en: 'To read more about how Angular pipes work, you can review the following page
    for the previous example on JSON pipes at: [https://angular.io/api/common/JsonPipe](https://angular.io/api/common/JsonPipe)'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于Angular管道如何工作，您可以查看以下页面，了解关于JSON管道的先前示例：[https://angular.io/api/common/JsonPipe](https://angular.io/api/common/JsonPipe)
- en: Using menu, tabs, and segment together in an app
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在应用中同时使用菜单、标签页和分段
- en: 'In the previous examples, we used tabs and menu for the navigation. We used
    them in two different applications. But, sometimes, we might want to use both
    tabs and menu in a single application. In this example, we will use tabs, menu,
    and segment. The second page of the app will look something like the following
    screenshot:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们使用了标签页和菜单进行导航。我们在两个不同的应用中使用了它们。但是，有时我们可能想在单个应用中使用标签页和菜单。在这个示例中，我们将使用标签页、菜单和分段。应用的第二页将类似于以下截图：
- en: '![](img/29fdb8bb-932d-452d-8b85-0eead2935a75.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![](img/29fdb8bb-932d-452d-8b85-0eead2935a75.png)'
- en: If you take a closer look at the preceding screenshot, you will see that there
    is hamburger menu button, three tabs at the bottom, and two tabs like buttons
    just after the page title. These two buttons are actually called segment buttons.
    They are similar to tabs in UX, but they are very different in their workings.
    You will see later on in the code how they are different.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仔细查看前面的截图，您会看到有一个汉堡菜单按钮，底部有三个标签页，以及页面标题之后的两按钮。这两个按钮实际上是分段按钮。在UX中，它们与标签页相似，但在工作方式上非常不同。您将在后面的代码中看到它们是如何不同的。
- en: Getting ready
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need the Ionic CLI and a web browser to run this app.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此应用需要Ionic CLI和网页浏览器。
- en: How to do it...
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Here are the instructions to create example app:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 创建示例应用的说明如下：
- en: 'Create a new `MenuTabsSegment` app using the `tabs` template, as shown, and
    go into the `MenuTabsSegment` folder:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`tabs`模板创建一个新的`MenuTabsSegment`应用，如图所示，并进入`MenuTabsSegment`文件夹：
- en: '[PRE61]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Edit `./src/app/app.html` with the following code:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码编辑`./src/app/app.html`：
- en: '[PRE62]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Edit `./src/app/pages/about/about.ts` with the following code:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码编辑`./src/app/pages/about/about.ts`：
- en: '[PRE63]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Edit `./src/app/pages/about/about.html` with the following code:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码编辑`./src/app/pages/about/about.html`：
- en: '[PRE64]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: How it works...
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'So far, we have used both menu and tabs, but in different applications. In
    this example, we are using both of them in a single application. Let''s take a
    look at our `app.html` again:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用了菜单和标签页，但它们在不同的应用中使用。在这个示例中，我们在单个应用中同时使用它们。让我们再次查看我们的`app.html`：
- en: '[PRE65]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'You will notice that we are using `ion-menu` to show a menu. We are also initializing
    Ionic navigation with `rootPage`. If you check `app.component.ts`, you will see
    that we are initializing `rootPage` to be equal to `TabsPage`, as shown here:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到我们正在使用`ion-menu`来显示菜单。我们还使用`rootPage`初始化Ionic导航。如果您检查`app.component.ts`，您会看到我们将`rootPage`初始化为等于`TabsPage`，如下所示：
- en: '[PRE66]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'This is the key to using both a side menu and tabs on a single page:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用单页面上同时使用侧边菜单和标签页的关键：
- en: 'Furthermore, we have added a segment on the second page of our application
    in `about.html`. The reason why I used segment alongside menu and tabs is that
    segment is very similar to tabs in terms of user experience. The user clicks on
    it and they see a different view/content, based on segment. But it is very much
    different from the tabs in Ionic. See the code following fragment from `about.html`:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们在`about.html`的应用第二页添加了一个分段。我之所以在菜单和标签页旁边使用分段，是因为分段在用户体验方面与标签页非常相似。用户点击它，会根据分段看到不同的视图/内容。但在Ionic中，它与标签页有很大不同。请看以下`about.html`的代码片段：
- en: '[PRE67]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'The preceding HTML code is for rendering the `segment` container and `segment`
    buttons. We link the segment with a `seg` property in our `AboutPage` class via
    `ngModel`. When the user clicks on any segment button, the property `seg` is initialized
    to the value of the segment button. In this example, the `seg` property can have
    a value of `flame` or `leaf`. Based on that value, we show content to the user
    in the other fragment of `about.html`, as shown in the following code block:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 上述HTML代码用于渲染`segment`容器和`segment`按钮。我们通过`ngModel`在`AboutPage`类中使用`seg`属性将分段与`AboutPage`关联起来。当用户点击任何分段按钮时，`seg`属性初始化为分段按钮的值。在这个例子中，`seg`属性可以具有`flame`或`leaf`的值。根据这个值，我们在`about.html`的其他部分向用户展示内容，如下面的代码块所示：
- en: '[PRE68]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'You should also keep in mind that when you load the `AboutPage`, the value
    of the `seg` property will be undefined. So, in order to make a default selection,
    we have to initialize the value of the `seg` property in `About.ts`, as shown
    here:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该记住，当你加载 `AboutPage` 时，`seg` 属性的值将是未定义的。因此，为了进行默认选择，我们必须在 `About.ts` 中初始化
    `seg` 属性的值，如下所示：
- en: '[PRE69]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: See also
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: Take a look at Ionic's MenuController documentation at [https://ionicframework.com/docs/api/components/app/MenuController/](https://ionicframework.com/docs/api/components/app/MenuController/).
    It has really good examples of how you can use multiple menus in the same app.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 查看Ionic的MenuController文档[https://ionicframework.com/docs/api/components/app/MenuController/](https://ionicframework.com/docs/api/components/app/MenuController/)。它有很好的示例说明如何在同一个应用中使用多个菜单。
- en: Using the Ionic grid to create a complex UI
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Ionic 网格创建复杂 UI
- en: 'Since this chapter is about Ionic components, I will mention that one of my
    favorite components is the Ionic grid—a really useful component to lay out your
    application. Based on Flexbox, it is very similar to Bootstrap''s grid. The documentation
    on the Ionic grid says:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本章是关于 Ionic 组件的，我将提到我最喜欢的组件之一是 Ionic 网格——一个非常有用的组件来布局你的应用。基于 Flexbox，它与 Bootstrap
    的网格非常相似。Ionic 网格的文档说明：
- en: '"The grid is composed of three units—a grid, row(s) and column(s). Columns
    will expand to fill their row and will resize to fit additional columns. It is
    based on a 12 column layout with different breakpoints based on the screen size.
    The number of columns and breakpoints can be fully customized using Sass."'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: “网格由三个单元组成——网格、行和列。列将扩展以填充其行，并调整大小以适应额外的列。它基于一个 12 列布局，具有基于屏幕大小的不同断点。列数和断点可以完全使用
    Sass 进行自定义。”
- en: 'We will create a complex UI structure with very minimal code. The app will
    look like the following image:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用非常少的代码创建一个复杂的 UI 结构。应用看起来如下所示：
- en: '![](img/28e719f7-2d1a-4eed-8c67-6f6c5eb3ebf4.png)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/28e719f7-2d1a-4eed-8c67-6f6c5eb3ebf4.png)'
- en: Getting ready
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Just like the previous examples, you just need the Ionic CLI to work on and
    run this example app.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 就像之前的示例一样，你只需要使用 Ionic CLI 来操作和运行这个示例应用。
- en: How to do it...
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Here are the instructions to create the example app:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是创建示例应用的说明：
- en: 'Create a new `IonicGrid` app using the `blank` template, as shown, and go into
    the `IonicGrid` folder:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `blank` 模板创建一个新的 `IonicGrid` 应用，如图所示，然后进入 `IonicGrid` 文件夹：
- en: '[PRE70]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Edit `./src/app/pages/home.ts` with the following code:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '使用以下代码编辑 `./src/app/pages/home.ts`:'
- en: '[PRE71]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Edit `./src/app/pages/home/home.html` with the following code:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '使用以下代码编辑 `./src/app/pages/home/home.html`:'
- en: '[PRE72]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Edit `./src/app/pages/home/home.scss` with the following code:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '使用以下代码编辑 `./src/app/pages/home/home.scss`:'
- en: '[PRE73]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: How it works...
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In the Ionic grid, there are three types of components. The first is `ion-grid`,
    the second is `ion-row`, and the third is `ion-col`. `ion-grid` acts as a container
    for `ion-row` and `ion-col`. It takes the full width of the parent. `ion-row`
    is for creating rows in the grid. It takes the full width of `ion-grid`. `ion-col`
    is used to create a column inside `ion-row`. As I said in the chapter earlier,
    it is a 12-column grid. So, you can have a maximum of twelve columns in a row,
    without having a line break.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ionic 网格中，有三种类型的组件。第一种是 `ion-grid`，第二种是 `ion-row`，第三种是 `ion-col`。`ion-grid`
    作为 `ion-row` 和 `ion-col` 的容器。它占据父容器的全部宽度。`ion-row` 用于在网格中创建行。它占据 `ion-grid` 的全部宽度。`ion-col`
    用于在 `ion-row` 内部创建列。正如我在前面的章节中提到的，它是一个 12 列网格。因此，在一行中你可以有最多十二列，而不需要换行。
- en: Now, let's understand how we structured our example.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们了解我们如何构建我们的示例。
- en: Our `home.html` page is a kind of profile page for a dummy social network site.
    We have an avatar of the user, their location, name, various contact icons, and
    then the social feed.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `home.html` 页面是一个模拟社交网站的个人资料页面。我们有一个用户头像，他们的位置，姓名，各种联系图标，然后是社交动态。
- en: 'This is how the avatar and location of the user look inside the app:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是用户头像和位置在应用中的样子：
- en: '![](img/3cd6104f-6405-423e-9dfa-8d0562165eac.png)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3cd6104f-6405-423e-9dfa-8d0562165eac.png)'
- en: 'The following is the code for this:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这个的代码：
- en: '[PRE74]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: It is very straightforward. We have a row with one column. That column has an
    avatar and the location of the user. Note that we have saved the avatar image
    in the `assets/img` folder.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 非常简单。我们有一行，一行中有一个列。那个列包含用户头像和位置。请注意，我们已经将头像图片保存在 `assets/img` 文件夹中。
- en: 'Next is the contact icons. They look like the following in our app:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是联系图标。在我们的应用中，它们看起来如下：
- en: '![](img/dc08478b-6768-4022-91fd-3d84a8c71b61.png)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dc08478b-6768-4022-91fd-3d84a8c71b61.png)'
- en: '[PRE75]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: This is also straightforward. But the thing that we learn from this example
    is that if you have multiple `ion-col` inside `ion-row`, the Ionic grid automatically
    divides the width equally between each `ion-col`. This is because `ion-row` is
    a flex parent and `ion-col` are flex children.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 这也很直接。但从这个例子中我们学到的是，如果你在 `ion-row` 内部有多个 `ion-col`，Ionic 网格会自动将宽度平均分配给每个 `ion-col`。这是因为
    `ion-row` 是一个弹性父元素，而 `ion-col` 是弹性子元素。
- en: 'Finally, we have the social feed, which looks like the following:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有了社交动态，其外观如下：
- en: '![](img/0859f18f-4529-4178-a6f5-39a59ef0a523.png)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0859f18f-4529-4178-a6f5-39a59ef0a523.png)'
- en: 'The code for the social feed is as follows:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 社交动态的代码如下：
- en: '[PRE76]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'There are three things to learn from this example:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个例子中我们可以学到三件事：
- en: You can force the width of `col` using the `col-width*` attribute. We replace
    the `width*` with a value from 1-12 and that column will take only `width*/12`
    of the space in the `ion-row`.
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以使用 `col-width*` 属性强制设置 `col` 的宽度。我们将 `width*` 替换为 1-12 之间的一个值，那么这个列将只占据 `ion-row`
    空间的 `width*/12`。
- en: We can nest `ion-row` inside `ion-col`, and so on. You will notice that we have
    an `ion-col` that takes 10/12 of the width of `ion-row`. Inside that `ion-column`,
    we have a child `ion-row` element, which shows the user's post, and one more `ion-row`
    to show three icons for social sharing and interaction.
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在 `ion-col` 内部嵌套 `ion-row`，依此类推。你会注意到我们有一个占据 `ion-row` 宽度的 10/12 的 `ion-col`。在这个
    `ion-column` 内部，我们有一个子 `ion-row` 元素，显示用户的帖子，还有一个 `ion-row` 来显示三个用于社交分享和互动的图标。
- en: Each child `ion-row` will take the full width of its `ion-col` parent.
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个子元素 `ion-row` 将占据其 `ion-col` 父元素的完整宽度。
- en: 'The following image shows this structure with an explanation:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图片展示了这个结构及其说明：
- en: '![](img/969a072e-4e9e-4958-b3a0-1276ceaa4e4e.png)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969a072e-4e9e-4958-b3a0-1276ceaa4e4e.png)'
- en: See also
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: 'For more information about the Ionic grid, take a look at the Ionic documentation
    at: [https://ionicframework.com/docs/api/components/grid/Grid/](https://ionicframework.com/docs/api/components/grid/Grid/).'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 想了解更多关于 Ionic 网格的信息，请查看 Ionic 文档：[https://ionicframework.com/docs/api/components/grid/Grid/](https://ionicframework.com/docs/api/components/grid/Grid/)。
- en: 'If you want to see how Flexbox works in general, take a look at this very good
    introduction to it at: [https://css-tricks.com/snippets/css/a-guide-to-flexbox/](https://css-tricks.com/snippets/css/a-guide-to-flexbox/).'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想了解 Flexbox 的工作原理，请查看这个非常好的介绍：[https://css-tricks.com/snippets/css/a-guide-to-flexbox/](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)。
