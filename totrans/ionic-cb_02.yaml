- en: Adding Ionic Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following tasks related to using Ionic components:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Adding multiple pages using tabs
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding left and right menu navigation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigating multiple pages with state parameters
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using menu, tags, and segment together in an app
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Ionic grid to create a complex UI
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's possible to write a simple app with a handful of pages. Ionic provides
    a lot of out-of-the-box components that allow simple plug and play operations.
    When an app grows, managing different views and their custom data at a specific
    time or triggered event can be very complex. Ionic comes with some changes to
    the handling of state and navigation. In Ionic 1, you could use UI-Router for
    advanced routing management mechanisms. In Ionic, `NavController` enables the
    push/pop implementation of the navigation.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Since Ionic introduces many new components, you have to understand how these
    components impact on your app's state hierarchy and when each state is triggered.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Adding multiple pages using tabs
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will explain how to work with the Ionic tab interface and expand
    it to other use cases. The example used is very basic, with three tabs and some
    sample Ionic components in each tab. This is a very common structure that you
    will find in many apps. You will learn how Ionic structures the tab interface
    and how it translates to individual folders and files.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, you will build three tabs, as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: A tab showing a simple text-only page to explain where to place the components
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A tab showing a signup form
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A tab showing a horizontal slider box
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although the app is very straightforward, it will teach you a lot of key concepts
    in Angular and Ionic. Some of them are the component decorators, themes, and the
    TypeScript compiler process.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a screenshot of the example app with the middle tab selected:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '`![](img/2e7600d3-4b95-4510-aaef-93f904a575b9.png)`'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since this is the first app you are building from scratch, you need to ensure
    that you have followed through [Chapter 1](20b1308f-b7ed-4c5b-9a16-b05600ee41bc.xhtml),
    *Creating Our First App with Ionic*, to set up the environment and Ionic CLI.
    If you already had Ionic 1, it must be updated. For this, you can use the same
    command line as was used to install it, which is as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the instructions to create example app:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `PagesAndTabs` app using the `tabs` template and go into the `PagesAndTabs`
    folder to start Visual Studio Code, as shown:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `blank` template only gives you a basic page. Open the `Finder` app in
    Mac or Windows Explorer in Windows to see the following folder structure:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ee8602dc-b8c1-4a93-b348-955428c1da1b.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
- en: You will only modify what is in the `/src` folder and not `/www`, as in Ionic
    1\. Everything in the `/src` folder will be built and the `/www` folder will be
    created automatically. We will also reserve the folder names and filenames as
    much as possible, since the main goal here is to understand how the tab template
    works and the areas you can modify.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Open and edit the `/src/pages/tabs/tabs.html` template file with the
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'following code:'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The new template only updates the title and icons. This is because this example
    wants to reserve the naming of the tab `root` variables. You could add more tabs
    using `<ion-tab>`, as needed.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a page, you need to ensure that `tab1Root` points to an existing folder
    and template. Since you will reuse the existing tab structure, you can just modify
    the `/src/pages/home/home.html` template, as shown, as this is your first page:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Also, in the same `/home` folder, edit `home.ts`, which corresponds to the
    same template, and enter the code here:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For the second page, `tab2Root`, you will follow a similar process by editing
    the `/src/pages/about/about.html` template as shown:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Edit `about.ts` in the same folder as in the preceding step:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Finally, for the `tab3Root` page, you can change the template so that it will
    show a slider in `/src/pages/contact/contact.html`, as follows:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the `/contact` folder, you need to edit `contact.ts` with the following
    code:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Go to your Terminal and type the following command line to run the app:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works...
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is actually a lot of new information and a lot of concepts in this simple
    app. At a higher level, this is how the app is structured:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: When you run the app, Cordova loads the `/www/index.html` file to open first.
    All of your code and templates are combined into one file, `/www/build/main.js`.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `/app` folder is where most of your logic belongs. It starts with `app.component.ts`
    as the Bootstrap file.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each subfolder under the `/pages` folder will represent a page, which is a new
    concept in Ionic. A page consists of an HTML template, TypeScript code, and an
    `.scss` file to customize that specific template only.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `/theme` folder will contain variables and customizations at a global level
    to override the default theme from Ionic.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's start with everything inside the `/app` folder.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: 'The `app.component.ts` file only imports all the required pages and components
    to start the app. This example needs the following four imports by default:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You must always import `Component`, `Platform`, and `StatusBar` from Ionic,
    because that will give you the `@Component` decorator to Bootstrap your app. A
    decorator is placed in front of its class to provide metadata for the class. The
    following example shows that the `MyApp` class has the characteristics of a component
    with a `template` property:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Since this is a simple example, you don''t need to declare much except the
    template information. Similar to Ionic 1, you can use either `template` or `templateUrl`
    to point to a local file. In our case, it is `app.html` and it has the following
    content:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Classes are another new concept in ES6\. However, developers have been declaring
    classes in various programming languages, such as Java and C#. In ES6, you can
    use classes to be able to efficiently reuse code with better abstraction. A class
    could exist within that file context only. Consider the following example:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'However, if you want to use that class somewhere else, you have to export:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In a class, you can have the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: A variable, such as `this.a` or `this.b`
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A method, such as `doSomething()`
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A constructor that automatically executes (or initializes) when an object is
    created using the class
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More information about classes can be found at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: 'Another nice thing about ES6 is the arrow function, as shown:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The preceding is the same as:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'An example (by passing a parameter) is as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The same code can be rewritten as shown:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'More information about the arrow function can be found at:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions).'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: One important thing in `app.component.ts` is that you must declare a `root`
    page. You can see that from the template via `[root]="rootPage"`, and then again
    in the constructor via `this.rootPage = TabsPage`. The square brackets, `[]`,
    around `root` mean that it's a property of that DOM node. This is a new concept
    from Angular as it's trying to get rid of using a DOM property, such as `ngmodel`
    (which tends to result in lower performance). The assignment here is to tell Ionic
    2 that you will use `TabsPage`, which was imported earlier, and assign that as
    a `root` page. Then, the `ion-nav` directive will look at its own `root` property
    to start rendering the page. There seem to be a lot of abstractions and boilerplate
    compared to Ionic 1\. However, this practice is recommended to ensure better separation
    and scaling.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you understand how `app.component.ts` works, it''s easier to grasp the
    concepts from the other pages. Let''s take a look at the `/pages/tabs/tabs.ts`
    file, because that''s where you define the `TabsPage` class. From this file, you
    need to import three other pages, which are the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The template for this page is in `tabs.html`. However, you could also put the
    template in a string inside the `.ts` file, as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: ES6 also introduces a new feature, called a multiline template string. You probably
    realize that the preceding template string does not have any `join()` or string
    combine (`+`) operators. The reason is that you can use back-tick (`` ` `` ``
    ` ``) to allow a multiline template.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'So, instead of doing this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You can now do this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Below the page decorator, you need to export `TabsPage` (so that you can use
    it in `app.component.ts`) and tell the constructor to use `tab1Root`, `tab2Root`,
    and `tab3Root` as the roots for other pages in the tab navigation, as shown:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Ionic tab declaration is very similar to Ionic 1, shown as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: You just have to make sure that the `root` property is pointing to another page.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '`tab1Root` is actually very simple to understand, because it''s a text page
    where you add your own content and design within the `<ion-content>` element,
    as shown:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If you want to change the title, you can simply change the following line:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '`tab2Root` and `tab3Root` are very similar in terms of how they are structured.
    Ionic gives you the convenience of binding to an event right in the `AboutPage`
    class, as shown:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In the preceding example from `about.ts`, if the user enters `tab2Root`, it
    will call the `ionViewWillEnter()` function automatically. This is a significant
    improvement because, in Ionic 1, you had to use `$ionicView.enter` on the `$scope`
    variable. Again, the concept of `$scope` no longer exists in Angular.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: For a scalable app, it's better to separate templates into different files and
    avoid co-mingling templates inside the JavaScript code. `templateUrl` must always
    point to the relative location of the `.html` file.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: 'In `./src/pages/contact/contact.html`, you can use the slider box and bind
    to slide the change event, as shown:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: To get an event in Angular (or Ionic), you have to use parentheses, `( )`, because
    the concept of `ng-click` or similar is no longer available. In this case, if
    the slide is changed based on `ionSlideDidChange`, the `ion-slides` directive
    will trigger the `onSlideChanged()` function in the `ContactPage` class.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: You cannot really run the TypeScript directly without having TypeScript to transpile
    the code into JavaScript. This process happens automatically behind the scenes
    when you run `ionic serve`. Also, when you change some code in the project, Ionic
    will detect those changes and rebuild the files before updating the browser. There
    is no need to hit refresh every time.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Mozilla Developer Network has very extensive documentation on ECMAScript
    6, which you can find at the following link: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla](https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla).'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For Angular 2-specific information, you can read directly from the Angular 2
    documentation at [https://angular.io/docs/ts/latest/index.html](https://angular.io/docs/ts/latest/index.html).
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding left and right menu navigation
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Menu navigation is a very common component in many mobile apps. You can use
    the menu to allow users to change to different pages in the app, including login
    and logout. The menu could be placed on the left or right of the app. Ionic also
    lets you detect events and further customize the menu's look and feel.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a screenshot of the app you will develop:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5a13886d-c553-468a-b09f-4ae07792b691.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
- en: The app will have two pages and two menus. You can toggle either the left or
    right menu (but not both at the same time). In reality, it is much less likely
    that you will have both menus, but for the purposes of demonstration, this app
    will include both menus as the app will show the different properties of the menus
    that you can set. The left menu will change the page and the right menu will allow
    you to capture the exact item that is clicked on.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This app can run on your web browser, so there is no need to have a physical
    device available. Again, you only need to have Ionic available on your computer.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the instructions to create example app:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `LeftRightMenu` app using the `sidemenu` template, as shown, and
    go to the `LeftRightMenu` folder:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Check that your app folder structure is similar to the following:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/eb073147-0ce7-4f20-bc3d-e816948c1896.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
- en: 'Edit `./src/app/app.component.ts` and replace it with the following code:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Open and edit the`./src/app/app.html` file with the following code:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: There are two menus as siblings in this template. They are also at the same
    level as `ion-nav` and not a parent or child. This structure is important for
    menu navigation to work.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s create two pages, for which you only have to modify the standard
    pages from the `sidemenu` template. Open and edit the `./src/app/pages/home/home.html`
    template:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In the same folder, open and edit the `.css` classes via `home.scss`, as shown:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Note that since you're using the `sidemenu` template, it already comes with
    a second page (for example, list). There is no need to modify that page in this
    specific example.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: 'Open and edit the template for the second page at `./src/pages/list/list.html`,
    as shown:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Go to your Terminal and run the app:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: How it works...
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since this app is just an introduction to menu navigation, it will not manage
    page routing and state parameters. At a higher level, this is how the app flows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '`app.ts` loads both of the `menu` templates in `app.html`.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The left menu will trigger the `openPage()` function to open `PageTwo`.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The right menu will trigger the `rightMenuClick()` function to change the `this.text`
    property and be displayed on the screen.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the `app.html` template, the left menu has the following properties:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'However, the right menu has the following assigned instead:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The `side` property will determine where on the screen the menu should show.
    There are two types of menus. The `overlay` option will leave the center page
    as it is, without moving. The `reveal` option will push the entire screen to show
    the menu. Which type you pick depends on the design of your app.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: 'Each `ion-menu` directive must have `[content]="content"` declared because
    it will use the content area to bind swipe left or right. In this case, it is
    basically a local variable in `ion-nav`, as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The use of `ion-toolbar` inside `ion-menu` is optional if you want to have
    the title for your menu. The key to having a menu item displayed is to use `ion-list`
    and `ion-item`. You can loop through an array to display the menu items dynamically,
    as illustrated:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '`*ngFor` is a replacement for `ng-repeat` in Ionic 1\. You need to use `let
    p` because it''s the same as declaring a local variable named `p`. This is best
    practice for variable isolation. Otherwise, the concept is very similar to Ionic
    1, as you can grab `p.title` for each item in the `pages` array.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'On the right menu, instead of going to a different page via `nav.setRoot()`,
    you just set some text and dynamically display the text inside the menu, as shown:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: So, if the `text` variable doesn't exist (which means that the user has not
    clicked on anything yet), the `ion-card` will not show anything via `*ngIf`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: 'For each page, you have to declare the same `ion-navbar`. Otherwise, you will
    lose the top navigation and buttons to the menus:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Note that `leftMenu` and `rightMenu` must be the same `id` you used earlier,
    in the `app.html` template.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: 'On the first page, there are two buttons to trigger the menus from within the
    content page as well, as shown:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: These two buttons also call `menuToggle` to trigger the menu. The buttons are
    placed within the Ionic grid system. Since Ionic uses Flexbox, it is very simple
    to use—you just need to create `ion-col` and `ion-row`. The `width` property,
    with a number, will determine the width percentage.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For further usage of the Ionic menu, you can check out the following link:'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://ionicframework.com/docs/v2/components/#menus](http://ionicframework.com/docs/v2/components/#menus).'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The API documentation for the Ionic menu is also available at:'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://ionicframework.com/docs/v2/api/components/menu/Menu/](http://ionicframework.com/docs/v2/api/components/menu/Menu/).'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Navigating multiple pages with state parameters
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: App navigation is an important topic because it's at the core of a user's experience.
    You want to manage the user's expectation of what will happen after they submit
    a form or after they go to a new tab. In addition, you may want to ensure that
    the user data is available on the correct page or in the correct state. This could
    also get more complicated when the requirement of a back navigation is involved.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: 'This section will teach you how to work with `NavController` and `NavParams`,
    which are the two important base classes to manage all navigation for the app.
    This is a screenshot of the app you will develop:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c5a208d6-feb9-4bac-be69-714097e96b51.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
- en: This app has three different examples of how to navigate to a different page
    and how to
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: pass parameters. When you click on any button, it will show the second page,
    which is
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: 'as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a25881d9-955f-4e69-8fb4-37505926a447.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
- en: The second page, basically, captures parameters and displays them on the screen.
    It also gives you three different options to navigate back to the previous page.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, you will learn the following:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: How to use `NavController` and `NavParams`
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use `[navPush]` and `[navParams]` directly in the template
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to add two-way data binding in an input box
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the pipe to convert a JSON object to a string and render it on the
    screen
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You only need to have the Ionic CLI available to run this app.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the instructions:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `Navigation` app using the blank template, as shown, and go into
    the `Navigation` folder:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Edit `./src/app/app.module.ts` with the following code:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: The main reason you have to modify this file is to declare `OtherPage` as a
    dynamically loaded module via `NgModule`. You will have to declare `OtherPage`
    again in the `home.ts` file.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `./src/app/pages/home/home.html`:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Edit `./src/app/pages/home/home.ts` with the following code:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Create the `./src/app/pages/otherPage` folder
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `otherPage.html` file in the previously created `otherPage` folder:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'In the same folder, add `otherPage.ts` as well, with the following code:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Go to your Terminal and run the app:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'You can also generate new pages using Ionic CLI''s generate commands. For example,
    to generate a new page you can use the following ionic command: `ionic generate
    page pageName`. Here, `pageName` is the name of the new page.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: You can not only generate pages but components, pipes, and many other things.
    Take a look at [https://ionicframework.com/docs/cli/generate/.](https://ionicframework.com/docs/cli/generate/)
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At a high level, this is how the app is structured:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: The app will Bootstrap via `app.ts` and load `home.html` as the `root` page
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Everything in the `/home` folder is your first page
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Everything in the `/otherPage` folder is your second page
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These two pages communicate using `NavParams` (or `navParams` from
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the template)
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s take a look at `home.ts`. You must import both `NavController` and `NavParams`:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'For your constructor, you need to do a few things, which are as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The `this.navCtrl` variable will reference the imported `NavController`. You
    are supposed to bring it in like this in order to use the navigation feature internally.
    `myString` and `myJSON` are just variables that you will pass in the parameter
    to the second page. You also have to bring in the class for `OtherPage` and make
    it accessible to `navPush`, later in your template.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: 'The `gotoOtherPage()` method, as shown, does one simple thing: it pushes the
    page to the current navigation:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: By doing so, your app will switch to `OtherPage` right away, and this will also
    include the parameters.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: 'The `home.html` template for the first page demonstrates the following three
    scenarios:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use `[navPush]` and `[navParams]` directly inside the template. You
    just need to pass the internal object of the class handling this page. So, in
    this case, you have to pass `otherPage` and not `OtherPage` (notice the uppercase
    `O`):'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'You can also pass a JSON object as a param into `[navPush]`:'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The third scenario is to navigate to a new page manually, as shown, using a
    method implemented inside the page class:'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Unlike Angular 1 or Ionic 1, you cannot use `ng-model` to do two-way binding
    anymore. The new syntax will be `[(ngModel)]` for any input element instead.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: In your second page, you just need to make `NavController` and `NavParams` available
    in the class from the constructor.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at your `otherPage.js` file:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The template for the second page (that is, `otherPage.html`) is very simple.
    First, the navigation bar on the top is to enable the default back button:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The back button is an automatic mechanism in Ionic, so you don't have to worry
    about when it will be shown.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code will display the variable content if the state parameter
    exists:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The `ion-card` leverages `*ngIf` to decide whether this DOM should be rendered
    or not. Since `params.data` could be a JSON object, you need to convert it to
    a string to display it on the screen. Angular 1 has filters, but Angular renamed
    this feature as pipes. However, the basic concept is the same. The `{{ params.data
    | json }}` code basically tells Angular to apply the `json` function to `params.data`
    and render the output.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: 'You could go back to the previous page using the `nav.pop()` function, as shown:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Alternatively, you could go back using a directive `navPop` and put that inside
    your button, as shown:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: So, those are the possibilities within the Ionic navigation features.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information, refer to the official Ionic documentation for `NavController`
    and `NavParams` at the following links:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '[https://ionicframework.com/docs/api/navigation/NavController/](https://ionicframework.com/docs/api/navigation/NavController/)'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://ionicframework.com/docs/api/navigation/NavParams/](https://ionicframework.com/docs/api/navigation/NavParams/)'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To read more about how Angular pipes work, you can review the following page
    for the previous example on JSON pipes at: [https://angular.io/api/common/JsonPipe](https://angular.io/api/common/JsonPipe)'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: Using menu, tabs, and segment together in an app
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous examples, we used tabs and menu for the navigation. We used
    them in two different applications. But, sometimes, we might want to use both
    tabs and menu in a single application. In this example, we will use tabs, menu,
    and segment. The second page of the app will look something like the following
    screenshot:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/29fdb8bb-932d-452d-8b85-0eead2935a75.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
- en: If you take a closer look at the preceding screenshot, you will see that there
    is hamburger menu button, three tabs at the bottom, and two tabs like buttons
    just after the page title. These two buttons are actually called segment buttons.
    They are similar to tabs in UX, but they are very different in their workings.
    You will see later on in the code how they are different.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You need the Ionic CLI and a web browser to run this app.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the instructions to create example app:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `MenuTabsSegment` app using the `tabs` template, as shown, and
    go into the `MenuTabsSegment` folder:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Edit `./src/app/app.html` with the following code:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Edit `./src/app/pages/about/about.ts` with the following code:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Edit `./src/app/pages/about/about.html` with the following code:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: How it works...
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we have used both menu and tabs, but in different applications. In
    this example, we are using both of them in a single application. Let''s take a
    look at our `app.html` again:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'You will notice that we are using `ion-menu` to show a menu. We are also initializing
    Ionic navigation with `rootPage`. If you check `app.component.ts`, you will see
    that we are initializing `rootPage` to be equal to `TabsPage`, as shown here:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'This is the key to using both a side menu and tabs on a single page:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: 'Furthermore, we have added a segment on the second page of our application
    in `about.html`. The reason why I used segment alongside menu and tabs is that
    segment is very similar to tabs in terms of user experience. The user clicks on
    it and they see a different view/content, based on segment. But it is very much
    different from the tabs in Ionic. See the code following fragment from `about.html`:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'The preceding HTML code is for rendering the `segment` container and `segment`
    buttons. We link the segment with a `seg` property in our `AboutPage` class via
    `ngModel`. When the user clicks on any segment button, the property `seg` is initialized
    to the value of the segment button. In this example, the `seg` property can have
    a value of `flame` or `leaf`. Based on that value, we show content to the user
    in the other fragment of `about.html`, as shown in the following code block:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'You should also keep in mind that when you load the `AboutPage`, the value
    of the `seg` property will be undefined. So, in order to make a default selection,
    we have to initialize the value of the `seg` property in `About.ts`, as shown
    here:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: See also
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Take a look at Ionic's MenuController documentation at [https://ionicframework.com/docs/api/components/app/MenuController/](https://ionicframework.com/docs/api/components/app/MenuController/).
    It has really good examples of how you can use multiple menus in the same app.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: Using the Ionic grid to create a complex UI
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since this chapter is about Ionic components, I will mention that one of my
    favorite components is the Ionic grid—a really useful component to lay out your
    application. Based on Flexbox, it is very similar to Bootstrap''s grid. The documentation
    on the Ionic grid says:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '"The grid is composed of three units—a grid, row(s) and column(s). Columns
    will expand to fill their row and will resize to fit additional columns. It is
    based on a 12 column layout with different breakpoints based on the screen size.
    The number of columns and breakpoints can be fully customized using Sass."'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a complex UI structure with very minimal code. The app will
    look like the following image:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/28e719f7-2d1a-4eed-8c67-6f6c5eb3ebf4.png)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like the previous examples, you just need the Ionic CLI to work on and
    run this example app.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the instructions to create the example app:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `IonicGrid` app using the `blank` template, as shown, and go into
    the `IonicGrid` folder:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Edit `./src/app/pages/home.ts` with the following code:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Edit `./src/app/pages/home/home.html` with the following code:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Edit `./src/app/pages/home/home.scss` with the following code:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: How it works...
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the Ionic grid, there are three types of components. The first is `ion-grid`,
    the second is `ion-row`, and the third is `ion-col`. `ion-grid` acts as a container
    for `ion-row` and `ion-col`. It takes the full width of the parent. `ion-row`
    is for creating rows in the grid. It takes the full width of `ion-grid`. `ion-col`
    is used to create a column inside `ion-row`. As I said in the chapter earlier,
    it is a 12-column grid. So, you can have a maximum of twelve columns in a row,
    without having a line break.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's understand how we structured our example.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: Our `home.html` page is a kind of profile page for a dummy social network site.
    We have an avatar of the user, their location, name, various contact icons, and
    then the social feed.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how the avatar and location of the user look inside the app:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3cd6104f-6405-423e-9dfa-8d0562165eac.png)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
- en: 'The following is the code for this:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: It is very straightforward. We have a row with one column. That column has an
    avatar and the location of the user. Note that we have saved the avatar image
    in the `assets/img` folder.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: 'Next is the contact icons. They look like the following in our app:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc08478b-6768-4022-91fd-3d84a8c71b61.png)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
- en: '[PRE75]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: This is also straightforward. But the thing that we learn from this example
    is that if you have multiple `ion-col` inside `ion-row`, the Ionic grid automatically
    divides the width equally between each `ion-col`. This is because `ion-row` is
    a flex parent and `ion-col` are flex children.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 这也很直接。但从这个例子中我们学到的是，如果你在 `ion-row` 内部有多个 `ion-col`，Ionic 网格会自动将宽度平均分配给每个 `ion-col`。这是因为
    `ion-row` 是一个弹性父元素，而 `ion-col` 是弹性子元素。
- en: 'Finally, we have the social feed, which looks like the following:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有了社交动态，其外观如下：
- en: '![](img/0859f18f-4529-4178-a6f5-39a59ef0a523.png)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0859f18f-4529-4178-a6f5-39a59ef0a523.png)'
- en: 'The code for the social feed is as follows:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 社交动态的代码如下：
- en: '[PRE76]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'There are three things to learn from this example:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个例子中我们可以学到三件事：
- en: You can force the width of `col` using the `col-width*` attribute. We replace
    the `width*` with a value from 1-12 and that column will take only `width*/12`
    of the space in the `ion-row`.
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以使用 `col-width*` 属性强制设置 `col` 的宽度。我们将 `width*` 替换为 1-12 之间的一个值，那么这个列将只占据 `ion-row`
    空间的 `width*/12`。
- en: We can nest `ion-row` inside `ion-col`, and so on. You will notice that we have
    an `ion-col` that takes 10/12 of the width of `ion-row`. Inside that `ion-column`,
    we have a child `ion-row` element, which shows the user's post, and one more `ion-row`
    to show three icons for social sharing and interaction.
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在 `ion-col` 内部嵌套 `ion-row`，依此类推。你会注意到我们有一个占据 `ion-row` 宽度的 10/12 的 `ion-col`。在这个
    `ion-column` 内部，我们有一个子 `ion-row` 元素，显示用户的帖子，还有一个 `ion-row` 来显示三个用于社交分享和互动的图标。
- en: Each child `ion-row` will take the full width of its `ion-col` parent.
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个子元素 `ion-row` 将占据其 `ion-col` 父元素的完整宽度。
- en: 'The following image shows this structure with an explanation:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图片展示了这个结构及其说明：
- en: '![](img/969a072e-4e9e-4958-b3a0-1276ceaa4e4e.png)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969a072e-4e9e-4958-b3a0-1276ceaa4e4e.png)'
- en: See also
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: 'For more information about the Ionic grid, take a look at the Ionic documentation
    at: [https://ionicframework.com/docs/api/components/grid/Grid/](https://ionicframework.com/docs/api/components/grid/Grid/).'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 想了解更多关于 Ionic 网格的信息，请查看 Ionic 文档：[https://ionicframework.com/docs/api/components/grid/Grid/](https://ionicframework.com/docs/api/components/grid/Grid/)。
- en: 'If you want to see how Flexbox works in general, take a look at this very good
    introduction to it at: [https://css-tricks.com/snippets/css/a-guide-to-flexbox/](https://css-tricks.com/snippets/css/a-guide-to-flexbox/).'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想了解 Flexbox 的工作原理，请查看这个非常好的介绍：[https://css-tricks.com/snippets/css/a-guide-to-flexbox/](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)。
