- en: Chapter 4. Tipping the Scales
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Using continuous scales
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the time scale
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the ordinal scale
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interpolating a string
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interpolating colors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interpolating compound objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a data visualization developer, one of the key tasks that you will need to
    perform over and over is to map values from your data domain to your visual domain;
    for example, mapping your most recent purchase of a fancy tablet of $453.00 to
    a 653-px-long bar, and your last night's pub bill of $23.59 to a 34-px-long bar.
    In a sense, this is what data visualization is all about, mapping data elements
    to their visual metaphor in an efficient and accurate manner. Because this is
    an absolutely essential task in data visualization and animation (animation will
    be discussed in [Chapter 6](ch06.html "Chapter 6. Transition with Style"), *Transition
    with Style*, in detail), D3 provides rich and robust support on this topic, which
    is the focus of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: What are scales?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: D3 provides various constructs called *scales* to help you perform this kind
    of mapping. A proper understanding of these constructs conceptually is crucial
    to become an effective visualization developer. This is because scales are used
    not only to perform the mapping we mentioned previously, but also to serve as
    fundamental building blocks for many other D3 constructs, such as transition and
    axes.
  prefs: []
  type: TYPE_NORMAL
- en: '*What are these scales anyway?* In short, scales can be thought of as mathematical
    *functions*. Mathematical functions differ from functions defined in imperative
    programming languages, such as JavaScript functions. In mathematics, a function
    is defined as mapping between two sets:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Let A and B be nonempty sets. A function f from A to B is an assignment of
    exactly one element of B to each element of A. We write f(a) = b if b is the unique
    element of B assigned by the function f to the element a of A.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* -Rosen K. H. 2007*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Despite the dryness of this definition, you still can not help but notice how
    nicely it fits the task we need to perform, mapping elements from the data domain
    to the visual domain.
  prefs: []
  type: TYPE_NORMAL
- en: Another fundamentally important concept we will need to illustrate here is the
    *domain* and *range* of a given function.
  prefs: []
  type: TYPE_NORMAL
- en: '*If f is a function from A to B, we say that A is the domain of f and B is
    the codomain of f. If f(a) = b, we say that b is the image of a and a is a preimage
    of b. The range, or image, of f is the set of all images of elements of A. Also,
    if f is a function from A to B, we say that f maps A to B.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*-Rosen K. H. 2007*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To help us understand this concept, let''s take a look at the following illustration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What are scales?](img/image_04_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Function f maps A to B
  prefs: []
  type: TYPE_NORMAL
- en: As we can clearly see now, in the preceding illustration for function **f**,
    the domain is set **A** and the range is set **B**. Imagine if set **A** represents
    our data domain and **B** represents the visual domain, then a function **f**
    defined here is essentially a scale in D3 that maps elements from set **A** to
    set **B**.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the mathematically inclined readers, scale functions in data visualization
    are usually one-to-one, but not *onto* functions. This is a useful insight to
    know but not critical to the purpose of this book. Therefore, we will not discuss
    it further here.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we discussed the conceptual definition of scale functions in D3, let's
    take a look at how it can be used to help us develop our visualization project.
  prefs: []
  type: TYPE_NORMAL
- en: Using continuous scales
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we will examine the most commonly used scales provided by D3:
    the continuous scales that map a continuous quantitative domain to a continuous
    range, including linear, power, logarithmic, and time scales.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/continuous-scales.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/continuous-scales.html)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s take a look at the following code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output in your browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Quantitative scale output
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we demonstrated some of the most common scales provided by D3.
  prefs: []
  type: TYPE_NORMAL
- en: Linear scale
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the preceding code example, we have our data array filled with integers
    from `1` to `10`, as shown by the for loop above line `A`. We created a *linear
    scale* by calling the `d3.scaleLinear()` function. This returns a linear quantitative
    scale function with the default domain set to `[0, 1]` and the default range set
    to `[0, 1]`. Thus, the default scale is essentially the *identity function* for
    numbers. Therefore, this default function is not that useful to us, but typically
    needs to be further customized using its `domain` and `range` functions on lines
    `B` and `C`. In this case, we set them both to `[1, 10]`. This scale basically
    defines the function *f(n) = n* as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![Linear scale](img/image_04_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Identity scale
  prefs: []
  type: TYPE_NORMAL
- en: 'The second linear scale is a little bit more interesting and illustrates the
    mapping between the two sets better. On line `D`, we set the range as `[1, 20]`,
    which is different from its domain. Hence, now this function essentially represents
    the following equations:'
  prefs: []
  type: TYPE_NORMAL
- en: '*f(n) = a * n + b*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*1 <= f(n) <= 20*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is by far the most common case when using D3 scales because your dataset
    will be an identical match of your visual set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![Linear scale](img/image_04_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Linear scale
  prefs: []
  type: TYPE_NORMAL
- en: In this second scale, D3 will automatically calculate and assign the value of
    constants `a` and `b` to satisfy the equation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some basic algebraic calculation will tell you that `a` is approximately 2.11
    and `b` is -1.11, as in the previous example.
  prefs: []
  type: TYPE_NORMAL
- en: Power scale
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The second scale we created is a *power scale*. On line `E`, we defined a power
    scale with `exponent` of `2`. The `d3.scalePow()` function returns a default power
    scale function with its `exponent` set as `1`. This scale effectively defines
    the function *f(n) = n^2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![Power scale](img/image_04_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Simple power scale
  prefs: []
  type: TYPE_NORMAL
- en: On line `F`, a second power scale was defined, this time with a different range
    set on line `G` with rounding; the `rangeRound()` function works pretty much the
    same as the `range()` function, which sets the range for a scale. However, the
    `rangeRound` function rounds the output number so that there are no decimal fractions.
    This is very handy since scales are commonly used to map elements from the data
    domain to the visual domain. So, the output of a scale is very likely to be a
    number that describes some visual characteristics, for example, the number of
    pixels. Avoiding sub-pixel numbers is a useful technique that prevents anti-alias
    in rendering.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second power scale defines the following function, which is demonstrated
    in the code after the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '*f(n) = a*n^2 + b, 1 <= f(n) <= 10*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![Power scale](img/image_04_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Power scale
  prefs: []
  type: TYPE_NORMAL
- en: Similar to the linear scale, D3 will automatically find the suitable constants
    `a` and `b` to satisfy the constraints defined by `domain` and `range` on a power
    scale.
  prefs: []
  type: TYPE_NORMAL
- en: Log scale
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On line `H`, a third kind of quantitative scale was created using the `d3.scaleLog()`
    function. The default log scale has a `base` of `10`. Line `H` essentially defines
    the following mathematical function *f(n) = log(n)*, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Log scale](img/image_04_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Simple log scale
  prefs: []
  type: TYPE_NORMAL
- en: On line `I`, we customized the log scale to have a domain of `[1, 10]` and a
    rounded range of `[1, 10]`, which defines the following constrained mathematical
    function *f(n) = a*log(n) + b, 1 <= f(n) <= 10*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Log scale](img/image_04_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Log scale
  prefs: []
  type: TYPE_NORMAL
- en: Using the time scale
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often, we will need to create visualization on a dataset that has time and date
    dimensions; therefore, D3 provides a built-in time scale to help perform this
    type of mapping. In this recipe, we will learn how to use the D3 time scale.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/time-scale.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/time-scale.html)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, let''s take a look at the following code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This recipe generates the following visual output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Time scale
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we have a `Date` range between January 1, 2016 and December
    31, 2016 defined on line `A`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The JavaScript `Date` object starts its month from `0` and day from `1`. Therefore,
    `new Date(2016, 0, 1)` will present January 1, 2016, while `new Date(2016, 0,
    0)` actually will present December 31, 2015.
  prefs: []
  type: TYPE_NORMAL
- en: This range was then used to create a D3 *time scale* on line `B` using the `d3.scaleTime`
    function. Similar to other continuous scales, time scale also supports separate
    `domain` and `range` definition, which is used to map date- and time-based data
    points to visual range. In this example, we set the range of the scale to `[0,
    900]`. This effectively defines a mapping from any date and time value in the
    time range between January 1, 2016 and December 31, 2016 to a number between 0
    and 900.
  prefs: []
  type: TYPE_NORMAL
- en: With the time scale defined, we can now map any given `Date` object by calling
    the scale function, for example, `time(new Date(2016, 4, 1))` will return `395`,
    `time(new Date(2016, 11, 15))` will return `1147`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code, on line `D`, we created our data array that consists
    of 12 months from January to December in 2013, as shown in the following code
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Then we created 12 cells that represent each month in a year using the `render`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'To spread the cells horizontally, line `F` performs a mapping from the month
    to the `margin-left` CSS style using the time scale we defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Line `G` generates the label that demonstrates what the scale-based mapping
    produces in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: To generate human-readable strings from a JavaScript `Date` object, we used
    a D3 time formatter on line `H`, which is an alias to the `d3.locale.format` function.
    D3 ships with a powerful and flexible time-formatting library as part of locale
    format libraries, which is extremely useful when dealing with the `Date` object.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are some of the most useful `d3.locale.format` patterns:'
  prefs: []
  type: TYPE_NORMAL
- en: '`%a`: This is the abbreviated weekday name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%A`: This is the full weekday name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%b`: This is the abbreviated month name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%B`: This is the full month name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%d`: This is the zero-padded day of the month as a decimal number `[01``,31]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%e`: This is the space-padded day of the month as a decimal number `[1,31]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%H`: This is the hour (24-hour clock) as a decimal number `[00,23]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%I`: This is the hour (12-hour clock) as a decimal number `[01,12]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%j`: This is the day of the year as a decimal number `[001,366]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%m`: This is the month as a decimal number `[01,12]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%M`: This is the minute as a decimal number `[00,59]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%L`: This is the milliseconds as a decimal number `[000, 999]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%p`: This is either AM or PM'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%S`: This is the time in seconds as a decimal number `[00,61]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%x`: This is the date, as `%m/%d/%Y`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%X`: This is the time, as `%H:%M:%S`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%y`: This is the year without century as a decimal number `[00,99]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%Y`: This is the year with century as a decimal number'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the complete reference on D3 locale format pattern, visit the following
    link - [https://github.com/d3/d3-time-format/blob/master/README.md#locale_format](https://github.com/d3/d3-time-format/blob/master/README.md#locale_format)
    .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the ordinal scale
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In some cases, we may need to map our data to some ordinal values, for example,
    `["a", "b", "c"]` or `["#1f77b4", "#ff7f0e", "#2ca02c"]`. So, how can we perform
    this kind of mapping using D3 scales? This recipe is dedicated to answer this
    question.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/ordinal-scale.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/ordinal-scale.html)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This kind of ordinal mapping is quite common in data visualization. For example,
    you may want to map certain data points through categorization into some textual
    value or perhaps into RGB color code, which in turn can be used in CSS styling.
    D3 offers a specialized scale implementation to handle this kind of mapping. We
    will explore its usage here. The following is the code of the `ordinal-scale.html`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code outputs the following in your browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Ordinal scale
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the preceding code example, a simple data array containing integers from
    `0` to `9` was defined on line `A`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Then, an ordinal scale was created using the `d3.scaleOrdinal` function on line
    `B`. The domain of this scale was set to our integer array data, whereas range
    was set to a list of alphabets from `a` to `j`.
  prefs: []
  type: TYPE_NORMAL
- en: With this scale defined, we can perform the mapping by simply invoking the scale
    function, for example, `alphabet(0)` will return `a`, `alphabet(4)` will return
    `e`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'On line `C`, the `render` function was defined to generate a number of `div`
    elements on the page to represent the 10 elements in a data array. Each `div`
    element has its `background-color` attribute set to the scale function''s output
    or `white` if the output is not an RGB color string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'On line `E`, we also set the text of each cell to display the scale function''s
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, with all the structures in place, from line `F` to `G`, the `render` function
    was repetitively called with different ordinal scales to produce different visual
    outputs. On line `F`, calling `render` with the `alphabet` ordinal scale produces
    the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image_04_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Alphabetic ordinal scale
  prefs: []
  type: TYPE_NORMAL
- en: 'While on line `G`, calling the `render` function with the built-in `d3.scaleOrdinal(d3.schemeCategory20c)`
    ordinal color category scheme produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image_04_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Color ordinal scale
  prefs: []
  type: TYPE_NORMAL
- en: As assigning different colors to different elements in visualization is a common
    task, for example, assigning different colors in pie and bubble charts, D3 provides
    a number of different built-in ordinal color scales as we saw in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is quite easy to build your own simple custom ordinal color scale. Just
    create an ordinal scale with the range set to the colors you want to use, as shown
    in the following example: `d3.scaleOrdinal()` `.range(["#1f77b4", "#ff7f0e", "#2ca02c"]);`'
  prefs: []
  type: TYPE_NORMAL
- en: Interpolating a string
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In some cases, you might need to interpolate numbers embedded in a string; perhaps
    a CSS style for font, for example.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will examine how you can do that using D3 scale and interpolation.
    However, before we jump right into string interpolation, a bit of background knowledge
    on interpolator is due, and the following section will cover the basics of what
    interpolation is and how D3 implements interpolator functions.
  prefs: []
  type: TYPE_NORMAL
- en: Interpolator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the first three recipes, we went over three different D3 scale implementations;
    now it is time to delve a little deeper into D3 scales. You are probably already
    asking the question, *How do different scales know what value to use for different
    inputs?* In fact, this question can be generalized through the following definition
    of interpolator:'
  prefs: []
  type: TYPE_NORMAL
- en: '*We are given the values of a function f(x) at different points x0, x1, ...
    ,xn. We want to find approximate values of the function f(x) for "new" x''s that
    lie between these points. This process is called interpolation.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*-Kreyszig E and Kreyszig H, and Norminton E. J. (2010)*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Interpolation is not only important in scale implementation but also essential
    to many other core D3 capabilities, for example, animation and layout management.
    It is because of this essential role that D3 has designed a separate and reusable
    construct called *interpolator* so that this common cross-functional concern can
    be addressed in a centralized and consistent fashion. Let''s take a simple interpolator
    as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In this simple example, we created a D3 number interpolator with a range of
    `[0, 100]`. The `d3.interpolateNumber` function returns an interpolate function,
    which we can use to perform number-based interpolations. The interpolate function
    is equivalent to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In this function, `a` represents the start of the range and `b` represents the
    end of the range. The parameter `t` passed into the `interpolate()` function is
    a float-point number, ranging from 0 to 1, and it signifies how far the return
    value is from `a`.
  prefs: []
  type: TYPE_NORMAL
- en: D3 provides a number of built-in interpolators. Due to limited scope in this
    book, we will focus on some of the more interesting interpolators for the next
    few recipes; we will end our discussion on simple number interpolation here. Nevertheless,
    the fundamental approach and mechanism will remain the same, whether it is a number
    or an RGB color code interpolator.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more details on number and round interpolation, please refer to the D3 reference
    documents at [https://github.com/d3/d3/blob/master/API.md#interpolators-d3-interpolate](https://github.com/d3/d3/blob/master/API.md#interpolators-d3-interpolate)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Now, with general interpolation concepts behind us, let's take a look at how
    string interpolator works in D3.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/string-interpolation.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/string-interpolation.html)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'String interpolator finds the numbers embedded in the string, and then performs
    interpolation using D3 number interpolator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: String interpolation
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we created a linear scale on line `A` with a range specified
    between two strings that represent the start and end `font` styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the code of the `string-interpolation.html` file, the `font`
    style strings contain `font-size` numbers `12px/30px` and `120px/180px`, which
    we want to interpolate in this recipe. At this point, you might be asking how
    the linear scale function can map a number domain to these arbitrary font CSS
    styles. By default, linear scale uses the `d3.interpolateString` function to handle
    string-based range. The `d3.interpolateString` function will try to identify embedded
    numbers in a given string, in our case, the font-size numbers, and apply interpolation
    on those numbers only. Therefore, in this recipe, we essentially mapped our domain
    to the font sizes using a linear scale.
  prefs: []
  type: TYPE_NORMAL
- en: On line `C`, the `render()` function simply creates 10 cells containing each
    cell's index numbers (line `E`) styled using the interpolated `font` style string
    calculated on line `D`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, simply setting the font style to the output of `scale(d)` is
    enough since the function output is a complete font CSS style string with transformed
    embedded numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you inspect the output of this recipe, you will notice the output CSS style
    is actually longer than the original style string we used. The output looks like
    this: `font-style: italic; font-variant: normal; font-weight: bold; font-stretch:
    normal; font-size: 90.5455px; line-height: 139.091px; font-family: Georgia, serif;`
    This is because D3 CSS transformation parses CSS styles first and then uses browser-computed
    fully qualified CSS string for interpolation. This is done to avoid some subtle
    bugs that could otherwise be caused by direct interpolation.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Though we demonstrated string interpolation in D3 using a CSS font style as
    an example, D3 string interpolator is not only limited to handling CSS styles.
    It can basically handle any string and interpolates the embedded number as long
    as the number matches the following **Regex** pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you generate a string using interpolation, very small values, when stringified,
    may get converted to scientific notation, for example, 1e-7\. To avoid this particular
    conversion, you will need to keep your value larger than 1e-6
  prefs: []
  type: TYPE_NORMAL
- en: Interpolating colors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is sometimes necessary to interpolate colors when you interpolate values
    that do not contain numbers but rather RGB or HSL color code. This recipe addresses
    the question *how can you define scales for color codes and perform interpolation
    on them?*
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/color-interpolation.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/color-interpolation.html)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Color interpolation is such a common operation in visualization that D3 actually
    provides a number of different kinds of interpolators dedicated to color supporting,
    for example, **RGB**, **HSL**, **L*a*b***, **HCL**, and **Cubehelix** color space.
    In this recipe, we will demonstrate how color interpolation can be performed in
    RGB color space. However, all other color interpolators work in the same way.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: D3 color interpolate function always returns the interpolated color in RGB space,
    no matter what the original color space is, since not all browsers support HSL
    or L*a*b* color spaces.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what the code for this recipe looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code produces the following visual output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Color interpolation
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first step in this recipe is to define a linear color scale on line `A`
    with its range set as `["white", "#4169e1"]`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we demonstrated earlier, D3 color interpolator is pretty smart when it comes
    to color space. Similar to your browser, it understands both color keywords and
    hexadecimal values.
  prefs: []
  type: TYPE_NORMAL
- en: 'One new technique used in this recipe, that we haven''t encountered yet, is
    the *poly-linear scale*, which is defined in the `divergingScale` function on
    line `B`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'A poly-linear scale is a scale with a non-uniformed linear progression. It
    is achieved by providing a poly-linear domain on a linear scale as we can see
    on line `C`. You can think of a poly-linear scale as a scale that stitches two
    linear scales with different domains together. Hence, this poly-linear color scale
    is effectively the two following linear scales combined together:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: No surprise in the rest of the recipe. The `render()` function defined on line
    `D` generates 20 cells that are numbered by its index and colored using the output
    of two color scales we defined earlier. Clicking on the buttons on the web page
    (such as **Pivot at 5**) will show you the effect of pivoting at different positions
    in a poly-linear color scale.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For a complete list of supported color keywords in CSS3, please refer to the
    W3C official reference at [https://www.w3.org/TR/css3-color/#html4](https://www.w3.org/TR/css3-color/#html4)
    .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interpolating compound objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There will be cases when what you need to interpolate in your visualization
    is not a simple value but rather an object consisting of multiple and different
    values, for example, a rectangular object with width, height, and color attributes.
    Fortunately, D3 has a built-in support for this type of compound object interpolation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/compound-interpolation.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/compound-interpolation.html)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will examine how compound object interpolation is performed
    in D3\. The code for the `compound-interpolation.html` file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following visual output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Compound object interpolation
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe is different from the previous recipes in this chapter by the fact
    that the scale we will use in this recipe has a range defined using two objects
    rather than simple primitive data types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see on lines `A` and `B` that the start and the end of the scale range
    are two objects that contain two different kinds of values: one for RGB color
    and the other one for CSS height style. When you interpolate this kind of a scale
    containing compound range, D3 will iterate through each of the fields inside an
    object and recursively apply interpolation rules on each one of them. In other
    words, for this example, D3 will interpolate the `color` field using color interpolation
    from `#add8e6` to `#4169e1` while using string interpolation on height field from
    `15px` to `150px`.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Internally, D3 uses the `d3.interpolateObject` function to recursively interpolate
    an object; the recursive nature of this algorithm allows D3 to interpolate even
    on nested objects. Therefore, you can interpolate on an object like this: `{`
    `  color:"#add8e6",` `  size{` `    height:"15px",` `    width: "25px"` `  }`
    `}`'
  prefs: []
  type: TYPE_NORMAL
- en: 'A compound scale function, when invoked, returns a compound object that matches
    the given range definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: As we can see on lines `D` and `E`, the returned value is a compound object,
    and this is why, we can access its attribute to retrieve the interpolated values.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Though it is not a common case, if the start and end of your compound scale
    range do not have identical attributes, D3 won''t complain but rather it will
    just treat the missing attribute as a constant. The following scale will render
    the height to be `15px` for all the `div` elements: `var compoundScale = d3.scalePow()`
    `            .exponent(2)` `            .domain([0, max])` `                 range([`
    `                 {color:"#add8e6", height:"15px"}, // <-A` `                 {color:"#4169e1"}
    // <-B` `            ]);`'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter we have covered an important fundamental concept in D3 - scales.
    In next chapter we will move on to the first visualization component in this book
    that is actually built on top of scales - Axes.
  prefs: []
  type: TYPE_NORMAL
