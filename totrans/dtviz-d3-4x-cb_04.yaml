- en: Chapter 4. Tipping the Scales
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章. 权衡轻重
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Using continuous scales
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用连续尺度
- en: Using the time scale
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用时间尺度
- en: Using the ordinal scale
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用序数尺度
- en: Interpolating a string
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插值字符串
- en: Interpolating colors
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插值颜色
- en: Interpolating compound objects
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插值复合对象
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: As a data visualization developer, one of the key tasks that you will need to
    perform over and over is to map values from your data domain to your visual domain;
    for example, mapping your most recent purchase of a fancy tablet of $453.00 to
    a 653-px-long bar, and your last night's pub bill of $23.59 to a 34-px-long bar.
    In a sense, this is what data visualization is all about, mapping data elements
    to their visual metaphor in an efficient and accurate manner. Because this is
    an absolutely essential task in data visualization and animation (animation will
    be discussed in [Chapter 6](ch06.html "Chapter 6. Transition with Style"), *Transition
    with Style*, in detail), D3 provides rich and robust support on this topic, which
    is the focus of this chapter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 作为数据可视化开发者，你将需要反复执行的关键任务之一是将数据域中的值映射到你的视觉域中；例如，将你最近购买的一块价值453.00美元的平板电脑映射为一个653像素长的条形，以及将你昨晚酒吧的消费23.59美元映射为一个34像素长的条形。在某种程度上，这就是数据可视化的全部内容，以高效和准确的方式将数据元素映射到它们的视觉隐喻。因为这是数据可视化和动画（动画将在第6章[Chapter
    6. Transition with Style]“风格转换”中详细讨论）中绝对必要的任务，D3提供了丰富且强大的支持，这是本章的重点。
- en: What are scales?
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尺度是什么？
- en: D3 provides various constructs called *scales* to help you perform this kind
    of mapping. A proper understanding of these constructs conceptually is crucial
    to become an effective visualization developer. This is because scales are used
    not only to perform the mapping we mentioned previously, but also to serve as
    fundamental building blocks for many other D3 constructs, such as transition and
    axes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: D3提供了各种称为“尺度”的结构来帮助你执行这种映射。对这些结构概念上的正确理解对于成为一名有效的可视化开发者至关重要。这是因为尺度不仅用于执行我们之前提到的映射，而且还作为许多其他D3结构（如过渡和坐标轴）的基本构建块。
- en: '*What are these scales anyway?* In short, scales can be thought of as mathematical
    *functions*. Mathematical functions differ from functions defined in imperative
    programming languages, such as JavaScript functions. In mathematics, a function
    is defined as mapping between two sets:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*这些尺度究竟是什么？* 简而言之，尺度可以被视为数学上的*函数*。数学函数与在命令式编程语言（如JavaScript函数）中定义的函数不同。在数学中，函数被定义为两个集合之间的映射：'
- en: '*Let A and B be nonempty sets. A function f from A to B is an assignment of
    exactly one element of B to each element of A. We write f(a) = b if b is the unique
    element of B assigned by the function f to the element a of A.*'
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*设A和B为非空集合。从A到B的函数f是将B中恰好一个元素分配给A中的每个元素。如果b是函数f分配给A中元素a的唯一元素，我们写作f(a) = b。*'
- en: '* -Rosen K. H. 2007*'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '* -Rosen K. H. 2007*'
- en: Despite the dryness of this definition, you still can not help but notice how
    nicely it fits the task we need to perform, mapping elements from the data domain
    to the visual domain.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个定义显得有些枯燥，但你仍然不禁注意到它如何巧妙地符合我们需要执行的任务，即从数据域映射到视觉域的元素。
- en: Another fundamentally important concept we will need to illustrate here is the
    *domain* and *range* of a given function.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里需要说明的另一个基本重要概念是给定函数的*定义域*和*值域*。
- en: '*If f is a function from A to B, we say that A is the domain of f and B is
    the codomain of f. If f(a) = b, we say that b is the image of a and a is a preimage
    of b. The range, or image, of f is the set of all images of elements of A. Also,
    if f is a function from A to B, we say that f maps A to B.*'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*如果f是从A到B的函数，我们说A是f的定义域，B是f的值域。如果f(a) = b，我们说b是a的像，a是b的原像。f的值域或像是由A中所有元素的像组成的集合。如果f是从A到B的函数，我们说f将A映射到B。*'
- en: '*-Rosen K. H. 2007*'
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*-Rosen K. H. 2007*'
- en: 'To help us understand this concept, let''s take a look at the following illustration:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助我们理解这个概念，让我们看看以下插图：
- en: '![What are scales?](img/image_04_001.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![什么是尺度？](img/image_04_001.jpg)'
- en: Function f maps A to B
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 函数f将A映射到B
- en: As we can clearly see now, in the preceding illustration for function **f**,
    the domain is set **A** and the range is set **B**. Imagine if set **A** represents
    our data domain and **B** represents the visual domain, then a function **f**
    defined here is essentially a scale in D3 that maps elements from set **A** to
    set **B**.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们现在可以清楚地看到，在函数**f**的前一个示例中，定义域被设置为**A**，值域被设置为**B**。想象一下，如果集合**A**代表我们的数据域，而**B**代表视觉域，那么在这里定义的函数**f**本质上是一个D3中的比例尺，它将集合**A**中的元素映射到集合**B**。
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the mathematically inclined readers, scale functions in data visualization
    are usually one-to-one, but not *onto* functions. This is a useful insight to
    know but not critical to the purpose of this book. Therefore, we will not discuss
    it further here.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数学倾向的读者，数据可视化中的比例尺函数通常是单射，但不是*满射*函数。这是一个有用的见解，但不是本书目的的关键。因此，我们不会进一步讨论它。
- en: Now that we discussed the conceptual definition of scale functions in D3, let's
    take a look at how it can be used to help us develop our visualization project.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经讨论了D3中比例尺函数的概念定义，让我们看看它是如何帮助我们开发可视化项目的。
- en: Using continuous scales
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用连续比例尺
- en: 'In this recipe, we will examine the most commonly used scales provided by D3:
    the continuous scales that map a continuous quantitative domain to a continuous
    range, including linear, power, logarithmic, and time scales.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将检查D3提供的最常用的比例尺：将连续定量定义域映射到连续范围的连续比例尺，包括线性、幂、对数和时间比例尺。
- en: Getting ready
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/continuous-scales.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/continuous-scales.html)
    .'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/continuous-scales.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/continuous-scales.html)
    .'
- en: How to do it...
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s take a look at the following code example:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下代码示例：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding code generates the following output in your browser:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码在您的浏览器中生成以下输出：
- en: '![How to do it...](img/image_04_002.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_04_002.jpg)'
- en: Quantitative scale output
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 定量比例尺输出
- en: How it works...
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we demonstrated some of the most common scales provided by D3.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们展示了D3提供的一些最常见的比例尺。
- en: Linear scale
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 线性比例尺
- en: 'In the preceding code example, we have our data array filled with integers
    from `1` to `10`, as shown by the for loop above line `A`. We created a *linear
    scale* by calling the `d3.scaleLinear()` function. This returns a linear quantitative
    scale function with the default domain set to `[0, 1]` and the default range set
    to `[0, 1]`. Thus, the default scale is essentially the *identity function* for
    numbers. Therefore, this default function is not that useful to us, but typically
    needs to be further customized using its `domain` and `range` functions on lines
    `B` and `C`. In this case, we set them both to `[1, 10]`. This scale basically
    defines the function *f(n) = n* as shown in the following code snippet:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，我们有一个数据数组，其中填充了从`1`到`10`的整数，如上面行`A`以上的for循环所示。我们通过调用`d3.scaleLinear()`函数创建了一个*线性比例尺*。这个函数返回一个默认定义域为`[0,
    1]`和默认范围也为`[0, 1]`的线性定量比例尺函数。因此，默认比例尺本质上是一个*恒等函数*，对于数字来说并不那么有用，但通常需要通过其`domain`和`range`函数在行`B`和`C`上进行进一步定制。在这种情况下，我们将它们都设置为`[1,
    10]`。这个比例尺基本上定义了函数*f(n) = n*，如下面的代码片段所示：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![Linear scale](img/image_04_003.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![线性比例尺](img/image_04_003.jpg)'
- en: Identity scale
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 恒等比例尺
- en: 'The second linear scale is a little bit more interesting and illustrates the
    mapping between the two sets better. On line `D`, we set the range as `[1, 20]`,
    which is different from its domain. Hence, now this function essentially represents
    the following equations:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个线性比例尺更有趣一些，更好地说明了两个集合之间的映射。在行`D`上，我们将范围设置为`[1, 20]`，这与它的定义域不同。因此，现在这个函数本质上代表了以下方程：
- en: '*f(n) = a * n + b*'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*f(n) = a * n + b*'
- en: '*1 <= f(n) <= 20*'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*1 <= f(n) <= 20*'
- en: 'This is by far the most common case when using D3 scales because your dataset
    will be an identical match of your visual set:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在使用D3比例尺时最常见的情况，因为你的数据集将与你的视觉集完全匹配：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![Linear scale](img/image_04_004.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![线性比例尺](img/image_04_004.jpg)'
- en: Linear scale
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 线性比例尺
- en: In this second scale, D3 will automatically calculate and assign the value of
    constants `a` and `b` to satisfy the equation.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个第二个比例尺中，D3将自动计算并分配常数`a`和`b`的值以满足方程。
- en: Note
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Some basic algebraic calculation will tell you that `a` is approximately 2.11
    and `b` is -1.11, as in the previous example.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Power scale
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The second scale we created is a *power scale*. On line `E`, we defined a power
    scale with `exponent` of `2`. The `d3.scalePow()` function returns a default power
    scale function with its `exponent` set as `1`. This scale effectively defines
    the function *f(n) = n^2*:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Power scale](img/image_04_005.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
- en: Simple power scale
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: On line `F`, a second power scale was defined, this time with a different range
    set on line `G` with rounding; the `rangeRound()` function works pretty much the
    same as the `range()` function, which sets the range for a scale. However, the
    `rangeRound` function rounds the output number so that there are no decimal fractions.
    This is very handy since scales are commonly used to map elements from the data
    domain to the visual domain. So, the output of a scale is very likely to be a
    number that describes some visual characteristics, for example, the number of
    pixels. Avoiding sub-pixel numbers is a useful technique that prevents anti-alias
    in rendering.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'The second power scale defines the following function, which is demonstrated
    in the code after the function:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '*f(n) = a*n^2 + b, 1 <= f(n) <= 10*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Power scale](img/image_04_006.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
- en: Power scale
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Similar to the linear scale, D3 will automatically find the suitable constants
    `a` and `b` to satisfy the constraints defined by `domain` and `range` on a power
    scale.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Log scale
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On line `H`, a third kind of quantitative scale was created using the `d3.scaleLog()`
    function. The default log scale has a `base` of `10`. Line `H` essentially defines
    the following mathematical function *f(n) = log(n)*, as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Log scale](img/image_04_007.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
- en: Simple log scale
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: On line `I`, we customized the log scale to have a domain of `[1, 10]` and a
    rounded range of `[1, 10]`, which defines the following constrained mathematical
    function *f(n) = a*log(n) + b, 1 <= f(n) <= 10*.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Log scale](img/image_04_008.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: Log scale
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Using the time scale
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often, we will need to create visualization on a dataset that has time and date
    dimensions; therefore, D3 provides a built-in time scale to help perform this
    type of mapping. In this recipe, we will learn how to use the D3 time scale.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/time-scale.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/time-scale.html)
    .'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, let''s take a look at the following code example:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This recipe generates the following visual output:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_009.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
- en: Time scale
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we have a `Date` range between January 1, 2016 and December
    31, 2016 defined on line `A`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The JavaScript `Date` object starts its month from `0` and day from `1`. Therefore,
    `new Date(2016, 0, 1)` will present January 1, 2016, while `new Date(2016, 0,
    0)` actually will present December 31, 2015.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript `Date` 对象从 `0` 开始月份，从 `1` 开始日期。因此，`new Date(2016, 0, 1)` 将表示2016年1月1日，而
    `new Date(2016, 0, 0)` 实际上表示2015年12月31日。
- en: This range was then used to create a D3 *time scale* on line `B` using the `d3.scaleTime`
    function. Similar to other continuous scales, time scale also supports separate
    `domain` and `range` definition, which is used to map date- and time-based data
    points to visual range. In this example, we set the range of the scale to `[0,
    900]`. This effectively defines a mapping from any date and time value in the
    time range between January 1, 2016 and December 31, 2016 to a number between 0
    and 900.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用 `d3.scaleTime` 函数在行 `B` 上创建了一个基于此范围的 D3 时间尺度。类似于其他连续尺度，时间尺度也支持单独的 `domain`
    和 `range` 定义，用于将基于日期和时间的点映射到视觉范围。在这个例子中，我们将尺度的范围设置为 `[0, 900]`。这有效地定义了从2016年1月1日到2016年12月31日之间的任何日期和时间值到0到900之间的映射。
- en: With the time scale defined, we can now map any given `Date` object by calling
    the scale function, for example, `time(new Date(2016, 4, 1))` will return `395`,
    `time(new Date(2016, 11, 15))` will return `1147`, and so on.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义了时间尺度之后，我们现在可以通过调用尺度函数来映射任何给定的 `Date` 对象，例如，`time(new Date(2016, 4, 1))`
    将返回 `395`，`time(new Date(2016, 11, 15))` 将返回 `1147`，依此类推。
- en: 'In the following code, on line `D`, we created our data array that consists
    of 12 months from January to December in 2013, as shown in the following code
    snippet:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，在行 `D` 上，我们创建了一个包含2013年1月至12月的12个月份的数据数组，如下面的代码片段所示：
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Then we created 12 cells that represent each month in a year using the `render`
    function.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用 `render` 函数创建了12个单元格，代表一年中的每个月份。
- en: 'To spread the cells horizontally, line `F` performs a mapping from the month
    to the `margin-left` CSS style using the time scale we defined:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要水平展开单元格，行 `F` 执行从月份到我们定义的时间尺度的 `margin-left` CSS 样式的映射：
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Line `G` generates the label that demonstrates what the scale-based mapping
    produces in this example:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 行 `G` 生成的标签展示了在这个例子中基于尺度映射产生的结果：
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: To generate human-readable strings from a JavaScript `Date` object, we used
    a D3 time formatter on line `H`, which is an alias to the `d3.locale.format` function.
    D3 ships with a powerful and flexible time-formatting library as part of locale
    format libraries, which is extremely useful when dealing with the `Date` object.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 JavaScript `Date` 对象生成可读的字符串，我们在行 `H` 上使用了 D3 时间格式化器，它是 `d3.locale.format`
    函数的别名。D3 随带一个强大且灵活的时间格式化库作为区域格式库的一部分，这在处理 `Date` 对象时非常有用。
- en: There's more...
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The following are some of the most useful `d3.locale.format` patterns:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些最有用的 `d3.locale.format` 模式：
- en: '`%a`: This is the abbreviated weekday name'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%a`: 这表示缩写的星期名称'
- en: '`%A`: This is the full weekday name'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%A`: 这表示完整的星期名称'
- en: '`%b`: This is the abbreviated month name'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%b`: 这表示缩写的月份名称'
- en: '`%B`: This is the full month name'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%B`: 这表示完整的月份名称'
- en: '`%d`: This is the zero-padded day of the month as a decimal number `[01``,31]`'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%d`: 这表示月份中的零填充的日期，以十进制数表示 `[01,31]`'
- en: '`%e`: This is the space-padded day of the month as a decimal number `[1,31]`'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%e`: 这表示空格填充的月份中的日期，以十进制数表示 `[1,31]`'
- en: '`%H`: This is the hour (24-hour clock) as a decimal number `[00,23]`'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%H`: 这表示小时（24小时制）以十进制数表示 `[00,23]`'
- en: '`%I`: This is the hour (12-hour clock) as a decimal number `[01,12]`'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%I`: 这表示小时（12小时制）以十进制数表示 `[01,12]`'
- en: '`%j`: This is the day of the year as a decimal number `[001,366]`'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%j`: 这表示年份中的天数，以十进制数表示 `[001,366]`'
- en: '`%m`: This is the month as a decimal number `[01,12]`'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%m`: 这表示月份，以十进制数表示 `[01,12]`'
- en: '`%M`: This is the minute as a decimal number `[00,59]`'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%M`: 这表示分钟，以十进制数表示 `[00,59]`'
- en: '`%L`: This is the milliseconds as a decimal number `[000, 999]`'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%L`: 这表示毫秒，以十进制数表示 `[000, 999]`'
- en: '`%p`: This is either AM or PM'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%p`: 这表示上午或下午'
- en: '`%S`: This is the time in seconds as a decimal number `[00,61]`'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%S`: 这表示时间（以秒为单位）以十进制数表示 `[00,61]`'
- en: '`%x`: This is the date, as `%m/%d/%Y`'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%x`: 这表示日期，格式为 `%m/%d/%Y`'
- en: '`%X`: This is the time, as `%H:%M:%S`'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%X`: 这表示时间，格式为 `%H:%M:%S`'
- en: '`%y`: This is the year without century as a decimal number `[00,99]`'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%y`: 这表示不带世纪的年份，以十进制数表示 `[00,99]`'
- en: '`%Y`: This is the year with century as a decimal number'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%Y`: 这表示带世纪的年份，以十进制数表示'
- en: See also
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For the complete reference on D3 locale format pattern, visit the following
    link - [https://github.com/d3/d3-time-format/blob/master/README.md#locale_format](https://github.com/d3/d3-time-format/blob/master/README.md#locale_format)
    .
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解D3本地格式模式的完整参考，请访问以下链接 - [https://github.com/d3/d3-time-format/blob/master/README.md#locale_format](https://github.com/d3/d3-time-format/blob/master/README.md#locale_format)
    。
- en: Using the ordinal scale
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用序数尺度
- en: In some cases, we may need to map our data to some ordinal values, for example,
    `["a", "b", "c"]` or `["#1f77b4", "#ff7f0e", "#2ca02c"]`. So, how can we perform
    this kind of mapping using D3 scales? This recipe is dedicated to answer this
    question.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，我们可能需要将我们的数据映射到一些序数值，例如，`["a", "b", "c"]`或`["#1f77b4", "#ff7f0e", "#2ca02c"]`。那么，我们如何使用D3尺度执行这种映射呢？本食谱致力于回答这个问题。
- en: Getting ready
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/ordinal-scale.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/ordinal-scale.html)
    .'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/ordinal-scale.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/ordinal-scale.html)
    。'
- en: How to do it...
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'This kind of ordinal mapping is quite common in data visualization. For example,
    you may want to map certain data points through categorization into some textual
    value or perhaps into RGB color code, which in turn can be used in CSS styling.
    D3 offers a specialized scale implementation to handle this kind of mapping. We
    will explore its usage here. The following is the code of the `ordinal-scale.html`
    file:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这种序数映射在数据可视化中相当常见。例如，您可能希望通过分类将某些数据点映射到某些文本值或RGB颜色代码，这反过来又可以用于CSS样式。D3提供了一种专门的尺度实现来处理这种映射。我们将在下面探讨其用法。以下是`ordinal-scale.html`文件的代码：
- en: '[PRE12]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The preceding code outputs the following in your browser:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码在您的浏览器中输出以下内容：
- en: '![How to do it...](img/image_04_010.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_04_010.jpg)'
- en: Ordinal scale
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 序数尺度
- en: How it works...
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In the preceding code example, a simple data array containing integers from
    `0` to `9` was defined on line `A`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，第`A`行定义了一个简单的数据数组，包含从`0`到`9`的整数：
- en: '[PRE13]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Then, an ordinal scale was created using the `d3.scaleOrdinal` function on line
    `B`. The domain of this scale was set to our integer array data, whereas range
    was set to a list of alphabets from `a` to `j`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在第`B`行使用`d3.scaleOrdinal`函数创建了一个序数尺度。这个尺度的定义域被设置为我们的整数数组数据，而范围被设置为从`a`到`j`的字母列表。
- en: With this scale defined, we can perform the mapping by simply invoking the scale
    function, for example, `alphabet(0)` will return `a`, `alphabet(4)` will return
    `e`, and so on.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了这个尺度后，我们可以通过简单地调用尺度函数来进行映射，例如，`alphabet(0)`将返回`a`，`alphabet(4)`将返回`e`，依此类推。
- en: 'On line `C`, the `render` function was defined to generate a number of `div`
    elements on the page to represent the 10 elements in a data array. Each `div`
    element has its `background-color` attribute set to the scale function''s output
    or `white` if the output is not an RGB color string:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在第`C`行，定义了`render`函数以在页面上生成多个`div`元素来表示数据数组中的10个元素。每个`div`元素都将其`background-color`属性设置为尺度函数的输出或`white`，如果输出不是RGB颜色字符串：
- en: '[PRE14]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'On line `E`, we also set the text of each cell to display the scale function''s
    output:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在第`E`行，我们还设置了每个单元格的文本以显示尺度函数的输出：
- en: '[PRE15]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, with all the structures in place, from line `F` to `G`, the `render` function
    was repetitively called with different ordinal scales to produce different visual
    outputs. On line `F`, calling `render` with the `alphabet` ordinal scale produces
    the following output:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所有结构都已就绪，从第`F`行到第`G`行，`render`函数被重复调用，使用不同的序数尺度来产生不同的视觉输出。在第`F`行，使用`alphabet`序数尺度调用`render`将产生以下输出：
- en: '![How it works...](img/image_04_011.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/image_04_011.jpg)'
- en: Alphabetic ordinal scale
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 字母序数尺度
- en: 'While on line `G`, calling the `render` function with the built-in `d3.scaleOrdinal(d3.schemeCategory20c)`
    ordinal color category scheme produces the following output:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 当在第`G`行时，使用内置的`d3.scaleOrdinal(d3.schemeCategory20c)`序数颜色类别方案调用`render`函数会产生以下输出：
- en: '![How it works...](img/image_04_012.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/image_04_012.jpg)'
- en: Color ordinal scale
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色序数尺度
- en: As assigning different colors to different elements in visualization is a common
    task, for example, assigning different colors in pie and bubble charts, D3 provides
    a number of different built-in ordinal color scales as we saw in this recipe.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在可视化中将不同颜色分配给不同的元素是一个常见任务，例如，在饼图和气泡图中分配不同的颜色，D3提供了多个不同的内置序数颜色尺度，正如我们在本食谱中看到的。
- en: Tip
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'It is quite easy to build your own simple custom ordinal color scale. Just
    create an ordinal scale with the range set to the colors you want to use, as shown
    in the following example: `d3.scaleOrdinal()` `.range(["#1f77b4", "#ff7f0e", "#2ca02c"]);`'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 构建自己的简单自定义序数颜色比例相当容易。只需创建一个范围设置为所需颜色的序数比例，如下例所示：`d3.scaleOrdinal()` `.range(["#1f77b4",
    "#ff7f0e", "#2ca02c"]);`
- en: Interpolating a string
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插值字符串
- en: In some cases, you might need to interpolate numbers embedded in a string; perhaps
    a CSS style for font, for example.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，你可能需要插值字符串中嵌入的数字；例如，可能是字体CSS样式。
- en: In this recipe, we will examine how you can do that using D3 scale and interpolation.
    However, before we jump right into string interpolation, a bit of background knowledge
    on interpolator is due, and the following section will cover the basics of what
    interpolation is and how D3 implements interpolator functions.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '在这个菜谱中，我们将探讨如何使用D3比例和插值来实现这一点。然而，在我们直接进入字符串插值之前，我们需要一些关于插值器的基础知识，接下来的部分将涵盖插值的基本概念以及D3如何实现插值函数。 '
- en: Interpolator
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插值器
- en: 'In the first three recipes, we went over three different D3 scale implementations;
    now it is time to delve a little deeper into D3 scales. You are probably already
    asking the question, *How do different scales know what value to use for different
    inputs?* In fact, this question can be generalized through the following definition
    of interpolator:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在前三道菜谱中，我们讨论了三种不同的D3比例实现；现在是我们深入探讨D3比例的时候了。你可能已经在问自己，*不同的比例是如何知道对不同输入使用什么值的？*
    实际上，这个问题可以通过以下插值器的定义进行概括：
- en: '*We are given the values of a function f(x) at different points x0, x1, ...
    ,xn. We want to find approximate values of the function f(x) for "new" x''s that
    lie between these points. This process is called interpolation.*'
  id: totrans-157
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*我们给出了函数f(x)在不同点x0, x1, ... ,xn处的值。我们想要找到函数f(x)在“新”x值之间的近似值，这些x值位于这些点之间。这个过程称为插值。*'
- en: '*-Kreyszig E and Kreyszig H, and Norminton E. J. (2010)*'
  id: totrans-158
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*-Kreyszig E和Kreyszig H，以及Norminton E. J. (2010)*'
- en: 'Interpolation is not only important in scale implementation but also essential
    to many other core D3 capabilities, for example, animation and layout management.
    It is because of this essential role that D3 has designed a separate and reusable
    construct called *interpolator* so that this common cross-functional concern can
    be addressed in a centralized and consistent fashion. Let''s take a simple interpolator
    as an example:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 插值不仅在比例实现中很重要，而且对于许多其他核心D3功能也是必不可少的，例如动画和布局管理。正因为这个基本角色，D3设计了一个单独且可重用的结构，称为*插值器*，以便这个常见的跨功能问题可以集中和一致地解决。让我们以一个简单的插值器为例：
- en: '[PRE16]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In this simple example, we created a D3 number interpolator with a range of
    `[0, 100]`. The `d3.interpolateNumber` function returns an interpolate function,
    which we can use to perform number-based interpolations. The interpolate function
    is equivalent to the following code:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简单的例子中，我们创建了一个范围在`[0, 100]`的D3数字插值器。`d3.interpolateNumber`函数返回一个插值函数，我们可以使用它来执行基于数字的插值。插值函数等同于以下代码：
- en: '[PRE17]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this function, `a` represents the start of the range and `b` represents the
    end of the range. The parameter `t` passed into the `interpolate()` function is
    a float-point number, ranging from 0 to 1, and it signifies how far the return
    value is from `a`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，`a`代表范围的开始，`b`代表范围的结束。传递给`interpolate()`函数的参数`t`是一个浮点数，范围从0到1，它表示返回值与`a`的距离。
- en: D3 provides a number of built-in interpolators. Due to limited scope in this
    book, we will focus on some of the more interesting interpolators for the next
    few recipes; we will end our discussion on simple number interpolation here. Nevertheless,
    the fundamental approach and mechanism will remain the same, whether it is a number
    or an RGB color code interpolator.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: D3提供了一些内置的插值器。由于本书的范围有限，我们将专注于接下来几道菜谱中一些更有趣的插值器；我们将在这里结束对简单数字插值的讨论。尽管如此，无论是一个数字还是RGB颜色代码插值器，基本方法和机制都将保持不变。
- en: Note
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more details on number and round interpolation, please refer to the D3 reference
    documents at [https://github.com/d3/d3/blob/master/API.md#interpolators-d3-interpolate](https://github.com/d3/d3/blob/master/API.md#interpolators-d3-interpolate)
    .
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 关于数字和圆滑插值的更多细节，请参阅[https://github.com/d3/d3/blob/master/API.md#interpolators-d3-interpolate](https://github.com/d3/d3/blob/master/API.md#interpolators-d3-interpolate)中的D3参考文档。
- en: Now, with general interpolation concepts behind us, let's take a look at how
    string interpolator works in D3.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们掌握了通用插值概念之后，让我们来看看 D3 中的字符串插值器是如何工作的。
- en: Getting ready
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/string-interpolation.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/string-interpolation.html)
    .'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/string-interpolation.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/string-interpolation.html)。'
- en: How to do it...
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'String interpolator finds the numbers embedded in the string, and then performs
    interpolation using D3 number interpolator:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串插值器会找到字符串中嵌入的数字，然后使用 D3 数字插值器进行插值：
- en: '[PRE18]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The preceding code produces the following output:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码产生了以下输出：
- en: '![How to do it...](img/image_04_013.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/image_04_013.jpg)'
- en: String interpolation
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串插值
- en: How it works...
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In this example, we created a linear scale on line `A` with a range specified
    between two strings that represent the start and end `font` styles:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们在线 `A` 上创建了一个线性比例尺，其范围由表示起始和结束 `font` 样式的两个字符串指定：
- en: '[PRE19]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As you can see in the code of the `string-interpolation.html` file, the `font`
    style strings contain `font-size` numbers `12px/30px` and `120px/180px`, which
    we want to interpolate in this recipe. At this point, you might be asking how
    the linear scale function can map a number domain to these arbitrary font CSS
    styles. By default, linear scale uses the `d3.interpolateString` function to handle
    string-based range. The `d3.interpolateString` function will try to identify embedded
    numbers in a given string, in our case, the font-size numbers, and apply interpolation
    on those numbers only. Therefore, in this recipe, we essentially mapped our domain
    to the font sizes using a linear scale.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在 `string-interpolation.html` 文件的代码中所见，`font` 样式字符串包含 `font-size` 数字 `12px/30px`
    和 `120px/180px`，这是我们在这个菜谱中想要插值的。此时，你可能会问线性比例尺函数是如何将数字域映射到这些任意的字体 CSS 样式的。默认情况下，线性比例尺使用
    `d3.interpolateString` 函数来处理基于字符串的范围。`d3.interpolateString` 函数将尝试识别给定字符串中的嵌入数字，在我们的例子中，是字体大小数字，并且只对这些数字进行插值。因此，在这个菜谱中，我们实际上使用线性比例尺将我们的域映射到字体大小。
- en: On line `C`, the `render()` function simply creates 10 cells containing each
    cell's index numbers (line `E`) styled using the interpolated `font` style string
    calculated on line `D`.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在线 `C`，`render()` 函数简单地创建了包含每个单元格索引数字（线 `E`）的 10 个单元格，这些单元格使用在线 `D` 计算的插值 `font`
    样式字符串进行样式化。
- en: '[PRE20]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: As we can see, simply setting the font style to the output of `scale(d)` is
    enough since the function output is a complete font CSS style string with transformed
    embedded numbers.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，只需将字体样式设置为 `scale(d)` 的输出就足够了，因为函数输出是一个完整的字体 CSS 样式字符串，其中包含转换后的嵌入数字。
- en: Note
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you inspect the output of this recipe, you will notice the output CSS style
    is actually longer than the original style string we used. The output looks like
    this: `font-style: italic; font-variant: normal; font-weight: bold; font-stretch:
    normal; font-size: 90.5455px; line-height: 139.091px; font-family: Georgia, serif;`
    This is because D3 CSS transformation parses CSS styles first and then uses browser-computed
    fully qualified CSS string for interpolation. This is done to avoid some subtle
    bugs that could otherwise be caused by direct interpolation.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你检查这个菜谱的输出，你会注意到输出的 CSS 样式实际上比我们使用的原始样式字符串要长。输出看起来像这样：`font-style: italic;
    font-variant: normal; font-weight: bold; font-stretch: normal; font-size: 90.5455px;
    line-height: 139.091px; font-family: Georgia, serif;` 这是因为 D3 CSS 转换首先解析 CSS 样式，然后使用浏览器计算的全限定
    CSS 字符串进行插值。这样做是为了避免一些可能由直接插值引起的微妙错误。'
- en: There's more...
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Though we demonstrated string interpolation in D3 using a CSS font style as
    an example, D3 string interpolator is not only limited to handling CSS styles.
    It can basically handle any string and interpolates the embedded number as long
    as the number matches the following **Regex** pattern:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们使用 CSS 字体样式作为例子演示了 D3 中的字符串插值，但 D3 字符串插值器不仅限于处理 CSS 样式。它可以基本上处理任何字符串，只要数字匹配以下
    **正则表达式** 模式：
- en: '[PRE21]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When you generate a string using interpolation, very small values, when stringified,
    may get converted to scientific notation, for example, 1e-7\. To avoid this particular
    conversion, you will need to keep your value larger than 1e-6
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用插值生成字符串时，非常小的值，在转换为字符串后可能会被转换为科学记数法，例如，1e-7。为了避免这种特定的转换，你需要保持你的值大于 1e-6。
- en: Interpolating colors
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 颜色插值
- en: It is sometimes necessary to interpolate colors when you interpolate values
    that do not contain numbers but rather RGB or HSL color code. This recipe addresses
    the question *how can you define scales for color codes and perform interpolation
    on them?*
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要插值不包含数字而包含RGB或HSL颜色代码的值时，有时需要插值颜色。本食谱解决了以下问题：*如何定义颜色代码的刻度并在其上进行插值？*
- en: Getting ready
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/color-interpolation.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/color-interpolation.html)
    .'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/color-interpolation.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/color-interpolation.html)。'
- en: How to do it...
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Color interpolation is such a common operation in visualization that D3 actually
    provides a number of different kinds of interpolators dedicated to color supporting,
    for example, **RGB**, **HSL**, **L*a*b***, **HCL**, and **Cubehelix** color space.
    In this recipe, we will demonstrate how color interpolation can be performed in
    RGB color space. However, all other color interpolators work in the same way.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色插值在可视化中是一项非常常见的操作，因此D3实际上提供了一系列不同类型的插值器，专门用于支持颜色，例如**RGB**、**HSL**、**L*a*b***、**HCL**和**Cubehelix**颜色空间。在本食谱中，我们将演示如何在RGB颜色空间中执行颜色插值。然而，所有其他颜色插值器的工作方式相同。
- en: Note
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: D3 color interpolate function always returns the interpolated color in RGB space,
    no matter what the original color space is, since not all browsers support HSL
    or L*a*b* color spaces.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: D3颜色插值函数始终在RGB空间中返回插值颜色，无论原始颜色空间是什么，因为并非所有浏览器都支持HSL或L*a*b*颜色空间。
- en: 'Here is what the code for this recipe looks like:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是这个食谱的代码示例：
- en: '[PRE22]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The preceding code produces the following visual output:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码产生了以下视觉输出：
- en: '![How to do it...](img/image_04_014.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_04_014.jpg)'
- en: Color interpolation
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色插值
- en: How it works...
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The first step in this recipe is to define a linear color scale on line `A`
    with its range set as `["white", "#4169e1"]`:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的第一步是在第`A`行定义一个线性颜色刻度，其范围设置为`["white", "#4169e1"]`：
- en: '[PRE23]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As we demonstrated earlier, D3 color interpolator is pretty smart when it comes
    to color space. Similar to your browser, it understands both color keywords and
    hexadecimal values.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所展示的，D3颜色插值器在处理颜色空间方面非常智能。类似于你的浏览器，它理解颜色关键字和十六进制值。
- en: 'One new technique used in this recipe, that we haven''t encountered yet, is
    the *poly-linear scale*, which is defined in the `divergingScale` function on
    line `B`, as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中使用的一种新技术，我们之前还没有遇到过，就是**多线性刻度**，它在`divergingScale`函数的第`B`行定义，如下所示：
- en: '[PRE24]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'A poly-linear scale is a scale with a non-uniformed linear progression. It
    is achieved by providing a poly-linear domain on a linear scale as we can see
    on line `C`. You can think of a poly-linear scale as a scale that stitches two
    linear scales with different domains together. Hence, this poly-linear color scale
    is effectively the two following linear scales combined together:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 多线性刻度是一种具有非均匀线性进度的刻度。它通过在线性刻度上提供一个多线性域来实现，正如我们在第`C`行所看到的。你可以将多线性刻度想象为将两个具有不同域的线性刻度缝合在一起的刻度。因此，这个多线性颜色刻度实际上是以下两个线性刻度的组合：
- en: '[PRE25]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: No surprise in the rest of the recipe. The `render()` function defined on line
    `D` generates 20 cells that are numbered by its index and colored using the output
    of two color scales we defined earlier. Clicking on the buttons on the web page
    (such as **Pivot at 5**) will show you the effect of pivoting at different positions
    in a poly-linear color scale.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在食谱的其余部分没有惊喜。在第`D`行定义的`render()`函数生成20个单元格，这些单元格按其索引编号，并使用我们之前定义的两个颜色刻度的输出进行着色。点击网页上的按钮（例如**在5处旋转**）将显示在多线性颜色刻度中不同位置的旋转效果。
- en: See also
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: For a complete list of supported color keywords in CSS3, please refer to the
    W3C official reference at [https://www.w3.org/TR/css3-color/#html4](https://www.w3.org/TR/css3-color/#html4)
    .
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于CSS3支持的所有颜色关键字，请参阅W3C官方参考[https://www.w3.org/TR/css3-color/#html4](https://www.w3.org/TR/css3-color/#html4)。
- en: Interpolating compound objects
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插值复合对象
- en: There will be cases when what you need to interpolate in your visualization
    is not a simple value but rather an object consisting of multiple and different
    values, for example, a rectangular object with width, height, and color attributes.
    Fortunately, D3 has a built-in support for this type of compound object interpolation.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的可视化中，你可能需要插值的不只是一个简单的值，而是一个由多个不同值组成的对象，例如，具有宽度、高度和颜色属性的矩形对象。幸运的是，D3 内置了对这种复合对象插值的支持。
- en: Getting ready
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/compound-interpolation.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/compound-interpolation.html)
    .'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/compound-interpolation.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter4/compound-interpolation.html)
    .'
- en: How to do it...
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we will examine how compound object interpolation is performed
    in D3\. The code for the `compound-interpolation.html` file is as follows:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将检查 D3 中如何执行复合对象插值。`compound-interpolation.html` 文件的代码如下：
- en: '[PRE26]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The preceding code generates the following visual output:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码生成以下视觉输出：
- en: '![How to do it...](img/image_04_015.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_04_015.jpg)'
- en: Compound object interpolation
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 复合对象插值
- en: How it works...
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'This recipe is different from the previous recipes in this chapter by the fact
    that the scale we will use in this recipe has a range defined using two objects
    rather than simple primitive data types:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 与本章前面的菜谱不同，本菜谱中我们将使用两个对象定义的范围而不是简单的原始数据类型来定义我们将使用的比例：
- en: '[PRE27]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We can see on lines `A` and `B` that the start and the end of the scale range
    are two objects that contain two different kinds of values: one for RGB color
    and the other one for CSS height style. When you interpolate this kind of a scale
    containing compound range, D3 will iterate through each of the fields inside an
    object and recursively apply interpolation rules on each one of them. In other
    words, for this example, D3 will interpolate the `color` field using color interpolation
    from `#add8e6` to `#4169e1` while using string interpolation on height field from
    `15px` to `150px`.'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在行 `A` 和 `B` 上看到，比例范围的起始和结束是两个包含两种不同值的对象：一个用于 RGB 颜色，另一个用于 CSS 高度样式。当你对这种包含复合范围的尺度进行插值时，D3
    将遍历对象内的每个字段，并对每个字段递归地应用插值规则。换句话说，对于这个例子，D3 将使用颜色插值从 `#add8e6` 插值到 `#4169e1`，同时在高度字段上使用字符串插值从
    `15px` 插值到 `150px`。
- en: Note
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Internally, D3 uses the `d3.interpolateObject` function to recursively interpolate
    an object; the recursive nature of this algorithm allows D3 to interpolate even
    on nested objects. Therefore, you can interpolate on an object like this: `{`
    `  color:"#add8e6",` `  size{` `    height:"15px",` `    width: "25px"` `  }`
    `}`'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '内部，D3 使用 `d3.interpolateObject` 函数递归地插值一个对象；该算法的递归性质允许 D3 在嵌套对象上进行插值。因此，你可以对如下这样的对象进行插值：`{`
    `  color:"#add8e6",` `  size{` `    height:"15px",` `    width: "25px"` `  }`
    `}`'
- en: 'A compound scale function, when invoked, returns a compound object that matches
    the given range definition:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 当复合比例函数被调用时，它返回一个与给定范围定义相匹配的复合对象：
- en: '[PRE28]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: As we can see on lines `D` and `E`, the returned value is a compound object,
    and this is why, we can access its attribute to retrieve the interpolated values.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在行 `D` 和 `E` 上所看到的，返回值是一个复合对象，这就是为什么我们可以访问其属性以检索插值值。
- en: Note
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Though it is not a common case, if the start and end of your compound scale
    range do not have identical attributes, D3 won''t complain but rather it will
    just treat the missing attribute as a constant. The following scale will render
    the height to be `15px` for all the `div` elements: `var compoundScale = d3.scalePow()`
    `            .exponent(2)` `            .domain([0, max])` `                 range([`
    `                 {color:"#add8e6", height:"15px"}, // <-A` `                 {color:"#4169e1"}
    // <-B` `            ]);`'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这不是一个常见的案例，但如果你的复合比例范围的起始和结束没有相同的属性，D3 不会抱怨，而是会将缺失的属性视为一个常数。以下比例会将所有 `div`
    元素的高度渲染为 `15px`：`var compoundScale = d3.scalePow()` `            .exponent(2)`
    `            .domain([0, max])` `                 range([` `                 {color:"#add8e6",
    height:"15px"}, // <-A` `                 {color:"#4169e1"} // <-B` `         
      ]);`
- en: In this chapter we have covered an important fundamental concept in D3 - scales.
    In next chapter we will move on to the first visualization component in this book
    that is actually built on top of scales - Axes.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了D3中的一个重要基本概念——刻度。在下一章中，我们将继续探讨本书中第一个基于刻度的可视化组件——坐标轴。
