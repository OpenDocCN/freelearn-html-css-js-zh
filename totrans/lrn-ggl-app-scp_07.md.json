["```js\nfunction doGet() {\n  /*\n   *  This spreadsheet may not be active while this function\n   *  executes, so you cannot get access to active spreadsheet,\n   *  use open by id.\n   *\n   */\n  var ss = SpreadsheetApp\n      .openById(\"Replace with this spreadsheet id\");\n\n  var SheetData = ss.getSheetByName(\"Data\");\n\n  var data = SheetData.getDataRange().getValues();\n\n  var html = '<!DOCTYPE html><html><body><table border=1>';\n\n  // Each row data passed as argument to the anonymous function.\n  data.forEach(function(row){\n    html += '<tr>';\n    html += '<td>' + row[0] + '</td>';\n    html += '<td>' + row[1] + '</td>';\n    html += '<td>' + row[2] + '</td>';\n    html += '</tr>';\n  });\n\n  // Let's close table, body and html tags.\n  html += '</table></body></html>';\n\n  // Return as HTML document.\n  Return HtmlService.createHtmlOutput(html);\n\n}\n```", "```js\nfunction doGet(){\n  /*\n   *  This spreadsheet may not be active while this function \n   *  executes, so you cannot get access to active spreadsheet, \n   *  use open by id.\n   *\n   */\n  var ss = SpreadsheetApp\n      .openById(\"Replace with this spreadsheet id\");\n\n  var SheetData = ss.getSheetByName(\"Data\");\n\n  var data = SheetData.getDataRange().getValues();\n\n  // Remove header\n  data.shift();\n\n  var date = new Date();\n  var currYear = date.getFullYear();\n\n  var output = {};\n\n  data.forEach(function(row){\n    var dob = new Date(row[3]);\n    var dobYear = dob.getFullYear();\n\n    /*\n     * Create full name property within output object.\n     * Again the full name property is an object.\n     *\n     */\n    output[row[2]] = {};\n\n    /*\n     * Assign DOB property to full name object.\n     * Change time zone and date format as per your preference.\n     *\n     */\n    output[row[2]].dob = Utilities\n      .formatDate(row[3], \"UTC\", \"MM/dd/yyyy\");\n\n    // Let's calculate age.\n    output[row[2]].age = currYear - dobYear;\n  });\n\n  // We can return only string to browser, so convert to string.\n  var json = JSON.stringify(output);\n\n  return ContentService.createTextOutput(json);\n}\n```", "```js\nfunction doGet() {\n  /*\n   *  This spreadsheet may not be active while this function \n   *  executes, so you cannot get access to active spreadsheet, \n   *  use open by id.\n   *\n   */\n  var ss = SpreadsheetApp.openById(\"[[ this spreadsheet id ]]\");\n\n  var SheetData = ss.getSheetByName(\"Data\");\n\n  var template = HtmlService\n      .createTemplateFromFile(\"Template.html\");\n\n  // Assign 'data' to the template object\n  template.data = SheetData.getDataRange().getValues();\n\n  // Evaluate template object as html content\n  var html = template.evaluate();\n\n  // Convert html content to pdf\n  // var pdf = html.getAs(\"application/pdf\")\n  //    .setName(\"Test_Data.pdf\");\n\n  // Or use this code\n  var pdf = html.getAs(MimeType.PDF).setName(\"Test_Data.pdf\");\n\n  // Create pdf file in the \"My Drive\" folder and share it with //public.\n  var file = DriveApp.createFile(pdf);\n\n  // Let's set sharing access as anyone can view the pdf.\n  file.setSharing(\n    DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW\n  );\n\n  // Create and return html content with link to the pdf file.\n  return HtmlService.createHtmlOutput(\n    'Click <a target=\"_top\" href=\"'\n    + file.getUrl()\n    +'\">here</a> to view pdf file.'\n  );\n}\n```", "```js\n<!DOCTYPE html>\n<html>\n  <body>\n    <table>\n      <? for(var i in data) {?>\n        <tr>\n          <? for(var j in data[i]) { ?>\n            <td><?= data[i][j] ?></td>\n          <? } ?>\n        </tr>\n      <? } ?>\n    </table>\n  </body>\n</html>\n```", "```js\nfor(var i in data) {\n  for(var j in data[i]) {\n    data[i][j] \n  }\n}\n```", "```js\nfunction doGet(e){\n  Logger.log(e);\n}\n```", "```js\nfunction doGet(e){\n\n  // Get the fname value from the query string.\n  var firstName = e.parameter.fname;\n\n  /*\n   *  There is no active spreadsheet, so you should open by id.\n   *  Use the id of the spreadsheet in which your script resides.\n   *\n   */\n  var ss = SpreadsheetApp.openById(\"Replace spreadsheet id\");\n\n  var SheetData = ss.getSheetByName(\"Data\");\n\n  var data = SheetData.getDataRange().getValues();\n\n  // Remove header\n  data.shift();\n\n  var date = new Date();\n\n  // Let's get the year in 4 digits.\n  var currYear = date.getFullYear();\n\n  var output = {};\n\n  // Let's populate output with dob and age properties.\n  data.forEach(function(row){\n\n    // Skip if first name not match.\n    if(firstName !== row[0]) return;\n\n    var dob = new Date(row[3]);\n    var dobYear = dob.getFullYear();\n\n    output[row[2]] = {};\n    output[row[2]].dob = Utilities\n      .formatDate(row[3], \"UTC\", \"MM/dd/yyyy\");\n\n    output[row[2]].age = currYear - dobYear;\n  });\n\n  var json = JSON.stringify(output);\n\n  return ContentService.createTextOutput(json);\n}\n```", "```js\nfunction doGet() {\n  /*\n   *  There is no active spreadsheet, so you should open by id.\n   *  Use the id of the spreadsheet in which your script resides.\n   *\n   */\n  var ss = SpreadsheetApp.openById([[ this spreadsheet id ]]);\n\n  var SheetRss = ss.getSheetByName(\"RSS Data\");\n\n  var rssData = SheetRss.getDataRange().getValues();\n\n  // Remove header.\n  rssData.shift();\n\n  var strRss = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n\n  // Root element.\n  strRss += '<rss>';\n\n  // Open channel element.\n  strRss += '<channel>';\n\n  // Add description and language elements.\n  strRss += '<description>A brief description of the channel</description>';\n  strRss += '<language>en-US</language>';\n\n  // Each row data is passed as an argument to the anonymous\n  //function.\n  rssData.forEach(function(row){\n    strRss += '<item>';\n    strRss += '<title>' + row[0] + '</title>';\n    strRss += '<link>' + row[1] + '</link>';\n    strRss += '<creator>' + row[2] + '</creator>';\n    strRss += '</item>';\n  });\n\n  // Close channel and root (rss) elements.\n  strRss += '</channel></rss>';\n\n  // Return as RSS xml document.\n  return ContentService\n    .createTextOutput(strRss)\n    .setMimeType(ContentService.MimeType.RSS);\n}\n```", "```js\nfunction doGet() {\n  // Let's return html page created from the Form.html file.\n  return HtmlService.createHtmlOutputFromFile('Form.html')\n    .setTitle(\"File Upload\");\n};\n\nfunction uploadFiles(form) {\n  // You can change the folder name as you like.\n  var folderName = \"Uploaded Files\";\n\n  var folder, folders = DriveApp.getFoldersByName(folderName);\n\n  // folders is an iterator.\n  if (folders.hasNext()) folder = folders.next();\n  // Let's create a folder if it does not exist.\n  else folder = DriveApp.createFolder(folderName);\n\n  // Let's create the file, got from the form, within the folder.\n  var file = folder.createFile(form.file);\n\n  // Let's return the file's url\n  return file.getUrl();\n}\n```", "```js\n<!DOCTYPE html>\n<html>\n  <head>\n    <base target=\"_top\">\n\n    <link rel=\"stylesheet\" href=\"//ssl.gstatic.com/docs/script/css/add-ons1.css\"/>\n    <script src=\"img/jquery.min.js\"></script>\n  </head>\n\n  <body>\n    <div class=\"sidebar\">\n      <form>\n        <input type=\"file\" name=\"file\">\n        <br /><br />\n        <input type=\"button\" id=\"upload\" class=\"submit\" value=\"Upload\">\n      </form>\n    </div>\n\n    <script>\n      $(function(){\n        $(\"#upload\").click(fileUpload);\n      });\n\n      function fileUpload(){\n        this.disabled = true;\n        google.script.run\n          .withSuccessHandler(function(msg, element){\n             element.disabled = false;\n             showSucces(msg);\n           })\n          .withFailureHandler(function(msg, element) {\n             element.disabled = false;\n             showError(msg, element);\n           })\n          .withUserObject(this)\n          .uploadFiles(this.parentNode);\n      }\n\n      function showSucces(msg) {\n        alert(\"File uploaded successfully.\\n The file url is: \" + msg);\n      }\n\n      function showError(msg, element) {\n        var div = $('<div id=\"error\" class=\"error\">' + msg + '</div>');\n\n        $(element).after(div);\n      }\n\n    </script>\n  </body>\n</html>\n```", "```js\nvar ssid = \"[[ this spreadsheet id ]]\";\n\n// Change date format as per your preference.\nvar DF = \"MM/dd/yyyy HH:mm:ss\";\nvar TZ = Session.getScriptTimeZone();\n\nvar ss = SpreadsheetApp.openById(ssid);\nvar TimeSheet = ss.getSheetByName(\"TimeSheet\");\nvar EmpSheet = ss.getSheetByName(\"EmployeesList\");\nvar BackupSheet = ss.getSheetByName(\"Backup\");\nvar MessageSheet = ss.getSheetByName(\"Message\");\n```", "```js\n/**\n *  Get employee names from the EmployeesList sheet,\n *  construct the data as an array and return.\n *\n */\nfunction getEmpList(){\n  var emp = [];\n  var data = EmpSheet.getDataRange().getValues();\n\n  for(var i in data) if(data[i][0]) emp.push(data[i][0]);\n\n  return emp;\n}\n```", "```js\nfunction doGet(){\n  var template = HtmlService.createTemplateFromFile(\"Timesheet\");\n  template.message = MessageSheet.getRange(\"A2\").getValue();\n  template.empList = getEmpList();\n\n  var html = template.evaluate();\n  return html;\n}\n```", "```js\n// Returns employee shift status as an array [status, name].\nfunction getEmpStatus(emp){\n  var empData = EmpSheet.getDataRange().getValues();\n  var timeData = TimeSheet.getDataRange().getValues();\n\n  // Remove header\n  timeData.shift();\n\n  for(var i in timeData){\n    if(timeData[i][1] == emp) \n      return [timeData[i][0],empData[j][1]];\n  }\n\n  // Return null if employee not in shift\n  return [\"\",\"\"];\n}\n```", "```js\nfunction fmtDate_(d, format){\n  // Set the default date format, if 'format' not passed.\n  var fmt = format || DF;\n\n  return Utilities.formatDate(d, TZ, fmt);\n}\n```", "```js\nfunction postTime(name, val){\n  var time = fmtDate_(new Date());\n  var data = TimeSheet.getDataRange().getValues();\n\n  // If 'shift start' clicked\n  if(val == \"sb\"){\n    // Update start time if clicked again.\n    for(var i in data){\n      if(data[i][1] == name && data[i][0] == \"sb\" ){\n        data[i][2] = time;\n        TimeSheet.getRange(1, 1, data.length, data[0].length)\n          .setValues(data);\n        return [val,name];\n      }\n    };\n\n    // Else insert new name and update start time.\n    TimeSheet.appendRow([val,name,time]);\n\n    return [val,name];\n  }\n\n  // If 'break start' clicked.\n  if(val == \"bb\"){\n    for(var i in data){\n      // Update break start time only if employee is in shift.\n      if(data[i][0] == \"sb\" && data[i][1] == name ){\n        data[i][0] = val;\n        data[i][3] = time;\n\n        TimeSheet.getRange(1, 1, data.length, data[0].length)\n          .setValues(data);\n\n        return [val,name];\n      }\n    };\n\n    // If 'break start' clicked before 'shift start'.\n    throw \"Please start your shift.\";\n  }\n\n  // If 'break end' clicked\n  if(val == \"be\"){\n    for(var i in data){\n      if(data[i][0] == \"bb\" && data[i][1] == name ){\n        data[i][0] = val;\n        data[i][4] = time;\n        TimeSheet.getRange(1, 1, data.length, data[0].length)\n          .setValues(data);\n        return [val,name];\n      }\n    };\n\n    // If 'break end' clicked before 'break start'.\n    throw \"Please start your break.\";\n  }\n\n  // If shift end clicked\n  if(val == \"se\"){\n    for(var i in data){\n      if(data[i][1] == name \n           && (data[i][0] == \"sb\"|| data[i][0] == \"be\") ){\n        var backup = [];\n        backup.push(\n          data[i][1],    // Name\n          data[i][2],    // Shift Start\n          data[i][3],    // Break Start\n          data[i][4],    // Break End\n          time,          // Shift end\n          '=(E2-B2)*24', // Col F formula,\n          '=(D2-C2)*24', // Col G formula\n          '=F2-G2'       // Col H formula\n        );\n\n        /*\n         * Copy Timesheet data to Backup sheet.\n         * Insert a new row before row 2,\n         * so that the inserted formulas ever work.\n         *\n         */\n        BackupSheet.insertRowBefore(2);\n\n        BackupSheet.getRange(2, 1, 1, backup.length)\n          .setValues([backup]);\n\n        /*\n         * Tidy timesheet.\n         * Ensure at least one data row before deleting,\n         *  to avoid error.\n         *\n         */\n        if(i<2) TimeSheet.appendRow(['']);\n\n        // Delete copied row\n        TimeSheet.deleteRow(Number(i)+1);\n\n        return [val,name];\n      }\n    };\n\n    // If 'shift end' clicked before 'break end'.\n    if(data[i][0] == \"bb\")\n      throw \"Please end your break.\";\n\n    // If 'shift end' clicked without starting shift.\n    throw \"Please start your shift.\";\n  }\n}\n```", "```js\n<!DOCTYPE html>\n<html>\n  <head>\n    <base target=\"_top\">\n    <link rel=\"stylesheet\" href=\"https://ssl.gstatic.com/docs/script/css/add-ons.css\" />\n    <script src=\"img/jquery.min.js\"></script>\n  </head>\n\n  <body>\n    <div>\n      <fieldset style=\"padding-bottom:25px;\">\n        <legend>Timesheet</legend>\n        <select id=\"employee\" name=\"employee\">\n          <? for(var i in empList){ ?>\n              <option value=\"<?= empList[i] ?>\" > <?= empList[i] ?></option>\n          <? } ?>\n        </select>\n        <br /><br />\n        <button id=\"sb\" value=\"sb\"><span>Shift Start</span></button>\n\n        <button id=\"bb\" value=\"bb\"><span>Break Start</span></button>\n\n        <button id=\"be\" value=\"be\"><span>Break End</span></button>\n        <button id=\"se\" value=\"se\"><span>Shift End</span></button>\n      </fieldset>\n\n      <fieldset>\n        <div id=\"message\"><?!= message ?></div>\n      </fieldset>\n    </div>\n\n    <script>\n      $(function() {\n        // Disable all buttons.\n        $('#sb,#bb,#be,#se').prop(\"disabled\", true);\n\n        // Set drop-down change event.\n        $('#employee').change(getStatus);\n\n        // Set buttons click event.\n        $('#sb,#bb,#be,#se').click(postTime);\n\n        getStatus();\n      });\n\n      function getStatus(){\n        // Remove all previous error messages.\n        $('#error,#success').remove();\n\n        // Disable all buttons.\n        $('#sb,#bb,#be,#se').prop(\"disabled\", true);\n\n        // Get employee shift status.\n        google.script.run\n          .withSuccessHandler(function(status){\n            updateStatus(status);\n           })\n          .getEmpStatus($(\"#employee\").val());\n      }\n\n      function postTime(){\n        // Remove all previous error messages.\n        $('#error,#success').remove();\n\n        // Disable all buttons.\n        $('#sb,#bb,#be,#se').prop(\"disabled\", true);\n\n        // Post shift time to sheet.\n        google.script.run\n          .withSuccessHandler(function(msg){\n             updateStatus(msg[0]);\n           })\n          .withFailureHandler(function(msg, elm){\n             showError(msg, elm);\n           })\n          .withUserObject(this)\n          .postTime($(\"#employee\").val(),$(this).val());\n      }\n\n      function updateStatus(status){\n        // Enable appropriate buttons only.\n        switch(status){\n          case \"sb\": $('#bb,#se').prop(\"disabled\", false); break;\n          case \"bb\": $('#be').prop(\"disabled\", false); break;\n          case \"be\": $('#se').prop(\"disabled\", false); break;\n          default: $('#sb').prop(\"disabled\", false);\n        }      \n      }\n\n      function showError(msg, elm) {\n        var span = $('<span id=\"error\" class=\"error\">' + msg + '</span>');\n        $(elm).after(span);\n      }\n\n    </script>\n  </body>\n</html>\n```"]