- en: 'Chapter 8. The App: Selection UI via Drag-and-Drop'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though drag-and-drop functionality has existed since 1999 when Microsoft
    implemented it in Internet Explorer 5.0, HTML5 brings it to the fore in a more
    standard way. The specification defines a set of APIs, event handlers, and markup
    for adding drag-and-drop functionality (DnD) to your enterprise application. To
    demonstrate this, we will implement the ability to drag-and-drop movie showtimes
    into a staging area in our MovieNow enterprise application to indicate movies
    the user is interested in seeing.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main topics covered in this chapter are:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding showtimes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling showtimes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What a drag
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drop it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding showtimes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We temporarily removed the showtimes from [Chapter 4](ch04.html "Chapter 4. The
    App: Getting Movies Via Geolocation"), *The App: Getting Movies via Geoloaction*
    to make room for movie data, synopses, trailers, and ratings. We will now put
    showtimes back. To do this, we will modify the `displayShowtimes` method in `movienow.geolocation.js`
    by inserting a `div` tag for showtimes and looping through the array of showtimes
    contained in the `movie` object we previously constructed. Notice how we include
    a `data-movie` attribute containing the theater ID, the movie ID, and the showtime.
    We do this in order to save some data about the showtime for later use when we
    want to know to which movie and which theater the showtime belongs.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will insert the following code snippet into the `displayShowtimes` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The complete method should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you preview this change in a web browser, you should see something akin
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding showtimes](img/5689_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Styling showtimes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Of course, the raw showtime data does not look quite the way we traditionally
    look at time. We are going to need to format the time to make sure our users understand
    the data appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: 'To accomplish this, we will modify the following line in `displayShowtimes`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We will wrap the display of the showtime with a call to a `formatTime` method,
    which we will write momentarily. Change the previous line so that it looks similar
    to the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We can then add the following method to format the time. This method takes the
    string passed into it, gets the first two characters for the hour, the adjacent
    two characters for the minute, and then interprets and modifies the hour data
    to change it from a 24-hour clock to a 12-hour clock.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The preview for this change should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling showtimes](img/5689_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To make the showtimes a little more presentable, we add the following styles
    to `styles.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We are floating the showtimes to the left-hand side so that they are arranged
    horizontally, and adding a border around them to discern them from the other content.
    Lastly, we set the cursor to move so that when you hover the mouse over them,
    the mouse pointer changes to the move icon for your operating system to indicate
    that the showtime is a movable object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Refreshing the preview should show something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling showtimes](img/5689_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What a drag
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing to do to make something draggable in HTML5 is to append the
    `draggable` attribute to the element. This signals to the web browser to create
    a ghost image of the element that will appear and follow the mouse pointer when
    the user triggers a mouse down event, effectively "dragging" the element, and
    disappearing when the mouse button is released.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change this line in `displayShowtimes` where we are displaying the showtime:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'It should now include the `draggable="true"` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Next, add the following CSS style to `styles.css`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The prefix `-khtml` is for old versions of Safari.
  prefs: []
  type: TYPE_NORMAL
- en: Because the default behavior on browsers when a user clicks and drags is selection
    of text highlighting we need to override this behavior. The styles given previously
    are shorthands for different browsers to prevent this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For Internet Explorer, we will need a JavaScript solution to override the default
    selection behavior for dragging since there is no equivalent. We will cover this
    when implementing the JavaScript for the drag-and-drop behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we will need some JavaScript to handle the events triggered when dragging.
    To get started, we will need to create a new JavaScript file. We will call it
    `movienow.draganddrop.js` and place it in the `js` folder. We will also need to
    add a reference to this new file in `index.html`. Add the following above the
    closing `body` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The script tags in `index.html` should look similar to the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Handling drag with JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In `movienow.draganddrop.js`, we will start by creating a simple object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Within that object, we will add an `init` method to execute when the showtimes
    are loaded onto the page. Take a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `init` method uses `jQuery` to find all draggable elements, that is, elements
    with the `draggable="true`" attribute and value. It then loops the collection
    of draggable elements and adds an event listener for the `dragstart` and `dragend`
    events. When a draggable element is dragged, the dragstart event is triggered.
    All event listeners in turn are invoked. In this case, we are simply doing nothing
    and returning `false`, but later on, we will do something a little bit more interesting.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Drag events**'
  prefs: []
  type: TYPE_NORMAL
- en: '`dragstart` – fires when a draggable element begins to be dragged'
  prefs: []
  type: TYPE_NORMAL
- en: '`drag` – fires when the mouse is moved while a draggable element is being dragged'
  prefs: []
  type: TYPE_NORMAL
- en: '`dragend` – fires when a draggable element is dropped (when the user releases
    the mouse button)'
  prefs: []
  type: TYPE_NORMAL
- en: '`dragenter` – fires whenever a target element has a dragging element dragged
    into it'
  prefs: []
  type: TYPE_NORMAL
- en: '`dragover` – fires for a target element whenever the mouse moves while a dragging
    element is inside it'
  prefs: []
  type: TYPE_NORMAL
- en: '`dragleave` – fires whenever a target element has a dragging element dragged
    from it'
  prefs: []
  type: TYPE_NORMAL
- en: '`drop` – fires whenever a target element has a dragging element released while
    inside it'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we need to invoke the `init` method when the movie data loads. In
    the `displayShowtimes` method in `movienow.geolocation.js`, we will need to end
    the following line as the last line of the method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we continue, we need to add the following for the sake of Internet Explorer.
    Since Internet Explorer does not have a way of using CSS to override the default
    selection behavior on drag, we need to use a JavaScript implementation. In this
    case, we handle the `selectstart` event and indicate to the browser that we are
    dragging and dropping when it is triggered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Our `init` method should now look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Drop it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we can drag stuff around, let us look at how we drop them and do something
    useful when they are dropped. First of all, we will need a place to drop elements.
    For showtimes, we will create an area on the right-hand side of the page for dropping
    elements. Once elements are dropped there, they will be displayed above the **Top
    5 Box Office** section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us add a couple of `div` tags within the `aside` tag in `index.html`. We
    will call them `dropzone` and `dropstage`. Add the following lines to the beginning
    of the `aside` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The beginning of the `aside` tag should look similar to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have a place to drop elements and a place to stage elements once
    they have been dropped, let us focus on `dropzone`. This is the area in which
    we will drop elements. Add the following style to `styles.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that `filter:progid` and `progid` are Internet Explorer specific.
  prefs: []
  type: TYPE_NORMAL
- en: 'This should add a yellow box that overlays the right-hand side. Your preview
    should look something like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Drop it](img/5689_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Toggling the drop zone
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us now revisit `movienow.draganddrop.js`. Remember that we added event listeners
    for when a drag is started and when a drag is ended. Let us use this to hide and
    show the drop zone when dragging.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following to the `dragstart` event listener:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following to the `dragend` event listener:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The event listeners should look similar to the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the drop zone to be hidden by default, adding the following line to the
    `#dropzone` style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: At this point, when you preview, the drop zone should only appear when you are
    dragging a showtime.
  prefs: []
  type: TYPE_NORMAL
- en: Transferring some data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are starting to understand the mechanics of dragging-and-dropping. However,
    in order to make our dragging functionality more interesting, we will need to
    attach some data to our draggable elements so that once dropped, we have something
    interesting to show. For the sake of simplicity, let us transfer the element itself.
    To do this, we set the `dataTransfer` property of the `event` object. The `event`
    object allows us to track events on the page and manage data about them. It is
    an argument for all event listeners.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following line to the `dragstart` event listener:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The `dragstart` event listener should look similar to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: We will then need to add some event listeners to the drop zone so that when
    an element is dropped upon it, we can have it do something interesting. In this
    case, we will display it on the drop stage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following to the `init` method in `movienow.draganddrop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The `drop` event is central. This is where we handle what happens when an element
    is dropped. Notice that we take the data stored on `dragstart` and append it to
    the `div` tag of `dropstage`. We must also stop propagation, prevent default behavior,
    and return `false` on the `drop`, `dragover`, and `dragenter` events to prevent
    the browser from browsing to the element.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have the scaffolding for dragging worked out, we will want to display
    the movie data along with the showtime and style everything for better presentation.
    We will do this first of all by adding some more data to the `event` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to the dragstart event listener so that we can capture
    the movie title and theater title as well as the time data as separate datapoints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The event listener should look similar to the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `drop` event listener for the drop zone, modify the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We will need to build some HTML to insert into the DOM object. Take the `Title`
    and `Time` datapoints and display them accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The entire drop event listener should look similar to the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, we will need to style the drop stage so as showtimes are dropped onto
    it, they look presentable. Add the following to `styles.css` to display the selected
    time''s data and the drop stage appropriately:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that `display` is set to `none` on `#dropstage`. The `drop` event listener
    actually shows this section so that it only displays when there are dropped items.
    We will also need to tweak the style for `aside h2` so that the **Top 5 Box Office**
    text does not wrap. To do this, simply add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Now that the drop stage is styled, we should see our showtimes displayed appropriately
    when we drop them on the drop zone. Try it out.
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying the results](img/5689_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we walked through how to set items as draggable by marking
    them as such. We walked through the mechanics of dragging-and-dropping and the
    events that go with this orchestration. Furthermore, we walked through how to
    put all of this together to achieve some interesting functionality for your HTML5
    enterprise application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will talk about HTML5 forms. We will use them to submit
    tweets about specific showtimes to Twitter.
  prefs: []
  type: TYPE_NORMAL
