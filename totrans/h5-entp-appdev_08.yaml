- en: 'Chapter 8. The App: Selection UI via Drag-and-Drop'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。应用：通过拖放选择UI
- en: Even though drag-and-drop functionality has existed since 1999 when Microsoft
    implemented it in Internet Explorer 5.0, HTML5 brings it to the fore in a more
    standard way. The specification defines a set of APIs, event handlers, and markup
    for adding drag-and-drop functionality (DnD) to your enterprise application. To
    demonstrate this, we will implement the ability to drag-and-drop movie showtimes
    into a staging area in our MovieNow enterprise application to indicate movies
    the user is interested in seeing.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管拖放功能自1999年微软在Internet Explorer 5.0中实现以来就已经存在，但HTML5以一种更标准的方式将其推向前台。该规范定义了一组API、事件处理程序和标记，用于将拖放功能（DnD）添加到您的企业应用程序中。为了演示这一点，我们将在MovieNow企业应用程序中实现将电影放映时间拖放到预演区域的功能，以指示用户感兴趣观看的电影。
- en: 'The main topics covered in this chapter are:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主要主题是：
- en: Adding showtimes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加放映时间
- en: Styling showtimes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 样式化放映时间
- en: What a drag
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 真是糟糕
- en: Drop it
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 放下它
- en: Adding showtimes
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加放映时间
- en: 'We temporarily removed the showtimes from [Chapter 4](ch04.html "Chapter 4. The
    App: Getting Movies Via Geolocation"), *The App: Getting Movies via Geoloaction*
    to make room for movie data, synopses, trailers, and ratings. We will now put
    showtimes back. To do this, we will modify the `displayShowtimes` method in `movienow.geolocation.js`
    by inserting a `div` tag for showtimes and looping through the array of showtimes
    contained in the `movie` object we previously constructed. Notice how we include
    a `data-movie` attribute containing the theater ID, the movie ID, and the showtime.
    We do this in order to save some data about the showtime for later use when we
    want to know to which movie and which theater the showtime belongs.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们暂时从[第4章](ch04.html "第4章。应用：通过地理位置获取电影")*应用：通过地理位置获取电影*中移除了放映时间，以腾出空间放置电影数据、剧情简介、预告片和评分。现在我们将重新添加放映时间。为此，我们将通过在`movienow.geolocation.js`中的`displayShowtimes`方法中插入一个`div`标签来包含放映时间，并遍历我们之前构建的`movie`对象中包含的放映时间数组。注意我们如何包含一个`data-movie`属性，其中包含影院ID、电影ID和放映时间。我们这样做是为了保存一些关于放映时间的数据，以便在以后我们需要知道放映时间属于哪部电影和哪个影院时使用。
- en: 'We will insert the following code snippet into the `displayShowtimes` method:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把以下代码片段插入到`displayShowtimes`方法中：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The complete method should look like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的方法应如下所示：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you preview this change in a web browser, you should see something akin
    to the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在网页浏览器中预览此更改，您应该看到以下类似的内容：
- en: '![Adding showtimes](img/5689_08_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![添加放映时间](img/5689_08_01.jpg)'
- en: Styling showtimes
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 样式化放映时间
- en: Of course, the raw showtime data does not look quite the way we traditionally
    look at time. We are going to need to format the time to make sure our users understand
    the data appropriately.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，原始的放映时间数据看起来并不像我们传统上看时间的方式。我们需要格式化时间，以确保我们的用户正确理解数据。
- en: 'To accomplish this, we will modify the following line in `displayShowtimes`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们将修改以下`displayShowtimes`中的以下行：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We will wrap the display of the showtime with a call to a `formatTime` method,
    which we will write momentarily. Change the previous line so that it looks similar
    to the following line:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用即将编写的`formatTime`方法包装放映时间的显示。更改之前的行，使其看起来类似于以下行：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We can then add the following method to format the time. This method takes the
    string passed into it, gets the first two characters for the hour, the adjacent
    two characters for the minute, and then interprets and modifies the hour data
    to change it from a 24-hour clock to a 12-hour clock.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以添加以下方法来格式化时间。此方法接收传递给它的字符串，获取小时的第一两个字符，分钟的相邻两个字符，然后解释并修改小时数据，将其从24小时制改为12小时制。
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The preview for this change should look like the following screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此更改的预览应类似于以下截图：
- en: '![Styling showtimes](img/5689_08_02.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![样式化放映时间](img/5689_08_02.jpg)'
- en: 'To make the showtimes a little more presentable, we add the following styles
    to `styles.css`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使放映时间更加美观，我们在`styles.css`中添加以下样式：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We are floating the showtimes to the left-hand side so that they are arranged
    horizontally, and adding a border around them to discern them from the other content.
    Lastly, we set the cursor to move so that when you hover the mouse over them,
    the mouse pointer changes to the move icon for your operating system to indicate
    that the showtime is a movable object.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将放映时间浮动到左侧，以便它们水平排列，并在它们周围添加一个边框，以便与其他内容区分开来。最后，我们将光标设置为移动，这样当您将鼠标悬停在它们上时，鼠标指针会变为操作系统中的移动图标，以指示放映时间是一个可移动的对象。
- en: 'Refreshing the preview should show something like the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新预览应显示如下内容：
- en: '![Styling showtimes](img/5689_08_03.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![放映时间样式](img/5689_08_03.jpg)'
- en: What a drag
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 真是件麻烦事
- en: The first thing to do to make something draggable in HTML5 is to append the
    `draggable` attribute to the element. This signals to the web browser to create
    a ghost image of the element that will appear and follow the mouse pointer when
    the user triggers a mouse down event, effectively "dragging" the element, and
    disappearing when the mouse button is released.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 HTML5 中使某个元素可拖动的第一步是将 `draggable` 属性附加到该元素。这会向浏览器发出信号，创建一个元素幽灵图像，当用户触发鼠标按下事件时，该图像将出现并跟随鼠标指针，从而实现“拖动”元素，并在鼠标按钮释放时消失。
- en: 'Change this line in `displayShowtimes` where we are displaying the showtime:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `displayShowtimes` 中更改此行，其中我们显示放映时间：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It should now include the `draggable="true"` attribute:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应包括 `draggable="true"` 属性：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Next, add the following CSS style to `styles.css`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将以下 CSS 样式添加到 `styles.css`。
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The prefix `-khtml` is for old versions of Safari.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 前缀 `-khtml` 是用于旧版 Safari 的。
- en: Because the default behavior on browsers when a user clicks and drags is selection
    of text highlighting we need to override this behavior. The styles given previously
    are shorthands for different browsers to prevent this behavior.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于浏览器在用户点击并拖动时的默认行为是选择文本高亮，我们需要覆盖此行为。之前给出的样式是针对不同浏览器的简写，以防止这种行为。
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For Internet Explorer, we will need a JavaScript solution to override the default
    selection behavior for dragging since there is no equivalent. We will cover this
    when implementing the JavaScript for the drag-and-drop behavior.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Internet Explorer，我们需要一个 JavaScript 解决方案来覆盖拖动的默认选择行为，因为没有等效功能。我们将在实现拖放行为时介绍这一点。
- en: 'Finally, we will need some JavaScript to handle the events triggered when dragging.
    To get started, we will need to create a new JavaScript file. We will call it
    `movienow.draganddrop.js` and place it in the `js` folder. We will also need to
    add a reference to this new file in `index.html`. Add the following above the
    closing `body` tag:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要一些 JavaScript 来处理拖动时触发的事件。为了开始，我们需要创建一个新的 JavaScript 文件。我们将称之为 `movienow.draganddrop.js`
    并将其放置在 `js` 文件夹中。我们还需要在 `index.html` 中添加对这个新文件的引用。在关闭 `body` 标签之前添加以下内容：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The script tags in `index.html` should look similar to the following code snippet:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.html` 中的脚本标签应类似于以下代码片段：'
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Handling drag with JavaScript
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 JavaScript 处理拖动
- en: 'In `movienow.draganddrop.js`, we will start by creating a simple object:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `movienow.draganddrop.js` 中，我们将首先创建一个简单的对象：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Within that object, we will add an `init` method to execute when the showtimes
    are loaded onto the page. Take a look at the following code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在该对象中，我们将添加一个 `init` 方法，当放映时间加载到页面时执行。看看以下代码：
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `init` method uses `jQuery` to find all draggable elements, that is, elements
    with the `draggable="true`" attribute and value. It then loops the collection
    of draggable elements and adds an event listener for the `dragstart` and `dragend`
    events. When a draggable element is dragged, the dragstart event is triggered.
    All event listeners in turn are invoked. In this case, we are simply doing nothing
    and returning `false`, but later on, we will do something a little bit more interesting.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`init` 方法使用 `jQuery` 查找所有可拖动元素，即具有 `draggable="true"` 属性和值的元素。然后它遍历可拖动元素的集合，并为
    `dragstart` 和 `dragend` 事件添加事件监听器。当可拖动元素被拖动时，会触发 dragstart 事件。所有事件监听器依次被调用。在这种情况下，我们只是什么也不做并返回
    `false`，但稍后我们将做一些更有趣的事情。'
- en: Note
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Drag events**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**拖动事件**'
- en: '`dragstart` – fires when a draggable element begins to be dragged'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`dragstart` – 当可拖动元素开始被拖动时触发'
- en: '`drag` – fires when the mouse is moved while a draggable element is being dragged'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`drag` – 当鼠标移动且可拖动元素正在被拖动时触发'
- en: '`dragend` – fires when a draggable element is dropped (when the user releases
    the mouse button)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`dragend` – 当可拖动元素被放下（当用户释放鼠标按钮时）时触发'
- en: '`dragenter` – fires whenever a target element has a dragging element dragged
    into it'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`dragenter` – 当目标元素中拖入一个拖动元素时触发'
- en: '`dragover` – fires for a target element whenever the mouse moves while a dragging
    element is inside it'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`dragover` – 当鼠标在拖动元素内部移动时，会触发目标元素'
- en: '`dragleave` – fires whenever a target element has a dragging element dragged
    from it'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`dragleave` – 当目标元素中拖出拖动元素时触发'
- en: '`drop` – fires whenever a target element has a dragging element released while
    inside it'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`drop` – 当目标元素中释放拖动元素时触发'
- en: 'Finally, we need to invoke the `init` method when the movie data loads. In
    the `displayShowtimes` method in `movienow.geolocation.js`, we will need to end
    the following line as the last line of the method:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当电影数据加载时，我们需要调用 `init` 方法。在 `movienow.geolocation.js` 中的 `displayShowtimes`
    方法，我们需要将以下行作为方法的最后一行结束：
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Before we continue, we need to add the following for the sake of Internet Explorer.
    Since Internet Explorer does not have a way of using CSS to override the default
    selection behavior on drag, we need to use a JavaScript implementation. In this
    case, we handle the `selectstart` event and indicate to the browser that we are
    dragging and dropping when it is triggered:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，我们需要添加以下内容以适应 Internet Explorer。由于 Internet Explorer 没有使用 CSS 覆盖拖动默认选择行为的方法，我们需要使用
    JavaScript 实现。在这种情况下，我们处理 `selectstart` 事件，并在它被触发时向浏览器指示我们正在拖放：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Our `init` method should now look like the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `init` 方法现在应该看起来像以下这样：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Drop it
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 放下它
- en: Now that we can drag stuff around, let us look at how we drop them and do something
    useful when they are dropped. First of all, we will need a place to drop elements.
    For showtimes, we will create an area on the right-hand side of the page for dropping
    elements. Once elements are dropped there, they will be displayed above the **Top
    5 Box Office** section.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们可以拖动东西，让我们看看如何放下它们，当它们被放下时做一些有用的事情。首先，我们需要一个放置元素的地方。对于放映时间，我们将在页面右侧创建一个区域来放置元素。一旦元素被放置在那里，它们将显示在
    **Top 5 Box Office** 部分之上。
- en: 'Let us add a couple of `div` tags within the `aside` tag in `index.html`. We
    will call them `dropzone` and `dropstage`. Add the following lines to the beginning
    of the `aside` tag:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `index.html` 中的 `aside` 标签内添加几个 `div` 标签。我们将它们命名为 `dropzone` 和 `dropstage`。将以下行添加到
    `aside` 标签的开头：
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The beginning of the `aside` tag should look similar to the following code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`aside` 标签的开头应该看起来像以下代码：'
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now that we have a place to drop elements and a place to stage elements once
    they have been dropped, let us focus on `dropzone`. This is the area in which
    we will drop elements. Add the following style to `styles.css`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个放置元素的地方，以及一个放置元素的地方，一旦它们被放下，让我们专注于 `dropzone`。这是我们放置元素的区域。将以下样式添加到 `styles.css`：
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Tip
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Notice that `filter:progid` and `progid` are Internet Explorer specific.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`filter:progid` 和 `progid` 是针对 Internet Explorer 的特定功能。
- en: 'This should add a yellow box that overlays the right-hand side. Your preview
    should look something like the following screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该添加一个覆盖右侧的黄色框。你的预览应该看起来像以下截图：
- en: '![Drop it](img/5689_08_04.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![放下它](img/5689_08_04.jpg)'
- en: Toggling the drop zone
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 切换放置区域
- en: Let us now revisit `movienow.draganddrop.js`. Remember that we added event listeners
    for when a drag is started and when a drag is ended. Let us use this to hide and
    show the drop zone when dragging.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重新审视 `movienow.draganddrop.js`。记住，我们为拖动开始和拖动结束添加了事件监听器。让我们使用这些来在拖动时隐藏和显示放置区域。
- en: 'Add the following to the `dragstart` event listener:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容添加到 `dragstart` 事件监听器：
- en: '[PRE19]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Add the following to the `dragend` event listener:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容添加到 `dragend` 事件监听器：
- en: '[PRE20]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The event listeners should look similar to the following code snippet:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 事件监听器应该看起来像以下代码片段：
- en: '[PRE21]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Set the drop zone to be hidden by default, adding the following line to the
    `#dropzone` style:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 默认隐藏放置区域，向 `#dropzone` 样式添加以下行：
- en: '[PRE22]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: At this point, when you preview, the drop zone should only appear when you are
    dragging a showtime.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，当你预览时，放置区域应该只在拖动放映时间时出现。
- en: Transferring some data
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转移一些数据
- en: We are starting to understand the mechanics of dragging-and-dropping. However,
    in order to make our dragging functionality more interesting, we will need to
    attach some data to our draggable elements so that once dropped, we have something
    interesting to show. For the sake of simplicity, let us transfer the element itself.
    To do this, we set the `dataTransfer` property of the `event` object. The `event`
    object allows us to track events on the page and manage data about them. It is
    an argument for all event listeners.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始理解拖放机制。然而，为了使我们的拖动功能更有趣，我们需要将一些数据附加到可拖动的元素上，这样一旦放下，我们就有一些有趣的东西可以展示。为了简单起见，让我们转移元素本身。为此，我们设置
    `event` 对象的 `dataTransfer` 属性。`event` 对象允许我们跟踪页面上的事件并管理它们的数据。它是所有事件监听器的参数。
- en: 'Add the following line to the `dragstart` event listener:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下行添加到 `dragstart` 事件监听器：
- en: '[PRE23]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The `dragstart` event listener should look similar to the following code:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`dragstart` 事件监听器应该看起来像以下代码：'
- en: '[PRE24]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We will then need to add some event listeners to the drop zone so that when
    an element is dropped upon it, we can have it do something interesting. In this
    case, we will display it on the drop stage.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在拖放区域添加一些事件监听器，以便当元素被放置在其上时，我们可以让它做一些有趣的事情。在这种情况下，我们将在拖放阶段显示它。
- en: 'Add the following to the `init` method in `movienow.draganddrop.js`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容添加到`movienow.draganddrop.js`中的`init`方法：
- en: '[PRE25]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `drop` event is central. This is where we handle what happens when an element
    is dropped. Notice that we take the data stored on `dragstart` and append it to
    the `div` tag of `dropstage`. We must also stop propagation, prevent default behavior,
    and return `false` on the `drop`, `dragover`, and `dragenter` events to prevent
    the browser from browsing to the element.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`drop`事件是核心。这是处理元素被拖放时发生的事情的地方。请注意，我们从`dragstart`中获取存储的数据并将其附加到`dropstage`的`div`标签上。我们还必须在`drop`、`dragover`和`dragenter`事件上停止传播、防止默认行为并返回`false`，以防止浏览器浏览到该元素。'
- en: Displaying the results
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示结果
- en: Now that we have the scaffolding for dragging worked out, we will want to display
    the movie data along with the showtime and style everything for better presentation.
    We will do this first of all by adding some more data to the `event` object.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了拖动的框架，我们希望显示电影数据以及放映时间和风格，以更好地展示。我们首先通过向`event`对象添加更多数据来实现这一点。
- en: 'Add the following lines to the dragstart event listener so that we can capture
    the movie title and theater title as well as the time data as separate datapoints:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下行添加到拖动开始事件监听器中，以便我们可以捕获电影标题、剧院标题以及时间数据作为单独的数据点：
- en: '[PRE26]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The event listener should look similar to the following code snippet:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 事件监听器应类似于以下代码片段：
- en: '[PRE27]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the `drop` event listener for the drop zone, modify the following line:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在拖放区域的`drop`事件监听器中，修改以下行：
- en: '[PRE28]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We will need to build some HTML to insert into the DOM object. Take the `Title`
    and `Time` datapoints and display them accordingly:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要构建一些HTML以插入到DOM对象中。将`Title`和`Time`数据点取出来并相应地显示：
- en: '[PRE29]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The entire drop event listener should look similar to the following code snippet:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 整个`drop`事件监听器应类似于以下代码片段：
- en: '[PRE30]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Lastly, we will need to style the drop stage so as showtimes are dropped onto
    it, they look presentable. Add the following to `styles.css` to display the selected
    time''s data and the drop stage appropriately:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要为拖放阶段设置样式，以便当放映时间被拖放到它上面时，它们看起来是可展示的。将以下内容添加到`styles.css`中，以适当地显示选定时间的数据和拖放阶段：
- en: '[PRE31]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Notice that `display` is set to `none` on `#dropstage`. The `drop` event listener
    actually shows this section so that it only displays when there are dropped items.
    We will also need to tweak the style for `aside h2` so that the **Top 5 Box Office**
    text does not wrap. To do this, simply add the following code:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到`#dropstage`上的`display`被设置为`none`。`drop`事件监听器实际上显示了这一部分，以便它仅在存在拖放项时显示。我们还需要调整`aside
    h2`的样式，以便**Top 5 Box Office**文本不会换行。为此，只需添加以下代码：
- en: '[PRE32]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Now that the drop stage is styled, we should see our showtimes displayed appropriately
    when we drop them on the drop zone. Try it out.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在拖放阶段已经设置了样式，当我们将其拖放到拖放区域时，应该能够适当地显示我们的放映时间。试一试。
- en: '![Displaying the results](img/5689_08_05.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![显示结果](img/5689_08_05.jpg)'
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we walked through how to set items as draggable by marking
    them as such. We walked through the mechanics of dragging-and-dropping and the
    events that go with this orchestration. Furthermore, we walked through how to
    put all of this together to achieve some interesting functionality for your HTML5
    enterprise application.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了如何通过标记它们来设置可拖动项。我们介绍了拖放和与之相关的事件的机制。此外，我们还介绍了如何将这些内容组合起来，为您的HTML5企业应用程序实现一些有趣的功能。
- en: In the next chapter, we will talk about HTML5 forms. We will use them to submit
    tweets about specific showtimes to Twitter.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论HTML5表单。我们将使用它们来提交关于特定放映时间的推文到Twitter。
