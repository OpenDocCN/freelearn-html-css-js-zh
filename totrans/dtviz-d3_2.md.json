["```js\n<!DOCTYPE html>\n<title>A title</title>\n\n<div>\n  <p>A paragraph of text</p>\n</div>\n\n<ul>\n  <li>List item</li>\n  <li>List item 2, <em><strong>italic</strong></em></li>\n</ul>\n```", "```js\ndocument.getElementsByTagName('strong')[0].style.setProperty('text-decoration', 'underline')\n```", "```js\nd3.select('strong').style('text-decoration', 'underline')\n```", "```js\n<table class=\"table\">\n  <thead>\n    <tr><td>One</td><td>Two</td><td>Three</td><td>Four</td><td>Five</td></tr>\n  </thead>\n  <tbody>\n    <tr><td>q</td><td>w</td><td>e</td><td>r</td><td>t</td></tr>\n    <tr><td>a</td><td>s</td><td>d</td><td>f</td><td>g</td></tr>\n    <tr><td>z</td><td>x</td><td>c</td><td>v</td><td>b</td></tr>\n  </tbody>\n</table>\n```", "```js\nd3.selectAll('td').style('color', 'red')\n```", "```js\nd3.selectAll('thead').selectAll('td').style('font-weight', 'bold')\n```", "```js\nd3.selectAll('tbody tr').selectAll('td')\n  .style('color', function (d, i) { return i%2 ? 'green' : 'red'; })\n```", "```js\nvar newCol = d3.selectAll('tr').append('td')\n```", "```js\nnewCol.text('a')\n```", "```js\nnewCol.text(function (d, i) { return ['Six', 'y', 'h', 'n'][i] })\n```", "```js\nd3.selectAll('tr')[0][3].remove()\n```", "```js\nvar Data;\n```", "```js\nvar table = d3.select('#graph')\n  .append('table')\n  .attr('class', 'table');\n\nvar thead = table.append('thead'),\n  tbody = table.append('tbody');\n```", "```js\nvar reload = function () {\n  d3.csv('villains.csv', function (data) {\n    Data = data;\n    redraw();\n  });\n};\nreload();\n```", "```js\n{\n  \"Villain\": \"Abzorbaloff (Victor Kennedy)\",\n  \"Year first\": \"2006\",\n  \"Year last\": \"2006\",\n  \"Doc. no.\": \"10\",\n  \"Doctor actor\": \"David Tennant\",\n  \"Epi- sodes\": \"1\",\n  \"Stories, total\": \"1\",\n  \"Motivation (invasion earth, end of universe, etc)\": \"Kill humans\",\n  \"Story titles\": \"Love and Monsters\"\n}\n```", "```js\nvar redraw = function () {\n};\n```", "```js\nvar tr = tbody.selectAll('tr')\n              .data(Data);\n\n  tr.enter()\n    .append('tr');\n\n  tr.exit()\n    .remove();\n```", "```js\ntr.selectAll('td')\n  .data(function (d) { return d3.values(d); })\n  .enter()\n  .append('td')\n  .text(function (d) { return d; });\n```", "```js\ntbody.selectAll('tr')\n  .sort(function (a, b) { return d3.ascending(a['Year first'], b['Year first']); });\n```", "```js\nData = Data.filter(function (d) { return d['Doctor actor'] == 'Matt Smith'; })\nredraw()\n```", "```js\ntbody.selectAll('tr').sort(function (a, b) {\n  return d3.descending(Number(a['Doc. no.']), Number(b['Doc. no.']));\n});\n```", "```js\nData = Data.filter(function (d) { return d['Doctor actor'] == 'Matt Smith'; })\nredraw()\n```", "```js\ntbody.selectAll('tr')\n  .filter(function (d) { return d['Doctor actor'] != 'Matt Smith'; })\n  .remove()\n```", "```js\nvar svg = d3.select('#graph')\n  .append('svg')\n  .style('width', 1024)\n  .style('height', 768);\n```", "```js\nsvg.append('text')\n  .text(\"A picture!\")\n  .attr({x: 10,\n    y: 150,\n      'text-anchor': 'start'});\n```", "```js\nsvg.append('line')\n  .attr({x1: 10,\n    y1: 10,\n    x2: 100,\n    y2: 100,\n    stroke: 'blue',\n    'stroke-width': 3});\n```", "```js\nsvg.append('rect')\n  .attr({x: 200,\n    y: 50,\n    width: 300,\n    height: 400});\n```", "```js\nsvg.select('rect')\n  .attr({stroke: 'green',\n    'stroke-width': 0.5,\n    fill: 'white',\n    rx: 20,\n    ry: 40});\n```", "```js\nsvg.append('circle')\n  .attr({cx: 350,\n    cy: 250,\n    r: 100,\n    fill: 'green',\n    fill-opacity': 0.5,\n    stroke: 'steelblue',\n    'stroke-width': 2});\n```", "```js\nsvg.append('ellipse')\n  .attr({cx: 350,\n    cy: 250,\n    rx: 150,\n    ry: 70,\n    fill: 'green',\n    'fill-opacity': 0.3,\n    stroke: 'steelblue',\n    'stroke-width': 0.7});\n```", "```js\nsvg.append('ellipse')\n  .attr({cx: 350,\n    cy: 250,\n    rx: 20,\n    ry: 70});\n```", "```js\n<svg style=\"width: 1024px; height: 768px;\">\n  <text x=\"10\" y=\"150\" text-anchor=\"start\">A picture!</text>\n  <line x1=\"10\" y1=\"10\" x2=\"100\" y2=\"100\" stroke=\"blue\" stroke-width=\"3\"></line>\n  <rect x=\"200\" y=\"50\" width=\"300\" height=\"400\" stroke=\"green\" stroke-width=\"0.5\" fill=\"white\" rx=\"20\" ry=\"40\"></rect>\n  <circle cx=\"350\" cy=\"250\" r=\"100\" fill=\"green\" fill-opacity=\"0.5\" stroke=\"steelblue\" stroke-width=\"2\"></circle>\n  <ellipse cx=\"350\" cy=\"250\" rx=\"150\" ry=\"70\" fill=\"green\" fill-opacity=\"0.3\" stroke=\"steelblue\" stroke-width=\"0.7\"></ellipse>\n  <ellipse cx=\"350\" cy=\"250\" rx=\"20\" ry=\"70\"></ellipse>\n</svg>\n```", "```js\nsvg.selectAll('ellipse, circle')\n  .attr('transform', 'translate(150, 0)');\n```", "```js\nsvg.selectAll('ellipse, circle')\n  .attr('transform', 'translate(150, 0) rotate(45)');\n```", "```js\nsvg.selectAll('ellipse, circle')\n  .attr('transform', 'translate(150, 0) rotate(-45, 350, 250)');\n```", "```js\nsvg.selectAll('ellipse, circle')\n  .attr('transform', 'translate(150, 0) rotate(-45, 350, 250) scale(1.2)');\n```", "```js\nsvg.selectAll('ellipse, circle')\n  .attr('transform', 'translate(150, 0) scale(1.2) translate(-70, 0) rotate(-45, '+(350/1.2)+', '+(250/1.2)+')');\n```", "```js\nsvg.selectAll('ellipse, circle')\n  .attr('transform', 'translate(150, 0) scale(1.2) translate(-70, 0) rotate(-45, '+(350/1.2)+', '+(250/1.2)+') skewY(20)');\n```", "```js\nsvg.append('path')\n  .attr({d: 'M 100 100 L 300 100 L 200 300 z',\n    stroke: 'black',\n    'stroke-width': 2,\n    fill: 'red',\n    'fill-opacity': 0.7});\n```", "```js\nvar width = 1024,\n  height = 768,\n  margin = 10;\n\nvar svg = d3.select('#graph')\n  .append('svg')\n  .attr('width', width+2*margin)\n  .attr('height', height+2*margin);\n\nvar g = svg.append('g')\n  .attr('transform', 'translate('+margin+', '+margin+')');\n```", "```js\nvar sine = d3.range(0,10).map(\n  function (k) { return [0.5*k*Math.PI,\n                         Math.sin(0.5*k*Math.PI)]; });\n```", "```js\nvar x = d3.scale.linear()\n  .range([0, width/2-margin])\n  .domain(d3.extent(sine, function (d) { return d[0]; })),\n  y = d3.scale.linear().range([height/2-margin, 0]).domain([-1, 1]);\n```", "```js\nvar line = d3.svg.line()\n  .x(function (d) { return x(d[0]); })\n    .y(function (d) { return y(d[1]); });\n```", "```js\ng.append('path')\n  .datum(sine)\n  .attr(\"d\", line)\n  .attr({stroke: 'steelblue',\n        'stroke-width': 2,\n         fill: 'none'});\n```", "```js\nd=\"M0,192L56.88888888888889,0L113.77777777777779,191.99999999999994L170.66666666666669,384L227.55555555555557,192.00000000000006L284.44444444444446,0L341.33333333333337,191.99999999999991L398.2222222222223,384L455.11111111111114,192.00000000000009L512,0\"\n```", "```js\ng.append('path')\n  .datum(sine)\n  .attr(\"d\", line.interpolate('step-before'))\n  .attr({stroke: 'black',\n    'stroke-width': 1,\n    fill: 'none'});\n```", "```js\nvar g2 = svg.append('g')\n  .attr('transform', 'translate('+(width/2+margin)+', '+margin+')');\n```", "```js\nvar area = d3.svg.area()\n  .x(function (d) { return x(d[0]); })\n  .y0(height/2)\n  .y1(function (d) { return y(d[1]); })\n  .interpolate('basis');\n\ng2.append('path')\n  .datum(sine)\n  .attr(\"d\", area)\n  .attr({fill: 'steelblue',\n    'fill-opacity': 0.4});\n```", "```js\ng2.append('path')\n  .datum(sine)\n  .attr(\"d\", line.interpolate('basis'))\n  .attr({stroke: 'steelblue',\n    'stroke-width': 2,\n    fill: 'none'});\n```", "```js\nvar arc = d3.svg.arc();\n\nvar g3 = svg.append('g')\n        .attr('transform', 'translate('+margin+', '+(height/2+margin)+')');\n\ng3.append('path')\n  .attr(\"d\", arc({outerRadius: 100,\n    innerRadius: 50,\n    startAngle: -Math.PI*0.25,\n    endAngle: Math.PI*0.25}))\n  .attr('transform', 'translate(150, 150)')\n  .attr('fill', 'lightslategrey');\n```", "```js\nvar symbols = d3.svg.symbol()\n    .type(function (d, i) {\n      if (d[1] > 0) {\n        return 'triangle-down';\n      }else{\n        return 'triangle-up';\n      }\n    })\n    .size(function (d, i) {\n      if (i%2) {\n        return 0;\n      }else{\n        return 64;\n      }\n    });\n```", "```js\ng2.selectAll('path')\n  .data(sine)\n  .enter()\n  .append('path')\n  .attr('d', symbols)\n  .attr('transform', function (d) { return 'translate('+x(d[0])+','+y(d[1])+')'; })\n  .attr({stroke: 'steelblue',\n      'stroke-width': 2,\n      fill: 'white'});\n```", "```js\ng3.append('g').selectAll('path')\n  .data([{\n    source: {radius: 50,\n                  startAngle: -Math.PI*0.30,\n                  endAngle: -Math.PI*0.20},\n    target: {radius: 50,\n                  startAngle: Math.PI*0.30,\n                  endAngle: Math.PI*0.30}}])\n  .enter()\n  .append('path')\n  .attr(\"d\", d3.svg.chord());\n```", "```js\nvar data = d3.zip(d3.range(0, 12),\n                            d3.shuffle(d3.range(0, 12))),\n  colors = ['linen', 'lightsteelblue', 'lightcyan',\n                   'lavender', 'honeydew', 'gainsboro'];\n```", "```js\nvar chord = d3.svg.chord()\n    .source(function (d) { return d[0]; })\n    .target(function (d) { return d[1]; })\n    .radius(150)\n    .startAngle(function (d) { return -2*Math.PI*(1/data.length)*d; })\n    .endAngle(function (d) {\n      return -2*Math.PI*(1/data.length)*((d-1)%data.length); });\n```", "```js\ng3.append('g')\n  .attr('transform', 'translate(300, 200)')\n  .selectAll('path')\n  .data(data)\n  .enter()\n  .append('path')\n  .attr('d', chord)\n  .attr('fill', function (d, i) { return colors[i%colors.length]; })\n  .attr('stroke', function (d, i) { return colors[(i+1)%colors.length]; });\n```", "```js\nvar g4 = svg.append('g')\n    .attr('transform', 'translate('+(width/2)+','+(height/2)+')');\n\nvar moustache = [\n  {source: {x: 250, y: 100}, target: {x: 500, y: 90}},\n  {source: {x: 500, y: 90}, target: {x: 250, y: 120}},\n  {source: {x: 250, y: 120}, target: {x: 0, y: 90}},\n  {source: {x: 0, y: 90}, target: {x: 250, y: 100}},\n  {source: {x: 500, y: 90}, target: {x: 490, y: 80}},\n  {source: {x: 0, y: 90}, target: {x: 10, y: 80}}\n];\n```", "```js\ng4.selectAll('path')\n  .data(moustache)\n  .enter()\n  .append('path')\n  .attr(\"d\", d3.svg.diagonal())\n  .attr({stroke: 'black',\n              fill: 'none'});\n```", "```js\n  var width = 800,\n  height = 600,\n  margin = 20,\n  svg = d3.select('#graph')\n    .append('svg')\n    .attr({width: width,\n                  height: height});\n```", "```js\nvar x = d3.scale.linear().domain([0, 100]).range([margin, width-margin]);\n```", "```js\nvar axis = d3.svg.axis()\n    .scale(x);\nvar a = svg.append('g')\n  .attr('transform', 'translate(0, 30)')\n  .data(d3.range(0, 100))\n  .call(axis);\n```", "```js\na.selectAll('path')\n  .attr({fill: 'none',\n       stroke: 'black',\n       'stroke-width': 0.5});\na.selectAll('line')\n  .attr({fill: 'none',\n        stroke: 'black',\n        'stroke-width': 0.3});\n```", "```js\naxes.forEach(function (axis, i) {\n```", "```js\n.attr('transform', 'translate(0, '+(i*50+margin)+')')\n```", "```js\nvar axes = [\n  d3.svg.axis().scale(x),\n\n  d3.svg.axis().scale(x)\n    .ticks(5)\n];\n```", "```js\n  d3.svg.axis().scale(x)\n    .tickSubdivide(3)\n    .tickSize(10, 5, 10)\n```", "```js\n  d3.svg.axis().scale(x)\n    .tickValues([0, 20, 50, 70, 100])\n    .tickFormat(function (d, i) {\n      return ['a', 'e', 'i', 'o', 'u'][i];\n    })\n    .orient('top')\n```", "```js\nselector {\n      attribute: value;\n}\n```", "```js\n<style>\n  .axis path,\n  .axis line {\n    fill: none;\n    stroke: black;\n    stroke-width: 1px;\n    shape-rendering: crispEdges;\n  }\n\n  .axis text {\n    font-size: 11px;\n  }\n\n  .axis.red line,\n  .axis.red path {\n    stroke: red;\n  }\n</style>\n```", "```js\naxes.forEach(function (axis, i) {\n  var a = svg.append('g')\n      .classed('axis', true)\n      .classed('red', i%2 == 0)\n      .attr('transform', 'translate(0, '+(i*50+margin)+')')\n      .data(d3.range(0, 100))\n      .call(axis);\n});\n```", "```js\nvar width = 1024,\n    height = 768,\n    rings = 15;\n\nvar svg = d3.select('#graph')\n        .append('svg')\n        .style({width: width,\n                    height: height});\n```", "```js\nvar colors = d3.scale.category20b();\nvar angle = d3.scale.linear().domain([0, 20]).range([0, 2*Math.PI]);\n```", "```js\nvar arc = d3.svg.arc()\n    .innerRadius(function (d) { return d*50/rings; })\n    .outerRadius(function (d) { return 50+d*50/rings; })\n    .startAngle(function (d, i, j) { return angle(j); })\n    .endAngle(function (d, i, j) { return angle(j+1); });\n\nvar shade = {\n  darker: function (d, j) { return d3.rgb(colors(j)).darker(d/rings); },\n  brighter: function (d, j) { return d3.rgb(colors(j)).brighter(d/rings); }\n};\n```", "```js\n[[100, 100, shade.darker],\n [300, 100, shade.brighter]].forEach(function (conf) {\n  svg.append('g')\n    .attr('transform', 'translate('+conf[0]+', '+conf[1]+')')\n    .selectAll('g')\n    .data(colors.range())\n    .enter()\n    .append('g')\n    .selectAll('path')\n    .data(function (d) { return d3.range(0, rings); })\n    .enter()\n    .append('path')\n    .attr(\"d\", arc)\n    .attr('fill', function (d, i, j) { return conf[2](d, j); });\n});\n```"]