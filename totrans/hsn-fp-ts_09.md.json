["```js\nnpm install rxjs\n```", "```js\nclass Listener<T> {\n\n    public update: (message: T) => void;\n\n    public constructor(fn: (message: T) => void) {\n        this.update = fn;\n    }\n\n}\n```", "```js\nclass Producer<T> {\n\n    private _listeners: Listener<T>[] = [];\n\n    public add(listener: Listener<T>) {\n        this._listeners.push(listener);\n    }\n\n    public remove(listener: Listener<T>) {\n        this._listeners = this._listeners.filter(\n            l => l !== listener\n        );\n    }\n\n    public notify(message: T) {\n        this._listeners.forEach(\n            l => l.update(message)\n        );\n    }\n\n}\n```", "```js\nconst listerner1 = new Listener(\n    (msg: string) => console.log(`Listener 1: ${msg}`)\n);\n\nconst listerner2 = new Listener(\n    (msg: string) => console.log(`Listener 2: ${msg}`)\n);\n\nconst notify = new Producer<string>();\nnotify.add(listerner1);\nnotify.add(listerner2);\nnotify.notify(\"Hello World!\");\n```", "```js\nfunction* iterateOnMultiples(arr: number[], divisor: number) {\n    for (let item of arr) {\n        if (item % divisor === 0) {\n            yield item;\n        }\n    }\n}\n```", "```js\nconst iterator1 = iterateOnMultiples([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3);\n\nconst iteratorResult1 = iterator1.next();\nconsole.log(iteratorResult1.value);\n\nif (iteratorResult1.done === false) {\n\n    const iteratorResult2 = iterator1.next();\n    console.log(iteratorResult2.value);\n\n}\n```", "```js\nconst iterator2 = iterateOnMultiples([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3);\n\nfor (let value of iterator2) {\n    console.log(value);\n}\n```", "```js\nimport { of } from \"rxjs\";\n\nconst observable = of(1);\n\nconst subscription = observable.subscribe(\n    (value) => console.log(value),\n    (error: any) => console.log(error),\n    () => console.log(\"Done!\")\n);\n\nsubscription.unsubscribe();\n```", "```js\nimport { from } from \"rxjs\";\n\nconst observable = from([10, 20, 30]);\n\nconst subscription = observable.subscribe(\n    (value) => console.log(value),\n    (error: any) => console.log(error),\n    () => console.log(\"Done!\")\n);\n\nsubscription.unsubscribe();\n```", "```js\nimport { interval } from \"rxjs\";\n\nconst observable = interval(10);\n\nconst subscription = observable.subscribe(\n    (value) => console.log(value),\n    (error: any) => console.log(error),\n    () => console.log(\"Done!\")\n);\n\nsubscription.unsubscribe();\n```", "```js\nimport { fromEvent } from \"rxjs\";\n\nconst observable = fromEvent(document, \"click\");\n\nconst subscription = observable.subscribe(\n    (value) => console.log(value)\n);\n\nsubscription.unsubscribe();\n```", "```js\nimport { bindCallback } from \"rxjs\";\nimport fetch from \"node-fetch\";\n\nfunction getJSON(url: string, cb: (response: unknown|null) => void) {\n    fetch(url)\n        .then(response => response.json())\n        .then(json => cb(json))\n        .catch(_ => cb(null));\n}\n\nconst uri = \"https://jsonplaceholder.typicode.com/todos/1\";\nconst observableFactory = bindCallback(getJSON);\nconst observable = observableFactory(uri);\n\nconst subscription = observable.subscribe(\n    (value) => console.log(value)\n);\n\nsubscription.unsubscribe();\n```", "```js\nnpm install node-fetch @types/node-fetch\n```", "```js\nimport { bindNodeCallback } from \"rxjs\";\nimport * as fs from \"fs\";\n\nconst observableFactory = bindNodeCallback(fs.readFile);\nconst observable = observableFactory(\"./roadNames.txt\");\n\nconst subscription = observable.subscribe(\n    (value) => console.log(value.toString())\n);\n\nsubscription.unsubscribe();\n```", "```js\nimport { bindCallback } from \"rxjs\";\nimport fetch from \"node-fetch\";\n\nconst uri = \"https://jsonplaceholder.typicode.com/todos/1\";\nconst observable = from(fetch(uri)).pipe(map(x => x.json()));\n\nconst subscription = observable.subscribe(\n (value) => console.log(value.toString())\n);\n\nsubscription.unsubscribe();\n```", "```js\nimport { from } from \"rxjs\";\nimport { max } from \"rxjs/operators\";\n\nconst observable = from<number>([2, 30, 22, 5, 60, 1]);\n\nobservable.pipe(max());\n\nconst subscription = observable.subscribe(\n    (value) => console.log(value)\n);\n\nsubscription.unsubscribe();\n```", "```js\nimport { from } from \"rxjs\";\nimport { every } from \"rxjs/operators\";\n\nconst observable = from<number>([1,2, 3, 4, 5]);\n\nobservable.pipe(every(x => x < 10));\n\nconst subscription = observable.subscribe(\n    (value) => console.log(value)\n);\n\nsubscription.unsubscribe();\n```", "```js\nimport { from } from \"rxjs\";\nimport { find } from \"rxjs/operators\";\n\nconst observable = from<number>([2, 30, 22, 5, 60, 1]);\n\nobservable.pipe(find(x => x > 10));\n\nconst subscription = observable.subscribe(\n    (value) => console.log(value)\n);\n\nsubscription.unsubscribe();\n```", "```js\nimport { from } from \"rxjs\";\nimport { filter } from \"rxjs/operators\";\n\nconst observable = from<number>([2, 30, 22, 5, 60, 1]);\n\nobservable.pipe(filter(x => x > 10));\n\nconst subscription = observable.subscribe(\n    (value) => console.log(value)\n);\n\nsubscription.unsubscribe();\n```", "```js\nimport { from } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\n\nconst observable = from<number>([1, 2, 3]);\n\nobservable.pipe(map(x => 10 * x));\n\nconst subscription = observable.subscribe(\n (value) => console.log(value)\n);\n\nsubscription.unsubscribe();\n```", "```js\nimport { from } from \"rxjs\";\nimport { reduce } from \"rxjs/operators\";\n\nconst observable = from<number>([1, 2, 3, 3, 4, 5]);\n\nobservable.pipe(reduce((x, y) => x + y));\n\nconst subscription = observable.subscribe(\n    (value) => console.log(value)\n);\n\nsubscription.unsubscribe();\n```", "```js\nimport { fromEvent, interval } from \"rxjs\";\nimport { throttle, mapTo, scan } from \"rxjs/operators\";\n\nconst observable = fromEvent(document, \"click\")\n                    .pipe(mapTo(1))\n                    .pipe(throttle(x => interval(100)))\n                    .pipe(scan((acc, one) => acc + one, 0));\n\nconst subscription = observable.subscribe(\n    (value) => console.log(value)\n);\n\nsubscription.unsubscribe();\n```", "```js\nimport { from } from \"rxjs\";\nimport { merge } from \"rxjs/operators\";\n\nconst observableA = from<number>([20, 40, 60, 80, 100]);\nconst observableB = from<number>([1, 1]);\n\nconst observableC = observableA.pipe(merge<number, number>(observableB));\n\nconst subscription = observableC.subscribe(\n    (value) => console.log(value)\n);\n\nsubscription.unsubscribe();\n```", "```js\nimport { from } from \"rxjs\";\nimport { zip } from \"rxjs/operators\";\n\nconst observableA = from<number>([1, 2, 3, 3, 4, 5]);\nconst observableB = from<string>([\"A\", \"B\", \"C\", \"D\"]);\n\nconst observableC = observableA.pipe(zip<number, string>(observableB));\n\nconst subscription = observableC.subscribe(\n    (value) => console.log(value)\n);\n\nsubscription.unsubscribe();\n```"]