- en: Chapter 2. Solving Problems Using JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have learned how to print something using JavaScript on console in the previous
    chapter. Now, let's see the fundamentals behind JavaScript syntax, variables,
    arithmetic operators, and comments.
  prefs: []
  type: TYPE_NORMAL
- en: In the computer world, there is nothing but data. You can read, modify, and
    create new data; however, anything that isn't data simply does not exist. In JavaScript,
    we need to handle data to develop a website.
  prefs: []
  type: TYPE_NORMAL
- en: To understand the basic syntax of JavaScript, first of all you need to know
    that JavaScript is *case sensitive*. You cannot interchange lower case and upper
    case letters in JavaScript. Therefore, when dealing with the JavaScript syntax,
    you need to remember that writing the code is not the only important task, you
    must also watch the syntax whether it's written correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Let me show you an example. In the previous chapter, you have successfully printed
    **Hello World** on your browser using the `document.write();` syntax.
  prefs: []
  type: TYPE_NORMAL
- en: What would happen if you wrote `Document.write("Hello World");`? Yes! It won't
    run successfully. You will get an error message. This kind of errors is known
    as **Uncaught SyntaxError**.
  prefs: []
  type: TYPE_NORMAL
- en: A JavaScript statement is typically written on one line. You may finish your
    statement with a semicolon or not. It is not mandatory to end a statement with
    a semicolon. However, it is a good practice to add a semicolon after each statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Its output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Solving Problems Using JavaScript](img/B04720_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JavaScript keywords (such as for, while, if, switch, case, and so on) are always
    in lowercase. The build-in objects (such as Date, Math, Number, and so on) start
    with uppercase.
  prefs: []
  type: TYPE_NORMAL
- en: Variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We already know that the computer world has nothing but data.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are different types of data (we call them *data types*), as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Your name is a kind of data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your age is data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your grade is also data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yet, they all are different. What is the difference between them? Your name
    only contains a group of *characters* or, as some people also call it, **string**.
    Your age is an **integer** type data. Your grade is a **float** type data. The
    wonderful thing in JavaScript is that you do not have to specify the data type
    before writing a *variable's* name.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JavaScript allows working with three data types. Strings (for example, `"This
    is an example of string"`), numbers (for example, `2015`, `3.1415`, and so on),
    and Boolean (for example, `true` or `false`).
  prefs: []
  type: TYPE_NORMAL
- en: Did we discuss *variables*? Well, you already know the data types. You will
    need *something* to store your data. This *something* is called *variable*. In
    JavaScript, we use `var` before the variable names. Remember that `var` starts
    with small letter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s say that we have 14 apples and 6 oranges. To store them in variables
    we will use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The following example is not the same. Can you tell why?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Yes, JavaScript is case sensitive. All the variables are different here, though
    the values of the variables are the same.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's do some coding. Previously, on console, you printed your name as
    homework. I hope you did it without any trouble. How about we now print your name
    differently using a variable? Assume that your name is `Sherlock Holmes`. What
    kind of data is it?
  prefs: []
  type: TYPE_NORMAL
- en: You are right, it is *string* type. Usually for string type data, we put the
    string between two quotes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To print them using console, you need to type each statement and press *Enter*.
    Take a look at the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Variables](img/B04720_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not copy and paste the codes on the console. You might get a syntax error.
  prefs: []
  type: TYPE_NORMAL
- en: You will see an extra line appearing after you hit *Enter*, stating `undefined`.
    Don't worry about this for now. It just returned a console log.
  prefs: []
  type: TYPE_NORMAL
- en: You stored the `Sherlock Holmes` string on the `name` variable and you stored
    `Detective` on `occupation`. Every time you access `name` or `occupation`, you
    can access the stated strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider that you want to print **Sherlock Holmes** on your screen. Just type
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'After typing, hit *Enter*. You will see **Sherlock Holmes** is printed on the
    screen, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Variables](img/B04720_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Type `document.write(occupation);` and hit *Enter*, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Variables](img/B04720_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You may be wondering why is there no space between **Sherlock Holmes** and **Detective**.
    As, on the console, the history is not automatically removed from the web page
    on the left-hand side and after you hit *Enter* for your second output (`occupation`),
    the string places itself right after the previous string. This will always happen,
    unless you clear your console using the *Ctrl* + *L* keyboard shortcut and reload
    the web page pressing the key *F5*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Your stored variables will also be erased from the memory when you reload the
    web page. Don't worry, you will be taught how to use your variables storing on
    a file in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to join two (or multiple) variables, you add a plus sign (`+`)
    between the two variables, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Can you tell me what will be output of these commands?
  prefs: []
  type: TYPE_NORMAL
- en: 'Yes, you are right. The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sherlock HolmesDetective**'
  prefs: []
  type: TYPE_NORMAL
- en: '**DetectiveSherlock Holmes**'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Your output might be in one line on the web page. If you want to split the lines,
    add a `<br>` HTML tag. The simplest way to add this is to type `document.write("<br>");`
    and hit *Enter*. Your next output will be in a new line.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to add any string (for example, a space) between the two strings
    other than any variables, just type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sherlock Holmes Detective**'
  prefs: []
  type: TYPE_NORMAL
- en: What will happen when you type the following code and hit *Enter*?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Yes! You are absolutely right. The output will be as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**My name is Sherlock Holmes and I am a Detective**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Variables](img/B04720_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, add another variable on the console. Consider that `Sherlock Holmes` is
    24 years old. Do you remember what kind of data age is?
  prefs: []
  type: TYPE_NORMAL
- en: 'Yes, it is an integer type of number. Therefore, type the following code and
    hit *Enter*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You have the following three variables now:'
  prefs: []
  type: TYPE_NORMAL
- en: Name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Occupation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Age
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s print the following output on the web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '**My name is Sherlock Holmes, I''m 24 years old and I am a Detective**'
  prefs: []
  type: TYPE_NORMAL
- en: What will our code be on the console?
  prefs: []
  type: TYPE_NORMAL
- en: 'The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The output can be seen as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Variables](img/B04720_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Printing quotations/inverted commas**'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to print **Shakespeare said, "To be, or not to be: that is the
    question!"** using the `document.write();` syntax, you will probably type the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'However, this will give you an error known as **SyntaxError**. To get rid of
    this error, you need to use a backward slash (`\`) before the two inverted commas.
    The correct code will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Shakespeare said, "To be, or not to be: that is the question!"**'
  prefs: []
  type: TYPE_NORMAL
- en: The same rule applies for single inverted comma (`'`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a quick exercise for you:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose `Tom` has a cat (`Lucy`). The cat, `Lucy`, is `2.4` years old. Store
    the name, cat''s name, and its age on three different variables and print the
    following output using console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Tom''s cat Lucy is 2.4 years old.**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Assume that you bought `4` pounds of apples. Each pound costs you `$1.2`. Store
    the price and quantity of apples on two different variables and print the following
    output using console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**I bought 4 pounds of apples. I had to pay $1.2 for each pound.**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Comments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Suppose you have done a lot of coding and some logical operations, and used
    a number of variables on JavaScript, and you want me to help you with the code
    if any errors occur. When you send me the code, I will not know what you have
    typed unless I have a clear knowledge of JavaScript or you have commented on the
    important lines.
  prefs: []
  type: TYPE_NORMAL
- en: A comment is basically a line of text or code that your browser ignores while
    running. You can compare comments to sticky notes or reminder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'How do you make multiline comments? You mention the comment in the following
    manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Your multiline comment should be between `/*` and `*/`, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Comments](img/B04720_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Arithmetic operators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In JavaScript, like other programming languages, we can do some arithmetic operations.
    In your school, you might have already learned how to add two numbers, subtract
    one number from another number, multiply two numbers, and divide a number with
    another. You can do all these things in JavaScript with the help of a few lines
    of code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In JavaScript, we use the following arithmetic symbols for the operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Operator | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| + | To add |'
  prefs: []
  type: TYPE_TB
- en: '| - | To subtract |'
  prefs: []
  type: TYPE_TB
- en: '| * | To multiply |'
  prefs: []
  type: TYPE_TB
- en: '| / | To divide |'
  prefs: []
  type: TYPE_TB
- en: '| % | To find the reminder (called modulus operator) |'
  prefs: []
  type: TYPE_TB
- en: Addition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Suppose you have two variables, `x` and `y`, with the values `3` and `4`, respectively.
    What should we do on the console to store the values on the variables?
  prefs: []
  type: TYPE_NORMAL
- en: 'Yes, we do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Then, press *Enter*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take another variable that will hold the summation of `x` and `y`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Can you tell me what will happen when we print `z`?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Yes, you are correct, this will print **7**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Addition](img/B04720_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Subtraction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To subtract a number from another, you need to put a minus sign (-) between
    them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this code is **6**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Subtraction](img/B04720_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Multiplication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To multiply two numbers or variables that have integer or float type of data
    stored on them, you just put an asterisk (`*`) between the variables or numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this code is **12**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Multiplication](img/B04720_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Division
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To divide a number with another, you need to put a forward slash (`/`) between
    the numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this code is **7**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Division](img/B04720_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Modulus
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to find the modulus of a number with another, you need to put a
    percentage sign (`%`) between the numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this code is **1**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Modulus](img/B04720_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**What does modulus (%) operator do?**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, from your math class, you have already learned how to divide one number
    with another. Say, you divide 10 by 2\. The result will be 5, which is an integer
    type of number. However, what will happen if you divide 10 by 3? The answer will
    not be an integer. The value is 3.333333333333\. You can also say that the answer
    is 3 and the remainder is 1\. Consider the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`10 = 9 + 1;`'
  prefs: []
  type: TYPE_NORMAL
- en: That is, `(9+1)/3`
  prefs: []
  type: TYPE_NORMAL
- en: '`= 9/3+1/3`'
  prefs: []
  type: TYPE_NORMAL
- en: '`= 3 + 1/3;`'
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, the remainder is 1\. What modulus does is that it finds out the remainder
    and returns it. Therefore, `10%3 = 1`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's summarize all the arithmetic operators that we learned so far in
    one single code.
  prefs: []
  type: TYPE_NORMAL
- en: Can you tell me the output of the following lines?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The summation of x and y is 9**'
  prefs: []
  type: TYPE_NORMAL
- en: '**The subtraction of x and y is 1**'
  prefs: []
  type: TYPE_NORMAL
- en: '**The multiplication of x and y is 20**'
  prefs: []
  type: TYPE_NORMAL
- en: '**The division of x and y is 1.25**'
  prefs: []
  type: TYPE_NORMAL
- en: '**The modulus of x and y is 1**'
  prefs: []
  type: TYPE_NORMAL
- en: 'This output can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Modulus](img/B04720_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'I guess you nailed it. Now, let''s explain them in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: We assigned `5` and `4` to `x` and `y`, respectively
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We assigned the summation of `x` and `y` to the `sum` variable, the subtraction
    of `x` and `y` to the `sub` variable, the multiplication of `x` and `y` to the
    `mul` variable, the division of `x` and `y` to the `div` variable, and the modulus
    of `x` and `y` to the `mod` variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we printed them using the `document.write();` syntax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We used a `<br>` HTML tag to separate the output of each line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: John has 56 pens. He wants to arrange them in seven rows. Each line will have
    an equal number of pens. Write a code that will print the number of pens in each
    row.
  prefs: []
  type: TYPE_NORMAL
- en: '(Hint: take two variables for the number of pens and number of rows, divide
    the number of pens with the number of rows and store the value in a new variable.)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The sample output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**John will have to place XX pens on each line. // XX is the number of pens**'
  prefs: []
  type: TYPE_NORMAL
- en: More operators and operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript has more operators other than those stated earlier. Let's go little
    bit deeper.
  prefs: []
  type: TYPE_NORMAL
- en: Increment or decrement operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you have an integer and you want to increment it by 1 or any number, you
    can type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also increment your variable by 1, typing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'What will you do if you want to increment your variable by more than 1? Well,
    you can follow this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You can increment your variable by typing the following as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that you should not place a space between an operator (for example
    +, -, *, /, and so on ) and equal sign (=).
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will look similar to the following screenshot on the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Increment or decrement operators](img/B04720_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'What about the decrement operator? Yes, you are absolutely right. Decrement
    operations are same as the increment operations. The only thing that changes is
    the sign. Your addition (`+`) operator will be replaced by the subtraction operator
    (`-`). Let''s take a look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also decrement your variable by `1` typing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'What will you do if you want to decrement your variable by more than `1`? Well,
    you can follow this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also decrement your variable by typing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of these codes can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Increment or decrement operators](img/B04720_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: These type of operations are very important for logical operations in JavaScript.
    You will learn about their uses in [Chapter 4](ch04.html "Chapter 4. Diving a
    Bit Deeper"), *Diving a Bit Deeper*.
  prefs: []
  type: TYPE_NORMAL
- en: Assignment operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An assignment operator assigns a value to an operator. I believe that you already
    know about assignment operators, don't you? Well, you use an equal sign (`=`)
    between a variable and its value. By doing this, you assigned the value to the
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The `Sherlock Holmes` string is assigned to the `name` variable. You have already
    learned about increment and decrement operators. Can you tell me what will the
    output of the following codes be?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The output will be **6**.
  prefs: []
  type: TYPE_NORMAL
- en: Do you remember why this has happened?
  prefs: []
  type: TYPE_NORMAL
- en: 'The `x *= 2;` equation is similar to `x = x * 2;` as `x` is equal to `3`, and
    later it is multiplied by `2`. The final number (`3 x 2 = 6`) is assigned to the
    same `x` variable. That''s why we got the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Assignment operators](img/B04720_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s perform the following exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the output of the following code?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'We will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '**w = 32, x = 12, y = 11, z = 5**'
  prefs: []
  type: TYPE_NORMAL
- en: 'This output can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Assignment operators](img/B04720_02_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: JavaScript comparison and logical operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to do something logical and compare two numbers or variables in
    JavaScript, you need to use a few logical operators. The following are a few examples
    of the comparison operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Operator | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| == | Equal to |'
  prefs: []
  type: TYPE_TB
- en: '| != | Not equal to |'
  prefs: []
  type: TYPE_TB
- en: '| > | Greater than |'
  prefs: []
  type: TYPE_TB
- en: '| < | Less than |'
  prefs: []
  type: TYPE_TB
- en: '| => | Equal to or greater than |'
  prefs: []
  type: TYPE_TB
- en: '| <= | Less than or equal to |'
  prefs: []
  type: TYPE_TB
- en: 'The following are a few examples that use these operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '![JavaScript comparison and logical operators](img/B04720_02_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You will learn more about the use of these operators in the following chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s discuss a few bitwise logical operators and bitwise operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Operators | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| && | This means the AND operator. To check whether two or more statements
    are true, we use this. |'
  prefs: []
  type: TYPE_TB
- en: '| &#124;&#124; | This means the OR operator. To check whether any of the statement
    is true, we use this. |'
  prefs: []
  type: TYPE_TB
- en: '| ~ | This means the NOT operator. |'
  prefs: []
  type: TYPE_TB
- en: '| ^ | This means the XOR operator. |'
  prefs: []
  type: TYPE_TB
- en: '| >> | This means the Right Shift operator. |'
  prefs: []
  type: TYPE_TB
- en: '| << | This means the Left Shift operator. |'
  prefs: []
  type: TYPE_TB
- en: They might be hard for you to learn right now. Don't worry, you don't have to
    use them now. We will use them in [Chapter 4](ch04.html "Chapter 4. Diving a Bit
    Deeper"), *Diving a Bit Deeper*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you learned about the JavaScript syntax. We discussed the
    JavaScript variables and how to assign a value to a variable. You learned how
    to comment on the code. You now know why commenting is important. You finally
    learned an important topic: operators and operations. JavaScript, without using
    operators and logical functions, will not be so rich nowadays. Therefore, learning
    about the logical operations is the key to gain good knowledge of JavaScript.'
  prefs: []
  type: TYPE_NORMAL
- en: I would like to suggest you to practice all the code in this chapter at home.
    You just type them on the console, avoid copying and pasting the codes. This will
    hamper with your learning. As a programmer must have a good typing speed, copying
    and pasting the codes will not improve this skill. You may face problems in typing
    codes; however, you will learn.
  prefs: []
  type: TYPE_NORMAL
- en: You can solve any arithmetic problem using JavaScript. You can also check whether
    your logic is true or false on console. If you can do this, we can move on to
    the next chapter, [Chapter 3](ch03.html "Chapter 3. Introducing HTML and CSS"),
    *Introducing HTML and CSS*, where you will learn about HTML, CSS, and so on.
  prefs: []
  type: TYPE_NORMAL
