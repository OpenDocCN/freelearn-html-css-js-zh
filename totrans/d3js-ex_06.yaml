- en: Chapter 6. Creating Scatter and Bubble Plots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we extend our examples of using D3.js for plotting data to
    explain how to create scatter and bubble plots. Scatter and bubble plots visualize
    multivariate data, as compared to univariate data that is visualized by bar charts.
    Multivariate data consists of two or more variables, and scatter plots allow us
    to visualize two variable, and bubble plots extend this to three or four variables.
  prefs: []
  type: TYPE_NORMAL
- en: We will begin by first creating a simple scatter plot with fixed symbols, based
    upon stock correlation data. We start with using solid circles for symbols, and
    will progress through several enhancements including the use of color, outlines,
    and opacity. We will wrap up scatter plots with an example of multiple, overlying
    sets of data, each using different symbols and colors.
  prefs: []
  type: TYPE_NORMAL
- en: When we've finished examining the of creation of a bubble plot, we will extend
    that example to change the size of the points based upon the data, and then to
    color the points based upon categorical information. This last example will demonstrate
    how we can visualize four different variables within a single visualization, and
    how the use of visuals can help us derive meaning from the underlying information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, in this chapter we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic scatter plot using fixed-sized and solid points
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using outlines instead of solid fills to make the plot more legible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding gridlines to help determine the location of points
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending the scatter plot code to create bubble plots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating scatter plots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Scatter plots consist of two axes, one for each variable. Each axis can be based
    on continuous or categorical variables. For each measurement (a **measurement**
    being the paired combination of *X* and *Y* values), a symbol is placed on the
    plot at the specified location. The end result is a plot that allows the person
    viewing it to determine how much one variable is affected by the other.
  prefs: []
  type: TYPE_NORMAL
- en: Underpinning our first few examples will be a data set that represents the correlation
    between the AAPL and MSFT stocks on a daily basis for the year 2014\. For purposes
    of creating a scatter plot, the meaning of this data is not important—it is just
    that it represents two dimensional data, where the value for each stock represents
    a location on the respective axis.
  prefs: []
  type: TYPE_NORMAL
- en: The data for this example is available at [https://goo.gl/BZkC8B](https://goo.gl/BZkC8B).
  prefs: []
  type: TYPE_NORMAL
- en: 'Opening this link in the browser, you will see the following as the first few
    lines of the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Plotting points
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our first example will demonstrate the process of drawing points in a scatter
    plot. To keep it simple, it forgoes the axes and other stylistic elements (these
    will be added in the next example).
  prefs: []
  type: TYPE_NORMAL
- en: 'The example is available at the following location:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (6.1): [http://goo.gl/Uv6aSj](http://goo.gl/Uv6aSj)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The resulting plot is seen in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Plotting points](img/B04320_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s examine how this is created. The example starts by loading the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The entire URL has to be specified, as apparently, the data load functions do
    not follow redirects.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to convert the properties AAPL and MSFT from strings to numbers. We
    do this by creating a new array of objects with `X` and `Y` properties, with AAPL
    mapped into `X` and MSFT into `Y`, which also converts the data type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To effectively scale a scatter plot, we need to know the extents of the data
    in both the `X` and `Y` series:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'These values will help us create the scales that are required for both dimensions
    of the graph. This plot will actually use the maximum absolute value of these
    four extents. We can determine this value with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We are now ready to create the properties of the graph, including its width,
    height, and the size of the radius for the circles that will represent the points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have all of the information required to create the scale needed to map
    the data into the locations in the rendering:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This example (and those in the remainder of this chapter) scale the data such
    that the domain is the negative and positive of the absolute values of the extents.
    In simple terms, this scale ensures that when rendering into a square canvas,
    all points are visible and any specific distance along the *X* dimension represents
    an identical change in the value of the data as the distance along the *Y* dimension.
  prefs: []
  type: TYPE_NORMAL
- en: 'The rendering begins with the creation of the main SVG element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we create a circle of the specified radius to represent each point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Congratulations, you have created your first scatter plot!
  prefs: []
  type: TYPE_NORMAL
- en: Sprucing up the scatter plot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are several issues with the plot in the previous example. First, notice
    that there is a circle that is clipped towards the right boundary. With the code
    as it is, one point, the one at the maximum extent, will have half of its area
    clipped. This can easily be resolved by including margins that are at least half
    of the radius of the circles.
  prefs: []
  type: TYPE_NORMAL
- en: Another issue is that there are a lot of circles that overlap, confusing the
    visual understanding of the data. A common means of addressing this issue in scatter
    plots is not to use a solid fill in the circles, and simply use an outline instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'A final issue, which is really just a decision made to keep the previous example
    simple, is not to have any axes. The example at the following link addresses each
    of these concerns:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (6.2): [http://goo.gl/4T1aGZ](http://goo.gl/4T1aGZ)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding example has the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sprucing up the scatter plot](img/B04320_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This result is a much more effective scatter plot. We can make sense of the
    previously obscured points, and the axes give us a sense of the values at each
    point.
  prefs: []
  type: TYPE_NORMAL
- en: 'The changes to the code are relatively minor. Besides adding axes by using
    the code that we have seen in other examples (including grouping groups for the
    various main elements), and sizing the main SVG element to account for those axes,
    the only change is in the way the circles are created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Adding gridlines
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Our scatter plot would be more effective if it had gridlines. The way in which
    we add gridlines to a chart in D3.js is actually a little trick: gridlines are
    actually the ticks of an axis, the ticks being the width or height of the graphic
    with both the labels and main line of the axis hidden.'
  prefs: []
  type: TYPE_NORMAL
- en: To add gridlines to our plot, we will create two additional axes. The horizontal
    gridlines will be rendered by creating a left-oriented axis positioned in the
    right margin. We will set the labels on this axis to be empty and the line of
    the axis to be hidden. The ticks are then sized to extend all the way back to
    the other axis in the left margin. We will perform a similar process to create
    the vertical gridlines except with a bottom axis placed in the top margin.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (6.3): [http://goo.gl/ZmrY4H](http://goo.gl/ZmrY4H)'
  prefs: []
  type: TYPE_NORMAL
- en: 'And the resulting graph is shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding gridlines](img/B04320_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The only difference from the previous examples are the several lines for creating
    these new axes and a function to style them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The code begins with creating a left-oriented axis, and then renders it in a
    group which is translated to the right margin.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of simply passing the axis object to `.call()`, we first call two of
    its functions. The first, `.tickSize()`, sets the size of the ticks to stretch
    across the entire area where the points will be rendered. Calling `.tickFormat("")`
    informs the axis that the labels should be empty.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we just need to perform a little styling on the axis. This is performed
    by the `styleGridLineNodes()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This sets the fill and stroke of the main line of the axis so that it is not
    visible. It then makes the actual ticks light gray.
  prefs: []
  type: TYPE_NORMAL
- en: 'The vertical gridlines are then created by a similar process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'A final point about this process is the sequence of the renderings: gridlines,
    then axes, then the points. This ensures that each of these appear on top of the
    others. It is most important for the points to be on top of the gridlines and
    axes, but the gridlines also being behind the visible axes is good practice. It
    gives you a little wiggle room to be a few pixels long on the gridlines.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a bubble plot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bubble plots help us to visualize three or four dimensions of data. Each datum
    in a bubble plot consists not only of two values used to plot against the *X*
    and *Y* axes, but also one or two additional values which are commonly represented
    by different size symbols and/or colors.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate a bubble plot, the following image shows the result of our example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a bubble plot](img/B04320_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The data behind this chart is a data set that was pulled together from three
    different datasets from the World Bank. This data correlates life expectancy at
    birth relative to the fertility rate for all the countries in the World Bank data
    for the year 2013.
  prefs: []
  type: TYPE_NORMAL
- en: This chart plots age along the *X* axis and the birth rate along the *Y* axis.
    The relative population of a country is represented by the size of the circle,
    and the color of the circle represents the economic region of the country as categorized
    by the World Bank.
  prefs: []
  type: TYPE_NORMAL
- en: We won't dive deeply into this data. It is available at [https://goo.gl/K3yuuy](https://goo.gl/K3yuuy).
  prefs: []
  type: TYPE_NORMAL
- en: 'The first few lines of the data are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want to check out the original data, you can use the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Life expectancy (in years) at birth: [http://data.worldbank.org/indicator/SP.DYN.LE00.IN](http://data.worldbank.org/indicator/SP.DYN.LE00.IN)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fertility rate: [http://data.worldbank.org/indicator/SP.DYN.TFRT.IN](http://data.worldbank.org/indicator/SP.DYN.TFRT.IN)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Total population: [http://data.worldbank.org/indicator/SP.POP.TOTL](http://data.worldbank.org/indicator/SP.POP.TOTL)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code for the example is available at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (6.4): [http://goo.gl/KQJceE](http://goo.gl/KQJceE)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The example starts with the loading of data and converting the data types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we define several variables for defining the minimum and maximum bubble
    size and the margins, which we will set to be half of the radius of the largest
    bubble:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This particular plot requires three linear scales and one ordinal scale based
    upon the following four series of data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The scale for the *X* axis will vary from the minimum to the maximum life expectancy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The *Y* axis will range from the maximum fertility rate at the top to `0` at
    the bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The size of each bubble represents the population, and will range in radius
    from the minimum to the maximum values configured earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Each bubble will be colored based upon the value of the region. To do this,
    we set up a mapping between each of the unique names of the regions and a 10-color
    categorical scale:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can start rendering the visuals, starting with the axes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The final task is to render the bubbles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we put together several examples of creating scatter and bubble
    plots. You learned a number of techniques for organizing data that represents
    between two and four distinct dimensions, using axes for two of the dimensions,
    and then using color and size-of-points as two more.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will begin with animation. We will start with the fundamentals
    of animation, and by the end of the chapter, we will extend this chapter's final
    example and use animation to represent an extra dimension, a fifth dimension—time.
  prefs: []
  type: TYPE_NORMAL
