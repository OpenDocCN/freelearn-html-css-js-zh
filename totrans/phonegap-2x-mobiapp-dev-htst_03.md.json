["```js\nvar DOCS = DOCS || {};\n\nDOCS.Filers = function ( completion, failure )\n{\n    var self = this;\n```", "```js\n    self.state = \"\";\n```", "```js\n    self.completion = completion;\n```", "```js\n    self.documents = [];\n```", "```js\n    self.fileSystem = {};\n```", "```js\n    self.failure = failure;\n```", "```js\n    self.fileEntry = {};\n```", "```js\n    self.loadFileSystem = function ( completion, failure )\n    {\n        self.completion = completion;\n        self.failure = failure;\n        self.getFileSystem();\n    }\n```", "```js\n    self.getFileSystem = function()\n    {\n        self.state = \"Requesting File System\";\n        window.requestFileSystem ( LocalFileSystem.PERSISTENT, 0, self.getFileSystemSuccess, self.dispatchFailure );\n    }\n```", "```js\n    self.dispatchFailure = function ( e )\n    {\n        console.log (\"While \" + self.State + \", encountered error: \" + JSON.stringify(e));\n        if (self.failure)\n        {\n            self.failure ( e );\n        }\n    }\n```", "```js\n    self.getFileSystemSuccess = function ( fileSystem )\n    {\n        self.state = \"Received File System\";\n        self.fileSystem = fileSystem;\n        self.getDocuments ( fileSystem.root );\n    }\n```", "```js\n    self.getDocuments = function ( directoryEntry )\n    {\n        self.state = \"Requesting Reader\";\n        var directoryReader = directoryEntry.createReader();\n\n        self.state = \"Requesting Entries from Reader\";\n        directoryReader.readEntries ( \n          self.getDocumentsSuccess, self.dispatchFailure );\n    }\n```", "```js\n    self.getDocumentsSuccess = function ( entries )\n    {\n        var theDocuments = [];\n        for (var i=0; i<entries.length; i++)\n        {\n            // is the entry a file? (we won't iterate subdirs)\n            if (entries[i].isFile)\n            {\n                var theFileName = entries[i].name;\n                var theFileType = \n                  theFileName.substr(theFileName.length-4,4);\n                if (theFileType === \".fln\")\n                {\n                    // a file we know we can process\n                    theDocuments.push ( entries[i] );\n            }\n            }\n        }\n        self.documents = theDocuments;\n        self.state = \"\";\n        if (self.completion)\n        {\n            self.completion ( self );\n        }\n    }\n```", "```js\n    self.getDocumentCount = function ()\n    {\n        return self.documents.length;\n    }\n\n    self.getDocumentAtIndex = function ( idx )\n    {\n        return self.documents[ idx ];\n    }\n```", "```js\n    self.deleteDocumentAtIndex = function ( idx, completion, failure )\n    {\n        self.completion = completion;\n        self.failure = failure;\n        self.state = \"Removing a Document\";\n        self.documents [ idx ].remove ( \n             self.deleteDocumentAtIndexSuccess, \n             self.dispatchFailure);\n    }\n```", "```js\n    self.deleteDocumentAtIndexSuccess = function ()\n    {\n        self.state = \"\";\n        self.getFileSystem();\n    }\n```", "```js\n    self.renameDocumentAtIndexTo = function ( idx, newName, \n       completion, failure )\n    {\n        self.completion = completion;\n        self.failure = failure;\n        self.state = \"Renaming a Document\";\n        self.documents [ idx ].moveTo ( \n             self.fileSystem.root, newName, \n             self.renameDocumentAtIndexToSuccess, \n             self.dispatchFailure);\n    }\n\n    self.renameDocumentAtIndexToSuccess = function ()\n    {\n        self.state = \"\";\n        self.getFileSystem();\n    }\n```", "```js\n    self.copyDocumentAtIndexTo = function ( idx, newName, \n      completion, failure )\n    {\n        self.completion = completion;\n        self.failure = failure;\n        self.state = \"Duplicating a Document\";\n        self.documents [ idx ].copyTo ( self.fileSystem.root, \n          newName, self.copyDocumentAtIndexToSuccess, \n          self.dispatchFailure);\n    }\n    self.copyDocumentAtIndexToSuccess = function ()\n    {\n        self.state = \"\";\n        self.getFileSystem();\n    }\n```", "```js\n    self.createDocument = function ( theDocumentName, \n      completion, failure )\n    {\n        self.completion = completion;\n        self.failure = failure;\n        self.state = \"Creating a Document\";\n        self.fileSystem.root.getFile ( theDocumentName, \n          {create: true, exclusive: false},\n                function ( theFileEntry )\n                    {\n                        self.fileEntry = theFileEntry;\n                        self.state = \"\";\n                        self.getFileSystem();\n                     }, self.dispatchFailure );\n    }\n```", "```js\n    self.openDocumentAtIndex = function ( idx, completion, \n      failure )\n    {\n        self.completion = completion;\n        self.failure = failure;\n        self.state = \"Opening a Document\";\n        self.fileSystem.root.getFile ( \n           self.documents[idx].name, {create: false, \n             exclusive: false},\n          function ( theFileEntry )\n          {\n            self.fileEntry = theFileEntry;\n            self.state = \"\";\n            self.getFileSystem();\n            }, self.dispatchFailure );\n    }\n```", "```js\n    self.getFileEntry = function ()\n    {\n        return self.fileEntry;\n    }\n```", "```js\n    self.getFileSystem ();\n}\n```", "```js\nvar DOC = DOC || {};\n\nDOC.Filer = function ( theFileEntry, completion, failure )\n{\n    var self = this;\n\n    // file and state\n    self.fileEntry = theFileEntry;\n    self.fileName = self.fileEntry.name;\n    self.completion = completion;\n    self.failure = failure;\n    self.state = \"\";\n    // file-specific\n    self.title = \"My Filer\";\n    self.text = \"\";\n\n    self.getTitle = function ()\n    {\n        return self.title;\n    }\n\n    self.setTitle = function ( theTitle )\n    {\n        self.title = theTitle;\n    }\n\n    self.getText = function ()\n\n        return self.text;\n    }\n\n    self.setText = function ( theText )\n    {\n        self.text = theText;\n    }\n```", "```js\n    self.readFileContents = function()\n    {\n        self.state = \"Reading a File\";\n        self.fileEntry.file ( self.gotFile, self.dispatchFailure );\n    }\n\n    self.dispatchFailure = function( e )\n    {\n        console.log (\"While \" + self.State + \", encountered \n           error: \" + e.target.error.code);\n        if (self.failure)\n        {\n            self.failure ( e );\n        }\n    }\n```", "```js\n    self.gotFile = function ( theFile )\n    {\n        var reader = new FileReader ();\n        reader.onloadend = self.finishedReadingFile;\n        reader.onloaderror = self.dispatchFailure;\n        reader.readAsText ( theFile );\n    }\n```", "```js\n    self.finishedReadingFile = function ( e )\n    {\n        var theFileContents = e.target.result;\n```", "```js\n        if (!theFileContents)\n        {\n            theFileContents = '{\"title\":\"New \n              File\",\"text\":\"\"}';\n        }\n```", "```js\n    self.saveFileContents = function ( completion , failure )\n    {\n        self.completion = completion;\n        self.failure = failure;\n        self.fileEntry.createWriter ( self.gotFileWriter, \n            self.dispatchFailure );\n    }\n    self.gotFileWriter = function ( writer )\n    {\n        writer.onerror = self.failure;\n        writer.onwriteend = function ( e )\n            {\n                if (self.completion)\n                    {\n                        self.completion();\n                    }\n            };\n        writer.write ( JSON.stringify ( self.serialize() ) );\n    }\n```", "```js\n    self.serialize = function ()\n    {\n        return { \"title\": self.title, \"text\": self.text };\n    }\n```", "```js\n    self.readFileContents();\n}\n```", "```js\n<div id=\"documentsView_documentTemplate\" class=\"hidden\">\n    <div class=\"documentContainer\">\n        <div class=\"documentImage\">\n            <img src=\"img/DocumentImage.png\" border=0 onclick=\"documentsView.openDocument(%INDEX%)\"/>\n        </div>\n        <div class=\"documentTitle\" onclick=\"documentsView.renameDocument(%INDEX%)\">\n            <span >%TITLE%</span>\n        </div>\n        <div class=\"documentActions\">\n            <img src=\"img/Copy.png\" width=28 height=28 border=0 onclick=\"documentsView.copyDocument(%INDEX%)\" />\n            <img src=\"img/Share.png\" width=27 height=28  border=0 onclick=\"documentsView.shareDocument(%INDEX%)\" />\n            <img src=\"img/Trash.png\" width=28 height=28  border=0 onclick=\"documentsView.deleteDocument(%INDEX%)\" />\n        </div>\n    </div>\n</div>\n```", "```js\n  var documentsView = $ge(\"documentsView\") || {};\n  documentsView.lastScrollLeft = 0;\n  documentsView.myScroll = {};\n  documentsView.availableDocuments = {};\n```", "```js\n  documentsView.displayAvailableDocuments = function ()\n  {\n\n    documentsView.availableDocuments = new DOCS.Filers (\n        documentsView.documentIterator\n        ,\n        function () // failure function\n        {\n            var anAlert = new PKUI.MESSAGE.Alert \n              (__T(\"Oops!\"),\n                __T(\"I couldn't read your persistent \n                      storage!\"));\n            anAlert.show();\n        }\n    );\n\n  }\n```", "```js\n  documentsView.documentIterator = function ( o )\n    {\n        var theHTML = \"\";\n        var theNumberOfDocuments = 0;\n        for (var i=0; i<o.getDocumentCount(); i++)\n        {\n            var theDocumentEntry = o.getDocumentAtIndex ( i );\n\n            theHTML += PKUTIL.instanceOfTemplate ( \n                       $ge(\"documentsView_documentTemplate\"),\n                        { \"title\": \n                         theDocumentEntry.name.substr(0, \n                         theDocumentEntry.name.length-4),\n                         \"index\": i\n                       }\n                       );\n          theNumberOfDocuments++;\n        }\n        if (PKDEVICE.platform()==\"ios\")\n        {\n            $ge(\"documentsView_contentArea\").style.width = \n                (((theNumberOfDocuments) * 246)) + \"px\";\n        }\n\n        $ge(\"documentsView_contentArea\").innerHTML = theHTML;\n    }\n```", "```js\n  documentsView.openDocument = function ( idx )\n  {\n        documentsView.availableDocuments.openDocumentAtIndex\n            ( idx,\n              function ()\n              {\n                fileView.setFileEntry ( documentsView.\n                    availableDocuments.getFileEntry() );\n                PKUI.CORE.pushView ( fileView );\n              },\n              function (e) { console.log (JSON.stringify(e)) \n                         }\n            );\n  }\n```", "```js\n  documentsView.createNewDocument = function ()\n  {\n    {\n        var anAlert = new PKUI.MESSAGE.Prompt \n                    (__T(\"Create Document\"),\n                        __T(\"This will create a new document \n                             with the name below:\"),\n                        \"text\",\n                         \"New Filer \" + __D(new Date(),\n                             \"yyyy-MM-dd-HH-mm-ss\"),\n                        __T(\"Don't Create<|Create>\"),\n                        function (i)\n                        {\n                          if (i===1)\n                          {\n                           documentsView.availableDocuments.\n                           createDocument ( \"\" +\n                            anAlert.inputElement.value+\".fln\",\n                            function ()\n                            {\n                            fileView.setFileEntry ( \n                              documentsView.\n                               availableDocuments.\n                                getFileEntry() );\n                            PKUI.CORE.pushView ( fileView );\n                            },\n                            function (e)\n                            {\n                            var anAlert = new \n                              PKUI.MESSAGE.Alert (\n                               __T(\"Oops!\"),\n                                __T(\"Couldn't create the \n                                    file.\") );\n                             anAlert.show();\n                            }\n                          );\n                        }\n                      }\n                    );\n        anAlert.show();\n    }\n  }\n```", "```js\n  documentsView.renameDocument = function ( idx )\n  {\n    var theFileName = documentsView.availableDocuments.\n                    getDocumentAtIndex(idx).name;\n    theFileName = theFileName.substr(0,theFileName.length-4);\n\n    var anAlert = new PKUI.MESSAGE.Prompt (\n                     __T(\"Rename Document\"),\n                        __T(\"Rename your document to the \n                             following:\"),\n                        \"text\",\n                        theFileName,\n                        __T(\"Cancel<|Rename>\"),\n                        function (i)\n                        { \n                         if (i==1)\n                         {\n                          var theNewFileName = \n                         \"\"+anAlert.inputElement.value+\".fln\";\n                          try {\n                           documentsView.availableDocuments.\n                           renameDocumentAtIndexTo\n                           ( idx, theNewFileName,  \n                             documentsView.documentIterator,\n                             function ( e )\n                            {\n                             var anAlert = new \n                                  PKUI.MESSAGE.Alert \n                                  (__T(\"Oops!\"),\n                                    __T(\"Couldn't rename the \n                                        file.\") );\n                                    anAlert.show();\n                            }\n                           );\n                          }\n                        catch (e)\n                          {\n                           var anotherAlert = new \n                           PKUI.MESSAGE.Alert (\n                               __T(\"Oops!\"),\n                               __T(\"Couldn't rename the \n                                    file.\") );\n                            anotherAlert.show();\n                            }\n                         }\n                        }\n                       );\n    anAlert.show();\n  }\n```", "```js\n  documentsView.deleteDocument = function ( idx )\n  {\n    var anAlert = new PKUI.MESSAGE.Confirm (\n                __T(\"Remove Document\"),\n                __T(\"This will remove the document. This \n                       action is unrecoverable.\"),\n                  __T(\"Don't Remove<|Remove*\"),\n                  function (i)\n                  {\n                  if (i==1)\n                   {\n                    documentsView.availableDocuments.\n                    deleteDocumentAtIndex\n                     ( idx, documentsView.documentIterator,\n                      function (e)\n                      {\n                       var anAlert = new PKUI.MESSAGE.Alert \n                      (__T(\"Oops!\"),\n                          __T(\"Couldn't delete the file.\") );\n                      anAlert.show();\n                      }\n                    );\n                  }\n    );\n    anAlert.show();\n  }\n```", "```js\n  var fileView = $ge(\"fileView\") || {};\n\n  fileView.theFileEntry = {};\n  fileView.theFilerDocument = {};\n  fileView.theSaveTimer = -1;\n```", "```js\n  fileView.setFileEntry = function ( theNewFileEntry )\n  {\n      fileView.theFileEntry = theNewFileEntry;\n      fileView.theFilerDocument = {};\n  }\n```", "```js\n  fileView.entitleDocument = function ()\n  {\n    var anAlert = new PKUI.MESSAGE.Prompt (\n                        __T(\"Entitle\"),\n                      __T(\"What's the title of this document?\"),\n                      \"text\",\n                    fileView.theFilerDocument.getTitle(),\n                    __T(\"Cancel<|Entitle>\"),\n                    function (i)\n                    { \n                     if (i==1)\n                     {\n                      fileView.theFilerDocument.setTitle (\n                        anAlert.inputElement.value );\n                      fileView.viewTitle.innerHTML = \n                      fileView.theFilerDocument.getTitle();\n                     }\n                    }\n                   );\n    anAlert.show();\n  }\n```", "```js\n  fileView.loadDocument = function ()\n  {\n    fileView.viewTitle = $ge(\"fileView_title\");\n    fileView.viewTitle.innerHTML = fileView.theFileEntry.name.substr(0,fileView.theFileEntry.name.length-4);\n    fileView.theTextElement = $ge(\"fileView_text\");\n    fileView.theTextElement.value = \"\";\n\n    fileView.theFilerDocument = new DOC.Filer (fileView.theFileEntry,function ()\n            {\n                 fileView.viewTitle.innerHTML = fileView.theFilerDocument.getTitle();\n                 fileView.theTextElement.value = fileView.theFilerDocument.getText();\n                 fileView.theSaveTimer = setInterval ( \n                 fileView.saveDocument, 5000 );\n             },\n                 function (e)\n                 {\n                 PKUI.CORE.popView();\n                 var anAlert = new PKUI.MESSAGE.Alert \n                 (__T(\"Oops!\"),\n                 __T(\"Couldn't open the file.\") );\n                 anAlert.show();\n                 }\n                 );\n  }\n```", "```js\n  fileView.saveDocument = function ()\n  {\n      fileView.theFilerDocument.setText ( fileView.theTextElement.value );\n      fileView.theFilerDocument.saveFileContents (\n      function ()\n      {\n       console.log (\"Auto save successful.\");\n       },\n       function (e)\n       {\n       PKUI.CORE.popView();\n       var anAlert = new PKUI.MESSAGE.Alert (\n                             __T(\"Oops!\"),\n                        __T(\"Couldn't save to the file.\") );\n        anAlert.show();\n       }\n      );\n  }\n```", "```js\n  fileView.viewWillAppear = function ()\n  {\n\n    fileView.loadDocument();\n  }\n```", "```js\n  fileView.viewWillHide = function ()\n  {\n    if (fileView.theSaveTimer!==-1)\n    {\n        clearInterval (fileView.theSaveTimer);\n        fileView.theSaveTimer = -1;\n    }\n    fileView.saveDocument();\n    documentsView.reloadAvailableDocuments();\n  }\n```"]