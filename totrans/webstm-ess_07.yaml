- en: Chapter 7. Analyzing and Debugging Your Code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 分析和调试您的代码
- en: In the previous chapter, we learned how to use web technologies to create native
    mobile applications, and how to create projects quickly with the help of templates.
    In this chapter, we are going to see how WebStorm can help us analyze and debug
    our code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何使用网络技术创建原生移动应用程序，以及如何借助模板快速创建项目。在本章中，我们将探讨WebStorm如何帮助我们分析和调试代码。
- en: 'We will now focus on code quality tools like Code Inspector, Code Style, and
    Code Linters that will help us write quality code. We will also learn to debug
    our code directly inside the IDE. In this chapter, we will cover the following
    topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将关注代码质量工具，如Code Inspector、Code Style和Code Linters，这些工具将帮助我们编写高质量的代码。我们还将学习如何在IDE中直接调试代码。在本章中，我们将涵盖以下主题：
- en: Understanding code inspection
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解代码检查
- en: What is Code Style?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是代码风格？
- en: Using different code quality tools
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用不同的代码质量工具
- en: Debugging your code
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试您的代码
- en: Code inspection
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码检查
- en: 'WebStorm is equipped with a powerful, fast, and versatile code analysis tool.
    This tool detects not only the compiler and runtime errors, but also the different
    code inefficiencies. It suggests corrections and enhancements while you code.
    Some of the common errors it can detect are: unreachable code, unused code, non-localized
    strings, unresolved methods, memory leaks, and spelling problems.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: WebStorm配备了一个强大、快速且多功能的代码分析工具。此工具不仅检测编译器和运行时错误，还检测不同的代码低效。在您编码时，它会建议修正和改进。它可以检测的一些常见错误包括：不可达代码、未使用代码、未本地化的字符串、未解析的方法、内存泄漏和拼写错误。
- en: 'The inspection is performed in multiple ways:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 检查可以通过多种方式执行：
- en: Analyzing all opened files, all the code issues are highlighted directly in
    the editor. The status is visible on the right side of the editor. At the top
    of the file and on the scroll bar is a summary that takes you to the line of code
    when clicked.![Code inspection](img/00097.jpeg)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析所有打开的文件，所有代码问题都会在编辑器中突出显示。状态在编辑器的右侧可见。在文件顶部和滚动条上有一个总结，当点击时会带您到代码行。![代码检查](img/00097.jpeg)
- en: Running the analysis in bulk mode runs the inspector in a specified scope. The
    scope can be any set of files, from the currently selected ones to the whole project.
    To run the bulk mode, select **Code** | **Inspect Code…**, and specify the scope
    in the opened dialog.![Code inspection](img/00098.jpeg)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以批量模式运行分析将在指定范围内运行检查器。范围可以是任何一组文件，从当前选定的文件到整个项目。要运行批量模式，请选择**代码** | **检查代码…**，并在打开的对话框中指定范围。![代码检查](img/00098.jpeg)
- en: 'In the Specify Inspection dialog, we can also specify the **Inspection profile**
    that we want to use. The profiles represent a set of rules that we want our code
    to be checked against. For now, we are going to leave it to the default one, and
    click on **OK**. WebStorm will run the inspection, and then present us with a
    summary dialog, as seen in the following screenshot:'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在指定检查对话框中，我们还可以指定我们想要使用的**检查配置文件**。配置文件代表一组我们希望我们的代码与之检查的规则。目前，我们将保留默认设置，并点击**确定**。WebStorm将运行检查，然后以以下截图所示的方式显示总结对话框：
- en: '![Code inspection](img/00099.jpeg)'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![代码检查](img/00099.jpeg)'
- en: Running a single code inspection in a specified scope—in this mode, WebStorm
    allows us to check for a specific problem in the selected scope. To access the
    dialog, open **Code** | **Run Inspection By Name**, and select the inspection
    that you want to run in this dialog, as seen in the following screenshot:![Code
    inspection](img/00100.jpeg)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在指定范围内运行单个代码检查——在此模式下，WebStorm允许我们在所选范围内检查特定问题。要访问对话框，请打开**代码** | **按名称运行检查**，并在该对话框中选择您想要运行的检查，如以下截图所示：![代码检查](img/00100.jpeg)
- en: This opens the scope dialog, where we can select the code on which this inspection
    is to be applied. WebStorm then takes us to the summary page, similar to the bulk
    section.
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将打开范围对话框，在这里我们可以选择要应用此检查的代码。WebStorm随后带我们到总结页面，类似于批量部分。
- en: WebStorm works with profiles when inspecting the code, so you can specify the
    type of problems that you want to search and report. It also allows you to define
    profiles at the application or project level, and to share the created profiles
    with the rest of the team. All the profile settings can be found in the **Preferences**
    | **Editor** | **Inspections** page.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: WebStorm在检查代码时使用配置文件，因此您可以指定您想要搜索和报告的问题类型。它还允许您在应用程序或项目级别定义配置文件，并将创建的配置文件与团队的其他成员共享。所有配置文件设置都可以在**首选项**
    | **编辑器** | **检查**页面找到。
- en: '![Code inspection](img/00101.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![代码检查](img/00101.jpeg)'
- en: In this section, we focused on the way your code performs and executes; in the
    next section, we are going to focus on the looks of code.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们关注了代码的执行和性能；在下一节中，我们将关注代码的外观。
- en: Code Style
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码风格
- en: The **Code** **Style** can be seen as a set of specific rules that dictate the
    layout of the source code. It includes the indentation, use of white space, the
    style used for variable names, keywords, and so on. WebStorm allows you to manage
    the scheme to be applied to specific files type. To access the dialog, go to **Preferences**
    | **Editor** | **Code Style**.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码风格**可以被视为一组特定的规则，这些规则规定了源代码的布局。它包括缩进、空白的使用、变量名、关键字等使用的样式。WebStorm 允许您管理应用于特定文件类型的方案。要访问对话框，请转到**首选项**
    | **编辑器** | **代码风格**。'
- en: '![Code Style](img/00102.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![代码风格](img/00102.jpeg)'
- en: 'The first page that is displayed is for setting the general styles, like the
    following, for the current project:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 显示的第一页用于设置当前项目的通用样式，如下所示：
- en: '**Line separator** for columns and wrapping'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行分隔符**用于列和换行'
- en: '**Default Indent Options**'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**默认缩进选项**'
- en: '**Formatter Control** for using comments to turn the Code Style on/off'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**格式化控制** 用于使用注释来开启/关闭代码风格'
- en: '**EditorConfig** for controlling the styles through a general `.editorconfig`
    file that can be shared with the project'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**EditorConfig** 通过通用的 `.editorconfig` 文件来控制样式，该文件可以与项目共享'
- en: We can also set language-specific code styles to make the editor fit our needs.
    To change these settings, we need to select the desired language from the menu
    in the previews screen.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以设置特定语言的代码风格，以使编辑器符合我们的需求。要更改这些设置，我们需要从预览屏幕中的菜单中选择所需的语言。
- en: WebStorm also allows you to quickly apply the code style to an open file by
    selecting **Code** | **Reformat code**. It applies the necessary rules based on
    the file extension.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: WebStorm 还允许您通过选择**代码** | **重新格式化代码**来快速将代码风格应用于打开的文件。它根据文件扩展名应用必要的规则。
- en: These tools help in giving a consistent look to your code, and with the help
    of the **EditorConfig** files, you can share your styles across multiple members
    of your team. It is considered a good practice to include these files in the Git
    repository of your project.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具有助于使您的代码外观保持一致，并且借助**EditorConfig**文件，您可以将您的样式与团队中的多个成员共享。将此类文件包含在项目的Git仓库中是一种良好的实践。
- en: Code quality tools
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码质量工具
- en: 'WebStorm allows us to use various code quality tools to make sure that our
    code is free from common mistakes and discrepancies. WebStorm 10 supports integration
    with the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: WebStorm 允许我们使用各种代码质量工具来确保我们的代码没有常见的错误和不一致之处。WebStorm 10 支持与以下工具集成：
- en: JSLint
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSLint
- en: JSHint
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSHint
- en: Closure Linter
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Closure Linter
- en: JSCS
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSCS
- en: ESLint
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ESLint
- en: It comes bundled with JSLint and JSHint, but the rest need to be installed through
    NPM or other installers. We are going to focus on JSCS and the first two tools
    in the preceding list, since these are the most common ones, and the workflow
    is very similar between the different tools.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 它与 JSLint 和 JSHint 一起打包，但其余的则需要通过 NPM 或其他安装程序安装。我们将重点关注 JSCS 和前面列表中的前两个工具，因为这些是最常见的，并且不同工具之间的工作流程非常相似。
- en: JSLint
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JSLint
- en: To use the JSLint tool, enable it in the **Settings** | **Languages & Frameworks**
    | **JavaScript** | **Code Quality Tools** | **JSLint** page, and select the desired
    settings. A good practice, when navigating to the complex settings page, is to
    use the built-in search.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 JSLint 工具，请在**设置** | **语言和框架** | **JavaScript** | **代码质量工具** | **JSLint**
    页面上启用它，并选择所需的设置。在导航到复杂的设置页面时，使用内置的搜索是一种良好的实践。
- en: '![JSLint](img/00103.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![JSLint](img/00103.jpeg)'
- en: Once we enable and configure JSLint, it automatically checks all the open JS
    files with the specified settings, and the errors are displayed like the code
    inspection messages.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们启用并配置了 JSLint，它将自动检查所有打开的 JS 文件，并使用指定的设置，错误将像代码检查消息一样显示。
- en: JSHint
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JSHint
- en: JSHint is another code quality tool that comes bundled with WebStorm. The settings
    page can be found at **Settings** | **Languages & Frameworks** | **JavaScript**
    | **Code Quality Tools** | **JSHint**.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: JSHint 是 WebStorm 内置的另一款代码质量工具。设置页面可在**设置** | **语言和框架** | **JavaScript** | **代码质量工具**
    | **JSHint**中找到。
- en: '![JSHint](img/00104.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![JSHint](img/00104.jpeg)'
- en: The JSHint settings can be configured either through the settings page, or by
    using a special `.jshintrc` configuration file. Again, it is a good practice to
    include such a file in your repository.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: JSHint 设置可以通过设置页面配置，或者通过使用特殊的 `.jshintrc` 配置文件来实现。再次强调，将此类文件包含在您的仓库中是一种良好的实践。
- en: JSCS
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JSCS
- en: 'JSCS is one of the popular code linters used by some of the big frameworks
    like jQuery, Bootstrap, and Angular. It doesn''t come bundled with WebStorm like
    the previous tools, so the first thing we have to do is to install it. We are
    going to use the build in NPM installer, and perform the following steps:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: JSCS 是一些大型框架（如 jQuery、Bootstrap 和 Angular）中使用的流行代码检查器之一。它不像之前的工具那样随 WebStorm
    一起打包，因此我们必须首先安装它。我们将使用内置的 NPM 安装程序，并执行以下步骤：
- en: Open the **Preferences** | **Languages & Frameworks** | **Node.js and NPM page**
    | **Packages Install** dialog, search for `jscs,` and install it globally.![JSCS](img/00105.jpeg)
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 **首选项** | **语言与框架** | **Node.js 和 NPM 页面** | **包安装** 对话框，搜索 `jscs` 并全局安装。![JSCS](img/00105.jpeg)
- en: Once the installation is ready, the settings page can be found at **Settings**
    | **Languages & Frameworks** | **JavaScript** | **Code Quality Tools** | **JSCS**.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，设置页面可以在 **设置** | **语言与框架** | **JavaScript** | **代码质量工具** | **JSCS** 中找到。
- en: On this page, select the package from the global node folder and the configuration
    file used for the rules or a preset. There is no option to define the rules individually
    like the previous tools.![JSCS](img/00106.jpeg)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此页面上，从全局 Node 文件夹中选择包以及用于规则的配置文件或预设。与之前的工具不同，没有选项可以单独定义规则。![JSCS](img/00106.jpeg)
- en: For this demonstration, we are going to use one of the popular set of rules,
    the one defined by **Airbnb**.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个演示，我们将使用一组流行的规则，即由 **Airbnb** 定义的规则。
- en: Now that you have learned how to check the code before it even runs, we are
    going to dive into the world of debugging and see how WebStorm can help us understand
    and fix our code while it is running.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经学会了如何在代码运行之前进行检查，我们将深入调试的世界，看看 WebStorm 如何帮助我们理解并修复正在运行的代码。
- en: Debugging your code
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试您的代码
- en: One of the first things that we need to do before starting is to install and
    configure the browser extension for Chrome. This extension enables WebStorm to
    communicate with the browser, so we can debug our application directly inside
    the IDE.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，我们需要做的第一件事是安装和配置 Chrome 浏览器扩展。此扩展使 WebStorm 能够与浏览器通信，因此我们可以在 IDE 内直接调试应用程序。
- en: 'The Chrome browser extension is available at the **chrome web store** as **JetBrains
    IDE Support**. So, we need to add it from there, as shown in the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome 浏览器扩展可在 **Chrome 网上应用店** 中找到，名为 **JetBrains IDE Support**。因此，我们需要从那里添加，如下面的截图所示：
- en: '![Debugging your code](img/00107.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![调试您的代码](img/00107.jpeg)'
- en: Now that we have the extension installed, we can start learning to debug our
    code. To be able to debug the code while it is running, we need to start a debugging
    session. There are several ways to start a debug session. In this section, we
    are going to see some of the ways of debugging in WebStorm.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了扩展，我们可以开始学习如何调试我们的代码。为了能够在代码运行时进行调试，我们需要启动一个调试会话。有几种启动调试会话的方法。在本节中，我们将了解
    WebStorm 中的一些调试方法。
- en: Initializing a debug session from the browser
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从浏览器初始化调试会话
- en: First we need to open the project inside WebStorm, and set some breakpoints.
    Before we start, we need do import a a project created for this purpose from GitHub.
    So, using the instructions given in the previous section, create a project from
    the Git repository at [https://github.com/srosca/webstorm_essentials_debugging.git](https://github.com/srosca/webstorm_essentials_debugging.git).
    After you have downloaded and opened the project, run `npm install` to install
    all the required dependencies.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要在 WebStorm 中打开项目，并设置一些断点。在我们开始之前，我们需要从 GitHub 导入为这个目的创建的项目。因此，按照上一节中给出的说明，从
    [https://github.com/srosca/webstorm_essentials_debugging.git](https://github.com/srosca/webstorm_essentials_debugging.git)
    的 Git 仓库创建一个项目。下载并打开项目后，运行 `npm install` 以安装所有必需的依赖项。
- en: Note
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Once everything is installed, make sure that you start the sever by using the
    Grunt task runner or typing `grunt serve` inside the terminal.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一切安装完成后，请确保使用 Grunt 任务运行器或通过在终端中输入 `grunt serve` 来启动服务器。
- en: Open the `fib.js` file and you can click on the right-hand side to set a breakpoint;
    this will look like a red dot. We are going to set a breakpoint on line 58 inside
    the `fib` function to check what happens inside.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `fib.js` 文件，您可以在右侧单击以设置断点；这将看起来像一个红色圆点。我们将在 `fib` 函数内的第 58 行设置断点，以检查内部发生的情况。
- en: '![Initializing a debug session from the browser](img/00108.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![从浏览器初始化调试会话](img/00108.jpeg)'
- en: 'Execute the following steps:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: Open the Chrome browser and point it to `http://localhost:9000/index.html` to
    open the file.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Chrome 浏览器，将其指向 `http://localhost:9000/index.html` 以打开文件。
- en: In the browser, select **inspect** in WebStorm from the **context** menu. This
    creates a temporal debugging session, and links Chrome with WebStorm.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中，从 **上下文** 菜单中选择 WebStorm 中的 **inspect**。这创建了一个临时的调试会话，并将 Chrome 与 WebStorm
    连接起来。
- en: You will now see a message **JetBrains IDE Support is debugging this tab**,
    in the browser, and the debugging section with the message, **Connected to JetBrains
    Chrome Extension** in WebStorm.![Initializing a debug session from the browser](img/00109.jpeg)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在将在浏览器中看到一条消息 **JetBrains IDE 支持正在调试此选项卡**，在 WebStorm 中，调试部分带有消息 **连接到 JetBrains
    Chrome 扩展**。![从浏览器初始化调试会话](img/00109.jpeg)
- en: 'The debug section is split into four tabs:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 调试部分分为四个选项卡：
- en: '**Debugger**: This tab shows information relevant to the debugging section
    like **Frames**, **Variables**, and **Watches**'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试器**：此选项卡显示与调试部分相关的信息，如 **调用栈**、**变量** 和 **监视**'
- en: '**Console**: This tab displays the console output'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制台**：此选项卡显示控制台输出'
- en: '**Elements**: The DOM tree is displayed in this tab'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**元素**：此选项卡显示 DOM 树'
- en: '**Scripts**: This tab shows the loaded scripts'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**脚本**：此选项卡显示已加载的脚本'
- en: 'Now that we have WebStorm and Chrome linked, we need to refresh the page in
    Chrome so that it stops at our breakpoints. The browser now shows that our page
    has paused inside the debugger:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将 WebStorm 和 Chrome 连接起来，我们需要在 Chrome 中刷新页面，以便它停在断点处。浏览器现在显示我们的页面在调试器内部已暂停：
- en: '![Initializing a debug session from the browser](img/00110.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![从浏览器初始化调试会话](img/00110.jpeg)'
- en: The WebStorm IDE will now jump to the line that the execution has been paused,
    and display the relevant information in the **Debugger** section. The **Frames**
    panel will show the call stack that leads to the current point. The **Variables**
    panel allows you to examine the value stored in your application, on the local
    scope as well as the global one. In the **Watches** panel, we can evaluate various
    variables and expressions in the current context. The information displayed in
    these panels is updated with each step throughout the application.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: WebStorm IDE 现在将跳转到执行暂停的行，并在 **调试器** 部分显示相关信息。**调用栈** 面板将显示导致当前点的调用栈。**变量**
    面板允许您检查应用程序中存储的值，包括局部作用域和全局作用域。在 **监视** 面板中，我们可以评估当前上下文中的各种变量和表达式。这些面板中显示的信息会随着应用程序中的每个步骤而更新。
- en: '![Initializing a debug session from the browser](img/00111.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![从浏览器初始化调试会话](img/00111.jpeg)'
- en: 'While the execution is paused, we can navigate through the program execution.
    Navigation can be controlled from the **Run** menu, or by using the following
    shortcuts:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行暂停时，我们可以导航程序执行。导航可以通过 **运行** 菜单或使用以下快捷键来控制：
- en: '**Step over (F8)**: Step to the next line in the current file'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单步执行（F8）**：在当前文件中跳到下一行'
- en: '**Step into (F7)**: Step to the next executed line, which can be in a separate
    file'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进入（F7）**：跳到下一个执行的行，这可能是在单独的文件中'
- en: '**Step out (Shift + F8)**: Step to the first executed line after returning
    from the current method'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**退出（Shift + F8）**：跳到当前方法返回后的第一行执行的行'
- en: '**Run to cursor (Alt + F9)**: Run to the line where the caret is located'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行到光标处（Alt + F9）**：运行到光标所在的行'
- en: '**Resume program (F9)**: Resume program execution'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**恢复程序（F9）**：恢复程序执行'
- en: 'While temporary debug sessions are useful for quick debugging, sometimes we
    need to save the debug run as a configuration so that it is easier to run. Go
    to **Run** | **Edit Configuration** to open the **Run/Debug Configuration** screen
    and click on the plus sign. Then select **JavaScript Debug**. Set a name for your
    configuration, enter the URL: `http://localhost:9000/index.html`, and then click
    on **OK**.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然临时调试会话对于快速调试很有用，但有时我们需要将调试运行保存为配置，以便更容易运行。转到 **运行** | **编辑配置** 以打开 **运行/调试配置**
    窗口，然后单击加号。然后选择 **JavaScript 调试**。为您的配置设置一个名称，输入 URL：`http://localhost:9000/index.html`，然后单击
    **确定**。
- en: '![Initializing a debug session from the browser](img/00112.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![从浏览器初始化调试会话](img/00112.jpeg)'
- en: 'This creates a configuration that can be easily run by selecting the debug
    icon from the run toolbar, as seen in the following screenshot:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这创建了一个配置，可以通过从运行工具栏中选择调试图标轻松运行，如下面的截图所示：
- en: '![Initializing a debug session from the browser](img/00113.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![从浏览器初始化调试会话](img/00113.jpeg)'
- en: Once we run this, the debugging session is controlled exactly like the previous
    section.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦运行此操作，调试会话的控制方式与上一节完全相同。
- en: We can also debug our code inside Node.js, so we need to create a debug configuration
    for the Node.js environment. To do that, select **Node.js** from the **Run/Debug
    Configuration** screen, and then select the JavaScript file that you want to debug.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在 Node.js 内部调试我们的代码，因此我们需要为 Node.js 环境创建一个调试配置。为此，从 **运行/调试配置** 界面中选择 **Node.js**，然后选择您想要调试的
    JavaScript 文件。
- en: '![Initializing a debug session from the browser](img/00114.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![从浏览器初始化调试会话](img/00114.jpeg)'
- en: Now we can run the debugging session against the node environment. The rest
    of the display and controls remain the same as in the previous examples.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以运行调试会话针对节点环境。其余的显示和控制与之前的示例相同。
- en: Debugging is one of the most powerful ways to understand the execution of the
    code, and WebStorm's ability to debug the code directly in the environment in
    which it is created, the IDE, is an extremely valuable benefit.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 调试是理解代码执行的最强大方式之一，而 WebStorm 能够直接在创建代码的环境中（即 IDE）调试代码，这是一个极其宝贵的优势。
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you have learned to analyze and debug your code. You installed
    and configured some of the most-used code quality tools and used them on your
    code. You have also learned to debug your code and find problems quickly. These
    are the basic steps that will allow you to better understand how your code is
    being executed, and by following some simple rules, you can be sure that the code
    is performing and looking great.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经学会了分析和调试您的代码。您安装并配置了一些最常用的代码质量工具，并在您的代码上使用了它们。您还学会了调试代码并快速找到问题。这些是让您更好地理解代码执行的基本步骤，通过遵循一些简单的规则，您可以确保代码的表现和外观都很出色。
- en: 'In the next chapter, we are going to see how WebStorm can help you in testing
    your code so that we are sure that whatever changes we make will not break our
    code. We are going to dive into some of the most-used development practices of
    the moment: TDD and BDD.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到 WebStorm 如何帮助您测试代码，以确保我们做出的任何更改都不会破坏我们的代码。我们将深入探讨一些当下最常用的开发实践：TDD
    和 BDD。
