- en: Chapter 7. Analyzing and Debugging Your Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to use web technologies to create native
    mobile applications, and how to create projects quickly with the help of templates.
    In this chapter, we are going to see how WebStorm can help us analyze and debug
    our code.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now focus on code quality tools like Code Inspector, Code Style, and
    Code Linters that will help us write quality code. We will also learn to debug
    our code directly inside the IDE. In this chapter, we will cover the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding code inspection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is Code Style?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using different code quality tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging your code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code inspection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'WebStorm is equipped with a powerful, fast, and versatile code analysis tool.
    This tool detects not only the compiler and runtime errors, but also the different
    code inefficiencies. It suggests corrections and enhancements while you code.
    Some of the common errors it can detect are: unreachable code, unused code, non-localized
    strings, unresolved methods, memory leaks, and spelling problems.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The inspection is performed in multiple ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing all opened files, all the code issues are highlighted directly in
    the editor. The status is visible on the right side of the editor. At the top
    of the file and on the scroll bar is a summary that takes you to the line of code
    when clicked.![Code inspection](img/00097.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the analysis in bulk mode runs the inspector in a specified scope. The
    scope can be any set of files, from the currently selected ones to the whole project.
    To run the bulk mode, select **Code** | **Inspect Code…**, and specify the scope
    in the opened dialog.![Code inspection](img/00098.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the Specify Inspection dialog, we can also specify the **Inspection profile**
    that we want to use. The profiles represent a set of rules that we want our code
    to be checked against. For now, we are going to leave it to the default one, and
    click on **OK**. WebStorm will run the inspection, and then present us with a
    summary dialog, as seen in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Code inspection](img/00099.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Running a single code inspection in a specified scope—in this mode, WebStorm
    allows us to check for a specific problem in the selected scope. To access the
    dialog, open **Code** | **Run Inspection By Name**, and select the inspection
    that you want to run in this dialog, as seen in the following screenshot:![Code
    inspection](img/00100.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This opens the scope dialog, where we can select the code on which this inspection
    is to be applied. WebStorm then takes us to the summary page, similar to the bulk
    section.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: WebStorm works with profiles when inspecting the code, so you can specify the
    type of problems that you want to search and report. It also allows you to define
    profiles at the application or project level, and to share the created profiles
    with the rest of the team. All the profile settings can be found in the **Preferences**
    | **Editor** | **Inspections** page.
  prefs: []
  type: TYPE_NORMAL
- en: '![Code inspection](img/00101.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In this section, we focused on the way your code performs and executes; in the
    next section, we are going to focus on the looks of code.
  prefs: []
  type: TYPE_NORMAL
- en: Code Style
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Code** **Style** can be seen as a set of specific rules that dictate the
    layout of the source code. It includes the indentation, use of white space, the
    style used for variable names, keywords, and so on. WebStorm allows you to manage
    the scheme to be applied to specific files type. To access the dialog, go to **Preferences**
    | **Editor** | **Code Style**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Code Style](img/00102.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The first page that is displayed is for setting the general styles, like the
    following, for the current project:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Line separator** for columns and wrapping'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Default Indent Options**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Formatter Control** for using comments to turn the Code Style on/off'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**EditorConfig** for controlling the styles through a general `.editorconfig`
    file that can be shared with the project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can also set language-specific code styles to make the editor fit our needs.
    To change these settings, we need to select the desired language from the menu
    in the previews screen.
  prefs: []
  type: TYPE_NORMAL
- en: WebStorm also allows you to quickly apply the code style to an open file by
    selecting **Code** | **Reformat code**. It applies the necessary rules based on
    the file extension.
  prefs: []
  type: TYPE_NORMAL
- en: These tools help in giving a consistent look to your code, and with the help
    of the **EditorConfig** files, you can share your styles across multiple members
    of your team. It is considered a good practice to include these files in the Git
    repository of your project.
  prefs: []
  type: TYPE_NORMAL
- en: Code quality tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'WebStorm allows us to use various code quality tools to make sure that our
    code is free from common mistakes and discrepancies. WebStorm 10 supports integration
    with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: JSLint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSHint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Closure Linter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSCS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ESLint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It comes bundled with JSLint and JSHint, but the rest need to be installed through
    NPM or other installers. We are going to focus on JSCS and the first two tools
    in the preceding list, since these are the most common ones, and the workflow
    is very similar between the different tools.
  prefs: []
  type: TYPE_NORMAL
- en: JSLint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To use the JSLint tool, enable it in the **Settings** | **Languages & Frameworks**
    | **JavaScript** | **Code Quality Tools** | **JSLint** page, and select the desired
    settings. A good practice, when navigating to the complex settings page, is to
    use the built-in search.
  prefs: []
  type: TYPE_NORMAL
- en: '![JSLint](img/00103.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once we enable and configure JSLint, it automatically checks all the open JS
    files with the specified settings, and the errors are displayed like the code
    inspection messages.
  prefs: []
  type: TYPE_NORMAL
- en: JSHint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JSHint is another code quality tool that comes bundled with WebStorm. The settings
    page can be found at **Settings** | **Languages & Frameworks** | **JavaScript**
    | **Code Quality Tools** | **JSHint**.
  prefs: []
  type: TYPE_NORMAL
- en: '![JSHint](img/00104.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The JSHint settings can be configured either through the settings page, or by
    using a special `.jshintrc` configuration file. Again, it is a good practice to
    include such a file in your repository.
  prefs: []
  type: TYPE_NORMAL
- en: JSCS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'JSCS is one of the popular code linters used by some of the big frameworks
    like jQuery, Bootstrap, and Angular. It doesn''t come bundled with WebStorm like
    the previous tools, so the first thing we have to do is to install it. We are
    going to use the build in NPM installer, and perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the **Preferences** | **Languages & Frameworks** | **Node.js and NPM page**
    | **Packages Install** dialog, search for `jscs,` and install it globally.![JSCS](img/00105.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the installation is ready, the settings page can be found at **Settings**
    | **Languages & Frameworks** | **JavaScript** | **Code Quality Tools** | **JSCS**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On this page, select the package from the global node folder and the configuration
    file used for the rules or a preset. There is no option to define the rules individually
    like the previous tools.![JSCS](img/00106.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For this demonstration, we are going to use one of the popular set of rules,
    the one defined by **Airbnb**.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have learned how to check the code before it even runs, we are
    going to dive into the world of debugging and see how WebStorm can help us understand
    and fix our code while it is running.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging your code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the first things that we need to do before starting is to install and
    configure the browser extension for Chrome. This extension enables WebStorm to
    communicate with the browser, so we can debug our application directly inside
    the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Chrome browser extension is available at the **chrome web store** as **JetBrains
    IDE Support**. So, we need to add it from there, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging your code](img/00107.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have the extension installed, we can start learning to debug our
    code. To be able to debug the code while it is running, we need to start a debugging
    session. There are several ways to start a debug session. In this section, we
    are going to see some of the ways of debugging in WebStorm.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing a debug session from the browser
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First we need to open the project inside WebStorm, and set some breakpoints.
    Before we start, we need do import a a project created for this purpose from GitHub.
    So, using the instructions given in the previous section, create a project from
    the Git repository at [https://github.com/srosca/webstorm_essentials_debugging.git](https://github.com/srosca/webstorm_essentials_debugging.git).
    After you have downloaded and opened the project, run `npm install` to install
    all the required dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once everything is installed, make sure that you start the sever by using the
    Grunt task runner or typing `grunt serve` inside the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `fib.js` file and you can click on the right-hand side to set a breakpoint;
    this will look like a red dot. We are going to set a breakpoint on line 58 inside
    the `fib` function to check what happens inside.
  prefs: []
  type: TYPE_NORMAL
- en: '![Initializing a debug session from the browser](img/00108.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Execute the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Chrome browser and point it to `http://localhost:9000/index.html` to
    open the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the browser, select **inspect** in WebStorm from the **context** menu. This
    creates a temporal debugging session, and links Chrome with WebStorm.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will now see a message **JetBrains IDE Support is debugging this tab**,
    in the browser, and the debugging section with the message, **Connected to JetBrains
    Chrome Extension** in WebStorm.![Initializing a debug session from the browser](img/00109.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The debug section is split into four tabs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Debugger**: This tab shows information relevant to the debugging section
    like **Frames**, **Variables**, and **Watches**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Console**: This tab displays the console output'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Elements**: The DOM tree is displayed in this tab'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scripts**: This tab shows the loaded scripts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that we have WebStorm and Chrome linked, we need to refresh the page in
    Chrome so that it stops at our breakpoints. The browser now shows that our page
    has paused inside the debugger:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Initializing a debug session from the browser](img/00110.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The WebStorm IDE will now jump to the line that the execution has been paused,
    and display the relevant information in the **Debugger** section. The **Frames**
    panel will show the call stack that leads to the current point. The **Variables**
    panel allows you to examine the value stored in your application, on the local
    scope as well as the global one. In the **Watches** panel, we can evaluate various
    variables and expressions in the current context. The information displayed in
    these panels is updated with each step throughout the application.
  prefs: []
  type: TYPE_NORMAL
- en: '![Initializing a debug session from the browser](img/00111.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'While the execution is paused, we can navigate through the program execution.
    Navigation can be controlled from the **Run** menu, or by using the following
    shortcuts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step over (F8)**: Step to the next line in the current file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step into (F7)**: Step to the next executed line, which can be in a separate
    file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step out (Shift + F8)**: Step to the first executed line after returning
    from the current method'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Run to cursor (Alt + F9)**: Run to the line where the caret is located'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resume program (F9)**: Resume program execution'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'While temporary debug sessions are useful for quick debugging, sometimes we
    need to save the debug run as a configuration so that it is easier to run. Go
    to **Run** | **Edit Configuration** to open the **Run/Debug Configuration** screen
    and click on the plus sign. Then select **JavaScript Debug**. Set a name for your
    configuration, enter the URL: `http://localhost:9000/index.html`, and then click
    on **OK**.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Initializing a debug session from the browser](img/00112.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This creates a configuration that can be easily run by selecting the debug
    icon from the run toolbar, as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Initializing a debug session from the browser](img/00113.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once we run this, the debugging session is controlled exactly like the previous
    section.
  prefs: []
  type: TYPE_NORMAL
- en: We can also debug our code inside Node.js, so we need to create a debug configuration
    for the Node.js environment. To do that, select **Node.js** from the **Run/Debug
    Configuration** screen, and then select the JavaScript file that you want to debug.
  prefs: []
  type: TYPE_NORMAL
- en: '![Initializing a debug session from the browser](img/00114.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now we can run the debugging session against the node environment. The rest
    of the display and controls remain the same as in the previous examples.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging is one of the most powerful ways to understand the execution of the
    code, and WebStorm's ability to debug the code directly in the environment in
    which it is created, the IDE, is an extremely valuable benefit.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned to analyze and debug your code. You installed
    and configured some of the most-used code quality tools and used them on your
    code. You have also learned to debug your code and find problems quickly. These
    are the basic steps that will allow you to better understand how your code is
    being executed, and by following some simple rules, you can be sure that the code
    is performing and looking great.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we are going to see how WebStorm can help you in testing
    your code so that we are sure that whatever changes we make will not break our
    code. We are going to dive into some of the most-used development practices of
    the moment: TDD and BDD.'
  prefs: []
  type: TYPE_NORMAL
