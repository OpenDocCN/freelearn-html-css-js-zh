- en: Chapter 6. Building the App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the past few chapters we have learned what JavaScriptMVC is, how to install
    it, and we went through its components.
  prefs: []
  type: TYPE_NORMAL
- en: Now is the time for the most exciting chapter for any developer. We are going
    to build a real-world application. Due to the book's scope limitation we are not
    going to write backend API set-up servers, and so on, instead of we will use browser
    storage.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to layer separation in JavaScriptMVC this is easily done by changing
    the code in the model to switch the application persistent layer from browser
    storage option to any backend language, framework, or system such as Sinatra,
    Ruby on Rails, Django, and Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter's goal is to show how to build a real-word application from concept
    through design, implementation, documentation, and testing. We will develop an
    application that actually does something, is useful for readers, and can be easily
    customized to the reader's needs.
  prefs: []
  type: TYPE_NORMAL
- en: Time tracking and invoicing for freelancers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The app we are going to build in this chapter is called Time tracking and invoicing
    for freelancers; let's call it TTI in short.
  prefs: []
  type: TYPE_NORMAL
- en: Application development will only start here. We are not going to write the
    complete code base, it will be simply too big to fit it here. It's like a homework
    exercise, when students start their writing application at university and finish
    them at home. Be creative!
  prefs: []
  type: TYPE_NORMAL
- en: Planning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Okay, so we are going to write an application. Now it''s time to answer the
    most important question: *What problem is our application is about to solve?*'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can clearly identify two main application areas:'
  prefs: []
  type: TYPE_NORMAL
- en: Tracking time we spend on a task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making an invoice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s break down our application''s main areas into a features list as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Clients list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time tracker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Track time
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed cost task
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Daily
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Weekly
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Statistics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monthly
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Yearly
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Invoicing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Export and import data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A features list will help us make a development plan. Now we can think about
    how much time we need to accomplish for each of them. We can use just a calendar
    to write down our estimates or use one of many the free issue-tracking tools such
    as [https://trello.com/](https://trello.com/) or [http://trac.edgewall.org/](http://trac.edgewall.org/).
  prefs: []
  type: TYPE_NORMAL
- en: The ideal solution would be to use a methodology such as Scrum—[http://en.wikipedia.org/wiki/Scrum_(development)](http://en.wikipedia.org/wiki/Scrum_(development))
    or one of the best issue-tracking tools in the business, JIRA—[http://en.wikipedia.org/wiki/JIRA](http://en.wikipedia.org/wiki/JIRA).
  prefs: []
  type: TYPE_NORMAL
- en: Preparing wireframes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next step is preparing application wireframes. This is a very important
    step in the application development cycle. It allows us to quickly sketch the
    application interface for different pages as well as very fast redesign pages
    and saves time in future development. Once we start writing the code, any changes
    will be harder and less cost efficient than changing wireframes.
  prefs: []
  type: TYPE_NORMAL
- en: The next steps are creating mockups and prototypes. However, we do not have
    a graphic designer here and no client to show business logic and finally it's
    out of this book's scope, so we are going straight to the next step.
  prefs: []
  type: TYPE_NORMAL
- en: '**Wireframes** are generally basic sketches of components used in the application
    to show user interface and application features.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mockups** are the next level of wireframes, basically containing all we can
    find on wireframes but were in the actual design.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Prototypes** are semi-functional applications to present business logic.'
  prefs: []
  type: TYPE_NORMAL
- en: We can create wireframes by using just a piece of paper and pencil; a lot of
    people prefer this way. There is a bunch of different software that can help us
    in this step. I'll use Balsamiq Mockups but really any tool will be good here.
  prefs: []
  type: TYPE_NORMAL
- en: 'To give us a better overview on TTI application let''s have a look at wireframes:'
  prefs: []
  type: TYPE_NORMAL
- en: Since this book orientation is portrait and web browsers orientation are landscape,
    the reader is asked to have a look at following the wireframes from a different
    perspective.
  prefs: []
  type: TYPE_NORMAL
- en: The following wireframe shows the time tracker main page.
  prefs: []
  type: TYPE_NORMAL
- en: The main menu is located at the top-left corner and allows us to switch between
    the main application functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: Breadcrumb is located at the top center and allows us to easily indicate which
    part of the appllication we are currently in.
  prefs: []
  type: TYPE_NORMAL
- en: '**Settings** and **Export/Import Data** tabs go on the top-right corner.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Time Tracker** is located in the center with two main tabs: **Active Tasks**
    and **Archive Tasks**. Each task has fields: **Hours**, **Cost**, **Task ID**,
    **Description**, and **Notes**. The **Add New Task** button is located at the
    bottom that allows us to add a new task. **Archive** button is visible when task
    is hovered. To edit a task double-click on it. The URL for the time tracker page
    is `/timetracker`.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing wireframes](img/0205OS_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following wireframe shows the invoice main page. The URL is `/invoice`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing wireframes](img/0205OS_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The following wireframe shows the clients main page. The URL is `/clients`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing wireframes](img/0205OS_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setup project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are assuming that the reader has installed a web server, such as Apache or
    Nginx. In the server-working directory we need to create the `TTI` folder. Another
    option is to use the Vagrant-powered environment created especially for this book
    available at [https://github.com/wbednarski/JavaScriptMVC_kick-starter](https://github.com/wbednarski/JavaScriptMVC_kick-starter).
  prefs: []
  type: TYPE_NORMAL
- en: In this folder we will initialize the Git repository to track all changes, install
    JavaScriptMVC, and create the application structure.
  prefs: []
  type: TYPE_NORMAL
- en: Tracking changes under VCS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's a good idea from the very beginning to keep all the project files under
    the version control system. The reason for that is very simple and beneficial
    for future development—we can easily revert any changes and track them.
  prefs: []
  type: TYPE_NORMAL
- en: Using decentralized VCS has an invaluable benefit over centralized VCS, because
    we can commit changes without push, so we can commit often even after a small
    change in the codebase. Another good practice is to use one branch per feature.
  prefs: []
  type: TYPE_NORMAL
- en: In this book we are going to use Git, but actually any **Distributed Version
    Control Systems** (**DVCS**) is good. Mercurial is another popular DVCS.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps should be performed to create a new Git repository, add
    all the files, and commit them:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `TTI` directory, type to install JavaScriptMVC:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install and update JavaScriptMVC submodules using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install Syn using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Move the `js` command to the project''s root directory (run from root directory):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: By default all the repositories are on a master branch. Let's switch to the
    latest version of JavaScriptMVC, which is 3.2.2 at the time this book was written.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In all the submodules directories, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `TTI` directory create our application directory `tti` and add it under
    Git.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the reader wants to keep the codebase copy on the server, they can do this
    using the free code hosting solutions available at [https://github.com](https://github.com)
    or [https://bitbucket.org](https://bitbucket.org).
  prefs: []
  type: TYPE_NORMAL
- en: All the code we are going to develop will be placed in the `tti` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Application structure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Our application structure will look similar to the following hierarchy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: IndexedDB
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since local storage is too simple for our application and Web SQL database is
    deprecated the natural choice is IndexedDB.
  prefs: []
  type: TYPE_NORMAL
- en: In the root level create `vendors` directory to store all third part code, plugins,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download and copy PouchDB to the `vendors` directory library, which provides
    good cross-browser API for IndexedDB. You can download PouchDB from the following
    location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://pouchdb.com](http://pouchdb.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/daleharvey/pouchdb](https://github.com/daleharvey/pouchdb)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's create a `task.js` file under the `models` directory. In the `Task` model
    we will keep all task-related CRUD methods that operate on a local database.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `init` method is responsible for creating a `time-tracker` database or getting
    reference to it if it exists. The `idb://` protocol is telling PouchDB to use
    `IndexedDB` as a storage option.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `findAll` method is responsible for retrieving an object with all the items
    from our database. Readers can have a look at the example usage in the comment
    on the preceding code listing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `findOne` method is responsible for retrieving an object with a particular
    item from our database. Readers can have a look at the example usage in the comment
    on the preceding code listing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `create` method is responsible for creating a new item in our database.
    Readers can have a look at the example usage in the comment on the preceding code
    listing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `update` method is responsible for updating a particular item in our database.
    Readers can have a look at the example usage in the comment on the preceding code
    listing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This `destroy` method is responsible for destroying a particular item in our
    database. Readers can have a look at the example usage in the comment on the preceding
    code listing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a `client.js` file under `models` directory. In `Client` model
    we will keep all the task-related CRUD methods that operate on a local database.
    Create a bootstrap file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Creating controllers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's create a `tasks.js` file under the `controllers` directory where we can
    handle all the application actions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Let's create the `clients.js` file under the `controllers` directory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Let's create the `router.js` file under the `controllers` directory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Let's create the `navigation.js` file under the `controllers` directory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Creating views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create the `views` folder under the `tti` directory and inside it, two
    directories: `styles` and `templates`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `templates` directory create `client.ejs` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `templates` directory create the `navigation.ejs` file with the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `templates` directory create the `tasks` directory. Create the `tasks.ejs`
    file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `tasks` directory create the `task.ejs` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `tasks` directory create the `add_task.ejs` file with the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `styles` directory create two directories: `css` and `sass`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `sass` directory create the `tti.scss` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `sass` directory create the `_static.scss` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `sass` directory create the `_mixins.scss` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `sass` directory create the `_reset.scss` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `sass` directory create the `skelton.scss` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Creating a bootstrap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the root directory let's create the `index.html` file with the following
    code. Bootstrap is responsible for loading all the files needed by the application
    to run.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `tti` directory create the `tti.js` file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Running the application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to run our application we convert the SASS files into the CSS file
    which can be read by web browsers.
  prefs: []
  type: TYPE_NORMAL
- en: We used SASS instead of plain CSS to split code into many small files for better
    readability and better code re-use. This aspect is very important, especially
    in big applications.
  prefs: []
  type: TYPE_NORMAL
- en: SASS can be installed by executing `$ gem install sass` command or downloading
    it from the Git repository at [http://sass-lang.com/download.html](http://sass-lang.com/download.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'To compile SASS code into CSS code, go to views folder and type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Then run the web server and navigate to `index.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we learned how to build a JavaScriptMVC application and organize
    code and workflow to create web applications in a more efficient and less error
    prone way.
  prefs: []
  type: TYPE_NORMAL
