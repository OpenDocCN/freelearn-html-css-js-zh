- en: Chapter 2. Mapping GeoJSON Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章. 地图 GeoJSON 数据
- en: In [Chapter 1](ch01.html "Chapter 1. Creating Maps with Leaflet"), *Creating
    Maps with Leaflet*, all of the geometry elements—points, lines, and polygons—were
    created one at a time. You learned how to create groups of features using layer
    and feature groups and also multipolyline and multipolygon classes. In this chapter,
    you will learn how to add GeoJSON data to your map. The data will be comprised
    of multiple geometries and will have descriptive data associated with it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第一章](ch01.html "第一章. 使用 Leaflet 创建地图") *使用 Leaflet 创建地图* 中，所有几何元素——点、线和多边形——都是逐个创建的。您学习了如何使用图层和要素组以及多折线和多边形类创建要素组。在本章中，您将学习如何将
    GeoJSON 数据添加到您的地图中。数据将包含多个几何体，并与其相关的描述性数据。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What is GeoJSON?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 GeoJSON？
- en: How to add it to your map
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将其添加到您的地图中
- en: How to style it
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何样式化它
- en: Iterating through features
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遍历要素
- en: How to call GeoJSON from external sources
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何从外部源调用 GeoJSON
- en: Understanding the roots of GeoJSON
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 GeoJSON 的根源
- en: Before GeoJSON, there was **JavaScript Object Notation** (**JSON**), and before
    JSON, there was **Extensible Markup Language** (**XML**). As computers started
    to talk to each other over the Internet, the ability to send data from a service
    to a client became more important. XML, JSON, and GeoJSON are formats that represent
    and transmit data. XML was an attempt at a human-readable format that could store
    and send data. XML uses opening and closing tags to separate data. JSON is an
    alternative to XML that more closely resembles the way objects are created in
    JavaScript. JSON uses key-value pairs and is usually smaller than XML.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GeoJSON 之前，有 **JavaScript 对象表示法**（**JSON**），而在 JSON 之前，有 **可扩展标记语言**（**XML**）。随着计算机开始通过互联网相互通信，从服务向客户端发送数据的能力变得更加重要。XML、JSON
    和 GeoJSON 是表示和传输数据的格式。XML 是一种尝试创建人类可读的格式，可以存储和发送数据。XML 使用开闭标签来分隔数据。JSON 是 XML
    的替代品，更接近 JavaScript 中创建对象的方式。JSON 使用键值对，通常比 XML 小。
- en: Exploring GeoJSON
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 GeoJSON
- en: 'GeoJSON is a JSON format that encodes geometries. GeoJSON can encode points,
    line strings, and polygons. It also allows for multipart geometries. You can encode
    multipoints, multiline strings, and multipolygons. These should sound familiar
    because they are pretty close to the geometries you learned to draw in [Chapter
    1](ch01.html "Chapter 1. Creating Maps with Leaflet"), *Creating Maps with Leaflet*.
    The following GeoJSON code shows you two points in a feature collection:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: GeoJSON 是一种编码几何体的 JSON 格式。GeoJSON 可以编码点、线字符串和多边形。它还允许多部分几何体。您可以编码多点、多线字符串和多边形。这些应该听起来很熟悉，因为它们与您在
    [第一章](ch01.html "第一章. 使用 Leaflet 创建地图") *使用 Leaflet 创建地图* 中学到的绘制几何体非常相似。以下 GeoJSON
    代码显示了特征集合中的两个点：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The feature collection in the preceding code is not a geometry, but rather a
    collection of geometries similar to the feature layer described in [Chapter 1](ch01.html
    "Chapter 1. Creating Maps with Leaflet"), *Creating Maps with Leaflet*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码中的要素集合不是一个几何体，而是一组与 [第一章](ch01.html "第一章. 使用 Leaflet 创建地图") 中描述的要素层类似的几何体。
- en: To view the full GeoJSON specification, you can go to [http://geojson.org/geojson-spec.html](http://geojson.org/geojson-spec.html).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看完整的 GeoJSON 规范，您可以访问 [http://geojson.org/geojson-spec.html](http://geojson.org/geojson-spec.html)。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For tools that can help you write and check your JSON, see [http://www.jsoneditoronline.org/](http://www.jsoneditoronline.org/)
    or [http://geojsonlint.com/](http://geojsonlint.com/).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看可以帮助您编写和检查 JSON 的工具，请参阅 [http://www.jsoneditoronline.org/](http://www.jsoneditoronline.org/)
    或 [http://geojsonlint.com/](http://geojsonlint.com/)。
- en: GeoJSON in Leaflet.js
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Leaflet.js 中的 GeoJSON
- en: GeoJSON is just another data format for you to add to your map. It can be added
    as a hardcoded variable. Leaflet.js geometries—markers, polylines, and polygons—can
    be converted to GeoJSON. You can style the data, apply options to each feature,
    and even filter the data. The next sections will cover these topics, starting
    with adding GeoJSON as a hardcoded variable.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: GeoJSON 只是您要添加到地图中的另一种数据格式。它可以作为一个硬编码的变量添加。Leaflet.js 几何体——标记、折线和多边形——可以转换为
    GeoJSON。您可以样式化数据，为每个要素应用选项，甚至过滤数据。下一节将涵盖这些主题，从将 GeoJSON 作为硬编码变量添加开始。
- en: GeoJSON as a variable
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GeoJSON 作为变量
- en: 'The easiest way to add GeoJSON to your map is to hardcode the data into a variable.
    In Leaflet.js, you will start by creating a variable that will contain GeoJSON.
    In the following code, GeoJSON data consisting of two points is assigned to the
    `geojson` variable:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 将 GeoJSON 添加到你的地图上最简单的方法是将数据硬编码到一个变量中。在 Leaflet.js 中，你将首先创建一个将包含 GeoJSON 的变量。在以下代码中，由两个点组成的
    GeoJSON 数据被分配给 `geojson` 变量：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once you have the GeoJSON data in a variable, as shown in the preceding code,
    adding it to the map is no different from adding any other geometry you have learned
    so far. The following code adds GeoJSON to the map:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了前述代码所示的 GeoJSON 数据变量，将其添加到地图上与添加你迄今为止学到的任何其他几何形状没有区别。以下代码将 GeoJSON 添加到地图上：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding code creates a `geoJsonLayer` variable. This variable is an instance
    of the `L.geoJson()`class. It takes a variable with the GeoJSON data as a parameter
    and then you chain `.addTo(map)` to the end.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 前述代码创建了一个 `geoJsonLayer` 变量。这个变量是 `L.geoJson()` 类的一个实例。它接受一个包含 GeoJSON 数据的变量作为参数，然后你将
    `.addTo(map)` 链接到末尾。
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Objects have been created using `(latitude, longitude)` in [Chapter 1](ch01.html
    "Chapter 1. Creating Maps with Leaflet"), *Creating Maps with Leaflet*; however,
    note that in GeoJSON, the format is `(longitude, latitude)`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对象是在 [第 1 章](ch01.html "第 1 章。使用 Leaflet 创建地图") *使用 Leaflet 创建地图* 中使用 `(纬度，经度)`
    创建的；然而，请注意，在 GeoJSON 中，格式是 `(经度，纬度)`。
- en: 'The result of this code will be a map with two markers, as shown in the following
    screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码的结果将是一个包含两个标记的地图，如下截图所示：
- en: '![GeoJSON as a variable](img/4812OS_02_01.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![GeoJSON 作为变量](img/4812OS_02_01.jpg)'
- en: Multiple geometries in GeoJSON
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GeoJSON 中的多个几何形状
- en: 'In the preceding example, GeoJSON contained only points. While it is common
    for a GeoJSON file to contain a single geographic feature, it is not a requirement.
    Leaflet.js can load GeoJSON with multiple geometries in a single GeoJSON file.
    In this example, you will learn how to create and add a GeoJSON file with a point,
    line string, and polygon. The following GeoJSON code contains three different
    geometries:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述示例中，GeoJSON 仅包含点。虽然 GeoJSON 文件通常只包含一个地理要素，但这不是必需的。Leaflet.js 可以在单个 GeoJSON
    文件中加载包含多个几何形状的 GeoJSON。在本例中，你将学习如何创建并添加包含点、线字符串和多边形的 GeoJSON 文件。以下 GeoJSON 代码包含三种不同的几何形状：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To create different geometries in a single GeoJSON file, you just need to specify
    the type and include the proper coordinates, as shown in the preceding code. For
    a line string, you must include at least two points. In Leaflet.js, polygons do
    not require you to close them by including the starting coordinates at the end
    of the list. GeoJSON does require you to close the polygon. The polygon in the
    preceding code starts and ends with `[-106.78059, 35.14574]`. The preceding code
    will produce the map shown in the following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在单个 GeoJSON 文件中创建不同的几何形状，你只需指定类型并包含适当的坐标，如前述代码所示。对于线字符串，你必须包含至少两个点。在 Leaflet.js
    中，多边形不需要你通过在列表末尾包含起始坐标来关闭它们。GeoJSON 确实要求你关闭多边形。前述代码中的多边形以 `[-106.78059, 35.14574]`
    开始和结束。前述代码将生成以下截图所示的地图：
- en: '![Multiple geometries in GeoJSON](img/4812OS_02_02.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![GeoJSON 中的多个几何形状](img/4812OS_02_02.jpg)'
- en: Polygons with holes
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 带孔的多边形
- en: 'A polygon in GeoJSON can be a donut, that is, you can cut a polygon out of
    the middle of another polygon. The following code shows you a polygon feature
    with two polygons, the outer and inner polygons:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: GeoJSON 中的多边形可以是甜甜圈，也就是说，你可以从另一个多边形的中间切出一个多边形。以下代码展示了具有两个多边形（外多边形和内多边形）的多边形特征：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the preceding code, the first set of points creates a four-sided polygon.
    The second set of points—the next level of indentation—creates a four-sided polygon
    in the middle of the first polygon. The result is shown in the following screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述代码中，第一组点创建了一个四边形。第二组点——下一级缩进——在第一个多边形中间创建了一个四边形。结果如下截图所示：
- en: '![Polygons with holes](img/4812OS_02_03.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![带孔的多边形](img/4812OS_02_03.jpg)'
- en: The middle of the polygon in the preceding screenshot is hollow. If you add
    a pop up to the polygon, it will only open when you click on the blue ring.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 前述截图中的多边形中间是空心的。如果你向多边形添加一个弹出窗口，它只有在点击蓝色环时才会打开。
- en: GeoJSON from Leaflet.js objects
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 Leaflet.js 对象生成的 GeoJSON
- en: 'Each of the geometries you learned about in [Chapter 1](ch01.html "Chapter 1. Creating
    Maps with Leaflet"), *Creating Maps with Leaflet*, have a `toGeoJson()` method.
    This method will convert the geometry to a GeoJSON object that can be added to
    the map. The following code shows you how to convert a marker to a GeoJSON layer:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你在[第1章](ch01.html "第1章。使用Leaflet创建地图")，*使用Leaflet创建地图*中学习到的每个几何形状都有一个`toGeoJson()`方法。此方法将几何形状转换为可以添加到地图的GeoJSON对象。以下代码展示了如何将标记转换为GeoJSON图层：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The preceding code creates a marker, as you did in the *Adding data to your
    map* section in [Chapter 1](ch01.html "Chapter 1. Creating Maps with Leaflet"),
    *Creating Maps with Leaflet*. Secondly, it calls the `.toGeoJSON()` method, which
    returns a GeoJSON object and stores it as `markerAsGeoJSON`. Lastly, `markerAsGeoJSON`
    is added to the map as GeoJSON.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码创建了一个标记，正如你在[第1章](ch01.html "第1章。使用Leaflet创建地图")，*使用Leaflet创建地图*中“向地图添加数据”部分所做的那样。其次，它调用了`.toGeoJSON()`方法，该方法返回一个GeoJSON对象并将其存储为`markerAsGeoJSON`。最后，`markerAsGeoJSON`被添加到地图中作为GeoJSON。
- en: Styling GeoJSON layers
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 样式化GeoJSON图层
- en: 'GeoJSON layers have a `style` option and a `setStyle()` method. Using the `style`
    option, you specify a function that will style the layer. The following code shows
    you how to style a GeoJSON layer with the `style` option:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: GeoJSON图层有一个`style`选项和一个`setStyle()`方法。使用`style`选项，你可以指定一个将用于样式化图层的函数。以下代码展示了如何使用`style`选项样式化GeoJSON图层：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The preceding code creates a style function that returns a color based on the
    GeoJSON feature names. If it is a line string, it is colored red, and if it is
    a polygon, it is colored purple.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码创建了一个样式函数，该函数根据GeoJSON要素名称返回一个颜色。如果是线字符串，则颜色为红色，如果是多边形，则颜色为紫色。
- en: Note
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can also style the GeoJSON data using other options such as `stroke`, `weight`,
    `opacity`, and `fillColor`. The full list is available at [http://leafletjs.com/reference.html#path-options](http://leafletjs.com/reference.html#path-options).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用其他选项如`stroke`、`weight`、`opacity`和`fillColor`来样式化GeoJSON数据。完整的列表可在[http://leafletjs.com/reference.html#path-options](http://leafletjs.com/reference.html#path-options)找到。
- en: 'The last line creates the GeoJSON layer, calls the style function, and then
    adds it to the map. The result is seen in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行创建GeoJSON图层，调用样式函数，然后将它添加到地图中。结果可以在下面的屏幕截图看到：
- en: '![Styling GeoJSON layers](img/4812OS_02_05.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![样式化GeoJSON图层](img/4812OS_02_05.jpg)'
- en: 'The `setStyle()` method allows you to change the style after one has already
    been applied or by using events. The following code shows you how an event can
    call the `setStyle()` method to update the color of the GeoJSON layer:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`setStyle()`方法允许你在样式已经应用之后更改样式或通过使用事件。以下代码展示了如何通过事件调用`setStyle()`方法来更新GeoJSON图层的颜色：'
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The preceding code first creates a function called `styleFunction()`, which
    is called in the fourth line of code using the `style` option as shown in the
    previous example. It sets the color of the GeoJSON layer to `purple`. Next, there
    is another function, `newStyle()`, which sets the color to `green`. Lastly, there
    are two events: `mouseover` and `mouseout`. When the user hovers over the GeoJSON
    layer, the `newStyle()` function is called and the layer is colored green. As
    soon as the mouse moves off the layer, an anonymous function is called. This function
    uses the GeoJSON method, `resetStyle()`, to pass the target of the event—the GeoJSON
    layer—and changes the layer back to its original style.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码首先创建了一个名为`styleFunction()`的函数，该函数在代码的第四行使用`style`选项被调用，如前例所示。它将GeoJSON图层的颜色设置为`紫色`。接下来，还有一个名为`newStyle()`的函数，它将颜色设置为`绿色`。最后，有两个事件：`mouseover`和`mouseout`。当用户将鼠标悬停在GeoJSON图层上时，会调用`newStyle()`函数，图层被着色为绿色。一旦鼠标从图层上移开，就会调用一个匿名函数。此函数使用GeoJSON方法`resetStyle()`传递事件的靶标——GeoJSON图层，并将图层恢复到其原始样式。
- en: 'Consider the following example code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例代码：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The preceding code first creates a function called `styleFunction()`, which
    is called in the fourth line of code using the `style` option as shown in the
    previous example. It sets the color of the GeoJSON layer to `purple`. Next, there
    are two other functions: `newStyle()` and `oldStyle()`. The former sets the color
    to `green` and the latter returns the color back to the original `purple`. Lastly,
    there are two events that call the style functions: `mouseover` and `mouseout`.
    When the user hovers over the GeoJSON layer, the `newStyle()` function is called
    and the layer is colored `green`. As soon as the mouse moves off the layer, `oldStyle()`
    is called and the color is set back to `purple`.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码首先创建了一个名为`styleFunction()`的函数，该函数在第四行代码中使用`style`选项（如前例所示）被调用。它将GeoJSON图层的颜色设置为`紫色`。接下来，还有两个其他函数：`newStyle()`和`oldStyle()`。前者将颜色设置为`绿色`，后者将颜色恢复到原始的`紫色`。最后，有两个事件调用样式函数：`mouseover`和`mouseout`。当用户将鼠标悬停在GeoJSON图层上时，调用`newStyle()`函数，图层被着色为`绿色`。一旦鼠标从图层上移开，就调用`oldStyle()`函数，颜色被恢复到`紫色`。
- en: Iterating through the features
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 遍历要素
- en: In Leaflet.js, you can iterate through the features in a GeoJSON file and perform
    actions on it before it is added to the map. This can be done with the `onEachFeature`,
    `pointToLayer`, or `filter` option.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在Leaflet.js中，你可以在将GeoJSON文件中的要素添加到地图之前遍历这些要素并对其执行操作。这可以通过`onEachFeature`、`pointToLayer`或`filter`选项来完成。
- en: Attaching pop ups with onEachFeature
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用onEachFeature附加弹出窗口
- en: 'The GeoJSON layer in Leaflet.js has an `onEachFeature` option, which is called
    for every feature in the data. This can be used to bind a pop up to each feature
    as it is added to the map. The following code uses the onEachFeature option to
    bind a pop up:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Leaflet.js中的GeoJSON图层有一个`onEachFeature`选项，它会在数据中的每个要素上被调用。这可以用来在要素被添加到地图时将其绑定到一个弹出窗口上。以下代码使用`onEachFeature`选项来绑定一个弹出窗口：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the preceding code, an anonymous function is called on each feature. The
    function binds a pop up in line three with the value of the feature''s `title`
    property. You can select any one of a feature''s properties using `feature.properties.NameOfProperty`.
    The result is shown in the following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，对每个要素调用了一个匿名函数。该函数在第三行将弹出窗口绑定到要素的`title`属性值。你可以使用`feature.properties.NameOfProperty`选择要素的任何属性。结果如下面的截图所示：
- en: '![Attaching pop ups with onEachFeature](img/4812OS_02_06.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![使用onEachFeature附加弹出窗口](img/4812OS_02_06.jpg)'
- en: Creating layers from points with pointToLayer
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用pointToLayer从点创建图层
- en: 'The `pointToLayer` option works with points, as they are handled differently
    as compared to polylines and polygons. In the following code, a marker is created
    and styled for each feature based on the name of the feature:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`pointToLayer`选项与点一起工作，因为它们与折线和多边形处理方式不同。在下面的代码中，根据每个要素的名称为每个要素创建了一个标记并进行了样式设置：'
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The preceding code starts by creating a JSON variable that holds the style information.
    Next, the layers on which the markers will be created are created as `x` and `y`.
    Then, the GeoJSON layer is created and the `pointToLayer` option is called with
    an anonymous function. The function has a `switch` statement that styles the markers
    based on their `name` property. The first `case` statement has the property information
    added at the creation of the marker. The second `case` statement passes the JSON
    variable with the style information. Both work, so if you have a style that you
    want to apply to all your features, you can write it once in a variable and call
    it during the creation of the marker. Because the code assigned the layers to
    variables `x` and `y`, you can add or remove layers using `map.removeLayer(x)`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码首先创建了一个包含样式信息的JSON变量。接下来，创建了标记将要创建的图层作为`x`和`y`。然后，创建了GeoJSON图层并使用匿名函数调用了`pointToLayer`选项。该函数包含一个`switch`语句，根据标记的`name`属性来设置标记的样式。第一个`case`语句在创建标记时添加了属性信息。第二个`case`语句传递了包含样式信息的JSON变量。两者都有效，所以如果你想要将样式应用到所有要素上，你可以在变量中一次性编写它，并在创建标记时调用它。因为代码将图层分配给了变量`x`和`y`，所以你可以使用`map.removeLayer(x)`来添加或删除图层。
- en: Displaying a subset of data with filter
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用filter显示数据子集
- en: 'There might be times when you load in GeoJSON from an outside source and you
    do not want to display all the features in the data. Filtering will allow you
    to not display certain features based on criteria that you set. Modifying the
    `case` statement in the previous point-to-layer example, you will learn how to
    filter data based on the name of the feature. The following code shows you how
    to do this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，您可能从外部加载 GeoJSON，但不想显示数据中的所有特征。过滤将允许您根据您设置的准则不显示某些特征。修改之前点对层示例中的 `case`
    语句，您将学习如何根据特征的名称过滤数据。以下代码显示了如何进行此操作：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The preceding code should look similar to the previous examples. You create
    the GeoJSON layer and then pass the `filter` option. The option uses an anonymous
    function. The function, in this case, is a `switch` statement that takes the name
    of the feature as a parameter. Since the function is deciding on whether or not
    to display a feature, the return value is a Boolean. In this example, if the name
    of the feature is `My Other Point`, it will not be displayed. The following screenshot
    shows you the result; only one marker is added to the map:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码应与之前的示例类似。您创建 GeoJSON 层，然后传递 `filter` 选项。该选项使用匿名函数。在这个例子中，该函数是一个 `switch`
    语句，它接受特征的名称作为参数。由于该函数决定是否显示一个特征，因此返回值是一个布尔值。在这个例子中，如果特征的名称是 `My Other Point`，则它将不会显示。以下截图显示了结果；地图上只添加了一个标记：
- en: '![Displaying a subset of data with filter](img/4812OS_02_07.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![使用过滤器显示数据子集](img/4812OS_02_07.jpg)'
- en: Summary
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to add and style a GeoJSON layer in Leaflet.js.
    Finally, you learned how to iterate through the features in a GeoJSON file and
    perform an action such as binding a pop up or applying a style based on a property
    in the feature. GeoJSON is a popular and common data format. Knowing how to use
    it in Leaflet.js is an important skill. This chapter gave you a solid foundation
    with which you can continue to learn about GeoJSON.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何在 Leaflet.js 中添加和样式化 GeoJSON 层。最后，您学习了如何遍历 GeoJSON 文件中的特征并执行绑定弹出窗口或根据特征中的属性应用样式等操作。GeoJSON
    是一种流行且常用的数据格式。了解如何在 Leaflet.js 中使用它是一项重要的技能。本章为您提供了一个坚实的基础，您可以在其中继续学习关于 GeoJSON
    的知识。
- en: In the next chapter, you will learn how to create heatmaps using several available
    plugins.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何使用几个可用的插件创建热图。
