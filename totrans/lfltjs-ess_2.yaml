- en: Chapter 2. Mapping GeoJSON Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 1](ch01.html "Chapter 1. Creating Maps with Leaflet"), *Creating
    Maps with Leaflet*, all of the geometry elements—points, lines, and polygons—were
    created one at a time. You learned how to create groups of features using layer
    and feature groups and also multipolyline and multipolygon classes. In this chapter,
    you will learn how to add GeoJSON data to your map. The data will be comprised
    of multiple geometries and will have descriptive data associated with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is GeoJSON?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to add it to your map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to style it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Iterating through features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to call GeoJSON from external sources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the roots of GeoJSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before GeoJSON, there was **JavaScript Object Notation** (**JSON**), and before
    JSON, there was **Extensible Markup Language** (**XML**). As computers started
    to talk to each other over the Internet, the ability to send data from a service
    to a client became more important. XML, JSON, and GeoJSON are formats that represent
    and transmit data. XML was an attempt at a human-readable format that could store
    and send data. XML uses opening and closing tags to separate data. JSON is an
    alternative to XML that more closely resembles the way objects are created in
    JavaScript. JSON uses key-value pairs and is usually smaller than XML.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring GeoJSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'GeoJSON is a JSON format that encodes geometries. GeoJSON can encode points,
    line strings, and polygons. It also allows for multipart geometries. You can encode
    multipoints, multiline strings, and multipolygons. These should sound familiar
    because they are pretty close to the geometries you learned to draw in [Chapter
    1](ch01.html "Chapter 1. Creating Maps with Leaflet"), *Creating Maps with Leaflet*.
    The following GeoJSON code shows you two points in a feature collection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The feature collection in the preceding code is not a geometry, but rather a
    collection of geometries similar to the feature layer described in [Chapter 1](ch01.html
    "Chapter 1. Creating Maps with Leaflet"), *Creating Maps with Leaflet*.
  prefs: []
  type: TYPE_NORMAL
- en: To view the full GeoJSON specification, you can go to [http://geojson.org/geojson-spec.html](http://geojson.org/geojson-spec.html).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For tools that can help you write and check your JSON, see [http://www.jsoneditoronline.org/](http://www.jsoneditoronline.org/)
    or [http://geojsonlint.com/](http://geojsonlint.com/).
  prefs: []
  type: TYPE_NORMAL
- en: GeoJSON in Leaflet.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GeoJSON is just another data format for you to add to your map. It can be added
    as a hardcoded variable. Leaflet.js geometries—markers, polylines, and polygons—can
    be converted to GeoJSON. You can style the data, apply options to each feature,
    and even filter the data. The next sections will cover these topics, starting
    with adding GeoJSON as a hardcoded variable.
  prefs: []
  type: TYPE_NORMAL
- en: GeoJSON as a variable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The easiest way to add GeoJSON to your map is to hardcode the data into a variable.
    In Leaflet.js, you will start by creating a variable that will contain GeoJSON.
    In the following code, GeoJSON data consisting of two points is assigned to the
    `geojson` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have the GeoJSON data in a variable, as shown in the preceding code,
    adding it to the map is no different from adding any other geometry you have learned
    so far. The following code adds GeoJSON to the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code creates a `geoJsonLayer` variable. This variable is an instance
    of the `L.geoJson()`class. It takes a variable with the GeoJSON data as a parameter
    and then you chain `.addTo(map)` to the end.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Objects have been created using `(latitude, longitude)` in [Chapter 1](ch01.html
    "Chapter 1. Creating Maps with Leaflet"), *Creating Maps with Leaflet*; however,
    note that in GeoJSON, the format is `(longitude, latitude)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result of this code will be a map with two markers, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![GeoJSON as a variable](img/4812OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Multiple geometries in GeoJSON
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the preceding example, GeoJSON contained only points. While it is common
    for a GeoJSON file to contain a single geographic feature, it is not a requirement.
    Leaflet.js can load GeoJSON with multiple geometries in a single GeoJSON file.
    In this example, you will learn how to create and add a GeoJSON file with a point,
    line string, and polygon. The following GeoJSON code contains three different
    geometries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To create different geometries in a single GeoJSON file, you just need to specify
    the type and include the proper coordinates, as shown in the preceding code. For
    a line string, you must include at least two points. In Leaflet.js, polygons do
    not require you to close them by including the starting coordinates at the end
    of the list. GeoJSON does require you to close the polygon. The polygon in the
    preceding code starts and ends with `[-106.78059, 35.14574]`. The preceding code
    will produce the map shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Multiple geometries in GeoJSON](img/4812OS_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Polygons with holes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A polygon in GeoJSON can be a donut, that is, you can cut a polygon out of
    the middle of another polygon. The following code shows you a polygon feature
    with two polygons, the outer and inner polygons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, the first set of points creates a four-sided polygon.
    The second set of points—the next level of indentation—creates a four-sided polygon
    in the middle of the first polygon. The result is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Polygons with holes](img/4812OS_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The middle of the polygon in the preceding screenshot is hollow. If you add
    a pop up to the polygon, it will only open when you click on the blue ring.
  prefs: []
  type: TYPE_NORMAL
- en: GeoJSON from Leaflet.js objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Each of the geometries you learned about in [Chapter 1](ch01.html "Chapter 1. Creating
    Maps with Leaflet"), *Creating Maps with Leaflet*, have a `toGeoJson()` method.
    This method will convert the geometry to a GeoJSON object that can be added to
    the map. The following code shows you how to convert a marker to a GeoJSON layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code creates a marker, as you did in the *Adding data to your
    map* section in [Chapter 1](ch01.html "Chapter 1. Creating Maps with Leaflet"),
    *Creating Maps with Leaflet*. Secondly, it calls the `.toGeoJSON()` method, which
    returns a GeoJSON object and stores it as `markerAsGeoJSON`. Lastly, `markerAsGeoJSON`
    is added to the map as GeoJSON.
  prefs: []
  type: TYPE_NORMAL
- en: Styling GeoJSON layers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'GeoJSON layers have a `style` option and a `setStyle()` method. Using the `style`
    option, you specify a function that will style the layer. The following code shows
    you how to style a GeoJSON layer with the `style` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code creates a style function that returns a color based on the
    GeoJSON feature names. If it is a line string, it is colored red, and if it is
    a polygon, it is colored purple.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also style the GeoJSON data using other options such as `stroke`, `weight`,
    `opacity`, and `fillColor`. The full list is available at [http://leafletjs.com/reference.html#path-options](http://leafletjs.com/reference.html#path-options).
  prefs: []
  type: TYPE_NORMAL
- en: 'The last line creates the GeoJSON layer, calls the style function, and then
    adds it to the map. The result is seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling GeoJSON layers](img/4812OS_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `setStyle()` method allows you to change the style after one has already
    been applied or by using events. The following code shows you how an event can
    call the `setStyle()` method to update the color of the GeoJSON layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code first creates a function called `styleFunction()`, which
    is called in the fourth line of code using the `style` option as shown in the
    previous example. It sets the color of the GeoJSON layer to `purple`. Next, there
    is another function, `newStyle()`, which sets the color to `green`. Lastly, there
    are two events: `mouseover` and `mouseout`. When the user hovers over the GeoJSON
    layer, the `newStyle()` function is called and the layer is colored green. As
    soon as the mouse moves off the layer, an anonymous function is called. This function
    uses the GeoJSON method, `resetStyle()`, to pass the target of the event—the GeoJSON
    layer—and changes the layer back to its original style.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code first creates a function called `styleFunction()`, which
    is called in the fourth line of code using the `style` option as shown in the
    previous example. It sets the color of the GeoJSON layer to `purple`. Next, there
    are two other functions: `newStyle()` and `oldStyle()`. The former sets the color
    to `green` and the latter returns the color back to the original `purple`. Lastly,
    there are two events that call the style functions: `mouseover` and `mouseout`.
    When the user hovers over the GeoJSON layer, the `newStyle()` function is called
    and the layer is colored `green`. As soon as the mouse moves off the layer, `oldStyle()`
    is called and the color is set back to `purple`.'
  prefs: []
  type: TYPE_NORMAL
- en: Iterating through the features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Leaflet.js, you can iterate through the features in a GeoJSON file and perform
    actions on it before it is added to the map. This can be done with the `onEachFeature`,
    `pointToLayer`, or `filter` option.
  prefs: []
  type: TYPE_NORMAL
- en: Attaching pop ups with onEachFeature
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The GeoJSON layer in Leaflet.js has an `onEachFeature` option, which is called
    for every feature in the data. This can be used to bind a pop up to each feature
    as it is added to the map. The following code uses the onEachFeature option to
    bind a pop up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, an anonymous function is called on each feature. The
    function binds a pop up in line three with the value of the feature''s `title`
    property. You can select any one of a feature''s properties using `feature.properties.NameOfProperty`.
    The result is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Attaching pop ups with onEachFeature](img/4812OS_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating layers from points with pointToLayer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `pointToLayer` option works with points, as they are handled differently
    as compared to polylines and polygons. In the following code, a marker is created
    and styled for each feature based on the name of the feature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code starts by creating a JSON variable that holds the style information.
    Next, the layers on which the markers will be created are created as `x` and `y`.
    Then, the GeoJSON layer is created and the `pointToLayer` option is called with
    an anonymous function. The function has a `switch` statement that styles the markers
    based on their `name` property. The first `case` statement has the property information
    added at the creation of the marker. The second `case` statement passes the JSON
    variable with the style information. Both work, so if you have a style that you
    want to apply to all your features, you can write it once in a variable and call
    it during the creation of the marker. Because the code assigned the layers to
    variables `x` and `y`, you can add or remove layers using `map.removeLayer(x)`.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying a subset of data with filter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There might be times when you load in GeoJSON from an outside source and you
    do not want to display all the features in the data. Filtering will allow you
    to not display certain features based on criteria that you set. Modifying the
    `case` statement in the previous point-to-layer example, you will learn how to
    filter data based on the name of the feature. The following code shows you how
    to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code should look similar to the previous examples. You create
    the GeoJSON layer and then pass the `filter` option. The option uses an anonymous
    function. The function, in this case, is a `switch` statement that takes the name
    of the feature as a parameter. Since the function is deciding on whether or not
    to display a feature, the return value is a Boolean. In this example, if the name
    of the feature is `My Other Point`, it will not be displayed. The following screenshot
    shows you the result; only one marker is added to the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying a subset of data with filter](img/4812OS_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to add and style a GeoJSON layer in Leaflet.js.
    Finally, you learned how to iterate through the features in a GeoJSON file and
    perform an action such as binding a pop up or applying a style based on a property
    in the feature. GeoJSON is a popular and common data format. Knowing how to use
    it in Leaflet.js is an important skill. This chapter gave you a solid foundation
    with which you can continue to learn about GeoJSON.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to create heatmaps using several available
    plugins.
  prefs: []
  type: TYPE_NORMAL
