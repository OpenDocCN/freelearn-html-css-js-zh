["```js\n$ meteor create server-calls\n$ cd server-calls\n$ rm server-calls.*\n$ mkdir {client,server,both}\n$ meteor add twbs:bootstrap\n$ meteor\n\n```", "```js\nSwatches = new Mongo.Collection('swatches');\n\nrandomColor = function(){\n  var retCol = '#';\n  while (retCol.length<4) {\n    retCol += Random.choice('06F');\n  }\n  return retCol;\n}\n```", "```js\nTemplate.colors.helpers({\n  swatches: function(){\n    return Swatches.find().fetch();\n  }\n})\n\nTemplate.body.events({\n  'click #newColor' : function(e){\n    Swatches.insert({color:randomColor()});\n  }\n})\n```", "```js\n.swatch{\n  display:inline-block;\n  height:8rem;\n  width:8rem;\n  border-radius: 0.5rem;\n  margin-top: 1rem;\n}\n\n#newColor{\n  display:block;\n  margin-top: 0.5rem;\n}\n```", "```js\n<body>\n  <div class=\"container\">\n    <div id=\"newColor\" class=\"btn btn-info btn-lg\">\n      <span class=\"glyphicon glyphicon-plus\"></span>\n    </div>\n    {{> colors}}\n  </div>\n</body>\n\n<template name=\"colors\">\n  {{#each swatches}}\n  <div class=\"swatch\" style=\"background-color:{{color}}\"></div>\n  {{/each}}\n</template>\n```", "```js\n    Meteor.methods({\n      clearSwatches: function(){\n        Swatches.remove({});\n      }\n    });\n    ```", "```js\n    > Meteor.call('clearSwatches')\n\n    ```", "```js\n    clearSwatches: function(){\n        Swatches.remove({});\n      },\n     addUniqueSwatch: function(newColor){\n     if (Swatches.findOne({color:newColor})) return null;\n     Swatches.insert({color:newColor});\n     }\n\n    ```", "```js\n    Template.body.events({\n      'click #newColor' : function(e){\n     Meteor.call('addUniqueSwatch' , randomColor());\n      }\n    })\n    ```", "```js\naddUniqueSwatch: function(newColor){\n    if (Swatches.findOne({color:newColor})) return null;\n    Swatches.insert({color:newColor});\n return Swatches.find().count();\n  }\n```", "```js\n> Meteor.call('clearSwatches')\n\n```", "```js\n> Meteor.call('addUniqueSwatch',randomColor(), function(err,data){console.log(data);})\n\n```", "```js\nSwatch = function (color){\n  this.color = color;\n}\n\nSwatch.prototype = {\n  constructor: Swatch,\n\n  switch: function(){\n    this.color = randomColor();\n  },\n  toString: function(){\n    return \"My color is: \" + this.color;\n  }\n}\n```", "```js\n> Meteor.call('clearSwatches')\n\n```", "```js\naddUniqueSwatch: function(newColor){\n  ...\n Swatches.insert({swatch:new Swatch(newColor)});\n}\n```", "```js\n},\ncolor: function(){\n return this.swatch.color;\n}\n\n```", "```js\nTemplate.colors.events({\n  'click .swatch' : function(e){\n    this.swatch.color = randomColor();\n    Swatches.update(this._id,this);\n  }\n})\n```", "```js\n    },\n    typeName: function(){\n     return 'Swatch';\n    },\n    toJSONValue: function(){\n     return {\n     color:this.color\n     };\n    }\n\n    ```", "```js\n    EJSON.addType(\"Swatch\", function fromJSONValue(value){\n      return new Swatch(value.color);\n    });\n    ```", "```js\n    'click .swatch': function (e) {\n     this.swatch.switch();\n        Swatches.update(this._id, this);\n     console.log(this.swatch.toString());\n     }\n\n    ```", "```js\n {\n  \"_id\" : \"tktEzxMGTGNZ8oB4R\",\n    \"swatch\" : {\n      \"EJSON$type\" : \"Swatch\",\n        \"EJSON$value\" : {\n          \"EJSONcolor\" : \"#66F\"\n        }\n    }\n}\n```", "```js\n$ meteor create thirdpartyevents\n$ cd thirdpartyevents\n$ rm thirdpartyevents.*\n$ mkdir {client,server,both}\n$ meteor add meteorhacks:npm\n$ meteor\n\n```", "```js\n{\n \"twit\" : \"1.1.20\"\n}\n```", "```js\n$ meteor\n\n```", "```js\nTwitter = Meteor.npmRequire('twit');\n\nTwit = new Twitter({\n  consumer_key: 'egrdttfakeconsumerkeyFMx42339eMR8',\n  consumer_secret: 'fR2r02CthisnJCDtVisMij2WjNiafakeo6QPqsecretnxztb',\n  access_token: 'q8thisnEkn3xMiscUhafake9I5EOAtoken3DvDZM',\n  access_token_secret: '7mel7Kr8fakeaccesstokensecretdzpiDuaqtRaij914'\n});\n\nsimplifyTweet = function(tweet){\n  var retObj = {};\n  if (!tweet) return retObj;\n  retObj.created_at = tweet.created_at;\n  retObj.text = tweet.text;\n  retObj.user = '@' + tweet.user.screen_name;\n\n  return retObj;\n}\n```", "```js\nTweets = new Mongo.Collection('tweets');\n```", "```js\nstream = {};\nMeteor.methods({\n  TwitterStream: function (query) {\n    if (query == 'off') {\n      if (stream.stop != null) stream.stop();\n      Tweets.remove({});\n      return;\n    }\n    stream = Twit.stream('statuses/filter', {\n      track: query\n    });\n    stream.on('tweet', function (tweet) {\n      var simpleT = simplifyTweet(tweet);\n      console.log(simpleT);\n    });\n  }\n})\n```", "```js\nTracker.autorun(function(){\n    console.table(Tweets.find().fetch());\n  });\n```", "```js\n> Meteor.call('TwitterStream','JavaScript')\n\n```", "```js\n> Tweets.insert({a:Tweets.find().count()})\n\n```", "```js\n> Meteor.call('TwitterStream','off')\n\n```", "```js\n    stream.on('tweet', function (tweet) {\n          var simpleT = simplifyTweet(tweet);\n          console.log(simpleT);\n     Tweets.insert(simpleT);\n        });\n    ```", "```js\n    Meteor code must always run within a Fiber.\n\n    ```", "```js\n    stream.on('tweet', Meteor.bindEnvironment(\n          function (tweet) {\n          var simpleT = simplifyTweet(tweet);\n          console.log(simpleT);\n          Tweets.insert(simpleT);\n        }));\n    ```", "```js\n    > Meteor.call('TwitterStream','JavaScript')\n\n    ```", "```js\nwrappedInsert = Meteor.bindEnvironment(function(simpleT){\n  Tweets.insert(simpleT);\n});\n```", "```js\nstream.on('tweet', function (tweet) {\n      var simpleT = simplifyTweet(tweet);\n      console.log(simpleT);\n wrappedInsert(simpleT);\n    });\n```", "```js\nwrappedCallback = Meteor.bindEnvironment(\n  function (tweet) {\n    var simpleT = simplifyTweet(tweet);\n    console.log(simpleT);\n    Tweets.insert(simpleT);\n  }\n);\n...\nstream.on('tweet', wrappedCallback);\n```", "```js\n$ meteor create wrap-sample\n$ cd wrap-sample\n$ mkdir server\n$ meteor\n\n```", "```js\n    'click button': function () {\n     var x = 0;\n     while (x < 5) {\n     x++;\n     var q = \"\" + x + \". do work\";\n     Meteor.call('someCall', q, function (e, d) {\n     console.log(d);\n     });\n     }\n        }\n    ```", "```js\n    asyncCall = function(query,cb){\n      var ranLen = ~~(Math.random()*3000);\n      setTimeout(function(){\n        cb && cb(null,query + \" complete!\");\n      },ranLen);\n    };\n    ```", "```js\n    Meteor.methods({\n      someCall: function (query) {\n        console.log('performing: '+query);\n        this.unblock();\n        var syncCall = Meteor.wrapAsync(asyncCall);\n        var result = syncCall(query);\n        return result;\n      }\n    });\n    ```", "```js\n    performing: 1\\. do work\n    performing: 2\\. do work\n    performing: 3\\. do work\n    performing: 4\\. do work\n    performing: 5\\. do work\n\n    ```", "```js\n    1\\. do work complete!\n    4\\. do work complete!\n    2\\. do work complete!\n    5\\. do work complete!\n    3\\. do work complete!\n\n    ```", "```js\nfunction(query,cb)...\n```", "```js\nvar result = syncCall(query);\nreturn result;\n```"]