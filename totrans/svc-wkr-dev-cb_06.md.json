["```js\n'use strict';\n\nconsole.log(\n  'Cache', this.Cache, '\\n',\n  'caches', this.caches,'\\n',\n  'fetch', this.fetch,'\\n',\n  'getAll', this.getAll,'\\n',\n  'Request', this.Request,'\\n',\n  'Response', this.Response\n);\n```", "```js\nvar TEN_SECONDS = 10000,\n    TEN_BLOCKS = 10,\n    THREE_SECONDS = 3000,\n    FIFTY_PERCENT = 50,\n    FIVE = 5;\n\n  var CB = function(opts) {\n    opts = opts || {};\n\n    this.errorThreshold = opts.errorThreshold || FIFTY_PERCENT;\n    this.numBlocks = opts.numBlocks || TEN_BLOCKS;\n    this.timeoutDuration = opts.timeoutDuration || THREE_SECONDS;\n    this.volumeThreshold = opts.volumeThreshold || FIVE;\n    this.windowDuration = opts.windowDuration || TEN_SECONDS;\n\n    this.hanldeCircuitOpen = opts.hanldeCircuitOpen || function() {};\n    this.handleCircuitClose = opts.handleCircuitClose || function() {};\n\n    this.$buckets = [this.$createBlock()];\n    this.$state = CB.CLOSED;\n\n    this.$startTicker();\n  };\n```", "```js\nCB.prototype.run = function(command, fallback) {\n    if (this.isOpen()) {\n      this.$executeFallback(fallback || function() {});\n    } else {\n      this.$execCmd(command);\n    }\n  };\n```", "```js\nCircuitBreaker.prototype.fetch = function(request) {\n    var unavailableRes = Response.error();\n\n    return new Promise(function(resolve, reject) {\n        this.run(function(success, fail) {\n            fetch(request).then(function(res) {\n                if(res.status < 400) {\n                    success();\n                    console.log('FETCH: successful');\n                } else {\n                    fail();\n                    console.log('FETCH: failed');\n                }\n                resolve(res);\n            }).catch(function(err) {\n                fail();\n                reject(unavailableRes);\n                console.log('FETCH: unavailable');\n            });\n        }, function() {\n            resolve(unavailableRes);\n        });\n    }.bind(this));\n};\n```", "```js\n  CB.prototype.forceClose = function() {\n    this.$forced = this.$state;\n    this.$state = CB.CLOSED;\n  };\n\n  CB.prototype.forceOpen = function() {\n    this.$forced = this.$state;\n    this.$state = CB.OPEN;\n  };\n\n  CB.prototype.unforce = function() {\n    this.$state = this.$forced;\n    this.$forced = null;\n  };\n```", "```js\n    CB.prototype.isOpen = function() {\n        return this.$state === CB.OPEN;\n    };\n```", "```js\nself.onfetch = function(evt) {\n  evt.respondWith(openCache().then(function(cache) {\n    var request = evt.request;\n\n    return cache.match(request).then(function(res) {\n      return res || fetch(request);\n    });\n  }));\n};\n```", "```js\nCB.prototype.$startTicker = function() {\n    var me = this,\n      bucketIndex = 0,\n      bucketDuration = this.windowDuration / this.numBlocks;\n\n    var tick = function() {\n      if (me.$buckets.length > me.numBlocks) {\n        me.$buckets.shift();\n      }\n\n      bucketIndex++;\n\n      if (bucketIndex > me.numBlocks) {\n        bucketIndex = 0;\n\n        if (me.isOpen()) {\n          me.$state = CB.HALF_OPEN;\n        }\n      }\n\n      me.$buckets.push(me.$createBlock());\n    };\n\n    setInterval(tick, bucketDuration);\n};\n```", "```js\n  CB.prototype.$createBlock = function() {\n    return {\n      successes: 0,\n      failures: 0,\n      shortCircuits: 0,\n      timeouts: 0\n    };\n  };\n\n  CB.prototype.$lastBlock = function() {\n    var numBlocks = this.$buckets.length,\n      lastBlock = this.$buckets[numBlocks - 1];\n\n    return lastBlock;\n  };\n```", "```js\n  CB.prototype.$execCmd = function(command) {\n    var me = this,\n      increment,\n      timeout;\n\n    increment = function(prop) {\n      return function() {\n        var bucket;\n\n        if (!timeout) {\n          return;\n        }\n\n        bucket = me.$lastBlock();\n        bucket[prop]++;\n\n        if (me.$forced === null) {\n          me.$updateState();\n        }\n\n        clearTimeout(timeout);\n        timeout = null;\n      };\n    };\n\n    timeout = setTimeout(increment('timeouts'), this.timeoutDuration);\n\n    command(increment('successes'), increment('failures'));\n  };\n```", "```js\nCB.prototype.$executeFallback = function(fallback) {\n    var bucket;\n\n    fallback();\n\n    bucket = this.$lastBlock();\n    bucket.shortCircuits++;\n};\n```", "```js\nCB.prototype.$calcMetrics = function() {\n    var totalCount = 0,\n      totalErrors = 0,\n      errorPerc = 0,\n      bucket,\n      errors,\n      i;\n\n    for (i = 0, len = this.$buckets.length; i < len; i++) {\n      bucket = this.$buckets[i];\n      errors = (bucket.failures + bucket.timeouts);\n\n      totalErrors += errors;\n      totalCount += (errors + bucket.successes);\n    }\n\n    errorPerc = (totalErrors / (totalCount > 0 ? totalCount : 1)) * 100;\n\n    return {\n      totalErrors: totalErrors,\n      errorPerc: errorPerc,\n      totalCount: totalCount\n    };\n};\n```", "```js\nCB.prototype.$updateState = function() {\n    var metrics = this.$calcMetrics();\n\n    if (this.$state == CB.HALF_OPEN) {\n      var lastCmdFailed = !this.$lastBlock().successes && metrics.totalErrors > 0;\n\n      if (lastCmdFailed) {\n        this.$state = CB.OPEN;\n      } else {\n        this.$state = CB.CLOSED;\n        this.handleCircuitClose(metrics);\n      }\n    } else {\n      var overErrorThreshold = metrics.errorPerc > this.errorThreshold,\n        overVolumeThreshold = metrics.totalCount > this.volumeThreshold,\n        overThreshold = overVolumeThreshold && overErrorThreshold;\n\n      if (overThreshold) {\n        this.$state = CB.OPEN;\n        this.hanldeCircuitOpen(metrics);\n      }\n    }\n};\n```", "```js\nself.addEventListener('fetch', function(evt) {\n    var url = evt.request.url;\n\n    if(!circuitBreakers[url]) {\n        circuitBreakers[url] = new CircuitBreaker(opt);\n    }\n\n    evt.respondWith(circuitBreakers[url].fetch(evt.request));\n});\n```", "```js\nself.addEventListener('install', function(evt) {\n  evt.waitUntil(\n    caches.open(cacheName)\n      .then(function(cache) {\n        return cache.addAll([\n          'style.css',\n          'index.html',\n          'index.js',\n          'style.css'\n        ]);\n      })\n      .then(function() {\n        return self.skipWaiting();\n      })\n  );\n});\n```", "```js\nself.addEventListener('fetch', function(evt) {\n    evt.respondWith(\n        caches.match(evt.request)\n          .then(function(res) {\n            if(res.status >= 500) {\n                console.log('RESPONSE: error');\n                return Response.error();\n            } else {\n                console.log('RESPONSE: success');\n                replayQueuedRequests();\n                return res;\n            }\n        }).catch(function() {\n            queueFailedRequest(evt.request);\n        })\n    );\n});\n```", "```js\nfunction replayQueuedRequests() {\n    Object.keys(queue).forEach(function(evt) {\n        fetch(queue[evt]).then(function(){\n            if(res.status >= 500) {\n                console.log('RESPONSE: error');\n                return Response.error();\n            }\n            console.log('DELETE: queue');\n            delete queue[error];\n        }).catch(function() {\n            if (Date.now() - evt > expiration) {\n                delete queue[error];\n                console.log('DELETE: queue');\n            }\n        });\n    });\n} \n```", "```js\nfunction queueFailedRequest(request) {\n    queue[Date.now()] = request.url;\n    console.log('QUEUED: failed request');\n} \n```", "```js\n    npm install\n\n    ```", "```js\n    npm start\n\n    ```", "```js\n<section id=\"todo-area\">\n    <p>Try to add and delete some todos.</p>\n    <form id=\"add-form\">\n      <input type=\"text\" id=\"new-todo\" placeholder=\"Add a task here\"/>\n      <input type=\"text\" id=\"priority\" placeholder=\"Priority\"/>\n      <input type=\"submit\" value=\"Add\" />\n    </form>\n    <table id=\"todos\">\n    </table>\n    <p>Go to <a href=\"https://localhost:3011/report/\" target=\"_blank\">report</a></p>\n  </section>\n```", "```js\nself.onfetch = function(evt) {\n  evt.respondWith(\n    logRequest(evt.request).then(fetch)\n  );\n};\n\nfunction logRequest(req) {\n  var retRequest = function() {\n    return req;\n  };\n\n  var data = {\n    method: req.method,\n    url: req.url\n  };\n\n  return fetch(URL, {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: { 'content-type': 'application/json' }\n  }).then(retRequest, retRequest);\n}\n```", "```js\nnavigator.serviceWorker.oncontrollerchange = function() {\n    this.controller.onstatechange = function() {\n      if (this.state === 'activated') {\n        loadTodos();\n      }\n    };\n};\n```", "```js\ndocument.querySelector('#add-form').onsubmit = function(event) {\n```", "```js\nif (!newTodo) {\n    return;\n   }\n\npriority = document.querySelector('#priority').value.trim()\n                    || 'Minor';\n```", "```js\nfetch(URL, {\n    method: 'POST',\n    body: JSON.stringify(todo),\n    headers: headers,\n  }).then(function(response) {\n      return response.json();\n    }).then(function(addedTodo) {\n      document.querySelector('#todos').appendChild(getRowFor(addedTodo));\n    });\n};\n```", "```js\nfunction loadTodos() {\n  fetch(URL).then(function(res) {\n      return res.json();\n    }).then(showTodos);\n}\n```", "```js\nfunction showTodos(items) {\n  var table = document.querySelector('#todos');\n\n  table.innerHTML = '';\n  for (var i = 0, len = items.length, todo; i < len; i++) {\n    todo = items[i];\n    table.appendChild(getRowFor(todo));\n  }\n\n  if (window.parent !== window) {\n    window.parent.document.body.dispatchEvent(new CustomEvent('iframeresize'));\n  }\n}\n```", "```js\nfunction getRowFor(todo) {\n  var tr = document.createElement('TR'),\n    id = todo.id;\n\n  tr.id = id;\n\n  tr.appendChild(getCell(todo.todo));\n  tr.appendChild(getCell(todo.priority));\n  tr.appendChild(todo.isSticky ? getCell('') : getDeleteButton(id));\n\n  return tr;\n}\n```", "```js\nfunction getCell(todo) {\n  var td = document.createElement('TD');\n\n  td.textContent = todo;\n  return td;\n}\n```", "```js\nfunction getDeleteButton(id) {\n  var td = document.createElement('TD'),\n    btn = document.createElement('BUTTON');\n\n  btn.textContent = 'Delete';\n  btn.onclick = function() {\n    deleteTodo(id).then(function() {\n      var tr = document.getElementById(id);\n      tr.parentNode.removeChild(tr);\n    });\n  };\n\n  td.appendChild(btn);\n  return td;\n}\n```", "```js\nfunction deleteTodo(id) {\n  return fetch(URL + '/' + id, { method: 'DELETE' });\n}\n```", "```js\nvar todos = [\n  {\n    todo: 'Buy milk',\n    priority: 'Minor'\n  },\n  {\n    todo: 'Refill car',\n    priority: 'Medium'\n  },\n  {\n    todo: 'Learn service worker',\n    priority: 'Major'\n  }\n].map(function(todo, index) {\n  todo.id = index + 1;\n  todo.isSticky = true;\n\n  return todo;\n});\n```", "```js\napp.get('/report', function(req, res) {\n  var stats = getLogSummary();\n  var buffer = report({ stats: stats });\n  res.send(buffer);\n});\n\napp.post('/report/logs', function(req, res) {\n  var logEntry = logRequest(req.body);\n  res.status(201).json(logEntry);\n});\n\napp.get('/api/todos', function(req, res) {\n  res.json(todos.filter(function(item) {\n    return item !== null;\n  }));\n});\n\napp.get('/api/todos', function(req, res) {\n  res.json(todos.filter(function(item) {\n    return item !== null;\n  }));\n});\n\napp.delete('/api/todos/:id', function(req, res) {\n  var id = parseInt(req.params.id, 10) - 1;\n  if (!todos[id].isSticky) {\n    todos[id] = null;\n  }\n  res.sendStatus(204);\n});\n\napp.post('/api/todos', function(req, res) {\n  var todo = req.body;\n  todo.id = todos.length + 1;\n  todos.push(todo);\n  res.status(201).json(todo);\n});\n```", "```js\nfunction getLogSummary() {\n  var aggr = requestsLog.reduce(function(subSummary, entry) {\n    if (!(entry.url in subSummary)) {\n      subSummary[entry.url] = {\n        url: entry.url,\n        GET: 0,\n        POST: 0,\n        DELETE: 0,\n      };\n    }\n    subSummary[entry.url][entry.method]++;\n    return subSummary;\n  }, {});\n\n  return Object.keys(aggr).map(function(url) {\n    return aggr[url];\n  });\n}\n```", "```js\n<table id=\"todos\">\n    <tr>\n      <th>url</th>\n      <th>GET</th>\n      <th>POST</th>\n      <th>DELETE</th>\n    </tr>\n    {% for entry in stats %}\n    <tr>\n      <td>{{ entry.url }}</td>\n      <td class=\"counter\">{{ entry.GET }}</td>\n      <td class=\"counter\">{{ entry.POST }}</td>\n      <td class=\"counter\">{{ entry.DELETE }}</td>\n    </tr>\n    {% endfor %}\n  </table>\n```", "```js\nvar version = 1,\n  currentCaches = {\n    'google-analytics': 'google-analytics-v' + version\n  };\n\nself.addEventListener('activate', function(event) {\n  var cacheNamesExpected = Object.keys(currentCaches).map(function(key) {\n    return currentCaches[key];\n  });\n\n  event.waitUntil(\n    caches.keys().then(function(cacheNames) {\n      return Promise.all(\n        cacheNames.map(function(cacheName) {\n          if (cacheNamesExpected.indexOf(cacheName) === -1) {\n            console.log('DELETE: Out of date cache:', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});\n```", "```js\nevent.respondWith(\n    caches.open(currentCaches['google-analytics']).then(function(cache) {\n      return cache.match(event.request).then(function(res) {\n        if (res) {\n          console.log(\n            '%c ✓ RESPONSE: %c Found in cache: %s',\n            'color: #5EBD00', 'color: #000000', res\n          );\n\n          return res;\n        }\n```", "```js\n return fetch(event.request.clone()).then(function(res) {\n          console.log('%c ✓ RESPONSE: %c For %s from network: %O',\n            'color: #5EBD00', 'color: #000000',\n            event.request.url, res);\n\n          if (res.status < 400) {\n            cache.put(event.request, res.clone());\n          } \n```", "```js\npromises = promises.map(function(promise) {\n      return Promise.resolve(promise);\n    });\n```", "```js\nif (res.status < 400) {\n    cache.put(event.request, res.clone());\n}\n```"]