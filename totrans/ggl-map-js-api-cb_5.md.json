["```js\ngoogle.maps.event.addDomListener(window, 'load', initMap);\n```", "```js\n    .mapClass { width: 500px; height: 500px; display: inline-block; }\n    ```", "```js\n    var map1, map2;\n    ```", "```js\n    function initMapOne() {\n      //Setting starting options of map\n      var mapOptions = {\n        center: new google.maps.LatLng(39.9078, 32.8252),\n        zoom: 10,\n        maxZoom: 15,\n        mapTypeId: google.maps.MapTypeId.ROADMAP\n      };\n\n      //Getting map DOM element\n      var mapElement = document.getElementById('mapDiv');\n\n      //Creating a map with DOM element which is just obtained\n      map1 = new google.maps.Map(mapElement, mapOptions);\n\n      //Listening center_changed event of map 1 to\n      //change center of map 2\n      google.maps.event.addListener(map1, 'center_changed', function() { \n         map2.setCenter(map1.getCenter());\n      });\n\n      //Listening zoom_changed event of map 1 to change\n      //zoom level of map 2\n      google.maps.event.addListener(map1, 'zoom_changed', function() {\n          map2.setZoom(map1.getZoom());\n      });\n    }\n    ```", "```js\n    function initMapTwo() {\n      //Setting starting options of map\n      var mapOptions2 = {\n        center: new google.maps.LatLng(39.9078, 32.8252),\n        zoom: 10,\n        maxZoom: 15,\n        mapTypeId: google.maps.MapTypeId.TERRAIN\n      };\n\n      //Getting map DOM element\n      var mapElement2 = document.getElementById('mapDiv2');\n\n      //Creating a map with DOM element which is just //obtained\n      map2 = new google.maps.Map(mapElement2, mapOptions2);\n\n      //Listening center_changed event of map 2 to \n      //change center of map 1\n      google.maps.event.addListener(map2, 'center_changed', function() {\n          setTimeout(function() { map1.setCenter(map2.getCenter());\n          }, 10);\n      });\n\n      //Listening zoom_changed event of map 2 to change\n      //zoom level of map 1\n      google.maps.event.addListener(map2, 'zoom_changed', function() {\n          setTimeout(function() {\n            map1.setZoom(map2.getZoom());\n          }, 10);\n      });\n    }\n    ```", "```js\n    //Starting two maps\n    function initMaps() {\n      initMapOne();\n      initMapTwo();\n    }\n    ```", "```js\n    google.maps.event.addDomListener(window, 'load', initMaps);\n    ```", "```js\n    <div id=\"mapDiv\" class=\"mapClass\"></div>\n    <div id=\"mapDiv2\" class=\"mapClass\"></div>\n    ```", "```js\ngoogle.maps.event.addListener(map1, 'center_changed', function() {\n  map2.setCenter(map1.getCenter());\n});\n```", "```js\ngoogle.maps.event.addListener(map2, 'zoom_changed', function() {\n  setTimeout(function() {\n    map1.setZoom(map2.getZoom());\n  }, 10);\n});\n```", "```js\nvar eventObj = google.maps.event.addListener(map1, 'center_changed',function() {\n    map2.setCenter(map1.getCenter());\n});\nfunction removeListener() {\n    google.maps.event.removeListener(eventObj);\n}\n```", "```js\nvar eventObj = google.maps.event.addListener(map1, 'center_changed',function() {\n    map2.setCenter(map1.getCenter());\n});\n//This one removes all the listeners of map1 object\ngoogle.maps.event.clearInstanceListeners(map1); \n//This one removes all center_changed listeners of map1 object\ngoogle.maps.event.clearListeners(map1, 'center_changed');\n```", "```js\nmap2.bindTo('center', map1, 'center');\nmap2.bindTo('zoom', map1, 'zoom');\n```", "```js\n    var infowindow = null;\n    ```", "```js\n    google.maps.event.addListener(map, 'click', function(e) {\n      if (infowindow != null)\n        infowindow.close();\n\n      infowindow = new google.maps.InfoWindow({\n        content: '<b>Mouse Coordinates : </b><br><b>Latitude : </b>' + e.latLng.lat() + '<br><b>Longitude: </b>' + e.latLng.lng(),\n        position: e.latLng\n      });\n      infowindow.open(map);\n    });\n    ```", "```js\ngoogle.maps.event.addListener(map, 'click', function(e) {\n\n});\n```", "```js\nif (infowindow != null)\n  infowindow.close();\n```", "```js\ninfowindow = new google.maps.InfoWindow({\n  content: '<b>Mouse Coordinates : </b><br><b>Latitude : </b>' + e.latLng.lat() + '<br><b>Longitude: </b>' + e.latLng.lng(),\n  position: e.latLng\n});\ninfowindow.open(map);\n```", "```js\n    .contextmenu{\n      visibility: hidden;\n      background: #ffffff;\n      border: 1px solid #8888FF;\n      z-index: 10;\n      position: relative;\n      width: 100px;\n      height: 50px;\n      padding: 5px;\n    }\n    ```", "```js\n    var contextMenu, lastCoordinate;\n    ```", "```js\n    //Defining the context menu class.\n    function ContextMenuClass(map) {\n      this.setMap(map);\n      this.map = map;\n      this.mapDiv = map.getDiv();\n      this.menuDiv = null;\n    };\n\n    ContextMenuClass.prototype = new google.maps.OverlayView();\n    ContextMenuClass.prototype.draw = function() {};\n    ContextMenuClass.prototype.onAdd = function() {\n      var that = this;\n      this.menuDiv = document.createElement('div');\n      this.menuDiv.className = 'contextmenu';\n      this.menuDiv.innerHTML = '<a href=\"javascript:createMarker()\">Create Marker Here</a><br><a href=\"javascript:zoomIn()\">Zoom In</a><br><a href=\"javascript:zoomOut()\">Zoom Out</a><br>';\n      this.getPanes().floatPane.appendChild(this.menuDiv);\n\n      //This event listener below will close the context menu //on map click\n      google.maps.event.addListener(this.map, 'click', function(mouseEvent) {\n          that.hide();\n      });\n    };\n\n    ContextMenuClass.prototype.onRemove = function() {\n      this.menuDiv.parentNode.removeChild(this.menuDiv);\n    };\n\n    ContextMenuClass.prototype.show = function(coord) {\n      var proj = this.getProjection();\n      var mouseCoords = proj.fromLatLngToDivPixel(coord);\n      var left = Math.floor(mouseCoords.x);\n      var top =  Math.floor(mouseCoords.y);\n      this.menuDiv.style.display = 'block';\n      this.menuDiv.style.left = left + 'px';\n      this.menuDiv.style.top = top + 'px';\n      this.menuDiv.style.visibility = 'visible';\n    };\n\n    ContextMenuClass.prototype.hide = function(x,y) {\n      this.menuDiv.style.visibility= 'hidden';\n    }\n    ```", "```js\n    //Defining context menu functions\n    function zoomIn() {\n      map.setZoom(map.getZoom() + 1);\n    }\n\n    function zoomOut() {\n      map.setZoom(map.getZoom() - 1);\n    }\n\n    function createMarker() {\n      var marker = new google.maps.Marker({\n        position: lastCoordinate,\n        map: map,\n        title: 'Random Marker'\n      });\n    }\n    ```", "```js\n    //Creating a context menu to use it in event handler\n    contextMenu = new ContextMenuClass(map);\n\n    //Listening the map object for mouse right click.\n    google.maps.event.addListener(map, 'rightclick', function(e) {\n        lastCoordinate = e.latLng;\n        contextMenu.show(e.latLng);\n    });\n    ```", "```js\nfunction ContextMenuClass (map) {\n  this.setMap(map);\n  this.map = map;\n  this.mapDiv = map.getDiv();\n  this.menuDiv = null;\n};\n```", "```js\nContextMenuClass.prototype = new google.maps.OverlayView();\n```", "```js\n    ContextMenuClass.prototype.onAdd = function () {\n      var that = this;\n      this.menuDiv = document.createElement('div');\n      this.menuDiv.className = 'contextmenu';\n      this.menuDiv.innerHTML = '<a href=\"javascript:createMarker()\">Create Marker Here</a><br><a href=\"javascript:zoomIn()\">Zoom In</a><br><a href=\"javascript:zoomOut()\">Zoom Out</a><br>';\n      this.getPanes().floatPane.appendChild(this.menuDiv);\n\n      //This event listener below will close the context menu // on map click\n      google.maps.event.addListener(this.map, 'click', function(mouseEvent){\n          that.hide();\n      });\n    };\n    ```", "```js\n    ContextMenuClass.prototype.draw = function() {};\n    ```", "```js\n    ContextMenuClass.prototype.onRemove = function() {\n      this.menuDiv.parentNode.removeChild(this.menuDiv);\n    };\n    ```", "```js\n    ContextMenuClass.prototype.show = function(coord) {\n      var proj = this.getProjection();\n      var mouseCoords = proj.fromLatLngToDivPixel(coord);\n      var left = Math.floor(mouseCoords.x);\n      var top =  Math.floor(mouseCoords.y);\n      this.menuDiv.style.display = 'block';\n      this.menuDiv.style.left = left + 'px';\n      this.menuDiv.style.top = top + 'px';\n      this.menuDiv.style.visibility = 'visible';\n    };\n    ```", "```js\n    ContextMenuClass.prototype.hide = function(x,y) {\n      this.menuDiv.style.visibility = 'hidden';\n    }\n    ```", "```js\ncontextMenu = new ContextMenuClass(map);\n```", "```js\ngoogle.maps.event.addListener(map, 'rightclick', function(e) {\n  lastCoordinate = e.latLng;\n  contextMenu.show(e.latLng);\n});\n```", "```js\n    var allowedMapBounds = new google.maps.LatLngBounds(\n      new google.maps.LatLng(35.817813, 26.147461),\n      new google.maps.LatLng(42.049293, 44.274902)\n    );\n    var allowedZoomLevel = 6;\n    ```", "```js\n    google.maps.event.addListener(map, 'drag', checkBounds);\n    google.maps.event.addListener(map, 'zoom_changed', checkBounds);\n    ```", "```js\n    function checkBounds() {\n      if (map.getZoom() < allowedZoomLevel) \n        map.setZoom(allowedZoomLevel);\n    }\n    ```", "```js\n    if (allowedMapBounds) {\n      var allowedNELng = allowedMapBounds.getNorthEast().lng();\n      var allowedNELat = allowedMapBounds.getNorthEast().lat();\n      var allowedSWLng = allowedMapBounds.getSouthWest().lng();\n      var allowedSWLat = allowedMapBounds.getSouthWest().lat();\n\n      var recentBounds = map.getBounds();\n      var recentNELng = recentBounds.getNorthEast().lng();\n      var recentNELat = recentBounds.getNorthEast().lat();\n      var recentSWLng = recentBounds.getSouthWest().lng();\n      var recentSWLat = recentBounds.getSouthWest().lat();\n\n      var recentCenter = map.getCenter();\n      var centerX = recentCenter.lng();\n      var centerY = recentCenter.lat();\n\n      var nCenterX = centerX;\n      var nCenterY = centerY;\n    }\n    ```", "```js\n    if (recentNELng > allowedNELng) centerX = centerX- (recentNELng - allowedNELng);\n    if (recentNELat > allowedNELat) centerY = centerY- (recentNELat - allowedNELat);\n    if (recentSWLng < allowedSWLng) centerX = centerX+ (allowedSWLng - recentSWLng);\n    if (recentSWLat < allowedSWLat) centerY = centerY+ (allowedSWLat - recentSWLat);\n\n    if (nCenterX != centerX || nCenterY != centerY) {\n      map.panTo(new google.maps.LatLng(centerY,centerX));\n    }\n    else {\n      return;\n    }\n    ```", "```js\ngoogle.maps.event.addListener(map, 'drag', checkBounds);\ngoogle.maps.event.addListener(map, 'zoom_changed', checkBounds);\n```", "```js\nvar allowedMapBounds = new google.maps.LatLngBounds(\n  new google.maps.LatLng(35.817813, 26.147461),\n  new google.maps.LatLng(42.049293, 44.274902)\n);\n```", "```js\nvar allowedNELng = allowedMapBounds.getNorthEast().lng();\nvar allowedNELat = allowedMapBounds.getNorthEast().lat();\nvar allowedSWLng = allowedMapBounds.getSouthWest().lng();\nvar allowedSWLat = allowedMapBounds.getSouthWest().lat();\n\nvar recentBounds = map.getBounds();\nvar recentNELng = recentBounds.getNorthEast().lng();\nvar recentNELat = recentBounds.getNorthEast().lat();\nvar recentSWLng = recentBounds.getSouthWest().lng();\nvar recentSWLat = recentBounds.getSouthWest().lat();\n```", "```js\nvar recentCenter = map.getCenter();\nvar centerX = recentCenter.lng();\nvar centerY = recentCenter.lat();\n\nvar nCenterX = centerX;\nvar nCenterY = centerY;\n\nif (recentNELng > allowedNELng) centerX = centerX - (recentNELng - allowedNELng);\nif (recentNELat > allowedNELat) centerY = centerY - (recentNELat - allowedNELat);\nif (recentSWLng < allowedSWLng) centerX = centerX + (allowedSWLng - recentSWLng);\nif (recentSWLat < allowedSWLat) centerY = centerY + (allowedSWLat - recentSWLat);\n```", "```js\nif (nCenterX != centerX || nCenterY != centerY) {\n  map.panTo(new google.maps.LatLng(centerY,centerX));\n}\nelse {\n  return;\n}\n```", "```js\n    .mapControl { \n      width: 165px; \n      height: 16px; \n      background-color: #FFFFFF; \n      border-style: solid; \n      border-width: 1px; \n      padding: 2px 5px; \n    }\n    ```", "```js\n    //Defining control parameters\n    var controlDiv = document.createElement('div');\n    controlDiv.className = 'mapControl';\n    controlDiv.id = 'mapCoordinates';\n    controlDiv.innerHTML = 'Lat/Lng: 0.00 / 0.00';\n    ```", "```js\n    //Creating a control and adding it to the map.\n    map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(controlDiv);\n    ```", "```js\n    //Listening the map for mousemove event to show it in control.\n    google.maps.event.addListener(map, 'mousemove', function(e) {\n      var coordinateText = 'Lat/Lng: ' + e.latLng.lat().toFixed(6) + ' / ' + e.latLng.lng().toFixed(6);\n      controlDiv.innerHTML = coordinateText;\n    });\n    ```", "```js\n//Listening the map for mousemove event to show it in control.\ngoogle.maps.event.addListener(map, 'mousemove', function(e) {\n  var coordinateText = 'Lat/Lng: ' + e.latLng.lat().toFixed(6) + ' / ' + e.latLng.lng().toFixed(6);\n  controlDiv.innerHTML = coordinateText;\n});\n```", "```js\n    .mapControl { \n      width: 165px; \n      height: 55px; \n      background-color: #FFFFFF; \n      border-style: solid; \n      border-width: 1px; \n      padding: 2px 5px; \n    }\n    ```", "```js\n    var customObject;\n    ```", "```js\n    function createTOCControl () {\n      var controlDiv = document.createElement('div');\n      controlDiv.className = 'mapControl';\n      controlDiv.id = 'layerTable';\n      map.controls[google.maps.ControlPosition.RIGHT_TOP].push(controlDiv);\n      var html = '<b>Map Layers</b><br/>';\n      html = html + '<input type=\"checkbox\" onclick=\"checkLayers(this)\" value=\"geojson\">GeoJSON Layer<br/>';\n      html = html + '<input type=\"checkbox\" onclick=\"checkLayers(this)\" value=\"marker\">MarkerLayer';\n      controlDiv.innerHTML = html;\n    }\n    ```", "```js\n    function checkLayers(cb) {\n      //Firing customEvent with trigger function.\n      google.maps.event.trigger(customObject, 'customEvent', {layerName: cb.value, isChecked: cb.checked});\n    }\n    ```", "```js\n    //Creating Table of Contents Control.\n    createTOCControl();\n\n    //Creating custom object from Google Maps JS Base Class\n    customObject = new google.maps.MVCObject();\n\n    //Start listening custom object's custom event\n    google.maps.event.addListener(customObject, 'customEvent', function (e) {\n        var txt = '';\n        if(e.isChecked) {\n          txt = e.layerName + ' layer is added to the map';\n        }\n        else {\n          txt = e.layerName + ' layer is removed from the map';\n        }\n        alert(txt);\n    });\n    ```", "```js\n//Creating custom object from Google Maps JS Base Class\ncustomObject = new google.maps.MVCObject();\n\n//Start listening custom object's custom event\ngoogle.maps.event.addListener(customObject, 'customEvent', function (e) {\n    var txt = '';\n    if(e.isChecked) {\n      txt = e.layerName + ' layer is added to the map';\n    }\n    else {\n      txt = e.layerName + ' layer is removed from the map';\n    }\n    alert(txt);\n});\n```", "```js\n//Firing customEvent with trigger function.\ngoogle.maps.event.trigger(customObject, 'customEvent', {layerName: cb.value, isChecked: cb.checked});\n```"]