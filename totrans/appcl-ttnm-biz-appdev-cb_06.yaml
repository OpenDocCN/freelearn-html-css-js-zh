- en: Chapter 6. Using Location Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Native geolocation using basicGeo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Ti.GeoProviders framework for geolocation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multitenant geolocation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating distance between addresses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Background geolocation management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until the proliferation of mobiles, it was often challenging to tell the location
    of your users, making it difficult to provide location-based services. Now, almost
    every app developer has access to real-time geolocation information directly from
    the user's device.
  prefs: []
  type: TYPE_NORMAL
- en: With the globally mobile nature of today's employees, providing location-aware
    apps to your enterprise is just as important, if not more so as in the consumer
    market. Geolocation is playing a large role in enterprise organizations across
    a variety of domains including, fleet management, shipment tracking, sales routing,
    or simply providing real-time relevant information on resources available to mobile
    employees.
  prefs: []
  type: TYPE_NORMAL
- en: Through a series of location service examples, this chapter outlines a variety
    of different approaches you can leverage in your Enterprise Titanium app.
  prefs: []
  type: TYPE_NORMAL
- en: Native geolocation using basicGeo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android and iOS both provide powerful geolocation platform APIs to find the
    geographical latitude and longitude of a given address. You can use the `basicGeo`
    module to access these platform APIs in your Titanium module.
  prefs: []
  type: TYPE_NORMAL
- en: 'This recipe discusses how to leverage this module in your Titanium app to perform
    forward and reverse geolocation operations. The following screenshots illustrate
    this recipe running on both an iPhone and an Android device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Native geolocation using basicGeo](img/5343OT_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe uses the `benCode.basicGeo` native module. This module can be downloaded
    from the source code provided by the book, or individually through the links provided
    in the *See also* section at the end of this recipe. Installing these in your
    project is straightforward. Simply copy the `modules` folder into your project
    as highlighted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343OT_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After copying the `modules` folder, you will need to click on your **tiapp.xml**
    file in Titanium Studio and add a reference to the `bencoding.basicgeo` module
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343OT_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have added the `bencoding.basicgeo` module to your project, you next
    need to create your application namespaces in the `app.js` file and use `require`
    to import the module into your code as the following code snippet demonstrates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Adding availability helpers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With an ever-increasing number of devices each having different capabilities,
    it is a common requirement to provide progressive enhancements based on the ability
    of sensors. The availability feature in the `basicGeo` module provides a series
    of properties that can be used to determine the capabilities of the devices. The
    following snippet shows how to create the `Availability` proxy, for later use
    in this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Adding the location services purpose
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To use location services on iOS, Apple requires a purpose or reason for the
    app to access the GPS. On first request, this message will be used in the message
    presented to the user for approval to use their device's location services. The
    following snippet demonstrates how to add this purpose to the `basicGeo` module.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Building the recipe UI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This following code snippet describes how to create the UI shown in this recipe''s
    earlier screenshots:'
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to create the `Ti.UI.Window` to which all visual elements
    will be attached.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next a `Ti.UI.TextField` is added to the recipe's `Ti.UI.Window`. The contents
    of this `Ti.UI.TextField` will be used during the forward geolocation lookup detailed
    later in this recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The next step in this recipe is to add a `Ti.Map.View` to the recipe's `Ti.UI.Window`.
    This UI component will be used to display the address entered in the `txtAddress
    Ti.UI.TextField`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Working with place objects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When performing geolocation lookups, the `basicGeo` module returns a collection
    of places that match the address provided. The `placeHelpers` object provides
    convenient functions for working with the results returned from the `basicGeo`
    module.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `address` function provides a formatted address from a `basicGeo` place
    object. This is used by the "find current location" feature in this recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The Android reverse geolocation API provides an `address` field already formatted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In iOS, the address information is provided as an array of lines. The following
    method converts these address lines into a formatted string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `addToMap` methods add the place information provided by the `basicGeo`
    reverse geolocation to the `Ti.Map.View` created earlier in this recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A region is created using the latitude and longitude information from the `basicGeo`
    module. The `setLocation` method is then called to zoom the `Ti.Map.View` to the
    pin's coordinates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finding current location
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Perform the following steps to find the current location:'
  prefs: []
  type: TYPE_NORMAL
- en: The `findButton` demonstrates how to perform a reverse geolocation lookup using
    the device's current coordinates. These coordinates are then used to find the
    current address of the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: On the click event of the `findButton`, the `getCurrentPlace` method is called
    on the `basicGeo` module's `currentGeoLocation` proxy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `resultsCallback` method is created to handle the results returned by the
    `getCurrentPlace` method. The result from the `getCurrentPlace` method is provided
    to the `e` argument.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `e.success` property provides a flag to determine if the geolocation operation
    has encountered an error.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `e.placeCount` property provides the number of place objects returned. Generally,
    this is a number between `0` and `12` depending on the accuracy. If no places
    are returned, alert the user that the address was not found.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first place in the places collection is provided to the `placeHelpers`.address
    method. This method provides a formatted address string that is then presented
    to the user in the `Ti.UI.TextField txtAddress`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A new instance of the `CurrentGeoLocation` proxy is created. This proxy contains
    methods to perform geolocation operations using the device's current coordinates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the recipe is running on an Android device, the `setCache` method can be
    called. This enables the `basicGeo` module to use the last best location cached
    by the device. This provides faster lookup speeds, but can result in less accurate
    location information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The final step in returning the device's current address is to call the `getCurrentPlace`
    method. This method performs a reverse geolocation lookup using the device's coordinates
    and provides a collection of places to the `provide` callback method. The following
    snippet demonstrates how to call this method using the `resultsCallback` as the
    callback argument.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Forward location lookup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `searchTextAddressButton Ti.UI.Button` performs a forward geolocation lookup
    using the native device API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `searchTextAddressButton Ti.UI.Button` on click event performs a forward
    geolocation lookup using the address entered in the `txtAddress Ti.UI.TextField`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first step in the forward geolocation lookup is to verify that the user
    entered an address in the `txtAddress Ti.UI.TextField`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `forwardGeoCallback` method is created to handle the results returned by
    the `forwardGeocoder` method. The result from the `forwardGeocoder` method is
    provided to the `e` argument.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `addToMap` method is creating a call using the first place in the places
    collection. This method will create a pin on the `Ti.Map.View` with the place
    object details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next step in performing a forward geolocation lookup, is to call the `forwardGeocoder`
    method and provide a callback method as shown in the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the sample, the `txtAddress.value` and `forwardGeoCallback` are provided
    to the `forwardGeocoder` method. The results of the forward geolocation lookup
    will be provided to the `forwardGeoCallback` function as discussed earlier in
    this recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Device capability check
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to perform a device capability check:'
  prefs: []
  type: TYPE_NORMAL
- en: This recipe requires that the device supports reverse and forward geolocation
    operations. On load of the main recipe's `Ti.UI.Window`, the `Availability` object
    created earlier in this recipe is used to alert the user if his/her device can
    support running this recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `reverseGeoSupported` property is checked to determine if the device running
    the recipe can support running the recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the device does not support reverse geolocation, the user is alerted of the
    possible issues.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This recipe requires Android 4.0 or greater when running in the emulator due
    to an Android emulator defect.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the `basicGeo` module to perform native geolocation. For licensing,
    source code, and to learn more about this project, please visit [https://github.com/benbahrenburg/benCoding.BasicGeo](https://github.com/benbahrenburg/benCoding.BasicGeo).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Ti.GeoProviders framework for geolocation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Ti.GeoProviders` framework provides a multiprovider approach to reverse
    geolocation. With a variety of providers, the `Ti.GeoProviders` framework provides
    a common API for handling GeoNames.org, Google, and basicGeo geolocation operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following recipe demonstrates how to use the `Ti.GeoProviders` framework
    and its associated providers. The following screenshots illustrate this recipe
    running on both an iPhone and an Android device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Ti.GeoProviders framework for geolocation](img/5343OT_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe uses both CommonJS and native modules. These can be downloaded
    from the source code provided by the book, or individually through the links provided
    in the *See also* section at the end of this recipe. Simply copy the `Ti.GeoProviders`
    folder into the `Resources` folder of your project and then copy the `modules`
    folder into your project as shown in the following screenshot. Finally, copy the
    `provider_picker.js` file into the `Resources` folder of your Titanium project
    as also highlighted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343OT_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After copying the file and folder mentioned here, you will need to click on
    your **tiapp.xml** file in Titanium Studio and add a reference to the `bencoding.basicgeo`
    module as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343OT_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have added native and CommonJS modules to your project, you need to
    create your application namespaces in the `app.js` file and use `require` to import
    the module into your code as the following code snippet demonstrates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Adding your API key
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many of the Geo Providers require an API key. The `Ti.GeoProvider` includes
    the `addKey` method to allow you to associate your API key before making a service
    call. The following snippet demonstrates how to add the API key `demo` to your
    service calls.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Adding your purpose
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To use location services in iOS requires a purpose or reason for the app to
    access the GPS. On the first request, this message will be presented to the user.
    The following code demonstrates how to add this purpose to the `Ti.GeoProviders`
    using the `addPurpose` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Android does not require the purpose be provided; in this case the purpose defined
    is not used when accessing the GPS.
  prefs: []
  type: TYPE_NORMAL
- en: Building the recipe UI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following code snippet describes how to create the UI shown in this recipe''s
    earlier screenshots:'
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to create the `Ti.UI.Window` to which all visual elements
    will be attached.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next a `Ti.Map.View` is added to the `Ti.UI.Window`. This is used to plot the
    location information provided by the GeoProvider.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A `picker` control is then added to the `Ti.UI.Window`. This control contains
    a list of providers and a callback method to switch between them. When the user
    updates the selected picker, the `lookup.updateProvider` method is called to switch
    the active `Ti.GeoProvider`. See the *Lookup functions* section in this recipe
    for more details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `findButton` button is the final UI component added to the recipe's `Ti.UI.Window`.
    This `Ti.UI.Button` is used to run the recipe's reverse geolocation lookup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Running the reverse geolocation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For running the reverse geolocation, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When the user presses the `findButton`, the click event is fired and the following
    snippet is run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first step in this section of the recipe is to check that a network connection
    is available. A network connection is needed to contact the `Ti.GeoProvider` web
    service to perform the reverse geolocation lookup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If no network connection is available, the user is alerted to this requirement
    and the lookup process is stopped.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The final step in this section of the recipe is to call the `getCurrentAddress`
    method of `Ti.GeoProviders`. The method will use the `Ti.Geolocation` API to obtain
    the device''s coordinates, and then use the specific logic of `Ti.GeoProviders`
    to return an address object to the `onSuccess` callback method provided. If an
    error occurs during the geolocation process the `onError` callback method will
    be called and provide the error details. The following snippet demonstrates how
    to call the `getCurrentAddress` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Lookup functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The `lookup` object is used in this recipe to display the results returned by
    the GeoProvider.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using the `picker` control discussed earlier, the user can change the recipe's
    `Ti.GeoProvider`. When the provider is changed, the `updateProvider` method is
    called with the new provider details to be loaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Based on the `providerKey` given, the `updateProvider` method will switch the
    `my.currentProvider` object reference. Provider-specific details such as API key
    details will also be handled as part of this method. The geo names provider snippet
    demonstrates how provider switching is performed in this recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Cross-provider methods such as `addPurpose` are performed at the end of the
    `updateProvider` method as they are leveraged by all `Ti.GeoProviders`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `addToMap` method is used to create a map pin using the latitude, longitude,
    and address information provided by the `GeoNames Ti.GeoProvider`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A region is created using the latitude and longitude information from the `Ti.GeoProvider`.
    The `setLocation` method is then called to zoom the `Ti.Map.View` to the pin's
    coordinates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `onSuccess` method is used to handle the successful return from the `Ti.GeoProviders`.
    This method is used to orchestrate all user interactions after the successful
    return from the `Ti.GeoProviders`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `generateAddress` method is used to create a value for the `title` variable.
    The `title` variable is then used in the creation of the map pin. As `Ti.GeoProviders`
    can contain different formats, the `generateAddress` function is used to create
    a formatted address to be used for display purposes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `onError` method is used by the `Ti.GeoProviders` to return error information
    if an issue occurred during the reverse geolocation process. All error details
    are accessible in the `e` argument.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To learn more about the `basicGeo` Titanium module used in this recipe, you
    can review the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ti.GeoProvider Framework**: For licensing, source code, and to learn more
    about this project please visit [https://github.com/benbahrenburg/Ti.GeoProviders](https://github.com/benbahrenburg/Ti.GeoProviders).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**basicGeo Module**: For licensing, source code, and to learn more about this
    project please visit [https://github.com/benbahrenburg/benCoding.BasicGeo](https://github.com/benbahrenburg/benCoding.BasicGeo).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GeoNames GeoProvider**: The GeoNames provider uses the `GeoNames.org` web
    service. For licensing, usage, rates, and documentation please visit [http://www.geonames.org/](http://www.geonames.org/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google GeoProvider**: The Google provider uses the Google Geocoding API.
    For licensing, usage, rates, and documentation please visit [https://developers.google.com/maps/documentation/geocoding/](https://developers.google.com/maps/documentation/geocoding/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multitenant geolocation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed earlier in this chapter, the `Ti.GeoProviders` framework provides
    a multiprovider approach to reverse geolocation. The multitenant component includes
    the ability for the `Ti.GeoProviders` framework to fail over, if a provider is
    unable to find a suitable location. This multitenant approach helps to ensure
    your geolocation functionality works for your globally mobile employees.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following recipe demonstrates how to use the multitenant `Ti.GeoProviders`
    framework to perform reverse location lookups using a failover approach. The following
    screenshots illustrate this recipe running on both an iPhone and an Android device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Multitenant geolocation](img/5343OT_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe uses both CommonJS and native modules. These can be downloaded
    from the source code provided by the book, or individually through the links provided
    in the *See also* section at the end of this recipe. Simply copy the `GeoProviders`
    folder into the `Resources` folder of your project and then copy the `modules`
    folder into your project as highlighted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343OT_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After copying the mentioned folders, you will need to click on your `tiapp.xml`
    file in Titanium Studio and add a reference to the `bencoding.basicgeo` module
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343OT_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have added native and CommonJS modules to your project, you next need
    to create your application namespaces in the `app.js` file and use `require` to
    import the module into your code as the following code snippet demonstrates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Adding providers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following code snippet demonstrates how to add different GeoProviders to
    the `multiProvider` module by calling the `addProvider` method. It is advised
    to add the GeoProviders that you feel will best meet your requirements first since
    the `multiProvider` will execute them in the order they are added.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Adding your purpose
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using location services on iOS requires a purpose or reason for the app to
    access the GPS. On the first request, this message will be presented to the user.
    The following code demonstrates how to add this purpose to the multitenant provider
    using the `addPurpose` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Android does not require the purpose be provided; in this case the purpose defined
    is not used when accessing the GPS.
  prefs: []
  type: TYPE_NORMAL
- en: Building the recipe UI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following code snippet describes how to create the UI shown in this recipe's
    earlier screenshots. The first step is to create the `Ti.UI.Window` to which all
    visual elements will be attached.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Next, a `Ti.Map.View` is added to the `Ti.UI.Window`; this will be used to display
    a map pin with the device's current location and address details.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Lookup helper methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The `lookup` object is designed to help format the results of the multitenant
    reverse geolocation component and present the address information in a graphical
    way to the recipe user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `addToMap` method creates a map pin and adds the information to `Ti.Map.View`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A region is created using the map pin coordinates and the `setLocation` function
    of `Ti.Map.View` is then called. This will zoom the map to the coordinates of
    the recently added pin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `onSuccess` method is provided as the success callback when the `getCurrentAddress`
    method is called. The result of the `getCurrentAddress` method is provided to
    the `e` parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `getProvider` method is called to create a reference to the provider used
    to return the location results. This allows for the provider-specific `generateAddress`
    method to be used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `onError` method is provided as the error callback when the `getCurrentAddress`
    method is called. Error details are provided to the `e` parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Performing a multitenant reverse geolocation lookup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The final section of this recipe is to perform the multitenant lookup using
    the `getCurrentAddress` method of the `multiProvider` module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `multiProvider` lookup is performed on the click event of `findButton`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As a network connection is required for the reverse geolocation, the first step
    in the reverse geolocation process is to validate the network connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, the `getCurrentAddress` method is called, and a success and error callback
    method is provided. The following code snippet demonstrates calling this method
    with the `lookup.onSuccess` and `lookup.OnError` callback methods discussed earlier
    in this recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Calculating distance between addresses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The use of geolocation services in enterprise apps is common. One of the most
    common geolocation requirements is to calculate the distance between two points.
    This is helpful in planning routes, determining mileage, forecasting delivery
    schedules, and more.
  prefs: []
  type: TYPE_NORMAL
- en: The following recipe demonstrates how to calculate the distance between two
    addresses. This distance measurement is done using a direct distance, not a routing
    calculation such as those used for walking or driving. The following screenshots
    illustrate this recipe running on both an iPhone and an Android device.
  prefs: []
  type: TYPE_NORMAL
- en: '![Calculating distance between addresses](img/5343OT_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe uses both CommonJS and native modules. These can be downloaded
    from the source code provided by the book, or individually through the links provided
    in the *See also* section at the end of this recipe. Simply copy the `forwardGeo.js`
    file into the `Resources` folder of your project and then copy the `modules` folder
    into your project as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343OT_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After copying the file and folder mentioned here, you will need to click on
    your **tiapp.xml** file in Titanium Studio and add a reference to the `bencoding.basicgeo`
    module as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343OT_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have added native and CommonJS modules to your project, you next need
    to create your application namespaces in the `app.js` file and use `require` to
    import the module into your code as the following code snippet demonstrates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Adding address information
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following `startAddress` and `endAddress` objects are added to the app namespace.
    These objects will be used to create the address information and coordinate state
    for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Building the recipe UI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following code snippet describes how to create the UI shown in this recipe''s
    earlier screenshots:'
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to create the `Ti.UI.Window` to which all visual elements
    will be attached.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next the `txtStartAddress Ti.UI.TextField` is created to allow the user to enter
    a starting address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next the `txtEndAddress Ti.UI.TextField` is created to allow the user to enter
    a destination address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `findButton Ti.UI.Button` is then added to the `Ti.UI.Window` later in this
    recipe. This button will be used to perform the distance calculation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Distance and address methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This recipe uses the `geo` object to perform distance and address lookup operations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: The `distanceInUnits` uses the Haversine formula and computes the direct distance
    in kilometers or meters between two sets of coordinates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the distance is less than 1 kilometer, the unit returned is converted to
    meters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `findLocations` method is used to obtain the coordinates for the addresses
    provided.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `onFinish` function is the callback method provided to the `forwardGeo`
    function. The `e` parameter provides the starting and ending address coordinates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `forwardGeo e.start` and `e.end` results are assigned to the `my.startAddress`
    and `my.endAddress` properties. The callback method is then executed, so the distance
    calculation can be performed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `forwardGeo` method is called to obtain the coordinates for the my.`startAddress`
    and my.`endAddress` objects. As discussed earlier, the geolocation results are
    provided to the `onFinish` callback method as the following code snippet demonstrates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finding the distance between the two addresses
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the user presses the `findButton` and the click event is fired, the recipe
    will perform a distance calculation between the two addresses entered.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: The first step in this process is to determine if forward geolocation is supported.
    The coordinates for each address is required for the distance calculation. A forward
    geolocation lookup is performed to obtain this information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `findDistance` method is used to make the distance calculation method call
    and format the provided results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first step in this section of the recipe is to call the `distanceInUnits`
    method using the latitude and longitude information for each address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next the distance calculation results need to be formatted. If the results are
    in kilometres, the `distance` variable is rounded to the first three decimal places.
    If it is in meters, the full value will be displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If either of the address information objects needs to be refreshed, the `geo.findLocation`
    method is called. The `findDistance` method is provided as the callback method
    to the `findLocations` function so that the distance calculation can be performed
    after the coordinates are obtained.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the address information objects do not need to be refreshed, the `findDistance`
    method is called directly to perform the distance calculation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Background geolocation management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Background geolocation is an important feature of many enterprise applications.
    The ability to monitor the device's whereabouts while in the background is a powerful
    feature that can be used for a wide range of activities from personal security
    to mileage tracking.
  prefs: []
  type: TYPE_NORMAL
- en: The following recipe demonstrates how to use the `Ti.Geo.Background` framework
    to enable background geolocation monitoring. The following screenshots illustrate
    this recipe running on both an iPhone and an Android device.
  prefs: []
  type: TYPE_NORMAL
- en: '![Background geolocation management](img/5343OT_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe uses a series of CommonJS modules. These modules can be downloaded
    from the source code provided by the book, or individually through the links provided
    in the *See also* section at the end of this recipe. Simply copy the `bGeo` folder
    into the `Resources` folder of your project as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343OT_06_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Updating your tiapp.xml file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This recipe requires a few updates to your project''s `tiapp.xml` file. The
    first update is to provide background geolocation support for iOS devices. The
    following highlighted `UIBackgroundModes` section illustrates the entry required
    by this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'This recipe uses an Android service as a keep alive. The following highlighted
    section is required for the recipe to create an internal service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Ti.Geo.Background` CommonJS module utilizes both location manager distance
    filtering and a keep-alive geo timer. This ensures that a location is recorded
    both when the device travels a specific distance, or a specified period of time
    elapses. The `Ti.Geo.Background` module manages all geolocation operations and
    maintains a distance filter so that coordinates are recorded when the device moves
    pass a specific threshold distance.
  prefs: []
  type: TYPE_NORMAL
- en: The `Ti.Geo.Timer` performs two activities. First provides a keep-alive loop
    required to keep an iOS application active, and second, on a scheduled interval
    the service records the device's current coordinates. This ensures that coordinates
    are recorded even if the individual hasn't moved.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram illustrates the interaction between the different `Ti.Geo.Background`
    components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5343OT_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Namespace and app setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once you have added native and CommonJS modules to your project, you need to
    create your application namespaces in the `app.js` file and use `require` to import
    the modules into your code as the following code snippet demonstrates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Background location options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Ti.Geo.Background` module provides a series of optional configuration parameters
    that allow you to tailor the module to your needs. The first configuration parameter
    is `purpose`. This is used by iOS when presenting the location services access
    prompt to your users.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: The `distanceFilter` is a value in meters on how often you wish to have the
    location manager fire an alert that the location has changed. The following sample
    is set to `100` and will fire a location-changed event every time the user travels
    more than 100 meters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `trackSignificantLocationChange` setting indicates that the significant
    location-change tracking should be used on iOS. This method of geolocation reduces
    battery impact by only firing events when a network change such as a cell tower
    switch is performed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `minAge` configuration is a threshold of the minimum frequency, in minutes;
    you wish to receive location updates. In the following example, you will not receive
    updates any more frequently than every 3 minutes, no matter the distance the individual
    is moving.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `maxAge` configuration is a threshold of the maximum amount of time in minutes
    you wish to go without receiving an update. This is also the threshold used by
    the `Ti.Geo.Timer` to perform a coordinate lookup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Building the recipe's UI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following code snippet describes how to create the UI shown in this recipe''s
    earlier screenshots:'
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to create the `Ti.UI.Window` upon which all visual elements
    will be attached.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The next step is to add a `Ti.Map.View` to the recipe's `Ti.UI.Window`. This
    will be used to display the coordinates collected while `Ti.Geo.Background` is
    running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `startStopButton` is then added to the `Ti.UI.Window`. This button will
    be used to start and stop the `Ti.Geo.Background` process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `clearButton` is then added to the `Ti.UI.Window`. This button will be used
    to remove all coordinate information recorded by the `Ti.Geo.Background` process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `refreshButton` is then added to the `Ti.UI.Window`. This button will be
    used to refresh the `Ti.Map.View` with the coordinates recorded by the `Ti.Geo.Background`
    process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The recipe's assistant methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This recipe implements an `assistant` object, which contains helper functions
    to work with and display coordinates collected by the `Ti.Geo.Background` module.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: The `addToMap` is the first method in the `assistant` object. This method adds
    a map pin for each of the coordinate points collected by the `Ti.Geo.Background`
    module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The next method in the `assistant` object is the `locationChangeCallback` method.
    This method is provided as the callback method for the `Ti.Geo.Background` module's
    `change` event. The change coordinates are provided to the method's `e` parameter.
    The `locationChangeCallback` method then calls the `addToMap` method to display
    the newly gathered coordinate information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The final method in the `assistant` object is the `locationErrorCallback` method.
    This method is provided as the callback method for the `Ti.Geo.Background` module's
    `error` event. Error information is provided to the method's `e` parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Geolocation events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `Ti.Geo.Background` module has several events. The events used in this
    recipe are detailed in this section. The `change` event is the primary method
    used in this recipe. This event is fired whenever a location change is generated.
    The following example demonstrates how to subscribe to this `change` event providing
    the callback method `assistant.locationChangeCallback`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'The `error` event is also used in this recipe to provide an alert to the user
    when an error has occurred in the module. The following example demonstrates how
    to subscribe to the `error` event providing the callback method `assistant.locationErrorCallback`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Background button events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This recipe uses a series of buttons to demonstrate how to call the `Ti.Geo.Background`
    module's methods. The `startStopButton` click event demonstrates how to start
    and stop the `Ti.Geo.Background` process.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: If the module is already active, the recipe will toggle the status to `off`
    and stop the module for recording coordinates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the module is off, the recipe will toggle the status to `on` and start the
    module for recording coordinates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `startStopButton` title is updated to refresh the current status of the
    module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `click` event of `refreshButton` is used to reload the recorded coordinates
    to display in the `Ti.Map.View`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: First all map annotations are removed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `readCache` method is then called to return an array containing all of the
    recorded coordinates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The snippet then loops through the coordinate array using the `assistant.addToMap`
    method to create map pins on the recipe's `Ti.Map.View`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `click` event of `clearButton` is used to remove all recorded coordinate
    information and clear the `Ti.Map.View` of all annotations as the following code
    snippet demonstrates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: iOS app-level events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The iOS platform does not allow for background services to run while the app
    is in the foreground. The following block of code demonstrates how to handle this
    iOS specific scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: First check to ensure the recipe is running on an iOS device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next an application-level listener is created on the resumed event. This will
    be fired when the app is placed in the foreground.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When the app is moved into the foreground, the recipe checks if the `Ti.Geo.Background`
    module is active. If active, the module's `paused` method must be called to disable
    the `Ti.App.iOS.BackgroundService`, while leaving the location manager active.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The next step in managing background services on iOS is to add an application-level
    event listener to the `paused` event. The `paused` event will be fired when the
    app is placed in the background.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The next snippet demonstrates how to restart the background service, if the
    `Ti.Geo.Background` module is active.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The restart method must be called when the app is paused, if you wish to continue
    collecting coordinates in the background.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The following code snippet demonstrates how to stop the `Ti.Geo.Background`
    module when the application is closed. This also provides a clean shutdown to
    the background processes and avoids iOS terminating them after approximately 10
    minutes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Ti.Geo.Background` module was used in this recipe to provide cross-platform
    background location services. For licensing, source code, and to learn more about
    this project please visit [https://github.com/benbahrenburg/Ti.Geo.Background](https://github.com/benbahrenburg/Ti.Geo.Background).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
