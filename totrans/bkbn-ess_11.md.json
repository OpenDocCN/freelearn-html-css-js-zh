["```js\n// All RequireJS modules start by calling a special \"define\" function\ndefine([\n    // The module's dependencies are the first argument\n    'collections/Books', // dependency on collections/Books.js\n    'models/Book'       // dependency on models/Book.js\n\n// The function that defines the module is the second argument\n], function(\n    // The variable names for each dependency make up the arguments to that function    Books, // alias the \"collections/Books\" module as \"Books\"\n    Book   // alias the \"models/Book\" module as \"Book\"\n) {\n    // The actual module itself goes here\n    var BookList = Backbone.View.extend({\n        // Logic for our BookList View would go here; presumably it\n        // would use both Book and Books\n    });\n    // To tell RequireJS what variable this module should \"define\" simply return\n    // that variable at the end\n    return BookList;\n    // in other words, whatever is returned will be what is passed in\n    // to other modules that depend on this one\n});\n```", "```js\n// Dependencies are brought in by using the \"require\" function\n// The module aliases are defined on the same line using the \n// standard JavaScript syntax for declaring a variable\nvar books = require('collections/Books');\nvar book = require('models/Book');\n// Just as before, the contents of the module are defined using\n// standard JavaScriptBookList = Backbone.View.extend({\n    // Logic for our BookList View would go here; presumably it would\n    // use both Book and Books\n});\n// Instead of returning what the module defines, in CommonJS modules\n// are \"exported\" by assigning them to a \"module.exports\"module.exports.BookList = BookList;\n```", "```js\n<script src=\"img/fileWithModuleDefinitions.js\"/>\n<script>\nrequire('collections/Books');\nrequire('models/Book');\nrequire('views/BookList');\n</script>\n```", "```js\nbower install jquery\n```", "```js\n{\n    \"name\": \"your-project\",\n    \"version\": \"0.0.1\",\n    \"ignore\": [\n        \"**/*.txt\"\n    ],\n    \"dependencies\": {\n        \"backbone\": \"1.0.0\",\n        \"jquery\": \"~2.0.0\"\n    },\n     \"devDependencies\": {\n        \"mocha\": \"^1.17.1\"\n    }\n}\n```", "```js\nvar BookResults = Backbone.PageableCollection.extend({\n    model: BookResult,\n    queryParams: {\n        currentPage: 'selected_page',\n        pageSize: 'num_records'\n    },\n    state: {\n        firstPage: 0,\n        currentPage: 5,\n        totalRecords: 500\n\t\t},\n\t\turl: 'www.example.com/api/book_search_results'\n});\n```", "```js\nvar BookResultsGrid =  Backgrid.Grid.extend();\nvar grid = new BookResultsGrid({\n    columns: [\n        {name: 'bookTitle', label: 'title', cell: 'string'},\n        {name: 'numPages', label: '# of Pages', cell: 'integer'},\n        {name: 'authorName', label: 'Name of the Author',\n         cell: 'string'}\n    ],\n    collection: bookResults\n});\ngrid.render();\n```", "```js\n<ul>\n    {{#each people}}\n    <li>\n        {{#if this.isMale}}Mr.{{else}}Ms.{{/if}} {{this.lastName}}\n    </li>\n    {{/each}}\n</ul>\n```", "```js\nvar template = '<ul>' +\n    '{{#each people}}' +\n    '<li>' +\n        '{{#if this.isMale}}Mr.{{else}}Ms.{{/if}} {{this.lastName}}' +\n    '</li>' +\n    '{{/each}}' +\n'</ul>';\nvar compiledTemplate = Handlebars.compile(template);\nvar TemplatedView = Backbone.View.extend({\n    render: function() {\n        var templatedHtml = compiledTemplate(this.model.toJSON());\n        this.$el.html(templatedHtml);\n        return this;\n    }\n});\nnew TemplatedView({\n    model: new Backbone.Model({isMale: 'true', lastName: 'Smith'})\n}).render().$el.html(); // will be \"Mr. Smith\"\n```", "```js\nmodule.exports = function(grunt) {\n    grunt.initConfig({\n        requirejs: {\n            app: {\n                options: {\n                    findNestedDependencies: true,\n                    mainConfigFile: 'public/js/config.js',\n                    baseUrl : 'public/js',\n                    name : 'app',\n                    out : 'build.js',\n                    optimize : 'none'\n                }\n            }\n        }\n    });\n    grunt.loadNpmTasks('grunt-contrib-requirejs');\n    grunt.registerTask('default', [\"requirejs\"]);\n};\n```", "```js\nclass HeaderView extends Backbone.View\n    tagName: 'h1'\n    initialize: ->\n        @render\n    render: ->\n        $(@el).text 'Hello World!'\nheader = new  HeaderView\n```", "```js\nvar BookView = ParentBookView.extend({\n    className: ParentBookView.prototype.className + ' book-view',\n    initialize: function(options) {\n        this.template = options.template ;\n        if (!this.template ) {\n            throw new Error('The template option is required!');\n        }\n        _.bindAll(this, ''render');\n    },\n    render: function() {\n        this.$el.html(this.template(this.model.toJSON()));\n   }\n});\n```", "```js\nBookView = ParentBookView.extend2({\n    boundMethods: ['render'],\n    className: \"book-view\",\n    propertyOptions: ['template'],\n    requiredOptions: ['template'],\n});\n```"]