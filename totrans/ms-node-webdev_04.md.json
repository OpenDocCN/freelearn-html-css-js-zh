["```js\nnpm init -y \n```", "```js\nnpm install --save-dev typescript@5.2.2\nnpm install --save-dev tsc-watch@6.0.4 \n```", "```js\nnpm install --save-dev @tsconfig/node20\nnpm install --save @types/node@20.6.1 \n```", "```js\n{\n   \"extends\": \"@tsconfig/node20/tsconfig.json\",\n    \"compilerOptions\": {                      \n        \"rootDir\": \"src\",  \n        \"outDir\": \"dist\",                                   \n    }\n} \n```", "```js\n{\n  \"name\": \"webapp\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    **\"start\": \"tsc-watch --onsuccess \\\"node dist/server.js\\\"\"**\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"tsc-watch\": \"^6.0.4\",\n    \"typescript\": \"^5.2.2\"\n  }\n} \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\nexport const handler = (req: IncomingMessage, res: ServerResponse) => {\n    res.end(\"Hello World\");\n}; \n```", "```js\nimport { createServer } from \"http\";\nimport { handler } from \"./handler\";\nconst port = 5000;\nconst server = createServer(handler);\nserver.listen(port, function() {\n    console.log(`Server listening on port ${port}`);\n}); \n```", "```js\n{\n    \"products\": [\n        { \"id\": 1, \"name\": \"Kayak\", \"category\": \"Watersports\",\n            \"description\": \"A boat for one person\", \"price\": 275 },\n        { \"id\": 2, \"name\": \"Lifejacket\", \"category\": \"Watersports\",\n            \"description\": \"Protective and fashionable\", \"price\": 48.95 },\n        { \"id\": 3, \"name\": \"Soccer Ball\", \"category\": \"Soccer\",\n            \"description\": \"FIFA-approved size and weight\",\n            \"price\": 19.50 },\n        { \"id\": 4, \"name\": \"Corner Flags\", \"category\": \"Soccer\",\n            \"description\": \"Give your playing field a professional touch\",\n            \"price\": 34.95 }\n    ]\n} \n```", "```js\nnpm start \n```", "```js\nServer listening on port 5000 \n```", "```js\n...\nconst server = createServer(**handler**);\n... \n```", "```js\n...\nexport const handler = (**req: IncomingMessage, res: ServerResponse**) => {\n    res.end(\"Hello World\");\n};\n... \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\n**import { readFile } from \"fs\";**\nexport const handler = (req: IncomingMessage, res: ServerResponse) => {\n    **readFile****(\"data.json\", (err: Error | null, data: Buffer) => {**\n **if (err == null) {**\n **res.end(data, () => console****.log(\"File sent\"));**\n **} else {**\n **console.log(`Error: ${err.message}`);**\n **res.statusCode = 500;**\n **res.end****();**\n **}**\n **});**\n}; \n```", "```js\n...\nconst server = createServer(**handler**);\n... \n```", "```js\n...\nexport const handler = (req: IncomingMessage, res: ServerResponse) => {\n    readFile(\"data.json\", (**err: Error** **| null, data: Buffer) => {**\n**if (err == null) {**\n **res.end(data, () => console.log(\"File sent\"));**\n **} else** **{**\n **console.log(`Error: ${err.message}`);**\n **res.statusCode = 500;**\n **res.end();**\n **}**\n **});**\n};\n... \n```", "```js\n...\nexport const handler = (req: IncomingMessage, res: ServerResponse) => {\n    readFile(\"data.json\", (err: Error | null, data: Buffer) => {\n        if (err == null) {\n            res.end(data, **() => console.log(\"File sent\")**);\n        } else {\n            console.log(`Error: ${err.message}`);\n            res.statusCode = 500;\n            res.end();\n        }\n    });\n};\n... \n```", "```js\nimport { createServer } from \"http\";\nimport { handler } from \"./handler\";\n**const port = 5000;**\n**const server = createServer();**\n**server.on(\"****request\", handler)**\n**server.listen(port);**\n**server.on(\"listening\", () => {**\n **console.log(`(Event) Server listening on port ${port}****`);**\n**});** \n```", "```js\n`on(event, callback)` \n```", "```js\n`off(event, callback)` \n```", "```js\n`once(event, callback)` \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\n**//import { readFile } from \"fs\";**\n**import { readFile } from** **\"fs/promises\";**\nexport const handler = (req: IncomingMessage, res: ServerResponse) => {\n **   const p: Promise<****Buffer> = readFile(\"data.json\");**\n **p.then((data: Buffer) => res.end(data, () => console.log(\"****File sent\")));**\n **p.catch((err: Error) => {**\n **console.log(`Error: ${err.message}`);**\n **res.statusCode = 500****;**\n **res.end();**\n **});**\n**};** \n```", "```js\n...\nconst p: Promise<Buffer> = readFile(\"data.json\");\n... \n```", "```js\n...\np.**then**((data: Buffer) => res.end(data, () => console.log(\"File sent\")));\n... \n```", "```js\n...\np.**catch**((err: Error) => {\n    console.log(`Error: ${err.message}`);\n    res.statusCode = 500;\n    res.end();\n});\n... \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\nimport { readFile } from \"fs/promises\";\nexport const handler = (req: IncomingMessage, res: ServerResponse) => {\n    **readFile(\"data.json\")**\n **.then((data: Buffer) => res.end(data, () =>** **console.log(\"File sent\")))**\n **.catch((err: Error) => {**\n **console.log(`Error: ${err.message}`****);**\n **res.statusCode = 500;**\n **res.end();**\n **});**\n}; \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\nimport { readFile } from \"fs/promises\";\n**export const handler = async (req: IncomingMessage, res: ServerResponse****) => {**\n **const data: Buffer = await readFile(\"data.json\");**\n **res.end(data, () => console.log****(\"File sent\"));**\n**};** \n```", "```js\n...\nexport const handler = **async** (req: IncomingMessage, res: ServerResponse) => {\n... \n```", "```js\n**...**\n**const data: Buffer = await readFile(\"data.json\");**\n**...** \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\nimport { readFile } from \"fs/promises\";\nexport const handler = async (req: IncomingMessage, res: ServerResponse) => {\n **try {**\n        const data: Buffer = await readFile(\"data.json\");\n        res.end(data, () => console.log(\"File sent\"));\n **} catch (err: any) {**\n **console.log(`Error: ${err?.message ?? err}****`);**\n **res.statusCode = 500;**\n **res.end();** \n **}**\n}; \n```", "```js\n...\nconst data: Buffer = await readFile(\"data.json\");\nres.end(data, **() =>** **console.log(\"File sent\")**);\n... \n```", "```js\n`promisify` \n```", "```js\n`callbackify` \n```", "```js\nimport { ServerResponse } from \"http\";\nimport { promisify } from \"util\";\nexport const endPromise = promisify(ServerResponse.prototype.end) as\n    (data: any) => Promise<void>; \n```", "```js\n...\nexport const endPromise = promisify(ServerResponse.prototype.end) as\n    **(data: any) => Promise<void>;**\n... \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\nimport { readFile } from \"fs/promises\";\n**import { endPromise } from \"./promises\";**\nexport const handler = async (req: IncomingMessage, res: ServerResponse) => {\n    try {\n        const data: Buffer = await readFile(\"data.json\");\n **await endPromise.bind(res)(data);**\n **console.log(\"File sent\");**\n    } catch (err: any) {\n        console.log(`Error: ${err?.message ?? err}`);\n        res.statusCode = 500;\n        res.end();  \n    }\n}; \n```", "```js\n...\nawait endPromise.**bind(res)**(data);\n... \n```", "```js\n...\nawait endPromise.bind(res)(**data**);\n... \n```", "```js\nimport { ServerResponse } from \"http\";\nimport { promisify } from \"util\";\nexport const endPromise = promisify(ServerResponse.prototype.end) as\n    (data: any) => Promise<void>;\n**export const writePromise = promisify(ServerResponse.prototype.write) as**\n **(data: any) => Promise<void>;** \n```", "```js\nimport { createServer } from \"http\";\nimport { handler } from \"./handler\";\nconst port = 5000;\nconst server = createServer();\n**server.on(\"request\", (req, res) =>** **{**\n **if (req.url?.endsWith(\"favicon.ico\")) {**\n **res.statusCode = 404;**\n **res.end();**\n **} else {**\n **handler(req, res)**\n **}**\n**});**\nserver.listen(port);\nserver.on(\"listening\", () => {\n    console.log(`(Event) Server listening on port ${port}`);\n}); \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\n**//import { readFile } from \"fs/promises\";**\nimport { endPromise, writePromise } from \"./promises\";\n**const total = 2_000_000_000;**\n**const** **iterations = 5;**\n**let shared_counter = 0;**\nexport const handler = async (req: IncomingMessage, res: ServerResponse) => {\n   ** const** **request = shared_counter++;**\n **for (let iter = 0; iter < iterations; iter++) {**\n **for (let count = 0; count < total; count++) {**\n **count++;**\n **}**\n **const msg = `Request: ${request}, Iteration: ${(iter)}`****;**\n **console.log(msg);**\n **await writePromise.bind(res)(msg + \"\\n\");**\n **}**\n **await endPromise.bind(res)(\"Done\");**\n}; \n```", "```js\n...\nRequest: 0, Iteration: 0\nRequest: 0, Iteration: 1\nRequest: 0, Iteration: 2\nRequest: 0, Iteration: 3\nRequest: 0, Iteration: 4\nRequest: 1, Iteration: 0\nRequest: 1, Iteration: 1\nRequest: 1, Iteration: 2\nRequest: 1, Iteration: 3\nRequest: 1, Iteration: 4\n... \n```", "```js\n`setImmediate` \n```", "```js\n`setTimeout` \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\nimport { endPromise, writePromise } from \"./promises\";\nconst total = 2_000_000_000;\nconst iterations = 5;\nlet shared_counter = 0;\nexport const handler = async (req: IncomingMessage, res: ServerResponse) => {\n    const request = shared_counter++;\n    **const iterate = async (iter: number = 0) => {**\n **for (let count = 0; count < total; count++) {**\n **count++;**\n **}**\n **const msg = `Request: ${request}, Iteration: ${(iter)}`;**\n **console.log(msg);**\n **await writePromise.bind(res)(msg + \"\\n\"****);**\n **if (iter == iterations -1) {**\n **await endPromise.bind(res)(\"Done\");**\n **} else {**\n **setImmediate(() => iterate****(++iter));**\n **}**\n **}**\n **iterate();**\n}; \n```", "```js\n...\nRequest: 0, Iteration: 0\nRequest: 0, Iteration: 1\nRequest: 1, Iteration: 0\nRequest: 0, Iteration: 2\nRequest: 1, Iteration: 1\nRequest: 0, Iteration: 3\nRequest: 1, Iteration: 2\nRequest: 0, Iteration: 4\nRequest: 1, Iteration: 3\nRequest: 1, Iteration: 4\n... \n```", "```js\n`...`\n`await new Promise<void>(resolve => {`\n `// executor - perform one unit of blocking work`\n `resolve();`\n`}).then(() => {`\n `// follow on - set up next unit of work`\n`});`\n`...` \n```", "```js\nimport { workerData, parentPort  } from \"worker_threads\";\nconsole.log(`Worker thread ${workerData.request} started`);\nfor (let iter = 0; iter < workerData.iterations; iter++) {\n    for (let count = 0; count < workerData.total; count++) {\n        count++;\n    }\n    parentPort?.postMessage(iter);\n}\nconsole.log(`Worker thread ${workerData.request} finished`); \n```", "```js\n...\nconsole.log(`Worker thread ${**workerData.request**} started`);\nfor (let iter = 0; iter < **workerData.iterations**; iter++) {\n    for (let count = 0; count < **workerData.total**; count++) {\n... \n```", "```js\n...\nparentPort?.**postMessage**(iter);\n... \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\nimport { endPromise, writePromise } from \"./promises\";\n**import { Worker } from \"worker_threads\";**\nconst total = 2_000_000_000;\nconst iterations = 5;\nlet shared_counter = 0;\nexport const handler = async (req: IncomingMessage, res: ServerResponse) => {\n    const request = shared_counter++;\n\n **const worker = new Worker(__dirname + \"/count_worker.js\", {**\n **workerData: {**\n **iterations,**\n **total,**\n **request**\n **}**\n **});**\n **worker.on(\"message\",** **async (iter: number) => {**\n **const msg = `Request: ${request}, Iteration: ${(iter)}`;**\n **console.log(msg);**\n **await writePromise.bind(res)(msg + \"****\\n\");**\n **});**\n **worker.on(\"exit\", async (code: number) => {**\n **if (code == 0) {**\n **await endPromise.bind(res)(\"****Done\");**\n **} else {**\n **res.statusCode = 500;**\n **await res.end();**\n **}**\n **});**\n **worker.on(\"error\", async (err) => {**\n **console.****log(err)**\n **res.statusCode = 500;**\n **await res.end();** \n **});**\n}; \n```", "```js\n...\nconst worker = new **Worker**(__dirname + \"/count_worker.js\", {\n    workerData: {\n        iterations,\n        total,\n        request\n    }\n});\n... \n```", "```js\n`__filename` \n```", "```js\n`__dirname` \n```", "```js\n...\nworker.**on**(\"message\", async (iter: number) => {\n    const msg = `Request: ${request}, Iteration: ${(iter)}`;\n    console.log(msg);\n    await writePromise.bind(res)(msg + \"\\n\");\n});\n... \n```", "```js\n...\nWorker thread 0 started\nRequest: 0, Iteration: 0\nRequest: 0, Iteration: 1\nWorker thread 1 started\nRequest: 0, Iteration: 2\nRequest: 1, Iteration: 0\nRequest: 0, Iteration: 3\nRequest: 1, Iteration: 1\nRequest: 0, Iteration: 4\nWorker thread 0 finished\nRequest: 1, Iteration: 2\nRequest: 1, Iteration: 3\nRequest: 1, Iteration: 4\nWorker thread 1 finished\n... \n```", "```js\nimport { Worker } from \"worker_threads\";\nexport const Count = (request: number, iterations: number, total: number,\n        callback: (err: Error | null, update: number | boolean) => void) => {\n    const worker = new Worker(__dirname + \"/count_worker.js\", {\n        workerData: {\n            iterations,\n            total,\n            request\n        }\n    });\n\n    worker.on(\"message\", async (iter: number) => {\n        callback(null, iter);\n    });\n\n    worker.on(\"exit\", async (code: number) => {\n        callback(code === 0 ? null : new Error(), true);\n    });\n\n    worker.on(\"error\", async (err) => {\n        callback(err, true);\n    });       \n} \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\nimport { endPromise, writePromise } from \"./promises\";\n**//import { Worker } from \"worker_threads\";**\n**import { Count } from \"./counter_cb\";**\nconst total = 2_000_000_000;\nconst iterations = 5;\nlet shared_counter = 0;\nexport const handler = async (req: IncomingMessage, res: ServerResponse) => {\n    const request = shared_counter++;\n    C**ount****(request, iterations, total, async (err, update) => {**\n **if (err !== null) {**\n **console.log(err)**\n **res.statusCode = 500;**\n **await res.end();** \n **} else** **if (update !== true) {**\n **const msg = `Request: ${request}, Iteration: ${(update)}`;**\n **console.log(msg);**\n **await writePromise.bind****(res)(msg + \"\\n\");**\n **} else {**\n **await endPromise.bind(res)(\"Done\");** \n **}**\n **});**\n}; \n```", "```js\nimport { Worker } from \"worker_threads\";\nexport const Count = (request: number,\n        iterations: number, total: number) : Promise<void> => {\n    return new Promise<void>((resolve, reject) => {\n        const worker = new Worker(__dirname + \"/count_worker.js\", {\n            workerData: {\n                iterations, total, request\n            }\n        });\n        worker.on(\"message\", (iter) => {\n            const msg = `Request: ${request}, Iteration: ${(iter)}`;           \n            console.log(msg);           \n        });\n       worker.on(\"exit\", (code) => {\n            if (code !== 0) {\n                reject();\n            } else {\n                resolve();\n            }\n        });\n\n       worker.on(\"error\", reject);       \n    });\n} \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\nimport { endPromise, writePromise } from \"./promises\";\n**//import { Count } from \"./counter_cb\";**\n**import { Count } from \"./count_promise\";**\nconst total = 2_000_000_000;\nconst iterations = 5;\nlet shared_counter = 0;\nexport const handler = async (req: IncomingMessage, res: ServerResponse) => {\n    const request = shared_counter++;\n  **try {**\n **await Count(request, iterations, total);**\n **const msg = `Request: ${request}, Iterations: ${(iterations)}`;**\n **await writePromise.bind(res)(msg + \"\\n\");**\n**await endPromise.bind(res)(\"Done\");**\n **} catch (err: any) {**\n **console.log(err);**\n **res.statusCode = 500;**\n **res.end();**\n **}**\n}; \n```"]