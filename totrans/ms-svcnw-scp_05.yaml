- en: Introduction to Server-Side Scripting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will now take a look at the server side of scripting. Here,
    we look at getting started writing server-side scripts by introducing the basics
    for producing server-side code. We will also see how to test these scripts and
    take a look at some examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be looking at the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Business rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UI actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How and when to write server-side scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing a server-side script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server-side script examples
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Business rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Business rules are usually the most used server-side scripting method. It is
    possible to use business rules in a basic way that simply requires configuration,
    rather than customization. I will say that for the majority of requirements that
    need a business rule, you will most often need to add some sort of customization
    in the form of scripts.
  prefs: []
  type: TYPE_NORMAL
- en: A particularly helpful aspect of business rules is the different ways they can
    be triggered. This allows us to run our server-side scripts at different times,
    based on actions that occur to a record.
  prefs: []
  type: TYPE_NORMAL
- en: When first viewing the business rule form, there are two options for when to
    run the business rule. These are upon the insert or update of the record. With
    the business rule in this essentially basic view, we can configure the business
    rule to run on a filter condition or ownership of a role and change field values.
    If we want to do more than this, which is often the case, we need to tick the
    advanced tick box on the form.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the advanced tick box has been checked, we then have four options for
    what action the business rule should run on. Let''s look at what these are and
    when, exactly, they run:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Insert: Runs when a new record is inserted'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Update: Runs when a record is updated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Delete: Runs when a record is deleted'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Query: Runs when records of this type are searched against'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The time that a business rule runs is also dependent on the value of the When
    field. Here, we also have four options to choose from:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before: Runs before the record is saved'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After: Runs straight after the record is saved'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Async: Runs when the scheduler runs a scheduled job that gets sent to the scheduled
    job queue after the record is saved'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Display: Runs before the form is loaded, after the data has been fetched from
    the database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is best to use before business rules when you are updating the record itself;
    then the changes are made before the insert or update, and so the record only
    updates once. After business rules should be used when the script does not affect
    the current record, so the script can run after a save.
  prefs: []
  type: TYPE_NORMAL
- en: Async will run at some point in the future, so I would only use this if the
    actions taken in the script do not need to be seen straight away. This can be
    for queuing up events for notifications or sending jobs out from ServiceNow. Display
    business rules are best used to hold data in a scratchpad so that a client-side
    script can utilize it. This is helpful, as it stops client-side script from having
    to make a round-trip to the server, as the display business rule has already collected
    the data needed.
  prefs: []
  type: TYPE_NORMAL
- en: Using these checkboxes and the When field in combination gives a good selection
    of triggers for running our server-side script. The most common tends to be a
    before or after When field value with the insert and update checkboxes ticked.
  prefs: []
  type: TYPE_NORMAL
- en: With the advanced box ticked, we can also see the advanced form section. This
    gives us the condition for running the script and a script field to put our server-side
    code into.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've had a look at the form of a business rule, let's have a look
    at how we add script. All we need to do is set up the form for when we want the
    script to run, add a condition if appropriate, and add our code in the script
    field.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, we''ll set a network category incident to a high impact when
    created. For this, we need to add a condition in the condition field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This condition field is helpful to stop running through scripts when it is not
    necessary. In the preceding code, we will only run our script if the category
    is `network`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we''ll look at the script we will run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: First, let's look at the code ServiceNow gives us for a business rule. The `executeRule`
    function we are provided with has two parameters: `current` and `previous`. `current`
    is the object that holds all the current values of the record when the business
    rule is triggered. `previous` is the object that holds the value of the record
    before any updates were made, essentially holding the previous values. Previous
    can only be used with the `update` and `delete` actions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our example sets the impact to high for network category incidents. For our
    example, we would set the When field to before, which means we do not need to
    add any script to update the record, as we are changing the current record before
    it is being saved. We also need to check the insert checkbox on our business rule.
    We can see the business rule itself in *Figure 5.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/84ad9c52-5dcc-4a1b-8d56-0ac35a32d2a9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.1: Business rule setting a high impact for network category incidents'
  prefs: []
  type: TYPE_NORMAL
- en: This gives an overview of how business rules work, and they are very well used
    across the ServiceNow platform.
  prefs: []
  type: TYPE_NORMAL
- en: UI actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: UI actions are the buttons, context menu selections, links, and list selections
    that you find throughout ServiceNow. Because you can make UI actions appear in
    different areas of the platform, they can be incredibly handy to add your script
    to.
  prefs: []
  type: TYPE_NORMAL
- en: I tend to find that the form buttons are most used for UI actions. These can
    be added as helpful additional buttons to add functionality or ways to move records
    through different states of a process.
  prefs: []
  type: TYPE_NORMAL
- en: A UI action normally runs on the server side; however, we can run them on the
    client side, too, as we explored in the client-side chapters. By using the tick
    boxes, we can run UI actions on an insert when the record is created or on an
    update once the record already exists.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s take a look at the different ways you can display a UI action
    to the user. By ticking the relevant checkboxes, a UI action you create can be
    displayed in one or multiple ways. Let''s have a look at these options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Form button**: This displays the the UI action as a button on the form, similar
    to the Update button'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Form context menu**: Displays the UI action in the context menu, the menu
    that appears when you right-click the header bar of the form'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Form link**: Displays the UI action as a link in the related links section,
    which appears between the form sections and related lists'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**List banner button**: Displays the UI action as a button at the top of a
    list view, next to the table label'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**List bottom button**: Shows the UI action at the bottom of a list as a button'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**List context menu**: Displays the UI action in the list context menu, accessed
    by right-clicking in a list of records'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**List choice**: The UI actions appear in the choices of actions on selected
    rows at the bottom of the list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**List link**: Shows the UI action in the related links section at the bottom
    of a list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In a similar way to business rules, we also get a condition and script field
    for UI actions. However, the script field starts blank on a UI action, so the
    developer must provide all of the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll take a look at scripting a basic UI action. For our example, we''ll
    build a form button to change an incident state to `In progress`. Let''s take
    a look at the code we need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we set the state to the value of `2`, which corresponds
    to the `In progress` state for incidents. Once this value has been set, all we
    need to do is update the record using `current.update`.
  prefs: []
  type: TYPE_NORMAL
- en: The `action.setRedirectURL` line is used in UI actions to redirect to the current
    record once the server-side script has run. If no redirection code is used when
    a UI action is pressed on a form, it will move back to the previous screen, usually
    the list view the record was selected from.
  prefs: []
  type: TYPE_NORMAL
- en: In our script, this redirection line is saying that once the code has run, redirect
    the page to somewhere different; in our example, we use `current` as the current
    record. This then redirects back to the record we are on. This is helpful if we
    want to keep the user on the same record and show them the changes our UI action
    has made. In this case, the user should be able to see the state change.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see the UI action in *Figure 5.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b76204ed-953e-4ea2-a92d-be09ac157d2a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.2: UI action that moves the state field to In progress'
  prefs: []
  type: TYPE_NORMAL
- en: Here, we are only using our UI action as a form button, but we could also display
    it in other ways by using the tick boxes on the right. This UI action will appear
    on new and existing incident forms with the Show insert and Show update tick boxes
    checked.
  prefs: []
  type: TYPE_NORMAL
- en: Access controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Access controls are a security aspect of ServiceNow, and whether access is given
    is mainly governed by configured roles. However, if a more complex calculation
    as to whether users are allowed access is required, we need to use script to account
    for this.
  prefs: []
  type: TYPE_NORMAL
- en: Generally, access controls are defined without the need for scripting, but there
    are still a fair amount of scenarios that require code to be used. These are often
    when information about a user is needed further than their roles; for example,
    their group membership or company.
  prefs: []
  type: TYPE_NORMAL
- en: To amend access controls, you need to have the security_admin role and ensure
    that you elevate privileges and use it before trying to make changes to them.
    To get to the scripting aspect of an access control, you need to tick the advanced
    checkbox. Once this is done, the script field will appear at the bottom of the
    form.
  prefs: []
  type: TYPE_NORMAL
- en: 'For each access control, a user is only granted access if they match all three
    aspects of the access control: the role, condition, and script. This is worth
    remembering when writing your access scripts, as it could be a role or condition
    stopping access, rather than the code you have written.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s take a look at some access control code. Here, we will allow write
    access to the task number field if the user is part of the current assignment
    group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This example will allow the user access if they are a member of the current
    assignment group. The script in an access control needs to set an answer variable
    to true or false, or simply evaluate to true or false. In the example, we are
    just using the evaluation method.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Figure 5.3*, we can see the whole access control, allowing write access
    to the task number field. This would apply to task tables; for example, incident,
    change, and problem:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d4dd062c-1770-4d73-a7aa-fdf9cefc05fd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.3: Access control for the Number field on the Task table'
  prefs: []
  type: TYPE_NORMAL
- en: Access control scripting can be fairly short, and you tend to not get such complicated
    code here, but getting the right code is very important, as access controls can
    become a very complicated area of ServiceNow, with many rules applying and not
    applying to grant or disallow access for users.
  prefs: []
  type: TYPE_NORMAL
- en: How and when to write server-side scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Server-side scripting is generally preferred to client-side scripting, so it
    should be used where possible. As server-side script tends to run away from the
    user frontend, it is less likely to affect loading times that a user would see
    as a poor user experience.
  prefs: []
  type: TYPE_NORMAL
- en: That said, it is still advisable to configure before customizing and avoid scripting
    at all, wherever possible. This is because script is harder to maintain and is
    more likely to cause issues between releases of ServiceNow.
  prefs: []
  type: TYPE_NORMAL
- en: Let's explore some common uses for server-side scripting and how to best achieve
    these tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Changing form values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Changing form values is usually best achieved by a business rule or UI action.
    If you want to change values when a user makes a click, then a UI action is best;
    however, if you simply want the values to change at all times when certain conditions
    are met, then a business rule is better. It is best to use a before business rule
    so that the form is only updated once.
  prefs: []
  type: TYPE_NORMAL
- en: Restricting access to forms and fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When restricting access to forms and fields, it is best to use an access control.
    An access control will restrict access no matter how a form is accessed, so it
    is a powerful tool. If you only need to use roles or conditions to control access
    to forms and fields, then that is the preferred method, as this is classed as
    configuration and is easier to maintain.
  prefs: []
  type: TYPE_NORMAL
- en: If your access requirements are more complicated or convoluted than this, though,
    you will need to add script to the access control. The most common reasons for
    this are that a user needs to be part of certain groups or the user is referenced
    in fields on the form.
  prefs: []
  type: TYPE_NORMAL
- en: Passing values to the client side
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, you may want to pass values to the client side because they will
    not be visible on the loaded form, and these values may be useful for running
    client scripts. In this instance, you will want to use a display business rule.
    This allows scratchpad values to be set in the display business rule, which can
    then be used in client-side script on the form.
  prefs: []
  type: TYPE_NORMAL
- en: If you are considering calling the server from an `onLoad` client script, then
    it is usually better to use a display business rule instead, as this eliminates
    the need for an extra call to the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see what a display business rule looks like in *Figure 5.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1ea516bb-7de8-439c-9dd2-0032485309dd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.4: Display business rule example'
  prefs: []
  type: TYPE_NORMAL
- en: It is worth noting that once we pick the When to run field as display, we no
    longer have the Insert, Update, Delete, or Query checkboxes available to select.
    This is because a display business rule always runs at the same time, just before
    the form is loaded.
  prefs: []
  type: TYPE_NORMAL
- en: Review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have looked at a few examples of when to script on the server and the best
    way to do it in various scenarios. Server-side scripting is usually much more
    common than client-side scripting and accounts for the majority of code in most
    ServiceNow instances.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, we are really just beginning to look at the possibilities of server-side
    scripting. There is great potential in the code that can be written, and we will
    explore some more advanced methods in the following chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Testing server-side scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with client-side scripting, there are a few ways to test server-side scripts.
    These are generally less immediate than the client-side debugging techniques,
    but essential when working to fix your code.
  prefs: []
  type: TYPE_NORMAL
- en: gs.log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first logging technique we will look at is `gs.log`. This was a very popular
    technique, and still is fairly widely used by developers. As we saw in [Chapter
    2](45863911-2233-475a-96b7-b076a4277a55.xhtml)*,* *Exploring the ServiceNow Glide
    Class*, `gs.log` lets us send logs to the system log with a script source so we
    can send messages as a piece of code executes.
  prefs: []
  type: TYPE_NORMAL
- en: We can create a `gs.log` from any server-side script, which makes it very useful;
    however, we cannot use it in a scoped application. We will have a look at scoped
    application logging later. As long as you are in the global scope, you can use
    `gs.log` and send messages to the system logs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s remind ourselves of a simple piece of code using a `gs.log`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This log will appear in the Script Log Statements module in the application
    navigator when the script runs. We can also show the values of variables at certain
    stages in a script using this method. We could use this to display the caller
    on an incident record:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This would display the current caller of an incident in the logs if used in
    a business rule. We can use the plus symbol to add strings and variables to our
    logging.
  prefs: []
  type: TYPE_NORMAL
- en: This method allows us to add as many logs as we like to our scripts to check
    that methods were called or the values of variables at certain points in the code.
  prefs: []
  type: TYPE_NORMAL
- en: Remember to remove all of your `gs.log` statements or comment them out before
    putting your code live. Leaving too many logging lines in code can make the system
    logs difficult to debug.
  prefs: []
  type: TYPE_NORMAL
- en: Logging in scoped applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we discovered when we looked at `gs.log`, it does not work in scoped applications.
    For logging in scoped applications, we need to use a different method. In fact,
    there are four methods that can be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'The four levels of logging in a scoped application are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Error`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Warn`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Info`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Debug`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This type of logging works in a very similar way to `gs.log`, but with the different
    levels of log replacing the word `log` after `gs`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at how to write a basic script for each:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: These logs are visible in the application logs table, which can be viewed by
    going to System Logs | System Log | Application Logs.
  prefs: []
  type: TYPE_NORMAL
- en: By default, when you create a new application scope, only error, warn, and info
    messages are displayed, as set by the system property related to the scope. This
    property will be named `<scope name>.logging.verbosity` and can be set at any
    of the four levels. For each level set, it will show messages at that level and
    any higher-level message types. As the default value for the property is info,
    we will see all messages, apart from debug.
  prefs: []
  type: TYPE_NORMAL
- en: In general, a lot of developers will simply use info messages as a generic way
    to debug script on the server side. However, if you are building debugging into
    the scoped application being created, it is better to use all of the level types
    for a more complete solution.
  prefs: []
  type: TYPE_NORMAL
- en: Session debug
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ServiceNow also provides some server-side debugger assistance in the form of
    session debugging. These are mainly listed as modules in the System Diagnostics
    application, but there is also security debugging available in the System Security
    application.
  prefs: []
  type: TYPE_NORMAL
- en: By clicking on these modules, you activate the debugging for that particular
    area; for example, business rules. This lasts for the session, or until you turn
    the debugging off by using the Disable All module.
  prefs: []
  type: TYPE_NORMAL
- en: I have found that these modules can be useful, mainly for the security rule
    debugging, but are not generally comprehensively used by developers.
  prefs: []
  type: TYPE_NORMAL
- en: Script debugger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The script debugger has been introduced in the Istanbul release for use in server-side
    scripting. This allows developers to set break points in any server-side script,
    to then step through in the debugger.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the debugger, you must first click the left margin in a script to create
    a break point. Then, to load the script debugger, navigate to System Diagnostics
    | Script Debugger. The script debugger appears in a new window, where you can
    see the break points created in the script, as in *Figure 5.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/659e6278-61f6-4363-b5f6-575b5280e155.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.5: Script debugger stepping through the incident events business rule'
  prefs: []
  type: TYPE_NORMAL
- en: Once the debugger is opened, trigger the script, and you are given the option
    to Start Debugging, which will allow you to step through the script.
  prefs: []
  type: TYPE_NORMAL
- en: This can be a helpful tool if you need to find out where issues are in a script
    and are unsure of where in the script the problem lies. This is also a good tool
    for longer scripts often housed in script includes.
  prefs: []
  type: TYPE_NORMAL
- en: Script examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have seen how the basics of server-side scripting work, we can take
    a look at some scripting examples to further our knowledge of how to use these
    introductory server-side techniques.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start with a further business rule example.
  prefs: []
  type: TYPE_NORMAL
- en: 'This time, we will create a before delete business rule to ensure that directors
    are not deleted. We need to set the business rule to advanced; select the delete
    checkbox and before in the When field. Let''s have a look at the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are checking whether the user is a director using the title field,
    and if so, using `setAbortAction` to stop the `delete` going ahead. To ensure
    the user is kept informed, we are also using `addErrorMessage` to display a message
    to the user and `action.setRedirectURL` to keep the user on the current record,
    so that they can see that the `delete` did not go ahead.
  prefs: []
  type: TYPE_NORMAL
- en: 'The rule can be seen in *Figure 5.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/307d57aa-70e8-4d80-9a96-61f2879fd280.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.6: Business rule to stop director deletion'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we''ll take a look at a UI action example. For this UI action, we will
    make a button to assign an incident to ourselves. Firstly, we will add a condition
    to only make the button appear on the form if it is a current member of the assignment
    group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This line ensures that the logged-in user is a member of the assignment group,
    so that the incident can be assigned to them. The code we need to assign the incident
    to the user looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The two lines set the assigned to value of the incident to the current logged-in
    user and then update the record to save the changes. This is quite a simple UI
    action, but one that is very helpful.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, in *Figure 5.7*, we see the UI action we created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6ea81b64-391f-49f4-a219-e7353090274e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.7: UI action to assign an incident to the logged in user'
  prefs: []
  type: TYPE_NORMAL
- en: Often with UI actions, the script may not need to be that long to be an effective
    solution and add value to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we will take a look at an access control script example. Sometimes
    it may be necessary to restrict access to a single group and exclude even system
    admins from seeing records.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the change request table for this example, but obviously, other
    read access controls exist that would need to be deactivated for our new access
    control to work. We will only allow the `eCAB Approval` group access to `Software`
    category changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are allowing access if the category is not `Software`; or, if it is
    `Software`, the user must be a member of the `eCAB Approval` group. We are clearing
    the Admin overrides checkbox, so even an admin will need to adhere to the rule
    to gain access. We also add the `itil` role to the rule to ensure that this role
    is needed for access to be given.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see the rule that we have created in *Figure 5.8*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2744e7b6-86e1-487a-a94f-526dd10ade02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.8: Access control to restrict access to the Software category to eCAB
    Approval group members'
  prefs: []
  type: TYPE_NORMAL
- en: This type of access control can be useful for sensitive information that perhaps
    even a system admin may not be able to view.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at the basics of server-side scripting through business
    rules, UI actions, and access controls. We saw the various different runtimes
    of business rules and the multiple ways a UI action can be displayed to the user.
    We took a look at when it is appropriate to write server-side script and some
    examples of common uses, as well as how to test server-side script. We also saw
    some practical examples of server-side scripting using learned techniques.
  prefs: []
  type: TYPE_NORMAL
- en: In the following chapter, we will be looking at the advanced side of server-side
    scripting, including script includes, scheduled jobs, and background scripts.
    We will also look at how to script in workflows and script actions, as well as
    how to set up events. We will introduce these server-side advanced topics and
    show you some practical examples.
  prefs: []
  type: TYPE_NORMAL
