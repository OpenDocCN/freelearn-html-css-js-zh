["```js\n      var InvoiceItemModel = Backbone.Model.extend({\n\n      });\n\n      var InvoiceItemCollection = Backbone.Collection.extend({\n        model: InvoiceItemModel\n      });\n    ```", "```js\n      var InvoiceItemListView = Backbone.View.extend({\n\n        // HTML element name, where to render a view.\n        tagName: 'ul',\n        // Define template.\n        template: _.template(\n          '<% _.each(items, function(item) { %>' + \n          '   <li>' + \n          '      Description: <%= item.description %>.' +\n          '      Price: <%= item.price %>.' +\n          '      Quantity: <%= item.quantity %>.' +\n          '   </li>' +\n          '<% }); %>'\n        ),\n\n        // Render view.\n        render: function() {\n\n          // Render template and set html for the view element \n          // using jQuery.\n          this.$el.html(this.template({\n            items: this.collection.toJSON()\n          }));\n\n          return this;\n        }\n      });\n    ```", "```js\n    var invoiceItemCollection = new InvoiceItemCollection([\n      { description: 'Wooden Toy House', price: 22, quantity: 3 },\n      { description: 'Farm Animal Set', price: 17, quantity: 1 },\n      { description: 'Farmer Figure', price: 8, quantity: 1 },\n      { description: 'Toy Tractor', price: 15, quantity: 1 }\n    ]);\n    ```", "```js\n    $('body').html(new InvoiceItemListView({\n      collection: invoiceItemCollection\n    }).render().el);\n    ```", "```js\n    itemTemplate: _.template(\n      'Description: <%= description %>.' + \n      'Price: <%= price %>.' +\n      'Quantity: <%= quantity %>.'\n    ),\n    ```", "```js\n    template: _.template(\n      '<% _.each(items, function(item) { %>' +\n      '  <li>' +\n      '    <%= itemTemplate(item) %>' +\n      '  </li>' +\n      '<% }); %>'\n    ),\n    ```", "```js\n    this.$el.html(this.template({\n      items: this.collection.toJSON(),\n      itemTemplate: this.itemTemplate\n    }));\n    ```", "```js\n    <head>\n\n      …\n\n      <script type=\"text/html\" class=\"template\" id=\"items\">\n        <% _.each(items, function(item) { %>\n          <li>\n            <%= itemTemplate(item) %>\n          </li>\n        <% }); %>\n      </script>\n\n      <script type=\"text/html\" class=\"template\" id=\"item\">\n        Description: <%= description %>.\n        Price: <%= price %>.\n        Quantity: <%= quantity %>\n      </script>\n\n    </head>\n    ```", "```js\n    (function($){\n\n      $(document).ready(function () {\n\n      \t // Store variable within global jQuery object.\n        $.tpl = {}\n\n        $('script.template').each(function(index) {\n\n          // Load template from DOM.\n          $.tpl[$(this).attr('id')] = _.template($(this).html());\n\n          // Remove template from DOM.\n          $(this).remove();\n        });\n      });\n\n    })(jQuery);\n    ```", "```js\n    <head>\n      ...\n      <script src=\"img/template-loader.js\"></script>\n      …\n    </head>\n    ```", "```js\n    this.$el.html($.tpl['items']({\n      items: this.collection.toJSON(),\n      itemTemplate: $.tpl['item']\n    }));\n    ```", "```js\n    // Define template.\n    template: '{{#items}}<li>' +\n              '  Description: {{description}}' +\n              '  Price: {{price}}.' +\n              '  Quantity: {{quantity}}.' +\n              '</li>{{/items}}',\n    ```", "```js\n    this.$el.html(\n      Mustache.render(this.template, {\n        items: this.collection.toJSON()\n      })\n    );\n    ```", "```js\n  var InvoiceItemListView = Backbone.View.extend({\n    tagName: 'ul',\n\n    template: Mustache.compile(\n                '{{#items}}<li>' + \n                '  Description: {{description}}' +\n                '  Price: {{price}}.' +\n                '  Quantity: {{quantity}}.' +\n                '</li>{{/items}}'\n              ),\n\n    render: function() {\n      this.$el.html(this.template({\n        items: this.collection.toJSON()\n      }));\n\n      return this;\n    }\n  });\n```", "```js\n{{#items}}\n  <li>{{> item }}</li>\n{{/items}}\n```", "```js\n  Description: {{description}}\n  Price: {{price}}.\n  Quantity: {{quantity}}.\n```", "```js\n    Mustache.render(\n      this.template,\n      { items: this.collection.toJSON() },\n      { item: this.itemTemplate }\n    );\n    ```", "```js\n    Mustache.compilePartial(\n      'item', \n      'Description: {{description}}. Price: {{price}}.\\\n       Quantity: {{quantity}}.'\n    );\n    ```", "```js\n<link href=\"lib/backbone-forms/distribution/templates/default.css\" rel=\"stylesheet\" />\n\n<script src=\"img/backbone-forms.min.js\"></script>\n```", "```js\n    var BuyerModel = Backbone.Model.extend({\n      schema: {\n        title:   { type: 'Select', options: ['Mr', 'Mrs', 'Ms'] },\n        name:    'Text',\n        email:   { validators: ['required', 'email'] },\n        birthday:'Date',\n      }\n    });\n    ```", "```js\n      var BuyerFormView = Backbone.View.extend({\n        render: function() {\n          this.form = new Backbone.Form({ model: this.model });\n\n          this.$el.html('<h3>Enter buyer details below</h3>');\n          this.$el.append(this.form.render().el);\n          this.$el.append('<button>Submit</button>');\n\n          return this;\n        },\n      });\n    ```", "```js\n        events: {\n          'click button': 'submit'\n        },\n\n        submit: function() {\n          this.form.commit();\n\n          console.log(this.model.toJSON());\n          // Object { title: \"Mr\", name: \"John Doe\",\n          // email: \"john.doe@example.com\",\n          // birthday: Thu Mar 20 1986 00:00:00 GMT+0200 (EET) }\n        }\n    ```", "```js\nvar form = new Backbone.Form({\n  data: {\n    title: 'Mr',\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n    birthday: '1986-03-20'\n  },\n\n  schema: {\n    title:   { type: 'Select', options: ['Mr', 'Mrs', 'Ms'] },\n    name:    'Text',\n    email:   { validators: ['required', 'email'] },\n    birthday:'Date',\n  }\n}).render();\n```", "```js\nvar this.data = this.getValue();\n```", "```js\n      var BuyerModel = Backbone.Model.extend({\n        schema: {\n          email: 'Text',\n        }\n      });\n    ```", "```js\n      var BuyerModel = Backbone.Model.extend({\n        schema: {\n          email: {\n            type: 'Text',\n            validators: ['required', 'email']\n          }\n        }\n      });\n    ```", "```js\n      var BuyerModel = Backbone.Model.extend({\n        schema: {\n          email: {\n            type: 'Text',\n            validators: [\n              {\n                type: 'required',\n                message: 'Email field is required'\n              },\n              'email'\n            ],\n          }\n        }\n      });\n    ```", "```js\npassword: {\n  validators: [ {\n    type: 'match',\n    field: 'passwordConfirm', \n    message: 'Passwords must match!'\n  }]\n}\n```", "```js\n//Custom function \nusername: { validators: [ \n  function checkUsername(value, formValues) { \n    var err = { \n      type: 'username', \n      message: 'Usernames must be at least 3 characters long' \n    }; \n\n    if (value.length < 3) return err; \n  } \n] }\n```", "```js\nBackbone.Form.validators.errMessages.required =\n  'Please enter a value for this field.';\n\nBackbone.Form.validators.errMessages.match =\n  'This value must match the value of {{field}}';\n\nBackbone.Form.validators.errMessages.email =\n  '{{value}} is an invalid email address.';\n```", "```js\n    validate: function(attrs) {\n      var errs = {};\n\n      if (this.usernameTaken(attrs.username)) {\n        errs.username = 'The username is taken'\n      }\n\n      if (!_.isEmpty(errs)) return errs;\n    },\n```", "```js\n      var InvoiceModel = Backbone.Model.extend({\n        schema: {\n          referenceNumber: { type: 'Text'},\n\n          date: { type: 'Date'},\n\n          status: {\n            type: 'Select',\n            options: [\n              { val: 'draft', label: 'Draft' },\n              { val: 'issued', label: 'Issued' },\n              { val: 'paid', label: 'Paid' },\n              { val: 'canceled', label: 'Canceled' }\n            ]\n          }\n\n          paidDate: { type: 'Date' },\n        }\n      });\n    ```", "```js\n      var InvoiceForm = Backbone.Form.extend({\n\n      }\n    ```", "```js\n        initialize: function() {\n\n          // Call parent method.\n          InvoiceForm.__super__.initialize.apply(this, arguments);\n\n          // Bind change status change event to the\n          // update callback.\n          this.on('status:change', this.update);\n        }\n    ```", "```js\n        update: function(form, editor) {\n          if (form.fields.status.editor.getValue() == 'paid') {\n            form.fields.paidDate.$el.show();\n          }\n          else {\n            form.fields.paidDate.$el.hide();  \n          }\n        }\n    ```", "```js\n        render: function() {\n\n          // Call parent method. \n          InvoiceForm.__super__.render.apply(this, arguments);\n          // Esnure dependent are shown properly.\n          this.update(this);\n\n          return this;\n        }\n    ```", "```js\n    <link rel=\"stylesheet\" href=\"lib/bootstrap/css/bootstrap.css\" />\n\n    <script src=\"img/bootstrap.js\"></script>\n    ```", "```js\n    <script src=\"img/backbone-forms.js\">\n    </script>\n\n    <script src=\"img/list.js\">\n    </script>\n\n    <script src=\"img/backbone.bootstrap-modal.js\">\n    </script>\n\n    <script src=\"img/bootstrap.js\">\n    </script>\n\n    <link rel=\"stylesheet\" href=\"lib/backbone-forms/distribution/templates/bootstrap.css\" />\n    ```", "```js\n    Backbone.Form.editors.List.Modal.ModalAdapter = Backbone.BootstrapModal;\n    ```", "```js\n          items:    {\n            type: 'List', itemType: 'Object', subSchema: {\n              description: { validators: ['required'] },\n              price: 'Number',\n              quantity: 'Number',          \n            }\n          }\n    ```", "```js\n  var Form = Backbone.Form;\n\n  Form.setTemplates({\n    form:\n      '<form class=\"form-horizontal\">{{fieldsets}}</form>',\n\n    // ...\n    field:\n      '<div class=\"control-group field-{{key}}\">' +\n      '  <label class=\"control-label\" for=\"{{id}}\">' +\n      '    {{title}}' +\n      '  </label>' +\n      '  <div class=\"controls\">' +\n      '    {{editor}}' +\n      '    <div class=\"help-inline\">{{error}}</div>' +\n      '    <div class=\"help-block\">{{help}}</div>' +\n      '  </div>' +\n      '</div>',\n  }, {\n    error: 'error'\n    // Set error class on the field tag when validation fails\n  });\n```", "```js\ntitle: { type: 'Select', options: ['Mr', 'Mrs', 'Ms'], template: 'customField'}\n```", "```js\nthis.form = new Backbone.Form({\n  model: this.model, template: 'customForm'\n});\n```", "```js\n      var InvoiceModel = Backbone.Model.extend({\n\n      });\n\n      var InvoiceCollection = Backbone.Collection.extend({\n        model: InvoiceModel\n      });\n    ```", "```js\n      var InvoiceListPane = Backbone.Layout.extend({\n\n        // Returns selector for template.\n        template: \"#invoice-list-pane\",\n\n        // Set selector for template.\n        serialize: function() {\n          return {\n            // Wrap the collection.\n            invoices: _.chain(this.collection.models)\n          };\n        }\n      });\n    ```", "```js\n      var InvoicePane = Backbone.Layout.extend({\n\n        // Set selector for template.\n        template: \"#invoice-pane\",\n\n        // Returns data for template.\n        serialize: function() {\n          return {\n            invoice: this.model\n          };\n        }\n      });\n    ```", "```js\n      var Workspace = Backbone.Router.extend({\n        routes: {\n          '': 'page',\n          'invoice/:id': 'page',\n        },\n\n        // Initialize function run when Router object instance// is created.\n        initialize: function() {\n          //  Create collection\n          this.collection = new InvoiceCollection([\n            {\n              referenceNumber: 'AB 12345',\n              date: new Date().toISOString(),\n              status: 'draft'\n            },\n            {\n              referenceNumber: 'ZX 98765',\n              date: new Date().toISOString(),\n              status: 'issued'\n            },\n          ]);\n        },\n\n      });\n    ```", "```js\n        page: function(id) {\n          if (!id) {\n            // Set default id.\n            id = this.collection.at(0).cid;\n          }\n\n          var layout = new Backbone.Layout({\n            // Attach the layout to the main container.\n            el: \"body\",\n\n            // Set template selector.\n            template: \"#layout\",\n\n            // Declaratively bind a nested View to the layout.\n            views: {\n              \"#invoice-list-pane\": new InvoiceListPane({\n                collection: this.collection\n              }),\n              \"#invoice-pane\": new InvoicePane({\n                model: this.collection.get(id)\n              }),\n            }\n          });\n\n          // Render the layout.\n          layout.render();\n        },\n    ```", "```js\n      <script class=\"template\" type=\"template\" id=\"layout\">\n        <h1>Invoice application</h1>\n        <div id=\"invoice-list-pane\"></div>\n        <div id=\"invoice-pane\"></div>\n      </script>\n\n      <script class=\"template\"\n          type=\"template\"id=\"invoice-list-pane\">\n        <h3>Invoices:</h3>\n        <ul>\n          <% invoices.each(function(invoice) { %>\n            <li>\n              <a href=\"#invoice/<%= invoice.cid %>\">\n                <%= invoice.get('referenceNumber') %>\n              </a>\n            </li>\n          <% }); %>\n        </ul>\n      </script>\n\n      <script class=\"template\" type=\"template\" id=\"invoice-pane\">\n        <h3>Invoice details:</h3>\n        Reference Number:\n          <%= invoice.get('referenceNumber') %><br>\n        Date: <%= invoice.get('date') %><br>\n        Status: <%= invoice.get('status') %><br>\n      </script>\n    ```", "```js\n    <link rel=\"stylesheet\" href=\"lib/backgrid/lib/backgrid.css\" />\n    <script src=\"img/backgrid.js\"></script>\n    ```", "```js\n      var InvoiceModel = Backbone.Model.extend({\n\n      });\n\n      var InvoiceCollection = Backbone.Collection.extend({\n        model: InvoiceModel\n      });\n    ```", "```js\n        var invoiceCollection = new InvoiceCollection();\n    ```", "```js\n        var columns = [\n          {\n            name: \"referenceNumber\",\n            label: \"Ref #\",\n            editable: false,\n            cell: 'string'\n          },\n          {\n            name: \"date\",\n            label: \"Date\",\n            cell: \"date\"\n          },\n          {\n            name: \"status\",\n            label: \"Status\",\n            cell: Backgrid.SelectCell.extend({\n              optionValues: [\n                ['Draft', 'draft'],\n                ['Issued', 'issued']\n              ]\n            })\n          }\n        ];\n    ```", "```js\n        var grid = new Backgrid.Grid({\n          columns: columns,\n          collection: invoiceCollection\n        });\n\n        $('body').append(grid.render().$el);\n\n        invoiceCollection.add([\n          {\n            referenceNumber: 'AB 12345',\n            date: new Date().toISOString(),\n            status: 'draft'\n          },\n          {\n            referenceNumber: 'ZX 98765',\n            date: new Date().toISOString(),\n            status: 'issued'\n          },\n        ]);\n    ```", "```js\n        invoiceCollection.add([\n          {\n            referenceNumber: 'AB 12345',\n            date: new Date().toISOString(),\n            status: 'draft'\n          },\n          {\n            referenceNumber: 'ZX 98765',\n            date: new Date().toISOString(),\n            status: 'issued'\n          },\n        ]);\n    ```", "```js\n      Backbone.history.start();\n    ```", "```js\nBackgrid.SelectCell.extend({\n  optionValues: [\n    ['Draft', 'draft'],\n    ['Issued', 'issued']\n  ]\n})\n```", "```js\n    <link rel=\"stylesheet\" href=\"lib/backgrid/lib/extensions/select-all/backgrid-select-all.css\" />\n\n    <script src=\"img/backgrid-select-all.js\"></script>\n    ```", "```js\n      var TableView = Backbone.View.extend({\n        initialize: function(columns, collection) {\n          this.collection = collection;\n\n          this.grid = new Backgrid.Grid({\n            columns: columns,\n            collection: this.collection\n          });\n        },\n\n        render: function() {\n          this.$el.html(this.grid.render().$el);\n\n          return this;\n        },\n      });\n    ```", "```js\n        initialize: function(columns, collection) {\n          this.collection = collection;\n\n          columns = [{\n            name: \"\",\n            cell: \"select-row\",\n            headerCell: \"select-all\",\n          }].concat(columns)\n\n          this.grid = new Backgrid.Grid({\n            columns: columns,\n            collection: this.collection\n          });\n        },\n    ```", "```js\n        render: function() {\n          this.$el.html(this.grid.render().$el);\n\n          this.$el.append('<button class=\"delete\">Delete</button>');\n\n          return this;\n        },\n    ```", "```js\n        events: {\n          'click button.delete': 'delete'\n        },\n\n        delete: function() {\n          _.each(this.grid.getSelectedModels(), function (model) {\n            model.destroy();\n          });\n        }\n    ```", "```js\n    $('body').append(new TableView(columns, invoiceCollection).render().$el);\n    ```", "```js\n    <link rel=\"stylesheet\" href=\"lib/backgrid/assets/css/bootstrap.css\" />\n\n    <link rel=\"stylesheet\" href=\"lib/backgrid/lib/extensions/filter/backgrid-filter.css\" />\n\n    <script src=\"img/lunr.js\"></script>\n\n    <script src=\"img/backgrid-filter.js\"></script>\n    ```", "```js\n    this.clientSideFilter =\n          new Backgrid.Extension.ClientSideFilter({\n            collection: collection,\n            placeholder: \"Search by Ref #\",\n            fields: ['referenceNumber'],\n            wait: 150\n          });\n    ```", "```js\n          this.$el.prepend(this.clientSideFilter.render().$el);\n    ```", "```js\nInvoiceItemView  var InvoiceItemView = Backbone.View.extend({\n\n});\n```", "```js\n      initialize: function() {\n        // Set box size\n        this.w = 100;\n        this.h = 75;\n\n        // Set random position\n        this.x = Math.random() * (this.options.canvasW - this.w);\n        this.y = Math.random() * (this.options.canvasH - this.h);\n      }\n    ```", "```js\n        render: function() {\n\n          // Get canvas context from parameters.\n          ctx = this.options.ctx;\n\n          // Draw transparent box\n          ctx.fillStyle = '#FF9000';\n          ctx.globalAlpha = 0.1;\n          ctx.fillRect(this.x, this.y, this.w, this.h);\n\n          // Stroke the box\n          ctx.strokeStyle = '#FF9900';\n          ctx.globalAlpha = 1;\n          ctx.lineWidth = 2;\n          ctx.strokeRect(this.x, this.y, this.w, this.h);\n\n          // Output text in the box\n          ctx.fillStyle = '#009966';\n          ctx.font = 'bold 12px Arial';\n          var textX = this.x + 4,\n              textY = this.y + 4,\n              textMaxW = this.w - 8,\n              lineHeight = 12;\n\n          ctx.fillText(\n            this.model.get('description'),\n            textX,textY + lineHeight, textMaxW\n          );\n          ctx.fillText(\n            'Price: $' + this.model.get('price'),\n            textX, textY + lineHeight*3,\n            textMaxW\n          );\n          ctx.fillText(\n            'Quantity: ' + this.model.get('quantity'),\n             textX, textY + lineHeight*4, textMaxW\n          );\n          ctx.fillText(\n            'Total: $' + this.model.calculateAmount(),\n             textX, textY + lineHeight*5, textMaxW\n          );\n\n          return this;\n        }\n    ```", "```js\n      var InvoiceItemListView = Backbone.View.extend({\n\n        // Set a canvas as element tag name and define it's size.\n        tagName: 'canvas',\n        attributes: {\n          width: 400,\n          height: 200\n        },\n\n        // Render view.\n        render: function() {\n\n          // Get canvas context and it's size.\n          var ctx = this.el.getContext(\"2d\")\n              canvasW = this.el.width,\n              canvasH = this.el.height;\n          // Clear canvas.\n          ctx.clearRect(0, 0, canvasW, canvasH);\n\n          // Iterate through models in collection and render them.\n          this.collection.each(function(model) {\n            new InvoiceItemView({\n              model: model,\n\n              // Pass canvas context and it's size.\n              ctx: ctx,\n              canvasW: canvasW,\n              canvasH: canvasH\n            }).render();\n          }, this);\n\n          return this;\n        }\n      });\n    ```"]