["```js\nfs.stat('/hello/world', function (error, stats) {\n  console.log('File last updated at: ' + stats.mtime);\n});\n```", "```js\nmodule.exports.get = (id) => games.find(game => game.id === id);\n```", "```js\nmodule.exports.get = (id) => {\n    datastore.getById(id, (err, result) => {\n        // Result available, but outer method has already returned\n    });\n    return ???; // Need to return here, but have no result yet\n};\n```", "```js\nmodule.exports.get = (id, callback) => {\n  datastore.getById(id, (err, result) => {\n    // Can now make use of the result by passing to the callback\n    callback(err, result);\n  }\n  // No longer need to return here\n}\n```", "```js\nmodule.exports.get = (id, callback) => {\n    datastore.getById(id, callback);\n}\n```", "```js\nmodule.exports.get = (id, callback) => {\n    datastore.getById(id, (err, result) => {\n        if (err) {\n            callback(err);\n        } else {\n            callback(null, processResult(result));\n        }\n    }\n}\n```", "```js\n'use strict';\n\nconst games = [];\nlet nextId = 1;\n\nclass Game {\n    ...\n\n remove(callback) {\n        games.splice(games.indexOf(this), 1);\n callback();\n    }\n}\n\nmodule.exports.create = (userId, word, callback) => {\n    const newGame = new Game(nextId++, userId, word); \n    games.push(newGame);\n callback(newGame);\n};\nmodule.exports.get = (id, callback) =>\n callback(null,\n games.find(game => game.id === parseInt(id, 10)));\nmodule.exports.createdBy = (userId, callback) =>\n callback(null, games.filter(game => game.setBy === userId));\nmodule.exports.availableTo = (userId, callback) =>\n callback(null, games.filter(game => game.setBy !== userId));\n\n```", "```js\n'use strict';\n\nconst games = [];\nlet nextId = 1;\n\nconst asAsync = (callback, result) =>\n process.nextTick(() => callback(null, result));\n\nclass Game {\n    ...\n\n    remove(callback) {\n        games.splice(games.indexOf(this), 1);\n asAsync(callback);\n    }\n}\n\nmodule.exports.create = (userId, word, callback) => {\n    let game = new Game(nextId++, userId, word);\n    games.push(game);\n asAsync(callback);\n};\nmodule.exports.get = (id, callback) =>\n asAsync(callback,\n games.find(game => game.id === parseInt(id, 10)));\nmodule.exports.createdBy = (userId, callback) =>\n asAsync(callback, games.filter(game => game.setBy === userId));\nmodule.exports.availableTo = (userId, callback) =>\n asAsync(callback, games.filter(game => game.setBy !== userId));\n\n```", "```js\n'use strict';\n\nconst express = require('express');\nconst router = express.Router();\nconst service = require('../service/games.js');\n\nrouter.post('/', function(req, res, next) {\n    let word = req.body.word;\n    if (word && /^[A-Za-z]{3,}$/.test(word)) {\n service.create(req.user.id, word, (err, game) => {\n if (err) {\n next(err);\n } else {\n res.redirect(`/games/${game.id}/created`);\n }\n });\n    } else {\n        res.status(400).send('Word must be at least three characters long and contain only letters');\n    }\n});\n\nconst checkGameExists = function(id, res, onSuccess, onError) {\n service.get(id, function(err, game) {\n if (err) {\n onError(err);\n } else {\n if (game) {\n onSuccess(game);\n } else {\n res.status(404).send('Non-existent game ID');\n }\n }\n });\n};\n\nrouter.get('/:id', function(req, res, next) {\n    checkGameExists(\n        req.params.id,\n        res,\n        game => { ... },\n next);\n});\n\nrouter.post('/:id/guesses', function(req, res, next) {\n    checkGameExists(\n        req.params.id,\n        res,\n        game => { ... },\n next);\n});\n\nrouter.delete('/:id', function(req, res, next) {\n    checkGameExists(\n        req.params.id,\n        res,\n        game => {\n            if (game.setBy === req.user.id) {\n game.remove((err) => {\n if (err) {\n next(err);\n } else {\n res.send();\n }\n });\n            } else {\n                res.status(403).send('You don't have permission...');\n            }\n        },\n next);\n});\n\nrouter.get('/:id/created', function(req, res, next) {\n    checkGameExists(\n        req.params.id,\n        res,\n        game => res.render('createdGame', game),\n next);\n});\n\nmodule.exports = router;\n```", "```js\nvar express = require('express');\nvar router = express.Router();\nvar games = require('../service/games.js');\n\nrouter.get('/', function(req, res, next) {\n games.createdBy(req.user.id, (err, createdGames) => {\n if (err) {\n next(err);\n } else {\n games.availableTo(req.user.id, (err, availableGames) => {\n if (err) {\n next(err);\n } else {\n res.render('index', {\n title: 'Hangman',\n userId: req.user.id,\n createdGames: createdGames,\n availableGames: availableGames,\n partials: { createdGame: 'createdGame' }\n });\n }\n });\n }\n  });});\n\nmodule.exports = router;\n```", "```js\ndescribe('Game service', function() {\n    let firstUserId = 'user-id-1';\n    let secondUserId = 'user-id-2';\n\n beforeEach(function(done) {\n service.availableTo('not-a-user', (err, gamesAdded) => {\n let gamesDeleted = 0;\n if (gamesAdded.length === 0) {\n done();\n }\n gamesAdded.forEach(game => {\n game.remove(() => {\n if (++gamesDeleted === gamesAdded.length) {\n done();\n }\n });\n });\n });\n });\n\n    ...\n});\n```", "```js\nlib.getInitialData(function(e, initialData) {\n  if (e) {\n    console.log('Error: ' + e);\n  } else {\n    lib.processData(initialData, (e, processedData) => {\n      if (e) {\n        console.log('Error: ' + e);\n      } else {\n        lib.aggregateData(processedData, (e, aggregatedData) => {\n          if (e) {\n            console.log('Error: ' + e);\n          } else {\n            console.log('Success! Result=' + aggregatedData);\n          }\n        });\n      }\n    });\n  }\n});\n```", "```js\nlib.getInitialData()\n    .then(lib.processData)\n    .then(lib.aggregateData)\n    .then(function(aggregatedData) {\n        console.log('Success! Result=' + result);\n    }, function(error) {\n        console.log('Error: ' + error);\n    });\n```", "```js\nlibrary.getInitialData()\n    .then(library.processData)\n    .then(library.aggregateData)\n    .then(function(aggregatedData) {\n        console.log('Success! Result=' + result);\n })\n .catch(function(error) {\n console.log('Error: ' + error);\n    });\n```", "```js\n'use strict';\n\nconst games = [];\nlet currentId = 1;\n\nclass Game {\n    ...\n\n remove() {\n        games.splice(games.indexOf(this), 1);\n return Promise.resolve();\n    }\n}\n\nmodule.exports.create = (userId, word) => {\n    const newGame = new Game(nextId++, userId, word); \n    games.push(newGame);\n return Promise.resolve(newGame);\n};\nmodule.exports.get = (id) =>\n Promise.resolve(\n games.find(game => game.id === parseInt(id, 10)));\nmodule.exports.createdBy = (userId) =>\n Promise.resolve(games.filter(game => game.setBy === userId));\nmodule.exports.availableTo = (userId) =>\n Promise.resolve(games.filter(game => game.setBy !== userId));\n\n```", "```js\n'use strict';\n\nconst express = require('express');\nconst router = express.Router();\nconst service = require('../service/games.js');\n\nrouter.post('/', function(req, res, next) {\n    let word = req.body.word;\n    if (word && /^[A-Za-z]{3,}$/.test(word)) {\n service.create(req.user.id, word)\n .then(game =>\n res.redirect(`/games/${game.id}/created`))\n .catch(next);\n    } else {\n        res.status(400).send('Word must be at least three characters long and contain only letters');\n    }\n});\n\nconst checkGameExists = function(id, res, onSuccess, onError) {\n service.get(id)\n .then(game => {\n if (game) {\n onSuccess(game);\n } else {\n res.status(404).send('Non-existent game ID');\n }\n })\n .catch(onError);\n};\n\n...\n\nrouter.delete('/:id', function(req, res, next) {\n    checkGameExists(\n        req.params.id,\n        res,\n        game => {\n            if (game.setBy === req.user.id) {\n game.remove()\n .then(() => res.send())\n .catch(next);\n            } else {\n                res.status(403).send('You do not have permission to delete this game');\n            }\n        },\n        next);\n});\n```", "```js\nvar express = require('express');\nvar router = express.Router();\nvar games = require('../service/games.js');\n\nrouter.get('/', function(req, res, next) {\n games.createdBy(req.user.id)\n .then(gamesCreatedByUser => \n games.availableTo(req.user.id)\n .then(gamesAvailableToUser => {\n res.render('index', {\n title: 'Hangman',\n userId: req.user.id,\n createdGames: gamesCreatedByUser,\n availableGames: gamesAvailableToUser\n });\n }))\n .catch(next);\n});\n\nmodule.exports = router;\n```", "```js\ndescribe('Game service', function() {\n    let firstUserId = 'user-id-1';\n    let secondUserId = 'user-id-2';\n\n    beforeEach(function(done) {\n service.availableTo('non-existent-user')\n .then(games => games.map(game => game.remove()))\n .then(gamesRemoved => Promise.all(gamesRemoved))\n .then(() => done(), done);\n    });\n});\n```", "```js\nvar express = require('express');\nvar router = express.Router();\nvar games = require('../service/games.js');\n\nrouter.get('/', function(req, res, next) {\n Promise.all([\n games.createdBy(req.user.id),\n games.availableTo(req.user.id)\n ])\n .then(results => {\n res.render('index', {\n title: 'Hangman',\n userId: req.user.id,\n createdGames: results[0],\n availableGames: results[1]\n });\n })\n .catch(next);\n});\n\nmodule.exports = router;\n```", "```js\n        .then(([created, available]) => { ...\n```", "```js\nconst denodeify = require('denodeify');\nconst stat = denodeify(require('fs').stat));\nstat('/hello/world')\n    .then(stats => console.log('File last updated at: ' + stats.mtime));\n```"]