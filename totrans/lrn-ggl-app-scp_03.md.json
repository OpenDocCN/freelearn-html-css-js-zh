["```js\nfunction searchContacts(){\n\n  var SheetContacts = SpreadsheetApp.getActiveSpreadsheet()\n      .getSheetByName(\"Contacts\");\n\n  // Read input from cell A3 \n  var searchCriteria = SheetContacts.getRange(\"A3\").getValue();\n\n  //  First 10 contacts.\n  //  [You can change this limit, but advised to keep small.]\n  var numOfContacts = 10;\n\n  // Clear existing sheet data\n  SheetContacts.getRange(7,1,numOfContacts,4).clear();\n```", "```js\n  // Returns an array of contacts where\n  // contacts name matches with search text.\n  var contacts = ContactsApp.getContactsByName(searchCriteria);\n\n  //  Limit number of contacts.\n  if(contacts.length > numOfContacts) contacts.length = numOfContacts;\n\n  var cell = SheetContacts.getRange(\"A7\");\n\n  for(var i in contacts){\n    var name = contacts[i].getFullName();\n    var email = contacts[i].getEmails()[0];\n\n    if(email) email = email.getAddress();\n    else email = \"\";\n\n    // For simplicity get the first phone number\n    var phone = contacts[i].getPhones()[0];\n\n    if (phone) phone = phone.getPhoneNumber();\n    else phone = \"\";\n\n    // For simplicity get the first address\n    var address = contacts[i].getAddresses()[0];\n\n    if(address) address = address.getAddress();\n    else address = \"\";\n\n    // cell.offset(rowOffset, columnOffset)\n    cell.offset(i,0).setValue(name);\n    cell.offset(i,1).setValue(email);\n    cell.offset(i,2).setValue(phone);\n    cell.offset(i,3).setValue(address);\n  }\n};\n```", "```js\nfunction updateContacts(){\n  var SheetContacts = SpreadsheetApp.getActiveSpreadsheet()\n      .getSheetByName(\"Contacts\");\n\n  var cell = SheetContacts.getRange(\"A7\");\n\n  var numOfContacts = 10;\n\n  for(var i = 0; i < numOfContacts; i++){\n\n    var email = cell.offset(0, 1).getValue();\n\n    // Skip if email field is null\n    if(!email) continue;\n\n    var contact = ContactsApp.getContact(email);\n\n    // Skip if contact is null or undefined\n    if(!contact) continue;\n\n    var name = cell.offset(i, 0).getValue();\n\n    // Skip if name field is null\n    if(!name) continue;\n    contact.setFullName(name);\n\n    var phone = cell.offset(i, 2).getValue().toString();\n\n    // Returns phone numbers as an array\n    var contPhone = contact.getPhones(ContactsApp.Field.MAIN_PHONE)[0];\n\n    // Update main phone number if exist otherwise add.\n    if(phone){\n\n      if(contPhone){\n        contPhone.setPhoneNumber(phone);\n      } else {\n        contact.addPhone(ContactsApp.Field.MAIN_PHONE, phone);\n      }\n\n    }\n\n    var address = cell.offset(i, 3).getValue().toString();\n\n    // Returns address as an array\n    var contAddress = contact\n        .getAddresses(ContactsApp.Field.HOME_ADDRESS)[0];\n\n    // Update home address if exist otherwise add.\n    if(address){\n\n      if(contAddress) {\n        contAddress.setAddress(address);\n      } else {\n        contact.addAddress(ContactsApp.Field.HOME_ADDRESS, address);\n      }\n\n    }\n\n  }\n};\n```", "```js\n/** \n *  Gets content of latest unread message in Gmail inbox\n *    and puts gathered data in left most tab of Sheets.\n *\n */\nfunction parseEmail(){\n\n  // Left most sheet/tab\n  var emailSheet = SpreadsheetApp.getActiveSpreadsheet()\n      .getSheets()[0];\n\n  // Clear the entire sheet.\n  emailSheet.clear();\n\n  // Checks maximum 10 threads\n  var thread = GmailApp.getInboxThreads(0,10);\n\n  var row = 1;\n\n  for(var thrd in thread){\n    var messages = thread[thrd].getMessages();\n\n    for (var msg in messages) {\n      var message = messages[msg];\n\n      if(message && message.isUnread())\n      emailSheet.getRange(row,1).setValue(message.getFrom());\n\n      emailSheet.getRange(row++,2)\n      .setValue(message.getPlainBody());\n    }\n  }\n\n};\n```", "```js\n/**\n *  Checks latest 100 inbox threads,\n *    saves attachments in 'Gmail attachments' folder,\n *\n */\nfunction saveEmailAttachmentsToDrive(){\n\n  // Create 'Gmail Attachments' folder if not exists.\n  createFolder_('Gmail attachments');\n\n  // Get inbox threads starting from the latest one to 100.\n  var threads = GmailApp.getInboxThreads(0, 100);\n\n  var messages = GmailApp.getMessagesForThreads(threads);\n\n  var folderID = PropertiesService.getUserProperties()\n      .getProperty(\"FOLDER\");\n\n  var file, folder = DriveApp.getFolderById(folderID);\n\n  for (var i = 0 ; i < messages.length; i++) {\n    for (var j = 0; j < messages[i].length; j++) {\n      if(!messages[i][j].isUnread()){\n\n        var msgId = messages[i][j].getId();\n\n        // Assign '' if MSG_ID is undefined.\n        var oldMsgId = PropertiesService.getUserProperties()\n            .getProperty('MSG_ID') || '';\n\n        if(msgId > oldMsgId){\n          var attachments = messages[i][j].getAttachments();\n\n          for (var k = 0; k < attachments.length; k++) {\n            PropertiesService.getUserProperties()\n              .setProperty('MSG_ID', messages[i][j].getId());\n\n            try {\n              file = folder.createFile(attachments[k]);\n              Utilities.sleep(1000);// Wait before next iteration.\n            } catch (e) {\n              Logger.log(e);\n            }\n          }\n\n        }\n        else return;\n\n      }\n    }\n  }\n\n};\n```", "```js\nfunction createFolder_(name) {\n  var folder, folderID, found = false;\n\n  /*\n   * Returns collection of all user folders as an iterator.\n   * That means it do not return all folder names at once, \n   * but you should get them one by one.\n   *\n   */\n  var folders = DriveApp.getFolders();\n\n  while (folders.hasNext()) {\n    folder = folders.next();\n    if (folder.getName() == name) {\n      folderID = folder.getId();\n      found = true;\n      break;\n    }\n  };\n\n  if (!found) {\n    folder = DriveApp.createFolder(name);\n    folderID = folder.getId();\n  };\n\n  PropertiesService.getUserProperties()\n    .setProperty(\"FOLDER\", folderID);\n\n  return folderID;\n}\n```", "```js\nfunction sendEmail(){\n  var to = \"[[reciever email id]]\";\n  var message = \"[[message]]\\n\";\n\n  MailApp.sendEmail(to, \"Chapter 3\", message);\n}\n```", "```js\n    function sendEmail(){\n      var sheet = SpreadsheetApp.getActiveSpreadsheet()\n          .getSheetByName(\"Form Responses 1\");\n\n      var lastRow = sheet.getLastRow();\n      var lastCol = sheet.getLastColumn();\n      var data = sheet.getRange(lastRow,1,1,lastCol)\n          .getValues()[0];\n\n      var to = \"[[ receiver email id]]\";\n      var message = \"Name: \" + data[1] + \"\\n\";\n\n      message += \"Phone: \" + data[2] + \"\\n\";\n      message += \"Question: \" + data[3] + \"\\n\";\n\n      // MailApp.sendEmail(recipient, subject, body);\n      MailApp.sendEmail(to, \"Chapter 3\", message);\n    }\n    ```", "```js\n/**\n * Deletes all the triggers.\n *\n */\nfunction deleteTriggers(){\n  var triggers = ScriptApp.getProjectTriggers();\n\n  triggers.forEach(function(trigger){\n\n    try{\n      ScriptApp.deleteTrigger(trigger);\n    } catch(e) {\n      throw e.message;\n    };\n\n    Utilities.sleep(1000);\n\n  });\n\n};\n\nfunction createTrigger(){\n  var ss = SpreadsheetApp.getActiveSpreadsheet();\n\n  // Create new trigger\n  ScriptApp.newTrigger(\"sendEmail\")\n    .forSpreadsheet(ss).onFormSubmit().create();\n};\n```", "```js\n/**\n *  1\\. Checks all unread inbox threads and messages.\n *\n *  2\\. If specific keyword found then forwards it to another\n *     recipient.\n *\n *  3\\. Marks that message as Read.\n *\n */\nfunction forwardEmails() {\n  var recipient = \"[[forward email id]]\";\n  /*\n   *  Use keywords separated by '|'.\n   *  For example: \"purchase | invoice\"\n   *\n   */\n  var words = \"keywords list\";\n  var regExp = new RegExp(words,'g');\n\n  var len = GmailApp.getInboxUnreadCount();\n\n  for (var i = 0; i < len; i++) {\n    // get 'i'th thread in inbox\n    var thread = GmailApp.getInboxThreads(i,1)[0];\n\n    // get all messages in 'i'th thread\n    var messages = thread.getMessages();\n    var msgLen = messages.length;\n    var isAllMarkedRead = true;\n\n    // iterate over each message\n    // CAUTION: limit loop iterations for initial testing.\n    for (var j = 0; j < 5 /* msgLen */; j++) {\n      var message = messages[j];\n\n      if(message.isUnread()){\n        var bodyText = message.getPlainBody();\n        var test = regExp.exec(bodyText);\n        message.forward(recipient);\n        isAllMarkedRead = false;\n        message.markRead();\n      }\n\n    };\n\n    if(isAllMarkedRead) len++;\n    Utilities.sleep(1000);\n  }\n\n};\n```", "```js\nfunction sendEmailWithAttachments(){\n  var file = SpreadsheetApp.getActiveSpreadsheet()\n      .getAs(MimeType.PDF);\n\n  // MailApp.sendEmail(recipient, subject, body, options)\n  MailApp.sendEmail(\n    \"[[ Recipient email id ]]\",\n    \"Chapter 3\",\n    \"\",\n    {\n      attachments: [file],\n      name: 'Chapter 3 test attachment'\n    }\n  );\n\n}\n```", "```js\nfunction sendEmail(){\n  var sheet = SpreadsheetApp.getActiveSpreadsheet()\n      .getSheetByName(\"Form Responses 1\");\n\n  var lastRow = sheet.getLastRow();\n  var lastCol = sheet.getLastColumn();\n  var data = sheet.getRange(lastRow,1,1,lastCol).getValues()[0];\n\n  var image = DriveApp.getFileById(\"[[image file's id in Drive ]]\").getBlob();\n\n  var to = \"[[Recipient email id ]]\";\n  var message = '<img src=\"img/cid:logo\" />';\n\n  message += \"<p>Name: \" + data[1] + \"</p>\";\n  message += \"<p>Phone: \" + data[2] + \"</p>\";\n  message += \"<p>Question: \" + data[3] + \"</p>\";\n\n  MailApp.sendEmail(\n    to,\n    \"Chapter 3 inline image example\",\n    \"\",\n    {\n      inlineImages:{ logo:image },\n      htmlBody:message\n    }\n  );\n}\n```", "```js\n// Returns your draft text.\nfunction getDraftBody(draftName){\n  var drafts = GmailApp.getDraftMessages();\n\n  for(var i in drafts)\n    if( drafts[i].getSubject() == draftName )\n      return drafts[i].getPlainBody();\n}\n\nfunction sendEmails(){\n  // EmailList sheet column numbers, 0 based.\n  const FIRST_NAME_COL = 0;\n  const EMAIL_IDS_COL = 1;\n  const SUB_COL = 2;\n  const DATE_COL = 3;\n\n  var maxEmails = 50;\n  var draftName = \"Chapter 3\";// Draft's subject name\n\n  var draftBody = getDraftBody(draftName);\n  var quotaLeft = MailApp.getRemainingDailyQuota();\n\n  var ss = SpreadsheetApp.getActive();\n  var sheet = ss.getSheetByName(\"EmailList\");\n\n  // Gets all sheet data as a 2-dimensional array.  \n  var data = sheet.getDataRange().getValues();\n  var header = data.shift();\n\n  for(var i=0,count=0; count < maxEmails && count < quotaLeft\n      && i < data.length; ++i){\n    var firstName = data[i][FIRST_NAME_COL];\n    var recipient = data[i][EMAIL_IDS_COL];\n    var subject = data[i][SUB_COL];\n    var htmlBody = draftBody.replace(\"<<FirstName>>\", firstName);\n\n    if(recipient){\n      GmailApp.sendEmail(\n        recipient,\n        subject,\n        \"\",\n        {\n          name:\"[[ Sender Name ]]\",\n          htmlBody:htmlBody\n        }\n      );\n\n      data[i][DATE_COL] = new Date();\n\n      ++count;\n    }\n  };\n\n  // Inserts header at top of the array.\n  data.unshift(header);\n\n  // Stores values of array in sheet.\n  sheet.getRange(1, 1, data.length, header.length)\n    .setValues(data);\n}\n```"]