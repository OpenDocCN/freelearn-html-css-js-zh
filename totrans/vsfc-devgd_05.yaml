- en: Chapter 5. Dynamic Visualforce Bindings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The dynamic Visualforce binding is one of the greatest features of the Spring
    '11 release. We can use this feature to build generic Visualforce pages without
    thinking which record fields have to be shown on the page. The record fields are
    determined at runtime rather than compile time. This is a powerful feature which
    allows us to minimize the code (Visualforce and Apex code). Otherwise, we have
    to write more queries, and have to populate lists of records, and render more
    fields. Using the dynamic Visualforce binding, we can develop a single page that
    renders differently for various users based on their authorizations or preferences.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using dynamic references with standard objects and custom objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Referencing Apex Maps and Lists
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with field sets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic references to global variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's learn about dynamic Visualforce binding…
  prefs: []
  type: TYPE_NORMAL
- en: Using dynamic references with standard objects and custom objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Dynamic Visualforce binding is supported for both standard and custom objects
    in Salesforce. We can use dynamic binding in the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '`reference[expression]`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s discuss the preceding form in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '`reference`: This can be an sObject, an Apex class, or a global variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`expression`: This can be the name of the field or a related object. If it
    is a related object, then recursively-selected fields or further related objects
    can be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Dynamic bindings can be used in the page where formula expressions are valid.
    It is used with the `{!}` notation. If it is referenced from an Apex class, then
    the particular attribute (sObject or variable) must be public or global.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Defining relationships**: If there are object relationships to be evaluated
    in expressions, they become complex expressions. Consider our example, where the
    `Order__c` custom object has a relationship with the `Customer__c` custom object.
    The relationship between these two objects is called `Orders__r`. The `Customer__c`
    object has the `Email__c` field. The same `Email__c` field will be returned by
    the following dynamically-cast lookups:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Order__c.Customer__c[''Email__c'']`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Order__c[''Customer__c.Email__c'']`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Order__c[''Customer__c''][''Email__c'']`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Order__c.Orders__r[Email__c]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Order__c[Orders__r.Email__c]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Order__c[Orders__r][Email__c]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A dynamic Visualforce page must have a standard controller and further implementations
    can be done in an associated controller extension. The reason is that Visualforce
    automatically handles the optimization of the SOQL queries performed by the page's
    `StandardController` or `StandardSetController` object by loading only the used
    fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we create a page with static references, the page can identify the fields
    and objects during compilation. Then the `StandardController` object will transform
    the particular fields and objects into SOQL queries. But the dynamic references
    are evaluated at runtime and not at compile time. This means that the dynamic
    references are evaluated after performing the SOQL query of the `StandardController`
    object. Therefore, when we use dynamic references and we have to provide some
    extra information to the controller extension, we can use the `addFields()` method
    to add any number of additional fields. This method will pass a list of additional
    fields to `StandardController` and those fields will load without giving runtime
    errors. The usage of the `addField()` method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The following example shows the usage of dynamic Visualforce binding. This page
    shows an order record with some editable fields. Some fields are related to `object(Customer__c)`.
    We can understand the usage of dynamic reference with object relationship traversing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code is the controller extension of the preceding Visualforce
    page. The `DynamicOrderExtension` controller extension has a list of strings called
    `editableFields` and this string list contains some fieldnames of the `Order__c`
    object and some fields of related object (`Customer__c`) of `Order__c`. In this
    example, editable fields are hardcoded. But we can get information for your dynamic
    references by using the Apex''s `Schema.sObjectType` methods. This will make a
    more dynamic and powerful reference. For example, `Schema.SobjectType.Order__c.fields.getMap()`
    returns a map with the name of the `Order__c` fields. The preceding markup has
    the `<apex:repeat>` tag, which is used to loop the `editableFields` string list
    and the `<apex:inputField>` tag which displays that particular returned string.
    It represents the field names of the order and the related object''s field names.
    The following markup line displays the dynamic reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This page needs to be accessed with the ID of a valid case record specified
    as the id query parameter. For example, [https://c.ap1.visual.force.com/apex/DynamicBindingExample?id=a02900000086Hlr](https://c.ap1.visual.force.com/apex/DynamicBindingExample?id=a02900000086Hlr).
  prefs: []
  type: TYPE_NORMAL
- en: Referencing Apex Maps and Lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Apex Maps and Lists can be dynamically refered in a Visualforce page. Apex
    Lists are vastly used with the `<apex:pageBlockTable>` and `<apex:repeat>` tags.
    In our preceding example (under the *Using Dynamic references with Standard objects
    and custom object* section) we have already seen the dynamic references of Apex
    List. The following example shows the dynamic reference of an Apex Map. This is
    the markup of the `DynamicExampleListMap` page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the related custom controller. The `customerMap` object contains
    the customer''s records and the pick list is dynamically filled with the appropriate
    values from the Map. We can select a letter from the pick list and the customer
    list, and then rearrange the result according to the selected letter. The `customerMap`
    object returns the corresponding customer list at runtime by using the `{!customerMap[selectedKey]}`
    dynamic reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Working with field sets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A field set is a group of fields which can be defined in a declarative manner.
    Field sets are available in Visualforce pages in the API Version 21.0\. These
    field sets can be displayed on a Visuaforce page by dynamic binding. For example,
    suppose we have created a field set (field set name: `CustomerDetails`) with the
    `Email__c`, `Name`, and `Address__c` fields of the customer object. We can refer
    to the `CustomerDetails` field set in Visualforce as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: When we want to create a managed package or add/ remove/reorder fields in the
    field set, we can accomplish that without modifying any code.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A Visualforce page can have up to 50 field sets.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the powerful feature of dynamic binding, which
    was released by Spring'11\. We became familiar with the usage of standard and
    custom object dynamic references. And we acquired a good knowledge of referencing
    Apex Maps/List and the way of using field sets. We have also seen the usage of
    dynamic reference of global variables. With all these, we learned the mechanisms
    of minimizing the Visualforce and Apex code.
  prefs: []
  type: TYPE_NORMAL
