- en: Chapter 4. Working with Plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Using web standards and JavaScript to build a native app may have its limitations,
    because apps developed using native code can interact deeply with the operating
    system. But this is only partially true when dealing with PhoneGap apps because
    its architecture allows developers to extend the framework capabilities with the
    help of custom plugins.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter you will:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn what a PhoneGap plugin is and how to install the plugins in your project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Know how to list all the installed plugins and remove unwanted plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand how to manage project plugins and their dependencies using Plugman
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discover how to implement the Device API in the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you develop and deploy a new simple hybrid application, the application
    might not be doing anything advanced. We know hybrid applications are developed
    using standard web technologies such as HTML, CSS, and JavaScript. We need some
    mechanism for the application to interact with various device-level features.
    To achieve this, we use plugins with PhoneGap/Cordova APIs. Since version 3.0,
    all the PhoneGap APIs have been converted to plugins, which means having a deep
    understanding of the plugins is now even more important for a PhoneGap developer.
  prefs: []
  type: TYPE_NORMAL
- en: A PhoneGap plugin is a bridge between the WebView and the native platform on
    which the app is running.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to be productive quickly with PhoneGap plugins, it''s important to
    keep in mind how the framework works. A PhoneGap app consists of three main layers.
    They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The user interface, developed using HTML, CSS, and JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The business logic, developed in JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The PhoneGap framework, native code exposed to the business logic through a
    JavaScript API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user interface and the business logic are the app's main source code and
    the parts on which most developers concentrate their development efforts. The
    plugins are strictly integrated in the framework and are exposed to the user through
    JavaScript. You can imagine a plugin as an additional component of the framework
    that works similar to all the PhoneGap APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with plugins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using plugins you can extend the PhoneGap framework in order to meet the needs
    of your app. This means that there are no compelling limitations but it also means
    that the source code of your app has to be maintained for different platforms.
    There are several plugins listed for all platforms at [http://plugins.cordova.io](http://plugins.cordova.io).
    In order to make sure that an existing plugin fits your needs, you have to double-check
    the compatibility with the PhoneGap version you are using in your project and
    eventually update the source code to be compliant. One of the strengths of PhoneGap
    is its continuous release model, because this speeds up the release of new features
    and bug fixing. But it also means that a plugin should be maintained in order
    to meet the deprecation policy of the framework. Refer to the online Wiki for
    updated information about upcoming deprecations at [http://wiki.apache.org/cordova/DeprecationPolicy](http://wiki.apache.org/cordova/DeprecationPolicy).
  prefs: []
  type: TYPE_NORMAL
- en: In order to use the features implemented in a custom plugin, you have to install
    it in your project. It's not an easy task to manually manage the plugins in a
    PhoneGap project; thankfully, there is a command-line tool that makes your life
    easier.
  prefs: []
  type: TYPE_NORMAL
- en: Installing plugins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can install plugins to your project using the CLI tools of Cordova. The
    following command will add the plugin to your project and make the necessary changes
    to the manifest files if required:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here, `PLUGIN.ID` is the ID of the plugin as registered in the plugin repository.
  prefs: []
  type: TYPE_NORMAL
- en: The following list summarizes the currently available APIs and the commands
    to run to add them to a PhoneGap project. If you want to remove a plugin, use
    the `$ cordova plugin remove` command instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Basic device information:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Device API**: This gets basic information related to the device'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '**StatusBar API**: This customizes the status bar background'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Network and battery status:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network API**: This gets cellular network information'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '**Battery API**: This monitors the status of the device''s battery'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Accelerometer, compass, and geolocation:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Device Motion (Accelerometer) API**: This handles the device''s motion sensor'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '**Device Orientation API**: This gets the device orientation'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '**Geolocation API**: This makes the application location-aware'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Camera, media capture, and media playback:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Camera API**: This captures a photo using the device''s camera'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '**Capture API**: This captures all media files using the device'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '**Media API**: This records and plays back audio files'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Access files on device or network:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**File API**: This accesses the filesystem of the device'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '**File Transfer API**: This uploads or downloads files using the API'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Notifications via dialog box or vibration:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dialogs API**: Using this, notifications and alerts are made easy'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '**Vibration API**: This vibrates the device'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Contacts:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Contacts API**: This gives complete access to the device''s contact list'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Globalization:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Globalization API**: This adds locale support to the application'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Splash screen:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Splash screen API**: This shows and hides splash screen'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'In-app browser:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**InApp Browser API**: This launches any URLs in an in-app browser'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Although the simplest way to add the plugin is to use the plugin ID, there
    are other advanced options as well. These options help us customize the plugin
    installation. Instead of using the plugin ID, we can use the GitHub repo URL as
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Here, `URL_TO_THE_GITHUB_REPO` is the path to the plugin (that is, API) repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can install the Device API plugin in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can install the Device API plugin this way as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: If you are using PhoneGap CLI instead of Cordova CLI, you can use either of
    the following two commands provided here. The following example command installs
    the Camera plugin to your project.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'If you would like to install a particular version of the plugin, you can specify
    it along with the plugin ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to install a plugin from a local directory source, you can use
    the following format where you can specify the path to the source instead of the
    GIT repository URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: PhoneGap will look in this directory and each of its subdirectories for the
    plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Listing installed plugins
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To list all the plugins installed in the application project, you can use the
    `list` command. It has three variations and all will output the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: All the preceding three commands will list the plugins installed along with
    the plugin ID, version, and the full name.
  prefs: []
  type: TYPE_NORMAL
- en: Removing plugins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sometimes you may need to remove a plugin that you no longer want to use in
    your application. As with adding a plugin, removing a plugin is also simple. To
    remove a plugin, refer to it by the same plugin ID that appears in the listing.
    For example, here is how you would remove support for the Camera API from the
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can use this command for the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to remove more than one plugin at a time, you can specify more
    than one argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Using plugins with Plugman
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Plugins are installed and removed using a tool called **Plugman**; from a developer''s
    point of view, this is just a command available in the `cordova-cli` utility.
    The Apache Cordova Plugman project [http://github.com/apache/cordova-plugman](http://github.com/apache/cordova-plugman)
    is an open source command-line utility distributed as an npm module to facilitate
    the installation and uninstallation of plugins. Plugman supports the Android,
    Amazon FireOS, BlackBerry 10, Windows Phone 8, and iOS platforms. The installation
    process is the same as any other npm module; remember that if you install it globally
    (using the `-g` option), you have to run the command as root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Once installed, you can use the following several commands from your command-line
    tool to get the source code of a plugin, install and uninstall it, and package
    the plugin to be distributed with your app (Plugman is part of the `cordova-cli`
    tool; you don''t have to install it if you are already using it):'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `--fetch` option retrieves a plugin from a directory, a Git repository,
    or by name, into the specified plugins directory:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `--install` option installs a plugin for a specific target platform in
    a PhoneGap project. The plugin can be installed by name or by URL:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The `–-plugin` argument can be the name of the plugin or the path to a Git repository.
    By default, Plugman launches the `install` command and fetches the plugin if it
    doesn't exist in the `plugins` directory. For this reason the `--install` argument
    is optional.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `--uninstall` option uninstalls a previously installed plugin by name:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `--list` option lists all the plugins previously fetched using Plugman.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `--prepare` option sets up the plugin, properly injecting the JavaScript
    files needed and defining the appropriate permissions. The `--prepare` command
    is implicitly called when you install or uninstall a plugin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The keyword `PLATFORM` can have any of these values: `ios`, `android`, `amazon-fireos`,
    `blackberry10`, or `wp8`. Also note that Plugman is a lower-level CLI and hence
    you can add the plugins only for one platform at a given time. If there are multiple
    targeted platforms, you need to use the Plugman CLI to install the plugin for
    each of those platforms. However, if you use the Cordova CLI to install the plugins,
    it will install the plugins for all targeted platforms at once.'
  prefs: []
  type: TYPE_NORMAL
- en: In order to add the plugin to a target platform, you can run the `compile` command
    or the `prepare` command.
  prefs: []
  type: TYPE_NORMAL
- en: When using Plugman as a standalone utility, you can specify variables at install
    time using the `--variable` argument. Such variables are necessary for plugins
    requiring API keys or other custom, user-defined parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the entire list of Plugman commands and their syntax, you can use the
    global `help` command as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Since the release of PhoneGap 3.0, all the APIs are available as external plugins;
    you will learn more about plugins later in this book. At this point, all you need
    to know is that treating each single API as a plugin allows you to compose a version
    of PhoneGap suited to your project needs.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the Device API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we have covered the basics of using plugins in a Cordova/PhoneGap project,
    we will now look at an example of how to use the Device plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'Device API is one of the simplest APIs of PhoneGap/Cordova, which provides
    you with details about the device on which it''s running. This is a great API
    to try when you first learn about plugins. Using the API, you can get the following
    properties of the device:'
  prefs: []
  type: TYPE_NORMAL
- en: Device platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Device unique ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Device version number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Device model name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use these properties to provide device-specific features to the users.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – accessing the Device API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You already used the `deviceready` event in [Chapter 2](ch02.html "Chapter 2. Building
    Your First PhoneGap Project"), *Building Your First PhoneGap Project*, to handle
    the bootstrap of our app. Use the device API to get information about the type
    of device you are running once the event is fired.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the command-line tool and create a new Cordova project using the Cordova
    command-line utility you installed before:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will create a new directory called `DeviceApi` in your current working
    directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Move to the directory you just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the platforms you want to test on the device API. For example, we add the
    Android platform:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the device API plugin. You can also use the shortest way to install
    the plugin, as shown here, instead of using the entire GIT repository URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `www` folder inside the project folder you just created, open the `index.html`
    file and add a `div` element with `id` to render the device information that will
    be gathered using the PhoneGap API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a listener for the `deviceready` event in order to access all the supported
    API properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Show the device information on the HTML page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build the project using the Cordova command-line utility:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'View the application in the emulator by using the following command. It might
    take some time to start the emulator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The entire code has been provided here for your reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how the output is going to look on the actual device. The values that
    you see on your actual device might vary depending on your device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – accessing the Device API](img/B03476_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You handled the `deviceready` event, accessing the relevant device information
    using the PhoneGap API. The device object you just used describes the device''s
    hardware and software:'
  prefs: []
  type: TYPE_NORMAL
- en: '`device.platform`: This gets the operating system name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`device.uuid`: This gets the Universally Unique Identifier'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`device.version`: This gets the operating system version'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`device.cordova`: This gets the version of Cordova running on the device'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`device.model`: This gets the model name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Due to the rolling release model of PhoneGap, it's strongly suggested that you
    always refer to the GitHub repository at [https://github.com/apache/cordova-plugin-device](https://github.com/apache/cordova-plugin-device)
    in order to check whether a specific device API is going to be deprecated.
  prefs: []
  type: TYPE_NORMAL
- en: Custom plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We saw the list of basic plugins available for Cordova/PhoneGap platforms and
    how to use them in our application. The developer is not limited to use only these
    small set of plugins. There are several hundreds of plugins available and many
    new plugins are added every day. Here are some of the most used third-party plugins.
    You should be careful on selecting the plugins based on their support for various
    platforms.
  prefs: []
  type: TYPE_NORMAL
- en: '**Social Sharing**: This adds social sharing features to your application ([http://plugreg.com/plugin/EddyVerbruggen/SocialSharing-PhoneGap-Plugin](http://plugreg.com/plugin/EddyVerbruggen/SocialSharing-PhoneGap-Plugin))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Push Notifications**: This sends custom push notifications to your users
    ([http://plugreg.com/plugin/phonegap-build/PushPlugin](http://plugreg.com/plugin/phonegap-build/PushPlugin))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Facebook Login**: This enables users to log in to your application using
    Facebook ([http://plugreg.com/plugin/Wizcorp/phonegap-facebook-plugin](http://plugreg.com/plugin/Wizcorp/phonegap-facebook-plugin))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ActionSheet**: This shows wonderful action sheet menus in your application
    ([http://plugreg.com/plugin/EddyVerbruggen/cordova-plugin-actionsheet](http://plugreg.com/plugin/EddyVerbruggen/cordova-plugin-actionsheet))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AppRate**: This enables your users to add their feedback and rating for your
    application in the Google Play Store, Apple App Store, or in Windows Store ([http://plugreg.com/plugin/pushandplay/cordova-plugin-apprate](http://plugreg.com/plugin/pushandplay/cordova-plugin-apprate))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can install these plugins either from their GitHub URL or using their plugin
    ID if registered in the Cordova plugin''s repository. Here are the two methods
    to install the Social Sharing plugin. You can use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: For the complete list of plugins, you can refer to [http://plugins.cordova.io](http://plugins.cordova.io)
    or [http://plugreg.com](http://plugreg.com).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about plugins and how to list, add, and remove
    them from the application. Using these techniques, we saw how to install the Device
    API in your project and get the details of the device. In the coming chapters,
    we will see how to access the local device storage using the Storage API and how
    to list/read/write files using the File API.
  prefs: []
  type: TYPE_NORMAL
