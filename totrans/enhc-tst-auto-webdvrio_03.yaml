- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cybernetic Enhancements – WebdriverIO Config and Debug Tips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to cover the techniques for creating and debugging
    a custom WebdriverIO framework. This will take us through the services that help
    keep the project up to date. A lot of files get used and interact with each other
    in the project. Helpers and other features will be added to help enhance the framework
    as well as make debugging easier. We will cover the node files of the framework
    and demonstrate the differences between launching tests on Mac and Windows operating
    systems. We will also create our first hook customization for debugging on a single
    monitor. Lastly, we will write our first log wrapper to take more control over
    the output in the console window to improve debugging efficiency by customizing
    logging.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, these are our main topics for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Main files of WebdriverIO node project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Letting Yarn help keep files up to date
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `global.log()` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rules to enforce the coding standard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The three main files of a WebdriverIO node project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A lot of files are added while following the WDIO configuration. This is a
    good time to walk through the project roadmap to get familiar with the features
    of and relationships between these files, beginning with these three:'
  prefs: []
  type: TYPE_NORMAL
- en: '`package.json`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`yarn.lock`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wdio.config.ts`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s look at each one in order of execution.
  prefs: []
  type: TYPE_NORMAL
- en: The package.json file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first configuration file we will discuss is the `package.json` file. It
    helps manage the project’s dependencies and provides a way to run scripts and
    access other information about the project. This file serves several purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: It can specify scripts that can be run from the command line. For example, a
    WebdriverIO project might include a `wdio` script that starts the Webdriver server
    and a `wdio-docker` script configured specifically to run on a Docker container
    instance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It specifies the project’s dependencies, which are packages that the project
    needs to function properly. For example, a Webdriver project will depend on the
    `expect-wdio` package for validations. We won’t have to worry about dependency
    conflicts of all these packages. Yarn provides an interactive upgrade mode when
    you use the upgrade command with the --interactive or -i flag. The interactive
    upgrade mode allows you to select which packages to upgrade. When running >yarn
    upgrade-interactive, Yarn will display a list of outdated packages and prompt
    to choose which ones to upgrade. Yarn respects the version ranges specified in
    your package.json file when determining the versions to be upgraded.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can specify `devDependencies`, which are packages that are needed for developers,
    but not necessarily for execution. For example, a WebdriverIO project will depend
    on the `@wdio/cli` package. Again, the `node-check-version` utility will keep
    the versions in sync.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It can include metadata about the project, such as the project’s name, version,
    and authors:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `package.json` file also contains the `"scripts"` schema. This is where
    we can create custom-run configuration shortcuts. For example, to run a test at
    the command prompt, we can use `npx`) with the `wdio`) package and provide the
    path to the WebdriverIO configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'At installation, WebdriverIO includes a `wdio run` configuration in the `scripts`
    package schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We can implicitly run the node executor from the package manager with the `wdio`
    shortcut:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now add a shortcut for running the `A``llure` report from the previous
    chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The command line to run the test and generate the report is now reduced to
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In [*Chapter 13*](B19395_13.xhtml#_idTextAnchor247), this will come into play
    again as we run tests on multiple browsers. For now, let’s take a look brief look
    at all the different packages.
  prefs: []
  type: TYPE_NORMAL
- en: The yarn.lock file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This file tracks all the external supporting packages brought in by the `package.json`
    file that are stored in the `node_modules` folder. If the same version of a package
    has already been detected as downloaded, the node will skip it for efficiency.
    This file is extensive and since it is rebuilt each time `yarn add` is executed,
    it never needs to be modified manually.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll cover the heart of WebdriverIO.
  prefs: []
  type: TYPE_NORMAL
- en: The wdio.conf.ts file and webhooks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This file is where all the WDIO package features are configured. It includes
    webhooks – code that executes automatically at certain points of the framework.
    This saves us from rewriting code repeatedly. This code can be injected before
    or after every session, suite, test, WebdriverIO command, or even every hook.
    All the default features are documented inside each hook, ready to be modified.
    Let’s take, for example, the `beforeTest` code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'By uncommenting the `beforeTest` hook function, we can customize the functionality
    of WebdriverIO. This is just for running on the local machine where there is limited
    space on a small monitor. For example, we can maximize the browser’s full screen
    before each test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Rule of thumb – match your developer’s hardware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here is a good reason to request a second monitor. We just expanded our browser
    at runtime to full screen. If we only have a single monitor, this will completely
    block our **Visual Studio Code** (**VS Code**) window from view. To be efficient,
    we need to see the Terminal window in VS Code on an external monitor while the
    test executes in full screen mode on the primary monitor.
  prefs: []
  type: TYPE_NORMAL
- en: 'But if you only have a single monitor, this is a simple trick you can implement
    in the webhooks of the `wdio.config.ts` file: set the browser height to three-quarters
    of the display resolution. First, get the current display’s height and width by
    going to **Settings** and then **Display** on Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – Primary display resolution on Windows](img/B19395_Figure_3.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – Primary display resolution on Windows
  prefs: []
  type: TYPE_NORMAL
- en: 'On Mac, go to the **Apple** menu and select **About this Mac** > **Displays**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – Primary display resolution on Mac](img/B19395_Figure_3.2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – Primary display resolution on Mac
  prefs: []
  type: TYPE_NORMAL
- en: 'Multiply the height of the display by 0.75\. In the `wdio.conf.ts` file, uncomment
    the `beforeTest()` method. Enter the width and reduced height values (in this
    example, `970`) in the `browser.setWindow` method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This way, you can have the best of both worlds on a single monitor, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – Running a custom-sized browser with the Terminal log below on
    a single monitor](img/B19395_Figure_3.3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.3 – Running a custom-sized browser with the Terminal log below on a
    single monitor
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about the hooks of WebdriverIO in the online documentation
    at [https://webdriver.io/docs/options/#hooks](https://webdriver.io/docs/options/#hooks).
    Since this is a TypeScript project, it requires some configuration as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `tsconfig.json` file configures TypeScript compiler options for the node.
    It includes the framework that will be used and includes the WebdriverIO `expect`
    library for assertions. This is where we can change the ECMAScript target version
    so that it matches the node version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `es2022` target is ECMAScript version 10\. The correlation of ECMAScript
    version names and features can be found at [https://en.wikipedia.org/wiki/ECMAScript](https://en.wikipedia.org/wiki/ECMAScript)
    and the correlation of `node` to ECMAScript versions is found at [https://node.green/](https://node.green/).
  prefs: []
  type: TYPE_NORMAL
- en: The `test/spec` folder is the location of the test scripts to execute. Subfolders
    can help divide tests into categories. It is recommended not to get too deep with
    these folder structures as it makes relative paths difficult to keep track of.
  prefs: []
  type: TYPE_NORMAL
- en: The `test/pageObjects` folder holds the page object module that’s used to find
    and populate elements.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the `node_modules` folder keeps all the supporting packages that are
    downloaded to support the node project.
  prefs: []
  type: TYPE_NORMAL
- en: The Chrome browser is always getting updated. Next, we need to ensure the project
    resources stay current. WebdriverIO has a service to do just that.
  prefs: []
  type: TYPE_NORMAL
- en: Letting Yarn help keep files up to date
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just as the Yarn upgrade-interactive tool has to keep all the supporting packages
    current, WebdriverIO provides the ChromeDriver service to keep up with constant
    Chrome updates. We can install the service from the console by running this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, it must be configured in the `wdio.config.ts` file. To do so, find the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Finally, the `all-logs` folder should be added to the `.gitignore` file. Now,
    let’s cover some debugging tips.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring debugging with VS Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'VS Code supplies four command prompt shells to launch scripts. Which one you
    use depends on your operating system. For Windows, there is PowerShell, Git Bash,
    Command Prompt, and the JavaScript debug terminal. Mac includes the ZSH shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – VS Code debugging controls and shell terminals on Windows](img/B19395_Figure_3.4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.4 – VS Code debugging controls and shell terminals on Windows
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how it looks on Mac:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 – VS Code debugging controls and shell Terminals on Mac](img/B19395_Figure_3.5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.5 – VS Code debugging controls and shell Terminals on Mac
  prefs: []
  type: TYPE_NORMAL
- en: Script execution stops when a breakpoint is entered in the code by clicking
    in the gutter to the left of a line number, as seen on line 9\. This will attach
    a debugger and a control panel. From the panel, the code execution can continue,
    step over a method call, step into the method, step out back up to the calling
    code, or restart or disconnect the debugging session.
  prefs: []
  type: TYPE_NORMAL
- en: 'The JavaScript debug terminal always attaches the debugger. Debug mode slows
    the execution. So, for Mac, a practical choice would be to have two shells open:
    the JavaScript debug terminal and ZSH for faster non-debug execution. Any shell
    can have debugging activated with auto attach:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 – Command palette options to auto attach the debugger](img/B19395_Figure_3.6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.6 – Command palette options to auto attach the debugger
  prefs: []
  type: TYPE_NORMAL
- en: 'PowerShell, Git Bash, ZSH, and Command Prompt must have the debugging configuration
    enabled by setting **Auto Attach** to **Always** from the Command Palette. It
    can be disabled temporarily from the VS Code status bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7 – Auto Attach mode can be temporarily disabled from the status
    bar at the bottom of VS Code](img/B19395_Figure_3.7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.7 – Auto Attach mode can be temporarily disabled from the status bar
    at the bottom of VS Code
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, we can further customize our framework by passing **environment
    variables**. In Mac, this is easy with any Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Windows makes this tricky. To add a variable such as `DEBUG`, each shell has
    a separate syntax for multiple-line execution. Here’s the list:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Git Bash:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'PowerShell and JavaScript debug terminal:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Command Prompt and ZSH (Mac):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Furthermore, the syntax for this is different in package shortcuts:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Mac:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Windows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you have a mix of Mac and Windows team members, the situation may look dire.
    But superheroes have sidekicks and Node is no exception.
  prefs: []
  type: TYPE_NORMAL
- en: Rule of thumb – the cross-env node package
  prefs: []
  type: TYPE_NORMAL
- en: 'To resolve all this, we will install the `cross-env` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '`yarn` `add cross-env`'
  prefs: []
  type: TYPE_NORMAL
- en: 'By adding the `cross-env` package, we now can create a new debug shortcut that
    runs with a common syntax on both Mac and Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`debug: cross-env DEBUG=true` `wdio wdio.conf.ts`'
  prefs: []
  type: TYPE_NORMAL
- en: browser.debug()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another way to debug our code is to add the `browser.debug()` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – Pausing execution in VS Code with browser.debug()](img/B19395_Figure_3.8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.8 – Pausing execution in VS Code with browser.debug()
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, WebdriverIO will pause the execution, but it is limited by the
    default timeout interval of our framework. For Jasmine, the default is about 1
    minute. However, we need more time for debugging when an error occurs. By setting
    `defaultTimeoutInterval` to 15,000,000 milliseconds (about 4 hours), the script
    will have more time to debug any issues:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Of course, we do not want to change this value back and forth manually, particularly
    if we’re running in a cloud environment. This can be handled with our next superpower.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Dynamic configuration means we can change the way the framework behaves by
    assigning system variables and passing them to our framework. These variables
    follow the `ALL_CAPS` naming convention of a constant. Let’s begin by assigning
    a timeout based on the value of a `DEBUG` environment variable. At the top of
    the `config` file, we will capture the value of the `DEBUG` environment variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This sets a default of `false` if `DEBUG` is not explicitly defined. Now, we
    can have a variable that extends the framework timeout when we explicitly execute
    a debug shortcut:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Rule of thumb
  prefs: []
  type: TYPE_NORMAL
- en: Make your code readable with numeric separators. TypeScript supports underscores
    in place of commas with both integer and floating-point numbers. This makes `16_000_000`
    a valid integer while making the code more readable to humans.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can find the timeout under `jasmineOpts`. Let’s reference this new timeout
    variable. Find the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Change it to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You may consider setting the `DEBUG` default to `True` when it’s omitted in
    a shortcut, then explicitly turning it off when run in a CI/CD environment such
    as Docker from Jenkins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The reason is that we spend most of our time writing and debugging our code
    is spent running the test. This means we spend less time typing this over and
    over to launch a test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'This just extend timeouts when run locally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we can have the `debug` switch implicit in the shortcut and explicit
    for CI/CD:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'In future chapters, we will execute tests in Docker. In those cases, we do
    not want our tests to wait several hours while we debug an error. In this script,
    we will change `DEBUG` to `false`; the test will use a short timeout specifically
    with that in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Question: who is the customer of the automation framework? You might think
    it is the stakeholders, but not really. The stakeholders are the beneficiaries
    with pretty alluring graphs. Your team is the one who works with the framework
    every day. This means you are the customer. Prioritize your framework features
    with standards that help you to be efficient in your day-to-day work, not the
    whims of your benefactors.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read more about dynamic configurations here: [https://webdriver.io/docs/debugging/#dynamic-configuration](https://webdriver.io/docs/debugging/#dynamic-configuration).'
  prefs: []
  type: TYPE_NORMAL
- en: 'While we are looking at the Jasmine options, we might consider automatically
    adding screen captures to the results if the test fails. These can be added to
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This will create a screen capture at the root of our project. Screen captures
    do not need to take up space in the Git repo. So, we will add them inside the
    `.gitIgnore` `*.``png` file.
  prefs: []
  type: TYPE_NORMAL
- en: A note about template strings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may have noticed that template `'strings'` with accent marks are being extensively
    used in these code examples. While TypeScript supports `'single'` quotes and `"double"`
    quotes for strings, template strings make more sense in a test automation project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s say, for example, we wish to write this string to our console log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'If we use quotes, we need to double escape the quotes in the string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'If we used single quotes, the apostrophe would need to be escaped with a backslash:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'But with an accent template string, no escape is necessary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Templated strings can also pass `${variables}` to make reporting far more flexible
    and descriptive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can output a templated string to the console that is much easier to
    read than one with single or double quotes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Much of the purpose of custom reporting functions is to reduce noise during
    debugging.
  prefs: []
  type: TYPE_NORMAL
- en: Reducing the signal-to-noise ratio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we need to do some negative testing. Change the `ch3.ts` script so that
    it generates an error by adding `.not` to the `expect` validation chain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when we run the code, we’ll get a lot of message details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'A lot of information is produced that is not all that insightful. Inside the
    `wdio.config.ts` file, we can control how much detail is displayed in the console
    with `logLevel` settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The order of options is listed in order of verbosity. The default of `'info'`
    can be overwhelming. Reducing it to `'warn'` is more adequate for our purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Our final debugging technique is to enhance the `console.log()` command with
    a wrapper.
  prefs: []
  type: TYPE_NORMAL
- en: Our first custom wrapper method – global.log()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Question: what is a wrapper?'
  prefs: []
  type: TYPE_NORMAL
- en: A wrapper is a bespoke method or function that is almost identical in signature
    to an intrinsic method but with added functionality. In our first example, we
    will create a global wrapper for `console.log()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'While the `console.log()` method is good for outputting information to the
    console window, it can be enhanced and shortened. Let’s build our first `log()`
    wrapper at the end of the `wdio.config.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'This `global.log()` wrapper is almost identical to `console.log` except it
    has some text formatting that stands out. Let’s look at this by adding some examples
    to the test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: This way, we can separate the custom messages being added to the framework from
    what is being generated by the Jasmine and node reporting output.
  prefs: []
  type: TYPE_NORMAL
- en: Rule of thumb
  prefs: []
  type: TYPE_NORMAL
- en: Even when a function has only one line, use curly brackets. There are two reasons
    for this. First, it makes logic branch issues easier to spot. Second, when adding
    brackets, there is a good chance you will soon add more lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s say we want to ignore empty strings and nulls passed to the log. When
    written as a single line of code, the intention is not very clear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'But with the brackets in place, the logic looks much clearer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'This follows the lines of the second reason we mentioned in the *Rule of thumb*
    box – you will soon add more lines of code. The preceding code would be better
    if we knew when an unresolved promise was passed to the log and what line had
    the issue. So, we will add an exception for `Promise` objects and display the
    console trace to show the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Question: why is the text assigned a type of `any` and not `string`?'
  prefs: []
  type: TYPE_NORMAL
- en: 'In most cases, we will declare the type of the argument in TypeScript. That’s
    the whole point of using it over JavaScript. But in this case, we want to have
    our debugging be a little more robust. We will add six log examples to the `ch3.ts`
    script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'With that, we have added our own level of detail that stands out. It skips
    empty and null strings. It also gives line numbers of where issues such as unresolved
    `Promise` originated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Running this code gives us more flexibility in logging what our framework is
    doing. We have one last topic to discuss to ensure we write good code.
  prefs: []
  type: TYPE_NORMAL
- en: Rules to enforce coding standards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every coding project should have a document that states what coding rules will
    be enforced during a code review. Tools called “linters” are good at detecting
    these rules. They need to be activated at the start of a project to ensure everyone
    is on the same page. Several rules can be activated in a TypeScript project. The
    first is called **strict mode**.
  prefs: []
  type: TYPE_NORMAL
- en: Strict mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JavaScript has a strict mode feature. Adding `"use strict"` as the first line
    of a JavaScript source file enables extra rules to ensure good coding practices
    are followed that avoid subtle code errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'This includes forcing variables to be explicitly declared with a `let`, `var`,
    or `const` keyword. TypeScript has a similar strict mode that can further force
    all variables to be assigned a type, such as `string`, `number`, or `boolean`.
    This is to avoid implicitly assigning a variable to the `any` type, which can
    lead to type coercion issues:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19395_Figure_3.9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.9 – A strict mode warning where text is implicitly declared to be of
    the any type
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding example, the `text` variable is implicitly assumed to be of
    the `any` type because no type assignment was provided for the `text` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'With strict mode enabled, three dots appear under the `text` argument. Hovering
    the mouse over these dots reveals the issue description. It also includes the
    possibility for VS Code to suggest a quick fix that will infer the parameter type
    from usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'In a new TypeScript project, strict rules should be enabled from the start.
    These rules are enabled by adding them under the `"compiler options"` section
    of the `tsconfig.json` file. This rule enables all subset rules listed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: However, turning on all rules in an existing project will likely create so much
    code to refactor that it causes significant delays in test creation. In that case,
    subsets of strict rules can be enabled and refactored over time.
  prefs: []
  type: TYPE_NORMAL
- en: Turning on individual TypeScript subset rule checks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is a list of the rules that can be enabled or disabled under the strict
    mode coding standards umbrella.
  prefs: []
  type: TYPE_NORMAL
- en: '“noImplicitAny”: true'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This rule raises an error on expressions and declarations with an implied `any`
    type. In the following example, the `x` and `y` variables are implicitly set to
    the `any` type. Thus, if a string is passed, the code will coerce the number into
    a string and concatenate values rather than adding them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code resolves this issue by explicitly assigning the type of
    `x` and `y` to a `number` type. The only types of variables to be passed now are
    numbers, not strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '“strictNullChecks”: true'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This rule raises an error when variables are implicitly assigned a `null` value.
    This can cause issues when an empty string is a valid variable but a `Null` value
    is passed, throwing an error.
  prefs: []
  type: TYPE_NORMAL
- en: '“strictFunctionTypes”: true'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This rule will enable strict checking of function parameter types. Take this
    code as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'To fix this error, you would need to annotate the type of the `multiply` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '“strictBindCallApply”: true'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This rule forces strict `bind`, `call`, and `apply` methods on functions. This
    is beyond the scope of the techniques that will be covered in this book.
  prefs: []
  type: TYPE_NORMAL
- en: bind()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `bind()` function creates a new function with a specific value for this.
    It takes the value you want to use for this as the first argument; any additional
    arguments are passed to the original function when it is called. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, the `someMethod()` method contains an anonymous function
    that uses the `this` keyword to access a property on the current object. However,
    the `this` keyword is not properly bound to the object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the error has been resolved by binding the `this` keyword
    to the current object using the `bind()` function.
  prefs: []
  type: TYPE_NORMAL
- en: call()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `call()` function is similar to `bind()`, but it calls the original function
    immediately, rather than creating a new function. It takes the value you want
    to use for `this` as the first argument; any additional arguments are passed to
    the original function when it is called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the `someMethod()` method calls the `call()` function on a
    string value (greeting). However, the `call()` function can only be called on
    functions, so this will cause an error when the code is executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have the `strictBindCallApply` rule enabled, ESLint will catch this
    error and alert you to the issue. To fix the error, call the `call()` function
    on a function, rather than a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: apply()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `apply()` function is similar to `call()`, but it takes the arguments to
    pass to the original function as an array rather than a list of separate arguments.
    It takes the value you want to use for `this` as the first argument, and the array
    of arguments as the second argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, the `someMethod()` method calls the `apply()` function
    on a ``(`greeting`)`` string value. However, the `apply()` function can only be
    called on functions, so this will cause an error when the code is executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code shows how to fix the error by calling the `apply()` function
    on a function, rather than a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'This ESLint rule checks for properties that are declared in classes but are
    not initialized in the constructor. This rule can be used to enforce that all
    properties in a class are properly initialized before they are used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'ESLint will throw an error when you try to lint the code because `myProperty`
    is not initialized in the constructor. To resolve this, assign `myProperty` to
    a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '“noImplicitThis”: true'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This raises an error on expressions with an implied `any` type. In TypeScript,
    the `this` keyword refers to the current instance of a class, and it is often
    used inside class methods to access properties or methods on the current object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'ESLint will throw an error because the `this` keyword inside the anonymous
    function is not properly bound to an object. To fix this error, use an arrow function
    to bind the function to an object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '“alwaysStrict”: true'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This final rule ensures the TypeScript files add `use strict` to the first line.
    In truth, this instructs the compiler to create TypeScript in strict mode, even
    if the command is missing from the TypeScript file.
  prefs: []
  type: TYPE_NORMAL
- en: '@ts-ignore directive'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At the end of the day, you may need to tell the compiler to ignore a warning.
    For example, the custom `log()` function intentionally has the message assigned
    to the `any` type instead of `string`. This is to ignore null strings and catch
    unwrapped promises that are passed that can be traced back to a specific line
    of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: It’s important to note that the `@ts-ignore` directive is only meant to be used
    as a temporary measure to help get past an error or warning while you’re working
    on your code. It’s not a good idea to use this directive to suppress errors or
    warnings extensively as it can lead to unsafe or unreliable code.
  prefs: []
  type: TYPE_NORMAL
- en: The next question is, when will we ever have the time to refactor and document
    our framework when we are spending all our time writing test scripts?
  prefs: []
  type: TYPE_NORMAL
- en: Tip – “get it done” Friday
  prefs: []
  type: TYPE_NORMAL
- en: The best way is to plan for refactoring as part of sprint activities. Agile
    projects have a daily standup meeting. Some teams choose to eliminate the Friday
    standup and specifically dedicate additional time to code cleanup, refactoring,
    and documentation. The idea is that our weekends should be our own with our families
    and not dedicated to working.
  prefs: []
  type: TYPE_NORMAL
- en: Leverage artificial intelligence
  prefs: []
  type: TYPE_NORMAL
- en: '**GitHub Copilot**: Developed by GitHub and OpenAI, it provides AI-powered
    code suggestions right in the editor. It’s like a pair programmer that helps you
    write code faster and learn new APIs and languages along the way.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tabnine**: An AI code-completion tool that works with popular IDEs. It predicts
    and suggests the next chunk of code you might write and supports multiple programming
    languages.'
  prefs: []
  type: TYPE_NORMAL
- en: '**CodeGPT**: A powerful and innovative AI-driven coding assistant developed
    by OpenAI. It builds upon the foundation of GPT-3, a state-of-the-art language
    model, and is specifically tailored to assist developers and programmers in their
    coding tasks.'
  prefs: []
  type: TYPE_NORMAL
- en: CodeGPT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CodeGPT is a revolutionary AI-powered code generation tool developed by OpenAI.
    It leverages the GPT-3.5 architecture to assist developers in creating code snippets,
    functions, and even entire programs in various programming languages, including
    TypeScript. This technology is a game-changer for developers as it can accelerate
    the coding process, enhance code quality, and help with debugging and problem-solving.
    With CodeGPT, you can quickly generate code examples, write unit tests, or even
    get suggestions on how to implement specific features, making it an invaluable
    addition to any developer’s toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example of how CodeGPT can assist with TypeScript code generation.
    Suppose you want to create a TypeScript function that calculates the factorial
    of a number. With CodeGPT, you can request a code snippet like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]typescript'
  prefs: []
  type: TYPE_NORMAL
- en: 'function factorial(n: number): number {'
  prefs: []
  type: TYPE_NORMAL
- en: if (n <= 1) {
  prefs: []
  type: TYPE_NORMAL
- en: return 1;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: return n * factorial(n - 1);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: CodeGPT generates the TypeScript code for the factorial function, which takes
    an input number, `n`, and recursively calculates its factorial. This is just one
    example of how CodeGPT can simplify coding tasks by providing accurate and efficient
    code snippets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a real-life example that I encountered while writing this book. We
    asked for an advanced function that parses values from a string in the `key=value`
    format that could be transposed into a dictionary object with some examples. GitHub
    Copilot already knew of the SwitchboardFactory SBF object and came up with this
    function with a header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Artificial intelligence is the way of the future. We are at a point in time
    similar to when sledgehammers were used to break up concrete at the moment that
    Charles Brady King invented the jackhammer. This is our jackhammer!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we reviewed the node files of the Webdriver node framework.
    We showed you how to make launching tests common between Mac and Windows team
    members. We also showed you how to set up the environment to enable debugging
    and writing better code in TypeScript. Finally, we wrote our first custom log
    wrapper, which optimized the output to the console window.
  prefs: []
  type: TYPE_NORMAL
- en: By taking control of logging, we can make our debugging process more productive
    by deciding how it’s formatted and what is sent to the Allure report. In upcoming
    chapters, we will even add color for visibility and apply this same wrapper concept
    to the most common WebdriverIO browser methods to make supercharged robust tests.
  prefs: []
  type: TYPE_NORMAL
- en: But we do not want to get ahead of ourselves, Doc! Next, we will talk about
    the effects of time travel because TypeScript is a bit of a speedster!
  prefs: []
  type: TYPE_NORMAL
