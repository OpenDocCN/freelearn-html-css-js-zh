["```js\n$ node -v\n$ npm -v\n```", "```js\n$ npm init --yes\n$ npm install testcafe --save-dev\n```", "```js\n$ npm install testcafe --global\n```", "```js\n$ npx testcafe -v --no-install\n```", "```js\nroot = true [*]indent_style = space indent_size = 4 end_of_line = lf insert_final_newline = true charset = utf-8 trim_trailing_whitespace = true max_line_length = 120 [*.json]indent_size = 2\n```", "```js\n    .testcaferc.json will look like this:\n\n    ```", "```js\n\n    To run tests in Firefox and Chrome, your test will look like this:\n\n    ```", "```js\n\n    To run tests in remote browsers (such as SauceLabs, BrowserStack, CrossBrowserTesting, and so on) with a browser provider plugin, set the browser provider name, together with the browser alias and operating system, as follows:\n\n    ```", "```js\n\n    Postfixes to browser aliases can be used to launch tests in headless mode or to apply Chrome device emulation ([https://devexpress.github.io/testcafe/documentation/guides/concepts/browsers.html#use-chromium-device-emulation](https://devexpress.github.io/testcafe/documentation/guides/concepts/browsers.html#use-chromium-device-emulation)):\n\n    ```", "```js\n\n    NoteTestCafe starts Chrome and Firefox with a fresh profile by default, without any extensions or profile settings. If you need to launch a browser with the current user profile, add the `:userProfile` postfix flag after the browser alias.\n    ```", "```js\n    {  \"src\": \"tests/login-test.js\"}\n    ```", "```js\n    {  \"src\": [\"tests/**/*.js\", \"utils/helpers/\"]}\n    ```", "```js\n    {  \"reporter\": \"minimal\"}\n    ```", "```js\n    {  \"reporter\": [    {      \"name\": \"minimal\"    },    {      \"name\": \"json\",      \"output\": \"tests/reports/report.json\"    },    {      \"name\": \"xunit\",      \"output\": \"tests/reports/report.xml\"    }  ]}\n    ```", "```js\n    {  \"screenshots\": {    \"path\": \"tests/screenshots/\",    \"takeOnFails\": true,    \"pathPattern\": \"${DATE}_${TIME}/test-${TEST_   INDEX}/${USERAGENT}/${FILE_INDEX}.png\",    \"fullPage\": true   }}\n    ```", "```js\n    {  \"videoPath\": \"tests/videos/\"}\n    ```", "```js\n    {  \"videoOptions\": {    \"failedOnly\": true,    \"singleFile\": true,    \"pathPattern\": \"${TEST_INDEX}/${USERAGENT}/${FILE_INDEX}.mp4\"  }}\n    ```", "```js\n    {  \"videoEncodingOptions\": {    \"r\": 24,    \"aspect\": \"16:9\"  }}\n    ```", "```js\n    {  \"quarantineMode\": true }\n    ```", "```js\n    {  \"debugMode\": true }\n    ```", "```js\n    {  \"debugOnFail\": true }\n    ```", "```js\n    {  \"skipJsErrors\": true }\n    ```", "```js\n    {  \"skipUncaughtErrors\": true }\n    ```", "```js\n    {  \"appCommand\": \"node server.js\"}\n    ```", "```js\n    {  \"appCommand\": \"node server.js\",  \"appInitDelay\": 5000 }\n    ```", "```js\n    {  \"concurrency\": 4 }\n    ```", "```js\n    {  \"selectorTimeout\": 15000 }\n    ```", "```js\n    {  \"assertionTimeout\": 5000 }\n    ```", "```js\n    {  \"pageLoadTimeout\": 10000 }\n    ```", "```js\n    {  \"speed\": 0.5 }\n    ```", "```js\n    {  \"clientScripts\": [    {      \"content\": \"Date.prototype.getTimestamp = () => new Date().getTime().toString();\"    },    {      \"module\": \"js-automation-tools\"    },    {      \"path\": \"scripts/helpers.js\",      \"page\": \"https://test-site.com/page/\"    }  ]}\n    ```", "```js\n    {  \"port1\": 12340,  \"port2\": 56789 }\n    ```", "```js\n    {  \"hostname\": \"host.test-site.com\"}\n    ```", "```js\n    {  \"proxy\": \"123.123.123.123:8080\"}\n    ```", "```js\n    {  \"proxy\": \"username:password@proxy.test-site.com\"}\n    ```", "```js\n    {  \"proxyBypass\": [\"localhost:8080\", \"internal.corp.test-site.com\"]}\n    ```", "```js\n    {  \"developmentMode\": true }\n    ```", "```js\n    {  \"stopOnFirstFail\": true }\n    ```", "```js\n    {  \"tsConfigPath\": \"/Users/john/testcafe/tsconfig.json\"}\n    ```", "```js\n    {  \"disablePageCaching\": true }\n    ```", "```js\n    $ node -v\n    ```", "```js\n    $ mkdir test-project\n    ```", "```js\n    $ cd test-project/\n    $ npm init --yes\n    ```", "```js\n    $ npm install testcafe --save-dev\n    ```", "```js\n    {  \"browsers\": \"chrome\",  \"src\": [    \"tests/**/*.js\",    \"tests/**/*.feature\"  ],  \"screenshots\": {    \"path\": \"tests/screenshots/\",    \"takeOnFails\": true,    \"pathPattern\": \"${DATE}_${TIME}/test-${TEST_INDEX}/${USERAGENT}/${FILE_INDEX}.png\"  },  \"quarantineMode\": false,  \"stopOnFirstFail\": true,  \"skipJsErrors\": true,  \"skipUncaughtErrors\": true,  \"concurrency\": 1,  \"selectorTimeout\": 3000,  \"assertionTimeout\": 1000,  \"pageLoadTimeout\": 1000,  \"disablePageCaching\": true }\n    ```", "```js\nfixture('Name for the set of the tests');\n```", "```js\nfixture `Name for the set of the tests`;\n```", "```js\ntest('Go to the main page', async (t) => {    await t.click('#button-main-page');    await t.expect(Selector('#logo-main-page').visible).ok();});\n```", "```js\nfixture('Contacts page').page('http://test-site.com/example');test('Test Contact form', async (t) => {    // Starts at http://test-site.com/example });\n```", "```js\nfixture('Contacts page')    .meta('env', 'production')    .meta('fixtureId', 'f0001')    .meta({ author: 'John', creationDate: '01.06.2020' });test.meta('testId', 't0001')    .meta({ testType: 'fast', testedFeatureVersion: '1.1' })    ('Test Contact form', async (t) => {    // Your test code });\n```", "```js\n{  \"filter\": {    \"fixtureMeta\": {      \"env\": \"production\",      \"author\": \"John\"    },    \"testMeta\": {      \"testType\": \"fast\",      \"testedFeatureVersion\": \"1.1\"    }  }}\n```", "```js\nfixture.skip('Contacts page');test('Test Contact form', async (t) => {    // Your test code });test('Test Review form', async (t) => {    // Your test code });fixture('About page');test('Test Reviews block', async (t) => {    // Your test code });test.skip('Test More info form', async (t) => {    // Your test code });test('Test Our mission block', async (t) => {    // Your test code });\n```", "```js\nfixture.only('Contacts page');test('Test Contact form', async (t) => {    // Your test code });test('Test Review form', async (t) => {    // Your test code });fixture('About page');test('Test Reviews block', async (t) => {    // Your test code });test.only('Test More info form', async (t) => {    // Your test code });test('Test Our mission block', async (t) => {    // Your test code });\n```"]