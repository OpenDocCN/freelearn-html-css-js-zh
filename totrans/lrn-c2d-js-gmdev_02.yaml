- en: Chapter 2. Adding Interactivity – The Making of a Concentration Game
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章. 添加交互性 – 制作注意力游戏
- en: By definition, a game is interactive in some way. Players have to be *part*
    of it by doing things. The simplest form of interactivity is clicking or touching
    tiles in the game.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 根据定义，游戏在某种程度上是交互式的。玩家必须通过做事情来成为游戏的一部分。最简单的交互形式是在游戏中点击或触摸瓷砖。
- en: 'A Concentration game is simple to explain, but it will cover some new and important
    concepts, such as:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 注意力游戏很容易解释，但它将涵盖一些新的重要概念，例如：
- en: Creating multiple instances of game assets
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建多个游戏资源实例
- en: Extending classes to improve its capabilities. Actually, there are no classes
    in JavaScript, but they are emulated using variables and prototypes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展类以增强其功能。实际上，JavaScript中没有类，但它们通过变量和原型进行模拟
- en: Adding gradients
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加渐变
- en: Making assets react to clicks and touches
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使资产对点击和触摸做出反应
- en: Changing sprite images on the fly
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态更改精灵图像
- en: Adding text labels
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加文本标签
- en: Removing sprites from the game
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从游戏中移除精灵
- en: By the end of the chapter, you will be able to create a full Concentration game
    using space for customization.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够使用空间定制创建一个完整的注意力游戏。
- en: As the project created in the previous chapter is more than just a Hello World
    game and rather acts as a blueprint for all your future projects, you'll start
    building our Concentration game out of the previously finished project.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于上一章创建的项目不仅仅是Hello World游戏，而更像是你未来所有项目的蓝图，你将开始从之前完成的项目构建我们的注意力游戏。
- en: Creating multiple instances of game assets
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建多个游戏资源实例
- en: 'The first thing you have to do in the making of a Concentration game is draw
    the tiles that you will use in the game. Here are the pictures used for the covered
    tiles and the eight different tiles that could be potentially matched, all saved
    in the `assets` folder, as explained in the previous chapter:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 制作注意力游戏的第一件事是绘制你将在游戏中使用的瓷砖。以下是用于覆盖瓷砖和可能匹配的八种不同瓷砖的图片，所有这些图片都保存在`assets`文件夹中，如前一章所述：
- en: '![Creating multiple instances of game assets](img/0072OS_02_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![创建多个游戏资源实例](img/0072OS_02_01.jpg)'
- en: 'Each tile is a 64 x 64 `PNG` file, where the covered tile is called `cover.png`,
    while the tile to be matched is named with a progressive number from 0 to 7: **tile_0**,
    **tile_1**, until **tile_7**. This is because the actual board tile values will
    be stored in an array whose values will range from 0 to 7, and it will be easy
    to assign value 0 to **tile_0**, value 1 to **tile_1**, and so on.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 每个瓷砖是一个64 x 64的`PNG`文件，其中覆盖的瓷砖称为`cover.png`，而要匹配的瓷砖则用从0到7的递增数字命名：**tile_0**、**tile_1**，直到**tile_7**。这是因为实际的棋盘瓷砖值将存储在一个数组中，其值范围从0到7，将值0分配给**tile_0**、值1分配给**tile_1**，以此类推。
- en: 'With these nine files in the assets folder, you are ready to load them, thanks
    to the `loadassets.js` file located in the `src` folder of our project:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在资产文件夹中有这九个文件后，你就可以通过位于我们项目`src`文件夹中的`loadassets.js`文件来加载它们，感谢这些文件：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The images are loaded in the same way as in the previous chapter; you then place
    all the 16 covered tiles.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图片的加载方式与上一章相同；然后放置所有16个覆盖瓷砖。
- en: 'This is the content of `gamescript.js`, which is basically the same you used
    in the previous chapter, except sprite creation is inside a `for` loop that will
    be executed 16 times:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`gamescript.js`的内容，基本上与上一章中使用的相同，只是精灵创建在一个将执行16次的`for`循环中：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The strange numbers in the `setPosition` method places the group of 64 x 64
    tiles in a 4 x 4 grid on the stage. You can use some math to change the tiles'
    position the way you prefer.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`setPosition`方法中的奇怪数字将64 x 64瓷砖组放置在舞台上的4 x 4网格中。你可以使用一些数学来以你喜欢的任何方式更改瓷砖的位置。'
- en: 'Test the game and this is what you will see on the screen:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 测试游戏，你将在屏幕上看到以下内容：
- en: '![Creating multiple instances of game assets](img/0072OS_02_02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![创建多个游戏资源实例](img/0072OS_02_02.jpg)'
- en: This is a nice grid of covered tiles, but the background is poor. It's time
    to work on it a bit more.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个覆盖的瓷砖网格，但背景很糟糕。是时候再好好工作一下了。
- en: Adding a gradient background
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加渐变背景
- en: A quick and easy way to improve the background is to add a gradient. Most of
    the skies and sceneries you see in the background of your favorite games are just
    gradients.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 改善背景的一个快速简单的方法是添加渐变。你最喜欢的游戏背景中看到的大部分天空和风景都是渐变。
- en: 'You are going to add a gradient layer conveniently called `gradient` to the
    game simply by adding these two lines to `gamescript.js`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Gradient layer creation is made by the `cc.LayerGradient.create` method, which
    requires both the start and end gradient color in an **RGBA** (**Red, Green, Blue,
    Alpha**) format.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two things you need to notice about the lines that were added:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: The gradient layer should be added before tiles, so tiles will be placed in
    front of the background because you can play with the depth of the layers to dynamically
    adjust layers in Z-order, but that's not the case.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Gradient colors can be specified both in decimal (from 0 to 255) and hexadecimal
    (from 0 x 00 to 0 x FF) values.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, test the game again and you should see a nice black to blue background.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a gradient background](img/0072OS_02_03.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
- en: At this time, you have 16 tiles placed on a beautiful gradient background. Now,
    it's time to let the player have the ability to pick some of them up.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, sprites are just images and can't be picked.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Extending the Sprite class beyond its capabilities
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When I say *sometimes*, I mean *most of the time* the default Cocos2d-JS classes
    do not let you do everything you need to do with them.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Although this might seem like a limit of Cocos2d-JS, it's one of its best features.
    You are provided with a basic set of classes you can extend the way you need to,
    meaning you can add new capabilities.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: 'So, what does it really mean to extend a class? Imagine a real-world example:
    you''re entering a bike shop and buying a mountain bike. Your mountain bike is
    a class; with this class, you can do everything you can actually do with a mountain
    bike, namely pedal and steer.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, you are a bit lazy and don't want to pedal all the time, so you
    buy a little motor and add it to your mountain bike. Now, you can still do everything
    you usually did with your bike, but you can also rest your legs, turn on the motor,
    and let it pedal on your behalf.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: You just extended the mountain bike, created a motorized mountain bike, which
    is basically still a bike and inherits all its features with some new ones.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'To extend the `Sprite` class and make it capable of doing all the stuff you
    need in order to make your Concentration game, you have to add some lines to `gamescript.js`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If you test the game at this time, you will see the same background gradient
    with the 4 x 4 grid of covered tiles. Let's see what has changed.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, the tile creation is not made anymore with the following code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Instead, it''s been replaced with:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, you aren't creating the Sprite itself, but a new type called `MemoryTile`,
    which will extend the `Sprite` class.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how you declare that you are extending a class:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, the `MemoryTile` variable is declared as an extension of the `Sprite`
    class.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: The `ctor` method is the constructor, basically the stuff being executed as
    soon as the variable is created. In this case, `initWithFile` assigns the same
    cover image you assigned before with the old way of placing tiles.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: You might argue that four lines of code are being used to do what could be done
    with just a single line of code, and that's true, but this is the little price
    you pay to add new functionalities to Cocos2d-JS built-in classes.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Now, you have a new class that extends Sprite. Let's add interactivity to it.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Making assets react to clicks and touches
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two ways to pick a tile, irrespective of whether you are playing with
    a touch or mouse-driven device. You can tap on a tile or you can click on it.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Picking a tile as an initial attempt
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'No matter the way you use Cocos2d-JS, all in all you are creating cross-platform
    games. You have to tell Cocos2d-JS you are going to let the user touch or click
    on some tiles, so the `MemoryTile` class will change this way:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'What just happened? You just added an event listener to the event manager.
    The event manager is the entity that triggers events fired by the game or by the
    player. The `addListener` method adds a listener to the event manager, but you
    don''t have a listener at the moment. Let''s create one:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This is the basic listener. You will find yourself using it in most of your
    projects, so let''s take a closer look at it:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This is how you create a listener with a `cc.EventListener.create` method.
    You named it `listener` to match the previous call:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, you modified the `MemoryTile` class:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here, you specify the type of event: `cc.EventListener.TOUCH_ONE_BY_ONE` tells
    the game that you are waiting for touches, but only one at a time. Note that the
    game talks about touches, but the game will also work with a mouse. This is the
    true power Cocos2d-JS brings when dealing with cross-platform development.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This will basically ignore all touches when there''s one active touch:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, things start to get serious as you are ready to trigger when the touch
    or mouse click begins:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `getCurrentTarget` method returns the current click target:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'By calling the `touch.getLocation` method, you will have the coordinates of
    the touch or click inside the game, while the `convertToNodeSpace` method will
    convert such coordinates into the coordinates relative to the tile itself. This
    way, the `location` variable will contain the coordinates of the touch or click
    that is relative to the tile:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `getContentSize` function only returns the width and height of the target,
    in this case the tile:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, you define a rectangle with the same size of the tile with the `cc.rect`
    method. This will allow us to know whether the click or touch action was inside
    this rectangle. A certain tile has been clicked:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Also, this is how you determine whether a point is inside a rectangle, so you
    can say that the tile has been clicked.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'So, basically:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Each tile detects a `touch` or `click` action, which can be inside or outside
    the tile itself.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You get touch/click coordinates relative to the tile.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You see whether these coordinates are inside the tile.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can say which tile has been clicked, if any.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are you ready to click tiles? Run the game and click on a tile, and you will
    see.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '**I picked a tile!!**'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'Yes, it works! Let me just show you this line again:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Did you notice the `clone()` method when you first wrote it? You used the `clone`
    method because an event listener can be added only once. The `addListener` method
    sets a registration flag on the event listener, and it won't add the event listener
    again if the flag is already set. In other words, you will be able to check for
    clicks or touches only on the first tile you assigned the listener to.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Using `clone`, you basically duplicate the listener, so each tile will have
    its own listener up and running.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Changing sprite images on the fly
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's now find out how to change sprite images.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Showing the tile picture
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once a tile is picked, it has to show its picture. Pictures are just a graphical
    representation of a tile value, which you initially store in an array called `gameArray`
    declared at the very beginning of a `gamescript.js` file:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then, once you create a new tile, you can assign it a custom attribute called
    `pictureValue` with the value of the *i-th* element of `gameArray`:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Also, once the tile is picked, you can again use the `initWithFile()` method
    to assign it another image according to its value:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Now, it should be clear why the tile images files were numbered from 0 to 7\.
    This is because they will match the tile values assigned by the `gameArray` elements.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the game and start picking tiles; see how they uncover showing their actual
    picture:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '![Showing the tile picture](img/0072OS_02_04.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
- en: Now, add some game logic that will allow you to pick only two tiles, then remove
    them from the game if they match, or cover them again.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: 'You need another array called `pickedTiles`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then, you need to add a couple of lines to our `listener` variable:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Once the `pickedTiles` array contains two tiles, which prevents the player from
    picking the same tile twice, then the `checkTiles` function is called.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I am not explaining much of the code at this step because there's nothing related
    to Cocos2d-JS; it's just good old JavaScript logic.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Basically, `checkTiles` waits two seconds, giving some time to the player to
    memorize the picked tiles, and then again covers tiles if they do not match by
    simply changing their image to a covered tile again, or removes them from the
    game with the `removeChild` method.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: In both cases, the player will be allowed to pick new tiles by emptying a `pickedTiles`
    array.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: Test the game and make some matches to see the tiles being removed from the
    game.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '![Showing the tile picture](img/0072OS_02_05.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You created your first Cocos2d-JS working game. Now, let's
    add some finishing touches.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Shuffling the tiles and adding the score
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have noticed the game isn't that hard, since you are just matching
    tiles that are one next to each other. The first tile matches the second tile,
    the third tile matches the fourth, and so on.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经注意到游戏并不那么难，因为你只是匹配相邻的瓷砖。第一块瓷砖匹配第二块瓷砖，第三块瓷砖匹配第四块，以此类推。
- en: First, you need to shuffle the tiles, then you will add the score to the game.
    Players love to compete for high scores.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要洗牌，然后你将给游戏添加分数。玩家喜欢竞争高分。
- en: 'You start by adding two new variables `scoreText` and `moves`, which will handle
    the text showing the score and count the number of moves (picks) the player did:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先添加两个新变量 `scoreText` 和 `moves`，它们将处理显示分数的文本并计算玩家所做的移动（选择）次数：
- en: '[PRE26]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then, you need to shuffle `gameArray`. Shuffling arrays with a true randomization
    is beyond the scope of this book, so for this game, you are going to use a basic
    shuffle function you can find at [http://jsfromhell.com/array/shuffle](http://jsfromhell.com/array/shuffle):'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你需要对 `gameArray` 进行洗牌。使用真正的随机化来洗牌超出了这本书的范围，所以对于这个游戏，你将使用可以在[http://jsfromhell.com/array/shuffle](http://jsfromhell.com/array/shuffle)找到的基本洗牌函数：
- en: '[PRE27]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Then `gameArray` is shuffled at the beginning of the game:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在游戏开始时对 `gameArray` 进行洗牌：
- en: '[PRE28]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'To add the score text to the game, you need a label. Here is how you can create
    a text label called `scoreText`, which contains the text `Moves: 0` with a 32
    pixel Arial font:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要将分数文本添加到游戏中，你需要一个标签。以下是如何创建一个名为 `scoreText` 的文本标签，它包含文本 `移动：0`，并使用 32 像素的 Arial
    字体：
- en: '[PRE29]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Finally, once you check for tile matches, it''s easy to increase the number
    of moves and update the `scoreText` text label with a `setString` method:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，一旦你检查到瓷砖匹配，很容易增加步数，并使用 `setString` 方法更新 `scoreText` 文本标签：
- en: '[PRE30]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Test the script and you will be able to play a full game with a randomly generated
    board and the score text.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 测试脚本，你将能够玩一个带有随机生成的棋盘和分数文本的完整游戏。
- en: '![Shuffling the tiles and adding the score](img/0072OS_02_06.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![洗牌瓷砖并添加分数](img/0072OS_02_06.jpg)'
- en: Now, you really do have a complete and polished game!
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你真的拥有了一个完整且精致的游戏！
- en: Summary
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: By extending the Sprite class and adding a bit of interactivity, you created
    your own Concentration game. Now, you also know how to change Sprite images on
    the fly and deal with text labels.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 通过扩展 Sprite 类并添加一些交互性，你创建了自己的专注力游戏。现在，你也知道了如何动态更改 Sprite 图像和处理文本标签。
- en: Concentration is a great brain game. However, sometimes you want more action.
    To make it harder, you can try making your own 6 x 6 game rather than this easy
    4 x 4 game. Head on to the next chapter and let's make things move!
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 专注力是一种很好的脑力游戏。然而，有时你想要更多的动作。为了使其更难，你可以尝试制作自己的 6 x 6 游戏，而不是这个简单的 4 x 4 游戏。翻到下一章，让我们让事情动起来吧！
