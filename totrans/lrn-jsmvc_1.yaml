- en: Chapter 1. Getting Started with JavaScriptMVC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, get an overview of the JavaScriptMVC framework. We will install
    it, go through the architecture, and learn it in the best possible way. Finally,
    we will build a simple application. There is nothing that works better than an
    example. Some say this is the only thing that works.
  prefs: []
  type: TYPE_NORMAL
- en: What is JavaScriptMVC?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**JavaScriptMVC** (**JMVC**) is a JavaScript open source **model-view-controller**
    (**MVC**) framework build, on top of the jQuery library.'
  prefs: []
  type: TYPE_NORMAL
- en: It is the backend agnostic client-side framework that can be used with any backend
    solution, such as Node.js, Ruby on Rails, Django, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The idea behind JavaScriptMVC is to provide a set of tools to build high quality
    and maintainable applications in the shortest amount of time possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'JavaScriptMVC contains the following independent components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**StealJS**: This is the dependency manager and production build'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FuncUnit**: This is the unit and functional test component'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**jQueryMX**: This contains a set of plugins that provide the functionality
    to implement and organize large JavaScript codebases into a well-structured and
    organized form, provide a model-view-controller abstraction layer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DocumentJS**: This is the documentation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first version was published in May 2008\. Current Version 3.2 was released
    in December 2010\. The latest version at the time of writing this book is 3.2.2.
  prefs: []
  type: TYPE_NORMAL
- en: In the next Version 3.3 of JavaScriptMVC, which should be released soon, jQueryMX
    project will be replaced by CanJS. Projects using current version of JMVC should
    work after small refactoring with JMVC 3.3 thanks to the names fallback.
  prefs: []
  type: TYPE_NORMAL
- en: 'JavaScriptMVC 4.0 will be renamed to DoneJS and contain significant changes
    to StealJS which will be fully AMD compatible work with CommonJS and run with
    Node.js. FuncUnit will be split into 3 parts: Syn - Synthetic event library, ShouldJS
    - Asynchronous test driving using Jasmine or QUnit and DidJS - Automated test
    runner bindings for Jasmine or QUnit for Selenium, PhantomJS, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: License
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'JavaScriptMVC is licensed under the MIT license with the following exceptions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Rhino: This is the JavaScript command line (MPL 1.1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selenium browser automation (Apache 2)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Links
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can refer to the following URLs to learn more about JavaScriptMVC:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Official website: [http://javascriptmvc.com](http://javascriptmvc.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Repository: [https://github.com/bitovi/javascriptmvc](https://github.com/bitovi/javascriptmvc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why JavaScriptMVC?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScriptMVC is a solid and well documented framework.
  prefs: []
  type: TYPE_NORMAL
- en: It is based on the extremely popular JavaScript library **jQuery**, where many
    JavaScript programmers are familiar with its factory methods and chainable function
    style.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScriptMVC is a complete package. It contains everything we need to build,
    manage, document, and test JavaScript projects.
  prefs: []
  type: TYPE_NORMAL
- en: Since it is a modular framework, we don't need to use all the available components.
    We can start by using only framework components that we actually need, and add
    additional components as and when we need them.
  prefs: []
  type: TYPE_NORMAL
- en: The learning curve is pretty low, especially if a reader is familiar with other
    JavaScript frameworks, such as lightweight Backbone and Sammy or heavyweight toolkits
    such as Dojo toolkit or Google Closure. At the same time, it offers much more
    than lightweight brothers without a heavy feel, such as Google Closure which produces
    much cleaner code and provides better documentation than the very popular Dojo
    toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: One of its killer features is that it prevents memory leakage. This is a very
    important aspect of client-side applications, which perform many operations on
    the **Document Object Model** (**DOM**) tree.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**MVC in JavaScriptVC**'
  prefs: []
  type: TYPE_NORMAL
- en: JavaScriptMVC utilizes the classic MVC pattern, which separates business logic
    and application data from the user interface.
  prefs: []
  type: TYPE_NORMAL
- en: System architecture approach
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When building web applications, we can distinguish between two approaches—multi-page
    application and single-page application.
  prefs: []
  type: TYPE_NORMAL
- en: In **multi-page application**, most of the business logic is implemented in
    the backend system, with some enhancement done in JavaScript. For example, the
    Ruby on Rails application, where most of the main logic is done by the backend
    MVC architecture and when a user navigates to another page, an ordinary `http`
    request is sent.
  prefs: []
  type: TYPE_NORMAL
- en: In **single-page application**, most of the business logic is implemented on
    the frontend side. For example, the JavaScriptMVC application, where most of the
    main logic is done by frontend MVC architecture. When a user navigates to another
    page, the frontend router dispatches all requests and makes calls to the back
    end API written; for example, in Sinatra.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScriptMVC single-page application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JavaScriptMVC is designed for single-page application use cases. It's good to
    know about the advantages and disadvantages of the single-page application approach
    compared to that of the multi-page application.
  prefs: []
  type: TYPE_NORMAL
- en: Advantages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most of the states are maintained in the client, so we don't need to keep the
    session states on the server side
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most of the requests are done through XRH calls, so there is no need to load
    a new page each time, which could cause high memory footprint (especially in the
    old fashion, non event-based servers such as Apache)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most of the business logic is on the client side, so we can save many calls
    to the server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downsides
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Load balance and **Content Delivery Network** (**CDN**) can be tricky since
    RPC is used to move data back and forth between the server and client.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Search Engine Optimization** (**SEO**) can be tricky due to on-demand JavaScript
    built pages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Real-world examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Readers can find web applications built with the JavaScriptMVC framework at
    [http://community.javascriptmvc.com/posts/in-bucket/apps](http://community.javascriptmvc.com/posts/in-bucket/apps).
  prefs: []
  type: TYPE_NORMAL
- en: Installing JavaScriptMVC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing JavaScriptMVC is as easy as making tea, but faster.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing your method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are three methods.
  prefs: []
  type: TYPE_NORMAL
- en: Download the complete package from the official website ([http://javascriptmvc.com](http://javascriptmvc.com))
    or build a custom package including the components we want to use ([http://javascriptmvc.com/builder.html](http://javascriptmvc.com/builder.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pull code from the Git repositories hosted on GitHub.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Vagrant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The last two methods are the preferred way, for the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: Easy update to the latest version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy switch to another version by the `checkout` tag
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contribution to the project; how awesome is that? For more information about
    contributing, visit [http://javascriptmvc.com/docs.html#!developwithgit](http://javascriptmvc.com/docs.html#!developwithgit)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third method seems to be the best one, because it contains all the advantages
    from the second one, plus it creates an encapsulated environment, which we can
    easily and quickly create or delete without affecting our current development
    environment setup.
  prefs: []
  type: TYPE_NORMAL
- en: Which method is right for me?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a fast tryout library, choose the first method. For the actual development,
    definitely choose the second one.
  prefs: []
  type: TYPE_NORMAL
- en: The first method – download the package
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this method, we will use a web interface on the JavaScriptMVC web page to
    configure and download the package:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the complete package from [http://javascriptmvc.com](http://javascriptmvc.com)
    and unpack its content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a folder named `Todo` under the local web server working directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy all files from `javascriptmvc-3.2.2` to the `Todo` folder and start the
    web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That is it; we are all set and ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: The second method – pull the code from Git repositories
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We assume that the reader knows and has installed Git.
  prefs: []
  type: TYPE_NORMAL
- en: 'If not, the following resources might be helpful:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing** **Git**: [http://git-scm.com/book/en/Getting-Started-Installing-Git](http://git-scm.com/book/en/Getting-Started-Installing-Git)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Free book Pro Git**: [http://git-scm.com/book](http://git-scm.com/book)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Git** **reference**: [http://gitref.org](http://gitref.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following steps, we are going to install JavaScriptMVC for our `Todo`
    example project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Under local web server directory, create new folder named `Todo`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `Todo` folder, create a new Git repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add JavaScriptMVC components as submodules to the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install and update the submodules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last module we need to install is `Syn`. Since it is already a submodule
    to the `FuncUnit` project, all we need to do is initialize and update it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Switch `Syn` to the `master` branch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go back to the root directory of the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Move the `js` command to the root directory of the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Verifying Installation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The project directory should have following folder structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: That is it; we are all set and ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'More about submodules in Git: [http://git-scm.com/book/en/Git-Tools-Submodules](http://git-scm.com/book/en/Git-Tools-Submodules)'
  prefs: []
  type: TYPE_NORMAL
- en: The third method – Vagrant
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To install JavaScriptMVC using this method, we need to install **Vagrant**,
    which is a virtualized development tool wrapper around Oracle VM VirtualBox, an
    x86 and AMD64/Intel64 virtualization software package.
  prefs: []
  type: TYPE_NORMAL
- en: Download and install Oracle VM VirtualBox ([https://www.virtualbox.org](https://www.virtualbox.org)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download and install Vagrant ([http://downloads.vagrantup.com](http://downloads.vagrantup.com)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download an unpack the JavaScriptMVC kick-starter ([https://github.com/wbednarski/JavaScriptMVC_kick-starter/archive/master.zip](https://github.com/wbednarski/JavaScriptMVC_kick-starter/archive/master.zip)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside JavaScriptMVC kick-starter folder type `vagrant up`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This command creates a virtual environment and a projects directory. It also
    installs the web server. JavaScriptMVC framework will be placed in the `Todo`
    directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Any changes we make inside the projects directory are immediately visible in
    web browser at `http://192.168.111.111/`.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation and API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Good documentation and API, many tutorials, and a well documented codebase
    is the strong side of JavaScriptMVC:'
  prefs: []
  type: TYPE_NORMAL
- en: 'JavaScriptMVC documentation: [http://javascriptmvc.com/docs.html](http://javascriptmvc.com/docs.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'JavaScriptMVC API: [http://jqapi.com](http://jqapi.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'JavaScriptMVC tutorials: [http://javascriptmvc.com/docs.html#!tutorials](http://javascriptmvc.com/docs.html#!tutorials)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'JavaScriptMVC code examples: [http://javascriptmvc.com/docs.html#!examples](http://javascriptmvc.com/docs.html#!examples)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Active community on the forum and Stack Overflow:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stack Overflow questions about JavaScriptMVC: [http://stackoverflow.com/questions/tagged/javascriptmvc](http://stackoverflow.com/questions/tagged/javascriptmvc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'JavaScriptMVC official forum: [http://forum.javascriptmvc.com/allforums](http://forum.javascriptmvc.com/allforums)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The architecture of JavaScriptMVC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The architecture of JavaScriptMVC is modular. The powerful stack contains everything
    we need to build a well organized, tested, and documented application.
  prefs: []
  type: TYPE_NORMAL
- en: Here is a list of the JavaScriptMVC key components as well as topics covered
    in the next chapters.
  prefs: []
  type: TYPE_NORMAL
- en: DocumentJS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**DocumentJS** is an independent JavaScript documentation application and provides
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Inline demos with source code and HTML panels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds tags to the documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds documentation as favorite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Auto suggest search
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test result page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extends the JSDoc syntax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds undocumented code because it understands JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FuncUnit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**FuncUnit** is an independent web testing framework and provides the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Test clicking, typing, moving mouse cursor, and drag-and-drop utility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Follows users between pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi browser and operating system support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous integration solution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writes and debugs tests in the web browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chainable API that parallels jQuery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jQueryMX
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**jQueryMX** is the MVC part of JavaScriptMVC and provides the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Encourages logically separated, deterministic code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MVC layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uniform client-side template interface (supports jq-tmpl, EJS, JAML, Micro,
    and Mustache)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ajax fixtures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Useful DOM utilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Language helpers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSON utilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Class system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: StealJS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**StealJS** is an independent code manager and build tool and provides the
    following powerful features:'
  prefs: []
  type: TYPE_NORMAL
- en: Dependency management
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Loads JavaScript and CoffeeScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loads CSS, Less, and Sass files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loads client-side templates such as TODO
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loasd individual files only once
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loads files from a different domain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Concatenation and compression
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Google Closure compressor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Makes multi-page build
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pre processes `TODO`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can conditionally remove specified code from the production build
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Builds standalone jQuery plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logger
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Logs messages in a development mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code generator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Generates an application skeleton
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds the possibility to create your own generator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Package management
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Downloads and install plugins from SVN and Git repositories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installs the dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Runs install scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loads individual files only once
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loads files from a different domain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code cleaner
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Runs JavaScript beautifier against your codebase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Runs JSLint against your codebase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building simple applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We installed JavaScriptMVC and went briefly through its components. Now, we
    are ready to build our first JavaScriptMVC application.
  prefs: []
  type: TYPE_NORMAL
- en: Excited? Let's do the magic.
  prefs: []
  type: TYPE_NORMAL
- en: Todo list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to learn JavaScriptMVC on the classic example application – the
    to-do list.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are curious and want to compare different JavaScript frameworks based
    on the `todos` application examples, then the GitHub project is absolutely fantastic.
    You can find it at [https://github.com/tastejs/todomvc/tree/gh-pages/architecture-examples](https://github.com/tastejs/todomvc/tree/gh-pages/architecture-examples).
    The project home page is at [http://todomvc.com/](http://todomvc.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Loader
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the `Todo` folder that we created during installing JavaScriptMVC, create
    a folder named `todo`. Create files named `todo.html` and `todo.js` inside `todo`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The project directory should have following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy and paste the following code into `todo.html` to load the `StealJS` and
    `todo.js` files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`../steal/steal.js?todo` is the equivalent of `../steal/steal.js?todo/todo.js`.
    If file name is not provided `StealJS`, try to load the JavaScript file with the
    same name as the given folder.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `todo.js`, add the following code to load the `jQueryMX` plugins. They are
    necessary to implement this application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Open the page in a web browser by typing `http://YOUR_LOCAL_WEB_SERVER/Todo/todo.html`,
    and use a web development tool, such as Google Chrome Inspector, to check if `StealJS`
    and all the listed plugins are loaded properly.
  prefs: []
  type: TYPE_NORMAL
- en: Model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The next step is to add a model to our application by extending `$.Model` from
    the `jQueryMX` project.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first parameter is the model name (string), the second parameter is the
    object with the class properties and methods. The last parameter is the prototype
    instance property, which we leave as an empty object for this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Class properties are not random; they are described in the model API. [http://javascriptmvc.com/docs.html#!jquerymx](http://javascriptmvc.com/docs.html#!jquerymx).
  prefs: []
  type: TYPE_NORMAL
- en: We've created the `Todo` model for our `todo` list application. Now, it's time
    to play around with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a web browser and type the following line into the JavaScript console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`todo` is now an instance of `Todo` with property name and property value `write
    a book`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Get the property value as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the property value if the property exists, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Or by `attrs`, where we can set more then one property at the time as well
    as add a new property:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add two new properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'List all the properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot shows the execution of the preceding commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Model](img/0205_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Fixtures
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since we have no backend service to handle /todo API calls in our frontend application,
    any attempt to invoke one of the model's CRUD methods on the `Todo` model will
    cause a network error.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Create, Read, Update, Delete** (**CRUD**) are the four basic functions of
    persistent storage.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Fixtures](img/0205_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: At this point, `$` `.fixture` comes to the rescue. With this feature, we can
    work on a project even when backend code is not ready yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create fixtures for the `Todo` model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can use our `Todo` model methods as if backend services were here.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, we can list all `todos`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the `console.log(''todos: '',
    todos);` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Fixtures](img/0205_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: View
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, it is a good time to add some HTML code to actually see something beyond
    the browser console. To do this, use the open source client-side template system
    **Embedded JavaScript** (**EJS**).
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file `todos.ejs` in the `todo` directory (the same folder where
    `todo.js` is located), and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, type the following in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can see all `todos` printed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![View](img/0205_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Basically, the EJS template is an HTML file with injected JavaScript code between
    `<%` and `%>` or `<%=` and `%>` (and a few other ways).
  prefs: []
  type: TYPE_NORMAL
- en: The difference is that in the second case, all the values returned by the JavaScript
    code are escaped and printed out. In the first one, they are only evaluated.
  prefs: []
  type: TYPE_NORMAL
- en: The first line is a jQuery `each` loop— no magic here. However, the next line
    could be a new thing for many readers. It is ECMAScript Harmony-like, arrow style
    syntax for functions used by the EJS parser that doesn't darken the whole picture
    by its simplicity.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Can be explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Controller
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's add some action to our user interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to the `todo.js` file, and refresh the application in
    a browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Now, you can click on the `todo` name to see the console log or delete it.
  prefs: []
  type: TYPE_NORMAL
- en: The `init` method is called when a new controller is instantiated.
  prefs: []
  type: TYPE_NORMAL
- en: When the `controller` element is removed from the DOM tree (in our case, `#todos`),
    the `destroy` method is called automatically, unbinding all `controller` event
    handlers and releasing its element to prevent memory leakage.
  prefs: []
  type: TYPE_NORMAL
- en: Routing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Replace the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'With:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Refresh the application and try to click on the `todo` list elements. You will
    see that the URL updates after clicking on the `todo` item with its corresponding
    ID.
  prefs: []
  type: TYPE_NORMAL
- en: Complete application code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here is the complete code for the `Todo` application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned what JavaScriptMVC is, and why it is a good and
    solid framework. We also learned how to install it, and browse the documentation
    and API. We got an overview of its architecture by building a simple application.
  prefs: []
  type: TYPE_NORMAL
- en: If you can understand all the code that we have written in this chapter, you
    will be able to dig into the framework easily and fast. Congratulations!
  prefs: []
  type: TYPE_NORMAL
