["```js\ndocker --version\n```", "```js\nDocker version 24.0.2, build cb74dfc\n```", "```js\ndocker-compose --version\n```", "```js\nDocker Compose version v2.19.1\n```", "```js\ndocker run --name whispering-database -p 27017:27017 -d mongo:7.0.0\n```", "```js\nUnable to find image 'mongo:7.0.0' locally\n7.0.0: Pulling from library/mongo\n99de9192b4af: Pull complete\n18b9e63943e7: Pull complete\nccf1fde52048: Pull complete\n8317989437cb: Pull complete\n1bde6bf8acc1: Pull complete\n11fb005be9eb: Pull complete\n81a254c162fc: Pull complete\n2a574922bf90: Pull complete\n22659e13b0a2: Pull complete\nDigest: sha256:a89d79ddc5187f57b1270f87ec581b7cc6fd697efa12b8 f1af72f3c4888d72b5\nStatus: Downloaded newer image for mongo:7.0.0\n27ead2313a72c0cb0d2d1bf18ef2a37062a63851ebc9355359dbc1a4741ac168\n```", "```js\ndocker ps\n```", "```js\nCONTAINER ID   IMAGE         COMMAND                  CREATED         STATUS         PORTS                      NAMES\n7d28f8c555b9   mongo:7.0.0   \"docker-entrypoint.s…\"   7 seconds ago   Up 6 seconds   0.0.0.0:27017->27017/tcp   whispering-database\n```", "```js\ndocker stop whispering-database\n```", "```js\ndocker rm whispering-database\n```", "```js\ndocker run --name whispering-database -p 27017:27017 -d mongo:7.0.0\n```", "```js\nversion: '3.8'\nservices:\n  database:\n    container_name: whispering-database\n    image: mongo:7.0\n    ports:\n      - '27017:27017'\n    volumes:\n      - db-storage:/data/db\nvolumes:\n  db-storage:\n```", "```js\ndocker-compose up -d\n```", "```js\n[+] Running 1/1\n✓ database Pulled                         1.8s\n[+] Running 3/3\n✓ Network app_default       Created     0.1s\n✓ Volume \"app_db-storage\"   Created     0.0s\n✓ Container app-database-1  Started     0.5s\n```", "```js\ndocker-compose down\n```", "```js\n\"scripts\": {\n    \"start\": \"node index.js\",\n    \"test\": \"jest\",\n    \"test:coverage\": \"jest --coverage\",\n    \"lint\": \"standard\",\n    \"lint:fix\": \"standard --fix\",\n    \"infra:start\": \"docker-compose up -d --build\",\n    \"infra:stop\": \"docker-compose down --remove-orphans\"\n}\n```", "```js\nnpm run infra:start\ndocker exec -it whispering-database /bin/bash\n```", "```js\nmongod\n```", "```js\nroot@7d515e1c8f85:/# mongod\n{\"t\":{\"$date\":\"2023-08-19T13:45:08.554+00:00\"},\"s\":\"I\",  \"c\":\"CONTROL\",  \"id\":23285,   \"ctx\":\"main\",\"msg\":\"Automatically disabling TLS 1.0, to force-enable TLS 1.0 specify --sslDisabledProtocols 'none'\"}\n{\"t\":{\"$date\":\"2023-08-19T13:45:08.556+00:00\"},\"s\":\"I\",  \"c\":\"NETWORK\",  \"id\":4915701, \"ctx\":\"main\",\"msg\":\"Initialized wire specification\",\"attr\":{\"spec\":{\"incomingExternalClient\":{\"minWire Version\":0,\"maxWireVersion\":21},\"incomingInternalClient\":{\"minWire Version\":0,\"maxWireVersion\":21},\"outgoing\":{\"minWireVersion\":6,\"maxWire Version\":21},\"isInternalClient\":true}}}\n```", "```js\nconsole.log(process.env.MY_SECRET)\n```", "```js\nexport MY_SECRET=secret\n```", "```js\nnode index.js\n```", "```js\nMY_SECRET=secret node index.js\n```", "```js\nMY_SECRET=secret\n```", "```js\nnpm install dotenv@16\n```", "```js\nimport 'dotenv/config'\n```", "```js\nnode --require dotenv/config index.js\n```", "```js\nnpm install mongoose@7.4 dotenv@16\n```", "```js\nMONGODB_URI=mongodb://localhost:27017/whispering-database\nPORT=3000\n```", "```js\nimport { app } from './server.js'\nimport mongoose from 'mongoose'\nconst port = process.env.PORT\ntry {\n  await mongoose.connect(process.env.MONGODB_URI);\n  console.log('Connected to MongoDB')\n  app.listen(port, () => {\n    console.log(`Running in http://localhost:${port}`)\n  })\n} catch (error) {\n  console.error(error)\n}\n```", "```js\n\"scripts\": {\n    \"start\": \"node --require dotenv/config index.js\",\n    \"test\": \"jest --setupFiles dotenv/config\",\n    \"test:coverage\": \"jest --coverage --setupFiles dotenv/config\",\n    \"lint\": \"standard\",\n    \"lint:fix\": \"standard --fix\",\n    \"infra:start\": \"docker-compose up -d --build\",\n    \"infra:stop\": \"docker-compose down\"\n}\n```", "```js\nnpm run infra:start\nnpm run start\n```", "```js\nConnected to MongoDB\nRunning in http://localhost:3000\n```", "```js\nMongooseServerSelectionError: connect ECONNREFUSED ::1:27017, connect \nECONNREFUSED 127.0.0.1:27017\n    at _handleConnectionErrors (node_modules/mongoose/lib/connection.js:788:11)\n    at NativeConnection.openUri (node_modules/mongoose/lib/connection.js:763:11)\n    at async file:///index.js:7:4 {\n  reason: TopologyDescription {\n    type: 'Unknown',\n    servers: Map(1) { 'localhost:27017' => [ServerDescription] },\n    stale: false,\n    compatible: true,\n    heartbeatFrequencyMS: 10000,\n    localThresholdMS: 15,\n    setName: null,\n    maxElectionId: null,\n    maxSetVersion: null,\n    commonWireVersion: 0,\n    logicalSessionTimeoutMinutes: null\n  },\n  code: undefined\n}\n```", "```js\nnpm run infra:stop\nnpm run start\n```", "```js\nimport mongoose from 'mongoose'\nmongoose.set('toJSON', {\n  virtuals: true,\n  transform: (doc, converted) => {\n    delete converted._id\n    delete converted.__v\n  }\n})\nconst whisperSchema = new mongoose.Schema({\n  message: String\n})\nconst Whisper = mongoose.model('Whisper', whisperSchema)\nexport {\n  Whisper\n}\n```", "```js\nconst whisperSchema = new mongoose.Schema({\n  message: String\n})\n```", "```js\nconst Whisper = mongoose.model('Whisper', whisperSchema)\n```", "```js\nmongoose.set('toJSON', {\n  virtuals: true,\n  transform: (doc, converted) => {\n    delete converted._id;\n    delete converted.__v;\n  }\n});\n```", "```js\n{\n  \"_id\": \"5dff03d3218b91425b9d6fab\",\n  \"message\": \"I love MongoDB!\",\n  \"__v\": 0\n}\n```", "```js\n{\n  \"id\": \"5dff03d3218b91425b9d6fab\",\n  \"message\": \"I love MongoDB!\"\n}\n```", "```js\nimport {\n  Whisper\n} from './database.js'\nconst getAll = () => Whisper.find()\nconst getById = id => Whisper.findById({ _id: id })\nconst create = async (message) => {\n  const whisper = new Whisper({ message })\n  await whisper.save()\n  return whisper\n}\nconst updateById = async (id, message) => Whisper.findOneAndUpdate({ _id: id }, { message }, { new: false })\nconst deleteById = async (id) => Whisper.deleteOne({ _id: id })\nexport { getAll, getById, create, updateById, deleteById }\n```", "```js\nnpm run infra:start\nnpm run start\n```", "```js\nimport mongoose from 'mongoose'\nimport {\n  Whisper\n} from '../database.js'\nconst ensureDbConnection = async () => {\n   try {\n        if (mongoose.connection.readyState !== 1) {\n            await mongoose.connect(process.env.MONGODB_URI);\n        }\n    } catch (error) {\n        console.error('Error connecting to the database:', error);\n        throw error; // Re-throw the error for handling at a higher level\n    }\n}\nconst closeDbConnection = async () => {\n    if (mongoose.connection.readyState === 1) {\n        await mongoose.disconnect()\n    }\n}\nconst restoreDb = () => Whisper.deleteMany({})\nconst populateDb = () => Whisper.insertMany([{ message: 'test' }, { message: 'hello world' }])\nconst getFixtures = async () => {\n    const data = await Whisper.find()\n    const whispers = JSON.parse(JSON.stringify(data))\n    const inventedId = '64e0e5c75a4a3c715b7c1074'\n    const existingId = data[0].id\n    return { inventedId, existingId, whispers }\n}\nconst normalize = (data) => JSON.parse(JSON.stringify(data))\nexport { restoreDb, populateDb, getFixtures, ensureDbConnection, normalize, closeDbConnection }\n```", "```js\nimport supertest from 'supertest'\nimport { app } from '../server'\nimport { getById } from '../store.js'\nimport { restoreDb, populateDb, getFixtures,\nensureDbConnection, normalize, closeDbConnection } from './utils.js'\nlet whispers\nlet inventedId\nlet existingId\ndescribe('Server', () => {\n  beforeAll(ensureDbConnection)\n  beforeEach(async () => {\n    await restoreDb()\n    await populateDb(whispers)\n    const fixtures = await getFixtures()\n    whispers = fixtures.whispers\n    inventedId = fixtures.inventedId\n    existingId = fixtures.existingId\n  })\n  afterAll(closeDbConnection)\n  //... unchanged tests\n})\n```", "```js\nit('Should return a 201 when the whisper is created', async () => {\n    const newWhisper = { message: 'This is a new whisper' }\n    const response = await supertest(app)\n    .post('/api/v1/whisper')\n    .send({ message: newWhisper.message })\n    expect(response.status).toBe(201)\n    expect(response.body.message).toEqual(newWhisper.message)\n    // Database changes\n    const storedWhisper = await getById(response.body.id)\n    expect(normalize(storedWhisper).message).toStrictEqual(newWhisper.message)\n})\nit('Should return a 200 when the whisper is updated', async () => {\n    const response = await supertest(app)\n    .put(`/api/v1/whisper/${existingId}`)\n    .send({ message: 'Whisper updated' })\n    expect(response.status).toBe(200)\n    // Database changes\n    const storedWhisper = await getById(existingId)\n    expect(normalize(storedWhisper)).toStrictEqual({ id: existingId, message: 'Whisper updated' })\n})\n```", "```js\nit('Should return a 200 when the whisper is deleted', async () => {\n    const response = await supertest(app).delete(`/api/v1/whisper/${existingId}`)\n    expect(response.status).toBe(200)\n    // Database changes\n    const storedWhisper = await getById(existingId)\n    expect(storedWhisper).toBe(null)\n})\n```", "```js\nnpm run infra:start\nnpm run test:coverage\n```", "```js\n--------------|---------|----------|---------|---------|-------------------\nFile          | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s\n--------------|---------|----------|---------|---------|-------------------\nAll files     |   97.43 |    85.71 |   94.44 |   97.18 |\napp          |   96.66 |      100 |   91.66 |   96.42 |\n  database.js |     100 |      100 |     100 |     100 |\n  server.js   |   95.34 |      100 |   83.33 |   95.34 | 11-12\n  store.js    |     100 |      100 |     100 |     100 |\napp/tests    |     100 |       50 |     100 |     100 |\n  utils.js    |     100 |       50 |     100 |     100 | 7-12\n--------------|---------|----------|---------|---------|-------------------\nTest Suites: 1 passed, 1 total\nTests:       13 passed, 13 total\nSnapshots:   0 total\nTime:        1.945 s, estimated 2 s\nRan all test suites.\n```", "```js\ndescribe('/about', () => {\n    it('Should return a 200 with the total whispers in the platform', async () => {\n        const response = await supertest(app).get('/about')\n        expect(response.status).toBe(200)\n        expect(response.text).toContain(`Currently there are ${whispers.length} whispers available`)\n    })\n})\n```", "```js\nexport default {\n  modulePathIgnorePatterns: ['<rootDir>/node_test/'],\n  \"coveragePathIgnorePatterns\": [\n    \"<rootDir>/tests/\"\n  ]\n}\n```", "```js\nPASS  tests/server.test.js\n  Server\n    GET /about\n      ✓ Should return a 200 with the total whispers in the platform (61 ms)\n    GET /api/v1/whisper\n      ✓ Should return an empty array when there's no data (19 ms)\n      ✓ Should return all the whispers (14 ms)\n    GET /api/v1/whisper/:id\n      ✓ Should return a 404 when the whisper doesn't exist (14 ms)\n      ✓ Should return a whisper details (12 ms)\n    POST /api/v1/whisper\n      ✓ Should return a 400 when the body is empty (27 ms)\n      ✓ Should return a 400 when the body is invalid (9 ms)\n      ✓ Should return a 201 when the whisper is created (17 ms)\n    PUT /api/v1/whisper/:id\n      ✓ Should return a 400 when the body is empty (9 ms)\n      ✓ Should return a 400 when the body is invalid (9 ms)\n      ✓ Should return a 404 when the whisper doesn't exist (11 ms)\n      ✓ Should return a 200 when the whisper is updated (18 ms)\n    DELETE /api/v1/whisper/:id\n      ✓ Should return a 404 when the whisper doesn't exist (10 ms)\n      ✓ Should return a 200 when the whisper is deleted (13 ms)\n-------------|---------|----------|---------|---------|-------------------\nFile         | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s\n-------------|---------|----------|---------|---------|-------------------\nAll files    |     100 |      100 |     100 |     100 |\ndatabase.js |     100 |      100 |     100 |     100 |\nserver.js   |     100 |      100 |     100 |     100 |\nstore.js    |     100 |      100 |     100 |     100 |\n-------------|---------|----------|---------|---------|-------------------\nTest Suites: 1 passed, 1 total\nTests:       14 passed, 14 total\nSnapshots:   0 total\nTime:        2.024 s, estimated 3 s\nRan all test suites.\n```"]