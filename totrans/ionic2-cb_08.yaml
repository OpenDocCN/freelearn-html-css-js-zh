- en: Chapter 8. Theming the App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following tasks related to app theme customization:'
  prefs: []
  type: TYPE_NORMAL
- en: Viewing and debugging themes for a specific platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing themes based on the platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Although Ionic has its own out-of-the-box default themes, you might want to
    even customize your app''s look and feel further. There are several methods, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Change style sheet within Sass file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting platform-specific type (iOS, Android, Windows) in JavaScript and applying
    custom classes or AngularJS conditions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Either of the above two methods should work, but it's highly recommended to
    apply customization in a Sass file before the app is built in order to achieve
    maximum rendering performance.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing and debugging themes for a specific platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the biggest challenges in developing an app is to ensure that it has
    the desired look and feel for each platform. Specifically, you want to write the
    code and theme once and have it just work. Another challenge is figuring out the
    workflow on a daily basis, from writing code and previewing it in the browser
    to deploying to a device for testing purposes. You want to minimize a lot of unnecessary
    steps. It's certainly difficult if you have to rebuild the app and test it independently
    for each mobile platform.
  prefs: []
  type: TYPE_NORMAL
- en: Ionic 2 CLI provides seamless integration to improve your workflow to ensure
    that you can *catch* all the issues for each platform ahead of time. You can quickly
    view the app on various platforms in the same browser window. This feature is
    powerful because now one can make a side-by-side comparison for each screen with
    specific interaction. If you want to debug JavaScript code, you employ the same
    web developer tool that you have been using in the browser. This capability will
    save you a lot of time instead of waiting to push the app to a physical device,
    which could take minutes if your app is getting larger.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, you will learn how to modify a theme quickly using Sass variables.
    Then, you will run the app and inspect different platforms for UI consistency.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is no need to test the theme on a physical device because Ionic can render
    iOS, Android, and Windows Phone in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new app using the `tutorial` template, as shown, and go to the folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In Ionic 1, you need to set up Sass dependencies because Ionic uses a number
    of external libraries for this. However, Ionic 2 has no such requirements because
    all the dependencies are added when you create the project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `/app/theme/app.variable.scss` file and replace the `$colors` variable
    with the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The default color codes can be commented out as shown in the preceding code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open `app.html` and add the `clear` attribute to the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `./src/pages/hello-ionic/hello-ionic.html` file and replace the contents
    with the given code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Test-run the app in the browser and you should be able to see a screen as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The `-l` (lima) command means render the app for all three platforms.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00389.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ionic 2 has made it very easy to develop and test themes for different platforms.
    Your typical flow is to modify the theme variable in `app.variables.scss` first.
    You should not modify any `.css` files directly. Also, Ionic 2 project now makes
    it safe so that you can't accidently edit the wrong core theme files because those
    core files are no longer in the app folder location.
  prefs: []
  type: TYPE_NORMAL
- en: 'To update the default color, you just have to modify the color code in `app.variables.scss`.
    You can even add more color names, such as `clear: white`, and Ionic 2 will automatically
    take care of the rest. That means the `clear` keyword is available as an attribute
    to any Ionic element that takes a color name. A few examples are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The Ionic CLI is a very useful tool for debugging your theme in different platforms.
    To get help on how to use the Ionic CLI, you can type the following command line
    in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This will list all the options available for you to choose from. Under the
    `serve` option, you should familiarize yourself with some of the important features,
    which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `--consolelogs&#124;-c` | Print app console logs to Ionic CLI |'
  prefs: []
  type: TYPE_TB
- en: '| `--serverlogs&#124;-s` | Print dev server logs to Ionic CLI |'
  prefs: []
  type: TYPE_TB
- en: '| `--browser&#124;-w` | Specifies the browser to use (Safari, Firefox, and
    Chrome) |'
  prefs: []
  type: TYPE_TB
- en: '| `--browseroption&#124;-o` | Specifies a path to open to (`/#/tab/dash`) |'
  prefs: []
  type: TYPE_TB
- en: '| `--lab&#124;-l` | Tests your apps on multiple screen sizes and platform types
    |'
  prefs: []
  type: TYPE_TB
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can get more color palettes by visiting Matheus Cruz Rocha's cloned repository
    at [https://github.com/innovieco/ionic-flat-colors](https://github.com/innovieco/ionic-flat-colors).
  prefs: []
  type: TYPE_NORMAL
- en: Customizing themes based on the platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each mobile platform vendor has its own design guideline. This section will
    go over an example of a typical workflow to develop, view, debug, and address
    the app theme differently for iOS, Android, and Windows Phone. In traditional
    development (of using either the native language or other hybrid app solutions),
    you have to keep separate repositories for each platform in order to customize
    the theme. This could be very inefficient in the long-run.
  prefs: []
  type: TYPE_NORMAL
- en: Ionic 2 has many built-in features to support theme changes based on the detected
    platform. It makes it very convenient by separating Sass variables for each platform.
    This will eliminate a lot of unnecessary customizations. As a developer, you'd
    rather focus on the app experience than spend time managing the platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'The example in this section covers two possible of customizations using Sass
    and JavaScript. The following screenshot shows an iOS, Android, and Windows app
    with a different title bar color and text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing themes based on the platform](img/image00390.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is no need to test themes on a physical device because Ionic can render
    all three platforms in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new app using the `blank` template and go into the project folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `./src/app/app.module.ts` file and replace the entire body with the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This example expands the use of Ionic Bootstrap, which will be discussed now.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open `./src/pages/home/home.ts` and replace the code with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `./src/pages/home/home.html` file and change the template to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is the only template for the app, but its UI will look different depending
    on the detected platform.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Replace `./src/pages/home/home.scss` with the following stylesheet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There is no need to change the global variables. Thus, you only modify the styles
    for one page. The purpose is to demonstrate the ability to customize for each
    platform.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Test-run the app in the browser using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ionic automatically created platform-specific parent classes and put them at
    the `<body>` tag. The iOS app will include the .`ios` class. The Android app will
    have `.md class`. So, for stylesheet customization, you can leverage those existing
    classes to change the look and feel of your app.
  prefs: []
  type: TYPE_NORMAL
- en: Ionic 2 documentation has a list of all platform modes and configuration properties
    at [http://ionicframework.com/docs/v2/theming/platform-specific-styles/](http://%20http://ionicframework.com/docs/v2/theming/platform-specific-styles/).
  prefs: []
  type: TYPE_NORMAL
- en: '| Platform | Mode | Details |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| iPhone/iPad/iPad | `ios` | The iOS style is used across all Apple products
    |'
  prefs: []
  type: TYPE_TB
- en: '| Android | `md` | *md* means **Material Design** as this is the default design
    for Android devices |'
  prefs: []
  type: TYPE_TB
- en: '| Windows Phone | `wp` | Viewing on any windows device inside Cordova or Electron
    uses the Windows styles |'
  prefs: []
  type: TYPE_TB
- en: '| Core | `md` | Material Design is the default for all others |'
  prefs: []
  type: TYPE_TB
- en: 'First, let''s take a look at the Ionic Bootstrap class from Ionic Angular.
    You declared this in `app.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This statement basically instructs the app to bootstrap with the `MyApp` object.
    The third parameter is where you can inject your customized configuration properties.
    There is a list of all `Config` properties at [http://ionicframework.com/docs/v2/api/config/Config/](http://%20http://ionicframework.com/docs/v2/api/config/Config/).
  prefs: []
  type: TYPE_NORMAL
- en: One main thing to point out here is `iconMode`. Icons are very different for
    each platform in Ionic 2\. The entire Ionicons set is now separated by the platform
    name. There are three platforms according to Ionic 2's documentation page, at
    [http://ionicframework.com/docs/v2/ionicons/](http://ionicframework.com/docs/v2/ionicons/).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can even search for the icon name using the **Search Ionicons**, buttons
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00391.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that you don''t need to worry about which icon to pick for which platform.
    Even though, in this example, the code forces you to choose iOS icon for all three
    platforms, you could just use the icon name and let Ionic 2 decide which icon
    to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00392.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'For example, when you state the icon name as `"add"`, Ionic 2 will use `"md-add"`
    if the user is using Android, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'There are several ways to theme your app based on the platform. First, you
    could add variables to detect the current platform as in the `HomePage` class,
    as illustrated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '`this.platform = platform` is what Ionic 2 provides. If you open up the browser
    console while running the app, you can inspect the `platform` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00393.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This `platform` object has a rich amount of information. This is similar to
    `ionic.platform` in Ionic 1\. However, it has been restructured significantly.
  prefs: []
  type: TYPE_NORMAL
- en: 'By making the platform variables available to the view, you can use it to hide
    or show a specific DOM using `ngIf`. It''s recommended to use `ngIf` instead of
    `ngShow` because `ngShow` may show and hide the element right away, creating a
    *flickering* effect. The following is the code in the template relating to using
    those platform variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, you could change the theme using platform classes directly. Consider
    the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This means that, whenever it's a Material Design mode (`.md` class), you will
    override the classes with your own styles. The preceding example shows an interesting
    CSS gradient, which works very nicely in mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Further, device information is available from the `Platform` class. You can
    even detect iPad devices at [http://ionicframework.com/docs/v2/api/platform/Platform/](http://ionicframework.com/docs/v2/api/platform/Platform/).
  prefs: []
  type: TYPE_NORMAL
