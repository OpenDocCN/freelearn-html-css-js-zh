["```js\n$('body')\n    .children()\n    .first()\n    .is('h1');\n// → true\n```", "```js\n_(['a', 'b', 'c'])\n    .at([1, 2])\n    .value();\n// → [ \"b\", \"c\" ]\n```", "```js\n_({a: 'b', c: 'd'})\n    .contains('b');\n// → true\n\n_('abcd')\n    .contains('b');\n// → true\n```", "```js\n_([3,2,1])\n    .sort()\n    .first();\n// → 1\n\n_.chain([3,2,1])\n    .sort()\n    .first()\n    .isNumber()\n    .value();\n// → true\n```", "```js\nvar collection = [\n    { name: 'Ellen', age: 20, enabled: true },\n    { name: 'Heidi', age: 24, enabled: false },\n    { name: 'Roy', age: 21, enabled: true },\n    { name: 'Garry', age: 23, enabled: false }\n];\n\n_(collection)\n    .filter('enabled')\n    .filter(function(item) {\n        return item.age >= 21;\n    })\n   .value();\n// → [ { name: \"Roy\", age: 21, enabled: true } ]\n```", "```js\nvar collection = [\n    { name: 'Janice', age: 38, gender: 'f' },\n    { name: 'Joey', age: 20, gender: 'm' },\n    { name: 'Lauren', gender: 'f' },\n    { name: 'Drew', gender: 'm' }\n];\n\n_(collection)\n    .where({ gender: 'f' })\n    .filter(_.flow(_.property('age'), _.isFinite))\n    .value();\n// → [ { name: \"Janice\", age: 38, gender: \"f\" } ]\n```", "```js\nvar collection = [\n    { first: 'Dewey', last: 'Mills' },\n    { first: 'Charlene', last: 'Larson' },\n    { first: 'Myra', last: 'Gray' },\n    { first: 'Tasha', last: 'Malone' }\n];\n\n_(collection)\n    .sortBy('first')\n    .dropWhile(function(item) {\n        return _.first(item.first) < 'F';\n    })\n    .value();\n// → \n// [\n//   { first: \"Myra\", last: \"Gray\" },\n//   { first: \"Tasha\", last: \"Malone\" }\n// ]\n```", "```js\nvar name = '  Donnie Woods   ',\n    emptyString = _.partial(_.isEqual, ' ');\n\n_(name)\n    .toArray()\n    .dropWhile(emptyString)\n    .dropRightWhile(emptyString)\n    .join('');\n// → \"Donnie Woods\"\n```", "```js\nvar collection = [\n    { name: 'Jeannie', grade: 'B+' },\n    { name: 'Jeffrey', grade: 'C' },\n    { name: 'Carrie', grade: 'A-' },\n    { name: 'James', grade: 'A' }\n];\n\n_(collection)\n    .sortBy('grade')\n    .takeWhile(function(item) {\n        return _.first(item.grade) === 'A';\n    })\n    .value();\n// → \n// [\n//   { name: \"James\", grade: \"A\" },\n//   { name: \"Carrie\", grade: \"A-\" }\n// ]\n```", "```js\nvar collection = _.sample(_.range(1, 21), 10),\n    total = 5,\n    min = 10;\n\n_(collection)\n    .sortBy()\n    .takeRightWhile(function(item, index, array) {\n        return item >= min &&\n            array.length - index <= total;\n    })\n    .value();\n// → [ 13, 14, 15, 17, 20 ]\n```", "```js\nvar object = {\n    first: 'Conrad',\n    last: 'Casey',\n    age: 37,\n    enabled: true\n};\n\n_(object)\n    .reject(_.isBoolean)\n    .reject(_.isString)\n    .first()\n    .toFixed(2);\n// → \"37.00\"\n```", "```js\nfunction User(name, disabled) {\n    this.name = name;\n    this.disabled = disabled;\n}\n\nUser.prototype.enabled = function() {\n    return !this.disabled;\n};\n\nvar collection = [\n        new User('Phil', true),\n        new User('Wilson', false),\n        new User('Kathey', true),\n        new User('Nina', false)\n    ],\n    enabled = _.flow(_.identity,\n        _.partialRight(_.result, 'enabled'));\n\n_(collection)\n    .reject('disabled')\n    .value();\n// →\n// [\n//   { name: \"Wilson\", disabled: false },\n//   { name: \"Nina\", disabled: false }\n// ]\n\n_(collection)\n    .reject(_.negate(enabled))\n    .value();\n// →\n// [\n//   { name: \"Wilson\", disabled: false },\n//   { name: \"Nina\", disabled: false }\n// ]\n```", "```js\nvar string = 'abc\\n';\n\n_(string)\n    .slice()\n    .initial()\n    .join('');\n// → \"abc\"\n```", "```js\nvar collection = [\n    { name: 'init', task: _.noop },\n    { name: 'sort', task: _.random },\n    { name: 'search', task: _.random }\n];\n\n_(collection)\n    .rest()\n    .invoke('task')\n    .value();\n// → [ 1, 1 ]\n```", "```js\nvar string = 'abc123',\n    array = [ 'a', 'b', 'c', 1, 2, 3 ];\n\n_(string)\n    .filter(_.isString)\n    .contains('c');\n// → true\n\n_(array)\n    .filter(_.isString)\n    .contains('c');\n// → true\n```", "```js\nvar string = 'Dana Porter',\n    array = [\n        { name: 'Luis', gender: 'm' },\n        { name: 'Rhonda', gender: 'f' },\n        { name: 'Kirk', gender: 'm' },\n        { name: 'Emily', gender: 'f' }\n    ];\n\n_(string)\n    .chain()\n    .filter(function(item) {\n        return item.toUpperCase() === 'A';\n    })\n    .size()\n    .isEqual(2)\n    .value();\n// → true\n\n!!(_(array)\n    .find(function(item) {\n        return _.first(item.name).toUpperCase() === 'R' &&\n            item.gender === 'f';\n    }));\n// → true\n```", "```js\nvar collection = [\n    1414728000000,\n    1383192000000,\n    1351656000000,\n    1320033600000\n];\n\n_(collection)\n    .map(function(item) {\n        return new Date(item);\n    })\n    .every(function(item) {\n        return item.getMonth() === 9 && item.getDate() === 31;\n     });\n// → true\n```", "```js\nvar collection = [\n    { name: 'Danielle', age: 34, skill: 'Backbone' },\n    { name: 'Sammy', age: 19, skill: 'Ember' },\n    { name: 'Donna', age: 41, skill: 'Angular' },\n    { name: 'George', age: 17, skill: 'Marionette' }\n];\n\n_(collection)\n    .reject({ skill: 'Ember' })\n    .reject({ skill: 'Angular' })\n    .some(function(item) {\n        return item.age >= 25;\n    });\n// → true\n```", "```js\nvar object = { first: 'Charlotte', last: 'Hall' },\n    array = _.range(10);\n\n_(object)\n    .omit('first')\n    .size();\n// → 1\n\n_(array)\n    .drop(5)\n    .size();\n// → 5\n```", "```js\nvar collection = [\n    { name: 'Pamela', gender: 'f' },\n    { name: 'Vanessa', gender: 'f' },\n    { name: 'Gina', gender: 'f' },\n    { name: 'Dennis', gender: 'm' }\n];\n\n_(collection)\n    .countBy('gender')\n    .pairs()\n    .sortBy(1)\n    .reverse()\n    .pluck(0)\n    .value();\n// → [ \"f\", \"m\" ]\n```", "```js\nvar collection = [\n    { name: 'Chad', skills: [ 'backbone', 'lodash' ] },\n    { name: 'Simon', skills: [ 'html', 'css', 'less' ] },\n    { name: 'Katie', skills: [ 'grunt', 'underscore' ] },\n    { name: 'Jennifer', skills: [ 'css', 'grunt', 'less' ] }\n];\n\n_(collection)\n    .pluck('skills')\n    .reduce(function(result, item) {\n        return _.size(item) > 2 &&\n            _.contains(item, 'grunt') &&\n            result + 1;\n    }, 0);\n// → 1\n```", "```js\nvar collection = [\n    { name: 'Rudolph', age: 24 },\n    { name: 'Charles', age: 43 },\n    { name: 'Rodney', age: 37 },\n    { name: 'Marie', age: 28 }\n];\n\n_(collection)\n    .map(function(item) {\n        var experience = 'seasoned veteran';\n        if (item.age < 30) {\n            experience = 'noob';\n        } else if (item.age < 40) {\n            experience = 'geek cred';\n        }\n        return _.extend({\n            experience: experience\n        }, item);\n    })\n    .groupBy('experience')\n    .map(function(item, key) {\n        return key +\n            ' (' + _.pluck(item, 'name').join(', ') + ')';\n    })\n    .value();\n// →\n// [\n//   \"noob (Rudolph, Marie)\",\n//   \"seasoned veteran (Charles)\",\n//   \"geek cred (Rodney)\"\n// ]\n```", "```js\nvar collection = _.sample(_.range(1, 101), 10);\n\n_(collection)\n    .union([ 25, 50, 75])\n    .sortBy()\n    .value();\n// → [ 1, 3, 21, 25, 27, 37, 40, 50, 57, 73, 75, 94 ]\n```", "```js\nfunction name(item) {\n    return item.first + ' ' + item.last;\n}\n\nvar collection = [\n    { first: 'Renee', last: 'Morris' },\n    { first: 'Casey', last: 'Wise' },\n    { first: 'Virginia', last: 'Grant' },\n    { first: 'Toni', last: 'Morris' }\n];\n\n_(collection)\n    .uniq('last')\n    .sortBy('last')\n    .value();\n// →\n// [\n//   { first: \"Virginia\", last: \"Grant\" },\n//   { first: \"Renee\", last: \"Morris\" },\n//   { first: \"Casey\", last: \"Wise\" }\n// ]\n\n_(collection)\n    .uniq(name)\n    .sortBy(name)\n    .value();\n// →\n// [\n//   { first: \"Casey\", last: \"Wise\" },\n//   { first: \"Renee\", last: \"Morris\" },\n//   { first: \"Toni\", last: \"Morris\" },\n//   { first: \"Virginia\", last: \"Grant\" }\n// ]\n\n_(collection)\n    .map(name)\n    .uniq()\n    .sortBy()\n    .value();\n// →\n// [\n//   \"Casey Wise\",\n//   \"Renee Morris\",\n//   \"Toni Morris\",\n//   \"Virginia Grant\"\n// ]\n```", "```js\nvar collection = [\n    { gender: 'f', dob: new Date(1984, 3, 8) },\n    { gender: 'm', dob: new Date(1983, 7, 16) },\n    { gender: 'f', dob: new Date(1987, 2, 4) },\n    { gender: 'm', dob: new Date(1988, 5, 2) }\n];\n\n_(collection)\n    .where({ gender: 'm' })\n    .pluck('dob')\n    .map(function(item) {\n        return item.toLocaleString();\n    })\n    .value();\n// → [ \"8/16/1983, 12:00:00 AM\", \"6/2/1988, 12:00:00 AM\" ]\n```", "```js\nvar collection = _.range(1, 11);\n\nreturn _(collection)\n    .without(5, _.first(collection), _.last(collection))\n    .reverse()\n    .value();\n// → [ 9, 8, 7, 6, 4, 3, 2 ]\n```", "```js\nvar collection = [\n    { name: 'Daisy', wins: 10 },\n    { name: 'Norman', wins: 12 },\n    { name: 'Kim', wins: 8 },\n    { name: 'Colin', wins: 4 }\n];\n\n_(collection)\n    .reject(function(item) {\n        return item.wins < 5\n    })\n    .min('wins');\n// → { name: \"Kim\", wins: 8 }\n```", "```js\nvar collection = [\n    { name: 'Kerry', balance: 500, credit: 344 },\n    { name: 'Franklin', balance: 0, credit: 554 },\n    { name: 'Lillie', balance: 1098, credit: 50 },\n    { name: 'Clyde', balance: 473, credit: -900 }\n];\n\n_(collection)\n    .filter('balance')\n    .filter('credit')\n    .max(function(item) {\n        return item.balance + item.credit;\n    });\n// → { name: \"Lillie\", balance: 1098, credit: 50 }\n```", "```js\nfunction rank(coll, name) {\n    return _(coll)\n        .sortBy('score')\n        .reverse()\n        .pluck('name')\n        .indexOf(name) + 1;\n}\n\nvar collection = [\n    { name: 'Ruby', score: 43 },\n    { name: 'Robert', score: 59 },\n    { name: 'Lindsey', score: 38 },\n    { name: 'Marty', score: 55 }\n];\n\nrank(collection, 'Ruby');\n// → 3\n\nrank(collection, 'Marty');\n// → 2\n```", "```js\nvar collection = _.range(1, 51),\n    odds = _.filter(_.range(1, 101), function(item) {\n        return item % 2;\n    });\n\n_(collection)\n    .difference(odds)\n    .takeRight(10)\n    .reverse()\n    .value();\n// → [ 32, 34, 36, 38, 40, 42, 44, 46, 48, 50 ]\n```", "```js\nvar collection = _.range(1, 26),\n    evens = _.reject(_.range(1, 51), function(item) {\n        return item % 2;\n    });\n\n_(collection)\n    .xor(evens)\n    .reverse()\n    .value();\n// → \n// [ 50, 48, 46, 44, 42, 40, 38, 36, 34, 32, 30, 28, 26,\n//   25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5, 3, 1 ]\n```", "```js\nvar collection = [\n        { name: 'Stuart', age: 41 },\n        { name: 'Leah', age: 26 },\n        { name: 'Priscilla', age: 37 },\n        { name: 'Perry', age: 31 }\n    ],\n    min,\n    max;\n\n_(collection)\n    .filter(function(item) {\n        return item.age >= 30;\n    })\n    .tap(function(coll) {\n        min = _.min(coll, 'age'),\n        max = _.max(coll, 'age')\n    })\n    .reject(function(item) {\n        return item.age === max.age;\n    })\n    .value();\n// min → { name: \"Perry\", age: 31 }\n// max → { name: \"Stuart\", age: 41 }\n// → \n// [\n//   { name: \"Priscilla\", age: 37 },\n//   { name: \"Perry\", age: 31 }\n// ]\n```", "```js\nvar collection = _.range(1, _.random(11)),\n    result;\n\nresult = _(collection)\n     .thru(function(coll) {\n         return _.size(coll) > 5 ? coll : [];\n     })\n     .reverse()\n     .value();\n\n_.isEmpty(result) ? 'No Results' : result.join(',');\n// → \"No Results\"\n```", "```js\nvar object = {\n    firstName: 'Jerald',\n    lastName: 'Wolfe',\n    age: 49\n};\n\n_(object)\n    .keys()\n    .filter(function(item) {\n        return (/name$/i).test(item);\n    })\n    .thru(function(items) {\n        return _.at(object, items);\n    })\n    .value();\n// → [ \"Jerald\", \"Wolfe\" ]\n```", "```js\nvar object = {\n    first: 'Connie',\n    last: 'Vargas',\n    dob: new Date(1984, 08, 11)\n};\n\n_(object)\n    .values()\n    .filter(_.isDate)\n    .map(function(item) {\n        return item.toLocaleString();\n    })\n    .value();\n// → [ \"9/11/1984, 12:00:00 AM\" ]\n```", "```js\nvar collection = [\n    { first: 'Tracey', last: 'Doyle', age: 40 },\n    { first: 'Toby', last: 'Wright', age: 49 },\n    { first: 'Leonard', last: 'Hunt', age: 32 },\n    { first: 'Brooke', last: 'Briggs', age: 32 }\n];\n\n_(collection)\n    .indexBy('last')\n    .pick(function(value) {\n        return value.age >= 35;\n    })\n    .transform(function(result, item, key) {\n        result[key] = _.omit(item, 'last');\n    })\n    .value();\n// → \n// {\n//   Doyle: { first: \"Tracey\", age: 40 },\n//   Wright: { first: \"Toby\", age: 49 }\n// }\n```", "```js\nfunction best(coll, prop, count) {\n    return _(coll)\n        .sortBy(prop)\n        .takeRight(count);\n}\n\nvar collection = [\n    { name: 'Mathew', score: 92 },\n    { name: 'Michele', score: 89 },\n    { name: 'Joe', score: 74 },\n    { name: 'Laurie', score: 83 }\n];\n\nvar bestScore = best(collection, 'score', 2);\n\nbestScore.value();\n// → \n// [\n//   { name: \"Michele\", score\": 89 },\n//   { name: \"Mathew\", score: 92 }\n// ]\n\nbestScore.reverse().value();\n// → \n// [\n//   { name: \"Michele\", score: 89 },\n//   { name: \"Mathew\", score: 92 }\n// ]\n\nbestScore.pluck('name').value();\n// → [ \"Michele\", \"Mathew\" ]\n```"]