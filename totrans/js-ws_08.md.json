["```js\n    <!-- index.html -->\n    <!DOCTYPE html>\n    <html>\n      <head>\n      </head>\n      <body>\n        <canvas id='canvas' style=\"border: 1px solid\"></canvas>\n        <script src='canvas.js'></script>\n      </body>\n    </html>\n    ```", "```js\n    // canvas.js\n    let canvas = document.getElementById('canvas');\n    ```", "```js\n    let context = canvas.getContext('2d');\n    ```", "```js\n    context.fillRect(10,10, 100, 100);\n    ```", "```js\n    // canvas.js\n    let canvas = document.getElementById('canvas');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    let context = canvas.getContext('2d');\n    context.fillRect(10,10, 100, 100);\n    ```", "```js\n    canvas.js\n    let canvas = document.getElementById('canvas');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    let context = canvas.getContext('2d');\n    context.fillStyle = 'yellow';\n    context.fillRect(10,10,200,200);\n    context.fillStyle = 'black';\n    context.strokeRect(230, 10, 200, 200);\n    context.setLineDash([10]);\n    context.strokeRect(450, 10, 200, 200);\n    context.setLineDash([0]);\n    context.strokeStyle = 'red';\n    context.strokeRect(10, 230, 200, 200);\n    context.fillRect(450, 230, 200, 200);\n    context.clearRect(500, 280, 100, 100);\n    ```", "```js\ncanvas-1.js\nlet canvas = document.getElementById('canvas');\nconst width = window.innerWidth;\nconst height = window.innerHeight;\ncanvas.width = width\ncanvas.height = height\nlet context = canvas.getContext('2d');\ncontext.beginPath();\ncontext.moveTo(50, 50);\ncontext.lineTo(width - 50, 50);\ncontext.lineTo(width / 2, height - 50);\ncontext.closePath();\ncontext.stroke();\n```", "```js\n    // create the audio context\n    let context = new AudioContext();\n    // create a gain node\n    let gain = context.createGain(); \n    // connect the gain node to the context destination\n    gain.connect(context.destination);\n    // create an oscillator node\n    let osci = context.createOscillator(); \n    ```", "```js\n    // set the oscillation type\n    osci.type = 'sawtooth';\n    // set the oscillation frequency\n    osci.frequency.value = 100;\n    ```", "```js\n    // connect the oscillator node to the gain node\n    osci.connect(gain);\n    // start the oscillation node playing\n    osci.start(); \n    ```", "```js\nlet oscillator = audioContect.createOscillator(); // create the oscillator\nlet analyser = audioContect.createAnalyser(); // create the analyser node\noscillator.connect(analyser); // connect the oscillator and the analyser\noscillator.start(); // start the oscillator playing\nlet waveform = new Float32Array(analyser.frequencyBinCount); \n// create a Float32Array which will hold the waveform data in the next step\nanalyser.getFloatTimeDomainData(waveform); // get the waveform data for the  sounds at this precise moment.\n```", "```js\n    // Sets key 'dog' with value 'woof'\n    sessionStorage.setItem('dog', 'woof');\n    ```", "```js\n    sessionStorge.getItem('dog');\n    // gets the value of key 'dog'\n    ```", "```js\n    sessionStorage.removeItem('dog');\n    // removes the key 'dog' and its value\n    ```", "```js\n    sessionStorage.clear();\n    // clears all sessionStorage for the current origin\n    ```", "```js\n    sessionStorage.key(0); \n    // returns the key of item at index 0 (if any)\n    ```", "```js\nsessionStorage.planet = 'Mars'; \n// sets an item with the key 'planet'\nsessionStorage.planet;\n// returns the string 'Mars'\n```", "```js\nlet obj = {\n  name: 'Japan',\n  continent: 'Asia'\n};\nsessionStorage.setItem('country', JSON.stringify(obj));\n```", "```js\nJSON.parse(sessionStorage.getItem('country'));\n// Outputs the country object 'obj' defined above.\n```", "```js\n    <!-- index.html -->\n    <!DOCTYPE html>\n    <html>\n      <head>\n      </head>\n      <body>\n        <input type=\"text\" id='first-name' placeholder='First name'>\n        <input type=\"text\" id='last-name' placeholder='Last name'>\n        <p style='display: none;' id='warning'>Your browser doesn't support local storage</p>\n        <script src='storage.js'></script>\n      </body>\n    </html>\n    ```", "```js\n    // storage.js\n    if (!window.localStorage) {\n      // if localStorage is not supported then display the warning and return out to stop the rest of the code from being run.\n      document.getElementById('warning').style.display = 'block';\n    } else {\n    ```", "```js\n      let firstName = localStorage.getItem('firstName');\n      let lastName = localStorage.getItem('lastName');\n    ```", "```js\n      let inputFName = document.getElementById('first-name');\n      let inputLName = document.getElementById('last-name');\n      if (firstName) {\n        inputFName.value = firstName;\n      }\n      if (lastName) {\n        inputLName.value = lastName;\n      }\n    ```", "```js\n      inputFName.addEventListener('input', event => {\n        localStorage.setItem('firstName', event.target.value);\n      });\n      inputLName.addEventListener('input', event => {\n        localStorage.setItem('lastName', event.target.value);\n      });\n    }\n    ```", "```js\n    let request = window.indexedDB.open('animals', 1);\n    ```", "```js\n    request.onupgradeneeded = event => { // handle the upgradeneeded event\n      let db = event.target.result;\n      db.createObjectStore('mammals', {\n        keyPath: 'species'\n      });\n    };\n    ```", "```js\n    request.onsuccess = event => {\n      let db = event.target.result;\n      db.onerror = error => {\n        console.log(error);\n      }\n    ```", "```js\n      let transaction= db.transaction('mammals', 'readwrite');\n    ```", "```js\n      let store = transaction.objectStore('mammals');\n      store.put({\n        species: \"Canis lupus\",\n        commonName: \"Wolf\",\n        traits: [\"Furry\", \"Likes to howl at moon\"]\n      });\n      store.put({\n        species: \"Nycticebuscoucang\",\n        commonName: \"Slow Loris\",\n        traits: [\"Furry\", \"Every day is Sunday\"]\n      });\n    ```", "```js\n      transaction.oncomplete = () => {\n        db.close();\n      };\n    };\n    ```", "```js\n    indexedDB-v2.js\n    1 let request = window.indexedDB.open('animals', 1);\n    2 \n    3 request.onsuccess = event => {\n    4   let db = event.target.result;\n    5   db.onerror = error => {\n    6     // handle an error\n    7     console.log(error); \n    8   }\n    9   let trx = db.transaction('mammals', 'readonly');\n    10   let store = trx.objectStore('mammals');\n    11   let animalReq = store.get('Nycticebuscoucang');\n    12   animalReq.onsuccess = (event) => {\n    13     console.log(event.target.result);\n    14   };\n    The full code is available at: https://packt.live/2q8v5bX\n    ```", "```js\nindexedDB-v3.js\n2 let request = window.indexedDB.open('animals', 2);\n3 \n4 // handle the upgradeneeded event\n5 request.onupgradeneeded = event => {\n6   let db = event.target.result;\n7   // Our new cephalopods store\n8   db.createObjectStore('cephalopods', {\n9     keyPath: 'species'\n10   });\n11 };\n12 \n13 request.onsuccess = event => {\n14   let db = event.target.result;\n15   db.onerror = error => {\n16     console.log(error) \nThe full code is available at: https://packt.live/2pdYCAr\n```", "```js\n    let request = window.indexedDB.open('animals', 3); // version 3 of the DB\n    request.onupgradeneeded = event => {\n    ```", "```js\n      let store = event.target.transaction.objectStore('mammals');\n      store.createIndex('traits', 'traits', {multiEntry: true, unique: false});\n    };\n    ```", "```js\n    let request = window.indexedDB.open('animals', 3);\n    request.onsuccess = event => {\n    ```", "```js\n      let db = event.target.result;\n      let trx = db.transaction('mammals', 'readonly');\n      let store = trx.objectStore('mammals');\n      let index = store.index('traits')\n    ```", "```js\n      let animalReq = index.getAll('Furry');\n      animalReq.onsuccess = (event) => {\n        console.log(event.target.result);\n      };\n    ```", "```js\n      animalReq.onerror = (error) => {\n        console.log(error); // handle any error\n      };\n    };\n    ```", "```js\nlet request = window.indexedDB.open('animals', 3);\nrequest.onsuccess = event => {\n  let db = event.target.result;\n  let trx = db.transaction('mammals', 'readonly');\n  let store = trx.objectStore('mammals'); \n  let cursorReq = store.openCursor();\n  cursorReq.onsuccess = e => {\n    let cursor = e.target.result;\n    if (cursor) {\n      console.log(cursor.value); // do something with this entry.\n      cursor.continue();\n    } else {\n      console.log('end of entries');\n    };\n  };\n};\n```", "```js\n    const http = new XMLHttpRequest();\n    http.open('GET', 'https://jsonplaceholder.typicode.com/todos');\n    http.send();\n    http.onload = event => {\n      let todos = JSON.parse(event.target.responseText);\n    ```", "```js\n    {\n      userId: 1,\n      id: 1,\n      completed: false,\n      title: \"delectusautautem\"\n    }\n    ```", "```js\n      let dbRequest = window.indexedDB.open('tasks', 1);\n      dbRequest.onupgradeneeded = event => {\n        // handle the upgradeneeded event\n        let db = event.target.result;\n        db.createObjectStore('todos', {\n          keyPath: 'id'\n        });\n      };\n    ```", "```js\n     dbRequest.onsuccess = event => {\n        let db = event.target.result;\n        let trx = db.transaction('todos', 'readwrite');\n        let store = trx.objectStore('todos');\n        todos.forEach(item => {\n          store.put(item);\n        });\n        trx.oncomplete = () => {\n          console.log('close');\n          db.close();\n        };\n      };\n    };\n    ```", "```js\nexercise-8_06_1.js\n1 let dbRequest = window.indexedDB.open('tasks', 1);\n2 let outstandingTodos = [];\n3 dbRequest.onsuccess = event => {\n4   let db = event.target.result;\n5   let trx = db.transaction('todos', 'readonly');\n6   let store = trx.objectStore('todos');\n7   let cursorReq = store.openCursor();\n8   cursorReq.onsuccess = e => {\n9     let cursor = e.target.result;\n10     if (cursor) {\n11       console.log(cursor.value)\n12       if (!cursor.value.completed) outstandingTodos.push(cursor.value);\nThe full code is available at: https://packt.live/2qRT6Ek\n```", "```js\nlet navTiming = performance.getEntriesByType(\"navigation\")[0]; // this returns an array, but we're only interested in one object.\n```", "```js\nlet dnsLookupTime = navTiming.domainLookupEnd - navTiming.domainLookupStart;\n```", "```js\nlet tcpConnectTime = navTiming.connectEnd - navTiming.connectStart\n```", "```js\nnavTiming.domComplete;\n```", "```js\nfunction complicatedFunction() {\n  let n = 0;\n  for (let i = 0; i< 1e9;) {\n    n = n + i++;\n  }\n  return n;\n};\n```", "```js\nfunctioncomplicatedFunction() {\n  let n = 0;\n  performance.mark('compStart');\n  for (let i = 0; i< 1e9;) {\n    n = n + i++;\n  }; \n  performance.mark('compEnd');\n  console.log(n);\n  performance.measure('compMeasure', 'compStart', 'compEnd');\n  console.log(performance.getEntriesByName('compMeasure')[0].duration);\n};\n```", "```js\n    function complicatedForLoop() {\n      let n = 0;\n    ```", "```js\n      performance.mark('forLoopStart');\n    ```", "```js\n      for (let i = 0; i< 1e9;) {\n        n = n + i++;\n      }\n      performance.mark('forLoopEnd');\n      console.log(n);\n      performance.measure('forLoopMeasure', 'forLoopStart', 'forLoopEnd');\n      console.log(`for loop: ${performance.getEntriesByName('forLoopMeasure')[0].duration}`);\n    };\n    ```", "```js\n    function complicatedWhileLoop() {\n      let n = 0;\n      let i = 0;\n      performance.mark('whileLoopStart');\n      while(i<1e9) {\n        n = n + i++;\n      }\n      performance.mark('whileLoopEnd');\n      console.log(n);\n      performance.measure('whileLoopMeasure', 'whileLoopStart', 'whileLoopEnd');\n      console.log(`while loop: ${performance.getEntriesByName('whileLoopMeasure')[0].duration}`)\n    }\n    ```", "```js\n    complicatedForLoop();\n    complicatedWhileLoop();\n    ```", "```js\nlet socket = new WebSocket('wss://echo.websocket.org');\n```", "```js\nsocket.onmessage = event => console.log(event);\n```", "```js\nsocket.send(\"Hello websocket server\");\n```", "```js\n    <!-- index.html -->\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <script src='scripts.js'></script>\n      </head>\n      <body>\n    ```", "```js\n        <h1>The Echo Chamber</h1>\n    ```", "```js\n        <h4 id='socket-status'>Socket is closed</h4>\n    ```", "```js\n        <h6>Group Chat</h6>\n    ```", "```js\n        <ul id='group-list'></ul>\n    ```", "```js\n        <input type=\"text\" id='group-input'>\n    ```", "```js\n        <h6>Private Chat</h6>\n    ```", "```js\n        <ul id='dm-list'></ul>\n    ```", "```js\n        <input type=\"text\" id='dm-input'>\n    ```", "```js\n      </body>\n    </html>\n    ```", "```js\n    // scripts.js\n    // wait for page load\n    document.addEventListener('DOMContentLoaded', () => { \n    ```", "```js\n      let socket = new WebSocket(\"wss://echo.websocket.org\"); // create new  socket connection\n    ```", "```js\n      let dmInput = document.getElementById('dm-id'); // get the DM text input\n      let groupInput = document.getElementById('group-input'); // get the group text input\n      let dmList = document.getElementById('dm-list'); // get the dm messages list\n      let groupList = document.getElementById('group-list'); // get the group  messages list\n    ```", "```js\n      socket.onopen = event => {\n        document.getElementById('socket-status').innerText = \"Socket is open\"; \n        // set the status on open\n      };\n    ```", "```js\n      socket.onclose = event => {\n        document.getElementById('socket-status').innerText = \"Socket is closed\";\n        // set the status on close\n      };\n    ```", "```js\n      // prepare to receive socket messages\n      socket.onmessage = event => { \n    ```", "```js\n        // parse the data\n        let messageData = JSON.parse(event.data); \n    ```", "```js\n        // create a new HTML <li> element\n        let newMessage = document.createElement('li'); \n    ```", "```js\n        // set the <li> element's innerText to the message text\n        newMessage.innerText = messageData.message; \n    ```", "```js\n        // if it's a group message\n        if (messageData.action === 'group') { \n          // append to the group list\n          groupList.append(newMessage); \n    ```", "```js\n        } else {\n          // append to the dm list\n          dmList.append(newMessage); \n        };\n      };\n    ```", "```js\n      // For each input element\n      Array.from(document.getElementsByTagName('input')).forEach(input => { \n    ```", "```js\n        // add a keydown event listener\n        input.addEventListener('keydown', event => { \n    ```", "```js\n          // if it's keyCode 13 (the enter key)\n          if (event.keyCode === 13) {\n            // declare the message data object\n            let messageData = {\n              message: event.target.value,\n            };\n    ```", "```js\n            // check the message type by looking at the input element's ID\n            if (event.target.id === 'group-input') {\n              messageData.action = 'group';\n    ```", "```js\n            } else {\n              messageData.action = 'dm';\n            };\n    ```", "```js\n            // stringify the message and send it through the socket connection\n            socket.send(JSON.stringify(messageData));\n    ```", "```js\n            // clear the input element\n            event.target.value = ''; \n          };\n        });\n      });\n    });\n    ```"]