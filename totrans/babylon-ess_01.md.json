["```js\n        npm install gulp\n    ```", "```js\n        npm install gulp-typescript\n    ```", "```js\n        var gulp = require(\"gulp\"); \n        var ts = require(\"gulp-typescript\");\n    ```", "```js\n        gulp.task('default', function() { // Default task \n          var result = gulp.src([ // Sources \n              \"myScript1.ts\", \n              \"myScript2.ts\", \n              // Other files here \n            ]) \n            .pipe(ts({ // Trans-compile \n              out: \"outputFile.js\" // Merge into one output file \n            })); \n          return result.js.pipe(gulp.dest(\"./\")); // output file desti        nation\n        });\n    ```", "```js\n        gulp\n    ```", "```js\nvar myVar = 1.0;// or \nvar myVar = \"hello !\"; \n\n```", "```js\nvar myVar = 1.0; // Which is a number \n// or \nvar myVar = \"hello !\"; // Which is a string \n\n```", "```js\n    var myVar: type = value;\n\n```", "```js\nvar myVar: number = 1.0; \n// or \nvar myVar: string = \"hello !\"; \n// etc. \n\n```", "```js\nvar myVar = 1.0; // Now, myVar is a number \n// and \nmyVar = \"hello !\"; // Forbidden, \"hello\" is a string and not a number \n\n```", "```js\nvar myVar: any = 1.0; // Is a number but can be anything else \nmyVar = \"Hello !\"; // Allowed, myVar's type is \"any\" \n\n```", "```js\nenum FileAccess {Read, Write}; \n\n```", "```js\nvar FileAccess; \n(function (FileAccess) { \n    FileAccess[FileAccess[\"Read\"] = 0] = \"Read\"; \n    FileAccess[FileAccess[\"Writer\"] = 1] = \"Writer\"; \n})(FileAccess || (FileAccess = {})); \n\n```", "```js\nvar myVar: FileAccess = FileAccess.Read; // Equivalent to 0 \n\n```", "```js\n// In both languages \nvar myArray = []; \n// or \nvar myArray = new Array(); \n\n```", "```js\nvar myArray = new Array<number>(); \n\n```", "```js\nvar myArray = new Array<any>(); \nmyArray.push(\"Hello !\");   \nmyArray.push(\"1\"); \nmyArray.splice(0, 1); \nconsole.log(myArray); // \"[1]\" \n\n```", "```js\nvar myArray = new Array<any>(); // Creates a new instance \n\n```", "```js\nclass Writer { \n  constructor() { \n    // initialize some things here \n  } \n} \n\n```", "```js\nvar Writer = (function () { \n    function Writer() { \n    } \n    return Writer; \n})(); \n\n```", "```js\nvar myInstance = new Writer(); \n\n```", "```js\nmodule MY_MODULE { \n  class Writer { \n    ... \n  } \n} \n\n```", "```js\nvar writer = new MY_MODULE.Writer(...); \n\n```", "```js\nfunction Writer() { \n  this.myPublicMember = 0.0; // A public member \n  this._myPrivateMember = 1.0; // A member used as private \n} \n\n```", "```js\n// declare class \nclass Writer { \n  // Union types. Can be a \"string\" or \n// an array of strings \"Array<string>\" \n  public message: string|string[]; \n  private _privateMessage: string = \"private message\"; \n  protected _protectedMessage: string; \n\n  // Constructor. Called by the \"new\" keyword \n  constructor(message: string|string[]) { \n    this.message = message; \n    this._protectedMessage = \"Protected message !\"; // Allowed \n} \n\n// A public function accessible from everywhere. \n// Returns nothing. Then, its return type is \"void\". \npublic write(): void { \n  console.log(this.message); // Allowed \n  console.log(this._privateMessage); // Allowed \n  console.log(this._protectedMessage); // Allowed \n} \n} \n\nvar writer = new Writer(\"My Public Message !\"); \nconsole.log(writer.message); // Allowed \nconsole.log(writer._privateMessage); // Not allowed \nconsole.log(writer._protectedMessage); // Not allowed \n\n```", "```js\n// The base class is \"Writer\" \nclass BetterWriter extends Writer { \n  constructor(message: string|string[]) { \n    // Call the base class' constructor \n    super(message); \n} \n\n// We can override the \"write\" function \npublic write(): void { \n  if (typeof this.message === \"string\") { \n    // Call the function \"write\" of the base class \n    // which is the \"Writer\" class \n    super.write(); \n  } \n  else { \n    for (var i=0; i < this.message.length; i++) { \n      console.log(this.message[i]); // Allowed \n      console.log(this._privateMessage); // Not allowed \n      console.log(this._protectedMessage); // Allowed \n    } \n  } \n} \n} \n\n```", "```js\ninterface IWriter { \n  // The class \"Writer\" must have the \"message\" member \n  message: string|string[]; \n  // The class \"Writer\" must provide the \"resetMessages\" function. \n  resetMessages(): void; \n} \n\nclass Writer implements IWriter { \n  public message: string|string[]; \n... \n  constructor(...) { \n    ... \n} \n... \n// All functions declared in the interface are public. \npublic resetMessages(): void { \n  this.message = this._privateMessage = this._protectedMessage = \"\"; \n} \n} \n\n```", "```js\n    gulp watch\n\n```"]