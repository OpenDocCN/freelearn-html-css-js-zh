- en: Chapter 1. Installation and Basic Configuration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 安装和基本配置
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Quick running Liferay on a Tomcat bundle
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Tomcat捆绑包上快速运行Liferay
- en: The Liferay setup wizard and first login
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Liferay设置向导和首次登录
- en: Setting up the developer's environment
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置开发者环境
- en: Creating a custom portlet
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义portlet
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Liferay is the market's leading provider of open source portal solutions. It
    provides a solid platform to serve our site to all clients. It is difficult to
    say what Liferay is. On the one hand, Liferay is a great content-management system,
    but on the other hand, it provides many tools for collaboration and communication
    between users. It can also be a social platform with many functionalities, such
    as wall, message board, chat, and many others. Furthermore, it is a portlet container
    that is JSR-168 and JSR-286 compliant. **Java Specification Requests** (**JSRs**)
    describes final specifications for the Java platform. A portlet is a small web
    application that produces fragments of HTML code that are aggregated into a portal.
    JSR-168 and JSR-286 specifications standardize how portlets interact with portlet
    containers. These specifications also describe a standard application programming
    interface for Java portlet development. In other words, Liferay is only responsible
    for aggregating the set of portlets that are to appear on any particular page.
    This approach gives users a great tool to organize and customize portlets in order
    to build whole portals, social platforms, or intranets. Within Liferay, a portal
    is composed of a number of portlets, which are self-contained interactive elements
    that are written to a particular standard. A number of publications describe Liferay's
    advantages. In this book, we will try to delve deeper into Liferay's architecture
    and its functionalities.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Liferay是市场上领先的开源门户解决方案提供商。它提供了一个稳固的平台来服务于所有客户。很难说Liferay是什么。一方面，Liferay是一个优秀的内容管理系统，另一方面，它为用户之间的协作和通信提供了许多工具。它也可以是一个具有许多功能的社会平台，如墙、论坛、聊天等。此外，它还是一个符合JSR-168和JSR-286规范的portlet容器。**Java规范请求**（**JSRs**）描述了Java平台的最终规范。portlet是一个小的Web应用程序，它生成HTML代码片段，这些片段被聚合到门户中。JSR-168和JSR-286规范标准化了portlet与portlet容器之间的交互方式。这些规范还描述了Java
    portlet开发的标准化应用程序编程接口。换句话说，Liferay只负责聚合在任何特定页面上要显示的portlet集合。这种方法为用户提供了一个强大的工具来组织和定制portlet，以构建整个门户、社交平台或内联网。在Liferay中，一个门户由多个portlet组成，这些是按照特定标准编写的自包含的交互元素。许多出版物描述了Liferay的优势。在这本书中，我们将尝试深入了解Liferay的架构和其功能。
- en: The primary purpose of this chapter is to give you an insight about Liferay's
    installation and management with basic configuration. We realize that there are
    many ways to download, compile, install, and run Liferay Portal. Our main purpose
    is to provide some clear and basic information about the starting package on which
    we will rely and work. This chapter explains the main processes that are performed
    on every compiling action or on every startup action.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要目的是让您了解Liferay的安装和管理，包括基本配置。我们意识到有许多方法可以下载、编译、安装和运行Liferay Portal。我们的主要目的是提供一些清晰和基本的信息，关于我们将依赖和工作的起始包。本章解释了在每次编译操作或每次启动操作上执行的主要过程。
- en: 'Liferay Portal is distributed in two different editions:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Liferay Portal以两种不同的版本发行：
- en: '**Liferay Portal Community Edition (CE)**: This is a free and open source version
    of Liferay'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Liferay Portal社区版 (CE)**: 这是一个免费的开放源代码版本的Liferay'
- en: '**Liferay Portal Enterprise Edition (EE)**: This is a commercial offering that
    has Liferay engineers, support, and services'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Liferay Portal企业版 (EE)**: 这是一个包含Liferay工程师、支持和服务的商业产品'
- en: This book is based on the Liferay Portal Community Edition (CE) version with
    the newest release, which is 6.2.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本书基于最新的Liferay Portal社区版 (CE) 版本，版本号为6.2。
- en: 'To start the journey with Liferay, there are a few starting points that contain
    a lot of useful information, which are as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用Liferay的旅程，有几个起点包含大量有用的信息，如下所示：
- en: '| URL | Description |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| URL | 描述 |'
- en: '| --- | --- |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [http://www.liferay.com/](http://www.liferay.com/) | Official Liferay site
    |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| [http://www.liferay.com/](http://www.liferay.com/) | 官方Liferay网站 |'
- en: '| [http://www.liferay.com/downloads/liferay-portal/available-releases](http://www.liferay.com/downloads/liferay-portal/available-releases)
    | Place with available releases |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| [http://www.liferay.com/downloads/liferay-portal/available-releases](http://www.liferay.com/downloads/liferay-portal/available-releases)
    | 可用版本放置处 |'
- en: '| [http://www.liferay.com/documentation/liferay-portal/6.2/user-guide](http://www.liferay.com/documentation/liferay-portal/6.2/user-guide)
    and [https://dev.liferay.com/](https://dev.liferay.com/) | User guides and documentation
    |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| [http://www.liferay.com/documentation/liferay-portal/6.2/user-guide](http://www.liferay.com/documentation/liferay-portal/6.2/user-guide)
    和 [https://dev.liferay.com/](https://dev.liferay.com/) | 用户指南和文档 |'
- en: '| [http://svn.liferay.com/repos/public/portal](http://svn.liferay.com/repos/public/portal)
    | Old-fashion repository of Liferay code.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '| [http://svn.liferay.com/repos/public/portal](http://svn.liferay.com/repos/public/portal)
    | Liferay代码的旧式仓库。'
- en: '**Login**: Enter guest in this field'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**登录**：在此字段输入guest'
- en: '**Password**: This field is to be left empty'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密码**：此字段应留空'
- en: '|'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| [https://github.com/liferay/liferay-portal/tree/6.2.x](https://github.com/liferay/liferay-portal/tree/6.2.x)
    | [Recommended] GitHub repository |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| [https://github.com/liferay/liferay-portal/tree/6.2.x](https://github.com/liferay/liferay-portal/tree/6.2.x)
    | [推荐] GitHub仓库 |'
- en: Tip
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Liferay introduced 7.0 version, which will be released on September 2015\. Do
    not check out Liferay sources from the trunk. There are many changes between 6.2
    and the trunk version. In the 7.0 version, Liferay will provide OSGi integration
    and many new features. These new features help users and developers achieve a
    whole bunch of out-of-the-box functionalities (for instance, Elasticsearch as
    a search server based on the Lucene framework).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Liferay推出了7.0版本，该版本将于2015年9月发布。不要从主干分支检出Liferay源代码。6.2版本和主干版本之间有很多变化。在7.0版本中，Liferay将提供OSGi集成和许多新功能。这些新功能帮助用户和开发者实现一系列开箱即用的功能（例如，基于Lucene框架的Elasticsearch作为搜索服务器）。
- en: Quick running Liferay on a Tomcat bundle
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速在Tomcat捆绑包上运行Liferay
- en: The simplest way to run Liferay is to download a specific bundle from the Liferay
    official site. A Liferay bundle is just a compressed archive that contains all
    that is needed to host the Liferay Portal. A bundle consists of a Java-based application
    server and the deployed Liferay Portal core application. Liferay provides these
    bundle runtimes with different application servers (that is, Tomcat, JBoss, Geronimo,
    and so on) so that you can use any one based on your choice. This method is recommended
    for people who just want to run Liferay Portal, look at its functionalities, and
    configure their site using the GUI. In this recipe, you will learn the art of
    setting up Liferay on Tomcat and the MySQL database engine.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 运行Liferay最简单的方法是从Liferay官方网站下载一个特定的捆绑包。Liferay捆绑包只是一个包含托管Liferay Portal所需所有内容的压缩归档文件。捆绑包由一个基于Java的应用服务器和部署的Liferay
    Portal核心应用程序组成。Liferay提供了不同应用程序服务器（即Tomcat、JBoss、Geronimo等）的捆绑运行时，以便您可以根据自己的选择使用任何一个。此方法推荐给只想运行Liferay
    Portal、查看其功能并使用GUI配置网站的人。在本菜谱中，您将学习在Tomcat和MySQL数据库引擎上设置Liferay的技巧。
- en: Getting ready
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'First, make sure that JRE or JDK is properly installed. Type the following
    command line:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，确保已正确安装JRE或JDK。输入以下命令行：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The result should be similar to this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 结果应该类似于以下内容：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Also, check out the Java SDK version. Liferay recommends Java 7 or later.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 还要检查Java SDK版本。Liferay推荐Java 7或更高版本。
- en: 'Moreover, determine whether the MySQL server installation is done:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，确定MySQL服务器安装是否完成：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As a result, the actual installed version should be displayed. Here is an example:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，实际安装的版本应显示出来。以下是一个示例：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Also, check out the MySQL version. We recommend 5.5 version or later.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 还要检查MySQL版本。我们推荐5.5版本或更高版本。
- en: How to do it...
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In order to run Liferay on a Tomcat bundle, follow these steps:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Tomcat捆绑包上运行Liferay，请按照以下步骤操作：
- en: 'Create a database with the name `lportal`:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`lportal`的数据库：
- en: '[PRE4]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Make sure that the MySQL user has permissions to create tables.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保MySQL用户有创建表的权限。
- en: Download the correct Liferay version on the Tomcat bundle from [http://www.liferay.com/downloads/liferay-portal/available-releases](http://www.liferay.com/downloads/liferay-portal/available-releases).
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://www.liferay.com/downloads/liferay-portal/available-releases](http://www.liferay.com/downloads/liferay-portal/available-releases)下载适用于Tomcat捆绑包的正确Liferay版本。
- en: Unzip the downloaded archive.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压下载的归档文件。
- en: Go to the extracted folder `liferay-portal-6.2-ce-ga2`. This path will be called
    `${liferay.home}` folder.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入提取的文件夹`liferay-portal-6.2-ce-ga2`。此路径将被称作`${liferay.home}`文件夹。
- en: Go to the `${liferay.home}` folder and create a file called `portal-ext.properties`.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往`${liferay.home}`文件夹，创建一个名为`portal-ext.properties`的文件。
- en: 'Edit `portal-ext.properties` and set the database properties:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`portal-ext.properties`并设置数据库属性：
- en: '[PRE5]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Find the Tomcat folder and go to the `tomcat-7.0.42/bin/` location.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到Tomcat文件夹并转到`tomcat-7.0.42/bin/`位置。
- en: Run the `./startup.sh` script (`startup.bat` for Windows OS) and look into the
    `tomcat-7.0.42/logs/catalina.out` log.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`./startup.sh`脚本（Windows操作系统为`startup.bat`）并查看`tomcat-7.0.42/logs/catalina.out`日志。
- en: In a browser, type `http://localhost:8080` location. By default, Tomcat listens
    on port 8080\. It should render the Liferay setup wizard by default. This wizard
    will ask for basic information, such as, portal name, default language, and administrator
    user details.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中，输入`http://localhost:8080`位置。默认情况下，Tomcat监听8080端口。它应该默认渲染Liferay设置向导。这个向导将要求提供基本信息，例如，门户名称、默认语言和管理员用户详情。
- en: How it works...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Running the Liferay Portal from a prepared bundle is quite an easy task to accomplish.
    However, it is worth knowing what exactly happens when Tomcat is being started.
    Take a brief look at the `catalina.out` log and try to examine it line by line.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 从准备好的bundle中运行Liferay Portal是一项相当容易完成的任务。然而，了解当Tomcat启动时到底发生了什么是有价值的。简要查看`catalina.out`日志并尝试逐行检查它。
- en: Loading the configuration descriptor
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加载配置描述符
- en: 'The first thing is to deploy `ROOT.xml`. In our `catalina.out` file, there
    is a line present, which is shown as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 第一件事是部署`ROOT.xml`。在我们的`catalina.out`文件中，有一行显示如下：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It means that the configuration file turns on the `crossContext` attribute
    in Tomcat 7\. This setting is required because Liferay is a portlet container.
    Hence, it is an application that should have access to other applications called
    portlets. The Apache Tomcat documentation says:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着配置文件在Tomcat 7中打开了`crossContext`属性。这个设置是必需的，因为Liferay是一个portlet容器。因此，它是一个应该能够访问其他称为portlets的应用程序的应用程序。Apache
    Tomcat文档说：
- en: '*"Set to true if you want calls within this application to ServletContext.getContext()
    to successfully return a request dispatcher for other web applications running
    on this virtual host."*'
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"设置为true，如果在这个应用程序内部调用ServletContext.getContext()需要成功返回一个请求分发器，以便访问在这个虚拟主机上运行的其他Web应用程序。"*'
- en: Loading system properties and portal properties
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加载系统属性和门户属性
- en: 'The next few lines of the logfile show portal properties and system properties
    that are loaded from specific locations:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 日志文件中的下一行显示了从特定位置加载的门户属性和系统属性：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The main configuration file for Liferay Portal is `portal.properties`, which
    contains a detailed explanation about the properties that it defines. There are
    at least three possible ways to override `portal.properties`. There is a functionality
    to put `portal-ext.properties` in the `ext` plugin, in the `${liferay.home}` directory,
    or in `portal-setup-wizard.properties`. But which file is the most important?
    The answer is placed in `portal.properties` file. The default read order is `portal.properties`,
    `portal-bundle.properties`, `portal-ext.properties`, and then `portal-setup-wizard.properties`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Liferay Portal的主要配置文件是`portal.properties`，其中包含关于它定义的属性的详细说明。至少有三种可能的方法可以覆盖`portal.properties`。有一个功能可以将`portal-ext.properties`放在`ext`插件中，在`${liferay.home}`目录中，或者放在`portal-setup-wizard.properties`中。但哪个文件最重要？答案在`portal.properties`文件中。默认的读取顺序是`portal.properties`，`portal-bundle.properties`，`portal-ext.properties`，然后是`portal-setup-wizard.properties`：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Detecting the database and database dialect
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检测数据库和数据库方言
- en: 'The next step is to recognize the database''s dialect:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是识别数据库的方言：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Liferay supports many database engines, such as DB2, Derby, Hypersonic, Ingres,
    MySQL, Oracle, P6Spy, PostgreSQL, and Sybase. The default database is Hypersonic,
    which stores all data in the `${liferay.home}/data/hsql/lportal` directory. This
    is a good option for developers who want to run JUnit tests, which modify data
    by testing the persistence layer or business process.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Liferay支持许多数据库引擎，如DB2、Derby、Hypersonic、Ingres、MySQL、Oracle、P6Spy、PostgreSQL和Sybase。默认数据库是Hypersonic，它将所有数据存储在`${liferay.home}/data/hsql/lportal`目录中。这对于想要运行JUnit测试的开发者来说是一个好选择，这些测试通过测试持久层或业务流程来修改数据。
- en: On every restart, Liferay tries to get the build number (Liferay version) from
    the `Release_` table. If this table doesn't exist, it calls `ReleaseLocalService.createTablesAndPopulate()`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次重启时，Liferay都会尝试从`Release_`表获取构建号（Liferay版本）。如果这个表不存在，它将调用`ReleaseLocalService.createTablesAndPopulate()`。
- en: 'If it is not possible to get the build number, Liferay logs the following information:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果无法获取构建号，Liferay 会记录以下信息：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `createTablesAndPopulate` method runs following scripts:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`createTablesAndPopulate` 方法运行以下脚本：'
- en: '`liferay-portal/sql/portal-tables.sql`: This creates the required tables'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`liferay-portal/sql/portal-tables.sql`：这创建了所需的表'
- en: '`liferay-portal/sql/portal-data-common.sql`: This adds the default data'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`liferay-portal/sql/portal-data-common.sql`：这添加了默认数据'
- en: '`liferay-portal/sql/portal-data-counter.sql`: This inits the unique key generator'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`liferay-portal/sql/portal-data-counter.sql`：这初始化了唯一键生成器'
- en: '`liferay-portal/sql/portal-data-release.sql`: This sets the release date'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`liferay-portal/sql/portal-data-release.sql`：这设置了发布日期'
- en: '`liferay-portal/sql/indexes.sql`: This adds database indexes'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`liferay-portal/sql/indexes.sql`：这添加了数据库索引'
- en: '`liferay-portal/sql/sequences.sql`: By default, this file is empty.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`liferay-portal/sql/sequences.sql`：默认情况下，此文件为空。'
- en: Apart from creating tables and populating data, Liferay triggers the `VerifyProcess`
    mechanism. This process will run on every startup to verify and fix any integrity
    problems found in the database. This is the perfect place for developers to add
    custom code to check the integrity of specific cases.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 除了创建表和填充数据外，Liferay 还会触发 `VerifyProcess` 机制。此过程将在每次启动时运行，以验证和修复数据库中发现的任何完整性问题。这是开发者添加自定义代码以检查特定案例完整性的完美位置。
- en: Starting the autodeploy scanner and deploying plugins
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动 autodeploy 扫描器和部署插件
- en: 'The last step is initializing the autodeploy and the hotdeploy listeners. In
    general, these mechanisms install all the plugins into the Tomcat container and
    register them as portlets, hooks, themes, and so on. In particular, there are
    at least three deploying approaches: sandbox deploy, autodeploy, and hotdeploy.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是初始化 autodeploy 和 hotdeploy 监听器。通常，这些机制将所有插件安装到 Tomcat 容器中，并将它们注册为 portlets、hooks、themes
    等。特别是，至少有三种部署方法：sandbox 部署、autodeploy 和 hotdeploy。
- en: Note
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: By default, Liferay uses the autodeploy and hotdeploy listeners. In fact, sandbox
    can currently deploy only themes and portlets.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Liferay 使用 autodeploy 和 hotdeploy 监听器。实际上，sandbox 目前只能部署 themes 和 portlets。
- en: 'The autodeploy mechanism is responsible for listening on a specific directory
    to install on-the-fly new plugins and copying them into the Tomcat hotdeploy process.
    A definition of that directory is placed in `portal.properties`, and by default,
    it is in the `deploy` folder:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: autodeploy 机制负责监听特定目录以即时安装新插件并将它们复制到 Tomcat hotdeploy 过程中。该目录的定义放置在 `portal.properties`
    中，默认情况下位于 `deploy` 文件夹：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Every type of plugin has its own autodeploy mechanism. This mechanism runs all
    the necessary steps to install it correctly in the Liferay container. In simple
    terms, the autodeploy mechanism generates the `web.xml` file and adds the required
    libraries to specific plugins. Definitions of these classes are placed in the
    `portal.properties` file with an `auto.deploy.*` prefix. Each class extends `BaseAutoDeployListener`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 每种类型的插件都有自己的 autodeploy 机制。这个机制运行所有必要的步骤，以确保它在 Liferay 容器中正确安装。简单来说，autodeploy
    机制生成 `web.xml` 文件，并将所需的库添加到特定的插件中。这些类的定义放置在带有 `auto.deploy.*` 前缀的 `portal.properties`
    文件中。每个类都扩展 `BaseAutoDeployListener`。
- en: 'The second process, hotdeploy, is responsible for registering plugins in Liferay.
    There are many steps, such as creating database tables, setting preferences, registering
    Spring application contexts, and so on. Of course, each step depends on the type
    of plugin. In `portal.properties`, there are definitions for each type of class:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个过程，hotdeploy，负责在 Liferay 中注册插件。这包括许多步骤，例如创建数据库表、设置首选项、注册 Spring 应用程序上下文等。当然，每个步骤都取决于插件的类型。在
    `portal.properties` 中，为每种类型的类都有定义：
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Tip
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: In the deployment process, the Liferay deployer modifies the `web.xml` file,
    adds specific dependencies, and packs it again. Ensure that you do not copy the
    `WAR` file directly to the Tomcat `webapps` folder. If you do so, the plugin will
    not work.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署过程中，Liferay 部署器修改 `web.xml` 文件，添加特定的依赖项，并将其重新打包。请确保您不要直接将 `WAR` 文件复制到 Tomcat
    的 `webapps` 文件夹中。如果您这样做，插件将无法工作。
- en: There's more...
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Often, enterprises have an established Java EE infrastructure upon which they
    would like to install Liferay. You must consider also the enterprise's security
    policies. These policies sometimes prevent the download and installation of the
    Tomcat bundle into a location of your choice. In this situation, a bundle will
    not suffice, and you have to manually install Liferay from its WAR archive into
    an already existing Apache Tomcat application server.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，企业已经建立了一个Java EE基础设施，他们希望在之上安装Liferay。你还必须考虑企业的安全策略。这些策略有时会阻止将Tomcat捆绑包下载并安装到您选择的位置。在这种情况下，捆绑包就不够了，您必须手动将Liferay从其WAR存档安装到已存在的Apache
    Tomcat应用程序服务器中。
- en: 'There are six steps to achieve this goal. They are as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 实现此目标有六个步骤。它们如下：
- en: Copy specific JAR files and dependencies to the Tomcat global `lib` folder,
    `$TOMCAT_HOME/lib/ext`.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将特定的JAR文件及其依赖项复制到Tomcat全局`lib`文件夹，`$TOMCAT_HOME/lib/ext`。
- en: Enable `crossContext` by adding the `ROOT.xml` file to the `$TOMCAT_HOME/conf/Catalina/localhost`
    folder.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将`ROOT.xml`文件添加到`$TOMCAT_HOME/conf/Catalina/localhost`文件夹中启用`crossContext`。
- en: 'Set custom `$JAVA_OPTS` parameters in the `$TOMCAT_HOME/bin/setenv.sh` file:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`$TOMCAT_HOME/bin/setenv.sh`文件中设置自定义`$JAVA_OPTS`参数：
- en: '[PRE13]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Update the `common.loader` property located in `$TOMCAT_HOME/conf/catalina.properties`
    with the following lines of code:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码行更新位于`$TOMCAT_HOME/conf/catalina.properties`中的`common.loader`属性：
- en: '[PRE14]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Specify the URI encoding as UTF-8 in `$TOMCAT_HOME/conf/server.xml` as follows:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`$TOMCAT_HOME/conf/server.xml`中将URI编码指定为UTF-8，如下所示：
- en: '[PRE15]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Deploy Liferay Portal using Tomcat manager or manually put the WAR archive into
    the `$TOMCAT_HOME/webapps` folder. The WAR file is available at [http://www.liferay.com/downloads/liferay-portal/available-releases#additional-versions](http://www.liferay.com/downloads/liferay-portal/available-releases#additional-versions).
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Tomcat管理器部署Liferay Portal或将WAR存档手动放入`$TOMCAT_HOME/webapps`文件夹中。WAR文件可在[http://www.liferay.com/downloads/liferay-portal/available-releases#additional-versions](http://www.liferay.com/downloads/liferay-portal/available-releases#additional-versions)找到。
- en: Note
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More detailed instructions of how to install Liferay on the Tomcat server are
    available on the official Liferay documentation at [https://www.liferay.com/documentation/liferay-portal/6.2/user-guide/-/ai/installing-liferay-on-tomcat-3](https://www.liferay.com/documentation/liferay-portal/6.2/user-guide/-/ai/installing-liferay-on-tomcat-3).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如何在Tomcat服务器上安装Liferay的更详细说明可在官方Liferay文档中找到，请参阅[https://www.liferay.com/documentation/liferay-portal/6.2/user-guide/-/ai/installing-liferay-on-tomcat-3](https://www.liferay.com/documentation/liferay-portal/6.2/user-guide/-/ai/installing-liferay-on-tomcat-3)。
- en: See also
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For information about running Liferay on the clustered environment, refer to
    the *Clustering Liferay Portal* recipe in [Chapter 11](part0080.xhtml#aid-2C9D01
    "Chapter 11. Quick Tricks and Advanced Knowledge"), *Quick Tricks and Advanced
    Knowledge*, and the *Scalable infrastructure* recipe in [Chapter 12](part0088.xhtml#aid-2JTHG1
    "Chapter 12. Basic Performance Tuning"), *Basic Performance Tuning*. For information
    about setting the developer's environment, refer to the next recipe.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 有关在集群环境中运行Liferay的信息，请参阅第11章中的*Clustering Liferay Portal*配方，*快速技巧和高级知识*，以及第12章中的*Scalable
    infrastructure*配方，*基本性能调整*。有关设置开发者环境的信息，请参阅下一配方。
- en: The Liferay setup wizard and first login
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Liferay设置向导和首次登录
- en: After successfully running Liferay on the Apache Tomcat server, the system asks
    users to fill some necessary information to complete the setup wizard. This is
    only a single screen with basic fields, such as administrator name or portal name.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在Apache Tomcat服务器上成功运行Liferay后，系统会要求用户填写一些必要的信息以完成设置向导。这只是一个包含基本字段的单个屏幕，例如管理员名称或门户名称。
- en: How to do it…
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'After running Liferay for the first time, the Liferay platform displays the
    basic configuration form, which looks like this:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 首次运行Liferay后，Liferay平台会显示基本配置表单，其外观如下：
- en: '![How to do it…](img/image00298.jpeg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/image00298.jpeg)'
- en: 'To finish installation, it is necessary to fill in the preceding form as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成安装，必须按照以下方式填写前面的表单：
- en: 'Provide details about **Portal**:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供有关**门户**的详细信息：
- en: '**Portal Name**: This is the name of the website, for instance, Enterprise
    Intranets'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**门户名称**：这是网站名称，例如，企业内部网'
- en: '**Default Language**: This helps in choosing the default language of the portal'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**默认语言**：这有助于选择门户的默认语言'
- en: '**Add Sample Date**: This decides to populate the portal with default data'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**添加示例日期**：这决定了是否用默认数据填充门户'
- en: 'Provide details about **Administrator User**:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供有关**管理员用户**的详细信息：
- en: '**First Name** and **Last Name**'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名字**和**姓氏**'
- en: '**E-mail** address'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电子邮件**地址'
- en: Choose the database engine (optional). In the previous recipe, we set properties
    with a MySql connection.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择数据库引擎（可选）。在先前的菜谱中，我们设置了MySql连接的属性。
- en: Confirm the form.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认表单。
- en: Click on the **Go to My Portal** button.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**转到我的门户**按钮。
- en: Click on the **I agree** button on the **Terms of Use** screen.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**使用条款**屏幕上的**我同意**按钮。
- en: Fill in the **Password Reminder** form and confirm the form.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写**密码提示**表单并确认表单。
- en: After confirming the **Password Reminder** form, you will be able to see and
    use the main Liferay navigation tools.
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确认**密码提示**表单后，您将能够查看和使用主要的Liferay导航工具。
- en: 'Follow these steps to navigate to **Control Panel**:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下步骤导航到**控制面板**：
- en: Click on the **Admin** button located on the dockbar menu.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击侧边栏菜单上的**管理员**按钮。
- en: Click on the **Control Panel** link.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**控制面板**链接。
- en: How it works…
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: After running Liferay for the first time, Liferay needs basic information about
    the portal, database, and administrator. The database connection was set in `portal-ext.properties`,
    and it was described in the previous recipe.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 运行Liferay第一次后，Liferay需要关于门户、数据库和管理员的基本信息。数据库连接已在`portal-ext.properties`中设置，并在前面的菜谱中进行了描述。
- en: 'All data which was provided on the portal wizard was stored in the `${liferay.home}/portal-setup-wizard.properties`
    file. The most important settings are described in the following table:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在门户向导中提供的所有数据都存储在`${liferay.home}/portal-setup-wizard.properties`文件中。以下表格描述了最重要的设置：
- en: '| Property name | Description |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| 属性名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `admin.email.from.name` | This describes the name of the administrator. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| `admin.email.from.name` | 这描述了管理员的名称。 |'
- en: '| `admin.email.from.address` | This is the e-mail address of the administrator.
    |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| `admin.email.from.address` | 这是管理员的电子邮件地址。 |'
- en: '| `liferay.home` | This is the path to the `${liferay.home}` directory. This
    property is very important and must be set. |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| `liferay.home` | 这是`${liferay.home}`目录的路径。这个属性非常重要，必须设置。 |'
- en: '| `setup.wizard.enabled` | This flag disables the setup wizard. |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| `setup.wizard.enabled` | 此标志禁用设置向导。 |'
- en: 'After logging in, the user is able to see navigation tools available for authorized
    users only. Here are the navigation tools:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，用户能够看到仅授权用户可用的导航工具。以下是导航工具：
- en: 'The dockbar menu is located under the top screen edge. The dockbar consist
    of three buttons:'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 侧边栏菜单位于屏幕顶部边缘下方。侧边栏由以下三个按钮组成：
- en: The **Admin** button that allows us to navigate to the **Site Administration**
    and **Control Panel** sections
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许我们导航到**站点管理**和**控制面板**部分的**管理员**按钮
- en: The **My Sites** button that lists links to sites that the user is a member
    of
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**我的站点**按钮，列出用户是成员的站点的链接'
- en: The button with *user name* and *surname* that allows us to navigate to user's
    profile (**My Profile**), user's dashboard (**My Dashboard**), user's account
    (**My Account**), and also allows the user to log out
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有**用户名**和**姓氏**的按钮，允许我们导航到用户的个人资料（**我的个人资料**）、用户仪表板（**我的仪表板**）、用户账户（**我的账户**），并允许用户注销
- en: 'The fast edition menu is located near the left edge of the screen. The menu
    consists of the following icons:'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速编辑菜单位于屏幕左侧边缘附近。菜单由以下图标组成：
- en: The **Add** icon that allows us to add a new page, a new application to the
    page, or new content
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许我们向页面添加新页面、新应用程序或新内容的**添加**图标
- en: The **Edit** icon that allows us to edit the settings of the currently viewed
    page
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许我们编辑当前查看页面设置的**编辑**图标
- en: The **Preview** icon that allows us to view the currently viewed page in different
    resolutions and devices
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许我们以不同分辨率和设备查看当前查看页面的**预览**图标
- en: The **Edit Controls** icon that allows us to hide or show controls of portlets
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许我们隐藏或显示小部件控制的**编辑控件**图标
- en: There's more…
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'In internal projects such as intranets, user accounts most often are created
    and managed in external systems, for instance, LDAP. Therefore, it is unnecessary
    (and sometimes even unacceptable) to allow users to manage their authentication
    data (for instance, to set a password-reminder query) or ask them to agree to
    terms of use directly within Liferay. In Liferay, there are many properties that
    can help customize the first login action, a few of which are as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在内部项目，如内联网中，用户账户通常在外部系统中创建和管理，例如LDAP。因此，允许用户管理他们的身份验证数据（例如，设置密码提示查询）或直接在Liferay中要求他们同意使用条款是不必要的（有时甚至是不被接受的）。在Liferay中，有许多属性可以帮助自定义首次登录操作，其中一些如下：
- en: '| Property name | Description |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| 属性名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `terms.of.use.required=false` | This turns off the terms of use |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| `terms.of.use.required=false` | 这将关闭使用条款查询功能 |'
- en: '| `terms.of.use.journal.article.group.id` and `terms.of.use.journal.article.id`
    | This specifies the group ID and article ID that will be displayed as the terms
    of use |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| `terms.of.use.journal.article.group.id` 和 `terms.of.use.journal.article.id`
    | 这指定了将显示为使用条款的组ID和文章ID |'
- en: '| `users.reminder.queries.enabled=false` | This disables the reminder query
    functionality |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| `users.reminder.queries.enabled=false` | 这将禁用提醒查询功能 |'
- en: See also
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For information on adding new users and defining roles and permissions, refer
    to the *Adding a new user* recipe in [Chapter 3](part0030.xhtml#aid-SJGS1 "Chapter 3. Working
    with a Liferay User / User Group / Organization"), *Working with Liferay User
    / User Group / Organization*
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于添加新用户和定义角色和权限的信息，请参考[第3章](part0030.xhtml#aid-SJGS1 "第3章。使用Liferay用户/用户组/组织")中的*添加新用户*配方，*使用Liferay用户/用户组/组织*
- en: '*Creating and configuring roles* and *Assigning user roles* recipes in [Chapter
    5](part0045.xhtml#aid-1AT9A1 "Chapter 5. Roles and Permissions"), *Roles and Permissions*'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建和配置角色*和*分配用户角色*配方在[第5章](part0045.xhtml#aid-1AT9A1 "第5章。角色和权限")中，*角色和权限*'
- en: For information on the default login page, refer to the *Overriding the default
    login page with the administrator defined page* recipe in [Chapter 2](part0020.xhtml#aid-J2B81
    "Chapter 2. Authentication and Registration Process"), *Authentication and Registration
    Process*
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于默认登录页面的信息，请参考[第2章](part0020.xhtml#aid-J2B81 "第2章。身份验证和注册过程")中的*使用管理员定义的页面覆盖默认登录页面*配方，*身份验证和注册过程*
- en: Setting up the developer's environment
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置开发环境
- en: 'Many developers want to customize Liferay Portal to fit it to a client''s requirements.
    Also, in this book, there will be a number of examples of code, so the setting
    environment is an important step to start with. Liferay mentions that there are
    two types of development and two ways to get sources:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发者希望定制Liferay Portal以满足客户的需求。此外，本书中还将提供许多代码示例，因此设置环境是开始的重要步骤。Liferay提到有两种类型的发展和两种获取源代码的方式：
- en: '**GitHub**: For contributors'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitHub**：对于贡献者'
- en: '**sourceforge.net**: For non-contributors'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**sourceforge.net**：对于非贡献者'
- en: For the purpose of this book, it is enough to use the non-contributors version
    only.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书的目的，仅使用非贡献者版本就足够了。
- en: Getting ready
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The minimal requirements to use Liferay Portal are **Java Development Kit**
    (**JDK**), Apache Ant with 1.7 version or later, and Eclipse IDE Indigo or later.
    Make sure that the installation is successful by typing the following lines of
    code:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Liferay Portal的最小要求是**Java开发工具包**（**JDK**），Apache Ant 1.7版本或更高版本，以及Eclipse
    IDE Indigo或更高版本。通过输入以下代码行来确保安装成功：
- en: '[PRE16]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How to do it...
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: This recipe is divided into three sections. The first section contains a description
    of preparatory activities such as downloading Liferay sources or unpacking them.
    The second one provides a description about the required configuration. The last
    section focuses on compiling all Liferay sources and deploying them into Apache
    Tomcat server.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方分为三个部分。第一部分包含描述准备活动，如下载Liferay源代码或解压缩它们。第二部分提供了关于所需配置的描述。最后一部分专注于编译所有Liferay源代码并将它们部署到Apache
    Tomcat服务器。
- en: Import sources to the Eclipse IDE
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将源代码导入到Eclipse IDE
- en: 'The first step is importing Liferay sources as a project in our IDE. These
    steps are based on Eclipse IDE. To achieve this, follow these steps:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是将Liferay源代码作为项目导入到我们的IDE中。以下步骤基于Eclipse IDE。为了实现这一点，请按照以下步骤操作：
- en: In `${liferay.home}`, create a `workspace` folder.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`${liferay.home}`中创建一个`workspace`文件夹。
- en: Go to [http://sourceforge.net/projects/lportal/files/Liferay%20Portal/](http://sourceforge.net/projects/lportal/files/Liferay%20Portal/)
    and choose the folder with the newest 6.x version. Next, find the file with the
    prefix `liferay-portal-src-*` and download it.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 [http://sourceforge.net/projects/lportal/files/Liferay%20Portal/](http://sourceforge.net/projects/lportal/files/Liferay%20Portal/)
    并选择最新的 6.x 版本的文件夹。接下来，找到以 `liferay-portal-src-*` 为前缀的文件并下载它。
- en: Unpack this file into the `workspace` folder.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此文件解压到 `workspace` 文件夹。
- en: Import this project to Eclipse IDE by going to **File** | **Import** | **General**
    | **Existing** **Projects into Workspace** and click on the **Next** button. On
    the next screen, select **Select root directory** and point to the folder with
    Liferay sources, which is `${liferay.home}/workspace/liferay-portal-src-${VERSION}`.
    To complete this task, click on the **Finish** button.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问 **文件** | **导入** | **通用** | **现有** **项目到工作空间** 并点击 **下一步** 按钮，将此项目导入 Eclipse
    IDE。在下一屏幕上，选择 **选择根目录** 并指向包含 Liferay 源代码的文件夹，即 `${liferay.home}/workspace/liferay-portal-src-${VERSION}`。要完成此任务，请点击
    **完成** 按钮。
- en: 'After this step, it is necessary to create a folder called `/portal-web/test/functional`
    in the project. This actions resolves a warning in the Eclipse IDE with the following
    message: **Build path entry is missing: Liferay-portal-src.6.2-ce-ga2/portal-web/test/functional**.'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这一步之后，需要在项目中创建一个名为 `/portal-web/test/functional` 的文件夹。这个操作可以解决 Eclipse IDE
    中的以下警告：**构建路径条目缺失：Liferay-portal-src.6.2-ce-ga2/portal-web/test/functional**。
- en: Override app.server.properties
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 覆盖 app.server.properties
- en: 'To be compatible with the existing Tomcat, which is placed in the `${liferay.home}/tomcat-7.0.42`
    folder, change the `app.server.parent.dir` properties. To achieve this, follow
    these steps:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 为了与放置在 `${liferay.home}/tomcat-7.0.42` 文件夹中的现有 Tomcat 兼容，需要更改 `app.server.parent.dir`
    属性。为此，请按照以下步骤操作：
- en: Create `app.server.${username}.properties` in the main folder of the project,
    which is `${liferay.home}/workspace/liferay-portal-src-${VERSION}`.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的根目录中创建 `app.server.${username}.properties`，即 `${liferay.home}/workspace/liferay-portal-src-${VERSION}`。
- en: 'Override `Server directory` properties and set a new value:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 覆盖 `服务器目录` 属性并设置新值：
- en: '[PRE17]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: It could also be an absolute path to Tomcat's parent folder.
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这也可以是 Tomcat 父文件夹的绝对路径。
- en: 'The `${liferay.home}` folder should have the following hierarchy:'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`${liferay.home}` 文件夹应该具有以下层次结构：'
- en: '[PRE18]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Compile and deploy
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编译和部署
- en: Go to `{$liferay.home}/workspace/liferay-portal-src-${VERSION}` and compile
    all Liferay sources using the `ant all` target in a command line.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 `{$liferay.home}/workspace/liferay-portal-src-${VERSION}` 并使用命令行中的 `ant all`
    目标编译所有 Liferay 源代码。
- en: Note
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In this book, we will use a console approach to compile, deploy, and so on.
    Liferay provides Eclipse with Liferay IDE. For proper understanding, we will use
    command line as the main tool.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将使用控制台方法来编译、部署等。Liferay 为 Eclipse 提供了 Liferay IDE。为了更好地理解，我们将使用命令行作为主要工具。
- en: How it works
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的
- en: It could be a source of criticism that Liferay is managed by Apache Ant instead
    of Maven, Gradle, or other build-automation tools. As a matter of fact, the Apache
    Ant tool is sufficient to manage and compile the Liferay core. If someone wants
    to use Maven, they are free to use it in custom portlets. Liferay offers many
    archetypes to help create Maven projects for multiple plugins.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能成为对 Liferay 使用 Apache Ant 而不是 Maven、Gradle 或其他构建自动化工具的批评来源。实际上，Apache Ant
    工具足以管理和编译 Liferay 核心。如果有人想使用 Maven，他们可以在自定义插件中使用它。Liferay 提供了许多原型，以帮助创建多个插件的 Maven
    项目。
- en: 'Let''s take a closer look at the project in Eclipse IDE. There are many folders
    that contain huge bunches of packages. Let''s examine the most important folders
    with regard to Liferay architecture:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看看 Eclipse IDE 中的项目。有许多包含大量包的文件夹。让我们检查与 Liferay 架构最相关的最重要文件夹：
- en: '| Folder name | Description |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| 文件夹名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Definitions` | This contains the `dtd` and `xsd` definitions, for instance,
    the `portlet.xml` definition or the `service.xml` definition. |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| `定义` | 这包含 `dtd` 和 `xsd` 定义，例如，`portlet.xml` 定义或 `service.xml` 定义。 |'
- en: '| `portal-impl` | This is the central core of the portal. It implements all
    the interfaces that are exposed in global `lib`. Also, it contains model definitions.
    Never put `portal-impl` anywhere other than where it came from. |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| `portal-impl` | 这是门户的核心。它实现了在全局 `lib` 中暴露的所有接口，并且包含模型定义。永远不要将 `portal-impl`
    放置在它来源之外的地方。 |'
- en: '| `portal-service` | This provides the interfaces'' definitions, which can
    be used in custom implementation, for instance hooks, portlets, themes, and so
    on. |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| `portal-service` | 这提供了接口定义，可用于自定义实现，例如钩子、端口、主题等。|'
- en: '| `util-bridges` | This contains bridges and utilities, which can be helpful
    to implement custom portlets, such as AlloyPortlet, BSFPortlet, MVCPortlet, and
    so on. |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| `util-bridges` | 这包含桥梁和实用工具，有助于实现自定义端口，例如AlloyPortlet、BSFPortlet、MVCPortlet等。|'
- en: '| `portal-web` | This contains the web application root, which has all the
    configuration files and view tier. |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| `portal-web` | 这包含Web应用程序根目录，其中包含所有配置文件和视图层。|'
- en: 'Let''s get back to the compile command, `ant all`. What exactly happened here?
    Portal has its own runtime structure. It provides ready-to-use bundles with Tomcat,
    JBoss, or other application servers. It gives a tool that can build a runtime
    bundle. In the main `build.xml` Ant file, there is a definition of Ant target
    [https://ant.apache.org/manual/targets.html](https://ant.apache.org/manual/targets.html):'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到编译命令`ant all`。这里到底发生了什么？门户有其自己的运行时结构。它提供了带有Tomcat、JBoss或其他应用程序服务器的即用型包。它提供了一个可以构建运行时包的工具。在主要的`build.xml`Ant文件中，有一个Ant目标定义[https://ant.apache.org/manual/targets.html](https://ant.apache.org/manual/targets.html)：
- en: '[PRE19]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The building process consists of three parts: clean, start, and deploy.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 构建过程由三个部分组成：清理、启动和部署。
- en: Clean process
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 清理过程
- en: 'The `ant clean` command performs the following steps:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`ant clean`命令执行以下步骤：'
- en: 'It cleans Java classes under the following folders: `classes`, `portal-service`,
    `util-bridges`, `util-java`, `util-slf4j`, `util-taglib`, `portal-impl`, `portal-pacl`,
    `osgi/bootrstap`, `portal-web` and `sql`'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它清理以下文件夹下的Java类：`classes`、`portal-service`、`util-bridges`、`util-java`、`util-slf4j`、`util-taglib`、`portal-impl`、`portal-pacl`、`osgi/bootrstap`、`portal-web`和`sql`
- en: It deletes files with mask `*.ear`, `*.jar`, `*.war`, and `*.zip`
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它删除了具有掩码`*.ear`、`*.jar`、`*.war`和`*.zip`的文件
- en: It cleans the `work`, `temp`, and `logs` Tomcat folders and removes the `*-hook.xml`
    and `*-portlet.xml` files from the `/conf/Catalina/localhost` directory
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它清理了`work`、`temp`和`logs`Tomcat文件夹，并从`/conf/Catalina/localhost`目录中删除了`*-hook.xml`和`*-portlet.xml`文件
- en: There are some more steps that clean or delete many configuration files depending
    on the application server. To understand the processes used in this book, it is
    not important to know every step and deep cleaning process.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 根据应用程序服务器，还有一些额外的步骤，用于清理或删除许多配置文件。为了理解本书中使用的流程，不需要了解每个步骤和深度清理过程。
- en: Start process
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动过程
- en: 'The `ant start` target invokes the following tasks:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`ant start`目标调用以下任务：'
- en: It runs the compile target that compiles sources under the `portal-service`,
    `util-bridges`, `util-java`, `util-slf4j`, `util-taglib`, `portal-impl`, `portal-pacl`,
    and `osgi/bootstrap` folders
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它运行编译目标，编译`portal-service`、`util-bridges`、`util-java`、`util-slf4j`、`util-taglib`、`portal-impl`、`portal-pacl`和`osgi/bootstrap`文件夹下的源代码
- en: It builds a database and rebuilds the hypersonic database
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它构建数据库并重新构建Hypersonic数据库
- en: It builds themes under the `portal-impl` folder
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在`portal-impl`文件夹下构建主题
- en: It calls the `jar` target that generates JAR's and WAR of the Liferay core
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它调用生成Liferay核心JAR和WAR的`jar`目标
- en: Deploy process
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署过程
- en: 'This target is strictly dependent on the application server. In general, this
    build deploys applications into a specific servlet container or application server.
    Furthermore, this build creates the required folders or files under `${liferay.home}`.
    The folders that this build creates are as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 此目标严格依赖于应用程序服务器。通常，此构建将应用程序部署到特定的Servlet容器或应用程序服务器。此外，此构建在`${liferay.home}`下创建所需的文件夹或文件。此构建创建的文件夹如下：
- en: The `deploy` folder for the hotdeploy process
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 热部署过程的`deploy`文件夹
- en: The `data` folder, which contains binary data, such as document library, Jackrabbit,
    HSQLDB, or Lucene
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含二进制数据（如文档库、Jackrabbit、HSQLDB或Lucene）的`data`文件夹
- en: The `ROOT.xml` context configuration file in `${app.server.dir}/conf/Catalina/localhost/`
    and many other tasks depending on the application server
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`${app.server.dir}/conf/Catalina/localhost/`中的`ROOT.xml`上下文配置文件以及许多其他依赖于应用程序服务器的任务'
- en: There's more...
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'As mentioned earlier, it is possible to create a full bundle without manually
    downloading Tomcat or other application server. There are only two steps in order
    to achieve this goal:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，可以创建一个完整的包，而无需手动下载Tomcat或其他应用程序服务器。为了实现这一目标，只需两个步骤：
- en: Invoke the `ant -buildfile build-dist.xml unzip-tomcat` task
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用`ant -buildfile build-dist.xml unzip-tomcat`任务
- en: Invoke the `ant all` command
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用`ant all`命令
- en: 'It is possible to deploy Liferay on a different application server. There is
    a whole range of commands that do this:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同的应用程序服务器上部署 Liferay 是可能的。有一系列命令可以完成这个任务：
- en: '[PRE20]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Creating a custom portlet
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个自定义组件
- en: This recipe is very specific, because it shows how to generate a new portlet,
    install it on Liferay, and import it to the Eclipse IDE. Many recipes from this
    book assume that the user knows how to generate a new plugin, such as portlet,
    hook, or web. We will show you how to generate a new portlet using Apache Maven
    archetypes. The whole book assumes that you use Apache Maven to compile and deploy
    new portlets.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱非常具体，因为它展示了如何生成一个新的组件，将其安装在 Liferay 上，并将其导入到 Eclipse IDE 中。本书中的许多菜谱都假设用户知道如何生成一个新的插件，例如组件、钩子或
    Web。我们将向您展示如何使用 Apache Maven 架构生成一个新的组件。整本书都假设您使用 Apache Maven 编译和部署新的组件。
- en: Getting ready
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In order to correctly generate a new portlet, you need to have the following
    software stack:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确生成一个新的组件，您需要以下软件栈：
- en: Java SDK 1.7 or later
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java SDK 1.7 或更高版本
- en: Apache Maven, we use 3.0.5 version
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Maven，我们使用 3.0.5 版本
- en: Eclipse IDE (Kepler or later)
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eclipse IDE（Kepler 或更高版本）
- en: We also assume that you properly set the developer's environment, which was
    described in the previous recipe.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还假设您已经正确设置了开发环境，这在之前的菜谱中已经描述过。
- en: How to do it…
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'There are three phases to achieve our goal: generating a new portlet, compiling
    it, and deploying and importing it to the Eclipse IDE.'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 实现我们的目标有三个阶段：生成一个新的组件，编译它，并将其部署和导入到 Eclipse IDE。
- en: Generating a new portlet
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成一个新的组件
- en: 'The first thing we need to do is to create a Maven project. In order to generate
    it, follow these steps:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是创建一个 Maven 项目。为了生成它，请按照以下步骤操作：
- en: Go to the `${liferay.home}/workspace` folder.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入 `${liferay.home}/workspace` 文件夹。
- en: Execute `mvn archetype:generate -Dfilter=liferay-portlet-archetype`.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 `mvn archetype:generate -Dfilter=liferay-portlet-archetype`。
- en: 'Choose a number for `com.liferay.maven.archetypes:liferay-portlet-archetype`.
    In our list, it is number `1`:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 `com.liferay.maven.archetypes:liferay-portlet-archetype` 选择一个数字。在我们的列表中，它是编号
    `1`：
- en: '[PRE21]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Choose the correct Liferay version. In our example, it will be 6.2.2, with the
    number `24`.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择正确的 Liferay 版本。在我们的例子中，它将是 6.2.2，编号为 `24`。
- en: 'Provide all the required Maven project information as follows:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式提供所有所需的 Maven 项目信息：
- en: '[PRE22]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In our `workspace` folder, a portlet called `first-portlet` should be generated.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的 `workspace` 文件夹中，应该生成一个名为 `first-portlet` 的组件。
- en: Compiling the portlet and deploying it
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编译组件并部署它
- en: With Apache Maven, it is easy to compile and deploy a portlet. Before invoking
    the Maven command, users have to set specific properties in the `pom.xml` file.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Apache Maven，编译和部署一个组件非常容易。在调用 Maven 命令之前，用户必须在 `pom.xml` 文件中设置特定的属性。
- en: Go to the `${liferay.home}/workspace/first-portlet` folder and edit the `pom.xml`
    file.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入 `${liferay.home}/workspace/first-portlet` 文件夹并编辑 `pom.xml` 文件。
- en: 'Under the `<build>` section, add the following properties definition:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `<build>` 部分，添加以下属性定义：
- en: '[PRE23]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Tip
  id: totrans-249
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Replace `${liferay.home}` with the real path to your folders.
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 `${liferay.home}` 替换为你的文件夹的实际路径。
- en: Save the `pom.xml` file.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存 `pom.xml` 文件。
- en: 'Build a new project by executing the following command:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令构建一个新的项目：
- en: '[PRE24]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Make sure that your Apache Tomcat is running with Liferay.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您的 Apache Tomcat 正在运行 Liferay。
- en: 'Invoke the `mvn liferay:deploy` command and follow the `catalina.out` logfile.
    You should see a similar message:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用 `mvn liferay:deploy` 命令并跟踪 `catalina.out` 日志文件。您应该看到类似的消息：
- en: '[PRE25]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Importing the portlet to the Eclipse IDE
  id: totrans-257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将组件导入到 Eclipse IDE
- en: 'After successfully generating sources by the Maven archetype plugin, the sources
    of our portlet can be imported to our Eclipse IDE. To import them, follow these
    steps:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 Maven 架构插件成功生成源代码后，我们的组件源代码可以导入到我们的 Eclipse IDE 中。要导入它们，请按照以下步骤操作：
- en: Make sure that you are in the `${liferay.home}/workspace/first-portlet` folder.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您位于 `${liferay.home}/workspace/first-portlet` 文件夹中。
- en: Run the `mvn eclipse:clean eclipse:eclipse` command.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `mvn eclipse:clean eclipse:eclipse` 命令。
- en: Open your IDE and import `first-portlet` as a project by going to **File** |
    **Import** | **General** | **Existing** **Projects into Workspace**.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的 IDE，通过访问 **文件** | **导入** | **通用** | **将现有项目导入到工作空间** 来将 `first-portlet`
    作为项目导入。
- en: How it works…
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'A portlet project created from `com.liferay.maven.archetypes:liferay-portlet-archetype`
    has ready-to-use portlet implementation. In fact, it is very basic, but the entire
    folder''s structure and configuration files are correctly created. Each portlet
    has four configuration files: `portlet.xml`, `liferay-portlet.xml`, `liferay-display.xml`,
    and `liferay-plugin-package.properties`. All of these files are placed in the
    `first-portlet/src/main/webapp/WEB-INF` folder.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `com.liferay.maven.archetypes:liferay-portlet-archetype` 创建的端口项目具有现成的端口实现。实际上，它非常基础，但整个文件夹结构和配置文件都创建得正确。每个端口都有四个配置文件：`portlet.xml`、`liferay-portlet.xml`、`liferay-display.xml`
    和 `liferay-plugin-package.properties`。所有这些文件都放置在 `first-portlet/src/main/webapp/WEB-INF`
    文件夹中。
- en: The `portlet.xml` file is a portlet descriptor. It contains a portlet definition,
    such as name, portlet class, and so on.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`portlet.xml` 文件是端口描述符。它包含端口定义，例如名称、端口类等。'
- en: The `liferay-portlet.xml` file is a kind of extension of `portlet.xml`. It is
    only understood by Liferay Portal. It gives additional information such as portlet's
    icon, path to the `css` and `js` files, and so on.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`liferay-portlet.xml` 文件是 `portlet.xml` 的一种扩展。它只被 Liferay Portal 所理解。它提供了额外的信息，例如端口的图标、`css`
    和 `js` 文件路径等。'
- en: The `liferay-display.xml` file tells us in which section our portlet will be
    available. We will describe it later in the book.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '`liferay-display.xml` 文件告诉我们我们的端口将在哪个部分可用。我们将在本书的后续部分对其进行描述。'
- en: The `liferay-plugin-package.properties` file is a metric of our portlet. This
    is a good place to specify version, tags, page URL, author, and license.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`liferay-plugin-package.properties` 文件是我们端口的度量标准。这是一个指定版本、标签、页面 URL、作者和许可证的好地方。'
- en: Detailed information on portlets is available in the JSR-168 and JSR-286 specification.
    There are many examples on how to use portlets, how to establish communication
    between portlets, or what is a portlet request lifecycle.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 关于端口的详细信息可在 JSR-168 和 JSR-286 规范中找到。有许多关于如何使用端口、如何建立端口之间的通信或端口请求生命周期的示例。
- en: See also
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'For more information on portlets, refer to the following recipes:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 关于端口的更多信息，请参阅以下菜谱：
- en: The *Creating a role-dependent portlet* recipe in [Chapter 5](part0045.xhtml#aid-1AT9A1
    "Chapter 5. Roles and Permissions"), *Roles and Permissions*
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第 5 章 *角色和权限* 的 *创建基于角色的端口* 菜谱中，[第 5 章](part0045.xhtml#aid-1AT9A1 "第 5 章。角色和权限")
- en: The *Checking permissions in a custom portlet* recipe in [Chapter 5](part0045.xhtml#aid-1AT9A1
    "Chapter 5. Roles and Permissions"), *Roles and Permissions*
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第 5 章 *角色和权限* 的 *在自定义端口中检查权限* 菜谱中，[第 5 章](part0045.xhtml#aid-1AT9A1 "第 5 章。角色和权限")
- en: The *language properties hook* recipe in [Chapter 11](part0080.xhtml#aid-2C9D01
    "Chapter 11. Quick Tricks and Advanced Knowledge"), *Quick Tricks and Advanced
    Knowledge*
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第 11 章 *快速技巧和高级知识* 的 *语言属性钩子* 菜谱中，[第 11 章](part0080.xhtml#aid-2C9D01 "第 11
    章。快速技巧和高级知识")
- en: The *Using Liferay Service Bus for communication between portlets* recipe in
    [Chapter 11](part0080.xhtml#aid-2C9D01 "Chapter 11. Quick Tricks and Advanced
    Knowledge"), *Quick Tricks and Advanced Knowledge*
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第 11 章 *快速技巧和高级知识* 的 *使用 Liferay 服务总线进行端口间通信* 菜谱中，[第 11 章](part0080.xhtml#aid-2C9D01
    "第 11 章。快速技巧和高级知识")
