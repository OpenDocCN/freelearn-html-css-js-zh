- en: Chapter 1. Installation and Basic Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Quick running Liferay on a Tomcat bundle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Liferay setup wizard and first login
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the developer's environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom portlet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Liferay is the market's leading provider of open source portal solutions. It
    provides a solid platform to serve our site to all clients. It is difficult to
    say what Liferay is. On the one hand, Liferay is a great content-management system,
    but on the other hand, it provides many tools for collaboration and communication
    between users. It can also be a social platform with many functionalities, such
    as wall, message board, chat, and many others. Furthermore, it is a portlet container
    that is JSR-168 and JSR-286 compliant. **Java Specification Requests** (**JSRs**)
    describes final specifications for the Java platform. A portlet is a small web
    application that produces fragments of HTML code that are aggregated into a portal.
    JSR-168 and JSR-286 specifications standardize how portlets interact with portlet
    containers. These specifications also describe a standard application programming
    interface for Java portlet development. In other words, Liferay is only responsible
    for aggregating the set of portlets that are to appear on any particular page.
    This approach gives users a great tool to organize and customize portlets in order
    to build whole portals, social platforms, or intranets. Within Liferay, a portal
    is composed of a number of portlets, which are self-contained interactive elements
    that are written to a particular standard. A number of publications describe Liferay's
    advantages. In this book, we will try to delve deeper into Liferay's architecture
    and its functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: The primary purpose of this chapter is to give you an insight about Liferay's
    installation and management with basic configuration. We realize that there are
    many ways to download, compile, install, and run Liferay Portal. Our main purpose
    is to provide some clear and basic information about the starting package on which
    we will rely and work. This chapter explains the main processes that are performed
    on every compiling action or on every startup action.
  prefs: []
  type: TYPE_NORMAL
- en: 'Liferay Portal is distributed in two different editions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Liferay Portal Community Edition (CE)**: This is a free and open source version
    of Liferay'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Liferay Portal Enterprise Edition (EE)**: This is a commercial offering that
    has Liferay engineers, support, and services'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This book is based on the Liferay Portal Community Edition (CE) version with
    the newest release, which is 6.2.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start the journey with Liferay, there are a few starting points that contain
    a lot of useful information, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| URL | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [http://www.liferay.com/](http://www.liferay.com/) | Official Liferay site
    |'
  prefs: []
  type: TYPE_TB
- en: '| [http://www.liferay.com/downloads/liferay-portal/available-releases](http://www.liferay.com/downloads/liferay-portal/available-releases)
    | Place with available releases |'
  prefs: []
  type: TYPE_TB
- en: '| [http://www.liferay.com/documentation/liferay-portal/6.2/user-guide](http://www.liferay.com/documentation/liferay-portal/6.2/user-guide)
    and [https://dev.liferay.com/](https://dev.liferay.com/) | User guides and documentation
    |'
  prefs: []
  type: TYPE_TB
- en: '| [http://svn.liferay.com/repos/public/portal](http://svn.liferay.com/repos/public/portal)
    | Old-fashion repository of Liferay code.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Login**: Enter guest in this field'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password**: This field is to be left empty'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| [https://github.com/liferay/liferay-portal/tree/6.2.x](https://github.com/liferay/liferay-portal/tree/6.2.x)
    | [Recommended] GitHub repository |'
  prefs: []
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Liferay introduced 7.0 version, which will be released on September 2015\. Do
    not check out Liferay sources from the trunk. There are many changes between 6.2
    and the trunk version. In the 7.0 version, Liferay will provide OSGi integration
    and many new features. These new features help users and developers achieve a
    whole bunch of out-of-the-box functionalities (for instance, Elasticsearch as
    a search server based on the Lucene framework).
  prefs: []
  type: TYPE_NORMAL
- en: Quick running Liferay on a Tomcat bundle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The simplest way to run Liferay is to download a specific bundle from the Liferay
    official site. A Liferay bundle is just a compressed archive that contains all
    that is needed to host the Liferay Portal. A bundle consists of a Java-based application
    server and the deployed Liferay Portal core application. Liferay provides these
    bundle runtimes with different application servers (that is, Tomcat, JBoss, Geronimo,
    and so on) so that you can use any one based on your choice. This method is recommended
    for people who just want to run Liferay Portal, look at its functionalities, and
    configure their site using the GUI. In this recipe, you will learn the art of
    setting up Liferay on Tomcat and the MySQL database engine.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, make sure that JRE or JDK is properly installed. Type the following
    command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The result should be similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Also, check out the Java SDK version. Liferay recommends Java 7 or later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Moreover, determine whether the MySQL server installation is done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'As a result, the actual installed version should be displayed. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Also, check out the MySQL version. We recommend 5.5 version or later.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to run Liferay on a Tomcat bundle, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a database with the name `lportal`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure that the MySQL user has permissions to create tables.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Download the correct Liferay version on the Tomcat bundle from [http://www.liferay.com/downloads/liferay-portal/available-releases](http://www.liferay.com/downloads/liferay-portal/available-releases).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unzip the downloaded archive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the extracted folder `liferay-portal-6.2-ce-ga2`. This path will be called
    `${liferay.home}` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the `${liferay.home}` folder and create a file called `portal-ext.properties`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit `portal-ext.properties` and set the database properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Find the Tomcat folder and go to the `tomcat-7.0.42/bin/` location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `./startup.sh` script (`startup.bat` for Windows OS) and look into the
    `tomcat-7.0.42/logs/catalina.out` log.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In a browser, type `http://localhost:8080` location. By default, Tomcat listens
    on port 8080\. It should render the Liferay setup wizard by default. This wizard
    will ask for basic information, such as, portal name, default language, and administrator
    user details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Running the Liferay Portal from a prepared bundle is quite an easy task to accomplish.
    However, it is worth knowing what exactly happens when Tomcat is being started.
    Take a brief look at the `catalina.out` log and try to examine it line by line.
  prefs: []
  type: TYPE_NORMAL
- en: Loading the configuration descriptor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first thing is to deploy `ROOT.xml`. In our `catalina.out` file, there
    is a line present, which is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'It means that the configuration file turns on the `crossContext` attribute
    in Tomcat 7\. This setting is required because Liferay is a portlet container.
    Hence, it is an application that should have access to other applications called
    portlets. The Apache Tomcat documentation says:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"Set to true if you want calls within this application to ServletContext.getContext()
    to successfully return a request dispatcher for other web applications running
    on this virtual host."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Loading system properties and portal properties
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The next few lines of the logfile show portal properties and system properties
    that are loaded from specific locations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The main configuration file for Liferay Portal is `portal.properties`, which
    contains a detailed explanation about the properties that it defines. There are
    at least three possible ways to override `portal.properties`. There is a functionality
    to put `portal-ext.properties` in the `ext` plugin, in the `${liferay.home}` directory,
    or in `portal-setup-wizard.properties`. But which file is the most important?
    The answer is placed in `portal.properties` file. The default read order is `portal.properties`,
    `portal-bundle.properties`, `portal-ext.properties`, and then `portal-setup-wizard.properties`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Detecting the database and database dialect
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The next step is to recognize the database''s dialect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Liferay supports many database engines, such as DB2, Derby, Hypersonic, Ingres,
    MySQL, Oracle, P6Spy, PostgreSQL, and Sybase. The default database is Hypersonic,
    which stores all data in the `${liferay.home}/data/hsql/lportal` directory. This
    is a good option for developers who want to run JUnit tests, which modify data
    by testing the persistence layer or business process.
  prefs: []
  type: TYPE_NORMAL
- en: On every restart, Liferay tries to get the build number (Liferay version) from
    the `Release_` table. If this table doesn't exist, it calls `ReleaseLocalService.createTablesAndPopulate()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If it is not possible to get the build number, Liferay logs the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `createTablesAndPopulate` method runs following scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '`liferay-portal/sql/portal-tables.sql`: This creates the required tables'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`liferay-portal/sql/portal-data-common.sql`: This adds the default data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`liferay-portal/sql/portal-data-counter.sql`: This inits the unique key generator'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`liferay-portal/sql/portal-data-release.sql`: This sets the release date'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`liferay-portal/sql/indexes.sql`: This adds database indexes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`liferay-portal/sql/sequences.sql`: By default, this file is empty.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apart from creating tables and populating data, Liferay triggers the `VerifyProcess`
    mechanism. This process will run on every startup to verify and fix any integrity
    problems found in the database. This is the perfect place for developers to add
    custom code to check the integrity of specific cases.
  prefs: []
  type: TYPE_NORMAL
- en: Starting the autodeploy scanner and deploying plugins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The last step is initializing the autodeploy and the hotdeploy listeners. In
    general, these mechanisms install all the plugins into the Tomcat container and
    register them as portlets, hooks, themes, and so on. In particular, there are
    at least three deploying approaches: sandbox deploy, autodeploy, and hotdeploy.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, Liferay uses the autodeploy and hotdeploy listeners. In fact, sandbox
    can currently deploy only themes and portlets.
  prefs: []
  type: TYPE_NORMAL
- en: 'The autodeploy mechanism is responsible for listening on a specific directory
    to install on-the-fly new plugins and copying them into the Tomcat hotdeploy process.
    A definition of that directory is placed in `portal.properties`, and by default,
    it is in the `deploy` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Every type of plugin has its own autodeploy mechanism. This mechanism runs all
    the necessary steps to install it correctly in the Liferay container. In simple
    terms, the autodeploy mechanism generates the `web.xml` file and adds the required
    libraries to specific plugins. Definitions of these classes are placed in the
    `portal.properties` file with an `auto.deploy.*` prefix. Each class extends `BaseAutoDeployListener`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second process, hotdeploy, is responsible for registering plugins in Liferay.
    There are many steps, such as creating database tables, setting preferences, registering
    Spring application contexts, and so on. Of course, each step depends on the type
    of plugin. In `portal.properties`, there are definitions for each type of class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the deployment process, the Liferay deployer modifies the `web.xml` file,
    adds specific dependencies, and packs it again. Ensure that you do not copy the
    `WAR` file directly to the Tomcat `webapps` folder. If you do so, the plugin will
    not work.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Often, enterprises have an established Java EE infrastructure upon which they
    would like to install Liferay. You must consider also the enterprise's security
    policies. These policies sometimes prevent the download and installation of the
    Tomcat bundle into a location of your choice. In this situation, a bundle will
    not suffice, and you have to manually install Liferay from its WAR archive into
    an already existing Apache Tomcat application server.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are six steps to achieve this goal. They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy specific JAR files and dependencies to the Tomcat global `lib` folder,
    `$TOMCAT_HOME/lib/ext`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable `crossContext` by adding the `ROOT.xml` file to the `$TOMCAT_HOME/conf/Catalina/localhost`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set custom `$JAVA_OPTS` parameters in the `$TOMCAT_HOME/bin/setenv.sh` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `common.loader` property located in `$TOMCAT_HOME/conf/catalina.properties`
    with the following lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Specify the URI encoding as UTF-8 in `$TOMCAT_HOME/conf/server.xml` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Deploy Liferay Portal using Tomcat manager or manually put the WAR archive into
    the `$TOMCAT_HOME/webapps` folder. The WAR file is available at [http://www.liferay.com/downloads/liferay-portal/available-releases#additional-versions](http://www.liferay.com/downloads/liferay-portal/available-releases#additional-versions).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More detailed instructions of how to install Liferay on the Tomcat server are
    available on the official Liferay documentation at [https://www.liferay.com/documentation/liferay-portal/6.2/user-guide/-/ai/installing-liferay-on-tomcat-3](https://www.liferay.com/documentation/liferay-portal/6.2/user-guide/-/ai/installing-liferay-on-tomcat-3).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For information about running Liferay on the clustered environment, refer to
    the *Clustering Liferay Portal* recipe in [Chapter 11](part0080.xhtml#aid-2C9D01
    "Chapter 11. Quick Tricks and Advanced Knowledge"), *Quick Tricks and Advanced
    Knowledge*, and the *Scalable infrastructure* recipe in [Chapter 12](part0088.xhtml#aid-2JTHG1
    "Chapter 12. Basic Performance Tuning"), *Basic Performance Tuning*. For information
    about setting the developer's environment, refer to the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: The Liferay setup wizard and first login
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After successfully running Liferay on the Apache Tomcat server, the system asks
    users to fill some necessary information to complete the setup wizard. This is
    only a single screen with basic fields, such as administrator name or portal name.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After running Liferay for the first time, the Liferay platform displays the
    basic configuration form, which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00298.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To finish installation, it is necessary to fill in the preceding form as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Provide details about **Portal**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Portal Name**: This is the name of the website, for instance, Enterprise
    Intranets'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Default Language**: This helps in choosing the default language of the portal'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add Sample Date**: This decides to populate the portal with default data'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Provide details about **Administrator User**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**First Name** and **Last Name**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**E-mail** address'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose the database engine (optional). In the previous recipe, we set properties
    with a MySql connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Go to My Portal** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **I agree** button on the **Terms of Use** screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the **Password Reminder** form and confirm the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After confirming the **Password Reminder** form, you will be able to see and
    use the main Liferay navigation tools.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Follow these steps to navigate to **Control Panel**:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Admin** button located on the dockbar menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Control Panel** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After running Liferay for the first time, Liferay needs basic information about
    the portal, database, and administrator. The database connection was set in `portal-ext.properties`,
    and it was described in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'All data which was provided on the portal wizard was stored in the `${liferay.home}/portal-setup-wizard.properties`
    file. The most important settings are described in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Property name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `admin.email.from.name` | This describes the name of the administrator. |'
  prefs: []
  type: TYPE_TB
- en: '| `admin.email.from.address` | This is the e-mail address of the administrator.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `liferay.home` | This is the path to the `${liferay.home}` directory. This
    property is very important and must be set. |'
  prefs: []
  type: TYPE_TB
- en: '| `setup.wizard.enabled` | This flag disables the setup wizard. |'
  prefs: []
  type: TYPE_TB
- en: 'After logging in, the user is able to see navigation tools available for authorized
    users only. Here are the navigation tools:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The dockbar menu is located under the top screen edge. The dockbar consist
    of three buttons:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Admin** button that allows us to navigate to the **Site Administration**
    and **Control Panel** sections
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The **My Sites** button that lists links to sites that the user is a member
    of
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The button with *user name* and *surname* that allows us to navigate to user's
    profile (**My Profile**), user's dashboard (**My Dashboard**), user's account
    (**My Account**), and also allows the user to log out
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The fast edition menu is located near the left edge of the screen. The menu
    consists of the following icons:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Add** icon that allows us to add a new page, a new application to the
    page, or new content
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Edit** icon that allows us to edit the settings of the currently viewed
    page
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Preview** icon that allows us to view the currently viewed page in different
    resolutions and devices
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Edit Controls** icon that allows us to hide or show controls of portlets
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In internal projects such as intranets, user accounts most often are created
    and managed in external systems, for instance, LDAP. Therefore, it is unnecessary
    (and sometimes even unacceptable) to allow users to manage their authentication
    data (for instance, to set a password-reminder query) or ask them to agree to
    terms of use directly within Liferay. In Liferay, there are many properties that
    can help customize the first login action, a few of which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Property name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `terms.of.use.required=false` | This turns off the terms of use |'
  prefs: []
  type: TYPE_TB
- en: '| `terms.of.use.journal.article.group.id` and `terms.of.use.journal.article.id`
    | This specifies the group ID and article ID that will be displayed as the terms
    of use |'
  prefs: []
  type: TYPE_TB
- en: '| `users.reminder.queries.enabled=false` | This disables the reminder query
    functionality |'
  prefs: []
  type: TYPE_TB
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For information on adding new users and defining roles and permissions, refer
    to the *Adding a new user* recipe in [Chapter 3](part0030.xhtml#aid-SJGS1 "Chapter 3. Working
    with a Liferay User / User Group / Organization"), *Working with Liferay User
    / User Group / Organization*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating and configuring roles* and *Assigning user roles* recipes in [Chapter
    5](part0045.xhtml#aid-1AT9A1 "Chapter 5. Roles and Permissions"), *Roles and Permissions*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For information on the default login page, refer to the *Overriding the default
    login page with the administrator defined page* recipe in [Chapter 2](part0020.xhtml#aid-J2B81
    "Chapter 2. Authentication and Registration Process"), *Authentication and Registration
    Process*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the developer's environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Many developers want to customize Liferay Portal to fit it to a client''s requirements.
    Also, in this book, there will be a number of examples of code, so the setting
    environment is an important step to start with. Liferay mentions that there are
    two types of development and two ways to get sources:'
  prefs: []
  type: TYPE_NORMAL
- en: '**GitHub**: For contributors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sourceforge.net**: For non-contributors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the purpose of this book, it is enough to use the non-contributors version
    only.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The minimal requirements to use Liferay Portal are **Java Development Kit**
    (**JDK**), Apache Ant with 1.7 version or later, and Eclipse IDE Indigo or later.
    Make sure that the installation is successful by typing the following lines of
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is divided into three sections. The first section contains a description
    of preparatory activities such as downloading Liferay sources or unpacking them.
    The second one provides a description about the required configuration. The last
    section focuses on compiling all Liferay sources and deploying them into Apache
    Tomcat server.
  prefs: []
  type: TYPE_NORMAL
- en: Import sources to the Eclipse IDE
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first step is importing Liferay sources as a project in our IDE. These
    steps are based on Eclipse IDE. To achieve this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In `${liferay.home}`, create a `workspace` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [http://sourceforge.net/projects/lportal/files/Liferay%20Portal/](http://sourceforge.net/projects/lportal/files/Liferay%20Portal/)
    and choose the folder with the newest 6.x version. Next, find the file with the
    prefix `liferay-portal-src-*` and download it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unpack this file into the `workspace` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import this project to Eclipse IDE by going to **File** | **Import** | **General**
    | **Existing** **Projects into Workspace** and click on the **Next** button. On
    the next screen, select **Select root directory** and point to the folder with
    Liferay sources, which is `${liferay.home}/workspace/liferay-portal-src-${VERSION}`.
    To complete this task, click on the **Finish** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After this step, it is necessary to create a folder called `/portal-web/test/functional`
    in the project. This actions resolves a warning in the Eclipse IDE with the following
    message: **Build path entry is missing: Liferay-portal-src.6.2-ce-ga2/portal-web/test/functional**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Override app.server.properties
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To be compatible with the existing Tomcat, which is placed in the `${liferay.home}/tomcat-7.0.42`
    folder, change the `app.server.parent.dir` properties. To achieve this, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create `app.server.${username}.properties` in the main folder of the project,
    which is `${liferay.home}/workspace/liferay-portal-src-${VERSION}`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Override `Server directory` properties and set a new value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It could also be an absolute path to Tomcat's parent folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `${liferay.home}` folder should have the following hierarchy:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and deploy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go to `{$liferay.home}/workspace/liferay-portal-src-${VERSION}` and compile
    all Liferay sources using the `ant all` target in a command line.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this book, we will use a console approach to compile, deploy, and so on.
    Liferay provides Eclipse with Liferay IDE. For proper understanding, we will use
    command line as the main tool.
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It could be a source of criticism that Liferay is managed by Apache Ant instead
    of Maven, Gradle, or other build-automation tools. As a matter of fact, the Apache
    Ant tool is sufficient to manage and compile the Liferay core. If someone wants
    to use Maven, they are free to use it in custom portlets. Liferay offers many
    archetypes to help create Maven projects for multiple plugins.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a closer look at the project in Eclipse IDE. There are many folders
    that contain huge bunches of packages. Let''s examine the most important folders
    with regard to Liferay architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Folder name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Definitions` | This contains the `dtd` and `xsd` definitions, for instance,
    the `portlet.xml` definition or the `service.xml` definition. |'
  prefs: []
  type: TYPE_TB
- en: '| `portal-impl` | This is the central core of the portal. It implements all
    the interfaces that are exposed in global `lib`. Also, it contains model definitions.
    Never put `portal-impl` anywhere other than where it came from. |'
  prefs: []
  type: TYPE_TB
- en: '| `portal-service` | This provides the interfaces'' definitions, which can
    be used in custom implementation, for instance hooks, portlets, themes, and so
    on. |'
  prefs: []
  type: TYPE_TB
- en: '| `util-bridges` | This contains bridges and utilities, which can be helpful
    to implement custom portlets, such as AlloyPortlet, BSFPortlet, MVCPortlet, and
    so on. |'
  prefs: []
  type: TYPE_TB
- en: '| `portal-web` | This contains the web application root, which has all the
    configuration files and view tier. |'
  prefs: []
  type: TYPE_TB
- en: 'Let''s get back to the compile command, `ant all`. What exactly happened here?
    Portal has its own runtime structure. It provides ready-to-use bundles with Tomcat,
    JBoss, or other application servers. It gives a tool that can build a runtime
    bundle. In the main `build.xml` Ant file, there is a definition of Ant target
    [https://ant.apache.org/manual/targets.html](https://ant.apache.org/manual/targets.html):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The building process consists of three parts: clean, start, and deploy.'
  prefs: []
  type: TYPE_NORMAL
- en: Clean process
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `ant clean` command performs the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'It cleans Java classes under the following folders: `classes`, `portal-service`,
    `util-bridges`, `util-java`, `util-slf4j`, `util-taglib`, `portal-impl`, `portal-pacl`,
    `osgi/bootrstap`, `portal-web` and `sql`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It deletes files with mask `*.ear`, `*.jar`, `*.war`, and `*.zip`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It cleans the `work`, `temp`, and `logs` Tomcat folders and removes the `*-hook.xml`
    and `*-portlet.xml` files from the `/conf/Catalina/localhost` directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are some more steps that clean or delete many configuration files depending
    on the application server. To understand the processes used in this book, it is
    not important to know every step and deep cleaning process.
  prefs: []
  type: TYPE_NORMAL
- en: Start process
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `ant start` target invokes the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: It runs the compile target that compiles sources under the `portal-service`,
    `util-bridges`, `util-java`, `util-slf4j`, `util-taglib`, `portal-impl`, `portal-pacl`,
    and `osgi/bootstrap` folders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It builds a database and rebuilds the hypersonic database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It builds themes under the `portal-impl` folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It calls the `jar` target that generates JAR's and WAR of the Liferay core
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy process
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This target is strictly dependent on the application server. In general, this
    build deploys applications into a specific servlet container or application server.
    Furthermore, this build creates the required folders or files under `${liferay.home}`.
    The folders that this build creates are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `deploy` folder for the hotdeploy process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `data` folder, which contains binary data, such as document library, Jackrabbit,
    HSQLDB, or Lucene
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ROOT.xml` context configuration file in `${app.server.dir}/conf/Catalina/localhost/`
    and many other tasks depending on the application server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned earlier, it is possible to create a full bundle without manually
    downloading Tomcat or other application server. There are only two steps in order
    to achieve this goal:'
  prefs: []
  type: TYPE_NORMAL
- en: Invoke the `ant -buildfile build-dist.xml unzip-tomcat` task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Invoke the `ant all` command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It is possible to deploy Liferay on a different application server. There is
    a whole range of commands that do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Creating a custom portlet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe is very specific, because it shows how to generate a new portlet,
    install it on Liferay, and import it to the Eclipse IDE. Many recipes from this
    book assume that the user knows how to generate a new plugin, such as portlet,
    hook, or web. We will show you how to generate a new portlet using Apache Maven
    archetypes. The whole book assumes that you use Apache Maven to compile and deploy
    new portlets.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to correctly generate a new portlet, you need to have the following
    software stack:'
  prefs: []
  type: TYPE_NORMAL
- en: Java SDK 1.7 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache Maven, we use 3.0.5 version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse IDE (Kepler or later)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also assume that you properly set the developer's environment, which was
    described in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are three phases to achieve our goal: generating a new portlet, compiling
    it, and deploying and importing it to the Eclipse IDE.'
  prefs: []
  type: TYPE_NORMAL
- en: Generating a new portlet
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first thing we need to do is to create a Maven project. In order to generate
    it, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the `${liferay.home}/workspace` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `mvn archetype:generate -Dfilter=liferay-portlet-archetype`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose a number for `com.liferay.maven.archetypes:liferay-portlet-archetype`.
    In our list, it is number `1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Choose the correct Liferay version. In our example, it will be 6.2.2, with the
    number `24`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Provide all the required Maven project information as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In our `workspace` folder, a portlet called `first-portlet` should be generated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compiling the portlet and deploying it
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With Apache Maven, it is easy to compile and deploy a portlet. Before invoking
    the Maven command, users have to set specific properties in the `pom.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: Go to the `${liferay.home}/workspace/first-portlet` folder and edit the `pom.xml`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under the `<build>` section, add the following properties definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Replace `${liferay.home}` with the real path to your folders.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save the `pom.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Build a new project by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure that your Apache Tomcat is running with Liferay.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Invoke the `mvn liferay:deploy` command and follow the `catalina.out` logfile.
    You should see a similar message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Importing the portlet to the Eclipse IDE
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After successfully generating sources by the Maven archetype plugin, the sources
    of our portlet can be imported to our Eclipse IDE. To import them, follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that you are in the `${liferay.home}/workspace/first-portlet` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `mvn eclipse:clean eclipse:eclipse` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open your IDE and import `first-portlet` as a project by going to **File** |
    **Import** | **General** | **Existing** **Projects into Workspace**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A portlet project created from `com.liferay.maven.archetypes:liferay-portlet-archetype`
    has ready-to-use portlet implementation. In fact, it is very basic, but the entire
    folder''s structure and configuration files are correctly created. Each portlet
    has four configuration files: `portlet.xml`, `liferay-portlet.xml`, `liferay-display.xml`,
    and `liferay-plugin-package.properties`. All of these files are placed in the
    `first-portlet/src/main/webapp/WEB-INF` folder.'
  prefs: []
  type: TYPE_NORMAL
- en: The `portlet.xml` file is a portlet descriptor. It contains a portlet definition,
    such as name, portlet class, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The `liferay-portlet.xml` file is a kind of extension of `portlet.xml`. It is
    only understood by Liferay Portal. It gives additional information such as portlet's
    icon, path to the `css` and `js` files, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The `liferay-display.xml` file tells us in which section our portlet will be
    available. We will describe it later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: The `liferay-plugin-package.properties` file is a metric of our portlet. This
    is a good place to specify version, tags, page URL, author, and license.
  prefs: []
  type: TYPE_NORMAL
- en: Detailed information on portlets is available in the JSR-168 and JSR-286 specification.
    There are many examples on how to use portlets, how to establish communication
    between portlets, or what is a portlet request lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information on portlets, refer to the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: The *Creating a role-dependent portlet* recipe in [Chapter 5](part0045.xhtml#aid-1AT9A1
    "Chapter 5. Roles and Permissions"), *Roles and Permissions*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Checking permissions in a custom portlet* recipe in [Chapter 5](part0045.xhtml#aid-1AT9A1
    "Chapter 5. Roles and Permissions"), *Roles and Permissions*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *language properties hook* recipe in [Chapter 11](part0080.xhtml#aid-2C9D01
    "Chapter 11. Quick Tricks and Advanced Knowledge"), *Quick Tricks and Advanced
    Knowledge*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using Liferay Service Bus for communication between portlets* recipe in
    [Chapter 11](part0080.xhtml#aid-2C9D01 "Chapter 11. Quick Tricks and Advanced
    Knowledge"), *Quick Tricks and Advanced Knowledge*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
