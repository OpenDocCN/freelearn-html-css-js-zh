- en: Chapter 8. Message Bar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to develop an Ext JS extension, which will be
    a fancy animated message bar. The message bar will provide the facility for having
    a configurable duration timer for showing the message, a close button, and also
    will be able to customize the look and can provide optional icons for different
    types of states such as valid, invalid, or information during runtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Functional requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Planning and coding the message bar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are targeting to develop an Ext JS extension that can be used to show messages.
    This extension can be used within a container as a docked item to show messages.
    The message bar will be closed automatically when the configured timer is completed.
    This message bar will also provide a close button and on clicking on this button
    the message bar will be closed. The opening and closing of the message bar will
    be in a smooth animated form. This message bar can also accept configuration at
    runtime to show several types of state that it can change its look to, and can
    show a proper icon.
  prefs: []
  type: TYPE_NORMAL
- en: Planning and coding the message bar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To develop this extension, we can use the Ext JS toolbar and dock it to the
    bottom of the container. Then we can add a functionality where this toolbar can
    show the message text. Then we need to add a functionality when the message bar
    is called to show the message; the message bar appears and disappears when the
    close button is clicked upon or when the configured timer is completed. As per
    our functional requirement, we can see that the Ext JS library provided `StatusBar`
    extension is doing a lot that we needed to provide functionality for this message
    bar extension. So, we can modify that extension and add our own functionality
    and CSS styles to fulfill our requirement. Now let us start coding:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After defining the class configuration, now let us create the element where
    the message text will be shown—the icon and the close button. Now let us define
    the `afterRender` handler where we will create those elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see how we are creating those elements. We have also defined the click
    handler for the close button. We are calling the `clearMessage` function whenever
    the close button is clicked. We will define this function later in this chapter.
    We need to take care that whenever the container is resized, we also need to resize
    the message bar element. So, now let us add some code to handle this within the
    `afterRender` handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let us define the `showMessage` function, which will be called to show
    the message with the provided configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Within this function, we are checking the provided configuration and preparing
    the configuration properly and sending that to the `setMessage` function. Now
    let us define the `setMessage` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In this function, we are checking whether the message text is empty or not,
    and if it is not empty, we are opening the message bar and calling the `setMessageData`
    function to set the message text, UI, and proper icon for the message bar. Let
    us now define the `setMessageData` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that within this function we are setting the message text, icon,
    and UI. To set the message text we are calling the `setText` function, to change
    the UI we are adding and removing the corresponding CSS classes, and to set the
    icon we are calling the `setIcon` function. Also, when the clear configuration
    option is set to `true`, we are applying the configured timer to hide the message
    bar when the timer is completed. Now let us define the `clearMessage` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: And here in this `clearMessage` function we are hiding the message bar.
  prefs: []
  type: TYPE_NORMAL
- en: Now let us have some test with this extension. Here in the following screenshot
    you can see our message bar extension in action. We have created an Ext JS window
    and added the message bar as a docked item.
  prefs: []
  type: TYPE_NORMAL
- en: '![Planning and coding the message bar](img/3725OS_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can see that the message bar appears with the configured data when you
    click on the **Show message** button. And when we choose the **Invalid icon**
    option, we can see how the message bar changes its look. Here you can see the
    result when we choose the **Invalid icon**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Planning and coding the message bar](img/3725OS_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding screenshots we can see that our extension is working exactly
    the way we wanted.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've developed an Ext JS extension, a fancy animated message
    bar. Throughout this chapter we've learned how easily we can create our own customized
    control. As we've already learned about the power of Ext JS extension and how
    easily we can create Ext JS extensions, we can see that it is really easy to create
    our own control, which helps to fulfill our custom requirements.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will go through another Ext JS extension `BoxSelect`,
    which was originally developed by Kevin Vaughan. This extension is really very
    useful and provides a friendlier combobox for multiple selections that create
    removable labels for each selection easily and individually.
  prefs: []
  type: TYPE_NORMAL
