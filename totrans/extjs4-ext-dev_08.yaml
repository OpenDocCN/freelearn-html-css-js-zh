- en: Chapter 8. Message Bar
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章：消息栏
- en: In this chapter, we are going to develop an Ext JS extension, which will be
    a fancy animated message bar. The message bar will provide the facility for having
    a configurable duration timer for showing the message, a close button, and also
    will be able to customize the look and can provide optional icons for different
    types of states such as valid, invalid, or information during runtime.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开发一个Ext JS扩展，它将是一个花哨的动画消息栏。消息栏将提供显示消息的可配置持续时间计时器、关闭按钮，并且还可以在运行时自定义外观，并为不同类型的状态提供可选的图标，如有效、无效或信息。
- en: 'In this chapter, we will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Functional requirements
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能需求
- en: Planning and coding the message bar
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息栏的规划和编码
- en: Functional requirements
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能需求
- en: We are targeting to develop an Ext JS extension that can be used to show messages.
    This extension can be used within a container as a docked item to show messages.
    The message bar will be closed automatically when the configured timer is completed.
    This message bar will also provide a close button and on clicking on this button
    the message bar will be closed. The opening and closing of the message bar will
    be in a smooth animated form. This message bar can also accept configuration at
    runtime to show several types of state that it can change its look to, and can
    show a proper icon.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是开发一个Ext JS扩展，它可以用来显示消息。这个扩展可以在容器内作为一个停靠项来显示消息。当配置的计时器完成后，消息栏将自动关闭。这个消息栏还将提供一个关闭按钮，点击这个按钮，消息栏将被关闭。消息栏的打开和关闭将以平滑的动画形式进行。这个消息栏还可以在运行时接受配置，以显示它可以改变外观的几种状态，并可以显示适当的图标。
- en: Planning and coding the message bar
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息栏的规划和编码
- en: 'To develop this extension, we can use the Ext JS toolbar and dock it to the
    bottom of the container. Then we can add a functionality where this toolbar can
    show the message text. Then we need to add a functionality when the message bar
    is called to show the message; the message bar appears and disappears when the
    close button is clicked upon or when the configured timer is completed. As per
    our functional requirement, we can see that the Ext JS library provided `StatusBar`
    extension is doing a lot that we needed to provide functionality for this message
    bar extension. So, we can modify that extension and add our own functionality
    and CSS styles to fulfill our requirement. Now let us start coding:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开发这个扩展，我们可以使用Ext JS工具栏并将其停靠到容器的底部。然后我们可以添加一个功能，使这个工具栏可以显示消息文本。然后我们需要添加一个功能，当调用消息栏来显示消息时；消息栏在点击关闭按钮或配置的计时器完成后出现和消失。根据我们的功能需求，我们可以看到Ext
    JS库提供的`StatusBar`扩展做了很多我们需要的，我们需要为这个消息栏扩展提供功能。因此，我们可以修改这个扩展并添加我们自己的功能和CSS样式来满足我们的需求。现在让我们开始编码：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After defining the class configuration, now let us create the element where
    the message text will be shown—the icon and the close button. Now let us define
    the `afterRender` handler where we will create those elements:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义了类配置之后，现在让我们创建一个元素，消息文本将在其中显示——图标和关闭按钮。现在让我们定义`afterRender`处理程序，我们将在这里创建这些元素：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can see how we are creating those elements. We have also defined the click
    handler for the close button. We are calling the `clearMessage` function whenever
    the close button is clicked. We will define this function later in this chapter.
    We need to take care that whenever the container is resized, we also need to resize
    the message bar element. So, now let us add some code to handle this within the
    `afterRender` handler:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到我们是如何创建这些元素的。我们还定义了关闭按钮的点击处理程序。每当关闭按钮被点击时，我们都会调用`clearMessage`函数。我们将在本章后面定义这个函数。我们需要注意，每当容器被调整大小时，我们也需要调整消息栏元素的大小。因此，现在让我们在`afterRender`处理程序中添加一些代码来处理这个问题：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now let us define the `showMessage` function, which will be called to show
    the message with the provided configuration:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们定义`showMessage`函数，它将被调用来显示带有提供配置的消息：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Within this function, we are checking the provided configuration and preparing
    the configuration properly and sending that to the `setMessage` function. Now
    let us define the `setMessage` function:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，我们正在检查提供的配置，并正确地准备配置，然后将其发送到`setMessage`函数。现在让我们定义`setMessage`函数：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In this function, we are checking whether the message text is empty or not,
    and if it is not empty, we are opening the message bar and calling the `setMessageData`
    function to set the message text, UI, and proper icon for the message bar. Let
    us now define the `setMessageData` function:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，我们正在检查消息文本是否为空，如果不为空，我们将打开消息栏并调用 `setMessageData` 函数来设置消息文本、UI 和消息栏的适当图标。现在让我们定义
    `setMessageData` 函数：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can see that within this function we are setting the message text, icon,
    and UI. To set the message text we are calling the `setText` function, to change
    the UI we are adding and removing the corresponding CSS classes, and to set the
    icon we are calling the `setIcon` function. Also, when the clear configuration
    option is set to `true`, we are applying the configured timer to hide the message
    bar when the timer is completed. Now let us define the `clearMessage` function:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，在这个函数中，我们正在设置消息文本、图标和 UI。要设置消息文本，我们调用 `setText` 函数；要更改 UI，我们添加和移除相应的 CSS
    类；要设置图标，我们调用 `setIcon` 函数。此外，当清除配置选项设置为 `true` 时，我们应用配置的计时器，在计时器完成后隐藏消息栏。现在让我们定义
    `clearMessage` 函数：
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: And here in this `clearMessage` function we are hiding the message bar.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，在这个 `clearMessage` 函数中，我们正在隐藏消息栏。
- en: Now let us have some test with this extension. Here in the following screenshot
    you can see our message bar extension in action. We have created an Ext JS window
    and added the message bar as a docked item.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们对这个扩展进行一些测试。在下面的屏幕截图中，你可以看到我们的消息栏扩展正在运行。我们创建了一个 Ext JS 窗口，并将消息栏作为一个停靠项添加进去。
- en: '![Planning and coding the message bar](img/3725OS_08_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![规划与编码消息栏](img/3725OS_08_01.jpg)'
- en: 'You can see that the message bar appears with the configured data when you
    click on the **Show message** button. And when we choose the **Invalid icon**
    option, we can see how the message bar changes its look. Here you can see the
    result when we choose the **Invalid icon**:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，当你点击 **显示消息** 按钮时，消息栏会显示配置的数据。当我们选择 **无效图标** 选项时，我们可以看到消息栏外观的变化。这里你可以看到我们选择
    **无效图标** 时的结果：
- en: '![Planning and coding the message bar](img/3725OS_08_02.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![规划与编码消息栏](img/3725OS_08_02.jpg)'
- en: From the preceding screenshots we can see that our extension is working exactly
    the way we wanted.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的屏幕截图中，我们可以看到我们的扩展确实按照我们的预期工作。
- en: Summary
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we've developed an Ext JS extension, a fancy animated message
    bar. Throughout this chapter we've learned how easily we can create our own customized
    control. As we've already learned about the power of Ext JS extension and how
    easily we can create Ext JS extensions, we can see that it is really easy to create
    our own control, which helps to fulfill our custom requirements.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们开发了一个 Ext JS 扩展，一个花哨的动画消息栏。在本章中，我们学习了如何轻松地创建我们自己的自定义控件。正如我们已经学到的，Ext
    JS 扩展的力量以及我们如何轻松地创建 Ext JS 扩展，我们可以看到创建我们自己的控件确实非常容易，这有助于满足我们的定制需求。
- en: In the next chapter, we will go through another Ext JS extension `BoxSelect`,
    which was originally developed by Kevin Vaughan. This extension is really very
    useful and provides a friendlier combobox for multiple selections that create
    removable labels for each selection easily and individually.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍另一个 Ext JS 扩展 `BoxSelect`，该扩展最初由 Kevin Vaughan 开发。这个扩展非常有用，它提供了一个更友好的
    combobox，可以轻松地为每个选择创建可移除的标签。
