- en: Chapter 6. Working with Advanced Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Working with global APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a circuit breaker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a dead letter queue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging API analytics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Google Analytics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will be introduced to some of the advanced libraries available
    to interface with the service worker. These topics will be pragmatic and you will
    be working with advanced libraries in real-world software development. We will
    also learn about advanced topics, such as circuit breakers and dead letter queues,
    which you might not come across in everyday programming, but are something new
    to learn.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start off this chapter by looking at which global APIs are available for
    the service worker to work with.
  prefs: []
  type: TYPE_NORMAL
- en: Working with global APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Service workers can access some very useful global API methods. Let's look at
    a few of these methods; you might them find handy, and they can be used in your
    own projects. Some of these global API methods include `Cache`, `caches`, `getAll`,
    `Request`, `Response`, and `fetch`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the `index.html`, `index.js`, `service-worker.js`, and `style.css` files
    from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/06/01/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/06/01/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open up a browser and go to `index.html`:![How to do it...](img/B05381_06_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open up the Developer Toolbar (*Cmd* + *Alt* + *I* or *F12*). Now refresh the
    page and look at the message in the console. You will see the global API functions
    logged into the console:![How to do it...](img/B05381_06_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are simply printing some of the APIs available to the service worker to
    the console. Our `service-worker.js` file looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Let's discuss some of these API methods in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Cache
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Cache` interface is available for both service workers and windowed scopes.
    Its main purpose is to provide a storage mechanism for cached `Request` and `Response`
    object pairs.
  prefs: []
  type: TYPE_NORMAL
- en: caches
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The service worker stores assets offline with the `CacheStorage` object, which
    is enabled by the `window.caches` read-only property.
  prefs: []
  type: TYPE_NORMAL
- en: fetch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The global `fetch` performs an asynchronous fetch across the network.
  prefs: []
  type: TYPE_NORMAL
- en: getAll
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is part of Chromium's command API. It gets passed into `Promise.then()`
    as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a circuit breaker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine you run an application that polls an API every 5 seconds, but for some
    reason the service goes down, and you keep polling and getting timeouts. You would
    need to handle the error quickly and gracefully. The circuit breaker pattern detects
    failures and prevents your application from performing actions that are doomed
    to fail.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will look at how to implement a circuit breaker library with
    the service worker.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download all the files from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/06/02/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/06/02/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open up a browser and go to the `index.html` file:![How to do it...](img/B05381_06_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open up the DevTools (*Cmd* + *Alt* + *I* or *F12*) and make sure the **Preserve
    log** checkbox is clicked. Now refresh the page and you will see the log messages
    from the circuit breaker:![How to do it...](img/B05381_06_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before looking at the implementation, let's try to understand how a circuit
    breaker goes about its business.
  prefs: []
  type: TYPE_NORMAL
- en: A circuit breaker monitors for failures. Whenever the failures hit the threshold,
    the circuit breaker trips and any calls to the circuit breaker will return with
    an error. After a suitable interval, the circuit breaker resets the breaker if
    the error no longer occurs.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, we need two thresholds for error handling and resetting at
    a certain time after the circuit breaker trips:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B05381_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Image source: [http://martinfowler.com](http://martinfowler.com)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The majority of our work is going to be in the `circuit-breaker.js` file. If
    you want to learn more about the circuit breaker, follow this link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://martinfowler.com/bliki/CircuitBreaker.html](http://martinfowler.com/bliki/CircuitBreaker.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to configure the circuit breaker. Let''s make 10 blocks with
    a 3-second timeout and a threshold of five. We also define the error threshold
    as fifty percent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We then define a method for `run` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This method executes the fallback function passed in as an argument if the
    circuit is open. Otherwise, it will execute the command. In the `service-worker.js`
    file, we pass in the `fetch` request as the fallback function for the `run` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `forceClose`, `forceOpen`, and `unforce` methods change the state accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `isOpen` function returns a value indicating whether the circuit is open
    or closed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Query the cache first; if the request doesn''t match, send the request to the
    network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We denote our private functions with a `$` prefix. The `$startTicker` function
    starts the timer for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The `$createBlock` function gives us a fresh block to work with, and the `$lastBlock`
    function gives us the last block, as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `$execCmd` method updates the state by incrementing successes and failures:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `$executeFallback` function runs the fallback method we discussed before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `$calcMetrics` function returns the total number of errors, as well as
    the count of successes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The `$updateState` method updates the state after a series of calculations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside our `service-worker.js` file, we are using our circuit-breaker library
    by passing the fetch request via a circuitBreaker object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Implementing a dead letter queue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Dead letter queues are system-generated queues for one or many of the following
    reasons: for storing messages that could not be delivered, queue length limit
    exceeded, message length limit exceeded, or a message being rejected by another
    queue exchange.'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we are implementing a dead letter queue in the service worker.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes: *Setting
    up GitHub pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for
    Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download all the files from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/06/03/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/06/03/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open up a browser and go to `index.html`:![How to do it...](img/B05381_06_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open up the DevTools (*Cmd* + *Alt* + *I* or *F12*) and make sure the **Preserve
    log** checkbox is clicked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the offline option on the **Network** tab:![How to do it...](img/B05381_06_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now refresh the page and you will see the failed request messages, which are
    queued in the dead letter queue we implemented:![How to do it...](img/B05381_06_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The install event handler of the service worker caches the files we are passing
    into the `addAll` method in the `service-worker.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'When we request files over the wire, the `fetch` event handler queries the
    cache to find out whether the requests are matched, and if so, serves them from
    the cache:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, if the response is successful, then we call `replayQueuedRequests()`
    to run any outstanding requests in the queue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'If the fetch fails, we queue the request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Logging API analytics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you were asked to implement API logging for an existing application, what
    will your approach be? The most common approaches are to either change the client-side
    code or the server-side code, or both.
  prefs: []
  type: TYPE_NORMAL
- en: By using a service worker, we can intercept client requests and gather information,
    and then send them to a log API.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes: *Setting
    up GitHub pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for
    Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download all the files from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/06/04/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/06/04/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run `npm install` on the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run `npm start` on the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open up a browser and go to the `index.html` file:![How to do it...](img/B05381_06_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a task and a priority:![How to do it...](img/B05381_06_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now go to the reports page by clicking on the **reports** link:![How to do it...](img/B05381_06_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `index.html` file, we are adding a section with a form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `service-worker.js` file, every time a fetch request is fired, we are
    logging it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The `index.js` file contains the logic for adding and deleting to-dos. We first
    show the list of to-dos at the point of registration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'By clicking on the add button, a new to-do is created and sent to the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'If a to-do was provided, skip it. If no priority is given, the default is `Minor`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We then send the API request, a `POST` request of to-do collection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to retrieve the collection of to-dos, we fire a fetch request with
    the `GET` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we populate the to-dos table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'A function is useful for creating rows for the table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Build a helper function for the table data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Build a delete button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Make a `DELETE` request for deleting to-dos:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The `server.js` file consists of two APIs, of which one is for to-do management
    and the other is for logs.
  prefs: []
  type: TYPE_NORMAL
- en: We are providing a set of default to-dos to start with. These to-dos will appear
    on the top of our list as examples.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The sticky flag will make sure that these to-dos are not removable.
  prefs: []
  type: TYPE_NORMAL
- en: 'The REST API endpoints will manage the requests for adding and deleting to-dos
    and the logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'We create an aggregation function for the log report for `GET`, `DELETE`, and
    `POST` requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `report.html` file, we have a template for rendering log data. We use
    SWIG on the server side to render this template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Working with Google Analytics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google Analytics is a widely used tool today, and the majority of websites use
    it to collect various data from visitors. In this recipe, we are going to look
    at how we can benefit from the service worker when implementing Google Analytics.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*: *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes: *Setting
    up GitHub pages for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for
    Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download all the files from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/06/05/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/06/05/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open up a browser and go to the `index.html` file:![How to do it...](img/B05381_06_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open up the DevTools (*Cmd* + *Alt* + *I* or *F12*), and go to the **Network**
    tab. You will see the /collect requests have a **Status** of 200, which means
    they've been successful:![How to do it...](img/B05381_06_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Refresh the page. You will see the following screen:![How to do it...](img/B05381_06_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Console** tab of the DevTools:![How to do it...](img/B05381_06_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `service-worker.js` file, at the point of activation, `caches.delete(cacheName)`
    will find and delete redundant out of date caches by checking the cache name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The service worker will cache the initial requests; the subsequent requests
    to the same resource will be handled by the `fetch()` event handler of the service
    worker. The `fetch` event handler queries the cache for the requests in the `currentCaches`
    cache and sends back the response to the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'If the response was not found, it will send a fetch request to the network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'If the response for the preceding request was successful, the response will
    be cloned and added to the cache, with the request being the key and the response
    being the value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we make sure that we resolve the current promise as soon as another on
    the array gets resolved:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Implementing read-through caching* recipe in [Chapter 4](ch04.html "Chapter 4. Accessing
    Offline Content with Advanced Techniques"), *Accessing Offline Content with Advanced
    Techniques*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
