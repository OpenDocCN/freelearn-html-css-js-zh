["```js\nimport { createServer } from 'http'\nconst { pid } = process\nconst server = createServer((req, res) => {\n  // simulates CPU intensive work\n  let i = 1e7; while (i > 0) { i-- }\n  console.log(`Handling request from ${pid}`)\n  res.end(`Hello from ${pid}\\n`)\n})\nserver.listen(8080, () => console.log(`Started at ${pid}`)) \n```", "```js\nnpx autocannon -c 200 -d 10 http://localhost:8080 \n```", "```js\nimport { createServer } from 'http'\nimport { cpus } from 'os'\nimport cluster from 'cluster'\nif (cluster.isMaster) {                                    // (1)\n  const availableCpus = cpus()\n  console.log(`Clustering to ${availableCpus.length} processes`)\n  availableCpus.forEach(() => cluster.fork())\n} else {                                                   // (2)\n  const { pid } = process\n  const server = createServer((req, res) => {\n    let i = 1e7; while (i > 0) { i-- }\n    console.log(`Handling request from ${pid}`)\n    res.end(`Hello from ${pid}\\n`)\n  })\n  server.listen(8080, () => console.log(`Started at ${pid}`))\n} \n```", "```js\nif (cluster.isMaster) {\n  // fork()\n} else {\n  // do work\n} \n```", "```js\nObject.values(cluster.workers).forEach(worker => worker.send('Hello from the master')) \n```", "```js\nStarted 14107\nStarted 14099\nStarted 14102\nStarted 14101 \n```", "```js\nnpx autocannon -c 200 -d 10 http://localhost:8080 \n```", "```js\n// ...\n} else {\n  // Inside our worker block\n  setTimeout(\n    () => { throw new Error('Ooops') },\n    Math.ceil(Math.random() * 3) * 1000\n  )\n  // ... \n```", "```js\n// ...\nif (cluster.isMaster) {\n  // ...\n  cluster.on('exit', (worker, code) => {\n    if (code !== 0 && !worker.exitedAfterDisconnect) {\n      console.log(\n        `Worker ${worker.process.pid} crashed. ` +\n        'Starting a new worker'\n      )\n      cluster.fork()\n    }\n  })\n} else {\n  // ...\n} \n```", "```js\n[...]\n8k requests in 10.07s, 964 kB read\n674 errors (7 timeouts) \n```", "```js\nimport { once } from 'events'\n// ...\nif (cluster.isMaster) {\n  // ...\n  process.on('SIGUSR2', async () => {                        // (1)\n    const workers = Object.values(cluster.workers)\n    for (const worker of workers) {                          // (2)\n      console.log(`Stopping worker: ${worker.process.pid}`)\n      worker.disconnect()                                    // (2)\n      await once(worker, 'exit')\n      if (!worker.exitedAfterDisconnect) continue\n      const newWorker = cluster.fork()                       // (4)\n      await once(newWorker, 'listening')                     // (5)\n    }\n  })\n} else {\n  // ...\n} \n```", "```js\nps -af \n```", "```js\nkill -SIGUSR2 <PID> \n```", "```js\nRestarting workers\nStopping worker: 19389\nStarted 19407\nStopping worker: 19390\nStarted 19409 \n```", "```js\nimport { createServer } from 'http'\nconst { pid } = process\nconst server = createServer((req, res) => {\n  let i = 1e7; while (i > 0) { i-- }\n  console.log(`Handling request from ${pid}`)\n  res.end(`Hello from ${pid}\\n`)\n})\nconst port = Number.parseInt(\n  process.env.PORT || process.argv[2]\n) || 8080\nserver.listen(port, () => console.log(`Started at ${pid}`)) \n```", "```js\nnpm install forever -g \n```", "```js\nforever start app.js 8081\nforever start app.js 8082\nforever start app.js 8083\nforever start app.js 8084 \n```", "```js\nforever list \n```", "```js\ndaemon off;                                                ## (1)\nerror_log /dev/stderr info;                                ## (2)\nevents {                                                   ## (3)\n  worker_connections 2048;\n}\nhttp {                                                     ## (4)\n  access_log /dev/stdout;\n  upstream my-load-balanced-app {\n    server 127.0.0.1:8081;\n    server 127.0.0.1:8082;\n    server 127.0.0.1:8083;\n    server 127.0.0.1:8084;\n  }\n  server {\n    listen 8080;\n    location / {\n      proxy_pass http://my-load-balanced-app;\n    }\n  }\n} \n```", "```js\nnginx -c ${PWD}/nginx.conf \n```", "```js\nnginx -s reload \n```", "```js\nimport { createServer } from 'http'\nimport consul from 'consul'\nimport portfinder from 'portfinder'\nimport { nanoid } from 'nanoid'\nconst serviceType = process.argv[2]\nconst { pid } = process\nasync function main () {\n  const consulClient = consul()\n  const port = await portfinder.getPortPromise()            // (1)\n  const address = process.env.ADDRESS || 'localhost'\n  const serviceId = nanoid()\n  function registerService () {                             // (2)\n    consulClient.agent.service.register({\n      id: serviceId,\n      name: serviceType,\n      address,\n      port,\n      tags: [serviceType]\n    }, () => {\n      console.log(`${serviceType} registered successfully`)\n    })\n  }\n  function unregisterService (err) {                        // (3)\n    err && console.error(err)\n    console.log(`deregistering ${serviceId}`)\n    consulClient.agent.service.deregister(serviceId, () => {\n      process.exit(err ? 1 : 0)\n    })\n  }\n  process.on('exit', unregisterService)                     // (4)\n  process.on('uncaughtException', unregisterService)\n  process.on('SIGINT', unregisterService)\n  const server = createServer((req, res) => {               // (5)\n    let i = 1e7; while (i > 0) { i-- }\n    console.log(`Handling request from ${pid}`)\n    res.end(`${serviceType} response from ${pid}\\n`)\n  })\n  server.listen(port, address, () => {\n    registerService()\n    console.log(`Started ${serviceType} at ${pid} on port ${port}`)\n  })\n}\nmain().catch((err) => {\n  console.error(err)\n  process.exit(1)\n}) \n```", "```js\nimport { createServer } from 'http'\nimport httpProxy from 'http-proxy'\nimport consul from 'consul'\nconst routing = [                                            // (1)\n  {\n    path: '/api',\n    service: 'api-service',\n    index: 0\n  },\n  {\n    path: '/',\n    service: 'webapp-service',\n    index: 0\n  }\n]\nconst consulClient = consul()                                // (2)\nconst proxy = httpProxy.createProxyServer()\nconst server = createServer((req, res) => {\n  const route = routing.find((route) =>                      // (3)\n    req.url.startsWith(route.path))\n  consulClient.agent.service.list((err, services) => {       // (4)\n    const servers = !err && Object.values(services)\n      .filter(service => service.Tags.includes(route.service))\n    if (err || !servers.length) {\n      res.writeHead(502)\n      return res.end('Bad gateway')\n    }\n    route.index = (route.index + 1) % servers.length         // (5)\n    const server = servers[route.index]\n    const target = `http://${server.Address}:${server.Port}`\n    proxy.web(req, res, { target })\n  })\n})\nserver.listen(8080, () => {\n  console.log('Load balancer started on port 8080')\n}) \n```", "```js\nconsul agent -dev \n```", "```js\nforever start loadBalancer.js \n```", "```js\ncurl localhost:8080/api \n```", "```js\nBad Gateway \n```", "```js\nforever start --killSignal=SIGINT app.js api-service\nforever start --killSignal=SIGINT app.js api-service\nforever start --killSignal=SIGINT app.js webapp-service \n```", "```js\ncurl localhost:8080/api \n```", "```js\napi-service response from 6972 \n```", "```js\napi-service response from 6979 \n```", "```js\nimport { request } from 'http'\nimport getStream from 'get-stream'\nconst servers = [\n  { host: 'localhost', port: 8081 },\n  { host: 'localhost', port: 8082 }\n]\nlet i = 0\nexport function balancedRequest (options) {\n  return new Promise((resolve) => {\n    i = (i + 1) % servers.length\n    options.hostname = servers[i].host\n    options.port = servers[i].port\n    request(options, (response) => {\n      resolve(getStream(response))\n    }).end()\n  })\n} \n```", "```js\nimport { balancedRequest } from './balancedRequest.js'\nasync function main () {\n  for (let i = 0; i < 10; i++) {\n    const body = await balancedRequest({\n      method: 'GET',\n      path: '/'\n    })\n    console.log(`Request ${i} completed:`, body)\n  }\n}\nmain().catch((err) => {\n  console.error(err)\n  process.exit(1)\n}) \n```", "```js\nnode app.js 8081\nnode app.js 8082 \n```", "```js\nnode client.js \n```", "```js\nimport { createServer } from 'http'\n**import** **{ hostname }** **from****'os'**\n**const** **version =** **1**\nconst server = createServer((req, res) => {\n  let i = 1e7; while (i > 0) { i-- }\n  res.end(`Hello from **${****hostname()****}** **(v****${version}****)**`)\n})\nserver.listen(8080) \n```", "```js\nHello from my-amazing-laptop.local (v1) \n```", "```js\n{\n  \"name\": \"my-simple-app\",\n  \"version\": \"1.0.0\",\n  \"main\": \"app.js\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"start\": \"node app.js\"\n  }\n} \n```", "```js\nFROM node:14-alpine\nEXPOSE 8080\nCOPY app.js package.json /app/\nWORKDIR /app\nCMD [\"npm\", \"start\"] \n```", "```js\ndocker build . \n```", "```js\nSending build context to Docker daemon  7.168kB\nStep 1/5 : FROM node:14-alpine\n ---> ea308280893e\nStep 2/5 : EXPOSE 8080\n ---> Running in 61c34f4064ab\nRemoving intermediate container 61c34f4064ab\n ---> 6abfcdf0e750\nStep 3/5 : COPY app.js package.json /app/\n ---> 9d498d7dbf8b\nStep 4/5 : WORKDIR /app\n ---> Running in 70ea26158cbe\nRemoving intermediate container 70ea26158cbe\n ---> fc075a421b91\nStep 5/5 : CMD [\"npm\", \"start\"]\n ---> Running in 3642a01224e8\nRemoving intermediate container 3642a01224e8\n ---> bb3bd34bac55\nSuccessfully built bb3bd34bac55 \n```", "```js\ndocker run -it -p 8080:8080 bb3bd34bac55 \n```", "```js\nHello from f2ffa85c8ff8 (v1) \n```", "```js\ndocker build -t hello-web:v1 .\ndocker run -it -p 8080:8080 hello-web:v1 \n```", "```js\ndocker build -t hello-web:v1 . \n```", "```js\nkubectl create deployment hello-web --image=hello-web:v1 \n```", "```js\ndeployment.apps/hello-web created \n```", "```js\nkubectl get deployments \n```", "```js\nNAME        READY   UP-TO-DATE   AVAILABLE   AGE\nhello-web   1/1     1            1           7s \n```", "```js\nkubectl get pods \n```", "```js\nNAME                         READY   STATUS    RESTARTS   AGE\nhello-web-65f47d9997-df7nr   1/1     Running   0          2m19s \n```", "```js\nkubectl expose deployment hello-web --type=LoadBalancer --port=8080\nminikube service hello-web \n```", "```js\nHello from hello-web-65f47d9997-df7nr (v1) \n```", "```js\nkubectl scale --replicas=5 deployment hello-web \n```", "```js\nNAME        READY   UP-TO-DATE   AVAILABLE   AGE\nhello-web   5/5     5            5           9m18s \n```", "```js\nNAME                         READY   STATUS    RESTARTS   AGE\nhello-web-65f47d9997-df7nr   1/1     Running   0          9m24s\nhello-web-65f47d9997-g98jb   1/1     Running   0          14s\nhello-web-65f47d9997-hbdkx   1/1     Running   0          14s\nhello-web-65f47d9997-jnfd7   1/1     Running   0          14s\nhello-web-65f47d9997-s54g6   1/1     Running   0          14s \n```", "```js\ndocker build -t hello-web:v2 . \n```", "```js\nkubectl set image deployment/hello-web hello-web=hello-web:v2 --record \n```", "```js\ndeployment.apps/hello-web image updated \n```", "```js\nHello from hello-web-567b986bfb-qjvfw (**v2**) \n```", "```js\nkubectl scale --replicas=0 deployment hello-web\nkubectl delete -n default service hello-web\nminikube stop \n```"]