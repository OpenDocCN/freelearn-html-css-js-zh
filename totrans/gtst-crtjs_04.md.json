["```js\nvar tween = createjs.Tween.get(myTarget).to({x:300},400).set({label:\"hello!\"}).wait(500).to({alpha:0,visible:false},1000).call(onComplete);\n```", "```js\nvar canvas = document.getElementById(\"canvas\");\nvar stage = new createjs.Stage(canvas);\n\nvar ball = new createjs.Shape();\nball.graphics.beginFill(\"#FF0000\").drawCircle(0, 0, 50);\n\nball.x = 200;\nball.y = -50;\n\nvar tween = createjs.Tween.get(ball) to({\n  y: 300\n}, 1500, createjs.Ease.bounceOut);\n\nstage.addChild(ball);\ncreatejs.Ticker.addEventListener(\"tick\", stage);\n```", "```js\nsetTransform([x=0] [y=0] [scaleX=1] [scaleY=1] [rotation=0] [skewX=0] [skewY=0] [regX=0] [regY=0])\n```", "```js\ndisplayObject.setTransform(100, 100, 2, 2);\n```", "```js\nvar angle = 0;\nwindow.ball;\nvar canvas = document.getElementById(\"canvas\");\nvar stage = new createjs.Stage(canvas);\n\nball = new createjs.Shape();\nball.graphics.beginFill(\"#FF0000\").drawCircle(0, 0, 50);\n\nball.x = 200;\nball.y = 300;\n\nstage.addChild(ball);\n\nfunction tick(event) {\n  angle += 0.025;\n  var scale = Math.cos(angle);\n\n  ball.setTransform(ball.x, ball.y, scale, scale);\n  stage.update(event);\n}\n\ncreatejs.Ticker.addEventListener(\"tick\", tick);\n```", "```js\ndata = {\n  // list of images or image URIs to use. SpriteSheet can handle preloading.\n  // the order dictates their index value for frame definition.\nimages: [image1, \"path/to/image2.png\"],\n\n  // the simple way to define frames, only requires frame size because frames are consecutive:\n  // define frame width/height, and optionally the frame count and registration point x/y.\n  // if count is omitted, it will be calculated automatically based on image dimensions.\nframes: {width:64, height:64, count:20, regX: 32, regY:64},\n\n// OR, the complex way that defines individual rects for frames.\n  // The 5th value is the image index per the list defined in \"images\" (defaults to 0).\nframes: [\n  // x, y, width, height, imageIndex, regX, regY\n  [0,0,64,64,0,32,64],\n  [64,0,96,64,0]\n],\n\n  // simple animation definitions. Define a consecutive range of frames (begin to end inclusive).\n  // optionally define a \"next\" animation to sequence to (or false to stop) and a playback \"speed\".\nanimations: {\n  // start, end, next, speed\nrun: [0,8],\njump: [9,12,\"run\",2]\n}\n\n// the complex approach which specifies every frame in the animation by index.\nanimations: {\n  run: {\n  frames: [1,2,3,3,2,1]\n  },\n  jump: {\n    frames: [1,4,5,6,1],\n    next: \"run\",\n    speed: 2\n  },\nstand: { frames: [7] }\n  }\n}\n```", "```js\nvar data = {\n  images: [\"sprites.jpg\"],\n  frames: { width:50, height:20 },\n  animations: { \n    run:[0,4], \n    jump:[5,8,\"run\"]\n  }\n};\n```", "```js\nvar data = {\n  \"animations\":\n  {\n    \"run\": [0, 15]\n  },\n  \"images\": [\"running.png\"],\n  \"frames\": {\n    \"height\": 70,\n    \"width\": 51,\n    \"regX\": 0,\n    \"regY\": 0,\n    \"count\": 16\n  }\n};\n```", "```js\nstage = new createjs.Stage(document.getElementById(\"canvas\"));\n\nvarss = new createjs.SpriteSheet({\n  \"animations\":\n  {\n    \"run\": [0, 15]\n  },\n  \"images\": [\"running.png\"],\n  \"frames\": {\n    \"height\": 70,\n    \"width\": 51,\n    \"regX\": 0,\n    \"regY\": 0,\n    \"count\": 16\n  }\n});\n\nvar grant = new createjs.Sprite(ss, \"run\");\n\nstage.addChild(grant);\ncreatejs.Ticker.setFPS(40);\ncreatejs.Ticker.addEventListener(\"tick\", stage);\n```"]