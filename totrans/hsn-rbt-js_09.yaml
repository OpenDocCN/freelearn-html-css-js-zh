- en: Getting the Information You Need
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've let our Pi discover its immediate surroundings, and let it show data through
    various means. We've even given them the ability to move! But there's a cosmos
    of data to be collected, and sometimes the data you want can't be collected locally.
    That's where the internet, and initiatives to make more and more data freely available,
    come into play. In this chapter, we'll look into connecting your Pi to the internet
    and obtaining weather information in order to create a weather dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Why connect your NodeBots to the internet?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting weather data on our Pi with OpenWeatherMap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a weather dashboard with an LCD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scraping websites for data with your Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this project, you'll want your Pi and an LCD character display with an I²C
    interface. You can purchase and solder together an LCD ([https://www.adafruit.com/product/198](https://www.adafruit.com/product/198))
    and backpack ([https://www.adafruit.com/product/292](https://www.adafruit.com/product/292))
    from Adafruit, or a pre-built module via SainSmart ([https://www.amazon.in/SainSmart-Serial-Module-Shield-Arduino/dp/B00AE0FRDQ/](https://www.amazon.in/SainSmart-Serial-Module-Shield-Arduino/dp/B00AE0FRDQ/)).
  prefs: []
  type: TYPE_NORMAL
- en: You'll also want to make sure your Pi can access the outside world with internet
    access, as we set it up to in [Chapter 1](bab2feb9-9667-4f8b-bb2e-1702009b87b4.xhtml),
    *Setting Up Your Development Environment.*
  prefs: []
  type: TYPE_NORMAL
- en: The code for this chapter is available at: [https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter09](https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter09).
  prefs: []
  type: TYPE_NORMAL
- en: Why connect your NodeBots to the internet?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While sensors can provide local data, sometimes you want to display data from
    far away or data from sensors attached to other devices. This is where we can
    really leverage Node.js and npm packages in our favor for our Raspberry Pi projects.
  prefs: []
  type: TYPE_NORMAL
- en: Using the power of npm modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Back in [Chapter 2](307e1c9c-bd59-475c-ae7b-91ca5970794e.xhtml), *Creating Your
    First Johnny-Five Project*, we used the `color npm` module to manage colors for
    us. We've used the `barcli` module to get our sensor data into bar graphs. Now
    it's time to use the request `npm` module to retrieve data from websites for us!
    This allows us to simplify development over microcontrollers that use C by not
    having to create HTTP requests by hand each time, and being able to use asynchronous
    calls.
  prefs: []
  type: TYPE_NORMAL
- en: 'For those unfamiliar with the request module, we''ll use it to make HTTP GET
    requests like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We give the `request.get()` call a URL and a callback that receives an error
    (that is, hopefully, null), a response object, and a body which is conveniently
    extracted for us from the full request object (which can be huge and complex).
  prefs: []
  type: TYPE_NORMAL
- en: Using the data you collect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use data you collect from the internet for many different projects:'
  prefs: []
  type: TYPE_NORMAL
- en: I have a string of lights in my lab that are controllable by Twitch live chat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can compare information in a local project to data from far away
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can just use random data! Markov chains and other semi-random data can make
    for fun projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Just a few things you''ll want to know that will be going into your data collection
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: Is this a REST API? Will I get JSON data back or will it need to be parsed?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Is this scraping an HTTP website? How will I parse out the HTML data I''m looking
    for? (Caution: this gets tricky and can be brittle if the website you''re scraping
    changes often.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do I need an API key or JSON Web Token (JWT) for authentication purposes?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some things to keep in mind
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some things to keep in mind when doing internet data collection on
    your Pi projects:'
  prefs: []
  type: TYPE_NORMAL
- en: Wi-Fi uses a lot of power, so if you're running your project on a battery, you'll
    need to keep power consumption in mind.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use your robotics powers for good, don't build projects that do harm, collect
    information they shouldn't, or have other dubious purposes!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parsing out huge JSON or HTML responses can take a while on the Pi, so take
    a look at what you're getting if your project is running a bit slowly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting weather data on our Pi with OpenWeatherMap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to build a weather bot for this one, and while we could use a temperature
    sensor, that'd only tell us what it's like indoors, and usually we'd like to see
    what the weather's like outside before we head out the door. So we're going to
    use the OpenWeatherMap API to get data and display it on a character LCD; but
    let's walk before we can run by starting with getting the data from the API to
    the Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Getting an OpenWeatherMap API key
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, you''ll need to sign up for an account at [https://openweathermap.org/](https://openweathermap.org/),
    and generate an API key. Then, click your username in the upper-left corner and
    select API Keys from the tabs that appear near the top of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5ea5f6af-f9d7-42fc-b514-ffb3398d58c4.png)'
  prefs: []
  type: TYPE_IMG
- en: Generate an API key on this page and keep the tab open; we'll use it in the
    next section to get the info we need.
  prefs: []
  type: TYPE_NORMAL
- en: Next, open the API link in a separate tab; you'll see the main API function
    calls on this page. The one we're looking for is right at the top – current weather
    data.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c10209e8-451e-475f-975f-4236ce2f3bf3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click the API doc button and we''ll figure out what URL we''ll need to make
    a request to. At the time of writing, the URL is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you go to that URL in your browser with your city and API key filled in,
    you should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If those temperatures look a little high to you (even for Austin, TX), that's
    because they're in degrees Kelvin. We'll pass the units parameter in our URL in
    our project set to `metric` for degrees Celsius or 'imperial' for degrees Farenheit.
  prefs: []
  type: TYPE_NORMAL
- en: Now we're ready to code in the `npm` request module and get our data into our
    Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Bringing in request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s write a basic program without Johnny-Five to collect our data on the
    Pi before adding in our LCD. In a file on your Pi or ready to be moved to your
    Pi called `weather-test.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Parsing the response
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The JSON object that is printed out by the console looks something like this
    (formatted for easier reading):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s a lot of weather data! Luckily, because the request `npm` module was
    passed the `json`: true property in the options, it assumes that anything passed
    back is JSON and parses it for you, so you can access data properties right away:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Building a weather dashboard with an LCD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have our weather data, it's time to wire our character LCD to our
    Pi and use it to show the weather data. We'll explore the Johnny-Five LCD object,
    wire it to the Pi, and code it all together with Johnny-Five and the `npm` request
    module.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an LCD to the Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Refer to the following diagram for the connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6662c3f9-43c8-4744-b1a7-3b6a465954fd.png)'
  prefs: []
  type: TYPE_IMG
- en: Keep in mind that backpack with the I²C interface is on the back of the LCD;
    I moved it forward in the diagram to help you see the connections to the Pi.
  prefs: []
  type: TYPE_NORMAL
- en: The LCD object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's take a look at the LCD object in the Johnny-Five documentation in order
    to figure out how to construct and use our LCD in our weather dashboard code.
  prefs: []
  type: TYPE_NORMAL
- en: Constructing our LCD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Usually, an LCD without the I2C can take up to eight pins! That's a lot, and
    I like as few wires as possible in my robotics projects (easier to debug later).
    With our backpack, we only need the two power pins and two I2C pins. But that
    also means we'll need to find our controller—if you are using the Adafruit backpack,
    then our controller is the `PCF8574`; if you're bought another backpack, make
    sure it uses one of the PCF8574x chips!
  prefs: []
  type: TYPE_NORMAL
- en: We'll also need the size of the LCD in rows and columns of characters—most are
    2 rows by 16 columns, but you may have gone bigger with the 4 row by 20 columns
    character model. In either case, use whichever works for the LCD you attached
    to the backpack.
  prefs: []
  type: TYPE_NORMAL
- en: 'With all that in mind, our constructor should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now that we've constructed our LCD, let's see what we need to get set up and
    get characters on the screen!
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the LCD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First thing we need to do is turn the backlight on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we''ll want to make the blinking cursor disappear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now, we're ready to learn about moving the cursor, printing statements, and
    clearing the LCD.
  prefs: []
  type: TYPE_NORMAL
- en: Printing to and clearing the LCD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we print, we want to make sure that the LCD is cleared out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'And that the cursor is in the home (row 0, col 0) position:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we can print to the LCD:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Note, you can also chain LCD functions together, as Johnny-Five returns the
    LCD object from every object function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have everything we need to start making our dashboard!
  prefs: []
  type: TYPE_NORMAL
- en: Coding it all together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to take what we''ve learned in this chapter and put it together. Start
    by creating a file called `weather-dashboard.js` in your `project` folder, and
    setting up your Johnny-Five, Raspi-IO, and request  libraries, constructing your
    `Board` object, and creating your `board.on(''ready'')` handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, inside the `board.on(''ready'')` handler, construct and set up our LCD:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we''ll create a function that gets the weather data, and set it on an
    interval of one minute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In the request callback, we''ll clear, and write to, the LCD:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, call the `getWeather()` function at the start to prevent the project
    from taking a full minute before showing anything:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have the full code together, load the `project` folder onto our Pi
    the following, navigate to the folder in your Pi SSH session, and run the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: You should have the temperature and conditions for the city you put in appear
    on the LCD, and they should refresh every minute.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we''ve seen a project where the Pi pulls from a nice neat JSON REST
    API, let''s take a crack at getting data from a bit more difficult source: HTML
    scraping.'
  prefs: []
  type: TYPE_NORMAL
- en: Project – scraping data from websites with your Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML scraping is the process of making a request to a webpage in order to obtain
    the HTML itself, so data can be parsed out of it. We're going to build a bot that
    shows whether `johnny-five.io` is up or not by scraping [https://downforeveryoneorjustme.com/](https://downforeveryoneorjustme.com/),
    a site that tells you if a site is down from multiple sources.
  prefs: []
  type: TYPE_NORMAL
- en: You don't need to change the wiring setup from the weather dashboard for this
    project, our current hardware is all we need.
  prefs: []
  type: TYPE_NORMAL
- en: Scraping downforeveryoneorjustme.com for johnny-five.io
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, go to [https://downforeveryoneorjustme.com/](https://downforeveryoneorjustme.com/)
    and enter `johnny-five.io` in the URL input, and hit *Enter*. You should end up
    at [https://downforeveryoneorjustme.com/johnny-five.io](https://downforeveryoneorjustme.com/johnny-five.io),
    where hopefully you''ll see a rather simple page that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f20a3b72-33f2-4fa0-ba9d-5a021f349d43.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now to prepare for our web scraping code, we need to know what HTML element
    we''re looking for as well as the URL. Right-click the It''s just you. and select
    Inspect (or whichever variation it is on your browser. In Chrome, you''ll see
    something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/11d40637-b797-45ae-abc4-a9b83c7c9f88.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is one of the perils of web scraping: there''s not always a lot to go
    on to find your element. The closest we get is the first paragraph (`p` tag) of
    the div with ID `domain-main-content`. We''ll want to see if it contains the string
    `It''s just you.` in order to determine if `johnny-five.io` is up.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have our URL and intended element and parsing criteria, let's start
    coding by getting the HTML into our Johnny-Five project.
  prefs: []
  type: TYPE_NORMAL
- en: Making the HTTP request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new file in your `project` folder called `scraper-j5-alert.js`. Start
    with the normal libraries, `Board` construction, and `board.on(''ready'')` handler.
    Don''t forget to include the request `npm` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, inside your `board.on(''ready'')` handler, construct and set up your
    LCD object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we''re going to create a function to get the HTML from [https://downforeveryoneorjustme.com/johnny-five.io](https://downforeveryoneorjustme.com/johnny-five.io)
    and place it on a five-minute interval. Lastly, we call it so we don''t have to
    wait five minutes for the first result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Load the `project` folder onto your Pi, navigate to the folder in you Pi SSH
    session, and run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'You should, maybe after a few seconds, see something like this in the console
    (I just screenshotted a small part):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6305a9db-d760-4a5d-ab20-be8e9b7d979b.png)'
  prefs: []
  type: TYPE_IMG
- en: But how do we get the info out of that giant string? Regular Expressions? Please,
    no, not those. Luckily, as Stilwell's Law (see [Chapter 2](307e1c9c-bd59-475c-ae7b-91ca5970794e.xhtml),
    *Creating Your First Johnny-Five Project*) states, if you can think of functionality,
    there exists a package on `npm` for it. In this case, we have the cheerio module
    that allows us to parse and query the HTML string with a JQuery-style API.
  prefs: []
  type: TYPE_NORMAL
- en: Using Cheerio to get the element we want
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In your `project` folder, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The basics on cheerio are you parse text by calling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, query using the `$` variable like you would with JQuery (see *Further
    reading* if you''ve never used JQuery for a link to a great primer on selecting
    elements):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Parsing the HTML and showing the result
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is all we''ll need to scrape the HTML and get the status. Inside `scraper-alert-j5.js`,
    we''re going to add cheerio''s `require()` call to the top of the file with the
    other requires:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we''re going to modify the callback that fires when request is done fetching
    the HTML. We''re going to add the cheerio call to load the text and look for the
    first `p` child of the div with ID `domain-main-content`, and pull out its text.
    Then, we''ll see if that text contains `It''s just you.` and write to the LCD:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re ready to load it and run it! Load your project onto your Pi, navigate
    to the folder in your Pi SSH session, and run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: And you should see whether Johnny-Five is up or not on your LCD!
  prefs: []
  type: TYPE_NORMAL
- en: You may have noticed I put `possibly` in the down condition. This is because,
    as I mentioned before, HTML scraping is very brittle.  If they change It's just
    you. to It is just you., our code will break! So I like to remind the LCD viewer
    that it may not necessarily be down. Again, this is an example of why, if you
    can find it, it's better to get data from an API. But sometimes there's no real
    choice.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we built a weather dashboard using an I²C LCD screen knowledge
    of npm modules and using REST APIs, and leveraged the power of Node.js and the
    Pi together. You can go forward to build so many new projects with these skills;
    if you can get the information from the internet, you can use it in your Johnny-Five
    and Pi projects.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why is the Pi well suited for projects that require remote data?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What considerations need to be made when making regular web requests from the
    Pi?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why can we chain the LCD object calls, such as `LCD.clear().home()`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why do we use an I2C backpack with our LCD?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Would we need more components to use the LCD without the backpack?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Does `LCD.on()` turn on the entire LCD? If not, what does it do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**The request npm module page**: [https://www.npmjs.com/package/request](https://www.npmjs.com/package/request)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The full OpenWetherMap API**: [https://openweathermap.org/api](https://openweathermap.org/api)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Johnny-Five LCD documentation**: [http://johnny-five.io/api/lcd/](http://johnny-five.io/api/lcd/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The cheerio npm module page**: [https://www.npmjs.com/package/cheerio](https://www.npmjs.com/package/cheerio)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JQuery ''Selecting Elements'' tutorial**: [https://learn.jquery.com/using-jquery-core/selecting-elements/](https://learn.jquery.com/using-jquery-core/selecting-elements/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
