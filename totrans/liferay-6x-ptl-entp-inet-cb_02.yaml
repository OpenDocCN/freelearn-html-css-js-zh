- en: Chapter 2. Authentication and Registration Process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Changing the default authentication settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up e-mail notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing the registration form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overriding the default login page with the administrator-defined page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a password policy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integration with CAS SSO
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CAS and Liferay users' database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Liferay and the LDAP integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The magic trio: Liferay, CAS, and LDAP'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The authentication and registration processes are very important to build intranet
    systems. In this type of software, it is necessary to protect data against non-authorized
    users. We decided to describe typical solutions that are commonly used in many
    projects. It will help you configure the out-of-the box authentication system
    in Liferay and define the password policy. You will also learn about integration
    with the most popular single sign-on mechanism (SSO). The purpose of an SSO is
    to permit a user to access multiple applications while providing their credentials
    only once. The **Central Authentication Service** (**CAS**) is a single sign-on
    protocol for the Web. It is also a software package that implements this protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the default authentication settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Liferay provides a built-in authentication mechanism that, by default, allows
    users to log in using their e-mail address. Additionally, there are a number of
    functionalities, such as automatic log in or forgotten password functionality,
    that assist users and help them go through the authentication process. However,
    in some cases, the standard authentication behavior must be modified.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Log in to Liferay as a user with administrator credentials. By default, the
    credentials are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**E-mail**: test@liferay.com'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password**: test'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to change the default authentication settings, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in as an administrator and go to **Admin** | **Control Panel** | **Configuration**
    | **Portal Settings** | **Authentication section**:![How to do it…](img/image00299.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that you are in the **General** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the option that you prefer from the **Authentication type** drop-down
    list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable/disable the **Allow users to automatically login?** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable/disable the **Allow users to request forgotten passwords?** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable/disable the **Allow users to request password reset links?** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable/disable the **Allow strangers to create accounts?** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable/disable the **Allow strangers to create accounts with a company email
    address?** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable/disable the **Require strangers to verify their email address?** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In order to set only the authentication type for a particular instance of the
    **Sign in** portlet, you do not need to perform the additional steps in the **Control
    Panel** scope. In this case, it is enough to change the configuration in the Sign
    in portlet. Perform these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the public page on which the **Sign in** portlet should be placed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Applications** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the **Sign in** portlet using the search option or by browsing the list
    of available portlets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** link next to the portlet name. The **Sign in** portlet
    with basic configuration will be added to the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Sign in** portlet configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the option that you prefer from the **Authentication type** list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Liferay Portal, a user can be authenticated by their e-mail address, a screen
    name or a numerical sequence, or an auto-generated user ID. There are two places
    that allow you to set the preferred authentication method: the portal settings
    section and the configuration screen of the Sign in portlet. The Control Panel
    settings enable you to define the default authentication type. This setting can
    also be modified by the properties in `portal-ext.properties`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that more important configuration comes from GUI (Control Panel) than
    from `portal-ext.properties`.
  prefs: []
  type: TYPE_NORMAL
- en: However, the Sign in portlet configuration option allows you to decide which
    way of authentication will be used for a particular Sign in portlet. Within the
    portlet, it is possible to choose the *default* option or one of the three available
    options, described previously. The default option is the same as the `company.security.auth.type`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to selecting the **Authentication** type, Liferay also allows you
    to set additional parameters that influence the authorization and authentication
    processes. By default, all options, except the **Require strangers to verify their
    email address?** option, are enabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Allow users to automatically login?** option allows you to decide whether
    the site should remember the user''s login and show the **Remember me** checkbox
    within the **Sign in** form. This option can be enabled (true) or disabled (false)
    by setting the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The **Allow users to request forgotten passwords?** option is responsible for
    enabling or disabling the forgotten password functionality. This functionality
    makes it possible for users to request for a new password to be sent to their
    e-mail addresses. By default, this option is enabled in the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The **Allow users to request password reset links?** option is responsible
    for enabling or disabling the reset password functionality. This functionality
    allows users to request for a password reset link to be sent to their e-mail addresses.
    This option is represented by the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The **Allow strangers to create accounts?** option is responsible for the availability
    of the link to create an account. This option lets you decide whether users who
    are guests to the site are allowed to create accounts by themselves. By default,
    it is enabled as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The **Allow strangers to create accounts with a company email address?** option
    allows you to decide whether a new account can be created using the e-mail address
    in the domain provided in the General section of the Portal settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The **Require strangers to verify their email address?** option enables an
    e-mail verification functionality. This functionality also can be enabled in `portal-ext.properties`
    by setting the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Although the **Authentication** section consists of a number of tabs providing
    a range of additional authentication methods, all the settings gathered on the
    **General** tab of the **Authentication** tab affect only the Liferay functionality.
    They have no influence on the integration options grouped on the remaining tabs.
  prefs: []
  type: TYPE_NORMAL
- en: 'In some cases, the preceding configuration is not enough. For instance, many
    companies have their own privacy policy that requires an `HTTPS` connection. Liferay
    provides several settings in `portal.properties`, which can be overridden in `portal-ext.properties`,
    they are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Properties | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `company.security.auth.requires.https=false` | Set this to `true` to ensure
    that users login with HTTPS |'
  prefs: []
  type: TYPE_TB
- en: '| `company.security.auto.login.max.age=31536000` | Specify max age (in seconds)
    of the browser cookie that enables the *Remember me* feature |'
  prefs: []
  type: TYPE_TB
- en: '| `company.security.login.form.autocomple=true` | Allows users to autocomplete
    the login form based on their previously entered values |'
  prefs: []
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Modification in the `portal-ext.properties` file is needed for a server restart.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two more options strictly connected to the login and logout mechanisms.
    The first one, the **Default Landing Page** field, is located in the **Portal
    Settings** web page. This field allows you to indicate the page a user will be
    redirected to after completing the authorization and authentication. The second,
    the **Default Logout Page** field, located in **Portal Settings**, allows you
    to define the page a user will be redirected to after logging out.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to set custom values to these fields, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Admin** | **Control Panel** | **Configuration** | **Portal Settings**
    | **General**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Default Landing Page** to the address of the page you want users to go
    to after logging in, for example, `/web/guest/login`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Default Logout Page** to the address of the page you want users to go
    to after logging out, for example, `/web/guest/logout`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'These settings could also be overridden by `portal-ext.properties` by the following
    names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For information on overriding the default login page, refer to the *Overriding
    the default login page with the administrator defined page* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up e-mail notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Liferay, there are four automatically sent e-mail notifications. They are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Account Created Notification**, which is sent when a user successfully creates
    a new account'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Email Verification Notification**, which provides the e-mail verification
    link and code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password Changed Notification**, which informs a user that their password
    has been changed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password Reset Notification**, which enables a user to reset their current
    password by providing the password reset URL'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This recipe provides information on how these default notifications can be customized.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Make sure that the Java mail session is properly configured. To check whether
    it works, look at `portal-ext.properties` and find and/or configure the following
    settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to change the sender''s name and e-mail address, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in as an administrator and go to **Admin** | **Control Panel** | **Configuration**
    | **Portal Settings** | **Email Notifications**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure you are in the **Sender** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide the sender's name and e-mail address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In order to set **Account Created Notification**, perform these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Admin** | **Control Panel** | **Configuration** | **Portal Settings**
    | **Email Notifications**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Account Created Notification** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Enabled** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide **Subject**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide the **Body with Password** message text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide the **Body without Password** message text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following screenshot captures the preceding steps
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00300.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In addition to **Account Created Notification**, Liferay provides three tabs
    to customize. They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Email Verification Notification**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password Changed Notification**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password Reset Notification**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In order to set **Email Verification Notification**, **Password Changed Notification**,
    or **Password Reset Notification**, perform these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Admin** | **Control Panel** | **Configuration** | **Portal Settings**
    | **Email Notifications**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Email Verification Notification**, **Password Changed Notification**,
    or **Password Reset Notification** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide the subject and body of the message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every e-mail notification consists of the subject and the body of the message.
    Both the subject and the body of the message can be composed using a set of available
    variables called terms (different for each notification) and custom text. The
    text of the body of the message can also be provided with simple text styles.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth noticing that the **Account Created Notification** tab provides
    an additional **Enabled** option that allows you to decide whether this particular
    notification should be sent or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, `portal.properties` contains basic e-mail notification settings
    (default sender name, default sender e-mail, subject, body, and so on). Of course,
    all these settings can be customized to specific requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The preceding configuration defines the default settings for every type of notification.
    For instance, the `admin.email.password.reset.body` property defines the HTML
    template for the password reset action, which is located in the `com/liferay/portlet/admin/dependencies/email_password_reset_body.tmpl`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For information on how to configure SMTP servers, refer to the *Configuring
    Liferay with the SMTP server* recipe in [Chapter 11](part0080.xhtml#aid-2C9D01
    "Chapter 11. Quick Tricks and Advanced Knowledge"), *Quick Tricks and Advanced
    Knowledge*.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the registration form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The content of the registration form and the behavior of the system after completing
    the registration process can vary, depending on the system's functional and non-functional
    requirements. The default configuration of the registration form enables you to
    gather the data strictly required to create an account. The configuration also
    provides some additional fields, such as birth date or gender, which may not be
    always desirable. This recipe describes how to change the default set of registration
    form fields and modify their basic preferences and system behavior within the
    registration and authorization processes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to customize the registration form, perform these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Login as an administrator and go to **Admin** | **Control Panel** | **Configuration**
    | **Portal settings** | **Users**:![How to do it…](img/image00301.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that you are in the **Fields** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable/disable the **Terms of Use Required** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable/disable the **Autogenerate User Screen Names** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable/disable the **Last Name Required** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable/disable the **Enable Birthday** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable/disable the **Enable Gender** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are three tabs that group the registration form settings: the **Fields**
    tab, the **Reserved Credentials** tab, and the **Default User Associations** tab.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Fields** tab consists of the list of options that are responsible for
    the content of the registration form and behavior of the system when a user logs
    in for the first time. Each of these options has its own representation in `portal.properties`,
    which can be overridden by `portal-ext.properties`. Remember that the highest
    priorities have settings that come from **Control Panel**. There are following
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Terms of Use Required** option enables and disables the terms of use
    screen, which is shown after the user''s first authorization. By default, it is
    enabled:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The **Autogenerate User Screen Names** option disables the screen name field
    in the registration form and sets Liferay to create the screen name automatically
    from the e-mail address. If this option is enabled, the screen name is generated
    from the user''s e-mail address (local part of the e-mail address). By default,
    it is disabled:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The **Last Name Required** option sets the last name as a required field. By
    default, it is disabled:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The **Enable Birthday** option allows you to decide whether the birthday field
    should be available in the registration form. By default, it is enabled:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The **Enable Gender** option allows you to decide whether the gender field
    should be available in the registration form. By default, it is enabled:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The **Reserved Credentials** tab allows you to define screen names and e-mail
    addresses that are reserved and cannot be used to create user accounts both by
    users and administrators. It also can be overwritten in the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The **Default User Associations** tab provides a set of fields that enable you
    to assign sites, organization sites, roles, and user groups to each newly created
    user.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, it is also possible to extend the functionality on existing users
    using the **Apply to Existing Users** option. However, changes will take effect
    when the user signs in.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is possible to change the default behavior of the create account link in
    the Sign in form and use a custom page with the custom create account portlet
    instead of the default (Sign in portlet) one. In order to do so, define the URL
    where the custom registration portlet is placed and set a property in the `portal-ext.properties`
    file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For information about adding users, refer to the *Adding a new user* recipe
    in [Chapter 3](part0030.xhtml#aid-SJGS1 "Chapter 3. Working with a Liferay User
    / User Group / Organization"), *Working with a Liferay User / User Group / Organization*.
  prefs: []
  type: TYPE_NORMAL
- en: Overriding the default login page with the administrator defined page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Liferay provides the possibility to use or replace the default dialog login
    feature with a custom login page. The custom page can be used to present some
    additional information such as instructions, description of benefits, and so on.
    This recipe provides guidelines on how to set such a page within the intranet.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to set a custom page in the login process, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in as an administrator and go to **Admin** | **Site Administration** | **Pages**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that you are in the **Public Pages** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add page** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a name for the page (for instance, login).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable the **Hide from Navigation Menu** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add page** button. The new page will be created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the page's details by clicking on the page in the tree that was created
    and copy the **Friendly URL** value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the created page by typing (or pasting) its address in the browser's address
    bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the add button (this is a **+** sign on the left-hand side).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Applications** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the Sign in portlet using the search function or by browsing the list of
    available portlets,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** link next to the portlet name. The Sign in portlet with
    basic configuration will be added to the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set URL to this site in the `portal-ext.properties` file by defining the `auth.login.site.url=/login`
    property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If there is a custom login portlet and custom page to login, it is required
    that you disable the dialog login functionality by setting the `login.dialog.disabled=true`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As described previously, the first step is to create a new standard page containing
    a Sign in portlet. This page will be used as a new login page. The second step
    is to override the default Liferay configuration and set it to use this newly
    created login page whenever the user is navigating a site and authentication is
    needed. In order to do so, you need to set the new link in the `auth.login.site.url`
    property. It is also important to remember that when redirecting the *Sign in*
    link to the custom page, it is necessary to disable the standard login popup dialog.
    It can be achieved by setting the `login.dialog.disabled` property to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to learn about creating pages or defining page templates, refer
    to the following recipes from [Chapter 4](part0037.xhtml#aid-1394Q1 "Chapter 4. Liferay
    Site Configuration"), *Liferay Site Configuration*:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Creating and customizing private and public pages for the site*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Using page templates and site templates for quick site and page creation*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a password policy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Liferay password policy creator allows you to set the password life cycle
    and rules of employing it. You can decide whether the password should be changed.
    You can also specify the password syntax, the expiration rules, the lockout options,
    and the password history.
  prefs: []
  type: TYPE_NORMAL
- en: The default password policy provided by Liferay is very simple. It enables you
    to change the password of users and specifies that the reset password link should
    be valid for one day. This recipe provides a detailed description on how to create
    a new, more restricted password policy.
  prefs: []
  type: TYPE_NORMAL
- en: The password policy in this example will require the users to provide eight-character
    passwords, which cannot be found in a dictionary. Users must include numbers and
    uppercase letters in the password, and it must be changed every sixty days (it
    should not be possible to set the password that has been used last ten times).
    Additionally, the system will count the failure login attempts and block the account
    for 10 minutes after three unsuccessful tries.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to set the described password policy, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in as an administrator and go to **Admin** | **Control Panel** | **Users**
    | **Password policies**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button.![How to do it…](img/image00302.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a name for the new password policy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a description of the new password policy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable the **Changeable** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Reset Ticket Max Age** option to **1 Day**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable the **Syntax Checking Enabled** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disable the **Allow Dictionary Words** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Minimum Length** to **8**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Minimum Upper Case** to **1**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Minimum Numbers** to **1**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable the **History Enabled** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **History Count** option to **10**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable the **Expiration Enabled** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Maximum Age** to **8 Weeks**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Warning Time** to **6 Days**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Lockout Enabled** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Maximum Failure** to **3**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Lockout Duration** to **10 Minutes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are five groups of options in the new password policy form: **General**,
    **Password Syntax Checking**, **Password History**, **Password Expiration**, and
    **Lockout sections**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The General section consists of the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Changeable** option allows you to decide whether users can change their
    passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Change Required** option determines whether a user is required to change
    the password on first login
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Minimum Age** option specifies the amount of time a user must wait before
    they will be allowed to change the password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Reset Ticket Max Age** option determines for how long a password reset
    link is valid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Password Syntax Checking** section consists of the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Syntax Checking Enabled** option determines whether the password syntax
    should be checked
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Allow Dictionary** option determines whether common words are allowed
    to be used in passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Minimum Alpha Numeric** option allows you to set the required minimum
    number of alphanumeric letters in the password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Minimum Length** option determines the required minimum length of the
    password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Minimum Lower Case** option determines the required minimum number of
    lowercase letters in the password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Minimum Numbers** option determines the required minimum number of numbers
    in the password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Minimum Symbols** option determines the required minimum number of symbols
    in the password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Minimum Upper Case** option determines the minimum number of uppercase
    letters in the password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Regular Expression** option determines the validation pattern for the
    user's password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Password History** section consists of the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: The **History Enabled** option allows you to decide whether the portal should
    keep a history of the user's previous passwords in order to prevent them from
    reusing an old password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **History Count** option determines the number of previous passwords, which
    are kept in the history and cannot be used while setting a new password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Password Expiration** section consists of the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Expiration Enabled** option allows you to decide whether users are forced
    to periodically change their passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Maximum Age** option determines for how long a password is valid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Warning Time** specifies the amount of time before the password expiration
    date; a notification will be sent after this date
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Grace Limit** specifies the number of times a user can log in after their
    password has expired
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Lockout** section consists of the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Lockout Enabled** option lets you to count the unsuccessful login attempts
    and enable account-locking mechanisms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Maximum Failure** option specifies the maximum number of unsuccessful
    login attempts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Reset Failure Count** option specifies the amount of time that an information
    of unsuccessful logins is kept
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Lockout Duration** option indicates the amount of time that a user's account
    remains blocked and cannot be used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integration with CAS SSO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CAS is a single sign-on protocol. The official specification introduces it
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"The Central Authentication Service (CAS) is a single-sign-on / single-sign-off
    protocol for the web. It permits a user to access multiple applications while
    providing their credentials (such as userid and password) only once to a central
    CAS Server application."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Liferay provides ready-to-use functionality based on JASIG CAS (CAS became
    a **Java in Administration Special Interest Group** (**JASIG**) project in December
    2004 and is now also known as JASIG CAS). In many projects, especially internal
    ones (for instance, intranet) it is necessary to provide single sign-on. CAS integrates
    with the following authentication mechanisms:'
  prefs: []
  type: TYPE_NORMAL
- en: Active Directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JAAS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JDBC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LDAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Legacy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RADIUS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SPNEGO
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trusted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: X.509 certificates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This recipe covers the basic steps to install a CAS server and to integrate
    it with Liferay.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to install and run a CAS server that works with Liferay, there are
    four main steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Install the CAS system on the Tomcat server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure an HTTPS connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the CAS server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure Liferay Portal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing the CAS system
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first step is installing the CAS system on the Apache Tomcat server. The
    CAS can be deployed in the same instance as Liferay, but in the real-world example,
    it is a dedicated application server. We assume the first approach. The second
    important assumption is that we rely on Tomcat hot-deploy of archives. So, make
    sure that the `autoDeploy` option is set to `true`. This is a default setting.
    To install CAS, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the newest version of CAS from [http://downloads.jasig.org/cas/](http://downloads.jasig.org/cas/)
    and unzip archive. At this moment, 4.0 is the newest version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Deploy `cas-server-4.0.0/modules/cas-server-webapp-4.0.0.war` into the Tomcat
    server by copying the `cas-server-webapp-4.0.0.war` application into the `${TOMCAT_HOME}/webapps`
    folder or using Tomcat Manager (if it is available). In the `catalina.out` logfile,
    you should see similar information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Configuring the HTTPS connection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The next important step is to establish an HTTPS connection between Liferay
    and CAS. By default, CAS sends the single sign-on cookie (CASTGC) only over secure
    connections. In our case, we will use a Java *keytool* to generate the SSL certificate.
    Java keytool is a key and certificate-management utility. It allows users to manage
    their own public/private key pairs and certificates. Basically, this tool stores
    keys and certificates in the *keystore*. This is a repository implemented as a
    file and placed on the local hard drive. Our goal is to generate a certificate,
    export it as a file, and place it in the truststore (`$JAVA_HOME/jre/lib/security/cacerts`).
    These instructions set up Tomcat''s keystore file with a self-signed certificate
    (self-signed certificates should *never* be used for anything beyond development
    environment):'
  prefs: []
  type: TYPE_NORMAL
- en: 'In any directory, type the command that generates a new key and puts it in
    the local keystore called `keystore.jks`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure that you provide the `$JAVA_HOME/jre/lib/security/cacerts` keystore
    password. Both passwords must be the same.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following list shows how the key-generation process looks:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The value of the `first and last name` field mentioned previously must be set
    to a fully qualified domain name. On Windows, the fully qualified machine name
    appears as a full computer name. On Linux, this is a host name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Export the key to a file called `tomcat.cert`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import the key to the `$JAVA_HOME/jre/lib/security/cacerts` truststore:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check whether your certificate was successfully imported in the Java truststore:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the `server.xml` file in the `${TOMCAT_HOME}/conf` folder and uncomment
    the SSL section to open up port 8443:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Setting the CAS server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this step, we will define a map of users that can be authenticated in our
    Liferay system. To achieve it, go to the `${TOMCAT_HOME}/webapps/cas-server-webapp-4.0.0/WEB-INF`
    folder, edit `deployerConfigContext.xml`, and modify the bean definition.
  prefs: []
  type: TYPE_NORMAL
- en: 'Set users list by adding them into `users` property. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that a user must be created in the Liferay Portal.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Liferay Portal
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The last set of steps is a Liferay configuration. Our goal is to change the
    authentication type, which should be based on `screenName` (login), and enable
    the CAS authentication method. To achieve this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Liferay, set the authentication type based on `screenName` (login). The
    portal can authenticate users based on their e-mail addresses, `screenName`, or
    `userId`. Change the default option and set a new value of the authentication
    type in `${liferay.home}/portal-ext.properties`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enable the CAS authentication by setting specific properties in `${liferay.home}/portal-ext.properties`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the CAS server and Liferay. When the homepage loads, click on the login
    link. The system should redirect the user to the CAS login page with the HTTPS
    protocol.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Try authenticating yourself with the following credentials:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Central Authentication Service** (**CAS**) provides a single sign-on
    for the applications. The main purpose of SSO is to provide user''s credentials
    only once and permit them to access all the client''s applications that support
    the SSO protocol. Therefore, CAS is divided into two parts: CAS client and CAS
    server. For clarity sake, this means that the CAS Client component (jar) is placed
    in the Liferay libraries, and the CAS server is a standalone application. The
    CAS server is responsible for authenticating users. The CAS client acquires and
    protects the identity of the granted users. Communication between clients and
    server can be implemented by four protocols:'
  prefs: []
  type: TYPE_NORMAL
- en: CAS 3.0 (enabled by default)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SAML 1.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OAuth (1.0, 2.0)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s try analyzing the login process step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: User clicks on the **login** button in the Liferay site. The system redirects
    the user to the CAS application at `https://localhost:8443/cas-server-webapp-4.0.0/login?service=https://localhost:8443/c/portal/login`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'User types the correct login and password and invokes the submit action. The
    CAS server authenticates the user and sets the CASTGC cookie (for example, `CASTGC=TGT-4-HASH-cas01.example.org`).
    Then, the authenticated user goes back to Liferay with the Service Ticket (ST)
    ticket parameter: `https://localhost:8443/c/portal/login?ticket=ST-6-HASH-cas01.example.org`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next step is calling the validation. It is a background process that sends
    the GET request via back-channel communication and gets an XML response with username
    details: `https://localhost:8443/cas-server-webapp-4.0.0/proxyValidate?{PARAMETERS}`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: User is successfully logged in into the Liferay system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Liferay, there are two classes that implement CAS authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: '`com.liferay.portal.servlet.filters.sso.cas.CASFilter`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`com.liferay.portal.security.auth.CASAutoLogin`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CASFilter` is responsible for the CAS authentication process, especially for
    login action. The most important piece of code calls validation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Filter validates ticket and sets login as a session attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '`CASAutoLogin` reads the session `CAS_LOGIN` attribute and tries to find the
    user in the database. If the user exists in the database, the `AutoLogin` process
    returns the user''s credentials and successfully logs them in into Liferay Portal.'
  prefs: []
  type: TYPE_NORMAL
- en: The CAS server, without any external authentication handler, is useless. So,
    the following recipes will show how to integrate the CAS server and Liferay users'
    database or LDAP server.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information on CAS and LDAP configuration, refer to the following
    recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*CAS and the Liferay user''s database*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Liferay and the LDAP integration*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*The magic trio: Liferay, CAS, and LDAP*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CAS and the Liferay user's database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following recipe presents an idea on how to use the Liferay user functionality
    so it is authenticated by the CAS server. This idea may be used instead of LDAP
    or Active Directory systems. In small companies, where Liferay will be the main
    system that contains all user details, it would be a great concept to implement
    SSO in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: Liferay provides user details such as login and password to the CAS server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a user tries to login to the Liferay Portal, the CAS server *asks* the
    Liferay database and checks the user's data correctness
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is in continuation with the previous one. To be ready, check whether
    the CAS server is correctly installed and is communicating with Liferay (the CAS
    client). To check it, try authenticating yourself as a default Liferay user via
    CAS by invoking `https://localhost:8443/cas-server-webapp-4.0.0/login`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since 6.2 version, Liferay uses the PBKDF2WithHmacSHA1/160/128000 algorithm
    for password encryption. To configure the CAS server without any customization,
    it is necessary to change the password encryption (for instance, the SHA algorithm).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warning! Changing the encryption is dangerous for existing accounts. All passwords
    stored in the database will be lost. If this happens, it is necessary to set a
    new password for every user.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to configure the CAS server to work with the Liferay database follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following libraries to `${TOMCAT_HOME}/webapps/cas-server-webapp-4.0.0/WEB-INF/lib`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`c3p0` (for instance, `c3p0-0.9.1.2.jar`): Download it from [https://github.com/swaldman/c3p0](https://github.com/swaldman/c3p0)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cas-server-support-jdbc-4.0.0.jar`: Copy it from `cas-server-4.0.0/modules/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Change the password encryption by setting the new one in `${liferay.home}/portal-ext.properties`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the `passwordEncoder` bean in the CAS server. Open `${TOMCAT_HOME}/webapps/cas-server-webapp-4.0.0/WEB-INF/deployerConfigContext.xml`
    and define the bean:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The last thing is to set `dataSource` and change `primaryAuthenticationHandler`
    in `deployerConfigContext.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set a new bean with `id="dataSource"`:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Find and change the bean with `id="primaryAuthenticationHandler"`:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The CAS server supports many common kinds of authentication systems, such as
    database, LDAP, OpenID, OAuth, Radius, Windows (NTLM), and so on. In this recipe,
    we have shown an example configuration, where Liferay database provides user detail
    to the CAS server. This type of handler is called `QueryDatabaseAuthenticationHandler`.
    CAS provides two other database handlers called `SearchModeSearchDatabaseAuthenticationHandler`
    and `BindModeSearchDatabaseAuthenticationHandler`. Information about these handlers
    is available at [https://github.com/Jasig/cas/wiki/Configuring-Authentication-Components](https://github.com/Jasig/cas/wiki/Configuring-Authentication-Components).
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned at the beginning, both Liferay and CAS have to use the same password
    encryption algorithm (SHA1). It has to be the same because the CAS server authenticates
    users by comparing the (hashed) user's password against the password stored in
    the database. To define database connection, it was necessary to create a new
    bean called `dataSource`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last and most important step was defining the handler with the following
    query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: This query returns an encrypted password by the SHA1 algorithm from the Liferay
    users database. It is enough to correctly compare encoded passwords and authenticate
    the user.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Many systems provide authentication by e-mail address instead of `screenName`
    (login). By default, Liferay implements this kind of authentication. So, let''s
    change the earlier recipe and deploy e-mail authentication. To achieve it, there
    are two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the authentication type in `${liferay.home}/portal-ext.properties`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `primaryAuthenticationHandler` in the CAS `deployerConfigContext.xml`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: At this time, we decided to use a different `authenticationHandler` called `SearchModeSearchDatabaseAuthenticationHandler`
    to show a variety of possible ways to achieve database communication.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second and very important fact is that it is not a good idea (for security
    purposes) to use the SHA1 or MD5 algorithm without SALT. Moreover, Liferay developers
    decided to use very strong encryption:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"PBKDF2 (Password-Based Key Derivation Function 2) is a key derivation function
    that''s part of RSA''s PKCS (Public-Key Cryptography Standards) series: PKCS #5,
    version 2.0\. It''s also described in the IETF''s RFC 2898\. The PBKDF2WithHmacSHA1/160/128000
    algorithm uses a keyed-hash message authentication code using SHA-1 and generates
    160-bit hashes using 128,000 rounds."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If someone wants to use the same algorithm in the CAS Server, it is necessary
    to implement new `passwordEncoder` and define it in the CAS `deployerConfigContext.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '`LiferayPasswordEncoder` must implement the `org.jasig.cas.authentication.handler.PasswordEncoder`
    interface.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For information on CAS and LDAP, refer to the *Liferay and the LDAP integration*
    and *The magic trio: Liferay, CAS, and LDAP* recipes.'
  prefs: []
  type: TYPE_NORMAL
- en: Liferay and the LDAP integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In many companies, LDAP (OpenLDAP, Active Directory, or other LDAP implementations)
    is the system that keeps users' details, especially login, password, e-mail address,
    name, and surname. It is a good idea to integrate Liferay with LDAP. Fortunately,
    Liferay developers thought about it. Liferay provides out-of-the-box functionality
    that can read and import users from LDAP.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start the configuration, you need to correctly install an LDAP server such
    as OpenLDAP or Active Directory, or ApacheDS. As an example of integration, it
    will be used online as a LDAP test server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Server: `ldap.forumsys.com`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Port: `389`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bind DN: `cn=read-only-admin,dc=example,dc=com`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bind Password: `password`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All user passwords are: `password`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two ways of configuration: by GUI or by portal properties. In this
    case, we will show configuration via **Control Panel**.'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your Liferay instance as a super administrator (by default, it is
    `joebloggs/test`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Admin** | **Control Panel** | **Configuration** | **Portal Settings**
    | **Authentication**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **LDAP** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Enabled** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button in the LDAP servers section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill in the form with the following data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Server name**: `<YOUR_SERVER_NAME>` (for example, `ldap.forumsys.com`).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Default values**: `<CHOOSE ONE OF THEM>` (for example, other directory server).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Connection section**: These settings contain the basic connection to LDAP.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Base Provider URL**: `<ldap://host:port>` (for example, `ldap://ldap.forumsys.com:389`).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Base DN**: `<Distinguished Name>` (for example, `dc=example,dc=com`).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Principal**: `<LDAP administrator ID>` (for example, `cn=read-only-admin,dc=example,dc=com`).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Credentials**: `<LDAP administrator''s password>` (in our case is `password`).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Check the configuration and click on the **Test LDAP Connection** button. It
    should be displaying the following message:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Liferay has successfully connected to the LDAP server.**'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Users section**: These settings cover search filter and user mapping functionality.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Values in this form strictly depend on the LDAP directory schema. Administrator
    should know which fields from LDAP can map as Liferay values.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Authentication Search Filter**: `<Search criteria for users login>` (for
    example, (`uid=@screen_name@`)).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Import Search Filter**: `<Way to identify users>` (for example, (`objectClass=inetOrgPerson`)).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User Mapping section** (maps the LDAP attribute as a Liferay value):'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Screen Name** = `uid`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Email Address** = `mail`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Password** = `userPassword`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '**First Name** = `cn`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Last Name** = `sn`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: After configuration, try to check the correctness by clicking on **Test LDAP
    Users**. The system should list users from the LDAP directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Groups section**: These settings map LDAP user groups to Liferay user groups.
    It is not required to fill this form. If an administrator wants to configure it,
    the steps are very similar to the example shown previously. There may be a problem
    with the **Import search filter** field. There is usually the `(objectClass=groupOfNames)`
    or `(objectClass=groupOfUniqueNames)` value.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Save the **LDAP Servers** and **Portal Settings** forms.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log out and try to log in as an LDAP user, such as `newton`/`password`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are several parameters that are unavailable in the GUI. If there are any
    problems with configuration, check out `portal.properties` under the key prefix,
    `ldap.*`. LDAP configuration is a vast subject and could be difficult to understand
    and properly configure.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Liferay provides an Authentication Pipeline mechanism that allows you to define
    many authentication types. By default, there is an enabled `LdapAuth` authenticator,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: In general, every login process, instead of default authentication, tries to
    invoke a list of authenticators defined in `auth.pipeline.pre`. If any authenticator
    returns a success, it means the user is correctly logged in to the Liferay Portal.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `LDAPAuth` class implements the `com.liferay.portal.security.auth.Authenticator`
    interface, which provides the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`authenticateByEmailAddress`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`authenticateByScreenName`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`authenticateByUserId`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To communicate with the LDAP server, Liferay uses classes from the `javax.naming.ldap`
    package. It provides support for LDAPv3 extended operations and controls.
  prefs: []
  type: TYPE_NORMAL
- en: 'The magic trio: Liferay, CAS, and LDAP'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next challenge is to connect Liferay, CAS, and LDAP authentication. In this
    combination, the CAS system provides single sign-on mechanism, the LDAP system
    stores the user's credentials, and Liferay uses both systems to authenticate users
    coming from LDAP. This configuration is used in many deployments. Furthermore,
    we dare to say that it should be considered as a standard solution when people
    think about intranet in their companies.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Study the *Integration with CAS SSO* and *Liferay and the LDAP integration*
    recipes explained previously. Set up the system in accordance with these recipes.
    Check out the connection to the LDAP Server from Liferay and verify that the CAS
    authentication is enabled.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To integrate Liferay with CAS Server where LDAP is the authentication provider,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Find the archive with the CAS server downloaded from [http://downloads.jasig.org/cas/](http://downloads.jasig.org/cas/).
    Copy `cas-server-4.0.0/modules/cas-server-support-ldap-4.0.0.jar` to the `${TOMCAT_HOME}/webapps/cas-server-webapp-4.0.0/WEB-INF/lib`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By default, CAS uses the `ldaptive` library for communication with LDAP. Download
    `ldaptive.jar` ([http://central.maven.org/maven2/org/ldaptive/ldaptive/1.0.3/ldaptive-1.0.3.jar](http://central.maven.org/maven2/org/ldaptive/ldaptive/1.0.3/ldaptive-1.0.3.jar))
    and place this archive in the `${TOMCAT_HOME} /webapps/cas-server-webapp-4.0.0/WEB-INF/lib`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `${TOMCAT_HOME}/webapps/cas-server-webapp-4.0.0/WEB-INF/deployerConfigContext.xml`
    file and specify the following beans:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, define the bean that will be a primary authentication handler and set
    it as LDAP authentication.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure that you are not using a previously configured database authentication
    handler.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The primary authentication handler contains mapping fields between LDAP and
    CAS. Keys are LDAP attribute names, and values are CAS attribute names. This definition
    has a reference to the authenticator bean, which will be described in the next
    section:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The authenticator bean defines the method of authentication. It contains references
    to the DN (distinguished name) resolver and authentication handler, which is responsible
    for establishing connection. It should be included in our `deployerConfigContext.xml`
    file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Distinguished name resolver defines resolution implementation. In this case,
    `FormatDnResolver` is used:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, bean definitions are responsible for establishing connection with LDAP.
    There are many settings, which are described in the `ldaptive` library documentation:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following properties to the `${TOMCAT_HOME}/webapps/cas-server-webapp-4.0.0/WEB-INF/cas.properties`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check in the `portal-ext.properties` file whether CAS authentication is enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Restart the Tomcat server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After finishing the configuration described previously, it should be possible
    to authenticate to Liferay by the CAS server and LDAP user credentials (login
    and password) such as `newton`/`password`.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Configuration for the LDAP schema in many cases is different. It is not possible
    to provide the correct configuration that will be flexible. In the configuration
    mentioned previously, highlighted phrases are sensitive and should be fitted to
    a specific LDAP schema.
  prefs: []
  type: TYPE_NORMAL
- en: The biggest advantage of this solution is that there is only one place that
    stores users' credentials (LDAP server) and exactly one place that provides authentication
    mechanism (CAS SSO). Liferay is just a client of these services.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00303.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s follow this process:'
  prefs: []
  type: TYPE_NORMAL
- en: A new user wants to log in to the Liferay system. Liferay doesn't have any information
    about this user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Liferay checks whether CAS SSO is enabled and redirects the user to the CAS
    authentication provider.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The CAS authentication provider renders the login form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user types the LDAP login and LDAP password and sends the request to the
    CAS server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The CAS server asks the LDAP server for credentials and checks the answer from
    LDAP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the answer is OK, the CAS server sends a success message to the Liferay authentication
    ticket.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Liferay checks whether it has that user in its database. If it doesn't, it asks
    the LDAP server about user details such as login, name, surname, e-mail address,
    and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Liferay creates account in its database and successfully logs in a new user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For information on how to export Liferay users, refer to the *Exporting users*
    recipe in [Chapter 3](part0030.xhtml#aid-SJGS1 "Chapter 3. Working with a Liferay
    User / User Group / Organization"), *Working with a Liferay User / User Group
    / Organization*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For information on how to build a scalable infrastructure, refer to the *Scalable
    infrastructure* recipe in [Chapter 12](part0088.xhtml#aid-2JTHG1 "Chapter 12. Basic
    Performance Tuning"), *Basic Performance Tuning*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
