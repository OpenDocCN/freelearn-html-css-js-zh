["```js\nclass Payload { \n  weight: number; \n} \n\nclass Engine { \n  thrust: number; \n} \n\nclass Stage { \n  engines: Engine[]; \n} \n\n```", "```js\nfunction Rocket() { \n  this.payload = { \n    name: 'cargo ship' \n  }; \n\n  this.stages = [ \n    { \n      engines: [ \n        // ... \n      ] \n    } \n  ]; \n} \n\nvar rocket = new Rocket(); \n\n```", "```js\nfunction buildRocket() { \n  var rocket = {}; \n\n  rocket.payload = { \n    name: 'cargo ship' \n  }; \n\n  rocket.stages = [ \n    { \n      thrusters: [ \n        // ... \n      ] \n    } \n  ]; \n\n  return rocket; \n} \n\nvar rocket = buildRocket(); \n\n```", "```js\nclass RocketFactory { \n  buildRocket(): Rocket { } \n\n  createPayload(): Payload { } \n\n  createStages(): Stage[] { } \n} \n\n```", "```js\ncreatePayload(): Payload { \n  return new Payload(0); \n} \n\ncreateStages(): Stage[] { \n  let engine = new Engine(1000); \n  let stage = new Stage([engine]); \n\n  return [stage]; \n} \n\n```", "```js\nbuildRocket(): Rocket { \n  let rocket = new Rocket(); \n\n  let payload = this.createPayload(); \n  let stages = this.createStages(); \n\n  rocket.payload = payload; \n  rocket.stages = stages; \n\n  return rocket; \n} \n\n```", "```js\nlet rocketFactory = new RocketFactory(); \nlet rocket = rocketFactory.buildRocket(); \n\n```", "```js\nclass Satellite extends Payload { \n  constructor( \n    public id: number \n  ) { \n    super(200); \n  } \n} \n\n```", "```js\nclass FirstStage extends Stage { \n  constructor() { \n    super([ \n      new Engine(1000), \n      new Engine(1000), \n      new Engine(1000), \n      new Engine(1000) \n    ]); \n  } \n} \n\n```", "```js\nclass SecondStage extends Stage { \n  constructor() { \n    super([ \n      new Engine(1000) \n    ]); \n  } \n} \n\n```", "```js\ntype FreightRocketStages = [FirstStage, SecondStage]; \n\nclass FreightRocketFactory extends RocketFactory { \n  createPayload(): Satellite { } \n\n  createStages(): FreightRocketStages { } \n} \n\n```", "```js\nnextSatelliteId = 0; \n\ncreatePayload(): Satellite { \n  return new Satellite(this.nextSatelliteId++); \n} \n\n```", "```js\ncreateStages(): FreightRocketStages { \n  return [ \n    new FirstStage(), \n    new SecondStage() \n  ]; \n} \n\n```", "```js\nbuildRocket(): Rocket { \n  let rocket = this.createRocket(); \n\n  let payload = this.createPayload(); \n  let stages = this.createStages(); \n\n  rocket.payload = payload; \n  rocket.stages = stages; \n\n  return rocket; \n} \n\ncreateRocket(): Rocket { \n  return new Rocket(); \n} \n\n```", "```js\nlet rocket = FreightRocketFactory.buildRocket() as FreightRocket; \n\n```", "```js\ninterface Payload { \n  weight: number; \n} \n\ninterface Stage { \n  engines: Engine[]; \n} \n\ninterface Rocket { \n  payload: Payload; \n  stages: Stage[]; \n} \n\n```", "```js\ninterface RocketFactory { \n  createRocket(): Rocket; \n  createPayload(): Payload; \n  createStages(): Stage[]; \n} \n\n```", "```js\nclass Client { \n  buildRocket(factory: RocketFactory): Rocket { \n    let rocket = factory.createRocket(); \n\n    rocket.payload = factory.createPayload(); \n    rocket.stages = factory.createStages(); \n\n    return rocket; \n  } \n} \n\n```", "```js\ninterface RocketFactory<T extends Rocket> { \n  createRocket(): T; \n  createPayload(): Payload; \n  createStages(): Stage[]; \n} \n\n```", "```js\n  buildRocket<T extends Rocket>( \n    factory: RocketFactory<T> \n  ): T { } \n\n```", "```js\nclass ExperimentalRocket implements Rocket { } \n\nclass ExperimentalRocketFactory \nimplements RocketFactory<ExperimentalRocket> { } \n\n```", "```js\nlet client = new Client(); \nlet factory = new ExperimentalRocketFactory(); \nlet rocket = client.buildRocket(factory); \n\n```", "```js\nclass ExperimentalPayload implements Payload { \n  weight: number; \n} \n\nclass ExperimentalRocketStage implements Stage { \n  engines: Engine[]; \n} \n\nclass ExperimentalRocket implements Rocket { \n  payload: ExperimentalPayload; \n  stages: [ExperimentalRocketStage]; \n} \n\n```", "```js\nclass ExperimentalRocketFactory \nimplements RocketFactory<ExperimentalRocket> { \n  createRocket(): ExperimentalRocket { \n    return new ExperimentalRocket(); \n  } \n\n  createPayload(): ExperimentalPayload { \n    return new ExperimentalPayload(); \n  } \n\n  createStages(): [ExperimentalRocketStage] { \n    return [new ExperimentalRocketStage()]; \n  } \n} \n\n```", "```js\nclass Satellite implements Payload { \n  constructor( \n    public id: number, \n    public weight: number \n  ) { } \n} \n\nclass FreightRocketFirstStage implements Stage { \n  engines: Engine[]; \n} \n\nclass FreightRocketSecondStage implements Stage { \n  engines: Engine[]; \n} \n\ntype FreightRocketStages = \n  [FreightRocketFirstStage, FreightRocketSecondStage]; \n\n```", "```js\nclass FreightRocket implements Rocket { \n  payload: Satellite; \n  stages: FreightRocketStages; \n} \n\n```", "```js\nclass FreightRocketFactory \nimplements RocketFactory<FreightRocket> { \n  nextSatelliteId = 0; \n\n  createRocket(): FreightRocket { \n    return new FreightRocket(); \n  } \n\n  createPayload(): Satellite { \n    return new Satellite(this.nextSatelliteId++, 100); \n  } \n\n  createStages(): FreightRocketStages { \n    return [ \n      new FreightRocketFirstStage(), \n      new FreightRocketSecondStage() \n    ]; \n  } \n} \n\n```", "```js\nlet client = new Client(); \n\nlet experimentalRocketFactory = new ExperimentalRocketFactory(); \nlet freightRocketFactory = new FreightRocketFactory(); \n\nlet experimentalRocket = \n  client.buildRocket(experimentalRocketFactory); \n\nlet freightRocket = client.buildRocket(freightRocketFactory); \n\n```", "```js\ninterface Rocket { \n  payload: Payload; \n} \n\n```", "```js\nclass Probe implements Payload { \n  weight: number; \n} \n\nclass SolidRocketEngine extends Engine { } \n\nclass SoundingRocket implements Rocket { \n  payload: Probe; \n  engine: SolidRocketEngine; \n} \n\n```", "```js\nclass LiquidRocketEngine extends Engine { \n  fuelLevel = 0; \n\n  refuel(level: number): void { \n    this.fuelLevel = level; \n  } \n} \n\n```", "```js\nabstract class LiquidRocketStage implements Stage { \n  engines: LiquidRocketEngine[] = []; \n\n  refuel(level = 100): void { \n    for (let engine of this.engines) { \n      engine.refuel(level); \n    } \n  } \n} \n\n```", "```js\nclass FreightRocketFirstStage extends LiquidRocketStage { \n  constructor(thrust: number) { \n    super(); \n\n    let enginesNumber = 4; \n    let singleEngineThrust = thrust / enginesNumber; \n\n    for (let i = 0; i < enginesNumber; i++) { \n      let engine = \n        new LiquidRocketEngine(singleEngineThrust); \n      this.engines.push(engine); \n    } \n  } \n} \n\nclass FreightRocketSecondStage extends LiquidRocketStage { \n  constructor(thrust: number) { \n    super(); \n    this.engines.push(new LiquidRocketEngine(thrust)); \n  } \n} \n\n```", "```js\ntype FreightRocketStages = \n  [FreightRocketFirstStage, FreightRocketSecondStage]; \n\nclass FreightRocket implements Rocket { \n  payload: Satellite; \n  stages = [] as FreightRocketStages; \n} \n\n```", "```js\nabstract class RocketBuilder< \n  TRocket extends Rocket, \n  TPayload extends Payload \n> { \n  createRocket(): void { } \n\n  addPayload(payload: TPayload): void { } \n\n  addStages(): void { } \n\n  refuelRocket(): void { } \n\n  abstract get rocket(): TRocket; \n} \n\n```", "```js\nclass Director { \n  prepareRocket< \n    TRocket extends Rocket, \n    TPayload extends Payload \n  >( \n    builder: RocketBuilder<TRocket, TPayload>, \n    payload: TPayload \n  ): TRocket { \n    builder.createRocket(); \n    builder.addPayload(payload); \n    builder.addStages(); \n    builder.refuelRocket(); \n    return builder.rocket; \n  } \n} \n\n```", "```js\nclass SoundingRocketBuilder \nextends RocketBuilder<SoundingRocket, Probe> { \n  private buildingRocket: SoundingRocket; \n\n  createRocket(): void { \n    this.buildingRocket = new SoundingRocket(); \n  } \n\n  addPayload(probe: Probe): void { \n    this.buildingRocket.payload = probe; \n  } \n\n  addStages(): void { \n    let payload = this.buildingRocket.payload; \n    this.buildingRocket.engine = \n      new SolidRocketEngine(payload.weight); \n  } \n\n  get rocket(): SoundingRocket { \n    return this.buildingRocket; \n  } \n} \n\n```", "```js\nclass FreightRocketBuilder \nextends RocketBuilder<FreightRocket, Satellite> { \n  private buildingRocket: FreightRocket; \n\n  createRocket(): void { \n    this.buildingRocket = new FreightRocket(); \n  } \n\n  addPayload(satellite: Satellite): void { \n    this.buildingRocket.payload = satellite; \n  } \n\n  get rocket(): FreightRocket { \n    return this.buildingRocket; \n  } \n} \n\n```", "```js\naddStages(): void { \n  let rocket = this.buildingRocket; \n  let payload = rocket.payload; \n  let stages = rocket.stages; \n\n  stages[0] = new FreightRocketFirstStage(payload.weight * 4); \n\n  if (payload.weight >= FreightRocketBuilder.oneStageMax) { \n    stages[1] = FreightRocketSecondStage(payload.weight); \n  } \n} \n\nstatic oneStageMax = 1000; \n\n```", "```js\nrefuel(): void { \n  let rocket = this.buildingRocket; \n  let payload = rocket.payload; \n  let stages = rocket.stages; \n\n  let oneMax = FreightRocketBuilder.oneStageMax; \n  let twoMax = FreightRocketBuilder.twoStagesMax; \n\n  let weight = payload.weight; \n\n  stages[0].refuel(Math.min(weight, oneMax) / oneMax * 100); \n\n  if (weight >= oneMax) { \n    stages[1] \n      .refuel((weight - oneMax) / (twoMax - oneMax) * 100); \n  } \n} \n\nstatic oneStageMax = 1000; \nstatic twoStagesMax = 2000; \n\n```", "```js\nlet director = new Director(); \n\nlet soundingRocketBuilder = new SoundingRocketBuilder(); \nlet probe = new Probe(); \nlet soundingRocket \n  = director.prepareRocket(soundingRocketBuilder, probe); \n\nlet freightRocketBuilder = new FreightRocketBuilder(); \nlet satellite = new Satellite(0, 1200); \nlet freightRocket \n  = director.prepareRocket(freightRocketBuilder, satellite); \n\n```", "```js\nclass FreightRocketFactory \nimplements RocketFactory<FreightRocket> { \n  createRocket(): FreightRocket { \n    return new FreightRocket(); \n  } \n} \n\n```", "```js\ninterface Constructor<T> { \n  new (): T; \n} \n\nfunction createFancyObject<T>(constructor: Constructor<T>): T { \n  return new constructor(); \n} \n\n```", "```js\nclass Base { \n  state: number; \n} \n\nlet base = new Base(); \nbase.state = 0; \n\nclass Derived extends Base { } \nDerived.prototype = base; \n\nlet derived = new Derived(); \n\n```", "```js\nconst singleton = { \n  foo(): void { \n    console.log('bar'); \n  } \n}; \n\n```", "```js\nconst singleton = (() => { \n  let bar = 'bar'; \n\n  return { \n    foo(): void { \n      console.log(bar); \n    } \n  }; \n})(); \n\n```", "```js\nconst singleton = new class { \n  private _bar = 'bar'; \n\n  foo(): void { \n    console.log(this._bar); \n  } \n} (); \n\n```", "```js\nclass Singleton { \n  bar = 'bar'; \n\n  foo(): void { \n    console.log(bar); \n  } \n\n  private static _default: Singleton; \n\n  static get default(): Singleton { \n    if (!Singleton._default) { \n      Singleton._default = new Singleton(); \n    } \n\n    return Singleton._default; \n  } \n} \n\n```"]