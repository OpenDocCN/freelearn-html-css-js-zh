["```js\nvar spawn = require('child_process').spawn;\nvar ls  = spawn('ls', ['-lh', '.']);\nls.stdout.on('readable', function() {\n var d = this.read();\n d && console.log(d.toString());\n});\nls.on('close', function(code) {\n console.log('child process exited with code ' + code);\n});\n```", "```js\n-rw-r--r-- 1 root root  43 Jul 9 19:44 index.html\n-rw-rw-r-- 1 root root 278 Jul 15 16:36 child_example.js\n-rw-r--r-- 1 root root 1.2K Jul 14 19:08 server.js\n\nchild process exited with code 0\n\n```", "```js\n    {\n      name : \"Sandro\",\n      role : \"admin\"\n    }\n    ```", "```js\nprocess.stdout.write(new Buffer(\"Hello!\"));\n```", "```js\nspawn(\"node\", ['./reader.js', './afile.txt'], {\n  stdio: [process.stdin, process.stdout, process.stderr]\n});\n```", "```js\n    var writer = fs.createWriteStream(\"./a.out\");\n    writer.on('open', function() {\n      var cp = spawn(\"node\", ['./reader.js'], {\n        stdio: [null, writer, null]\n      });\n    });\n    ```", "```js\n    fs.createReadStream('cached.data').pipe(process.stdout);\n    ```", "```js\nvar spawn = require('child_process').spawn;\n\nvar php = spawn(\"php\", ['-r', 'print \"Hello from PHP!\";']);\n\nphp.stdout.on('readable', function() {\n  var d;\n  while(d = this.read()) {\n    console.log(d.toString());\n  }\n});\n\n// Hello from PHP!\n```", "```js\nvar cnt = 0;\n\nsetInterval(function() {\n  process.stdout.write(\" -> \" + cnt++);\n}, 100);\n```", "```js\nvar fork = require('child_process').fork;\nfork('./emitter.js');\n\n// -> 0 -> 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8 -> 9 -> 10 ...\n```", "```js\nfork('./emitter.js', [], { silent: true });\n```", "```js\nfork('./emitter.js');\nfork('./emitter.js');\nfork('./emitter.js');\n\n-> 0 -> 0 -> 0 -> 1 -> 1 -> 1 -> 2 -> 2 -> 2 -> 3 -> 3 -> 3 -> 4 ...\n```", "```js\nvar fork = require('child_process').fork;\nvar cp = fork('./child.js');\ncp.on('message', function(msgobj) {\n  console.log('Parent got message:', msgobj.text);\n});\n\ncp.send({\n  text: \"I love you\"\n});\n```", "```js\nprocess.on('message', function(msgobj) {\n  console.log('Child got message:', msgobj.text);\n  process.send({\n    text: msgobj.text + ' too'\n  });\n});\n```", "```js\nChild got message: I love you\nParent got message: I love you too\n\n```", "```js\nvar fork = require('child_process').fork;\nvar net = require('net');\n\nvar children = [];\n\nrequire('os').cpus().forEach(function(f, idx) {\n  children.push(fork(\"./child.js\", [idx]));\n});\n\nnet.createServer(function(socket) {\n  var rand = Math.floor(Math.random() * children.length);\n  children[rand].send(null, socket);\n}).listen(8080);\n```", "```js\nvar id = process.argv[2];\nprocess.on('message', function(n, socket) {\n  socket.write('child ' + id + ' was your server today.\\r\\n');\n  socket.end();\n});\n```", "```js\nTrying 127.0.0.1...\n...\nchild 3 was your server today.\nConnection closed by foreign host.\n\n```", "```js\nvar cluster = require('cluster');\nvar http = require('http');\nvar numCPUs = require('os').cpus().length;\n\nif(cluster.isMaster) {\n  for(var i = 0; i < numCPUs; i++) {\n    cluster.fork();\n  }\n}\n\nif(cluster.isWorker) {\n  http.createServer(function(req, res) {\n    res.writeHead(200);\n    res.end(\"Hello from \" + cluster.worker.id);\n  }).listen(8080);\n}\n```", "```js\napt-get install nginx\n\n```", "```js\nservice nginx start\n\n```", "```js\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.25.4/install.sh | bash\n\n```", "```js\nnvm install 0.12\n\n```", "```js\n# start with node 0.12\nnvm use 0.12\n\n```", "```js\nvar http = require('http');\n\nhttp.createServer(function(req, res) {\n   res.writeHead(200, {\n    \"Content-Type\" : \"text/html\"\n  });\n  res.write('HOST **');\n  res.end();\n}).listen(8080)\n```", "```js\nupstream lb_servers {\n  server first.node.server.ip;\n  server second.node.server.ip;\n}\n```", "```js\nserver {\n  listen 80 default_server;\n  listen [::]:80 default_server ipv6only=on;\n\n  #root /usr/share/nginx/html;\n  #index index.html index.htm;\n\n  # Make site accessible from http://localhost/\n  server_name localhost;\n\n  location / {\n    proxy_pass http://lb-servers; # Load balance mapped servers\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection 'upgrade';\n    proxy_set_header Host $host;\n    proxy_cache_bypass $http_upgrade;\n  }\n\n  ... more configuration options not specifically relevant to our purposes\n}\n```", "```js\nproxy_pass http://lb-servers\n```", "```js\nservice nginx restart\n\n```", "```js\nservice nginx stop\nservice nginx start\n\n```", "```js\nupstream lb-servers {\n  server first.node.server.ip weight=10;\n  server second.node.server.ip weight=20;\n}\n```", "```js\n    upstream lb-servers {\n      server first.node.server.ip weight=10 max_fails=2 fail_timeout=20s;\n      server second.node.server.ip weight=20 max_fails=10 fail_timeout=5m;\n    }\n    ```", "```js\nvar httpProxy = require('http-proxy');\n\nvar proxy = httpProxy.createServer({\n  target: {\n    host: 'www.example.com',\n    port: 80\n  }\n}).listen(80);\n```", "```js\nvar httpProxy = httpProxy.createServer({\n  router: {\n    'www.mywebsite.com'    : '127.0.0.1:8001',\n    'www.myothersite.com'  : '127.0.0.1:8002',\n  }\n});\nhttpProxy.listen(80);\n```", "```js\nvar httpProxy = httpProxy.createServer({\n  router: {\n    'www.mywebsite.com/friends'  : '127.0.0.1:8001',\n    'www.mywebsite.com/foes'  : '127.0.0.1:8002',\n  }\n});\nhttpProxy.listen(80);\n```", "```js\nvar httpProxy = require('http-proxy');\nvar addresses = [\n  {\n    host: 'one.example.com',\n    port: 80\n  },\n  {\n    host: 'two.example.com',\n    port: 80\n  }\n];\n\nhttpProxy.createServer(function(req, res, proxy) {\n  var target = addresses.shift();\n  proxy.proxyRequest(req, res, target);\n  addresses.push(target);\n}).listen(80);\n```", "```js\nservice rabbitmq-server start\n\n```", "```js\nnpm install amqp\n\n```", "```js\nvar amqp = require('amqp');\n\nvar consumer = amqp.createConnection({ host: 'localhost', port: 5672 });\nvar exchange;\n\nconsumer.on('ready', function() {\n  exchange = consumer.exchange('node-topic-exchange', {type: \"topic\"});\n  consumer.queue('node-topic-queue', function(q) {\n\n    q.bind(exchange, '#');\n\n    q.subscribe(function(message) {\n      // Messages are buffers\n      //\n      console.log(message.data.toString('utf8'));\n    });\n  });\n});\n```", "```js\nconsumer.on('ready', function() {\n\n  ...\n\n  exchange.publish(\"some-topic\", \"Hello!\");\n});\n\n// Hello!\n```", "```js\nqueue.bind(exchange, 'room-1');\n```", "```js\nconsumer.on('ready', function() {\n\n  // When all 3 queues are ready, publish.\n  //\n  var cnt = 3;\n  var queueReady = function() {\n    if(--cnt > 0) {\n      return;\n    }\n    exchange.publish('animals.dogs.poodles', 'Poodle!');\n    exchange.publish('animals.dogs.dachshund', 'Dachshund!');\n    exchange.publish('animals.cats.shorthaired', 'Shorthaired Cat!');\n    exchange.publish('animals.dogs.shorthaired', 'Shorthaired Dog!');\n    exchange.publish('animals.misc', 'Misc!');\n  }\n\n  var exchange = consumer.exchange('topical', {type: \"topic\"});\n\n  consumer.queue('queue-1', function(q) {\n\n    q.bind(exchange, 'animals.*.shorthaired');\n    q.subscribe(function(message) {\n      console.log('animals.*.shorthaired -> ' + message.data.toString('utf8'));\n    });\n\n    queueReady();\n  });\n\n  consumer.queue('queue-2', function(q) {\n    q.bind(exchange, '#');\n    q.subscribe(function(message) {\n      console.log('# -> ' + message.data.toString('utf8'));\n    });\n\n    queueReady();\n  });\n\n  consumer.queue('queue-3', function(q) {\n    q.bind(exchange, '*.cats.*');\n    q.subscribe(function(message) {\n      console.log('*.cats.* -> ' + message.data.toString('utf8'));\n    });\n\n    queueReady();\n  });\n});\n\n//  # -> Poodle!\n//  animals.*.shorthaired -> Shorthaired Cat!\n//  *.cats.* -> Shorthaired Cat!\n//  # -> Dachshund!\n//  # -> Shorthaired Cat!\n//  animals.*.shorthaired -> Shorthaired Dog!\n//  # -> Shorthaired Dog!\n//  # -> Misc!\n```", "```js\nvar dgram = require('dgram');\nvar socket = dgram.createSocket('udp4');\n\nsocket.on('message', function(msg, info) {\n  console.log('socket got: ' + msg + ' from ' +\n  info.address + ':' + info.port);\n});\n\nsocket.bind(41234);\n\nsocket.on('listening', function() {\n  console.log('Listening for datagrams.');\n});\n```", "```js\nvar client = dgram.createSocket('udp4');\nvar message = new Buffer('UDP says Hello!');\nclient.send(message, 0, message.length, 41234, 'localhost', function(err, bytes) {\n  client.close();\n});\n```", "```js\nvar socket = dgram.createSocket('udp4');\n\nvar multicastAddress   = '230.1.2.3';\nvar multicastPort   = 5554;\n\nsocket.bind(multicastPort);\n\nsocket.on('listening', function() {\n  this.setMulticastTTL(64);\n  this.addMembership(multicastAddress);\n});\n```", "```js\ndgram.createSocket('udp4')\n.on('message', function(message, remote) {\n  console.log('Client1 received message ' + message + ' from ' + remote.address + ':' + remote.port);\n})\n.bind(multicastPort, multicastAddress);\n\ndgram.createSocket('udp4')\n.on('message', function(message, remote) {\n  console.log('Client2 received message ' + message + ' from ' + remote.address + ':' + remote.port);\n})\n.bind(multicastPort, multicastAddress);\n```", "```js\nvar cnt = 1;\nvar sender;\n\n(sender = function() {\n  var msg = new Buffer(\"This is message #\" + cnt);\n  socket.send(\n    msg,\n    0,\n    msg.length,\n    multicastPort,\n    multicastAddress\n  );\n\n  ++cnt;\n\n  setTimeout(sender, 1000);\n\n})();\n```", "```js\nClient2 received message This is message #1 from 67.40.141.16:5554\nClient1 received message This is message #1 from 67.40.141.16:5554\nClient2 received message This is message #2 from 67.40.141.16:5554\nClient1 received message This is message #2 from 67.40.141.16:5554\nClient2 received message This is message #3 from 67.40.141.16:5554\n...\n\n```", "```js\ndgram.createSocket('udp4')\n.on('message', function(message, remote) {\n  console.log('Client3 received message ' + message + ' from ' + remote.address + ':' + remote.port);\n})\n.bind(multicastPort, '230.3.2.1');\n```", "```js\nsocket.on(\"listening\", function() {\n  this.addMembership(multicastAddress);\n  this.addMembership('230.3.2.1');\n});\n```", "```js\n(sender = function() {\n  socket.send(\n    ...\n    multicastAddress\n  );\n\n  socket.send(\n    ...\n    '230.3.2.1'\n  );\n\n  ...\n})();\n```", "```js\ndgram.createSocket('udp4')\n.on('message', function(message, remote) {\n  var msg = new Buffer(\"Calling original group!\");\n  socket.send(\n    msg,\n    0,\n    msg.length,\n    multicastPort,\n    '230.1.2.3' // multicastAddress\n  );\n})\n.bind(multicastPort, '230.3.2.1');\n```"]