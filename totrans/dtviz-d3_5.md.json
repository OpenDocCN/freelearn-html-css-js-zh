["```js\nwindow.helpers = {\n};\n```", "```js\n<script src=\"img/helpers.js\"></script>\n```", "```js\nvar width = 1024,\n    height = 1024,\n    svg = d3.select('#graph')\n        .append('svg')\n        .attr({width: width,\n               height: height});\n\nd3.json('data/karma_matrix.json', function (data) {\n});\n```", "```js\n{\"to\": \"smotko\",\n \"from\": \"Swizec\",\n \"time\": \"2012-02-28 23:44:40\"}\n```", "```js\nuniques: function (data, nick) {\n        var uniques = [];\n\n        data.forEach(function (d) {\n            if (uniques.indexOf(nick(d)) < 0) {\n                uniques.push(nick(d));\n            }\n        });\n\n        return uniques;\n    },\n\n    nick_id: function (data, nick) {\n        var uniques = helpers.uniques(data, nick);\n\n        return d3.scale.ordinal()\n            .domain(uniques)\n            .range(d3.range(uniques.length));\n    },\n```", "```js\nvar nick_id = helpers.nick_id(data, function (d) { return d.to; });\n\nvar histogram = d3.layout.histogram()\n            .bins(nick_id.range())\n            .value(function (d) { return nick_id(d.to); })(data);\n```", "```js\n{0: {from: \"HairyFotr\",\n         time: \"2011-10-11 18:38:17\",\n         to: \"notepad\"},\n     1: {from: \"HairyFotr\",\n        time: \"2012-01-09 10:41:53\",\n        to: \"notepad\"},\n     dx: 1,\n     x: 0,\n     y: 2}\n```", "```js\nvar margins = {top: 10,\n               right: 40,\n               bottom: 100,\n               left: 50};\n```", "```js\nvar x = d3.scale.linear()\n            .domain([0, d3.max(histogram, function (d) { return d.x; })])\n            .range([margins.left, width-margins.right]),\n        y = d3.scale.log()\n            .domain([1, d3.max(histogram, function (d) { return d.y; })])\n            .range([height-margins.bottom, margins.top]);\n```", "```js\nvar yAxis = d3.svg.axis()\n            .scale(y)\n            .tickFormat(d3.format('f'))\n            .orient('left');\n\n    svg.append('g')\n        .classed('axis', true)\n        .attr('transform', 'translate(50, 0)')\n        .call(yAxis);\n```", "```js\nvar bar = svg.selectAll('.bar')\n            .data(histogram)\n            .enter()\n            .append('g')\n            .classed('bar', true)\n            .attr('transform',\n                  function (d) { return 'translate('+x(d.x)+', '+y(d.y)+')'; });\n```", "```js\nbar.append('rect')\n        .attr({x: 1,\n               width: x(histogram[0].dx)-margins.left-1,\n               height: function (d) { return height-margins.bottom-y(d.y); }\n              });\n```", "```js\nbar.append('text')\n        .text(function (d) { return d[0].to; })\n        .attr({transform: function (d) {\n                   var bar_height = height-margins.bottom-y(d.y);\n\n                   return 'translate(0, '+(bar_height+7)+') rotate(60)'; }\n        });\n```", "```js\n<style>\n.axis path, .axis line {\n  fill: none;\n  stroke: #000;\n  shape-rendering: crispEdges;\n}\n\n.axis text {\n  font-size: 0.75em;\n}\n\nrect {\n  fill: steelblue;\n  shape-rendering: crispEdges;\n}\n</style>\n```", "```js\n    bin_per_nick: function (data, nick) {\n        var nick_id = helpers.nick_id(data, nick);\n\n        var histogram = d3.layout.histogram()\n                .bins(nick_id.range())\n                .value(function (d) { return nick_id(nick(d)); });\n\n        histogram(data);\n\n        return histogram;\n    },\n```", "```js\n    filtered = data.filter(\n                function (d) { return d.to == 'HairyFotr'; });\n\n    var per_nick = helpers.bin_per_nick(filtered,\n                              function (d) { return d.from; });\n```", "```js\nvar pie = d3.layout.pie()\n            .value(function (d) { return d.length; })(per_nick);\n```", "```js\n    {data: Array[135],\n    endAngle: 2.718685950221936,\n    startAngle: 0,\n    value: 135}\n```", "```js\ncolor:  d3.scale.ordinal()\n        .range(['#EF3B39', '#FFCD05', '#69C9CA', '#666699', '#CC3366', '#0099CC',\n                '#CCCB31', '#009966', '#C1272D', '#F79420', '#445CA9', '#999999',\n                '#402312', '#272361', '#A67C52', '#016735', '#F1AAAF', '#FBF5A2',\n                '#A0E6DA', '#C9A8E2', '#F190AC', '#7BD2EA', '#DBD6B6', '#6FE4D0']),\n```", "```js\nfixate_colors: function (data) {\n        helpers.color.domain(helpers.uniques(data,\n                                function (d) { return d.from; }));\n    }\n```", "```js\nvar arc = d3.svg.arc()\n            .outerRadius(150)\n            .startAngle(function (d) { return d.startAngle; })\n            .endAngle(function (d) { return d.endAngle; });\n\nhelpers.fixate_colors(data);\n```", "```js\nvar slice = svg.selectAll('.slice')\n            .data(pie)\n            .enter()\n            .append('g')\n            .attr('transform', 'translate(300, 300)');\n```", "```js\nslice.append('path')\n        .attr({d: arc,\n                  fill: function (d) { return colors(d.data[0].from); }\n              });\n```", "```js\narc_labels: function (text, radius) {\n        return function (selection) {\n            selection.append('text')\n                .text(text)\n                .attr('text-anchor', function (d) {\n                    return helpers.tickAngle(d) > 100 ? 'end' : 'start';\n                })\n                .attr('transform', function (d) {\n                    var degrees = helpers.tickAngle(d);\n\n                    var turn = 'rotate('+degrees+') translate('+(radius(d)+10)+', 0)';\n\n                    if (degrees > 100) {\n                        turn += 'rotate(180)';\n                    }\n\n                    return turn;\n                });\n        }\n    },\n```", "```js\ntickAngle: function (d) {\n        var midAngle = (d.endAngle-d.startAngle)/2,\n            degrees = (midAngle+d.startAngle)/Math.PI*180-90;\n\n        return degrees;\n    }\n```", "```js\nslice.call(helpers.arc_labels(\n                  function (d) { return d.data[0].from; },\n                  arc.outerRadius()));\n```", "```js\nvar time = d3.time.format('%Y-%m-%d %H:%M:%S'),\n        extent = d3.extent(data.map(function (d) { return time.parse(d.time); })),\n        time_bins = d3.time.days(extent[0], extent[1], 12);\n```", "```js\nvar per_nick = helpers.bin_per_nick(data, function (d) { return d.to; });\n\n    var time_binned  = per_nick.map(function (nick_layer) {\n        return {to: nick_layer[0].to,\n                     values: d3.layout.histogram()\n                                 .bins(time_bins)\n                                 .value(function (d) {\n                                            return time.parse(d.time); })(nick_layer)};\n    });\n```", "```js\n    var layers = d3.layout.stack()\n            .order('inside-out')\n            .offset('wiggle')\n            .values(function (d) { return d.values; })(time_binned);\n```", "```js\n{to: \"notepad\",\n   values: Array[50]}\n```", "```js\n{dx: 1036800000,\n   length: 1,\n   x: Object(Thu Oct 13 2011 00:00:00 GMT+0200 (CEST)),\n   y: 1,\n   y0: 140.16810522517937}\n```", "```js\nvar margins = {\n        top: 220,\n        right: 50,\n        bottom: 0,\n        left: 50\n    };\n\n    var x = d3.time.scale()\n            .domain(extent)\n            .range([margins.left, width-margins.right]),\n        y = d3.scale.linear()\n            .domain([0, d3.max(layers, function (layer) {\n                return d3.max(layer.values, function (d) {\n                    return d.y0+d.y;\n                });\n            })])\n            .range([height-margins.top, 0]);\n```", "```js\n    var offset = 100,\n        area = d3.svg.area()\n            .x(function(d) { return x(d.x); })\n            .y0(function(d) { return y(d.y0)+offset; })\n            .y1(function(d) { return y(d.y0 + d.y)+offset; });\n```", "```js\n    var xAxis = d3.svg.axis()\n            .scale(x)\n            .tickFormat(d3.time.format('%b %Y'))\n            .ticks(d3.time.months, 2)\n            .orient('bottom');\n\n    svg.append('g')\n        .attr('transform', 'translate(0, '+(height-100)+')')\n        .classed('axis', true)\n        .call(xAxis);\n```", "```js\nsvg.selectAll('path')\n        .data(layers)\n        .enter()\n        .append('path')\n        .attr('d', function (d) { return area(d.values); })\n        .style('fill', function (d, i) { return helpers.color(i); })\n        .call(helpers.tooltip(function (d) { return d.nick; });\n```", "```js\ntooltip: function (text) {\n        return function (selection) {\n            selection.on('mouseover.tooltip', mouseover)\n                .on('mousemove.tooltip', mousemove)\n                .on('mouseout.tooltip', mouseout);\n         }\n}\n```", "```js\nfunction mouseover(d) {\n    var path = d3.select(this);\n     path.classed('highlighted', true);\n}\n```", "```js\nvar mouse = d3.mouse(svg.node());\n    var tool = svg.append('g')\n            .attr({'id': \"nicktool\",\n                   transform: 'translate('+(mouse[0]+5)+', '+(mouse[1]+10)+')'});\n\n    var textNode = tool.append('text')\n                       .text(text(d)).node();\n\n    tool.append('rect')\n        .attr({height: textNode.getBBox().height,\n               width: textNode.getBBox().width,\n               transform: 'translate(0, -16)'});\n\n    tool.select('text')\n        .remove();\n\n    tool.append('text')\n        .text(d.nick);\n```", "```js\nfunction mousemove () {\n    var mouse = d3.mouse(svg.node());\n    d3.select('#nicktool')\n        .attr('transform', 'translate('+(mouse[0]+15)+', '+(mouse[1]+20)+')');\n}\n```", "```js\nfunction mouseout () {\n    var path = d3.select(this);\n    path.classed('highlighted', false);\n\n    d3.select('#nicktool').remove();\n}\n```", "```js\n<style>\n.axis path, .axis line {\n  fill: none;\n  stroke: #000;\n  shape-rendering: crispEdges;\n}\n\npath.highlighted {\n  fill-opacity: 0.5;\n  stroke: red;\n  stroke-width: 1.5;\n}\n#nicktool {\n  font-size: 1.3em;\n}\n\n#nicktool rect {\n  fill: white;\n}\n</style>\n```", "```js\nconnection_matrix: function (data) {\n        var nick_id = helpers.nick_id(data, function (d) { return d.from; }),\n            uniques = nick_id.domain();\n\n        var matrix = d3.range(uniques.length).map(function () {\n            return d3.range(uniques.length).map(function () { return 0; });\n        });\n\n        data.forEach(function (d) {\n            matrix[nick_id(d.from)][nick_id(d.to)] += 1;\n        });\n\n        return matrix;\n    }\n```", "```js\n    var uniques = helpers.uniques(data, function (d) { return d.from; }),\n        matrix = helpers.connection_matrix(data);\n```", "```js\nvar innerRadius = Math.min(width, height)*0.3,\n        outerRadius = innerRadius*1.1;\n```", "```js\nvar chord = d3.layout.chord()\n            .padding(.05)\n            .sortGroups(d3.descending)\n            .sortSubgroups(d3.descending)\n            .sortChords(d3.descending)\n            .matrix(matrix);\n```", "```js\nvar diagram = svg.append('g')\n            .attr('transform', 'translate('+width/2+','+height/2+')');\n```", "```js\nvar group = diagram.selectAll('.group')\n            .data(chord.groups)\n            .enter()\n            .append('g'),\n    arc = d3.svg.arc()\n                     .innerRadius(innerRadius)\n                     .outerRadius(outerRadius);\n\n    group.append('path')\n        .attr('d', arc)R\n        .attr('fill', function (d) {\n               return helpers.color(d.index); });\n```", "```js\ngroup.call(helpers.arc_labels(\n              function (d) { return uniques[d.index]; },\n              function () { return outerRadius+10; }));\n```", "```js\ndiagram.append('g')\n        .classed('chord', true)\n        .selectAll('path')\n        .data(chord.chords)\n        .enter()\n        .append('path')\n        .attr('d', d3.svg.chord().radius(innerRadius))\n        .attr('fill', function (d, i) { return helpers.color(d.target.index); });\n```", "```js\n<style>\n.chord path {\n   stroke: black;\n   stroke-width: 0.2;\n   opacity: 0.6;\n}\n</style>\n```", "```js\nvar nick_id = helpers.nick_id(data, function (d) { return d.from; }),\n        uniques = nick_id.domain(),\n        matrix = helpers.connection_matrix(data);\n```", "```js\n    var nodes = uniques.map(function (nick) {\n        return {nick: nick};\n    });\n    var links = data.map(function (d) {\n        return {source: nick_id(d.from),\n                     target: nick_id(d.to),\n                     count: matrix[nick_id(d.from)][nick_id(d.to)]};\n    });\n```", "```js\nvar force = d3.layout.force()\n            .nodes(nodes)\n            .links(links)\n            .gravity(0.5)\n            .size([width, height]);\n\n    force.start();\n```", "```js\n{index: 0,\n  nick: \"HairyFotr\",\n  px: 497.0100389553633,\n  py: 633.2734045531992,\n  weight: 458,\n  x: 499.5873097327753,\n  y: 633.395804766377}\n```", "```js\n{count: 2\n  source: Object\n  target: Object}\n```", "```js\n    var weight = d3.scale.linear()\n            .domain(d3.extent(nodes.map(function (d) { return d.weight; })))\n            .range([5, 30]),\n        distance = d3.scale.linear()\n            .domain(d3.extent(d3.merge(matrix)))\n            .range([300, 100]),\n        given = d3.scale.linear()\n            .range([2, 35]);\n```", "```js\n    force.linkDistance(function (d) {\n            return distance(d.count);\n        });\n\n    force.start();\n```", "```js\nvar link = svg.selectAll(\"line\")\n            .data(links)\n            .enter()\n            .append(\"line\")\n            .classed('link', true);\n```", "```js\nvar node = svg.selectAll(\"circle\")\n            .data(nodes)\n            .enter()\n            .append(\"circle\")\n            .classed('node', true)\n            .attr({r: function (d) { return weight(d.weight); },\n                   fill: function (d) { return helpers.color(d.index); },\n                   class: function (d) { return 'nick_'+nick_id(d.nick); }})\n            .on('mouseover', function (d) {\n                highlight(d, uniques, given, matrix, nick_id);\n            })\n            .on('mouseout', function (d) {\n                dehighlight(d, weight);\n            });\n```", "```js\nnode.call(helpers.tooltip(function (d) { return d.nick; }));\nnode.call(force.drag);\n```", "```js\nforce.on(\"tick\", function() {\n        link.attr(\"x1\", function(d) { return d.source.x; })\n            .attr(\"y1\", function(d) { return d.source.y; })\n            .attr(\"x2\", function(d) { return d.target.x; })\n            .attr(\"y2\", function(d) { return d.target.y; });\n\n        node.attr(\"cx\", function(d) { return d.x; })\n            .attr(\"cy\", function(d) { return d.y; });\n    });\n```", "```js\nfunction highlight (d, uniques, given, matrix, nick_id) {\n    given.domain(d3.extent(matrix[nick_id(d.nick)]));\n\n    uniques.map(function (nick) {\n        var count = matrix[nick_id(d.nick)][nick_id(nick)];\n\n        if (nick != d.nick) {\n            d3.selectAll('circle.nick_'+nick_id(nick))\n                .classed('unconnected', true)\n                .transition()\n                .attr('r', given(count));\n        }\n    });\n}\n```", "```js\nfunction mouseout (d, weight) {\n    d3.selectAll('.node')\n        .transition()\n        .attr('r', function (d) { return weight(d.weight); });\n}\n```", "```js\n<style>\nline {\n  stroke: lightgrey;\n  stroke-width: 0.3;\n}\n\n#nicktool {\n  font-size: 1.3em;\n}\n</style>\n```", "```js\n{\n    \"nick\": \"karma\",\n    \"children\": [\n        {\n            \"nick\": \"HairyFotr\",\n            \"count\": 312,\n            \"children\": [\n                {\n                    \"nick\": \"notepad\",\n                    \"count\": 2,\n                    \"children\": []\n                },\n                {\n                    \"nick\": \"LorD_DDooM\",\n                    \"count\": 6,\n                    \"children\": []\n                },\n```", "```js\nmake_tree: function (data, filter1, filter2, nick1, nick2) {\n        var tree = {nick: 'karma',\n                    children: []};\n        var uniques = helpers.uniques(data, function (d) { return d.from; });\n\n        tree.children = uniques.map(\n            function (nick) {\n                var my_karma = data.filter(function (d) { return filter1(d, nick); }).length,\n                    given_to = helpers.bin_per_nick(\n                        data.filter(function (d) { return filter2(d, nick); }),\n                        nick1\n                    );\n\n                return {nick: nick,\n                        count: my_karma,\n                        children: given_to.map(function (d) {\n                            return {nick: nick2(d),\n                                    count: d.length,\n                                    children: []};\n                        })};\n            });\n\n        return tree;\n    },\n```", "```js\nhelpers.fixate_colors(data);\n\nvar tree = helpers.make_tree(data,\n                   function (d, nick) { return d.to == nick; },\n                   function (d, nick) { return d.from == nick; },\n                   function (d) { return d.to; },\n                   function (d) { return d[0].to; });\n\nvar diagonal = d3.svg.diagonal.radial()\n     .projection(function(d) { return [d.y, d.x / 180 * Math.PI]; });\n```", "```js\nvar layout = d3.layout.tree()\n            .size([360, width/2 - 120]);\n\n    var nodes = layout.nodes(tree),\n        links = layout.links(nodes);\n```", "```js\nvar chart = svg.append('g')\n            .attr('transform', 'translate('+width/2+','+height/2+')');\n```", "```js\n    var link = chart.selectAll(\".link\")\n            .data(links)\n            .enter()\n            .append(\"path\")\n            .attr(\"class\", \"link\")\n            .attr(\"d\", diagonal);\n```", "```js\nvar node = chart.selectAll(\".node\")\n            .data(nodes)\n            .enter().append(\"g\")\n            .attr(\"class\", \"node\")\n            .attr(\"transform\", function(d) { return \"rotate(\" + (d.x - 90) + \")translate(\" + d.y + \")\"; });\n```", "```js\n     node.append(\"circle\")\n        .attr(\"r\", 4.5)\n        .attr('fill', function (d) { return helpers.color(d.nick); });\n\n    node.append(\"text\")\n        .attr(\"dy\", \".31em\")\n        .attr(\"text-anchor\", function(d) { return d.x < 180 ? \"start\" : \"end\"; })\n        .attr(\"transform\", function(d) { return d.x < 180 ? \"translate(8)\" : \"rotate(180)translate(-8)\"; })\n        .text(function(d) { return d.nick; })\n        .style('font-size', function (d) { return d.depth > 1 ? '0.8em' : '1.1em'; });\n```", "```js\n<style>\n.link {\n  fill: none;\n  stroke: lightgrey;\n}\n</style>\n```", "```js\n    var tree = helpers.make_tree(data,\n                   function (d, nick) { return d.to == nick; },\n                   function (d, nick) { return d.to == nick; },\n                   function (d) { return d.from; },\n                   function (d) { return d[0].from; });\n    helpers.fixate_colors(data);\n```", "```js\n    var partition = d3.layout.partition()\n            .value(function (d) { return d.count; })\n            .sort(function (a, b) {\n                return d3.descending(a.count, b.count);\n            })\n            .size([2*Math.PI, 300]);\n\n    var nodes = partition.nodes(tree);\n```", "```js\n    var arc = d3.svg.arc()\n            .innerRadius(function (d) { return d.y; })\n            .outerRadius(function (d) {\n                                 return d.depth ? d.y+d.dy/d.depth : 0; });\n```", "```js\n    nodes = nodes.map(function (d) {\n        d.startAngle = d.x;\n        d.endAngle = d.x+d.dx;\n        return d;\n    });\n\n    nodes = nodes.filter(function (d) { return d.depth; });\n```", "```js\n    var chart = svg.append('g')\n            .attr('transform', 'translate('+width/2+','+height/2+')');\n```", "```js\n    var node = chart.selectAll('g')\n            .data(nodes)\n            .enter()\n            .append('g');\n\n    node.append('path')\n        .attr({d: arc,\n               fill: function (d) { return helpers.color(d.nick); }});\n```", "```js\n    node.filter(function (d) { return d.depth > 1 && d.count > 10; })\n        .call(helpers.arc_labels(function (d) { return d.nick; },\n                                 arc.outerRadius()));\n\n    node.call(helpers.tooltip(function (d) { return d.nick; }));\n```", "```js\n<style>\npath {\n  stroke: white;\n  stroke-width: 2;\n}\n\n#nicktool {\n  font-size: 1.3em;\n}\n\n#nicktool rect {\n  fill: white;\n}\n</style>\n```", "```js\n    var tree = helpers.make_tree(data,\n                       function (d, nick) { return d.to == nick; },\n                       function (d, nick) { return d.to == nick; },\n                       function (d) { return d.from; },\n                       function (d) { return d[0].from; });\n    helpers.fixate_colors(data);\n```", "```js\nvar treemap = d3.layout.treemap()\n            .size([width, height])\n            .padding(3)\n            .value(function (d) { return d.count; })\n            .sort(d3.ascending);\n\nvar nodes = treemap.nodes(tree)\n            .filter(function (d) { return d.depth; });\n```", "```js\nvar node = svg.selectAll('g')\n            .data(nodes)\n            .enter()\n            .append('g')\n            .classed('node', true)\n            .attr('transform', function (d) { return 'translate(    node.a'+d.x+','+d.y+')'; });\n\nppend('rect')\n        .attr({width: function (d) { return d.dx; },\n               height: function (d) { return d.dy; },\n               fill: function (d) { return helpers.color(d.nick); }});\n```", "```js\nvar leaves = node.filter(function (d) { return d.depth > 1; });\n\n    leaves.append('text')\n        .text(function (d) { return d.nick; })\n        .attr('text-anchor', 'middle')\n        .attr('transform', function (d) {\n            var box = this.getBBox(),\n                transform = 'translate('+(d.dx/2)+','+(d.dy/2+box.height/2)+')';\n\n            if (d.dx < box.width && d.dx > box.height && d.dy > box.width) {\n                transform += 'rotate(-90)';\n            }else if (d.dx < box.width || d.dy < box.height) {\n                d3.select(this).remove();\n            }\n\n            return transform;\n        });\n```", "```js\n    leaves.call(helpers.tooltip(function (d) { return d.parent.nick; }));\n```", "```js\n    leaves.on('mouseover', function (d) {\n        var belongs_to = d.parent.nick;\n\n        svg.selectAll('.node')\n            .transition()\n            .style('opacity', function (d) {\n                if (d.depth > 1 && d.parent.nick != belongs_to) {\n                    return 0.3;\n                }\n                if (d.depth == 1 && d.nick != belongs_to) {\n                    return 0.3;\n                }\n                return 1;\n            });\n    })\n        .on('mouseout', function () {\n            d3.selectAll('.node')\n                .transition()\n                .style('opacity', 1);\n        });\n```", "```js\n<style>\n#nicktool {\n  font-size: 1.3em;\n}\n\n#nicktool rect {\n  fill: white;\n}\n\n.node text {\n  font-size: 0.9em;\n}\n\n.name text {\n  font-size: 1.5em;\n}\n\n.name rect {\n  fill: white;\n}\n</style>\n```"]