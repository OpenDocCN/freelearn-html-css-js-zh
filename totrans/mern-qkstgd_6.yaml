- en: Building Web Applications with React
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 React 构建 Web 应用程序
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下食谱：
- en: Understanding React elements and React components
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 React 元素和 React 组件
- en: Composing components
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组合组件
- en: Stateful components and life cycle methods
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有状态的组件和生命周期方法
- en: Working with React.PureComponent
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 React.PureComponent 进行操作
- en: React event handlers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React 事件处理器
- en: Conditional rendering of components
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件的条件渲染
- en: Rendering lists with React
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 React 渲染列表
- en: Working with forms and inputs in React
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 React 中处理表单和输入
- en: Understanding refs and how to use them
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 refs 以及如何使用它们
- en: Understanding React portals
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 React 端口
- en: Catching errors with error boundary components
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用错误边界组件捕获错误
- en: Type checking properties with PropTypes
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 PropTypes 进行类型检查属性
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will be required to know Go programming language, also basics of web application
    framework. You will also need to install Git, in order use the Git repository
    of this book. And finally, ability to develop with an IDE on the command line.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要了解 Go 编程语言，以及 Web 应用程序框架的基础知识。你还需要安装 Git，以便使用本书的 Git 仓库。最后，还需要具备在命令行上使用
    IDE 进行开发的技能。
- en: 'The code files of this chapter can be found on GitHub:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在 GitHub 上找到：
- en: '[https://github.com/PacktPublishing/MERN-Quick-Start-Guide/tree/master/Chapter06](https://github.com/PacktPublishing/MERN-Quick-Start-Guide/tree/master/Chapter06)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/MERN-Quick-Start-Guide/tree/master/Chapter06](https://github.com/PacktPublishing/MERN-Quick-Start-Guide/tree/master/Chapter06)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，以查看代码的实际效果：
- en: '[https://goo.gl/J7d7Ag](https://goo.gl/J7d7Ag)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://goo.gl/J7d7Ag](https://goo.gl/J7d7Ag)'
- en: Introduction
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: React is a JavaScript library for building **user interfaces** (**UI**). React
    is component-based, which means that each component can live separately from others
    and manage its own state. Complex UIs can be created by composing components.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: React 是一个用于构建 **用户界面**（**UI**）的 JavaScript 库。React 是基于组件的，这意味着每个组件都可以独立于其他组件存在并管理自己的状态。复杂的
    UI 可以通过组合组件来创建。
- en: Components are usually created using JSX syntax, which has an XML-like syntax,
    or using the `React.createElement` method. However, JSX is what makes React special
    for building web applications in a declarative way.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 组件通常使用 JSX 语法创建，它具有类似 XML 的语法，或者使用 `React.createElement` 方法。然而，JSX 是使 React
    在构建 Web 应用程序时特别适合声明式编程的原因。
- en: In the MVC pattern, React is usually associated with the View.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MVC 模式下，React 通常与 View 相关联。
- en: Understanding React elements and React components
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 React 元素和 React 组件
- en: '**React elements** can be created using JSX syntax:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**React 元素**可以使用 JSX 语法创建：'
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is transformed to:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这被转换成：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'JSX is a language extension on top of JavaScript that allows you to create
    complex UIs with ease. For example, consider the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: JSX 是 JavaScript 之上的语言扩展，它允许你轻松地创建复杂的 UI。例如，考虑以下：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The previous example could be written without JSX syntax as:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的示例可以不使用 JSX 语法来编写：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'React elements can be any HTML5 tag and any JSX tag can be self-closed. For
    instance, the following will create a paragraph React element with an empty content
    within:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: React 元素可以是任何 HTML5 标签，任何 JSX 标签都可以自闭合。例如，以下将创建一个包含空内容的段落 React 元素：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The same way as you would do with HTML5, you can provide attributes to React
    elements, called properties or props in React:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 就像使用 HTML5 一样，你可以向 React 元素提供属性，在 React 中称为属性或 props：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**React components** allow you to isolate parts of your web application as
    re-usable pieces of code or components. They can be defined in several ways. For
    instance:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**React 组件**允许你将你的 Web 应用程序的部分作为可重用的代码块或组件进行隔离。它们可以以多种方式定义。例如：'
- en: '**Functional components**: These are plain JavaScript functions that accept
    properties as the first argument and return React elements:'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**函数组件**：这些是接受属性作为第一个参数的普通 JavaScript 函数，并返回 React 元素：'
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Class components**: Using ES6 classes allows you to define life cycle methods
    and create stateful components. They render React elements from the `render` method:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类组件**：使用 ES6 类允许你定义生命周期方法和创建有状态的组件。它们通过 `render` 方法渲染 React 元素：'
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Expressions**: These keep a reference to an instance of a React element or
    component:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表达式**：这些保持对 React 元素或组件实例的引用：'
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'There are a few properties that are unique and are only part of React. For
    instance, the `children` property refers to the elements contained within the
    tag:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些属性是独特的，并且仅属于 React。例如，`children` 属性指的是标签内的元素：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `children` property received in `MyComponent`, in the previous example,
    will be an instance of a `span` React element. If multiple React elements or components
    are passed as children, the `children` property will be an array. However, if
    no children are passed, the `children` property will be `null`. The `children`
    property doesn''t necessarily need to be a React element or component; it can
    also be a JavaScript function, or a JavaScript primitive:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，`MyComponent` 接收到的 `children` 属性将是一个 `span` React 元素的实例。如果传递了多个 React
    元素或组件作为子元素，则 `children` 属性将是一个数组。然而，如果没有传递子元素，则 `children` 属性将为 `null`。`children`
    属性不一定是 React 元素或组件；它也可以是一个 JavaScript 函数或 JavaScript 原始值：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'React also considers functional components and class components that return
    or render a string, a valid React component. For instance:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: React 也认为返回或渲染字符串的功能组件和类组件是有效的 React 组件。例如：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: React components' names must start with an uppercase letter. Otherwise, React
    will treat lowercased JSX tags as React elements
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: React 组件的名称必须以大写字母开头。否则，React 将将小写 JSX 标签视为 React 元素
- en: '**Rendering components** to the DOM in React is not a complicated task. React
    provides several methods for rendering a React component to the DOM using the
    `ReactDOM` library. React uses JSX or `React.createElement` to create a tree or
    a representation of the DOM tree. It does so by using a virtual DOM, which allows
    React to transform React elements to DOM nodes and update only the nodes that
    have changed.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**在 React 中将组件渲染到 DOM 中** 不是一个复杂的过程。React 提供了多种方法，通过 `ReactDOM` 库将 React 组件渲染到
    DOM 中。React 使用 JSX 或 `React.createElement` 创建一个树或 DOM 树的表示。它是通过使用虚拟 DOM 来实现的，这使得
    React 能够将 React 元素转换为 DOM 节点，并仅更新已更改的节点。'
- en: 'This is how you usually render your application using the `render` method from
    the `ReactDOM` library:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是通常使用 `ReactDOM` 库的 `render` 方法渲染应用程序的方式：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The first argument provided to the `render` method is a React component or a
    React element. The second argument tells you where in the DOM to render the application.
    In the previous example, we use the `querySelector` method from the document object
    to look for a DOM node with an attribute of `role` set to `"main"`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`render` 方法提供的第一个参数是一个 React 组件或 React 元素。第二个参数告诉你在 DOM 中的哪个位置渲染应用程序。在上一个示例中，我们使用文档对象的
    `querySelector` 方法查找具有 `role` 属性设置为 `"main"` 的 DOM 节点。'
- en: 'React also allows you to render React components as an HTML string, which is
    useful for generating content on the server side and sending the content directly
    to the browser as an HTML file:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: React 还允许你将 React 组件作为 HTML 字符串渲染，这对于在服务器端生成内容并将内容直接作为 HTML 文件发送到浏览器非常有用：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'It will output the following in the console:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 它将在控制台输出以下内容：
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Getting ready
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, you will create a simple React application using the concepts
    that you have learned about React components and React elements. Before you start,
    create a new `package.json` file with the following content:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，你将创建一个简单的 React 应用程序，使用你学到的关于 React 组件和 React 元素的概念。在你开始之前，创建一个包含以下内容的新的
    `package.json` 文件：
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, create a babel configuration file as `.babelrc`, adding the following
    content:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为 `.babelrc` 的 Babel 配置文件，并添加以下内容：
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, install the dependencies by opening a Terminal and running:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行以下命令来安装依赖项：
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How to do it...
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create a React application that will display a welcome message writing functional,
    class, and expression components:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 React 应用程序，通过编写功能、类和表达式组件来显示欢迎信息：
- en: Create a new file named `basics.js.`
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `basics.js` 的新文件。
- en: 'Import the React and ReactDOM libraries:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 React 和 ReactDOM 库：
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Define a new functional component that will render a `span` React element with
    `color` set to red in its style attributes:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个新的功能组件，该组件将渲染一个 `span` React 元素，其 `style` 属性中的 `color` 设置为红色：
- en: '[PRE19]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Define another functional component that will render an `h1` React element
    and the `RedText` functional component as part of its `children`:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义另一个功能组件，该组件将渲染一个 `h1` React 元素和作为其 `children` 的 `RedText` 功能组件：
- en: '[PRE20]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Define an expression that will contain a reference to a React element:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个表达式，其中将包含对 React 元素的引用：
- en: '[PRE21]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Define a class component named `Footer` that will display the current date:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为 `Footer` 的类组件，用于显示当前日期：
- en: '[PRE22]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Render the application to the DOM:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序渲染到 DOM 中：
- en: '[PRE23]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Save the file.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。
- en: 'Then, create an `index.html` file where you will render the React application:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，创建一个 `index.html` 文件，你将在其中渲染 React 应用程序：
- en: Create a new file named `index.html`
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `index.html` 的新文件
- en: 'Add the following code:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码：
- en: '[PRE24]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Save the file
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: Let's test it...
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们测试一下...
- en: 'To see the previous work in action:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看之前的工作效果：
- en: 'Open a Terminal at the root of your project directory and run:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目目录根目录下打开一个终端并运行：
- en: '[PRE25]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then, open a new tab in your web browser and go to:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在您的网络浏览器中打开一个新标签页并转到：
- en: '[PRE26]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: You should be able to see the React application rendered to the DOM
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该能够看到React应用程序渲染到DOM中
- en: Composing components
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组合组件
- en: In React, all components can be isolated and complex UIs can be built by composing
    components which enables their re-usability.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在React中，所有组件都可以被隔离，通过组合组件可以构建复杂的UI，这使它们具有可复用性。
- en: Getting ready
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, you will work with re-usable components to generate a home
    page containing three sections: a header, a paragraph with a description, and
    a footer. These three sections will be written as three separate components that
    will be composed later to build a home page. Before you start, create a new `package.json`
    file with the following content:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将使用可复用组件来生成一个包含三个部分的主页：一个页眉、一个带有描述的段落和一个页脚。这三个部分将被编写为三个单独的组件，稍后将被组合起来构建主页。在你开始之前，创建一个包含以下内容的新的`package.json`文件：
- en: '[PRE27]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Next, create a babel configuration file as `.babelrc,` adding the following
    content:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个babel配置文件`.babelrc`，添加以下内容：
- en: '[PRE28]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then, install the dependencies by opening a Terminal and running:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行以下命令来安装依赖项：
- en: '[PRE29]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: How to do it...
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create a new folder named `component` in the root directory of your project.
    Then, create the following three files in order:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目根目录中创建一个名为`component`的新文件夹。然后，按照以下顺序创建以下三个文件：
- en: '`Header.js`'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Header.js`'
- en: '`Footer.js`'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Footer.js`'
- en: '`Description.js`'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Description.js`'
- en: 'The `Header` component will generate an `h1` React element that represents
    the heading of the page. It expects to receive a `title` property:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`Header`组件将生成一个代表页面标题的`h1` React元素。它期望接收一个`title`属性：'
- en: Create a new file named `Header.js` in the `component` directory
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`component`目录中创建一个名为`Header.js`的新文件
- en: 'Add the following code:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码：
- en: '[PRE30]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Save the file
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'The `Footer` component will generate a `footer` React element that will be
    placed at the end of the page. It will expect to receive a `date` property:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`Footer`组件将生成一个放置在页面末尾的`footer` React元素。它期望接收一个`date`属性：'
- en: Create a new file named `Footer.js` in the `component` directory
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`component`目录中创建一个名为`Footer.js`的新文件
- en: 'Add the following code:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码：
- en: '[PRE31]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Save the file
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'The `Description` component will generate a paragraph that will display a description
    of the page:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`Description`组件将生成一个段落，显示页面的描述：'
- en: Create a new file named `Description.js` in the `component` directory
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`component`目录中创建一个名为`Description.js`的新文件
- en: 'Add the following code:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码：
- en: '[PRE32]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Save the file
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Next, move back out of the `component` directory to the root directory of your
    project where `package.json` is located and create the following file:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，从`component`目录退回到项目根目录（其中包含`package.json`）并创建以下文件：
- en: Create a new file named `composing-react.js`
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`composing-react.js`的新文件
- en: 'Import the React and `ReactDOM` libraries:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入React和`ReactDOM`库：
- en: '[PRE33]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Import the previously defined components:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入之前定义的组件：
- en: '[PRE34]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Define a `App` component that will render your previously defined components:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个`App`组件，该组件将渲染你之前定义的组件：
- en: '[PRE35]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Render the application:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 渲染应用程序：
- en: '[PRE36]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Save the file
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Then, create an `index.html` file where you will render the React application:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，创建一个`index.html`文件，你将在其中渲染React应用程序：
- en: Create a new file named `index.html`
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`index.html`的新文件
- en: 'Add the following code:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码：
- en: '[PRE37]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Save the file
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: Let's test it...
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们测试一下...
- en: 'To see the previous work in action, perform the following steps:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看之前的工作效果，请执行以下步骤：
- en: 'Open a Terminal at the root of your project directory and run:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的项目目录根目录下打开一个终端并运行：
- en: '[PRE38]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Then, open a new tab in your web browser and go to:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在您的网络浏览器中打开一个新标签页并转到：
- en: '[PRE39]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'If you inspect the DOM tree in your browser''s developer tools, you should
    be able to see the following DOM structure:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你在浏览器开发者工具中检查DOM树，你应该能够看到以下DOM结构：
- en: '[PRE40]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: How it works...
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Each React component is written in a separate file. Then, we import the components
    in the main application file, `composing-react.js`, and use composition to generate
    a virtual DOM tree. Each component is re-usable because it can be used again in
    other parts of your application or in other components by just importing the files.
    Then, the `render` method from the `ReactDOM` library is used to generate a DOM
    representation of the virtual DOM tree.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 每个React组件都写在单独的文件中。然后，我们在主应用程序文件`composing-react.js`中导入组件，并使用组合来生成虚拟DOM树。每个组件都是可重用的，因为它可以在应用程序的其他部分或其他组件中再次使用，只需导入文件。然后，使用`ReactDOM`库中的`render`方法来生成虚拟DOM树的DOM表示。
- en: There's more...
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Did you notice that we used `React.Fragment`? This is a new feature introduced
    in React v16\. It allows you to return multiple elements without creating an extra
    DOM node. A component cannot return multiple React components or elements in the
    following way:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 你注意到我们使用了`React.Fragment`吗？这是React v16引入的新功能。它允许你返回多个元素而不创建额外的DOM节点。组件不能以下方式返回多个React组件或元素：
- en: '[PRE41]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'However, using `React.Fragment`, it''s possible to do the following:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用`React.Fragment`，你可以做以下操作：
- en: '[PRE42]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Stateful components and life cycle methods
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有状态组件和生命周期方法
- en: 'React components can manage their own state and update only when the state
    has changed. Stateful React components are written using ES6 classes:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: React组件可以管理它们自己的状态，并且只有当状态发生变化时才会更新。使用ES6类编写的有状态React组件如下：
- en: '[PRE43]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'React class components have a `state` instance property to access their internal
    state and a `props` property to access properties passed to the component:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: React类组件有一个`state`实例属性来访问它们的内部状态，以及一个`props`属性来访问传递给组件的属性：
- en: '[PRE44]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'And their state can be mutated by using the `setState` instance method:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 并且它们的状态可以通过使用`setState`实例方法来修改：
- en: '[PRE45]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The state is initialized once. Then, when the component is mounted, the state
    should only be mutated using the `setState` method. This way, React is able to
    detect changes in the state and update the component.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 状态只初始化一次。然后，当组件挂载时，应该只使用`setState`方法来修改状态。这样，React能够检测状态的变化并更新组件。
- en: The `setState` method accepts a callback function as the first argument which
    will be executed passing the current state (`prevState` for convention) as the
    first argument to the callback function and the current `props` as the second
    argument. This is so because `setState` works asynchronously and the state could
    be mutated while you are performing other actions in different parts of your component.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`setState`方法接受一个回调函数作为第一个参数，该回调函数将在将当前状态（按惯例为`prevState`）作为第一个参数传递给回调函数，并将当前`props`作为第二个参数时执行。这是因为`setState`是异步的，状态可能在你在组件的不同部分执行其他操作时被修改。'
- en: 'If you don''t need access to the current state while updating the state, you
    can directly pass an object as the first argument. For instance, the previous
    example could have been written as:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不需要在更新状态时访问当前状态，你可以直接将一个对象作为第一个参数传递。例如，上一个例子可以写成如下形式：
- en: '[PRE46]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '`setState` also accepts an optional callback function as a second argument
    that gets called once the state has been updated. Because `setState` is asynchronous,
    you may want to use the second callback to perform an action only once the state
    has been updated:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`setState`还接受一个可选的回调函数作为第二个参数，该回调函数在状态更新后被调用。因为`setState`是异步的，你可能想在状态更新后执行一次操作，所以可以使用第二个回调：'
- en: '[PRE47]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Once the component is mounted, the console will first output `null` even though
    we used `setState` before it; that's because the state is set asynchronously.
    However, once the state is updated, the console will display "date has been updated".
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦组件挂载，控制台将首先输出`null`，即使我们在它之前使用了`setState`；这是因为状态是异步设置的。然而，一旦状态更新，控制台将显示“date
    has been updated”。
- en: 'When using the `setState` method, React merges the previous state with the
    current given state. Internally, it''s similar to doing:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`setState`方法时，React将前一个状态与当前给定的状态合并。内部上，它类似于执行以下操作：
- en: '[PRE48]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Every class component has *life cycle methods* that give you control over the
    life of your component since its creation until it''s destroyed, as well as giving
    you control over other properties, such as knowing when the component has received
    new properties and if the component should be updated or not. These are the life
    cycle methods present in all class components:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 每个类组件都有*生命周期方法*，这些方法让你从组件创建到销毁的过程中控制组件的生命周期，以及控制其他属性，例如知道组件是否接收到新的属性以及组件是否应该更新。这些是所有类组件中存在的生活周期方法：
- en: '`constructor(props)`: This is invoked when initializing a new instance of the
    component, before the component is mounted. `props` must be passed to the super
    class using `super(props)` to let React set the `props` correctly. The `constructor`
    method is useful as well to initialize the initial state of the component.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constructor(props)`: 在初始化组件的新实例并在组件挂载之前，这个方法会被调用。`props`必须通过`super(props)`传递给超类，以便React正确设置`props`。`constructor`方法也很有用，可以用来初始化组件的初始状态。'
- en: '`static getDerivedStateFromProps(nextProps, nextState)`: This is invoked when
    the component has been instantiated and when the component will receive new `props`.
    This method is useful when the state or part of it depends on values received
    from the `props` passed to the component. It must return an object which will
    be merged with the current state or `null` if the state doesn''t need to be updated
    after receiving new `props`.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`static getDerivedStateFromProps(nextProps, nextState)`: 当组件被实例化并且组件将接收到新的`props`时，这个方法会被调用。当状态或其部分依赖于传递给组件的`props`中的值时，这个方法很有用。它必须返回一个对象，该对象将与当前状态合并，或者如果接收到新的`props`后不需要更新状态，则返回`null`。'
- en: '`componentDidMount()`: This is invoked after the component has been mounted
    and after the first `render` call. It''s useful for integrating with third-party
    libraries, accessing the DOM, or making HTTP requests to an endpoint.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`componentDidMount()`: 在组件被挂载并在第一次`render`调用之后，这个方法会被调用。它对于与第三方库集成、访问DOM或向端点发送HTTP请求很有用。'
- en: '`shouldComponentUpdate(nextProps, nextState)`: This is invoked when the component
    has updated the state or new props have been received. This method allows React
    to know if it should update the component or not. If you don''t implement this
    method in your component, it defaults to returning `true`, which means the component
    should be updated every time the state has changed or new props have been received.
    If implementing this method and returning `false`, it will tell React not to update
    the component.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shouldComponentUpdate(nextProps, nextState)`: 当组件更新了状态或接收到了新的props时，这个方法会被调用。这个方法允许React知道是否应该更新组件。如果你在你的组件中没有实现这个方法，它默认返回`true`，这意味着每次状态改变或接收到新的props时，组件都应该被更新。如果你实现这个方法并返回`false`，它将告诉React不要更新组件。'
- en: '`componentDidUpdate(prevProps, prevState, snapshot)`: This is invoked after
    the render method or when an update occurs, except for the first rendering.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`componentDidUpdate(prevProps, prevState, snapshot)`: 在渲染方法之后或发生更新时（除了第一次渲染），这个方法会被调用。'
- en: '`getSnapshotBeforeUpdate(prevProps, prevState)`: This is invoked after the
    render method or when an update occurs but before the `componentDidUpdate` life
    cycle method. The returned value of this method is passed as the third argument
    of `componentDidUpdate`.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getSnapshotBeforeUpdate(prevProps, prevState)`: 在渲染方法之后或发生更新时，但在`componentDidUpdate`生命周期方法之前，这个方法会被调用。这个方法的返回值作为`componentDidUpdate`的第三个参数传递。'
- en: '`componentWillUnmount()`: This is invoked before a component is unmounted and
    its instance destroyed. If using third-party libraries, this method is helpful
    for cleaning up. For instance, clearing timers or cancelling network requests.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`componentWillUnmount()`: 在组件卸载和其实例被销毁之前，这个方法会被调用。如果你使用第三方库，这个方法有助于清理。例如，清除定时器或取消网络请求。'
- en: '`componentDidCatch(error, info)` : This is a new feature of React v16 for error
    handling. We will look at this in more detail in the following recipes.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`componentDidCatch(error, info)`：这是React v16的新特性，用于错误处理。我们将在接下来的菜谱中更详细地探讨这个特性。'
- en: Getting ready
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, you will build a component using all the life cycle methods
    that we have learned about. First, create a new `package.json` file with the following
    content:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将使用我们所学到的所有生命周期方法来构建一个组件。首先，创建一个包含以下内容的新的`package.json`文件：
- en: '[PRE49]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Next, create a babel configuration file as `.babelrc`, adding the following
    content:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个babel配置文件作为`.babelrc`，添加以下内容：
- en: '[PRE50]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Then, install the dependencies by opening a Terminal and running:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行以下命令来安装依赖项：
- en: '[PRE51]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: How to do it...
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Build a `LifeCycleTime` component whose only purpose would be to display the
    current time. The component will be updated every 100 ms to keep the component
    in sync with the time change. We will use the life cycle methods in this component
    for the following purposes:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个 `LifeCycleTime` 组件，其唯一目的是显示当前时间。该组件将每 100 毫秒更新一次，以保持组件与时间变化的同步。我们将在这个组件中使用生命周期方法来完成以下目的：
- en: '`constructor(props)`: To initialize the component''s initial state.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constructor(props)`: 用于初始化组件的初始状态。'
- en: '`static getDerivedStateFromProps(nextProps, nextState)`: To merge the `props`
    with the state.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`static getDerivedStateFromProps(nextProps, nextState)`: 用于合并 `props` 和状态。'
- en: '`componentDidMount()`: To set a function that will be executed every 100 ms
    using `setInterval`, which will update the state with the current time.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`componentDidMount()`: 设置一个每 100 毫秒执行一次的函数，使用 `setInterval` 更新状态为当前时间。'
- en: '`shouldComponentUpdate(nextProps, nextState)`:To decide if the component should
    be rendered or not. Check if `props` have a property `dontUpdate` set to `true`,
    which means the component shouldn''t be updated on a `state` or `props` change.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shouldComponentUpdate(nextProps, nextState)`: 用于决定组件是否应该被渲染。检查 `props` 是否有一个属性
    `dontUpdate` 设置为 `true`，这意味着组件在状态或 `props` 变化时不应更新。'
- en: '`componentDidUpdate(prevProps, prevState, snapshot)`: To simply log in the
    console that the component has been updated displaying the `snapshot`''s value.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`componentDidUpdate(prevProps, prevState, snapshot)`: 用于在控制台简单地记录组件已被更新，并显示
    `snapshot` 的值。'
- en: '`getSnapshotBeforeUpdate(prevProps, prevState)`: To illustrate the functionality
    of this method, simply return a string that will be passed as the third argument
    to `componentDidUpdate`.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getSnapshotBeforeUpdate(prevProps, prevState)`: 为了说明这个方法的功能，只需返回一个字符串，该字符串将被传递给
    `componentDidUpdate` 的第三个参数。'
- en: '`componentWillUnmount()`: When the component is destroyed or unmounted, clear
    the interval defined in `componentDidMount`. Otherwise, after the component is
    unmounted, you will see an error being displayed.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`componentWillUnmount()`: 当组件被销毁或卸载时，清除在 `componentDidMount` 中定义的间隔。否则，在组件卸载后，您将看到一个错误信息被显示。'
- en: 'First, create an `index.html` file where you will render the React application:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个 `index.html` 文件，您将在其中渲染 React 应用程序：
- en: Create a new file named `index.html`
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `index.html` 的新文件
- en: 'Add the following code:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码：
- en: '[PRE52]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Save the file
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Next, perform the following steps to build the `LifeCycleTime` component:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，执行以下步骤来构建 `LifeCycleTime` 组件：
- en: Create a new file named `stateful-react.js`
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `stateful-react.js` 的新文件
- en: 'Import the React and `ReactDOM` libraries:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 React 和 `ReactDOM` 库：
- en: '[PRE53]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Define a `LifeCycleTime` class component and use the life cycle methods as
    previously described:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个 `LifeCycleTime` 类组件，并使用之前描述的生命周期方法：
- en: '[PRE54]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Then, define an `App` class component, which will be used for testing your
    previously created component. Add three buttons: one that will toggle the color
    property between red and blue and pass it as a prop to the `LifeCycleTime` component,
    another button for toggling the `dontUpdate` property in the state between true
    and false, which will then be passed as a prop to the `LifeCycleTime`, and finally,
    a button that when clicked will either mount or unmount the `LifeCycleTime` component:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，定义一个 `App` 类组件，该组件将用于测试你之前创建的组件。添加三个按钮：一个按钮会在红色和蓝色之间切换颜色属性，并将其作为属性传递给 `LifeCycleTime`
    组件，另一个按钮用于在状态中的 `dontUpdate` 属性之间切换 true 和 false，然后将其作为属性传递给 `LifeCycleTime`，最后，一个按钮在被点击时将挂载或卸载
    `LifeCycleTime` 组件：
- en: '[PRE55]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Render the application:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 渲染应用程序：
- en: '[PRE56]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Save the file.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。
- en: Let's test it...
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们测试一下...
- en: 'To see the previous work in action, perform the following steps::'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看之前的工作效果，请执行以下步骤：
- en: 'Open a Terminal at the root of your project directory and run:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的项目目录根目录下打开一个终端，并运行：
- en: '[PRE57]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Then, open a new tab in your web browser and go to:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在您的网络浏览器中打开一个新标签页，并转到：
- en: '[PRE58]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Use the buttons to toggle the state of the component and understand how the
    life cycle methods affect the component's functionality.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用这些按钮来切换组件的状态，并理解生命周期方法如何影响组件的功能。
- en: Working with React.PureComponent
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 React.PureComponent 进行操作
- en: '`React.PureComponent` is similar to `React.Component`. The difference is that
    `React.Component` implements the `shouldComponentUpdate` life cycle method internally
    to make a shallow comparison of the `state` and `props` to decide if the component
    should update or not.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`React.PureComponent` 与 `React.Component` 类似。区别在于 `React.Component` 内部实现了 `shouldComponentUpdate`
    生命周期方法，以进行浅比较 `state` 和 `props`，以决定组件是否应该更新。'
- en: Getting ready
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, you will write two components, one extending `React.PureComponent`,
    and another extending `React.Component,` in order to see how they behave when
    the same properties are passed to them. Before you start, create a new `package.json`
    file with the following content:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，您将编写两个组件，一个扩展 `React.PureComponent`，另一个扩展 `React.Component`，以便了解当将相同的属性传递给它们时它们的行为。在开始之前，创建一个包含以下内容的
    `package.json` 文件：
- en: '[PRE59]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Next, create a babel configuration file as `.babelrc`, adding the following
    content:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个 babel 配置文件 `.babelrc`，添加以下内容：
- en: '[PRE60]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Then, install the dependencies by opening a Terminal and running:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行以下命令来安装依赖项：
- en: '[PRE61]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: How to do it...
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Build a React application to illustrate and understand better how `React.PureComponent`
    works. Create two components: one will extend `React.Component` while the other
    will extend `React.PureComponent`. Both components will be placed inside another
    React component named `App` that will update its state around every second. Using
    the life cycle method,`componentDidUpdate,` in both components, we will log on
    the console which one of them gets updated when the parent component `App` updates.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个 React 应用程序来展示和更好地理解 `React.PureComponent` 的工作原理。创建两个组件：一个将扩展 `React.Component`，另一个将扩展
    `React.PureComponent`。这两个组件将被放置在另一个名为 `App` 的 React 组件内部，该组件大约每秒更新一次其状态。在两个组件中使用生命周期方法
    `componentDidUpdate`，在控制台记录哪个组件在父组件 `App` 更新时被更新。
- en: 'First, create an `index.html` file where the react application will be rendered:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个 `index.html` 文件，其中将渲染 react 应用程序：
- en: Create a new file named `index.html`
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `index.html` 的新文件。
- en: 'Add the following HTML code:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下 HTML 代码：
- en: '[PRE62]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Save the file
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Then, follow the next steps to build the React application:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，按照以下步骤构建 React 应用程序：
- en: Create a new file named `pure-component.js.`
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `pure-component.js` 的新文件。
- en: 'Import the React and ReactDOM libraries:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 React 和 ReactDOM 库：
- en: '[PRE63]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Define a `Button` class component extending the `React.PureComponent` class:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个扩展 `React.PureComponent` 类的 `Button` 类组件：
- en: '[PRE64]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Define a `Text` class component extending the `React.Component` class:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个扩展 `React.Component` 类的 `Text` 类组件：
- en: '[PRE65]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Define a simple `App` component that will render both components. The `App`
    component will set a timer once it''s mounted and update the state around every
    second:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个简单的 `App` 组件，该组件将渲染两个组件。`App` 组件在挂载后设置计时器，并且大约每秒更新一次状态：
- en: '[PRE66]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Render the application:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 渲染应用程序：
- en: '[PRE67]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Save the file.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。
- en: Let's test it...
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们测试一下...
- en: 'To see the previous work in action, perform the following steps:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看之前工作的效果，请执行以下步骤：
- en: 'Open a Terminal at the root of your project directory and run:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目目录的根目录下打开终端并运行：
- en: '[PRE68]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Then, open a new tab in your web browser and go to:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在您的网页浏览器中打开一个新标签页并转到：
- en: '[PRE69]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'The counter will increase by one around every second. Open the developer tools
    in your browser and check the console output. You should see the following:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计数器大约每秒增加一次。打开浏览器中的开发者工具并检查控制台输出。您应该看到以下内容：
- en: '[PRE70]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: How it works...
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Because `React.PureComponent` implements the `shouldComponentUpdate`**life cycle
    method** internally, it doesn't update the `Button` component because its `state`
    or `props` have not changed. It does, however, update the `Text` component because
    `shouldComponentUpdate` returns `true` by default, telling React to update the
    component, even though its props or state have not changed.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 `React.PureComponent` 内部实现了 `shouldComponentUpdate` 生命周期方法，所以它不会更新 `Button`
    组件，因为其 `state` 或 `props` 没有改变。然而，它确实更新了 `Text` 组件，因为 `shouldComponentUpdate` 默认返回
    `true`，告诉 React 更新组件，即使其 props 或 state 没有改变。
- en: React event handlers
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React 事件处理器
- en: React's event system uses internally a wrapper, called `SyntheticEvent`, around
    the native HTML DOM events for cross-browser support. React events follow the
    W3C spec, which can be found at [https://www.w3.org/TR/DOM-Level-3-Events/](https://www.w3.org/TR/DOM-Level-3-Events/).
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: React 的事件系统内部使用一个名为 `SyntheticEvent` 的包装器来处理原生 HTML DOM 事件，以实现跨浏览器支持。React 事件遵循
    W3C 规范，可以在 [https://www.w3.org/TR/DOM-Level-3-Events/](https://www.w3.org/TR/DOM-Level-3-Events/)
    找到。
- en: 'React event names are camel-cased as opposed to HTML DOM events, which are
    lowercased. For instance, the HTML DOM event `onclick` would be called `onClick`
    in React. For a complete list of supported events, visit the React official documentation
    about events: [https://reactjs.org/docs/events.html](https://reactjs.org/docs/events.html)'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: React 事件名称采用驼峰式命名，而不是 HTML DOM 事件的小写。例如，HTML DOM 事件 `onclick` 在 React 中会被调用为
    `onClick`。有关支持事件的完整列表，请访问 React 官方文档关于事件的页面：[https://reactjs.org/docs/events.html](https://reactjs.org/docs/events.html)
- en: Getting ready
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, you will write a component to see how it is defined and how
    it works. Before you start, create a new `package.json` file with the following
    content:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将编写一个组件来查看它是如何定义和工作的。在你开始之前，创建一个包含以下内容的新的 `package.json` 文件：
- en: '[PRE71]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Next, create a babel configuration file as `.babelrc`, adding the following
    content:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为 `.babelrc` 的 Babel 配置文件，并添加以下内容：
- en: '[PRE72]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Then, install the dependencies by opening a Terminal and running:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行以下命令来安装依赖项：
- en: '[PRE73]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: How to do it...
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Firstly, create an `index.html` file where the React application will be rendered:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个 `index.html` 文件，React 应用程序将在其中渲染：
- en: Create a new file named `index.html`
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `index.html` 的新文件
- en: 'Add the following HTML code:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下 HTML 代码：
- en: '[PRE74]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Save the file
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Next, write a component defining an event handler for the `onClick` event:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，编写一个组件，定义一个用于 `onClick` 事件的处理器：
- en: Create a new file named `events.js.`
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `events.js` 的新文件。
- en: 'Import the React and ReactDOM libraries:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 React 和 ReactDOM 库：
- en: '[PRE75]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Define a class component that will render a `h1` React element and a `button`
    React element, which will trigger the `onBtnClick` method whenever it''s clicked:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个类组件，该组件将渲染一个 `h1` React 元素和一个 `button` React 元素，每次点击时都会触发 `onBtnClick` 方法：
- en: '[PRE76]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Render the application:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 渲染应用程序：
- en: '[PRE77]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Save the file.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。
- en: Let's test it...
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们测试一下...
- en: 'To see the application working, perform the following steps:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看应用程序的工作情况，请执行以下步骤：
- en: 'Open a Terminal at the root of your project directory and run:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的项目目录根目录中打开终端并运行以下命令：
- en: '[PRE78]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Then, open a new tab in your web browser and go to:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在您的网络浏览器中打开一个新标签页，并转到：
- en: '[PRE79]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Click on the button to change the title.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击按钮以更改标题。
- en: How it works...
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: React events are passed to React elements as `props`. For instance, we passed
    the `onClick` prop to the `button` React element and a reference to a callback
    function that we expect to be called when the user clicks on the button.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: React 事件作为 `props` 传递给 React 元素。例如，我们传递了 `onClick` prop 给 `button` React 元素，以及一个回调函数的引用，我们期望当用户点击按钮时调用该函数。
- en: There's more...
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Did you notice that we have been using the `bind` very often? When a method
    is passed as a prop to a child component, it loses the context of `this`, so binding
    to the context is necessary. Take the following example:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 你注意到我们经常使用 `bind` 吗？当一个方法作为 prop 传递给子组件时，它会失去 `this` 的上下文，因此绑定到上下文是必要的。以下是一个示例：
- en: '[PRE80]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'The output displayed will be:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 显示的输出将是：
- en: '[PRE81]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Even though the constant `props` has a reference to the `fn` method of the `examp`
    instance of the `Example` class, it loses the context of `this`. That's why binding
    allows you to keep the original context. In React, we bind a method to the original
    context of `this` to be able to use our own instance methods, such as `setState,`
    when passing the function down to child components. Otherwise, the context of
    `this` will be `undefined` and the function will fail.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 即使常量 `props` 有对 `Example` 类的 `examp` 实例的 `fn` 方法的引用，它也会失去 `this` 的上下文。这就是为什么绑定允许你保持原始上下文。在
    React 中，我们将方法绑定到原始的 `this` 上下文，以便在将函数向下传递给子组件时使用我们自己的实例方法，例如 `setState`。否则，`this`
    的上下文将是 `undefined`，函数将失败。
- en: Conditional rendering of components
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件的条件渲染
- en: Usually when building complex UIs, you would need to render a component or a
    React element according to the state or props received.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 通常在构建复杂的 UI 时，您需要根据接收到的状态或 props 来渲染组件或 React 元素。
- en: 'React components allow JavaScript to be executed within curly brackets and
    it can be used with the conditional ternary operator to decide which component
    or React element to render. For instance:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: React 组件允许在花括号内执行 JavaScript，并且可以使用条件三元运算符来决定渲染哪个组件或 React 元素。例如：
- en: '[PRE82]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'This also could have been written as:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 这也可以写成：
- en: '[PRE83]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'If passing `"noon"` as the `timeOfDay` property value, it will generate the
    following HTML content:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将 `"noon"` 作为 `timeOfDay` 属性的值传递，它将生成以下 HTML 内容：
- en: '[PRE84]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Or the following when the `timeOfDay` property is not set to `"noon"`:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 或者当 `timeOfDay` 属性未设置为 `"noon"` 时：
- en: '[PRE85]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Getting ready
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, you will build a component that that renders one of its children
    according to a given condition. Firstly, create a new `package.json` file with
    the following content:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将构建一个组件，该组件根据给定的条件渲染其子组件之一。首先，创建一个包含以下内容的新的 `package.json` 文件：
- en: '[PRE86]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Next, create a babel configuration file as `.babelrc,` adding the following
    content:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为 `.babelrc` 的 Babel 配置文件，并添加以下内容：
- en: '[PRE87]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Then, install the dependencies by opening a Terminal and running:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行以下命令来安装依赖项：
- en: '[PRE88]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: How to do it...
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Write a React component that will decide which of two different React elements,
    given as `children` to your component, will be displayed according to a `condition`
    passed as a property. If the condition is true, then the first child is displayed.
    Otherwise, the second child should be displayed.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个React组件，该组件将根据传递给组件的`condition`属性来决定显示两个不同的React元素中的哪一个。如果条件为真，则显示第一个子元素。否则，应显示第二个子元素。
- en: 'First, create an `index.html` file where the React application will be rendered:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个`index.html`文件，React应用程序将在其中渲染：
- en: Create a new file named `index.html`
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`index.html`的新文件
- en: 'Add the following HTML code:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下HTML代码：
- en: '[PRE89]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Save the file
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Then, create a new file containing the logic of the React application and your
    component:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，创建一个包含React应用程序逻辑和组件的新文件：
- en: Create a new file named `conditions.js`
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`conditions.js`的新文件
- en: 'Import the React and ReactDOM libraries:'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入React和ReactDOM库：
- en: '[PRE90]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Define a functional component named `Toggle` that will receive a `condition`
    property that will be evaluated to define which React element to render. It expects
    to receive two React elements as children:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为`Toggle`的功能组件，该组件将接收一个`condition`属性，该属性将被评估以确定要渲染哪个React元素。它期望接收两个React元素作为子元素：
- en: '[PRE91]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Define a class component named `App` that will render a React element based
    on the defined condition. When the button is clicked, it will toggle the `color`
    state:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为`App`的类组件，该组件将根据定义的条件渲染一个React元素。当按钮被点击时，它将切换`color`状态：
- en: '[PRE92]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Render the application:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 渲染应用程序：
- en: '[PRE93]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Save the file.
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。
- en: Let's test it...
  id: totrans-332
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们测试一下...
- en: 'To run and test the application, perform the following steps:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行和测试应用程序，请执行以下步骤：
- en: 'Open a Terminal at the root of your project directory and run:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的项目目录根目录中打开一个终端并运行：
- en: '[PRE94]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Then, open a new tab in your web browser and go to:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在您的网络浏览器中打开一个新标签页并转到：
- en: '[PRE95]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Click on the button to toggle which React element is displayed
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击按钮以切换显示哪个React元素
- en: How it works...
  id: totrans-339
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Because the `children` property can be an array of React elements, we can access
    each individual React element and decide which one to render. We used the `condition`
    property to evaluate if the given condition is truthy to render the first React
    element. Otherwise, if the value is falsy, then the second React element is rendered.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`children`属性可以是一个React元素的数组，所以我们可以访问每个单独的React元素并决定渲染哪一个。我们使用了`condition`属性来评估给定的条件是否为真以渲染第一个React元素。否则，如果值为假，则渲染第二个React元素。
- en: Rendering lists with React
  id: totrans-341
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React渲染列表
- en: 'React allows you to pass a collection of React elements or components as `children`
    in the form of an array. For instance:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: React允许您以数组的形式将React元素或组件的集合作为`children`传递。例如：
- en: '[PRE96]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Collections of React elements or components must be given a special props property
    named `key`. This property lets React know which of the elements in the collection
    have changed, moved, or been removed in/from the array when an update occurs.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: React元素或组件的集合必须提供一个特殊的props属性，名为`key`。该属性让React知道在更新发生时，集合中的哪些元素已更改、移动或从数组中删除：
- en: Getting ready
  id: totrans-345
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, you will build a utility component that will map each item
    of an array to a component''s props and render them as a list. Before you start,
    create a new `package.json` file with the following content:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，您将构建一个实用组件，该组件将映射数组的每个项到组件的props并将它们作为列表渲染。在开始之前，创建一个包含以下内容的新的`package.json`文件：
- en: '[PRE97]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'Next, create a babel configuration file as `.babelrc`, adding the following
    content:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个babel配置文件`.babelrc`，添加以下内容：
- en: '[PRE98]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'Then, install the dependencies by opening a Terminal and running:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行以下命令来安装依赖项：
- en: '[PRE99]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: How to do it...
  id: totrans-352
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: Create a React component named `MapArray,` which will do the job of mapping
    the items of an array to a React component.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`MapArray`的React组件，该组件将负责将数组的项映射到React组件。
- en: 'First, create an `index.html` file where the React application will be rendered:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个`index.html`文件，React应用程序将在其中渲染：
- en: Create a new file named `index.html`
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`index.html`的新文件
- en: 'Add the following HTML code:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下HTML代码：
- en: '[PRE100]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Save the file
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Then, perform the following steps to build the React application:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，按照以下步骤构建React应用程序：
- en: Create a new file named `lists.js`.
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`lists.js`的新文件。
- en: 'Import the React and ReactDOM libraries:'
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入React和ReactDOM库：
- en: '[PRE101]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Define a functional component called `MapArray` that will expect to receive
    three properties: `from,` which is expected to be an array of values, `mapToProps,`
    which is expected to be a callback function for mapping values to properties,
    and lastly, `children,` which is expected to receive a React component where the
    values of the array will be mapped to:'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为 `MapArray` 的函数组件，它将期望接收三个属性：`from`，它期望是一个值数组，`mapToProps`，它期望是一个将值映射到属性的回调函数，最后是
    `children`，它将接收一个 React 组件，其中数组的值将被映射到：
- en: '[PRE102]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'Define a `TodoItem` component that expects to receive two properties, `done`
    and `label`:'
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个 `TodoItem` 组件，它期望接收两个属性，`done` 和 `label`：
- en: '[PRE103]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'Define an array that contains a to-do list of object values:'
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个包含待办列表对象值的数组：
- en: '[PRE104]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'Define a callback function that will map the array''s object values to the
    expected properties of the `TodoItem` component. Rename the `id` property as `key`,
    and the `title` property as `label`:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个回调函数，该函数将映射数组的对象值到 `TodoItem` 组件的预期属性。将 `id` 属性重命名为 `key`，将 `title` 属性重命名为
    `label`：
- en: '[PRE105]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Define a `TodoListApp` component that will make use of the `MapArray` component
    to create an instance of `TodoItem` for every item in the to-do list array:'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个 `TodoListApp` 组件，该组件将使用 `MapArray` 组件为待办列表数组中的每个项目创建 `TodoItem` 实例：
- en: '[PRE106]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Render the application:'
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 渲染应用程序：
- en: '[PRE107]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Save the file.
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。
- en: Let's test it...
  id: totrans-376
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们测试一下...
- en: 'To run and test the application, perform the following steps:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行和测试应用程序，请执行以下步骤：
- en: 'Open a Terminal at the root of your project directory and run:'
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的项目目录根目录中打开一个终端并运行：
- en: '[PRE108]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Then, open a new tab in your web browser and go to:'
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在您的网络浏览器中打开一个新标签页并转到：
- en: '[PRE109]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'A list of to-do items should be displayed:'
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应显示待办事项列表：
- en: '![](img/171e72df-e830-48e0-b055-a25647d630d9.png)'
  id: totrans-383
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/171e72df-e830-48e0-b055-a25647d630d9.png)'
- en: List of to-do items
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项列表
- en: How it works...
  id: totrans-385
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Look at the following code:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 看看下面的代码：
- en: '[PRE110]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'This works pretty much the same as writing:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上与编写相同：
- en: '[PRE111]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: However, `MapArray` acts as a helper component to do the same job while keeping
    the code more readable.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`MapArray` 作为辅助组件来完成同样的工作，同时使代码更易于阅读。
- en: Have you noticed that the `TodoItem` component expects only two properties?
    However, we're also passing the `id` of the items as `key`. If the `key` property
    is not passed, then while rendering the components, a warning will be displayed.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 您注意到 `TodoItem` 组件只期望两个属性吗？然而，我们还在将项目的 `id` 作为 `key` 传递。如果没有传递 `key` 属性，则在渲染组件时将显示警告。
- en: Working with forms and inputs in React
  id: totrans-392
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 React 中使用表单和输入
- en: '**Form-associated elements,** such as `<input>` and `<textarea>`, usually maintain
    their own internal state and update it according to the user input. In React,
    when the input of a **form-associated element** is managed using the React state,
    it''s called a **controlled component**.'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '**与表单相关的元素**，如 `<input>` 和 `<textarea>`，通常维护自己的内部状态并根据用户输入进行更新。在 React 中，当使用
    React 状态管理 **与表单相关的元素** 的输入时，它被称为 **受控组件**。'
- en: 'By default, in React, if the `value` property of an input is not set, then
    the input internal state can be mutated by the user input. However, if the `value`
    property is set, then the input is read-only and it expects React to manage the
    user input by using the `onChange` React event and manage the input''s state using
    the React state to update it if necessary. For example, this `input` React element
    will be rendered as read-only:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，在 React 中，如果输入的 `value` 属性未设置，则用户输入可以修改输入的内部状态。但是，如果设置了 `value` 属性，则输入为只读，并且它期望
    React 通过使用 `onChange` React 事件来管理用户输入，并使用 React 状态来更新输入状态（如果需要）。例如，此 `input` React
    元素将渲染为只读：
- en: '[PRE112]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'However, because React expects to find an `onChange` event handler, the previous
    code will output a warning message on the console. To fix this, we can provide
    to the `onChange` property a callback function to handle the user input:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，因为 React 期望找到一个 `onChange` 事件处理器，所以之前的代码将在控制台输出一个警告消息。为了修复这个问题，我们可以向 `onChange`
    属性提供一个回调函数来处理用户输入：
- en: '[PRE113]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Because the user input is handled by React and, in the previous example, we
    don't update the input's value, then the input will appear to be read-only. The
    previous code is similar to just setting a `readOnly` property instead of providing
    a useless `onChange` property.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 因为用户输入由 React 处理，并且在之前的示例中我们没有更新输入的值，所以输入看起来是只读的。之前的代码类似于只设置一个 `readOnly` 属性而不是提供一个无用的
    `onChange` 属性。
- en: 'React also allows you to define **uncontrolled components,** which basically
    keep out of React''s control what or input how the input is updated. For instance,
    when a third-party library is used instead to act over the input, **uncontrolled
    components** have a property called `defaultValue,` which is similar to the `value`
    property. However, it lets the input control its internal state by the user input
    and not by React. That means a **form-associated element** with a `defaultValue`
    property allows its state to be mutated by the user input:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: React还允许你定义**不受控组件**，这基本上意味着React不会控制输入的更新方式或内容。例如，当使用第三方库来处理输入时，**不受控组件**有一个名为`defaultValue`的属性，它类似于`value`属性。然而，它允许输入通过用户输入而不是React来控制其内部状态。这意味着具有`defaultValue`属性的**表单相关元素**允许其状态通过用户输入进行修改：
- en: '[PRE114]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: As opposed to using the `value` property, you can now type in the input box
    to change its value because the internal state of the input is mutable.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 与使用`value`属性相反，你现在可以直接在输入框中输入来更改其值，因为输入的内部状态是可变的。
- en: Getting ready
  id: totrans-402
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, you will build a simple login form component. Before you start,
    create a new `package.json` file with the following content:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将构建一个简单的登录表单组件。在开始之前，创建一个包含以下内容的`package.json`文件：
- en: '[PRE115]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'Next, create a babel configuration file as `.babelrc`, adding the following
    content:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个babel配置文件`.babelrc`，添加以下内容：
- en: '[PRE116]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'Then, install the dependencies by opening a Terminal and running:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行来安装依赖项：
- en: '[PRE117]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: How to do it...
  id: totrans-409
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Define a class component named `LoginForm` that will handle `username` input
    and `password` input.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个名为`LoginForm`的类组件，该组件将处理`username`输入和`password`输入。
- en: 'Firstly, create an `index.html` file where the React application will be rendered:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个`index.html`文件，React应用程序将在其中渲染：
- en: Create a new file named `index.html`
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`index.html`的新文件。
- en: 'Add the following HTML code:'
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下HTML代码：
- en: '[PRE118]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: Save the file
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Next, build the `LoginForm` component and use the power given to you by React
    *controlled components* over the input''s state to also disallow numbers on the
    `username` input:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，构建`LoginForm`组件，并利用React**受控组件**赋予的输入状态控制权，也禁止在`username`输入中输入数字：
- en: Create a new file named `forms.js`.
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`forms.js`的新文件。
- en: 'Import the React and ReactDOM libraries:'
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入React和ReactDOM库：
- en: '[PRE119]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'Define a class component named `LoginForm`. Within the class, define an event
    handler for the input change, and check the `username` input''s value to disallow
    introducing numbers:'
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为`LoginForm`的类组件。在类中，定义一个输入变化的事件处理程序，并检查`username`输入的值以禁止输入数字：
- en: '[PRE120]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'Render the application:'
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 渲染应用程序：
- en: '[PRE121]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: Save the file.
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。
- en: Let's test it...
  id: totrans-425
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们测试它...
- en: 'To run and test the application, perform the following steps:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行和测试应用程序，请执行以下步骤：
- en: 'Open a Terminal at the root of your project directory and run:'
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的项目目录根目录下打开终端并运行：
- en: '[PRE122]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'Then, open a new tab in your web browser and go to:'
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在您的网络浏览器中打开一个新标签页并转到：
- en: '[PRE123]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Try to introduce a number in the `username` input to see how the validation
    against numbers is working
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试在`username`输入中输入一个数字，以查看对数字的验证是如何工作的。
- en: How it works...
  id: totrans-432
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We define an `onChange` event handler used in both input elements. However,
    we check if the input's name is `username` to decide if the validation should
    be applied. `RegExp` is used to test for numbers in the input and replace them
    with an empty string. That's why numbers are not displayed while typing on the
    `username` input.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个`onChange`事件处理程序，它在两个输入元素中使用。然而，我们检查输入的名称是否为`username`以决定是否应用验证。使用`RegExp`测试输入中的数字并将它们替换为空字符串。这就是为什么在`username`输入时不会显示数字的原因。
- en: Understanding refs and how to use them
  id: totrans-434
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解引用及其使用方法
- en: In the usual workflow, React components communicate with their children by passing
    `props`. However, there are a few cases where it's needed to access the instance
    of a child to communicate or modify its behavior. React uses `refs` to allow us
    to access the instance of a child.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 在常规工作流程中，React组件通过传递`props`与其子组件进行通信。然而，在某些情况下，需要访问子组件的实例以进行通信或修改其行为。React使用`refs`来允许我们访问子组件的实例。
- en: It's important to understand that React components' instances give you access
    to their instance methods and properties. However, an instance of a React element
    is an instance of an HTML DOM element. Refs are accessed by giving a `ref` attribute
    to the React component or React element. It expects the value to be a callback
    function that will be invoked once the instance is created, providing a reference
    to the instance in the first argument passed to the callback function.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要理解，React 组件的实例为您提供对其实例方法和属性的访问。然而，React 元素的实例是一个 HTML DOM 元素的实例。通过给 React
    组件或 React 元素一个 `ref` 属性来访问引用。它期望值是一个回调函数，该函数将在实例创建时被调用，并提供一个引用作为回调函数的第一个参数传递给实例。
- en: 'React provides a helper function named `createRef` to define function callbacks
    for setting refs correctly. Take, for example, the following code, which obtains
    a reference of a React component and a React element:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: React 提供了一个名为 `createRef` 的辅助函数，用于定义设置引用的正确函数回调。例如，以下代码获取了 React 组件和 React 元素的引用：
- en: '[PRE124]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'In this example, the console will output `true` twice:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，控制台将输出 `true` 两次：
- en: '[PRE125]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: This proves what we have just learned.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 这证明了我们刚刚学到的。
- en: Functional components do not have `refs`. Thus, giving a `ref` property to a
    functional component will display a warning in the console and fail.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 函数组件没有 `refs`。因此，将 `ref` 属性赋予函数组件将在控制台显示警告并失败。
- en: '**Refs** are especially useful for working with *uncontrolled components* in
    the following cases:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '**引用**在以下情况下特别有用，用于处理 *未受控组件*：'
- en: Integration with third-party libraries
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与第三方库的集成
- en: Accessing an HTML DOM element's native methods that are otherwise inaccessible
    from React, such as the `HTMLElement.focus()` method
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问 HTML DOM 元素的本地方法，这些方法在其他情况下无法从 React 访问，例如 `HTMLElement.focus()` 方法
- en: Using certain web APIs, such as the Selection Web API, the Web Animations API,
    and media playback methods
  id: totrans-446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用某些网络 API，例如选择网络 API、网络动画 API 和媒体播放方法
- en: Getting ready
  id: totrans-447
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, you will work with uncontrolled components and use refs to
    send a custom event to a form HTML element. Before you start, create a new `package.json`
    file with the following content:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将处理未受控组件，并使用引用向表单 HTML 元素发送一个自定义事件。在你开始之前，创建一个包含以下内容的 `package.json`
    文件：
- en: '[PRE126]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'Next, create a babel configuration file as `.babelrc,` adding the following
    content:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个 Babel 配置文件 `.babelrc`，添加以下内容：
- en: '[PRE127]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'Then, install the dependencies by opening a Terminal and running:'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过在终端中运行以下命令安装依赖项：
- en: '[PRE128]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: How to do it...
  id: totrans-454
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Define a `LoginForm` class component that will render a form with two inputs:
    one for a username and the other for a password. Include a button outside of the
    form React element, which will be used for triggering the `onSubmit` event on
    the form React element.'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个 `LoginForm` 类组件，该组件将渲染一个包含两个输入的表单：一个用于用户名，另一个用于密码。在表单 React 元素外部包含一个按钮，该按钮将用于在表单
    React 元素上触发 `onSubmit` 事件。
- en: 'Firstly, create an `index.html` file where the React application will be rendered:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个 `index.html` 文件，React 应用程序将在其中渲染：
- en: Create a new file named `index.html`
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `index.html` 的新文件
- en: 'Add the following HTML code:'
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下 HTML 代码：
- en: '[PRE129]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: Save the file
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Now, start building the React application:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，开始构建 React 应用程序：
- en: Create a new file named `refs.js`.
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `refs.js` 的新文件。
- en: 'Import the React and ReactDOM libraries:'
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 React 和 ReactDOM 库：
- en: '[PRE130]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'Define a class component named `LoginForm` that will render the form and a
    button that will trigger the `onSubmit` form event, using `refs`, when clicked:'
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为 `LoginForm` 的类组件，该组件将渲染表单和一个按钮，当点击按钮时，将使用 `refs` 触发 `onSubmit` 表单事件：
- en: '[PRE131]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'Render the application:'
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 渲染应用程序：
- en: '[PRE132]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: Save the file.
  id: totrans-469
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。
- en: Let's test it...
  id: totrans-470
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们测试它...
- en: 'To run and test the application, perform the following steps:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行和测试应用程序，请执行以下步骤：
- en: 'Open a Terminal at the root of your project directory and run:'
  id: totrans-472
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目目录的根目录中打开一个终端并运行：
- en: '[PRE133]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'Then, open a new tab in your web browser and go to:'
  id: totrans-474
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在您的网络浏览器中打开一个新标签页，并转到：
- en: '[PRE134]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: How it works...
  id: totrans-476
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Click on the `LogIn` button to test that the form `onSubmit` events gets triggered.
  id: totrans-477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `LogIn` 按钮以测试表单 `onSubmit` 事件是否被触发。
- en: First, a reference to the instance of the form DOM element is kept in an instance
    property called `reform`.
  id: totrans-478
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将表单 DOM 元素的实例引用保存在一个名为 `reform` 的实例属性中。
- en: Then, once the button is submitted, we use the `EventTarget` web API `dispatchEvent`
    method to dispatch a custom event `submit` on the form DOM element.
  id: totrans-479
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，一旦按钮提交，我们使用 `EventTarget` 网络 API 的 `dispatchEvent` 方法在表单 DOM 元素上触发一个自定义事件
    `submit`。
- en: Then, the dispatched `submit` method is caught by the React `SyntheticEvent`.
  id: totrans-480
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，分发的 `submit` 方法被 React 的 `SyntheticEvent` 捕获。
- en: Finally, React triggers the callback method passed to the form's `onSubmit`
    property.
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，React 触发传递给表单的 `onSubmit` 属性的回调方法。
- en: Understanding React portals
  id: totrans-482
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 React 端口
- en: React portals allow us to render child components in a different DOM element
    outside of the DOM tree generated by the parent component while keeping the React
    tree as if the component is inside the DOM tree generated by the parent component.
    For instance, even though child components are located in a different DOM node,
    the events generated in a child component bubble up to the React parent component.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: React 端口允许我们在父组件生成的 DOM 树之外的不同 DOM 元素中渲染子组件，同时保持 React 树仿佛该组件位于父组件生成的 DOM 树内部。例如，即使子组件位于不同的
    DOM 节点中，子组件中生成的事件也会冒泡到 React 父组件。
- en: 'React portals are created using the ReactDOM library''s `createPortal` method
    and it has the same signature as the `render` method:'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: React 端口是通过 ReactDOM 库的 `createPortal` 方法创建的，它具有与 `render` 方法相同的签名：
- en: '[PRE135]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'However, the difference between `render` and `createPortal` is that the latter
    returns a special tag that is used in the React tree to identify this element
    as a React portal and to use it as if it were a React element. For instance:'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`render` 和 `createPortal` 之间的区别在于，后者返回一个特殊标签，该标签用于在 React 树中标识此元素为 React
    端口，并像使用 React 元素一样使用它。例如：
- en: '[PRE136]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: Getting ready
  id: totrans-488
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Before you start, create a new `package.json` file with the following content:'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，创建一个包含以下内容的 `package.json` 文件：
- en: '[PRE137]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'Next, create a babel configuration file as `.babelrc`, adding the following
    content:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个 `.babelrc` 的 babel 配置文件，并添加以下内容：
- en: '[PRE138]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'Then, install the dependencies by opening a Terminal and running:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行以下命令来安装依赖项：
- en: '[PRE139]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: How to do it...
  id: totrans-495
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'First, create an `index.html` file where the React application will be rendered,
    containing as well an HTML `header` tag where a React portal element will be rendered:'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个 `index.html` 文件，其中将渲染 React 应用程序，同时包含一个 HTML `header` 标签，其中将渲染 React
    端口元素：
- en: Create a new file named `index.html`
  id: totrans-497
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `index.html` 的新文件
- en: 'Add the following HTML code:'
  id: totrans-498
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下 HTML 代码：
- en: '[PRE140]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: Save the file
  id: totrans-500
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Next, build a React application that will render a paragraph and an `h1` HTML
    element outside of the tree to a `header` HTML element:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，构建一个将渲染一个段落和一个 `h1` HTML 元素到 `header` HTML 元素之外的 React 应用程序：
- en: Create a new file named `portals.js`.
  id: totrans-502
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `portals.js` 的新文件。
- en: 'Import the React and ReactDOM libraries:'
  id: totrans-503
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 React 和 ReactDOM 库：
- en: '[PRE141]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'Define a functional component named `Header` and create a portal to render
    the `children` to a different DOM element:'
  id: totrans-505
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为 `Header` 的函数组件，并创建一个端口以将 `children` 渲染到不同的 DOM 元素：
- en: '[PRE142]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: 'Define a functional component named `App` that will render a React element
    and the `Header` React component:'
  id: totrans-507
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为 `App` 的函数组件，该组件将渲染一个 React 元素和 `Header` React 组件：
- en: '[PRE143]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: 'Render the application:'
  id: totrans-509
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 渲染应用程序：
- en: '[PRE144]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: Save the file.
  id: totrans-511
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。
- en: Let's test it...
  id: totrans-512
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们测试一下...
- en: 'To run and test the application, perform the following steps:'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行和测试应用程序，请执行以下步骤：
- en: 'Open a Terminal at the root of your project directory and run:'
  id: totrans-514
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的项目目录根目录中打开一个终端并运行：
- en: '[PRE145]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: 'Then, open a new tab in your web browser and go to:'
  id: totrans-516
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在您的网络浏览器中打开一个新标签页，并转到：
- en: '[PRE146]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: 'The generated HTML DOM tree would look similar to this:'
  id: totrans-518
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成的 HTML DOM 树将类似于以下内容：
- en: '[PRE147]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: How it works...
  id: totrans-520
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Even though in the React tree the `Header` component appears to be rendered
    after the paragraph `p` HTML tag, the rendered `Header` component renders before
    it. That's because the `Header` component is actually rendered on a `header` HTML
    tag that appears before the `section` HTML tag where the main application is rendered.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在 React 树中，`Header` 组件看起来是在 `p` HTML 标签之后渲染的，但实际上渲染的 `Header` 组件是在它之前。这是因为
    `Header` 组件实际上是在一个出现在主应用程序渲染的 `section` HTML 标签之前的 `header` HTML 标签上渲染的。
- en: Catching errors with error boundary components
  id: totrans-522
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用错误边界组件捕获错误
- en: '**Error boundary components** are just React components that implement the
    `componentDidCatch` **life cycle method** to catch errors in their children. They
    catch errors in `constructor` methods when a class component is initialized but
    fails, in life cycle methods, and while rendering. Errors that cannot be caught
    are from asynchronous code, event handlers, and errors in the error component
    boundary itself.'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: '**错误边界组件**是实现了 `componentDidCatch` **生命周期方法**的 React 组件，用于捕获其子组件中的错误。它们在类组件初始化失败时捕获
    `constructor` 方法中的错误，在生命周期方法中，以及在渲染过程中。无法捕获的错误来自异步代码、事件处理程序，以及错误边界组件本身的错误。'
- en: 'The `componentDidCatch` life cycle method receives two arguments: the first
    one is an `error` object while the second received argument is an object containing
    a `componentStack` property with a friendly stack trace that describes where in
    the React tree a component failed.'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: '`componentDidCatch`生命周期方法接收两个参数：第一个是一个`error`对象，而第二个接收的参数是一个包含`componentStack`属性的对象，该属性具有友好的堆栈跟踪，描述了组件在React树中失败的位置。'
- en: Getting ready
  id: totrans-525
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, you will build an error boundary component and provide a fallback
    UI when there is an error while rendering. Before you start, create a new `package.json`
    file with the following content:'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，您将构建一个错误边界组件，并在渲染时出现错误时提供一个回退UI。在开始之前，创建一个包含以下内容的新的`package.json`文件：
- en: '[PRE148]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: 'Next, create a babel configuration file as `.babelrc`, adding the following
    content:'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个babel配置文件`.babelrc`，添加以下内容：
- en: '[PRE149]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'Then, install the dependencies by opening a Terminal and running:'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行以下命令来安装依赖项：
- en: '[PRE150]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: How to do it...
  id: totrans-532
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'First, create an `index.html` file where the React application will be rendered:'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个`index.html`文件，React应用程序将在其中渲染：
- en: Create a new file named `index.html`
  id: totrans-534
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`index.html`的新文件
- en: 'Add the following HTML code:'
  id: totrans-535
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下HTML代码：
- en: '[PRE151]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: Save the file
  id: totrans-537
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Next, define an error boundary component that will catch errors and render
    a fallback UI displaying information where the error happened and the error message.
    Define as well an `App` component and create a `button` React element that when
    clicked will cause the application to fail while setting the state:'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，定义一个错误边界组件，它将捕获错误并在渲染时显示回退UI，显示错误发生的位置和错误消息。同时定义一个`App`组件并创建一个`button`React元素，当点击按钮时将导致应用程序失败并设置状态：
- en: Create a new file named `error-boundary.js`.
  id: totrans-539
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`error-boundary.js`的新文件。
- en: 'Import the React and ReactDOM libraries:'
  id: totrans-540
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入React和ReactDOM库：
- en: '[PRE152]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: 'Define an `ErrorBoundary` component that will display a fallback message when
    the application fails to render:'
  id: totrans-542
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个`ErrorBoundary`组件，当应用程序渲染失败时将显示回退消息：
- en: '[PRE153]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: 'Define a class component named `App` that will render a `button` React element.
    Once the button is clicked, it will purposely throw an error:'
  id: totrans-544
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为`App`的类组件，它将渲染一个`button`React元素。一旦按钮被点击，它将故意抛出一个错误：
- en: '[PRE154]'
  id: totrans-545
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'Render the application wrapping the `App` within the `ErrorBoundary` component:'
  id: totrans-546
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ErrorBoundary`组件内包装`App`以渲染应用程序：
- en: '[PRE155]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: Save the file.
  id: totrans-548
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。
- en: Let's test it...
  id: totrans-549
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们测试一下...
- en: 'To run and test the application, perform the following steps:'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行和测试应用程序，请执行以下步骤：
- en: 'Open a Terminal at the root of your project directory and run:'
  id: totrans-551
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目目录的根目录中打开一个终端并运行：
- en: '[PRE156]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'Then, open a new tab in your web browser and go to:'
  id: totrans-553
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在您的网络浏览器中打开一个新标签页并转到：
- en: '[PRE157]'
  id: totrans-554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: Click on the `button` to cause the application to fail
  id: totrans-555
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`button`以导致应用程序失败
- en: 'A fallback UI is displayed showing the following error:'
  id: totrans-556
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示以下错误的回退UI：
- en: '[PRE158]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: Type checking properties with PropTypes
  id: totrans-558
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PropTypes检查属性类型
- en: 'React allows you to implement runtime type checking of components'' properties.
    It''s useful to catch bugs and make sure that your components are receiving `props`
    correctly. This can be easily done by just setting a static `propType` property
    on your components. For instance:'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: React允许您实现组件属性的运行时类型检查。这有助于捕获错误并确保您的组件正确接收`props`。这可以通过只需在您的组件上设置静态`propType`属性轻松完成。例如：
- en: '[PRE159]'
  id: totrans-560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: The previous code will require `MyComponent`'s `children` property to be a `string`.
    Otherwise, if a different property type is given, React will display a warning
    in the console.
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码将需要`MyComponent`的`children`属性是一个`string`。否则，如果提供了不同类型的属性，React将在控制台显示警告。
- en: '`propTypes''` methods are functions that get triggered when the component''s
    instance is created to check if the given `props` match the `propTypes` schema.'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: '`propTypes`方法是在组件实例创建时被触发的函数，用于检查给定的`props`是否与`propTypes`模式匹配。'
- en: '`propTypes` have an extensive list of methods that can be used for the validation
    of properties. You can find the complete list in the React official documentation:
    [https://reactjs.org/docs/typechecking-with-proptypes.html](https://reactjs.org/docs/typechecking-with-proptypes.html).'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: '`propTypes`具有一个广泛的方法列表，可用于验证属性。您可以在React官方文档中找到完整的列表：[https://reactjs.org/docs/typechecking-with-proptypes.html](https://reactjs.org/docs/typechecking-with-proptypes.html)。'
- en: Getting ready
  id: totrans-564
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, you will see and write custom validation rules for checking
    property types. Before you start, create a new `package.json` file with the following
    content:'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，您将看到并编写用于检查属性类型的自定义验证规则。在开始之前，创建一个包含以下内容的新的`package.json`文件：
- en: '[PRE160]'
  id: totrans-566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: 'Next, create a babel configuration file as `.babelrc`, adding the following
    content:'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个 `.babelrc` 的 babel 配置文件，添加以下内容：
- en: '[PRE161]'
  id: totrans-568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: 'Then, install the dependencies by opening a Terminal and running:'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，通过打开终端并运行以下命令来安装依赖项：
- en: '[PRE162]'
  id: totrans-570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: How to do it...
  id: totrans-571
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'First, create an `index.html` file where the React application will be rendered:'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个 `index.html` 文件，React 应用程序将在其中渲染：
- en: Create a new file named `index.html`
  id: totrans-573
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `index.html` 的新文件。
- en: 'Add the following HTML code:'
  id: totrans-574
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下 HTML 代码：
- en: '[PRE163]'
  id: totrans-575
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: Save the file
  id: totrans-576
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。
- en: 'Next, define a `Toggle` class component that expects to receive two React elements
    as `children`. Use `PropTypes` to create a custom validation rule to check that
    the `children` property is an array of React elements and the component is receiving
    exactly two React elements:'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，定义一个期望接收两个 React 元素作为 `children` 的 `Toggle` 类组件。使用 `PropTypes` 创建一个自定义验证规则来检查
    `children` 属性是否是 React 元素的数组，并且组件接收了正好两个 React 元素：
- en: Create a new file named `type-checking.js`.
  id: totrans-578
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `type-checking.js` 的新文件。
- en: 'Import the React, ReactDOM, and `PropTypes` libraries:'
  id: totrans-579
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 React、ReactDOM 和 `PropTypes` 库：
- en: '[PRE164]'
  id: totrans-580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: 'Define a class component named `Toggle`. Use `propTypes` for type-checking
    the `condition` and `children` properties. Use a custom `propType` to check if
    `children` is an array of React elements and that it contains exactly two React
    elements:'
  id: totrans-581
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为 `Toggle` 的类组件。使用 `propTypes` 对 `condition` 和 `children` 属性进行类型检查。使用自定义
    `propType` 来检查 `children` 是否是 React 元素的数组，并且它包含正好两个 React 元素：
- en: '[PRE165]'
  id: totrans-582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: 'Define a class component named `App` that will render the `Toggle` component.
    Provide three React elements as its `children` and a `button` that when clicked
    will toggle the `value` property of state from `true` to `false` and vice versa:'
  id: totrans-583
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为 `App` 的类组件，它将渲染 `Toggle` 组件。提供三个 React 元素作为其 `children`，以及一个 `button`，当点击时，将状态中的
    `value` 属性从 `true` 切换到 `false`，反之亦然：
- en: '[PRE166]'
  id: totrans-584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: 'Render the application:'
  id: totrans-585
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 渲染应用程序：
- en: '[PRE167]'
  id: totrans-586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: Save the file.
  id: totrans-587
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件。
- en: Let's test it...
  id: totrans-588
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们测试一下...
- en: 'To run and test the application, perform the following steps:'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行和测试应用程序，请执行以下步骤：
- en: 'Open a Terminal at the root of your project directory and run:'
  id: totrans-590
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的项目目录根目录打开一个终端并运行：
- en: '[PRE168]'
  id: totrans-591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: 'Then, open a new tab in your web browser and go to:'
  id: totrans-592
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在您的网络浏览器中打开一个新标签页并转到：
- en: '[PRE169]'
  id: totrans-593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: 'The console in your browser will display the following warning:'
  id: totrans-594
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览器中的控制台将显示以下警告：
- en: '[PRE170]'
  id: totrans-595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: Clicking the `button` will toggle between the first two React elements while
    the third React element will be ignored
  id: totrans-596
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `button` 将在第一个和第二个 React 元素之间切换，而第三个 React 元素将被忽略。
- en: How it works...
  id: totrans-597
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何工作...
- en: We define a custom function validator for the `children` property. Inside the
    function, we first use the built-in `propTypes` functions to check if `children`
    is an array of React elements. If the result of the validation is not an instance
    of `Error`, then we use the React `Children`'s `count` utility method to know
    how many React elements were given and we return an error if the number of React
    elements in children is not `2`.
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为 `children` 属性定义了一个自定义函数验证器。在函数内部，我们首先使用内置的 `propTypes` 函数来检查 `children`
    是否是 React 元素的数组。如果验证的结果不是一个 `Error` 实例，那么我们使用 React `Children` 的 `count` 工具方法来知道提供了多少个
    React 元素，如果 `children` 中的 React 元素数量不是 `2`，则返回一个错误。
- en: There's more...
  id: totrans-599
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'Did you notice that we used the `propTypes.checkPropTypes` method? It''s a
    utility function that allows us to check for `propTypes` even outside React. For
    instance:'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 你注意到我们使用了 `propTypes.checkPropTypes` 方法吗？这是一个实用函数，它允许我们在 React 之外检查 `propTypes`。例如：
- en: '[PRE171]'
  id: totrans-601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: The `pTypes` object works as a schema providing validation functions from `propTypes`.
    The `props` constant is just a plain object containing properties defined in `pTypes`.
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: '`pTypes` 对象作为一个模式提供来自 `propTypes` 的验证函数。`props` 常量只是一个包含在 `pTypes` 中定义的属性的普通对象。'
- en: 'Running the previous example won''t output any warning in the console since
    all properties in `props` are valid. However, change the `props` object to:'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前面的示例在控制台不会输出任何警告，因为 `props` 中的所有属性都是有效的。然而，将 `props` 对象更改为：
- en: '[PRE172]'
  id: totrans-604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: 'Then we will see the following warning in the console output:'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将在控制台输出中看到以下警告：
- en: '[PRE173]'
  id: totrans-606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: 'The `checkPropTypes` utility method has the following signature:'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: '`checkPropTypes` 工具方法具有以下签名：'
- en: '[PRE174]'
  id: totrans-608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: Here, `typeSpecs` refers to an object containing `propTypes` function validators.
    The `values` argument expects to receive an object whose values need to be validated
    against `typeSpecs`. `componentName` refers to the source's name, which usually
    is a component's name that is used in the warning message to display where the
    `Error` was originated. The last argument, `getStack,` is optional and it's expected
    to be a callback function that should return a `Stack Trace` that is added at
    the end of the warning message to better describe where exactly the error was
    originated.
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`typeSpecs` 指的是一个包含 `propTypes` 函数验证器的对象。`values` 参数期望接收一个对象，其值需要与 `typeSpecs`
    进行验证。`componentName` 指的是源名称，这通常是一个在警告消息中用于显示错误起源位置组件的名称。最后一个参数 `getStack` 是可选的，它期望是一个回调函数，该函数应返回一个
    `Stack Trace`，并将其添加到警告消息的末尾，以更好地描述错误的确切起源位置。
- en: '`propTypes` are used only in development and for using the production build
    of React, you must set up the bundler to replace `process.env.NODE_ENV` with `"production"`.
    This way, `propTypes` are removed in the production build of your application.'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: '`propTypes` 仅在开发中使用，并且在使用 React 的生产构建时，你必须设置打包器将 `process.env.NODE_ENV` 替换为
    `"production"`。这样，你的应用程序的生产构建中会移除 `propTypes`。'
