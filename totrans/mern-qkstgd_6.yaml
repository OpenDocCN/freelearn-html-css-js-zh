- en: Building Web Applications with React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding React elements and React components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Composing components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stateful components and life cycle methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with React.PureComponent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React event handlers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conditional rendering of components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering lists with React
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with forms and inputs in React
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding refs and how to use them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding React portals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Catching errors with error boundary components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type checking properties with PropTypes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will be required to know Go programming language, also basics of web application
    framework. You will also need to install Git, in order use the Git repository
    of this book. And finally, ability to develop with an IDE on the command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code files of this chapter can be found on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/MERN-Quick-Start-Guide/tree/master/Chapter06](https://github.com/PacktPublishing/MERN-Quick-Start-Guide/tree/master/Chapter06)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://goo.gl/J7d7Ag](https://goo.gl/J7d7Ag)'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React is a JavaScript library for building **user interfaces** (**UI**). React
    is component-based, which means that each component can live separately from others
    and manage its own state. Complex UIs can be created by composing components.
  prefs: []
  type: TYPE_NORMAL
- en: Components are usually created using JSX syntax, which has an XML-like syntax,
    or using the `React.createElement` method. However, JSX is what makes React special
    for building web applications in a declarative way.
  prefs: []
  type: TYPE_NORMAL
- en: In the MVC pattern, React is usually associated with the View.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding React elements and React components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**React elements** can be created using JSX syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This is transformed to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'JSX is a language extension on top of JavaScript that allows you to create
    complex UIs with ease. For example, consider the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous example could be written without JSX syntax as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'React elements can be any HTML5 tag and any JSX tag can be self-closed. For
    instance, the following will create a paragraph React element with an empty content
    within:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The same way as you would do with HTML5, you can provide attributes to React
    elements, called properties or props in React:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**React components** allow you to isolate parts of your web application as
    re-usable pieces of code or components. They can be defined in several ways. For
    instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Functional components**: These are plain JavaScript functions that accept
    properties as the first argument and return React elements:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Class components**: Using ES6 classes allows you to define life cycle methods
    and create stateful components. They render React elements from the `render` method:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Expressions**: These keep a reference to an instance of a React element or
    component:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a few properties that are unique and are only part of React. For
    instance, the `children` property refers to the elements contained within the
    tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `children` property received in `MyComponent`, in the previous example,
    will be an instance of a `span` React element. If multiple React elements or components
    are passed as children, the `children` property will be an array. However, if
    no children are passed, the `children` property will be `null`. The `children`
    property doesn''t necessarily need to be a React element or component; it can
    also be a JavaScript function, or a JavaScript primitive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'React also considers functional components and class components that return
    or render a string, a valid React component. For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: React components' names must start with an uppercase letter. Otherwise, React
    will treat lowercased JSX tags as React elements
  prefs: []
  type: TYPE_NORMAL
- en: '**Rendering components** to the DOM in React is not a complicated task. React
    provides several methods for rendering a React component to the DOM using the
    `ReactDOM` library. React uses JSX or `React.createElement` to create a tree or
    a representation of the DOM tree. It does so by using a virtual DOM, which allows
    React to transform React elements to DOM nodes and update only the nodes that
    have changed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how you usually render your application using the `render` method from
    the `ReactDOM` library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The first argument provided to the `render` method is a React component or a
    React element. The second argument tells you where in the DOM to render the application.
    In the previous example, we use the `querySelector` method from the document object
    to look for a DOM node with an attribute of `role` set to `"main"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'React also allows you to render React components as an HTML string, which is
    useful for generating content on the server side and sending the content directly
    to the browser as an HTML file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'It will output the following in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will create a simple React application using the concepts
    that you have learned about React components and React elements. Before you start,
    create a new `package.json` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a babel configuration file as `.babelrc`, adding the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a Terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a React application that will display a welcome message writing functional,
    class, and expression components:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `basics.js.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the React and ReactDOM libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a new functional component that will render a `span` React element with
    `color` set to red in its style attributes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Define another functional component that will render an `h1` React element
    and the `RedText` functional component as part of its `children`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Define an expression that will contain a reference to a React element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a class component named `Footer` that will display the current date:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Render the application to the DOM:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, create an `index.html` file where you will render the React application:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `index.html`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's test it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To see the previous work in action:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a Terminal at the root of your project directory and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open a new tab in your web browser and go to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: You should be able to see the React application rendered to the DOM
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Composing components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In React, all components can be isolated and complex UIs can be built by composing
    components which enables their re-usability.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will work with re-usable components to generate a home
    page containing three sections: a header, a paragraph with a description, and
    a footer. These three sections will be written as three separate components that
    will be composed later to build a home page. Before you start, create a new `package.json`
    file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a babel configuration file as `.babelrc,` adding the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a Terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new folder named `component` in the root directory of your project.
    Then, create the following three files in order:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Header.js`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Footer.js`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Description.js`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `Header` component will generate an `h1` React element that represents
    the heading of the page. It expects to receive a `title` property:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `Header.js` in the `component` directory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `Footer` component will generate a `footer` React element that will be
    placed at the end of the page. It will expect to receive a `date` property:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `Footer.js` in the `component` directory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `Description` component will generate a paragraph that will display a description
    of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `Description.js` in the `component` directory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, move back out of the `component` directory to the root directory of your
    project where `package.json` is located and create the following file:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `composing-react.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the React and `ReactDOM` libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the previously defined components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a `App` component that will render your previously defined components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Render the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, create an `index.html` file where you will render the React application:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `index.html`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's test it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To see the previous work in action, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a Terminal at the root of your project directory and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open a new tab in your web browser and go to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'If you inspect the DOM tree in your browser''s developer tools, you should
    be able to see the following DOM structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each React component is written in a separate file. Then, we import the components
    in the main application file, `composing-react.js`, and use composition to generate
    a virtual DOM tree. Each component is re-usable because it can be used again in
    other parts of your application or in other components by just importing the files.
    Then, the `render` method from the `ReactDOM` library is used to generate a DOM
    representation of the virtual DOM tree.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Did you notice that we used `React.Fragment`? This is a new feature introduced
    in React v16\. It allows you to return multiple elements without creating an extra
    DOM node. A component cannot return multiple React components or elements in the
    following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'However, using `React.Fragment`, it''s possible to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Stateful components and life cycle methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'React components can manage their own state and update only when the state
    has changed. Stateful React components are written using ES6 classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'React class components have a `state` instance property to access their internal
    state and a `props` property to access properties passed to the component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'And their state can be mutated by using the `setState` instance method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: The state is initialized once. Then, when the component is mounted, the state
    should only be mutated using the `setState` method. This way, React is able to
    detect changes in the state and update the component.
  prefs: []
  type: TYPE_NORMAL
- en: The `setState` method accepts a callback function as the first argument which
    will be executed passing the current state (`prevState` for convention) as the
    first argument to the callback function and the current `props` as the second
    argument. This is so because `setState` works asynchronously and the state could
    be mutated while you are performing other actions in different parts of your component.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don''t need access to the current state while updating the state, you
    can directly pass an object as the first argument. For instance, the previous
    example could have been written as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '`setState` also accepts an optional callback function as a second argument
    that gets called once the state has been updated. Because `setState` is asynchronous,
    you may want to use the second callback to perform an action only once the state
    has been updated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Once the component is mounted, the console will first output `null` even though
    we used `setState` before it; that's because the state is set asynchronously.
    However, once the state is updated, the console will display "date has been updated".
  prefs: []
  type: TYPE_NORMAL
- en: 'When using the `setState` method, React merges the previous state with the
    current given state. Internally, it''s similar to doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Every class component has *life cycle methods* that give you control over the
    life of your component since its creation until it''s destroyed, as well as giving
    you control over other properties, such as knowing when the component has received
    new properties and if the component should be updated or not. These are the life
    cycle methods present in all class components:'
  prefs: []
  type: TYPE_NORMAL
- en: '`constructor(props)`: This is invoked when initializing a new instance of the
    component, before the component is mounted. `props` must be passed to the super
    class using `super(props)` to let React set the `props` correctly. The `constructor`
    method is useful as well to initialize the initial state of the component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`static getDerivedStateFromProps(nextProps, nextState)`: This is invoked when
    the component has been instantiated and when the component will receive new `props`.
    This method is useful when the state or part of it depends on values received
    from the `props` passed to the component. It must return an object which will
    be merged with the current state or `null` if the state doesn''t need to be updated
    after receiving new `props`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`componentDidMount()`: This is invoked after the component has been mounted
    and after the first `render` call. It''s useful for integrating with third-party
    libraries, accessing the DOM, or making HTTP requests to an endpoint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shouldComponentUpdate(nextProps, nextState)`: This is invoked when the component
    has updated the state or new props have been received. This method allows React
    to know if it should update the component or not. If you don''t implement this
    method in your component, it defaults to returning `true`, which means the component
    should be updated every time the state has changed or new props have been received.
    If implementing this method and returning `false`, it will tell React not to update
    the component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`componentDidUpdate(prevProps, prevState, snapshot)`: This is invoked after
    the render method or when an update occurs, except for the first rendering.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getSnapshotBeforeUpdate(prevProps, prevState)`: This is invoked after the
    render method or when an update occurs but before the `componentDidUpdate` life
    cycle method. The returned value of this method is passed as the third argument
    of `componentDidUpdate`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`componentWillUnmount()`: This is invoked before a component is unmounted and
    its instance destroyed. If using third-party libraries, this method is helpful
    for cleaning up. For instance, clearing timers or cancelling network requests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`componentDidCatch(error, info)` : This is a new feature of React v16 for error
    handling. We will look at this in more detail in the following recipes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will build a component using all the life cycle methods
    that we have learned about. First, create a new `package.json` file with the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a babel configuration file as `.babelrc`, adding the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a Terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Build a `LifeCycleTime` component whose only purpose would be to display the
    current time. The component will be updated every 100 ms to keep the component
    in sync with the time change. We will use the life cycle methods in this component
    for the following purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`constructor(props)`: To initialize the component''s initial state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`static getDerivedStateFromProps(nextProps, nextState)`: To merge the `props`
    with the state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`componentDidMount()`: To set a function that will be executed every 100 ms
    using `setInterval`, which will update the state with the current time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shouldComponentUpdate(nextProps, nextState)`:To decide if the component should
    be rendered or not. Check if `props` have a property `dontUpdate` set to `true`,
    which means the component shouldn''t be updated on a `state` or `props` change.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`componentDidUpdate(prevProps, prevState, snapshot)`: To simply log in the
    console that the component has been updated displaying the `snapshot`''s value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getSnapshotBeforeUpdate(prevProps, prevState)`: To illustrate the functionality
    of this method, simply return a string that will be passed as the third argument
    to `componentDidUpdate`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`componentWillUnmount()`: When the component is destroyed or unmounted, clear
    the interval defined in `componentDidMount`. Otherwise, after the component is
    unmounted, you will see an error being displayed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'First, create an `index.html` file where you will render the React application:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `index.html`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, perform the following steps to build the `LifeCycleTime` component:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `stateful-react.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the React and `ReactDOM` libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a `LifeCycleTime` class component and use the life cycle methods as
    previously described:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, define an `App` class component, which will be used for testing your
    previously created component. Add three buttons: one that will toggle the color
    property between red and blue and pass it as a prop to the `LifeCycleTime` component,
    another button for toggling the `dontUpdate` property in the state between true
    and false, which will then be passed as a prop to the `LifeCycleTime`, and finally,
    a button that when clicked will either mount or unmount the `LifeCycleTime` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Render the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's test it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To see the previous work in action, perform the following steps::'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a Terminal at the root of your project directory and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open a new tab in your web browser and go to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Use the buttons to toggle the state of the component and understand how the
    life cycle methods affect the component's functionality.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Working with React.PureComponent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`React.PureComponent` is similar to `React.Component`. The difference is that
    `React.Component` implements the `shouldComponentUpdate` life cycle method internally
    to make a shallow comparison of the `state` and `props` to decide if the component
    should update or not.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will write two components, one extending `React.PureComponent`,
    and another extending `React.Component,` in order to see how they behave when
    the same properties are passed to them. Before you start, create a new `package.json`
    file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a babel configuration file as `.babelrc`, adding the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a Terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Build a React application to illustrate and understand better how `React.PureComponent`
    works. Create two components: one will extend `React.Component` while the other
    will extend `React.PureComponent`. Both components will be placed inside another
    React component named `App` that will update its state around every second. Using
    the life cycle method,`componentDidUpdate,` in both components, we will log on
    the console which one of them gets updated when the parent component `App` updates.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create an `index.html` file where the react application will be rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `index.html`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following HTML code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, follow the next steps to build the React application:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `pure-component.js.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the React and ReactDOM libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a `Button` class component extending the `React.PureComponent` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a `Text` class component extending the `React.Component` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a simple `App` component that will render both components. The `App`
    component will set a timer once it''s mounted and update the state around every
    second:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Render the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's test it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To see the previous work in action, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a Terminal at the root of your project directory and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open a new tab in your web browser and go to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'The counter will increase by one around every second. Open the developer tools
    in your browser and check the console output. You should see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because `React.PureComponent` implements the `shouldComponentUpdate`**life cycle
    method** internally, it doesn't update the `Button` component because its `state`
    or `props` have not changed. It does, however, update the `Text` component because
    `shouldComponentUpdate` returns `true` by default, telling React to update the
    component, even though its props or state have not changed.
  prefs: []
  type: TYPE_NORMAL
- en: React event handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React's event system uses internally a wrapper, called `SyntheticEvent`, around
    the native HTML DOM events for cross-browser support. React events follow the
    W3C spec, which can be found at [https://www.w3.org/TR/DOM-Level-3-Events/](https://www.w3.org/TR/DOM-Level-3-Events/).
  prefs: []
  type: TYPE_NORMAL
- en: 'React event names are camel-cased as opposed to HTML DOM events, which are
    lowercased. For instance, the HTML DOM event `onclick` would be called `onClick`
    in React. For a complete list of supported events, visit the React official documentation
    about events: [https://reactjs.org/docs/events.html](https://reactjs.org/docs/events.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will write a component to see how it is defined and how
    it works. Before you start, create a new `package.json` file with the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a babel configuration file as `.babelrc`, adding the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a Terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Firstly, create an `index.html` file where the React application will be rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `index.html`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following HTML code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, write a component defining an event handler for the `onClick` event:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `events.js.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the React and ReactDOM libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a class component that will render a `h1` React element and a `button`
    React element, which will trigger the `onBtnClick` method whenever it''s clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Render the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's test it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To see the application working, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a Terminal at the root of your project directory and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open a new tab in your web browser and go to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Click on the button to change the title.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React events are passed to React elements as `props`. For instance, we passed
    the `onClick` prop to the `button` React element and a reference to a callback
    function that we expect to be called when the user clicks on the button.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Did you notice that we have been using the `bind` very often? When a method
    is passed as a prop to a child component, it loses the context of `this`, so binding
    to the context is necessary. Take the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'The output displayed will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Even though the constant `props` has a reference to the `fn` method of the `examp`
    instance of the `Example` class, it loses the context of `this`. That's why binding
    allows you to keep the original context. In React, we bind a method to the original
    context of `this` to be able to use our own instance methods, such as `setState,`
    when passing the function down to child components. Otherwise, the context of
    `this` will be `undefined` and the function will fail.
  prefs: []
  type: TYPE_NORMAL
- en: Conditional rendering of components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Usually when building complex UIs, you would need to render a component or a
    React element according to the state or props received.
  prefs: []
  type: TYPE_NORMAL
- en: 'React components allow JavaScript to be executed within curly brackets and
    it can be used with the conditional ternary operator to decide which component
    or React element to render. For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'This also could have been written as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'If passing `"noon"` as the `timeOfDay` property value, it will generate the
    following HTML content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Or the following when the `timeOfDay` property is not set to `"noon"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will build a component that that renders one of its children
    according to a given condition. Firstly, create a new `package.json` file with
    the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a babel configuration file as `.babelrc,` adding the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a Terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Write a React component that will decide which of two different React elements,
    given as `children` to your component, will be displayed according to a `condition`
    passed as a property. If the condition is true, then the first child is displayed.
    Otherwise, the second child should be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create an `index.html` file where the React application will be rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `index.html`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following HTML code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, create a new file containing the logic of the React application and your
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `conditions.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the React and ReactDOM libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a functional component named `Toggle` that will receive a `condition`
    property that will be evaluated to define which React element to render. It expects
    to receive two React elements as children:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a class component named `App` that will render a React element based
    on the defined condition. When the button is clicked, it will toggle the `color`
    state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Render the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's test it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To run and test the application, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a Terminal at the root of your project directory and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open a new tab in your web browser and go to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Click on the button to toggle which React element is displayed
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because the `children` property can be an array of React elements, we can access
    each individual React element and decide which one to render. We used the `condition`
    property to evaluate if the given condition is truthy to render the first React
    element. Otherwise, if the value is falsy, then the second React element is rendered.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering lists with React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'React allows you to pass a collection of React elements or components as `children`
    in the form of an array. For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Collections of React elements or components must be given a special props property
    named `key`. This property lets React know which of the elements in the collection
    have changed, moved, or been removed in/from the array when an update occurs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will build a utility component that will map each item
    of an array to a component''s props and render them as a list. Before you start,
    create a new `package.json` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a babel configuration file as `.babelrc`, adding the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a Terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a React component named `MapArray,` which will do the job of mapping
    the items of an array to a React component.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create an `index.html` file where the React application will be rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `index.html`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following HTML code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, perform the following steps to build the React application:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `lists.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the React and ReactDOM libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a functional component called `MapArray` that will expect to receive
    three properties: `from,` which is expected to be an array of values, `mapToProps,`
    which is expected to be a callback function for mapping values to properties,
    and lastly, `children,` which is expected to receive a React component where the
    values of the array will be mapped to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a `TodoItem` component that expects to receive two properties, `done`
    and `label`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'Define an array that contains a to-do list of object values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a callback function that will map the array''s object values to the
    expected properties of the `TodoItem` component. Rename the `id` property as `key`,
    and the `title` property as `label`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a `TodoListApp` component that will make use of the `MapArray` component
    to create an instance of `TodoItem` for every item in the to-do list array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'Render the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's test it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To run and test the application, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a Terminal at the root of your project directory and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open a new tab in your web browser and go to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'A list of to-do items should be displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/171e72df-e830-48e0-b055-a25647d630d9.png)'
  prefs: []
  type: TYPE_IMG
- en: List of to-do items
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'This works pretty much the same as writing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: However, `MapArray` acts as a helper component to do the same job while keeping
    the code more readable.
  prefs: []
  type: TYPE_NORMAL
- en: Have you noticed that the `TodoItem` component expects only two properties?
    However, we're also passing the `id` of the items as `key`. If the `key` property
    is not passed, then while rendering the components, a warning will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Working with forms and inputs in React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Form-associated elements,** such as `<input>` and `<textarea>`, usually maintain
    their own internal state and update it according to the user input. In React,
    when the input of a **form-associated element** is managed using the React state,
    it''s called a **controlled component**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, in React, if the `value` property of an input is not set, then
    the input internal state can be mutated by the user input. However, if the `value`
    property is set, then the input is read-only and it expects React to manage the
    user input by using the `onChange` React event and manage the input''s state using
    the React state to update it if necessary. For example, this `input` React element
    will be rendered as read-only:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'However, because React expects to find an `onChange` event handler, the previous
    code will output a warning message on the console. To fix this, we can provide
    to the `onChange` property a callback function to handle the user input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: Because the user input is handled by React and, in the previous example, we
    don't update the input's value, then the input will appear to be read-only. The
    previous code is similar to just setting a `readOnly` property instead of providing
    a useless `onChange` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'React also allows you to define **uncontrolled components,** which basically
    keep out of React''s control what or input how the input is updated. For instance,
    when a third-party library is used instead to act over the input, **uncontrolled
    components** have a property called `defaultValue,` which is similar to the `value`
    property. However, it lets the input control its internal state by the user input
    and not by React. That means a **form-associated element** with a `defaultValue`
    property allows its state to be mutated by the user input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: As opposed to using the `value` property, you can now type in the input box
    to change its value because the internal state of the input is mutable.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will build a simple login form component. Before you start,
    create a new `package.json` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a babel configuration file as `.babelrc`, adding the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a Terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Define a class component named `LoginForm` that will handle `username` input
    and `password` input.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, create an `index.html` file where the React application will be rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `index.html`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following HTML code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, build the `LoginForm` component and use the power given to you by React
    *controlled components* over the input''s state to also disallow numbers on the
    `username` input:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `forms.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the React and ReactDOM libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a class component named `LoginForm`. Within the class, define an event
    handler for the input change, and check the `username` input''s value to disallow
    introducing numbers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: 'Render the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's test it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To run and test the application, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a Terminal at the root of your project directory and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open a new tab in your web browser and go to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: Try to introduce a number in the `username` input to see how the validation
    against numbers is working
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We define an `onChange` event handler used in both input elements. However,
    we check if the input's name is `username` to decide if the validation should
    be applied. `RegExp` is used to test for numbers in the input and replace them
    with an empty string. That's why numbers are not displayed while typing on the
    `username` input.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding refs and how to use them
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the usual workflow, React components communicate with their children by passing
    `props`. However, there are a few cases where it's needed to access the instance
    of a child to communicate or modify its behavior. React uses `refs` to allow us
    to access the instance of a child.
  prefs: []
  type: TYPE_NORMAL
- en: It's important to understand that React components' instances give you access
    to their instance methods and properties. However, an instance of a React element
    is an instance of an HTML DOM element. Refs are accessed by giving a `ref` attribute
    to the React component or React element. It expects the value to be a callback
    function that will be invoked once the instance is created, providing a reference
    to the instance in the first argument passed to the callback function.
  prefs: []
  type: TYPE_NORMAL
- en: 'React provides a helper function named `createRef` to define function callbacks
    for setting refs correctly. Take, for example, the following code, which obtains
    a reference of a React component and a React element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, the console will output `true` twice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: This proves what we have just learned.
  prefs: []
  type: TYPE_NORMAL
- en: Functional components do not have `refs`. Thus, giving a `ref` property to a
    functional component will display a warning in the console and fail.
  prefs: []
  type: TYPE_NORMAL
- en: '**Refs** are especially useful for working with *uncontrolled components* in
    the following cases:'
  prefs: []
  type: TYPE_NORMAL
- en: Integration with third-party libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing an HTML DOM element's native methods that are otherwise inaccessible
    from React, such as the `HTMLElement.focus()` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using certain web APIs, such as the Selection Web API, the Web Animations API,
    and media playback methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will work with uncontrolled components and use refs to
    send a custom event to a form HTML element. Before you start, create a new `package.json`
    file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a babel configuration file as `.babelrc,` adding the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a Terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Define a `LoginForm` class component that will render a form with two inputs:
    one for a username and the other for a password. Include a button outside of the
    form React element, which will be used for triggering the `onSubmit` event on
    the form React element.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, create an `index.html` file where the React application will be rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `index.html`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following HTML code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, start building the React application:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `refs.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the React and ReactDOM libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a class component named `LoginForm` that will render the form and a
    button that will trigger the `onSubmit` form event, using `refs`, when clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: 'Render the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's test it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To run and test the application, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a Terminal at the root of your project directory and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open a new tab in your web browser and go to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Click on the `LogIn` button to test that the form `onSubmit` events gets triggered.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, a reference to the instance of the form DOM element is kept in an instance
    property called `reform`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, once the button is submitted, we use the `EventTarget` web API `dispatchEvent`
    method to dispatch a custom event `submit` on the form DOM element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, the dispatched `submit` method is caught by the React `SyntheticEvent`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, React triggers the callback method passed to the form's `onSubmit`
    property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Understanding React portals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React portals allow us to render child components in a different DOM element
    outside of the DOM tree generated by the parent component while keeping the React
    tree as if the component is inside the DOM tree generated by the parent component.
    For instance, even though child components are located in a different DOM node,
    the events generated in a child component bubble up to the React parent component.
  prefs: []
  type: TYPE_NORMAL
- en: 'React portals are created using the ReactDOM library''s `createPortal` method
    and it has the same signature as the `render` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: 'However, the difference between `render` and `createPortal` is that the latter
    returns a special tag that is used in the React tree to identify this element
    as a React portal and to use it as if it were a React element. For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before you start, create a new `package.json` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a babel configuration file as `.babelrc`, adding the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a Terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, create an `index.html` file where the React application will be rendered,
    containing as well an HTML `header` tag where a React portal element will be rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `index.html`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following HTML code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, build a React application that will render a paragraph and an `h1` HTML
    element outside of the tree to a `header` HTML element:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `portals.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the React and ReactDOM libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a functional component named `Header` and create a portal to render
    the `children` to a different DOM element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a functional component named `App` that will render a React element
    and the `Header` React component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: 'Render the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's test it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To run and test the application, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a Terminal at the root of your project directory and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open a new tab in your web browser and go to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: 'The generated HTML DOM tree would look similar to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though in the React tree the `Header` component appears to be rendered
    after the paragraph `p` HTML tag, the rendered `Header` component renders before
    it. That's because the `Header` component is actually rendered on a `header` HTML
    tag that appears before the `section` HTML tag where the main application is rendered.
  prefs: []
  type: TYPE_NORMAL
- en: Catching errors with error boundary components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Error boundary components** are just React components that implement the
    `componentDidCatch` **life cycle method** to catch errors in their children. They
    catch errors in `constructor` methods when a class component is initialized but
    fails, in life cycle methods, and while rendering. Errors that cannot be caught
    are from asynchronous code, event handlers, and errors in the error component
    boundary itself.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `componentDidCatch` life cycle method receives two arguments: the first
    one is an `error` object while the second received argument is an object containing
    a `componentStack` property with a friendly stack trace that describes where in
    the React tree a component failed.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will build an error boundary component and provide a fallback
    UI when there is an error while rendering. Before you start, create a new `package.json`
    file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a babel configuration file as `.babelrc`, adding the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a Terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, create an `index.html` file where the React application will be rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `index.html`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following HTML code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, define an error boundary component that will catch errors and render
    a fallback UI displaying information where the error happened and the error message.
    Define as well an `App` component and create a `button` React element that when
    clicked will cause the application to fail while setting the state:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `error-boundary.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the React and ReactDOM libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: 'Define an `ErrorBoundary` component that will display a fallback message when
    the application fails to render:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a class component named `App` that will render a `button` React element.
    Once the button is clicked, it will purposely throw an error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: 'Render the application wrapping the `App` within the `ErrorBoundary` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's test it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To run and test the application, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a Terminal at the root of your project directory and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open a new tab in your web browser and go to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: Click on the `button` to cause the application to fail
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A fallback UI is displayed showing the following error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: Type checking properties with PropTypes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'React allows you to implement runtime type checking of components'' properties.
    It''s useful to catch bugs and make sure that your components are receiving `props`
    correctly. This can be easily done by just setting a static `propType` property
    on your components. For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: The previous code will require `MyComponent`'s `children` property to be a `string`.
    Otherwise, if a different property type is given, React will display a warning
    in the console.
  prefs: []
  type: TYPE_NORMAL
- en: '`propTypes''` methods are functions that get triggered when the component''s
    instance is created to check if the given `props` match the `propTypes` schema.'
  prefs: []
  type: TYPE_NORMAL
- en: '`propTypes` have an extensive list of methods that can be used for the validation
    of properties. You can find the complete list in the React official documentation:
    [https://reactjs.org/docs/typechecking-with-proptypes.html](https://reactjs.org/docs/typechecking-with-proptypes.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will see and write custom validation rules for checking
    property types. Before you start, create a new `package.json` file with the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a babel configuration file as `.babelrc`, adding the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a Terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, create an `index.html` file where the React application will be rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `index.html`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following HTML code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, define a `Toggle` class component that expects to receive two React elements
    as `children`. Use `PropTypes` to create a custom validation rule to check that
    the `children` property is an array of React elements and the component is receiving
    exactly two React elements:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `type-checking.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the React, ReactDOM, and `PropTypes` libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a class component named `Toggle`. Use `propTypes` for type-checking
    the `condition` and `children` properties. Use a custom `propType` to check if
    `children` is an array of React elements and that it contains exactly two React
    elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a class component named `App` that will render the `Toggle` component.
    Provide three React elements as its `children` and a `button` that when clicked
    will toggle the `value` property of state from `true` to `false` and vice versa:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: 'Render the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's test it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To run and test the application, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a Terminal at the root of your project directory and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open a new tab in your web browser and go to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: 'The console in your browser will display the following warning:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: Clicking the `button` will toggle between the first two React elements while
    the third React element will be ignored
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We define a custom function validator for the `children` property. Inside the
    function, we first use the built-in `propTypes` functions to check if `children`
    is an array of React elements. If the result of the validation is not an instance
    of `Error`, then we use the React `Children`'s `count` utility method to know
    how many React elements were given and we return an error if the number of React
    elements in children is not `2`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Did you notice that we used the `propTypes.checkPropTypes` method? It''s a
    utility function that allows us to check for `propTypes` even outside React. For
    instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: The `pTypes` object works as a schema providing validation functions from `propTypes`.
    The `props` constant is just a plain object containing properties defined in `pTypes`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the previous example won''t output any warning in the console since
    all properties in `props` are valid. However, change the `props` object to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we will see the following warning in the console output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: 'The `checkPropTypes` utility method has the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: Here, `typeSpecs` refers to an object containing `propTypes` function validators.
    The `values` argument expects to receive an object whose values need to be validated
    against `typeSpecs`. `componentName` refers to the source's name, which usually
    is a component's name that is used in the warning message to display where the
    `Error` was originated. The last argument, `getStack,` is optional and it's expected
    to be a callback function that should return a `Stack Trace` that is added at
    the end of the warning message to better describe where exactly the error was
    originated.
  prefs: []
  type: TYPE_NORMAL
- en: '`propTypes` are used only in development and for using the production build
    of React, you must set up the bundler to replace `process.env.NODE_ENV` with `"production"`.
    This way, `propTypes` are removed in the production build of your application.'
  prefs: []
  type: TYPE_NORMAL
