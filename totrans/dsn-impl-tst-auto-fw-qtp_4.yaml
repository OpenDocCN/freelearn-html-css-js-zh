- en: Chapter 4. Understanding and Creating Frameworks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 4 章：理解和创建框架
- en: This chapter provides a detailed approach and guidance for creating a framework
    for test automation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提供了创建测试自动化框架的详细方法和指导。
- en: 'Creating frameworks in QTP requires knowledge of the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在 QTP 中创建框架需要了解以下内容：
- en: VBScript basics, control structures, loops, and built-in functions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VBScript 基础知识、控制结构、循环和内置函数
- en: Basic concepts and approaches for designing various frameworks
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计各种框架的基本概念和方法
- en: Programming constructs that help to create the utilities for the framework
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帮助创建框架实用工具的编程结构
- en: Programming with VBScript
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 VBScript 进行编程
- en: Knowledge of Visual Basic script is essential to create frameworks. The knowledge
    of creating simple statements, controls structure, loops, and built-in functions
    in VBScript allows us to enhance the test scripts and make them more robust; it
    also allows us to interact with external resources. This section describes the
    VBScript features that are useful throughout the designing of the frameworks.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 熟悉 Visual Basic 脚本对于创建框架至关重要。了解 VBScript 中的简单语句、控制结构、循环和内置函数，使我们能够增强测试脚本并使其更健壮；它还允许我们与外部资源交互。本节描述了在设计框架过程中有用的
    VBScript 功能。
- en: Using VBScript
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 VBScript
- en: QTP uses VBScript as a scripting language. VBScript allows scripts to deal with
    resources that are not a part of the QTP itself, for example, filesystem and external
    data sources (Excel, databases, and so on). VBScript allows us to define the function
    procedures; it provides a lot of built-in functions that help to create the reusable
    functions. VBScript supports the regular expression that assists in verification
    and validation. Since it's a lightweight language, the framework designer is benefited.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: QTP 使用 VBScript 作为脚本语言。VBScript 允许脚本处理不属于 QTP 本身的资源，例如文件系统和外部的数据源（Excel、数据库等）。VBScript
    允许我们定义函数过程；它提供许多内置函数，有助于创建可重用函数。VBScript 支持正则表达式，有助于验证和验证。由于它是一种轻量级语言，框架设计者从中受益。
- en: VBScript datatypes
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: VBScript 数据类型
- en: Variant is the only datatype in VBScript. A variant can contain different kinds
    of information depending on its declaration and use. It can contain numeric, constant,
    date, string, and Boolean values.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 变体是 VBScript 中唯一的数据类型。根据其声明和使用方式，变体可以包含不同类型的信息。它可以包含数字、常量、日期、字符串和布尔值。
- en: 'The following is a list of the subtypes of a variant:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个变体的子类型列表：
- en: '| Subtype | Description | Range |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 子类型 | 描述 | 范围 |'
- en: '| --- | --- | --- |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `Empty` | Variant is uninitialized | 0 for the numeric variables"" or Zero-length
    for the string variables |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `Empty` | 变体未初始化 | 对于数值变量为 0 或对于字符串变量为零长度 |'
- en: '| `Null` | Variant initially contains no valid data | Does not contain data
    |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `Null` | 变体最初不包含有效数据 | 不包含数据 |'
- en: '| `Boolean` |   | True or False |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `Boolean` |  | 真 或 假 |'
- en: '| `Byte` | Small integer | 0-255 |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `Byte` | 小整数 | 0-255 |'
- en: '| `Integer` | Integer | From -32,768 to 32,767 |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `Integer` | 整数 | 从 -32,768 到 32,767 |'
- en: '| `Currency` | Currency | From -922,337,203,685,477.5808 to 922,337,203,685,477.5807
    |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `Currency` | 货币 | 从 -922,337,203,685,477.5808 到 922,337,203,685,477.5807
    |'
- en: '| `Long` | Long integer | From -2,147,483,648 to 2,147,483,647 |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `Long` | 长整数 | 从 -2,147,483,648 到 2,147,483,647 |'
- en: '| `Single` | Single-precision floating-point number | From -3.402823E38 to
    -1.401298E-45 for negative values, and from 1.401298E-45 to 3.402823E38 for positive
    values |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `Single` | 单精度浮点数 | 对于负值，从 -3.402823E38 到 -1.401298E-45，对于正值，从 1.401298E-45
    到 3.402823E38 |'
- en: '| `Double` | Double-precision floating-point number | 1.79769313486232E308
    to 4.94065645841247E-324 for negative values, and 4.94065645841247E-324 to 1.79769313486232E308
    for positive values |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `Double` | 双精度浮点数 | 对于负值，从 1.79769313486232E308 到 4.94065645841247E-324，对于正值，从
    4.94065645841247E-324 到 1.79769313486232E308 |'
- en: '| `Date (Time)` | A number that represents a date | Dates from January 1, 100
    to December 31, 9999 |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `Date (Time)` | 表示日期的数字 | 从 100 年 1 月 1 日到 9999 年 12 月 31 日 |'
- en: '| `String` | Represents the characters | Contains characters of variable length
    string, approximately 2 billion in length |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `String` | 表示字符 | 包含可变长度的字符串，长度约为 20 亿 |'
- en: '| `Object` | Contains an object |   |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `Object` | 包含一个对象 |  |'
- en: '| `Error` | Contains an Error object |   |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `Error` | 包含一个错误对象 |  |'
- en: Operators in VBScript
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: VBScript 中的运算符
- en: 'Operators are useful in creating the expressions; these expressions are created
    by arithmetic, comparison, and logical operators. In VBScript, we can divide operators
    into four major categories:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Mathematical
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparison
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Concatenation
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logical
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Mathematical | Symbol | Comparison | Symbol | Logical | Symbol |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
- en: '| Exponential | `^` | Equality | `=` | Logical negation | `Not` |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
- en: '| Urinary negation | `-` | Inequality | `<>` | Logical conjunction | `And`
    |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
- en: '| Multiplication | `*` | Less than | `<` | Logical disjunction | `OR` |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
- en: '| Division | `/` | Greater than | `>` | Logical exclusion | `XOR` |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
- en: '| Integer division | `\` | Less than equal to | `<=` | Logical equivalence
    | `EQV` |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
- en: '| Modulus | `MOD` | Greater than equal to | `>=` | Logical implication | `IMP`
    |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
- en: '| Addition | `+` | Object equivalence** | `Is` |   |   |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
- en: '| Subtraction | `-` |   |   |   |   |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
- en: '| Concatenation | `&` |   |   |   |   |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
- en: Note
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Integer division divides two numbers and returns an integer result, for example,
    5/2 will result in 2 not 2.5.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: The modulus or remainder operator divides operand 1 by operand 2 (rounding the
    floating-point number to an integer) and returns a remainder, for example, 5 MOD
    2 will result in 1.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Object equivalence compares two object reference variables. If object1 and object2
    both refer to the same object, the result is `True`; if they don't, the result
    is `False`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Adding examples of expressions
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An expression is a combination of explicit values, constants, variables, operators,
    and functions that are interpreted according to particular rules of precedence
    and association for a particular programming/scripting language.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Control structures and loops
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A control structure, conditionally, executes a group of statements, depending
    on the value of an expression. There are four constructs that control the flow
    of the execution, which are shown in the following table:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '| If (condition)statement1End If | If condition Then statements [Else else
    statements ]End If | If condition Then[statements][ElseIf condition Then[elseif
    statements]][Else[else statements]]End If | Select Case expression[Case expression
    list[statements]][Case Else[else statements]]End Select |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
- en: 'An example of the `If` and `else` control statement is given as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following is an example of the `Select` case:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Running the preceding lines of code executes a series of statements as long
    as the given condition is `True`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Using loops
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A loop executes a sequence of statements that are specified once but may be
    carried out several times in succession. VBScript allows four looping constructs
    as shown in the following table:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '| While … Wend | Do… Loop | For… Next | For each… Next |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
- en: '| While condition[statements]Wend | Do [{While &#124; Until} condition][statements][Exit
    Do][statements]LoopDo[statements][Exit Do][statements]Loop [{While &#124; Until}
    condition] | For counter = start To end [Step step][statements][Exit For][statements]Next
    | For each element in collection[statements][Exit For][statements]Next [element]
    |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `While condition[statements]Wend` | `Do [{While | Until} condition][statements][Exit
    Do][statements]LoopDo[statements][Exit Do][statements]Loop [{While | Until} condition]`
    | `For counter = start To end [Step step][statements][Exit For][statements]Next`
    | `For each element in collection[statements][Exit For][statements]Next [element]`
    |'
- en: 'The following is an example of the usage of `While … Wend`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为`While … Wend`使用示例：
- en: '[PRE2]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: One of the drawbacks of the `While…Wend` loop is that it does not have the `exit`
    statement to terminate from the loop but other looping constructs allow us to
    exit from the loop.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`While…Wend`循环的一个缺点是没有`exit`语句来终止循环，但其他循环结构允许我们从循环中退出。'
- en: The Do Loop
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`Do Loop`'
- en: The `Do...Loop` runs statements for an indefinite number of times. The statements
    are repeated either while a condition is true or until it becomes true.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`Do...Loop`在不确定的次数上运行语句。语句要么在条件为真时重复，要么直到它变为真。'
- en: 'The following is an example of the usage of `Do Loops`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为`Do Loops`使用示例：
- en: '[PRE3]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: There are two variants of `Do Loop`; we can use the `while` or `until` conditions
    with `Do` or `Loop`. When we use the `while` or `until` condition with `Do`, the
    execution starts with validating the condition first and then enters into the
    loop; refer to example 1\. In the latter case, example 3, the first loop is executed
    once and the condition is checked later.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`Do Loop`有两种变体；我们可以使用`Do`或`Loop`与`while`或`until`条件一起使用。当我们使用`Do`与`while`或`until`条件时，执行首先验证条件，然后进入循环；参见图例1。在后一种情况，即图例3中，第一个循环执行一次，然后检查条件。'
- en: The `For Next` loop iterates statements over a predefined number of times. Refer
    to the following code.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`For Next`循环在预定义的次数上迭代执行语句。参见图例。'
- en: The `ToProperties` method returns a collection of the properties of the test
    object.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`ToProperties`方法返回测试对象属性集合。'
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The result of the preceding set of code is as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码集的结果如下：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Refer to the following screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 参考以下屏幕截图：
- en: '![The Do Loop](img/1027EN_04_01.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![`Do Loop`](img/1027EN_04_01.jpg)'
- en: The `For each … Next` loop iterates statements for each element in an array
    or collection.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`For each … Next`循环对数组或集合中的每个元素迭代执行语句。'
- en: '`Dim dicObj` creates a dictionary variable, which is shown as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`Dim dicObj`创建了一个字典变量，如下所示：'
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Introducing frameworks
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍框架
- en: A framework is defined as a broad overview, guideline, or skeleton of the interlinked
    components, which supports a particular approach to a specific objective, and
    serves as a guide that can be enhanced as required by adding or deleting components.
    A framework is a working or conceptual model that supports or provides guidelines
    for creating or expanding the test scripts to achieve the test automation, ensuring
    lower maintenance and easy expandability.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 框架被定义为对相互关联组件的广泛概述、指南或框架，支持特定目标的一种特定方法，并作为可以按需通过添加或删除组件来增强的指南。框架是一个支持或为创建或扩展测试脚本提供指南的工作或概念模型，以实现测试自动化，确保维护成本低且易于扩展。
- en: A test automation framework is a layered structure and provides the mechanism
    to interrelate and interact with each other to achieve the common goals. Frameworks
    also include actual programs and interfaces or offer utility tools for using the
    frameworks. A framework facilitates a standard way for modifying, adding, and
    deleting the scripts and functions. It's a comprehensive structure that provides
    scalability and reliability with less efforts.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 测试自动化框架是一个分层结构，提供了相互关联和交互的机制以实现共同目标。框架还包括实际程序和接口，或提供用于使用框架的实用工具。框架简化了修改、添加和删除脚本和函数的标准方式。它是一个提供可扩展性和可靠性的综合结构，且无需过多努力。
- en: Automation goals can be achieved by selecting the right framework that is suitable
    for test automation. The cost of test automation includes both development and
    maintenance efforts. Selecting the suitable framework and techniques helps in
    maintaining the lower cost and high impact solution.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择适合测试自动化的正确框架，可以实现自动化目标。测试自动化的成本包括开发和维护工作。选择合适的框架和技术有助于保持低成本和高影响解决方案。
- en: The automation framework and types of framework
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化框架和框架类型
- en: 'In general, various structures and techniques are used to design the framework.
    Broadly based on these techniques and structures, we can classify the framework
    as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，使用各种结构和技术来设计框架。广泛基于这些技术和结构，我们可以将框架分类如下：
- en: '**Linear**: In this the script is created in a linear fashion, usually generated
    by recording and replaying without or with only slight modification.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线性**：在这个框架中，脚本以线性方式创建，通常通过录制和回放生成，可能没有或只有轻微的修改。'
- en: '**Data-driven**: Parameterizes the test and fetches data from a persistent
    data source. The data source could be internal or external to the test.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据驱动**：参数化测试并从持久数据源获取数据。数据源可以是测试的内部或外部。'
- en: '**Modular**: A modular framework is designed to achieve modularity at test
    as well as script levels. The modular framework can be of the following combinations:'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块化**：模块化框架旨在在测试和脚本级别实现模块化。模块化框架可以是以下组合之一：'
- en: Test script modular framework
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试脚本模块化框架
- en: Test library modular framework
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试库模块化框架
- en: '**Keyword-driven**: Keyword-driven framework is designed for reducing the maintenance
    cost by separating test cases from their execution.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关键字驱动**：关键字驱动框架旨在通过将测试用例与其执行分离来降低维护成本。'
- en: '**Hybrid**: In this, two or more of the previous patterns are used.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**混合**：在这个框架中，使用两种或更多之前模式。'
- en: Record and replay
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 录制和回放
- en: Recording is the process of capturing an object and its properties, creating
    the test objects, and storing them in the Object Repository with hierarchy. Assign
    a logical name to the test object and create the scripts by capturing the operation
    performed on the GUI.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 录制是捕获对象及其属性的过程，创建测试对象，并将它们以层次结构存储在对象资源管理器中。为测试对象分配一个逻辑名称，并通过捕获在GUI上执行的操作来创建脚本。
- en: '![Record and replay](img/1027EN_04_02.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![录制和回放](img/1027EN_04_02.jpg)'
- en: 'The preceding screenshot shows the AUT, recorded script, and OR. The AUT contains
    the test objects. OR stores the test objects in an hierarchy and with their identification
    properties:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了自动测试对象（AUT）、记录的脚本和对象资源管理器（OR）。自动测试对象包含测试对象。对象资源管理器以层次结构存储测试对象及其标识属性：
- en: 'The recorded scripts take us through the following three test steps:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 记录的脚本带我们通过以下三个测试步骤：
- en: Click on the **Login** dialog.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**登录**对话框。
- en: Enter `ashish` in the Agent Name textbox.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代理名称文本框中输入`ashish`。
- en: Enter the password.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入密码。
- en: 'A test step contains test objects with hierarchy, operation, and data value
    (if applicable) for the test object. While recording the user action on AUT, OR
    creation and scripts generation almost happen simultaneously. This approach is
    also called the **QTP linear framework** approach. In the linear framework approach,
    scripts are recorded in a step-by-step fashion without focusing on reusability.
    Consider an example where you have a test case to log in to an application, search
    for some data and then log out. In the linear framework, the code would look like
    something shown in the following example:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 一个测试步骤包含具有层次结构、操作和数据值（如适用）的测试对象。在记录自动测试对象上的用户操作时，对象资源管理器的创建和脚本的生成几乎同时发生。这种方法也称为**QTP线性框架**方法。在线性框架方法中，脚本以逐步方式记录，不关注可重用性。考虑一个例子，你有一个测试用例用于登录应用程序，搜索一些数据然后登出。在线性框架中，代码看起来像以下示例：
- en: 'Steps for creating the QTP linear framework:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 创建QTP线性框架的步骤：
- en: Enter username.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入用户名。
- en: Enter password.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入密码。
- en: Click on the **OK** button.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**按钮。
- en: Enter the **Flight** date.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入**航班**日期。
- en: Select **Fly From** (source).
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**飞出**（源）。
- en: Select **Fly To** (destination).
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**飞往**（目的地）。
- en: Click on the **FLIGHT** button.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**航班**按钮。
- en: Click on the **OK** button.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**按钮。
- en: Enter the name.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入名称。
- en: Click on the **Insert Order** button.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**插入订单**按钮。
- en: Close the **Flight Reservation** window.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭**航班预订**窗口。
- en: '[PRE7]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is the simplest way to create scripts and use and implement them if the
    AUT is small, but do not expect frequent changes in AUT. The normal record and
    playback falls under this framework.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果自动测试对象（AUT）较小，这是创建脚本和使用它们的简单方法，但如果期望AUT频繁更改，则不要期望。
- en: Advantages and disadvantages of linear a framework
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线性框架的优缺点
- en: 'The advantages of linear framework are stated as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 线性框架的优点如下所述：
- en: No expertize or experience of programming or designing is required. Basic knowledge
    of QTP is required for creating scripts.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不需要编程或设计的专业知识或经验。创建脚本需要基本了解QTP。
- en: Automatic test object creation and storage in the Object Repository.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动在对象库中创建和存储测试对象。
- en: This is the fastest way to create test automation scripts.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是创建测试自动化脚本最快的方式。
- en: This is the simplest framework, and it is easy to understand.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是 simplest 框架，并且易于理解。
- en: Helps to learn the objects and create the scripts manually.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帮助学习对象并手动创建脚本。
- en: Can add checkpoints easily.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以轻松添加检查点。
- en: 'The disadvantages of linear framework are stated as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 线性框架的缺点如下所述：
- en: Does not allow reusability since scripts are created in a linear fashion and
    do not have functions.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于脚本以线性方式创建且没有函数，因此不允许重用。
- en: Data is bound with the scripts; hence, the test is noniterative, and this approach
    is inefficient for executing the test for multiple sets of data. Change the data
    manually for each run or create multiple copies of scripts; unfortunately, both
    of these techniques are inefficient.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据与脚本绑定；因此，测试是非迭代的，这种方法对于执行多组数据的测试效率低下。每次运行都需要手动更改数据或创建多个脚本副本；不幸的是，这两种技术都效率低下。
- en: The maintenance cost is very high, and it is tedious, and error-prone since
    it is required to make changes in all the affected areas.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维护成本非常高，且繁琐，容易出错，因为它需要在所有受影响区域进行更改。
- en: Need to add comments on our own.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要我们自己添加注释。
- en: Introduction to the data-driven framework
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据驱动框架简介
- en: A data-driven framework is the collection of test scripts that run with related
    multiple datasets. This framework provides reusable scripts for different sets
    of data and it improves the test coverage. Input and result (test criteria) data
    values can be stored in one or more central data sources or databases; the actual
    format and organization can be implementation specific.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 数据驱动框架是一组运行相关多个数据集的测试脚本。此框架为不同数据集提供可重用脚本，并提高测试覆盖率。输入和结果（测试标准）数据值可以存储在一个或多个中央数据源或数据库中；实际格式和组织可以是实现特定的。
- en: 'To understand the data-driven framework implementation we should know three
    terms:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解数据驱动框架的实现，我们应该了解三个术语：
- en: '**Variable**'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变量**'
- en: '**Parameter**'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**参数**'
- en: '**Iteration**'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**迭代**'
- en: A variable is a storage location and an associated with an identifier, which
    contains some known or unknown quantity or information, a value.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 变量是一个存储位置，与一个标识符相关联，包含一些已知或未知数量或信息，即值。
- en: A parameter is a variable that is provided as an input to the scripts. Parameterization
    in QTP can be achieved by the `datatable` object. The `datatable` object represents
    the QuickTest design-time data table and its associated sheets and parameters.
    The `datatable` object has various methods and properties to access data from
    the runtime data table object.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 参数是一个变量，它作为输入提供给脚本。在 QTP 中，可以通过 `datatable` 对象实现参数化。`datatable` 对象表示 QuickTest
    设计时数据表及其关联的表和参数。`datatable` 对象具有各种方法和属性，用于从运行时数据表对象访问数据。
- en: Iteration is a process where a parameterized script executes the test for a
    predefined number of times from a data source.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代是一个过程，其中参数化脚本从数据源执行预定义次数的测试。
- en: 'There are four major steps in creating a data-driven framework:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 创建数据驱动框架有四个主要步骤：
- en: Create a script.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个脚本。
- en: Define the parameters that hold data.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义包含数据的参数。
- en: Add code to get data from the data source and assign a value.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加代码从数据源获取数据并分配值。
- en: Modify the settings or add code to execute the test for all the rows or subset
    of rows.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改设置或添加代码以执行所有行或行子集的测试。
- en: 'There are two major ways to access data in QTP:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在 QTP 中访问数据有两种主要方式：
- en: Using `datatable` object
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `datatable` 对象
- en: Using external data source
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用外部数据源
- en: 'Creating data-driven scripts using the `datatable` object:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `datatable` 对象创建数据驱动脚本：
- en: Create the script by recording or manually.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过录制或手动创建脚本。
- en: Define parameters in an external Excel sheet as shown in the following screenshot.
    Make sure that the first row contains the parameter name. Enter data in the subsequent
    rows as shown in the following screenshot:![Introduction to the data-driven framework](img/1027EN_04_03.jpg)
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如以下截图所示，在外部 Excel 表格中定义参数。确保第一行包含参数名称。在后续行中输入数据，如以下截图所示：![数据驱动框架简介](img/1027EN_04_03.jpg)
- en: 'To fetch the data from the external excel sheet, use the `import` method of
    `datatable`:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要从外部 Excel 表格中获取数据，请使用 `datatable` 的 `import` 方法：
- en: Define parameters using the `datatable` object
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `datatable` 对象定义参数
- en: To add the data, rename the column name by double-clicking on the column name.
    Rename the column and add data to the subsequent rows as shown in the following
    screenshot:![Introduction to the data-driven framework](img/1027EN_04_04.jpg)
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加数据，通过双击列名来重命名列名。重命名列并按以下截图所示将数据添加到后续行中：![数据驱动框架简介](img/1027EN_04_04.jpg)
- en: Use the data-driver tool or `datatable` object parameterization. Add the test
    data to `datatable`, add the column name to the header, and double-click on **Add**
    or change the column name to parameter in the data table.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用数据驱动工具或 `datatable` 对象参数化。将测试数据添加到 `datatable`，将列名添加到标题中，然后双击**添加**或更改数据表中的列名为参数。
- en: Make the test scripts iterative.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使测试脚本迭代。
- en: 'There are two ways to make scripts iterative. First, under **Test Settings**
    select **Run one iteration only**, **Run on all rows**, and then **Run from row**
    `n` **to row** `m`:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以使脚本迭代。首先，在**测试设置**下选择**仅运行一次迭代**、**运行所有行**，然后选择**从行** `n` **到行** `m`
    运行：
- en: '![Introduction to the data-driven framework](img/1027EN_04_05.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![数据驱动框架简介](img/1027EN_04_05.jpg)'
- en: 'Second, you can also programmatically create the scripts for running the test
    script:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，你也可以通过编程创建运行测试脚本的脚本：
- en: '[PRE8]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To run for one iteration, `startnum` and `endnum` should be 1, `startnum=endnum=1`
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行一次迭代，`startnum` 和 `endnum` 应为 1，`startnum=endnum=1`
- en: To run test for all rows, `startnum = 1` and `endnum = datatable. datatable.GetRowCount`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行所有行的测试，`startnum = 1` 和 `endnum = datatable.GetRowCount`。
- en: 'Let''s club all the concepts together to parameterize the test. Creating the
    test data in `datatable`. `datatable` takes two arguments: parameter name and
    sheet type. `datatable` has two types of sheets: local sheet (local to action)
    and global sheet. To access the data from the global sheet, use `dtGlobalSheet`,
    and to access the data from the local sheet, use `dtLocalSheet`. Refer to the
    following example:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将所有概念结合起来，对测试进行参数化。在 `datatable` 中创建测试数据。`datatable` 有两个参数：参数名和表类型。`datatable`
    有两种类型的表：本地表（与操作相关）和全局表。要从全局表中访问数据，请使用 `dtGlobalSheet`，要从本地表中访问数据，请使用 `dtLocalSheet`。请参考以下示例：
- en: '[PRE9]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following code shows how to import and iterate the test using `datatable`:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了如何使用 `datatable` 导入和迭代测试：
- en: '[PRE10]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Using the Excel application with VBScript:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Excel 应用程序和 VBScript：
- en: '[PRE11]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The FileSystemObject object model
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件系统对象模型
- en: VBScript allows you to process drives, folders, and files using the `FileSystemObject`
    (FSO) object model, which is explained in the following section that describes
    how you can use `FileSystemObject` to manipulate files.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: VBScript 允许你使用 `FileSystemObject` (FSO) 对象模型处理驱动器、文件夹和文件，以下章节将解释如何使用 `FileSystemObject`
    来操作文件。
- en: 'There are two ways for file manipulation:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 文件操作有两种方式：
- en: Creating and appending files, removing data from the files, and reading from
    the files
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和附加文件、从文件中删除数据以及从文件中读取
- en: Copying, moving, and deleting files
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制、移动和删除文件
- en: 'The following are the steps for reading and writing data from text files:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从文本文件中读取和写入数据的步骤：
- en: Create a text file.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个文本文件。
- en: Write data to it.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向其中写入数据。
- en: Close it.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭它。
- en: Open the text file again.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次打开文本文件。
- en: Read the file.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读取文件。
- en: Close it.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭它。
- en: 'The following is an example of reading and writing to the text file:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个读取和写入文本文件的示例：
- en: '[PRE12]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'An example of using a text file for data-driven testing is given as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 下面给出了使用文本文件进行数据驱动测试的示例：
- en: '[PRE13]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The methods used for performing the read and write operation on the test files
    are listed as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 列出用于在测试文件上执行读写操作的方法如下：
- en: '| `Write` | Write to an opened text file |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `Write` | 将数据写入打开的文本文件 |'
- en: '| `WriteLine` | Write to an open text file and add a newline character to it
    |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| `WriteLine` | 将数据写入打开的文本文件，并添加一个换行符 |'
- en: '| `WriteBlankLines` | Write blank line(s) to an opened text file |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| `WriteBlankLines` | 向打开的文本文件写入空白行 |'
- en: '| `Read` | Read characters from the text file, which are specified as an argument
    |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| `Read` | 从文本文件中读取指定为参数的字符 |'
- en: '| `ReadLine` | Read the entire line, excluding the newline character |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| `ReadLine` | 读取整行，不包括换行符 |'
- en: '| `ReadAll` | Read the entire data from a text file |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| `ReadAll` | 从文本文件中读取整个数据 |'
- en: 'The following example demonstrates the file manipulation operations:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了文件操作：
- en: '[PRE14]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following is an example of using the ADODB to get data from the database:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个使用 ADODB 从数据库获取数据的示例：
- en: '[PRE15]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Introduction to the modular framework
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块化框架简介
- en: Modularity allows decomposing the components and/or functionality and recombines
    them. This approach is a design technique that emphasizes on separating the functionality
    of an AUT into independent, interconnected modules such that each module contains
    everything necessary to execute only one aspect of the desired functionality.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 模块化允许分解组件和/或功能，并将它们重新组合。这种方法是一种设计技术，强调将自动化的功能单元（AUT）的功能分离成独立的、相互连接的模块，使得每个模块只包含执行所需功能一个方面的所有必要元素。
- en: Achieving the modularity requires modularity at two different layers; one layer
    is test and the other layer is script. To create a modular framework, we need
    to decompose the test layer into manageable pieces based on their objectives.
    For example, common test libraries are separate from function libraries. At test
    level, we decompose the key libraries and resources into a structure to achieve
    the automation goals using appropriate design.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现模块化，需要在两个不同的层面上进行模块化；一个层面是测试层面，另一个层面是脚本层面。为了创建一个模块化框架，我们需要根据其目标将测试层分解成可管理的部分。例如，常见的测试库与功能库是分开的。在测试层面，我们将关键库和资源分解成结构，以使用适当的设计实现自动化目标。
- en: 'There are four distinct parts of the modular framework:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 模块化框架有四个不同的部分：
- en: Script-level modularity
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本层面模块化
- en: Test-level modularity
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试层面模块化
- en: Resource structure
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源结构
- en: Framework design
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 框架设计
- en: 'Let''s take the example of the Flight application; the entire functionality
    can be divided into small independent functions as shown in the following figure.
    This requires to achieve script-level modularity as shown in the following figure:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以Flight应用程序为例；整个功能可以划分为如以下图所示的小独立函数。这需要实现如以下图所示的脚本层面模块化：
- en: '![Introduction to the modular framework](img/1027EN_04_06.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![模块化框架简介](img/1027EN_04_06.jpg)'
- en: Tip
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: We can omit a few functions as part of the automation that are least used and
    do not contribute towards ROI, such as graph, edit, and help in the Flight application.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以省略一些作为自动化一部分的最少使用且不贡献于投资回报率的函数，例如图形、编辑和在Flight应用程序中的帮助。
- en: 'Apart from decomposing the entire functionality into small, independent functions,
    we need to ensure that other components should also be decomposed. After decomposing,
    the entire test component look likes the following figure:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 除了将整个功能分解成小而独立的函数外，我们还需要确保其他组件也应该被分解。分解后，整个测试组件看起来如下图所示：
- en: '![Introduction to the modular framework](img/1027EN_04_07.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![模块化框架简介](img/1027EN_04_07.jpg)'
- en: 'The preceding list contains the most frequently used components, but implementation
    of the framework may require having a few more or less components based on the
    automation goals and requirements. Following is the description of these components:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的列表包含了最常用的组件，但框架的实现可能需要根据自动化目标和要求拥有更多或更少的组件。以下是对这些组件的描述：
- en: '**Function library**: This is a collection of scripts that perform a particular
    task. Usually one task that allows to perform on the set of statements on AUT.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能库**：这是一个执行特定任务的脚本集合。通常是一个任务，允许在AUT的语句集上执行。'
- en: '**Test data**: This is stored in `datatable`, or an external data source provides
    the input for the tests.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试数据**：这些数据存储在`datatable`中，或者外部数据源为测试提供输入。'
- en: '**Log files**: They capture the log message that is used to see the outcome
    of the test scripts.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志文件**：它们捕获用于查看测试脚本结果的日志消息。'
- en: '**Master scripts**: These drive the flow of the test and allow coordination
    with the other components to ensure that the test runs successfully.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主脚本**：这些驱动测试流程，并允许与其他组件协调，以确保测试成功运行。'
- en: '**Error handlers**: These allow to exit the test gracefully when an error occurs,
    and reveal information about the error.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误处理器**：这些允许在发生错误时优雅地退出测试，并揭示有关错误的信息。'
- en: '**OR**: This is a part of the test that contains the test object; usually the
    OR is a shared OR.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OR**：这是包含测试对象的测试的一部分；通常OR是一个共享OR。'
- en: '**Environment**: This is a component used to provide test-level environment
    variables or values that allow configuration of the tests that have to be run
    on various environments.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境**：这是一个组件，用于提供测试级别的环境变量或值，允许配置需要在各种环境中运行的测试。'
- en: Structure
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结构
- en: After the test is decomposed, resources are required to be arranged in a structured
    way, which means there is a centralized repository for these resources. Managing
    the test requires the folder structure or test management tool (for example, Quality
    Center) to store the test resources. We need to ensure that the test component
    stays as defined by the guidelines and structure. Structure allows organizing
    the resources for achieving portability and consistency. The framework's folder
    structure is as shown in the following screenshot. The structure may vary from
    project to project but it's important for achieving consistency.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试分解后，资源需要以结构化的方式进行排列，这意味着有一个集中存储这些资源的仓库。管理测试需要文件夹结构或测试管理工具（例如，质量中心）来存储测试资源。我们需要确保测试组件符合指南和结构。结构允许组织资源以实现可移植性和一致性。框架的文件夹结构如下所示。结构可能因项目而异，但实现一致性很重要。
- en: '![Structure](img/1027EN_04_08.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![结构](img/1027EN_04_08.jpg)'
- en: Advantages
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 优点
- en: 'Structure has the following advantages:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 结构有以下优点：
- en: '**Facilitates specialization**: Structure designs the components to perform
    the specific tasks and provide abstraction from complexity.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**促进专业化**：结构化设计组件以执行特定任务，并提供从复杂性中抽象出来的功能。'
- en: '**Control over resources**: Resource structure simplifies control over resources
    because they are at centralized locations and governed by policies for accessing,
    creating, and updating the resources.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源控制**：资源结构简化了对资源的控制，因为它们位于集中位置，并受访问、创建和更新资源的策略管理。'
- en: '**Easier communication**: Resource structures clearly state the flow of information
    in a controlled way among team members. The modifications are done at a centralized
    location and utilized by all the other team members.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更易沟通**：资源结构以受控方式明确说明团队成员之间信息流的流程。修改是在集中位置进行的，并由所有其他团队成员使用。'
- en: '**Better performance**: Each component is specialized to perform its task and
    is tested thoroughly to improve the performance and reliability of the test.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更好的性能**：每个组件都专门用于执行其任务，并且经过彻底测试以提高性能和可靠性。'
- en: Tip
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Always use the relative path; do not hardcode the resource location in scripts.
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 总是使用相对路径；不要在脚本中硬编码资源位置。
- en: Design
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计
- en: 'Design is the most important aspect of frameworks. The design of a framework
    is driven by its key automation goals. The following is a comprehensive but not
    complete list of goals, where a few more goals can be added if required:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 设计是框架最重要的方面。框架的设计由其关键自动化目标驱动。以下是一个全面但不完整的列表，如果需要，可以添加更多目标：
- en: '**Maintainability**: It allows decomposing of resources and scripts; this make
    it easier to maintain and debug, and to fix the issues faster and reliably.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可维护性**：它允许分解资源和脚本；这使得维护和调试更容易，并且可以更快、更可靠地解决问题。'
- en: '**Readability**: It is a well-designed and smaller function that improves the
    readability of the script and makes it easy to understand as well as enhances
    it.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可读性**：这是一个设计良好且功能较小的函数，它提高了脚本的可读性，并使其更容易理解，同时也增强了它。'
- en: Tip
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Comments and script/function headers are important to improve the readability
    and understandability.
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注释和脚本/函数头对于提高可读性和理解性非常重要。
- en: '**Extensibility**: When small functions are created and resources are structured,
    extending the existing functionality becomes easy. This allows us to add and enhance
    functionality, debug, and test with ease faster.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：当创建小型函数并结构化资源时，扩展现有功能变得容易。这使我们能够轻松添加和增强功能、调试和测试。'
- en: '**Reusability**: Functions that allow reusability to function make the framework
    robust and reliable.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可重用性**：允许函数重用的功能使框架更加健壮和可靠。'
- en: Tip
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Before we start designing the framework, we should think of functions that can
    be used across scripts in the test to increase the reusability. Test these common
    functions thoroughly, and make sure that they have the necessary error handling
    capabilities.
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在我们开始设计框架之前，我们应该考虑可以在测试脚本中跨脚本使用的功能，以增加可重用性。彻底测试这些常用功能，并确保它们具有必要的错误处理能力。
- en: '**Concise scripts**: Make sure that scripts are short and do a single task
    at a time; these scripts should be a part of the appropriate libraries or modules.
    Ensure that the scripts are tightly cohesive and loosely coupled.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简洁的脚本**：确保脚本简短，一次执行单一任务；这些脚本应该是适当库或模块的一部分。确保脚本紧密耦合且松散耦合。'
- en: High cohesion and coupling
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 高内聚和耦合
- en: Coupling refers to that part of the code which can be reused and can be separated
    from the code but is part of it directly. Whereas cohesion is a measure of how
    closely related are all the responsibilities, data, and methods of a class/code
    to each other.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 耦合指的是代码中可以重用且可以与代码分离但直接是其一部分的部分。而内聚性是衡量一个类/代码中所有职责、数据和方法的相互关联程度。
- en: 'In particular, I would like to achieve a minimum of three specific things with
    the design and architecture of a framework:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 尤其是我想通过框架的设计和架构实现以下三个具体目标的最小化：
- en: Keep things that have to change together in the code, as close together as possible.
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将必须一起改变的代码部分尽可能放在一起。
- en: Allow unrelated things in the code to change independently (also known as orthogonality).
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许代码中不相关的事物独立改变（也称为正交性）。
- en: Orthogonality is a concept that allows combining the small components to get
    effective results. This eases the read/write programs. A more orthogonal design
    allows for fewer exceptions, symmetry, and consistency.
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正交性是一个允许将小组件组合以获得有效结果的概念。这简化了读写程序。更正交的设计允许更少的异常、对称和一致性。
- en: Minimize duplication in the code.
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小化代码中的重复。
- en: 'The goals behind achieving loose coupling between modules are:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 实现模块之间松耦合背后的目标是：
- en: Make the code easier to read
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使代码更容易阅读
- en: Make our codes easier to consume by other developers by hiding the complexity
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过隐藏复杂性使我们的代码更容易被其他开发者消费
- en: Isolate potential changes to a small area of code
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将潜在的变化隔离到代码的小区域
- en: Reuse code in completely new contexts
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在完全新的环境中重用代码
- en: Decreasing coupling and increasing cohesion
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 减少耦合，增加内聚
- en: We generally consider high cohesion to be a good thing for designing framework
    libraries like a key design considerations, but why?
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常认为高内聚性对于设计框架库如关键设计考虑因素是好事，但为什么？
- en: 'Look at the following code. We need a connection string to connect to the database,
    and the connection string and database manipulation code is tightly coupled. Alright,
    what is the issue here? Now if we want to change the DSN, we need to change the
    code for each DSN:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 看看以下代码。我们需要一个连接字符串来连接到数据库，连接字符串和数据库操作代码是紧密耦合的。好吧，这里的问题是什么？现在如果我们想更改DSN，我们需要为每个DSN更改代码：
- en: '[PRE16]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s rewrite this code to make it less coupled and highly cohesive. I have
    divided the code into two parts. The first part is a function that returns the
    DSN, and the second part uses that DSN and manipulates the database. Now if the
    user wants to access another database, the DSN will be different and the user
    just needs to change the parameter. The previous code is coupled and the following
    code is cohesive:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重写这段代码，使其耦合度更低，内聚性更高。我已经将代码分为两部分。第一部分是一个返回DSN的函数，第二部分使用该DSN并操作数据库。现在如果用户想访问另一个数据库，DSN将不同，用户只需更改参数。之前的代码是耦合的，而下面的代码是内聚的：
- en: '[PRE17]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: There is one more design consideration in the context of the QTP, that is, whether
    we should use actions or functions.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在QTP的上下文中，还有一个设计考虑因素，那就是我们是否应该使用操作或函数。
- en: 'From my personal experience, we should use functions. Actions have many advantages
    and should be preferred in implementing any framework. Functions allow us to achieve
    the goals without functional decomposition. To create the framework, the generic
    library is required; for example, Logger, Error handler, and configuration utilities
    are required to achieve the following:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 从我的个人经验来看，我们应该使用函数。操作具有许多优点，并且在实现任何框架时都应优先考虑。函数允许我们实现目标而不需要功能分解。为了创建框架，需要通用的库；例如，需要Logger、错误处理程序和配置实用程序来实现以下目标：
- en: The usability can be enhanced by dividing the entire flow into small manageable
    pieces using actions or functions.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用操作或函数将整个流程划分为小块，可以增强其可用性。
- en: 'Key steps for designing the modular framework are as follows:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 设计模块化框架的关键步骤如下：
- en: Analyze the application
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析应用程序
- en: Create the design
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建设计
- en: Create Automation Test Repository
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自动化测试库
- en: Create the test-level components
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建测试级别的组件
- en: Create the script-level functions
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建脚本级别的函数
- en: Integrate
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成
- en: Test It
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试它
- en: Analyzing the application
  id: totrans-269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分析应用程序
- en: 'Analyzing the application defines the automation goals into the defined functions
    and operations of the intended application. The key considerations for the analysis
    are:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 分析应用程序将自动化目标定义为预期应用程序定义的函数和操作。分析的关键考虑因素是：
- en: What are the key functionalities of the application and how are they related
    to each other?
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序的关键功能是什么，它们之间是如何相互关联的？
- en: What are key flows?
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键流程是什么？
- en: Which is the least used functionality? Will it contribute to ROI?
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪个功能使用最少？它会对投资回报率产生影响吗？
- en: What are the goals that we want to achieve through automation?
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们希望通过自动化实现什么目标？
- en: Creating a design
  id: totrans-275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建设计
- en: Creating a design describes the desired features and operations in detail, including
    layouts, modules, rules, verification, and interaction among modules along with
    the process diagrams, pseudo code, and other documentation.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 创建设计详细描述了所需的功能和操作，包括布局、模块、规则、验证以及模块之间的交互，以及流程图、伪代码和其他文档。
- en: 'The key to achieving modularity is by decomposing the functionality and recombining
    the modules:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 实现模块化的关键是通过对功能进行分解和重新组合模块：
- en: '**Decomposition**: The interaction of the user with the application is broken
    down into libraries, such as Functional library (login, createorder, and so on),
    Common library, OR, Test data, and environment.'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分解**：用户与应用程序的交互被分解为库，例如功能库（登录、创建订单等）、通用库、OR、测试数据和环境。'
- en: '**Recombination**: The basic elements of interaction are recombined to follow
    a formal test plan using several levels of aggregation. The steps are aggregated
    to make sequences of the basic steps, and the sequences of basic steps are combined
    to make a scenario. The scenarios are aggregated to make a test suite.'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重新组合**：交互的基本元素通过使用多个聚合级别遵循正式的测试计划进行重新组合。将步骤聚合以形成基本步骤的序列，将基本步骤的序列组合以形成场景。将场景聚合以形成测试套件。'
- en: 'After decomposition and recombination, the overall modular framework design
    will look like the following diagram:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在分解和重新组合后，整体模块化框架设计将类似于以下图表：
- en: '![Creating a design](img/1027EN_04_09.jpg)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![创建设计](img/1027EN_04_09.jpg)'
- en: Setting up an environment
  id: totrans-282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置环境
- en: 'Perform the following steps to set up the test environment:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以设置测试环境：
- en: Create the structure, which is the same as creating the infrastructure for the
    test.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建结构，这与创建测试基础设施相同。
- en: Create resources, including installation.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建资源，包括安装。
- en: Create the folder structures or resources in the Test Management tool.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在测试管理工具中创建文件夹结构或资源。
- en: Ensure version control (good practice).
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保版本控制（良好实践）。
- en: Create the configuration file.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建配置文件。
- en: Creating Object Repository
  id: totrans-289
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建对象存储库
- en: Create the OR by adding objects (Add objects to local repository or record the
    test step that automatically creates the test objects).
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加对象（将对象添加到本地存储库或记录自动创建测试对象的测试步骤）来创建OR。
- en: Creating test-level components
  id: totrans-291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建测试级别组件
- en: 'Perform the following steps to create test-level components:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以创建测试级别组件：
- en: Prepare the test data.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备测试数据。
- en: Create common functions/libraries.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建通用函数/库。
- en: Create a functional library.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建功能库。
- en: Create test flows.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建测试流程。
- en: Add common components by loading the libraries.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过加载库添加通用组件。
- en: Creating script-level functions
  id: totrans-298
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建脚本级别函数
- en: 'Perform the following steps to create script-level components:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以创建脚本级别组件：
- en: Create steps manually.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 手动创建步骤。
- en: Add the required programming logic.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加所需的编程逻辑。
- en: Call the common functions (verification points).
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用通用函数（验证点）。
- en: Call the `err` handlers.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`err`处理程序。
- en: Integrating design elements
  id: totrans-304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集成设计元素
- en: Bring all the pieces together into a testing environment, and ensure that the
    test automation is working end-to-end.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有组件组合到测试环境中，并确保测试自动化是端到端工作的。
- en: Test the framework design
  id: totrans-306
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试框架设计
- en: Finally, we can perform the test to checks for errors, bugs, and interoperability.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以执行测试以检查错误、缺陷和互操作性。
- en: Report the bugs, fix them, and retest.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 报告错误，修复它们，并重新测试。
- en: Advantages of modular frameworks
  id: totrans-309
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块化框架的优势
- en: Functional decomposition allows us to divide and conquer the complexities
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能分解使我们能够分而治之复杂性。
- en: Modularity eases designing, implementing, and debugging of the frameworks
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块化简化了框架的设计、实现和调试。
- en: Provides standard interfaces for communicating with each other and allows the
    plugging in and removal of the new modules
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供标准接口以相互通信，并允许插入和移除新模块。
- en: Challenges for modular frameworks
  id: totrans-313
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块化框架的挑战
- en: 'The key challenges for creating modular frameworks are as follows:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 创建模块化框架的关键挑战如下：
- en: Require more technical know-how and effort to create generic modules
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建通用模块需要更多的技术知识和努力
- en: For very specific modules, the cost of making interfaces is high
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于非常具体的模块，制作接口的成本很高
- en: For assemblers (integrators), it can be difficult to assess the quality and
    interaction of different modules
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于汇编器（集成者）来说，评估不同模块的质量和交互可能很困难
- en: It can be difficult to assemble (integrate) the modules
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组装（集成）模块可能很困难
- en: The design creativity of a module designer can be limited because he needs to
    conform to the interface
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块设计者的设计创造力可能受到限制，因为他需要符合接口
- en: Less variation in products because of overuse of the same modules
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于过度使用相同模块，产品变化较少
- en: Total system performance may be suboptimal
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总体系统性能可能不是最优的
- en: The keyword-driven framework
  id: totrans-322
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关键字驱动框架
- en: '**Keyword-driven** testing is also called table-driven testing or action-based
    testing. It is a software testing methodology.'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '**关键字驱动**测试也称为表驱动测试或基于动作的测试。它是一种软件测试方法。'
- en: Keyword-driven testing uses a spreadsheet to specify test cases in a specific
    format, usually in a table format. The functions are designed for each keyword.
    This keyword is stored in the column on a row of the table. For example, in the
    keyword-driven approach, each action has its corresponding function stored in
    the functional library. Driver scripts drive the entire flow, fetch the action,
    and call the corresponding function.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字驱动测试使用电子表格以特定格式指定测试用例，通常以表格形式。这些功能是为每个关键字设计的。该关键字存储在表格的行上的列中。例如，在关键字驱动方法中，每个动作都有其对应的功能存储在功能库中。驱动脚本驱动整个流程，获取动作，并调用相应的功能。
- en: The keyword-driven testing approach
  id: totrans-325
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关键字驱动测试方法
- en: The keyword-driven approach is when the interaction of a user with an application
    is abstracted in the form of actions, and data is maintained in the external source.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字驱动方法是指将用户与应用程序的交互抽象为动作的形式，并在外部源中维护数据。
- en: Decomposition
  id: totrans-327
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分解
- en: The interaction of the user with the application is broken down to the basic
    elements (login, select flight …). In the keyword-driven approach, a keyword represents
    the business scenario that performs many actions on AUT or small actions repeatedly.
    The basic elements of interaction are referred to as steps.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 用户与应用程序的交互被分解为基本元素（登录、选择航班……）。在关键字驱动方法中，一个关键字代表在AUT上执行许多动作或重复执行小动作的业务场景。交互的基本元素被称为步骤。
- en: Recombination
  id: totrans-329
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重组
- en: The basic elements of interaction are recombined to follow a formal test plan
    using several levels of aggregation. The steps are aggregated to make sequence(s)
    of the basic steps, and sequences of the basic steps are combined to make sequence
    groups.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 交互的基本元素被重新组合，以遵循正式的测试计划，使用多个聚合级别。步骤被聚合以形成基本步骤的序列（s），基本步骤的序列被组合以形成序列组。
- en: Refer to the following screenshot that shows mapping of the actions from its
    library function using driver script. The interaction of a user with an application
    is abstracted in the form of actions and data maintained in the external source.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 参考以下截图，展示了使用驱动脚本从其库函数映射动作。用户与应用程序的交互以动作和数据的形式在外部源中抽象表示。
- en: 'Separate the test cases from the scripts. The test cases are kept out of the
    scripts. These are fetched by the driver script and the `keyword` function is
    called as shown in the following screenshot:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 将测试用例与脚本分开。测试用例被保存在脚本之外。这些由驱动脚本获取，并调用`关键字`功能，如以下截图所示：
- en: '![Recombination](img/1027EN_04_10.jpg)'
  id: totrans-333
  prefs: []
  type: TYPE_IMG
  zh: '![重组](img/1027EN_04_10.jpg)'
- en: 'Once the keyword is found, the corresponding keyword library function is called
    as shown in the following screenshot:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦找到关键字，就会调用相应的关键字库函数，如以下截图所示：
- en: '![Recombination](img/1027EN_04_11.jpg)'
  id: totrans-335
  prefs: []
  type: TYPE_IMG
  zh: '![重组](img/1027EN_04_11.jpg)'
- en: Development of the keyword-driven framework requires achieving the modularity
    first; apart from that, we need the keyword function library, test cases, and
    driver script. The keyword-driven framework is a modular framework plus test cases
    stored in an external source and driver scripts with a specific functional library,
    also called the keyword library.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 开发关键字驱动框架首先需要实现模块化；除此之外，我们还需要关键字功能库、测试用例和驱动脚本。关键字驱动框架是一个模块化框架，加上存储在外部源中的测试用例和具有特定功能库的驱动脚本，也称为关键字库。
- en: Function decomposition is an important activity for designing the keyword-driven
    framework, and the decomposition guide to identify the keywords. Keywords are
    the reusable functions that perform one of the key action(s) on AUT, do a specific
    task, and complete it on their own terms. Another important aspect of the keyword-driven
    framework is test cases are separated from the test scripts.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 功能分解是设计关键字驱动框架的重要活动，分解指南用于识别关键字。关键字是可重用的函数，在AUT上执行一个或多个关键动作，执行特定任务，并按自己的方式完成。关键字驱动框架的另一个重要方面是测试用例与测试脚本分离。
- en: The keyword-driven or test-plan driven method
  id: totrans-338
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关键字驱动或测试计划驱动方法
- en: This approach leverages the advantages of functional decomposition and separates
    the execution from the scripts. The test cases are defined in the spreadsheet
    containing the keywords. Each keyword has its corresponding function library that
    performs the action on the AUT.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法利用了功能分解的优势，将执行与脚本分离。测试用例定义在包含关键字的电子表格中。每个关键字都有一个相应的函数库，该库在AUT上执行操作。
- en: In this method, the entire process is keyword driven, including the functionality.
    The keywords control the processing.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方法中，整个过程都是关键字驱动的，包括功能。关键字控制处理过程。
- en: '**Keyword-driven testing** (**KDT**) was created to simplify the creation of
    automated test cases and make them as much as manual test cases. KDT creates QTP-automated
    test scripts `On the Fly` based on information entered into a spreadsheet.'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '**关键字驱动测试**（**KDT**）是为了简化自动化测试用例的创建，并尽可能使其与手动测试用例相似而创建的。KDT根据输入到电子表格中的信息“即时”创建QTP自动化测试脚本。'
- en: Test case representation will be in rows and columns. In the test scenario spreadsheet,
    each test case will perform an action.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 测试用例表示将在行和列中。在测试场景电子表格中，每个测试用例将执行一个动作。
- en: Note
  id: totrans-343
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**注意**'
- en: In automated testing, the lowest level of granularity is the test case step.
    The step level is where each action or verification occurs.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 在自动化测试中，最低粒度是测试用例步骤。步骤级别是每个动作或验证发生的地方。
- en: As per KDT, we need to prepare data spreadsheets for each locale because the
    functionality may differ based upon the different locales. Some locales have a
    specific coverage for commercial groups, individual businesses, and so on. It
    is difficult to handle these in the test script. Test suite is prepared to specify
    which locale/locales need to be executed, and the script is made generic. The
    script is driven based on the Excel sheet, which will take Excel data from the
    locale and generate the `On the Fly` script.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 KDT，我们需要为每个区域准备数据电子表格，因为功能可能根据不同的区域而有所不同。一些区域对商业团体、单个企业等有特定的覆盖率。在测试脚本中处理这些内容很困难。测试套件准备用于指定需要执行哪些区域/区域，脚本被通用化。脚本基于电子表格驱动，该电子表格将从区域获取Excel数据并生成“即时”脚本。
- en: 'Key steps for designing the keyword-driven framework:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 设计关键字驱动框架的关键步骤：
- en: Analyze the application.
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分析应用程序。
- en: Create the design.
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建设计。
- en: Create the Automation Test Repository.
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建自动化测试存储库。
- en: Create the test-level components.
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建测试级别的组件。
- en: Create the scripts-level functions.
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建脚本级别的函数。
- en: Integrate.
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 集成。
- en: Test it.
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试它。
- en: We have already seen the key steps in creating the modular framework. The approach
    remains the same for the keyword-driven framework as well.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了创建模块化框架的关键步骤。对于关键字驱动框架，方法也是相同的。
- en: Let's find out about the automation repository in the keyword-driven approach.
    Overall, it contains data related to documents, test suite, and created test cases
    and libraries.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解关键字驱动方法中的自动化存储库。总的来说，它包含与文档、测试套件和创建的测试用例及库相关的数据。
- en: Test cases are also referred to as test scenarios or test groups, which contain
    the spreadsheet that specifies the test steps for execution.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 测试用例也被称为测试场景或测试组，其中包含指定执行测试步骤的电子表格。
- en: 'Common libraries contain the QTP library files and (`.vbs`, `.qfl`) files that
    control the entire KDT control flow, for example, driver scripts and library files
    (`.qfl`, `.vbs`). Common libraries can be viewed as:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '**常用库**包含QTP库文件和（`.vbs`，`.qfl`）文件，这些文件控制整个KDT控制流，例如，驱动脚本和库文件（`.qfl`，`.vbs`）。常用库可以被视为：'
- en: Utility functions
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**效用函数**'
- en: Navigation functions
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导航函数**'
- en: Support functions
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持函数**'
- en: '**Environment libraries** contain `.xml` and `.qfl` files that are used to
    set the environment.'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '**环境库**包含用于设置环境的`.xml`和`.qfl`文件。'
- en: '**Error libraries** contain files that are used to catch the errors during
    execution and perform the necessary actions (`.qfl` or `.vbs` file).'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '**错误库**包含用于在执行过程中捕获错误并执行必要操作的文件（`.qfl`或`.vbs`文件）。'
- en: '**Framework documents** contain all the data that is created for the framework,
    for example, enhancements to the initial framework or help files created for the
    framework.'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '**框架文档**包含为框架创建的所有数据，例如，对初始框架的增强或为框架创建的帮助文件。'
- en: '**Object Repository** contains the `.tsr` object files created using QTP.'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '**对象库**包含使用QTP创建的`.tsr`对象文件。'
- en: 'The following diagram shows how various layers and components work together
    to achieve the overall design:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了各种层和组件如何协同工作以实现整体设计：
- en: '![The keyword-driven or test-plan driven method](img/1027EN_04_12.jpg)'
  id: totrans-366
  prefs: []
  type: TYPE_IMG
  zh: '![关键字驱动或测试计划驱动方法](img/1027EN_04_12.jpg)'
- en: Generic flow in keyword-driven approach
  id: totrans-367
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关键字驱动方法中的通用流程
- en: 'The key steps and their sequence of execution in the keyword-driven approach
    are as follows:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字驱动方法中的关键步骤及其执行顺序如下：
- en: Fetch the keyword as mentioned in the spreadsheet.
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从电子表格中获取提到的关键字。
- en: Build a list of the parameters from the step that follows.
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下一步骤构建参数列表。
- en: 'Call the utility functions; the utility scripts will do the following:'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用实用函数；实用脚本将执行以下操作：
- en: Call utility scripts with the input parameter-list received from the utility
    script.
  id: totrans-372
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用从实用脚本接收的输入参数列表调用实用脚本。
- en: Call the driver script to perform specific tasks (for example, log in, select
    flight, and so on), calling user-defined functions if required.
  id: totrans-373
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用驱动脚本执行特定任务（例如，登录、选择航班等），如果需要，调用用户定义的函数。
- en: Report any errors to a test report for the test case.
  id: totrans-374
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向测试报告报告测试用例的错误。
- en: Exception handler scripts.
  id: totrans-375
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 异常处理脚本。
- en: Return to the driver script.
  id: totrans-376
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到驱动脚本。
- en: Repeat the steps from 1 to 3.
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复1到3步。
- en: Advantages of the keyword-driven approach
  id: totrans-378
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关键字驱动方法的优点
- en: The key advantages offered by the keyword-driven approach are as explained in
    the following sections.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字驱动方法提供的关键优点如下所述章节所述。
- en: Cost effectiveness
  id: totrans-380
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 成本效益
- en: The keyword-driven automation framework reduces cost and time of the test design,
    automation, and execution. Keywords are highly reusable functions that represent
    the business scenarios or actions performed on the GUI. Each of these well-designed
    and tested functions provide good return on investment over a period of time.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字驱动自动化框架降低了测试设计、自动化和执行的成本和时间。关键字是高度可重用的函数，代表在GUI上执行的业务场景或操作。这些经过良好设计和测试的函数在一段时间内提供了良好的投资回报。
- en: Separating test cases allows executing test cases without modifying the scripts.
    When the flow of the application changes, just change the test cases and not the
    scripts.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 分离测试用例允许在不修改脚本的情况下执行测试用例。当应用程序的流程发生变化时，只需更改测试用例而不是脚本。
- en: Reusability
  id: totrans-383
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可重用性
- en: Keywords, utilities, and functions are built to achieve reusability. The entire
    framework is divided into layers that are integrated with each other.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字、实用工具和函数被构建以实现可重用性。整个框架被划分为相互集成的层。
- en: Ease of maintenance
  id: totrans-385
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 易于维护
- en: The keyword-driven approach provides abstraction from the complexities and technical
    challenges; it is easy to maintain
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键字驱动方法提供了从复杂性和技术挑战中的抽象；易于维护
- en: The robustness of the keyword-driven framework allows adapting the changes in
    GUI and test flows
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键字驱动的框架的健壮性允许适应GUI和测试流程的变化
- en: Allows focusing on the development of test cases without or with minimal changes
    to the scripts, functions, and utilities
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许在不修改脚本、函数和实用工具或进行最小更改的情况下专注于测试用例的开发。
- en: Ease of execution
  id: totrans-389
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 易于执行
- en: The keyword-driven approach allows executing and creating automated test cases
    for non-technical testers, business analysts, and SMEs (Subject Matter Expert)
    to write automated tests.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字驱动方法允许非技术测试人员、业务分析师和SMEs（主题专家）执行和创建自动化测试用例。
- en: Test cases are separated from the scripts, and it is easy to prepare the test
    cases using the used keywords without knowledge of how they have been implemented.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 测试用例与脚本分离，并且使用关键字准备测试用例很容易，无需了解它们是如何实现的。
- en: Key challenges
  id: totrans-392
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关键挑战
- en: Knowledge of designing is required.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 需要设计知识。
- en: New team members have to put in efforts to understand the framework and its
    design. Good documentation and knowledge sharing is required to overcome this
    issue.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 新团队成员需要付出努力去理解框架及其设计。良好的文档和知识共享是克服这一问题的必要条件。
- en: The hybrid framework
  id: totrans-395
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混合框架
- en: The **hybrid framework** allows combining the two frameworks to leverage their
    strengths and remove their weaknesses. Most frameworks, which are developed, fall
    into this category that uses the function decomposition like modular frameworks
    and the data-driven approach.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '**混合框架**允许结合两个框架的优势，并消除它们的弱点。大多数开发出来的框架都属于这一类别，它们使用功能分解，如模块化框架和数据驱动方法。'
- en: 'Key steps in designing the hybrid framework are as follows:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 设计混合框架的关键步骤如下：
- en: Creating the folder structure.
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建文件夹结构。
- en: Creating and storing automation resources.
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建和存储自动化资源。
- en: Organizing and managing resources.
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 组织和管理资源。
- en: Integrating the frameworks.
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 集成框架。
- en: Dry run.
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 干运行。
- en: Advantages of the hybrid framework
  id: totrans-403
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混合框架的优势
- en: Hybrid framework allows leverages, and pulls the strengths of the other frameworks
    and eliminates their shortcomings, which suits the automation. Practically, most
    of the test automation solutions fall in this category.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 混合框架允许利用其他框架的优势，并消除它们的不足，这适合自动化。实际上，大多数测试自动化解决方案都属于这一类别。
- en: Key challenges
  id: totrans-405
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关键挑战
- en: Though it mitigates the weaknesses of the other approaches, it loses its generosity
    and is very specific to the test automation solution AUT, which reduces the reusability
    of its components across the multiple AUTs.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然它缓解了其他方法的弱点，但它失去了其通用性，并且非常具体于测试自动化解决方案AUT，这降低了其组件在多个AUT之间的可重用性。
- en: Business Process Testing
  id: totrans-407
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 业务流程测试
- en: '**Business Process Testing** (**BPT**) approach allows dividing the business
    processes into smaller reusable components that can used many times in the same
    or different test scripts; for example, the business process of buying a product
    is split into components such as log in, select product, add to cart, place order,
    and log out, which can be re-used in the same business process or different processes.
    The key advantage is it facilitates SMEs, Bas, and automation engineers to work
    and collaborate effectively. Some people call it a framework, but this is an approach
    rather than a framework. BPT is similar to the modular approach of creating test
    automation solutions using QTP and Quality Center.'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '**业务流程测试**（**BPT**）方法允许将业务流程划分为更小的可重用组件，这些组件可以在相同的或不同的测试脚本中使用多次；例如，购买产品的业务流程被划分为登录、选择产品、添加到购物车、下订单和登出等组件，这些组件可以在相同或不同的业务流程中重用。其关键优势是它促进了SMEs、Bas和自动化工程师的有效工作和协作。有些人称之为框架，但这更像是一种方法而不是框架。BPT类似于使用QTP和Quality
    Center创建测试自动化解决方案的模块化方法。'
- en: Application-independent framework
  id: totrans-409
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用独立框架
- en: 'The application-independent framework is a specific keyword-driven testing
    or table-driven testing. It identifies the keywords that are independent of the
    AUT, which can perform specific actions on the components of the AUT directly.
    The key difference between the keyword-driven framework and application-independent
    keyword-driven framework lies in the library. In the application-independent keyword-driven
    framework, the functional library is more generic or works directly on the generic
    components for AUT. The following is the data table:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 应用独立框架是一种特定的关键字驱动测试或表格驱动测试。它识别出独立于AUT的关键字，可以直接对AUT的组件执行特定操作。关键字驱动框架与应用独立关键字驱动框架之间的关键区别在于库。在应用独立关键字驱动框架中，功能库更为通用或直接作用于AUT的通用组件。以下为数据表：
- en: '| Window | WinObject | Action | Arguments |'
  id: totrans-411
  prefs: []
  type: TYPE_TB
  zh: '| 窗口 | WinObject | 操作 | 参数 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-412
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Calculator | button | Click | 1 |'
  id: totrans-413
  prefs: []
  type: TYPE_TB
  zh: '| 计算器 | 按钮 | 点击 | 1 |'
- en: '| Calculator | button | Click | + |'
  id: totrans-414
  prefs: []
  type: TYPE_TB
  zh: '| 计算器 | 按钮 | 点击 | + |'
- en: '| Calculator | button | Click | 3 |'
  id: totrans-415
  prefs: []
  type: TYPE_TB
  zh: '| 计算器 | 按钮 | 点击 | 3 |'
- en: '| Calculator | button | Click | = |'
  id: totrans-416
  prefs: []
  type: TYPE_TB
  zh: '| 计算器 | 按钮 | 点击 | = |'
- en: '| Calculator | Text | VerResult | 4 |'
  id: totrans-417
  prefs: []
  type: TYPE_TB
  zh: '| 计算器 | 文本 | 验证结果 | 4 |'
- en: 'The functionality of the AUT is specified in the data table. The preceding
    table allows calculating some operations on the calculator window, which is 1
    + 3 = and verify the result. The instructions are as follows:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: AUT的功能在数据表中指定。前一个表允许在计算器窗口上计算一些操作，例如1 + 3 =，并验证结果。操作说明如下：
- en: Click on the button (**1**) in the calculator window.
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在计算器窗口中点击按钮（**1**）。
- en: Click on the button (**+**) in the calculator window.
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在计算器窗口中点击按钮（**+**）。
- en: Click on the button (**3**) in the calculator window.
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在计算器窗口中点击按钮（**3**）。
- en: Click on the button (**=**) in the calculator window.
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在计算器窗口中点击按钮（**=**）。
- en: Verify the result from text in the calculator.
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证计算器中的文本结果。
- en: The action column lists the actions done with the mouse, keyboard, or specific
    functions. The data table should be mapped to generate the test step; for example,
    mouse click on the button, and the button is identified by the argument (`1`).
    The control name is given in the `WinObject` column, and the `Window` column contains
    the name of the application.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 操作列列出了使用鼠标、键盘或特定功能执行的操作。数据表应映射以生成测试步骤；例如，鼠标点击按钮，按钮通过参数（`1`）识别。控制名称在`WinObject`列中给出，而`Window`列包含应用程序的名称。
- en: 'In QTP, the Object Repository stores the test objects and provides the logical
    name |to it. We can use this logical name as a parameter to create the script;
    for example, we can store the object hierarchy in Excel with data. That is, utilizing
    the code to create the application-independent frameworks. The following diagram
    is an example of how we can achieve the application-independent implementation
    using excel and convert it into scripts. All the objects'' names are provided
    in the column; in runtime, it fetches the object information and creates the scripts
    as shown in the following diagram:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 在QTP中，对象存储库存储测试对象并提供其逻辑名称|给它。我们可以使用这个逻辑名称作为参数来创建脚本；例如，我们可以使用Excel存储对象层次结构并包含数据。也就是说，利用代码创建与应用程序无关的框架。以下图表展示了我们如何使用Excel实现应用程序无关的实现并将其转换为脚本。所有对象的名称都列在列中；在运行时，它获取对象信息并创建如图所示的脚本：
- en: '![Application-independent framework](img/1027EN_04_13.jpg)'
  id: totrans-426
  prefs: []
  type: TYPE_IMG
  zh: '![应用程序无关框架](img/1027EN_04_13.jpg)'
- en: In the preceding diagram, we can observe that the script creates the objects
    at runtime rather than the hardcoded scripts. This gives the application independence
    from the other applications.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图表中，我们可以观察到脚本在运行时创建对象，而不是硬编码的脚本。这使应用程序从其他应用程序中独立出来。
- en: Advantages of the application-independent framework
  id: totrans-428
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序无关框架的优势
- en: Application-independent keyword-driven framework inherits all the advantages
    of the keyword-driven framework, apart from the one that allows us to work on
    different applications without much changes.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序无关的关键字驱动框架继承了关键字驱动框架的所有优点，除了允许我们在不同的应用程序上工作而不需要太多更改之外。
- en: Key challenges of the application-independent framework
  id: totrans-430
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序无关框架的关键挑战
- en: Creating the application-independent framework requires more expertise to deal
    with the complexities in creating generic libraries.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 创建与应用程序无关的框架需要更多的专业知识来处理创建通用库的复杂性。
- en: The application-independent keyword-driven approach is usually designed for
    specific technologies and not for multiple technologies.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 与应用程序无关的关键字驱动方法通常是为特定技术设计的，而不是为多种技术设计的。
- en: 'The most basic framework that is provided by QTP is the replay mechanism and
    easy steps to create the test steps. These steps are put into reusable functions
    and become the functional library in the modular and keyword-driven frameworks.
    Parameterizing the step and allowing it to iterate becomes the data-driven approach.
    Refer to the following diagram that shows the steps we performed in developing
    the one framework that became the base for developing the next one, for example,
    record and replay become the base for data-driven frameworks. One framework becomes
    the base or partial base to the next framework. Refer to the following diagram
    demonstrating how they are related:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: QTP提供的最基本框架是回放机制和创建测试步骤的简单步骤。这些步骤被放入可重用函数中，成为模块化和关键字驱动框架中的功能库。参数化步骤并允许其迭代成为数据驱动方法。参考以下图表，展示了我们在开发一个框架时执行的步骤，该框架成为开发下一个框架的基础，例如，记录和回放成为数据驱动框架的基础。一个框架成为下一个框架的基础或部分基础。参考以下图表，展示它们之间的关系：
- en: '![Key challenges of the application-independent framework](img/1027EN_04_14.jpg)'
  id: totrans-434
  prefs: []
  type: TYPE_IMG
  zh: '![应用程序无关框架的关键挑战](img/1027EN_04_14.jpg)'
- en: Summary
  id: totrans-435
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter describes the various concepts and approaches to build a framework
    and its components, and a structure that allows us to keep the resources uniformly
    accessible. This helps to achieve the automation goals and lower the maintenance
    cost of the test automation suite.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 本章描述了构建框架及其组件的各种概念和方法，以及一种结构，使我们能够保持资源均匀可访问。这有助于实现自动化目标并降低测试自动化套件的维护成本。
- en: In the next chapter, we are going to discuss various ways to debug scripts,
    custom logging deployment, and maintaining the framework.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论调试脚本、自定义日志部署以及维护框架的各种方法。
