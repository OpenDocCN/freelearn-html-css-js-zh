- en: Building an Express Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Express.js is a Node.js web application framework. Express.js makes it easier
    to use Node.js and leverages its power. In this chapter, we will be creating an
    application using solely Express.js. Express.js is also a `node` package. We can
    use an application generator tool, which lets us create a skeleton of an express
    app easily, or we can simply create one ourselves from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous chapter, we learned about what `npm` is, what a package is,
    and how to install a package.  In this chapter, we will cover the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: What Node.js is and what it can do
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The benefits it adds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The basic programming of Node.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js core and custom modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to Express.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creation of an application using Express.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Routes in Express.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MVC architecture: what it is and what value it adds when implemented in an
    application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File naming conventions for the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Folder reorganization to incorporate MVC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View creation for the Express.js application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are a lot of `npm` packages out there that can let us create a skeleton
    for an Express.js application. One such package is `express-generator`. This lets
    us scaffold the whole application in seconds. It will create all the necessary
    files and folders in a modular structure. It generates the file structures in
    such a way that is very easy to understand. The only thing that we need to do is
    to define the template views and the routes.
  prefs: []
  type: TYPE_NORMAL
- en: We can modify this structure as per our needs and requirements as well. This
    is very handy when we are on a tight deadline and want to build an application
    in a day or so. The process is extremely simple.
  prefs: []
  type: TYPE_NORMAL
- en: '`express-generator` is only one of many tools that are available to create
    a scaffold or a modular structure of an express application. Each generator tool
    may have its own way of building the file structure as per their standard which
    can be easily customized.'
  prefs: []
  type: TYPE_NORMAL
- en: If you are a beginner and want to understand how the folder structure works,
    I recommend you build the application from scratch. We will be discussing this
    further in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: To get started, first we need to learn more about Node.js before diving into
    Express.js.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Node.js is a JavaScript runtime build on a JavaScript engine. It is an open
    source framework used for server-side management. Node.js is lightweight and efficient
    and runs on various platforms, such as Windows, Linux, and macOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Node.js was created by Ryan Dahl in 2009\. JavaScript used to be used mostly
    for client-side scripting, but Node.js enables JavaScript to be used on the server
    side as well. The invention of Node.js introduced the use of a single programming
    language in web applications. Node.js brings with it a lot of benefits, some of
    which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Event-driven programming**: It means changing the state of an object from
    one to another. Node.js uses event-driven programming, which means it uses a user''s
    interactive actions, such as mouse clicks, and key presses, to change the state
    of objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Non-blocking I/O**: The non-blocking I/O, or non-synchronous I/O, means an
    asynchronous I/O. A synchronous process waits until the current running process
    is completed and, hence, blocks the process. On the other hand, the asynchronous process
    does not need to wait for that process to finish, which makes it fast and reliable
    as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Single threading**: Single threading means that JavaScript runs in only a
    single event loop. Since an asynchronous process allows us to have multiple processes
    concurrently, it may seem like all these processes run in their own specific thread.
    But Node.js handles asynchronous a little differently. The event loop in Node.js
    triggers the next callback function that is scheduled for execution after the
    corresponding event has occurred.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before diving into Node.js programming, let's first look into some fundamentals
    of Node.js. Node.js runs on the JavaScript V8 engine. The JavaScript V8 engine
    was built by *The Chromium Project* for Google Chrome and Chromium web browsers.
    It is an open source project written in C++. This engine is used for both client-
    and server-side web applications with JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by running a `node` process. Open the Terminal and type this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will start a new `node` process. We can write normal JavaScript here.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, for example, we can write in the new Node shell the following JavaScript
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: It returns `1` when we type `a` and press enter.
  prefs: []
  type: TYPE_NORMAL
- en: We can also run a file with the `.js` extension in a `node` process. Let's create
    a folder called `tutorial` in the root directory with the command `mkdir tutorial`
    and create a file inside it called `tutorial.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in the Terminal, let''s go into that directory with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We should see something similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/db7d6f63-3df3-4fd9-842e-fc4f6177ef4b.png)'
  prefs: []
  type: TYPE_IMG
- en: This does not return anything because we haven't written anything for `tutorial.js`
    yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s add some code to the `tutorial.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, run the file with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We will see an output that says `Hello World`. This is how we execute files
    in Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: Other than running on the V8 engine and executing JavaScript codes in a web
    browser, Node.js also provides a server running environment. This is the most
    powerful feature of Node.js. Node.js provides an HTTP module of itself that enables
    a non-blocking HTTP implementation. Let's build a simple web server to understand
    this.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the same file, in `tutorial.js`, overwrite the file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here, the  `var http = require('http');` code requires the HTTP module into our
    application. It means that now we can access the functions defined in the HTTP
    library via the `http` variable. Now we need to create a web server. The preceding
    code tells Node.js to run the web server in the 8080 port. The `function` parameter
    in the `createServer` method takes two arguments, `req` and `res`, which are the
    short form of request and response respectively. The first thing that we need
    to do inside that function is to set the HTTP header. This is basically defining
    what type of response we want from that request. Then, we define what we want
    to get in the response by using `res.send`. Finally, we ask the web server to
    listen to port 8080.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we run this code with `$ node tutorial.js`, the output looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/154a4a5f-59e2-4837-b2c7-7962c1eb24ed.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When we type that URL in our browser, we should be able to see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d553340f-ee2f-4961-af8b-28c4b6269826.png)'
  prefs: []
  type: TYPE_IMG
- en: That's how Node.js works as a server program.
  prefs: []
  type: TYPE_NORMAL
- en: To exit the `node` console, press *Ctrl* *+* *C* twice.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Node.js module is just a plain JavaScript file that consists of reusable code.
    Every module has its own specific functionality. We can think of it as a library.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we want to segregate all our user-related activities in our
    application, we create a module for it, which will handle all the data libraries
    about the users.
  prefs: []
  type: TYPE_NORMAL
- en: The way we use a module in Node.js is via `require`. The example we just showed
    you about creating a web server is also a Node.js module.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js core modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two types of modules in Node.js. The core modules are the modules
    that are built in Node.js. They come in while we install Node.js. These are also
    called built-in modules. There are a lot of core modules in Node.js:'
  prefs: []
  type: TYPE_NORMAL
- en: Debugger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filesystem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Path
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you want to look into more details about each of the core modules, you can
    visit the documentation at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://nodejs.org/api/.](https://nodejs.org/api/)'
  prefs: []
  type: TYPE_NORMAL
- en: Custom modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These are the modules we create ourselves on top of Node.js. Since Node.js has
    a very large ecosystem, there are tons of different modules out there to grab
    for free according to our needs. We can build one ourselves or just use someone
    else's module. This is another aspect in which Node.js is powerful. It gives us
    the flexibility of using the modules from the community or we can build them by
    ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can view the list of all existing available modules at [https://www.npmjs.com/browse/depended](https://www.npmjs.com/browse/depended):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/72db803d-bbff-45a8-8283-f529bfecf3a4.png)'
  prefs: []
  type: TYPE_IMG
- en: Introducing Express.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Express.js is a minimalist server-side web framework for Node.js. It is built
    on top of Node.js to make it easy to manage the Node.js server. The most important
    strength of Express.js is that it makes the routing very, very easy. The robust
    API that it provides is very easy to configure. It is easy to receive requests
    from the frontend and easy to connect to the database. Express.js is also the
    most popular web framework for Node.js. It uses the **Model View Controller**
    (**MVC**) design pattern, which we will be discussing later on in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Express.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have already covered how to install `node` modules via `npm`. Similarly,
    we can install Express.js via NPM using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This is an easy way to install `node` modules. But, while building an application,
    we''re going to need lots of different kinds of modules. We will also want to
    share these modules across our multiple applications. Hence, to make a module
    available globally, we will have to install it globally. For that, `npm` provides
    the option of adding `-g` when installing `node` modules. So, now we can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This will install Express.js globally, which allows us to use the `express`
    command across multiple applications.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Express.js application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have installed Express.js, let's get started creating an application
    using Express.js.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will name our application `express_app`.  Building an outline of an express
    application is very simple using the `express` command. We can simply use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5ed5de2e-8500-4b09-bdeb-7eb0ee523acf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The command creates a lot of files and folders in our application. Let''s have
    a quick look at these:'
  prefs: []
  type: TYPE_NORMAL
- en: '`package.json`: This file contains a list of all the `node` packages that we
    have installed in the application and an introduction to the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app.js`: This file is the main entry page for an express application. The
    web server code resides in this file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public`: We can use this folder to insert our assets such as images, stylesheets,
    or custom JavaScript code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`views`: This folder contains all of our view files that are going to be rendered
    in the browser. It has the main layout file (which contains the basic HTML templating
    for a view file), an `index.jade` file (which extends the layout file and only
    has the content that is changeable or dynamic), and an `error.jade` file (which
    displays when we need to display some sort of error messaging to our frontend).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`routes`: This folder has a whole list of all the routes that we will be building
    access different pages of the application. We will discuss more on this in further
    sections.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bin`: This folder contains the executable files for Node.js.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, these are the basic things that we need to know. Now, use your favorite
    text editor to work on the application and let''s get started. Now, if we look
    at `package.json`, there are certain packages that we did not install but that
    are listed in the dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e44f9b6c-a3d5-47be-b601-fb8687b29f77.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is because these are the Express.js dependencies for any application.
    This means, when we create an application using the `express` command, it will
    automatically install all the dependencies that it needs. For example, the dependencies
    listed in the preceding `package.json` file do the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: '**body-parser**: This is used to parse the parameters of the body that we provide
    when making an HTTP request'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**debug**: This is a JavaScript utility package that provides pretty formatting
    to what `console.log` returns'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can install or remove packages via the `package.json` file as well. Just
    add or remove the name of the package in the `package.json` file to install or
    remove it. Then run `$ npm install`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**express**: This is a Node.js JavaScript framework and is used for building
    scalable web applications on top of Node.js.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**jade**: As mentioned previously, this is the default templating engine for
    Node.js. We should have seen a warning while creating the application with the `express`
    command, saying The default view engine will not be jade in future releases. This
    is because `jade` is going to be replaced by `pug`; `jade` was copyrighted by
    a company and the name was later changed to `pug`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The express generator uses the outdated `jade` templating engine. To change
    the templating engine, run the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `package.json` file, remove the `"jade": "~1.11.0"`, line and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to install the new `pug` templating engine, run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If we look into the `package.json` file, we should see a line similar to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`"pug": "^2.0.0-rc.4"`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Rename the files in the `views` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`error.jade` to `error.pug`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.jade` to `index.pug`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`layout.jade` to `layout.pug`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, in `app.js`, remove the line which says:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following line to use `pug` as the view engine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**morgan**: This is middleware for logging the HTTP requests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**serve-favicon**: This is for displaying a favicon in the browser to identify
    our application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's not necessary to have all these dependencies for our application. They
    come from installing Express.js. Just dig around for what you want and then add
    or remove the packages as per your application needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, we will leave it as it is. The `express` command just adds the dependencies
    to our `package.json` file and creates a skeleton for our application. In order
    to actually install these modules and packages listed in the `package.json` file,
    we need to run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This command will actually install all the dependencies. Now, if we look into
    the folder structure, we can see a new folder is being added called `node_modules`.
    This is the place where all of the packages that we installed within that application
    reside.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the first thing that we want to do is to set up a web server. For that,
    add the following line in the `app.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This will spin up our application server. Now, when we go to the `http://localhost:3000/` URL,
    we should be able to get this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e5dbd016-ed59-4dbf-8aeb-ba560d247a0b.png)'
  prefs: []
  type: TYPE_IMG
- en: That's it. We have successfully created an Express application.
  prefs: []
  type: TYPE_NORMAL
- en: Express router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s move on to the Express router. As mentioned earlier in the chapter,
    one of the most important aspects of Express.js is that it provides easy routing
    for the application. Routing is the definition of the URL for an application.
    If we look at `app.js`, we will see a section such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This means that when we access a web page, and when a request is made to the
    home page, the express router redirects it to a router called `index.` Now, look
    at `routes/index.js`, which has the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This means that when we access the home page, it renders a page called `index` that
    resides inside `views/index.pug` and passes a parameter for the `title` to be
    displayed on the page. Now, look at the `index.pug` file in the views folder,
    which has the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This means it uses the layout from the `layout.pug` file and displays an `h1`
    title as well as a paragraph that renders the title that we passed from the route
    file. Hence, the output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/79f3e138-a5bb-4c1b-81e3-bde7992002d1.png)'
  prefs: []
  type: TYPE_IMG
- en: Pretty simple and straightforward, right?
  prefs: []
  type: TYPE_NORMAL
- en: Request object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A request object is an object that contains the information about the HTTP
    request. The properties of the request are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**query: **This contains information about the parsed query strings. Accessed
    via `req.query`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**params: **This contains information about the parsed routing parameter. Accessed
    via `req.params`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**body: **This contains information about the parsed request body. Accessed
    via `req.body`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Response object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After receiving the `request` on `req` variable, the `res` object is something
    that we send back as the `response` we want.
  prefs: []
  type: TYPE_NORMAL
- en: 'The properties of the response are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**send: **This is used for sending a response to the views. Accessed via `res.send`.
    It takes two parameters, the status code, and the response body.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**status: **If we want to send the success or failure of the application, `res.status`
    is used. This is the HTTP status code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**redirect: **`res.redirect` is used when we want to redirect to a certain
    page rather than sending responses in other formats.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to MVC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MVC model is essential when building applications regardless of any programming
    languages. The MVC architecture makes it easy to organize our application's structure
    and separate out logic parts and view parts. We can incorporate this MVC structure
    at any time, even if we have completed half of our application. The best time
    to implement it is at the start of any application.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the name suggests, there are three parts to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Model: **All of the application''s business logic resides under these `models`.
    These deal with the database. They handle all the logic parts of the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View: **Everything that the browser renders—what users see—is handled by
    these view files. It deals with whatever we send to the client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Controller: **`Controllers` basically connect these `models` and views. It
    is responsible to take the logical calculations done in `models` to the `views`
    sections:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/ed9038d2-b132-4c49-abd4-ca54af97f786.png)'
  prefs: []
  type: TYPE_IMG
- en: It is not necessary to implement the MVC platform in the application we build.
    The JavaScript is pattern agnostic, which means we can create our own folder structure.
    Unlike other programming languages, we can choose whatever structure is easiest
    for us.
  prefs: []
  type: TYPE_NORMAL
- en: Why MVC?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a lot of benefits that are added when we implement an MVC architecture
    into our application:'
  prefs: []
  type: TYPE_NORMAL
- en: Clear segregation of business logic and views. This separation allows us to
    reuse the business logic throughout the whole application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The development process becomes faster. This is obvious since the parts are
    clearly separated out. We can just add our views to our views folder and add logic
    inside the `models` folder.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is easy to modify existing code. This is very handy when multiple developers
    are working on the same project. Anyone can pick up the application from anywhere
    and start making changes to it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the folder structure to incorporate MVC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know enough about MVC, let's modify the folder structure of the
    application we created, called `express_app`. First of all, we need to create
    these three folders in the root directory. There is already a views folders so
    we can skip that. Let's go ahead and create `models` and `controllers` folders.
  prefs: []
  type: TYPE_NORMAL
- en: After that, in our `app.js`, we need to include our controller files. To do
    that, we first have to introduce a new package called filesystem. This module
    makes it easy to perform operations related to files, such as reading/writing
    to the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, to add this package to our application, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This `--save` argument is used when we want a `node` module to only be installed
    within our application. Also, after installation, this package will be automatically
    included in our `package.json`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e78d5486-a74d-46e8-8cba-51a0992af1e4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we will need to require this module and use it to include all of our files
    that reside in the controller. For that, add these lines of code in our `app.js`.
    Make sure you add these lines before our web server running code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s move ahead with adding a route to our controller. Let''s create a folder
    in the root of the application called `controllers` and add an `index.js` file
    to the `controllers` folder and paste the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, all of our routes will be handled by the controller files, which means
    we don''t need the codes in `app.js` that control the routing. Hence, we can remove
    these lines from the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Actually, we don't need that `routes` folder any longer. Let's also remove the
    `routes` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, let''s add a new route that controls all the user-related operations.
    For that, add a new file to the `controllers` folder called `users.js` and paste
    the following code inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s restart our node server for the app with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'With this, when we visit `http://localhost:3000/users`, we will be able to
    see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f1e95c69-0473-449b-952c-2451add9a98e.png)'
  prefs: []
  type: TYPE_IMG
- en: We have successfully set up a `controllers` and `views` part of the MVC architecture.
    We will cover more on `models` part in further sections.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, we talked about GitHub and how to use it for making
    code history by making small commits. Don't forget to set up a repo and continuously
    push code to GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: The npm packages are stored in the `node_modules` directory, which we should
    not push to GitHub. To ignore such files, we can add a file called `.gitignore`
    and specify the files we do not want to push to GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a file within our application as well, called `.gitignore`, and
    add the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This way, when we install any packages, it will not show up as the code difference
    while making commits to GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: We are having to restart our `node` server every time we make some changes to
    our code which is very time-consuming. To ease this process, `node` provides a
    package called `nodemon`, which automatically restarts the server every time we
    make changes to the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the package, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: File naming conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When developing an application, we need to follow a certain convention to name
    the files. As we go on building the application, we will have a whole lot of files,
    which can get messy. MVC allows for having parallel naming conventions across
    different folders, which can lead to the same filenames inside different folders.
  prefs: []
  type: TYPE_NORMAL
- en: We can work on such filenames as well if that is what we find to be easy and
    maintainable. Otherwise, we can just append the type of filename to each file, as
     in the following example; for a controller file to handle the user-related activities,
    we can leave it as `controllers/users.js`, or we can rename it to `controllers/users_controller.js`.
    We will be using `controllers/users` for our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The same goes for `models`, `services`, or any other folders that need to be
    shared among different areas throughout the application. For this application,
    we will be using the following naming convention:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2ecb07df-3666-4060-b1af-b197789c09df.png)'
  prefs: []
  type: TYPE_IMG
- en: Remember, there is no official naming convention in Node.js. We can definitely
    customize the way we find simpler. We will discuss more about creating `models`
    in further chapters. That will require us to create a connection with Mongo, which
    we will describe in further chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Creating view files for the Express.js application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We learned about how to create `controllers` in the last section. In this section,
    we will talk about how to add and customize view files. If you remember, we have
    this code in `controllers/users.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s change a line that renders the `index` file to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This means that the controller wants to load the `users` file, which is in the
    `views` folder. Let's go ahead and create a `users.pug` file in the `views` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating the file, paste in the following code; this is the same code
    as in the `index.pug` file in our `views` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we used `nodemon`, we don''t have to restart our server; just reload
    the browser with the location `http://localhost:3000/users`. This should render
     the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bd386ef4-752b-4a54-9206-abf4b85a3bd4.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we know how to connect `controllers` and `views` and how to create
    view files, let's get a little bit more information on the code of the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first line says:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'What this means is that it is asking to extend the views that are already in
    the `layout.pug` file. Now, look at `layout.pug`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: This is a simple HTML file with `doctype`, `HTML`, `head`, and `body` tags.
    Inside the `body` tag, it says to block content, which means it yields the content
    from any other files that are written under this `block content` statement. If
    we look at `users.jade`, we can see that the content is written under the block
    content statement. Now, this is very useful because we don't have to repeat the
    entire HTML tags in every view file that we create.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, if we look at `users.js` inside the controller, there''s a line that
    says:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The render method has two parameters: the view that it wants to load and the
    variables that it wants to pass to that view. In this example, `Users` is passed
    to the title variable. And in `users.jade` in the `views` folder, we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'This renders that variable inside both the `h1` tag and the `p` tag. This way,
    we can pass any content that we want from `controllers` to views. Let''s add a
    new variable called `description` to the `render` method in the `users.js` controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, let''s make a place where this would be rendered in `users.pug`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'If we reload the browser, we''ll get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cbaf19b7-8457-426c-b195-65b17ac8dd2b.png)'
  prefs: []
  type: TYPE_IMG
- en: That's how we create the views for an express application. Now, go ahead and
    add views as you wish for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Always make sure that you commit and push the changes into GitHub. The smaller
    the commit, the more maintainable the code is.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned what Node.js is and what Express.js is. We learned
    how to create an application using Express.js and learned about the MVC architecture.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will talk about MongoDB and its queries. We will also
    talk about using Mongoose for fast development and Mongoose queries and validations.
  prefs: []
  type: TYPE_NORMAL
