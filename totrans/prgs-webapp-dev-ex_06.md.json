["```js\nvar myRequest = new Request(\"./api/podcast/\" + id + \".json\"); \n\nfetch(myRequest).then(function(response) { \n      if (response.status !== 200) {   \n        console.log('Status Code: ' + response.status);   \n        return;   \n      } \n    return response.json(); \n}).then(function(response) { \n    console.log(data);   \n}); \n```", "```js\n\nself.addEventListener(\"fetch\", function (event) { \n\n  event.respondWith( \n\n   var re = /img/S+/g; \n\n   if(re.test(request.url)){ \n\n       request = new Request(request.url.replace(\"img\", \"images\"), \n               { \n                  method: request.method, \n                  headers: request.headers, \n                  mode: request.mode, \n                  credentials: request.credentials \n               }); \n\n   } \n\n   return fetch(request) \n      .then(function (response) { \n         //process response  \n      }) \n  ); \n\n}); \n\n```", "```js\nvar myRequest = new Request(\"./api/podcast/\" + id + \".json\", \n                        {mode: \"cors\"}); \n\nfetch(myRequest).then(function(response) { \n      if (response.status !== 200) {   \n        console.log('Status Code: ' + response.status);   \n        return;   \n      } \n     return response.json(); \n}).then(function(response) { \n     console.log(data);   \n}); \n```", "```js\nvar myRequest = new Request(\"./api/podcast/\" + id + \".json\", \n                       { \n                          mode: \"cors\", \n                          credentials: \"include\" \n                       }); \n\nfetch(myRequest).then(function(response) { \n      if (response.status !== 200) {   \n        console.log('Status Code: ' + response.status);   \n        return;   \n      } \n     return response.json(); \n}).then(function(response) { \n     console.log(data);   \n}); \n```", "```js\nvar myRequest = new Request(\"./api/podcast/\" + id + \".json\", \n                       { \n                          mode: \"cors\", \n                          credentials: \"include\", \n                          cache: \"no-store\" \n                       }); \n\nfetch(myRequest).then(function(response) { \n      if (response.status !== 200) {   \n        console.log('Looks like there was a problem. Status Code: ' +   \n          response.status);   \n        return;   \n      } \n     return response.json(); \n}).then(function(response) { \n     console.log(data);   \n}); \n```", "```js\nvar httpHeaders = {  \n'Content-Type' : 'image/jpeg',  \n'Accept-Charset' : 'utf-8',  \n'X-My-Custom-Header' : 'custom-value'  \n}; \nvar myHeaders = new Headers(httpHeaders); \n```", "```js\nvar myHeaders = new Headers(); \nmyHeaders.append('Content-Type', 'image/jpeg'); \nmyHeaders.append('Accept-Charset', 'utf-8); \nmyHeaders.append('X-My-Custom-Header', 'custom-value'); \n```", "```js\nvar myHeaders = new Headers(); \nmyHeaders.set('Content-Type', 'image/jpeg'); \nmyHeaders.set('Accept-Charset', 'utf-8); \nmyHeaders.set('X-My-Custom-Header', 'custom-value'); \n```", "```js\nmyHeaders.append('Cache-Control', 'private'); \nmyHeaders.append('Cache-Control', 'max-age=3600'); \nmyHeaders.append('Cache-Control', 's-max-age=300'); \n```", "```js\nmyHeaders.set('Cache-Control', 'private, max-age=3600, s-max-age=300'); \n```", "```js\nVar cacheHeader = myHeaders.get('Cache-Control'); \n    //returns 'private, max-age=3600, s-max-age=300' \n```", "```js\n// Display the key/value pairs \nfor (var header of myHeaders.entries()) { \n   console.log(header[0]+ ': '+ header[1]); \n} \n```", "```js\n// Display the keys \nfor(var key of myHeaders.keys()) { \n   console.log(key);  \n} \n```", "```js\n// Display the values \nfor (var value of myHeaders.values()) { \n   console.log(value);  \n} \n```", "```js\nmyHeaders.has(name); \n```", "```js\nmyHeaders.delete(name); \n```", "```js\n    function fetchSearch(term) { \n\n        fetch(\"api/search.json?term=\" + term) \n            .then(function (response) { \n\n                if (response.status !== 200) {      \n                    console.log('Status Code: ' + response.status); \n                    return;     \n                }    \n\n                return response.json(); \n\n            }).then(function (results) { \n                renderResults(results); \n            }) \n            .catch(function (err) { \n                console.log('No CORS Fetch Error :-S', err); \n            }); \n    } \n\n```", "```js\nfetch(\"api/simple.txt\") \n    .then(function (response) { \n\n        if (response.status !== 200) {      \n         console.log('Status Code: ' + response.status);      \n         return;     \n        }    \n\n        return response.text(); \n\n    }) \n    .then(function(result){ \n        renderResult(result); \n    }) \n    .catch(function (err) { \n        console.log('Fetch Error :-S', err); \n    }); \n\n```", "```js\n        source = audioCtx.createBufferSource(); \n\n        fetch('./viper.ogg') \n            .then(function (response) { \n                return response.arrayBuffer(); \n            }) \n            .then(function (buffer) { \n                audioCtx.decodeAudioData(buffer, function (decodedData) { \n                    source.buffer = decodedData; \n                    source.connect(audioCtx.destination); \n                }); \n            }); \n\n```", "```js\n\nfetch(\"/api/contact/, { \n    method: 'post', \n    headers: { \n        'Accept': 'application/json, text/plain, */*', \n        'Content-Type': 'application/json; charset=UTF-8' \n    }, \n    body: JSON.stringify(serializeForm()) \n}).then(function (res) { \n\n    if (res.status >= 200 && res.status < 400) { \n        // Success! \n   return res.json(); \n\n    } else { \n  console.log('Status Code: ' + response.status);      \n     return; \n    } \n}).then(function (resp) { \n    //process the response \n}); \n\n```", "```js\n var form = document.querySelector(\"[name=contact-form]\"); \n\nfetch(\"/api/contact/, { \n    method: 'post', \n    body: new FormData(form) \n}).then(function (res) { \n\n    if (res.status >= 200 && res.status < 400) { \n        // Success! \n   return res.json(); \n    } else { \n  console.log('Status Code: ' + response.status);      \n     return; \n    } \n}).then(function (resp) { \n    //process the response \n}); \n```", "```js\nfetch(request) \n     .then(function (response) { \n\n         var rsp = response.clone(); \n\n         //cache response for the next time around \n         return caches.open(cacheName).then(function (cache) { \n             cache.put(request, rsp); \n             return response; \n         }); \n\n     }) \n```", "```js\ncaches.open(cacheName).then(function (cache) { \n//do something here \n}); \n```", "```js\nreturn caches.match(request) \n    .then(function (response) { \n   return response; \n    }) \n```", "```js\ncaches.has(cacheName).then(function(ret) { \n  // true: your cache exists! \n}); \n```", "```js\nCached.delete(cacheName).then((ret)=>{ console.log(cacheName + \" deleted: \" + res}); \n```", "```js\n    caches.keys().then(function (cacheNames) { \n      cacheNames.forEach(function (value) { \n        if (value.indexOf(version) < 0) { \n          caches.delete(value); \n        } \n      }); \n      return; \n    }) \n```", "```js\nreturn namedCache.match(request).then(function (response) { \n   return response; \n    }); \n```", "```js\ncaches.open(\"podcasts\").then(function(cache) { \n  cache.matchAll('/images/').then(function(response) { \n    response.forEach(function(element, index, array) { \n         //do something with each response/image \n    }); \n  }); \n}); \n```", "```js\n    const precache_urls = [...] \n\n    caches.open(preCacheName).then(function (cache) { \n      return cache.addAll(precache_urls); \n    }) \n```", "```js\nfetch(request).then(function (response) { \n   var rsp = response.clone(); \n   //cache response for the next time around \n   return caches.open(cacheName).then(function (cache) { \n       cache.put(request, rsp); \n       return response; \n   }); \n}); \n```", "```js\ncache.delete(request,{options}).then(function(true) { \n  //your cache entry has been deleted \n}); \n```", "```js\ncaches.open(cacheName).then(function(cache) { \n  cache.keys().then(function(keys) { \n    keys.forEach(function(request) { \n      fetchAndUpdateCache(cacheName, request); \n    }); \n  }); \n}) \n```"]