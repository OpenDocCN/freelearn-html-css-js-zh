["```js\nGET http://www.example.com/users\n```", "```js\nGET http://www.example.com/users/{user_id}\n```", "```js\nPOST http://www.example.com/users/\n```", "```js\nPUT http://www.example.com/users/\n```", "```js\nDELETE http://www.example.com/users/{user_id}\n```", "```js\nvar express = require('express');\nvar path = require('path');\nvar favicon = require('serve-favicon');\nvar logger = require('morgan');\nvar cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');\nvar fs = require('file-system');\nvar mongoose = require('mongoose');\n\nvar app = express();\nvar mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost:27017/tutorial2', {\n  useMongoClient: true\n});\nvar db = mongoose.connection;\ndb.on(\"error\", console.error.bind(console, \"connection error\"));\ndb.once(\"open\", function(callback){\n  console.log(\"Connection Succeeded\");\n});\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'pug');\n\n// uncomment after placing our favicon in /public\n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\n// Include controllers\nfs.readdirSync(\"controllers\").forEach(function (file) {\n  if(file.substr(-3) == \".js\") {\n    const route = require(\"./controllers/\" + file)\n    route.controller(app)\n  }\n})\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  var err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handler\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});\n\nmodule.exports = app;\n\napp.listen(3000, function() {\n  console.log('listening on 3000')\n})\n```", "```js\nconst mongoose = require(\"mongoose\")\nconst Schema = mongoose.Schema\nconst UserSchema = new Schema({\n name: String,\n email: String\n})\n\nconst User = mongoose.model(\"User\", UserSchema)\nmodule.exports = User\n```", "```js\nmodule.exports.controller = (app) => {\n  // get homepage\n  app.get('/users', (req, res) => {\n    res.render('index', { title: 'Users' });\n  })\n}\n```", "```js\nvar User = require(\"../models/User\");\n\nmodule.exports.controller = (app) => {\n  // get all users\n  app.get('/users', (req, res) => {\n    User.find({}, 'name email', function (error, users) {\n      if (error) { console.log(error); }\n      res.send(users);\n    })\n  })\n}\n```", "```js\nvar User = require(\"../models/User\");\n\nmodule.exports.controller = (app) => {\n  // get all users\n  app.get('/users', (req, res) => {\n    User.find({}, 'name email', function (error, users) {\n      if (error) { console.log(error); }\n       res.send({\n        users: users\n      })\n    })\n  })\n\n  //get a single user details\n app.get('/users/:id', (req, res) => {\n User.findById(req.params.id, 'name email', function (error, user) {\n if (error) { console.log(error); }\n res.send(user)\n })\n })\n}\n```", "```js\n// add a new user\n  app.post('/users', (req, res) => {\n    const user = new User({\n      name: req.body.name,\n      email: req.body.email\n    })\n\n    user.save(function (error, user) {\n      if (error) { console.log(error); }\n      res.send(user)\n    })\n  })\n```", "```js\n{\n \"name\": \"Dave\",\n \"email\": \"dave@mongo.com\"\n}\n```", "```js\n// update a user\n  app.put('/users/:id', (req, res) => {\n    User.findById(req.params.id, 'name email', function (error, user) {\n      if (error) { console.error(error); }\n\n      user.name = req.body.name\n      user.email = req.body.email\n      user.save(function (error, user) {\n        if (error) { console.log(error); }\n        res.send(user)\n      })\n    })\n  })\n```", "```js\n// delete a user\n  app.delete('/users/:id', (req, res) => {\n    User.remove({\n      _id: req.params.id\n    }, function(error, user){\n      if (error) { console.error(error); }\n      res.send({ success: true })\n    })\n  })\n```"]