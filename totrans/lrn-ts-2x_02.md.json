["```js\nlet myVariable1 = 3;\n```", "```js\nlet myVariable2 = \"Hello\";\n```", "```js\nlet myVariable3 = {\n  name: \"Remo\",\n  surname: \"Jansen\",\n  age: 29\n};\n```", "```js\n{ name: string; surname: string; age: number; }\n```", "```js\nfunction add(a, b) {\n  return a + b;\n}\n```", "```js\n(a: any, b: any) => any;\n```", "```js\nfunction add(a, b) {\n  return a + b;\n}\n```", "```js\n(a: any, b: any) => any;\n```", "```js\nlet result1 = add(2, 3); // 5\n```", "```js\nlet result2 = add(\"2\", 3); // \"23\"\n```", "```js\nfunction add(a: number, b: number): number {\n  return a + b;\n}\n```", "```js\nlet myVariable: string = \"Hello\";\n```", "```js\nlet result1 = add(2, 3); // OK\nlet result2 = add(\"2\", 3); // Error\n```", "```js\ninterface Person {\n  name: string; \n  surname: string; \n} \n\nfunction getFullName(person: Person) { \n  return `${person.name} ${person.surname}`; \n} \n\nclass Employer { \n  constructor( \n    public name: string, \n    public surname: string \n  ) {} \n} \n\ngetFullName(new Employer(\"remo\", \"jansen\")); // OK \n\nconst p1 = { name: \"remo\", surname: \"jansen\" }; \ngetFullName(p1); // OK \n\nconst p2 = { name: \"remo\", familyName: \"jansen\" }; \ngetFullName(p2); // Error\n```", "```js\ninterface Person {\n  name: string;\n  surname: string;\n}\n\nfunction getFullName(person: Person) {\n  return `${person.name} ${person.surname}`;\n}\n\nclass Employer implements Person { // Named!\n  constructor(\n    public name: string,\n    public surname: string\n  ) {}\n}\n\ngetFullName(new Employer(\"remo\", \"jansen\")); // OK\n\nconst p1: Person = { name: \"remo\", surname: \"jansen\" }; // Named!\ngetFullName(p1); // OK\n\nconst p2: Person = { name: \"remo\", familyName: \"jansen\" }; // Error\ngetFullName(p2); // OK\n```", "```js\nlet path: string[]|string;\npath = \"/temp/log.xml\";\npath = [\"/temp/log.xml\", \"/temp/errors.xml\"];\npath = 1; // Error\n```", "```js\ninterface Supplier {\n\n    orderItems(): void; \n    getAddress(): void; \n} \n\ninterface Customer { \n    sellItems(): void; \n    getAddress(): void; \n} \n\ndeclare let person: Supplier | Customer; \nperson.getAddress(); // OK \nperson.orderItems(); // Error \nperson.sellItems();  // Error\n```", "```js\ntype PrimitiveArray = Array<string|number|boolean>; \ntype MyNumber = number;  \ntype Callback = () => void\n```", "```js\ninterface A { a: string } \ninterface B { b: string } \ninterface C { c: string } \ndeclare let abc: A & B & C; \nabc.a = \"hello\"; // OK \nabc.b = \"hello\"; // OK \nabc.c = \"hello\"; // OK \nabc.d = \"hello\"; // Error \n\n```", "```js\ninterface X { x: A }\ninterface Y { x: B }\ninterface Z { x: C }\ndeclare let xyz: X & Y & Z;\nxyz.x.a = \"hello\"; // OK\nxyz.x.b = \"hello\"; // OK\nxyz.x.c = \"hello\"; // OK\nxyz.x.d = \"hello\"; // Error\n\n```", "```js\ntype F1 = (x: string) => string;\ntype F2 = (x: number) => number;\ndeclare let f: F1 & F2;\nlet s = f(\"hello\"); // OK\nlet n = f(42); // OK\nlet t = f(true); // Error\n```", "```js\ninterface Supplier {\n    orderItems(): void;\n    getAddress(): void;\n}\n\ninterface Customer {\n    sellItems(): void;\n    getAddress(): void;\n}\n\ndeclare let person: Supplier & Customer;\nperson.getAddress(); // OK\nperson.orderItems(); // OK\nperson.sellItems();  // OK\n```", "```js\nlet name: string;\nname = \"Remo\"; // OK\nname = null; // OK\nname = undefined; // OK\n```", "```js\nlet age: number;\nage = 28; // OK\nage = null; // OK\nage = undefined; // OK\n\nlet person: { name: string, age: number};\nperson = { name: \"Remo\", age: 28 }; // OK\nperson = { name: null, age: null }; // OK\nperson = { name: undefined, age: undefined }; // OK\nperson = null;       // OK\nperson = undefined;  // OK\n```", "```js\nlet name: string;\nname = \"Remo\"; // OK\nname = null; // Error\nname = undefined; // Error\n```", "```js\nlet age: number;\nage = 28; // OK\nage = null; // Error\nage = undefined; // Error\n\nlet person: { name: string, age: number};\nperson = { name: \"Remo\", age: 28 }; // OK\nperson = { name: null, age: null }; // Error\nperson = { name: undefined, age: undefined }; // Error\nperson = null; // Error\nperson = undefined; // Error\n```", "```js\ntsc -strictNullChecks file.ts\n```", "```js\ntype NullableNumber = number | null;\n```", "```js\nlet myNumber = 5;\nconsole.log(typeof myNumber === \"number\");\n```", "```js\nlet myNumber = 5;\ntype NumberType = typeof myNumber;\n```", "```js\nlet x: any = { /* ... */ };\nif(typeof x === 'string') {\nconsole.log(x.splice(3, 1)); // Error, 'splice' does not exist\n  on 'string'\n}\n// x is still any\nx.foo(); // OK\n```", "```js\ninterface Supplier {\n    orderItems(): void;\n    getAddress(): void;\n}\n\ninterface Customer {\n    sellItems(): void;\n    getAddress(): void;\n}\n\nfunction isSupplier(person: Supplier | Customer): person is Supplier {\n    return (<Supplier> person).orderItems !== undefined;\n}\n\nfunction handleItems(person: Supplier | Customer) {\n    if (isSupplier(person)) {\n        person.orderItems(); // OK\n    } else {\n        person.sellItems(); // OK\n    }\n}\n```", "```js\nclass Supplier {\n    public orderItems(): void {\n        // do something...\n    }\n    public getAddress(): void {\n        // do something...\n    }\n}\n\nclass Customer {\n    public sellItems(): void {\n        // do something...\n    }\n    public getAddress(): void {\n        // do something...\n    }\n}\n\nfunction isSupplier(person: Supplier | Customer): person is Supplier {\n    return person instanceof Supplier;\n}\n\nfunction handleItems(person: Supplier | Customer) {\n    if (isSupplier(person)) {\n        person.orderItems(); // OK\n    } else {\n        person.sellItems(); // OK\n    }\n}\n```", "```js\nfunction doSomething(x: number | string) {\n    if (typeof x === 'string') {\n        console.log(x.subtr(1)); // Error\n        console.log(x.substr(1)); // OK\n    }\n    x.substr(1); // Error\n}\n```", "```js\ninterface Cat {\n    meow(): void;\n}\n\ninterface Dog {\n    woof(): void;\n}\n\nfunction doSomething(obj: Cat | Dog) {\n    if (\"meow\" in obj) {\n        obj.meow(); // OK\n    } else {\n        obj.woof(); // OK\n    }\n}\n```", "```js\nfunction increment(\n  incrementBy: number, value: number | number[]\n) {\n  if (Array.isArray(value)) {\n    // value must be an array of number\n    return value.map(value => value + incrementBy);\n  } else {\n    // value is a number\n    return value + incrementBy;\n  }\n}\n\nincrement(2, 2); // 4\nincrement(2, [2, 4, 6]); // [4, 6, 8]\n```", "```js\nlet five = 5; // number\nlet falsy = false; // boolean\nlet shape = \"rectangle\"; // string\n```", "```js\nconst five = 5; // 5\nconst falsy = false; // false\nconst shape = \"rectangle\"; // rectangle\n```", "```js\ntype ShapeKind = \"square\" | \"rectangle\" | \"circle\";\n```", "```js\ninterface Cube {\n    kind: \"cube\";\n    size: number;\n}\n\ninterface Pyramid {\n    kind: \"pyramid\";\n    width: number;\n    length: number;\n    height: number;\n}\n\ninterface Sphere {\n    kind: \"sphere\";\n    radius: number;\n}\n```", "```js\ntype Shape = Cube | Pyramid | Sphere;\n\nfunction volume(shape: Shape) {\n    const PI = Math.PI;\n    switch (shape.kind) {\n        case \"cube\":\n            return shape.size ** 3;\n        case \"pyramid\":\n            return (shape.width * shape.height * shape.length) / 3;\n        case \"sphere\":\n            return (4 / 3) * PI * (shape.radius ** 3);\n    }\n}\n```", "```js\nfunction error(message: string): never {\n    throw new Error(message);\n}\n\n// Type () => never\nconst sing = function() {\n    while (true) {\n        console.log(\"I will never return!\");\n    }\n};\n```", "```js\nfunction area(shape: Shape) {\n    const PI = Math.PI;\n    switch (shape.kind) {\n        case \"square\": return shape.size * shape.size;\n        case \"rectangle\": return shape.width * shape.height;\n        case \"circle\": return PI * shape.radius * shape.radius;\n        default:\n            return shape; // never\n    }\n}\n```", "```js\nenum CardinalDirection {\n    Up,\n    Down,\n    Left,\n    Right\n}\n```", "```js\ntype CardinalDirection =\n    \"North\"\n    | \"East\"\n    | \"South\"\n    | \"West\";\n\nfunction move(distance: number, direction: CardinalDirection) {\n    // ...\n}\n\nmove(1,\"North\"); // Okay\nmove(1,\"Nurth\"); // Error!\n```", "```js\nenum CardinalDirection {\n    Red = \"North\",\n    Green = \"East\",\n    Blue = \"South\",\n    West = \"West\"\n}\n```", "```js\nlet person = { name: \"Remo\", age: 28 };\n```", "```js\ninterface User {\n    name: string;\n    age: number;\n}\n\nlet person: User = { name: \"Remo\", age: 28 }; // OK\n```", "```js\ninterface User {\n    name: string;\n    age?: number;\n}\n\nlet person1: User = { name: \"Remo\", age: 28 }; // OK\nlet person2: User = { name: \"Remo\" }; // OK\n```", "```js\ninterface User {\n    name?: string;\n    age?: number;\n}\n```", "```js\nlet user1: User  = { name: \"Remo\", age: 28 }; // OK\nlet user2: User = { firstName: \"Remo\", yearBorn: 28 }; // Error\n```", "```js\ninterface User {\n    name: string;\n    age: number;\n}\n\ntype userKeys = keyof User; // \"name\" | \"age\"\n```", "```js\nlet person = { name: \"Remo\", age: \"28\" };\n\ninterface User {\n    name: string;\n    age: number;\n}\n\ntype userKeys = keyof typeof person; // \"name\" | \"age\"\n```", "```js\nlet foo: any = {};\nfoo.hello = 'World';\nconsole.log(foo.hello); // World\n```", "```js\nlet foo: any = {};\nfoo['hello'] = 'World';\nconsole.log(foo['hello']); // World\n```", "```js\ninterface StringArray {\n    [index: number]: string;\n}\n\nlet myArray: StringArray = [\"Bob\", \"Fred\"];\nlet myStr: string = myArray[0];\n```", "```js\ninterface Person {\n    name: string;\n    age: number;\n}\n\nfunction makePerson(name: string, age: number): Person {\n\n    // Local type\n    class Person implements Person {\n        constructor(\n            public name: string,\n            public age: number\n        ) {}\n    }\n\n    return new Person(name, age);\n\n}\n\nlet user = makePerson(\"Remo\", 28);\n```", "```js\nvar myObject: TypeA;\nvar otherObject: any;\nmyObject = <TypeA> otherObject; // Using <>\nmyObject = otherObject as TypeA; // Using as keyword\n```", "```js\nfunction deserialize<T>(json: string): T {\n    return JSON.parse(json) as T;\n}\n\ninterface User {\n    name: string;\n    age: number;\n}\n\nlet user = deserialize<User>(`{\"name\":\"Remo\",\"age\":28}`);\n\ninterface Rectangle {\n    width: number;\n    height: number;\n}\n\nlet rectangle = deserialize<Rectangle>(`{\"width\":5,\"height\":8}`);\n```", "```js\ninterface Comparable<T> {\n    equals(value: T): boolean;\n}\n\nfunction isEqual<TVal, T extends Comparable<TVal>>(comparable: T, value: TVal) {\n    return comparable.equals(value);\n}\n```", "```js\ninterface RectangleInterface {\n    width: number;\n    height: number;\n}\n\ntype ComparableRectangle = RectangleInterface & Comparable<RectangleInterface>;\n\nclass Rectangle implements ComparableRectangle {\n    public width: number;\n    public height: number;\n    public constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n    }\n    public equals(value: Rectangle) {\n        return value.width === this.width && value.height === this.height;\n    }\n};\n\ninterface CircleInterface {\n    radious: number;\n}\n\ntype ComparableCircle = CircleInterface & Comparable<CircleInterface>;\n\nclass Circle implements ComparableCircle {\n    public radious: number;\n    public constructor(radious: number) {\n        this.radious = radious\n    }\n    public equals(value: CircleInterface): boolean {\n        return value.radious === this.radious;\n    }\n}\n\nconst circle = new Circle(5);\nconst rectangle = new Rectangle(5, 8);\n\nisEqual<RectangleInterface, ComparableRectangle>(rectangle, { width: 5, height: 8 });\nisEqual<CircleInterface, ComparableCircle>(circle, { radius: 5 });\n```", "```js\ntype Keyify<T> = {\n    [P in keyof T]: P;\n};\n```", "```js\nfunction getKeys<T>(obj: T): Keyify<T> {\n    const keysArr = Object.keys(obj);\n    const stringifyObj = keysArr.reduce((p, c, i, a) => {\n        return {\n            ...p,\n            [c]: c\n        };\n    }, {});\n    return stringifyObj as Keyify<T>;\n}\n\ninterface User {\n    name: string;\n    age: number;\n}\n\nlet user: User = { name: \"Remo\", age: 28 };\nlet keys = getKeys<User>(user);\n\nkeys.name; // \"name\"\nkeys.age; // \"age\"\n\nTypeScript declares some commonly used mapped types for us:\n// Make all properties in T optional\ntype Partial<T> = {\n    [P in keyof T]?: T[P];\n};\n\n// Make all properties in T readonly\ntype Readonly<T> = {\n    readonly [P in keyof T]: T[P];\n};\n\n// From T pick a set of properties K\ntype Pick<T, K extends keyof T> = {\n    [P in K]: T[P];\n}\n\n// Construct a type with a set of properties K of type T\ntype Record<K extends string, T> = {\n    [P in K]: T;\n}\n```", "```js\nfunction filterByProperty<T, K extends keyof T>(\n    property: K, entities: T[], value: T[K]\n) {\n    return entities.filter(e => e[property] === value);\n}\n```", "```js\ninterface User {\n    surname: string;\n    age: number;\n}\n\nconst users = [\n    { surname: \"Smith\", age: 28 },\n    { surname: \"Johnson\", age: 55 },\n    { surname: \"Williams\", age: 14 }\n];\n\nfilterByProperty<User, \"age\">(\"age\", users, 21);\nfilterByProperty<User, \"surname\">(\"surname\", users, \"Smith\");\n```", "```js\ntype ReadonlyAndPartial1<T> = {\n    readonly [P in keyof T]?: T[P]\n}\n```", "```js\ntype ReadonlyAndPartial2<T> = {\n    +readonly [P in keyof T]+?: T[P];\n}\n```", "```js\ntype Mutable<T> = {\n    -readonly [P in keyof T]: T[P]\n}\n```", "```js\ninterface Foo {\n    readonly abc: number;\n    def?: string;\n}\n\ntype TotallyMutableFoo = Mutable<Foo>\n```", "```js\ntype Required<T> = {\n    [P in keyof T]-?: T[P];\n}\n```", "```js\ninterface Animal {\n    live(): void;\n}\ninterface Dog extends Animal {\n    woof(): void;\n}\n```", "```js\ntype Foo1 = Dog extends Animal ? number : string; // number\ntype Bar1 = RegExp extends Dog ? number : string; // string\n```", "```js\ntype Flatten<T> = T extends any[] ? T[number] : T;\n\ntype arr1 = number[];\ntype flattenArr1 = Flatten<arr1>; // number\n\ntype arr2 = number[][];\ntype flattenArr2 = Flatten<arr2>; // number[]\n```", "```js\ntype TypedFlatten<T> = T extends Array<infer U> ? U : T;\n```", "```js\ntype ReturnType<T extends (...args: any[]) => any> = T extends (...args: any[]) => infer R ? R : any;\n\ntype func1 = () => number;\ntype returnOfFunc1 = ReturnType<func1>; // number\n```", "```js\n// Exclude from T those types that are assignable to U\ntype Exclude<T, U> = T extends U ? never : T;\n\n// Extract from T those types that are assignable to U\ntype Extract<T, U> = T extends U ? T : never;\n\n// string[] | number[]\ntype Foo2 = Extract<boolean | string[] | number[], any[]>;\n\n// boolean\ntype Bar2 = Exclude<boolean | string[] | number[], any[]>;\n\n// Exclude null and undefined from T\ntype NonNullable<T> = T extends null | undefined ? never : T;\n\n//  Obtain the return type of a function type\ntype ReturnType<T extends (...args: any[]) => any> = T extends (...args: any[]) => infer R ? R : any;\n\n// Obtain the return type of a constructor function type\ntype InstanceType<T extends new (...args: any[]) => any> = T extends new (...args: any[]) => infer R ? R : any;\n```", "```js\ninterface Person {\n    name?: string;\n    surname?: string;\n    age?: number;\n}\n\nclass PersonBuilder<T extends Person> {\n    protected _details: T;\n    public constructor() {\n        this._details = {} as T;\n    }\n    public currentValue(): T {\n        return this._details;\n    }\n    public withName(name: string): this {\n        this._details.name = name;\n        return this;\n    }\n    public withSurname(surname: string): this {\n        this._details.surname = surname;\n        return this;\n    }\n    public withAge(age: number): this {\n        this._details.age = age;\n        return this;\n    }\n}\n```", "```js\nlet value1 = new PersonBuilder()\n            .withName(\"name\")\n            .withSurname(\"surname\")\n            .withAge(28)\n            .currentValue();\n```", "```js\ninterface Employee extends Person {\n    email: string;\n    department: string;\n}\n\nclass EmployeeBuilder extends PersonBuilder<Employee> {\n    public withEmail(email: string) {\n        this._details.email = email;\n        return this;\n    }\n    public withDepartment(department: string) {\n        this._details.department = department;\n        return this;\n    }\n}\n\nlet value2 = new EmployeeBuilder()\n    .withName(\"name\")\n    .withSurname(\"surname\")\n    .withAge(28)\n    .withEmail(\"name.surname@company.com\")\n    .withDepartment(\"engineering\")\n    .currentValue();\n```", "```js\ncustomConsole.log(\"A log entry!\");  // error\n```", "```js\n// Cannot find name 'customConsole'\n```", "```js\nconsole.log(\"Log Entry!\");\nconst host = window.location.hostname;\n```", "```js\ninterface ICustomConsole {\n    log(arg: string) : void;\n}\ndeclare var customConsole : ICustomConsole;\n```", "```js\ncustomConsole.log(\"A log entry!\"); // ok\n```"]