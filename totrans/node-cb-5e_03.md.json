["```js\n    $ mkdir learning-streams\n    $ cd learning-streams\n    ```", "```js\n    $ touch write-stream.js\n    $ touch read-stream.js\n    ```", "```js\n    const fs = require('node:fs');\n    ```", "```js\n    const file = fs.createWriteStream('./file.txt');\n    ```", "```js\n    const fs = require('node:fs');\n    const file = fs.createWriteStream('./file.txt');\n    for (let i = 0; i <= 100000; i++) {\n      file.write(\n        'Node.js is a JavaScript runtime built on Google\n        Chrome\\'s V8 JavaScript engine.\\n'\n      );\n    }\n    ```", "```js\n    $ node write-stream.js\n    ```", "```js\n    $ ls -lh file.txt\n    -rw-r--r--  1 bgriggs  staff   7.5M  8 Nov 16:30 file.txt\n    ```", "```js\n    const fs = require('node:fs');\n    ```", "```js\n    const rs = fs.createReadStream('./file.txt');\n    ```", "```js\n    rs.on('data', (data) => {\n      console.log('Read chunk:', data);\n    });\n    ```", "```js\n    rs.on('end', () => {\n      console.log('No more data.');\n    });\n    ```", "```js\n    $ node read-stream.js\n    ```", "```js\n    rs.on('data', (data) => {\n      console.log('Read chunk:', data.toString());\n    });\n    ```", "```js\n    $ node read-stream.js\n    ```", "```js\nRead chunk: <Buffer 20 62 75 69 6c 74 20 6f 6e 20 47 6f 6f 67 6c 65 20 43 68 72 6f 6d 65 27 73 20 56 38 20 4a 61 76 61 53 63 72 69 70 74 20 65 6e 67 69 6e 65 2e 0a 4e 6f ... 29149 more bytes>\n```", "```js\n    $ touch infinite-read.js\n    ```", "```js\n    const fs = require('node:fs');\n    const rs = fs.createReadStream('/dev/urandom');\n    let size = 0;\n    rs.on('data', (data) => {\n      size += data.length;\n      console.log('File size:', size);\n    });\n    ```", "```js\n    $ node infinite-read.js\n    ```", "```js\n    $ touch for-await-read-stream.js\n    ```", "```js\n    const fs = require('node:fs');\n    const rs = fs.createReadStream('./file.txt');\n    async function run () {\n      for await (const chunk of rs) {\n        console.log('Read chunk:', chunk.toString());\n      }\n      console.log('No more data.');\n    }\n    run();\n    ```", "```js\n    $ node for-await-read-stream.js\n    ```", "```js\n    $ touch async-generator.js\n    ```", "```js\n    const { Readable } = require('node:stream');\n    ```", "```js\n    async function * generate () {\n      yield 'Node.js';\n      yield 'is';\n      yield 'a';\n      yield 'JavaScript';\n      yield 'Runtime';\n    }\n    ```", "```js\n    const readable = Readable.from(generate());\n    ```", "```js\n    readable.on('data', (chunk) => {\n      console.log(chunk);\n    });\n    ```", "```js\n    $ node async-generator.js\n    ```", "```js\n    Node.js\n    is\n    a\n    JavaScript\n    Runtime\n    ```", "```js\n$ touch paused-stream.js\n```", "```js\n    const fs = require('node:fs');\n    ```", "```js\n    const rs = fs.createReadStream('./file.txt');\n    ```", "```js\n    rs.on('readable', () => {\n      // Read data\n    });\n    ```", "```js\n      // Read data\n      let data = rs.read();\n      while (data !== null) {\n        console.log('Read chunk:', data.toString());\n        data = rs.read();\n      }\n    ```", "```js\n    rs.on('end', () => {\n      console.log('No more data.');\n    });\n    ```", "```js\n    $ node paused-stream.js\n    ```", "```js\n    $ mkdir piping-streams\n    $ cd piping-streams\n    ```", "```js\n    $ touch file.txt\n    ```", "```js\n    Node.js is a JavaScript runtime built on Google Chrome's V8 JavaScript engine.\n    Node.js is a JavaScript runtime built on Google Chrome's V8 JavaScript engine.\n    Node.js is a JavaScript runtime built on Google Chrome's V8 JavaScript engine.\n    ```", "```js\n    $ touch pipe-stream.js\n    ```", "```js\n    const fs = require('node:fs');\n    ```", "```js\n    const rs = fs.createReadStream('file.txt');\n    ```", "```js\n    rs.pipe(process.stdout);\n    ```", "```js\n    $ node pipe-stream.js\n    ```", "```js\n    Node.js is a JavaScript runtime built on Google Chrome's V8 JavaScript engine.\n    Node.js is a JavaScript runtime built on Google Chrome's V8 JavaScript engine.\n    Node.js is a JavaScript runtime built on Google Chrome's V8 JavaScript engine.\n    ```", "```js\nsourceStream.pipe(destinationStream, {end: false});\n```", "```js\nconst fs = require('node:fs');\nconst zlib = require('node:zlib');\nconst readStream = fs.createReadStream('input.txt');\nconst writeStream = fs.createWriteStream('output.txt.gz');\n// Chain the streams: read -> compress -> write\nreadStream.pipe(zlib.createGzip()).pipe(writeStream);\n```", "```js\n    $ mkdir transform-streams\n    $ cd transform-streams\n    ```", "```js\n    $ touch transform-stream.js\n    ```", "```js\n    $ touch file.txt\n    ```", "```js\n    Node.js is a JavaScript runtime built on Google Chrome's V8 JavaScript engine.\n    Node.js is a JavaScript runtime built on Google Chrome's V8 JavaScript engine.\n    Node.js is a JavaScript runtime built on Google Chrome's V8 JavaScript engine.\n    ```", "```js\n    const fs = require('node:fs');\n    ```", "```js\n    const { Transform } = require('node:stream');\n    ```", "```js\n    const rs = fs.createReadStream('./file.txt');\n    ```", "```js\n    const newFile = fs.createWriteStream('./newFile.txt');\n    ```", "```js\n    const uppercase = new Transform({\n      transform (chunk, encoding, callback) {\n        // Data processing\n      }\n    });\n    ```", "```js\n        callback(null, chunk.toString().toUpperCase());\n    ```", "```js\n    rs.pipe(uppercase).pipe(newFile);\n    ```", "```js\n    $ node transform-stream.js\n    ```", "```js\n    $ cat newFile.txt\n    NODE.JS IS A JAVASCRIPT RUNTIME BUILT ON GOOGLE CHROME'S V8 JAVASCRIPT ENGINE.\n    NODE.JS IS A JAVASCRIPT RUNTIME BUILT ON GOOGLE CHROME'S V8 JAVASCRIPT ENGINE.\n    NODE.JS IS A JAVASCRIPT RUNTIME BUILT ON GOOGLE CHROME'S V8 JAVASCRIPT ENGINE.\n    ```", "```js\n    $ touch transform-stream-es6.js\n    ```", "```js\n    const fs = require('node:fs');\n    const { Transform } = require('node:stream');\n    const rs = fs.createReadStream('./file.txt');\n    const newFile = fs.createWriteStream('./newFile.txt');\n    class Uppercase extends Transform {\n      _transform (chunk, encoding, callback) {\n        this.push(chunk.toString().toUpperCase());\n        callback();\n      }\n    }\n    rs.pipe(new Uppercase()).pipe(newFile);\n    ```", "```js\n    $ mkdir object-streams\n    $ cd object-streams\n    $ npm init --yes\n    $ touch object-stream.js\n    ```", "```js\n    $ npm install ndjson\n    ```", "```js\n    const { Transform } = require('node:stream');\n    ```", "```js\n    const { stringify } = require('ndjson');\n    ```", "```js\n    const Name = Transform({\n      objectMode: true,\n      transform: ({ forename, surname }, encoding,\n        callback) => {\n          callback(null, { name: forename + ' ' + surname\n        });\n      }\n    });\n    ```", "```js\n    Name.pipe(stringify()).pipe(process.stdout);\n    ```", "```js\n    Name.write({ forename: 'John', surname: 'Doe' });\n    Name.write({ forename: 'Jane', surname: 'Doe' });\n    ```", "```js\n    $ node object-stream.js\n    ```", "```js\n    {\"name\":\"John Doe\"}\n    {\"name\":\"Jane Doe\"}\n    ```", "```js\nconst fs = require('node:fs');\nconst rs = fs.createReadStream('./file.txt');\nconst newFile = fs.createWriteStream('./newFile.txt');\nrs.map((chunk) =>\n  chunk.toString().toUpperCase()).pipe(newFile);\n```", "```js\nconst { Readable } = require('node:stream');\nasync function* generate() {\n    yield 'Java';\n    yield 'JavaScript';\n    yield 'Rust';\n}\n// Filter the stream for words with 5 or more characters\nReadable.from(generate()).filter((word) => word.length >=\n  5).pipe(process.stdout);\n```", "```js\n    $ mkdir stream-pipelines\n    $ cd stream-pipelines\n    ```", "```js\n    $ touch pipeline.js\n    ```", "```js\n    $ touch file.txt\n    ```", "```js\n    Node.js is a JavaScript runtime built on Google Chrome's V8 JavaScript engine.\n    Node.js is a JavaScript runtime built on Google Chrome's V8 JavaScript engine.\n    Node.js is a JavaScript runtime built on Google Chrome's V8 JavaScript engine.\n    ```", "```js\n    const fs = require('node:fs');\n    ```", "```js\n    const { pipeline, Transform } = require('node:stream');\n    ```", "```js\n    const uppercase = new Transform({\n      transform (chunk, encoding, callback) {\n        // Data processing\n        callback(null, chunk.toString().toUpperCase());\n      }\n    });\n    ```", "```js\n    pipeline();\n    ```", "```js\n    pipeline(\n      fs.createReadStream('./file.txt')\n    );\n    ```", "```js\n    pipeline(\n      fs.createReadStream('./file.txt'),\n      uppercase,\n    );\n    ```", "```js\n    pipeline(\n      fs.createReadStream('./file.txt'),\n      uppercase,\n      fs.createWriteStream('./newFile.txt'),\n    );\n    ```", "```js\n    pipeline(\n      fs.createReadStream('./file.txt'),\n      uppercase,\n      fs.createWriteStream('./newFile.txt'),\n      (err) => {\n        if (err) {\n          console.error('Pipeline failed.', err);\n        } else {\n          console.log('Pipeline succeeded.');\n        }\n      }\n    );\n    ```", "```js\n    $ node pipeline.js\n    Pipeline succeeded.\n    ```", "```js\n    $ cat newFile.txt\n    NODE.JS IS A JAVASCRIPT RUNTIME BUILT ON GOOGLE CHROME'S V8 JAVASCRIPT ENGINE.\n    NODE.JS IS A JAVASCRIPT RUNTIME BUILT ON GOOGLE CHROME'S V8 JAVASCRIPT ENGINE.\n    NODE.JS IS A JAVASCRIPT RUNTIME BUILT ON GOOGLE CHROME'S V8 JAVASCRIPT ENGINE.\n    ```", "```js\n    $ touch promise-pipeline.js\n    ```", "```js\n    const fs = require('node:fs');\n    const { Transform } = require('node:stream');\n    const { pipeline } = require('node:stream/promises');\n    ```", "```js\n    const uppercase = new Transform({\n      transform(chunk, encoding, callback) {\n        // Data processing\n        callback(null, chunk.toString().toUpperCase());\n      },\n    });\n    ```", "```js\n    async function run() {\n      await pipeline(\n        fs.createReadStream('./file.txt'),\n        uppercase,\n        fs.createWriteStream('./newFile.txt')\n      );\n      console.log('Pipeline succeeded.');\n    }\n    ```", "```js\n    run().catch((err) => {\n      console.error('Pipeline failed.', err);\n    });\n    ```", "```js\n    $ node promise-pipeline.js\n    Pipeline Succeeded.\n    ```"]