- en: Chapter 3. Going Command Line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For our third project, we are going to change it up a bit from our reliance
    on Sencha Designer. In this chapter, we will explore the uses of Sencha's free
    command-line tool called **Sencha Cmd**. Using this new toolset, we can quickly
    generate the basic skeleton of a new application, create controllers and models,
    and compile our application into a native application for iOS and Android.
  prefs: []
  type: TYPE_NORMAL
- en: The application for this chapter is a simple time tracker for scheduling break
    times. We call it **TimeCop**.
  prefs: []
  type: TYPE_NORMAL
- en: The TimeCop application lets the user set an alert for a certain amount of time
    in the future (say 15 minutes for break time). Once the time is set, the start
    button is pressed, and an alert will appear after the appropriate delay. The simplicity
    of this application will allow us to focus on some of the details and issues involved
    in using Sencha Cmd and creating a compiled application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic application using Sencha Cmd
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Features of Sencha Cmd
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a developer account for iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provisioning an application for iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the correct file configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding native notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The basic application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The TimeCop application is designed as a simple way to track when your break
    or lunch time is over. The application consists of four main buttons labeled **5**,
    **10**, **30**, and **60**. Clicking on any of these buttons will cause a fifth
    button to appear in the center. This button will display the amount of time the
    user selected and serves as a start button. The user can add differing amounts
    of allotted time by clicking the four outer buttons multiple times.
  prefs: []
  type: TYPE_NORMAL
- en: '![The basic application](img/8901OS_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For example, clicking on the **5** button twice will place 10 minutes on our
    allotted time in the center button. Clicking the **5** button once and then clicking
    the **10** button once will place **15** minutes on our allotted time. Once the
    desired amount of time is reached, the user clicks the center button and the countdown
    begins. When the countdown ends, the user is alerted via a device notification.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Sencha Cmd
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sencha Cmd is a separate download from our Sencha Touch code and can be found
    at: [http://www.sencha.com/products/sencha-cmd/download](http://www.sencha.com/products/sencha-cmd/download).
    The download is available for Windows, OSX, and Linux (32 and 64 bit). When you
    unzip the downloaded file, you can double-click on it to install Sencha Cmd.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this book we are using Sencha Cmd Version 3 (at least 3.0.0.250 is required).
    Detailed installation instructions can be found at: [http://docs.sencha.com/ext-js/4-1/#!/guide/command](http://docs.sencha.com/ext-js/4-1/#!/guide/command).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have installed Sencha Cmd, you can open up the command line on your
    computer as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: On Mac OSX, go to **Applications** and launch **Terminal**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On Windows, go to **Start** | **Run** and type `cmd`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'From here you will need to change to the directory where your Sencha Touch
    files are installed (not the Sencha Cmd files we just downloaded, but your original
    Sencha Touch 2.1 files):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have changed directories, type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something like the following screenshot in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Sencha Cmd](img/8901OS_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This text gives you a quick overview of the commands available and the version
    of Sencha Cmd you are currently running (this should be Version 3.0.0.250 or higher).
  prefs: []
  type: TYPE_NORMAL
- en: Advantages of Sencha Cmd
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the big advantages of Sencha Cmd is that, unlike Designer, it is provided
    free of charge. Sencha Cmd can also handle a lot of our repetitive coding for
    us. For example, you can generate a complete application skeleton by executing
    the following command from your Sencha Touch 2.1 directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This will create a new application called `MyApp` in the directory specified.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also create models from the command line using something like this
    in your new application directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This will create a complete model for a user with the five specified fields,
    and will make sure that the `id` field is an integer.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**A note about Sencha Cmd and directories**'
  prefs: []
  type: TYPE_NORMAL
- en: When generating the skeleton for an application, you will need to be in the
    Sencha Touch 2.1 directory. Once the application is generated, you will need to
    change to the new application directory to execute commands for generating models
    and controllers, or for building and compiling the application.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use the `build` command to automatically optimize your application
    for production. This includes resolving dependencies so that your application
    only includes the code it actually needs. Additionally, the `build` command sets
    up HTML5 application caching, minimizes all the JavaScript and CSS, as well as
    other speed and caching enhancements.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at how this works by generating our TimeCop application.
  prefs: []
  type: TYPE_NORMAL
- en: Generating the application skeleton
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We start with the `create` command in our previous example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You will also need to make sure that you adjust the output path to suit your
    development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As we noted previously, this command should be executed from your Sencha Touch
    2.1 directory in order to work correctly. You can also specify the Sencha Touch
    directory by using the `-sdk` option like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create the following files and directory structure in the `timecop`
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating the application skeleton](img/8901OS_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you look at the `index.html` file, you will see that it already sets up
    the basic application and includes the following JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This is the autoloader, which will automatically include the rest of the JavaScript
    we need. It also includes a loading indication in CSS. This will fire off while
    the application loads, to alert the user that things are happening behind the
    scenes. You shouldn't need to touch the `index.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `app.js` file has a few more interesting pieces included:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `Ext.Loader.setPath` function at the top will point to our `touch` directory
    where all of our base Sencha Touch 2 library files are located.
  prefs: []
  type: TYPE_NORMAL
- en: The next section sets up the name of our application, our required components,
    our views, our icons, and the startup screens.
  prefs: []
  type: TYPE_NORMAL
- en: The `launch` section removes our loading indicator and then adds our `TimeCop.view.Main`
    to the viewport.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you navigate to the folder in Safari and look at the application, you will
    see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating the application skeleton](img/8901OS_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Most of the actual display code for this application is contained in the `TimeCop.view.Main`
    file. This is the file we will modify to create our actual application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the TimeCop layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The layout for this application consists of a vbox layout on our main container.
    Inside the main container is a set of three containers, each with an hbox layout
    and containing three additional containers. This gives us a flexible 3 x 3 grid
    where we can place our components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the TimeCop layout](img/8901OS_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Inside of containers **1**, **3**, **7**, and **8** we need buttons with our
    four time increments. In container **5** we will place our start button. By using
    the `vbox` and `hbox` layouts as described later in this section we can keep our
    components centered regardless of the screen size.
  prefs: []
  type: TYPE_NORMAL
- en: The containers for our buttons can be given a fixed width (in this case we choose
    `120`). The empty containers in the row are then given a `flex` value of `1`.
    This will cause them to take up the rest of the available space and maintain an
    even spacing between our buttons regardless of screen size.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, our first row is laid out like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You will notice that each of our buttons has an `xtype` type of `incrementButton`,
    but different values for text (`5` and `10`). We will come back to that in just
    a moment, but we need to take a look at our second row first.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second `hbox` container row is a variation on the first row; a single fixed-width
    container in the center and a variable-width (`flex:1`) container on either side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Our `startButton` in the center starts out hidden by default and it will only
    appear when the `incrementButtons` are tapped. We set `ui` to `roundStart`, which
    we will use later on to style the button, and we set the `text` value of the button
    to `0` (we will use this value later in our `incrementButton` functions). We also
    add a listener for our `startButton` instance's tap event.
  prefs: []
  type: TYPE_NORMAL
- en: Our third row is simply a copy of our first row, with the button values set
    to `30` and `60` respectively. Both of these buttons will have `xtype:incrementButton`
    as in the first row.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the theme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The base layout we currently have will give us a bunch of large, ugly, square
    buttons. We want something a bit cooler than that, so we are going to set a new
    theme for the application. Sencha Touch Themes use SASS and Compass to customize
    the user interface in a number of interesting ways.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information on creating Sencha Touch themes, review the documentation
    and tutorial videos at: [http://docs.sencha.com/touch/2-0/#!/guide/theming](http://docs.sencha.com/touch/2-0/#!/guide/theming).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step in our theme is adding a `ui` configuration for our buttons.
    The four time increment buttons will have `ui: ''round''` added to their configuration
    options. This will give us a more pleasing circular button.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The center button will have `ui: ''roundStart''` added to its configuration
    options. We will make `ui` inherit all of our qualities from our original round
    ui and add some color changes to give us a green start button.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can then add the following code to `app.scss`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The key pieces of this are `-webkit-border-radius: 60px` (half of our button
    width/height), which makes the buttons circular, and `background: -webkit-gradient`,
    which creates the gradient background of the buttons.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We do something similar with our start button, but we make the text white and
    the background green:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Running `compass compile` will regenerate the `app.css` file with our new styles
    in it. Now that we have the basic look and feel of our application, we need to
    talk about using the native APIs in a Sencha Touch application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the increment button
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since each of our increment buttons will do much the same thing, this becomes
    an excellent opportunity to create a button class.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this we will make a separate file on our view folder called `incrementButton.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This code extends the standard `Ext.Button` class and sets defaults for `itemID`,
    `text`, and `ui` (we will use `ui` later on to style the buttons). We also add
    a tap listener for when the user presses the button.
  prefs: []
  type: TYPE_NORMAL
- en: 'When our time increment button is tapped, we need to add the appropriate time
    to our start button in the center and display it (if it is hidden). We will do
    this by adding the following to our tap handler function after the `Config` section
    in our previous code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This code grabs the text from our current button, which is `5`, and then grabs
    the start button. We then add the values from the two buttons together and set
    this as the text on our start button. Since this function is now a part of the
    base `incrementButton`, each of our four buttons with an `xtype` of `incrementButton`
    will be able to use this same function. The only thing that will change is the
    text value of the button. This allows you to easily choose other time increments
    if you desire.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the buttons works like this: when the user first starts the application,
    the start button is hidden and has a text value of **0**. The user taps the **5**
    button and the start button appears, 5 is added to 0 and the start button''s text
    is set to **5**. The user then taps the **10** button, causing the start button
    text to be increased to **15** and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the start button
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our start button uses a separate function to begin the timer countdown. In
    this case, we will add a listener to our main view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This will fire a function called `onStartButtonTap`. We add this new function
    after the `Config` section of our `Main.js` file. This is the function that starts
    the countdown for the timer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This function grabs the text of the buttons, which is now set for the total
    amount of time we want to set on our timer. We then create a `setTimeout` function
    that will display a message box after the timer finishes. For the purposes of
    testing, we have set the delay for delay *1000, which will actually give us our
    delay time in seconds instead of minutes. When we want to set the delay to minutes,
    the last line can be changed to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: For testing purposes let's leave the code as is for now and test the functions.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the start button](img/8901OS_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see from our example, the alert appears once the delay time expires.
    However this doesn't currently use any of the native alerts available on the device.
    In order to do this, we need to take a look at `Ext.device`.
  prefs: []
  type: TYPE_NORMAL
- en: Using native APIs with Ext.device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, a Sencha Touch application is web-based. This means that a user
    on Android or iOS will use a web browser to access your application. You can add
    the web page to the desktop and it will look and behave very much like a compiled
    application. However, there are a number of features available on a mobile device
    that cannot be accessed through a web-based application; these include things
    like the camera, the device orientation, connection monitoring, native alerts,
    and some native geolocation features.
  prefs: []
  type: TYPE_NORMAL
- en: Sencha Touch offers a way around this issue by using `Ext.device`. This component
    accepts JavaScript commands, which will then be translated into native functions
    when the application is compiled.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It should be noted that one essential consideration when using `Ext.device`
    is that the application has to be compiled each time in order to actually test
    the native application features. If you make changes, or need to do debugging,
    you will have to recompile the application and reinstall it on your mobile device.
  prefs: []
  type: TYPE_NORMAL
- en: '`Ext.device` offers the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Connection**: This allows you to check if the user is online using `Ext.device.Connection.isOnline()`.
    You can also check the type of connection using `Ext.device.Connection.getType()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Notification**: This allows you to access native notification windows and
    the vibrate device option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Orientation**: This provides the current orientation of the device tracked
    in three dimensions (alpha, beta, and gamma). These dimensions return values between
    0 and 360 and can be used to calculate various device movements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Camera**: This lets your application take pictures or select existing images
    from the camera library (with your user''s permission).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For TimeCop, we will use a simple notification/vibrate alert. In later chapters,
    we will cover the other `Ext.Device` components. First, though, we will need to
    take a bit of a detour and explore some of the additional steps we need to take
    to test and run compiled applications under iOS.
  prefs: []
  type: TYPE_NORMAL
- en: Testing and running native applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to run a native (compiled) application on iOS, you will need to take
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Register as an Apple iOS developer (cost is $99 annually as of this writing).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable your device for development.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provision the application with Apple and create a P12 certificate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the application on your device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This process is not always intuitive, and can often seem more laborious than
    coding the actual application. If you would prefer to create an Android application,
    we will discuss building native Android applications later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Registering as a developer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to publish your application to the Apple Store, or even to simply test
    compiled iOS applications, you are going to have to sign up for a developer account.
    There is a fee to become a developer (the cost is $99 annually as of this writing),
    and Apple will require quite a bit of information about you. They require this
    information for several reasons. First, they have to know who you are so that
    you can get paid for apps that you sell in their store. Second, they need to know
    how to contact you if there's a problem with your application. And last, they
    need to be able to track you down if you try to do something evil with your app.
    Not that you would, of course.
  prefs: []
  type: TYPE_NORMAL
- en: Even if you are not yet ready to distribute your application, you will still
    need to register as a developer in order to install a compiled application on
    your iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: Your iOS device will also need to be registered for development with Apple.
    This will allow you to install and test your own personal compiled applications
    directly from your development computer instead of going through the Apple store.
  prefs: []
  type: TYPE_NORMAL
- en: Becoming an Apple developer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To become an Apple developer, first you must go to: [http://developer.apple.com/programs/register/](http://developer.apple.com/programs/register/).'
  prefs: []
  type: TYPE_NORMAL
- en: You will either need to supply your existing Apple ID or sign up for a new one,
    fill out some lengthy profile information, agree to some legal documents, and
    then perform an e-mail verification. From there you will have access to the Apple
    Developer center. The two points of most interest to us as mobile developers are
    the iOS Dev Center and the iOS Provisioning Portal.
  prefs: []
  type: TYPE_NORMAL
- en: The **iOS Dev Center** is where you can download the iOS SDK (known as Xcode),
    as well as read documentation, see sample code and tutorials, and view some videos
    on iOS development.
  prefs: []
  type: TYPE_NORMAL
- en: The **iOS Provisioning Portal** is where you add your application to the Apple
    store or publish test versions of your application.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that in order to use Xcode, install a development certificate, or publish
    your application to the Apple store, you must have a computer running OSX. Windows
    and Linux computers cannot run Xcode or publish to the Apple store.
  prefs: []
  type: TYPE_NORMAL
- en: The provisioning portal is the main area we are concerned with.
  prefs: []
  type: TYPE_NORMAL
- en: Provisioning an application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to run a compiled Sencha Touch application that you're developing for
    iPhone, iPad, or iPod touch, you must have a provisioning profile and a development
    certificate installed on your device and your Mac. (This is only true for compiled
    applications and not standard Sencha web applications.)
  prefs: []
  type: TYPE_NORMAL
- en: While the provisioning process can seem a bit complex, Apple has a very nice
    set of "How To…" videos listed on the right side of the provisioning portal, as
    well as a handy **Provisioning Assistant** setup wizard. The **Provisioning Assistant**
    wizard will guide you through the steps to create and install your development
    provisioning profile and iOS development certificate.
  prefs: []
  type: TYPE_NORMAL
- en: The first step in the process is to obtain a development certificate. The **development
    certificate** is an electronic document that links you as an Apple developer with
    your compiled applications. For testing purposes, the certificate gets loaded
    onto your iOS device and it lets the device know that it's okay to run your application.
  prefs: []
  type: TYPE_NORMAL
- en: The provisioning profile is used when your application is compiled. It contains
    a separate set of development certificates, a device ID, and an app ID. This is
    checked against the original development certificate to authorize the application
    to run on your device.
  prefs: []
  type: TYPE_NORMAL
- en: Meanwhile back in the code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have our certificates properly set up, we can get back to the business
    of writing code.
  prefs: []
  type: TYPE_NORMAL
- en: Using the native notifications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use the native notifications we need to replace our original `onStartButtonTap`
    function with a new function that uses `Ext.device`. Aside from that, the code
    for native notifications looks almost the same as our previous code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We still wrap the function in a `setTimeout` statement. We then call `Ext.device.Notification.vibrate`
    and `Ext.device.Notification.show`. This will cause the device to vibrate (if
    the device supports it) and then show our original message as before.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, `Ext.device` is not loaded by default, so we need to add it to our `app.js`
    file, in the `requires` configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Debugging problems with `Ext.device` is a difficult proposition. The `Ext.device`
    functionality is not available in desktop browsers, or when your app hasn''t been
    compiled. However, if you need to debug an app running on your mobile device,
    there are some third-party solutions out there, one of the best being **weinre**,
    which stands for **WEb INspector REmote**. You can learn more about weinre at:
    [http://people.apache.org/~pmuellr/weinre/docs/latest/](http://people.apache.org/~pmuellr/weinre/docs/latest/).'
  prefs: []
  type: TYPE_NORMAL
- en: For now, though, we need to compile the application for a native iPhone using
    Sencha Cmd.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to compile an application you will need a few things from Apple first:'
  prefs: []
  type: TYPE_NORMAL
- en: A developer certificate in P12 format (for a walkthrough on this process go
    to [http://docs.sencha.com/touch/2-0/#!/guide/native_provisioning](http://docs.sencha.com/touch/2-0/#!/guide/native_provisioning))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A provisioning profile (from Apple Provisioning Profile, launch the Development
    Provisioning Assistant: [https://developer.apple.com/ios/manage/overview/index.action](http://%20https://developer.apple.com/ios/manage/overview/index.action))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You will also need to know the application name, application ID, and bundle
    seed ID for your application. This information can be found by clicking on **configure**
    next to the application name in the **App ID** section of the portal. The format
    looks like this mockup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Compiling the application](img/8901OS_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once we have this information and the files, we need to set up our `packager.json`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up packager.json
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `packager.json` file is in the root directory of our application folder
    and it is a template originally generated for us by Sencha Cmd. We need to change
    some of the default information in order to compile the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `packager.json` file has extensive comments, so we will just take a look
    at some of the more critical settings in the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`"applicationName":"TimeCop"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"applicationId":"com.example.TimeCop"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"bundleSeedId":"D3THNXJT69"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is where we use the values from our previous example mockup. You will need
    to change these to reflect your own application information.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that we are using example information for our `applicationID` and
    `bundleSeedId` values. You will need to change these values to the ones you get
    from Apple.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next important section is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We can leave these as is for right now, but they control how the application
    is outputted and what devices it works on. The `Configuration` type should always
    be `Debug` until you are ready to distribute the application through the app store.
    This will help you track down any code errors that you might have.
  prefs: []
  type: TYPE_NORMAL
- en: 'The platform options are:'
  prefs: []
  type: TYPE_NORMAL
- en: iOSSimulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AndroidEmulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `iOSSimmulator` or `AndroidEmulator` options allows you to test locally
    on your machine without an iOS or Android device. You will need to have Xcode
    and/or the Android SDK kit installed on your machine to use this option.
  prefs: []
  type: TYPE_NORMAL
- en: '`deviceType` is an iOS-only option that declares the application as `iPhone`,
    `iPad`, or `Universal` (meaning both).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The last critical pieces of information are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Both `certificatePath` and `provisionProfile` should correspond to the correct
    paths to the converted P12 certificate mentioned earlier and the provisioning
    profile you downloaded from Apple.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have the information in place, we are ready to compile the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the command line, change to your application directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'And then type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This should compile your application into an executable file and launch the
    iOS simulator.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `-run` option is new in Sencha Cmd Version 3\. Previous versions would launch
    the simulator by default. You can drop the `-run` option if you only want to build
    the application.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up packager.json](img/8901OS_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This looks more like a native iPhone app should, and if the application is run
    on an iPhone, the phone will also vibrate when the notification occurs.
  prefs: []
  type: TYPE_NORMAL
- en: The compiled application should now be in the `build/native` folder in your
    application directory. You can drag it onto iTunes to install it on your device.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Installing a native application**'
  prefs: []
  type: TYPE_NORMAL
- en: If your application fails to install, it is often helpful to try installing
    under Xcode. Connect your device and drop the application file on top of the Xcode
    application. This will launch Xcode and attempt to install the application on
    your mobile device. Xcode often gives back better error information than iTunes
    does.
  prefs: []
  type: TYPE_NORMAL
- en: Building native Android applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Building compiled applications in Android follows a similar pattern as the
    one we used for iOS:'
  prefs: []
  type: TYPE_NORMAL
- en: We create an Android signing certificate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We create a package configuration file for Sencha Cmd to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We run the Sencha Cmd packager to create an `application.apk` file, which will
    run on Android devices or the Android emulator for testing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The nice part is that we can still use the exact same code, all we need is a
    new certificate and some configuration changes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Android signing certificate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Generating the Android signing certificate is significantly less complex than
    its iOS counterpart. All of our keys can be generated on our local machine and
    there is no provisioning process for Android applications.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we need to do is download the Android SDK from [http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html).
    Once the ZIP file is downloaded, we need to extract it and save it in an appropriate
    location. For this example, we have chosen our home directory in a folder called
    `development`. When we create our configuration files, your file path information
    may vary depending on where you place the SDK.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Android certificate is generated from the command line using the following
    command (all on one line):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The important parts of this command are the `keystore` name, `time-cop.keystore`,
    and the `alias`, which is `timecop`. We will need to have these values in order
    to correctly set up our configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: When you execute this command, you will be prompted to create a password for
    the keystore. You will then be walked through a series of questions about your
    organization and location (these are optional, but probably a good idea).
  prefs: []
  type: TYPE_NORMAL
- en: Once you have answered all of the questions, a file will be generated called
    `time-cop.keystore` (or whatever you named your keystore).
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Android configuration file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As with our previous iOS configuration file, we create a JSON file called `packager_android.json`.
    The format for this file will follow the same format as our previous iOS file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '`applicationName` will be the name of the `.apk` file that is created when
    we compile, which in this case, is `TimeCop.apk`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`applicationId` is a unique identifier for your application, we recommend using
    something like `com.your_name.your_application_name`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`outputPath` is where the `.apk` file will be saved and `iconName` is the file
    that will be used as the icon for your application. `versionCode` and `versionString`
    are up to you and should be used to differentiate which version of the software
    is being used.'
  prefs: []
  type: TYPE_NORMAL
- en: '`inputPath` is the full path to your TimeCop files (or a path relative to this
    configuration file).'
  prefs: []
  type: TYPE_NORMAL
- en: '`configuration` can be set to `Release` or `Debug` and `platform` can be set
    to `Android` or `AndroidEmulator`. These settings will typically be `Debug` +
    `AndroidEmulator` for testing and `Release` + `Android` for a finished application.'
  prefs: []
  type: TYPE_NORMAL
- en: '`certificatePath` is the location of the `keystore` file that we generated
    in the previous section and `certificateAlias` is the alias we supplied as part
    of our command-line arguments when we created `keystore`.'
  prefs: []
  type: TYPE_NORMAL
- en: The orientations are the viewing positions available to your application. They
    will typically stay as the defaults listed before. The device type is ignored
    by Android, but the configuration manager will return errors if the configuration
    or value is left off. You can keep this value set as `<Not applicable for Android>`
    and it will be safely ignored.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling and launching the Android application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just like the previous iOS application, we will use the Sencha package command
    to compile the application. However, if you are testing in the Android emulator,
    you will need to start the emulator before issuing the command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the emulator is running, enter the following command on the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This will execute our `packagerAndroid.json` file we created in the previous
    section.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are creating a release version of the application, set `configuration`
    to `Release` and `platform` to `Android` in your `packager_android.json` configuration
    file. You can then execute the `package` command, but leave off the `run` command
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This will compile the application without running it in the emulator.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Android emulator is capable of emulating a wide variety of hardware. For
    more information on the Android emulator, go to [http://developer.android.com/tools/devices/emulator.html](http://developer.android.com/tools/devices/emulator.html).
  prefs: []
  type: TYPE_NORMAL
- en: For information on setting up different hardware profiles (sometimes called
    **Android Virtual Devices** (**ADVs**) with the Android emulator, take a look
    at the documentation available at [http://developer.android.com/tools/devices/managing-avds.html](http://developer.android.com/tools/devices/managing-avds.html).
  prefs: []
  type: TYPE_NORMAL
- en: Once the application is running, you can begin testing the different features
    and fixing any issues.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we learned about:'
  prefs: []
  type: TYPE_NORMAL
- en: Generating an application skeleton with the Sencha SDK command-line tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Sencha's native `Ext.device` APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provisioning iOS applications through the Apple developer portal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling a Sencha Touch web application into a native iOS app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling a Sencha Touch web application into a native Android app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, we will take a look at the Sencha Touch Charts package.
    The Charts package is an add-on to Sencha Touch that will let us use charts and
    graphs in our applications. We will show you how to take a standard `datastore`
    instance and use it to feed data to your charts and graphs.
  prefs: []
  type: TYPE_NORMAL
