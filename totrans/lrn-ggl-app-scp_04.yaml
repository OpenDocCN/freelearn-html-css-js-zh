- en: Chapter 4. Creating Interactive Forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned about many of the features of `GmailApp`
    and `ContactApp` and you built lots of real-world applications. In this chapter,
    you will learn how to create Forms programmatically using `FormApp` and `HtmlService`.
    Also, you will learn about the `doGet` and `doPost` functions.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Forms using script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [Chapter 1](ch01.html "Chapter 1. Introducing Google Apps Scripts"), *Introducing
    Google Apps Scripts*, you created a Form manually, but this time we will create
    Forms programmatically by script. First of all, we will create a Form with four
    choices and an **Other** option choice. For simplicity, we add places as a multiple
    choice radio group. Each choice is exclusively selectable. Create the function
    `createForm` as shown here in a spreadsheet code file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `places` variable holds a few random places, and you can assign any place
    name and any number of places as an array of strings. The `create` method of `FormApp`
    class creates a form titled `Vacation Form` in your Drive''s root folder (`My
    Drive`). On running the function, the created Form will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Forms using script](img/B05010_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The choices are hardcoded in the code. If you would like to change any choice
    or add more choices, then you should edit the code to make the required changes.
    If you need to change the choices frequently, it might become irritating or hard
    to edit the code every time. Now we will add place names from spreadsheet''s data
    rather than them being hardcoded. Add or rename an existing sheet as `Places`
    and add a few place names in it as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Forms using script](img/B05010_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now update the `createForm` function as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The preceding function will create a Form with the choices' text retrieved from
    the Sheet's data. The choices' text and/or number of choices can be varied as
    per your Sheet's data. If you would like to make any changes in the choices' text,
    then it is enough to edit the Sheet's data, and you do not need to edit the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you run the function just mentioned, it will create a Form named `Vacation
    Form` in the `My Drive` folder. To open the Form in edit mode, double-click or
    right-click (context click) on Form name and go to **Open with** | **Google Forms**.
    The following screenshot shows what the Form would look like in edit mode. You
    can make any adjustments and/or perform formatting in edit mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Forms using script](img/B05010_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To open the live Form, right-click (context click) on the Form name, click
    on **Get link**, copy the link, and then paste the link in your browser''s address
    bar. The following screenshot shows what the live Form will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Forms using script](img/B05010_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can share the live Form link with your users. Your user''s responses are
    stored in the Form itself. You can see responses in the Form editor, or link a
    spreadsheet to it to view the responses, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Forms using script](img/B05010_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can link Form responses to a spreadsheet manually by clicking on the icon
    in the top right-hand corner of the Form editor. A new `Form Responses` Sheet
    will be created in the selected spreadsheet.
  prefs: []
  type: TYPE_NORMAL
- en: 'To programmatically link a spreadsheet, use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Publishing the script as a web application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can create awesome web pages/applications by publishing your script as
    a web application. In this section, you''ll see how to publish a script. Start
    by creating a new Sheet and entering the following code in the script editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `doGet` function will be executed whenever a HTTP/HTTPS request is sent
    to the script. In the preceding code, `ContentService` is used to return a string
    to the browser. Content service can be used to return any type of content including
    simple text, HTML, XML, JSON, CSV, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'To publish the script, within the script editor, navigate to **Publish** |
    **Deploy as web app…**. A new **Deploy as web app** dialog will open as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Publishing the script as a web application](img/B05010_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Select any one of the existing project versions or select **New** to create
    a new project version. There will be two choices under the **Execute the app as**
    option, **Me** and **User**, accessing the web app. For this application, select
    **Me** (your user ID). This means the script will run on behalf of your user ID.
    If you had selected the second option then the script would run on behalf of the
    user who is accessing the application. Select **Anyone, even anonymous** under
    the **Who has access to the app** option.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are two more choices **Only myself** and **Anyone** available under the
    **Who has access to the app** option. Select **Only myself** if you would only
    like to get access to the published app. Select **Anyone** if you would like to
    give access to others, but please be aware that the others should be logged in
    with their Google user ID. If you select **Anyone, even anonymous**, then your
    user can be anyone and does not need to be logged in. They do not even need to
    be a Google user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, click on the **Deploy** button. Then another dialog will open as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Publishing the script as a web application](img/B05010_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are publishing the script for the first time, then you need to authorize
    the script. Authorization is initiated before web app deployment. Click **Allow**
    in the authorization dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In this dialog, you can see the published URL under the **Current web app URL**
    textbox. You can copy and paste this URL in a new browser window/tab address bar
    to see the working of your web application. For the preceding code, the text returned
    will be **Hello world!** Click **OK** to close the dialog.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you make any changes in your code, then you should publish the new version
    again, otherwise the updates will not take effect. Alternatively, you can use
    the **latest code** URL for development purposes.
  prefs: []
  type: TYPE_NORMAL
- en: HtmlService
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the beginning of this chapter, you created a Form using script codes. However,
    this Form is a static one, meaning you cannot add dynamic formatting or script
    on the client side. You can perform formatting and calculations, if there are
    any to be done, on the server side only.
  prefs: []
  type: TYPE_NORMAL
- en: '`HtmlService` allows scripts to return HTML or web pages to clients. For security
    reasons the HTML content, including CSS and JavaScript, are compiled and sandboxed
    by Caja compiler before returning to the client browser. The returned web page(s)
    can interact with server-side GAS functions using the `google.script.run` API
    methods.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The advantages of using `HtmlService` are:'
  prefs: []
  type: TYPE_NORMAL
- en: You can use CSS and client-side JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can create dynamic HTML forms rather than static Forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can work on client-side HTML and server-side script codes separately
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HtmlService` can create HTML codes from templates. The **templates** are HTML
    files mixed with HTML markup and scripts (these are called **scriptlets** and
    are executed on the server side).'
  prefs: []
  type: TYPE_NORMAL
- en: Scriptlets enclosed by `<?` and `?>` execute but output nothing to the enclosing
    HTML. In other words, they do not alter the surrounding HTML code. Scriptlets
    enclosed by `<?=` and `?>` return the output to the surrounding HTML code. Any
    functions inside scriptlets can call functions of other scriptlets or server-script
    functions, but server functions cannot call functions within scriptlets.
  prefs: []
  type: TYPE_NORMAL
- en: 'For further reading on scriptlet tags, visit: [https://developers.google.com/apps-script/guides/html/templates](https://developers.google.com/apps-script/guides/html/templates).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Form using HtmlService
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a `Form.html` file, which we are going to use as an HTML template and
    enter the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the same name attribute value for radio type input fields so that they
    are all grouped together. This means they will work exclusively. Update the `doGet`
    function in the `Code.gs` file to render the previously mentioned HTML form, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Publish the script and enter the published URL in your browser''s address bar.
    The basic HTML form returned is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Form using HtmlService](img/B05010_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To populate places automatically from spreadsheet data, update the HTML code
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The scriptlet `<?= places[i] ?>` returns the *i*th element from the `places`
    array. You also need to update the `doGet` function as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The `places` array is assigned to the template in the `doGet` function and
    referenced in the HTML template. Then, the output becomes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Form using HtmlService](img/B05010_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To submit this Form data to the spreadsheet, you need to add method and action
    attributes to the Form element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Assign the published URL to the `template` object in the `doGet` function,
    for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You could also assign it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To process the submitted Form data, add a `doPost` function. The `doGet` or
    `doPost` functions execute as per the HTTP/HTTPS request method (`GET` and `POST`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'After the Form is submitted, a thank you message is returned as the normal
    text content:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Form using HtmlService](img/B05010_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Submitting form using Google script API method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To submit data using the `google.script.run` API methods, add `onclick` property
    to the **Submit** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `postFormDataToSheet` function as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To show Form submission result or error message, insert the `postData` function
    in a separate `<script>` tag and add success and failure handlers with a callback
    function as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Insert a return statement with a message to the user at the end of the `postFormDataToSheet`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the `User` object to the `google.script.run` API calls, add the `withUserObject`
    method along with the success and failure handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete HTML code with the `user` object is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The complete version of the `postFormDataToSheet` function is listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In this script, you used HTML code in a separate file, namely `Form.html`. This
    file is used as a template in the GAS server, and only the resulted markup and
    script code are returned to the user's browser. From the browser (the client side),
    we use the Google client-side JavaScript API (`google.script.run`) to interact
    with the GAS server. This is an AJAX-like interaction between the client and server.
    Here, the client and server are your browser and GAS server respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Referencing HTML tags/elements (DOM elements) using plain JavaScript most of
    the time is a tedious task. To make life easier, you can use jQuery libraries.
    Also, you need not define CSS styles in the `<style>` tag yourself; rather you
    can use any officially-supported (by Google) third-party style sheets.
  prefs: []
  type: TYPE_NORMAL
- en: Creating forms using add-ons CSS and jQuery libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The same HTML code using the Google add-on CSS and jQuery libraries is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Creating an e-voting application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous application appends each response to the `Responses` Sheet. But,
    we need to update the count against each choice. If we can make the selected choices
    increment by a counter then we can use the same application for e-voting purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the labels/headers for column *A* and *B* in the `Places` sheet as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an e-voting application](img/B05010_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Update the HTML code in the `Form.html` file as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'For this application keep the `Form.html` code as it is, but update the `doGet`
    and `postFormDataToSheet` functions as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'In this application, the responses are not appended, but the counts are incremented
    on every submission. A sample output is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an e-voting application](img/B05010_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a ticket reservation application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This application serves as an HTML form to the user to let them submit values
    to the server. This could be to reserve a ticket for a show, book a seat in a
    venue, book a room in a hotel, and many more purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a spreadsheet and create column labels as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a ticket reservation application](img/B05010_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the code file, create the `doGet`, `doPost` and `cancelReservation` functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, the `doGet` function initially checks for any query
    such as `cancel`, appended with the URL. If `cancel` is present, then the `cancelReservation`
    function is called, otherwise the HTML form is returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The preceding function compares the ticket number (`timestamp`) with the existing
    data and, if that ticket number is present, then it is marked as cancelled.
  prefs: []
  type: TYPE_NORMAL
- en: 'Insert the following code in the `Form.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'A sample e-mail''s body text is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a ticket reservation application](img/B05010_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A sample output of the `Reservations` sheet is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a ticket reservation application](img/B05010_04_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to create many useful real-life applications
    including a reservation system application. The next chapter will be focused on
    Google Calendar. You will learn how to create Calendar events and how to enable
    Google's advanced services. You will also learn to create Drive file routing and
    search applications.
  prefs: []
  type: TYPE_NORMAL
