- en: Chapter 9. Securing Your Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Basic safety – turning off `autopublish`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic safety – removing `insecure`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing data transactions with `allow` and `deny`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hiding data with façades
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Protecting the client with `browser-policy`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Meteor makes development and prototyping as fast and easy as possible. To accomplish
    this, there are some default packages installed that have no business in a production
    application. As you prepare your app for production, you will want to remove the
    packages that make prototyping easier, and replace them with some security best
    practices, to make your application more secure. In this chapter, we will go through
    the baseline security mechanisms needed to prepare an application for production.
  prefs: []
  type: TYPE_NORMAL
- en: Basic safety – turning off autopublish
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Quickly and easily accessing your data saves you an enormous amount of time
    when you're prototyping! The `autopublish` package, which is installed by default
    in every newly-created Meteor app, enables you to quickly manage and access your
    data collections, so that you can churn out great code. When the time comes, however,
    broadcasting every field in every data collection is inefficient and unsecure.
    This recipe will show you the basics of removing the `autopublish` package, and
    implementing your own `publish`/`subscribe` code to keep your app working as intended.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create a very basic application, displaying simple text cards on the
    screen, and then show the effects of `autopublish` and `subscribe`/`publish` on
    those cards. To do this, we need to create our folder structure, add some basic
    templates, and add a bit of styling.
  prefs: []
  type: TYPE_NORMAL
- en: Project setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In a terminal window, create your root project by entering the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating a basic template
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In a text editor, create a file named `collections.js` in your `[project root]/both/`
    folder, and add the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a file named `[project root]/client/main.html` and add the following
    `<template>` and `<body>` declarations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to add just a little bit of logic for display and creation, and we''re
    ready to move on to styles. Create a new file named `[project root]/client/templatehelpers.js`,
    and add the following `Template.helpers` and `Template.events` functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Adding CSS styling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We need just a touch of CSS to make things more visually appealing. Create
    a file named `[project root]/client/styles.css` and add the following CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Your app should now be up and running. Navigate to `http://localhost:3000`
    in a browser, and double click on the **open:** label to create some new cards.
    Click on the **text** tag in a card to modify the sharing property (the card will
    turn green) and double click on the **id** tag to delete a card. Your screen,
    after playing with it a bit, will look simlar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding CSS styling](img/image00400.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If everything is copacetic, we're ready to remove the `autopublish` package.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Proceed with the following steps to turn off `autopublish`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new terminal window (keep Meteor running!), navigate to your `[project
    root]` and enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The screen on your web page will now show no results, and if you do a count
    on the `Cards_open` collection, even if you have many records created, the count
    will come back as **0**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00401.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'We will now add `publish` and `subscribe`. The `Cards_open` collection still
    exists. Because we removed the `autopublish` package, however, the communication
    between the client and the server has been severed. To restore it, we need to
    add a `publish` method on the server, and a `subscribe` method on the client.
    Create a file named `[project root]/server/collections-server.js` and add the
    following `publish` function call:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create a file named `[project root]/client/collections-client.js` and
    add the following `subscribe()` function call:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: All done! You have successfully removed the `autopublish` package, and re-created
    the `publish`/`subscribe` calls necessary to allow the client to still see the
    `Cards_open` collection. Your browser should now display results properly when
    you create, modify, and delete using the clicks and double clicks mentioned previously.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a nutshell, `autopublish` checks to see what collections exist, and automatically
    writes your `publish` and `subscribe` function calls for you. It does this for
    every collection it can find, and is therefore neither performant nor secure.
  prefs: []
  type: TYPE_NORMAL
- en: By removing `autopublish`, we stopped the `publish` and `subscribe` functions
    from automatically being called. Because of this, we had to re-create those calls,
    creating a simple `publish()` call (on channel `'open'`) on the server, and a
    `subscribe()` call (on the same `'open'` channel) on the client.
  prefs: []
  type: TYPE_NORMAL
- en: Our `find()` statement in the `publish` function retrieves everything, which
    is inherently not secure or performant, but we will be fixing that in other recipes.
    The focus of this recipe was on how to remove the `autopublish` package, without
    affecting the functionality of our application.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Removing Meteor packages* recipe in [Chapter 2](part0028.xhtml#aid-QMFO1
    "Chapter 2. Customizing with Packages"), *Customizing with Packages*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic safety – removing insecure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Right after removing `autopublish`, we will want to control how data is added,
    removed, and updated, and put in some security measures, as appropriate. To enable
    this level of control, we need to remove the appropriately-named `insecure` package.
    To restore functionality after removing the `insecure` package, we will need to
    utilize a basic `collection.allow` declaration. This recipe shows you how to do
    exactly that.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use the *Basic safety – turning off autopublish* recipe found in this
    chapter as our baseline. Once you have completed that recipe, make a copy of the
    `secure-autopublish` folder (note: you will need all subfolders, including the
    hidden `.meteor` folder), rename it to `secure-rm-insecure`, start your app using
    the `meteor` command in the terminal, and you will be ready to proceed.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just like the previous recipe for `autopublish`, we simply need to remove the
    `insecure` package, and then restore functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new terminal window (keep Meteor running!), navigate to the root of your
    project and enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your application now disallows any client changes to the `Cards_open` collection.
    Try to add a new card, share a card, or delete a card, and you will be unable
    to do so. Whether through the UI using clicks and double clicks, or even programmatically
    through the web console, you will be unable to make any changes, as shown in the
    following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00402.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Okay, now we need to get our super powers back! Open the `[project root]/server/collections-server.js`
    file, and add the following code to the bottom of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After saving these changes, our `insert`, `update`, and `remove` capabilities
    have been restored. You can now add, modify, and delete as many cards as you would
    like, either through the UI or programmatically through the web console.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `insecure` package does almost exactly the same thing for data collection
    security that `autopublish` does for publish security – it finds every collection
    it can and automatically creates a `collection.allow` function for all functions
    (`insert`, `update`, and `remove`). By removing the `insecure` package, we prevented
    our `Cards_open` collection from allowing any client-side changes.
  prefs: []
  type: TYPE_NORMAL
- en: To remedy this, and to prepare for more granular security (see later recipes
    in this chapter for details), we called `Cards_open.allow()` and enabled all collection
    modifications by returning `true` for every checking function.
  prefs: []
  type: TYPE_NORMAL
- en: So, although the net security of our application hasn't changed, we are now
    prepared to modify our publishing and security settings to make our application
    production-ready.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Removing Meteor packages* recipe in [Chapter 2](part0028.xhtml#aid-QMFO1
    "Chapter 2. Customizing with Packages"), *Customizing with Packages*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing data transactions with allow and deny
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Properly configured, Meteor collections are quite secure. The granular control
    we have over what is allowed and what is not allowed enables us to secure our
    applications appropriately. In this recipe, you will learn how to use `allow`
    and `deny` to secure your collections and control access.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the *Basic safety – removing insecure* recipe found in this chapter, we
    already have an application with both the `autopublish` and `insecure` packages
    removed. Once we add and configure the appropriate user `accounts` packages, we
    will be ready to proceed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using a copy of the *Basic safety – removing insecure* recipe as a baseline,
    open a terminal window, navigate to your project root, and execute the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If your app isn't already running, make sure to start it using the `meteor`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: We now need to add the `loginButtons` template, and modify our `insert` statement,
    to add an `owner` property to each record.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your `[project root]/client/main.html` file and add the `loginButtons`
    template inclusion just below the `<body>` tag, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, open your `[project root]/client/templatehelpers.js` file and modify
    the `Template.open.events` insert logic to add `owner`, and only fire if there
    is a logged-in user. Your code changes should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Finally, in your browser, create a new user, and make sure you are logged in
    as that user (the name of the user doesn't matter – we suggest using a fake one
    such as `user1@test.com`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, whenever you create new cards, the **owner** section will be filled in
    with the logged-in user''s unique ID, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00403.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The current state of the application is not secure. Anybody can `insert`, `remove`
    and `update` any of the cards, even if they belong to another user! We are going
    to fix this situation by using the `collection.allow()` and `collection.deny()`
    declarations.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will require a logged-in user for `insert`. Open your `[project root]/server/collections-server.js`
    file, locate the `Cards_open.allow()` function call, and make the following modification
    to the `insert` function declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will now no longer be able to create new cards while being logged out (you
    can test this if you would like).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we will allow only the owner of a record to `update` or `remove` cards.
    In the same `collections-server.js` file, modify the `update` and `remove` function
    declarations as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes, and test your new rules by logging in as a new user (create
    one if needed), trying to change results, trying to add new cards without being
    logged in, and so on. With these rules in place, only a logged-in user will be
    able to create new cards, and only the owner of a card can modify the card or
    delete it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All client-side attempts to alter collections in any way flow through two callbacks:
    `allow` and `deny`. In order for a collection change to be accepted by the server,
    the incoming change must receive one `true` response from one of the `allow` functions
    (for example, we return `true` on the `insert` function if the `userId!=null`),
    and must receive zero `true` responses from any of the `deny` functions.'
  prefs: []
  type: TYPE_NORMAL
- en: In this particular case, we are doing a simple check on `insert`, under the
    `allow` callback, to make sure the user is logged in, which translates to `userId!=null`.
    For `update` and `remove`, the check is to see if the logged-in user is the owner/creator
    of the card, through `return` (`doc.owner==userId`).
  prefs: []
  type: TYPE_NORMAL
- en: There is no limit to the number of `allow` or `deny` callbacks you can declare,
    although it's usually best to consolidate them when possible, using a "pessimistic"
    security model (only allow what is needed, rather than allowing everything and
    only denying what is needed).
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The preceding `allow` rules work just fine, if only the UI is being used. However,
    it's possible for someone to open the console window and make direct collection
    manipulation calls, which could cause some problems.
  prefs: []
  type: TYPE_NORMAL
- en: First, our check for `insert` is only `userId!=null`. Any additional fields,
    or even a malicious `insert`, can be added via the command line, for example,
    let's say that I am in possession of the `userId` for another user (not hard to
    get, it's found in the `owner` field of each card). I could easily `insert` a
    card with something nasty in the text, or `update` the text and owner of an existing
    cart, so as to make it appear that another user was the one that created the note.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, If I am logged in as `user2@test.com`, and I know that the `userId`
    value for `user1@test.com` is `''8v2GGh98RrYfso92c''`, I can run the following
    command in the browser console, and potentially get `user1` in trouble:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We can handle this in several ways. We can either make our `allow` callback
    functions more complex, with multiple `if…else` statements, or we can use the
    `deny` callback to prohibit certain behavior. In `[project root]/server/collections-server.js`,
    create a new `deny` callback with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: For `insert`, if `doc.owner!=userId`, the `deny` callback will return `true`.
    For `update`, if an attempt is made to modify any field except shared, the `deny`
    callback will return `true` as well. Using these two callback functions, we have
    further tightened security, and taken away any console line shenanigans.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For a breakdown of what's possible with `allow` and `deny`, consult the official
    Meteor documentation available at [http://docs.meteor.com/#/full/allow](http://docs.meteor.com/#/full/allow).
  prefs: []
  type: TYPE_NORMAL
- en: Hiding data with façades
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some of our security (and performance) problems can be resolved through limiting
    access to certain fields and records in our data collections, for example, if
    the `owner` field of a record isn't sent to the client, a potential hacker will
    never be able to get the `userId` value of another user. Likewise, if only records
    belonging to a certain `userId`, or ones marked for sharing, are passed to the
    client, private records can stay private and visible only to the user that created
    them. This recipe will show you how to create a façade to limit fields and records
    being sent to the client.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please complete the *Securing data transactions with allow and deny* recipe
    found in this chapter, including the additional `deny` callback functions found
    in the *There's more…* section. Once completed, and your Meteor app is running,
    you are ready to use this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to modify the `publish` function on the server so that it only
    returns records that are owned by or shared with the logged-in user, and we will
    stop broadcasting the `owner` field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `[project root]/server/collections-server.js` file, locate the `Cards_open.publish`
    section, and make the following changes to the `Cards_open.find()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that the `owner` field is no longer visible on the client, we can remove
    the following two lines from our open template in the `[project root]/client/main.html`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With those changes saved, any given logged-in user will only be able to see
    cards that have been created by that same user, or cards that have been shared.
    If you log in to two different browsers, with two different users, you will be
    able to see how sharing makes records visible to the other user, and vice versa.
    The following screenshot shows an example of two users sharing some records, and
    not sharing others:![How to do it...](img/image00404.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By modifying the selector and the `fields` option, we were able to limit the
    recordset being published to the client. The client, try as it might, will never
    be able to see any of the records excluded by the selector, nor any of the excluded
    `fields`, because the server simply isn't sending them when it is publishing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, we used a `{$or: […]}` selector to limit which records are published,
    by including only records created by the current user (`owner:this.userId`), or
    records that have been shared (`shared:true`). We used the `{fields:{owner:0}}`
    option, to return all `fields` except `owner`. This *blacklist* approach is less
    secure than a *whitelist* approach, but to keep this recipe simpler, we decided
    to tell the query what fields to exclude (optimistic) rather than what fields
    to include (pessimistic).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To whitelist, rather than blacklist, enumerate the fields you would like displayed,
    and pass a value of `1` with them (for example: `{text:1 , _id:1 , shared:1}`).
    All fields not specified will automatically not return with the query.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Filtering with MongoDB queries* recipe in [Chapter 4](part0046.xhtml#aid-1BRPS1
    "Chapter 4. Creating Models"), *Creating Models*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Protecting the client with browser-policy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Securing your database is pretty straightforward in Meteor, but what about client-side
    security? Meteor has you covered there as well, using standard `Content-Security-Policy`
    and `X-Frame-Options` safeguards. This recipe will walk you through adding the
    `browser-policy` package, and configuring basic client-side security.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create a brand new project as usual, but we will be keeping the default
    files, creating some *unsafe* scripting functionality along the way.
  prefs: []
  type: TYPE_NORMAL
- en: Scaffolding setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In a terminal window, navigate to where your project root will be, and execute
    the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Add CDN-hosted bootstrap
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Visit the official Bootstrap `Getting Started` page, located at [http://getbootstrap.com/getting-started/](http://getbootstrap.com/getting-started/)
    and scroll to the section marked as **Bootstrap CDN**. Copy the contents from
    that section, and insert them into the `<head>` block of your `[project root]/client/secure-client.html`
    file. When finished, your changes should look similar to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Add inline and eval() scripts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'While we have `secure-client.html` open, let''s modify the template, adding
    some indicators, an inline script in an `href` attribute, and a new section for
    displaying `eval()` results. Modify your `hello` template so that it looks like
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We have a bit of logic to add, so that the template will be displayed properly.
    First, we will create a simple collection called `Test`. Create a file named `[project
    root]/both/model.js` and add the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, configure the server method `dropTable` to simulate someone erasing the
    database. Create a file named `[project root]/server/methods.js` and add the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to modify the `hello` template helpers and events to be "vulnerable"
    to our clever hacks! Open `[project root]/client/secure-client.js`, modify the
    `Template.hello.helpers` section to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, modify `Template.hello.events` to add a record to the `Test` collection,
    rather than updating the `counter` variable. Your code should look similar to
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Once all of these changes are saved, our application is thoroughly "hacked"
    with an `eval()` being used to double the normal click counter, an inline script
    that will remove all records from our `Test` collection, and with scripts and
    styles being used from an alternate site (the Bootstrap CDN).
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to `http://localhost:3000/` and play around with the buttons for a
    bit. After a few clicks, your screen will look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Add inline and eval() scripts](img/image00405.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To activate the inline "hack", click the button labelled **Bootstrap!** – a
    notice will come up that you''ve been hacked, and after you click on **OK,** the
    `Test` collection will be cleaned out. The notice will look something like the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Add inline and eval() scripts](img/image00406.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You're now ready to shut down all these expert hacking techniques!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To secure our application, we will add the `browser-policy` package, and then
    configure it appropriately for our environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new terminal window, navigate to the root folder of your project (keep
    your app running!) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your application will now have lost all Bootstrap formatting, and the `eval()`
    function which was doubling your counter and the eval() function, which was doubling
    your counter, will no longer work. When you click the **Click Me** button, your
    counter will increment but the double counter will not. Your screen should look
    similar to the following screenshot, with a lot of errors in the web console explaining
    that the unsafe "hacks" from before are no longer allowed:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00407.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'We will now fine-tune our security settings with `BrowserPolicy.content`. The
    inline scripting vulnerability still exists (click on **Bootstrap!** if you would
    like to test it), and our formatting, which we don''t consider a hack, is no longer
    working. So, we are currently not strict enough in one area (inline scripts) and
    too strict in another (refusing all content from the Bootstrap CDN, a trusted
    source). Let''s rectify that. Create a new file named `policy.js` in the `[project
    root]/server/` folder. Add the following two lines, and save your changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our Bootstrap formatting has been restored! Now, let''s disallow inline scripts,
    as well as prevent connections to any servers. Add the following two lines to
    the `policy.js` file and save your changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The inline script that was erasing our `Test` collection will now no longer
    run. However, by disallowing all connections, we have inadvertently destroyed
    the `DDP` connection to our server. We need to rectify that by whitelisting our
    `//:localhost:3000` address for HTTP and for websockets (for `DDP`).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following three lines to the end of the `policy.js` file and save your
    changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: As we are dealing with your browser's security policy, a manual refresh is required
    each time you make a change to `policy.js`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Refresh your browser one final time, and now everything that should be allowed
    is working, and everything that shouldn''t (inline scripts, `eval()`, etc.) is
    prohibited. Your screen, after a few clicks, should look like the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00408.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, installing the `browser-policy` package will disable the `eval()`
    scripts, and only allow resources (images, etc) from your site. This is why just
    adding `browser-policy` disabled the double counter `eval()` script, and stripped
    away all the Bootstrap files.
  prefs: []
  type: TYPE_NORMAL
- en: To allow Bootstrap resources, we whitelisted the styles and scripts of the Bootstrap
    CDN, using the two `BrowserPolicy.content` functions – `allowStyleOrigin()` and
    `.allowScriptOrigin()`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we shut off inline scripts with the `disallowInlineScripts()` function.
    We also prevented any and all AJAX / remote server calls, using the `disallowConnect()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Being this strict also broke our server's DDP connection, which we restored
    using the `allowConnectOrigin()` function, for both HTTP and `ws`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are many other options available to us (this is just a primer), so if
    you would like to really fine-tune your security settings, we recommend the most
    excellent article from Arunoda Susiripala, located at [https://meteorhacks.com/xss-and-meteor.html](https://meteorhacks.com/xss-and-meteor.html),
    and the `browser-policy` documentation, found on Atmosphere: [https://atmospherejs.com/meteor/browser-policy](https://atmospherejs.com/meteor/browser-policy).'
  prefs: []
  type: TYPE_NORMAL
