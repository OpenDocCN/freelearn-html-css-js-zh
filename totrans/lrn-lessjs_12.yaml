- en: Chapter 12. Color Processing with Less
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine the scene if you will—you're a designer, creating the latest sale adverts
    for a department store. You've spent hours creating your masterpiece, submitted
    it for approval… only to find that the Sales Director hates your choice of color.
    He doesn't think it works properly ("there's not enough contrast…"), so it's a
    case of back to the drawing board. Only you know that he is… shall we say... very
    picky about his choice of colors, which you know does not always work that well…
  prefs: []
  type: TYPE_NORMAL
- en: 'Sound familiar? What if we could pick our main color and have code (yes, code)
    automatically pick a color for you that not only works technically but also suits
    your chosen principal color? Sound impossible? Not with Less—welcome to the world
    of color processing! In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing color management in Less
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Color spaces and formats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Color functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating color palettes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples of blending modes and parallels with Photoshop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with W3C and WCAG standards for color management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intrigued? Let's start…
  prefs: []
  type: TYPE_NORMAL
- en: Introducing color management in Less
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Printer profiles …colorimeters… sRGB… huh? You''re probably a developer, thinking,
    "I know* *nothing about color management; what the* *heck does it all mean?"*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, to put it into context: imagine you''ve taken a picture of a red flag
    on a boat (yes, I know, stay with me on this), which appears to take on an orange
    tone when viewed on screen, but starts to come out purple when printed. Now, I
    bet you''re really confused… let me explain it all.'
  prefs: []
  type: TYPE_NORMAL
- en: This is all about color management. In simple words, it's the art of making
    sure your printer, camera, and computer all display accurate shades of the same
    color. This sounds perfectly reasonable, right? After all, all devices should
    display the same color, no matter the device…
  prefs: []
  type: TYPE_NORMAL
- en: Wrong. The key to color management is that every device reproduces color differently.
    In a sense, they all speak different languages and are not as sophisticated as
    our own eyes; here's where we need that colorimeter to balance everything…!
  prefs: []
  type: TYPE_NORMAL
- en: Making sense now? However, where's the link with Less? Well, it's exactly the
    same principle in Less—we need to make sure that colors are correctly balanced;
    it's no good putting blues against purples, as they are too similar. Thankfully,
    Less has a range of functions that can help us with this. We can choose a primary
    color, such as purple, then use functions such as `darken()` or `lighten()` to
    choose suitable colors that complement our primary one. Less will then compile
    this function into valid CSS; for example, if we choose `#6600FF` (a shade of
    purple), we can get Less to lighten it by 10 percent to produce `#801AFF`. This
    value will then be rendered on screen when Less has compiled your code.
  prefs: []
  type: TYPE_NORMAL
- en: We will delve into the various functions that Less supports, but for a moment,
    let's turn our attention to a little theory to help us better understand more
    about the importance of color formats and spaces.
  prefs: []
  type: TYPE_NORMAL
- en: Examining color spaces and formats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we think of colors, most of us will probably think of red, green, or blue,
    but do we ever think of color spaces? If the answer is no, then think again; you've
    just mentioned one of several color spaces we can use.
  prefs: []
  type: TYPE_NORMAL
- en: Color spaces are a means of uniquely specifying color. The most well-known one
    is **red, green, and blue** (**RGB**). However, others are available, such as
    **Hue, Saturation, Lightness** (**HSL**), its cousin, which includes alpha support
    (HSLa) or **HSV** (**Hue, Saturation, and Value**). Less includes support for
    these and others; we will look at these in more detail shortly, but first, let's
    take a look at using basic mathematical operators to create new colors.
  prefs: []
  type: TYPE_NORMAL
- en: Working with arithmetic operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How often have you spent hours fine-tuning a palette for a client, only to find
    they want to change the whole lot? It will be impossible to simply change one
    color, you will need to change them all…
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use Less to help us with this. It contains support for a number of functions
    that we can use to automate the creation and manipulation of colors. We can pick
    the red, blue, or green shades from colors, or use HSL to get the hue, lightness,
    or saturation levels from a color. However, we can also do something that you
    might not expect to see, but which makes perfect sense: use simple math operators,
    such as `+` or `–` to create our colors.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Try this little experiment. If you have installed Crunch!, then add this to
    a new file within, and save it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When compiled, we get two colors, generated from one base color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This compiled line of code gives us….a very dark gray, and…another dark gray.
    Not quite the colors I had in mind, but hey, it shows the principle very well;
    we can easily create multiple colors from one single base color. The key to it
    is to ensure that we get the right balance of numbers, in terms of base colors
    against those we calculate using operators. Let's see whether we can improve on
    this, and start exploring the world of functions to create some more appealing
    colors.
  prefs: []
  type: TYPE_NORMAL
- en: Working with color functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The functions available within Less can be used to provide some interesting
    colors. It is worth taking the time to familiarize yourself with the options available,
    particularly as it is possible to produce the same color using different methods!
  prefs: []
  type: TYPE_NORMAL
- en: The functions can be split into four groups—they cover color definition, channels,
    operations, and blending. Let's take a look at each group of functions in turn,
    starting with defining color formats.
  prefs: []
  type: TYPE_NORMAL
- en: Defining color formats
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we can alter colors, we naturally need to define them. We could simply
    provide a HEX code, but this isn''t always sufficient; Less allows us to do more.
    Less provides a number of methods to obtain colors using different formats, and
    these are the three that you will likely use the most:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Function | Creates an opaque color from | Example value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `rgb` | Decimal red, green, and blue (RGB) values | `rgb(90, 129, 32)` |'
  prefs: []
  type: TYPE_TB
- en: '| `hsl` | Hue, saturation, and lightness (HSL) values | `hsl(90, 100%, 50%)`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `hsv` | Hue, saturation, and value (HSV) values | `hsv(90, 100%, 50%)` |'
  prefs: []
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information, refer to the full list of functions in [Appendix](part0129_split_000.html#page
    "Appendix A. Color Functions in Less"), *Color Functions in Less*. I've created
    a CodePen that shows these effects in action. This is available at [http://codepen.io/alibby251/pen/horqx](http://codepen.io/alibby251/pen/horqx).
  prefs: []
  type: TYPE_NORMAL
- en: These methods mean that we're not limited to simply using HEX codes all of the
    time—after all, could you tell that `#8a5c16` is dark orange? I suspect not! A
    better method of defining colors is to use `RGB` (or `RGBA`, if we want to define
    opacity as well); we can then extract the individual base colors, as shown in
    our next demo.
  prefs: []
  type: TYPE_NORMAL
- en: Converting colors from HEX to RGBA
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is a very simple exercise, in which we''ll take a color, extract the constituent
    base colors, and display them on screen. We can then use these later to produce
    new colors. We''ll begin, with setting up the markup for our demo:'
  prefs: []
  type: TYPE_NORMAL
- en: Start by downloading a copy of the code that accompanies this book. From it,
    extract a copy of `hextorgb.html` and save this to our project folder. This will
    act as the basis for our demo.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We now need to add our styling, so in a new file add the following, starting
    with defining some base styles for our page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next come the Less styles. We first need to extract the red, blue, and green
    styles from our base color:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once we have the base colors, we set them to mixins that will define the background
    colors of our boxes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you need to support IE8, then `RGBA()` will not work. Instead, use something
    like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, `R`, `G`, and `B` are equivalent to red, green, and blue values; `XX`
    is the figure denoting the level of opacity to use.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The boxes won''t display very nicely on their own, so let''s add some font
    styling:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Last but by no means least, we need to tweak the positioning of each box, and
    set the background colors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the Less code as `hextorgb.less`. If we preview the results of our work,
    we should see the four boxes displayed on screen; the first is our selected color,
    followed by each of its constituent primary colors:![Converting colors from HEX
    to RGBA](img/00115.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, you might be asking what happened here. It's a good question.
    Although it looks like a lot of Less code, in reality, it all boils down to the
    use of three functions, namely `red()`, `green()`, and `blue()`. We first extract
    the primary colors, then use the `rgba()` function in various mixins to create
    `background-colors` and assign each to the three boxes displayed on screen.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on now, and change focus to look at another of the color function
    groups in Less, which is working with color channels.
  prefs: []
  type: TYPE_NORMAL
- en: Channeling colors using Less
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have established a suitable color space to work with, we might
    come across a need to extract and potentially alter part of an existing color.
    Thankfully, Less includes a range of functions that can help in this respect;
    let''s take a look at the three functions you will likely use the most; a full
    list is available in [Appendix](part0129_split_000.html#page "Appendix A. Color
    Functions in Less"), *Color Functions in Less*, at the end of the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Function | Extracts | Example value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `hue` | The hue channel of a color object in the HSL color space.Returns
    an integer value between 0 to 360. | `hue(hsl(90, 100%, 50%))` |'
  prefs: []
  type: TYPE_TB
- en: '| `saturation` | The saturation channel of a color object in the HSL color
    space.Returns a percentage value between 0 to 100 percent. | `saturation(hsl(90,
    100%, 50%))` |'
  prefs: []
  type: TYPE_TB
- en: '| `lightness` | The lightness channel of a color object in the HSL color space.Returns
    a percentage value between 0 to 100 percent. | `lightness(hsl(90, 100%, 50%))`
    |'
  prefs: []
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information, it is worth reading the documentation on the main Less
    site at [http://lesscss.org/functions/#color-channel](http://lesscss.org/functions/#color-channel).
  prefs: []
  type: TYPE_NORMAL
- en: While it is key to understand how these functions work, we can only truly appreciate
    their power, if used in action. Let's set that right by building a demo that puts
    at least one of these to work, in the form of some simple alert boxes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating alert boxes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sebastian Ekström, a Swedish developer, has produced a perfect example of how
    to use the lightness and darkness functions within Less. I've reproduced it here
    with some minor changes to use HSL colors in place of standard HEX codes. You
    can see the original version of this demo at [http://codepen.io/sebastianekstrom/pen/uHAtL](http://codepen.io/sebastianekstrom/pen/uHAtL).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make a start. We first need to download some icons; for the purposes
    of this demo, I will assume you''ve used these:'
  prefs: []
  type: TYPE_NORMAL
- en: The confirmation dialog ([http://www.iconarchive.com/show/oxygen-icons-by-oxygen-icons.org/Status-dialog-information-icon.html](http://www.iconarchive.com/show/oxygen-icons-by-oxygen-icons.org/Status-dialog-information-icon.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The error dialog ([http://www.iconarchive.com/show/nuoveXT-2-icons-by-saki/Status-dialog-error-icon.html](http://www.iconarchive.com/show/nuoveXT-2-icons-by-saki/Status-dialog-error-icon.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The warning dialog ([http://www.iconarchive.com/show/oxygen-icons-by-oxygen-icons.org/Status-dialog-warning-icon.html](http://www.iconarchive.com/show/oxygen-icons-by-oxygen-icons.org/Status-dialog-warning-icon.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to use alternative icons, then adjust the code accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: From a copy of the code download, extract a copy of `alerts.html`. This will
    act as the basis for our demo.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, let''s create our Less styling. In a new file, add the following color
    styles, beginning with the principal text color:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the following two mixins; these determine the background color to
    use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice the use of the `when` statements? Only one text color will be used; this
    will be determined if the lightness value of `@text-color` is above or below `40%`.
    If it is above, then plain black is used; if below, then white is used instead.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Our next two mixins control the font formatting and basic button design:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now tie our styles together. We first call the mixin that creates the
    confirmation dialog, followed by the mixins for the warning and error dialogs,
    respectively:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the file as `alerts.less` in the `css` subfolder. If all is well, we will
    see the three dialogs, against an all-over dark background:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating alert boxes](img/00116.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Okay, so we can now set our color space and extract a base color of our choice.
    However, what are we going to do with the colors? It's unlikely that simply extracting
    a color is going to be sufficient; we will very likely need to do something more
    with it. Not a problem with Less. We can operate on our chosen color, to produce
    any color we so desire!
  prefs: []
  type: TYPE_NORMAL
- en: Operating on colors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this point, you're probably asking yourself, "Why would we need to use operators
    on colors?" Surely that's what you do with numbers, right…?
  prefs: []
  type: TYPE_NORMAL
- en: Not necessarily. Using simple arithmetic operators, as we saw earlier in the
    *Working with arithmetic operators* section, will work perfectly well, but what
    happens if we need to change colors and end up picking colors that look terrible
    using the fixed calculations we provide? Clearly we need a better method…!
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately for us, there exist a number of functions within Less that we can
    use, and assuming that we have a suitable color to work from, we can use any of
    these functions to produce a different shade, or change hue, saturation, or lightness
    levels for example. Let''s take a moment to consider the three you are likely
    to use most:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Function | Purpose of function | Example value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `lighten` | This is used to increase the lightness of a color in the HSL
    color space by an absolute amount. | `lighten(#a52a2a, 20%);` |'
  prefs: []
  type: TYPE_TB
- en: '| `darken` | This decreases the lightness of a color in the HSL color space
    by an absolute amount. | `darken(#a52a2a, 20%);` |'
  prefs: []
  type: TYPE_TB
- en: '| `fade` | This sets the absolute transparency of a color. This can be applied
    to colors irrespective of whether they already have an opacity value or not. |
    `fade(#a52a2a, 20%);` |'
  prefs: []
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information, refer to the full list of functions given in [Appendix](part0129_split_000.html#page
    "Appendix A. Color Functions in Less"), *Color Functions in Less*, at the end
    of this book. I've also created a CodePen that shows these effects in action and
    is available at [http://codepen.io/alibby251/pen/KGltj](http://codepen.io/alibby251/pen/KGltj).
  prefs: []
  type: TYPE_NORMAL
- en: This makes perfect sense on any site, but more so on larger sites that use colors
    throughout and where updating them would be a nightmare. Instead, we can choose
    our master color, assign it to a variable, and use functions to generate the remaining
    colors. Let's take a look at how this would work in practice, with a quick and
    easy example that changes text colors based on the `H` attribute we use.
  prefs: []
  type: TYPE_NORMAL
- en: Making text darker or lighter in color
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first of our two real-world demos is very simple. Let's say we have a number
    of text styles on our site, which use different shades of the same color.
  prefs: []
  type: TYPE_NORMAL
- en: 'We could easily set the colors within our CSS, but this would miss out on a
    major key part of Less; why set them explicitly, when we can get Less to do this
    for us? To see what this means, let''s knock up a quick demo that creates some
    different styles for the standard `H1` to `H6` markup as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making text darker or lighter in color](img/00117.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s start:'
  prefs: []
  type: TYPE_NORMAL
- en: For this demo, we need to download a copy of the code that accompanies this
    book. From it, extract a copy of `altercolor.html` and save to our project folder.
    This will act as the basis for our demo.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In a separate file, go ahead and add the following styles, beginning with our
    base font mixin, to style the text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next comes the variable that sets our base color:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We all need to add the all-important mixin calls that create the font styles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file as `altercolor.less` in the `css` subfolder. If we preview our
    work, we should expect to see six statements, styled as shown at the start of
    this exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Beautifully simple, huh? With a little work and one single color, we've set
    all of the styles automatically, using Less. Our demo is creating the styles dynamically,
    but we can easily precompile the Less statements into valid CSS code, and use
    this instead. All we need to do is just use the right `H` attribute when designing
    our pages!
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on now and take a look at some more of the functions of Less that
    we can use—the blending group. These functions work in a similar fashion to those
    options available within graphics packages such as Photoshop or GIMP. Let's explore
    these in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Color blending
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've seen how we can define a color space, extract one of its constituent
    elements out of it (such as hue or level of green) and that we can transform the
    color through fading or spinning the original. There's one more way we can change
    a color using Less—blending.
  prefs: []
  type: TYPE_NORMAL
- en: 'The principle works in the same way, in that we require two colors, but the
    effects are quite different. Let''s have a quick look at the three functions you
    will likely use the most:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Function | Purpose of function | Example value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `multiply` | This function multiplies two colors. | `multiply(#9ec1ef, #091d37);`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `screen` | This does the opposite of multiply. The result is a brighter color.
    | `screen (#9ec1ef, #091d37);` |'
  prefs: []
  type: TYPE_TB
- en: '| `overlay` | Conditionally make light channels lighter and dark channels darker.
    | `overlay (#9ec1ef, #091d37);` |'
  prefs: []
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information, refer to the full list of functions given in [Appendix](part0129_split_000.html#page
    "Appendix A. Color Functions in Less"), *Color Functions in Less*, at the end
    of the book. I've also created a CodePen that shows these effects in action, available
    at [http://codepen.io/alibby251/pen/IKqEk](http://codepen.io/alibby251/pen/IKqEk).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've seen the various color blending modes available in Less, let's
    move on and take a look at how these compare with performing similar actions in
    Photoshop.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing Less with Photoshop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Working with blend modes in CSS is likely to raise a very important point—how
    does Less stack up against applications such as Photoshop?
  prefs: []
  type: TYPE_NORMAL
- en: Well, the good news is that for those already familiar with blend modes in Photoshop,
    the same values exist within Less, although the range is not as extensive as Photoshop.
    We can use values such as lighten, darken, hardlight, and so on, to produce similar
    effects to creating images in Photoshop.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Two good examples of how we can use blending modes can be found at [http://css-tricks.com/basics-css-blend-modes/](http://css-tricks.com/basics-css-blend-modes/);
    have a look also at [http://www.dummies.com/how-to/content/photoshop-ccs-blending-modes.html](http://www.dummies.com/how-to/content/photoshop-ccs-blending-modes.html)
    to get a feel for how these modes fit in with the other blend modes available
    in the latest version of Photoshop (CC at the time of writing this).
  prefs: []
  type: TYPE_NORMAL
- en: The downside is that support for blend modes is still very new; for example,
    support for `background-blend-mode` (at the time of writing this) is limited to
    the latest versions of modern browsers, with the exception of IE.
  prefs: []
  type: TYPE_NORMAL
- en: This limitation aside, it is definitely worth spending time getting familiar
    with how we can replicate the same effects from Photoshop within Less/CSS. As
    we've already seen, there are a host of blend values we can use. As a tester of
    what is possible using CSS, have a look at the excellent gradients produced by
    Bennett Feely, which use `background-blend-mode`. You can see the gradients at
    [http://bennettfeely.com/gradients/](http://bennettfeely.com/gradients/).
  prefs: []
  type: TYPE_NORMAL
- en: 'To really get a feel of how we can use blend modes in Less, it is strongly
    recommended that you understand at least these three: `screen`, `multiply`, and
    `overlay`. The others will follow in due course. Let''s take a moment to cover
    these three modes in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Screen`: This ignores blacks and makes images appear lighter with light tones
    appearing washed out.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Multiply`: This is the direct opposite, with darker tones reinforced, while
    light will pass through anything that is clear or bright.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Overlay`: This is a balance between screen and multiply; it ignores midtones,
    making the blended result lighter and darker at the same time, to increase contrast.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's change tack at this point and move on. We can easily use blend modes to
    help produce new colors, or interesting effects (particularly with images!); this
    won't be truly effective unless we've worked out what our site's palette will
    look like.
  prefs: []
  type: TYPE_NORMAL
- en: It's at this point we can really put Less to good use, in calculating suitable
    values for our palette. Before we do so, let's begin with a primer on creating
    successful palettes to help set the scene.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing palettes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We all work with colors as part of designing a site. Colors are key to making
    or breaking our design. The creation of a cohesive and interesting website relies
    on the right choice of colors that form our palette. Historically, we frequently
    used either a white or color background; as our tastes have evolved, so has the
    need to choose the right colors to form our palette.
  prefs: []
  type: TYPE_NORMAL
- en: The key to any successful palette, and that is even before we get into the depths
    of producing it, is to really understand how color works. The theory of color
    is a complex subject, where we can get to grips with understanding how different
    shades and hues interact with each other and the effect this has on the visitor
    to the site.
  prefs: []
  type: TYPE_NORMAL
- en: 'To help us through the minefield of choosing the right colors to create our
    palette, there are a number of tips we can use:'
  prefs: []
  type: TYPE_NORMAL
- en: Try to choose a palette type that creates suitable colors, based on a color
    of your choice. There are several palette types available, but three of particular
    note are Analogous, Complementary, and Triadic.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instead, choose colors based on current trends. This might, for example, be
    muted pastel colors, which have become popular in producing soothing, flat designs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An alternative is to use bright colors, which are usually heavily saturated,
    to make elements really stand out. The range of colors is often limited, with
    lots of white or gray space, to help equalize the stark colors used in this palette.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can even go for a monochromatic design, which is often based around shades
    of black or gray, with specific elements highlighted in reds or blues. Monochrome
    palettes help convey an emotional or psychological message, whereas we can use
    an accent color to highlight important elements in the design.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: A great tool to use when choosing colors is Adobe's Kuler, which is available
    at [https://kuler.adobe.com/create/color-wheel/](https://kuler.adobe.com/create/color-wheel/).
    It shows some other palettes that you can use, such as Triad or Compound; it is
    worth trying these once you've become familiar with creating palettes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let's take a moment now to look at some of these palette types in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing color palette examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is surprising how consumers can frequently be guided by the colors used on
    a website; for example, a study found that between 60-80 percent of customers'
    purchasing decisions are influenced solely by color! Let's take a moment to consider
    a couple of examples to show the importance of choosing the right colors.
  prefs: []
  type: TYPE_NORMAL
- en: Trüf, a Los Angeles-based web design company, uses a monochromatic design, with
    red to highlight critical elements of their site—you can see their design at [http://www.trufcreative.com](http://www.trufcreative.com).
  prefs: []
  type: TYPE_NORMAL
- en: A similar use of colors, but for a different site, Etch uses various shades
    in its bold background, with pink elements to make the design really stand out.
    Their site is at [http://www.etchapps.com](http://www.etchapps.com).
  prefs: []
  type: TYPE_NORMAL
- en: To get a feel for the importance of choosing colors well, take a look at the
    infographic on Column Five Media's site, at [http://www.columnfivemedia.com/work-items/infographic-true-colors-what-your-brand-colors-say-about-your-business](http://www.columnfivemedia.com/work-items/infographic-true-colors-what-your-brand-colors-say-about-your-business);
    there are some very revealing facts!
  prefs: []
  type: TYPE_NORMAL
- en: It is worth noting though that accessibility must be considered where practical;
    this will often be determined by the appeal of the product or service on offer
    to visually impaired visitors; Geri Coady has produced a useful guide in the form
    of an e-book, which is available for sale at [http://www.fivesimplesteps.com/products/colour-accessibility](http://www.fivesimplesteps.com/products/colour-accessibility).
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on now and turn our attention to what we've been waiting for—choosing
    some colors.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing our colors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we've learned about the importance of choosing our colors carefully
    and the impact this will have on our site's visitors; getting it wrong will be
    disastrous! In comparison, once we know which colors we want to use, creating
    our palette is really easy.
  prefs: []
  type: TYPE_NORMAL
- en: The first stage is to choose our primary color. Column Five Media's infographic
    suggests that only 5 percent of the world's top 100 brands use more than two colors;
    the key here is to use as many colors as is suitable for your project. A good
    rule of thumb is to choose at least 2-3 colors to work with, alongside a neutral
    light or dark color for the background. We can then use Less to produce any shade
    needed from your choice of principal colors.
  prefs: []
  type: TYPE_NORMAL
- en: Using a photo as our source
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How often have you wondered where you will get that inspiration for a design?
    I'll bet the answer is frequently, and I'm willing to bet that photos will feature
    somewhere in this list of sources!
  prefs: []
  type: TYPE_NORMAL
- en: Photos are perfect as a source of inspiration. We can pick a principal color
    from it, then manually choose colors that would work. It can be a little hit and
    miss though; not every color scheme will work, but the key to using this method
    is experimenting until you find colors that would provide a good harmony in your
    design.
  prefs: []
  type: TYPE_NORMAL
- en: We can take a more pragmatic route though. Adobe released Kuler, a brilliant
    app (and website), to help choose suitable colors according to the type of palette
    we use.
  prefs: []
  type: TYPE_NORMAL
- en: We can either choose a color, then get Kuler to choose appropriate colors for
    us, or we can upload a photo of our choice and select suitable colors from it.
    In the following screenshot, we can see the results of selecting a color from
    a photo, such as the one used in my first book, *jQuery Tools UI Library*, published
    by *Packt Publishing*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using a photo as our source](img/00118.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In comparison, if we take the purple from far left (`#a67097`) and use it in
    Kuler''s color wheel, we get a completely different result, using the Analogous
    palette:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using a photo as our source](img/00119.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: It really comes down to what your project needs in terms of color; to help with
    this and understand the impact on your visitors, it is worth reading an article
    by Rachel Shillcock, on Tuts+, at [http://webdesign.tutsplus.com/articles/understanding-the-qualities-and-characteristics-of-color--webdesign-13292](http://webdesign.tutsplus.com/articles/understanding-the-qualities-and-characteristics-of-color--webdesign-13292).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a good source of inspiration, take a look at the palettes created on Kuler
    by others; they are at [https://kuler.adobe.com/explore/newest/](https://kuler.adobe.com/explore/newest/).
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a color using a tool, such as Kuler, can be an interesting experience.
    It opens up a world of possibilities, although one person's idea of harmony might
    not align with others! Choices, choices…
  prefs: []
  type: TYPE_NORMAL
- en: To help take some of the guesswork out of creating palettes, we can easily use
    the power of Less to create a suitable palette, based on our choice of color.
    Let's take a look at how this will work in practice.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a color palette using Less
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we've chosen our color scheme, we can get stuck into creating our palette.
    There are literally hundreds of tools available, but we want Less to do all the
    heavy lifting for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, I have a confession to make: while we can absolutely get Less to do the
    hard work for us, we still have to work out the formulae that generates our colors.
    Or do we?'
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, one kind soul, Jimmy King (a developer at Meltmedia) has already
    produced a very simple, yet brilliant tool for this purpose. If we head over to
    [http://jimmyking.me/colors.less](http://jimmyking.me/colors.less), not only can
    we set a color picker to our choice of color, but also get a preview of suitable
    colors that fit different types of palettes. What's more, we can even get the
    Less code to generate the colors to boot!
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s put this into action with a quick demo that uses our `#a67097` color
    from the previous exercise to create a Triadic-based color palette:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and extract a copy of `colorpalette.html` from the code that accompanies
    this book; we'll use this as a basis for our markup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In a separate file, add the following Less statements, beginning with creating
    variables that define our colors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: We've used the spin function in this step; spin is used to rotate the hue angle
    of an color in a HSV color wheel. You can learn more about this operation at [http://lesscss.org/functions/#color-operations-spin](http://lesscss.org/functions/#color-operations-spin).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, add the following mixins. Note that we can combine these with the color
    style rules shown further down in the code; I''ve separated these out for clarity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also need some basic font styling; this is not essential, but it helps make
    it look better! Go ahead and add the following mixin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''re almost done. Here come the most important mixins; these create the boxes
    and style them with the appropriate background colors:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to make the demo look a little more presentable, so go ahead and add
    the following styles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file as `colorpalette.less`. If we preview the results in a browser,
    we will see something akin to this screenshot:![Creating a color palette using
    Less](img/00120.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, you're probably thinking, "What's happened here?". Well, if we
    revert to Jimmy's tool, the keen-eyed among you should spot that I've used the
    formulae to produce a Triadic color palette. All we've done is packaged up the
    formulae into a small demo, where we're setting the background color for three
    boxes, based on the results of each formula.
  prefs: []
  type: TYPE_NORMAL
- en: Jimmy has produced formulae for a number of different palette types, so rather
    than reinvent the wheel, we can simply choose our principal color, then take a
    copy of the code automatically produced by the site once we've decided which palette
    to use! The key point though is that there is absolutely no room for debate as
    to whether the colors work; they are mathematically chosen to produce a harmonious
    palette.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When producing palettes, try to decide on and keep to a suitable naming convention.
    There are no hard and fast rules on format, but consistency and reuse is very
    much the order of the day!
  prefs: []
  type: TYPE_NORMAL
- en: So, we've seen how easy it is to produce color palettes and that Jimmy's tool
    makes it a cinch to get the all-important calculations needed to create each color.
    This gives me an idea… what if we were to ditch Photoshop and design in the browser
    instead?
  prefs: []
  type: TYPE_NORMAL
- en: Ditching old habits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What?? No—that would be absolutely impossible, I hear you say! We can't do that…
  prefs: []
  type: TYPE_NORMAL
- en: Or can we…? Well, surprising as it might sound, it is perfectly possible; what's
    more, Less can help make this a painless process. Let me explain.
  prefs: []
  type: TYPE_NORMAL
- en: Historically, designers and developers have relied on using Photoshop to create
    mockups of sites. "Nothing wrong in this", I hear you say. However, it doubles
    the work; clients can't use the design to see how it looks and works, and changes
    cannot be made on the fly. Also, Photoshop is expensive. We need a high-end PC
    or Mac just to get the full benefit from using it; can developers working on small
    sites, where costs are a concern, really justify the cost?
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, designing straight into the browser makes the process more dynamic;
    we can make changes quickly and easily, particularly if Less has been used! We
    can even produce several style sheets that can completely alter the appearance
    of a site with just a few clicks; creating designs in Photoshop means recreating
    the base view from the ground up for each subsequent design. With the best will
    in the world, there is always a risk that each design will have some slight differences,
    despite following the same process in each case!
  prefs: []
  type: TYPE_NORMAL
- en: However, we should not forget that the real key to design is actually not to
    concentrate on the color, but the content first. If we get that right, then the
    colors will fall easily into place.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To help get the feel of the mindset of designing in the browser, Creative Bloq
    has published an interview with web developer, Sean Fioritto, which is available
    at [http://www.creativebloq.com/css3/why-web-developers-should-sketch-css-not-photoshop-51411711](http://www.creativebloq.com/css3/why-web-developers-should-sketch-css-not-photoshop-51411711).
    This makes for an interesting read!
  prefs: []
  type: TYPE_NORMAL
- en: If, however, we really cannot afford to stop using Photoshop, then we can at
    least make our development workflow smarter. CSS Hat has made a plugin that can
    convert any design into the equivalent Less code and export them as Less files.
    It's available at [http://www.csshat.com](http://www.csshat.com), and versions
    are available for both Windows and Mac with licenses priced at 35 USD for both
    versions.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To see it in action, Kezz Bacey has written a two-part tutorial that shows how
    easy it is to use the plugin to produce Less code; part 1 of the tutorial is available
    at [http://webdesign.tutsplus.com/tutorials/how-to-improve-your-photoshop-workflow-with-csshat-and-pnghat--cms-20786](http://webdesign.tutsplus.com/tutorials/how-to-improve-your-photoshop-workflow-with-csshat-and-pnghat--cms-20786)
    and part 2 at [http://webdesign.tutsplus.com/tutorials/how-to-code-a-photoshop-layout-with-csshat-lesshat-and-pnghat--cms-20997](http://webdesign.tutsplus.com/tutorials/how-to-code-a-photoshop-layout-with-csshat-lesshat-and-pnghat--cms-20997).
  prefs: []
  type: TYPE_NORMAL
- en: We're almost at the end of our mini journey of working with colors in Less.
    Before we finish and move to look at animation in the next chapter, we need to
    take a look at some legal requirements that every designer should consider within
    their designs. This is, of course, the WCAG standards; let's take a look at these
    in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Working with W3C and WCAG standards
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Throughout this chapter, we''ve been on a journey of discovery, seeing how
    various different functions within Less can help simplify the work required to
    create new colors. There is one important part of creating colors that we have
    yet to cover and which designers must be aware of: the need to ensure compliance
    with the WCAG guidelines for accessibility.'
  prefs: []
  type: TYPE_NORMAL
- en: Overcoming blocks on access to a site
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this modern age, one would hope that all sites would be accessible to everyone;
    the truth is that this is not always the case. Access can be blocked for a number
    of reasons, and in terms of color, they are:'
  prefs: []
  type: TYPE_NORMAL
- en: Visitors who cannot differentiate between particular colors and therefore can't
    access information that relies on the use of those colors to convey meaning (for
    example, red/green color blindness)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visitors who need to use devices that can't display information that uses color
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visitors with color deficiencies, who struggle to see sites that have foreground
    and background colors that are very close in hue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, how can we get around these issues and ensure we produce a site that is
    accessible?
  prefs: []
  type: TYPE_NORMAL
- en: Introducing WCAG
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: WCAG has compiled an extensive list of guidelines to help guide designers through
    ensuring compliance, which can be viewed at [http://www.w3.org/TR/WCAG/](http://www.w3.org/TR/WCAG/).
    These need to be followed, although designers can opt to choose compliance at
    either A, Double-A, or Triple-A grade levels.
  prefs: []
  type: TYPE_NORMAL
- en: 'The WCAG recommendations make for dry reading, and there are, nevertheless,
    two key factors to consider, which in summary are:'
  prefs: []
  type: TYPE_NORMAL
- en: Colors should not be used as the only means of conveying any information; a
    green button marked **OK** is preferable to a simple green circle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text (and images of text) should have a contrast ratio of at least 4.5:1, except
    when large-scale text is used, or the text forms part of a decorative image or
    brand logo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To ensure that information is not likely to fall foul of WCAG compliance, we
    can use several guidelines:'
  prefs: []
  type: TYPE_NORMAL
- en: Avoid using colored text or strong background colors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Black text on white background is recommended (avoid using underlined text as
    your customers might think the text is a hyperlink when it is not)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use standard fonts (for example, Arial, Times New Roman)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uppercase text should not be used for entire page headings or blocks of text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition, we can use a number of tools to help us decide whether we have
    the right contrast levels. Two such examples are available at [http://www.dasplankton.de/ContrastA/](http://www.dasplankton.de/ContrastA/)
    and [http://webaim.org/resources/contrastchecker/](http://webaim.org/resources/contrastchecker/).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are plenty of resources available online for further reading, including
    case examples and guidelines issued for specific companies or government organizations.
    Some examples include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.w3.org/WAI/WCAG20/quickref/](http://www.w3.org/WAI/WCAG20/quickref/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.w3.org/TR/2008/REC-WCAG20-20081211/](http://www.w3.org/TR/2008/REC-WCAG20-20081211/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.w3.org/TR/compositing-1/](http://www.w3.org/TR/compositing-1/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is worth noting that the Less library has been modified to help compliance.
    Although it is not completely compliant yet, one example of change to help towards
    compliance is the pull request issued at [https://github.com/less/less.js/pull/1704](https://github.com/less/less.js/pull/1704);
    this deals with changes made to color functions within Less, such as multiply
    or overlay.
  prefs: []
  type: TYPE_NORMAL
- en: Making a site useable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Okay, this might seem like a strange question, given we've just talked about
    how to make sites compliant, right?
  prefs: []
  type: TYPE_NORMAL
- en: Well, yes and no. While researching for this book, I came across a brilliant
    discussion on Stack Overflow, which talks about ensuring compliance to the WCAG
    guidelines and why adhering to them can actually be detrimental to your site.
  prefs: []
  type: TYPE_NORMAL
- en: In a nutshell, the responder to the original question discusses the good work
    being done by the team behind the guidelines even though they are not perfect.
    He talks about the need to apply the guidelines with care and that only those
    that best suit a website should be used. He mentions that many people with disabilities
    will often find ways around information that is otherwise hidden from view, and
    that in some respects, they are the perfect individuals to help test the usability
    of a site!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can read the full discussion at [http://stackoverflow.com/questions/21415785/wcag-vs-real-users-opinions](http://stackoverflow.com/questions/21415785/wcag-vs-real-users-opinions).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Color management in Less can be seen as something of a paradox; while the tools
    are relatively simple to use, they can be used to produce complex designs that
    are only limited by the bounds of your imagination. Throughout this chapter, we've
    covered a number of tools that you can use to extract, mix, and blend colors.
    Let's take a moment to review what we have learned throughout this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We began with a little theory to set the scene and introduce color management;
    we also learned a little about color spaces and formats. Our delve into using
    Less began with a look at using simple arithmetic operators such as multiplication
    or division; this was swiftly followed by an introduction to the various color
    functions available in Less and how these functions compared to working with Photoshop.
  prefs: []
  type: TYPE_NORMAL
- en: Next up was an introduction to palettes and an analysis of some examples, to
    illustrate the importance of choosing colors carefully. This included using photos
    as a potential color source, which we then used to create a color palette using
    Less.
  prefs: []
  type: TYPE_NORMAL
- en: Next up came something that some might see as controversial, which was a look
    at ditching old habits and moving to using something like Less to develop straight
    into the browser. While some may argue this is not sensible, we covered some of
    the reasons why this practice might turn out to be beneficial; for those who couldn't
    face the move, we looked at a simple way of getting the Less styles created automatically
    from Photoshop. To close out the chapter, we took a look at how developers must
    adhere to the WCAG guidelines on the use of color, why they were devised, and
    how we need to be careful in applying them to our sites.
  prefs: []
  type: TYPE_NORMAL
- en: Phew! We certainly covered a lot! Let's move onto our next chapter, which will
    take a look at how we can use Less to simplify development of animation within
    our projects.
  prefs: []
  type: TYPE_NORMAL
