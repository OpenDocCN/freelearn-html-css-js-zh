["```js\n<div class=\"viewBackground\">\n    <div id=\"optionsView_contentArea\" style=\"padding: 0; height: auto; position: relative;\"></div>\n</div>\n```", "```js\n<div id=\"optionsView_actions\" class=\"hidden\">\n <div id=\"optionsView_changeControls\">\n  <div id=\"optionsView_tilt\" ontouchend=\"optionsView.selectTilt();\" ><img src=\"img/tilt.png\" width=128 height=128>\n    %TILT%\n  </div>\n  <div id=\"optionsView_slide\" ontouchend=\"optionsView.selectSlide();\"><img src=\"img/slide.png\" width=128 height=128>\n    %SLIDE%\n  </div>\n  </div>\n <div id=\"optionsView_backButton\" ontouchend=\"PKUI.CORE.popView();\" >%BACK%</div>\n</div>\n```", "```js\n#startView_contentArea,\n#optionsView_contentArea\n{\n  background-image: url('../images/splash.png') !important;\n  height: 100% !important;\n}\n```", "```js\n…\n#optionsView_backButton,\n…\n{\n  position: absolute;\n  left: 50px;\n  width: 200px;\n  background-color: #8BF;\n  height: 2em;\n  font-size: 24pt;\n  line-height: 1.75em;\n  text-align: center;\n  color: white;\n  border: 4px solid white;\n  border-radius: 1em;\n  text-shadow: 0 1px 1px #000;\n  box-shadow: 0px 10px 20px #000, 1px 1px 1px #000 inset;\n  -webkit-transform: rotate(-12deg);\n}\n```", "```js\n#optionsView_backButton\n{\n  top: 300px;\n  left: 32px;\n  -webkit-transform: rotate(12deg);\n}\n```", "```js\n#optionsView_changeControls\n{\n  position: absolute;\n  top: 120px;\n  left: 32px;\n  width: 256px;\n}\n```", "```js\n#optionsView_tilt,\n#optionsView_slide\n{\n  width: 128px;\n  text-align: center;\n  font-family: \"Bradley Hand\",sans-serif;\n  font-size: 24pt;\n  color: #FFFF80;\n  text-shadow: 0px -1px 1px #000;\n  height: 160px;\n  float: left;\n  color: #FFFFFF;\n}\n```", "```js\n#optionsView_tilt.selected,\n#optionsView_slide.selected\n{\n  color: #FFFF80;\n  background-color: rgba(255,255,255,0.25);\n  border-radius: 25px;\n}\n```", "```js\n  var optionsView = $ge(\"optionsView\") || {};\n\n  optionsView.initializeView = function()\n  {\n\n    $ge(\"optionsView_contentArea\").innerHTML =\n\n    PKUTIL.instanceOfTemplate ( $ge(\"optionsView_actions\"),\n    { \"tilt\": __T(\"TILT\"),\n    \"slide\": __T(\"SLIDE\"),\n    \"back\": __T(\"BACK\")\n    }\n    );\n\n    optionsView.displayControlSetting();\n\n  }\n```", "```js\n  optionsView.displayControlSetting = function ()\n  {\n    $ge(\"optionsView_slide\").className=\"\";\n    $ge(\"optionsView_tilt\").className=\"\";\n    if (localStorage.controlSetting)\n    {\n      // use the saved setting\n      if (localStorage.controlSetting == \"slide\")\n      {\n        $ge(\"optionsView_slide\").className=\"selected\";\n      }\n      else\n      {\n        $ge(\"optionsView_tilt\").className=\"selected\";\n      }\n    }\n    else\n    {\n      // default to the slide control option\n    $ge(\"optionsView_slide\").className=\"selected\";\n    }\n  }\n```", "```js\n  optionsView.selectTilt = function ()\n  {\n    localStorage.controlSetting = \"tilt\";\n    optionsView.displayControlSetting();\n  }\n\n  optionsView.selectSlide = function ()\n  {\n    localStorage.controlSetting = \"slide\";\n    optionsView.displayControlSetting();\n  }\n```", "```js\nfunction generateLevel ( lvl )\n{\n    points = new Array();\n    points[0] = new Array();\n    points[1] = new Array();\n    points[2] = new Array();\n    points[3] = new Array();\n```", "```js\n    …    \n\n    var lastLeft= (cWidth/5) ;\n    var lastRight=(cWidth/5) ;\n```", "```js\n    var bias = 0;\n```", "```js\n    var rndWidth = Math.floor(cWidth/ 10) + (lvl*10);\n```", "```js\n    var channelWidth = Math.floor(cWidth / 2.25) - (lvl*16);\n```", "```js\n    var wallChance = 0.75 - (lvl/25);\n    if (wallChance < 0.15) { wallChance = 0.15; };\n```", "```js\n    var wallEvery = Math.floor(30 - (lvl/2));\n    if (wallEvery < 10) { wallEvery = 10; };\n```", "```js\n    for (var i=0; i< Math.floor(300 + ( 125 * (lvl/2) )); i++)\n    { \n```", "```js\n        var newLeft = lastLeft + ( bias * (7+lvl) ) + ( (rndWidth/2) - Math.floor( Math.random()* (rndWidth+1) ) );\n        var newRight = lastRight + ( bias * (7+lvl) )  + ( (rndWidth/2) - Math.floor( Math.random()* (rndWidth+1) ) );\n```", "```js\n        if ( newLeft < 10 ) { newLeft = 10; bias = 1; }\n        if ( newLeft > (cWidth/1.5) ) { newLeft = cWidth/1.5; bias = -1; }\n        if ( cWidth - newRight < newLeft + channelWidth )\n        {\n          newRight = cWidth - ( newLeft + (channelWidth) );\n        }\n        if ( cWidth - newRight > newLeft + (channelWidth*1.5))\n        {\n          newRight = newRight + (Math.random() * rndWidth);\n        }\n        if ( newRight < 10 ) { newRight = 10; }\n        if ( newRight > (cWidth-10)) { newRight = cWidth-10; }\n```", "```js\n        points[0].push ( newLeft );\n        points[1].push ( newRight );\n\n        lastLeft = newLeft;\n        lastRight = newRight;\n```", "```js\n        if ( (i % wallEvery) == 0 && ( i > 30 ) )\n        {\n```", "```js\n            if (Math.random()>wallChance)\n            {\n```", "```js\n                var openingWidth = channelWidth/1.35;\n                var caveWidth = ((cWidth-newRight) - newLeft) - openingWidth;\n                var wallOpening = Math.floor ( Math.random() * caveWidth );\n                points[2].push ( newLeft + wallOpening );\n                points[3].push ( newLeft + wallOpening + openingWidth );\n```", "```js\n            }\n            else   \n               // no wall\n                points[2].push ( -1 );\n                points[3].push ( -1 );    \n            }\n        }\n        else   \n           // no wall\n            points[2].push ( -1 );\n            points[3].push ( -1 );    \n        }\n    }\n}\n```", "```js\nvar c = $ge(\"gameView_canvas\");\nvar ctx = c.getContext(\"2d\");\n\nc.setAttribute (\"width\", cWidth * window.devicePixelRatio);\nc.setAttribute (\"height\",cHeight * window.devicePixelRatio);\nc.setAttribute (\"left\", (screen.width/2) - (cWidth/2));\nc.style.width = \"\"+cWidth+\"px\"; \nc.style.height = \"\"+cHeight+\"px\";\n```", "```js\nfunction doAnim(timestamp)\n{ \n…\n\n    ctx.save();\n    ctx.scale (window.devicePixelRatio, window.devicePixelRatio);\n    ctx.fillStyle = \"#802010\";\n    ctx.strokeStyle = \"#A04020\";\n    ctx.clearRect ( 0, 0, cWidth, cHeight);\n```", "```js\n    for (var i=0; i<2; i++)\n    {\n        var pts;\n        var cLeft = -10;\n        if (i==0) { pts = points[0]; }\n        if (i==1) { pts = points[1]; cLeft = cWidth+10; }\n```", "```js\n        ctx.beginPath(); \n        ctx.moveTo ( cLeft, -pieceWidth );\n```", "```js\n        for (var j = Math.floor ( currentTop  / pieceWidth )-1; \n            j < Math.floor ( currentTop / pieceWidth ) + ( (cHeight+(2*pieceWidth)) / pieceWidth );\n            j++)\n        {\n```", "```js\n            var p = pts[j];\n            var y = (j * pieceWidth) - currentTop;\n```", "```js\n            if (i==1) { p = cWidth - p; }\n            ctx.lineTo ( p, y );\n```", "```js\n             if ( points[2][j] > -1 )\n            {\n              ctx.lineTo ( points[i+2][j], y );\n              ctx.lineTo ( points[i+2][j], y+pieceWidth );\n            }\n```", "```js\n        }\n        ctx.lineTo ( cLeft, ((cWidth+2)*pieceWidth) );\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n    }\n```", "```js\n    ctx.strokeStyle = \"#FFFFFF\";\n    ctx.beginPath();\n    ctx.moveTo ( shipPositionX-10, shipPositionY-5 );\n    ctx.lineTo ( shipPositionX+10, shipPositionY-5 );\n    ctx.lineTo ( shipPositionX   , shipPositionY+25 );\n    ctx.lineTo ( shipPositionX-10, shipPositionY-5 );\n    ctx.closePath();\n    ctx.stroke();\n```", "```js\n    ctx.fillStyle = \"#FFFF00\";\n    ctx.font = \"16px Helvetica\";\n    ctx.fillText ( \"Level: \" + currentLevel, 10, 30 );\n    ctx.fillText ( \"Distance: \" + Math.floor((currentTop / (points[0].length*pieceWidth))*100) + \"%\", 10, 48 );\n```", "```js\n    if (amTouching)\n    {\n      ctx.fillStyle = \"rgba(255,255,255,0.25)\";\n      ctx.beginPath();\n      ctx.arc ( lastTouchX, 400, 50, 0, 2*Math.PI, false );\n      ctx.closePath();\n      ctx.fill();\n    }\n    ctx.restore();\n\n…\n}\n```", "```js\nvar startTime;\nfunction doAnim(timestamp)\n{ \n    if (!timestamp) { \n    timestamp = (new Date()).getTime(); \n    }\n    var diff = timestamp - startTime;\n…\n    doUpdate ( 60/(1000/diff) );\n    startTime = timestamp;\n}\n```", "```js\nfunction doUpdate ( f )\n{\n```", "```js\n    var gameOver = false;\n    var levelOver = false;\n    var pixels = ctx.getImageData(Math.floor(shipPositionX * window.devicePixelRatio), \n    Math.floor(shipPositionY * window.devicePixelRatio),1,1).data;\n```", "```js\n    if ( pixels[0] != 0 )\n    {\n      $ge(\"gameView_nextButton\").innerHTML = __T(\"START_OVER\");\n      showMessage (__T('CRASHED'));\n      gameOver = true;\n      currentLevel = 0;\n    }\n```", "```js\n    if (f > 0 && f != Infinity)\n    {\n```", "```js\nif (controlMethod == 0)\n   {\n      if (buttonDown != 0)\n        {\n          if (Math.abs(shipAcceleration)<1)\n            { shipAcceleration = buttonDown; } \n              shipAcceleration = Math.min ( 10, shipAcceleration + ( buttonDown * deviceFactor) );\n              //shipAcceleration = buttonDown * 3;\n            }\n            else  \n            {\n              shipAcceleration = shipAcceleration / 1.5;\n              if (Math.abs(shipAcceleration)<0.25)\n              { shipAcceleration = 0; }\n            }\n            shipPositionX += (shipAcceleration*f);\n        }\n```", "```js\n      var speed = ((4+currentLevel) * (f));\n      currentTop+= speed;\n    }\n```", "```js\n    if ( Math.floor (currentTop/pieceWidth) > points[0].length )\n    {\n      $ge(\"gameView_nextButton\").innerHTML = __T(\"CONTINUE\");\n      showMessage (__T('NEXT_LEVEL'));\n      levelOver = true;\n    }\n```", "```js\n    if (!gameOver && !levelOver)\n    {\n      timer = setTimeout ( doAnim,17);\n    }\n}\n```", "```js\n    // check to see if our control method has changed\n    if (!localStorage.controlSetting)\n    {\n      localStorage.controlSetting = \"slide\";\n    }\n    controlMethod = ( (localStorage.controlSetting) == \"slide\" ? 0 : 1 );\n```", "```js\n    if (controlMethod == 0)\n    {\n      $ge(\"gameView_overlay\").addEventListener ( \"touchstart\", canvasTouchStart );\n      $ge(\"gameView_overlay\").addEventListener ( \"touchmove\",  canvasTouchMove  );\n      $ge(\"gameView_overlay\").addEventListener ( \"touchend\",   canvasTouchEnd   );\n    }\n```", "```js\nfunction canvasTouchStart (evt)\n{\n  lastTouchX = evt.touches[0].pageX;\n  amTouching = true;\n}\n```", "```js\nfunction canvasTouchMove (evt)\n{\n  if (touchTimer>-1) { clearTimeout(touchTimer); touchTimer = -1; }\n  var curTouchX = evt.touches[0].pageX;\n  var deltaX = curTouchX-lastTouchX;\n  if (Math.abs(deltaX)> 1)\n  {\n    buttonDown = ( (deltaX) / Math.abs(deltaX) ) / ( 8/Math.min(Math.abs(deltaX),8));\n    lastTouchX = curTouchX;\n  }\n  else\n  {\n    buttonDown = 0;\n  }\n  // if player stays in same spot, clear the button...\n  touchTimer = setTimeout ( function() { buttonDown = 0; }, 25 );\n}\n```", "```js\nfunction canvasTouchEnd (evt)\n{\n  buttonDown = 0;\n  amTouching = false;\n}\n```", "```js\ntiltWatch = navigator.accelerometer.watchAcceleration ( \n                    updateAccelerometer,\n                      accelerometerError,\n                      { frequency: 40 } );\n```", "```js\nnavigator.accelerometer.clearWatch (tiltWatch);\ntiltWatch = -1;\n```", "```js\nfunction updateAccelerometer ( a )\n{\n  if (amCalibrated)\n  {\n    var p = previousAccelerometer;\n    var avgX = (p.x * 0.7) + (a.x * 0.3);\n    previousAccelerometer = a;\n    previousAccelerometer.x = avgX;\n  }\n```", "```js\n  else\n  {\n    calibratedAccelerometer = a;\n    previousAccelerometer = a;\n    amCalibrated = true;\n  }\n}\n```", "```js\n    if (f > 0 && f != Infinity)\n    {\n        if (controlMethod == 0)\n        {             \n         …\n        }\n        else\n        {\n            // calculate the position based on the acceleromter data\n            if (amCalibrated)\n            {\n                shipPositionX = (window.innerWidth / 2) - (previousAccelerometer.x * 32);\n                if ( shipPositionX < 0 )\n                {\n                    shipPositionX = 0;\n                }\n                if ( shipPositionX > (window.innerWidth))\n                {\n                    shipPositionX = window.innerWidth;\n                }\n            }\n }\n\n```"]