["```js\n        {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Action\": [\n                \"mobileanalytics:PutEvents\",\n                \"cognito-sync:*\",\n                \"cognito-identity:*\"\n              ],\n              \"Resource\": [\"*\"]\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Action\": [\n                \"iot:Connect\",\n                \"iot:AttachPrincipalPolicy\"\n              ],\n              \"Resource\": [\"*\"]\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Action\": [\"iot:Subscribe\"],\n              \"Resource\": [\n \"arn:aws:iot:<region>:<account>:topicfilter/<public-topic>\",\n               \"arn:aws:iot:<region>:<account>:topicfilter/<private-topic>\"\n              ]\n            },\n            {\n              \"Effect\": \"Allow\",\n              \"Action\": [\n \"iot:Publish\",\n \"iot:Receive\"\n              ],\n              \"Resource\": [\n \"arn:aws:iot:<region>:<account>:topic/<public-topic>\",\n                \"arn:aws:iot:<region>:<account>:topic/<private-topic>\"\n              ]\n            }\n          ]\n        }\n\n```", "```js\n npm install amazon-cognito-identity-js --save\n\n```", "```js\n        export default {\n          \"cognito\": {\n            \"USER_POOL_ID\": \"YOUR_USER_POOL_ID\",\n            \"APP_CLIENT_ID\": \"YOUR_APP_CLIENT_ID\",\n            \"IDENTITY_POOL_ID\": \"YOUR_IDENTITY_POOL_ID\",\n            \"REGION\": \"YOUR_COGNITO_REGION\"\n          }\n        };\n\n```", "```js\n        import {\n          AuthenticationDetails,\n          CognitoUser,\n          CognitoUserAttribute,\n          CognitoUserPool\n        } from 'amazon-cognito-identity-js';\n\n```", "```js\n        signup(email, password, callback) {\n          const userPool = new CognitoUserPool({\n            UserPoolId: config.cognito.USER_POOL_ID,\n            ClientId: config.cognito.APP_CLIENT_ID\n          });\n\n          const attributeEmail = [\n            new CognitoUserAttribute({ \n              Name: 'email', \n              Value: email \n            })\n          ];\n\n userPool.signUp(email, \n                          password, \n                          attributeEmail,\n                          null, \n                          callback);\n        }\n\n```", "```js\n        handleSignup(email, password) {    \n          Services.signup(email, password, (err, res) => {\n            if (err) alert(err);\n            else this.setState({newUser: res.user});\n          });\n        }\n\n```", "```js\n        confirmSignup(newUser, code, callback) {\n newUser.confirmRegistration(code, true, callback);\n        }\n\n```", "```js\n        login(email, password) {\n          const userPool = new CognitoUserPool({\n            UserPoolId: config.cognito.USER_POOL_ID,\n            ClientId: config.cognito.APP_CLIENT_ID\n          });\n\n          const user = new CognitoUser({ \n            Username: email, \n            Pool: userPool \n          });\n\n          const authenticationData = {\n            Username: email,\n            Password: password\n          };\n\n          const authDetails = \n            new AuthenticationDetails(authenticationData);\n\n          return new Promise((resolve, reject) => {\n user.authenticateUser(authDetails, {\n              onSuccess: (res) => \n                resolve(res.getIdToken().getJwtToken()),\n              onFailture: (err) => reject(err)\n            });          });\n        }\n\n```", "```js\n        handleLogin(email, password) {\n          Services.login(email, password)\n            .then(res => {\n this.setState({userToken: res});\n            })\n            .catch(err => {\n              alert(err);\n            });\n        }\n\n```", "```js\n    getUserToken(callback) {\n\n      const userPool = new CognitoUserPool({\n        UserPoolId: config.cognito.USER_POOL_ID,\n        ClientId: config.cognito.APP_CLIENT_ID\n      });\n\n      const currentUser = userPool.getCurrentUser();\n\n      if (currentUser) {\n currentUser.getSession((err, res) => {\n if (err) \n            callback(err);\n else \n            callback(null, res.getIdToken().getJwtToken());\n });      } else {\n        callback(null);\n      }\n    }\n\n```", "```js\n    handleLogout() {\n      const userPool = new CognitoUserPool({\n        UserPoolId: config.cognito.USER_POOL_ID,\n        ClientId: config.cognito.APP_CLIENT_ID\n      });\n\n      const currentUser = userPool.getCurrentUser();\n      if (currentUser !== null) {\n currentUser.signOut();\n      }\n\n this.setState({userToken: null});\n    }\n\n```", "```js\n        functions:\n          products:\n            handler: functions/products.handler\n            events:\n              - http:\n method: POST\n path: cart\n authorizer:\n arn: YOUR_COGNITO_USER_POOL_ARN\n              - http: OPTIONS cart\n\n```", "```js\n        \"Accept-Control-Allow-Headers\":\n          \"Accept, Authorization, Content-Type, Origin\"\n\n```", "```js\n serverless deploy\n\n```", "```js\n        headers: {\n \"Authorization\": userToken\n        }\n\n```", "```js\n        module.exports.handler = (event, context, callback) => {\n\n          let userId = null;\n\n          if (event.requestContext.authorizer)\n userId = event.requestContext.authorizer.claims.sub;\n\n          // ...\n        }\n\n```", "```js\n b90d0bba-0b65-4455-ab5a-f30477430f46\n\n```"]