["```js\n    <input id=\"addressField\" type=\"text\" size=\"30\"  placeholder=\"Enter your Address\" />\n    <input type=\"button\" id=\"listAddressBtn\" value=\"Pin Address On Map\" />\n    <p id=\"placesText\"></p>\n    <ul id=\"addressList\" class=\"addressList\"></ul>\n    ```", "```js\n    var geocoder;\n    ```", "```js\n    geocoder = new google.maps.Geocoder();\n    ```", "```js\n    var listAddressBtn = document.getElementById('listAdressBtn');\n    listAddressBtn.addEventListener('click', function(){\n        listAddresses();\n    });\n    ```", "```js\n    function listAddresses() {\n        //get text input handler\n        var addressField = document.getElementById('addressField');\n        //get addressList <ul> element handle\n        var addressList = document.getElementById('addressList');\n        if (addressList.children.length === 0) {\n            var placesText = document.getElementById('placesText');\n            placesText.innerHTML = 'Places You Have Visited (Click on the place name to see on map):';\n        }\n        //create a list item\n        var listItem = document.createElement('li');\n        //get the text in the input element and make it a //list item\n        listItem.innerHTML = addressField.value;\n        listItem.addEventListener('click', function() {\n            geocodeAddress (listItem.innerHTML);\n        });\n        //append it to the <ul> element\n        addressList.appendChild(listItem);\n        //call the geocoding function\n        geocodeAddress(addressField.value);\n    }\n    ```", "```js\n    function geocodeAddress(addressText) {\n        //real essence, send the geocoding request\n        geocoder.geocode( {'address': addressText}, function(results, status) {\n            //if the service is working properly...\n            if (status == google.maps.GeocoderStatus.OK) {\n                //show the first result on map\n                pinpointResult(results[0]);\n            } else {\n                alert('Cannot geocode because: ' + status);\n            }\n        });\n    }\n    ```", "```js\n    function pinpointResult(result) {\n        var marker = new google.maps.Marker({\n            map: map,\n            position: result.geometry.location\n        });\n\n        map.setCenter(result.geometry.location);\n        map.setZoom(16);\n\n        //infowindow stuff\n        google.maps.event.addListener(marker, 'click', function() {\n            var popupContent = '<b>Address: </b> ' + result.formatted_address;\n            popup.setContent(popupContent);\n            popup.open(map, this);\n        });\n    }\n    ```", "```js\ngeocoder = new google.maps.Geocoder();\n```", "```js\ngeocoder.geocode( {'address': addressText}, function(results, status) {â€¦});\n```", "```js\nColosseum, Piazza del Colosseo, 1, 00184 Rome, Italy\n```", "```js\nColosseum, Enschede, The Netherlands\n```", "```js\n    function pinpointResult(result) {\n        var marker = new google.maps.Marker({\n            map: map,\n            position: result.geometry.location\n        });\n    ...\n    }\n```", "```js\n    geocoder.geocode({\n        'address': addressText,\n        'bounds': new google.maps.LatLngBounds(\n        new google.maps.LatLng(25.952910068468075, -15.93734749374994),\n        new google.maps.LatLng(57.607047845370246, 54.37515250625006)\n        )\n        },\n        function(results, status) {...}\n    );\n```", "```js\n    geocoder.geocode({\n        'address': addressText,\n        'region':'ve'},\n        function(results, status) {...}\n    );\n```", "```js\n    \"Bremerton, WA, USA\"\n```", "```js\n    [\"point_of_interest\", \"establishment\"]\n```", "```js\n    [\"route\"]\n```", "```js\n    [\"museum\", \"point_of_interest\", \"establishment\"]\n```", "```js\n    var geocoder;\n    ```", "```js\n    var popup;\n    ```", "```js\n    geocoder = new google.maps.Geocoder();\n    popup = new google.maps.InfoWindow();\n    ```", "```js\n    var drawingManager = new google.maps.drawing.DrawingManager(\n    {\n        //initial drawing tool to be enabled, we want to be in //no drawing mode at start\n        drawingMode:null,\n        //enable the drawingControl to be seen in the UI\n        drawingControl:true,\n        //select which drawing modes to be seen in the //drawingControl and position the drawingControl itself\n        drawingControlOptions: {\n            //select a control position in the UI\n            position: google.maps.ControlPosition.TOP_CENTER,\n            //selected drawing modes to be seen in the control\n            drawingModes:[\n            google.maps.drawing.OverlayType.MARKER\t\n            ]\n        }\n    });\n    ```", "```js\n    drawingManager.setMap(map);\n    ```", "```js\n    google.maps.event.addListener(drawingManager, 'markercomplete', function(marker) {\n        //get the LatLng object of the marker, it is necessary //for the geocoder\n        var markerPosition = marker.getPosition();\n        //reverse geocode the LatLng object to return the //addresses\n        geocoder.geocode({'latLng': markerPosition}, function(results, status) {\n            //if the service is working properly...\n            if (status == google.maps.GeocoderStatus.OK) {\n                //Array of results will return if everything //is OK\n                if (results) {\n                    //infowindow stuff\n                    showAddressOfResult(results[0],marker);\n                }\n            }\n            //if the service is not working, deal with it\n            else {\n                alert('Reverse Geocoding failed because: ' + status);\n            }\n        });\n    });\n    ```", "```js\n    function showAddressOfResult(result, marker) {\n        //set the center of the map the marker position\n        map.setCenter(marker.getPosition());\n        map.setZoom(13);\n\n        //create the InfoWindow content\n        var popupContent = '<b>Address: </b> ' + result.formatted_address;\n\n        //set the InfoWindow content and open it\n        popup.setContent(popupContent);\n        popup.open(map, marker);\n    }\n    ```", "```js\n    geocoder = new google.maps.Geocoder();\n```", "```js\n    geocoder.geocode({'latLng': markerPosition}, function(results, status) {\n    ...\n    });\n```", "```js\n    var markerPosition = marker.getPosition();\n```", "```js\n    function(results, status) {\n        ...\n    }\n```", "```js\n    if (status == google.maps.GeocoderStatus.OK) {\n        //Array of results will return if everything //is //OK\n        if (results) {\n            //infowindow stuff\n            showAddressOfResult(results[0], marker);\n        }\n    }\n```", "```js\n    results[0].formatted_address: \"764-768 5th Avenue, New York, NY 10019, USA\"\n    results[1].formatted_address: \"5 Av/West 60 - 59 St, New York, NY 10019, USA\"\n    results[2].formatted_address: \"New York, NY 10153, USA\"\n    results[3].formatted_address: \"5 Av/59 St, New York, NY 10022, USA\"\n    results[4].formatted_address: \"New York, NY 10019, USA\"\n    results[5].formatted_address: \"Midtown, New York, NY, USA\"\n    results[6].formatted_address: \"Manhattan, New York, NY, USA\"\n    results[7].formatted_address: \"New York, NY, USA\"\n    results[8].formatted_address: \"New York, NY, USA\"\n    ...\n    results[10].formatted_address: \"New York, USA\"\n    results[11].formatted_address: \"United States\"\n```", "```js\n    var elevator;\n    ```", "```js\n    var popup;\n    ```", "```js\n    elevator = new google.maps.ElevationService();\n    popup = new google.maps.InfoWindow();\n    ```", "```js\n    var drawingManager = new google.maps.drawing.DrawingManager(\n    {\n        //initial drawing tool to be enabled, we want to be in //no drawing mode at start\n        drawingMode:null,\n        //enable the drawingControl to be seen in the UI\n        drawingControl:true,\n        //select which drawing modes to be seen in the //drawingControl and position the drawingControl itself\n        drawingControlOptions: {\n            //select a control position in the UI\n            position: google.maps.ControlPosition.TOP_CENTER,\n            //selected drawing modes to be seen in the control\n            drawingModes: [\n            google.maps.drawing.OverlayType.MARKER\t\n            ]\n        }\n    });\n    ```", "```js\n    drawingManager.setMap(map);\n    ```", "```js\n    google.maps.event.addListener(drawingManager, 'markercomplete', function(marker) {\n        //get the LatLng object of the marker, it is necessary //for the geocoder\n        var markerPosition = marker.getPosition();\n        //embed the marker position in an array\n        var markerPositions = [markerPosition];\n        //send the elevation request and get the results in the //callback function\n        elevator.getElevationForLocations({'locations': markerPositions}, function(results, status) {\n            //if the service is working properly...\n            if (status == google.maps.ElevationStatus.OK) {\n                //Array of results will return if everything //is OK\n                if (results) {\n                    //infowindow stuff\n                    showElevationOfResult(results[0], marker);\n                }\n            }\n            //if the service is not working, deal with it\n            else {\n                alert('Elevation request failed because: ' + status);\n            }\n        });\n    });\n    ```", "```js\n    function showElevationOfResult(result, marker) {\n        //set the center of the map the marker position\n        map.setCenter(marker.getPosition());\n        map.setZoom(13);\n\n        //create the InfoWindow content\n        var popupContent = '<b>Elevation: </b> ' + result.elevation;\n\n        //set the InfoWindow content and open it\n        popup.setContent(popupContent);\n        popup.open(map, marker);\n    }\n    ```", "```js\nelevator = new google.maps.ElevationService();\n```", "```js\nelevator.getElevationForLocations({'locations': markerPositions}, function(results, status) {\n...});\n```", "```js\n    google.maps.event.addListener(drawingManager, 'markercomplete',   function(marker)\n    {...});\n```", "```js\n    var markerPosition = marker.getPosition();\n    var markerPositions = [markerPosition];\n```", "```js\n    function(results, status) {\n        //if the service is working properly...\n        if (status == google.maps.ElevationStatus.OK) {\n            //Array of results will return if everything //is OK\n            if (results) {\n                //infowindow stuff\n                showElevationOfResult(results[0],marker);\n            }\n        }\n        //if the service is not working, deal with it\n        else {\n            alert('Elevation request failed because: ' + status);\n        }\n    }\n```", "```js\n    var popupContent = '<b>Elevation: </b> ' + result.elevation;\n```", "```js\n    <input type=\"button\" id =\"generateDistanceMatrix\" value=\"Generate Distance Matrix\" />\n    ```", "```js\n    //define an array that includes all origin LatLng objects\n    var originLatLngs;\n    //define an array that includes all destination LatLng objects\n    var destinationLatLngs;\n    //define a global DistanceMatrixService object\n    var distanceMatrixService;\n    //define a global markerCount variable\n    var markerCount;\n    //define a global matrixResultDiv variable\n    var matrixResultDiv;\n    ```", "```js\n    //initialize originLatLngs array\n    originLatLngs = [];\n    //initialize destinationLatLngs array\n    destinationLatLngs = [];\n    //initialize markerCount - the count of markers to be drawn\n    markerCount = 0;\n    //assign matrixResultDiv to the specific div element\n    matrixResultDiv = document.getElementById('matrixResultDiv');\n    ```", "```js\n    var generateDistanceMatrixBtn = document.getElementById('generateDistanceMatrix');\n    generateDistanceMatrixBtn.addEventListener('click', function(){\n        makeDistanceMatrixRequest();\n    });\n    ```", "```js\n    distanceMatrixService = new google.maps.DistanceMatrixService();\n    ```", "```js\n    var drawingManager = new google.maps.drawing.DrawingManager(\n    {\n        //initial drawing tool to be enabled, we want to be in //no drawing mode at start\n        drawingMode: null,\n        //enable the drawingControl to be seen in the UI\n        drawingControl: true,\n        //select which drawing modes to be seen in the //drawingControl and position the drawingControl itself\n        drawingControlOptions: {\n            //select a control position in the UI\n            position: google.maps.ControlPosition.TOP_CENTER,\n            //selected drawing modes to be seen in the control\n            drawingModes: [\n            google.maps.drawing.OverlayType.MARKER\n            ]\n        }\n    });\n    ```", "```js\n    drawingManager.setMap(map);\n    ```", "```js\n    google.maps.event.addListener(drawingManager, 'markercomplete', function(marker) {\n        //count the number of markers drawn\n        markerCount++;\n\n        //limit the number of markers to 10\n        if (markerCount > 10) {\n            alert('No more origins or destinations allowed');\n            drawingManager.setMap(null);\n            marker.setMap(null);\n            return;\n        }\n\n        //distinguish the markers, make the blue ones be //destinations and red ones origins\n        if (markerCount % 2 === 0) {\n            destinationLatLngs.push(marker.getPosition());\n            marker.setIcon('icons/b' + destinationLatLngs.length + '.png');\n        }\n        else {\n            originLatLngs.push(marker.getPosition());\n            marker.setIcon('icons/r' + originLatLngs.length + '.png');\n        }\n    });\n    ```", "```js\n    function makeDistanceMatrixRequest() {\n        distanceMatrixService.getDistanceMatrix(\n            {\n                origins: originLatLngs,\n                destinations: destinationLatLngs,\n                travelMode: google.maps.TravelMode.DRIVING,\n            },\n            getDistanceMatrixResult\n        );\n    }\n    ```", "```js\n    function getDistanceMatrixResult(result, status) {\n        //clear the div contents where matrix results will be //written\n        matrixResultDiv.innerHTML = '';\n\n        //if everything is OK\n        if (status == google.maps.DistanceMatrixStatus.OK) {\n            //get the array of originAddresses\n            var originAddresses = result.originAddresses;\n            //get the array of destinationAddresses\n            var destinationAddresses = result.destinationAddresses;\n\n            //there are two loops, the outer is for origins, //the inner will be for destinations,\n            //their intersection will be the element object //itself\n            for (var i = 0, l= originAddresses.length; i < l; i++) {\n                //get the elements array\n                var elements = result.rows[i].elements;\n                for (var j = 0, m= elements.length;  j < m; j++) {\n                    var originAddress = originAddresses[i];\n                    var destinationAddress = destinationAddresses[j];\n                    //get the element object\n                    var element = elements[j];\n\n                    //get distance and duration properties for //the element object\n                    var distance =  element.distance.text;\n                    var duration = element.duration.text;\n                    //write the results to the div for each //element object\n\n                    writeDistanceMatrixResultOnDiv(originAddress, destinationAddress, distance, duration, i, j);\n                }\n            }\n        }\n    else {\n            alert('Cannot find distance matrix because: ' + status);\n        }\n    }\n    ```", "```js\n    function writeDistanceMatrixResultOnDiv(originAddress, destinationAddress, distance, duration, originAddressCount, destinationAddressCount) {\n        //get the existing content\n        var existingContent = matrixResultDiv.innerHTML;\n\n        var newContent;\n        //write the Origin Address and Destination Address //together with travel distance and duration\n        newContent = '<b>Origin ' + letterForCount(originAddressCount) + ' :</b><br />';\n        newContent += originAddress + '<br />';\n        newContent += '<b>Destination ' + letterForCount(destinationAddressCount) + ' :</b><br />';\n        newContent += destinationAddress + '<br />';\n        newContent += '<b>Distance: </b> ' + distance + '<br />';\n        newContent += '<b>Duration: </b> ' + duration + '<br />';\n        newContent += '<br />';\n\n        //add the newContent to the existingContent of the //matrixResultDiv\n        matrixResultDiv.innerHTML = existingContent + newContent;\n    }\n    ```", "```js\n    function letterForCount(count)\n    {\n        switch (count)\n        {\n            case 0:\n            return 'A';\n            case 1:\n            return 'B';\n            case 2:\n            return 'C';\n            case 3:\n            return 'D';\n            case 4:\n            return 'E';\n            default:\n            return null;\n        }\n    }\n    ```", "```js\n    distanceMatrixService = new google.maps.DistanceMatrixService();\n```", "```js\n    function makeDistanceMatrixRequest() {\n        distanceMatrixService.getDistanceMatrix(\n        {\n            origins: originLatLngs,\n            destinations: destinationLatLngs,\n            travelMode: google.maps.TravelMode.DRIVING,\n        },\n        getDistanceMatrixResult\n    );\n}\n```", "```js\n    if (markerCount % 2 === 0) {\n        destinationLatLngs.push(marker.getPosition());\n\n    }\n    else {\n        originLatLngs.push(marker.getPosition());\n\n  }\n```", "```js\n    function getDistanceMatrixResult(result, status)\n    {...}\n```", "```js\n    if (status == google.maps.DistanceMatrixStatus.OK)\n    {...}\n```", "```js\n    var originAddresses = result.originAddresses;\n    var destinationAddresses = result.destinationAddresses;\n```", "```js\n    for (var i = 0, l=originAddresses.length; i < l; i++) {\n        //get the elements array\n        var elements = result.rows[i].elements;\n        for (var j = 0, m=elements.length;j < m; j++) {\n            ...\n            var element = elements[j];\n                    ...\n        }\n    }\n```", "```js\n    var distance =  element.distance.text;\n    var duration = element.duration.text;\n```", "```js\n    <div id=\"DirectionsContainerDiv\">\n        <div id=\"PlacesContainerDiv\">\n            <b>Get Directions Between your Places</b></br>\n            <input id=\"addressField\" type=\"text\" size=\"30\"  placeholder=\"Enter your Address\" />\n            <input type=\"button\" id =\"pinAddressOnMapBtn\" value=\"Pin Address On Map\" onclick=\"listAddresses()\" />\n            <input type=\"button\" id = \"getDirectionsBtn\" disabled value=\"Get Directions\" onclick=\"getDirections()\" />\n            <p id=\"placesText\"></p>\n            <ul id=\"addressList\" class=\"addressList\">\n            </ul>\n        </div>\n        <div id=\"DirectionsListContainerDiv\">\n            <div id=\"DirectionsListDiv\">\n            </div>\n        </div>\n    </div>\n    ```", "```js\n    //define global marker popup variable\n    var popup;\n    //define global geocoder object\n    var geocoder;\n    //define global markers array\n    var markers;\n    //define global DirectionsService object\n    var directionsService;\n    //define global DirectionsRenderer object\n    var directionsRenderer;\n    ```", "```js\n    //initialize geocoder object\n    geocoder = new google.maps.Geocoder();\n    //initialize markers array\n    markers = [];\n    //initialize directionsService object\n    directionsService = new google.maps.DirectionsService();\n    //initialize directionsRenderer object\n    directionsRenderer = new google.maps.DirectionsRenderer();\n    ```", "```js\n    //directionsRenderer will draw the directions on current //map\n    directionsRenderer.setMap(map);\n    //directionsRenderer will list the textual description of //the directions\n    //on directionsDiv HTML element\n    directionsRenderer.setPanel(document.getElementById('DirectionsListDiv'));\n    ```", "```js\n    function listAddresses() {\n        //get text input handler\n        var addressField = document.getElementById('addressField');\n        //get addressList <ul> element handle\n        var addressList = document.getElementById('addressList');\n        if (addressList.children.length == 0) {\n            var placesText = document.getElementById('placesText');\n            placesText.innerHTML = 'Places You Have Visited (Click on the place name to see on map):';\n        }\n        //create a list item\n        var listItem = document.createElement('li');\n        //get the text in the input element and make it a list //item\n        listItem.innerHTML = addressField.value;\n        listItem.addEventListener('click', function() {\n            pinAddressOnMap(listItem.innerHTML);\n        });\n        //append it to the <ul> element\n        addressList.appendChild(listItem);\n        //call the geocoding function\n        pinAddressOnMap(addressField.value);\n        if (addressList.children.length > 1) {\n            //get getDirectionsBtn button handler\n            var getDirectionsBtn = document.getElementById('getDirectionsBtn');\n            //enable the getDirectionsBtn\n            getDirectionsBtn.disabled = false;\n        }\n        addressField.value = '';\n    }\n    ```", "```js\n    function pinAddressOnMap(addressText) {\n        //real essence, send the geocoding request\n        geocoder.geocode({'address': addressText}, function(results, status) {\n            //if the service is working properly...\n            if (status == google.maps.GeocoderStatus.OK) {\n                //show the first result on map\n                pinpointResult(results[0]);\n            } else {\n                alert('Cannot geocode because: ' + status);\n            }\n        });\n    }\n    ```", "```js\n    function pinpointResult(result) {\n        var marker = new google.maps.Marker({\n            map: map,\n            position: result.geometry.location,\n            zIndex: -10\n        });\n\n        map.setCenter(result.geometry.location);\n        map.setZoom(16);\n\n        //infowindow stuff\n        google.maps.event.addListener(marker, 'click', function() {\n            var popupContent = '<b>Address: </b> ' + result.formatted_address;\n            popup.setContent(popupContent);\n            popup.open(map, this);\n        });\n        markers.push(marker);\n    }\n    ```", "```js\n    function getDirections() {\n        //define an array that will hold all the waypoints\n        var waypnts = [];\n        //define a directionsRequest object\n        var directionRequest;\n\n        //if there are stops other than the origin and the //final destination\n        if (markers.length > 2) {\n            for (i=1;i<=markers.length-2;i++) {\n                //add them to the waypnts array\n                waypnts.push({\n                    location: markers[i].getPosition(),\n                    stopover: true\n                });\n            }\n\n            //prepare the directionsRequest by including //the waypoints property\n            directionRequest = {\n               origin:markers[0].getPosition(),\n               destination: markers[markers.length-1].getPosition(),\n              waypoints: waypnts,\n              travelMode: google.maps.TravelMode.DRIVING\n            };\n        }\n        else {\n            //this time, do not include the waypoints property as //there are no waypoints\n            directionRequest = {\n                origin:markers[0].getPosition(),\n                destination:markers[markers.length-1].getPosition(),\n                travelMode: google.maps.TravelMode.DRIVING\n            };\n        }\n\n        //send the request to the directionsService\n        directionsService.route(directionRequest, function(result, status) {\n            if (status == google.maps.DirectionsStatus.OK) {\n                directionsRenderer.setDirections(result);\n            }\n            else\n            {\n                alert('Cannot find directions because: ' + status);\n            }\n        });\n    }\n    ```", "```js\n    function pinpointResult(result) {\n        ...\n        markers.push(marker);\n    }\n```", "```js\n    function listAddresses()\n    {\n        ...\n        if (addressList.children.length > 1) {\n            //get getDirectionsBtn button handler\n            var getDirectionsBtn = document.getElementById('getDirectionsBtn');\n            //enable the getDirectionsBtn\n            getDirectionsBtn.disabled = false;\n        }\n        ...\n    }\n```", "```js\n    directionsService = new google.maps.DirectionsService();\n    directionsRenderer = new google.maps.DirectionsRenderer();\n```", "```js\nfunction getDirections() {\n    ...\n    //if there are stops other than the origin and the //final destination\n    if (markers.length > 2)\n    {\n        for (var i=1, markers.length;i<=l-2;i++)\n        {\n            //add them to the waypnts array\n            waypnts.push({\n                location: markers[i].getPosition(),\n                stopover: true\n            });\n        }\n\n        //prepare the directionsRequest by including //the waypoints property\n        directionRequest = {\n            origin:markers[0].getPosition(),\n            destination:markers[markers.length-1].getPosition(),\n            waypoints: waypnts,\n            travelMode: google.maps.TravelMode.DRIVING\n        };\n    }\n    else\n    {\n        //this time, do not include the waypoints property as //there are no waypoints\n        directionRequest = {\n            origin:markers[0].getPosition(),\n            destination:markers[markers.length-1].getPosition(),\n            travelMode: google.maps.TravelMode.DRIVING\n        };\n    }\n    ...\n}\n```", "```js\n    function getDirections() {\n        ...\n        //send the request to the directionsService\n        directionsService.route(directionRequest, function(result, status) {\n            if (status == google.maps.DirectionsStatus.OK) {\n                directionsRenderer.setDirections(result);\n            }\n            else\n            {\n                alert('Cannot find directions because: ' + status);\n            }\n        });\n    }\n```", "```js\n    directionsRenderer.setDirections(result);\n```", "```js\n    directionsRenderer.setMap(map);\n    directionsRenderer.setPanel(document.getElementById('DirectionsListDiv'));\n```", "```js\n    <div id=\"addressDiv\">\n        <b>Map your Holiday Places</b><br />\n        <input id=\"addressField\" type=\"text\" size=\"30\"placeholder=\"Enter your Address\" />\n        <input type=\"button\" id=\"pinAddress\" value=\"Pin Address On Map\" onclick=\"listAddresses()\">\n        <input type=\"button\" value=\"Show Map\" onclick=\"showMap()\">\n        <input type=\"button\" value=\"Show StreetView\" onclick=\"showStreetView()\">\n        <p id=\"placesText\"></p>\n        <ul id=\"addressList\" class=\"addressList\">\n        </ul>\n    </div>\n    ```", "```js\n    var geocoder;\n    var streetView;\n    ```", "```js\n    geocoder = new google.maps.Geocoder();\n    //initialize streetView object of type StreetViewPanorama\n    streetView = map.getStreetView();\n    ```", "```js\n    function listAddresses() {\n        //get text input handler\n        var addressField = document.getElementById('addressField');\n        //get addressList <ul> element handle\n        var addressList = document.getElementById('addressList');\n        if (addressList.children.length == 0) {\n            var placesText = document.getElementById('placesText');\n            placesText.innerHTML = 'Places You Have Visited (Click on the place name to see on map):';\n        }\n        //create a list item\n        var listItem = document.createElement('li');\n        //get the text in the input element and make it// a list item\n        listItem.innerHTML = addressField.value;\n        listItem.addEventListener('click', function() {\n            pinAddressOnMapOrStreetView(listItem.innerHTML);\n        });\n        //append it to the <ul> element\n        addressList.appendChild(listItem);\n        //call the geocoding function\n        pinAddressOnMapOrStreetView(addressField.value);\n    }\n    ```", "```js\n    function pinAddressOnMapOrStreetView(addressText) {\n        //send the geocoding request\n        geocoder.geocode({'address': addressText}, function(results, status) {\n            //if the service is working properly...\n            if (status == google.maps.GeocoderStatus.OK) {\n                //show the first result on map, either on\n                showAddressMarkerOnMapOrStreetView(results[0]);\n                if (streetView.getVisible())\n                {\n                    //set the streetView properties, its //location and \"Point Of View\"\n                    setStreetViewOptions(results[0].geometry.location);\n                }\n            } else {\n                alert('Cannot geocode because: ' + status);\n            }\n        });\n    }\n    ```", "```js\n    function showAddressMarkerOnMapOrStreetView(result) {\n        var marker = new google.maps.Marker({\n            map:map,\n            position: result.geometry.location\n        });\n        map.setCenter(result.geometry.location);\n        map.setZoom(16);\n    }\n    ```", "```js\n    function setStreetViewOptions(location)\n    {\n        //set the location of the streetView object\n        streetView.setPosition(location);\n        //set the \"Point Of View\" of streetView object\n        streetView.setPov({\n            heading: 0,\n            pitch: 10\n        });\n    }\n    ```", "```js\n    function showMap()\n    {\n        var pinAddressBtn = document.getElementById('pinAddress');\n        pinAddressBtn.value = 'Pin Address On Map';\n        streetView.setVisible(false);\n    }\n    ```", "```js\n    function showStreetView() {\n        var pinAddressBtn = document.getElementById('pinAddress');\n        pinAddressBtn.value = 'Pin Address On StreetView';\n        setStreetViewOptions(map.getCenter());\n        streetView.setVisible(true);\n    }\n    ```", "```js\n    streetView = map.getStreetView();\n```", "```js\n    setStreetViewOptions(map.getCenter());\n```", "```js\n    function setStreetViewOptions(location) {\n        //set the location of the streetView object\n        streetView.setPosition(location);\n        //set the \"Point Of View\" of streetView object\n        streetView.setPov({\n            heading: 0,\n            pitch: 10\n        });\n    }\n```"]