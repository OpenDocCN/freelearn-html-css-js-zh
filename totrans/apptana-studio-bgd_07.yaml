- en: Chapter 7. Using JavaScript Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*While developing a web application, nearly every developer uses their own
    or another public JavaScript framework or library, because no one wants to do
    all the required script coding again and again. The wheel does not have any time
    to be reinvented!*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Another pro is, of course, that popular JavaScript frameworks such as Dojo
    Toolkit, jQuery, or ExtJS are already proofed across browsers , making their use
    more attractive.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Therefore, we want to easily integrate libraries from other developers or
    use our own existing libraries.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will cover the requirements for including JavaScript libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: Using jQuery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Dojo Toolkit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using ExtJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requirements for including a JavaScript library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to make Aptana Studio work with the JavaScript library, some requirements
    must be met so that this library can provide information to the Aptana Studio
    Content Assist.
  prefs: []
  type: TYPE_NORMAL
- en: 'The library you want to integrate must have either of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A JSCA 1.0 specification file. You can read more about it on [https://wiki.appcelerator.org/display/tis/JSCA+1.0+Specification](https://wiki.appcelerator.org/display/tis/JSCA+1.0+Specification).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Script comments can also be read using the ScriptDoc specifications, as we have
    already described in a previous chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **Virtual Studio Documentation** (**VSDoc**) for JavaScript.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Using an Aptana Studio 2.X Code Assist XML file**'
  prefs: []
  type: TYPE_NORMAL
- en: You can also use an Aptana Studio 2.X Code Assist XML file. In such a case,
    you just have to rename the file extension to `.sdocml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A further requirement is that the project must have one of the following types:'
  prefs: []
  type: TYPE_NORMAL
- en: Web
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PHP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ruby
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rails
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The reason that we need one of these project types is that (as discussed in
    [Chapter 3](ch03.html "Chapter 3. Working with Workspaces and Projects"), *Working
    with Workspaces and Projects*) each one of them is able to access and add different
    features to a project.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 3](ch03.html "Chapter 3. Working with Workspaces and Projects"),
    *Working with Workspaces and Projects*, you can read about how to create a project
    in one of these types, or how to change the type of project.
  prefs: []
  type: TYPE_NORMAL
- en: Using jQuery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: jQuery is one of the most popular JavaScript libraries. jQuery is a free and
    very extensive library that provides many comfortable functions for DOM manipulation
    and navigation.
  prefs: []
  type: TYPE_NORMAL
- en: As the name suggests, it started as a JavaScript query library and today provides
    a huge number of plugins and even a complete UI package.
  prefs: []
  type: TYPE_NORMAL
- en: You can get it from the jQuery website at [http://docs.jquery.com/Downloading_jQuery](http://docs.jquery.com/Downloading_jQuery).
  prefs: []
  type: TYPE_NORMAL
- en: Before we start to integrate jQuery, we can also install the additional jQuery
    bundle. This does not take long and only needs to be installed once. After installation,
    the Content Assist provides us with additional useful jQuery snippets and commands.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – installing the jQuery bundle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install the jQuery bundle, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the menu, navigate to **Commands** | **Bundle Development** | **Install Bundle**.![Time
    for action – installing the jQuery bundle](img/8246_07_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **jQuery** entry and click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, Aptana Studio pulls the jQuery ruble from github and integrates it into
    the system.![Time for action – installing the jQuery bundle](img/8246_07_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Cloning the Git Repository failed?**'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you receive an error such as **fatal: Unable to look up github.com**, just
    check your DNS setting and make sure that the github domain is correctly resolved.'
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just installed the jQuery bundle directly from the Aptana Git Repository.
    Aptana Studio has integrated it automatically into the system so that you receive
    many further jQuery specific Content Assist entries. From now on, you will find
    a **jQuery** entry within the **Commands** menu, which contains the jQuery bundle
    with all their snippets and some commands.
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/8246_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have installed the jQuery bundle, we will go on and integrate the
    jQuery library.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – integrating jQuery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will see how to integrate jQuery. To do this, refer to
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new web project named `Using JavaScript Libraries - jQuery`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the jQuery source and save it under `jquery-release-1.7.2-src`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a folder named `jquery-vsdoc-*version*` (replace `*version*` with your
    jQuery version), in our case `jquery-vsdoc-1.7.2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we have to download the relevant VSDoc file. You can download this from
    the website at [http://appendto.com/community/jquery-vsdoc](http://appendto.com/community/jquery-vsdoc).
    Now just select your version and click on the **VSDOC** link, in our case on **jQuery
    1.7.2 VSDOC**, and save the file into the `jquery-vsdoc-1.7.2` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, you must drag the VSDOC file into your `Project` folder, otherwise
    the Content Assist will not provide you with the information from the VSDOC file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why does Content Assist not work? If Content Assist did not provide any jQuery
    functions or some other functions, maybe you have not integrated the VSDoc file
    via drag-and-drop into your project. As a quick solution, you could just drag-and-drop
    the file into another project and then back to the current project.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have integrated the jQuery VSDoc file into our web project. From now on,
    the Content Assist will provide us with all of the available jQuery functions
    from the current scope.
  prefs: []
  type: TYPE_NORMAL
- en: So if, for example, you type `$(d)` and place the cursor behind the `d` variable,
    you can then trigger the Content Assist by pressing *Ctrl* + Space bar; the Content
    Assist will then give you some suggestions.
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/8246_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You could then place the cursor, for example, behind a `$(document)` entry,
    and trigger the Content Assist once more. Now the Content Assist will also provide
    you with all available jQuery functions.
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/8246_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Easy, isn't it? No more searching within the documentation because you didn't
    know which functions were available or how they should have been written—now you
    can just navigate through the list of all functions and properties and select
    the required one.
  prefs: []
  type: TYPE_NORMAL
- en: Using Dojo Toolkit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dojo Toolkit is a solid JavaScript toolkit that provides many home-made components,
    plugins, and widgets. All of them are internationalized and, as the Dojo team
    says, *unbeatable*. It has already been thoroughly tested in all major browsers
    and is appropriate for programming a variety of applications, from large web applications
    to mobile applications.
  prefs: []
  type: TYPE_NORMAL
- en: You can get it from the Dojo Toolkit website at [http://dojotoolkit.org/download/](http://dojotoolkit.org/download/).
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – integrating the Dojo Toolkit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps show how to integrate the Dojo Toolkit:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new web project named `Using JavaScript Libraries - Dojo`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the Dojo Toolkit source and extract it into a folder, for example,
    `dojo-release-1.7.2-src`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the folder that contains the Dojo Toolkit source into your `Project` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a folder named `dojo-sdocml-*version*` (replace `*version*` with your
    Dojo Toolkit version), in our case `dojo-sdocml-1.7.2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After the preceding steps, your project should look like the following screenshot
    in your **Project Explorer** view:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – integrating the Dojo Toolkit](img/8246_07_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: In order to use the Dojo Toolkit within Aptana Studio, we have to create a SDOCML
    file for it, because its documentation isn't created in ScriptDoc.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you want to use version 1.6.0 of the Dojo Toolkit, it can be downloaded at
    [https://raw.github.com/aptana/dojo.ruble/master/support/dojo.1.6.0.sdocml](https://raw.github.com/aptana/dojo.ruble/master/support/dojo.1.6.0.sdocml),
    and version 1.7.0 at [https://github.com/gigi81/studio3-sdk/blob/master/tools/frameworks/dojo/1.7/api.sdocml](https://github.com/gigi81/studio3-sdk/blob/master/tools/frameworks/dojo/1.7/api.sdocml).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you want to use another version, you might have to create your own. But don't
    be afraid, it's very easy. If you are going to use one of the the Dojo Toolkit
    SDOCML files, please skip to step 10.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first step is to download the current API file. The API file contains a
    complete list of all of the packages and functions of the Dojo Toolkit, which
    is more than 7 MB and has more than 213 thousand lines. You can find this file
    on the Dojo Toolkit website at [http://download.dojotoolkit.org/release-*version*/api.xml](http://download.dojotoolkit.org/release-*version*/api.xml).
    Just replace `*version*` with your Dojo Toolkit version. In our case, we are using
    the current version, that is 1.7.2; therefore, we download the following file
    from [http://download.dojotoolkit.org/release-1.7.2/api.xml](http://download.dojotoolkit.org/release-1.7.2/api.xml).
    Save the file into the `dojo-sdocml-1.7.2` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to convert the API file into the required SDOCML file. Because the
    API file is a simple XML file, we can do this with an XSL transformation. You
    can download this XSL file for the conversion at [https://raw.github.com/aptana/studio3-sdk/master/tools/frameworks/dojo/1.6/update_dojo_metadata_1.6.xsl](https://raw.github.com/aptana/studio3-sdk/master/tools/frameworks/dojo/1.6/update_dojo_metadata_1.6.xsl).
    This XSL file was created for version 1.6.0 of the Dojo Toolkit, but it also works
    for newer versions. Just save it into the same location as the API file (into
    the `dojo-sdocml-1.7.2` directory). For transforming the API file using the XSL
    file into the required SDOCML file, you need the `xsltproc` package. You can install
    it, If you have not already done so, do this simply with `apt-get`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you''re using a Windows operating system, just navigate to the [http://xmlsoft.org/XSLT/downloads.html](http://xmlsoft.org/XSLT/downloads.html)
    website. Here you will find a link to the windows port (by Igor Zlatkovic) of
    this library. After installing the package, you can create the SDOCML file using
    the following simple shell action:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, you just have to drag the downloaded or created SDOCML file somewhere
    into your project. We drag this file into the `dojo-sdocml-1.7.2` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After all these steps, your project may look something like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – integrating the Dojo Toolkit](img/8246_07_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just integrated the Dojo Toolkit source into one of our projects. Furthermore,
    we created a Dojo Toolkit SDOCML file that provides the Content Assist with the
    necessary information so that it can provide us with all the available features
    in the current scope.
  prefs: []
  type: TYPE_NORMAL
- en: Let's do a simple check. Create a JavaScript file within our Dojo project. Open
    the file, type in `dojo`, and trigger the Content Assist by pressing *Ctrl* +
    Space bar. The Content Assist will suggest the `dojo` object to you along with
    other options that begin with the same letters. In the right-hand side column,
    you can see from which file the Content Assist gets the information for this object.
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/8246_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's go forward and type in `dojo`. The Content Assist will list all available
    methods from the `dojo` object. When we specify our input further, for example,
    `dojo.q`, the Content Assist updates its list and removes all entries that no
    longer match.
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/8246_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This time the object that the method belongs to is displayed in the right-hand
    side column. To the right-hand side of the list is a tooltip that displays the
    documentation of this method.
  prefs: []
  type: TYPE_NORMAL
- en: Using ExtJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ExtJS is a JavaScript framework, just like Dojo Toolkit, that provides many
    rich, modern UI widgets. ExtJS was a collection of function extensions from the
    **Yahoo User Interface** (**YUI**) library that, in time, became more and more
    popular. Through increasing complexity and popularity, it developed into an independent
    library called **ExtJS**.
  prefs: []
  type: TYPE_NORMAL
- en: You can get it from the Sencha website [at http://www.sencha.com/products/extjs/download/](http://at
    http://www.sencha.com/products/extjs/download/).
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – integrating ExtJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps are required to integrate ExtJS:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new web project named `Using JavaScript Libraries - ExtJS`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the ExtJS package. In our case, we will choose the `ext-4.1.0-gpl.zip`
    package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the ExtJS package into your `Project` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a folder named `extjs-sdocml-4.1.0` (replace `*version*` with your ExtJS
    version), in our case `extjs-sdocml-4.1.0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After the preceding steps, your project should look like the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – integrating ExtJS](img/8246_07_11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Refresh your project by right-clicking on the project name in the `Project Explorer`
    folder and click on **Refresh**. Now, Aptana Studio will index the new files and
    read the required information for the Content Assist. This may take a moment because
    ExtJS has a lot of files.![Time for action – integrating ExtJS](img/8246_07_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we have to get the required ScriptDoc file. If you want to use version 3.3.0
    of ExtJS, you can find the file at [https://raw.github.com/aptana/sencha.ruble/master/support/ext-js-3.3.0.sdocml](https://raw.github.com/aptana/sencha.ruble/master/support/ext-js-3.3.0.sdocml).
    If you want to use version 4.0 or 4.1 (as in our example), you can download the
    ScriptDoc file from the web blog at [http://www.thekuroko.com/aptana-sdocml-code-hinting-support/](http://www.thekuroko.com/aptana-sdocml-code-hinting-support/).
    John Crosby has written a tool that uses Adobe AIR and jsduck to create the necessary
    ScriptDoc file. At this point, we can thank John for his work. We download the
    required file and drag it into the `sdocml` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have integrated ExtJS into one of our own projects. It is done in the same
    way as jQuery and Dojo Toolkit. Again, it is very important that the file is dragged
    into the project, otherwise the Content Assist will not provide any information
    contained within the ScriptDoc file.
  prefs: []
  type: TYPE_NORMAL
- en: You will be able to test it in a similar way to the way we tested it in the
    jQuery and Dojo Toolkit case.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – integrating a JavaScript library into a current project of
    your own
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now your task is to select a current project of yours that uses one of the libraries
    we have dealt with in this chapter. Take a look at how this library is currently
    integrated and adjust its integration in such a way that you can use the Content
    Assist for further development.
  prefs: []
  type: TYPE_NORMAL
- en: When you're done, try out the code completion and see whether all of the library
    features are provided.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. Which requirements must be met in order to use the JavaScript library with
    the Content Assist?
  prefs: []
  type: TYPE_NORMAL
- en: The Library API must be available in XML or JSON format
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: None, the Content Assist reads directly from your source code files
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Library must be documented in ScriptDoc format, in Virtual Studio Documentation
    (VSDoc) for JavaScript, or must have a JSCA 1.0 specification file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. Can you use the Aptana Studio 2.X Code Assist XML file with Aptana Studio
    3?
  prefs: []
  type: TYPE_NORMAL
- en: Yes, just rename the XML file extension to the SDOCML file extension
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No, there is no way to use them in Aptana Studio 3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, but it must be converted with an XSLT conversion
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q3\. What is absolutely necessary to get the Content Assist to work with your
    libraries?
  prefs: []
  type: TYPE_NORMAL
- en: The ScriptDoc file must be copied and pasted into your project
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The ScriptDoc file must be dragged into your project
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Nothing
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q4\. What does the jQuery bundle provide?
  prefs: []
  type: TYPE_NORMAL
- en: The complete jQuery Content Assist information to enable all Content Assist
    functionalities
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Only jQuery snippets and some commands
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: jQuery itself—a separate copy of the jQuery library is not required anymore
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After reading this chapter, you should be able to integrate several JavaScript
    libraries into your projects so that the Content Assist provides all the necessary
    information to work much more effectively. In addition, you should know in detail
    what is required for integration other than what has been dealt within this chapter—JavaScript
    libraries.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we will learn how to work on a remote server with FTP.
  prefs: []
  type: TYPE_NORMAL
