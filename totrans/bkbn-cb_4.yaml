- en: Chapter 4. Views
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 视图
- en: 'In this chapter, we will cover the following areas:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Rendering a view
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在视图中渲染视图
- en: Dealing with a view element using jQuery
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 jQuery 处理视图元素
- en: Rendering a model in a view
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在视图中渲染模型
- en: Rendering a collection in a view
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在视图中渲染集合
- en: Splitting a view into subviews
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将视图拆分为子视图
- en: Handling **Document Object Model** (**DOM**) events in a view
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在视图中处理**文档对象模型**（**DOM**）事件
- en: Switching views using Backbone.Router
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Backbone.Router 切换视图
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: This chapter is devoted to the view object in Backbone.js; it is used for rendering
    data into HTML code. A view can be bound to the HTML element in the DOM tree and
    can handle its events and events for its child elements.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章致力于 Backbone.js 中的视图对象；它用于将数据渲染到 HTML 代码中。视图可以绑定到 DOM 树中的 HTML 元素，并可以处理其事件及其子元素的事件。
- en: 'Models and collections are typically rendered with the help of a view that
    acts as an interactive bridge between business logic and a user. For example,
    a view can listen to DOM events and as a result, manipulate models and collections
    or navigate the user to a different page. The process can also go in a reverse
    direction: changes in models and collections trigger a view update, and so changes
    in a DOM tree are made.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 模型和集合通常通过视图渲染，视图充当业务逻辑和用户之间的交互式桥梁。例如，视图可以监听 DOM 事件，并作为结果操作模型和集合或引导用户到不同的页面。该过程也可以反向进行：模型和集合的变化触发视图更新，从而在
    DOM 树中进行更改。
- en: A Backbone view relies on frontend JavaScript libraries, such as jQuery or Zepto
    when dealing with HTML elements and handling their events.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Backbone 视图在处理 HTML 元素和处理它们的事件时依赖于前端 JavaScript 库，例如 jQuery 或 Zepto。
- en: Rendering a view
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图中渲染视图
- en: When we want to output any data to the user, we should typically do it with
    the help of a Backbone view. In this recipe, we are going to create a simple view
    and render it.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要向用户输出任何数据时，我们通常使用 Backbone 视图。在本例中，我们将创建一个简单的视图并将其渲染。
- en: 'Our result will look like the following screenshot:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的结果将类似于以下截图：
- en: '![Rendering a view](img/2728_04_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![渲染视图](img/2728_04_01.jpg)'
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: Follow the ensuing steps to create a simple view and render it.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建一个简单的视图并将其渲染。
- en: 'Define a new view by extending the `Backbone.View` object:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过扩展`Backbone.View`对象来定义一个新的视图：
- en: '[PRE0]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create an instance of the view:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建视图的实例：
- en: '[PRE1]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Call the `render()` method manually to output HTML code to the user:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 手动调用`render()`方法向用户输出 HTML 代码：
- en: '[PRE2]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the `initialize()` method of the view, we generate the HTML code and save
    it in the `html` property, which we have been using lately in the `render()` method,
    where we assign this code to the HTML container defined by the `el` property.
    To do so, we invoke jQuery functions, such as `$()` and `html()`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图的`initialize()`方法中，我们生成 HTML 代码并将其保存到`html`属性中，这是我们最近在`render()`方法中使用过的，在那里我们将此代码分配给由`el`属性定义的
    HTML 容器。为此，我们调用 jQuery 函数，如`$()`和`html()`。
- en: 'When a new view instance is created, the `initialize()` method is triggered
    automatically. Additionally, we can pass any standard property to the view from
    outside of the object when creating its instance. It can be done with the help
    of the following code snippet:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建一个新的视图实例时，会自动触发`initialize()`方法。此外，我们可以在创建其实例时从对象外部传递任何标准属性给视图。可以通过以下代码片段实现：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `el` property can also be defined as a function if we want it to be calculated
    dynamically.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望`el`属性动态计算，也可以将其定义为函数。
- en: When the `render()` method is called, it runs our code that then renders the
    view.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用`render()`方法时，它会运行我们的代码，然后渲染视图。
- en: There's more...
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: In this section, we will learn some useful tricks when dealing with a view.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习一些处理视图时有用的技巧。
- en: Creating a new HTML element associated with a view
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建与视图相关的新 HTML 元素
- en: Sometimes, we may not want to render a view into the existing HTML element in
    the DOM tree; instead, we may want to create a new one and then add it to the
    document. Follow the given steps to create a new HTML element associated with
    a view.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们可能不想将视图渲染到 DOM 树中的现有 HTML 元素中；相反，我们可能想创建一个新的元素，然后将其添加到文档中。按照以下步骤创建与视图相关的新
    HTML 元素。
- en: 'Define a view and set its elements and attributes manually by assigning values
    to the `tagName`, `className`, and `attributes` properties:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将值分配给`tagName`、`className`和`attributes`属性来手动定义视图并设置其元素和属性：
- en: '[PRE4]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a new view instance. When doing this, Backbone will automatically assign
    `el` with an appropriate value:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的视图实例。在这样做的时候，Backbone 会自动将 `el` 分配一个合适的值：
- en: '[PRE5]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Render this view. Our render code will create a new HTML object:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 渲染此视图。我们的渲染代码将创建一个新的 HTML 对象：
- en: '[PRE6]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Insert the newly created HTML object into the DOM:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新创建的 HTML 对象插入 DOM：
- en: '[PRE7]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Check the result. The body of our HTML page should contain a code like the
    following code snippet:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查结果。我们的 HTML 页面的主体应该包含以下代码片段：
- en: '[PRE8]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Changing the view element dynamically
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 动态更改视图元素
- en: We may want to change the view element during the working of our code. This
    could be done with the help of a `setElement()` method. Both of the following
    are valid.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们代码的工作过程中，我们可能想要更改视图元素。这可以通过 `setElement()` 方法来实现。以下两种方法都是有效的。
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: When calling the `setElement()` method, Backbone undelegates events assigned
    to a previous element, and assigns them to a new element.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用 `setElement()` 方法时，Backbone 会取消委托之前元素分配的事件，并将它们分配给新元素。
- en: Removing a view
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移除视图
- en: When we have finished working with a view and want to remove it, we also need
    to remove its elements from the DOM and stop listening to events. To do this,
    we simply need to call the `remove()` method.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们完成对视图的工作并想要移除它时，我们还需要从 DOM 中移除其元素并停止监听事件。为此，我们只需调用 `remove()` 方法。
- en: See also
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: In this recipe, we use the jQuery method `$()` to access the properties of the
    view element. Please refer to the next recipe to get more information about jQuery.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们使用 jQuery 方法 `$()` 来访问视图元素的属性。请参考下一个菜谱以获取有关 jQuery 的更多信息。
- en: Dealing with a view element using jQuery
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 jQuery 处理视图元素
- en: There is no doubt that jQuery is the most popular JavaScript library nowadays.
    It simplifies document traversing with the help of CSS selectors, and provides
    easy event handling, animating, and AJAX interactions.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，jQuery 是目前最受欢迎的 JavaScript 库。它通过 CSS 选择器简化文档遍历，并提供简单的事件处理、动画和 AJAX 交互。
- en: Backbone.js relies on jQuery when dealing with a view. In this recipe, we are
    going to learn how to interact with a view element using jQuery.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Backbone.js 在处理视图时依赖于 jQuery。在本菜谱中，我们将学习如何使用 jQuery 与视图元素交互。
- en: How to do it...
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Follow the given steps to deal with a view element using jQuery.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤使用 jQuery 处理视图元素。
- en: 'To access a view element with jQuery, use `$(this.el)`:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用 jQuery 访问视图元素，请使用 `$(this.el)`：
- en: '[PRE10]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Use `this.$el` as a shortened alias for `$(this.el)`:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `this.$el` 作为 `$(this.el)` 的简写别名：
- en: '[PRE11]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To run a query within the scope of a view, use `this.$el.find()`:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在视图范围内运行查询，请使用 `this.$el.find()`:'
- en: '[PRE12]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Use `this.$()` as a shortened alias for `this.$el.find()`:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `this.$()` 作为 `this.$el.find()` 的简写别名：
- en: '[PRE13]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works...
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Backbone integrates with the jQuery library as well as with Zepto.js and Ender.js.
    When Backbone is loaded, it determines which library is used and assigns a reference
    to it in the form of the `Backbone.$` variable.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Backbone 与 jQuery 库以及 Zepto.js 和 Ender.js 集成。当 Backbone 被加载时，它会确定使用哪个库，并将一个引用分配给它，形式为
    `Backbone.$` 变量。
- en: There are a couple of aliases, such as `this.$el` and `this.$()`, that simplify
    access to the library.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个别名，如 `this.$el` 和 `this.$()`，它们简化了对库的访问。
- en: There's more...
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: In this section, we are going to meet a jQuery alternative known as Zepto.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将遇到一个名为 Zepto 的 jQuery 替代品。
- en: Using Zepto as a faster alternative to jQuery
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Zepto 作为 jQuery 的更快替代品
- en: Zepto is a minimalist JavaScript library that is 99 percent compatible with
    jQuery. The design goal of Zepto was to have a small-sized library and faster
    execution rate, which can be achieved by supporting modern browsers only. As a
    result, Zepto works much faster on mobile devices.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Zepto 是一个与 jQuery 兼容度达到 99% 的极简 JavaScript 库。Zepto 的设计目标是拥有小巧的库和更快的执行速度，这可以通过仅支持现代浏览器来实现。因此，Zepto
    在移动设备上运行得更快。
- en: 'To use Zepto with Backbone, you need to perform the following steps:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Zepto 与 Backbone，你需要执行以下步骤：
- en: Download the library from [http://zeptojs.com](http://zeptojs.com) and include
    it in the `lib` folder of your project.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [http://zeptojs.com](http://zeptojs.com) 下载库并将其包含在项目的 `lib` 文件夹中。
- en: Include Zepto in the `index.html` file instead of in jQuery.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Zepto 包含在 `index.html` 文件中，而不是 jQuery。
- en: '[PRE14]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: See also
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: You can find the complete documentation of jQuery on its official website [http://jquery.com](http://jquery.com).
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在其官方网站 [http://jquery.com](http://jquery.com) 上找到 jQuery 的完整文档。
- en: Rendering a model in a view
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图中渲染模型
- en: When working with models, we may often want to render them and show them in
    the browser. Typically, this can be done by creating a view for rendering a model
    and passing the model instance as a parameter.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we are going to render a simple model with a view, and the
    result will look like the following screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '![Rendering a model in a view](img/2728_04_01.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow the given steps to render a model in a view.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a new model:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Define a view that will render this model:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create a model instance:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create a view instance and pass the model to it as a parameter:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Render the view:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works...
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When initializing a new view object, we pass a model object to the view that
    is added to its property array by Backbone. In any method of this view, the assigned
    model can be made available by using the `this.model` property.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Often when rendering a model in a view, we need to update HTML if the model
    object has to get updated. This means we need to call the `setElement()` method
    every time the model is changed. Fortunately, Backbone provides an event-handling
    mechanism that does this automatically. It has been described in [Chapter 5](ch05.html
    "Chapter 5. Events and Bindings"), *Events and Bindings*.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering a collection in a view
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going to learn a simple way of rendering a collection
    of models in the view.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'The result output is an HTML list and looks like the following screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '![Rendering a collection in a view](img/2728_04_02.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow the given steps to render a collection in a view.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a model:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Define a collection:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Define a view:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create a collection instance:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Create a view instance:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Render a view:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How it works...
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When initializing a new view object, we pass the collection object to it, so
    that we later handle in a loop with the help of the `render()` method. Thus, we
    create the result HTML code that is later assigned to the view element.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Often when rendering a collection in a view, we need to update HTML if the collection
    is being sorted or updated. This means we need to call the `setElement()` method
    every time the model is changed. Fortunately, Backbone provides an event-handling
    mechanism that does this automatically. It has been described in [Chapter 5](ch05.html
    "Chapter 5. Events and Bindings"), *Events and Bindings*.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Splitting a view into subviews
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous recipe, we used a single big view to render the collection.
    However, there is a better way to handle big views, by splitting them into multiple
    small views. Such a practice should have several advantages. In the context of
    our collection, the following advantages are observed:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: The ability to insert, delete, or update a model in a collection without the
    need to re-render the whole collection
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to re-use subviews in other places of the program
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to split a single big piece of code into small and simple parts![Splitting
    a view into subviews](img/2728_04_03.jpg)
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, we are going to split a view which renders a collection into
    several simple subviews. Let's output the data in a table rather than in a list
    and apply some **Cascading Style Sheets** (**CSS**) to make it look better.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将把渲染集合的视图拆分成几个简单的子视图。让我们以表格的形式输出数据，而不是以列表形式，并应用一些**层叠样式表**（**CSS**）以使其看起来更好。
- en: How to do it...
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Follow the given steps to split one big view into small subviews.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 按照给定的步骤将一个大视图拆分成小子视图。
- en: 'Make sure you have the model and the collection definition:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你有模型和集合定义：
- en: '[PRE26]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Define a view for rendering a single model:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个用于渲染单个模型的视图：
- en: '[PRE27]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Define a view for rendering a collection:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个用于渲染集合的视图：
- en: '[PRE28]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Define a view for rendering a whole page.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个用于渲染整个页面的视图：
- en: '[PRE29]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Create and initialize a collection instance with data.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用数据创建并初始化一个集合实例。
- en: '[PRE30]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Create a view instance for a whole page and render it.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为整个页面创建一个视图实例并渲染它。
- en: '[PRE31]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: How it works...
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this example, we used `InvoiceItemView` for rendering the model and `InvoiceItemListView`
    for rendering the collection.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们使用了`InvoiceItemView`来渲染模型，并使用`InvoiceItemListView`来渲染集合。
- en: Also, we introduced the new view `InvoiceItemListPageView` that renders the
    whole page. When creating an instance of this view, we pass the `el` property;
    it contains the HTML element name where the view should output its result. This
    gives us more flexibility, and so we can render the view wherever we need.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还引入了新的视图`InvoiceItemListPageView`，用于渲染整个页面。在创建此视图的实例时，我们传递`el`属性；它包含视图应输出其结果的HTML元素名称。这为我们提供了更多的灵活性，因此我们可以将视图渲染到任何需要的地方。
- en: Handling Document Object Model (DOM) events in a view
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图中处理文档对象模型（DOM）事件
- en: A view in Backbone provides some functionality to interact with a user. It allows
    the handling of events that occur in the DOM in context of the view element.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Backbone中的视图提供了一些与用户交互的功能。它允许在视图元素上下文中处理DOM中发生的事件。
- en: 'In this recipe, we are going to modify an example given in the previous recipe.
    Let''s add an **Edit** button to each row of the table as shown in the following
    screenshot:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将修改前一个示例中给出的示例。让我们向表格的每一行添加一个**编辑**按钮，如图所示：
- en: '![Handling Document Object Model (DOM) events in a view](img/2728_04_04.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![在视图中处理文档对象模型（DOM）事件](img/2728_04_04.jpg)'
- en: By clicking on the **Edit** button, we will immediately replace the text values
    with input boxes so that the user can enter new values. We will also show **Save**
    and **Cancel** buttons to save or cancel the changes.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击**编辑**按钮，我们将立即将文本值替换为输入框，以便用户可以输入新值。我们还将显示**保存**和**取消**按钮以保存或取消更改。
- en: '![Handling Document Object Model (DOM) events in a view](img/2728_04_05.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![在视图中处理文档对象模型（DOM）事件](img/2728_04_05.jpg)'
- en: If the user clicks on the **Save** button, the model gets updated. If the user
    clicks on the **Cancel** button, values in the row are restored. Clicking on both
    the buttons makes the row view work in the view mode again.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户点击**保存**按钮，模型将被更新。如果用户点击**取消**按钮，行中的值将被恢复。同时点击这两个按钮将使行视图再次以视图模式工作。
- en: How to do it...
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Apply the following changes to `InvoiceItemView` that we created in the previous
    recipe.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下更改应用到我们在前一个示例中创建的`InvoiceItemView`。
- en: 'Define a view:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个视图：
- en: '[PRE32]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Introduce a rendering function when the user is viewing an item:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户查看项目时引入一个渲染函数：
- en: '[PRE33]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Introduce a rendering function when the user is editing an item:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户编辑项目时引入一个渲染函数：
- en: '[PRE34]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Set a property that will contain a function name that will be called on rendering
    the view:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一个将包含在渲染视图时调用的函数名的属性：
- en: '[PRE35]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Map the DOM events to the handlers:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将DOM事件映射到处理程序：
- en: '[PRE36]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Define the event handlers:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义事件处理程序：
- en: '[PRE37]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Create and initialize a collection instance with data:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用数据创建并初始化一个集合实例：
- en: '[PRE38]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Create a view instance for a whole page and render it:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为整个页面创建一个视图实例并渲染它：
- en: '[PRE39]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: How it works...
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'By defining the `event` property, we can tell Backbone how to map events to
    the handlers. To do so, we will use the following syntax:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 通过定义`event`属性，我们可以告诉Backbone如何将事件映射到处理程序。为此，我们将使用以下语法：
- en: '[PRE40]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Backbone.js uses jQuery's `on()` function to provide declarative callbacks for
    DOM events within a view. If the `selector` value is not given, the view's root
    element (`this.el`) is assumed.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Backbone.js使用jQuery的`on()`函数为视图内的DOM事件提供声明性回调。如果没有提供`selector`值，则假定视图的根元素（`this.el`）。
- en: There's more...
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: This section describes view methods to delegate and undelegate DOM events.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了委托和取消委托DOM事件的视图方法。
- en: Delegating and undelegating events manually
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 手动委托和取消委托事件
- en: In some cases, we may need a view to start handling DOM events manually from
    a specific place in the program. This can be done by calling the `delegateEvents()`
    method. It accepts a hash table of event names and their callbacks. If no parameter
    is given, `this.events` is used.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，我们可能需要视图从程序中的特定位置开始手动处理DOM事件。这可以通过调用`delegateEvents()`方法来实现。它接受一个包含事件名称及其回调的哈希表。如果没有提供参数，则使用`this.events`。
- en: If we need a view to stop handling DOM events, we should call the `undelegateEvents()`
    method. This can be useful when we hide the view temporarily and need to ensure
    that no unexpected behavior is caused by the DOM events.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要一个视图停止处理DOM事件，我们应该调用`undelegateEvents()`方法。这在我们暂时隐藏视图并需要确保不会因DOM事件引起意外行为时非常有用。
- en: See also...
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见...
- en: A complete reference to the jQuery events can be found at [http://api.jquery.com/category/events/](http://api.jquery.com/category/events/).
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jQuery事件的完整参考可以在[http://api.jquery.com/category/events/](http://api.jquery.com/category/events/)找到。
- en: Switching views using Backbone.Router
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Backbone.Router切换视图
- en: In the real Backbone application, we'll often need to switch from one view to
    another. This is typically done with the help of Backbone.Router; it allows us
    to map a URL to the specific callback that renders a view. In [Chapter 1](ch01.html
    "Chapter 1. Understanding Backbone"), *Understanding Backbone*, we learned about
    a router in Backbone.js. However, we did not speak much about its interaction
    with views.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际的Backbone应用中，我们经常需要从一个视图切换到另一个视图。这通常是通过Backbone.Router实现的；它允许我们将URL映射到渲染特定视图的特定回调。在[第1章](ch01.html
    "第1章。理解Backbone")中，我们学习了Backbone.js中的路由器。然而，我们没有过多地讨论它与视图的交互。
- en: In this recipe, we are going to build a Backbone application that will dynamically
    render an appropriate view on the URL, as well as change and remove the view that
    was shown tothe user previously in order to prevent a memory leak. The views are
    going to be switched without a page reload, because Backbone.Router supports hash
    URLs and `pushState`.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将构建一个Backbone应用，该应用将根据URL动态渲染适当的视图，同时更改和移除之前向用户展示的视图，以防止内存泄漏。视图的切换将不会重新加载页面，因为Backbone.Router支持hash
    URL和`pushState`。
- en: 'In our application, we are going to implement `InvoiceListView` and `InvoicePageView`.
    The first one displays a list of invoices, as shown in the following screenshot:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用中，我们将实现`InvoiceListView`和`InvoicePageView`。第一个视图显示发票列表，如下截图所示：
- en: '![Switching views using Backbone.Router](img/2728_04_07.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![使用Backbone.Router切换视图](img/2728_04_07.jpg)'
- en: 'When the user clicks on the **view details** link, he/she is shown an invoice
    details screen like the one shown in the following screenshot:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击**视图详情**链接时，他们会看到一个像以下截图所示的发票详情屏幕：
- en: '![Switching views using Backbone.Router](img/2728_04_08.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![使用Backbone.Router切换视图](img/2728_04_08.jpg)'
- en: How to do it...
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: Let's assume that we already have a model, a collection, and view objects defined.
    Follow the given steps to create a router that switches views.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经有了一个模型、集合和视图对象定义。按照以下步骤创建一个可以切换视图的路由。
- en: 'Define a router object and its routes:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个路由对象及其路由：
- en: '[PRE41]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Create a new collection instance in the `initialize()` method in the router
    object:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在路由对象中的`initialize()`方法中创建一个新的集合实例：
- en: '[PRE42]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Define routing callbacks in the router object:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在路由对象中定义路由回调：
- en: '[PRE43]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Define a `changeView()` method in the router object that will help us change
    the current view:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在路由对象中定义一个`changeView()`方法，这将帮助我们更改当前视图：
- en: '[PRE44]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Create a router instance and run the `Backbone.history.start()` method to start
    our application:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个路由实例并运行`Backbone.history.start()`方法以启动我们的应用：
- en: '[PRE45]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: How it works...
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Many interesting things are happening in the `changeView()` method. Just for
    our assurance, we check if the current view is not the one to which we are going
    to switch and then remove. While removing a view, all the events handled by it
    need to be unbound, and the corresponding HTML elements removed from the DOM tree.
    Then, we render a new view and append its element to the body.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在`changeView()`方法中发生了许多有趣的事情。为了确保我们的操作正确，我们检查当前视图是否不是我们要切换到的视图，然后将其移除。在移除视图时，需要取消绑定它处理的所有事件，并将相应的HTML元素从DOM树中移除。然后，我们渲染一个新的视图并将其元素附加到body上。
- en: Removing previously used views helps us to avoid memory leaks, which can happen
    when the application is used continuously for a very long time.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 移除之前使用的视图有助于我们避免内存泄漏，这可能会在应用长时间连续使用时发生。
- en: See also
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Please refer to [Chapter 1](ch01.html "Chapter 1. Understanding Backbone"),
    *Understanding Backbone*, to learn more about routers in Backbone.js.
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅[第1章](ch01.html "第1章. 理解Backbone")，*理解Backbone*，以了解更多关于Backbone.js中路由器的信息。
