- en: Chapter 4. Views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following areas:'
  prefs: []
  type: TYPE_NORMAL
- en: Rendering a view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dealing with a view element using jQuery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering a model in a view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering a collection in a view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Splitting a view into subviews
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling **Document Object Model** (**DOM**) events in a view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Switching views using Backbone.Router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is devoted to the view object in Backbone.js; it is used for rendering
    data into HTML code. A view can be bound to the HTML element in the DOM tree and
    can handle its events and events for its child elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Models and collections are typically rendered with the help of a view that
    acts as an interactive bridge between business logic and a user. For example,
    a view can listen to DOM events and as a result, manipulate models and collections
    or navigate the user to a different page. The process can also go in a reverse
    direction: changes in models and collections trigger a view update, and so changes
    in a DOM tree are made.'
  prefs: []
  type: TYPE_NORMAL
- en: A Backbone view relies on frontend JavaScript libraries, such as jQuery or Zepto
    when dealing with HTML elements and handling their events.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering a view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we want to output any data to the user, we should typically do it with
    the help of a Backbone view. In this recipe, we are going to create a simple view
    and render it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our result will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Rendering a view](img/2728_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow the ensuing steps to create a simple view and render it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a new view by extending the `Backbone.View` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an instance of the view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `render()` method manually to output HTML code to the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the `initialize()` method of the view, we generate the HTML code and save
    it in the `html` property, which we have been using lately in the `render()` method,
    where we assign this code to the HTML container defined by the `el` property.
    To do so, we invoke jQuery functions, such as `$()` and `html()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When a new view instance is created, the `initialize()` method is triggered
    automatically. Additionally, we can pass any standard property to the view from
    outside of the object when creating its instance. It can be done with the help
    of the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `el` property can also be defined as a function if we want it to be calculated
    dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: When the `render()` method is called, it runs our code that then renders the
    view.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will learn some useful tricks when dealing with a view.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new HTML element associated with a view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes, we may not want to render a view into the existing HTML element in
    the DOM tree; instead, we may want to create a new one and then add it to the
    document. Follow the given steps to create a new HTML element associated with
    a view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a view and set its elements and attributes manually by assigning values
    to the `tagName`, `className`, and `attributes` properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new view instance. When doing this, Backbone will automatically assign
    `el` with an appropriate value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Render this view. Our render code will create a new HTML object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Insert the newly created HTML object into the DOM:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the result. The body of our HTML page should contain a code like the
    following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Changing the view element dynamically
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We may want to change the view element during the working of our code. This
    could be done with the help of a `setElement()` method. Both of the following
    are valid.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: When calling the `setElement()` method, Backbone undelegates events assigned
    to a previous element, and assigns them to a new element.
  prefs: []
  type: TYPE_NORMAL
- en: Removing a view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When we have finished working with a view and want to remove it, we also need
    to remove its elements from the DOM and stop listening to events. To do this,
    we simply need to call the `remove()` method.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we use the jQuery method `$()` to access the properties of the
    view element. Please refer to the next recipe to get more information about jQuery.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dealing with a view element using jQuery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is no doubt that jQuery is the most popular JavaScript library nowadays.
    It simplifies document traversing with the help of CSS selectors, and provides
    easy event handling, animating, and AJAX interactions.
  prefs: []
  type: TYPE_NORMAL
- en: Backbone.js relies on jQuery when dealing with a view. In this recipe, we are
    going to learn how to interact with a view element using jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow the given steps to deal with a view element using jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access a view element with jQuery, use `$(this.el)`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use `this.$el` as a shortened alias for `$(this.el)`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To run a query within the scope of a view, use `this.$el.find()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use `this.$()` as a shortened alias for `this.$el.find()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Backbone integrates with the jQuery library as well as with Zepto.js and Ender.js.
    When Backbone is loaded, it determines which library is used and assigns a reference
    to it in the form of the `Backbone.$` variable.
  prefs: []
  type: TYPE_NORMAL
- en: There are a couple of aliases, such as `this.$el` and `this.$()`, that simplify
    access to the library.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we are going to meet a jQuery alternative known as Zepto.
  prefs: []
  type: TYPE_NORMAL
- en: Using Zepto as a faster alternative to jQuery
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Zepto is a minimalist JavaScript library that is 99 percent compatible with
    jQuery. The design goal of Zepto was to have a small-sized library and faster
    execution rate, which can be achieved by supporting modern browsers only. As a
    result, Zepto works much faster on mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use Zepto with Backbone, you need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the library from [http://zeptojs.com](http://zeptojs.com) and include
    it in the `lib` folder of your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Include Zepto in the `index.html` file instead of in jQuery.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find the complete documentation of jQuery on its official website [http://jquery.com](http://jquery.com).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering a model in a view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with models, we may often want to render them and show them in
    the browser. Typically, this can be done by creating a view for rendering a model
    and passing the model instance as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we are going to render a simple model with a view, and the
    result will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Rendering a model in a view](img/2728_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow the given steps to render a model in a view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a new model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a view that will render this model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a model instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a view instance and pass the model to it as a parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Render the view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When initializing a new view object, we pass a model object to the view that
    is added to its property array by Backbone. In any method of this view, the assigned
    model can be made available by using the `this.model` property.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Often when rendering a model in a view, we need to update HTML if the model
    object has to get updated. This means we need to call the `setElement()` method
    every time the model is changed. Fortunately, Backbone provides an event-handling
    mechanism that does this automatically. It has been described in [Chapter 5](ch05.html
    "Chapter 5. Events and Bindings"), *Events and Bindings*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering a collection in a view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going to learn a simple way of rendering a collection
    of models in the view.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result output is an HTML list and looks like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Rendering a collection in a view](img/2728_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow the given steps to render a collection in a view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a collection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a collection instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a view instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Render a view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When initializing a new view object, we pass the collection object to it, so
    that we later handle in a loop with the help of the `render()` method. Thus, we
    create the result HTML code that is later assigned to the view element.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Often when rendering a collection in a view, we need to update HTML if the collection
    is being sorted or updated. This means we need to call the `setElement()` method
    every time the model is changed. Fortunately, Backbone provides an event-handling
    mechanism that does this automatically. It has been described in [Chapter 5](ch05.html
    "Chapter 5. Events and Bindings"), *Events and Bindings*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Splitting a view into subviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous recipe, we used a single big view to render the collection.
    However, there is a better way to handle big views, by splitting them into multiple
    small views. Such a practice should have several advantages. In the context of
    our collection, the following advantages are observed:'
  prefs: []
  type: TYPE_NORMAL
- en: The ability to insert, delete, or update a model in a collection without the
    need to re-render the whole collection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to re-use subviews in other places of the program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to split a single big piece of code into small and simple parts![Splitting
    a view into subviews](img/2728_04_03.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, we are going to split a view which renders a collection into
    several simple subviews. Let's output the data in a table rather than in a list
    and apply some **Cascading Style Sheets** (**CSS**) to make it look better.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow the given steps to split one big view into small subviews.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure you have the model and the collection definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a view for rendering a single model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a view for rendering a collection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Define a view for rendering a whole page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create and initialize a collection instance with data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a view instance for a whole page and render it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we used `InvoiceItemView` for rendering the model and `InvoiceItemListView`
    for rendering the collection.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we introduced the new view `InvoiceItemListPageView` that renders the
    whole page. When creating an instance of this view, we pass the `el` property;
    it contains the HTML element name where the view should output its result. This
    gives us more flexibility, and so we can render the view wherever we need.
  prefs: []
  type: TYPE_NORMAL
- en: Handling Document Object Model (DOM) events in a view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A view in Backbone provides some functionality to interact with a user. It allows
    the handling of events that occur in the DOM in context of the view element.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we are going to modify an example given in the previous recipe.
    Let''s add an **Edit** button to each row of the table as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Handling Document Object Model (DOM) events in a view](img/2728_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By clicking on the **Edit** button, we will immediately replace the text values
    with input boxes so that the user can enter new values. We will also show **Save**
    and **Cancel** buttons to save or cancel the changes.
  prefs: []
  type: TYPE_NORMAL
- en: '![Handling Document Object Model (DOM) events in a view](img/2728_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If the user clicks on the **Save** button, the model gets updated. If the user
    clicks on the **Cancel** button, values in the row are restored. Clicking on both
    the buttons makes the row view work in the view mode again.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apply the following changes to `InvoiceItemView` that we created in the previous
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Introduce a rendering function when the user is viewing an item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Introduce a rendering function when the user is editing an item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set a property that will contain a function name that will be called on rendering
    the view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Map the DOM events to the handlers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the event handlers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create and initialize a collection instance with data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a view instance for a whole page and render it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By defining the `event` property, we can tell Backbone how to map events to
    the handlers. To do so, we will use the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Backbone.js uses jQuery's `on()` function to provide declarative callbacks for
    DOM events within a view. If the `selector` value is not given, the view's root
    element (`this.el`) is assumed.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section describes view methods to delegate and undelegate DOM events.
  prefs: []
  type: TYPE_NORMAL
- en: Delegating and undelegating events manually
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In some cases, we may need a view to start handling DOM events manually from
    a specific place in the program. This can be done by calling the `delegateEvents()`
    method. It accepts a hash table of event names and their callbacks. If no parameter
    is given, `this.events` is used.
  prefs: []
  type: TYPE_NORMAL
- en: If we need a view to stop handling DOM events, we should call the `undelegateEvents()`
    method. This can be useful when we hide the view temporarily and need to ensure
    that no unexpected behavior is caused by the DOM events.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A complete reference to the jQuery events can be found at [http://api.jquery.com/category/events/](http://api.jquery.com/category/events/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Switching views using Backbone.Router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the real Backbone application, we'll often need to switch from one view to
    another. This is typically done with the help of Backbone.Router; it allows us
    to map a URL to the specific callback that renders a view. In [Chapter 1](ch01.html
    "Chapter 1. Understanding Backbone"), *Understanding Backbone*, we learned about
    a router in Backbone.js. However, we did not speak much about its interaction
    with views.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we are going to build a Backbone application that will dynamically
    render an appropriate view on the URL, as well as change and remove the view that
    was shown tothe user previously in order to prevent a memory leak. The views are
    going to be switched without a page reload, because Backbone.Router supports hash
    URLs and `pushState`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our application, we are going to implement `InvoiceListView` and `InvoicePageView`.
    The first one displays a list of invoices, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Switching views using Backbone.Router](img/2728_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When the user clicks on the **view details** link, he/she is shown an invoice
    details screen like the one shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Switching views using Backbone.Router](img/2728_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's assume that we already have a model, a collection, and view objects defined.
    Follow the given steps to create a router that switches views.
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a router object and its routes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new collection instance in the `initialize()` method in the router
    object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define routing callbacks in the router object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a `changeView()` method in the router object that will help us change
    the current view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a router instance and run the `Backbone.history.start()` method to start
    our application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many interesting things are happening in the `changeView()` method. Just for
    our assurance, we check if the current view is not the one to which we are going
    to switch and then remove. While removing a view, all the events handled by it
    need to be unbound, and the corresponding HTML elements removed from the DOM tree.
    Then, we render a new view and append its element to the body.
  prefs: []
  type: TYPE_NORMAL
- en: Removing previously used views helps us to avoid memory leaks, which can happen
    when the application is used continuously for a very long time.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please refer to [Chapter 1](ch01.html "Chapter 1. Understanding Backbone"),
    *Understanding Backbone*, to learn more about routers in Backbone.js.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
