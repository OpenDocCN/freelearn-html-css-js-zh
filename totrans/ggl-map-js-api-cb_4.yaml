- en: Chapter 4. Working with Controls
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 使用控件
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Adding and removing controls
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加和删除控件
- en: Changing the position of controls
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改变控件的位置
- en: Creating and adding a geolocation control
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建并添加地理位置控件
- en: Creating a table of contents control for layers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为图层创建目录控件
- en: Adding your own logo as a control
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加自己的标志作为控件
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: This chapter covers the controls that are found in the Google Maps JavaScript
    API. Generally speaking, controls are UI elements that interact with the user.
    At a very basic level, they comprise of simple HTML elements or a combination
    of them.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了Google Maps JavaScript API中找到的控件。一般来说，控件是与用户交互的UI元素。在非常基本的层面上，它们由简单的HTML元素或它们的组合组成。
- en: Controls enable the user to pan the map, zoom in or out, measure distances or
    areas, and so on. Complex controls involve the administration of multiple overlay
    layers (introduced in [Chapter 2](ch02.html "Chapter 2. Adding Raster Layers"),
    *Adding Raster Layers*) in the form of a **table of contents** (**ToC**) control,
    or an editing toolbar for drawing vector features.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 控件使用户能够平移地图、放大或缩小、测量距离或面积等。复杂的控件涉及以目录控件（**目录**）或绘图矢量特征编辑工具栏的形式管理多个叠加层（在[第二章](ch02.html
    "第二章 添加栅格图层")，*添加栅格图层*）。
- en: The Google Maps JavaScript API presents developers with the opportunity to use
    and customize built-in controls as well as build custom controls from the ground
    up.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps JavaScript API为开发者提供了使用和自定义内置控件的机会，以及从头开始构建自定义控件。
- en: This chapter will first focus on dealing with built-in controls and their configurations
    in detail, including the customization of the UI. Then, creating custom controls
    from very basic to complex ones (such as ToCs) will be covered.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将首先详细讨论处理内置控件及其配置，包括UI的自定义。然后，从非常基础的控件到复杂的控件（如目录）的创建将被涵盖。
- en: Adding and removing controls
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加和删除控件
- en: 'The Google Maps default UI has several controls that are displayed by default
    or if certain conditions are met. These include:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps默认UI包含一些默认显示或满足某些条件时显示的控件。这些包括：
- en: Zoom control
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缩放控制
- en: Pan control
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平移控制
- en: MapType control
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地图类型控制
- en: Scale control
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规模控制
- en: Street View control
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 街景控制
- en: Rotate control
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旋转控制
- en: Overview Map control
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 概览地图控制
- en: The Google Maps JavaScript API presents the opportunity for developers to opt
    in or out of these controls or customize them in terms of functionality or look.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps JavaScript API为开发者提供了选择加入或退出这些控件或根据功能或外观进行自定义的机会。
- en: In this recipe, we will cover ways to alter the UI by adding or removing built-in
    controls and how to change their properties through presented options.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将介绍通过添加或删除内置控件来改变UI的方法，以及如何通过提供的选项更改它们的属性。
- en: Getting ready
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The first recipe of [Chapter 1](ch01.html "Chapter 1. Google Maps JavaScript
    API Basics"), *Google Maps JavaScript API Basics*, will do our work. We will alter
    it for this recipe.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[第一章](ch01.html "第一章 Google Maps JavaScript API基础知识")的第一道菜谱，*Google Maps JavaScript
    API基础知识*，将完成我们的工作。我们将为此菜谱进行修改。'
- en: How to do it…
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'You will opt for the appearance of the built-in controls if you perform the
    following step:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您执行以下步骤，您将选择内置控件的外观：
- en: 'Alter the `mapOptions` object as follows:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式修改`mapOptions`对象：
- en: '[PRE0]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![How to do it…](img/8825OT_04_01.jpg)'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/8825OT_04_01.jpg)'
- en: You can have your built-in controls On or Off according to your taste as displayed
    in the preceding screenshot.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以根据前一个截图显示的样式，根据您的喜好将内置控件设置为开启或关闭。
- en: How it works...
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'You might have observed that we have added a lot to the `mapOptions` object.
    This is because you can make the controls visible or invisible in the `google.maps.mapOptions`
    object:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，我们在`mapOptions`对象中添加了很多内容。这是因为您可以在`google.maps.mapOptions`对象中使控件可见或不可见：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By assigning Boolean (true/false) values, you can display `panControl`, `zoomControl`,
    and `overviewMapControl`, while `scaleControl` and `mapTypeControl` are hidden.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通过分配布尔值（true/false），您可以显示`panControl`、`zoomControl`和`overviewMapControl`，而`scaleControl`和`mapTypeControl`则被隐藏。
- en: 'Some controls appear by default. For instance, we have not mentioned `streetViewControl`
    in our `mapOptions` object; however, it is displayed in the interface because
    it is there by default. The built-in controls and their default presence in the
    UI are as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一些控件默认显示。例如，我们未在`mapOptions`对象中提及`streetViewControl`；然而，由于默认存在，它在界面中显示。内置控件及其在UI中的默认存在如下：
- en: '| Control name | Default presence |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 控件名称 | 默认存在 |'
- en: '| --- | --- |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Zoom control | Yes |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 缩放控件 | 是 |'
- en: '| Pan control | Yes |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 平移控件 | 是 |'
- en: '| Scale control | No |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 比例尺控件 | 否 |'
- en: '| MapType control | Yes |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 地图类型控件 | 是 |'
- en: '| Street View control | Yes |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 街景控件 | 是 |'
- en: '| Rotate control | Yes (for oblique imagery) |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 旋转控件 | 是（用于斜视图像）|'
- en: '| Overview Map control | No |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 概览地图控件 | 否 |'
- en: 'Although `rotateControl` is displayed by default, you might have noticed that
    it is not found in the interface because it appears only when oblique imagery
    is shown. Tweaking the `mapOptions` object as follows, we can view the control:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `rotateControl` 默认显示，但您可能已经注意到它未出现在界面中，因为它仅在显示斜视图像时出现。按照以下方式调整 `mapOptions`
    对象，我们可以查看控件：
- en: 'Enable `mapTypeControl` so that you can select satellite imagery in the UI,
    as shown in the screenshot following the code:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用 `mapTypeControl` 以在 UI 中选择卫星图像，如图中所示：
- en: '[PRE2]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![How it works...](img/8825OT_04_02.jpg)'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何工作...](img/8825OT_04_02.jpg)'
- en: You can see `mapTypeControl` in the preceding screenshot.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在前面的截图中看到 `mapTypeControl`。
- en: Oblique imagery (45 degree imagery) is served in certain locations, and wherever
    present, `mapTypeControl` updates itself to include a submenu toggle for displaying
    oblique imagery.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些位置提供斜视图像（45度图像），并且无论何时存在，`mapTypeControl` 都会更新自身，包括用于显示斜视图像的下拉菜单切换。
- en: 'The `RotateControl` control is displayed between the Pan and Zoom controls.
    It allows users to rotate the oblique imagery at 90 degree intervals. Also, the
    Pan control is altered to have a ring, letting us change the heading of the oblique
    imagery when it is displayed:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`RotateControl` 控件位于平移和缩放控件之间。它允许用户以90度间隔旋转斜视图像。此外，平移控件也被修改为带有环形，以便在显示斜视图像时更改其航向：'
- en: '![How it works...](img/8825OT_04_03.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/8825OT_04_03.jpg)'
- en: There's more...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The Google Maps JavaScript API allows us to not only toggle the built-in controls
    between On and Off, but also customize their properties and styles. For instance:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps JavaScript API 允许我们不仅可以在开和关之间切换内置控件，还可以自定义它们的属性和样式。例如：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This sets the Overview Map control in the `opened` state. Please remember that
    the Overview Map control's default state is collapsed, and this setting sets the
    control to `opened` at the start of your application. You can collapse or open
    the control whenever you want by pressing the small arrow in the lower-right corner
    of the control.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这将概述地图控件设置为 `打开` 状态。请记住，概述地图控件的默认状态是折叠的，并且此设置在您应用程序开始时将控件设置为 `打开`。您可以通过按控件右下角的小箭头来随时折叠或打开控件。
- en: 'For the Zoom control, the options presented in the recipe are as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于缩放控件，菜谱中提供的选项如下：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This option sets the Zoom control to be styled as small, comprising of two
    small buttons, one for zoom in and the other for zoom out. Other options for the
    `style` property for `zoomControlOptions` are:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项将缩放控件样式设置为小，包含两个小按钮，一个用于放大，另一个用于缩小。`zoomControlOptions` 的 `style` 属性的其他选项如下：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `LARGE` option sets the Zoom control to be seen as a long stick where you
    can traverse between zoom levels. The `DEFAULT` option decides whether to display
    either the large Zoom controls or the small Zoom controls according to the screen
    size.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`LARGE` 选项将缩放控件显示为长棒状，您可以在不同的缩放级别之间进行切换。`DEFAULT` 选项根据屏幕大小决定显示大缩放控件还是小缩放控件。'
- en: 'You might have noted that options for controls are handled by objects with
    the `Options` suffix. In the same manner, there are options for `mapTypeControl`
    as well within the `MapTypeControlOptions` object. Adding the following lines
    to the code will make some alterations:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，控件的选项由带有 `Options` 后缀的对象处理。同样，`mapTypeControl` 也有 `MapTypeControlOptions`
    对象中的选项。在代码中添加以下行将进行一些修改：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The settings in the `mapTypeControlOptions` property make `mapTypeControl` offer
    only the `ROADMAP` and `HYBRID` map types, so you will not be able to select the
    `SATELLITE` and `TERRAIN` map types. As you would recall from [Chapter 2](ch02.html
    "Chapter 2. Adding Raster Layers"), *Adding Raster Layers*, the `mapTypeIds` property
    not only accepts built-in map types, but also styled map types through a `StyledMapType`
    object and any tiled image source—either as a base map or overlay map—through
    the `ImageMapType` object.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapTypeControlOptions`属性中的设置使得`mapTypeControl`只提供`ROADMAP`和`HYBRID`地图类型，因此你将无法选择`SATELLITE`和`TERRAIN`地图类型。正如你从[第2章](ch02.html
    "第2章。添加栅格图层")中回忆的那样，*添加栅格图层*，`mapTypeIds`属性不仅接受内置地图类型，还可以通过`StyledMapType`对象接受样式化地图类型，以及通过`ImageMapType`对象接受任何瓦片图像源——无论是作为基础地图还是叠加地图。'
- en: 'The second property, `style`, sets `mapTypeControl` to be displayed as a drop-down
    menu instead of a standard horizontal bar. The other options for the `style` property
    of `mapTypeControlOptions` are:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个属性`style`将`mapTypeControl`设置为以下拉菜单的形式显示，而不是标准水平栏。`mapTypeControlOptions`的`style`属性的其它选项包括：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `DEFAULT` option is for dynamically picking the Zoom control as either a
    horizontal bar or a drop-down menu according to the screen estate.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`DEFAULT`选项是动态选择缩放控制，根据屏幕大小以水平栏或下拉菜单的形式显示。'
- en: Note
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Complete options list for controls**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**控制选项的完整列表**'
- en: The complete options list for controls can be found at the Google Maps JavaScript
    API Reference documentation URL [https://developers.google.com/maps/documentation/javascript/reference](https://developers.google.com/maps/documentation/javascript/reference).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 控制选项的完整列表可以在Google Maps JavaScript API参考文档的URL中找到 [https://developers.google.com/maps/documentation/javascript/reference](https://developers.google.com/maps/documentation/javascript/reference)。
- en: Changing the position of controls
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改控制的位置
- en: 'Google Maps controls have their default positions, and the Google Maps JavaScript
    API offers a level of flexibility over changing these default positions. You can
    also position your custom controls according to the places in the UI that are
    offered as in the following screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps的控制有它们默认的位置，Google Maps JavaScript API提供了改变这些默认位置的一定灵活性。你还可以根据UI中提供的以下截图中的位置来放置你的自定义控制：
- en: '![Changing the position of controls](img/8825OT_04_04.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![更改控制的位置](img/8825OT_04_04.jpg)'
- en: The preceding screenshot depicts the possible locations where you can place
    your controls. It is noteworthy that **TOP_LEFT** is not equal to **LEFT_TOP**,
    with **TOP_LEFT** the first one on the top.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了你可以放置控制的可能位置。值得注意的是，**TOP_LEFT**不等于**LEFT_TOP**，其中**TOP_LEFT**是顶部第一个。
- en: In this recipe, we will describe how to specify the corresponding positions
    of controls in the Google Maps UI.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将描述如何在Google Maps UI中指定控制的位置。
- en: Getting ready
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe is based on the previous recipe's code; therefore, having that will
    do most of our work.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱基于上一个菜谱的代码；因此，拥有那个代码将完成我们的大部分工作。
- en: How to do it…
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'You can flush the positioning of the controls with the following step:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下步骤来刷新控制的位置：
- en: 'Completely renew the `mapOptions` object as follows:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完全更新`mapOptions`对象如下：
- en: '[PRE8]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![How to do it…](img/8825OT_04_05.jpg)'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做到这一点…](img/8825OT_04_05.jpg)'
- en: You can change your controls' positions in the map UI as per your taste as you
    can observe in the preceding screenshot.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以根据自己的喜好在地图UI中更改控制的位置，就像你在前面的截图中所观察到的。
- en: How it works...
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In the `mapOptions` object, we have specified each control''s position by its
    `position` property in its own options as you can see in the following code snippet:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在`mapOptions`对象中，我们通过每个控制在其自己的选项中指定的`position`属性来指定每个控制的位置，就像你在以下代码片段中看到的那样：
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following code directs `mapTypeControl` to be placed in the left-top corner
    of the map''s `div` element, while `panControl` is placed in the top-right corner:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将`mapTypeControl`放置在地图`div`元素的左上角，而`panControl`放置在右上角：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Complete listing for control positions**'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**控制位置的完整列表**'
- en: The complete listing for control positions can be found at the Google Maps JavaScript
    API Reference documentation URL ([https://developers.google.com/maps/documentation/javascript/reference#ControlPosition](https://developers.google.com/maps/documentation/javascript/reference#ControlPosition)).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 控制位置的完整列表可以在Google Maps JavaScript API参考文档的URL中找到（[https://developers.google.com/maps/documentation/javascript/reference#ControlPosition](https://developers.google.com/maps/documentation/javascript/reference#ControlPosition)）。
- en: Creating and adding a geolocation control
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建并添加地理位置控制
- en: The Google Maps UI has many built-in controls introduced in previous recipes.
    These controls serve numerous needs, such as panning, zooming, and changing the
    map type. However, the user needs are infinite, and the user might be very creative.
    It is impossible to present a built-in control for every need.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps UI 在之前的菜谱中引入了许多内置控制。这些控制满足了许多需求，如平移、缩放和更改地图类型。然而，用户的需求是无限的，用户可能非常具有创造性。不可能为每个需求提供内置控制。
- en: Instead, the Google Maps JavaScript API has presented a path for creating custom
    controls for every specific need. Custom controls are basically simple HTML elements
    wrapped in a single element, mostly the `<div>` element.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，Google Maps JavaScript API 为满足每个特定需求提供了创建自定义控制的路径。自定义控制基本上是简单 HTML 元素包裹在一个单一元素中，通常是
    `<div>` 元素。
- en: In this recipe, we will go over the basics of creating a custom control, placing
    it on the Google Maps UI, and using it through event-handling routines.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们将介绍创建自定义控制、将其放置在 Google Maps UI 上以及通过事件处理程序使用它的基础知识。
- en: Getting ready
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe will be based on the *Moving from Web to mobile devices* recipe
    introduced in [Chapter 1](ch01.html "Chapter 1. Google Maps JavaScript API Basics"),
    *Google Maps JavaScript API Basics*. Our recipe will utilize the geolocation code
    extract from this recipe; therefore, it will be helpful to revisit this recipe.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 本菜谱将基于在 [第 1 章](ch01.html "第 1 章。Google Maps JavaScript API 基础") 中介绍的 *从 Web
    移动到移动设备* 菜谱，*Google Maps JavaScript API 基础*。我们的菜谱将利用此菜谱中的地理位置代码片段；因此，回顾此菜谱将很有帮助。
- en: How to do it…
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'You will have a brand new custom geolocation control if you perform the following
    steps:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你执行以下步骤，你将拥有一个全新的自定义地理位置控制：
- en: 'First, create a JavaScript object that will be our custom control at the end
    (the constructor will take two parameters that will be explained in the later
    steps):'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个 JavaScript 对象，它将成为我们最终的自定义控制（构造函数将接受两个参数，将在后续步骤中解释）：
- en: '[PRE11]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Inside the `GeoLocationControl` class, set the `class` property to contain
    the `div` element referenced as the first argument in the constructor:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `GeoLocationControl` 类内部，将 `class` 属性设置为包含构造函数中作为第一个参数引用的 `div` 元素：
- en: '[PRE12]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Inside the `GeoLocationControl` class, set the internal HTML `div` element
    details, including its `class` attribute, so that this element looks like a button:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `GeoLocationControl` 类内部，设置内部 HTML `div` 元素的详细信息，包括其 `class` 属性，以便此元素看起来像一个按钮：
- en: '[PRE13]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add this internal `div` element (`controlButton`) to the container `div` element
    as follows:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式将此内部 `div` 元素（`controlButton`）添加到容器 `div` 元素中：
- en: '[PRE14]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add the `click` event listener for `controlButton` inside the `GeoLocationControl`
    class:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `GeoLocationControl` 类内部为 `controlButton` 添加 `click` 事件监听器：
- en: '[PRE15]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, in the ordinary `initMap()` function that we have used over all the recipes,
    add the container HTML `div` element in addition to the standard definition of
    the `map` and `mapOptions` objects:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在所有菜谱中使用的普通 `initMap()` 函数中，除了标准的 `map` 和 `mapOptions` 对象的定义外，还需要添加容器 HTML
    `div` 元素：
- en: '[PRE16]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Instantiate the custom control class, the `GeoLocationControl` class inside
    `initMap()`, supplying two arguments: the container `div` element created in the
    previous step and the `map` object itself:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `initMap()` 中实例化自定义控制类，即 `GeoLocationControl` 类，提供两个参数：前一步骤中创建的容器 `div` 元素和
    `map` 对象本身：
- en: '[PRE17]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Place the custom control among other controls in the map UI:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将自定义控制放置在地图 UI 中的其他控制之间：
- en: '[PRE18]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![How to do it…](img/8825OT_04_06.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到这一点…](img/8825OT_04_06.jpg)'
- en: You should have a custom control functioning as a geolocation control as seen
    in the preceding screenshot.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该有一个像前面截图所示的功能齐全的自定义地理位置控制。
- en: How it works...
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'This recipe might seem confusing compared to the preceding recipes, but in
    essence, there is just one important point to create custom controls in the Google
    Maps JavaScript API; you can utilize any HTML element to be used as a custom control.
    In fact, the following simple code extract is sufficient to have a custom control:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的菜谱相比，这个菜谱可能看起来有些复杂，但本质上，在 Google Maps JavaScript API 中创建自定义控制只有一个重要点；你可以利用任何
    HTML 元素作为自定义控制。实际上，以下简单的代码片段就足以创建一个自定义控制：
- en: '[PRE19]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This code creates an HTML `div` element and then adds it to the controls array
    of the `map` object. The controls array is a two-dimensional array, the first
    dimension being the available positions defined in the `google.maps.ControlPosition`
    class and the second dimension being the controls. This transparent control with
    no label inside will do anything as there is no event-handling code for the `div`
    element; however, this reality does not change the fact that this is a custom
    control.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码创建了一个HTML `div`元素，并将其添加到`map`对象的控件数组中。控件数组是一个二维数组，第一维是`google.maps.ControlPosition`类中定义的可用位置，第二维是控件。这个没有标签的透明控件将执行任何操作，因为没有为`div`元素编写事件处理代码；然而，这一现实并不改变这是一个自定义控件的事实。
- en: Other details, such as CSS styling, filling in attributes, and event handling,
    are necessary for a professional custom control to be used for map UI users.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 其他细节，如CSS样式、填充属性和事件处理，对于专业自定义控件在地图UI用户中的应用是必要的。
- en: 'In our recipe, we have chosen to create a JavaScript class to wrap all these
    details in order to be structural:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们选择创建一个JavaScript类来封装所有这些细节，以便于结构化：
- en: '[PRE20]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Our class constructor makes use of two elements: the container `div` element
    and the `map` object. It needs the reference for the container `div` element to
    add the child element `controlButton` to it:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的类构造函数使用了两个元素：容器`div`元素和`map`对象。它需要容器`div`元素的引用，以便将子元素`controlButton`添加到其中：
- en: '[PRE21]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `controlButton` object (an HTML `div` element) has to respond to some user-originated
    events for the custom control to be useful and meaningful:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`controlButton`对象（一个HTML `div`元素）必须响应用户发起的一些事件，以便自定义控件有用且有意义：'
- en: '[PRE22]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `google.maps.event.addDomListener` method acts as an event handler registration,
    and it works in the same way on every browser. These method- and event-related
    subjects will be covered in [Chapter 5](ch05.html "Chapter 5. Understanding Google
    Maps JavaScript API Events"), *Understanding Google Maps JavaScript API Events*.
    For now, it is alright to be aware of the `click` event, which will be listened
    to by the `controlButton` object.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`google.maps.event.addDomListener`方法充当事件处理程序注册，它在每个浏览器上都以相同的方式工作。这些方法和事件相关主题将在[第5章](ch05.html
    "第5章。理解Google Maps JavaScript API事件")*理解Google Maps JavaScript API事件*中介绍。现在，了解`click`事件，该事件将由`controlButton`对象监听，就足够了。'
- en: 'The geolocation code extract from [Chapter 1](ch01.html "Chapter 1. Google
    Maps JavaScript API Basics"), *Google Maps JavaScript API Basics,* resides inside
    the `addDomListener` method, making use of the Geolocation API of the browser.
    If there is support for the Geolocation API and if the location is retrieved,
    a marker is added to the map for this location:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 从[第1章](ch01.html "第1章。Google Maps JavaScript API基础知识")中提取的地理位置代码，*Google Maps
    JavaScript API基础知识*，位于`addDomListener`方法内部，利用了浏览器的地理位置API。如果支持地理位置API并且成功获取了位置，就会在地图上为该位置添加一个标记：
- en: '[PRE23]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This whole creation of child elements and event-handling logic is enveloped
    in one JavaScript class constructor, which is called by the following:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 整个创建子元素和事件处理逻辑的过程都被封装在一个JavaScript类构造函数中，该构造函数如下所示：
- en: '[PRE24]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The following is the only other code snippet required to accomplish this task:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是需要完成此任务所需的唯一其他代码片段：
- en: '[PRE25]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: It is worth noting that the `controls` array takes the container `div` element
    as the custom control. Also, bear in mind that `controls[google.maps.ControlPosition.RIGHT_CENTER]`
    might already have other controls in other scenarios. We are using `push` so that
    the existing controls are not replaced.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，`controls`数组将容器`div`元素作为自定义控件。同时，请记住，`controls[google.maps.ControlPosition.RIGHT_CENTER]`在其他场景中可能已经包含其他控件。我们使用`push`是为了不替换现有的控件。
- en: Creating a table of contents control for layers
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为图层创建目录控件
- en: Table of Contents (ToC) controls such as UI elements are very common in desktop
    GIS software, such as ArcGIS Desktop, Mapinfo, and Geomedia. Also, their web counterparts
    make use of ToCs intensively in their UI, including ArcGIS and .Net web components.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在桌面GIS软件中，如ArcGIS桌面、Mapinfo和Geomedia，表目录（ToC）控件以及UI元素非常常见。同样，它们的Web对应版本也在UI中大量使用ToC，包括ArcGIS和.Net
    Web组件。
- en: The main use of ToCs is to turn On and Off the various raster or vector layers
    so as to overlay and view multiple strata of data. For vector layers, the options
    might be enriched by allowing the users to change the symbology of the vector
    layer with respect to ToCs.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 目录的主要用途是打开和关闭各种栅格或矢量图层，以便叠加和查看数据的多个层次。对于矢量图层，选项可以通过允许用户根据目录更改矢量图层的符号来丰富。
- en: The Google Maps UI does not have a built-in ToC control; however, with the flexibility
    of building up a custom control, there are virtually infinite possibilities.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps UI没有内置的目录控制；然而，通过构建自定义控制的灵活性，实际上有无限的可能性。
- en: The Google Maps JavaScript API allows developers to utilize the third-party
    base maps such as OpenStreetMaps or display the overlay raster layers on top of
    base maps (discussed in detail in [Chapter 2](ch02.html "Chapter 2. Adding Raster
    Layers"), *Adding Raster Layers*). Also, in [Chapter 3](ch03.html "Chapter 3. Adding
    Vector Layers"), *Adding Vector Layers*, various kinds of vector data has been
    overlaid in the respective recipes.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps JavaScript API允许开发者利用第三方基础地图，如OpenStreetMaps，或在基础地图上显示覆盖的栅格图层（在第2章*添加栅格图层*中详细讨论）。此外，在第3章*添加矢量图层*中，各种类型的矢量数据已在相应的菜谱中叠加。
- en: In this recipe, we will only take base maps to be shown on our ToC in order
    to have an understanding of the structure, including keeping the state of the
    control and having multiple event handlers for multiple HTML elements wrapped
    in one control. This structure might be, of course, enriched with the addition
    of overlay and vector layers.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们只将基础地图添加到我们的目录中，以便了解结构，包括保持控制的状态和为多个HTML元素（这些元素被一个控制包裹）提供多个事件处理程序。当然，这种结构可以通过添加覆盖和矢量图层来丰富。
- en: Getting ready
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe will make use of the *Using different tile sources as base maps*
    recipe in [Chapter 2](ch02.html "Chapter 2. Adding Raster Layers"), *Adding Raster
    Layers*. It would be extremely helpful to review this recipe before beginning
    our current recipe. Also, to understand how a simple custom control is created,
    the previous recipe will be key.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 本菜谱将使用[第2章](ch02.html "第2章。添加栅格图层")中*使用不同的瓦片源作为基础地图*的菜谱，*添加栅格图层*。在开始当前菜谱之前回顾这个菜谱将非常有帮助。此外，为了理解如何创建一个简单的自定义控制，前一个菜谱将是关键。
- en: How to do it…
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'The following are the steps to create a working ToC control inside the Google
    Maps UI:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在Google Maps UI中创建一个工作目录控制的步骤：
- en: 'Create a JavaScript class that will contain all our child controls and event
    handlers (up to step 12, all code will be embedded in this class constructor):'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个JavaScript类，该类将包含所有我们的子控件和事件处理程序（直到步骤12，所有代码都将嵌入到这个类构造函数中）：
- en: '[PRE26]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Have `this` as a variable as it will be out of scope in the event handlers:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`this`作为一个变量，因为它在事件处理程序中将超出作用域：
- en: '[PRE27]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Set the CSS properties of the container `div` element inside the class constructor:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类构造函数中设置容器`div`元素的CSS属性：
- en: '[PRE28]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Set the title of the ToC:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置目录标题：
- en: '[PRE29]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create a radio button for the **OpenStreetMap Base Map**:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个单选按钮用于**OpenStreetMap基础地图**：
- en: '[PRE30]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Create a radio button for the **Google Roadmap** base map:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个单选按钮用于**Google Roadmap**基础地图：
- en: '[PRE31]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create a radio button for the **Google Satellite** base map:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个单选按钮用于**Google卫星地图**基础地图：
- en: '[PRE32]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Put all the radio buttons and their labels in the parent `div` element:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有单选按钮及其标签放入父`div`元素中：
- en: '[PRE33]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Create the `click` event handler for `osmRadioButton` (the `setActiveBasemap`
    and `getActiveBasemap` methods will be clarified in the following code):'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`osmRadioButton`的`click`事件处理程序（`setActiveBasemap`和`getActiveBasemap`方法将在以下代码中阐明）：
- en: '[PRE34]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create the `click` event handler for `roadmapRadioButton` as follows:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`roadmapRadioButton`的`click`事件处理程序如下：
- en: '[PRE35]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Create the `click` event handler for `satelliteRadioButton`:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`satelliteRadioButton`的`click`事件处理程序：
- en: '[PRE36]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Outside the `TableOfContentsControl` class constructor, define a property for
    keeping the active base map:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`TableOfContentsControl`类构造函数外部，定义一个用于保持活动基础地图的属性：
- en: '[PRE37]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Define the getter and setter methods for the `_activeBasemap` property:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`_activeBasemap`属性的获取器和设置器方法：
- en: '[PRE38]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'In the `initMap()` function, define the `mapOptions` object as follows:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`initMap()`函数中，定义`mapOptions`对象如下：
- en: '[PRE39]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Define the `osmMapType` object as `ImageMapType`:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`osmMapType`对象定义为`ImageMapType`：
- en: '[PRE40]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Relate the `''OSM'' mapTypeId` object to the `osmMapType` object:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`'OSM' mapTypeId`对象关联到`osmMapType`对象：
- en: '[PRE41]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Set `mapTypeId` for startup:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置启动时的`mapTypeId`：
- en: '[PRE42]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Create the container `div` element, instantiate the `TableOfContentsControl`
    class, and position the container `div` element as a custom control:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建容器 `div` 元素，实例化 `TableOfContentsControl` 类，并将容器 `div` 元素定位为自定义控件：
- en: '[PRE43]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '![How to do it…](img/8825OT_04_07.jpg)'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/8825OT_04_07.jpg)'
- en: You should have your own ToC control as a custom control in your map's UI as
    observed in the preceding screenshot.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在地图的 UI 中拥有自己的目录控件作为自定义控件，如前一个屏幕截图所示。
- en: How it works...
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'This recipe actually carries the same structure as the previous recipe; however,
    there are HTML elements in the custom control that make it seem more complex.
    We will take a look at the details bit by bit so that things will become clearer.
    As in the previous recipe, we have started by creating a JavaScript class constructor
    that embeds all the details, including the necessary radio buttons and their event
    handlers:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方实际上与之前的配方具有相同的结构；然而，自定义控件中有 HTML 元素使其看起来更复杂。我们将逐步查看细节，以便事情变得清晰。与之前的配方一样，我们首先创建了一个
    JavaScript 类构造函数，它嵌入所有细节，包括必要的单选按钮及其事件处理程序：
- en: '[PRE44]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The radio button section for `osmRadioButton` embedded in `TableOfContentsControl`
    is as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入在 `TableOfContentsControl` 中的 `osmRadioButton` 单选按钮部分如下：
- en: '[PRE45]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The preceding code extract for `osmRadioButton` is the same for `roadmapRadioButton`
    and `satelliteRadioButton`. The code creates the radio button and its associated
    label, adds it to the container `div` element (that is referenced as the first
    argument of the constructor), and then registers the `click` event for the radio
    button.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 之前为 `osmRadioButton` 的代码与 `roadmapRadioButton` 和 `satelliteRadioButton` 相同。该代码创建单选按钮及其关联的标签，将其添加到容器
    `div` 元素（这是构造函数的第一个参数引用），然后为单选按钮注册 `click` 事件。
- en: The `click` event checks whether the radio button is checked or not, then—if
    checked—it sets the active base map as an OSM base map. Then, it uses the active
    base map information to set `mapTypeId` for the map; this is referenced as the
    second argument of the constructor.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`click` 事件检查单选按钮是否被选中，然后——如果被选中——它将活动基础地图设置为 OSM 基础地图。然后，它使用活动基础地图信息来设置地图的
    `mapTypeId`；这作为构造函数的第二个参数引用。'
- en: 'To set and get the active base map information, two methods are used:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置和获取活动基础地图信息，使用了两种方法：
- en: '[PRE46]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'These methods are defined outside the constructor as:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法在构造函数外部定义如下：
- en: '[PRE47]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Here, the `_activeBasemap` local variable is defined as:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，定义了 `_activeBasemap` 局部变量：
- en: '[PRE48]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'There is just one tiny but important detail here. For the `click` event handler
    to see getter and setter methods of the `TableOfContentsControl` object, we have
    added a single line:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个微小但重要的细节。为了使 `click` 事件处理程序能够看到 `TableOfContentsControl` 对象的获取器和设置器方法，我们添加了一行代码：
- en: '[PRE49]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Here, `this` would be out of scope inside the event handler.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`this` 在事件处理程序内部将超出作用域。
- en: The OpenStreetMap base map section is located in the `initMap()` function. The
    details of how to display external base maps are covered in [Chapter 2](ch02.html
    "Chapter 2. Adding Raster Layers"), *Adding Raster Layers*, so there is no need
    to go over specific bits and pieces on this.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStreetMap 基础地图部分位于 `initMap()` 函数中。如何显示外部基础地图的详细信息在 [第 2 章](ch02.html "第
    2 章。添加栅格图层") *添加栅格图层* 中有介绍，因此无需详细说明。
- en: 'The final piece of work is actually running the control in the UI. As we do
    not call the constructor of `TableOfContentsControl`, nothing will be shown as
    a custom ToC control. But, before having the ToC control, we have to reserve some
    estate in the `mapOptions` object:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一件工作实际上是在 UI 中运行控件。因为我们没有调用 `TableOfContentsControl` 的构造函数，所以不会显示为自定义目录控件。但在拥有目录控件之前，我们必须在
    `mapOptions` 对象中预留一些空间：
- en: '[PRE50]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: In `mapTypeControlOptions`, we list the possible map type IDs for the map in
    the `mapTypeIds` property.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `mapTypeControlOptions` 中，我们在 `mapTypeIds` 属性中列出地图的可能地图类型 ID。
- en: However, we do not need `maptypeControl` anymore as we would have a ToC control
    instead; therefore, we set the `mapTypeControl` property to `false`.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们不再需要 `maptypeControl`，因为我们会有目录控件；因此，我们将 `mapTypeControl` 属性设置为 `false`。
- en: 'Then the last phase comes: placing the custom ToC control:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是最后一个阶段：放置自定义的目录控件：
- en: '[PRE51]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: First, we create an arbitrary `div` that will act as a container `div` element
    for our custom control. Then, we call the constructor of the `TableOfContentsControl`
    class supplying the container `div` element and the `map` object as arguments.
    After that, the curtain closes with adding the container `div` element to the
    two-dimensional controls array that controls the `map` object in its default place
    in `mapTypeControl`; that is, `google.maps.ControlPosition.TOP_RIGHT`.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建一个任意的`div`，它将作为自定义控件的容器`div`元素。然后，我们调用`TableOfContentsControl`类的构造函数，将容器`div`元素和`map`对象作为参数传递。之后，通过将容器`div`元素添加到控制`map`对象的二维控件数组中，即`mapTypeControl`中的默认位置，帷幕落下；也就是说，`google.maps.ControlPosition.TOP_RIGHT`。
- en: Adding your own logo as a control
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加自定义标志作为控件
- en: The Google Maps JavaScript API has designed the addition of custom controls
    in a very flexible manner so that you can have a variable type of HTML elements
    in one HTML `div` element.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps JavaScript API以非常灵活的方式设计了自定义控件的添加，这样你可以在一个HTML `div`元素中拥有不同类型的HTML元素。
- en: Adding your own logo of choice, such as adding your company's logo on top of
    the map UI in your own application, is a good sign for customization and shows
    off your work.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 添加你选择的标志，例如在你的应用程序的地图UI上添加你公司的标志，是自定义化的好迹象，也展示了你的工作。
- en: In this recipe, we will show a logo as a control in the map UI using the Google
    Maps JavaScript API.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将使用Google Maps JavaScript API在地图UI中显示一个标志作为控件。
- en: Getting ready
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe will make use of the very first recipe of [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*,
    as we only need the basics to develop this recipe.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱将使用[第1章](ch01.html "第1章. Google Maps JavaScript API 基础")的第一个食谱，即*Google Maps
    JavaScript API 基础*，因为我们只需要基础知识来开发这个食谱。
- en: How to do it…
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'The following are the steps to display a logo as a custom control in the Google
    Maps UI:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在Google Maps UI中显示标志作为自定义控件的步骤：
- en: 'After creating the `map` object in the `initMap()` function, create the container
    `div` element:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`initMap()`函数中创建`map`对象后，创建容器`div`元素：
- en: '[PRE52]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Then, create the HTML `img` element that contains your logo of preference:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建包含你首选标志的HTML `img`元素：
- en: '[PRE53]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Insert the `img` element into the container `div` element:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`img`元素插入到容器`div`元素中：
- en: '[PRE54]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Add the container `div` element to the `controls` array of the `map` object:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将容器`div`元素添加到`map`对象的`controls`数组中：
- en: '[PRE55]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '![How to do it…](img/8825OT_04_08.jpg)'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/8825OT_04_08.jpg)'
- en: You can have the logo of your taste as a custom control in your map's UI as
    seen in the preceding screenshot.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在地图的UI中以自定义控件的形式拥有你喜欢的标志，如前一个截图所示。
- en: How it works...
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The code of this recipe is actually the simplest form of custom controls in
    the Google Maps JavaScript API. There is no event handler for the control, and
    there is no state information in conjunction with the control. The only thing
    that exists is the control itself, which is the container div `logoDiv` element.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的代码实际上是Google Maps JavaScript API中自定义控件的最简单形式。没有为控件设置事件处理器，也没有与控件相关的状态信息。唯一存在的是控件本身，即容器div
    `logoDiv`元素。
- en: 'The `logoPic` element and the `img` element keep a reference to the logo file
    and are embedded in `logoDiv`:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`logoPic`元素和`img`元素保持对标志文件的引用，并嵌入到`logoDiv`中：'
- en: '[PRE56]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Lastly, `logoDiv` is added to the `controls` array in the **LEFT_BOTTOM** position.
    When you open your application, you can see your logo in your map UI in its designated
    position.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将`logoDiv`添加到`controls`数组中的**LEFT_BOTTOM**位置。当你打开应用程序时，你可以在地图UI中指定位置看到你的标志。
