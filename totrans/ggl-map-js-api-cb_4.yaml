- en: Chapter 4. Working with Controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding and removing controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the position of controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and adding a geolocation control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a table of contents control for layers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding your own logo as a control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers the controls that are found in the Google Maps JavaScript
    API. Generally speaking, controls are UI elements that interact with the user.
    At a very basic level, they comprise of simple HTML elements or a combination
    of them.
  prefs: []
  type: TYPE_NORMAL
- en: Controls enable the user to pan the map, zoom in or out, measure distances or
    areas, and so on. Complex controls involve the administration of multiple overlay
    layers (introduced in [Chapter 2](ch02.html "Chapter 2. Adding Raster Layers"),
    *Adding Raster Layers*) in the form of a **table of contents** (**ToC**) control,
    or an editing toolbar for drawing vector features.
  prefs: []
  type: TYPE_NORMAL
- en: The Google Maps JavaScript API presents developers with the opportunity to use
    and customize built-in controls as well as build custom controls from the ground
    up.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will first focus on dealing with built-in controls and their configurations
    in detail, including the customization of the UI. Then, creating custom controls
    from very basic to complex ones (such as ToCs) will be covered.
  prefs: []
  type: TYPE_NORMAL
- en: Adding and removing controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Google Maps default UI has several controls that are displayed by default
    or if certain conditions are met. These include:'
  prefs: []
  type: TYPE_NORMAL
- en: Zoom control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pan control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MapType control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scale control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Street View control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rotate control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview Map control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Google Maps JavaScript API presents the opportunity for developers to opt
    in or out of these controls or customize them in terms of functionality or look.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will cover ways to alter the UI by adding or removing built-in
    controls and how to change their properties through presented options.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first recipe of [Chapter 1](ch01.html "Chapter 1. Google Maps JavaScript
    API Basics"), *Google Maps JavaScript API Basics*, will do our work. We will alter
    it for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will opt for the appearance of the built-in controls if you perform the
    following step:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Alter the `mapOptions` object as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/8825OT_04_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: You can have your built-in controls On or Off according to your taste as displayed
    in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You might have observed that we have added a lot to the `mapOptions` object.
    This is because you can make the controls visible or invisible in the `google.maps.mapOptions`
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: By assigning Boolean (true/false) values, you can display `panControl`, `zoomControl`,
    and `overviewMapControl`, while `scaleControl` and `mapTypeControl` are hidden.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some controls appear by default. For instance, we have not mentioned `streetViewControl`
    in our `mapOptions` object; however, it is displayed in the interface because
    it is there by default. The built-in controls and their default presence in the
    UI are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Control name | Default presence |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Zoom control | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Pan control | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Scale control | No |'
  prefs: []
  type: TYPE_TB
- en: '| MapType control | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Street View control | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Rotate control | Yes (for oblique imagery) |'
  prefs: []
  type: TYPE_TB
- en: '| Overview Map control | No |'
  prefs: []
  type: TYPE_TB
- en: 'Although `rotateControl` is displayed by default, you might have noticed that
    it is not found in the interface because it appears only when oblique imagery
    is shown. Tweaking the `mapOptions` object as follows, we can view the control:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enable `mapTypeControl` so that you can select satellite imagery in the UI,
    as shown in the screenshot following the code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How it works...](img/8825OT_04_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: You can see `mapTypeControl` in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Oblique imagery (45 degree imagery) is served in certain locations, and wherever
    present, `mapTypeControl` updates itself to include a submenu toggle for displaying
    oblique imagery.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `RotateControl` control is displayed between the Pan and Zoom controls.
    It allows users to rotate the oblique imagery at 90 degree intervals. Also, the
    Pan control is altered to have a ring, letting us change the heading of the oblique
    imagery when it is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/8825OT_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Google Maps JavaScript API allows us to not only toggle the built-in controls
    between On and Off, but also customize their properties and styles. For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This sets the Overview Map control in the `opened` state. Please remember that
    the Overview Map control's default state is collapsed, and this setting sets the
    control to `opened` at the start of your application. You can collapse or open
    the control whenever you want by pressing the small arrow in the lower-right corner
    of the control.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the Zoom control, the options presented in the recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This option sets the Zoom control to be styled as small, comprising of two
    small buttons, one for zoom in and the other for zoom out. Other options for the
    `style` property for `zoomControlOptions` are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `LARGE` option sets the Zoom control to be seen as a long stick where you
    can traverse between zoom levels. The `DEFAULT` option decides whether to display
    either the large Zoom controls or the small Zoom controls according to the screen
    size.
  prefs: []
  type: TYPE_NORMAL
- en: 'You might have noted that options for controls are handled by objects with
    the `Options` suffix. In the same manner, there are options for `mapTypeControl`
    as well within the `MapTypeControlOptions` object. Adding the following lines
    to the code will make some alterations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The settings in the `mapTypeControlOptions` property make `mapTypeControl` offer
    only the `ROADMAP` and `HYBRID` map types, so you will not be able to select the
    `SATELLITE` and `TERRAIN` map types. As you would recall from [Chapter 2](ch02.html
    "Chapter 2. Adding Raster Layers"), *Adding Raster Layers*, the `mapTypeIds` property
    not only accepts built-in map types, but also styled map types through a `StyledMapType`
    object and any tiled image source—either as a base map or overlay map—through
    the `ImageMapType` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second property, `style`, sets `mapTypeControl` to be displayed as a drop-down
    menu instead of a standard horizontal bar. The other options for the `style` property
    of `mapTypeControlOptions` are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `DEFAULT` option is for dynamically picking the Zoom control as either a
    horizontal bar or a drop-down menu according to the screen estate.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Complete options list for controls**'
  prefs: []
  type: TYPE_NORMAL
- en: The complete options list for controls can be found at the Google Maps JavaScript
    API Reference documentation URL [https://developers.google.com/maps/documentation/javascript/reference](https://developers.google.com/maps/documentation/javascript/reference).
  prefs: []
  type: TYPE_NORMAL
- en: Changing the position of controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Google Maps controls have their default positions, and the Google Maps JavaScript
    API offers a level of flexibility over changing these default positions. You can
    also position your custom controls according to the places in the UI that are
    offered as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the position of controls](img/8825OT_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot depicts the possible locations where you can place
    your controls. It is noteworthy that **TOP_LEFT** is not equal to **LEFT_TOP**,
    with **TOP_LEFT** the first one on the top.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will describe how to specify the corresponding positions
    of controls in the Google Maps UI.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is based on the previous recipe's code; therefore, having that will
    do most of our work.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can flush the positioning of the controls with the following step:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Completely renew the `mapOptions` object as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/8825OT_04_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: You can change your controls' positions in the map UI as per your taste as you
    can observe in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `mapOptions` object, we have specified each control''s position by its
    `position` property in its own options as you can see in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code directs `mapTypeControl` to be placed in the left-top corner
    of the map''s `div` element, while `panControl` is placed in the top-right corner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Complete listing for control positions**'
  prefs: []
  type: TYPE_NORMAL
- en: The complete listing for control positions can be found at the Google Maps JavaScript
    API Reference documentation URL ([https://developers.google.com/maps/documentation/javascript/reference#ControlPosition](https://developers.google.com/maps/documentation/javascript/reference#ControlPosition)).
  prefs: []
  type: TYPE_NORMAL
- en: Creating and adding a geolocation control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Google Maps UI has many built-in controls introduced in previous recipes.
    These controls serve numerous needs, such as panning, zooming, and changing the
    map type. However, the user needs are infinite, and the user might be very creative.
    It is impossible to present a built-in control for every need.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, the Google Maps JavaScript API has presented a path for creating custom
    controls for every specific need. Custom controls are basically simple HTML elements
    wrapped in a single element, mostly the `<div>` element.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will go over the basics of creating a custom control, placing
    it on the Google Maps UI, and using it through event-handling routines.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe will be based on the *Moving from Web to mobile devices* recipe
    introduced in [Chapter 1](ch01.html "Chapter 1. Google Maps JavaScript API Basics"),
    *Google Maps JavaScript API Basics*. Our recipe will utilize the geolocation code
    extract from this recipe; therefore, it will be helpful to revisit this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will have a brand new custom geolocation control if you perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a JavaScript object that will be our custom control at the end
    (the constructor will take two parameters that will be explained in the later
    steps):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `GeoLocationControl` class, set the `class` property to contain
    the `div` element referenced as the first argument in the constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `GeoLocationControl` class, set the internal HTML `div` element
    details, including its `class` attribute, so that this element looks like a button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add this internal `div` element (`controlButton`) to the container `div` element
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `click` event listener for `controlButton` inside the `GeoLocationControl`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, in the ordinary `initMap()` function that we have used over all the recipes,
    add the container HTML `div` element in addition to the standard definition of
    the `map` and `mapOptions` objects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Instantiate the custom control class, the `GeoLocationControl` class inside
    `initMap()`, supplying two arguments: the container `div` element created in the
    previous step and the `map` object itself:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Place the custom control among other controls in the map UI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/8825OT_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You should have a custom control functioning as a geolocation control as seen
    in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe might seem confusing compared to the preceding recipes, but in
    essence, there is just one important point to create custom controls in the Google
    Maps JavaScript API; you can utilize any HTML element to be used as a custom control.
    In fact, the following simple code extract is sufficient to have a custom control:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This code creates an HTML `div` element and then adds it to the controls array
    of the `map` object. The controls array is a two-dimensional array, the first
    dimension being the available positions defined in the `google.maps.ControlPosition`
    class and the second dimension being the controls. This transparent control with
    no label inside will do anything as there is no event-handling code for the `div`
    element; however, this reality does not change the fact that this is a custom
    control.
  prefs: []
  type: TYPE_NORMAL
- en: Other details, such as CSS styling, filling in attributes, and event handling,
    are necessary for a professional custom control to be used for map UI users.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our recipe, we have chosen to create a JavaScript class to wrap all these
    details in order to be structural:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Our class constructor makes use of two elements: the container `div` element
    and the `map` object. It needs the reference for the container `div` element to
    add the child element `controlButton` to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The `controlButton` object (an HTML `div` element) has to respond to some user-originated
    events for the custom control to be useful and meaningful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The `google.maps.event.addDomListener` method acts as an event handler registration,
    and it works in the same way on every browser. These method- and event-related
    subjects will be covered in [Chapter 5](ch05.html "Chapter 5. Understanding Google
    Maps JavaScript API Events"), *Understanding Google Maps JavaScript API Events*.
    For now, it is alright to be aware of the `click` event, which will be listened
    to by the `controlButton` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The geolocation code extract from [Chapter 1](ch01.html "Chapter 1. Google
    Maps JavaScript API Basics"), *Google Maps JavaScript API Basics,* resides inside
    the `addDomListener` method, making use of the Geolocation API of the browser.
    If there is support for the Geolocation API and if the location is retrieved,
    a marker is added to the map for this location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This whole creation of child elements and event-handling logic is enveloped
    in one JavaScript class constructor, which is called by the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the only other code snippet required to accomplish this task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: It is worth noting that the `controls` array takes the container `div` element
    as the custom control. Also, bear in mind that `controls[google.maps.ControlPosition.RIGHT_CENTER]`
    might already have other controls in other scenarios. We are using `push` so that
    the existing controls are not replaced.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a table of contents control for layers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Table of Contents (ToC) controls such as UI elements are very common in desktop
    GIS software, such as ArcGIS Desktop, Mapinfo, and Geomedia. Also, their web counterparts
    make use of ToCs intensively in their UI, including ArcGIS and .Net web components.
  prefs: []
  type: TYPE_NORMAL
- en: The main use of ToCs is to turn On and Off the various raster or vector layers
    so as to overlay and view multiple strata of data. For vector layers, the options
    might be enriched by allowing the users to change the symbology of the vector
    layer with respect to ToCs.
  prefs: []
  type: TYPE_NORMAL
- en: The Google Maps UI does not have a built-in ToC control; however, with the flexibility
    of building up a custom control, there are virtually infinite possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: The Google Maps JavaScript API allows developers to utilize the third-party
    base maps such as OpenStreetMaps or display the overlay raster layers on top of
    base maps (discussed in detail in [Chapter 2](ch02.html "Chapter 2. Adding Raster
    Layers"), *Adding Raster Layers*). Also, in [Chapter 3](ch03.html "Chapter 3. Adding
    Vector Layers"), *Adding Vector Layers*, various kinds of vector data has been
    overlaid in the respective recipes.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will only take base maps to be shown on our ToC in order
    to have an understanding of the structure, including keeping the state of the
    control and having multiple event handlers for multiple HTML elements wrapped
    in one control. This structure might be, of course, enriched with the addition
    of overlay and vector layers.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe will make use of the *Using different tile sources as base maps*
    recipe in [Chapter 2](ch02.html "Chapter 2. Adding Raster Layers"), *Adding Raster
    Layers*. It would be extremely helpful to review this recipe before beginning
    our current recipe. Also, to understand how a simple custom control is created,
    the previous recipe will be key.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps to create a working ToC control inside the Google
    Maps UI:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a JavaScript class that will contain all our child controls and event
    handlers (up to step 12, all code will be embedded in this class constructor):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Have `this` as a variable as it will be out of scope in the event handlers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the CSS properties of the container `div` element inside the class constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the title of the ToC:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a radio button for the **OpenStreetMap Base Map**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a radio button for the **Google Roadmap** base map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a radio button for the **Google Satellite** base map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Put all the radio buttons and their labels in the parent `div` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `click` event handler for `osmRadioButton` (the `setActiveBasemap`
    and `getActiveBasemap` methods will be clarified in the following code):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `click` event handler for `roadmapRadioButton` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `click` event handler for `satelliteRadioButton`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Outside the `TableOfContentsControl` class constructor, define a property for
    keeping the active base map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the getter and setter methods for the `_activeBasemap` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `initMap()` function, define the `mapOptions` object as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the `osmMapType` object as `ImageMapType`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Relate the `''OSM'' mapTypeId` object to the `osmMapType` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set `mapTypeId` for startup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the container `div` element, instantiate the `TableOfContentsControl`
    class, and position the container `div` element as a custom control:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/8825OT_04_07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: You should have your own ToC control as a custom control in your map's UI as
    observed in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe actually carries the same structure as the previous recipe; however,
    there are HTML elements in the custom control that make it seem more complex.
    We will take a look at the details bit by bit so that things will become clearer.
    As in the previous recipe, we have started by creating a JavaScript class constructor
    that embeds all the details, including the necessary radio buttons and their event
    handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The radio button section for `osmRadioButton` embedded in `TableOfContentsControl`
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code extract for `osmRadioButton` is the same for `roadmapRadioButton`
    and `satelliteRadioButton`. The code creates the radio button and its associated
    label, adds it to the container `div` element (that is referenced as the first
    argument of the constructor), and then registers the `click` event for the radio
    button.
  prefs: []
  type: TYPE_NORMAL
- en: The `click` event checks whether the radio button is checked or not, then—if
    checked—it sets the active base map as an OSM base map. Then, it uses the active
    base map information to set `mapTypeId` for the map; this is referenced as the
    second argument of the constructor.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set and get the active base map information, two methods are used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'These methods are defined outside the constructor as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the `_activeBasemap` local variable is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'There is just one tiny but important detail here. For the `click` event handler
    to see getter and setter methods of the `TableOfContentsControl` object, we have
    added a single line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Here, `this` would be out of scope inside the event handler.
  prefs: []
  type: TYPE_NORMAL
- en: The OpenStreetMap base map section is located in the `initMap()` function. The
    details of how to display external base maps are covered in [Chapter 2](ch02.html
    "Chapter 2. Adding Raster Layers"), *Adding Raster Layers*, so there is no need
    to go over specific bits and pieces on this.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final piece of work is actually running the control in the UI. As we do
    not call the constructor of `TableOfContentsControl`, nothing will be shown as
    a custom ToC control. But, before having the ToC control, we have to reserve some
    estate in the `mapOptions` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: In `mapTypeControlOptions`, we list the possible map type IDs for the map in
    the `mapTypeIds` property.
  prefs: []
  type: TYPE_NORMAL
- en: However, we do not need `maptypeControl` anymore as we would have a ToC control
    instead; therefore, we set the `mapTypeControl` property to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then the last phase comes: placing the custom ToC control:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: First, we create an arbitrary `div` that will act as a container `div` element
    for our custom control. Then, we call the constructor of the `TableOfContentsControl`
    class supplying the container `div` element and the `map` object as arguments.
    After that, the curtain closes with adding the container `div` element to the
    two-dimensional controls array that controls the `map` object in its default place
    in `mapTypeControl`; that is, `google.maps.ControlPosition.TOP_RIGHT`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding your own logo as a control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Google Maps JavaScript API has designed the addition of custom controls
    in a very flexible manner so that you can have a variable type of HTML elements
    in one HTML `div` element.
  prefs: []
  type: TYPE_NORMAL
- en: Adding your own logo of choice, such as adding your company's logo on top of
    the map UI in your own application, is a good sign for customization and shows
    off your work.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will show a logo as a control in the map UI using the Google
    Maps JavaScript API.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe will make use of the very first recipe of [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*,
    as we only need the basics to develop this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps to display a logo as a custom control in the Google
    Maps UI:'
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating the `map` object in the `initMap()` function, create the container
    `div` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create the HTML `img` element that contains your logo of preference:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Insert the `img` element into the container `div` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the container `div` element to the `controls` array of the `map` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/8825OT_04_08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: You can have the logo of your taste as a custom control in your map's UI as
    seen in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The code of this recipe is actually the simplest form of custom controls in
    the Google Maps JavaScript API. There is no event handler for the control, and
    there is no state information in conjunction with the control. The only thing
    that exists is the control itself, which is the container div `logoDiv` element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `logoPic` element and the `img` element keep a reference to the logo file
    and are embedded in `logoDiv`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Lastly, `logoDiv` is added to the `controls` array in the **LEFT_BOTTOM** position.
    When you open your application, you can see your logo in your map UI in its designated
    position.
  prefs: []
  type: TYPE_NORMAL
