["```js\ntest('does not save a birthday if there are validation errors', async ({\n  page\n}) => {\n  await page.goto('/birthdays');\n  await page.getByLabel('Name').fill('Demeter');\n  await page\n    .getByLabel('Date of birth')\n    .fill('invalid');\n  await page.getByRole('button').click();\n  await expect(\n    page.getByText('Demeter')\n  ).not.toBeVisible();\n  await expect(\n    page.getByText(\n      'Please provide a date of birth in the YYYY-MM-DD\n       format.'\n    )\n  ).toBeVisible();\n});\n```", "```js\n{\n  name: 'Demeter',\n  dob: 'invalid',\n  error: 'Please provide a date of birth in the YYYY-MM-DD\n          format.'\n}\n```", "```js\n    describe('validation errors', () => {\n      it('displays a message', () => {\n        render(BirthdayForm, {\n          form: {\n            error: 'An error'\n          }\n        });\n        expect(\n          screen.queryByText('An error')\n        ).toBeVisible();\n      });\n    });\n    ```", "```js\n    <script>\n      export let form;\n    </script>\n    <p class=\"error\">{form.error}</p>\n    <form>\n      ...\n    </form>\n    <style>\n      .error {\n        color: red;\n      }\n    </style>\n    ```", "```js\n    <script>\n      export let form = undefined;\n    </script>\n    {#if form?.error}\n      <p class=\"error\">{form.error}</p>\n    {/if}\n    ...\n    ```", "```js\n    describe('validation errors', () => {\n      ...\n      it('keeps the previous name value when an error\n      occurs', () => {\n        render(BirthdayForm, {\n          form: {\n            name: 'Hercules',\n            error: 'Some awful error message'\n          }\n        });\n        expect(\n          screen.queryByLabelText('Name')\n        ).toHaveValue('Hercules');\n      });\n    });\n    ```", "```js\n    <input type=\"text\" name=\"name\" value={form?.name} />\n    ```", "```js\n    describe('validation errors', () => {\n      ...\n      it('keeps the previous dob value when an error\n      occurs', () => {\n        render(BirthdayForm, {\n          form: {\n            dob: '1994-01-01',\n            error: 'Some awful error message'\n          }\n        });\n        expect(\n          screen.queryByLabelText('Date of birth')\n        ).toHaveValue('1994-01-01');\n      });\n    });\n    ```", "```js\n    <input type=\"text\" name=\"dob\" value={form?.dob} />\n    ```", "```js\n    describe('name field', () => {\n      ...\n      it('initially has a blank value', () => {\n        render(BirthdayForm);\n        expect(\n          screen.getByLabelText('Name')\n        ).toHaveValue('');\n      });\n    });\n    ```", "```js\n    <input\n      type=\"text\"\n      name=\"name\"\n      value={form?.name || ''}\n    />\n    ```", "```js\n    describe('date a birth field', () => {\n      ...\n      it('initially has a blank value', () => {\n        render(BirthdayForm);\n        expect(\n          screen.getByLabelText('Name')\n        ).toHaveValue('');\n      });\n    });\n    ```", "```js\n    <input\n      type=\"text\"\n      name=\"dob\"\n      value={form?.dob || ''}\n    />\n    ```", "```js\n    it('passes any form information to the BirthdayForm', () => {\n      render(Page, {\n        data: { birthdays },\n        form: { error: 'An error' }\n      });\n      expect(\n        screen.queryByText('An error')\n      ).toBeVisible();\n    });\n    ```", "```js\n    <script>\n      ...\n      export let form = undefined;\n    </script>\n    ...\n    <BirthdayForm {form} />\n    ```", "```js\n    import {\n      describe,\n      it,\n      expect,\n      beforeEach\n    } from 'vitest';\n    ```", "```js\ndescribe('/birthdays - default action', () => {\n  ...\n  describe('validation errors', () => {\n    describe('when the name is not provided', () => {\n      let result;\n      beforeEach(async () => {\n        const request = createFormDataRequest({\n          name: '',\n          dob: '2009-02-02'\n        });\n        result = await actions.default({\n          request\n        });\n      });\n      it('does not save the birthday', () => {\n        expect(load().birthdays).not.toContainEqual(\n          expect.objectContaining({\n            name: '',\n            dob: '2009-02-02'\n          })\n        );\n      });\n    });\n  });\n});\n```", "```js\n    export const actions = {\n       default: async ({ request }) => {\n         const data = await request.formData();\n        const name = data.get('name');\n        if (empty(name)) {\n          return;\n        }\n        ...\n      }\n    };\n    ```", "```js\n    const empty = (value) =>\n      value === undefined ||\n      value === null ||\n      value.trim() === '';\n    ```", "```js\n    it('returns a 422', () => {\n      expect(result.status).toEqual(422);\n    });\n    ```", "```js\n    import { fail } from '@sveltejs/kit';\n    ```", "```js\n    if (empty(name)) {\n      return fail(422);\n    }\n    ```", "```js\n    it('returns a useful message', () => {\n      expect(result.data.error).toEqual(\n        'Please provide a name.'\n      );\n    });\n    ```", "```js\n    if (empty(name)) {\n      return fail(422, {\n       error: 'Please provide a name.'\n      });\n    }\n    ```", "```js\n    it('returns the data back', () => {\n      expect(result.data).toContain({\n        dob: '2009-02-02'\n      });\n    });\n    ```", "```js\n    const name = data.get('name');\n    const dob = data.get('dob');\n    ...\n    if (empty(name)) {\n      return fail(422, {\n        dob,\n        error: 'Please provide a name.'\n      });\n    }\n    ```", "```js\n    describe('/birthdays - default action', () => {\n      ...\n      describe('validation errors', () => {\n        ...\n        describe('when the date of birth is in the wrong\n        format', () => {\n          let result;\n          beforeEach(async () => {\n            const request = createFormDataRequest({\n              name: 'Hercules',\n              dob: 'unknown'\n            });\n            result = await actions.default({\n              request\n            });\n          });\n          it('does not save the birthday', () => {\n            expect(load().birthdays).not.toContainEqual(\n              expect.objectContaining({\n                name: '',\n                dob: '2009-02-02'\n              })\n            );\n          });\n        });\n      });\n    });\n    ```", "```js\n    const invalidDob = (dob) => isNaN(Date.parse(dob));\n    ```", "```js\n    export const actions = {\n       default: async ({ request }) => {\n         ...\n         if (invalidDob(dob)) {\n           return;\n         }\n      }\n    };\n    ```", "```js\n    it('returns a 422', () => {\n      expect(result.status).toEqual(422);\n    });\n    ```", "```js\n    if (invalidDob(dob)) {\n      return fail(422);\n    }\n    ```", "```js\n    it('returns a useful message', () => {\n      expect(result.data.error).toEqual(\n        'Please provide a date of birth in the YYYY-MM-DD\n         format.'\n      );\n    });\n    ```", "```js\n    if (invalidDob(dob)) {\n      return fail(422, {\n        error:\n          'Please provide a date of birth in the YYYY-MM-\n    DD format.'\n      });\n    }\n    ```", "```js\n    it('returns all data back, including the incorrect value', () => {\n      expect(result.data).toContain({\n        name: 'Hercules',\n        dob: 'unknown'\n      });\n    });\n    ```", "```js\n    if (invalidDob(dob)) {\n      return fail(422, {\n        name,\n        dob,\n        error:\n            'Please provide a date of birth in the YYYY-\n             MM-DD format.'\n      });\n    }\n    ```", "```js\n    addNew({\n      name,\n      dob\n    });\n    ```", "```js\nError: Invalid export 'clear' in /birthdays (valid exports are load, prerender, csr, ssr, actions, trailingSlash, or anything with a '_' prefix)\n```", "```js\n    let db = [];\n    export const addNew = (item) => db.push(item);\n    export const getAll = () => Array.from(db);\n    export const clear = () => (db = []);\n    ```", "```js\n    import {\n      addNew,\n      getAll\n    } from '$lib/server/birthdayRepository.js';\n    ```", "```js\n    export const load = () => ({\n      birthdays: getAll()\n    });\n    ```", "```js\n    import\n      as birthdayRepository\n    from '$lib/server/birthdayRepository.js';\n    ```", "```js\n    describe('/birthdays - default action', () => {\n      beforeEach(birthdayRepository.clear);\n      ...\n    });\n    ```", "```js\n    it('adds a new birthday into the list', async () => {\n      ...\n      expect(birthdayRepository.getAll()).toContainEqual(\n        ...\n      );\n    });\n    ```"]