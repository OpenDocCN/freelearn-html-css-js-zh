- en: Chapter 1. Instant HTML5 Geolocation How-to
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to *Instant HTML 5 Geolocation How-to*. This guide will help you make
    any web application aware of a user's location, quickly and easily. You will learn
    how to map a user's geographic location, integrate it with popular mapping platforms,
    and track the user over time. In the process, you will create a simple application
    that generates a KML file containing both a path and points that you choose to
    save along that path (which can then be imported into Google Maps).
  prefs: []
  type: TYPE_NORMAL
- en: The iPhone changed the way we use the web. It was the first mobile device that
    included web browsing as a primary function. Suddenly, with mobile data and a
    phone like the iPhone, the web could be in your pocket, wherever you went. Through
    HTML5 and APIs, web applications could be truly context sensitive; they could
    know where you were, if you wanted them to react accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: The Geolocation API is not part of HTML5, and is, instead, a JavaScript API
    standard. However, it sits alongside the evolving HTML5 specification as an important
    part of any modern web development toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Geolocation API (Simple)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At its core, the Geolocation API is a series of simple JavaScript calls that
    retrieve the following aspects of the user''s location:'
  prefs: []
  type: TYPE_NORMAL
- en: Latitude and longitude
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Altitude
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The accuracy of the latitude and longitude
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The accuracy of the altitude information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Speed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's worth noting that because of the aforementioned differences in technical
    capabilities, not all of these values are always available, even when the Geolocation
    API is working perfectly. For example, a laptop does not know what its altitude
    is. This is because it determines location in a different way, for example, to
    a smartphone with GPS access. These differences are discussed in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The web can be accessed from different types of hardware, such as desktop computers,
    laptops, tablets, phones, and embedded systems.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **World Wide Web Consortium** (**W3C**) finalizes specifications in such
    a way that the web continues to support each of these platforms. Your operating
    system, Internet service provider, device type, and location all should not matter;
    the web is universal.
  prefs: []
  type: TYPE_NORMAL
- en: All of this means that the web may be the most important publishing medium in
    the history of human civilization—a medium that anyone can publish to and consume.
    However, because each device has slightly different capabilities, each feature
    may have slightly different characteristics from user to user. For example, in
    HTML5, some web browsers can play certain video formats, while other web browsers
    can play other video formats. In the Geolocation API, these changes relate to
    how location is computed, and as a result, how accurate it is.
  prefs: []
  type: TYPE_NORMAL
- en: Here's how the Geolocation API works from the user's perspective. You can see
    it in action by visiting my demo at [http://benwerd.com/lab/geo.php](http://benwerd.com/lab/geo.php).
  prefs: []
  type: TYPE_NORMAL
- en: Visit an application or website that requires location information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The application attempts to determine your location with the Geolocation API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The browser asks you whether you want to reveal the location to the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you consent to sharing your location, your location is determined using available
    hardware and software, and sent to the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you do not consent to sharing your location, no location information is sent
    to the application, and it is notified that no location information will be sent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your application needs the Geolocation API if:'
  prefs: []
  type: TYPE_NORMAL
- en: You want to adjust the application's functionality based on the user's location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You want to adjust a site's content or redirect the user based on his/her location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You want to empower the user to track his/her location over time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Your application cannot use the Geolocation API if:'
  prefs: []
  type: TYPE_NORMAL
- en: You want to track the user without his/her explicit consent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need real-time, extremely accurate location information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will discuss why in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The request for information is an important step to protect user privacy. The
    Geolocation API specification explicitly states, "User Agents must not send location
    information to Web sites without the express permission of the user." It's sadly
    true that the user's location can often still be determined without his/her consent
    through other means, such as IP geolocation or by sharing data between applications.
    However, these are unrelated to the Geolocation API, and we will not be discussing
    them here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what a location request looks like when using Google Chrome on my MacBook
    Pro using a home broadband Internet connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/5903_1_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note the ribbon above the main web page content. The entire content of the page
    has been sent to the browser; once location information has been sent, JavaScript
    could change the content of the page (for example, using the jQuery framework),
    submit the content elsewhere using a callback, or forward the browser to another
    page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what it looks like in the Android Chrome browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/5903_1_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can test your browser's geolocation capabilities by visiting [http://benwerd.com/lab/geo.php](http://benwerd.com/lab/geo.php).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what it looks like when using Google Chrome on my MacBook Pro using
    cable Internet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/5903_1_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here you can see that although my latitude and longitude have been calculated
    reasonably accurately, my altitude, heading, and speed details are not available.
    This is because these details are determined using **GPS** (**Global Positioning
    System**) technology, and my laptop does not have this capability. Instead, my
    web browser needs to guess my location based on various environmental factors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what the same Geolocation API test looks like on my Android Chrome
    browser on my cell phone:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/5903_1_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You might be surprised to see that my altitude, heading, and speed information
    is still not present, despite having been determined on a cellphone that has hardware
    GPS support. In fact, this is because (if you use the default Geolocation API
    configuration) Chrome on Android attempts to use WiFi location first, where it's
    available, before resorting to the relatively battery-intensive (but more accurate)
    GPS location.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what the test page looks like on an iPad:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/5903_1_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Because the iPad did use GPS data to determine my location, altitude information
    is available. However, I wasn't moving, so there's no speed or heading information.
  prefs: []
  type: TYPE_NORMAL
- en: Only latitude, longitude, and accuracy are guaranteed to be there. The other
    fields are entirely dependent on the user's device, movement, and location context.
  prefs: []
  type: TYPE_NORMAL
- en: Where GPS is not available, the browser will use a process called trilateration
    to determine the location.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Trilateration looks at environmental factors such as available wireless networks
    and their relative signal strengths, proximity to cellphone towers, and current
    network IP address, and matches them against a remote database of environmental
    factors against known locations. For most browsers, this database turns out to
    be run by Google, but some providers use a solution from Skyhook Wireless, and
    there are others too. Apple maintains its own database for its products, for example,
    which have probably been crowdsourced from consumer iPhone and iPad usage. Database
    information could also have been gathered from special cars, such as those used
    to take photographs for Google StreetView, and other crowdsourcing techniques.
    It's important to note that the user's location is being sent to a third party
    in these instances, and that the returned location will only be as good as the
    service's database. How this location is determined is not part of the Geolocation
    API specification; all that is required for you to know is that some location
    information is returned.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All modern browsers across both desktop and mobile platforms, except for Opera
    Mini, support the Geolocation API. Most have done so for enough time that you
    should be comfortable using the API in your web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Internet Explorer from Version 9.0 onwards (March 14, 2010)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mozilla Firefox from Version 3.5 onwards (June 30, 2009)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Chrome from Version 5.0 onwards (May 25, 2010)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android Browser from Version 2.1 onwards (January, 2010)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apple Safari on the desktop from Version 5.1 onwards (July 20, 2011)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apple Safari on iOS from Version 3.2 onwards (April 3, 2010)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Opera from Version 10.6 onwards (July 1, 2010)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BlackBerry Browser from Version 7.0 onwards (May, 2011)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '(Source: [CanIUse.com](http://CanIUse.com))'
  prefs: []
  type: TYPE_NORMAL
- en: It's worth noting that because Microsoft Internet Explorer 9.0 was the first
    version to not support Windows XP, there remains a significant enterprise userbase—Internet
    Explorer users with Windows XP operating systems—that cannot use applications
    based on the Geolocation API. At the time of writing, this represents 24 percent
    of all web users worldwide according to [theie8countdown.com](http://theie8countdown.com).
    For this and a host of other reasons, including their own security, let's hope
    that they will upgrade soon.
  prefs: []
  type: TYPE_NORMAL
- en: The lack of Opera Mini support also means that many mobile phone users, particularly
    in developing nations or users with feature phones, are not able to use the Geolocation
    API. This situation is likely to change soon, as open source mobile operating
    systems such as Android and Firefox OS are gaining traction in those markets.
  prefs: []
  type: TYPE_NORMAL
- en: Further resources
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are some relevant resources for further research:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Can I Use Geolocation**: An up-to-date list of browsers that support the
    Geolocation API ([http://caniuse.com/#feat=geolocation](http://caniuse.com/#feat=geolocation))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Geolocation API specification**: [http://dev.w3.org/geo/api/spec-source.html](http://dev.w3.org/geo/api/spec-source.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the application (Simple)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn which server software we require to support the
    Geolocation API, which server software we require to support the application we
    will build in this book, and how to set up your server software to support the
    application.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we're going to build a simple application that creates a **KML**
    (**Keyhole Markup Language**) feed of the user's movements that can be imported
    into mapping applications such as Google Maps and Google Earth. In order to do
    this, we need to capture the user's geolocation coordinates, save them into a
    database, and then export the saved coordinates into a data feed.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are four core actions that will need to be supported:'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the page containing the Geolocation API code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capturing the user's location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing the user's location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying the user's history of locations as a KML feed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the purposes of this book, we will support them in turn with:'
  prefs: []
  type: TYPE_NORMAL
- en: Apache Web Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client-side JavaScript using jQuery (the Geolocation API itself requires no
    support on the server side; we'll use jQuery to simplify AJAX queries and manipulating
    content on the page)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A MySQL database and the PHP scripting language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A simple feed script written in PHP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that you could use any web browser, any web scripting language, and virtually
    any database, to perform these tasks. I hope that the examples here are generalized
    enough to allow you to translate them into the languages and server software of
    your choice. For example, if PHP isn't to your taste, these examples should be
    relatively easy to translate into Ruby or Python.
  prefs: []
  type: TYPE_NORMAL
- en: We will assume that you are running a recent copy of Apache Web Server, configured
    to allow scripting using PHP 5.3 or later.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the following files in a new location on your web server:'
  prefs: []
  type: TYPE_NORMAL
- en: '`index.php`: The main page that retrieves the user''s location'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`callback.php`: The code that our JavaScript will call behind the scenes to
    save the user''s location'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`feed.php`: The script that will echo the KML feed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lib.php`: A common file to handle the database connection and any other configuration'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`live.php`: A version of the main page that continuously retrieves the user''s
    location'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`livepath.php`: A version of the main page that continuously retrieves the
    user''s location and displays his/her route as a path'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a new MySQL database table (and, if you like, a new database to house
    it in) for this example. This will store our retrieved geolocation coordinates,
    with a timestamp and an identifier for the user.
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of different ways we could store the location information.
    Geolocation coordinates are returned as longitude and latitude; an angle on the
    surface of the Earth east and west of the Prime Meridian, and an angle north and
    south of the Equator, respectively. Recall the example data in the *Understanding
    the geolocation API (Simple)* recipe, the angles were returned to 14 decimal places.
    The more accurately we can store these numbers, the more accurately we can retrieve
    the user's location.
  prefs: []
  type: TYPE_NORMAL
- en: For the purposes of this tutorial, we are going to store our coordinates as
    a set of floating point numbers. This is because we're not performing any comparisons
    on the geographic data; we're simply storing and retrieving it.
  prefs: []
  type: TYPE_NORMAL
- en: All we need, then, is decimal point latitudes and longitudes with the required
    level of accuracy, as well as an integer identifier for the user, and another
    for the timestamp. As we'll be searching by user and timestamp, it's a good idea
    to maintain an index for each of these fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll call our database table `points`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Note that I've also included a unique identifier for each row in the database,
    for ease of access later.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the problems with geographic data is that it's very easy to store a huge
    amount of it, which can cause databases to slow down if you're not careful—particularly,
    if you're doing a lot of proximity queries, for example, to discover stored geographic
    points within a certain radius of a location. The mathematics behind this functionality,
    while not massively complicated, can become expensive in aggregate.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL has a spatial support extension, which allows you to store, retrieve,
    and compare extensions based on an optimized geographic engine. This uses a standard
    set from the OpenGIS project to store sets of geographic data. It's often installed
    by default, and is worth getting to know for more sophisticated geo-aware applications.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the user's location (Intermediate)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will detect geolocation support, use the Geolocation API
    to obtain the user's coordinates (if we can), save the coordinates to MySQL via
    our PHP callback, and handle any errors that might occur.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Make sure you''ve set up the required files in the previous section: `index.php`
    to serve the main page, `callback.php` to serve as our callback, and `feed.php`
    to serve as our KML feed. In this section, we will be concentrating on `index.php`
    and `callback.php`.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps for getting the user''s location:'
  prefs: []
  type: TYPE_NORMAL
- en: First, set up `lib.php` as discussed here. This will be the file that handles
    connections to the database for all components in the system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the blanks at the top of the page with your own database details. Note
    that for simplicity, I have used the built-in MySQL functions. For a fully fledged
    PHP application, I recommend using the built-in PDO library.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, set up `callback.php`. This will accept longitude and latitude data from
    our location detection page via an HTTP `POST` request, and save it to our database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, set up `index.php`. This is the page that users will access directly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two large JavaScript blocks in `index.php`, which together interact
    with the Geolocation API. In the body of the page, we've included a simple `div`
    element with ID `locationpane`, which we'll use to give feedback to the user.
    Every time we give feedback, we do so by changing the HTML contents of `locationpane`
    to contain a paragraph with a different message.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the header of the page, there are two functions: `savePosition` and `errorPosition`.
    `savePosition` will be called by the Geolocation API when a location is determined
    and `errorPosition` will be called when there has been an error determining the
    location.'
  prefs: []
  type: TYPE_NORMAL
- en: '`savePosition` takes a single `Position` object as its first parameter. This
    has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`coords`: An object encapsulating the location''s coordinates, which in turn
    contains the following attributes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`latitude`: This is the user''s latitude in degrees. This is a double value.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`longitude`: This is the user''s longitude in degrees. This is a double value.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`accuracy`: This is the margin of error, in meters. This can be a double or
    a null value.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`altitude`: This is the number of meters above the mathematically defined surface
    of the Earth. This can be a double or a null value.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`altitudeAccuracy`: This is the margin of error for the altitude, in meters.
    This can be double or a null value.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`heading`: This is specified in degrees, clockwise relative to true north.
    This can be a double or a null value.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`speed`: This is meters per second. This can be a double or a null value.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timestamp` (`DOMTimeStamp`): This is the timestamp that the location was retrieved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that on some systems in certain contexts, the location won't be determined
    at the time of request; instead, a cached version will be returned. This is why
    the timestamp is important. However, we will discard it here.
  prefs: []
  type: TYPE_NORMAL
- en: '`savePosition` uses jQuery''s AJAX function to take the latitude and longitude
    from the `coords` object and sends it to `callback.php`. It then checks the HTTP
    response code; if `callback.php` has returned an error 500, it tells the user
    that his/her location could not be saved. (More on this in a moment.)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Meanwhile, if there was an error determining the user''s location with the
    Geolocation API, `errorPosition` is called. This takes a `PositionError` object
    as its parameter, which has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`code` (short): A numeric error code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`message` (DOMstring): An internal error message'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rather than output message, which isn''t intended for end users, `errorPosition`
    looks at the error code to determine what kind of feedback to provide to the user:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Error code 1: The user denied the application''s request to track his/her location'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Error code 2: The user''s location could not be determined'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Error code 3: The Geolocation API timed out'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the bottom of the page is the code that actually runs the Geolocation API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before accessing the JavaScript API functions, it''s important to check to
    make sure that the Geolocation API is supported in the current browser. To do
    this, you can simply check to make sure the `navigator.geolocation` object exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If it doesn't, we should give the user feedback to explain that his/her location
    cannot be determined. We could also attempt to retrieve the user's location using
    server-side technologies such as IP geolocation, but this is much less accurate
    and out of the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we''re sure, we can use the Geolocation API, we can call `navigator.geolocation.getCurrentPosition`,
    with references to the success and failure functions as its parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s worth mentioning here that a third parameter is available, which takes
    a `PositionOptions` object. This may contain the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`enableHighAccuracy`: This is a Boolean value. It enables high accuracy mode
    (`default: off`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timeout`: This is a Boolean value. This is the threshold beyond which the
    API times out (in milliseconds; the default is no limit).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'maximumAge: This is a long value. The maximum age of a cached location that
    we''ll accept, in milliseconds (`default: 0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we enable high accuracy mode, mobile devices with GPS units will attempt
    to use it to get the best possible location information (if their owner has allowed
    it); otherwise, they may default to using trilateration to determine the location.
    However, because not all devices have these units and because GPS signals are
    not always available, requesting the current position with high accuracy is more
    likely to fail.
  prefs: []
  type: TYPE_NORMAL
- en: 'While high accuracy, location detection will not automatically fall back to
    the standard method, you can achieve this yourself, if you like. First, call `getCurrentPosition`
    with `highAccuracy` set to `true` and with a reference to a new error handling
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'All this new error handler, `highAccuracyErrorPosition`, does is call `getCurrentPosition`
    with `highAccuracy` set to `false`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The result is that the browser attempts to use high-accuracy location detection,
    and falls back to the standard method if it is not available due to some reason.
    Should the user decline authorization for location information, this continues
    to be respected down the chain.
  prefs: []
  type: TYPE_NORMAL
- en: The callback script, `callback.php`, first loads the database functionality
    from `lib.php` and ensures that it can connect. If connection fails for some reason,
    it returns an HTTP error 500 (Internal Server Error), which tells `index.php`
    to display an error to the user, as previously described.
  prefs: []
  type: TYPE_NORMAL
- en: If `callback.php` is connected to the database successfully, it then sanitizes
    the input variables, `latitude` and `longitude`. It's important to make sure both
    are cast to floating point variables, to minimize the risk of SQL injection attacks.
    The script also retrieves the current UNIX epoch timestamp (represented as the
    number of seconds since 00:00 on January 1, 1970).
  prefs: []
  type: TYPE_NORMAL
- en: The script makes it possible to store location information for an unlimited
    number of users. However, because authentication and user handling are not within
    the scope for this book, we've hardcoded the user's unique ID to `1`. If you had
    a separate MySQL user table, for example, you would set this value to the ID of
    the currently logged-in user. This ID would be saved in the current browser session
    at the point of login. `callback.php` would use the version saved in the session
    rather than sent to it explicitly via a `GET` or `POST` variable, to prevent third
    parties from maliciously saving location information to a user's account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, `callback.php` attempts to save this data to the MySQL table we created
    in the previous section, using a standard MySQL insert call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Once again, if an error occurs, the script returns an HTTP 500 error so that
    the JavaScript on `index.php` can let the user know in a friendly way.
  prefs: []
  type: TYPE_NORMAL
- en: Otherwise, we can reasonably assume that the data was saved in our MySQL table.
    Because we saved it with timestamp information, and because we are also saving
    the user's unique ID in the same table row, we will be able to easily retrieve
    any individual user's locations in chronological order later on.
  prefs: []
  type: TYPE_NORMAL
- en: 'PHP''s default HTTP response code is `200: OK`. This tells the jQuery call
    in `index.php` that the positioning data was saved without any problems. In turn,
    `index.php` lets the user know that his/her location was saved.'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the user's location using the Google Maps API (Intermediate)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've written the code to save the user's location at a particular
    time, we need to consider how we'll display it. In this section, we'll use the
    Google Maps API to display the user's location right now, as well as recent locations
    that we've saved for this user.
  prefs: []
  type: TYPE_NORMAL
- en: The Google Maps API is the most popular online mapping API in the world, which
    is why we will use it for this tutorial. Other mapping APIs are available, including
    offerings from Microsoft Bing, Nokia, and the open source OpenStreetMap project.
    My decision to pick the Google Maps API does not reflect on the quality of these
    other APIs, and you will want to carefully choose between them based on their
    merits and applicability for your project. I have included links to these projects
    at the end of this section, as well as to the Google Maps API documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Use of the Google Maps API is free for non-profit websites at the time of writing.
    Commercial sites are limited to 25,000 map loads per day. Beyond that, you will
    need to acquire a Google Maps API for Business license by contacting Google directly.
  prefs: []
  type: TYPE_NORMAL
- en: We will be using the Google Maps API v3 for the purposes of this tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's begin by retrieving all of our previously-saved points.
  prefs: []
  type: TYPE_NORMAL
- en: First, alter `lib.php` as follows. Recall that this is the script file that
    connects to the database so that points can be saved. We're now expanding its
    role to include a helper function to retrieve all the previously saved points
    for a particular user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, expand `index.php` to load the Google Maps API, retrieve any previous
    points, and display both the set of previous location points and the current location
    on a map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To display our location data, we will use a MySQL function stored in `lib.php`
    to retrieve existing map points. We will also load the Google Maps API using Google''s
    hosted JavaScript library and make use of the following Google Maps objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Map`: The Google Map itself'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Marker`: An individual point on a Google Map'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LatLng`: An object representing a pair of latitude and longitude coordinates'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are three main structural changes we must make to `index.php`. First,
    we must require that `lib.php` is loaded. This will give us access to the database
    and a new function that we'll add to that library.
  prefs: []
  type: TYPE_NORMAL
- en: 'So far, we''ve only stored geolocation data; we haven''t displayed it to the
    user at all. However, because we''ve been saving it to the database, we potentially
    have a rich history of location data that we can retrieve—organized by both user
    and time. A new function, `getPreviousLocations($user_id)`, returns this data
    as an array in chronological order using a simple MySQL select call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Recall that for the purposes of this tutorial, we're always setting `$user_id`
    to `1`. A more sophisticated application would substitute a user identifier from
    the current browser session, or another location.
  prefs: []
  type: TYPE_NORMAL
- en: 'By requiring `lib.php` at the top of `index.php`, we can ensure that we have
    reliable access to this information from the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Another new addition is the JavaScript library that Google provides for the
    Google Maps API. Note that by omitting the URI scheme (`http:` or `https:`), we
    can ensure that the browser will use the correct one, whether your page is accessed
    over a standard or secure HTTP connection. This is placed within the HTML `<head>`
    tag in `index.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we also need a place on the page to display our map. For this, we establish
    a new, empty `div` element with a unique ID (here I've used `map_pane`). The Google
    Maps API will populate this with a complete map later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we''ve set up the framework of the page, we can begin configuring
    the map. We do this in the JavaScript block at the bottom of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The zoom level for Google Maps starts at `0`, where you can see the entire globe.
    Theoretically, the zoom levels are infinite, but in practice, for most maps, the
    maximum level is `19`. Set the zoom level at `15`; it's close enough to be able
    to view your location with precision, but zoomed out enough to see a large amount
    of the surrounding neighborhood.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of different map types at your disposal:'
  prefs: []
  type: TYPE_NORMAL
- en: '`google.maps.MapTypeId.ROADMAP`: The street map view'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`google.maps.MapTypeId.SATELLITE`: A satellite view of the Earth'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`google.maps.MapTypeId.HYBRID`: Street map items overlaid on top of the satellite
    view'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`google.maps.MapTypeId.TERRAIN`: Terrain information without road markings
    and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For now, set the `mapTypeId` to `googlemaps.MapTypeId.HYBRID`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, initialize the `Map` object with the options you've just defined, and
    the `map_pane` DOM element. This is enough to display the map inside the `map_pane`
    div. We'll save it to the `window.googleMap` global variable, which will come
    in handy.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: However, there's every chance we've already got some location information to
    display. Here's where our PHP function, `getPreviousLocations($user_id)`, becomes
    useful. Recall that it's returning an array of database row objects containing
    latitude, longitude, and time.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript is a front-end language, interpreted in the web browser; PHP is a
    server-side language, interpreted before any HTML is received by the browser.
    They cannot directly interface with each other. As a result, we need a way to
    pre-process the array of coordinates so that it's readable by JavaScript. JSON
    is perfect for this task.
  prefs: []
  type: TYPE_NORMAL
- en: 'Luckily, PHP provides a very simple function to encode PHP variables as `JSON:
    json_encode`. We just need to use this on the result of `getPreviousLocations($user_id)`.
    Remembering that we''re hardcoding the value `1` in place of `$user_id`, our hybrid
    JavaScript/PHP code looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'If there was a single location point in the database, this might be rendered
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In other words, `jsonPoints` is seen by JavaScript as an array of JavaScript
    objects. We can simply check that the array is non-empty, and iterate through
    any elements using the `Array.forEach` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We establish `window.points` as a global JavaScript array of Marker objects,
    the objects used to represent individual geographic points in the Google Maps
    API. On instantiation, Marker objects are given a position in terms of a LatLng
    object containing latitude and longitude, and a reference to the Google Map that
    will display them. (We can simply supply the `window.googleMap` variable we created
    earlier for this purpose.)
  prefs: []
  type: TYPE_NORMAL
- en: Once the previously saved geographic points have been written to the map, we
    must ensure that the newly detected location, if it has been successfully obtained,
    is also added.
  prefs: []
  type: TYPE_NORMAL
- en: Previously, we had written a message to the screen—`Location saved`—once a location
    had been successfully processed. Now, we need to also draw it to the map.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we create a new LatLng object containing the latitude and longitude
    of the newly saved location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we can center the map on it using the Map object''s `setCenter` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we create a new Marker object, containing a simple title, the newly
    created LatLng object, and a reference to our Map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The location appears as a pin on the map, alongside previously saved locations.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/5903_2_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Google Maps API**: [https://developers.google.com/maps/](https://developers.google.com/maps/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft Bing Maps API**: [http://www.microsoft.com/maps/developers/web.aspx](http://www.microsoft.com/maps/developers/web.aspx)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nokia Here API**: [http://developer.here.com/](http://developer.here.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OpenStreetMap**: [http://www.openstreetmap.org/](http://www.openstreetmap.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CloudMade**: [http://cloudmade.com/](http://cloudmade.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying the user's location using a KML feed (Intermediate)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Keyhole Markup Language** (**KML**) is an XML-based markup language suitable
    for defining geographic data. Alongside GeoRSS, it's one of two main XML-based
    standards that Google Maps supports. It was originally developed for using with
    Google Earth, which was known as **Keyhole Earth Viewer** until Google acquired
    it. Because multiple applications support KML files, it's a good way to easily
    export your geographic data.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that you have a recent version of PHP installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check that DOM extension of PHP 5 is installed. Specifically, this will use
    the XML `DOMDocument` class. For most installations of PHP 5, this will be installed
    by default, but it's worth checking, as not all installations are the same. You
    can read information about the DOM extension at [http://php.net/manual/en/book.dom.php](http://php.net/manual/en/book.dom.php).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may also wish to install Google Earth in order to test your KML feed. The
    website for Google Earth is listed at the end of this section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to display the user''s location using a KML feed:'
  prefs: []
  type: TYPE_NORMAL
- en: Set up `feed.php` as follows. This will retrieve the location items using the
    `getPreviousLocations($user_id)` function that we created in the *Displaying the
    user's location using the Google Maps API (Intermidiate)* recipe. Using the PHP
    DOM extension, it will create an XML feed in Keyhole Markup Language, which will
    encode the locations and timestamps of each saved point.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Ensure that the resulting feed looks something like this in your browser:![How
    to do it…](img/5903_2_2.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If your feed is accessible to the public Internet, test it by entering its URL
    into the Google Maps search bar:![How to do it…](img/5903_2_3.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **File** | **Save** in your web browser while viewing the feed, and save
    it with a filename ending in `.kml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be able to open the resulting KML file in Google Earth. If you have
    Google Earth installed, test the feed by double-clicking on the file.![How to
    do it…](img/5903_2_4.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's not a good idea to hand-code an XML-based file, or to use a static template
    to do so. Various tools and libraries are available, and the DOM extension that
    was introduced with PHP 5 is an easy way to get started.
  prefs: []
  type: TYPE_NORMAL
- en: Our KML file consists of a Document node, which in turn contains a series of
    Placemark nodes. We could include a large amount of data here, but our minimum
    viable KML file will list name, timestamp, and geographic point information inside
    each Placemark. These are contained within name, TimeStamp, and Point nodes respectively.
    The Point node in turn contains a coordinates node, which lists the geographic
    coordinates of the point. Note that KML coordinates list the latitude first, followed
    by a comma, followed by the longitude. Spaces should not be used.
  prefs: []
  type: TYPE_NORMAL
- en: Placemarks can include more than one Point, as well as a selection of other
    geographic elements, but for the purposes of this example, we'll stick to one
    Point per Placemark.
  prefs: []
  type: TYPE_NORMAL
- en: 'TimeStamps are listed in ISO 8601 format. The TimeStamp for 7:30 p.m. Pacific
    Time on March 11, 2013 would appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new XML file in PHP by instantiating a DOMDocument object, specifying
    XML Version 1.0 and the UTF-8 character set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Define it as being a KML file by including the KML namespace, and establishing
    a root node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'New child nodes are added to a DOMDocument through use of the `appendChild`
    method; elements are created inside them using `createElement`. Now you have your
    root node, you can add the Document node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Using the `getPreviousLocations` function we created earlier, we can nest a
    series of Placemark nodes with the features as described in the preceding code
    line, using more calls to `appendChild` and `createElement`. The complete code
    is available in `feed.php` for you to peruse.
  prefs: []
  type: TYPE_NORMAL
- en: 'All of your data is now loaded into the feed. All that''s left is to write
    it to the browser. First, you must tell it that this is an XML file, by setting
    the HTTP header appropriately:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, then, you can write it to the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This is all you need to create a fully functional KML feed. There's much more
    available in the KML specification, including details about how to style map points,
    and other information that can be included inside the feed as a whole, as well
    as each individual Placemark. A link to the KML specification is included at the
    end of this section.
  prefs: []
  type: TYPE_NORMAL
- en: Because Google Maps natively supports KML, once you've made your system live
    on the web, you can simply paste the URL to your `feed.php` file into the Google
    Maps search box, and your geographic points will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, you can choose to load your KML file into the map you created
    in `index.php`. This has the same effect as entering the address of your KML file
    into the Google Maps search bar, but on the map embedded in your own application.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may remember that we created a global variable referencing the map called
    `window.googleMap`. Directly underneath, you can create a `KmlLayer` object as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Of course, `http://your/kml/feed.php` must be replaced with the URL of your
    feed.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Keyhole Markup Language specification**: [https://developers.google.com/kml/](https://developers.google.com/kml/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracking and updating the user's location (Intermediate)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While recording an individual location when the page loads is useful, in some
    situations you may wish to record the user's location continuously. The Geolocation
    API provides two functions for handling this use case—`watchPosition` and `clearWatch`—and
    in this section, we'll use them to modify our application to automatically resave
    the user's position when he/she moves.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section doesn't require any PHP programming; the modifications are all
    on the front end, using JavaScript. However, ensure that you have a compatible
    device with a GPS receiver and mobile data capability available to test your code.
    Most modern smartphones should suffice; we tested with the Chrome browser on a
    Samsung Galaxy S2, and in Safari on an iPhone 5.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to track and update the user''s location:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a copy of `index.php`, and save it as `live.php`. We''re going to modify
    it to use `watchPosition` and save multiple map points as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This function is called when the Geolocation API successfully retrieves the
    user''s location. Note that we are now saving our map points to an array:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This function is called when there is a problem retrieving the user''s location
    (but the Geolocation API is supported in his/her browser):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And finally, add a function to prevent automatic updating of user location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Following this, we move onto the body of the page, incorporating a new "stop
    watching" button:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Geolocation API `watchPosition` method uses a very similar syntax to the
    `getCurrentPosition` method we used earlier. Its parameters are the same:'
  prefs: []
  type: TYPE_NORMAL
- en: A callback function to call on success
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A callback function to call on failure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An array of options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The available options, in turn, are also the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '`enableHighAccuracy`: This is a Boolean value, It enables high accuracy mode
    (`default: off`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'timeout: This is a long value. It is the threshold beyond which the API times
    out (in milliseconds; the default is no limit).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'maximumAge: This is a long value. It is the maximum age of a cached location
    that we''ll accept, in milliseconds (`default: 0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, rather than initiating a single check for the user's location, it instead
    establishes a "watch" that will load the callback functions as appropriate whenever
    the device has detected that the user has moved. Because you need to reference
    the watch process, `watchPosition` returns an identifier.
  prefs: []
  type: TYPE_NORMAL
- en: 'The identifier is obtained when the method is called, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Note that we've used the `enableHighAccuracy` option, while not failing back
    to a lower-accuracy location method. That's because in a situation where you're
    continually retrieving the location, low-quality data will not be useful. Because
    the device falls back to estimating location through environmental factors, visibly
    erroneous data may be included in your dataset, sometimes hundreds of meters or
    more away from the user's actual location, making it harder to track the user's
    path. It's better to fail if a GPS signal cannot be found.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes, the user may wish to switch tracking off, while remaining on the
    page. To do this, we''ve created a simple button. This will trigger the `clearWatch`
    method, which takes the watch process ID as a single parameter as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: In our implementation, we've also hidden the button using the jQuery `hide()`
    method once it has been pressed.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, our `savePosition` function, which is called whenever a new location
    is successfully received, must display the new location.
  prefs: []
  type: TYPE_NORMAL
- en: In our previous implementation, we simply created a variable for the new Marker
    object to display a single point. However, we also created a `window.points` array
    to keep the Marker objects that were reloaded from the database. In order to display
    the full set of points that are displayed as the user moves around, we'll need
    to add each newly created Marker in the array too.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we can just push new Marker objects to the array as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: However, a series of individual points isn't necessarily the best way to display
    this data.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Unfortunately, at the time of writing this book, there''s no way to prevent
    the mobile device from switching its screen and GPS unit off. Consider the following
    screenshot from a walk I took around the Inner Sunset neighborhood in San Francisco:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/5903_2_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Contrary to what the map might indicate, this was a continuous walk—I didn't
    suddenly leap two blocks in a single bound! However, while I was holding my device
    and ensuring that its screen didn't turn black on some of the streets (indicated
    by the vertical lines you can see here), on the others I chose to slip my device
    into my pocket, as an ordinary user might. The GPS receiver was deactivated automatically
    when the screen went black, in order to conserve battery life. As a result, no
    location points were saved for these portions of my journey.
  prefs: []
  type: TYPE_NORMAL
- en: We can further enhance our application by replacing the individual points on
    the map with a continuous line. This would also help smooth over any gaps in the
    dataset.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve this, we need to replace the portions of the code that set points
    on the map using the Google Maps API. Google provides another element, `PolyLines`,
    which allows you to arbitrarily add coordinates to a continuous line. I've included
    the complete code as `livepath.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the portion of the page where we''re setting up the map, just after we''ve
    loaded the `jsonPoints` JSON array, we need to create a polyline. We''ll make
    it bright red (HTML color `#ff0000`) so that we can see it easily:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we''ll attach it to our existing map. `window.polyLine` will be the global
    variable that stores the polyline:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: And finally, we'll establish `window.geopath` as the array of points that make
    up the polyline. We're saving that as a global variable too, for convenience.
    You'll see why momentarily.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s load our JSON array of previously saved points onto it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, recall the AJAX `done()` function at the top of the page, which is
    called once a new location has been successfully processed. We can replace the
    Google Maps code in this function with a simple line to add the latest coordinates
    to our `PolyLine`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Now, whenever a new location is detected, it will be added to the line rather
    than to the map as a new, individual point.
  prefs: []
  type: TYPE_NORMAL
- en: The Geolocation API is an important addition to any modern web developer's arsenal.
    Together with other new APIs, HTML 5 itself and the new breed of mobile devices,
    the web doesn't just allow you to build high quality network applications; it
    allows you to build new kinds of context-aware applications that have never been
    created before. Happy building.
  prefs: []
  type: TYPE_NORMAL
