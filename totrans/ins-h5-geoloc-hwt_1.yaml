- en: Chapter 1. Instant HTML5 Geolocation How-to
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。Instant HTML5 Geolocation How-to
- en: Welcome to *Instant HTML 5 Geolocation How-to*. This guide will help you make
    any web application aware of a user's location, quickly and easily. You will learn
    how to map a user's geographic location, integrate it with popular mapping platforms,
    and track the user over time. In the process, you will create a simple application
    that generates a KML file containing both a path and points that you choose to
    save along that path (which can then be imported into Google Maps).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎阅读 *Instant HTML 5 Geolocation How-to*。本指南将帮助您快速、轻松地使任何网络应用了解用户的地理位置。您将学习如何将用户的地理位置进行映射，将其与流行的地图平台集成，并随时间跟踪用户。在这个过程中，您将创建一个简单的应用程序，该应用程序生成一个包含您选择的路径和点的KML文件（这些路径和点可以随后导入到谷歌地图中）。
- en: The iPhone changed the way we use the web. It was the first mobile device that
    included web browsing as a primary function. Suddenly, with mobile data and a
    phone like the iPhone, the web could be in your pocket, wherever you went. Through
    HTML5 and APIs, web applications could be truly context sensitive; they could
    know where you were, if you wanted them to react accordingly.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: iPhone改变了我们使用网络的方式。它是第一个将网络浏览作为主要功能的移动设备。突然之间，有了像iPhone这样的手机和移动数据，网络可以放在您的口袋里，无论您走到哪里。通过HTML5和API，网络应用可以真正地具有上下文敏感性；它们可以知道您在哪里，如果需要它们相应地做出反应。
- en: The Geolocation API is not part of HTML5, and is, instead, a JavaScript API
    standard. However, it sits alongside the evolving HTML5 specification as an important
    part of any modern web development toolkit.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 地理定位API不是HTML5的一部分，而是一个JavaScript API标准。然而，它作为现代网络开发工具包的重要部分，与不断发展的HTML5规范并列。
- en: Understanding the Geolocation API (Simple)
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解地理定位API（简单）
- en: 'At its core, the Geolocation API is a series of simple JavaScript calls that
    retrieve the following aspects of the user''s location:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 地理定位API的核心是一系列简单的JavaScript调用，用于检索用户位置的以下方面：
- en: Latitude and longitude
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 纬度和经度
- en: Altitude
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高度
- en: The accuracy of the latitude and longitude
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 纬度和经度的准确性
- en: The accuracy of the altitude information
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高度信息的准确性
- en: Heading
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 航向
- en: Speed
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 速度
- en: It's worth noting that because of the aforementioned differences in technical
    capabilities, not all of these values are always available, even when the Geolocation
    API is working perfectly. For example, a laptop does not know what its altitude
    is. This is because it determines location in a different way, for example, to
    a smartphone with GPS access. These differences are discussed in the next section.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，由于上述技术能力方面的差异，即使地理定位API运行得完美无缺，这些值也不一定总是可用。例如，笔记本电脑不知道它的高度。这是因为它以不同的方式确定位置，例如，与具有GPS访问权限的手机相比。这些差异将在下一节中讨论。
- en: How to do it...
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: The web can be accessed from different types of hardware, such as desktop computers,
    laptops, tablets, phones, and embedded systems.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 网络可以从不同类型的硬件访问，例如台式电脑、笔记本电脑、平板电脑、手机和嵌入式系统。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The **World Wide Web Consortium** (**W3C**) finalizes specifications in such
    a way that the web continues to support each of these platforms. Your operating
    system, Internet service provider, device type, and location all should not matter;
    the web is universal.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**万维网联盟**（**W3C**）以这种方式最终确定规范，使得网络继续支持这些平台中的每一个。您的操作系统、互联网服务提供商、设备类型和位置都不应该有任何影响；网络是普遍的。'
- en: All of this means that the web may be the most important publishing medium in
    the history of human civilization—a medium that anyone can publish to and consume.
    However, because each device has slightly different capabilities, each feature
    may have slightly different characteristics from user to user. For example, in
    HTML5, some web browsers can play certain video formats, while other web browsers
    can play other video formats. In the Geolocation API, these changes relate to
    how location is computed, and as a result, how accurate it is.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些意味着网络可能是人类文明史上最重要的出版媒介——一个任何人都可以发布和消费的媒介。然而，由于每个设备都有略微不同的功能，每个功能可能对每个用户都有略微不同的特性。例如，在HTML5中，一些网络浏览器可以播放某些视频格式，而其他网络浏览器可以播放其他视频格式。在地理定位API中，这些变化与位置的计算方式有关，因此也影响了其准确性。
- en: Here's how the Geolocation API works from the user's perspective. You can see
    it in action by visiting my demo at [http://benwerd.com/lab/geo.php](http://benwerd.com/lab/geo.php).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是地理定位API从用户角度的工作方式。您可以通过访问我的演示[http://benwerd.com/lab/geo.php](http://benwerd.com/lab/geo.php)来看到它的实际效果。
- en: Visit an application or website that requires location information.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问需要位置信息的应用程序或网站。
- en: The application attempts to determine your location with the Geolocation API.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序尝试使用地理位置API确定您的位置。
- en: The browser asks you whether you want to reveal the location to the application.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览器会询问您是否希望向应用程序透露您的位置。
- en: If you consent to sharing your location, your location is determined using available
    hardware and software, and sent to the application.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您同意分享您的位置，您的位置将使用可用的硬件和软件确定，并发送到应用程序。
- en: If you do not consent to sharing your location, no location information is sent
    to the application, and it is notified that no location information will be sent.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您不同意分享您的位置，则不会向应用程序发送任何位置信息，并且会通知应用程序不会发送位置信息。
- en: 'Your application needs the Geolocation API if:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序需要使用地理位置API，则：
- en: You want to adjust the application's functionality based on the user's location
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您想根据用户的位置调整应用程序的功能
- en: You want to adjust a site's content or redirect the user based on his/her location
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您想根据用户的位置调整网站内容或重定向用户
- en: You want to empower the user to track his/her location over time
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您想让用户能够跟踪其随时间变化的位置
- en: 'Your application cannot use the Geolocation API if:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序无法使用地理位置API，则：
- en: You want to track the user without his/her explicit consent
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您想在不经用户明确同意的情况下跟踪用户
- en: You need real-time, extremely accurate location information
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要实时、极其准确的位置信息
- en: We will discuss why in the next section.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节中讨论原因。
- en: How it works...
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The request for information is an important step to protect user privacy. The
    Geolocation API specification explicitly states, "User Agents must not send location
    information to Web sites without the express permission of the user." It's sadly
    true that the user's location can often still be determined without his/her consent
    through other means, such as IP geolocation or by sharing data between applications.
    However, these are unrelated to the Geolocation API, and we will not be discussing
    them here.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 请求信息是保护用户隐私的重要步骤。地理位置API规范明确指出：“用户代理不得在用户明确同意之前向网站发送位置信息。”遗憾的是，用户的位置通常可以通过其他方式确定，例如IP地理位置或通过应用程序之间的数据共享，但这些与地理位置API无关，我们在此不讨论它们。
- en: 'Here''s what a location request looks like when using Google Chrome on my MacBook
    Pro using a home broadband Internet connection:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在我的MacBook Pro上使用家庭宽带互联网连接并使用Google Chrome进行位置请求时的样子：
- en: '![How it works...](img/5903_1_1.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/5903_1_1.jpg)'
- en: Note the ribbon above the main web page content. The entire content of the page
    has been sent to the browser; once location information has been sent, JavaScript
    could change the content of the page (for example, using the jQuery framework),
    submit the content elsewhere using a callback, or forward the browser to another
    page.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 注意主网页内容上方的彩带。页面的全部内容都已发送到浏览器；一旦发送了位置信息，JavaScript可以更改页面内容（例如，使用jQuery框架），通过回调将内容提交到其他地方，或者将浏览器转发到另一个页面。
- en: 'Here''s what it looks like in the Android Chrome browser:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在Android Chrome浏览器中的样子：
- en: '![How it works...](img/5903_1_2.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/5903_1_2.jpg)'
- en: You can test your browser's geolocation capabilities by visiting [http://benwerd.com/lab/geo.php](http://benwerd.com/lab/geo.php).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过访问[http://benwerd.com/lab/geo.php](http://benwerd.com/lab/geo.php)来测试您浏览器的地理位置功能。
- en: 'Here''s what it looks like when using Google Chrome on my MacBook Pro using
    cable Internet:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在我的MacBook Pro上使用有线互联网连接并使用Google Chrome时的样子：
- en: '![How it works...](img/5903_1_3.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/5903_1_3.jpg)'
- en: Here you can see that although my latitude and longitude have been calculated
    reasonably accurately, my altitude, heading, and speed details are not available.
    This is because these details are determined using **GPS** (**Global Positioning
    System**) technology, and my laptop does not have this capability. Instead, my
    web browser needs to guess my location based on various environmental factors.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，尽管我的纬度和经度计算得相当准确，但我的海拔、航向和速度细节不可用。这是因为这些细节是通过**GPS**（**全球定位系统**）技术确定的，而我的笔记本电脑没有这项功能。相反，我的网络浏览器需要根据各种环境因素猜测我的位置。
- en: 'Here''s what the same Geolocation API test looks like on my Android Chrome
    browser on my cell phone:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我的手机上Android Chrome浏览器中的相同地理位置API测试的样子：
- en: '![How it works...](img/5903_1_4.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/5903_1_4.jpg)'
- en: You might be surprised to see that my altitude, heading, and speed information
    is still not present, despite having been determined on a cellphone that has hardware
    GPS support. In fact, this is because (if you use the default Geolocation API
    configuration) Chrome on Android attempts to use WiFi location first, where it's
    available, before resorting to the relatively battery-intensive (but more accurate)
    GPS location.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会惊讶地看到，尽管在具有硬件GPS支持的手机上已经确定了高度、航向和速度信息，但我的这些信息仍然没有出现。实际上，这是因为（如果你使用默认的地理定位API配置）Android上的Chrome会首先尝试使用WiFi位置，如果可用，然后再求助于相对耗电（但更准确）的GPS位置。
- en: 'Here''s what the test page looks like on an iPad:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是测试页面在iPad上的样子：
- en: '![How it works...](img/5903_1_5.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/5903_1_5.jpg)'
- en: Because the iPad did use GPS data to determine my location, altitude information
    is available. However, I wasn't moving, so there's no speed or heading information.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 因为iPad确实使用了GPS数据来确定我的位置，所以可以获取到海拔信息。然而，我没有移动，所以没有速度或航向信息。
- en: Only latitude, longitude, and accuracy are guaranteed to be there. The other
    fields are entirely dependent on the user's device, movement, and location context.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 只有纬度、经度和精度是保证存在的。其他字段完全取决于用户的设备、移动和位置上下文。
- en: Where GPS is not available, the browser will use a process called trilateration
    to determine the location.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当GPS不可用时，浏览器将使用称为三角测量的过程来确定位置。
- en: Note
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Trilateration looks at environmental factors such as available wireless networks
    and their relative signal strengths, proximity to cellphone towers, and current
    network IP address, and matches them against a remote database of environmental
    factors against known locations. For most browsers, this database turns out to
    be run by Google, but some providers use a solution from Skyhook Wireless, and
    there are others too. Apple maintains its own database for its products, for example,
    which have probably been crowdsourced from consumer iPhone and iPad usage. Database
    information could also have been gathered from special cars, such as those used
    to take photographs for Google StreetView, and other crowdsourcing techniques.
    It's important to note that the user's location is being sent to a third party
    in these instances, and that the returned location will only be as good as the
    service's database. How this location is determined is not part of the Geolocation
    API specification; all that is required for you to know is that some location
    information is returned.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 三角测量考虑环境因素，如可用的无线网络及其相对信号强度、与手机塔的接近程度以及当前网络IP地址，并将它们与已知位置的远程数据库中的环境因素进行匹配。对于大多数浏览器，这个数据库实际上是由Google运行的，但一些提供商使用Skyhook
    Wireless的解决方案，还有其他一些。例如，Apple为其产品维护自己的数据库，这些数据库可能来自消费者iPhone和iPad的使用情况，可能是通过众包收集的。数据库信息也可能来自特殊车辆，例如那些用于Google
    StreetView照片拍摄的车辆，以及其他众包技术。需要注意的是，在这些情况下，用户的地理位置信息被发送到了第三方，并且返回的位置将仅与服务的数据库一样好。如何确定位置不是地理定位API规范的一部分；你需要知道的是，会返回一些位置信息。
- en: There's more...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: All modern browsers across both desktop and mobile platforms, except for Opera
    Mini, support the Geolocation API. Most have done so for enough time that you
    should be comfortable using the API in your web applications.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Opera Mini之外，所有桌面和移动平台上的现代浏览器都支持地理定位API。大多数浏览器已经支持了足够长的时间，你应该可以在你的Web应用程序中放心使用该API。
- en: Microsoft Internet Explorer from Version 9.0 onwards (March 14, 2010)
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从版本9.0开始（2010年3月14日）的Microsoft Internet Explorer浏览器
- en: Mozilla Firefox from Version 3.5 onwards (June 30, 2009)
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从版本3.5开始（2009年6月30日）的Mozilla Firefox浏览器
- en: Google Chrome from Version 5.0 onwards (May 25, 2010)
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从版本5.0开始（2010年5月25日）的Google Chrome浏览器
- en: Android Browser from Version 2.1 onwards (January, 2010)
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从版本2.1开始（2010年1月）的Android浏览器
- en: Apple Safari on the desktop from Version 5.1 onwards (July 20, 2011)
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从版本5.1开始（2011年7月20日）的桌面版Apple Safari浏览器
- en: Apple Safari on iOS from Version 3.2 onwards (April 3, 2010)
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从版本3.2开始（2010年4月3日）的iOS版Apple Safari浏览器
- en: Opera from Version 10.6 onwards (July 1, 2010)
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从版本10.6开始（2010年7月1日）的Opera浏览器
- en: BlackBerry Browser from Version 7.0 onwards (May, 2011)
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从版本7.0开始（2011年5月）的黑莓浏览器
- en: '(Source: [CanIUse.com](http://CanIUse.com))'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: (来源：[CanIUse.com](http://CanIUse.com))
- en: It's worth noting that because Microsoft Internet Explorer 9.0 was the first
    version to not support Windows XP, there remains a significant enterprise userbase—Internet
    Explorer users with Windows XP operating systems—that cannot use applications
    based on the Geolocation API. At the time of writing, this represents 24 percent
    of all web users worldwide according to [theie8countdown.com](http://theie8countdown.com).
    For this and a host of other reasons, including their own security, let's hope
    that they will upgrade soon.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，由于Microsoft Internet Explorer 9.0是第一个不支持Windows XP的版本，因此仍然存在一个重要的企业用户群——使用Windows
    XP操作系统的Internet Explorer用户——他们无法使用基于地理位置API的应用程序。在撰写本文时，这代表了全球所有网络用户的24%，根据[theie8countdown.com](http://theie8countdown.com)。出于这个原因以及许多其他原因，包括它们自己的安全，让我们希望他们很快升级。
- en: The lack of Opera Mini support also means that many mobile phone users, particularly
    in developing nations or users with feature phones, are not able to use the Geolocation
    API. This situation is likely to change soon, as open source mobile operating
    systems such as Android and Firefox OS are gaining traction in those markets.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Opera Mini不支持也意味着许多手机用户，尤其是在发展中国家或功能手机用户，无法使用地理位置API。这种情况可能会很快改变，因为开源移动操作系统如Android和Firefox
    OS正在那些市场获得影响力。
- en: Further resources
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多资源
- en: 'Here are some relevant resources for further research:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些相关的资源供进一步研究：
- en: '**Can I Use Geolocation**: An up-to-date list of browsers that support the
    Geolocation API ([http://caniuse.com/#feat=geolocation](http://caniuse.com/#feat=geolocation))'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**我能否使用地理位置定位**：支持地理位置API的浏览器最新列表（[http://caniuse.com/#feat=geolocation](http://caniuse.com/#feat=geolocation)）'
- en: '**Geolocation API specification**: [http://dev.w3.org/geo/api/spec-source.html](http://dev.w3.org/geo/api/spec-source.html)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**地理位置API规范**：[http://dev.w3.org/geo/api/spec-source.html](http://dev.w3.org/geo/api/spec-source.html)'
- en: Setting up the application (Simple)
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置应用程序（简单）
- en: In this section, we will learn which server software we require to support the
    Geolocation API, which server software we require to support the application we
    will build in this book, and how to set up your server software to support the
    application.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习我们需要哪些服务器软件来支持地理位置API，我们需要哪些服务器软件来支持本书中将要构建的应用程序，以及如何设置您的服务器软件以支持该应用程序。
- en: In this book, we're going to build a simple application that creates a **KML**
    (**Keyhole Markup Language**) feed of the user's movements that can be imported
    into mapping applications such as Google Maps and Google Earth. In order to do
    this, we need to capture the user's geolocation coordinates, save them into a
    database, and then export the saved coordinates into a data feed.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将构建一个简单的应用程序，该应用程序创建用户移动的**KML**（**Keyhole Markup Language**）馈送，可以导入到Google
    Maps和Google Earth等地图应用程序中。为了做到这一点，我们需要捕获用户的地理位置坐标，将它们保存到数据库中，然后将保存的坐标导出到数据馈送中。
- en: Getting ready
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'There are four core actions that will need to be supported:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 需要支持的核心操作有四个：
- en: Displaying the page containing the Geolocation API code
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示包含地理位置API代码的页面
- en: Capturing the user's location
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捕获用户的地理位置
- en: Storing the user's location
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储用户的位置
- en: Displaying the user's history of locations as a KML feed
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以KML（**Keyhole Markup Language**）格式显示用户的位置历史记录
- en: 'For the purposes of this book, we will support them in turn with:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本书的目的，我们将依次支持它们：
- en: Apache Web Server
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Web服务器
- en: Client-side JavaScript using jQuery (the Geolocation API itself requires no
    support on the server side; we'll use jQuery to simplify AJAX queries and manipulating
    content on the page)
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用jQuery的客户端JavaScript（地理位置API本身在服务器端不需要支持；我们将使用jQuery来简化AJAX查询和页面内容的操作）
- en: A MySQL database and the PHP scripting language
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL数据库和PHP脚本语言
- en: A simple feed script written in PHP
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用PHP编写的简单馈送脚本
- en: Note that you could use any web browser, any web scripting language, and virtually
    any database, to perform these tasks. I hope that the examples here are generalized
    enough to allow you to translate them into the languages and server software of
    your choice. For example, if PHP isn't to your taste, these examples should be
    relatively easy to translate into Ruby or Python.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，您可以使用任何网络浏览器、任何网络脚本语言和几乎任何数据库来执行这些任务。我希望这里的示例足够通用，以便您可以将它们翻译成您选择的任何语言和服务器软件。例如，如果您不喜欢PHP，这些示例应该相对容易翻译成Ruby或Python。
- en: We will assume that you are running a recent copy of Apache Web Server, configured
    to allow scripting using PHP 5.3 or later.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将假设您正在运行Apache Web服务器的一个最新版本，并已配置为允许使用PHP 5.3或更高版本进行脚本编写。
- en: How to do it...
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Create the following files in a new location on your web server:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络服务器上的新位置创建以下文件：
- en: '`index.php`: The main page that retrieves the user''s location'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.php`: 检索用户位置的主页面'
- en: '`callback.php`: The code that our JavaScript will call behind the scenes to
    save the user''s location'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`callback.php`: 我们将在幕后调用的代码，以保存用户的位置'
- en: '`feed.php`: The script that will echo the KML feed'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`feed.php`: 将回显KML源脚本的脚本'
- en: '`lib.php`: A common file to handle the database connection and any other configuration'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lib.php`: 一个通用文件，用于处理数据库连接和任何其他配置'
- en: '`live.php`: A version of the main page that continuously retrieves the user''s
    location'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`live.php`: 一个主页面版本，它持续检索用户的位置'
- en: '`livepath.php`: A version of the main page that continuously retrieves the
    user''s location and displays his/her route as a path'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`livepath.php`: 一个主页面版本，它持续检索用户的位置并显示其路径'
- en: Create a new MySQL database table (and, if you like, a new database to house
    it in) for this example. This will store our retrieved geolocation coordinates,
    with a timestamp and an identifier for the user.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为此示例创建一个新的MySQL数据库表（如果你喜欢，也可以创建一个新的数据库来存放它）。这将存储我们检索到的地理位置坐标，包括时间戳和用户的标识符。
- en: There are a number of different ways we could store the location information.
    Geolocation coordinates are returned as longitude and latitude; an angle on the
    surface of the Earth east and west of the Prime Meridian, and an angle north and
    south of the Equator, respectively. Recall the example data in the *Understanding
    the geolocation API (Simple)* recipe, the angles were returned to 14 decimal places.
    The more accurately we can store these numbers, the more accurately we can retrieve
    the user's location.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以以多种方式存储位置信息。地理坐标以经度和纬度返回；地球表面上相对于本初子午线的东西角度，以及相对于赤道的南北角度。回想一下*理解地理定位API（简单）*配方中的示例数据，角度被返回到14位小数。我们能够存储这些数字越精确，我们就能越精确地检索用户的位置。
- en: For the purposes of this tutorial, we are going to store our coordinates as
    a set of floating point numbers. This is because we're not performing any comparisons
    on the geographic data; we're simply storing and retrieving it.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程的目的上，我们将把坐标存储为一系列浮点数。这是因为我们不会对地理数据进行任何比较；我们只是存储和检索它。
- en: All we need, then, is decimal point latitudes and longitudes with the required
    level of accuracy, as well as an integer identifier for the user, and another
    for the timestamp. As we'll be searching by user and timestamp, it's a good idea
    to maintain an index for each of these fields.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们需要的只是带有所需精度的十进制点纬度和经度，以及用户的整数标识符和另一个时间戳标识符。由于我们将通过用户和时间戳进行搜索，为每个这些字段维护一个索引是个好主意。
- en: 'We''ll call our database table `points`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把我们的数据库表命名为`points`：
- en: '[PRE0]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.PacktPub.com](http://www.PacktPub.com)的账户中下载您购买的所有Packt书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.PacktPub.com/support](http://www.PacktPub.com/support)并注册以直接将文件通过电子邮件发送给您。
- en: Note that I've also included a unique identifier for each row in the database,
    for ease of access later.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我还包括了数据库中每行的唯一标识符，以便以后方便访问。
- en: There's more...
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: One of the problems with geographic data is that it's very easy to store a huge
    amount of it, which can cause databases to slow down if you're not careful—particularly,
    if you're doing a lot of proximity queries, for example, to discover stored geographic
    points within a certain radius of a location. The mathematics behind this functionality,
    while not massively complicated, can become expensive in aggregate.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 地理数据的一个问题是它很容易存储大量的数据，如果不小心，这可能会导致数据库变慢——尤其是如果你做了很多邻近度查询，例如，发现位于某个位置一定半径内的存储地理点。这个功能背后的数学虽然不是特别复杂，但总体上可能会变得昂贵。
- en: MySQL has a spatial support extension, which allows you to store, retrieve,
    and compare extensions based on an optimized geographic engine. This uses a standard
    set from the OpenGIS project to store sets of geographic data. It's often installed
    by default, and is worth getting to know for more sophisticated geo-aware applications.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Getting the user's location (Intermediate)
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will detect geolocation support, use the Geolocation API
    to obtain the user's coordinates (if we can), save the coordinates to MySQL via
    our PHP callback, and handle any errors that might occur.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Make sure you''ve set up the required files in the previous section: `index.php`
    to serve the main page, `callback.php` to serve as our callback, and `feed.php`
    to serve as our KML feed. In this section, we will be concentrating on `index.php`
    and `callback.php`.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps for getting the user''s location:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: First, set up `lib.php` as discussed here. This will be the file that handles
    connections to the database for all components in the system.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the blanks at the top of the page with your own database details. Note
    that for simplicity, I have used the built-in MySQL functions. For a fully fledged
    PHP application, I recommend using the built-in PDO library.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, set up `callback.php`. This will accept longitude and latitude data from
    our location detection page via an HTTP `POST` request, and save it to our database:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, set up `index.php`. This is the page that users will access directly:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two large JavaScript blocks in `index.php`, which together interact
    with the Geolocation API. In the body of the page, we've included a simple `div`
    element with ID `locationpane`, which we'll use to give feedback to the user.
    Every time we give feedback, we do so by changing the HTML contents of `locationpane`
    to contain a paragraph with a different message.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: 'In the header of the page, there are two functions: `savePosition` and `errorPosition`.
    `savePosition` will be called by the Geolocation API when a location is determined
    and `errorPosition` will be called when there has been an error determining the
    location.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '`savePosition` takes a single `Position` object as its first parameter. This
    has the following properties:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '`coords`: An object encapsulating the location''s coordinates, which in turn
    contains the following attributes:'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`latitude`: This is the user''s latitude in degrees. This is a double value.'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`longitude`: This is the user''s longitude in degrees. This is a double value.'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`accuracy`: This is the margin of error, in meters. This can be a double or
    a null value.'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`altitude`: This is the number of meters above the mathematically defined surface
    of the Earth. This can be a double or a null value.'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`altitudeAccuracy`: This is the margin of error for the altitude, in meters.
    This can be double or a null value.'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`heading`: This is specified in degrees, clockwise relative to true north.
    This can be a double or a null value.'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`heading`: 这是以度为单位指定的，相对于真北顺时针方向。这可以是一个双精度值或null值。'
- en: '`speed`: This is meters per second. This can be a double or a null value.'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`speed`: 这是每秒米数。这可以是一个双精度值或null值。'
- en: '`timestamp` (`DOMTimeStamp`): This is the timestamp that the location was retrieved.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timestamp`（`DOMTimeStamp`）：这是获取位置的时间戳。'
- en: Note that on some systems in certain contexts, the location won't be determined
    at the time of request; instead, a cached version will be returned. This is why
    the timestamp is important. However, we will discard it here.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在某些系统中的某些上下文中，在请求时可能无法确定位置；相反，将返回一个缓存版本。这就是为什么时间戳很重要的原因。然而，我们在这里将忽略它。
- en: '`savePosition` uses jQuery''s AJAX function to take the latitude and longitude
    from the `coords` object and sends it to `callback.php`. It then checks the HTTP
    response code; if `callback.php` has returned an error 500, it tells the user
    that his/her location could not be saved. (More on this in a moment.)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`savePosition`使用jQuery的AJAX函数从`coords`对象中获取纬度和经度，并将其发送到`callback.php`。然后它检查HTTP响应代码；如果`callback.php`返回了错误代码500，它告诉用户他的/她的位置无法保存。（更多内容稍后介绍。）'
- en: 'Meanwhile, if there was an error determining the user''s location with the
    Geolocation API, `errorPosition` is called. This takes a `PositionError` object
    as its parameter, which has the following properties:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，如果使用地理位置API确定用户的位置时出现错误，将调用`errorPosition`。它接受一个`PositionError`对象作为其参数，该对象具有以下属性：
- en: '`code` (short): A numeric error code'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`code`（短）：一个数字错误代码'
- en: '`message` (DOMstring): An internal error message'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`message`（DOM字符串）：一个内部错误消息'
- en: 'Rather than output message, which isn''t intended for end users, `errorPosition`
    looks at the error code to determine what kind of feedback to provide to the user:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 与输出消息不同，这不是针对最终用户的，`errorPosition`会查看错误代码以确定向用户提供哪种反馈：
- en: 'Error code 1: The user denied the application''s request to track his/her location'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误代码1：用户拒绝应用程序跟踪他/她的位置
- en: 'Error code 2: The user''s location could not be determined'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误代码2：无法确定用户的位置
- en: 'Error code 3: The Geolocation API timed out'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误代码3：地理位置API超时
- en: At the bottom of the page is the code that actually runs the Geolocation API.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 页面底部是实际运行地理位置API的代码。
- en: 'Before accessing the JavaScript API functions, it''s important to check to
    make sure that the Geolocation API is supported in the current browser. To do
    this, you can simply check to make sure the `navigator.geolocation` object exists:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在访问JavaScript API函数之前，检查当前浏览器是否支持地理位置API非常重要。为此，你可以简单地检查`navigator.geolocation`对象是否存在：
- en: '[PRE4]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If it doesn't, we should give the user feedback to explain that his/her location
    cannot be determined. We could also attempt to retrieve the user's location using
    server-side technologies such as IP geolocation, but this is much less accurate
    and out of the scope of this book.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有错误，我们应该给用户反馈来解释他的/她的位置无法确定。我们还可以尝试使用服务器端技术（如IP地理位置）来检索用户的位置，但这不太准确，并且超出了本书的范围。
- en: 'Once we''re sure, we can use the Geolocation API, we can call `navigator.geolocation.getCurrentPosition`,
    with references to the success and failure functions as its parameters:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们确定，我们可以使用地理位置API，我们可以调用`navigator.geolocation.getCurrentPosition`，并将成功和失败函数作为其参数引用：
- en: '[PRE5]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'It''s worth mentioning here that a third parameter is available, which takes
    a `PositionOptions` object. This may contain the following properties:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，还有一个可选的第三个参数，它接受一个`PositionOptions`对象。这可能包含以下属性：
- en: '`enableHighAccuracy`: This is a Boolean value. It enables high accuracy mode
    (`default: off`).'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enableHighAccuracy`: 这是一个布尔值。它启用高精度模式（默认：关闭）。'
- en: '`timeout`: This is a Boolean value. This is the threshold beyond which the
    API times out (in milliseconds; the default is no limit).'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timeout`: 这是一个布尔值。这是API超时的阈值（以毫秒为单位；默认无限制）。'
- en: 'maximumAge: This is a long value. The maximum age of a cached location that
    we''ll accept, in milliseconds (`default: 0`).'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'maximumAge: 这是一个长值。这是我们接受的缓存位置的最大年龄，以毫秒为单位（默认：0）。'
- en: If we enable high accuracy mode, mobile devices with GPS units will attempt
    to use it to get the best possible location information (if their owner has allowed
    it); otherwise, they may default to using trilateration to determine the location.
    However, because not all devices have these units and because GPS signals are
    not always available, requesting the current position with high accuracy is more
    likely to fail.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们启用高精度模式，带有 GPS 单元的移动设备将尝试使用它来获取最佳可能的位置信息（如果它们的拥有者允许的话）；否则，它们可能会默认使用三角测量法来确定位置。然而，由于并非所有设备都有这些单元，并且
    GPS 信号并不总是可用，因此请求高精度当前位置更有可能失败。
- en: 'While high accuracy, location detection will not automatically fall back to
    the standard method, you can achieve this yourself, if you like. First, call `getCurrentPosition`
    with `highAccuracy` set to `true` and with a reference to a new error handling
    function:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 当启用高精度时，位置检测不会自动回退到标准方法，但如果你愿意，你可以自己实现这一点。首先，调用 `getCurrentPosition` 并将 `highAccuracy`
    设置为 `true`，同时引用一个新的错误处理函数：
- en: '[PRE6]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'All this new error handler, `highAccuracyErrorPosition`, does is call `getCurrentPosition`
    with `highAccuracy` set to `false`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这个新的错误处理器 `highAccuracyErrorPosition` 做的事情就是调用 `getCurrentPosition` 并将 `highAccuracy`
    设置为 `false`：
- en: '[PRE7]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The result is that the browser attempts to use high-accuracy location detection,
    and falls back to the standard method if it is not available due to some reason.
    Should the user decline authorization for location information, this continues
    to be respected down the chain.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是，浏览器会尝试使用高精度位置检测，如果由于某些原因不可用，则会回退到标准方法。如果用户拒绝授权位置信息，这一行为将一直被尊重。
- en: The callback script, `callback.php`, first loads the database functionality
    from `lib.php` and ensures that it can connect. If connection fails for some reason,
    it returns an HTTP error 500 (Internal Server Error), which tells `index.php`
    to display an error to the user, as previously described.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 回调脚本 `callback.php` 首先从 `lib.php` 加载数据库功能并确保它可以连接。如果由于某些原因连接失败，它将返回 HTTP 错误
    500（内部服务器错误），这会告诉 `index.php` 显示一个错误给用户，如前所述。
- en: If `callback.php` is connected to the database successfully, it then sanitizes
    the input variables, `latitude` and `longitude`. It's important to make sure both
    are cast to floating point variables, to minimize the risk of SQL injection attacks.
    The script also retrieves the current UNIX epoch timestamp (represented as the
    number of seconds since 00:00 on January 1, 1970).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `callback.php` 成功连接到数据库，它将清理输入变量 `latitude` 和 `longitude`。确保两者都被转换为浮点变量非常重要，以最大限度地减少
    SQL 注入攻击的风险。脚本还会检索当前的 UNIX 纪元时间戳（表示自 1970 年 1 月 1 日 00:00 以来经过的秒数）。
- en: The script makes it possible to store location information for an unlimited
    number of users. However, because authentication and user handling are not within
    the scope for this book, we've hardcoded the user's unique ID to `1`. If you had
    a separate MySQL user table, for example, you would set this value to the ID of
    the currently logged-in user. This ID would be saved in the current browser session
    at the point of login. `callback.php` would use the version saved in the session
    rather than sent to it explicitly via a `GET` or `POST` variable, to prevent third
    parties from maliciously saving location information to a user's account.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本使得能够为无限数量的用户存储位置信息。然而，由于认证和用户处理不在此书的范围之内，我们硬编码了用户的唯一 ID 为 `1`。例如，如果你有一个独立的
    MySQL 用户表，你会将此值设置为当前登录用户的 ID。此 ID 将在登录时保存在当前的浏览器会话中。`callback.php` 将使用会话中保存的版本，而不是通过
    `GET` 或 `POST` 变量显式发送给它，以防止第三方恶意将位置信息保存到用户的账户中。
- en: 'Finally, `callback.php` attempts to save this data to the MySQL table we created
    in the previous section, using a standard MySQL insert call:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`callback.php` 尝试使用上一节中创建的 MySQL 表的标准 MySQL 插入调用将此数据保存到数据库中：
- en: '[PRE8]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Once again, if an error occurs, the script returns an HTTP 500 error so that
    the JavaScript on `index.php` can let the user know in a friendly way.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，如果发生错误，脚本将返回一个 HTTP 500 错误，这样 `index.php` 上的 JavaScript 就可以用一种友好的方式通知用户。
- en: Otherwise, we can reasonably assume that the data was saved in our MySQL table.
    Because we saved it with timestamp information, and because we are also saving
    the user's unique ID in the same table row, we will be able to easily retrieve
    any individual user's locations in chronological order later on.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，我们可以合理地假设数据已被保存在我们的 MySQL 表中。因为我们保存了时间戳信息，并且因为我们还在同一行中保存了用户的唯一 ID，所以我们可以轻松地按时间顺序检索任何单个用户的位置。
- en: 'PHP''s default HTTP response code is `200: OK`. This tells the jQuery call
    in `index.php` that the positioning data was saved without any problems. In turn,
    `index.php` lets the user know that his/her location was saved.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 'PHP 的默认 HTTP 响应代码是 `200: OK`。这告诉 `index.php` 中的 jQuery 调用定位数据已成功保存，没有任何问题。反过来，`index.php`
    会通知用户他的/她的位置已保存。'
- en: Displaying the user's location using the Google Maps API (Intermediate)
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Google Maps API 显示用户的位置（中级）
- en: Now that we've written the code to save the user's location at a particular
    time, we need to consider how we'll display it. In this section, we'll use the
    Google Maps API to display the user's location right now, as well as recent locations
    that we've saved for this user.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经编写了保存用户特定时间位置的代码，我们需要考虑如何展示它。在本节中，我们将使用 Google Maps API 展示用户当前的位置，以及我们为该用户保存的最近位置。
- en: The Google Maps API is the most popular online mapping API in the world, which
    is why we will use it for this tutorial. Other mapping APIs are available, including
    offerings from Microsoft Bing, Nokia, and the open source OpenStreetMap project.
    My decision to pick the Google Maps API does not reflect on the quality of these
    other APIs, and you will want to carefully choose between them based on their
    merits and applicability for your project. I have included links to these projects
    at the end of this section, as well as to the Google Maps API documentation.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps API 是世界上最受欢迎的在线地图 API，这就是为什么我们将使用它进行本教程。其他地图 API 也是可用的，包括来自 Microsoft
    Bing、Nokia 以及开源的 OpenStreetMap 项目。我选择 Google Maps API 的决定并不反映这些其他 API 的质量，您将需要根据它们的优点和适用性仔细选择它们用于您的项目。我在本节末尾包括了这些项目的链接，以及
    Google Maps API 文档的链接。
- en: Use of the Google Maps API is free for non-profit websites at the time of writing.
    Commercial sites are limited to 25,000 map loads per day. Beyond that, you will
    need to acquire a Google Maps API for Business license by contacting Google directly.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，使用 Google Maps API 对非营利性网站是免费的。商业网站每天限制为 25,000 次地图加载。超过这个限制，您需要通过直接联系
    Google 获取 Google Maps API for Business 许可证。
- en: We will be using the Google Maps API v3 for the purposes of this tutorial.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用 Google Maps API v3。
- en: How to do it...
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Let's begin by retrieving all of our previously-saved points.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先检索所有之前保存的点。
- en: First, alter `lib.php` as follows. Recall that this is the script file that
    connects to the database so that points can be saved. We're now expanding its
    role to include a helper function to retrieve all the previously saved points
    for a particular user.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，按照以下方式修改 `lib.php`。回想一下，这是一个连接到数据库的脚本文件，以便保存点。我们现在扩展其功能，包括一个辅助函数，用于检索特定用户的先前保存的所有点。
- en: '[PRE9]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, expand `index.php` to load the Google Maps API, retrieve any previous
    points, and display both the set of previous location points and the current location
    on a map:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，扩展 `index.php` 以加载 Google Maps API，检索任何之前的点，并在地图上显示这些先前位置点和当前位置：
- en: '[PRE10]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works...
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'To display our location data, we will use a MySQL function stored in `lib.php`
    to retrieve existing map points. We will also load the Google Maps API using Google''s
    hosted JavaScript library and make use of the following Google Maps objects:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示我们的位置数据，我们将使用存储在 `lib.php` 中的 MySQL 函数检索现有的地图点。我们还将使用 Google 的托管 JavaScript
    库加载 Google Maps API，并使用以下 Google Maps 对象：
- en: '`Map`: The Google Map itself'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Map`: Google 地图本身'
- en: '`Marker`: An individual point on a Google Map'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Marker`: Google 地图上的一个单独的点'
- en: '`LatLng`: An object representing a pair of latitude and longitude coordinates'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LatLng`: 表示一对纬度和经度坐标的对象'
- en: There are three main structural changes we must make to `index.php`. First,
    we must require that `lib.php` is loaded. This will give us access to the database
    and a new function that we'll add to that library.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须对 `index.php` 进行三个主要的结构性更改。首先，我们必须确保加载 `lib.php`。这将使我们能够访问数据库以及我们将添加到该库的新函数。
- en: 'So far, we''ve only stored geolocation data; we haven''t displayed it to the
    user at all. However, because we''ve been saving it to the database, we potentially
    have a rich history of location data that we can retrieve—organized by both user
    and time. A new function, `getPreviousLocations($user_id)`, returns this data
    as an array in chronological order using a simple MySQL select call:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只存储了地理位置数据；我们根本还没有向用户展示过。然而，因为我们已经将其保存到数据库中，所以我们潜在地拥有一个丰富的位置数据历史，我们可以检索这些数据——按用户和时间组织。一个新的函数
    `getPreviousLocations($user_id)` 通过简单的 MySQL 查询调用返回这些数据，按时间顺序排列：
- en: '[PRE11]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Recall that for the purposes of this tutorial, we're always setting `$user_id`
    to `1`. A more sophisticated application would substitute a user identifier from
    the current browser session, or another location.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在本教程的目的上，我们始终将`$user_id`设置为`1`。一个更复杂的应用程序将用当前浏览器会话中的用户标识符或另一个位置的标识符来替换。
- en: 'By requiring `lib.php` at the top of `index.php`, we can ensure that we have
    reliable access to this information from the database:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在`index.php`的顶部包含`lib.php`，我们可以确保从数据库中可靠地访问这些信息：
- en: '[PRE12]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Another new addition is the JavaScript library that Google provides for the
    Google Maps API. Note that by omitting the URI scheme (`http:` or `https:`), we
    can ensure that the browser will use the correct one, whether your page is accessed
    over a standard or secure HTTP connection. This is placed within the HTML `<head>`
    tag in `index.php`:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个新增加的是Google为Google Maps API提供的JavaScript库。请注意，通过省略URI方案（`http:`或`https:`），我们可以确保浏览器将使用正确的方案，无论您的页面是通过标准HTTP连接还是安全HTTP连接访问。这被放置在`index.php`中的HTML
    `<head>`标签内：
- en: '[PRE13]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Finally, we also need a place on the page to display our map. For this, we establish
    a new, empty `div` element with a unique ID (here I've used `map_pane`). The Google
    Maps API will populate this with a complete map later.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还需要在页面上有一个地方来显示我们的地图。为此，我们创建一个新的、空的`div`元素，并为其分配一个唯一的ID（在这里我使用了`map_pane`）。Google
    Maps API将在稍后填充这个完整的地图。
- en: 'Now that we''ve set up the framework of the page, we can begin configuring
    the map. We do this in the JavaScript block at the bottom of the page:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了页面的框架，我们可以开始配置地图。我们在页面底部的JavaScript块中这样做：
- en: '[PRE14]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The zoom level for Google Maps starts at `0`, where you can see the entire globe.
    Theoretically, the zoom levels are infinite, but in practice, for most maps, the
    maximum level is `19`. Set the zoom level at `15`; it's close enough to be able
    to view your location with precision, but zoomed out enough to see a large amount
    of the surrounding neighborhood.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps的缩放级别从`0`开始，在那里您可以查看整个地球。理论上，缩放级别是无限的，但在实践中，对于大多数地图，最大级别是`19`。将缩放级别设置为`15`；这足够接近，可以精确地查看您的位置，但同时也足够缩小，可以看到周围的大量区域。
- en: 'There are a number of different map types at your disposal:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 您有几种不同的地图类型可供选择：
- en: '`google.maps.MapTypeId.ROADMAP`: The street map view'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`google.maps.MapTypeId.ROADMAP`：街道地图视图'
- en: '`google.maps.MapTypeId.SATELLITE`: A satellite view of the Earth'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`google.maps.MapTypeId.SATELLITE`：地球的卫星视图'
- en: '`google.maps.MapTypeId.HYBRID`: Street map items overlaid on top of the satellite
    view'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`google.maps.MapTypeId.HYBRID`：在卫星视图上叠加的街道地图项'
- en: '`google.maps.MapTypeId.TERRAIN`: Terrain information without road markings
    and so on'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`google.maps.MapTypeId.TERRAIN`：没有道路标记等的地形信息'
- en: For now, set the `mapTypeId` to `googlemaps.MapTypeId.HYBRID`.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，将`mapTypeId`设置为`googlemaps.MapTypeId.HYBRID`。
- en: Next, initialize the `Map` object with the options you've just defined, and
    the `map_pane` DOM element. This is enough to display the map inside the `map_pane`
    div. We'll save it to the `window.googleMap` global variable, which will come
    in handy.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用您刚刚定义的选项和`map_pane` DOM元素初始化`Map`对象。这足以在`map_pane` div中显示地图。我们将将其保存到`window.googleMap`全局变量中，这将非常有用。
- en: '[PRE15]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: However, there's every chance we've already got some location information to
    display. Here's where our PHP function, `getPreviousLocations($user_id)`, becomes
    useful. Recall that it's returning an array of database row objects containing
    latitude, longitude, and time.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们很可能已经有了要显示的一些位置信息。这就是我们的PHP函数`getPreviousLocations($user_id)`变得有用的地方。请记住，它返回一个包含纬度、经度和时间的数据库行对象的数组。
- en: JavaScript is a front-end language, interpreted in the web browser; PHP is a
    server-side language, interpreted before any HTML is received by the browser.
    They cannot directly interface with each other. As a result, we need a way to
    pre-process the array of coordinates so that it's readable by JavaScript. JSON
    is perfect for this task.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是一种前端语言，在浏览器中解释；PHP是一种服务器端语言，在浏览器接收到任何HTML之前解释。它们不能直接相互接口。因此，我们需要一种预处理坐标数组的方法，使其可由JavaScript读取。JSON非常适合这项任务。
- en: 'Luckily, PHP provides a very simple function to encode PHP variables as `JSON:
    json_encode`. We just need to use this on the result of `getPreviousLocations($user_id)`.
    Remembering that we''re hardcoding the value `1` in place of `$user_id`, our hybrid
    JavaScript/PHP code looks like the following:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，PHP提供了一个非常简单的函数来将PHP变量编码为`JSON`格式：`json_encode`。我们只需将此函数应用于`getPreviousLocations($user_id)`的结果。记住，我们在`$user_id`的位置硬编码了值`1`，我们的混合JavaScript/PHP代码如下所示：
- en: '[PRE16]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If there was a single location point in the database, this might be rendered
    as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据库中只有一个位置点，它可能如下所示：
- en: '[PRE17]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In other words, `jsonPoints` is seen by JavaScript as an array of JavaScript
    objects. We can simply check that the array is non-empty, and iterate through
    any elements using the `Array.forEach` method:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，`jsonPoints` 在 JavaScript 中被视为一个 JavaScript 对象数组。我们可以简单地检查数组是否非空，并使用 `Array.forEach`
    方法遍历任何元素：
- en: '[PRE18]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We establish `window.points` as a global JavaScript array of Marker objects,
    the objects used to represent individual geographic points in the Google Maps
    API. On instantiation, Marker objects are given a position in terms of a LatLng
    object containing latitude and longitude, and a reference to the Google Map that
    will display them. (We can simply supply the `window.googleMap` variable we created
    earlier for this purpose.)
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 `window.points` 建立为一个全局JavaScript数组，包含标记对象（Marker objects），这些对象用于在Google
    Maps API中表示单个地理点。在实例化时，标记对象被赋予一个位置，即包含纬度和经度的经纬度对象（LatLng object），以及将显示它们的Google地图的引用。（我们可以简单地提供我们之前为该目的创建的
    `window.googleMap` 变量。）
- en: Once the previously saved geographic points have been written to the map, we
    must ensure that the newly detected location, if it has been successfully obtained,
    is also added.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦之前保存的地理点被写入地图，我们必须确保新检测到的位置，如果它已被成功获取，也被添加。
- en: Previously, we had written a message to the screen—`Location saved`—once a location
    had been successfully processed. Now, we need to also draw it to the map.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们在位置成功处理后向屏幕发送了一条消息——“位置已保存”——现在，我们还需要将其绘制到地图上。
- en: 'First, we create a new LatLng object containing the latitude and longitude
    of the newly saved location:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建一个新的经纬度对象（LatLng object），包含新保存位置的纬度和经度：
- en: '[PRE19]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, we can center the map on it using the Map object''s `setCenter` method:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以使用地图对象的 `setCenter` 方法将其置于地图中心：
- en: '[PRE20]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Finally, we create a new Marker object, containing a simple title, the newly
    created LatLng object, and a reference to our Map:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们创建一个新的标记对象（Marker object），包含一个简单的标题、新创建的经纬度对象（LatLng object）以及对我们地图的引用：
- en: '[PRE21]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The location appears as a pin on the map, alongside previously saved locations.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 位置在地图上以图钉的形式显示，与之前保存的位置并列。
- en: '![How it works...](img/5903_2_1.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/5903_2_1.jpg)'
- en: See also
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '**Google Maps API**: [https://developers.google.com/maps/](https://developers.google.com/maps/)'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**谷歌地图API**：[https://developers.google.com/maps/](https://developers.google.com/maps/)'
- en: '**Microsoft Bing Maps API**: [http://www.microsoft.com/maps/developers/web.aspx](http://www.microsoft.com/maps/developers/web.aspx)'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微软必应地图API**：[http://www.microsoft.com/maps/developers/web.aspx](http://www.microsoft.com/maps/developers/web.aspx)'
- en: '**Nokia Here API**: [http://developer.here.com/](http://developer.here.com/)'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**诺基亚Here API**：[http://developer.here.com/](http://developer.here.com/)'
- en: '**OpenStreetMap**: [http://www.openstreetmap.org/](http://www.openstreetmap.org/)'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OpenStreetMap**：[http://www.openstreetmap.org/](http://www.openstreetmap.org/)'
- en: '**CloudMade**: [http://cloudmade.com/](http://cloudmade.com/)'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CloudMade**：[http://cloudmade.com/](http://cloudmade.com/)'
- en: Displaying the user's location using a KML feed (Intermediate)
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用KML馈送显示用户的位置（中级）
- en: The **Keyhole Markup Language** (**KML**) is an XML-based markup language suitable
    for defining geographic data. Alongside GeoRSS, it's one of two main XML-based
    standards that Google Maps supports. It was originally developed for using with
    Google Earth, which was known as **Keyhole Earth Viewer** until Google acquired
    it. Because multiple applications support KML files, it's a good way to easily
    export your geographic data.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '**Keyhole标记语言（KML）**是一种基于XML的标记语言，适用于定义地理数据。与GeoRSS一样，它是Google Maps支持的两个主要基于XML的标准之一。它最初是为与Google
    Earth一起使用而开发的，当时被称为**Keyhole Earth Viewer**，直到Google收购它。由于多个应用程序支持KML文件，因此它是轻松导出地理数据的好方法。'
- en: Getting ready
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Perform the following steps:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: Ensure that you have a recent version of PHP installed.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您已安装最新的PHP版本。
- en: Check that DOM extension of PHP 5 is installed. Specifically, this will use
    the XML `DOMDocument` class. For most installations of PHP 5, this will be installed
    by default, but it's worth checking, as not all installations are the same. You
    can read information about the DOM extension at [http://php.net/manual/en/book.dom.php](http://php.net/manual/en/book.dom.php).
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查PHP 5的DOM扩展是否已安装。具体来说，这将使用XML的 `DOMDocument` 类。对于大多数PHP 5的安装，这将默认安装，但值得检查，因为并非所有安装都相同。您可以在[http://php.net/manual/en/book.dom.php](http://php.net/manual/en/book.dom.php)上阅读有关DOM扩展的信息。
- en: You may also wish to install Google Earth in order to test your KML feed. The
    website for Google Earth is listed at the end of this section.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可能还希望安装 Google Earth 以测试您的 KML 馈送。Google Earth 的网站在本节末尾列出。
- en: How to do it…
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Perform the following steps to display the user''s location using a KML feed:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以使用 KML 馈送显示用户的位置：
- en: Set up `feed.php` as follows. This will retrieve the location items using the
    `getPreviousLocations($user_id)` function that we created in the *Displaying the
    user's location using the Google Maps API (Intermidiate)* recipe. Using the PHP
    DOM extension, it will create an XML feed in Keyhole Markup Language, which will
    encode the locations and timestamps of each saved point.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式设置 `feed.php`。这将使用我们在 *使用 Google Maps API 显示用户位置（中级）* 菜谱中创建的 `getPreviousLocations($user_id)`
    函数检索位置项。使用 PHP DOM 扩展，它将创建一个 Keyhole 标记语言（KML）的 XML 馈送，该馈送将编码每个保存点的位置和时间戳。
- en: '[PRE22]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Ensure that the resulting feed looks something like this in your browser:![How
    to do it…](img/5903_2_2.jpg)
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在您的浏览器中生成的馈送看起来像这样：![如何操作…](img/5903_2_2.jpg)
- en: If your feed is accessible to the public Internet, test it by entering its URL
    into the Google Maps search bar:![How to do it…](img/5903_2_3.jpg)
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您的馈送对公共互联网可访问，通过将其 URL 输入 Google Maps 搜索栏来测试它：![如何操作…](img/5903_2_3.jpg)
- en: Select **File** | **Save** in your web browser while viewing the feed, and save
    it with a filename ending in `.kml`.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中查看馈送时，选择 **文件** | **保存**，并以 `.kml` 结尾的文件名保存。
- en: You will be able to open the resulting KML file in Google Earth. If you have
    Google Earth installed, test the feed by double-clicking on the file.![How to
    do it…](img/5903_2_4.jpg)
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将能够在 Google Earth 中打开生成的 KML 文件。如果您已安装 Google Earth，通过双击文件来测试馈送。![如何操作…](img/5903_2_4.jpg)
- en: How it works...
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: It's not a good idea to hand-code an XML-based file, or to use a static template
    to do so. Various tools and libraries are available, and the DOM extension that
    was introduced with PHP 5 is an easy way to get started.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 手动编码基于 XML 的文件，或者使用静态模板来这样做并不是一个好主意。有各种工具和库可用，PHP 5 中引入的 DOM 扩展是开始的一个简单方法。
- en: Our KML file consists of a Document node, which in turn contains a series of
    Placemark nodes. We could include a large amount of data here, but our minimum
    viable KML file will list name, timestamp, and geographic point information inside
    each Placemark. These are contained within name, TimeStamp, and Point nodes respectively.
    The Point node in turn contains a coordinates node, which lists the geographic
    coordinates of the point. Note that KML coordinates list the latitude first, followed
    by a comma, followed by the longitude. Spaces should not be used.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 KML 文件由一个 Document 节点组成，它反过来包含一系列 Placemark 节点。我们在这里可以包含大量数据，但我们的最小可行 KML
    文件将在每个 Placemark 中列出名称、时间戳和地理点信息。这些分别包含在 name、TimeStamp 和 Point 节点中。Point 节点反过来包含一个坐标节点，该节点列出点的地理坐标。请注意，KML
    坐标首先列出纬度，然后是逗号，然后是经度。不应使用空格。
- en: Placemarks can include more than one Point, as well as a selection of other
    geographic elements, but for the purposes of this example, we'll stick to one
    Point per Placemark.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 地标可以包含多个点，以及一系列其他地理元素，但为了本例的目的，我们将坚持每个地标一个点。
- en: 'TimeStamps are listed in ISO 8601 format. The TimeStamp for 7:30 p.m. Pacific
    Time on March 11, 2013 would appear as follows:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 时间戳以 ISO 8601 格式列出。2013 年 3 月 11 日太平洋时间晚上 7:30 的时间戳将如下所示：
- en: '[PRE23]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Create a new XML file in PHP by instantiating a DOMDocument object, specifying
    XML Version 1.0 and the UTF-8 character set:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实例化一个 DOMDocument 对象，指定 XML 版本 1.0 和 UTF-8 字符集，在 PHP 中创建一个新的 XML 文件：
- en: '[PRE24]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Define it as being a KML file by including the KML namespace, and establishing
    a root node:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 通过包含 KML 命名空间并建立根节点来将其定义为 KML 文件：
- en: '[PRE25]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'New child nodes are added to a DOMDocument through use of the `appendChild`
    method; elements are created inside them using `createElement`. Now you have your
    root node, you can add the Document node:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 `appendChild` 方法将新子节点添加到 DOMDocument 中；在它们内部使用 `createElement` 创建元素。现在您有了根节点，您可以添加
    Document 节点：
- en: '[PRE26]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Using the `getPreviousLocations` function we created earlier, we can nest a
    series of Placemark nodes with the features as described in the preceding code
    line, using more calls to `appendChild` and `createElement`. The complete code
    is available in `feed.php` for you to peruse.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们之前创建的 `getPreviousLocations` 函数，我们可以嵌套一系列具有前述代码行中描述的功能的 Placemark 节点，使用更多的
    `appendChild` 和 `createElement` 调用。完整的代码在 `feed.php` 中供您查阅。
- en: 'All of your data is now loaded into the feed. All that''s left is to write
    it to the browser. First, you must tell it that this is an XML file, by setting
    the HTTP header appropriately:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 所有你的数据现在都已加载到源中。剩下的就是将其写入浏览器。首先，你必须通过设置适当的HTTP头来告诉它这是一个XML文件：
- en: '[PRE27]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Finally, then, you can write it to the browser:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，然后，你可以将其写入浏览器：
- en: '[PRE28]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This is all you need to create a fully functional KML feed. There's much more
    available in the KML specification, including details about how to style map points,
    and other information that can be included inside the feed as a whole, as well
    as each individual Placemark. A link to the KML specification is included at the
    end of this section.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是创建一个完全功能的KML源所需的所有内容。KML规范中还有更多内容，包括如何样式化地图点以及可以在整个源中包含的以及其他信息，以及每个单独的Placemark。本节末尾包含了一个KML规范的链接。
- en: Because Google Maps natively supports KML, once you've made your system live
    on the web, you can simply paste the URL to your `feed.php` file into the Google
    Maps search box, and your geographic points will be displayed.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Google Maps原生支持KML，一旦你的系统在网络上运行，你只需将你的`feed.php`文件的URL粘贴到Google Maps搜索框中，你的地理点就会显示出来。
- en: Additionally, you can choose to load your KML file into the map you created
    in `index.php`. This has the same effect as entering the address of your KML file
    into the Google Maps search bar, but on the map embedded in your own application.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你可以选择将你的KML文件加载到你在`index.php`中创建的地图中。这和将你的KML文件的地址输入到Google Maps搜索栏中的效果相同，但是在你自己的应用程序中嵌入的地图上。
- en: 'You may remember that we created a global variable referencing the map called
    `window.googleMap`. Directly underneath, you can create a `KmlLayer` object as
    follows:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能记得我们创建了一个全局变量，称为`window.googleMap`，引用地图。直接在其下方，你可以创建一个`KmlLayer`对象，如下所示：
- en: '[PRE29]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Of course, `http://your/kml/feed.php` must be replaced with the URL of your
    feed.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，`http://your/kml/feed.php`必须替换为你的源URL。
- en: See also
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '**Keyhole Markup Language specification**: [https://developers.google.com/kml/](https://developers.google.com/kml/)'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Keyhole Markup Language规范**：[https://developers.google.com/kml/](https://developers.google.com/kml/)'
- en: Tracking and updating the user's location (Intermediate)
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跟踪和更新用户的地理位置（中级）
- en: While recording an individual location when the page loads is useful, in some
    situations you may wish to record the user's location continuously. The Geolocation
    API provides two functions for handling this use case—`watchPosition` and `clearWatch`—and
    in this section, we'll use them to modify our application to automatically resave
    the user's position when he/she moves.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 当页面加载时记录单个地理位置是有用的，但在某些情况下，你可能希望持续记录用户的地理位置。Geolocation API提供了两个处理此用例的函数——`watchPosition`和`clearWatch`——在本节中，我们将使用它们来修改我们的应用程序，以便在用户移动时自动重新保存用户的地理位置。
- en: Getting ready
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This section doesn't require any PHP programming; the modifications are all
    on the front end, using JavaScript. However, ensure that you have a compatible
    device with a GPS receiver and mobile data capability available to test your code.
    Most modern smartphones should suffice; we tested with the Chrome browser on a
    Samsung Galaxy S2, and in Safari on an iPhone 5.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 本节不需要任何PHP编程；所有修改都在前端，使用JavaScript完成。然而，请确保你有兼容的设备，带有GPS接收器和可用的移动数据来测试你的代码。大多数现代智能手机都足够使用；我们在三星Galaxy
    S2上的Chrome浏览器和iPhone 5上的Safari浏览器上进行了测试。
- en: How to do it...
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Perform the following steps to track and update the user''s location:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以跟踪和更新用户的地理位置：
- en: 'Take a copy of `index.php`, and save it as `live.php`. We''re going to modify
    it to use `watchPosition` and save multiple map points as follows:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制`index.php`，并将其保存为`live.php`。我们将对其进行修改，以使用`watchPosition`并保存多个地图点，如下所示：
- en: '[PRE30]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This function is called when the Geolocation API successfully retrieves the
    user''s location. Note that we are now saving our map points to an array:'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当Geolocation API成功检索用户位置时，会调用此函数。请注意，我们现在正在将我们的地图点保存到数组中：
- en: '[PRE31]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This function is called when there is a problem retrieving the user''s location
    (but the Geolocation API is supported in his/her browser):'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当检索用户位置时出现问题时（但Geolocation API在他的/她的浏览器中受支持）会调用此函数：
- en: '[PRE32]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'And finally, add a function to prevent automatic updating of user location:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加一个函数以防止自动更新用户位置：
- en: '[PRE33]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Following this, we move onto the body of the page, incorporating a new "stop
    watching" button:'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，我们转向页面的主体，添加一个新的“停止监视”按钮：
- en: '[PRE34]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: How it works...
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The Geolocation API `watchPosition` method uses a very similar syntax to the
    `getCurrentPosition` method we used earlier. Its parameters are the same:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 地理位置API的`watchPosition`方法与我们之前使用的`getCurrentPosition`方法具有非常相似的语法。其参数是相同的：
- en: A callback function to call on success
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在成功时调用的回调函数
- en: A callback function to call on failure
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在失败时调用的回调函数
- en: An array of options
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选项数组
- en: 'The available options, in turn, are also the same:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的选项，反过来，也是相同的：
- en: '`enableHighAccuracy`: This is a Boolean value, It enables high accuracy mode
    (`default: off`).'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enableHighAccuracy`：这是一个布尔值，它启用高精度模式（默认：关闭）。'
- en: 'timeout: This is a long value. It is the threshold beyond which the API times
    out (in milliseconds; the default is no limit).'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超时：这是一个长值。它是API超时的阈值（以毫秒为单位；默认无限制）。
- en: 'maximumAge: This is a long value. It is the maximum age of a cached location
    that we''ll accept, in milliseconds (`default: 0`).'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: maximumAge：这是一个长值。它是我们接受的缓存位置的最大年龄，以毫秒为单位（默认：0）。
- en: However, rather than initiating a single check for the user's location, it instead
    establishes a "watch" that will load the callback functions as appropriate whenever
    the device has detected that the user has moved. Because you need to reference
    the watch process, `watchPosition` returns an identifier.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它不是发起对用户位置的单一检查，而是建立一个“监视”，当设备检测到用户移动时，将根据适当的情况加载回调函数。因为需要引用监视过程，`watchPosition`返回一个标识符。
- en: 'The identifier is obtained when the method is called, as follows:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 当方法被调用时，会获得标识符，如下所示：
- en: '[PRE35]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Note that we've used the `enableHighAccuracy` option, while not failing back
    to a lower-accuracy location method. That's because in a situation where you're
    continually retrieving the location, low-quality data will not be useful. Because
    the device falls back to estimating location through environmental factors, visibly
    erroneous data may be included in your dataset, sometimes hundreds of meters or
    more away from the user's actual location, making it harder to track the user's
    path. It's better to fail if a GPS signal cannot be found.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们使用了`enableHighAccuracy`选项，而不会回退到较低精度的位置方法。这是因为在你持续获取位置的情况下，低质量的数据将没有用。因为设备会回退到通过环境因素估计位置，你的数据集中可能会包含明显错误的数据，有时距离用户的实际位置数百米或更远，这使得跟踪用户的路径更加困难。如果找不到GPS信号，最好是失败。
- en: 'Sometimes, the user may wish to switch tracking off, while remaining on the
    page. To do this, we''ve created a simple button. This will trigger the `clearWatch`
    method, which takes the watch process ID as a single parameter as follows:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，用户可能希望关闭跟踪，同时保持在页面上。为此，我们创建了一个简单的按钮。这将触发`clearWatch`方法，该方法将监视过程ID作为单个参数，如下所示：
- en: '[PRE36]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: In our implementation, we've also hidden the button using the jQuery `hide()`
    method once it has been pressed.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的实现中，我们使用jQuery的`hide()`方法隐藏了按钮，一旦它被按下。
- en: Finally, our `savePosition` function, which is called whenever a new location
    is successfully received, must display the new location.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们的`savePosition`函数，在成功接收到新位置时被调用，必须显示新位置。
- en: In our previous implementation, we simply created a variable for the new Marker
    object to display a single point. However, we also created a `window.points` array
    to keep the Marker objects that were reloaded from the database. In order to display
    the full set of points that are displayed as the user moves around, we'll need
    to add each newly created Marker in the array too.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的实现中，我们只是为新的标记对象创建了一个变量来显示一个单独的点。然而，我们也创建了一个`window.points`数组来保存从数据库重新加载的标记对象。为了显示用户移动时显示的全部点集，我们还需要在数组中添加每个新创建的标记。
- en: 'To do this, we can just push new Marker objects to the array as follows:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，我们只需按照以下方式将新的标记对象推送到数组中：
- en: '[PRE37]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: However, a series of individual points isn't necessarily the best way to display
    this data.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一系列单独的点不一定是最好的显示数据的方式。
- en: There's more...
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Unfortunately, at the time of writing this book, there''s no way to prevent
    the mobile device from switching its screen and GPS unit off. Consider the following
    screenshot from a walk I took around the Inner Sunset neighborhood in San Francisco:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，在撰写这本书的时候，没有方法可以防止移动设备关闭屏幕和GPS单元。考虑以下我从旧金山内日落区散步时的截图：
- en: '![There''s more...](img/5903_2_5.jpg)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/5903_2_5.jpg)'
- en: Contrary to what the map might indicate, this was a continuous walk—I didn't
    suddenly leap two blocks in a single bound! However, while I was holding my device
    and ensuring that its screen didn't turn black on some of the streets (indicated
    by the vertical lines you can see here), on the others I chose to slip my device
    into my pocket, as an ordinary user might. The GPS receiver was deactivated automatically
    when the screen went black, in order to conserve battery life. As a result, no
    location points were saved for these portions of my journey.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 与地图可能显示的相反，这是一次连续的步行——我并没有突然跳过两个街区！然而，当我手持设备并确保其屏幕在街道上不会变黑（如你所见，这里显示的垂直线所示）时，在其他街道上，我选择将设备放入口袋，就像一个普通用户一样。当屏幕变黑时，GPS
    接收器会自动关闭，以节省电量。因此，在这段旅程的这些部分没有保存任何位置点。
- en: We can further enhance our application by replacing the individual points on
    the map with a continuous line. This would also help smooth over any gaps in the
    dataset.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过用连续线替换地图上的单个点来进一步增强我们的应用程序。这也有助于平滑数据集中的任何间隙。
- en: To achieve this, we need to replace the portions of the code that set points
    on the map using the Google Maps API. Google provides another element, `PolyLines`,
    which allows you to arbitrarily add coordinates to a continuous line. I've included
    the complete code as `livepath.php`.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们需要替换使用 Google Maps API 在地图上设置点的代码部分。Google 提供了另一个元素，`PolyLines`，它允许你任意地向连续线添加坐标。我已经将完整的代码作为
    `livepath.php` 包含在内。
- en: 'In the portion of the page where we''re setting up the map, just after we''ve
    loaded the `jsonPoints` JSON array, we need to create a polyline. We''ll make
    it bright red (HTML color `#ff0000`) so that we can see it easily:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们设置地图的页面部分，在加载 `jsonPoints` JSON 数组之后，我们需要创建一条多边形线。我们将使其为鲜艳的红色（HTML 颜色 `#ff0000`），这样我们就可以很容易地看到它：
- en: '[PRE38]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now, we''ll attach it to our existing map. `window.polyLine` will be the global
    variable that stores the polyline:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将它附加到现有的地图上。`window.polyLine` 将是存储多边形的全局变量：
- en: '[PRE39]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: And finally, we'll establish `window.geopath` as the array of points that make
    up the polyline. We're saving that as a global variable too, for convenience.
    You'll see why momentarily.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将 `window.geopath` 建立为构成多边形的点数组。我们也将其保存为全局变量，以便方便使用。你很快就会明白原因。
- en: '[PRE40]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now, let''s load our JSON array of previously saved points onto it:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将之前保存的点数组的 JSON 载入其中：
- en: '[PRE41]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Finally, recall the AJAX `done()` function at the top of the page, which is
    called once a new location has been successfully processed. We can replace the
    Google Maps code in this function with a simple line to add the latest coordinates
    to our `PolyLine`:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，回想一下页面顶部的 AJAX `done()` 函数，它在新位置成功处理后被调用。我们可以用一条简单的线替换这个函数中的 Google Maps
    代码，以将最新的坐标添加到我们的 `PolyLine`：
- en: '[PRE42]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Now, whenever a new location is detected, it will be added to the line rather
    than to the map as a new, individual point.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每当检测到新的位置时，它将被添加到线上，而不是作为新的、单独的点添加到地图上。
- en: The Geolocation API is an important addition to any modern web developer's arsenal.
    Together with other new APIs, HTML 5 itself and the new breed of mobile devices,
    the web doesn't just allow you to build high quality network applications; it
    allows you to build new kinds of context-aware applications that have never been
    created before. Happy building.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 地理位置API是任何现代网络开发者工具箱中的重要补充。与其他新API、HTML 5 本身以及新一代的移动设备一起，网络不仅允许你构建高质量的网络应用程序；它还允许你构建以前从未创造过的新类型的环境感知应用程序。祝您构建愉快。
