- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Handling Form Data
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理表单数据
- en: In this chapter, I demonstrate the ways that Node.js applications can receive
    form data and explain the differences, including supporting uploading files. This
    chapter also explains how to sanitize form data so that it can be safely included
    in HTML documents, and how to validate data before it is used. *Table 11.1* puts
    this chapter in context.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我演示了Node.js应用程序接收表单数据的方式，并解释了包括支持上传文件在内的差异。本章还解释了如何清理表单数据，以便它可以安全地包含在HTML文档中，以及在使用之前如何验证数据。*表11.1*将本章置于上下文中。
- en: 'Table 11.1: Putting HTML forms in context'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 表11.1：将HTML表单置于上下文中
- en: '| Question | Answer |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| 问题 | 答案 |'
- en: '| What are they? | HTML forms allow users to provide data by entering values
    into form fields. |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| 它们是什么？ | HTML表单允许用户通过在表单字段中输入值来提供数据。 |'
- en: '| Why are they useful? | Forms are the only ways in which data values can be
    collected from users in a structured way. |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| 为什么它们有用？ | 表单是唯一一种可以以结构化方式从用户那里收集数据值的方式。 |'
- en: '| How are they used? | HTML documents contain a `form` element that contains
    one or more elements that allow data to be entered, such as an `input` element.
    |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| 它们是如何使用的？ | HTML文档包含一个`form`元素，该元素包含一个或多个允许输入数据的元素，例如`input`元素。 |'
- en: '| Are there any pitfalls or limitations? | The data that’s entered into a form
    must be sanitized before inclusion in HTML output and validated before it is used
    by the applications. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| 有没有陷阱或限制？ | 在将数据包含在HTML输出之前，必须对表单中输入的数据进行清理，并在应用程序使用之前进行验证。 |'
- en: '| Are there any alternatives? | Forms are the only way to efficiently solicit
    data from users. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| 有没有替代方案？ | 表单是高效地从用户那里收集数据的唯一方式。 |'
- en: '*Table 11.2* summarizes the chapter.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*表11.2* 总结了本章内容。'
- en: 'Table 11.2: Chapter summary'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 表11.2：本章摘要
- en: '| Problem | Solution | Listing |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 问题 | 解决方案 | 清单 |'
- en: '| Receive data from the user. | Use an HTML form configured to send data to
    the server. | *1-10* |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 从用户那里接收数据。 | 使用配置为向服务器发送数据的HTML表单。 | *1-10* |'
- en: '| Receive data used for non-idempotent operations. | Configure the form to
    use HTTP `POST` requests. | *11, 12* |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 接收用于非幂等操作的数 据时。 | 配置表单使用HTTP `POST`请求。 | *11, 12* |'
- en: '| Receive complex data, including the contents of files. | Use multipart form
    encoding. | *13-16* |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 接收复杂的数据，包括文件内容。 | 使用多部分表单编码。 | *13-16* |'
- en: '| Prevent user data from being interpreted as HTML elements. | Sanitize the
    data received from the user. | *17-21* |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 防止用户数据被解释为HTML元素。 | 清理从用户接收到的数据。 | *17-21* |'
- en: '| Ensure the application receives useful data. | Validate the data received
    from the user. | *22-27, 30-32* |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 确保应用程序接收到有用的数据。 | 验证从用户接收到的数据。 | *22-27, 30-32* |'
- en: '| Provide immediate validation feedback to the user. | Validate the data in
    the browser before the form is submitted. | *28-29* |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 向用户提供即时验证反馈。 | 在表单提交之前在浏览器中验证数据。 | *28-29* |'
- en: Preparing for this chapter
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为本章做准备
- en: This chapter uses the `part2app` project from *Chapter 10*. Run the commands
    shown in *Listing 11.1* in the `part2app` folder to remove files that are no longer
    required.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本章使用了*第10章*中的`part2app`项目。在`part2app`文件夹中运行*清单11.1*中显示的命令以删除不再需要的文件。
- en: '**Tip**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: You can download the example project for this chapter – and for all the other
    chapters in this book – from [https://github.com/PacktPublishing/Mastering-Node.js-Web-Development](https://github.com/PacktPublishing/Mastering-Node.js-Web-Development).
    See *Chapter 1* for how to get help if you have problems running the examples.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[https://github.com/PacktPublishing/Mastering-Node.js-Web-Development](https://github.com/PacktPublishing/Mastering-Node.js-Web-Development)下载本章的示例项目——以及本书中所有其他章节的示例项目。有关运行示例时遇到问题的帮助，请参阅*第1章*。
- en: 'Listing 11.1: Removing files'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 清单11.1：删除文件
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, replace the contents of the `client.js` file in the `src/client` folder
    with the contents shown in *Listing 11.2*.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将`src/client`文件夹中`client.js`文件的内容替换为*清单11.2*中显示的内容。
- en: 'Listing 11.2: The contents of the client.js file in the src/client folder'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 清单11.2：`src/client`文件夹中`client.js`文件的内容
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is a placeholder until later in the chapter when client-side code will
    be needed again. Replace the contents of the `index.html` file in the `static`
    folder with the elements shown in *Listing 11.3*.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个占位符，直到本章的后面部分需要再次使用客户端代码时再替换。将`static`文件夹中`index.html`文件的 内容替换为*清单11.3*中显示的元素。
- en: 'Listing 11.3: The contents of the index.html file in the static folder'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 清单11.3：`static`文件夹中`index.html`文件的内容
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The HTML document contains a simple HTML form that asks the user for their name
    and city. To keep the code that handles forms separate from the rest of the application,
    add a file named `forms.ts` to the `src/server` folder with the content shown
    in *Listing 11.4*. You don’t need to keep the forms code separate; I have only
    done so to make the examples easier to follow.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 文档包含一个简单的 HTML 表单，要求用户输入他们的姓名和城市。为了将处理表单的代码与应用程序的其他部分分开，请将一个名为 `forms.ts`
    的文件添加到 `src/server` 文件夹中，其内容如 *列表 11.4* 所示。您不需要将表单代码分开；我这样做只是为了使示例更容易理解。
- en: 'Listing 11.4: The contents of the forms.ts file in the src/server folder'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 11.4：src/server 文件夹中 forms.ts 文件的内容
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 11.5* updates the server to use the functions defined in *Listing
    11.4*.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 11.5* 更新服务器以使用 *列表 11.4* 中定义的函数。'
- en: 'Listing 11.5: Configuring the server in the server.ts file in the src/server
    folder'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 11.5：在 src/server 文件夹中的 server.ts 文件中配置服务器
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 11.6* removes a helper from the layout used by the server-side templates
    and adds a `script` element for the JavaScript bundle created by webpack. Some
    examples in this chapter rely on templates, and removing the helper simplifies
    the template rendering, while adding the `script` element will allow client-side
    code to be used in content generated from templates.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 11.6* 从服务器端模板使用的布局中删除了一个辅助程序，并添加了一个由 webpack 创建的 JavaScript 包的 `script`
    元素。本章的一些示例依赖于模板，删除辅助程序简化了模板渲染，而添加 `script` 元素将允许在从模板生成的内容中使用客户端代码。'
- en: 'Listing 11.6: Changing elements in the main.handlebars file in the templates/server/layouts
    folder'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 11.6：更改 templates/server/layouts 文件夹中的 main.handlebars 文件中的元素
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Finally, create a file named `data.json` in the `part2app` folder with the
    content shown in *Listing 11.7*. This file will be used to demonstrate how forms
    can be used to send files to the server.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**最后，在 `part2app` 文件夹中创建一个名为 `data.json` 的文件，其内容如 *列表 11.7* 所示。此文件将用于演示如何使用表单将文件发送到服务器**。'
- en: 'Listing 11.7: The contents of the data.json file in the part2app folder'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 11.7：part2app 文件夹中 data.json 文件的内容
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Run the command shown in *Listing 11.8* in the `part2app` folder to start the
    development tools and begin listening for HTTP requests.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `part2app` 文件夹中运行 *列表 11.8* 中显示的命令以启动开发工具并开始监听 HTTP 请求。
- en: 'Listing 11.8: Starting the development tools'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 11.8：启动开发工具
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Open a web browser and request `http://localhost:5000`. You will see the form
    elements defined in *Listing 11.3*, whose appearance has been styled using the
    Bootstrap CSS package, as shown in *Figure 11.1*.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个网页浏览器并请求 `http://localhost:5000`。您将看到 *列表 11.3* 中定义的表单元素，其外观已使用 Bootstrap
    CSS 包进行样式化，如图 *图 11.1* 所示。
- en: '![](img/B21959_11_01.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_11_01.png)'
- en: 'Figure 11.1: Running the example application'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1：运行示例应用程序
- en: Receiving form data
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接收表单数据
- en: Form data can be sent using HTTP `GET` or `POST` requests and the choice of
    method determines how the data contained in the form is presented. *Listing 11.9*
    completes the form to specify the URL to which the form data will be sent and
    adds buttons that submit the form data with different HTTP methods.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 表单数据可以使用 HTTP `GET` 或 `POST` 请求发送，方法的选择决定了表单中包含的数据如何呈现。*列表 11.9* 完成表单以指定表单数据将发送到的
    URL，并添加了使用不同 HTTP 方法提交表单数据的按钮。
- en: 'Listing 11.9: Completing the form in the index.html file in the static folder'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 11.9：在静态文件夹中的 index.html 文件中完成表单
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `action` attribute element on the `form` element tells the browser to send
    the form data to the `/form` URL. The `button` elements are configured with the
    `formmethod` attribute, which specifies which HTTP method the browser should use.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`form` 元素上的 `action` 属性元素告诉浏览器将表单数据发送到 `/form` URL。`button` 元素配置了 `formmethod`
    属性，该属性指定浏览器应使用哪种 HTTP 方法。'
- en: '**Note**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: I am using attributes applied to `button` elements so that the same form data
    will be processed in different ways. In later examples, I take a more conventional
    approach and use attributes applied to the `form` element instead.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在使用应用于 `button` 元素的属性，以便以不同的方式处理相同表单数据。在后续的示例中，我采用了一种更传统的方法，并使用应用于 `form`
    元素的属性。
- en: Receiving form data from GET requests
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 GET 请求接收表单数据
- en: '`GET` requests are the simplest way to receive form data because the browser
    includes the form field names and values in the URL query string. *Listing 11.10*
    defines a handler for form `GET` requests.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`GET` 请求是接收表单数据的最简单方式，因为浏览器会将表单字段名称和值包含在 URL 查询字符串中。*列表 11.10* 定义了一个处理表单 `GET`
    请求的处理程序。'
- en: 'Listing 11.10: Handling `GET` requests in the forms.ts file in the src/server
    folder'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 11.10：在 src/server 文件夹中的 forms.ts 文件中处理 `GET` 请求
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The route uses the `get` method to match `GET` requests sent to the `/form`
    URL. Express decodes URL query strings and presents them through the `Request.query`
    property. In *Listing 11.10*, the query string parameters and values are used
    to generate the response. Use a browser to request `http://localhost:5000`, fill
    out the form using `Alice Smith` as the name and `London` as the city, and click
    the **Submit** (**GET**) button.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 该路由使用 `get` 方法匹配发送到 `/form` URL 的 `GET` 请求。Express 解码 URL 查询字符串并通过 `Request.query`
    属性呈现。在 *清单 11.10* 中，查询字符串参数和值用于生成响应。使用浏览器请求 `http://localhost:5000`，使用 `Alice
    Smith` 作为姓名和 `London` 作为城市填写表单，然后点击 **提交** (**GET**) 按钮。
- en: 'The browser will send a `GET` request to the `/form` URL and include the values
    that were entered into the form, like this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器将向 `/form` URL 发送 `GET` 请求，并包含在表单中输入的值，如下所示：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The data will be received by the server, the query string will be parsed, and
    the form data will be used in the response, as shown in *Figure 11.2*.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 数据将被服务器接收，查询字符串将被解析，表单数据将用于响应，如图 *图 11.2* 所示。
- en: '![](img/B21959_11_02.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_11_02.png)'
- en: 'Figure 11.2: Handling form data from a `GET` request'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.2：处理来自 `GET` 请求的表单数据
- en: The limitation of `GET` requests is they must be *idempotent*, meaning that
    every request for a given URL should always have the same effect and always return
    the same result. Put another way, form data sent with a `GET` request is effectively
    a request to read data that isn’t expected to change with every request.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`GET` 请求的限制是它们必须是 *幂等的*，这意味着针对给定 URL 的每个请求都应该始终产生相同的效果，并始终返回相同的结果。换句话说，与 `GET`
    请求一起发送的表单数据实际上是读取数据的请求，这些数据不期望随着每个请求而改变。'
- en: This is important because HTTP caches are allowed to store the responses to
    `GET` requests and use them to respond to requests for the same URL, which means
    that some requests may not be received by the backend server. For this reason,
    most form data is sent using `POST` requests, which won’t be cached but which
    can be more complex to process.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这很重要，因为 HTTP 缓存被允许存储 `GET` 请求的响应并使用它们来响应对同一 URL 的请求，这意味着某些请求可能不会被后端服务器接收。因此，大多数表单数据都是通过
    `POST` 请求发送的，这些请求不会被缓存，但可能更复杂。
- en: Receiving form data from POST requests
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接收来自 POST 请求的表单数据
- en: HTTP `POST` requests include the form data in the request body, which must be
    read and decoded before it can be used. *Listing 11.11* adds a route that handles
    `POST` requests, reads the body, and uses it as the response.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP `POST` 请求在请求体中包含表单数据，在可以使用之前必须读取并解码。*清单 11.11* 添加了一个处理 `POST` 请求的路由，读取体并将其用作响应。
- en: 'Listing 11.11: Adding a handler to the form.ts file in the src/server folder'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 11.11：在 src/server 文件夹中的 form.ts 文件中添加处理器
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Node.js and Express read the headers from the HTTP request and leave the body
    so that it can be read as a stream. The new route in *Listing 11.11* matches `POST`
    requests sent to `/form` and creates a response containing the request’s `Content-Type`
    header and the request body.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 和 Express 从 HTTP 请求中读取标头，并保留体以便它可以作为流读取。*清单 11.11* 中的新路由匹配发送到 `/form`
    的 `POST` 请求，并创建包含请求的 `Content-Type` 标头和请求体的响应。
- en: Use a browser to request `http://localhost:5000`, fill out the form with the
    same details as in the previous section, and click the **Submit** (**POST**) button.
    The browser will send a `POST` request to the server with the form data in the
    request body, producing the response shown in *Figure 11.3*.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用浏览器请求 `http://localhost:5000`，使用与上一节相同的详细信息填写表单，然后点击 **提交** (**POST**) 按钮。浏览器将发送一个包含请求体中表单数据的
    `POST` 请求到服务器，生成如图 *图 11.3* 所示的响应。
- en: '![](img/B21959_11_03.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_11_03.png)'
- en: 'Figure 11.3: Handling form data from a POST request'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.3：处理来自 POST 请求的表单数据
- en: 'The browser has set the `Content-Type` header to `application/x-www-form-urlencoded`,
    which indicates that the form data values are encoded in the same way as when
    the data is included in the query string, with name-value pairs separated by `=`
    characters and combined with `&` characters, like this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器已将 `Content-Type` 标头设置为 `application/x-www-form-urlencoded`，这表示表单数据值以与数据包含在查询字符串中相同的方式进行编码，使用
    `=` 字符分隔名称-值对，并用 `&` 字符组合，如下所示：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You can decode the form data yourself, but Express includes middleware that
    detects the `Content-Type` header and decodes the form data into a key/value map.
    *Listing 11.12* enables the middleware and uses the data it produces in the response.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以自己解码表单数据，但 Express 包含一个中间件，它可以检测 `Content-Type` 标头并将表单数据解码成一个键/值映射。*列表 11.12*
    启用了中间件并使用它生成的数据在响应中。
- en: 'Listing 11.12: Using Express middleware in the forms.ts file in the src/server
    folder'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 11.12：在 src/server 文件夹中的 forms.ts 文件中使用 Express 中间件
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The middleware component is created using the `Express.urlencoded` method and
    the required `extended` configuration option is used to specify whether request
    bodies are processed using the same library that parses query strings or, as here,
    a more sophisticated option that allows more complex data types to be processed.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 中间件组件是通过 `Express.urlencoded` 方法创建的，并使用所需的 `extended` 配置选项来指定是否使用与解析查询字符串相同的库来处理请求体，或者，如这里所示，使用一个更复杂的选项，允许处理更复杂的数据类型。
- en: 'To see the decoded data, request `http://localhost:5000`, fill in the form,
    and click the **Submit** (**POST**) button. The individual form element names
    and values will be displayed in the response, instead of the URL-encoded string,
    like this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看解码后的数据，请请求 `http://localhost:5000`，填写表单，并点击 **提交**（**POST**）按钮。将显示单个表单元素名称和值，而不是
    URL 编码的字符串，如下所示：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Receiving multipart data
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 接收多部分数据
- en: The `application/x-www-form-urlencoded` format is the default and works well
    for gathering basic data values from a user. For forms where the user submits
    files, the `multipart/form-data` format is used, which is more complex but allows
    for a mix of data types to be sent in the HTTP request body. *Listing 11.13* adds
    an `input` element that allows the user to select a file and a button to the HTML
    form that submits the data using the `multipart/form-data` format.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`application/x-www-form-urlencoded` 格式是默认格式，适用于从用户那里收集基本数据值。对于用户提交文件的表单，使用
    `multipart/form-data` 格式，这种格式更复杂，但允许在 HTTP 请求体中发送多种数据类型。*列表 11.13* 添加了一个 `input`
    元素，允许用户选择文件，并在使用 `multipart/form-data` 格式提交数据的 HTML 表单中添加了一个按钮。'
- en: 'Listing 11.13: Adding elements in the index.html file in the static folder'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 11.13：在静态文件夹中的 index.html 文件中添加元素
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The new `input` element has a `type` attribute set to `file`, which tells the
    browser that it should present the user with an element to choose a file.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 `input` 元素有一个设置为 `file` 的 `type` 属性，这告诉浏览器应该向用户展示一个选择文件的元素。
- en: '*Listing 11.14* updates the form handler so that `application/x-www-form-urlencoded`
    and `multipart/form-data` requests are handled differently, which is important
    because it affects the way that browsers deal with files.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 11.14* 更新了表单处理程序，以便 `application/x-www-form-urlencoded` 和 `multipart/form-data`
    请求被不同地处理，这对于影响浏览器处理文件的方式非常重要。'
- en: 'Listing 11.14: Selecting content type in the forms.ts file in the src/server
    folder'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 11.14：在 src/server 文件夹中的 forms.ts 文件中选择内容类型
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Use a browser to request `http://localhost:5000` and fill out the form, choosing
    the `data.json` file created at the start of the chapter for the `File` field.
    The form encoding determines how the browser deals with files. Click **Submit**
    (**POST**) to send the form with a `POST` request in the `application/x-www-form-urlencoded`
    encoding, and the **Submit (POST/MIME)** button to send the form with a `POST`
    request using the `multipart/form-data` encoding. Both outcomes are shown in *Figure
    11.4*.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用浏览器请求 `http://localhost:5000` 并填写表单，选择本章开头创建的 `data.json` 文件作为 `文件` 字段。表单编码决定了浏览器如何处理文件。点击
    **提交**（**POST**）以使用 `application/x-www-form-urlencoded` 编码发送表单，点击 **提交（POST/MIME**）按钮以使用
    `multipart/form-data` 编码发送表单。两种结果都显示在 *图 11.4* 中。
- en: '![](img/B21959_11_04.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_11_04.png)'
- en: 'Figure 11.4: Sending form data in different encodings'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.4：以不同编码发送表单数据
- en: 'For the `application/x-www-form-urlencoded` encoding, the browser includes
    just the name of the file, like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `application/x-www-form-urlencoded` 编码，浏览器只包括文件名，如下所示：
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `multipart/form-data` encoding does include the file contents, but to do
    so, the structure of the request body becomes more complex, like this:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`multipart/form-data` 编码确实包括文件内容，但为了这样做，请求体的结构变得更加复杂，如下所示：'
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The request body contains multiple parts, each of which is separated by a boundary
    string, which is included in the `Content-Type` header:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 请求体包含多个部分，每个部分都由一个边界字符串分隔，该字符串包含在 `Content-Type` 标头中：
- en: '[PRE19]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Each body part can contain a different type of data and comes complete with
    headers that describe the contents. In the case of the body part for the file,
    the headers provide the name given to the form field, the name of the file that
    has been chosen, and the type of content in the file:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 每个正文部分可以包含不同类型的数据，并附带描述内容的头信息。在文件正文部分的情况下，头信息提供了表单字段赋予的名称、已选择的文件名称以及文件中的内容类型：
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `multipart/form-data` encoding can be decoded manually, but it isn’t a good
    idea because there have been so many non-compliant implementations over the years
    that require special handling or workarounds. Express doesn’t include built-in
    support for processing `multipart/form-data` requests but several JavaScript packages
    can do so. One option is Multer ([https://github.com/expressjs/multer](https://github.com/expressjs/multer)
    which works well with Express. Run the commands shown in *Listing 11.15* to install
    the Multer package and the type definitions that describe the API it provides
    to TypeScript.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`multipart/form-data` 编码可以手动解码，但这不是一个好主意，因为多年来已经出现了许多不符合规范的实现，这些实现需要特殊处理或解决方案。Express
    不包括内置的 `multipart/form-data` 请求处理支持，但有几个 JavaScript 包可以做到这一点。一个选项是 Multer ([https://github.com/expressjs/multer](https://github.com/expressjs/multer)，它与
    Express 工作得很好)。运行 *列表 11.15* 中显示的命令来安装 Multer 包以及描述它为 TypeScript 提供的 API 的类型定义。'
- en: 'Listing 11.15: Installing a package'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 11.15：安装包
- en: '[PRE21]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '*Listing 11.16* configures the Multer package and applies it to the form handler.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 11.16* 配置了 Multer 包并将其应用于表单处理器。'
- en: 'Listing 11.16: Processing multipart requests in the forms.ts file in the src/server
    folder'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 11.16：在 src/server 文件夹中的 forms.ts 文件中处理多部分请求
- en: '[PRE22]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Before Multer can be used, it has to be told where it can store the files it
    receives. The package comes with two storage options, which are to write the files
    to a disk folder or to store the file data in memory. As mentioned in *Part 1*,
    care must be taken when writing to the file system and it should be avoided as
    much as possible. If you do need to store data from users, then my advice is to
    use a database, as described in *Chapter 12*.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在可以使用 Multer 之前，必须告诉它可以存储它接收到的文件的位置。该包提供了两种存储选项，即将文件写入磁盘文件夹或将文件数据存储在内存中。如 *第
    1 部分* 中所述，写入文件系统时必须小心，应尽可能避免。如果您确实需要存储用户数据，那么我的建议是使用数据库，如 *第 12 章* 中所述。
- en: '*Listing 11.16* uses the memory-based storage option to create a middleware
    component that will process `multipart/form-data` requests. Unlike most other
    middleware, the Multer package is applied to specific routes to prevent malicious
    users from uploading files on routes where they are not expected:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 11.16* 使用基于内存的存储选项创建一个中间件组件，该组件将处理 `multipart/form-data` 请求。与大多数其他中间件不同，Multer
    包应用于特定的路由，以防止恶意用户在预期之外的路由上上传文件：'
- en: '[PRE23]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This statement applies the Multer middleware to just one route and looks for
    files in a field named `datafile`, matching the name attribute of the file `input`
    element in the HTML form.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 此语句将 Multer 中间件应用于仅一个路由，并查找名为 `datafile` 的字段中的文件，该字段与 HTML 表单中 `input` 元素的名称属性匹配。
- en: The middleware reads the request body and creates a `file` property through
    which details of the uploaded file can be read, with the most useful properties
    described in *Table 11.3*. Body parts that are not files will be presented through
    the `body` property.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 中间件读取请求正文，并通过 `file` 属性创建一个可以读取上传文件详细信息的接口，其中最有用的属性在 *表 11.3* 中描述。非文件正文部分将通过
    `body` 属性呈现。
- en: 'Table 11.3: Useful file description properties'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 表 11.3：有用的文件描述属性
- en: '| Name | Description |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '|'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE24]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '| This property returns the name of the file on the user’s system. |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| 此属性返回用户系统上文件的名称。 |'
- en: '|'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE25]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '| This property returns the size of the file in bytes. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| 此属性返回文件的字节数。 |'
- en: '|'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE26]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '| This property returns the MIME type of the file. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| 此属性返回文件的 MIME 类型。 |'
- en: '|'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE27]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '| This property returns a Buffer that contains the entire file. |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| 此属性返回包含整个文件的 Buffer。 |'
- en: To see the effect of the middleware, request `http://localhost:5000`, fill out
    the `name` and `city` form fields, select the `data.json` file, and click the
    **Submit** (**POST/MIME**) button. The response includes the values from the body
    and file properties, as shown in *Figure 11.5*.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看中间件的效果，请请求 `http://localhost:5000`，填写 `name` 和 `city` 表单字段，选择 `data.json`
    文件，然后点击 **提交**（**POST/MIME**）按钮。响应包括正文和文件属性的值，如 *图 11.5* 所示。
- en: '![](img/B21959_11_05.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图片 B21959_11_05.png](img/B21959_11_05.png)'
- en: 'Figure 11.5: Uploading files'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.5：上传文件
- en: Sanitizing form data
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清理表单数据
- en: 'It isn’t just files that you should be cautious about receiving from users:
    any data has the potential to cause problems. The most common problem is a **cross-site
    scripting** (**XSS**) attack where a data value is crafted so that it is interpreted
    by the browser as HTML elements or JavaScript code. In *Chapter 7*, I demonstrated
    how a content security policy can be used to help prevent XSS by telling the browser
    how the application is expected to behave, but another good measure is to sanitize
    data that is received from one user so that it doesn’t contain characters that
    browsers will interpret unexpectedly when it is displayed to another user. To
    prepare, *Listing 11.17* changes the form handler so it returns an HTML response.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅应该对用户发送的文件保持警惕：任何数据都有可能引起问题。最常见的问题是跨站脚本攻击（**XSS**），其中数据值被精心制作，以便浏览器将其解释为HTML元素或JavaScript代码。在
    *第7章* 中，我演示了如何使用内容安全策略（CSP）来帮助防止XSS，通过告诉浏览器应用程序预期如何行为。但另一个很好的措施是对从用户那里接收到的数据进行清理，以确保它不包含浏览器在显示给其他用户时意外解释的字符。为了准备，*清单11.17*
    更改了表单处理程序，使其返回HTML响应。
- en: 'Listing 11.17: Returning an HTML response in the forms.ts file in the src/server
    folder'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 清单11.17：在 src/server 文件夹中的 forms.ts 文件中返回HTML响应
- en: '[PRE28]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The HTML output is simple and unstyled, which you can see by requesting `http://localhost:5000`,
    filling out the form with the same details as for previous examples, and clicking
    the **Submit (POST/MIME)** button, as shown in *Figure 11.6*.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 通过请求 `http://localhost:5000`，使用与之前示例相同的详细信息填写表单，并点击 **提交（POST/MIME）** 按钮，你可以看到HTML输出的简单和未加样式，如图
    *图11.6* 所示。
- en: '![](img/B21959_11_06.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_11_06.png)'
- en: 'Figure 11.6: Producing an HTML response'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.6：生成HTML响应
- en: To see the effect of unsafe content, go back to `http://localhost:5000` and
    fill out the form using the values in *Table 11.4*
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看不安全内容的效果，请回到 `http://localhost:5000` 并使用 *表11.4* 中的值填写表单。
- en: 'Table 11.4: Unsafe content values'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 表11.4：不安全的内容值
- en: '| Field | Description |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| 字段 | 描述 |'
- en: '| `Name` |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| `名称` |'
- en: '[PRE29]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '|'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `City` |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| `城市` |'
- en: '[PRE30]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '|'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Click **Submit (POST/MIME)** and the values that were entered into the form
    will be included in the response, which the browser interprets as a `link` element
    for the Bootstrap CSS stylesheet and an anchor element that is styled to look
    like a button, and which will request a URL that is not part of the application,
    as shown in *Figure 11.7*.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **提交（POST/MIME）**，表单中输入的值将被包含在响应中，浏览器将其解释为Bootstrap CSS样式表的 `link` 元素和一个样式化为按钮的锚点元素，它将请求不属于应用程序的URL，如图
    *图11.7* 所示。
- en: '![](img/B21959_11_07.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_11_07.png)'
- en: 'Figure 11.7: The effect of displaying unsafe content'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.7：显示不安全内容的效果
- en: The sanitization process involves replacing characters that denote HTML content
    with escape sequences that display the same character. *Table 11.5* lists the
    characters that are usually sanitized and the escape sequences that replace them.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 清理过程涉及将表示HTML内容的字符替换为显示相同字符的转义序列。*表11.5* 列出了通常需要清理的字符及其替换的转义序列。
- en: 'Table 11.5: Unsafe characters and escape sequences'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 表11.5：不安全字符和转义序列
- en: '| Unsafe Character | Escape Sequence |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| 不安全字符 | 转义序列 |'
- en: '|'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE31]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '|'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE32]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '|'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE33]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '|'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE34]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '|'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE35]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '|'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE36]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '|'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE37]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '|'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE38]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '|'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE39]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '|'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE40]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '|'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE41]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '|'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE42]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '|'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE43]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '|'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE44]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '|'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Add a file named `sanitize.ts` to the `src/server` folder with the content shown
    in *Listing 11.18*.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 将名为 `sanitize.ts` 的文件添加到 `src/server` 文件夹中，其内容如 *清单11.18* 所示。
- en: 'Listing 11.18: The contents of the sanitize.ts file in the src/server folder'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 清单11.18：src/server 文件夹中 sanitize.ts 文件的内容
- en: '[PRE45]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The `sanitizeValue` function applies a pattern to a string to find dangerous
    characters and replace them with safe escape sequences. Data values are sanitized
    as they are included in an HTML response. This is usually done as part of the
    template process – as I demonstrate shortly – but *Listing 11.19* applies the
    `santizeValue` function to the values included in the HTML response.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`sanitizeValue` 函数将一个模式应用于字符串以查找危险字符，并将它们替换为安全的转义序列。数据值在包含在HTML响应中时会被清理。这通常作为模板过程的一部分完成——我将很快演示——但
    *清单11.19* 将 `sanitizeValue` 函数应用于HTML响应中包含的值。'
- en: 'Listing 11.19: Sanitizing output values in the forms.ts file in the src/server
    folder'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 清单11.19：在 src/server 文件夹中的 forms.ts 文件中清理输出值
- en: '[PRE46]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Use a browser to request `http://localhost:5000`, fill out the form with the
    details in *Table 11.5*, and click the **Submit (POST/MIME)** button. The values
    received from the user are sanitized as they are included in the HTML response
    so that the browser can display the strings without interpreting them as valid
    elements, as shown in *Figure 11.8*.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 使用浏览器请求 `http://localhost:5000`，填写 *表 11.5* 中的详细信息，并点击 **提交（POST/MIME）** 按钮。从用户接收到的值在包含在
    HTML 响应中时会被清理，以便浏览器可以显示字符串而不将其解释为有效元素，如 *图 11.8* 所示。
- en: '![](img/B21959_11_08.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_11_08.png)'
- en: 'Figure 11.8: Sanitizing data values'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.8：清理数据值
- en: '**Repeatedly Sanitizing data**'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '**反复清理数据**'
- en: 'You must ensure that data is sanitized, but you should only sanitize it once.
    If data is repeatedly sanitized, then the `&` character will be escaped repeatedly.
    If you start with this unsafe string, for example:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须确保数据被清理，但您应该只清理一次。如果数据被反复清理，那么 `&` 字符将被反复转义。如果您从一个不安全的字符串开始，例如：
- en: '[PRE47]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'and sanitize it, the result will be as follows:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 并对其进行清理，结果将如下所示：
- en: '[PRE48]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The dangerous characters are escaped but the browser will interpret the escape
    sequences so that the string looks like the original but won’t be interpreted
    as an HTML element. If the string is sanitized again, the `&` characters, which
    are already part of escape sequences, will be replaced with `&amp;`, producing
    this result:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 危险字符已被转义，但浏览器将解释转义序列，使得字符串看起来像原始字符串，但不会将其解释为 HTML 元素。如果再次清理字符串，已经是转义序列一部分的 `&`
    字符将被替换为 `&amp;`，产生以下结果：
- en: '[PRE49]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The browser won’t be able to interpret the escape sequences properly and will
    display a mangled string.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器无法正确解释转义序列，并将显示一个混乱的字符串。
- en: Most template packages will automatically sanitize data values when a template
    is rendered, and this includes the Handlebars package added to the project in
    *Chapter 10*. Add a file named `formData.handlebars` to the `templates/server`
    folder with the content shown in *Listing 11.20*.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数模板包在渲染模板时都会自动清理数据值，这包括在 *第 10 章* 中添加到项目中的 Handlebars 包。将一个名为 `formData.handlebars`
    的文件添加到 `templates/server` 文件夹中，其内容如 *列表 11.20* 所示。
- en: 'Listing 11.20: The contents of the formData.handlebars file in the templates/server
    folder'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 11.20：`templates/server` 文件夹中 `formData.handlebars` 文件的内容
- en: '[PRE50]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Handlebars automatically sanitizes data values in `{{` and `}}` expressions,
    making it safe to include in HTML responses. *Listing 11.21* updates the form
    request handler to use the new template.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Handlebars 自动在 `{{` 和 `}}` 表达式中清理数据值，使其在 HTML 响应中包含时更安全。*列表 11.21* 更新了表单请求处理程序以使用新的模板。
- en: 'Listing 11.21: Using a template in the forms.ts file in the server/src folder'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 11.21：在 `server/src` 文件夹中的 `forms.ts` 文件中使用模板
- en: '[PRE51]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The context object passed to the template contains the properties from the `body`
    and `file` objects and a `fileData` property that provides direct access to the
    file data, since Handlebars won’t evaluate code fragments in templates. Request
    `http://localhost:5000`, fill out the form using the details in *Table 11.21*,
    and click the **Submit (POST/MIME)** button and you will see that the template
    contains safe values, as shown in *Figure 11.9*.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给模板的上下文对象包含来自 `body` 和 `file` 对象的属性以及一个 `fileData` 属性，它提供了对文件数据的直接访问，因为 Handlebars
    不会在模板中评估代码片段。请求 `http://localhost:5000`，使用 *表 11.21* 中的详细信息填写表单，并点击 **提交（POST/MIME）**
    按钮，您将看到模板包含安全值，如 *图 11.9* 所示。
- en: '**Tip**'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: Handlebars will always sanitize data values in `{{ }}` expressions. If you want
    to include data without sanitization, use the `{{{` and `}}}` character sequences
    instead, as demonstrated in *Chapter 10*.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Handlebars 将始终在 `{{ }}` 表达式中清理数据值。如果您想在不进行清理的情况下包含数据，请使用 `{{{` 和 `}}}` 字符序列，如
    *第 10 章* 中所示。
- en: '![](img/B21959_11_09.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_11_09.png)'
- en: 'Figure 11.9: Using a template to sanitize data values'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.9：使用模板清理数据值
- en: '**Note**'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: When combined with a content security policy, sanitizing data in HTML templates
    is a good basic defense against XSS attacks. But it isn’t comprehensive and potential
    problems can remain, such as when inserting user data values into JavaScript code
    that will be executed by the browser. A good checklist for avoiding such problems
    can be found at [https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html).
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 当与内容安全策略结合使用时，在 HTML 模板中清洗数据是针对 XSS 攻击的良好基本防御措施。但这并不全面，潜在问题可能仍然存在，例如在将用户数据值插入由浏览器执行的
    JavaScript 代码中。避免此类问题的良好清单可以在 [https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)
    找到。
- en: Validating form data
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证表单数据
- en: Sanitizing data can help prevent malicious values from being displayed to users,
    but that doesn’t mean that the data you receive will be useful. Users will enter
    just about anything into a form, sometimes through genuine error, but mostly because
    forms are an unwelcome obstacle between the user and their goal, whatever that
    might be.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 清洗数据可以帮助防止恶意值显示给用户，但这并不意味着你接收到的数据将是有用的。用户可能会在表单中输入几乎所有内容，有时是因为真正的错误，但大多数情况下是因为表单是用户与其目标之间的一个不受欢迎的障碍，无论这个目标是什么。
- en: The result is that the data received from forms must be *validated*, which is
    the process of ensuring that data can be used by the application and telling the
    user when invalid data is received. Form validation is most easily done with a
    template because it makes it easy to give the user feedback when a problem arises.
    To prepare for validation, add a file named `age.handlebars` to the `templates/server`
    folder with the content shown in *Listing 11.22*.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是，从表单接收到的数据必须进行 *验证*，这是一个确保数据可以被应用程序使用并告知用户何时接收到无效数据的过程。使用模板进行表单验证最为简单，因为它使得在出现问题时向用户提供反馈变得容易。为了准备验证，将一个名为
    `age.handlebars` 的文件添加到 `templates/server` 文件夹中，其内容如 *列表 11.22* 所示。
- en: 'Listing 11.22: The contents of the age.handlebars file in the templates/server
    folder'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 11.22：在 templates/server 文件夹中的 age.handlebars 文件的内容
- en: '[PRE52]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: This template contains a form that asks the user for their name and age so that
    the server can calculate their age next year. This is a trivially simple application,
    but it contains just enough functionality to require validation. *Listing 11.23*
    updates the routes for the `/form` URL to use the new template.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板包含一个询问用户姓名和年龄的表单，以便服务器可以计算他们明年的年龄。这是一个极其简单的应用程序，但它包含了足够的功能，需要验证。*列表 11.23*
    更新了 `/form` URL 的路由，以使用新的模板。
- en: 'Listing 11.23: Updating routes in the forms.ts file in the src/server folder'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 11.23：在 src/server 文件夹中的 forms.ts 文件中更新路由
- en: '[PRE53]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The `get` route renders the age template with no context data. The `post` route
    renders the template with the form data received in the body and a `nextage` property,
    which is created by parsing the `age` value received from the form into a `Number`
    and adding one. Use a browser to request `http://localhost:5000/form`, enter a
    name and age into the form, and click the **Submit** button. If you repeat the
    process but provide a non-numerical age, the application won’t be able to parse
    the form data and won’t produce a result. Both outcomes are shown in *Figure 11.10*.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`get` 路由不带有上下文数据渲染年龄模板。`post` 路由使用表单数据渲染模板，这些数据包含在请求体中，并有一个 `nextage` 属性，该属性通过将表单接收到的
    `age` 值解析为 `Number` 并加一来创建。使用浏览器请求 `http://localhost:5000/form`，在表单中输入姓名和年龄，然后点击
    **提交** 按钮。如果你重复此过程但提供一个非数字年龄，应用程序将无法解析表单数据，并且不会产生结果。这两种结果都在 *图 11.10* 中展示。'
- en: '![](img/B21959_11_10.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_11_10.png)'
- en: 'Figure 11.10: An application that uses form data to produce a result'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.10：使用表单数据生成结果的程序
- en: The application has expectations for the data that it receives, and validation
    is the process of ensuring those expectations are met.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序对其接收到的数据有期望，验证是确保这些期望得到满足的过程。
- en: '**Note**'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: Validation is a way of making the user fill out the form, but you should take
    a moment to ask whether the form should exist at all. If you want increased user
    satisfaction with your application, then keep forms simple and clear, and ask
    for only the bare minimum needed to get the job done. Be flexible about the formats
    you will accept for complex data values, like credit card numbers or dates, and
    make validation error messages as clear as you can.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 验证是让用户填写表单的一种方式，但你应该花点时间考虑表单是否真的应该存在。如果你想提高用户对应用程序的满意度，那么请保持表单简单明了，只请求完成任务所需的最基本信息。对于复杂数据值（如信用卡号码或日期）的格式，要灵活，并尽可能使验证错误信息清晰易懂。
- en: Creating a custom validator
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自定义验证器
- en: Validation requires a set of tests that can be applied to form data as it is
    received. Add a file named `validation.ts` to the `src/server` folder, with the
    contents shown in *Listing 11.24*.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 验证需要一套可以应用于接收到的表单数据的测试集。将一个名为 `validation.ts` 的文件添加到 `src/server` 文件夹中，其内容如
    *清单 11.24* 所示。
- en: 'Listing 11.24: The contents of the validation.ts file in the src/server folder'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 11.24：src/server 文件夹中 validation.ts 文件的内容
- en: '[PRE54]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: There are lots of ways to implement a validation system, but the approach taken
    in *Listing 11.24* is to follow the pattern introduced by other packages used
    in this part of the book and create Express middleware that adds a property to
    the `Request` object. The code isn’t yet complete because it doesn’t apply validation
    checks. But it does allow validation requirements to be defined, and that’s a
    good place to start because the code required to easily perform validation can
    be convoluted.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 实现验证系统有许多方法，但 *清单 11.24* 中采用的方法是遵循本书此部分使用的其他包引入的模式，并创建一个向 `Request` 对象添加属性的
    Express 中间件。代码尚未完成，因为它不应用验证检查。但它确实允许定义验证要求，这是一个好起点，因为执行验证所需的代码可能很复杂。
- en: 'The initial code defines three validation rules: `required`, `minLength`, and
    `isInteger`. Real validation packages, such as the one I introduce later in this
    chapter, have dozens of different rules, but three is enough to demonstrate how
    form data validation works. The `required` rule ensures the user has supplied
    a value, the `minLength` rule enforces a minimum number of characters, and the
    `isInteger` rule ensures that the value is an integer.'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 初始代码定义了三个验证规则：`required`、`minLength` 和 `isInteger`。真正的验证包，如我在本章后面介绍的那个，有几十种不同的规则，但三个就足以演示表单数据验证的工作原理。`required`
    规则确保用户已提供值，`minLength` 规则强制最小字符数，而 `isInteger` 规则确保值是整数。
- en: 'The starting point is to give TypeScript a description of the property that
    will be added to the `Request` object, which is how the validation results will
    be presented to the request handler function:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 起始点是给 TypeScript 描述将要添加到 `Request` 对象的属性，这是验证结果将如何呈现给请求处理器函数的方式：
- en: '[PRE55]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The `ValidatedRequest` type has all of the features defined by `Request`, plus
    a property named `validation` that returns an object with `results` and `valid`
    properties. The `valid` property returns a `boolean` value that gives an overall
    indication of the form data validation outcome. The `results` property provides
    detailed information about the form data fields that have been validated. The
    goal is to produce an object that looks like this:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`ValidatedRequest` 类型具有由 `Request` 定义的 所有功能，以及一个名为 `validation` 的属性，该属性返回一个包含
    `results` 和 `valid` 属性的对象。`valid` 属性返回一个 `boolean` 值，给出表单数据验证结果的整体指示。`results`
    属性提供了关于已验证的表单数据字段的详细信息。目标是生成一个看起来像这样的对象：'
- en: '[PRE56]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: This object represents validation checks performed on `name` and `age` properties.
    Overall, the form data is invalid, and inspecting the detail, you can see that
    this is because the `name` property has failed its validation checks, specifically
    because the name value hasn’t passed the `minLength` rule.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象表示对 `name` 和 `age` 属性进行的验证检查。总体而言，表单数据无效，通过检查细节，你可以看到这是由于 `name` 属性未能通过验证检查，具体是因为名称值未通过
    `minLength` 规则。
- en: The `validate` function returns an Express middleware function that also has
    methods, allowing validation to be defined by chaining together the validation
    rules for a property. The `getValidationResults` reads the `validation` property
    added to the request, making it easy to access the validation data in the request
    handler.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`validate` 函数返回一个 Express 中间件函数，该函数也有方法，允许通过链式组合属性验证规则来定义验证。`getValidationResults`
    读取请求中添加的 `validation` 属性，使得在请求处理器中访问验证数据变得容易。'
- en: Applying validation rules
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用验证规则
- en: Creating a function that also has methods takes advantage of JavaScript’s flexibility,
    so that validation rules can be specified by calling the `validate` method to
    select a form field and then methods can be called on the result to specify validation
    rules. This isn’t essential, but it does allow validation requirements to be expressed
    concisely, as shown in *Listing 11.25*.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个既有方法又有函数的函数利用了JavaScript的灵活性，因此可以通过调用 `validate` 方法来选择表单字段，然后可以在结果上调用方法来指定验证规则。这不是必需的，但它确实允许简洁地表达验证要求，如图
    *列表11.25* 所示。
- en: 'Listing 11.25: Defining validation rules in the forms.ts file in the src/server
    folder'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 列表11.25：在 `src/server` 文件夹中的 `forms.ts` 文件中定义验证规则
- en: '[PRE57]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The result of calling a rule method is the handler function that defines it,
    which means that multiple rules can be selected by chaining together method calls.
    *Listing 11.25* applies the `required` and `minLength` rules to the `name` field
    and the `isInteger` rule to the `age` field.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 调用规则方法的结果是定义它的处理函数，这意味着可以通过链式调用方法来选择多个规则。*列表11.25* 将 `required` 和 `minLength`
    规则应用到 `name` 字段，将 `isInteger` 规则应用到 `age` 字段。
- en: The `getValidationResults` function is called within the handler function to
    get the validation results, which are used to alter the context object used to
    render the view so that the (simple) calculation is only performed when valid
    data has been received from the user.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理函数内部调用 `getValidationResults` 函数以获取验证结果，这些结果用于更改用于渲染视图的上下文对象，以便仅在收到用户的有效数据时才执行（简单的）计算。
- en: The validation results are included in the template context object, which allows
    a template helper to inspect the results and control the visibility of validation
    error elements. The elements that display errors to the users will always be present
    in the template, and *Listing 11.25* defines a template helper named `pass` that
    will be used to control visibility.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 验证结果包含在模板上下文对象中，这允许模板助手检查结果并控制验证错误元素的可见性。显示错误给用户的元素将始终存在于模板中，*列表11.25* 定义了一个名为
    `pass` 的模板助手，它将被用来控制可见性。
- en: '*Listing 11.26* updates the template to include the error message elements.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表11.26* 更新了模板以包含错误消息元素。'
- en: 'Listing 11.26: Adding validation messages in the age.handlebars file in the
    templates/server folder'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 列表11.26：在模板文件夹中的 `age.handlebars` 文件中添加验证消息
- en: '[PRE58]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The new additions ensure that the results are only displayed if the form data
    is valid, and display validation errors when there is a problem. Including the
    error elements in the template will be helpful for client-side validation, which
    is demonstrated later in this chapter.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 新增功能确保只有在表单数据有效时才显示结果，并在有问题时显示验证错误。在模板中包含错误元素将有助于客户端验证，这在本章后面的部分将演示。
- en: Validating data
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证数据
- en: The final step is to complete the custom validator by applying the tests to
    a value, as shown in *Listing 11.27*.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是通过将测试应用到值上来完成自定义验证器，如图 *列表11.27* 所示。
- en: 'Listing 11.27: Completing the validator in the validation.ts file in the src/server
    folder'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 列表11.27：在 `src/server` 文件夹中的 `validation.ts` 文件中完成验证器
- en: '[PRE59]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: I left this step until the end to make the other parts of the validation system
    easier to understand. Each time one of the validation rule methods is called,
    such as `required`, a new property is added to the object assigned to the constant
    named `tests`. To perform validation, the `tests` properties are enumerated, each
    test is performed, and the outcome is used to build up the validation results.
    If any validation test fails, then the overall validation outcome and the outcome
    for the current field value are set to `false`.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我将这一步留到后面，以便使验证系统的其他部分更容易理解。每次调用验证规则方法，例如 `required`，都会向名为 `tests` 的常量所分配的对象中添加一个新属性。为了执行验证，枚举
    `tests` 属性，执行每个测试，并使用结果来构建验证结果。如果任何验证测试失败，则整体验证结果和当前字段值的验证结果都将设置为 `false`。
- en: Use a browser to request `http://localhost:5000` and click the `Submit` button
    without entering values into the form fields. Validation will fail and error messages
    will be displayed to the user, as shown in *Figure 11.11*.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 使用浏览器请求 `http://localhost:5000` 并点击 `提交` 按钮，无需在表单字段中输入值。验证将失败，并将显示错误消息给用户，如图
    *图11.11* 所示。
- en: '![](img/B21959_11_11.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21959_11_11.png)'
- en: 'Figure 11.11: Displaying validation errors'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.11：显示验证错误
- en: An error message is displayed for each validation rule that fails, and the backend
    server won’t generate a normal response until validation succeeds.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个失败的验证规则，都会显示一条错误消息，并且后端服务器只有在验证成功后才会生成正常响应。
- en: Performing client-side validation
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行客户端验证
- en: Client-side validation checks form values before the form is submitted, which
    can provide immediate feedback to the user. Client-side validation is used in
    addition to server-side validation, which is still required because users may
    disable the client-side JavaScript code or manually submit form data.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端验证在表单提交之前检查表单值，这可以为用户提供即时反馈。除了服务器端验证外，客户端验证也被使用，因为用户可能会禁用客户端 JavaScript 代码或手动提交表单数据。
- en: '**Understanding the Built-in HTML Client validation features**'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '**理解内置的 HTML 客户端验证功能**'
- en: HTML supports validation attributes on input elements, along with a JavaScript
    API that allows validation events to be received, both of which are described
    at [https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation](https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation).
    These features can be useful, but they are not always implemented consistently
    and provide only basic validation checks. It requires only a little more work
    to create a more comprehensive validation system, which is why they are not used
    in this chapter.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 支持在输入元素上使用验证属性，以及一个允许接收验证事件的 JavaScript API，这两者都在 [https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation](https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation)
    中进行了描述。这些功能可能很有用，但它们并不总是得到一致的实施，并且仅提供基本的验证检查。创建一个更全面的验证系统只需要做一点额外的工作，这就是为什么它们在本章中没有使用。
- en: The key to client-side development is consistency. This can be achieved by using
    the same package for both client- and server-side validation, which is the approach
    I take in the next section. Otherwise, it is important to ensure that fields are
    validated in the same way and produce the same error messages. Add a file named
    `client_validation.js` to the `src/client` folder with the code shown in *Listing
    11.28*.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端开发的关键是一致性。这可以通过使用相同的包进行客户端和服务器端验证来实现，这是我在下一节中采取的方法。否则，重要的是要确保字段以相同的方式进行验证并产生相同的错误消息。将名为
    `client_validation.js` 的文件添加到 `src/client` 文件夹中，其中包含 *列表 11.28* 中显示的代码。
- en: 'Listing 11.28: The contents of the client_validation.js file in the src/client
    folder'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 11.28：src/client 文件夹中 client_validation.js 文件的内容
- en: '[PRE60]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: This JavaScript code follows a similar pattern to the TypeScript code used to
    set up chains of validation tests in *Listing 11.24*, albeit without integration
    into Express. *Listing 11.29* updates the client-side code to validate the form
    data.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 这段 JavaScript 代码遵循与 *列表 11.24* 中用于设置验证测试链的 TypeScript 代码相似的格式，尽管没有集成到 Express
    中。*列表 11.29* 更新了客户端代码以验证表单数据。
- en: 'Listing 11.29: Validating form data in the client.js file in the src/client
    folder'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 11.29：src/client 文件夹中 client.js 文件中的验证表单数据
- en: '[PRE61]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: This code locates the form element in the HTML document and registers a handler
    for the `submit` event, which is emitted when the user clicks the **Submit** button.
    The browser’s `FormData` API is used to obtain the data in the form, which is
    tested using the validation functions defined in *Listing 11.28*. The validation
    results are used to change the visibility of the error message elements in the
    template. If there are any validation errors, the `preventDefault` method is called
    on the submit event, which tells the browser not to send the data to the server.
    *Listing 11.29* preserves the same style for expressing validation requirements,
    which leads to some dense code for processing the results, finding the elements
    that correspond to each test that has been performed, and setting the element
    visibility.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码在 HTML 文档中定位表单元素，并为 `submit` 事件注册一个处理程序，该事件在用户点击 **提交** 按钮时触发。浏览器使用 `FormData`
    API 获取表单中的数据，这些数据使用 *列表 11.28* 中定义的验证函数进行测试。验证结果用于更改模板中错误消息元素的可见性。如果有任何验证错误，则在提交事件上调用
    `preventDefault` 方法，这告诉浏览器不要将数据发送到服务器。*列表 11.29* 保留了表达验证要求的相同风格，这导致处理结果、查找对应于每个已执行测试的元素以及设置元素可见性的代码变得密集。
- en: For this example, error message elements are added to a Bootstrap CSS class
    when they are processed by the client-side JavaScript code, just to emphasize
    when an error has been displayed by the client and not the server.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，当客户端 JavaScript 代码处理错误消息元素时，会将它们添加到 Bootstrap CSS 类中，只是为了强调错误是由客户端而不是服务器显示的。
- en: Use a browser to request `http://localhost:5000/form` and click the **Submit**
    button without filling out the form. The error message elements will be displayed,
    but with a solid background color that indicates they were shown by the client-side
    code, as shown in *Figure 11.12*.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 使用浏览器请求 `http://localhost:5000/form` 并点击 **提交** 按钮，不填写表单。错误消息元素将被显示，但带有实心背景色，表明它们是由客户端代码显示的，如
    *图 11.12* 所示。
- en: '![](img/B21959_11_12.png)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_11_12.png)'
- en: 'Figure 11.12: Using client-side validation'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.12：使用客户端验证
- en: Using a package for validation
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用验证包进行验证
- en: Having demonstrated how server-side and client-side form validation works, it
    is time to replace the custom checks with those provided by a well-tested and
    comprehensive validation library.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在演示了服务器端和客户端表单验证的工作原理后，现在是时候用经过充分测试和全面的验证库提供的验证替换自定义检查了。
- en: As with most areas of JavaScript functionality, there are many libraries available,
    and the one I have chosen for this chapter, `validator.js`, is simple and effective
    and can be used for both client- and server-side validation. Run the commands
    shown in *Listing 11.30* in the `part2app` folder to install the packages.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 JavaScript 功能的大部分领域一样，有许多库可供选择，而我为这一章选择的 `validator.js` 库简单有效，既可以用于客户端验证，也可以用于服务器端验证。在
    `part2app` 文件夹中运行 *列表 11.30* 中显示的命令来安装包。
- en: 'Listing 11.30: Installing a validation package'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 11.30：安装验证包
- en: '[PRE62]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '*Listing 11.31* updates the client-side validation code to use the tests provided
    by the `validator.js` package.'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 11.31* 更新了客户端验证代码，以使用 `validator.js` 包提供的测试。'
- en: 'Listing 11.31: Using a validation package in the client_validation.js file
    in the src/client folder'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 11.31：在 src/client 文件夹中的 client_validation.js 文件中使用验证包
- en: '[PRE63]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: The full set of tests provided by the `validator.js` package can be found at
    [https://github.com/validatorjs/validator.js](https://github.com/validatorjs/validator.js)
    and *Listing 11.31* uses three of these tests to replace the custom logic while
    the rest of the code remains the same.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`validator.js` 包提供的完整测试集可以在 [https://github.com/validatorjs/validator.js](https://github.com/validatorjs/validator.js)
    找到，而 *列表 11.31* 使用了这些测试中的三个来替换自定义逻辑，其余代码保持不变。'
- en: The same set of changes can be applied to the server, as shown in *Listing 11.32*,
    ensuring consistent validation.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将相同的更改应用到服务器上，如 *列表 11.32* 所示，以确保一致的验证。
- en: 'Listing 11.32: Using a validation package in the validation.ts file in the
    src/server folder'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 11.32：在 src/server 文件夹中的 validation.ts 文件中使用验证包
- en: '[PRE64]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Request `http://localhost:5000/form` and submit the form and you will see the
    validation messages shown in *Figure 11.13*. Disable JavaScript in the browser
    and repeat the process, and you will see the same validation messages, but this
    time displayed by the server, also shown in *Figure 11.13*.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 请求 `http://localhost:5000/form` 并提交表单，您将看到 *图 11.13* 中显示的验证消息。在浏览器中禁用 JavaScript
    并重复此过程，您将看到相同的验证消息，但这次是由服务器显示的，也如 *图 11.13* 所示。
- en: '**Tip**'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: For Google Chrome, you can disable JavaScript in the *F12* developer windows
    by selecting **Run Command** from the menu with three vertical dots and entering
    `java` into the text box. The browser will present the **Disable JavaScript**
    or **Enable JavaScript** commands.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Google Chrome，您可以通过选择菜单中的三个垂直点旁的 **运行命令** 并在文本框中输入 `java` 来在 *F12* 开发者窗口中禁用
    JavaScript。浏览器将显示 **禁用 JavaScript** 或 **启用 JavaScript** 命令。
- en: '![](img/B21959_11_13.png)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_11_13.png)'
- en: 'Figure 11.13: Using a validation package'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.13：使用验证包
- en: There is no change in the way validation appears to the user, but the use of
    a validation package increases confidence that validation will be performed accurately
    and provides access to a much wider range of validation tests.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 验证对用户显示的方式没有变化，但使用验证包增加了验证将准确执行的信心，并提供了访问更广泛的验证测试的范围。
- en: Summary
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, I described the different ways that applications can receive
    form data, make it safe to handle, and check that it is the data that the application
    requires:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我描述了应用程序可以接收表单数据、使其安全处理以及检查其是否是应用程序所需数据的不同方式：
- en: Form data can be sent using `GET` and `POST` requests, which affects how the
    data is encoded.
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用 `GET` 和 `POST` 请求发送表单数据，这会影响数据的编码方式。
- en: Caution is required when sending data with `GET` requests because the results
    may be cached.
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用 `GET` 请求发送数据时需要谨慎，因为结果可能会被缓存。
- en: Different encodings are available for forms sent over `POST` requests, including
    an encoding that allows file data to be sent.
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于通过`POST`请求发送的表单，有多种编码方式可用，包括一种允许发送文件数据的编码。
- en: Form data should be sanitized before it is included in HTML output or used in
    any operation where the values may be evaluated as trusted content.
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在将表单数据包含在HTML输出中或用于任何可能将值评估为可信内容的操作之前，应对其进行清理。
- en: Form data should be validated before it is used to ensure the values sent by
    the user can be safely used by the application.
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用之前，表单数据应该进行验证，以确保用户发送的值可以被应用程序安全地使用。
- en: Validation can be done by the server or the client. Client-side validation does
    not replace server-side validation.
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证可以由服务器或客户端完成。客户端验证不能替代服务器端验证。
- en: In the next chapter, I will explain how databases are used in Node.js applications,
    and how data can be included in the HTML content sent to the client.**
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我将解释如何在Node.js应用程序中使用数据库，以及如何将数据包含在发送给客户端的HTML内容中。
