["```js\nwindow.App = window.App || {};\nApp.Models = {};\n```", "```js\nApp.Models.Event = Backbone.Model.extend({});\n```", "```js\nApp.Models.Calendar = Backbone.Collection.extend({\n  model: App.Models.Event,\n  url: \"/events\",\n});\n```", "```js\nApp.Models.Month = Backbone.Model.extend({\n  defaults: {\n    year : moment().year(),\n    month: moment().month()\n  },\n  initialize: function (options) {\n    var m = this.moment();\n    this.set('name', m.format('MMMM'));\n    this.set('days', m.daysInMonth());\n    this.set('weeks', Math.ceil((this.get('days') + m.day()) / 7));\n  },\n  moment: function () {\n    return moment([this.get('year'), this.get('month')]);\n  }\n});\n```", "```js\nwindow.App = window.App || {};\n```", "```js\nApp.Router = Backbone.Router.extend({\n  initialize: function (options) {\n    this.main = options.main;\n    this.calendar = options.calendar;\n    App.Router.navigate = this.navigate.bind(this);\n  },\n  routes: {\n    '': 'month',\n    ':year/:month': 'month'\n  },\n  month: function (year, month) {\n    var c = this.clean(year, month);\n\n    this.main.html(new App.Views.Month({\n      collection: this.calendar,\n      model: new App.Models.Month({ year: c[0], month: c[1] })\n    }).render().el);\n  }\n});\n```", "```js\nclean: function (year, month, day) {\n  var now = moment();\n  year  = parseInt(year, 10)             || now.year();\n  month = (parseInt(month, 10) - 1) % 12 || now.month();\n  day   = parseInt(day, 10)              || now.day();\n  return [year, month, day];\n}\n```", "```js\n<script>\n  var r = new App.Router({\n    main: $(\"#main\"),\n    calendar: new App.Models.Calendar([])\n  });\n\n  Backbone.history.start({ pushState: true });\n</script>\n```", "```js\n{ \"title\": \"event one\", \"date\": \"2014-01-06\", \"startTime\": \"10:00\", \"endTime\": \"12:00\", \"id\": 1 },\n{ \"title\": \"event two\", \"date\": \"2014-01-08\", \"startTime\": \"00:00\", \"endTime\": \"24:00\", \"id\": 2 },\n{ \"title\": \"event three\", \"date\": \"2014-01-09\", \"startTime\": \"18:00\", \"endTime\": \"21:00\", \"id\": 3 }\n```", "```js\n<link rel=\"stylesheet\" href=\"/style.css\" />\n```", "```js\nApp.Views.Month = Backbone.View.extend({\n  template: JST.month,\n  render: function () {\n    this.el.innerHTML = this.template(this.model.toJSON());\n    var weeks = this.model.get('weeks');\n\n    for (var i = 0; i < weeks; i++) {\n      this.$(\"tbody\").append(new App.Views.WeekRow({\n        week  : i,\n        model : this.model,\n        collection: this.collection\n      }).render().el);\n    }\n    return this;\n  }\n});\n```", "```js\n<h1>\n  <span class=\"prev\"> &larr; Previous Month </span> \n  {{name}} {{year}}\n  <span class=\"next\"> Next Month &rarr; </span>\n</h1>\n<table class='month'>\n  <thead>\n    <tr>\n      <th>Sunday</th>\n      <th>Monday</th>\n      <th>Tuesday</th>\n      <th>Wednesday</th>\n      <th>Thursday</th>\n      <th>Friday</th>\n      <th>Saturday</th>\n    </tr>\n  </thead>\n  <tbody>\n  </tbody>\n</table>\n```", "```js\nevents: {\n  'click .prev': 'prev',\n  'click .next': 'next'\n},\n```", "```js\nprev: function () {\n  var route = this.model.moment()\n    .subtract(1, 'month').format('YYYY/MM');\n  App.Router.navigate(route, { trigger: true });\n},\nnext: function () {\n  var route = this.model.moment()\n    .add(1, 'month').format('YYYY/MM');\n  App.Router.navigate(route, { trigger: true });\n}\n```", "```js\nApp.Views.WeekRow = Backbone.View.extend({\n  tagName: 'tr',\n  initialize: function (options) {\n    if (options) {\n      this.week = options.week;\n    }\n  },\n  render: function () {\n    var month = this.model;\n\n    if (this.week === 0) {\n      var firstDay = month.moment().day();\n      for (var i = 0; i < firstDay; i++) {\n        this.$el.append(\"<td>\");\n      }\n    }\n\n    month.weekDates(this.week).forEach(function (date) {\n      date = month.moment().date(date);\n      this.$el.append(new App.Views.DayCell({\n        model: date,\n        collection: this.collection.onDate(date)\n      }).render().el);\n    }, this);\n\n    return this;\n  }\n});\n```", "```js\nweekDates: function (num) {\n  var days  = 7,\n      dates = [],\n      start = this.moment().day();\n\n  if (num === 0) {\n    days -= start;\n    start = 0;\n  }\n\n  var date = num*7 + 1 - start, \n      end  = date + days;\n\n  for (; date < end; date++) {\n    if (date > this.get('days')) continue;\n    dates.push(date);\n  }\n  return dates;\n},\n```", "```js\nstart: function () {\n  return moment(this.get('date') + \" \" + this.get('startTime'));\n},\n```", "```js\nonDate: function (date) {\n  return new App.Models.Calendar(this.filter(function (model) {\n    return model.start().isSame(date, 'day');\n  }));\n}\n```", "```js\n<span class=\"date\">{{num}}</span>\n<ul>\n  <% titles.forEach(function (title) { %>\n    <li>{{ title }}</li>\n  <% }); %>\n</ul>\n```", "```js\nApp.Views.DayCell = Backbone.View.extend({\n  tagName: 'td',\n  template: JST.dayCell,\n  events: {\n    'click': 'switchToDayView'\n  },\n  render: function () {\n    this.el.innerHTML = this.template({ \n      num: this.model.date(),\n      titles: this.collection.pluck('title') \n    });\n    return this;\n  },\n  switchToDayView: function () {\n    App.Router.navigate(this.model.format('YYYY/MM/DD'), {\n      trigger: true \n    });\n  }\n});\n```", "```js\nbody {\n  font-family: sans-serif;\n  margin: 0;\n}\n```", "```js\n.prev, .next {\n  font-size: 60%;\n}\nh1 {\n  text-align: center;\n  margin: 0;\n}\n```", "```js\ntable { \n  border-collapse: collapse;\n}\n\ntd {\n  border: 1px solid #ccc;\n}\n```", "```js\ntable.month {\n  table-layout: fixed;\n  width: 1000px;\n  height: 600px;\n  margin: auto;\n}\n```", "```js\ntable.month td {\n  position: relative;\n  vertical-align: top;\n}\ntable.month td .date {\n  font-weight: bold;\n  position: absolute;\n  font-size: 100px;\n  bottom: -23px;\n  right: -4px;\n  color: #ececec;\n  z-index: -1;\n}\n```", "```js\ntable.month td:hover {\n  cursor: pointer;\n}\ntable.month td:hover .date {\n  color: #ccc;\n}\n```", "```js\ntd ul {\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n  font-size: 80%;\n  height: 100%;\n  overflow: scroll;\n}\n\ntd li {\n  padding: 3px 10px;\n  margin: 2px 0;\n  background: rgba(223, 240, 216, 0.5);\n  border: 1px solid rgb(223, 240, 216);\n}\n```", "```js\n':year/:month/:day': 'day'\n```", "```js\nday: function (year, month, day) {\n  var date = moment(this.clean(year, month, day)); \n  this.main.html(new App.Views.Day({\n    date: date,\n    collection: this.calendar\n  }).render().el);\n},\n```", "```js\n<h1> {{ date }} </h1>\n<p class='back'>&larr; Back to Month View </p>\n<div class=\"splitView\">\n</div>\n```", "```js\n.splitView > * {\n  width: 45%;\n  margin: 2%;\n  float: left;\n}\n```", "```js\nApp.Views.Day = Backbone.View.extend({\n  template: JST.day,\n  initialize: function (options) {\n    this.date = options.date;\n  },\n  events: {\n    'click .back' : 'backToMonth'\n  },\n  render: function () {\n    this.el.innerHTML = this.template({ \n      date: this.date.format(\"MMMM D, YYYY\") \n    });\n    this.$('.splitView').append(new App.Views.DayTable({\n      date: this.date,\n      collection: this.collection\n    }).render().el);\n    return this;\n  },\n  backToMonth: function () {\n    App.Router.navigate(this.date.format('/YYYY/MM'), { \n      trigger: true \n    });\n  }\n});\n```", "```js\n<thead>\n  <tr>\n    <th> Time </th>\n    <th> Event </th>\n  </tr>\n</thead>\n<tbody>\n</tbody>\n```", "```js\nApp.Views.DayTable = Backbone.View.extend({\n  tagName: 'table',\n  className: 'day',\n  template: JST.dayTable,\n  events: {\n    'mouseover tr.highlight td.event': 'hover',\n    'mouseout  tr.highlight td.event': 'hover'\n  },\n  initialize: function (options) {\n    this.date = options.date;\n    this.listenTo(this.collection, 'add', this.addEvent)\n    this.listenTo(this.collection, 'destroy', this.destroyEvent)\n    this.hours = {};\n  }\n});\n```", "```js\nrender: function () {\n  this.el.innerHTML = this.template();\n\n  for (var i = 0; i < 24; i++) {\n    var time = moment(i, \"H\").format('h:mm A');\n    this.hours[time] = new App.Views.Hour({ time: time });\n    this.$('tbody').append(this.hours[time].render().el);\n  }\n  this.collection.onDate(this.date).forEach(this.addEvent, this);\n  return this;\n},\n```", "```js\nhours: function () {\n  var hours = [],\n      start = this.start(),\n      end   = this.end();\n\n  while (start.isBefore(end)) {\n    hours.push(start.format('h:mm A'));\n    start.add(1, 'hour');\n  }\n  return hours;\n}\n```", "```js\nend: function () {\n  var endTime = moment(this.get('date') + \" \" +this.get('endTime'));\n  if (this.get('endTime') === '00:00') {\n    endTime.add(1, 'day');\n  }\n  return endTime;\n},\n```", "```js\n['1:00 PM', '2:00 PM', '3:00 PM']\n\n```", "```js\naddEvent: function (evt) {\n  evt.hours().forEach(function (hour) {\n    this.hours[hour].displayEvent(evt);\n  }, this);\n},\ndestroyEvent: function (evt) {\n  evt.hours().forEach(function (hour) {\n    this.hours[hour].removeEvent();\n  }, this);\n},\n```", "```js\nhover: function (e) {\n  var id = parseInt(e.currentTarget.getAttribute('data-id'), 10),evt = this.collection.get(id);\n\n  evt.hours().forEach(function (hour) {\n    this.hours[hour].hover();\n  }, this);\n\n  this.collection.trigger(\"hover\", evt);\n}\n```", "```js\n<td class='time'> {{ time }}</td>\n<td class='event'></td>\n```", "```js\nApp.Views.Hour = Backbone.View.extend({\n  tagName: 'tr',\n  template: JST.hour,\n  initialize: function (options) {\n    this.time = options.time;\n  },\n  render: function () {\n    this.el.innerHTML = this.template({ time: this.time });\n    return this;\n  },\n  displayEvent: function (model) {\n    this.$el.addClass(\"highlight\");\n    this.$('.event').attr('data-id', model.get('id'));\n    this.$(\".event\").text(model.get('title'));\n  },\n  removeEvent: function () {\n    this.$el.removeClass('highlight');\n    this.$('.event').removeAttr('data-id');\n    this.$('.event').text('');\n  },\n  hover: function () {\n    this.$el.toggleClass('hover');\n  }\n});\n```", "```js\ntable.day tr.highlight td.event {\n  background: rgb(217, 237, 247);\n  color: rgb(53, 103, 132);\n}\ntable.day tr.highlight.hover td.event {\n  background: rgb(252, 248, 227);\n  color: rgb(53, 103, 132);\n}\ntable.day td {\n  padding: 4px 0;\n  width: 100px;\n  text-align: center;\n}\ntable.day td.event {\n  width: 500px;\n}\n```", "```js\n<h2>{{ title }}</h2>\n<% if (start) { %>\n<p> {{ start }} - {{ end }} ({{ duration }}) <p>\n<p><button> Delete Event </button>\n<% } %>\n```", "```js\nApp.Views.Details = Backbone.View.extend({\n  template: JST.details,\n  events: {\n    'click button': 'delete'\n  },\n  initialize: function () {\n    this.data = {\n      title: \"Hover over an event to see details\",\n      start: '',\n      end: '',\n      duration: ''\n    };\n    this.render();\n  },\n  render: function () {\n    this.el.innerHTML = this.template(this.data);\n    return this;\n  },\n  changeModel: function (model) {\n    this.model = model;\n    var s = this.model.start(),\n        e = this.model.end();\n    this.data = {\n      title: model.get('title'),\n      start: s.format('h:mm A'),\n      end: e.format('h:mm A'),\n      duration: e.diff(s, 'hour') + ' hours'\n    }\n    return this.render();\n  },\n  delete: function () {\n    this.model.destroy();\n  }\n});\n```", "```js\nvar div = this.$('div').append('<div>')\n\nthis.details = new App.Views.Details();\ndiv.append(this.details.el);\n```", "```js\nshowDetails: function (model) {\n  this.details.changeModel(model);\n}\n```", "```js\nthis.listenTo(this.collection, 'hover', this.showDetails);\n```", "```js\n<p><input type=\"text\" id=\"eventTitle\" /></p>\n<p><input type=\"time\" id=\"eventStartTime\" /></p>\n<p><input type=\"time\" id=\"eventEndTime\" /></p>\n<p><button> Create Event </button></p>\n<p class=\"error\"></p>\n```", "```js\nApp.Views.CreateEvent = Backbone.View.extend({\n  tagName: 'form',\n  template: JST.createEvent,\n  initialize: function (options) {\n    this.date = options.date;\n  },\n  events: {\n    'click button': 'createEvent'\n  },\n  render: function () {\n    this.el.innerHTML = this.template();\n    return this;\n  }\n});\n```", "```js\ncreateEvent: function (evt) {\n  evt.preventDefault();\n\n  var model = new App.Models.Event({\n    collection: this.collection.onDate(this.date),\n    title: this.$(\"#eventTitle\").val(),\n    date: this.date,\n    startTime: this.$(\"#eventStartTime\").val(),\n    endTime: this.$(\"#eventEndTime\").val()\n  });\n\n  if (model.isValid()) {\n    this.collection.create(model, { wait: true });\n    this.el.reset();\n    this.$(\".error\").text('');\n  } else {\n    this.$(\".error\").text(model.validationError);\n  }\n\n  return false;\n}\n```", "```js\nvalidate: function (attrs) {\n  if (attrs.collection) {\n    var takenHours = _.flatten(attrs.collection.invoke('hours'));\n\n    var hours = this.hours().map(function (x) {\n      return takenHours.indexOf(x);\n    }).filter(function (x) {\n      return x > -1;\n    }).length;\n\n    this.unset('collection');\n\n    if (hours > 0) {\n      return \"You already have an event at that time.\";\n    }\n  }\n}\n```", "```js\ndiv.append(new App.Views.CreateEvent({\n  date: this.date.format('YYYY-MM-DD'),\n  collection: this.collection\n}).render().el);\n```", "```js\napp.get('/*', function (req, res) {\n  db.find(function (err, events) {\n    res.render(\"index.ejs\", { events: JSON.stringify(events) });\n  });\n});\n```", "```js\ncalendar: new App.Models.Calendar(<%- events %>)\n```", "```js\napp.post('/events', function (req, res) {\n  var b = req.body;\n  db.insert({\n    title: b.title,\n    date: b.date,\n    startTime: b.startTime,\n    endTime: b.endTime\n  }, function (err, evt) {\n    res.json(evt);\n  -});\n});\n```", "```js\napp.delete('/events/:id', function (req, res) {\n  var id = parseInt(req.params.id, 10);\n\n  db.delete({ id: id }, function () {\n    res.json({});\n  });\n});\n```", "```js\ncomparator: function (a, b) {\n  return a.start().isAfter(b.start());\n},\n```"]