["```js\nvar a=0;\nfor(var a in [0, 1]);\nconsole.log( a ); // ==> a is now 1 (as modified by the loop)\n```", "```js\nvar a=0;\nfor(let a in [0, 1]);\nconsole.log( a ); // ==> a is still 0 (not modified by the loop)\n```", "```js\nglob=1; {glob=2; let glob=3;}  // ==> can't access lexical declaration `glob' before \ninitialization\nglob=1; {glob=2; var glob=3;} // ==> accepted syntax\n```", "```js\n    const i = 10;\n    console.log(i);\n    // ->    10\n    ```", "```js\n    const f = function() {\n        var i = 20;\n        console.log(i);\n    };\n    ```", "```js\n    f();\n    // ->    20\n    console.log(i);\n    // ->    10\n    ```", "```js\n    if (true) {\n        let i = 15;\n        console.log(i);\n    }\n    // ->   15\n     console.log(i);\n    // ->   10\n    ```", "```js\n    i = 10;\n    if (true) {\n        var i = 15;\n        console.log(i);\n    }\n    // ->    15\n    console.log(i);\n    // ->    15\n    ```", "```js\nvar value = [1, 2, 3]; // an array - which is also an object\nif (typeof value === \"object\" && value != null) {\n    console.log(\"value is an object\");\n}\n```", "```js\n    var printType = function(val) {\n    ```", "```js\n      if (val === null) {\n        console.log(\"Value is null\");\n        return;\n      }\n    ```", "```js\n      console.log(\"Value is\", typeof val);\n    }\n    ```", "```js\n    printType(12);\n    printType(\"I am a string\");\n    printType({});\n    printType(null);\n    ```", "```js\n    Value is number\n    Value is string\n    Value is object\n    Value is null\n    ```", "```js\n21 == 9+12;\nfalse != true;\n6 > 1;\n5 >= 5;\n\"1\" == 1;\n```", "```js\n    function odd_or_even(counter, last) {\n    ```", "```js\n      while (counter <= last) {\n    ```", "```js\n        if (counter % 2 == 0) { // is true if the remainder of 'counter / 2' is \n    equal to zero\n          console.log(counter, \"is an even number\");\n        } else {\n          console.log(counter, \"is an odd number\");\n        }\n    ```", "```js\n      counter = counter + 1;\n    ```", "```js\n      }\n    }\n    ```", "```js\n    odd_or_even(1, 5);\n    //   1 \"is an odd number\"\n    //   2 \"is an even number\"\n    //   3 \"is an odd number\"\n    //   4 \"is an even number\"\n    //   5 \"is an odd number\"\n    ```", "```js\nif (0) console.log(\"reached\");  // doesn't succeed\nconsole.log( 0 == false ); // prints true\nconsole.log( 0 === false ); // prints false\n```", "```js\nvar falseValue = !true;\n```", "```js\nif (!!1 === true) {\n  console.log(\"this code will execute\");\n}\n```", "```js\nif (true || false && false)\n```", "```js\nif ((true || false) && false)\n```", "```js\nif (true || (false && false))\n```", "```js\n   true || false && false\n= true && false\n= false\n```", "```js\n   true || false && false\n= true || false\n= true\n```", "```js\nfunction logAndReturn( value ) {\n  console.log( \"logAndReturn: \" +value );\n  return value;\n}\nif ( logAndReturn (true) || logAndReturn (false)) {\n  console.log(\"|| operator returned truthy.\");\n}\n```", "```js\n// Following two variables are set to \"anonymous\" (simple) objects,\n// each with two fields, 'name' and 'happy', set to initial values (both sad)\nvar john= {name: \"John\", happy: false};\nvar lucy= {name: \"Lucy\", happy: false};\nfunction make_happy( person ) {\n  console.log(\"Making \" +person.name+ \" happy.\");\n  person.happy= true;\n  return true;\n}\nif (make_happy(john) || make_happy(lucy)) {\n  console.log(\"John is happy: \" +john.happy+ \", Lucy is happy: \" +lucy.happy);\n}\n```", "```js\ndistanceLimit = distanceLimit || 5;\n```", "```js\nitems.length && processItems(items);\n```", "```js\n    function isEligible(distance, membershipstatus) {\n    ```", "```js\n    if (distance < 1 || membershipstatus === \"active\" && distance > 10 || membershipstatus === \"inactive\" && distance > 5 ) {\n    ```", "```js\n        return false;\n    ```", "```js\n      }\n      return true;\n    }\n    ```", "```js\n    console.log( isEligible(.5, \"active\") );\n    // =>   false\n    console.log( isEligible(7, \"inactive\") );\n    // =>   false\n    console.log( isEligible(7, \"active\") );\n    // =>    true\n    ```", "```js\nconsole.log( 1 == true ); // => true, but:\nconsole.log( 2 == true ); // => false, because true first converts to 1\nconsole.log( 2 == false ); // => also false, because false converts to 0\n```", "```js\nconsole.log( !!2 == true ); // => true\nconsole.log( !!2 == false ); // => false\n```", "```js\nconsole.log( 1 + 2 + 3 ); // => 6\nconsole.log( true && true && false ); // => false\n```", "```js\nconsole.log( 1 < 3 < 2 ); // 1<3 => true, but then: true<2 => 1<2 => true!\n```", "```js\nconsole.log( 2==2==2 ); // 2==2 => true, but then: true==2 => 1==2 => false!\n// Similarly with 0:\nconsole.log( 0==0==0 ); // 0==0 => true, but then: true==0 => 1==0 => false!\n// However, not the same with 1:\nconsole.log( 1==1==1 ); // 1==1 => true, then: true==1 => 1==1 => true\n```", "```js\nvar action = (score < 40) ? \"Fail\" : \"Pass\";\n```", "```js\nvar action;\nif (score < 40) {\n  action = \"Fail\";\n} else {\n  action = \"Pass\";\n}\n```", "```js\nvar status = (score < 40) ? \"Fail\" : (score > 90) ? \"Outstanding Score\" : \"Pass\";\n```", "```js\nvar status;\nif (score < 40) {\n  status = \"Fail\";\n} else if (score > 90) {\n  status = \"Outstanding Score\";\n} else {\n  status = \"Pass\";\n}\n```", "```js\n0.1 + 0.2;  // outputs 0.30000000000000004\n```", "```js\n((0.1 * 10) + (0.2 * 10)) / 10;  // outputs 0.3\n```", "```js\n0.0032 * 13;  // outputs 0.041600000000000005\n```", "```js\n0.0032 * 1000 * 13 / 1000; // outputs 0.0416\n```", "```js\n5.123.toPrecision(3);\n  // returns \"5.12\"\n```", "```js\nvar num1 = 99;\nvar num2 = Number(99);\nvar num3 = new Number(99);\nconsole.log(num1 == num2); // outputs 'true'\nconsole.log(num1 == num3); // outputs 'true'\nconsole.log(num2 == num3); // outputs 'true'\nconsole.log(num1, num2, num3); // outputs '99 99 Number {99}'\n```", "```js\nconsole.log( false==new Number(0) ); // => true, meaning that Number(0) equals to false, but:\nif( new Number(0) ) { // => truthy\n  console.log(\"truthy\");\n}\nelse {\n  console.log(\"falsey\");\n}\n```", "```js\nconsole.log( Number(true) ); // 1\nconsole.log( Number(false) ); // 0\nconsole.log( Number(\"5\") ); // 5\nconsole.log( Number([]) ); // 0\nconsole.log( Number([1, 2, 3]) ); // NaN\n```", "```js\nconsole.log( Number.parseFloat(\"1.235e+2\") ); // outputs 123.5\nconsole.log( parseFloat(\"1.235e+2\") ); // outputs 123.5 again\n```", "```js\nconsole.log( 123.456.toLocaleString() ); // outputs \"123.456\"\nconsole.log( 123.456.toFixed(1) ); // outputs \"123.5\"\nconsole.log( 123.456.toExponential(3) ); // outputs \"1.235e+2\"\n```", "```js\nconsole.log( 123.toString() ); // => Uncaught SyntaxError: Invalid or unexpected token\n```", "```js\nconsole.log( 123.0.toString() ); // Append .0\\. It will still be represented as an integer (as far as it fits in the integer range)\nconsole.log( (123).toExponential(2) ); // Wrap within parentheses (..)\n```", "```js\nvar num = 999 / 0;\n```", "```js\nNumber.MAX_SAFE_INTEGER + 1 === Number.MAX_SAFE_INTEGER + 2;\n```", "```js\n    function formatPrice(value, currency) {\n    ```", "```js\n      value = Number(value);\n      currency = currency || \"$\";\n    ```", "```js\n      if (Number.isNaN(value) || typeof currency != \"string\") {\n        return null;\n      }\n    ```", "```js\n      return currency + value.toFixed(2);\n    }\n    ```", "```js\n    console.log( formatPrice(1.99, 32) ); // => null\n    console.log( formatPrice(5, \"£\") ); // => £5.00\n    console.log( formatPrice(9.9) ); // => $9.90\n    console.log( formatPrice(\"Ted\") ); // => null\n    ```", "```js\nconsole.log( \"I am a string\" );\nconsole.log( 'I am also a string' );\nconsole.log( `I am a special string` );\n```", "```js\n[\"H\", \"e\", \"l\", \"l\", \"o\", \",\", \" \", \"W\", \"o\", \"r\", \"l\", \"d\", \"!\"]\n```", "```js\n\"Hello, World!\"[7];\n// =>   \"W\"\n```", "```js\nvar msg = \"Hello, World!\";\nconsole.log( msg[7] = \"Z\" ); // => \"Z\"\nmsg; // =>  \"Hello, World!\"\n```", "```js\nconsole.log( \"I can contain 'single' quotes\" );\nconsole.log( 'I can contain \"double\" quotes' );\n```", "```js\n\"It's useful to be able to \\\"escape\\\" quotes\"\n```", "```js\n\"This \\\\ will create a single backslash\"\n```", "```js\n\"This string \" + \"and \" + \"this string \" + \"are concatenated\";\n// =>  \"This string and this string are concatenated\"\n```", "```js\nvar str = `2 + 2 = ${2 + 2}`;\nconsole.log( str ); // =>  \"2 + 2 = 4\"\nvar name = \"Jonny\";\nwelcomeStr = `Hello, ${name}!`;\nconsole.log( welcomeStr );  // => \"Hello, Jonny!\"\n```", "```js\nvar str = `This is line one\nand this is line two`;\nconsole.log( str );\n// => \"This is line one\n// =>  and this is line two\"\n```", "```js\n    function sendEmail(name, age, comments) {\n    ```", "```js\n      var age = Number(age);\n      if (Number.isNaN(age)\n      || typeof name != \"string\"\n      || typeof comments != \"string\") {\n        return null;\n      }\n    ```", "```js\n      var body = `A user has posted a comment from the website:\n      name: ${name}\n      age: ${age}\n      status: ${(age < 18) ? `${name} is not a valid user` : `${name} is a valid  user`}\n      comments: ${comments}`;\n    ```", "```js\n      return body;\n    }\n    sendEmail(\"Jane\", 27, \"Your website is fantastic!\");\n    // =>  \"A user has posted a comment from the website:\n    // =>  name: Jane\n    // =>  age: 27\n    // =>  status: Jane is a valid user\n    // =>  comments Your website is fantastic!\"\n    ```", "```js\n\"Hello, World!\".length;\n// =>  13\n```", "```js\n    function reverse(str) {\n    ```", "```js\n      str = String(str).trim();\n    ```", "```js\n      var result = \"\", index = str.length - 1, chr, isStart = true;\n      while (index >= 0) {\n    ```", "```js\n        chr = str[index];\n    ```", "```js\n        if (isStart && chr != \" \") {\n          chr = chr.toUpperCase();\n          isStart = false;\n        } else {\n          chr = chr.toLowerCase();\n        }\n    ```", "```js\n        if (chr == \".\") {\n          isStart = true;\n          if (index == str.length - 1) {\n            index--;\n            continue;\n    ```", "```js\n          } else {\n            result = result.substr(0, result.length-1) + \". \";\n            index--;\n            continue;\n          }\n        }\n    ```", "```js\n         result = result + chr;\n         index--;\n      }\n      return result + \".\";\n    }\n    ```", "```js\n    reverse(\"This is the first sentence. This is the second.\");\n    // =>  \"Dnoces eht si siht. Ecnetnes tsrif eht si siht.\"\n    ```", "```js\nvar obj = {name: \"Bob\"};\nString(obj);\n// =>  \"[object Object]\"\n```", "```js\nconsole.log( String(99) );\n// =>   \"99\"\nconsole.log(  (99).toString() ); // See above about invoking methods on integer literals\n// =>  \"99\"\nconsole.log( [1, 2, 3].toString() );\n// =>  \"[1, 2, 3]\"\n```", "```js\nvar obj = {ted: \"bob\", toString: function() { return \"I am Bob!\" }};\nobj.toString();\n// =>  \"I am Bob!\"\nString(obj);\n   \"I am Bob!\"\n```", "```js\n\"I am \" + 21 + \" years old\";\n// =>  \"I am 21 years old\"\n```", "```js\n\"42.7\" * 2;\n// =>  85.4\n```", "```js\nconsole.log( \"10\" * \"10\" );\n// =>  100\nconsole.log( \"10\" + \"10\" );\n// =>  \"1010\"\n```", "```js\n Number(\"10\") + Number(\"10\");\n// =>  20\n```", "```js\nfunction (...parameters) {\n   ...body\n}\n```", "```js\notherFunction( function(a, b) { /* do something */ } );\n```", "```js\nvar echo = function(subject) { console.log(subject); };\necho(\"Hello, World!\");\n// =>  \"Hello, World!\"\n```", "```js\nvar myFunc = function(i) { return i + 1; };\nfunction myFunc(i) { return i + 1; };\n```", "```js\n( function(a, b) { console.log(a + b); }\n)(2, 4);\n// =>  6\n```", "```js\nfunction doSomethingAsync(data, callback) {\n  async_task(data).then(    // do async request\n    function(result) {    // then on return\n      callback(result);    // execute callback, passing result data!\n    }\n   );\n   //.. continue with other code ..\n}\n```", "```js\nasyncOne(data, function(res1) {\n  asyncTwo(res1, function(res2) {\n    asyncThree(res2, function(res3) {\n      //... ad infinitum ..\n    });\n  });\n});\n```", "```js\n    function curry(prim, fun) {\n    ```", "```js\n      if (typeof fun != \"function\") return;\n    ```", "```js\n      var ret = function() {\n        return fun(prim);\n      };\n    ```", "```js\n      return ret;\n    }\n    ```", "```js\n    var fun = function(val) { return val + 50 };\n    var curry1 = curry(99, fun);\n    console.log( curry1() );\n    // =>  149\n    console.log( curry1() );\n    // =>  149\n    // calling curry1 will produce the same output however many times \n    // it is called, because it is a fixed, pure function.\n    var curry2 = curry(\"Bob\", fun);\n    console.log( curry2() );\n    // =>  \"Bob50\"\n    ```", "```js\nvar myFun = (param) => param + 1;\n```", "```js\nvar myFun = (param) => {\n  return param + 1;\n};\n```", "```js\nvar myFun = param => param + 1;\n```", "```js\nvar myFun = a, b, c => a + b + c;\n```", "```js\nvar myFun = a, b = undefined, (c) => { return a + b + c };\nvar myFun = a, (b, c) => { return a + b + c };\nvar myFun = (a, b, c) => { return a + b + c };\n```", "```js\nfor (let i = 0; i < 3; i++) {\n  callback(i);\n};\n```", "```js\nvar myFun = function*(params) { /*body*/ };\n```", "```js\nvar myFun = function*() {\n  for (let i = 0; i < 3; i++) {\n    yield i;\n  }\n};\n```", "```js\nvar myGen = myFun();\n```", "```js\nvar firstValue = myGen.next().value;\nconsole.log( firstValue );  // firstValue will equal 0;\n```", "```js\nconsole.log(myGen.next().value);\n// =>   1\nconsole.log(myGen.next().value);\n// =>  2\nconsole.log(myGen.next().value);\n// =>  undefined\n```", "```js\n{value: <value>, done: <boolean>}\n```", "```js\n{value: undefined, done: true}\n```", "```js\nvar myFun = function*() {\n  var count = 0\n  for (let i = 0; i < 3; i++) {\n    yield i;\n    count += i;\n  }\n  yield count;\n};\n```", "```js\nfunction myFun(param1, param2) {\n  console.log(param1, param2);\n};\nmyFun(99);\n// =>  99, undefined\n```", "```js\nvar someValue = arguments[3];\n```", "```js\nvar numParams = arguments.length;\n```", "```js\nvar fun = function () { return arguments.length; };\nfun.call(this, 1, 2, 3);\n// =>  3\nfun.apply(this, [1, 2, 3]);\n// =>  3\n```", "```js\n    var curry = function(fun) { \n    ```", "```js\n      if (typeof fun != \"function\") return;\n    ```", "```js\n      var args = Array.prototype.slice.call(arguments);\n      args.shift();\n    ```", "```js\n      var ret = function() {\n        var nested_args = Array.prototype.slice.call(arguments);\n        return fun.apply(this, args.concat(nested_args));\n      }\n    ```", "```js\n      return ret;\n    }\n    ```", "```js\n    var fun = function() { return arguments.length; };\n    var cur1 = curry(fun, 1, 2, 3);\n    console.log( cur1(4, 5, 6) );\n    // =>  6\n    var cur2 = curry(fun, 1, 2, 3, 4, 5, 6);\n    console.log( cur2(9, 8, 7, 6, 5) );\n    // =>  11\n    ```", "```js\nvar myObject = {};\n```", "```js\nvar myObject = {foo: \"bar\"};\nconsole.log(myObject.foo);\n// =>  \"bar\"\n```", "```js\nvar myObject = {param1: 1, \"param2\": 2};\n```", "```js\nvar myObject = {};\nmyObject.age = 21;\nconsole.log(myObject.age);\n// =>  21\n```", "```js\nmyObject[\"age\"] = 32;\nconsole.log(myObject.age);\n// =>  32\n```", "```js\nvar obj = {};\nobj[\"   \"] = 99;\nconsole.log(obj[\"   \"]);\n// =>   99\n```", "```js\nvar obj = {key: 99};\nobj.key = null;\nconsole.log(obj);\n// =>  {key: null}\n```", "```js\nvar obj = {key: \"data\"};\ndelete obj.key;\nconsole.log(obj);\n// =>   {}\n```", "```js\nvar myObj = {key: 99};\nfunction update(obj) {\n  obj.key = 22;\n  console.log(obj === myObj);  // check they are the same object\n}\nupdate(myObj);\n// =>   true\nconsole.log(myObj.key);\n// =>   22\n```", "```js\nvar myObj= {key: \"value\"};\nfor (const key in myObj) {\n  console.log(myObj[key]);\n}\n```", "```js\nvar keys = Object.keys(myObj);\nfor (let i=0; i<keys.length; i++) {\n  var key = keys[i];\n  console.log(myObj[key]);\n}\n```", "```js\nvar keys = Object.keys(myObj);\nfor (const key of keys) {\n  console.log(myObj[key]);\n}\n```", "```js\nvar values = Object.values(myObj);\nfor (const value of values) {\n  console.log(value);\n}\n```", "```js\nvar keyValues = Object.entries(myObj);\nfor (const kv of keyValues) {\n  console.log(kv[0], kv[1]);\n}\n```", "```js\nvar gameState = {\n  score: 0,\n  enemies: 99,\n  lives: 3\n}\n```", "```js\nvar gameState = {\n  _score: 0,\n  _enemies: 99,\n  _lives: 3,\n  addToScore: function(value) {\n    this._score += value;\n  },\n  killEnemies: function(num) {\n    this._enemies -= num;\n  },\n  killPlayer: function() {\n    this._lives -= 1;\n  }\n}\n```", "```js\n<accessor_type> <accessor_name>() {\n  .. body..\n}\n```", "```js\n var gameState = {\n   _score: 0,\n   _enemies: 99,\n   _lives: 3,\n   get score() {\n     return this._score;\n   },\n   set score(value) {\n     this._score += value;\n   },\n```", "```js\n   get enemies() {\n     return this._enemies;\n   },\n   get killEnemies() {\n     this._enemies--;\n   },\n   set killEnemies(num) {\n     this._enemies -= num;\n   },\n   get lives() {\n     return this._lives;\n   },\n   get killPlayer() {\n     if (this.enemies <= 0) {\n       this._lives = 3;\n     } else {\n       this._lives--;\n     }\n   }\n }\n```", "```js\nconsole.log(gameState.score);\n// =>   0\ngameState.score = 100;\ngameState.score = 99;\nconsole.log(gameState.score);\n// =>   199\n```", "```js\nconsole.log(gameState.enemies);\n// =>   99\ngameState.killEnemies = 3;\nconsole.log(gameState.enemies);\n// =>   96\ngameState.killEnemies;\nconsole.log(gameState.enemies);\n// =>   95\n```", "```js\nconsole.log(gameState.lives);\n// =>   3\ngameState.killPlayer;\nconsole.log(gameState.lives);\n// =>   2\ngameState.killEnemies = 99;\ngameState.killPlayer;\nconsole.log(gameState.lives);\n// =>   3\n```", "```js\n    var obj = {meaningOfLife: 42, foo: \"bar\", child: {me: \"you\", other: {him: \"her\"}}, toString: Object.prototype.toString};\n    ```", "```js\n    var str = obj + \"\";\n    console.log(str);\n    // =>   [object Object]\n    ```", "```js\n    var objToString = function(obj, indent) {\n      obj = obj || this;\n      indent = indent || \"\";\n      var res = \"\";\n    ```", "```js\n      for (var k in obj) {\n    ```", "```js\n        if (typeof obj[k] == \"object\") {\n          res += indent + k + \" = {\\n\";\n          res += objToString(obj[k], indent + \"- \");\n          res += indent + \"}\";\n    ```", "```js\n        } else if (typeof obj[k] != \"function\") {\n          res += indent + k + \" = \" + obj[k];\n        } else {\n          continue;\n        }\n    ```", "```js\n        res += \"\\n\";\n    ```", "```js\n      }\n      return res;\n    }\n    ```", "```js\n    obj.toString = objToString;\n    ```", "```js\n    obj + \"\";\n    ```", "```js\n    \"meaningOfLife = 4\n    foo = bar\n    child = {\n      - me = you\n      - other = {\n      - - him = her\n      - }\n    }\"\n    ```", "```js\nvar myArray = [1, 2, 3];\nvar myEmptyArray = [];\n```", "```js\nmyValue = myArray[3];\n```", "```js\nvar arr1 = [1, 2, 3];\nvar arr2 = new Array(1, 2, 3);\n```", "```js\nvar arr = new Array(3);\nconsole.log( arr );\n// =>   (3) [empty x3]\n```", "```js\nfor (var i in myArray) {\n  console.log(myArray[i]);\n}\n```", "```js\nfor (let i = 0; i < myArray.length; i++) {\n  console.log(myArray [i]);\n}\n```", "```js\nvar arr = [1, \"b\", true];\narr.indexOf(\"b\");\n// =>   1\n```", "```js\nvar searchedValue= \"b\";\n if ( arr.indexOf(searchedValue)>-1 ) {\n   console.log( \"match found\" );\n}\n```", "```js\nvar obj = {name: \"bob\"};\nvar arr = [\"a\", 99, obj];\nconsole.log( arr.indexOf(obj) );\n// =>   2\nconsole.log( arr.indexOf({name: \"bob\"}) );\n// =>   -1\n```", "```js\n var d = new Date();\n d.setHours(12);\n```", "```js\nvar greatDate = Date.parse(\"November 3, 1976\");\n```", "```js\nvar millis = Date.parse(\"November 3, 1976\");\nvar greatDate = new Date(millis);\n```", "```js\nvar d = new Date();\nconsole.log(d);\n//  => current time in local timezone, for example:\n// Thu Apr 25 2019 12:00:00 GMT+0100 (British Summer Time)\n```", "```js\nvar toString = function(date) {\n  date = date || this;\n  var months = [\n   \"Jan\", \"Feb\", \"Mar\",\n   \"Apr\", \"May\", \"Jun\",\n   \"Jul\", \"Aug\", \"Sep\",\n   \"Oct\", \"Nov\", \"Dec\"\n  ];\n  var day = date.getDate();\n  var mnth = date.getMonth();\n  var year = date.getFullYear();\n  return day + ' ' + months[mnth] + ' ' + year;\n}\nvar d = new Date();\nd.toString = toString;\nconsole.log(d);\n```", "```js\ncurrent date in format 25 Apr 2019\n```", "```js\nvar date1 = new Date(\"Dec 25 2001\").getTime();\nvar date2 = new Date(\"Dec 25 2019\").getTime();\nvar diff = date2 - date1;\ndiff\n// =>   567993600000\n```", "```js\nvar day = 1000 * 60 * 60 * 24;\nvar numDays = diff / day;\nnumDays\n// =>   6574\n```", "```js\nvar d = new Date(\"Apr 25 2019\");\nd.setMonth(d.getMonth() + 60);\nd\n// =>   Thu Apr 25 2024 00:00:00 GMT+0100 (British Summer Time)\n// The above result will use your local timezone.\n```", "```js\n        function modelStateChange(state, action, data)\n        ```", "```js\n    todoState = modelStateChange(_todoState, \"MODIFY\", {id: curTodo.id, completed: true});\n    ```"]