["```js\n    npm install postcss-safe-parser --save-dev\n\n    ```", "```js\n    npm install postcss-scss --save-dev\n\n    ```", "```js\n    'use strict';\n    var gulp = require('gulp');\n    var postcss = require('postcss');\n    var fs = require('fs')\n    var autoprefixer = require('autoprefixer');\n    var nested = require('postcss-nested');\n\n    var scss = fs.readFileSync('src/styles.scss', 'utf-8');\n\n    gulp.task('default', function () {\n      var syntax = require('postcss-scss');\n      postcss([ autoprefixer, nested() ]).process(scss, { syntax: syntax }).then(function (result) {\n        fs.writeFileSync('dest/styles.css', result.content);\n      });\n    });\n    ```", "```js\n    npm install postcss-nested --save-dev\n\n    ```", "```js\n    npm install postcss-value-parser --save-dev \n\n    ```", "```js\n    'use strict';\n    var gulp = require('gulp');\n    var postcss = require('postcss');\n    var util = require('util');\n    var autoprefixer = require('autoprefixer');\n    var fs = require('fs');\n    ```", "```js\n    var newValue = 'white', result, selectors = [], root, decl;\n    ```", "```js\n    gulp.task('default', function () {\n      root = postcss.parse('a { color: black }');\n      decl = root.first.first;\n    ```", "```js\n      // get a selector count\n      selectors = [];\n      root.walkRules(function (rule) {\n        selectors.push(rule.selector);\n      });\n    ```", "```js\n      console.log(\"\\nThe declaration type is: \" + decl.type);\n      console.log(\"The value of this declaration is: \" + decl.toString());\n      console.log(\"Number of nodes in this CSS: \" + root.nodes.length);\n      console.log(\"Selectors used in this CSS: \" + selectors.toString());\n    ```", "```js\n      // Replace color black with white\n      root.walkDecls(function (decl) {\n        if ( decl.value.match(/^black/) ) {\n          decl.value = 'white';\n        }\n      });\n    ```", "```js\n      // display content on screen and save to file\n      result = root.toResult({ to: 'all.css', map: { inline: false } });\n      console.log(\"Updated color value: \" + decl.value.toString() + \"\\n\");\n      fs.writeFileSync('dest/styles.css', result.css);\n      fs.writeFileSync('dest/styles.css.map', result.map);\n    });\n    ```", "```js\n// display content on screen and save to file\nresult = root.toResult({ to: 'all.css', map: { inline: false } });\n...\nfs.writeFileSync('dest/styles.css', result.css);\nfs.writeFileSync('dest/styles.css.map', result.map);\n```", "```js\n    cd %APPDATA%\\Sublime Text 3\\Packages\\User\n\n    ```", "```js\n    git clone git://github.com/chriskempson/base16-textmate.git Base16\n\n    ```", "```js\n    npm install midas --save-dev \n\n    ```"]