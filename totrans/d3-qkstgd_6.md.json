["```js\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <title></title>\n        <script src=\"img/d3.v5.min.js\"></script>\n    </head>\n    <body>\n        <svg>\n            <g></g>\n        </svg>\n        <script src=\"img/app.js\" charset=\"utf-8\"></script>\n    </body>\n</html>\n```", "```js\nvar WIDTH = 360;\nvar HEIGHT = 360;\nvar radius = Math.min(WIDTH, HEIGHT) / 2;\n\nvar dataset = [\n    { label: 'Bob', count: 10 },\n    { label: 'Sally', count: 20 },\n    { label: 'Matt', count: 30 },\n    { label: 'Jane', count: 40 }\n];\nconsole.log(dataset);\n```", "```js\nvar WIDTH = 360;\nvar HEIGHT = 360;\nvar radius = Math.min(WIDTH, HEIGHT) / 2;\n\nvar dataset = [\n    { label: 'Bob', count: 10 },\n    { label: 'Sally', count: 20 },\n    { label: 'Matt', count: 30 },\n    { label: 'Jane', count: 40 }\n];\n```", "```js\nvar mapper = d3.scaleOrdinal();\nmapper.range([45, 63, 400]); //list each value for ordinal scales, not just min/max\nmapper.domain(['Bob', 'Sally', 'Zagthor']); //list each value for ordinal scales, not just min/max\n\nconsole.log(mapper('Bob'));\nconsole.log(mapper('Sally'));\nconsole.log(mapper('Zagthor'));\n```", "```js\nconsole.log(mapper.invert(45));\n```", "```js\nconsole.log(d3.schemeCategory10)\n```", "```js\nvar colorScale = d3.scaleOrdinal();\ncolorScale.range(d3.schemeCategory10);\n```", "```js\ncolorScale.domain(dataset.map(function(element){\n    return element.label;\n}));\n```", "```js\nvar WIDTH = 360;\nvar HEIGHT = 360;\nvar radius = Math.min(WIDTH, HEIGHT) / 2;\n\nvar dataset = [\n    { label: 'Bob', count: 10 },\n    { label: 'Sally', count: 20 },\n    { label: 'Matt', count: 30 },\n    { label: 'Jane', count: 40 }\n];\n\nvar colorScale = d3.scaleOrdinal();\ncolorScale.range(d3.schemeCategory10);\ncolorScale.domain(dataset.map(function(element){\n    return element.label;\n}));\n```", "```js\nd3.select('svg')\n    .attr('width', WIDTH)\n    .attr('height', HEIGHT);\n```", "```js\nvar path = d3.select('g').selectAll('path')\n    .data(dataset)\n    .enter()\n    .append('path')\n    .attr('fill', function(d) {\n        return colorScale(d.label);\n    });\n```", "```js\n.attr('d', function(datum){\n    //return path string here\n})\n```", "```js\nvar arc = d3.arc()\n    .innerRadius(0) //to make this a donut graph, adjust this value\n    .outerRadius(radius);\n```", "```js\nvar path = d3.select('g').selectAll('path')\n    .data(dataset)\n    .enter()\n    .append('path')\n    .attr('d', arc) //add this\n    .attr('fill', function(d) {\n        return colorScale(d.label);\n    });\n```", "```js\nvar pie = d3.pie()\n    .value(function(d) { return d.count; }) //use the 'count' property each value in the original array to determine how big the piece of pie should be\n    .sort(null); //don't sort the values\n```", "```js\nconsole.log(pie(dataset));\n```", "```js\nvar path = d3.select('g').selectAll('path')\n    .data(pie(dataset)) //adjust this line to reformat data for arc\n    .enter()\n    .append('path')\n    .attr('d', arc)\n    .attr('fill', function(d) {\n        return colorScale(d.label);\n    });\n```", "```js\nvar path = d3.select('g').selectAll('path')\n    .data(pie(dataset))\n    .enter()\n    .append('path')\n    .attr('d', arc)\n    .attr('fill', function(d) {\n        return colorScale(d.data.label); //use .data property to access \n        original data\n    });\n```", "```js\nvar WIDTH = 360;\nvar HEIGHT = 360;\nvar radius = Math.min(WIDTH, HEIGHT) / 2;\n\nvar dataset = [\n    { label: 'Bob', count: 10 },\n    { label: 'Sally', count: 20 },\n    { label: 'Matt', count: 30 },\n    { label: 'Jane', count: 40 }\n];\n\nvar mapper = d3.scaleOrdinal();\nvar colorScale = d3.scaleOrdinal();\ncolorScale.range(d3.schemeCategory10);\ncolorScale.domain(dataset.map(function(element){\n    return element.label;\n}));\n\nd3.select('svg')\n    .attr('width', WIDTH)\n    .attr('height', HEIGHT);\n\nvar arc = d3.arc()\n    .innerRadius(0)\n    .outerRadius(radius);\n\nvar pie = d3.pie()\n    .value(function(d) { return d.count; })\n    .sort(null);\n\nvar path = d3.select('g').selectAll('path')\n    .data(pie(dataset))\n    .enter()\n    .append('path')\n    .attr('d', arc)\n    .attr('fill', function(d) {\n        return colorScale(d.data.label);\n    });\n```", "```js\nd3.select('svg')\n    .attr('width', WIDTH)\n    .attr('height', HEIGHT);\nvar container = d3.select('g') //add this line and the next:\n    .attr('transform', 'translate(' + (WIDTH / 2) + ',' + (HEIGHT / 2) + ')'); //add this line\n```", "```js\nvar arc = d3.arc()\n    .innerRadius(100) //to make this a donut graph, adjust this value\n    .outerRadius(radius);\n```", "```js\nvar dataset = [\n    { id: 1, label: 'Bob', count: 10 }, //add id property\n    { id: 2, label: 'Sally', count: 20 }, //add id property\n    { id: 3, label: 'Matt', count: 30 }, //add id property\n    { id: 4, label: 'Jane', count: 40 } //add id property\n];\n```", "```js\nvar path = d3.select('g').selectAll('path')\n    .data(pie(dataset), function(datum){ //attach datum.data.id to each element\n        return datum.data.id\n    })\n```", "```js\nvar path = d3.select('g').selectAll('path')\n    .data(pie(dataset), function(datum){\n        return datum.data.id\n    })\n    .enter()\n    .append('path')\n    .attr('d', arc)\n    .attr('fill', function(d) {\n        return colorScale(d.data.label);\n    })//watch out! remove the semicolon here\n    .each(function(d) { this._current = d; }); //add this\n```", "```js\npath.on('click', function(clickedDatum, clickedIndex){\n});\n```", "```js\npath.on('click', function(clickedDatum, clickedIndex){\n    dataset = dataset.filter(function(currentDatum, currentIndex){ //new\n        return clickedDatum.data.id !== currentDatum.id //new\n    }); //new\n});\n```", "```js\npath.on('click', function(clickedDatum, clickedIndex){\n    dataset = dataset.filter(function(currentDatum, currentIndex){\n        return clickedDatum.data.id !== currentDatum.id\n    });\n    path //new\n        .data(pie(dataset), function(datum){ //new\n            return datum.data.id //new\n        }) //new\n        .exit().remove(); //new\n});\n```", "```js\npath.on('click', function(clickedDatum, clickedIndex){\n    dataset = dataset.filter(function(currentDatum, currentIndex){\n        return clickedDatum.data.id !== currentDatum.id\n    });\n    path\n        .data(pie(dataset), function(datum){\n            return datum.data.id\n        })\n        .exit().remove();\n\n    path.transition() //create the transition\n        .duration(750) //add how long the transition takes\n        .attrTween('d', function(d) { //tween the d attribute\n            var interpolate = d3.interpolate(this._current, d); \n            //interpolate \n            from what the d attribute was and what it is now\n            this._current = interpolate(0); //save new value of data\n            return function(t) { //re-run the arc function:\n                return arc(interpolate(t));\n            };\n        });\n});\n```"]