["```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch3/bff-graphql-crud --path cncb-bff-graphql-crud\n```", "```js\nservice: cncb-bff-graphql-crud\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    ...\n\nfunctions:\n  graphql:\n    handler: handler.graphql\n    events:\n      - http:\n          path: graphql\n          method: post\n          cors: true\n    environment:\n      TABLE_NAME:\n        Ref: Table\n  graphiql:\n    handler: handler.graphiql\n    ...\n  trigger:\n    handler: handler.trigger\n    events:\n      - stream:\n          type: dynamodb\n          ...\n\nresources:\n  Resources:\n    Table:\n      Type: AWS::DynamoDB::Table\n      ...\n```", "```js\nmodule.exports = `\n  type Thing {\n    id: String!\n    name: String\n    description: String\n  }\n\n  type ThingConnection {\n    items: [Thing!]!\n    cursor: String\n  }\n\n  extend type Query {\n    thing(id: String!): Thing\n    things(name: String, limit: Int, cursor: String): ThingConnection\n  }\n\n  input ThingInput {\n    id: String\n    name: String!\n    description: String\n  }\n\n  extend type Mutation {\n    saveThing(\n      input: ThingInput\n    ): Thing\n    deleteThing(\n      id: ID!\n    ): Thing\n  }\n`;\n```", "```js\nmodule.exports = {\n  Query: {\n    thing(_, { id }, ctx) {\n      return ctx.models.Thing.getById(id);\n    },\n    things(_, { name, limit, cursor }, ctx) {\n      return ctx.models.Thing.queryByName(name, limit, cursor);\n    },\n  },\n  Mutation: {\n    saveThing: (_, { input }, ctx) => {\n      return ctx.models.Thing.save(input.id, input);\n    },\n    deleteThing: (_, args, ctx) => {\n      return ctx.models.Thing.delete(args.id);\n    },\n  },\n};\n```", "```js\n...\nconst { graphqlLambda, graphiqlLambda } = require('apollo-server-lambda');\nconst schema = require('./schema');\nconst Connector = require('./lib/connector');\nconst { Thing } = require('./schema/thing');\n\nmodule.exports.graphql = (event, context, cb) => {\n  graphqlLambda(\n    (event, context) => {\n      return {\n        schema, context: { models: {\n            Thing: new Thing( new Connector(process.env.TABLE_NAME) )\n          } }\n      };\n    }\n  )(event, context, (error, output) => {\n    cb(error, ...);\n  });\n};\n. . .\n```", "```js\n$ npm run dp:lcl -- -s $MY_STAGE\n\n> cncb-bff-graphql-crud@1.0.0 dp:lcl <path-to-your-workspace>/cncb-bff-graphql-crud\n> sls deploy -v -r us-east-1 \"-s\" \"john\"\n\nServerless: Packaging service...\n...\nServerless: Stack update finished...\n...\nendpoints:\n  POST - https://ac0n4oyzm6.execute-api.us-east-1.amazonaws.com/john/graphql\n  GET - https://ac0n4oyzm6.execute-api.us-east-1.amazonaws.com/john/graphiql\nfunctions:\n  graphql: cncb-bff-graphql-crud-john-graphql\n  graphiql: cncb-bff-graphql-crud-john-graphiql\n  trigger: cncb-bff-graphql-crud-john-trigger\n\nStack Outputs\n...\nServiceEndpoint: https://ac0n4oyzm6.execute-api.us-east-1.amazonaws.com/john\n...\n```", "```js\n$ curl -X POST -H 'Content-Type: application/json' -d '{\"query\":\"mutation { saveThing(input: { id: \\\"33333333-1111-1111-1111-000000000000\\\", name: \\\"thing1\\\", description: \\\"This is thing one of two.\\\" }) { id } }\"}' https://ac0n4oyzm6.execute-api.us-east-1.amazonaws.com/$MY_STAGE/graphql | json_pp\n\n{\n   \"data\" : {\n      \"saveThing\" : {\n         \"id\" : \"33333333-1111-1111-1111-000000000000\"\n      }\n   }\n}\n\n$ curl -X POST -H 'Content-Type: application/json' -d '{\"query\":\"mutation { saveThing(input: { id: \\\"33333333-1111-1111-2222-000000000000\\\", name: \\\"thing2\\\", description: \\\"This is thing two of two.\\\" }) { id } }\"}' https://ac0n4oyzm6.execute-api.us-east-1.amazonaws.com/$MY_STAGE/graphql | json_pp\n\n{\n   \"data\" : {\n      \"saveThing\" : {\n         \"id\" : \"33333333-1111-1111-2222-000000000000\"\n      }\n   }\n}\n\n$ curl -X POST -H 'Content-Type: application/json' -d '{\"query\":\"query { thing(id: \\\"33333333-1111-1111-1111-000000000000\\\") { id name description }}\"}' https://ac0n4oyzm6.execute-api.us-east-1.amazonaws.com/$MY_STAGE/graphql | json_pp\n\n{\n   \"data\" : {\n      \"thing\" : {\n         \"description\" : \"This is thing one of two.\",\n         \"id\" : \"33333333-1111-1111-1111-000000000000\",\n         \"name\" : \"thing1\"\n      }\n   }\n}\n\n$ curl -X POST -H 'Content-Type: application/json' -d '{\"query\":\"query { things(name: \\\"thing\\\") { items { id name } cursor }}\"}' https://ac0n4oyzm6.execute-api.us-east-1.amazonaws.com/$MY_STAGE/graphql | json_pp\n\n{\n   \"data\" : {\n      \"things\" : {\n         \"items\" : [\n            {\n               \"id\" : \"33333333-1111-1111-1111-000000000000\",\n               \"name\" : \"thing1\"\n            },\n            {\n               \"name\" : \"thing2\",\n               \"id\" : \"33333333-1111-1111-2222-000000000000\"\n            }\n         ],\n         \"cursor\" : null\n      }\n   }\n}\n\n$ curl -X POST -H 'Content-Type: application/json' -d '{\"query\":\"query { things(name: \\\"thing\\\", limit: 1) { items { id name } cursor }}\"}' https://ac0n4oyzm6.execute-api.us-east-1.amazonaws.com/$MY_STAGE/graphql | json_pp\n\n{\n   \"data\" : {\n      \"things\" : {\n         \"items\" : [\n            {\n               \"id\" : \"33333333-1111-1111-1111-000000000000\",\n               \"name\" : \"thing1\"\n            }\n         ],\n         \"cursor\" : \"eyJpZCI6IjMzMzMzMzMzLTExMTEtMTExMS0xMTExLTAwMDAwMDAwMDAwMCJ9\"\n      }\n   }\n}\n\n$ curl -X POST -H 'Content-Type: application/json' -d '{\"query\":\"query { things(name: \\\"thing\\\", limit: 1, cursor:\\\"CURSOR VALUE FROM PREVIOUS RESPONSE\\\") { items { id name } cursor }}\"}' https://ac0n4oyzm6.execute-api.us-east-1.amazonaws.com/$MY_STAGE/graphql | json_pp\n\n{\n   \"data\" : {\n      \"things\" : {\n         \"items\" : [\n            {\n               \"id\" : \"33333333-1111-1111-2222-000000000000\",\n               \"name\" : \"thing2\"\n            }\n         ],\n         \"cursor\" : \"eyJpZCI6IjMzMzMzMzMzLTExMTEtMTExMS0yMjIyLTAwMDAwMDAwMDAwMCJ9\"\n      }\n   }\n}\n\n$ curl -X POST -H 'Content-Type: application/json' -d '{\"query\":\"mutation { deleteThing( id: \\\"33333333-1111-1111-1111-000000000000\\\" ) { id } }\"}' https://ac0n4oyzm6.execute-api.us-east-1.amazonaws.com/$MY_STAGE/graphql | json_pp\n\n{\n   \"data\" : {\n      \"deleteThing\" : {\n         \"id\" : \"33333333-1111-1111-1111-000000000000\"\n      }\n   }\n}\n\n$ curl -X POST -H 'Content-Type: application/json' -d '{\"query\":\"mutation { deleteThing( id: \\\"33333333-1111-1111-2222-000000000000\\\" ) { id } }\"}' https://ac0n4oyzm6.execute-api.us-east-1.amazonaws.com/$MY_STAGE/graphql | json_pp\n\n{\n   \"data\" : {\n      \"deleteThing\" : {\n         \"id\" : \"33333333-1111-1111-2222-000000000000\"\n      }\n   }\n}\n\n$ curl -X POST -H 'Content-Type: application/json' -d '{\"query\":\"query { things(name: \\\"thing\\\") { items { id } }}\"}' https://ac0n4oyzm6.execute-api.us-east-1.amazonaws.com/$MY_STAGE/graphql | json_pp\n\n{\n   \"data\" : {\n      \"things\" : {\n         \"items\" : []\n      }\n   }\n}\n```", "```js\n$ sls logs -f trigger -r us-east-1 -s $MY_STAGE\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch3/bff-rest-search --path cncb-bff-rest-search\n```", "```js\nservice: cncb-bff-rest-search\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    ...\n  environment:\n    BUCKET_NAME:\n      Ref: Bucket\n    DOMAIN_ENDPOINT:\n      Fn::GetAtt: [ Domain, DomainEndpoint ]\n...\n\nfunctions:\n  listener:\n    handler: handler.listener\n    events:\n      - stream:\n          type: kinesis\n          arn: ${cf:cncb-event-stream-${opt:stage}.streamArn}\n          ...\n  trigger:\n    handler: handler.trigger\n    events:\n      - sns:\n          arn: \n            Ref: BucketTopic\n          topicName: ${self:service}-${opt:stage}-trigger\n  search:\n    handler: handler.search\n    events:\n      - http:\n          path: search\n          method: get\n          cors: true\n\nresources:\n  Resources:\n    Bucket:\n      Type: AWS::S3::Bucket\n      ...\n      Properties:\n        NotificationConfiguration:\n          TopicConfigurations:\n            - Event: s3:ObjectCreated:Put\n              Topic:\n                Ref: BucketTopic\n    BucketTopic: \n      Type: AWS::SNS::Topic\n    ...\n\n    Domain:\n      Type: AWS::Elasticsearch::Domain\n  ...\n```", "```js\nmodule.exports.listener = (event, context, cb) => {\n  _(event.Records)\n    .map(recordToEvent)\n    .filter(forThingCreated)\n    .map(toThing)\n    .flatMap(put)\n    .collect()\n    .toCallback(cb);\n};\n\n...\n\nmodule.exports.trigger = (event, context, cb) => {\n  _(event.Records)\n    .flatMap(messagesToTriggers)\n    .flatMap(get)\n    .map(toSearchRecord)\n    .flatMap(index)\n    .collect()\n    .toCallback(cb);\n};\n\nconst messagesToTriggers = r => _(JSON.parse(r.Sns.Message).Records);\n\nconst get = (trigger) => {\n  const params = {\n    Bucket: trigger.s3.bucket.name,\n    Key: trigger.s3.object.key,\n  };\n\n  const s3 = new aws.S3();\n  return _(\n    s3.getObject(params).promise()\n      .then(data => ({\n        trigger: trigger,\n        thing: JSON.parse(Buffer.from(data.Body)),\n      }))\n  );\n};\n\nconst toSearchRecord = uow => ({\n  id: uow.thing.id,\n  name: uow.thing.name,\n  description: uow.thing.description,\n  url: `https://s3.amazonaws.com/${uow.trigger.s3.bucket.name}/${uow.trigger.s3.object.key}`,\n});\n\n...\n```", "```js\n$ npm run dp:lcl -- -s $MY_STAGE\n\n> cncb-bff-rest-search@1.0.0 dp:lcl <path-to-your-workspace>/cncb-bff-rest-search\n> sls deploy -v -r us-east-1 \"-s\" \"john\"\n\nServerless: Packaging service...\n... \nServerless: Stack update finished...\n...\nendpoints:\n  GET - https://n31t5dsei8.execute-api.us-east-1.amazonaws.com/john/search\nfunctions:\n  listener: cncb-bff-rest-search-john-listener\n  trigger: cncb-bff-rest-search-john-trigger\n  search: cncb-bff-rest-search-john-search\n\nStack Outputs\n...\nBucketArn: arn:aws:s3:::cncb-bff-rest-search-john-bucket-1xjkvimbjtfj2\nBucketName: cncb-bff-rest-search-john-bucket-1xjkvimbjtfj2\nTopicArn: arn:aws:sns:us-east-1:123456789012:cncb-bff-rest-search-john-trigger\nDomainEndpoint: search-cncb-bf-domain-xavolfersvjd-uotz6ggdqhhwk7irxhnkjl26ay.us-east-1.es.amazonaws.com\nDomainName: cncb-bf-domain-xavolfersvjd\n...\nServiceEndpoint: https://n31t5dsei8.execute-api.us-east-1.amazonaws.com/john\n...\n```", "```js\n$ cd <path-to-your-workspace>/cncb-event-stream\n$ sls invoke -f publish -r us-east-1 -s $MY_STAGE -d '{\"type\":\"thing-created\",\"thing\":{\"new\":{\"name\":\"thing three\",\"id\":\"33333333-2222-0000-1111-111111111111\"}}}'\n\n{\n    \"ShardId\": \"shardId-000000000000\",\n    \"SequenceNumber\": \"49583553996455686705785668952918833314346020725338406914\"\n}\n```", "```js\n$ curl https://<API-ID>.execute-api.us-east-1.amazonaws.com/$MY_STAGE/search?q=three | json_pp\n\n[\n   {\n      \"id\" : \"33333333-2222-0000-1111-111111111111\",\n      \"url\" : \"https://s3.amazonaws.com/cncb-bff-rest-search-john-bucket-1xjkvimbjtfj2/things/33333333-2222-0000-1111-111111111111\",\n      \"name\" : \"thing three\"\n   }\n]\n\n$ curl https://s3.amazonaws.com/cncb-bff-rest-search-$MY_STAGE-bucket-<BUCKET-SUFFIX>/things/33333333-2222-0000-1111-111111111111 | json_pp\n\n{\n   \"asOf\" : 1526026359761,\n   \"name\" : \"thing three\",\n   \"id\" : \"33333333-2222-0000-1111-111111111111\"\n}\n```", "```js\n$ sls logs -f trigger -r us-east-1 -s $MY_STAGE\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch3/bff-rest-analytics --path cncb-bff-rest-analytics\n```", "```js\nservice: cncb-bff-rest-analytics\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    ...\n  environment:\n    EVENTS_TABLE_NAME:\n      Ref: Events\n    VIEW_TABLE_NAME:\n      Ref: View\n\nfunctions:\n  listener:\n    handler: handler.listener\n    events:\n      - stream:\n          type: kinesis\n          arn: ${cf:cncb-event-stream-${opt:stage}.streamArn}\n          ...\n  trigger:\n    handler: handler.trigger\n    events:\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt: [ Events, StreamArn ]\n          ...\n  query:\n    handler: handler.query\n    events:\n      - http:\n          ...\n\nresources:\n  Resources:\n    Events:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        ...\n        KeySchema:\n          - AttributeName: partitionKey\n            KeyType: HASH\n          - AttributeName: timestamp\n            KeyType: RANGE\n        TimeToLiveSpecification:\n          AttributeName: ttl\n          Enabled: true\n        ...\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n    View:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        ...\n        KeySchema:\n          - AttributeName: userId\n            KeyType: HASH\n          - AttributeName: yearmonth\n            KeyType: RANGE\n        ...\n```", "```js\nmodule.exports.listener = (event, context, cb) => {\n  _(event.Records)\n    .map(recordToEvent)\n    .filter(byType)\n    .flatMap(putEvent)\n    .collect()\n    .toCallback(cb);\n};\n\n...\nconst byType = event => event.type.match(/.+/); // any\n\nconst putEvent = (event) => {\n  const params = {\n    TableName: process.env.EVENTS_TABLE_NAME,\n    Item: {\n      partitionKey: event.partitionKey,\n      timestamp: event.timestamp,\n      event: event,\n      ttl: moment(event.timestamp).add(1, 'h').unix()\n    }\n  };\n\n  const db = new aws.DynamoDB.DocumentClient();\n  return _(db.put(params).promise());\n};\n\nmodule.exports.trigger = (event, context, cb) => {\n  _(event.Records)\n    .flatMap(getMicroEventStore)\n    .flatMap(store => _(store) // sub-stream\n .reduce({}, count)\n .flatMap(putCounters)\n )\n    .collect()\n    .toCallback(cb);\n};\n\nconst getMicroEventStore = (record) => {\n  ...\n}\n\nconst count = (counters, cur) => {\n return Object.assign(\n {\n userId: cur.partitionKey,\n yearmonth: moment(cur.timestamp).format('YYYY-MM'),\n },\n counters,\n {\n total: counters.total ? counters.total + 1 : 1,\n [cur.event.type]: counters[cur.event.type] ? counters[cur.event.type] + 1 : 1,\n }\n );\n ;\n}\n\nconst putCounters = counters => {\n  ...\n};\n\nmodule.exports.query = (event, context, cb) => {\n  ...\n};\n```", "```js\n$ npm run dp:lcl -- -s $MY_STAGE\n\n> cncb-bff-rest-analytics@1.0.0 dp:lcl <path-to-your-workspace>/cncb-bff-rest-analytics\n> sls deploy -v -r us-east-1 \"-s\" \"john\"\n\nServerless: Packaging service...\n...\nServerless: Stack update finished...\n...\nendpoints:\n  GET - https://efbildhw0h.execute-api.us-east-1.amazonaws.com/john/query\nfunctions:\n  listener: cncb-bff-rest-analytics-john-listener\n  trigger: cncb-bff-rest-analytics-john-trigger\n  query: cncb-bff-rest-analytics-john-query\n\nStack Outputs\n...\nServiceEndpoint: https://efbildhw0h.execute-api.us-east-1.amazonaws.com/john\n...\n```", "```js\n$ cd <path-to-your-workspace>/cncb-event-stream\n$ sls invoke -r us-east-1 -f publish -s $MY_STAGE -d '{\"type\":\"purple\",\"partitionKey\":\"33333333-3333-1111-1111-111111111111\"}'\n\n$ sls invoke -r us-east-1 -f publish -s $MY_STAGE -d '{\"type\":\"orange\",\"partitionKey\":\"33333333-3333-1111-1111-111111111111\"}'\n\n$ sls invoke -r us-east-1 -f publish -s $MY_STAGE -d '{\"type\":\"green\",\"partitionKey\":\"33333333-3333-1111-2222-111111111111\"}'\n\n$ sls invoke -r us-east-1 -f publish -s $MY_STAGE -d '{\"type\":\"green\",\"partitionKey\":\"33333333-3333-1111-2222-111111111111\"}'\n```", "```js\n$ curl https://<API-ID>.execute-api.us-east-1.amazonaws.com/$MY_STAGE/query | json_pp\n\n[\n   {\n      \"userId\" : \"33333333-3333-1111-1111-111111111111\",\n      \"yearmonth\" : \"2018-05\",\n      \"purple\" : 1,\n      \"orange\" : 1,\n      \"total\" : 2\n   },\n   {\n      \"userId\" : \"33333333-3333-1111-2222-111111111111\",\n      \"yearmonth\" : \"2018-05\",\n      \"green\" : 2,\n      \"total\" : 2\n   }\n]\n```", "```js\n$ sls logs -f trigger -r us-east-1 -s $MY_STAGE\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch3/esg-inbound --path cncb-esg-inbound\n```", "```js\nservice: cncb-esg-inbound\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    ...\n\nfunctions:\n  webhook:\n    handler: handler.webhook\n    events:\n      - http:\n          path: webhook\n          method: post\n    environment:\n      STREAM_NAME: ${cf:cncb-event-stream-${opt:stage}.streamName}\n```", "```js\nmodule.exports.webhook = (request, context, callback) => {\n  const body = JSON.parse(request.body);\n\n  const event = {\n    type: `issue-${body.action}`,\n    id: request.headers['X-GitHub-Delivery'],\n    partitionKey: String(body.issue.id),\n    timestamp: Date.parse(body.issue['updated_at']),\n    tags: {\n      region: process.env.AWS_REGION,\n      repository: body.repository.name,\n    },\n    issue: body, // canonical\n    raw: request\n  };\n\n  ...\n\n  kinesis.putRecord(params, (err, resp) => {\n    const response = {\n      statusCode: err ? 500 : 200,\n    };\n\n    callback(null, response);\n  });  \n};\n```", "```js\n$ npm run dp:lcl -- -s $MY_STAGE\n\n> cncb-esg-inbound@1.0.0 dp:lcl <path-to-your-workspace>/js-cloud-native-cookbook/workspace/cncb-esg-inbound\n> sls deploy -v -r us-east-1 \"-s\" \"john\"\n\nServerless: Packaging service...\n...\nServerless: Stack update finished...\n...\nendpoints:\n  POST - https://kc880846ve.execute-api.us-east-1.amazonaws.com/john/webhook\nfunctions:\n  webhook: cncb-esg-inbound-john-webhook\n\nStack Outputs\n...\nServiceEndpoint: https://kc880846ve.execute-api.us-east-1.amazonaws.com/john\n...\n```", "```js\n$ sls logs -f webhook -r us-east-1 -s $MY_STAGE\n```", "```js\ncurl https://api.github.com/authorizations \\\n--user \"your-github-id\" \\\n--data '{\"scopes\":[\"repo\"],\"note\":\"recipe\"}'\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch3/esg-outbound --path cncb-esg-outbound\n```", "```js\nservice: cncb-esg-outbound\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  environment:\n    REPO: enter-your-github-project\n    OWNER: enter-your-github-id\n    TOKEN: enter-your-github-token\n\nfunctions:\n  listener:\n    handler: handler.listener\n    events:\n      - stream:\n          type: kinesis\n          arn: ${cf:cncb-event-stream-${opt:stage}.streamArn}\n          ...\n```", "```js\nmodule.exports.listener = (event, context, cb) => {\n  _(event.Records)\n    .map(recordToEvent)\n    .filter(byType)\n    .flatMap(post)\n    .collect()\n    .toCallback(cb);\n};\n\n...\nconst byType = event => event.type === 'issue-created';\n\nconst post = event => {\n  // transform internal to external\n  const body = {\n    title: event.issue.new.title,\n    body: event.issue.new.description,\n  };\n\n  return _(\n    fetch(`https://api.github.com/repos/${process.env.OWNER}/${process.env.REPO}/issues`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${process.env.TOKEN}`\n      },\n      body: JSON.stringify(body)\n    })\n  );\n};\n```", "```js\n$ npm run dp:lcl -- -s $MY_STAGE\n\n> cncb-esg-outbound@1.0.0 dp:lcl <path-to-your-workspace>/cncb-esg-outbound\n> sls deploy -v -r us-east-1 \"-s\" \"john\"\n\nServerless: Packaging service...\n...\nServerless: Stack update finished...\n...\nfunctions:\n  listener: cncb-esg-outbound-john-listener\n...\n```", "```js\n$ cd <path-to-your-workspace>/cncb-event-stream\n$ sls invoke -f publish -r us-east-1 -s $MY_STAGE -d '{\"type\":\"issue-created\",\"issue\":{\"new\":{\"title\":\"issue one\",\"description\":\"this is issue one.\",\"id\":\"33333333-55555-1111-1111-111111111111\"}}}'\n\n{\n    \"ShardId\": \"shardId-000000000000\",\n    \"SequenceNumber\": \"49583655996852917476267887119095157508589012871374962690\"\n}\n```", "```js\n$ sls logs -f listener -r us-east-1 -s $MY_STAGE\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch3/event-orchestration --path cncb-event-orchestration\n```", "```js\nservice: cncb-event-orchestration\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    ...\n\nfunctions:\n  listener:\n    handler: handler.listener\n    events:\n      - stream:\n          type: kinesis\n          arn: ${cf:cncb-event-stream-${opt:stage}.streamArn}\n          ...\n    environment:\n      STREAM_NAME: ${cf:cncb-event-stream-${opt:stage}.streamName}\n```", "```js\nconst transitions = [\n  {\n    filter: 'order-submitted',\n    emit: (uow) => ({\n      id: uuid.v1(),\n      type: 'make-reservation',\n      timestamp: Date.now(),\n      partitionKey: uow.event.partitionKey,\n      reservation: {\n        sku: uow.event.order.sku,\n        quantity: uow.event.order.quantity,\n      },\n      context: {\n        order: uow.event.order,\n        trigger: uow.event.id\n      }\n    })\n  },\n  {\n    filter: 'reservation-confirmed',\n    emit: (uow) => ({\n      id: uuid.v1(),\n      type: 'update-order-status',\n      timestamp: Date.now(),\n      partitionKey: uow.event.partitionKey,\n      order: {\n        status: 'reserved',\n      },\n      context: {\n        reservation: uow.event.reservation,\n        order: uow.event.context.order,\n        trigger: uow.event.id\n      }\n    })\n  },\n];\n\nmodule.exports.listener = (event, context, cb) => {\n  _(event.Records)\n    .map(recordToUow)\n    .filter(onTransitions)\n    .flatMap(toEvents)\n    .flatMap(publish)\n    .collect()\n    .toCallback(cb);\n};\n\nconst recordToUow = r => ({\n  record: r,\n  event: JSON.parse(Buffer.from(r.kinesis.data, 'base64')),\n});\n\nconst onTransitions = uow => {\n  // find matching transitions\n  uow.transitions = transitions.filter(trans => trans.filter === uow.event.type);\n\n  // proceed forward if there are any matches\n  return uow.transitions.length > 0;\n};\n\nconst toEvents = uow => {\n  // create the event to emit for each matching transition\n  return _(uow.transitions.map(t => t.emit(uow)));\n};\n\nconst publish = event => {\n  . . .\n}\n```", "```js\n$ npm run dp:lcl -- -s $MY_STAGE\n\n> cncb-event-orchestration@1.0.0 dp:lcl <path-to-your-workspace>/cncb-event-orchestration\n> sls deploy -v -r us-east-1 \"-s\" \"john\"\n\nServerless: Packaging service...\n...\nServerless: Stack update finished...\n...\nfunctions:\n  listener: cncb-event-orchestration-john-listener\n...\n```", "```js\n$ cd <path-to-your-workspace>/cncb-event-stream\n$ sls invoke -f publish -r us-east-1 -s $MY_STAGE -p ../cncb-event-orchestration/data/order.json\n\n{\n    \"ShardId\": \"shardId-000000000000\",\n    \"SequenceNumber\": \"49583655996852917476267896339723499436825420846818394114\"\n}\n\n$ sls invoke -f publish -r us-east-1 -s $MY_STAGE -p ../cncb-event-orchestration/data/reservation.json\n\n{\n    \"ShardId\": \"shardId-000000000000\",\n    \"SequenceNumber\": \"49583655996852917476267896340117609254019790713686851586\"\n}\n```", "```js\n$ sls logs -f listener -r us-east-1 -s $MY_STAGE\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch3/saga --path cncb-saga\n```", "```js\nservice: cncb-saga\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  iamRoleStatements:\n    ...\n  environment:\n    TABLE_NAME:\n      Ref: Table\n\nfunctions:\n  submit:\n    handler: handler.submit\n  trigger:\n    handler: handler.trigger\n    events:\n      - stream:\n          type: dynamodb\n          arn:\n            Fn::GetAtt: [ Table, StreamArn ]\n          ...\n    environment:\n      STREAM_NAME: ${cf:cncb-event-stream-${opt:stage}.streamName}\n  listener:\n    handler: handler.listener\n    events:\n      - stream:\n          type: kinesis\n          arn: ${cf:cncb-event-stream-${opt:stage}.streamArn}\n          ...\n  query:\n    handler: handler.query\n\nresources:\n  Resources:\n    Table:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${opt:stage}-${self:service}-orders\n        ...\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n```", "```js\n...\n\nmodule.exports.listener = (event, context, cb) => {\n  _(event.Records)\n    .map(recordToEvent)\n    .filter(forReservationViolation)\n    .flatMap(compensate)\n    .collect()\n    .toCallback(cb);\n};\n\nconst forReservationViolation = e => e.type === 'reservation-violation';\n\nconst compensate = event => {\n  const params = {\n    TableName: process.env.TABLE_NAME,\n    Key: {\n      id: event.context.order.id\n    },\n    AttributeUpdates: {\n      status: { Action: 'PUT', Value: 'cancelled' }\n    },\n  };\n\n  const db = new aws.DynamoDB.DocumentClient();\n  return _(db.update(params).promise());\n};\n\n...\n```", "```js\n$ npm run dp:lcl -- -s $MY_STAGE\n\n> cncb-saga@1.0.0 dp:lcl <path-to-your-workspace>/cncb-saga\n> sls deploy -v -r us-east-1 \"-s\" \"john\"\n\nServerless: Packaging service...\n...\nServerless: Stack update finished...\n...\nfunctions:\n  submit: cncb-saga-john-submit\n  trigger: cncb-saga-john-trigger\n  listener: cncb-saga-john-listener\n  query: cncb-saga-john-query\n...\n```", "```js\n$ sls invoke -f submit -r us-east-1 -s $MY_STAGE -p data/order.json\n\n$ sls invoke -f query -r us-east-1 -s $MY_STAGE -d 33333333-7777-1111-1111-111111111111\n{\n    \"Item\": {\n        \"quantity\": 1,\n        \"id\": \"33333333-7777-1111-1111-111111111111\",\n        \"sku\": \"1\",\n        \"status\": \"submitted\"\n    }\n}\n```", "```js\n$ cd <path-to-your-workspace>/cncb-event-stream\n$ sls invoke -f publish -r us-east-1 -s $MY_STAGE -p ../cncb-saga/data/reservation.json\n\n{\n    \"ShardId\": \"shardId-000000000000\",\n    \"SequenceNumber\": \"49584174522005480245492626573048465901488330636951289858\"\n}\n```", "```js\n$ sls invoke -r us-east-1 -f query -s $MY_STAGE -d 33333333-7777-1111-1111-111111111111\n\n{\n    \"Item\": {\n        \"quantity\": 1,\n        \"id\": \"33333333-7777-1111-1111-111111111111\",\n        \"sku\": \"1\",\n        \"status\": \"cancelled\"\n    }\n}\n```", "```js\n$ sls logs -f trigger -r us-east-1 -s $MY_STAGE\n```", "```js\n$ sls logs -f listener -r us-east-1 -s $MY_STAGE\n```"]