["```js\nnpm init\n```", "```js\nnpm init --yes  \n```", "```js\nnpm install tslint --save-dev \n```", "```js\nnpm install webpack-dev-server -g   \n```", "```js\nnpm install react --save  \n```", "```js\n{ \n  \"name\": \"repository-name\", \n  \"version\": \"1.0.0\", \n  \"description\": \"example\", \n  \"main\": \"index.html\", \n  \"scripts\": { \n    \"test\": \"echo \"Error: no test specified\" && exit 1\" \n  }, \n  \"repository\": { \n    \"type\": \"git\", \n    \"url\": \"https://github.com/username/repository-name.git\" \n  }, \n  \"keywords\": [ \n    \"typescript\", \n    \"demo\", \n    \"example\" \n  ], \n  \"author\": \"Name Surname\", \n  \"contributors\": [], \n  \"license\": \"MIT\", \n  \"bugs\": { \n    \"url\": \"https://github.com/username/repository-name/issues\" \n  }, \n  \"homepage\": \"https://github.com/username/repository-name\", \n  \"engines\": {}, \n  \"dependencies\": { \n    \"react\": \"16.2.0\" \n  }, \n  \"devDependencies\": { \n    \"tslint\": \"5.9.1\" \n  } \n} \n```", "```js\nnpm install  \n```", "```js\nnpm install inversify --save \n```", "```js\nnpm install react --save \nnpm install @types/react --save-dev \n```", "```js\nnpm install react-side-effect --save \n```", "```js\n/node_modules/react-side-effect/package.json \n```", "```js\n\"main\": \"lib/index.js\" \n```", "```js\nmodule.exports = function withSideEffect // ... \n```", "```js\ndeclare module \"react-side-effect\" { \n    declare const withSideEffect: any; \n    export = withSideEffect; \n} \n```", "```js\nimport * as withSideEffect from \"react-side-effect\"; \n```", "```js\nModule '\"react-side-effect\"' resolves to a non-module entity and cannot be imported using this construct. \n```", "```js\ndeclare module \"react-side-effect\" { \n    declare const withSideEffect: any; \n    namespace withSideEffect {}; \n    export = withSideEffect; \n} \n```", "```js\ndeclare module \"react-side-effect\" { \n\n    import React = __React; \n\n    function withSideEffect( \n        reducePropsToState: (propsList: any[]) => any, \n        handleStateChangeOnClient: (state: any) => any, \n        mapStateOnServer?: (state: any) => any \n    ): ClassDecorator; \n\n    class ElementClass extends React.Component<any, any> {} \n\n    interface ClassDecorator { \n        <T extends (typeof ElementClass)>(component:T): T; \n    } \n\n    namespace withSideEffect {}; \n\n    export = withSideEffect; \n} \n```", "```js\nconst p = Promise.resolve(1); // Error \n```", "```js\n\"lib\": [\"es5\", \"dom\", \"es2015.promise\"] \n```", "```js\nnpm install tslib --save \n```", "```js\nnamespace Models { \n  export class UserModel { \n    // ... \n  } \n} \n```", "```js\nnamespace App { \n    export namespace Models { \n        export class UserModel { \n            // ... \n        } \n        export class TalkModel { \n            // ... \n        } \n    } \n} \n```", "```js\nconst user = new App.Models.UserModel(); \nconst talk = new App.Models.TalkModel(); \n```", "```js\nnamespace App { \n    export namespace Validation { \n        export class UserValidator { \n            // ... \n        } \n\n        export class TalkValidator { \n            // ... \n        } \n    } \n} \n```", "```js\nconst userModel = new App.Models.UserModel(); \nconst talkModel = new App.Models.TalkModel(); \nconst userValidator = new App.Validation.UserValidator(); \nconst talkValidator = new App.Validation.TalkValidator(); \n```", "```js\nnamespace App.Validation { \n  // ... \n} \nnamespace App.Models { \n  // ... \n} \n```", "```js\nimport TalkValidator = app.validation.TalkValidator; \nconst talkValidator2 = new TalkValidator(); \n```", "```js\ntsc --out output.js input.ts \n```", "```js\n    tsc --module commonjs main.ts // use CommonJS \n    tsc --module amd main.ts      // use AMD \n    tsc --module umd main.ts      // use UMD\n    tsc --module system main.ts   // use SytemJS\n\n```", "```js\nclass UserModel { \n  // ... \n} \nexport { UserModel }; \n```", "```js\nexport class TalkModel { \n  // ... \n} \n```", "```js\nclass UserModel { \n  // ... \n} \nexport { UserModel as User }; // UserModel exported as User \n```", "```js\ninterface UserModel { \n  // ... \n} \n\nclass UserModel { \n  // ... \n} \nexport { UserModel }; // Exports both interface and function \n```", "```js\nimport { UserModel } from \"./models\"; \n```", "```js\nclass UserValidator { \n  // ... \n} \n\nclass TalkValidator { \n  // ... \n} \n\nexport { UserValidator, TalkValidator }; \n```", "```js\nimport { UserValidator, TalkValidator } from \"./validation.ts\" \n```", "```js\nexport default UserValidator; \n```", "```js\nimport UserValidator from \"./validation.ts\" \n```", "```js\nexport class User { \n // ... \n} \n```", "```js\nclass User { \n // ... \n} \nexport = User;  \n```", "```js\nimport User = require(\"./user_class\"); \n```", "```js\ndefine([\"require\", \"exports\"], function (require, exports) { \n    var UserModel = (function () { \n        function UserModel() { \n        } \n        return UserModel; \n    })(); \n    return UserModel; \n}); \n```", "```js\nnpm install --save @types/requirejs \n```", "```js\nrequire([\"./models\"], function(models) { \n    const user = new models.UserModel(); \n});\n```", "```js\nvar UserModel = (function () { \n    function UserModel() { \n      //... \n    } \n    return UserModel; \n})(); \nmodule.exports = UserModel; \n```", "```js\nimport UserModel = require('./UserModel'); \nconst user = new UserModel(); \n```", "```js\n(function (root, factory) { \n  if (typeof exports === 'object') { \n    // CommonJS \n    module.exports = factory(require('b')); \n  } else if (typeof define === 'function' && define.amd) { \n    // AMD \n    define(['b'], function (b) { \n      return (root.returnExportsGlobal = factory(b)); \n    }); \n  } else { \n    // Global Variables \n    root.returnExportsGlobal = factory(root.b); \n  } \n}(this, function (b) { \n  // Your actual module \n  return {}; \n})); \n```", "```js\nclass Katana { \n    public tryHit(fromDistance: number) { \n        return fromDistance <= 2; \n    } \n} \n\nclass Ninja { \n    public constructor( \n        private _katana: Katana \n    ) {} \n    public fight(fromDistance: number) { \n        return this._katana.tryHit(fromDistance); \n    } \n} \n```", "```js\nconst ninja = new Ninja(new Katana()); \nninja.fight(2); // true \nninja.fight(5); // false \n```", "```js\ninterface Weapon { \n    try Hit(fromDistance: number): boolean; \n} \n\nclass Katana implements Weapon { \n    public tryHit(fromDistance: number) { \n        return fromDistance <= 2; \n    } \n} \n\nclass Ninja { \n    public constructor( \n        private _weapon: Weapon \n    ) {} \n    public fight(fromDistance: number) { \n        return this._weapon.tryHit(fromDistance); \n    } \n} \n```", "```js\nconst ninja = new Ninja(new Katana()); \nninja.fight(2); // true \nninja.fight(5); // false \n```", "```js\nnpm install inversify reflect-metadata --save \n```", "```js\nimport { Container, inject, injectable } from \"inversify\"; \nimport \"reflect-metadata\"; \n```", "```js\ninterface Weapon { \n    tryHit(fromDistance: number): boolean; \n} \n\n@injectable() \nclass Katana implements Weapon { \n    public tryHit(fromDistance: number) { \n        return fromDistance <= 2; \n    } \n} \n\n@injectable() \nclass Ninja { \n    public constructor( \n        @inject(\"Weapon\") private _weapon: Weapon \n    ) {} \n    public fight(fromDistance: number) { \n        return this._weapon.tryHit(fromDistance); \n    } \n} \n```", "```js\nconst container = new Container(); \ncontainer.bind<Weapon>(\"Weapon\").to(Katana); \ncontainer.bind<Ninja>(\"Ninja\").to(Ninja);\n```", "```js\nconst ninja = container.get<Ninja>(\"Ninja\"); \nninja.fight(2); // true \nninja.fight(5); // false \n```", "```js\ncontainer.bind<Weapon>(\"Weapon\").to(Katana).inSingletonScope(); \n```", "```js\ncontainer.bind<Weapon>(\"Weapon\").to(Katana) \n         .whenInjectedInto(Samurai); \n\ncontainer.bind<Weapon>(\"Weapon\").to(Shuriken) \n         .whenInjectedInto(Ninja); \n```"]