["```js\nclass MySet {\n  #items = {};\n  #size = 0;\n} \n```", "```js\nhas(value) {\n  return this.#items.hasOwnProperty(value);\n}\n```", "```js\nadd(value) {\n  if (!this.has(value)) {\n    this.#items[value] = true; // mark the value as present\n    this.#size++;\n    return true;\n  }\n  return false;\n}\n```", "```js\ndelete(value) {\n  if (this.has(value)) {\n    delete this.#items[value];\n    this.#size--;\n    return true;\n  }\n  return false;\n}\n```", "```js\nclear() {\n  this.#items = {};\n  this.#size = 0;\n}\n```", "```js\n get size() {\n    return this.#size;\n  }\n```", "```js\ngetSizeWithoutSizeProperty() {\n  let count = 0;\n  for (const key in this.#items) {\n    if (this.#items.hasOwnProperty(key)) {\n      count++;\n    }\n  }\n  return count;\n}\n```", "```js\nisEmpty() {\n  return this.#size === 0;\n}\n```", "```js\nvalues() {\n  return Object.keys(this.#items);\n}\n```", "```js\nconst MySet = require('./set');\nconst article = {\n  title: 'The importance of data structures in programming',\n  content: '...',\n  tags: new MySet()  // using MySet to store tags\n};\n```", "```js\narticle.tags.add('programming');\narticle.tags.add('data structures');\narticle.tags.add('algorithms');\narticle.tags.add('programming');\n```", "```js\nconsole.log(article.tags.size);  // 3\n```", "```js\nconsole.log(article.tags.has('data structures'));  // true\nconsole.log(article.tags.has('algorithms'));  // true\nconsole.log(article.tags.has('programming'));  // true\nconsole.log(article.tags.has('javascript'));  // false\n```", "```js\nconsole.log(article.tags.values()); \n// output: ['programming', 'data structures', 'algorithms']\n```", "```js\narticle.tags.delete('programming');\narticle.tags.add('JavaScript');\nconsole.log(article.tags.values()); \n// output: ['data structures', 'algorithms', 'JavaScript']\n```", "```js\nunion(otherSet) {\n  const unionSet = new MySet();\n  this.values().forEach(value => unionSet.add(value));\n  otherSet.values().forEach(value => unionSet.add(value));\n  return unionSet;\n}\n```", "```js\nconst interestsFromWebsites = new MySet();\ninterestsFromWebsites.addAll(['technology', 'politics', 'photography']);\n```", "```js\nconst interestsFromSocialMedia = new MySet();\ninterestsFromSocialMedia.addAll(['technology', 'movies', 'books']);\n```", "```js\nconst allInterests = interestsFromWebsites.union(interestsFromSocialMedia);\nconsole.log(allInterests.values()); \n// output: ['technology', 'politics', 'photography', 'movies', 'books']\n```", "```js\naddAll(values) {\n  values.forEach(value => this.add(value));\n}\n```", "```js\nintersection(otherSet) {\n  const intersectionSet = new MySet();\n  this.values().forEach(value => {\n    if (otherSet.has(value)) {\n      intersectionSet.add(value);\n    }\n  });\n  return intersectionSet;\n}\n```", "```js\nconst job1Skills = new MySet();\njob1Skills.addAll(['JavaScript', 'Angular', 'Java', 'SQL']);\nconst job2Skills = new MySet();\njob2Skills.addAll(['Python', 'Machine Learning', 'SQL', 'Statistics']);\nconst jobPostings =\n [{\n      title: 'Software Engineer',\n      skills: job1Skills\n  },\n  {\n      title: 'Data Scientist',\n      skills: job2Skills\n  }];\n```", "```js\nconst candidateSkills = new MySet();\ncandidateSkills.addAll(['JavaScript', 'Angular', 'TypeScript', 'AWS']);\nconst candidate = {\n  name: 'Loiane',\n  skills: candidateSkills\n};\n```", "```js\nfunction matchCandidateWithJobs(candidate, jobPostings) {\n  const matches = [];\n  for (const job of jobPostings) {\n      const matchingSkillsSet = candidate.skills.intersection(job.skills);\n      if (!matchingSkillsSet.isEmpty()) {\n          matches.push({\n              title: job.title,\n              matchingSkills: matchingSkillsSet.values()\n          });\n      }\n  }\n  return matches;\n}\n```", "```js\nconst matchingJobs = matchCandidateWithJobs(candidate, jobPostings);\nconsole.log(matchingJobs);\n// output: [{ title: 'Software Engineer', matchingSkills: [ 'JavaScript', 'Angular' ] }]\n```", "```js\nintersection(otherSet) {\n  const intersectionSet = new MySet();\n  const [smallerSet, largerSet] = this.size <= otherSet.size ? [this, otherSet] : [otherSet, this];\n  smallerSet.values().forEach(value => {\n    if (largerSet.has(value)) {\n      intersectionSet.add(value);\n    }\n  });\n  return intersectionSet;\n}\n```", "```js\ndifference(otherSet) {\n  const differenceSet = new MySet();\n  this.values().forEach(value => {\n    if (!otherSet.has(value)) {\n      differenceSet.add(value);\n    }\n  });\n  return differenceSet;\n}\n```", "```js\nconst allSubscribers = new MySet();\nallSubscribers.addAll(['Aelin', 'Rowan', 'Xaden', 'Poppy', 'Violet']);\nconst booksInterested = new MySet();\nbooksInterested.addAll(['Aelin', 'Poppy', 'Violet']);\nconst alreadyPurchasedBooks = new MySet();\nalreadyPurchasedBooks.addAll(['Poppy']);\n```", "```js\nconst targetSubscribers = booksInterested.difference(alreadyPurchasedBooks);\n```", "```js\ntargetSubscribers.values().forEach(subscriber => {\n  sendEmail(subscriber, 'New books you will love!');\n});\nfunction sendEmail(subscriber, message) {\n  console.log(`Sending email to ${subscriber}: ${message}`);\n}\n```", "```js\nSending email to Aelin: New books you will love!\nSending email to Violet: New books you will love!\n```", "```js\nisSubsetOf(otherSet) {\n  if (this.size > otherSet.size) {\n    return false;\n  }\n  return this.values().every(value => otherSet.has(value));\n}\n```", "```js\nconst chickenIngredients = new MySet()\nchickenIngredients.addAll(['chicken', 'tomato', 'onion', 'garlic', 'ginger', 'spices']);\nconst spaghettiIngredients = new MySet();\nspaghettiIngredients.addAll(['spaghetti', 'eggs', 'bacon', 'parmesan', 'pepper']);\n```", "```js\nconst recipes =\n[{\n      name: 'Chicken Tikka Masala',\n      ingredients: chickenIngredients\n  },\n  {\n      name: 'Spaghetti Carbonara',\n      ingredients: spaghettiIngredients\n  }];\n```", "```js\nconst userIngredients = new MySet();\nuserIngredients.addAll(['chicken', 'onion', 'garlic', 'ginger']);\n```", "```js\nfunction filterRecipes(recipes, userIngredients) {\n  const filteredRecipes = [];\n  for (const recipe of recipes) {\n      if (userIngredients.isSubsetOf(recipe.ingredients)) {\n          filteredRecipes.push({ name: recipe.name });\n      }\n  }\n  return filteredRecipes;\n}\n```", "```js\nconst matchingRecipes = filterRecipes(recipes, userIngredients);\nconsole.log(matchingRecipes);\n```", "```js\n[ { name: 'Chicken Tikka Masala' } ]\n```", "```js\nconst article = {\n  title: 'The importance of data structures in programming',\n  content: '...',\n  tags: new Set() \n};\narticle.tags.add('programming');\narticle.tags.add('data structures');\narticle.tags.add('algorithms');\narticle.tags.add('programming');\n```", "```js\nconst article = {\n  title: 'The importance of data structures in programming',\n  content: '...',\n  tags: new Set(['programming', 'data structures', 'algorithms'])\n};\n```", "```js\nexport function removeDuplicates2(nums: number[]): number {\n  const set = new Set(nums);\n  const arr = Array.from(set);\n  for (let i = 0; i < arr.length; i++) {\n    nums[i] = arr[i];\n  }\n  return arr.length;\n}\n```"]