["```js\nExt.define('Packt.model.staticData.Base', {\n    extend: 'Packt.model.Base', //#1\n\n    fields: [\n        {\n            name: 'last_update',\n            type: 'date',\n            dateFormat: 'Y-m-j H:i:s'\n        }\n    ]\n});\n```", "```js\nExt.define('Packt.model.Base', {\n    extend: 'Ext.data.Model',\n\n    requires: [\n        'Packt.util.Util'\n    ],\n\n    schema: {\n        namespace: 'Packt.model', //#1\n        urlPrefix: 'php',\n        proxy: {\n            type: 'ajax',\n            api :{\n                read : '{prefix}/{entityName:lowercase}/list.php',\n                create: \n                    '{prefix}/{entityName:lowercase}/create.php',\n                update: \n                    '{prefix}/{entityName:lowercase}/update.php',\n                destroy: \n                    '{prefix}/{entityName:lowercase}/destroy.php'\n            },\n            reader: {\n                type: 'json',\n                rootProperty: 'data'\n            },\n            writer: {\n                type: 'json',\n                writeAllFields: true,\n                encode: true,\n                rootProperty: 'data',\n                allowSingle: false\n            },\n            listeners: {\n                exception: function(proxy, response, operation){\n              Packt.util.Util.showErrorMsg(response.responseText);\n                }\n            }\n        }\n    }\n});\n```", "```js\nExt.define('Packt.model.security.Base', {\n    extend: 'Packt.model.Base',\n\n    idProperty: 'id',\n\n    fields: [\n        { name: 'id', type: 'int' }\n    ]\n});\n```", "```js\nExt.define('Packt.model.staticData.Actor', {\n    extend: 'Packt.model.staticData.Base', //#1\n\n    entityName: 'Actor', //#2\n\n    idProperty: 'actor_id', //#3\n\n    fields: [\n        { name: 'actor_id' },\n        { name: 'first_name'},\n        { name: 'last_name'}\n    ]\n});\n```", "```js\nExt.define('Packt.store.staticData.Base', {\n    extend: 'Ext.data.Store',\n\n    autoLoad: true\n});\n```", "```js\nExt.define('Packt.store.staticData.Actors', {\n    extend: 'Packt.store.staticData.Base', //#1\n\n    model: 'Packt.model.staticData.Actor' //#2\n});\n```", "```js\nExt.define('Packt.view.staticData.BaseGrid', {\n    extend: 'Ext.ux.LiveSearchGridPanel', //#1\n    xtype: 'staticdatagrid',\n\n    requires: [\n        'Packt.util.Glyphs' //#2\n    ],\n\n    columnLines: true,    //#3\n    viewConfig: {\n        stripeRows: true //#4\n    },\n\n    //more code here\n});    \n```", "```js\ninitComponent: function() {\n    var me = this;\n\n    me.selModel = {\n        selType: 'cellmodel' //#5\n    };\n\n    me.plugins = [\n        {\n            ptype: 'cellediting',  //#6\n            clicksToEdit: 1,\n            pluginId: 'cellplugin'\n        },\n        {\n            ptype: 'gridfilters'  //#7\n        }\n    ];\n\n    //docked items\n\n    //columns\n\n    me.callParent(arguments); //#8\n}\n```", "```js\nme.dockedItems = [\n    {\n        xtype: 'toolbar',\n        dock: 'top',\n        itemId: 'topToolbar', //#9\n        items: [\n            {\n                xtype: 'button',\n                itemId: 'add', //#10\n                text: 'Add',\n                glyph: Packt.util.Glyphs.getGlyph('add')\n            },\n            {\n                xtype: 'tbseparator'\n            },\n            {\n                xtype: 'button',\n                itemId: 'save', \n                text: 'Save Changes',\n                glyph: Packt.util.Glyphs.getGlyph('saveAll')\n            },\n            {\n                xtype: 'button',\n                itemId: 'cancel',\n                text: 'Cancel Changes',\n                glyph: Packt.util.Glyphs.getGlyph('cancel')\n            },\n            {\n                xtype: 'tbseparator'\n            },\n            {\n                xtype: 'button',\n                itemId: 'clearFilter',\n                text: 'Clear Filters',\n                glyph: Packt.util.Glyphs.getGlyph('clearFilter')\n            }\n        ]\n    }\n];\n```", "```js\nsaveAll: 'xf0c7',\nclearFilter: 'xf0b0'\n```", "```js\nme.columns = Ext.Array.merge( //#11\n    me.columns,               //#12\n    [{\n        xtype    : 'datecolumn',\n        text     : 'Last Update',\n        width    : 150,\n        dataIndex: 'last_update',\n        format: 'Y-m-j H:i:s',\n        filter: true\n    },\n    {\n        xtype: 'widgetcolumn', //#13\n        width: 45,\n        sortable: false,       //#14\n        menuDisabled: true,    //#15\n        itemId: 'delete',\n        widget: {\n            xtype: 'button',   //#16\n            glyph: Packt.util.Glyphs.getGlyph('destroy'),\n            tooltip: 'Delete',\n            scope: me,                //#17\n            handler: function(btn) {  //#18\n                me.fireEvent('widgetclick', me, btn);\n            }\n        }\n    }]\n);\n```", "```js\nscope: me,                //#17\nhandler: function(btn) {  //#18\n    me.fireEvent('widgetclick', me, btn);\n}\n```", "```js\nExt.define('Packt.view.staticData.Actors', {\n    extend: 'Packt.view.staticData.BaseGrid',\n    xtype: 'actorsgrid',        //#1\n\n    store: 'staticData.Actors', //#2\n\n    columns: [\n        {\n            text: 'Actor Id',\n            width: 100,\n            dataIndex: 'actor_id',\n            filter: {\n                type: 'numeric'   //#3\n            }\n        },\n        {\n            text: 'First Name',\n            flex: 1,\n            dataIndex: 'first_name',\n            editor: {\n                allowBlank: false, //#4\n                maxLength: 45      //#5\n            },\n            filter: {\n                type: 'string'     //#6\n            }\n        },\n        {\n            text: 'Last Name',\n            width: 200,\n            dataIndex: 'last_name',\n            editor: {\n                allowBlank: false, //#7\n                maxLength: 45      //#8\n            },\n            filter: {\n                type: 'string'     //#9\n            }\n        }\n    ]\n});\n```", "```js\nUPDATE `sakila`.`menu` SET `className`='actorsgrid' WHERE `id`='5';\nUPDATE `sakila`.`menu` SET `className`='categoriesgrid' WHERE `id`='6';\nUPDATE `sakila`.`menu` SET `className`='languagesgrid' WHERE `id`='7';\nUPDATE `sakila`.`menu` SET `className`='citiesgrid' WHERE `id`='8';\nUPDATE `sakila`.`menu` SET `className`='countriesgrid' WHERE `id`='9';\n```", "```js\n@import \"ux/statusbar\";\n@import \"ux/LiveSearchGridPanel\";\n```", "```js\nExt.define('Packt.controller.StaticData', {\n    extend: 'Ext.app.Controller',\n\n    requires: [\n        'Packt.util.Util', //#1\n        'Packt.util.Glyphs'\n    ],\n\n    stores: [  //#2\n        'staticData.Actors',\n        'staticData.Categories',\n        'staticData.Cities',\n        'staticData.Countries',\n        'staticData.Languages'\n    ],\n\n    views: [ //#3\n        'staticData.BaseGrid',\n        'staticData.Actors',\n        'staticData.Categories',\n        'staticData.Cities',\n        'staticData.Countries',\n        'staticData.Languages'\n    ],\n\n    init: function(application) {\n        var me = this;\n        me.control({\n            //event listeners here\n        });   \n    }\n});\n```", "```js\nExt.ComponentQuery.query('button');\n```", "```js\nExt.ComponentQuery.query('actorsgrid toolbar button');\n```", "```js\nExt.ComponentQuery.query('actorsgrid toolbar button#add');\n```", "```js\n'staticdatagrid button#add': {\n    click: me.onButtonClickAdd\n}\n```", "```js\nonButtonClickAdd: function (button, e, options) {\n    var grid = button.up('staticdatagrid'), //#1\n        store = grid.getStore(),            //#2\n        modelName = store.getModel().getName(), //#3\n        cellEditing = grid.getPlugin('cellplugin');  //#4\n\n    store.insert(0, Ext.create(modelName, { //#5\n        last_update: new Date()             //#6\n    }));\n\n    cellEditing.startEditByPosition({row: 0, column: 1}); //#7\n}\n```", "```js\n{\n    ptype: 'cellediting',\n    clicksToEdit: 1,\n pluginId: 'cellplugin'\n}\n```", "```js\n\"staticdatagrid\": {\nedit: me.onEdit\n}\n```", "```js\nonEdit: function(editor, context, options) {\n    context.record.set('last_update', new Date());\n}\n```", "```js\n\"staticdatagrid actioncolumn\": {\n    itemclick: this.handleActionColumn\n}\n```", "```js\nhandleActionColumn: function(column, action, view, rowIndex, colIndex, item, e) {\n        var store = view.up('staticdatagrid').getStore(),\n        rec = store.getAt(rowIndex);\n\n        if (action == 'delete'){\n            store.remove(rec);\n            Ext.Msg.alert('Delete', 'Save the changes to persist the removed record.');\n        }   \n    }\n```", "```js\n'staticdatagrid button#save': {\n    click: me.onButtonClickSave\n}\n```", "```js\nonButtonClickSave: function (button, e, options) {\n    var grid = button.up('staticdatagrid'), //#1\n        store = grid.getStore(),            //#2\n        errors = grid.validate();           //#3\n\n    if (errors === undefined){  //#4\n        store.sync();           //#5\n    } else {\n        Ext.Msg.alert(errors);  //#6\n    }\n}\n```", "```js\nme.validateRow = function(record, rowIndex){\n\n    var me = this,\n        view = me.getView(),\n        errors = record.validate(); //#1\n\n    if (errors.isValid()) {         //#2\n        return true;\n    }\n\n    var columnIndexes = me.getColumnIndexes(); //#3\n\n    Ext.each(columnIndexes, function (columnIndex, col) { //#4\n        var cellErrors, cell, messages;\n\n        cellErrors = errors.getByField(columnIndex);      //#5\n        if (!Ext.isEmpty(cellErrors)) {\n            cell = view.getCellByPosition({\n            row: rowIndex, column: col\n   });\n            messages = [];\n            Ext.each(cellErrors, function (cellError) { //#6\n                messages.push(cellError.message);\n            });\n\n            cell.addCls('x-form-error-msg x-form-invalid-icon x-form-invalid-icon-default'); //#7\n\n            cell.set({ //#8\n                'data-errorqtip': Ext.String.format('<ul><li class=\"last\">{0}</li></ul>',\n                    messages.join('<br/>'))\n            });\n        }\n    });\n\n    return false;\n};\n```", "```js\nme.getColumnIndexes = function() {\n    var me = this,\n        columnIndexes = [];\n\n    Ext.Array.each(me.columns, function (column) { //#9\n        if (Ext.isDefined(column.getEditor())) {   //#10\n            columnIndexes.push(column.dataIndex);  //#11\n        } else {\n            columnIndexes.push(undefined);\n        }\n    });\n\n    return columnIndexes; //#12\n};\n```", "```js\nme.validate = function(){\n\n    var me = this,\n        isValid = true,\n        view = me.getView(),\n        error,\n        record;\n\n    Ext.each(view.getNodes(), function (row, col) { //#13\n        record = view.getRecord(row);\n\n        isValid = (me.validateRow(record, col) && isValid); //#14\n    });\n\n    error = isValid ? undefined : { //#15\n        title: \"Invalid Records\",\n        message: \"Please fix errors before saving.\"\n    };\n\n    return error; //#16\n};\n```", "```js\nvalidators: {\n        first_name: [\n            { type: 'presence', message: 'This field is mandatory'},\n            { type: 'length', min: 2, max: 45}\n        ],\n        last_name: [\n            { type: 'presence', message: 'This field is mandatory'},\n            { type: 'length', min: 2, max: 45}\n        ]\n    }\n```", "```js\nvalidators: {\n    last_update: 'presence'\n}\n```", "```js\nstaticdatagrid button#cancel\"' {\n    click: this.onButtonClickCancel\n}\n```", "```js\nonButtonClickCancel: function (button, e, options) {\nbutton.up('staticdatagrid').getStore().reload();\n}\n```", "```js\n'staticdatagrid button#clearFilter {\n    click: this.onButtonClickClearFilter\n}\n```", "```js\nonButtonClickClearFilter: function (button, e, options) {\nbutton.up('staticdatagrid').filters.clearFilters();\n}\n```", "```js\nme.listen({\n    store: {\n        '#staticData.Actors': {\n            write: this.onStoreSync\n        }\n    }\n});\n```", "```js\n'#staticData.Categories': {\n    write: this.onStoreSync\n}\n```", "```js\nonStoreSync: function(store, operation, options){\nPackt.util.Util.showToast('Success! Your changes have been saved.');\n}\n```"]