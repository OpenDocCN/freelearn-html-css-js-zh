["```js\n#version 300 es\nprecision mediump float;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat4 uNormalMatrix;\n\nin vec3 aVertexPosition;\nin vec3 aVertexNormal;\n\nout vec3 vVertexNormal;\nout vec3 vEyeVector;\n\nvoid main(void) {\n  // Transformed vertex position\n  vec4 vertex = uModelViewMatrix * vec4(aVertexPosition, 1.0);\n\n  // Transformed normal position\n  vVertexNormal = vec3(uNormalMatrix * vec4(aVertexNormal, 0.0));\n\n  // Eye vector\n  vEyeVector = -vec3(vertex.xyz);\n\n  // Final vertex position\n  gl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aVertexPosition, 1.0);\n}\n```", "```js\nvVertexNormal = vec3(uNormalMatrix * vec4(aVertexNormal, 0.0));\n\n```", "```js\ngl.viewport(minX, minY, width, height);\n```", "```js\nconst reference = getUniformLocation(program, uniformName);\n```", "```js\n// Matrix is the JavaScript matrix variable\ngl.uniformMatrix4fv(reference, transpose, matrix);\n```", "```js\n#version 300 es\nprecision mediump float;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat4 uNormalMatrix;\n\nin vec3 aVertexPosition;\nin vec3 aVertexNormal;\n\nout vec3 vVertexNormal;\nout vec3 vEyeVector;\n\nvoid main(void) {\n  // Transformed vertex position\n  vec4 vertex = uModelViewMatrix * vec4(aVertexPosition, 1.0);\n\n  // Transformed normal position\n  vVertexNormal = vec3(uNormalMatrix * vec4(aVertexNormal, 0.0));\n\n  // Eye vector\n  vEyeVector = -vec3(vertex.xyz);\n\n  // Final vertex position\n  gl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aVertexPosition, 1.0);\n}\n```", "```js\ngl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aVertexPosition, 1.0);\n\n```", "```js\nmat4.translate(modelViewMatrix, modelViewMatrix, [0, 0, 4]);\n```", "```js\nmat4.translate(modelViewMatrix, modelViewMatrix, [0, 0, -4]);\n```", "```js\nmat4.rotate(modelViewMatrix, modelViewMatrix, 45 * Math.PI/180, [0, 1, 0]);\n```", "```js\nconst cameraMatrix = mat4.create();\nmat4.invert(cameraMatrix, modelViewMatrix);\n```", "```js\nmat4.identity(modelViewMatrix);\nmat4.translate(modelViewMatrix, modelViewMatrix, position);\nmat4.rotateX(modelViewMatrix, modelViewMatrix, rotation[0] * Math.PI / 180);\nmat4.rotateY(modelViewMatrix, modelViewMatrix, rotation[1] * Math.PI / 180);\nmat4.rotateZ(modelViewMatrix, modelViewMatrix, rotation[2] * Math.PI / 180);\n```", "```js\nmat4.identity(cameraMatrix);\nmat4.rotateX(cameraMatrix, cameraMatrix, rotation[0] * Math.PI / 180);\nmat4.rotateY(cameraMatrix, cameraMatrix, rotation[1] * Math.PI / 180);\nmat4.rotateZ(cameraMatrix, cameraMatrix, rotation[2] * Math.PI / 180);\nmat4.translate(cameraMatrix, cameraMatrix, position); \n```", "```js\nfunction load() {\n  scene.add(new Floor(2000, 100));\n  scene.add(new Axis(2000));\n  scene.loadByParts('/common/models/nissan-gtr/part', 178);\n}\n```", "```js\nmat4.perspective(projectionMatrix, 45, canvas.width / canvas.height, 0.1, 1000);\n```", "```js\nmat4.perspective(projectionMatrix, 45, canvas.width / canvas.height, 0.1, 5000);\n```", "```js\ncamera = new Camera(Camera.TRACKING_TYPE);\n```", "```js\ncamera = new Camera(Camera.ORBITING_TYPE);\n```", "```js\ngl.uniform3fv(program.uLightPosition, [0, 120, 120]);\ngl.uniform4fv(program.uLightAmbient, [0.2, 0.2, 0.2, 1]);\ngl.uniform4fv(program.uLightDiffuse, [1, 1, 1, 1]);\n```", "```js\ngl.uniform4fv(program.uLightAmbient, [0.1, 0.1, 0.1, 1]);\ngl.uniform3fv(program.uLightPosition, [0, 0, 2120]);\ngl.uniform4fv(program.uLightDiffuse, [0.7, 0.7, 0.7, 1]);\n```", "```js\nvec3 L = normalize(-uLightPosition);\n```", "```js\nif (uFixedLight) {\n  L = vec3(uNormalMatrix * vec4(L, 0.0));\n}\n```", "```js\ngl.uniform3fv(program.uLightPosition, [0, 0, 2120]);\n\n```", "```js\nmat4.perspective(\n  dest,\n  fovy,\n  aspect,\n  near,\n  far\n);\n```", "```js\nmat4.ortho(\n  dest,\n  left,\n  right,\n  bottom,\n  top,\n  near,\n  far\n);\n```", "```js\nfunction updateTransforms() {\n  const { width, height } = canvas;\n\n  if (projectionMode === PERSPECTIVE_PROJECTION) {\n    mat4.perspective(\n      projectionMatrix, \n      fov, \n      width / height, \n      10, \n      5000\n    );\n  }\n  else {\n    mat4.ortho(projectionMatrix,\n      -width / fov,\n      width / fov,\n      -height / fov,\n      height / fov,\n      -5000,\n      5000\n    );\n  }\n}\n```", "```js\ngl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aVertexPosition,1.0);\n```", "```js\ngl.viewport(0, 0, canvas.width, canvas.height);\n```", "```js\nconst width = canvas.width,\n  height = canvas.height,\n  halfWidth = width / 2,\n  halfHeight = height / 2;\n\n// First\ngl.viewport(0, 0, halfWidth, halfHeight);\n\n// Second\ngl.viewport(halfWidth, halfHeight, width, height);\n\n// Third\ngl.viewport(50, 50, width - 100, height - 100);\n```", "```js\nfunction initTransforms() {\n  mat4.identity(modelViewMatrix);\n  mat4.translate(modelViewMatrix, modelViewMatrix, home);\n\n  mat4.identity(cameraMatrix);\n  mat4.invert(cameraMatrix, modelViewMatrix);\n\n  mat4.identity(projectionMatrix);\n\n  mat4.identity(normalMatrix);\n  mat4.copy(normalMatrix, modelViewMatrix);\n  mat4.invert(normalMatrix, normalMatrix);\n  mat4.transpose(normalMatrix, normalMatrix);\n}\n```", "```js\nfunction updateTransforms() {\n  mat4.perspective(projectionMatrix, 45,canvas.width /gl.canvas.height, \n   0.1, 1000);\n\n  if (coordinates === WORLD_COORDINATES) {\n    mat4.identity(modelViewMatrix);\n    mat4.translate(modelViewMatrix, modelViewMatrix, position);\n    mat4.rotateX(modelViewMatrix, modelViewMatrix, rotation[0] * Math.PI / \n     180);\n    mat4.rotateY(modelViewMatrix, modelViewMatrix, rotation[1] * Math.PI / \n     180);\n    mat4.rotateZ(modelViewMatrix, modelViewMatrix, rotation[2] * Math.PI / \n     180);\n  }\n  else {\n    mat4.identity(cameraMatrix);\n    mat4.translate(cameraMatrix, cameraMatrix, position);\n    mat4.rotateX(cameraMatrix, cameraMatrix, rotation[0] * Math.PI / 180);\n    mat4.rotateY(cameraMatrix, cameraMatrix, rotation[1] * Math.PI / 180);\n    mat4.rotateZ(cameraMatrix, cameraMatrix, rotation[2] * Math.PI / 180);\n  }\n}\n```", "```js\nfunction setMatrixUniforms() {\n  if (coordinates === WORLD_COORDINATES) {\n    mat4.invert(cameraMatrix, modelViewMatrix);\n    gl.uniformMatrix4fv(program.uModelViewMatrix, false, modelViewMatrix);\n  }\n  else {\n    mat4.invert(modelViewMatrix, cameraMatrix);\n  }\n\n  gl.uniformMatrix4fv(program.uProjectionMatrix, false, projectionMatrix);\n  gl.uniformMatrix4fv(program.uModelViewMatrix, false, modelViewMatrix);\n  mat4.transpose(normalMatrix, cameraMatrix);\n  gl.uniformMatrix4fv(program.uNormalMatrix, false, normalMatrix);\n}\n```"]