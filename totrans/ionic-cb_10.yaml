- en: Publishing the App for Different Platforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following tasks related to publishing and
    future-proofing an app:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding versioning to future-proof the app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and publishing an app for iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and publishing an app for Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the past, it was very cumbersome to build and successfully publish an app.
    However, there is much documentation and many unofficial instructions on the internet
    today that can pretty much address any problem that you may run into. In addition,
    Ionic also comes with its own CLI to assist in this process. This chapter will
    guide you through the app building and publishing steps at a high level. You will
    learn how to do the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Add versioning to future-proof the app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publish your app to App Store or Google Play
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The purpose of this chapter is to provide ideas on what to look for and some
    *gotchas*. Apple and Google constantly update their platforms and processes; so,
    the steps may not look exactly the same over time.
  prefs: []
  type: TYPE_NORMAL
- en: Adding versioning to future-proof the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's typical that you don't think about keeping track of the app version for
    a particular user. However, as the app grows in regard to the number of users
    and releases, you will soon face the problem of update issues and incompatibilities.
    For example, a user may run an old version of your app but all your backend APIs
    now expect new parameters from a newer app version. Therefore, you may want to
    think about a strategy to detect the app version locally in order to notify the
    users of an update requirement. This is also helpful if your backend processes
    differently for a specific app version.
  prefs: []
  type: TYPE_NORMAL
- en: 'The app which you are going to build is very simple. It will detect the current
    version and store the information in a service. This is a screenshot of the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9a27a430-803b-4de5-98e4-f6960e606348.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following app example must run on a physical device or a simulator.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Take a look at the following instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `MyAppVersion` app using the `blank` template, as follows, and
    navigate to the `MyAppVersion` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the `app-version` plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit `./config.xml` by changing the version number, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note that your `widget id` might be different from the one mentioned here. You
    only need to change the version number. In this case, it is the `0.0.123` version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `services` folder inside the `app` folder, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Create `myenv.ts` in the `services` folder with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This is your only service for this app. In a real-world project, you will need
    multiple services because some of them will have to communicate directly with
    your backend.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open and edit your `/src/app/app.module.ts`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The main modification in this file is to inject the `AppVersion` and `MyEnv`
    providers for the entire app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open and replace .`/src/pages/home/home.html` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Open and replace `./src/pages/home/home.ts` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Open and edit `home.scss` in the same folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to your Terminal and run the app. If you want to run the app on your physical
    device, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'For Android, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a nutshell, the `AppVersion` plugin does all the *heavy lifting*. It's not
    possible for an Ionic app to find out the current version of its code using JavaScript.
    You may think that using local storage or cookie is an alternative, but the users
    could also delete that storage manually. In order to have a permanent solution,
    the `AppVersion` plugin should be used because it can read your `config.xml` file
    and get the version for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s the best practice to create a separate service for all environment variables.
    That''s why, you should have a service, called `MyEnv`. Also, you should inject
    `MyEnv` as a provider at the *app level* because you want to instantiate it only
    once, instead of doing it every time a new component is created. Take a look at
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Since all the `AppVersion` methods are based on `promise`, you should return
    the entire object as a promise. Let''s take a look at the `getAppVersion()` method
    in your `myenv.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in your page files, such as `home.ts`, you should call the `getAppVersion`
    method, as shown, and use the .`then()` method to get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If you open the console to inspect the `promise` object, you will see that
    it has your app version value and the `.then()` method. Take a look at the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b6e65b4d-c7f9-4c15-8995-a45b6d3a056e.png)'
  prefs: []
  type: TYPE_IMG
- en: For more information about the `AppVersion` plugin, you may want to refer to
    the official AppVersion documentation at [https://github.com/whiteoctober/cordova-plugin-app-version.](https://github.com/whiteoctober/cordova-plugin-app-version)
  prefs: []
  type: TYPE_NORMAL
- en: Building and publishing an app for iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Publishing on App Store could be a frustrating process if you are not well-prepared
    upfront. In this section, we will walk through the steps to properly configure
    everything in Apple Developer Center, iTunes Connect, and your local Xcode project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You must register for Apple Developer Program in order to access [https://developer.apple.com/macos/touch-bar/](https://developer.apple.com/macos/touch-bar/)
    and [https://itunesconnect.apple.com](https://itunesconnect.apple.com) because
    those websites will require an approved account.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, you should have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: macOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xcode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the instructions to configure everything properly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that you are in the app folder, then build the iOS platform:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to the `/platforms/ios` folder and open the `.xcodeproj` file in Xcode.
    Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5e421a05-b0c0-4eb6-ba0a-d877e48d3830.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Navigate to the General tab, as illustrated in the following screenshot, to
    make sure that you have the correct information for everything, especially Bundle
    Identifier and Version. Change and save as needed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/312ff4f8-f385-44bd-b9b7-d58ac1d4110f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Visit the Apple developer website and click on Certificates, Identifiers &
    Profiles, as illustrated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ab434d84-b1d6-487a-be20-adafa0965022.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the correct device platform that you are targeting; in this case, it
    will be iOS, tvOS, watchOS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/52fa51d6-eda0-429b-95fd-fdef62392729.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For the iOS app, you need the certificate, app ID, test device, and provisioning
    profile. To start with the certificate, navigate to Certificates | All, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1ce00b32-36d1-4c7c-b32c-cbedc0052f68.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the plus (+) button, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dc768013-5510-406b-99e8-f1d4fd4c09ba.png)'
  prefs: []
  type: TYPE_IMG
- en: You have to go through the steps on the website to fill out the necessary information,
    as depicted in the following screenshot:![](img/0d0c97c9-8ff6-421f-abfe-93506a16736c.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you've completed the form, you can save the CSR file and import it into
    your Mac's Keychain Access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to Identifiers | App IDs, as follows, to create an app ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/725c9b74-ad08-470c-8bc0-cf0a321194d7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the plus button at the top-right corner of the screen, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b2a1edbb-e554-4415-955d-8cd74a71466a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fill in the form to register your App ID, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6ec10f64-e711-4e9a-9f5d-b848a0468e4c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The important part here that you need to do correctly is the Bundle ID, as
    shown in the following screenshot because it must match your Bundle Identifier
    in Xcode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e36c66cf-f24c-4aa3-8379-344569ba984a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If your app needs Push Notifications or other App Services, you will need to
    check those services on the following page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c6883702-df72-4239-92c6-755adfa5ccc9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you need to push the app to a specific device, you must register the device.
    Navigate to Devices | All, as illustrated in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b7e85f93-b64d-434b-bc5c-8f1aab15b531.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the plus button, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6eabcc5d-a551-456b-b558-02700d644291.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Provide the device''s UDID, as follows, and save it in order to register the
    device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/20995374-62af-47cc-a599-5173c92cffdc.png)'
  prefs: []
  type: TYPE_IMG
- en: Finally, you will need a provisioning profile if one doesn't exist yet. Usually,
    Xcode will create one automatically. However, you could create your own by navigating
    to Provisioning Profiles | All, as shown:![](img/15f34ad3-3da0-47e3-a1a1-923951c3ee54.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the plus button, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9450bb6f-4c59-44ae-897a-5f34c917fb01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select App Store as your provisioning profile, as illustrated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/de0cbe52-dd3f-4e8b-8e1d-4f7290d15ba0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the correct App ID from the drop-down menu and save it to finalize your
    provisioning profile creation, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a6d783cf-a56b-4e84-ab0d-d31c6baf2c71.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Visit iTunes Connect at [https://itunesconnect.apple.com](https://itunesconnect.apple.com)
    and click on the My Apps button, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0d051d22-631e-48da-90a7-8e06ed37423a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the plus (+) icon and select New App, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/be6bcdf7-71a8-43f0-bd04-ebb5d7f493fe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fill out the form and ensure that you select the right Bundle ID for your app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6b21eb89-1720-40fb-b4b9-39f9b04d44cb.png)'
  prefs: []
  type: TYPE_IMG
- en: There are several additional steps to provide information on the app, such as
    screenshot, icon, and address. If you just want to test the app, you could provide
    some placeholder information initially and come back to edit it later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That's it to prepare your Developer and iTunes Connect account.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, open Xcode and select iOS Device as the archive target, otherwise the Archive
    feature will not be turned on. You will need to archive your app before you can
    submit it to the App Store:![](img/797f9e6d-2343-4d38-9104-3147980f43e8.png)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Navigate to Product | Archive in the top menu, as illustrated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/30be3878-8617-41c2-870a-f9d32498383d.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: After the archive process is completed, select Submit to App Store to finish
    the publishing process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To publish, select Submit for Beta App Review. You may want to go through other
    tabs, such as Pricing and In-App Purchases, to configure your own requirements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Obviously, this section does not cover every bit of detail in the publishing
    process. In general, you just need to ensure that your app is tested thoroughly,
    locally, on a physical device (either via USB or *TestFlight*) before submitting
    it to the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: 'If for some reason, the Archive feature doesn''t build, you could manually
    go to your local Xcode folder to delete that specific temporary archived app to
    clear cache, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*TestFlight* is a separate subject by itself. The benefit of *TestFlight* is
    that you don''t need your app to be approved by Apple in order to install the
    app on a physical device for testing and development. You can find out more information
    on *TestFlight* at [https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Chapters/BetaTestingTheApp.html.](https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Chapters/BetaTestingTheApp.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is one more way to test Ionic Apps, that's with Ionic's DevApp. It allows
    you to test Ionic Application on iOS and Android without even compiling. You have
    installed the Ionic Devapp on your phone, and in your workstation run `ionic serve
    -c` in the Terminal. You can find more details at [https://ionicframework.com/docs/pro/devapp/](https://ionicframework.com/docs/pro/devapp/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and publishing an app for Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building and publishing an Android app is a little more straightforward than
    iOS because you just interface with the command line to build the .apk file and
    upload it to Google Play's Developer Console.
  prefs: []
  type: TYPE_NORMAL
- en: The Ionic Framework documentation also has a great instruction page for this,
    which is [http://ionicframework.com/docs/guide/publishing.html](http://ionicframework.com/docs/guide/publishing.html).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The requirement is to have your Google Developer account ready and then log
    in to [https://play.google.com/apps/publish.](https://play.google.com/apps/publish)
  prefs: []
  type: TYPE_NORMAL
- en: Your local environment should also have the right SDK and `keytool`, `jarsigner`,
    and `zipalign` command line for that specific version.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to your app folder and build for Android using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You will note `android-release-unsigned.apk` in the `/platforms/android/build/outputs/apk`
    folder. Go to that folder in the Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/95663704-125c-4bc9-b191-987b72bb79f7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If this is the first time you created this app, you must have a `keystore`
    file. This file is used to identify your app for publishing. If you lose it, you
    cannot update your app later on. To create a `keystore` file, type the following
    command line and ensure that it''s the same `keytool` version of the SDK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Once you fill out the information on the command line, make a copy of this file
    somewhere safe because you will need it later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next step is to use that file to *sign* your app so that it will create
    a new `.apk` that Google Play allows users to install:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'To prepare for the final `.apk` before upload, you must package it using `zipalign`,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: You need to ensure that `zipalign` is in `PATH` or you have to specify the absolute
    path. The app name could be anything you like or you can use the same name as
    created in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to Google Developer Console and click on CREATE APPLICATION button,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/18eef3f4-e4eb-4283-a736-2327dec57064.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fill out the Title of the application in the opened popup and then click on
    CREATE button, as shown in the image below:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e58e3f79-3c8a-46dd-a17d-03be24f9ad00.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fill out the store listing and other information as required for your app using
    the left menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5d1cb4dc-d264-4b55-8e8d-e640f22b27c0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now you are ready to upload your `.apk` file. The first thing you need to do
    is to do a Beta testing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2d29db23-a7ab-4f22-96c7-5b080d8a3d5c.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you are done with Beta testing, you can follow Developer Console instructions
    to push the app to production.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you run into any problem while publishing the app, it's helpful to look at
    the "Why can't I publish?" link in the dashboard's top-right corner. Google will
    guide you on specific steps that must be completed or fixed.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section does not cover other Android marketplaces, such as Amazon App Store,
    because each of them has different processes. However, the common idea is that
    you need to completely build the unsigned version of the `.apk`, sign it using
    an existing or new `keystore` file, and, finally, `zipalign` to prepare it for
    upload.
  prefs: []
  type: TYPE_NORMAL
- en: Read more about uploading the application for publishing at [https://support.google.com/googleplay/android-developer/answer/113469?hl=en](https://support.google.com/googleplay/android-developer/answer/113469?hl=en)
  prefs: []
  type: TYPE_NORMAL
