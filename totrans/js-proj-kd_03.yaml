- en: Chapter 3. Introducing HTML and CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have already learned about JavaScript syntax, arithmetic operators, and
    comment in the previous chapter. We used console for these purposes. Now, how
    about you learn something interesting, which will pave the way for you to be a
    good JavaScript programmer? In this chapter, we are going to study about the **HyperText
    Markup Language** (**HTML**) syntax, **Cascading Style Sheets** (**CSS**) syntax,
    and how to use JavaScript in an HTML page.
  prefs: []
  type: TYPE_NORMAL
- en: HTML is the source code of a web page. All the web pages that you load on your
    web browser are built with HTML. Go to any website (for example, [https://www.google.com](https://www.google.com))
    and press *Ctrl* + *U* (on Mac, click *command* + *U*) on your keyboard, you will
    get the web page's source code. This works on all modern web browsers, such as
    Firefox, Google Chrome, UC, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The entire code that you will see is in HTML. You may also find a few lines
    with JavaScript. Therefore, in order to understand the structure of a web page
    (the code behind the page), you need to know about HTML. This is one of the easiest
    languages on the web.
  prefs: []
  type: TYPE_NORMAL
- en: HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML is a markup language. What does it mean? Well, a markup language processes
    and presents texts using specific codes for formatting, styling, and layout design.
    There are a lot of markup languages (for example, **Business Narrative Markup
    Language** (**BNML**), **ColdFusion Markup Language** (**CFML**), **Opera** **Binary
    Markup Language** (**OBML**), **Systems** **Biology Markup Language** (**SBML**),
    **Virtual Human Markup Language** (**VHML**), and so on); however, in modern web,
    we use HTML. HTML is based on **Standard Generalized Markup Language** (**SGML**).
    SGML was basically used to design document papers.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are a number of HTML versions. HTML 5 is the latest version. Throughout
    this book, we will use the latest version of HTML.
  prefs: []
  type: TYPE_NORMAL
- en: Before you start learning HTML, let me ask you to think of your favorite website.
    What does the website contain? A few web pages? You may see some text, few images,
    one or two text fields, buttons, and some more elements on each of the web pages.
    Each of these elements are formatted by HTML.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let me introduce you to a web page. On your Internet browser, go to [https://www.google.com](https://www.google.com).
    You will see a page as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![HTML](img/B04720_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The first thing you will see on the top of your browser is the title of the
    webpage. Let''s observe the page that we just loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: Here, the marked box, **1**, is the title of the web page that we loaded.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second box, **2**, indicates some links or text.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The word **Google** in the middle of the page is an image.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third box, **3**, consists of two buttons.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can you tell me what **Sign in** on the right-hand top of the page is? Yes,
    it is a button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's demonstrate the basic structure of HTML. The term *tag* will be used frequently
    to demonstrate the structure.
  prefs: []
  type: TYPE_NORMAL
- en: An HTML tag is nothing but a few predefined words between the less than sign
    (`<`) and greater than sign (`>`). Therefore, the structure of a tag is `<WORD>`,
    where `WORD` is the predefined text that is recognized by the Internet browsers.
    This type of tag is called open tag. There is another type of tag that is known
    as close tag. The structure of a close tag is similar to `</WORD>`. You just have
    to put a forward slash after the less than sign.
  prefs: []
  type: TYPE_NORMAL
- en: 'After this section, you will be able to make your own web page with some text
    using HTML. The structure of an HTML page is similar to the following image. This
    image has eight tags. Let''s introduce all these tags with their activities, as
    shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![HTML](img/B04720_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**1**: The tag `<html>` is an open tag and it closes at line **15** with the
    `</html>` tag.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These tags tell your Internet browser that all the texts and scripts in these
    two tags are HTML documents.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**2**: This is the `<head>` tag, which is an open tag and closes at line **7**
    with the `</head>` tag.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These tags contain the title, script, style, and metadata of a web page.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**3**: This is the `<title>` tag, and closes at line **4** with the `</title>`
    tag.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This tag contains the title of the web page. The previous image had the title
    **Google**. To see this on the web browser, you need to type the following:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '**4**: This is the close tag of the `<title>` tag.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**5**: This is the closing tag of the `<head>` tag.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**6**: This is the `<body>` tag, and closes at line **13** with the `</body>`
    tag.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Everything you can see on a webpage is written between these two tags. Every
    element, image, link and so on are formatted here. To see This is a web page.
    on your browser, you need to type the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**7**: The `</body>` tag closes here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**8**: The `</html>` tag is closes here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your first webpage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You just learned the eight basic tags of an HTML page. You can now make your
    own web page. How? Why not try with me?
  prefs: []
  type: TYPE_NORMAL
- en: Open your text editor (You have already installed Atom in [Chapter 1](ch01.html
    "Chapter 1. Exploring JavaScript in the Console"), *Exploring JavaScript in the
    Console* of this book).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl* + *N*, which will open a new `untitled` file as shown in the following
    image:![Your first webpage](img/B04720_03_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following HTML codes on a blank page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, press *Ctrl* + *Shift* + *S*, which will tell you to save your code somewhere
    on your computer:![Your first webpage](img/B04720_03_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type a suitable name on the **File name:** field. I would like to name my HTML
    file `webpage`, therefore, I typed `webpage.html`. You may be wondering why I
    added an extension (`.html`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: As this is an HTML document, you need to add `.html` or `.htm` after the name
    that you give your webpage. The `.htm` extension is an old form of `.html`. It
    was limited to keep the file extension in three characters, therefore, people
    used `.htm` instead of `.html`. You can also use `.htm`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press the **Save** button. This will create an HTML document on your computer.
    Go to the directory, where you just have saved your HTML file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that you can give your web page any name. However, this name will not
    be visible on your browser. It is not the title of your web page. It is good practice
    not to keep a blank space in your webpage's name. For example, you want to name
    your HTML file `This is my first webpage.html`. Your computer will face no problem
    showing the result on the Internet browsers; however, when your website will be
    on a server, this name might face a problem. Therefore, I would suggest you to
    keep an underscore (`_`) where you need to add a space, such as `This_is_my_first_webpage.html`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You will find a file similar to the following image:![Your first webpage](img/B04720_03_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, double-click on the file. You will see your first web page on the Internet
    browser!![Your first webpage](img/B04720_03_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You typed `My Webpage!` between the `<title>` and `</title>` tags, which is
    why your browser shows this in the first selection box, **1**. You typed `This
    is my webpage :)` between the `<body>` and `</body>` tags. Therefore, you can
    see the text on your browser in the second selection box, **2**.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You created your first web page!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can edit your codes and other texts of the `webpage.html` file by right-clicking
    on the file and select **Open with Atom**. You must save (*Ctrl* + *S*) your codes
    and text before reopening the file in your browser.
  prefs: []
  type: TYPE_NORMAL
- en: More HTML tags
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a number of HTML tags to format text and objects of your web page.
    How about we study a few of them now?
  prefs: []
  type: TYPE_NORMAL
- en: '| Description | Syntax with example | Result on browser |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Bold Text | `<b> This is bold </b>` | **This is bold** |'
  prefs: []
  type: TYPE_TB
- en: '| Italic Text | `<i> This is italic </i>` | *This is italic* |'
  prefs: []
  type: TYPE_TB
- en: '| Underlined Text | `<u> Underline Text </u>` | ![More HTML tags](img/B04720_03_14.jpg)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Deleted Text | `<del> Delete me </del>` | ![More HTML tags](img/B04720_03_15.jpg)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Subscript Text | `CO<sub>2</sub>` | CO2 |'
  prefs: []
  type: TYPE_TB
- en: '| Superscript | `3x10<sup>8</sup>` | 3x108 |'
  prefs: []
  type: TYPE_TB
- en: '| Largest headline | `<h1> Hi Kids! </h1>` | ![More HTML tags](img/B04720_03_16.jpg)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Smallest headline | `<h6> Hi Kids </h6>` | ![More HTML tags](img/B04720_03_17.jpg)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Paragraph Text | `<p>This is a paragraph </p>` | This is a paragraph |'
  prefs: []
  type: TYPE_TB
- en: '| Break Tag | `This <br>is <br>a break;` | This is a break; |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are six headline tags (`<h1>` to `<h6>`). You can add more than one tag
    for a text if required. For example: `<b><i><u> JavaScript </b></i></u>` will
    have the following output: ![More HTML tags](img/B04720_03_18.jpg). There is no
    specific order in which you should close the tags. The best practice is to follow
    the sequence of open tags.'
  prefs: []
  type: TYPE_NORMAL
- en: Coloring HTML text
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To color an HTML text, we can type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can type any standard color name between the two inverted commas (`" "`).
    You can also use hex color code, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `32CD32` is the hex code of green. Look at the following image. The left-hand
    side is the code, where we used both color name and hex code. On the right-hand
    side, we got the output of our browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Coloring HTML text](img/B04720_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A hex color code consists of six digits (it is a hexadecimal number). It starts
    with a pound sign or hash sign (`#`) and we place the six digit hexadecimal number
    after it. The hexadecimal number represents red, blue, and green colors' amount.
    Each two digits represents `00` to `FF` (hexadecimal number). In the example,
    we used `#32CD32` for green. `32`, `CD`, and `32` are the amount of red, blue,
    and green; respectively; in hexadecimal.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't know what a hexadecimal number is, remember that we use decimal
    number where 10 digits (0, 1, 2, 3, 4, 5, 6, 7, 8, and 9) are used. However, in
    hexadecimal numbers, we use 16 digits (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C,
    D, E, and F).
  prefs: []
  type: TYPE_NORMAL
- en: I would recommend you to use this website ([http://html-color-codes.info/](http://html-color-codes.info/))
    to get your favorite color's hex code without thinking about the hex code.
  prefs: []
  type: TYPE_NORMAL
- en: Linking HTML text
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To hyperlink a text, we use an anchor tag as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The output of this code will be a link. If you click on the link, it will send
    you to the URL that we used between the inverted commas (here, [http://www.google.com](http://www.google.com)).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to open your link in a new tab of your browser, you need to add
    a target as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here, `target = "_blank"` is an attribute that tells your browser to open the
    link in a new tab. There are few more attributes. You can try them at home and
    let us know what you see on your browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other attributes are `_parent`, `_self`, and `_top`. The following image
    has the code that has the `_blank` attribute. It opens [http://google.com](http://google.com)
    in a new tab. I would suggest you to find what the other attributes do:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Linking HTML text](img/B04720_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Inserting an image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Inserting an image on an HTML document is super easy. You just have to find
    the image file extensions. The tag that we use to insert an image is as shown
    in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `src` attribute is the source of your image. If your image is placed on
    the same directory of the HTML file, you don't have to write the whole file source.
    Throughout this book, we will keep our image files on the same directory, where
    we save our HTML files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say that I have an image in the same folder where I saved the HTML document.
    The name of the image is `physics` and its extension is `.png`. Now, to add this
    on the HTML document, I need to add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![Inserting an image](img/B04720_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We use three types of images on an HTML document. **Portable Network Graphics**
    (**PNG**), **Graphics Interchange Format** (**GIF**) and **Joint Photographic
    Experts Group** (**JPG** or **JPEG**). To find your image's extension, right-click
    on your image, go to **Properties**, and then, click on the **Details** tab to
    scroll down until you find the **Name** field. You will find the image name with
    the extension. The procedure might be different on your machine, depending on
    your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to set the height and width of the image, you need to use two attributes,
    as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here, `100` and `40` are the pixel of the image. In the previous versions of
    HTML, it was defined as pixels or percentage.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A pixel is the smallest unit of an image. Using percentage (`%`) is better if
    you want to see the same ratio of the image on different screen sizes, otherwise,
    you can use the pixel (`px`) unit.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inserting an image](img/B04720_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There are more HTML tags; however, we have covered most of the tags that we
    use to build a web page. Can you imagine the output of the following codes?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will look similar to the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inserting an image](img/B04720_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to make your web page beautiful, you must know CSS. CSS is a language
    that allows you to describe your web pages, color your texts, change the font
    of the text, and modify the layout of the web page.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two parts of a CSS syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: Selector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decorator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Before proceeding with learning CSS, you need to introduce yourself with an
    HTML tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This tag should be kept between the `<head></head>` tags. Therefore, the structure
    of the code will be as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The CSS codes will be written in between the `<style></style>` tags.
  prefs: []
  type: TYPE_NORMAL
- en: 'To format your text, you need to remember the tag that you used for the text.
    Consider that you have a text in the `<h1></h1>` tag in the body of the HTML document,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To apply CSS, you need to type the following between the `<style> </style>`
    tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the code will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![CSS](img/B04720_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Look at the code carefully. We used the following CSS for the text in the `<h1></h1>`
    tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Here, we used a few CSS syntaxes (`color`, `text-decoration`, and so on). There
    are a number of CSS syntaxes, also called property (and every property may contain
    more than one value).
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript on an HTML page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have already learned how to print something using JavaScript on console.
    How about we do it on an HTML page? Before doing this, let's introduce an HTML
    tag, `<script></script>`. Our JavaScript code will be between these tags.
  prefs: []
  type: TYPE_NORMAL
- en: 'As there are lots of scripting languages, we need to define what kind of language
    we are using between these tags. Therefore, we type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s see an example. In the previous chapter, you learned how to do basic
    operations using JavaScript on console. Now, we are going to perform a few operations
    between the `<script></script>` tags in an HTML page. Look at the following code
    carefully:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the code will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![JavaScript on an HTML page](img/B04720_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: I hope that you could guess the output of the codes by yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned HTML, CSS, and their syntaxes and usages. We also
    covered how to implement JavaScript on an HTML document. You are now able to build
    your own web page and make it wonderful using JavaScript. I would suggest you
    not to skip any part of this chapter in order to have a better understanding of
    the next chapter, [Chapter 4](ch04.html "Chapter 4. Diving a Bit Deeper"), *Diving
    a Bit Deeper*.
  prefs: []
  type: TYPE_NORMAL
