["```js\nvar data = [10, 15, 30, 50, 80, 65, 55, 30, 20, 10, 8]; // <- A \n    function render(data) { // <- B \n        var bars = d3.select(\"body\").selectAll(\"div.h-bar\") // <- C \n                .data(data); // Update <- D \n        // Enter \n        bars.enter() // <- E \n                .append(\"div\") // <- F \n                    .attr(\"class\", \"h-bar\") // <- G \n            .merge(bars) // Enter + Update <- H \n                .style(\"width\", function (d) { \n                    return (d * 3) + \"px\"; // <- I \n                }) \n                .text(function (d) { \n                    return d; // <- J \n                }); \n        // Exit \n        bars.exit() // <- K \n                .remove(); \n    } \n    setInterval(function () { // <- L \n        data.shift(); \n        data.push(Math.round(Math.random() * 100)); \n        render(data); \n    }, 1500); \n    render(data); \n\n```", "```js\n        var bars = d3.select(\"body\") \n                       .selectAll(\"div.h-bar\") // <- C \n                       .data(data); // Update <- D \n        // Enter \n        bars.enter() // <- E \n            .append(\"div\") // <- F \n            .attr(\"class\", \"h-bar\") // <- G \n\n```", "```js\n        bars.enter() // <- E \n                .append(\"div\") // <- F \n                    .attr(\"class\", \"h-bar\") // <- G \n            .merge(bars) // Enter + Update <- H \n                .style(\"width\", function (d) { \n                    return (d * 3) + \"px\"; // <- I \n                }) \n                .text(function (d) { \n                    return d; // <- J \n                }); \n\n```", "```js\n<div class=\"h-bar\" style=\"width: 30px;\"> \n    10 \n</div> \n<div class=\"h-bar\" style=\"width: 45px;\"> \n    15 \n</div> \n.... \n<div class=\"h-bar\" style=\"width: 24px;\"> \n    8 \n</div> \n\n```", "```js\nbars.exit() // <- K \n    .remove(); \n\n```", "```js\nsetInterval(function () { // <- L \n        data.shift(); \n        data.push(Math.round(Math.random() * 100)); \n        render(data); \n    }, 1500); \n\n```", "```js\nvar data = [ // <- A \n        {width: 10, color: 23},{width: 15, color: 33}, \n        {width: 30, color: 40},{width: 50, color: 60}, \n        {width: 80, color: 22},{width: 65, color: 10}, \n        {width: 55, color: 5},{width: 30, color: 30}, \n        {width: 20, color: 60},{width: 10, color: 90}, \n        {width: 8, color: 10} \n    ]; \n\n    var colorScale = d3.scaleLinear() \n        .domain([0, 100]) \n        .range([\"#add8e6\", \"blue\"]); // <- B \n    function render(data) { \n        var bars = d3.select(\"body\").selectAll(\"div.h-bar\") \n                .data(data); // Update \n        // Enter \n        bars.enter() \n                .append(\"div\") \n                .attr(\"class\", \"h-bar\") \n                .merge(bars) // Enter + Update \n                .style(\"width\", function (d) { // <- C \n                    return (d.width * 5) + \"px\"; // <- D \n                }) \n                .style(\"background-color\", function(d){ \n                    return colorScale(d.color); // <- E \n                }) \n                .text(function (d) { \n                    return d.width; // <- F \n                }); \n        // Exit \n        bars.exit().remove(); \n    } \n    function randomValue() { \n        return Math.round(Math.random() * 100); \n    } \n    setInterval(function () { \n        data.shift(); \n        data.push({width: randomValue(), color: randomValue()}); \n        render(data); \n    }, 1500); \n    render(data); \n\n```", "```js\n        {width: 10, color: 23}, \n        {width: 15, color: 33}, \n... \n        {width: 8, color: 10} \n    ]; \n\n```", "```js\nfunction (d) { // <- C \n    return (d.width * 5) + \"px\"; // <- D \n} \n\n```", "```js\n.style(\"background-color\", function(d){ \n  return colorScale(d.color); // <- E \n}) \n.text(function (d) { \n  return d.width; // <- F \n}); \n\n```", "```js\n<div id=\"container\"></div> \n\n<script type=\"text/javascript\"> \n    var data = []; // <- A \n    var datum = function (x) { // <- B \n        return 15 + x * x; \n    }; \n\n    var newData = function () { // <- C \n        data.push(datum); \n        return data; \n    }; \n    function render(){ \n        var divs = d3.select(\"#container\") \n                    .selectAll(\"div\") \n                    .data(newData); // <- D \n        divs.enter().append(\"div\").append(\"span\"); \n        divs.attr(\"class\", \"v-bar\") \n            .style(\"height\", function (d, i) { \n                return d(i) + \"px\"; // <- E \n            }) \n            .select(\"span\") // <- F \n                .text(function(d, i){  \n                    return d(i); // <- G \n                }); \n        divs.exit().remove(); \n    } \n\n    setInterval(function () { \n        render(); \n    }, 1000); \n    render(); \n</script> \n\n```", "```js\n    var data = []; // <- A \n    var datum = function (x) { // <- B \n        return 15 + x * x; \n    }; \n\n    var newData = function () { // <- C \n        data.push(datum); \n        return data; \n    }; \n\n```", "```js\n        var divs = d3.select(\"#container\") \n                   .selectAll(\"div\") \n                   .data(newData); // <- D \n\n```", "```js\n         divs.attr(\"class\", \"v-bar\") \n            .style(\"height\", function (d, i) { \n                return d(i) + \"px\"; // <- E \n            }) \n            .select(\"span\") // <- F \n                .text(function(d, i){  \n                    return d(i); // <- G \n                });  \n\n```", "```js\n<script type=\"text/javascript\"> \n    // Static html code were omitted due to space constraint \n\n    var array = [3, 2, 11, 7, 6, 4, 10, 8, 15]; \n    d3.select(\"#min\").text(d3.min(array)); \n    d3.select(\"#max\").text(d3.max(array)); \n    d3.select(\"#extent\").text(d3.extent(array)); \n    d3.select(\"#sum\").text(d3.sum(array)); \n    d3.select(\"#median\").text(d3.median(array)); \n    d3.select(\"#mean\").text(d3.mean(array)); \n    d3.select(\"#quantile\").text( \n            d3.quantile(array.sort(d3.ascending), 0.25) \n    ); \n    d3.select(\"#deviation\").text(d3.deviation(array)); \n    d3.select(\"#asc\").text(array.sort(d3.ascending)); \n    d3.select(\"#desc\").text(array.sort(d3.descending)); \n    d3.select(\"#bisect\").text( \n        d3.bisect(array.sort(d3.ascending), 6) \n    ); \n    var records = [ \n        {quantity: 2, total: 190, tip: 100, type: \"tab\"}, \n        {quantity: 2, total: 190, tip: 100, type: \"tab\"}, \n        {quantity: 1, total: 300, tip: 200, type: \"visa\"}, \n        {quantity: 2, total: 90, tip: 0, type: \"tab\"}, \n        {quantity: 2, total: 90, tip: 0, type: \"tab\"}, \n        {quantity: 2, total: 90, tip: 0, type: \"tab\"}, \n        {quantity: 1, total: 100, tip: 0, type: \"cash\"}, \n        {quantity: 2, total: 90, tip: 0, type: \"tab\"}, \n        {quantity: 2, total: 90, tip: 0, type: \"tab\"}, \n        {quantity: 2, total: 90, tip: 0, type: \"tab\"}, \n        {quantity: 2, total: 200, tip: 0, type: \"cash\"}, \n        {quantity: 1, total: 200, tip: 100, type: \"visa\"} \n    ]; \n    var nest = d3.nest() \n            .key(function (d) { // <- A \n                return d.type; \n            }) \n            .key(function (d) { // <- B \n                return d.tip; \n            }) \n            .entries(records); // <- C \n    d3.select(\"#nest\").html(printNest(nest, \"\")); \n\n    // Utility function to generate HTML  \n    // representation of nested tip data  \n    function printNest(nest, out, i) { \n        \"\"\"\"\"\"\"\" \n\n    }\"\"\"\"\"\"\"\" \n</script>  \n\n```", "```js\nd3.min => 2 \nd3.max => 15 \nd3.extent => 2,15 \nd3.sum => 66 \nd3.median => 7 \nd3.mean => 7.333333333333333 \narray.sort(d3.ascending) => 2,3,4,6,7,8,10,11,15 \narray.sort(d3.descending) => 15,11,10,8,7,6,4,3,2 \nd3.quantile(array.sort(d3.ascending), 0.25) => 4 \nd3.deviation(array) => 4.18 \nd3.bisect(array.sort(d3.ascending), 6) => 4 \n\ntab \n 100 \n  {quantity: 2, total: 190, tip: 100, type: tab, } \n  {quantity: 2, total: 190, tip: 100, type: tab, } \n 0 \n   {quantity: 2, total: 90, tip: 0, type: tab, } \n   {quantity: 2, total: 90, tip: 0, type: tab, } \n   {quantity: 2, total: 90, tip: 0, type: tab, } \n   {quantity: 2, total: 90, tip: 0, type: tab, } \n   {quantity: 2, total: 90, tip: 0, type: tab, } \n   {quantity: 2, total: 90, tip: 0, type: tab, } \nvisa \n  200 \n   {quantity: 1, total: 300, tip: 200, type: visa, } \n  100 \n    {quantity: 1, total: 200, tip: 100, type: visa, } \ncash, } \n   0 \n    {quantity: 1, total: 100, tip: 0, type: cash, } \n    {quantity: 2, total: 200, tip: 0, type: cash, } \n\n```", "```js\n     d3.ascending = function(a, b) {  return a < b ? -1 : a >  \n       b ? 1 : 0; } \n     d3.descending = function(a, b) {  return b < a ? -1 : b  \n       > a ? 1 : 0; } \n\n```", "```js\n         var nest = d3.nest() \n                 .key(function (d) { // <- A \n                     return d.type; \n                 }) \n                 .key(function (d) { // <- B \n                     return d.tip; \n                 }) \n                 .entries(records); // <- C \n\n```", "```js\n     tab \n      100 \n       {quantity: 2, total: 190, tip: 100, type: tab, } \n       {quantity: 2, total: 190, tip: 100, type: tab, } \n\n```", "```js\n<script type=\"text/javascript\"> \n    var data = [ // <-A \n        {expense: 10, category: \"Retail\"}, \n        {expense: 15, category: \"Gas\"}, \n        {expense: 30, category: \"Retail\"}, \n        {expense: 50, category: \"Dining\"}, \n        {expense: 80, category: \"Gas\"}, \n        {expense: 65, category: \"Retail\"}, \n        {expense: 55, category: \"Gas\"}, \n        {expense: 30, category: \"Dining\"}, \n        {expense: 20, category: \"Retail\"}, \n        {expense: 10, category: \"Dining\"}, \n        {expense: 8, category: \"Gas\"} \n    ]; \n    function render(data, category) { \n        var bars = d3.select(\"body\").selectAll(\"div.h-bar\") // <-B \n                .data(data); \n        // Enter \n        bars.enter() \n            .append(\"div\") // <-C \n                .attr(\"class\", \"h-bar\") \n                .style(\"width\", function (d) { \n                    return (d.expense * 5) + \"px\";} \n                ) \n                .append(\"span\") // <-D \n                .text(function (d) { \n                    return d.category; \n                }); \n        // Update \n        d3.selectAll(\"div.h-bar\").attr(\"class\", \"h-bar\"); \n        // Filter \n        bars.filter(function (d, i) { // <-E \n                return d.category == category; \n            }) \n            .classed(\"selected\", true); \n    } \n    render(data); \n    function select(category) { \n        render(data, category); \n    } \n</script> \n\n<div class=\"control-group\"> \n    <button onclick=\"select('Retail')\"> \n        Retail \n    </button> \n    <button onclick=\"select('Gas')\"> \n        Gas \n    </button> \n    <button onclick=\"select('Dining')\"> \n        Dining \n    </button> \n    <button onclick=\"select()\"> \n        Clear \n    </button> \n</div> \n\n```", "```js\nbars.filter(function (d, i) { // <-E \n    return d.category == category; \n}).classed(\"selected\", true); \n\n```", "```js\n<script type=\"text/javascript\"> \n    var data = [ // <-A \n        {expense: 10, category: \"Retail\"}, \n        {expense: 15, category: \"Gas\"}, \n        {expense: 30, category: \"Retail\"}, \n        {expense: 50, category: \"Dining\"}, \n        {expense: 80, category: \"Gas\"}, \n        {expense: 65, category: \"Retail\"}, \n        {expense: 55, category: \"Gas\"}, \n        {expense: 30, category: \"Dining\"}, \n        {expense: 20, category: \"Retail\"}, \n        {expense: 10, category: \"Dining\"}, \n        {expense: 8, category: \"Gas\"} \n    ]; \n    function render(data, comparator) { \n        var bars = d3.select(\"body\").selectAll(\"div.h-bar\") // <-B \n                .data(data); \n        // Enter \n        bars.enter().append(\"div\") // <-C \n                .attr(\"class\", \"h-bar\") \n                .append(\"span\"); \n        // Update \n        d3.selectAll(\"div.h-bar\") // <-D \n                .style(\"width\", function (d) { \n                    return (d.expense * 5) + \"px\"; \n                }) \n                .select(\"span\") \n                .text(function (d) { \n                    return d.category; \n                }); \n        // Sort \n        if(comparator) \n            bars.sort(comparator); // <-E \n    } \n    var compareByExpense = function (a, b) {  // <-F \n        return a.expense < b.expense?-1:1; \n    }; \n    var compareByCategory = function (a, b) {  // <-G \n        return a.category < b.category?-1:1; \n}; \n\n    render(data); \n\n    function sort(comparator) { \n        render(data, comparator); \n    } \n</script> \n\n<div class=\"control-group\"> \n    <button onclick=\"sort(compareByExpense)\"> \n        Sort by Expense \n    </button> \n    <button onclick=\"sort(compareByCategory)\"> \n        Sort by Category \n    </button> \n    <button onclick=\"sort()\"> \n        Reset \n    </button> \n</div> \n\n```", "```js\n        // Sort \n        if(comparator) \n            bars.sort(comparator); // <-E \n\n```", "```js\nvar compareByExpense = function (a, b) {  // <-F \n    return a.expense < b.expense?-1:1; \n}; \nvar compareByCategory = function (a, b) {  // <-G \n    return a.category < b.category?-1:1; \n}; \n\n```", "```js\n<div id=\"chart\"></div> \n\n<script type=\"text/javascript\"> \n    function render(data) { \n        var bars = d3.select(\"#chart\").selectAll(\"div.h-bar\") // <-A \n                .data(data); \n        bars.enter().append(\"div\") // <-B \n            .attr(\"class\", \"h-bar\") \n                .style(\"width\", function (d) { \n                    return (d.expense * 5) + \"px\"; \n                }) \n            .append(\"span\") \n                .text(function (d) { \n                    return d.category; \n                }); \n    } \n    function load(){ // <-C \n        d3.json(\"data.json\", function(error, json){ // <-D \n            render(json); \n        }); \n    } \n</script> \n\n<div class=\"control-group\"> \n    <button onclick=\"load()\">Load Data from JSON feed</button> \n</div> \n\n```", "```js\n[ \n {\"expense\": 15,  \"category\": \"Retail\"}, \n {\"expense\": 18,  \"category\": \"Gas\"}, \n ... \n {\"expense\": 15, \"category\": \"Gas\"} \n] \n\n```", "```js\n    function load(){ // <-C \n        d3.json(\"data.json\", function(error, json){ // <-D \n            render(json); \n        }); \n    } \n\n```", "```js\n<div id=\"chart\"></div> \n\n<script type=\"text/javascript\"> \n    function render(data) { \n        var bars = d3.select(\"#chart\").selectAll(\"div.h-bar\") // <-B \n                .data(data); \n        bars.enter().append(\"div\") // <-C \n                .attr(\"class\", \"h-bar\") \n                .style(\"width\", function (d) { \n                    return (d.number) + \"px\"; \n                }) \n                .append(\"span\") \n                .text(function (d) { \n                    return d.number; \n                }); \n    } \n    function generateDatum(callback) { \n        setInterval(function(){ \n            callback(null, {number: Math.ceil(Math.random() * 500)}); // <-D \n        }, 500); \n    } \n    function load() { // <-E \n        var q = d3.queue(); // <-F \n        for (var i = 0; i < 10; i++) \n            q.defer(generateDatum); // <-G \n        q.awaitAll(function (error, data) { // <-H \n            render(data); // <- I \n        }); \n    } \n</script> \n\n<div class=\"control-group\"> \n    <button onclick=\"load()\">Generate Data Set</button> \n</div> \n\n```", "```js\nfunction generateDatum(callback) { \n        setInterval(function(){ \n            callback(null, {number: Math.ceil(Math.random() * 500)}); // <-D \n        }, 500); \n} \n\n```", "```js\n    function load() { // <-E \n        var q = d3.queue(); // <-F \n        for (var i = 0; i < 10; i++) \n            q.defer(generateDatum); // <-G \n            q.awaitAll(function (error, data) { // <-H \n            render(data); // <- I \n        }); \n    } \n\n```"]