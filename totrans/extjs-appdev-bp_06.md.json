["```js\nGET /logStream\nAccepts: n/a\nReturns: [\n    {\n        \"type\":\"web\",\n        \"subType\":\"request\",\n        \"time\":\"2014-11-04T12:10:14.465Z\",\n        \"ms\":10,\n        \"count\":5\n    },\n    {\n        \"type\":\"sql\",\n        \"subType\":\"query\",\n        \"time\":\"2014-11-04T12:10:14.466Z\",\n        \"ms\":17,\n           \"count\":34\n    }\n]\n```", "```js\nGET /logEntry\nAccepts: filter=[{\"property\":\"propertyName\",\"operator\":\"=\",\"value\":\"value\"}, â€¦]\nReturns: [{\n    \"type\":\"sql\",\n    \"subType\":\"query\",\n    \"time\":\"2014-11-04T12:10:14.466Z\",\n    \"ms\":17,\n    \"count\":34\n}, ...]\n```", "```js\n[\n    { property: 'type', operator: '=', value: 'sql' },\n    { property: 'time', operator: '<=', value: '2014-01-01' },\n    { property: 'time', operator: '>=', value: '2014-02-01' }\n]\n```", "```js\nGET /statistic\nAccepts:\nfilter=[\n    { property: 'type', operator: '=', value: 'web' },\n    { property: 'category', operator: '=', value: 'location' },\n    { property: 'time', operator: '<=', value: '2014-01-01' },\n    { property: 'time', operator: '>=', value: '2014-02-01' }\n]\nReturns: [{\"category\":\"location\",\"label\":\"Other\",\"percentage\":19.9}, ...]\n```", "```js\nInstrumatics.model.LogEntry: extends Instrumatics.model.BaseModel\n- type\n- subType\n- time\n- ms\n- count\n```", "```js\nInstrumatics.model.BaseModel: extends Ext.data.Model\n- schema\n```", "```js\nInstrumatics.model.Statistic: extends Instrumatics.model.BaseModel\n- category\n- label\n- percentage\n```", "```js\nInstrumatics.model.LogStream: extends Instrumatics.model.LogEntry\n```", "```js\nInstrumatics.view.main.Main: extends Ext.tab.Panel\n- items[]\n    - dashboard: extends Ext.panel.Panel\n    - web: extends Instrumatics.view.web.Web\n    - sql: extends Instrumatics.view.sql.Sql\n\n```", "```js\nInstrumatics.view.main.MainController: extends\nExt.app.ViewController\n- onTabChange\n- onNavigate\n```", "```js\nInstrumatics.view.dashboard.Dashboard: extends Ext.panel.Panel\n- items[]\n- live-sql-requests: extends Ext.chart.CartesianChart\n- live-web-requests: extends Ext.chart.CartesianChart\n- historical-sql-requests: extends Ext.chart.CartesianChart\n- historical-web-requests: extends Ext.chart.CartesianChart\n```", "```js\nInstrumatics.view.dashboard.DashboardController: extends\nExt.app.ViewController\n- initializeChartRefresh\n```", "```js\nInstrumatics.view.dashboard.DashboardModel: extends Ext.app.ViewModel\n- store.webLogs\n- store.sqlLogs\n- store.historicalWebLogs\n- store.historicalSqlLogs\n```", "```js\nInstrumatics.view.web.Web: extends Ext.panel.Panel\n- filters: extends Ext.Container\n- historical-web-requests: extends Ext.chart.CartesianChart\n- statistics-grid: extends Ext.grid.Panel\n```", "```js\nInstrumatics.view.web.WebController: extends Ext.app.ViewController\n```", "```js\nInstrumatics.view.web.WebModel: extends Ext.app.ViewModel\n- stores\n    - logData\n    - logStatistics\n    - categories\n- data\n    - currentCategory\n    - currentStartDate\n    - currentEndDate\n```", "```js\n<!DOCTYPE HTML>\n<html manifest=\"\">\n<head>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta charset=\"UTF-8\">\n    <title>Chart Test</title>\n <script type=\"text/javascript\" src=\"img/ext-all-debug.js\"></script>\n    <script type=\"text/javascript\" src=\"img/sencha-charts-debug.js\"></script>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"ext/packages/ext-theme-neptune/build/resources/ext-theme-neptune-all-debug.css\">\n</head>\n<body>\n   <div id=\"chart\"></div>\n\n   <script type=\"text/javascript\">\n   Ext.onReady(function() {\n         // Code goes here.\n   });\n   </script>\n</body>\n</html>\n```", "```js\nvar store = Ext.create('Ext.data.Store', {\n   fields: [\n          { name: 'value' },\n          { name: 'time', type: 'date' }\n   ]\n});\n```", "```js\nvar now = new Date();\n      fromDate = Ext.Date.subtract(now, Ext.Date.MINUTE, 1),\n      toDate = Ext.Date.add(now, Ext.Date.MINUTE, 5);\n```", "```js\nvar chart = Ext.create('Ext.chart.Chart', {\n    renderTo: 'chart',\n    width: 500, height: 300,\n    animate: true, store: store,\n    axes: [\n        { type: 'numeric', position: 'left', fields: 'value' }, \n        {\n            type: 'time', fields: 'time', dateFormat: 'H:i:s',\n            fromDate: fromDate.setSeconds(0),\n            toDate: toDate.setSeconds(0)\n        }\n    ],\n    series: [{ type: 'line', xField: 'time', yField: 'value' }]\n});\n```", "```js\nsetInterval(function() {\n    store.add({\n        time: (new Date()).toISOString(),\n        value: Ext.Number.randomInt(1, 30)\n    });\n}, 1000);\n```", "```js\nvar redrawCounter = 0;\n\nchart.on('redraw', function() {\n    redrawCounter++;\n\n    if(redrawCounter > 15) {\n        redrawCounter = 0;\n\n        var timeAxis = this.getAxes()[1],\n            oldFrom = new Date(timeAxis.getFromDate()),\n            oldTo = new Date(timeAxis.getToDate()),\n            newFrom = Ext.Date.add(oldFrom, Ext.Date.SECOND, 15),\n            newTo = Ext.Date.add(oldTo, Ext.Date.SECOND, 15);\n\n        timeAxis.setFromDate(newFrom);\n        timeAxis.setToDate(newTo);\n    }\n});\n```", "```js\nsencha generate app -ext Instrumatics ./instrumatics\n\n```", "```js\n// app/model/BaseModel.js\nExt.define('Instrumatics.model.BaseModel', {\n    extend: 'Ext.data.Model',\n\n    schema: {\n        namespace: 'Instrumatics.model',\n        urlPrefix: 'http://localhost:3000',\n        proxy: {\n            type: 'ajax',\n            url: '{prefix}/{entityName:uncapitalize}'\n        }\n    },\n});\n```", "```js\n// app/model/LogEntry.js\nExt.define('Instrumatics.model.LogEntry', {\n    extend: 'Instrumatics.model.BaseModel',\n\n    fields: [\n        { name: 'value' },\n        { name: 'subType' },\n        { name: 'type' },\n        { name: 'time', type: 'date' }\n    ]    \n});\n```", "```js\nhttp://localhost:3000/logEntry\n```", "```js\n// app/model/LogStream.js\nExt.define('Instrumatics.model.LogStream', {\n    extend: 'Instrumatics.model.LogEntry',\n});\n```", "```js\nhttp://localhost:3000/logStream\n```", "```js\n// app/model/Statistic.js\nExt.define('Instrumatics.model.Statistic', {\n    extend: 'Instrumatics.model.BaseModel',\n    fields: [\n        { name: 'category' },\n        { name: 'label' },\n        { name: 'percentage', type: 'number' }\n    ]\n});\n```", "```js\nhttp://localhost:3000/statistic\n```", "```js\n'category',\n'label',\n{ name: 'percentage', type: 'number' }\n```", "```js\n// app/store/LogEntries.js\nExt.define('Instrumatics.store.LogEntries', {\n    extend: 'Ext.data.Store',\n    alias: 'store.logentries',\n    model: 'Instrumatics.model.LogEntry',\n    autoLoad: true,\n    remoteFilter: true\n});\n\n// app/store/LogStream.js\nExt.define('Instrumatics.store.LogStream', {\n    extend: 'Ext.data.Store',\n    alias: 'store.logstream',\n    model: 'Instrumatics.model.LogStream',\n    autoLoad: true,\n    remoteFilter: true\n});\n\n// app/model/Statistics.js\nExt.define('Instrumatics.store.Statistics', {\n    extend: 'Ext.data.Store',\n    alias: 'store.statistics',\n    model: 'Instrumatics.model.Statistic'\n});\n```", "```js\n// app/view/main/Main.js\nExt.define('Instrumatics.view.main.Main', {\n    extend: 'Ext.tab.Panel',\n\n    requires: [\n        'Instrumatics.view.dashboard.Dashboard',\n        'Instrumatics.view.web.Web',\n        'Instrumatics.view.web.Sql',\n    ],\n\n    xtype: 'app-main',\n    controller: 'main-main',\n\n    header: {\n        title: {\n            text: 'Instrumatics', padding: 20\n        }\n    },\n\n    tabPosition: 'left',\n    tabRotation: 0,\n\n    items: [\n        { xtype: 'dashboard', title: 'Dashboard', reference: 'dash' },\n        { xtype: 'web-logs', title: 'Web', reference: 'web' },\n        { xtype: 'sql-logs', title: 'SQL', reference: 'sql' }\n    ]\n});\n```", "```js\n// app/view/main/MainController.js\nExt.define('Instrumatics.view.main.MainController', {\n    extend: 'Ext.app.ViewController',\n    alias: 'controller.main-main',\n\n    routes: {\n        ':controller': 'onNavigate'\n    },\n\n    listen: {\n        component: {\n            'tabpanel': {\n                tabchange: 'onTabChange'\n            }\n        }\n    },\n\n    onTabChange: function(tab, newCmp, oldCmp) {\n        this.redirectTo(newCmp.getReference());\n    },\n\n    onNavigate: function(controller) {\n        var view = this.getView();\n\n        view.setActiveTab(view.lookupReference(controller));\n    }\n});\n```", "```js\nhttp://localhost/#banana\n```", "```js\nhttp://localhost/#cars/56\n```", "```js\nroutes: { ':viewReference: 'onNavigate' }\n```", "```js\nonNavigate: function(viewReference) {\n    var view = this.getView();\n    view.setActiveTab(view.lookupReference(viewReference));\n}\n```", "```js\nonTabChange: function(tab, newCmp, oldCmp) {\n    this.redirectTo(newCmp.getReference());\n}\n```", "```js\n{ \n    xtype: 'cartesian',\n    title: 'Last 30 Days',\n    margin: 10, flex: 1\n    bind: '{historicalWebLogs}'\n    axes: [{\n        type: 'numeric',\n        position: 'left',\n        fields: ['value'],\n        title: {\n            text: 'Avg. Response \\nTime (ms)',\n            fontSize: 15\n        },\n        grid: true,\n        minimum: 0,\n        maximum: 20\n    }, {\n        type: 'time',\n        fields: 'time',\n        dateFormat: 'd M'\n    }],\n    series: {\n        type: 'line',\n        xField: 'time',\n        yField: 'value',\n        style: { 'stroke': 'red' }\n    }\n}\n```", "```js\n// app/ux/chart/HistoricalRequestChart.js\nExt.define('Instrumatics.ux.chart.HistoricalRequestChart', {\n    extend: 'Ext.chart.CartesianChart',\n    xtype: 'historical-request-chart',\n    frame: true,\n    axes: [{\n        type: 'numeric',\n        position: 'left',\n        fields: ['value'],\n        title: {\n            text: 'Avg. Response \\nTime (ms)',\n            fontSize: 15\n        },\n        grid: true,\n        minimum: 0,\n        maximum: 20\n    }, {\n        type: 'time',\n        position: 'bottom',\n        fields: ['time'],\n        dateFormat: 'd M'\n        style: {\n            axisLine: false\n        }\n    }],\n\n    series: {\n        type: 'line',\n        xField: 'time',\n        yField: 'value',\n        style: { 'stroke': 'red' }\n    }\n});\n```", "```js\n// app/ux/chart/LiveRequestChart.js\nExt.define('Instrumatics.ux.chart.LiveRequestChart', {\n    extend: 'Ext.chart.CartesianChart',\n    xtype: 'live-request-chart',\n    redrawCounter: 0,\n    frame: true,\n    axes: [{\n        type: 'numeric',\n        position: 'left',\n        fields: ['value'],\n        title: {\n            text: 'Avg. Response \\nTime (ms)',\n            fontSize: 15\n        },\n        grid: true,\n        minimum: 0,\n        maximum: 20\n    }, {\n        type: 'time',\n        position: 'bottom',\n        step: [Ext.Date.SECOND, 1],\n        fields: ['time'],\n        dateFormat: 'H:i:s',\n        fromDate: new Date(new Date().setMinutes( new Date().getMinutes() - 1)).setSeconds(0),\n        toDate: new Date(new Date().setMinutes( new Date().getMinutes() + 5)).setSeconds(0)\n    }],\n    series: {\n        type: 'line',\n        xField: 'time',\n        yField: 'value',\n        style: {\n            'stroke-width': 2\n        }\n    },\n\n    constructor: function() {\n        this.callParent(arguments);\n\n        this.on('redraw', this.onRedraw, this);\n    },\n\n    onRedraw: function() {\n        this.redrawCounter++;\n\n        if(this.redrawCounter > 15) {\n            this.redrawCounter = 0;\n\n            var timeAxis = this.getAxes()[1],\n                oldFrom = new Date(timeAxis.getFromDate()),\n                oldTo = new Date(timeAxis.getToDate()),\n                newFrom = Ext.Date.add(oldFrom, Ext.Date.SECOND, 15),\n                newTo = Ext.Date.add(oldTo, Ext.Date.SECOND, 15);\n\n            timeAxis.setFromDate(newFrom);\n            timeAxis.setToDate(newTo);\n        }\n    }\n});\n```", "```js\n// app/view/dashboard/Dashboard.js\nExt.define(\"Instrumatics.view.dashboard.Dashboard\", {\n    extend: \"Ext.panel.Panel\",\n    xtype: 'app-dashboard',\n    title: 'hello',\n    requires: [\n        'Instrumatics.ux.chart.LiveRequestChart',\n        'Instrumatics.ux.chart.HistoricalRequestChart'\n    ],\n    viewModel: {\n        type: 'dashboard-dashboard'\n    },\n    controller: 'dashboard-dashboard',\n    layout: {\n        type: 'vbox',\n        align: 'stretch'\n    },\n    items: [\n        {\n            xtype: 'container',\n            flex: 1,\n            layout: {\n                type: 'hbox',\n                align: 'stretch'\n            },\n            items: [\n                {\n                    xtype: 'live-request-chart',\n                    title: 'Live Web Requests', bind: '{webLogs}',\n                    series: { style: { 'stroke': 'red' } },\n                    margin: '10 5 0 10', flex: 1\n                },\n                {\n                    xtype: 'live-request-chart',\n                    title: 'Live SQL Requests', bind: '{sqlLogs}',\n                    series: { style: { 'stroke': 'green' } },\n                    margin: '10 10 0 5', flex: 1\n                }\n            ]\n        },\n        {\n            xtype: 'container',\n            flex: 1,\n            layout: {\n                type: 'hbox',\n                align: 'stretch'\n            },\n            items: [\n                {\n                    xtype: 'historical-request-chart',\n                    title: 'Last 30 Days', bind: '{historicalWebLogs}',\n                    series: { style: { 'stroke': 'red' } },\n                    margin: '10 5 10 10', flex: 1\n                },\n                {\n                    xtype: 'historical-request-chart',\n                    title: 'Last 30 Days', bind: '{historicalSqlLogs}',\n                    series: { style: { 'stroke': 'green' } },\n                    margin: '10 10 10 5', flex: 1\n                }\n            ]\n        }\n\n    ]\n});\n```", "```js\n// app/view/dashboard/DashboardModel.js\nExt.define('Instrumatics.view.dashboard.DashboardModel', {\n    extend: 'Ext.app.ViewModel',\n    alias: 'viewmodel.dashboard-dashboard',\n\n    stores: {\n        webLogs: {\n            type: 'logstream',\n            filters: [{\n                property: 'type',\n                value: 'web'\n            }]\n        },\n\n        sqlLogs: {\n            type: 'logstream',\n            filters: [{\n                property: 'type',\n                value: 'sql'\n            }]\n        },\n\n        historicalWebLogs: {\n            type: 'logentries',\n            filters: [{\n                property: 'type', \n                value: 'web'\n            }]\n        },\n\n        historicalSqlLogs: {\n            type: 'logentries',\n            filters: [{\n                property: 'type',\n                value: 'sql'\n            }]\n        }\n    }\n});\n```", "```js\n// app/view/dashboard/DashboardController.js\nExt.define('Instrumatics.view.dashboard.DashboardController', {\n    extend: 'Ext.app.ViewController',\n    alias: 'controller.dashboard-dashboard',\n\n    init: function() {\n        var data = this.getViewModel().getData(),\n            me = this;\n\n        setInterval(function() {\n            data.webLogs.load({ addRecords: true });\n            data.sqlLogs.load({ addRecords: true });\n        }, 1000);\n    }\n});\n```", "```js\n// app/view/web/Web.js\nExt.define('Instrumatics.view.web.Web',{\n    extend: 'Ext.panel.Panel',\n    xtype: 'web-logs',\n\n    viewModel: {\n        type: 'web-web'\n    },\n\n    layout: {\n        type: 'vbox',\n        align: 'stretch'\n    },\n    items: [\n        {\n            header: {\n                title: 'Web Requests',\n                items: [\n                    { xtype: 'datefield', fieldLabel: 'From', labelAlign: 'right', bind: '{currentStartDate}' },\n                    { xtype: 'datefield', fieldLabel: 'To', labelAlign: 'right', bind: '{currentEndDate}', labelWidth: 30 },\n                    { xtype: 'button', text: 'Refresh', margin: '0 0 0 10' }\n                ]\n            },\n            margin: 10, xtype: 'historical-request-chart', bind: '{logData}', flex: 1\n        },\n        {\n            xtype: 'grid',\n            margin: 10,\n            hideHeaders: true,\n            viewConfig: {\n              trackOver: false\n            },\n            disableSelection: true,\n            header: {\n                title: 'Breakdown',\n                items: [\n                    {\n                        xtype: 'combo',\n                        labelAlign: 'right', labelWidth: 60,\n                        fieldLabel: 'Category',\n                        bind: {\n                            store: '{categories}',\n                            value: '{currentCategory}'\n                        },\n                        queryMode: 'local',\n                        editable: false,\n                        forceSelection: true,\n                        displayField: 'text',\n                        valueField: 'value'\n                    }\n                ]\n            },\n            bind: '{logStatistics}',\n            flex: 1,\n            width: '100%',\n            columns: [\n                { name: 'Label', dataIndex: 'label', flex: 1 },\n                { name: 'Percentage', dataIndex: 'percentage', flex: 1 }\n            ]\n        }\n    ]\n});\n```", "```js\n// app/view/web/WebModel.js\nExt.define('Instrumatics.view.web.WebModel', {\n    extend: 'Ext.app.ViewModel',\n    alias: 'viewmodel.web-web',\n    stores: {\n        logData: {\n            type: 'logentries',\n            filters: [\n                { property: 'startDate', value: '{currentStartDate}' },\n                { property: 'endDate', value: '{currentEndDate}' }\n            ]\n        },\n\n        logStatistics: {\n            type: 'statistics',\n            filters: [\n                { property: 'category', value: '{currentCategory}' },\n                { property: 'startDate', value: '{currentStartDate}' },\n                { property: 'endDate', value: '{currentEndDate}' }\n            ]\n        },\n\n        categories: {\n            fields: ['text', 'value'],\n            data: [{\n                text: 'Browser', value: 'browser'\n            },{\n                text: 'Location', value: 'location'\n            },{\n                text: 'Device Type', value: 'device'\n            }]\n        }\n    },\n\n    data: {\n        currentCategory: '',\n        currentStartDate: null,\n        currentEndDate: null\n    }\n});\n```", "```js\n// app/view/SubPage.js\nExt.define('Instrumatics.view.SubPage',{\n    extend: 'Ext.Container',\n\n    requires: [\n        'Instrumatics.ux.chart.HistoricalRequestChart'\n    ],\n\n    xtype: 'subpage',\n\n    config: {\n\n        layout: {\n            type: 'vbox',\n            align: 'stretch'\n        },\n\n        chartCfg: {\n            header: {\n                items: [\n                    { xtype: 'datefield', fieldLabel: 'From', labelAlign: 'right', bind: '{currentStartDate}' },\n                    { xtype: 'datefield', fieldLabel: 'To', labelAlign: 'right', bind: '{currentEndDate}', labelWidth: 30 },\n                    { xtype: 'button', text: 'Refresh', margin: '0 0 0 10' }\n                ]\n            },\n            margin: 10, xtype: 'historical-request-chart', bind: '{logData}', flex: 1\n        },\n\n        gridCfg: {\n            xtype: 'grid',\n            margin: 10,\n            hideHeaders: true,\n            viewConfig: {\n              trackOver: false\n            },\n            disableSelection: true,\n            header: {\n                title: 'Breakdown',\n                items: [\n                    {\n                        xtype: 'combo',\n                        labelAlign: 'right', labelWidth: 60,\n                        fieldLabel: 'Category',\n                        bind: {\n                            store: '{categories}',\n                            value: '{currentCategory}'\n                        },\n                        queryMode: 'local',\n                        editable: false,\n                        forceSelection: true,\n                        displayField: 'text',\n                        valueField: 'value'\n                    }\n                ]\n            },\n            bind: '{logStatistics}',\n            flex: 1,\n            width: '100%',\n            columns: [\n                { name: 'Label', dataIndex: 'label', flex: 1 },\n                { name: 'Percentage', dataIndex: 'percentage', flex: 1 }\n            ]\n        }\n    },\n\n    initComponent: function(arguments) {\n        this.callParent(arguments);\n        this.add(this.getChartCfg());\n        this.add(this.getGridCfg());\n    }\n});\n```", "```js\n// app/view/sql/Sql.js\nExt.define(\"Instrumatics.view.sql.Sql\",{\n    extend: \"Instrumatics.view.SubPage\",\n    xtype: 'sql-logs',\n    viewModel: {\n        type: \"sql-sql\"\n    },\n    chartCfg: {\n        title: 'SQL Requests'\n    }\n});\n```", "```js\n    // app/view/SubPageModel.js\nExt.define('Instrumatics.view.SubPageModel', {\n    extend: 'Ext.app.ViewModel',\n    stores: {\n        logData: {\n            type: 'logentries',\n            autoLoad: true,\n            remoteFilter: true,\n            filters: [\n                { property: 'startDate', value: '{currentStartDate}' },\n                { property: 'endDate', value: '{currentEndDate}' }\n            ]\n        },\n\n        logStatistics: {\n            type: 'statistics',\n            autoLoad: true,\n            remoteFilter: true,\n            filters: [\n                { property: 'category', value: '{currentCategory}' },\n                { property: 'startDate', value: '{currentStartDate}' },\n                { property: 'endDate', value: '{currentEndDate}' }\n            ]\n        }\n    },\n\n    data: {\n        currentStartDate: null,\n        currentEndDate: null\n    }\n});\n```", "```js\nExt.define('Instrumatics.view.sql.SqlModel', {\n    extend: 'Instrumatics.view.SubPageModel',\n    alias: 'viewmodel.sql-sql',\n\n    stores: {\n        categories: {\n            fields: ['text', 'value'],\n            data: [{\n                text: 'Query Source', value: 'source'\n            },{\n                text: 'Query Type', value: 'type'\n            }]\n        }\n    },\n\n    data: {\n        currentCategory: 'source'\n    }\n});\n```"]