- en: Supporting Device Functionalities Using Ionic Native
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Ionic Native 支持设备功能
- en: 'In this chapter, we will cover the following tasks related to native device
    feature support:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍与原生设备功能支持相关的以下任务：
- en: Taking a photo using the camera plugin
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用相机插件拍照
- en: Sharing content using the social-sharing plugin
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用社交分享插件分享内容
- en: Displaying a local notification using the local notification plugin
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用本地通知插件显示本地通知
- en: Fingerprint authentication using the fingerprint AIO plugin.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用指纹 AIO 插件进行指纹认证。
- en: Creating a media player and adding a media player notification control
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个媒体播放器和添加媒体播放器通知控件
- en: Creating a taxi app using the Google Maps plugin and geocode support
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Google Maps 插件和地理编码支持创建出租车应用程序
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, you will learn how to access some common features of a device,
    such as a camera, contact list, email, and maps. Some of these features can be
    written in a JavaScript-only environment, but the performance is not on a par
    with native support.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何访问设备的一些常见功能，例如相机、联系名单、电子邮件和地图。其中一些功能可以仅使用 JavaScript 环境编写，但性能并不与原生支持相媲美。
- en: Cordova has a very well-supported community with many plugins. You may want
    to check out [http://plugins.cordova.io/](http://plugins.cordova.io/) to understand
    what is out there. Luckily, you don't need to deal with these plugins directly.
    You will use the Ionic Native ([http://ionicframework.com/docs/v2/native/](http://ionicframework.com/docs/v2/native/))
    service on top of Cordova and Angular. Keep in mind that you have to use Ionic
    Native instead of ngCordova for Ionic 2+ because of compatibility issues. You
    can only use ngCordova for Ionic 1.x.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Cordova 拥有一个非常支持的社区，拥有许多插件。你可能想查看 [http://plugins.cordova.io/](http://plugins.cordova.io/)
    以了解有哪些插件。幸运的是，你不需要直接处理这些插件。你将使用在 Cordova 和 Angular 之上的 Ionic Native ([http://ionicframework.com/docs/v2/native/](http://ionicframework.com/docs/v2/native/))
    服务。请注意，由于兼容性问题，你必须使用 Ionic Native 而不是 ngCordova 来支持 Ionic 2+。你只能为 Ionic 1.x 使用
    ngCordova。
- en: Taking a photo using the camera plugin
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用相机插件拍照
- en: 'In this section, you will make an app to take a picture using the device camera
    or load an existing picture from the device album. The picture could be either
    in the Base64 format or saved in a local filesystem relating to your app. The
    following is a screenshot of the app:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将制作一个应用程序，使用设备相机拍照或从设备相册加载现有图片。图片可以是 Base64 格式，也可以保存在与你的应用程序相关的本地文件系统中。以下是该应用程序的截图：
- en: '![](img/c34edd84-09b4-46e2-b9f8-5a58598ae1c5.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/c34edd84-09b4-46e2-b9f8-5a58598ae1c5.png)'
- en: 'Here is the high-level process:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是高级流程：
- en: Access the Cordova camera plugin to trigger camera capture and get the image
    back in the Base64 or URI format
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 Cordova 相机插件以触发相机捕获，并以 Base64 或 URI 格式获取图像
- en: Parse the Base64 data or URI on an `<img>` DOM object
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `<img>` DOM 对象上解析 Base64 数据或 URI
- en: Display the URI if it's in the URI format
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 URI 格式，则显示 URI
- en: Capture an event of a toggle component
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 捕获一个切换组件的事件
- en: Display long data (for example, URI) using a horizontal scroll
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用水平滚动显示长数据（例如，URI）
- en: Getting ready
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have a physical device ready in order to test the camera capability.
    It's possible to just run the code via an emulator, but the filesystem support
    might look different across the various platforms.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试相机功能，你应该准备一个物理设备。虽然可以通过模拟器运行代码，但不同平台上的文件系统支持可能会有所不同。
- en: How to do it...
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following are the instructions to add camera support:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是为添加相机支持的说明：
- en: 'Start a blank project (for example, `MyCamera`) and go to that folder:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始一个空白项目（例如，`MyCamera`）并进入该文件夹：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the Cordova camera plugin and Ionic Native wrapper for the plugin using
    the following code:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码添加 Cordova 相机插件和该插件的 Ionic Native 封装：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You should not use the `cordova add` command line directly; instead use `ionic
    cordova plugin add`
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你不应该直接使用 `cordova add` 命令行；而是使用 `ionic cordova plugin add`
- en: You should be able to see a new folder, `cordova-plugin-camera`, being added
    to the `/plugins` folder.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能够看到一个新文件夹，`cordova-plugin-camera`，被添加到 `/plugins` 文件夹中。
- en: 'Replace `./src/pages/home/home.html` with the following code:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `./src/pages/home/home.html` 替换为以下代码：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Since you only have one page, this template will show two buttons and an area
    to display the image.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你只有一个页面，这个模板将显示两个按钮和一个用于显示图片的区域。
- en: 'Replace `./src/pages/home/home.ts` with the following code:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `./src/pages/home/home.ts` 替换为以下代码：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'There is only one method: `getPicture()`. This method will return the photo
    data so that the template can render.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 只有一种方法：`getPicture()`。此方法将返回照片数据，以便模板可以渲染。
- en: 'Replace `.src/pages/home/home.scss` with the following code:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `.src/pages/home/home.scss` 替换为以下代码：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: There are only a few minor changes in the styling so that you can keep them
    simple.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在样式上只有一些小的改动，所以你可以保持它们简单。
- en: 'Replace `./src/app/app.module.ts` with the following code:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `./src/app/app.module.ts` 替换为以下代码：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Connect your device to your computer.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的设备连接到电脑。
- en: 'Go to the Terminal and execute the following command line for iOS:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往终端并执行以下命令行以进行 iOS 操作：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you are not able to push the app to your physical device using the preceding
    command line, you can use `ionic cordova run ios --device` to specify the CLI
    to use the physical device instead of a simulator.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你无法使用前面的命令行将应用推送到你的物理设备，你可以使用 `ionic cordova run ios --device` 来指定 CLI 使用物理设备而不是模拟器。
- en: 'If you want to run the app on your Android device, use the following code:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在 Android 设备上运行应用，请使用以下代码：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When you run the app and take a picture, you should see the app, as shown in
    the following screenshot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行应用并拍照时，你应该能看到应用，如下面的截图所示：
- en: '![](img/ee72ca1d-c441-4da0-8fd8-3ca331c41857.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ee72ca1d-c441-4da0-8fd8-3ca331c41857.png)'
- en: How it works...
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`Camera.getPicture()` is just an abstraction of `navigator.camera.getPicture()`
    from the Cordova camera plugin. If you are already familiar with Cordova or ngCordova
    from Ionic 1, this should be very familiar. Let''s start with the template. You
    have the following two buttons, which trigger the same, `getPicture()`, method:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`Camera.getPicture()` 只是 Cordova 相机插件的 `navigator.camera.getPicture()` 的抽象。如果你已经熟悉来自
    Ionic 1 的 Cordova 或 ngCordova，这应该非常熟悉。让我们从模板开始。你有以下两个按钮，它们将触发相同的 `getPicture()`
    方法：'
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'These are just different ways to access photos: either from the camera itself
    or from the existing photos in the phone''s album. For the photo to render, you
    need to pass the photo data into the `src` attribute, as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是访问照片的不同方式：要么从相机本身，要么从手机相册中的现有照片。为了使照片渲染，你需要将照片数据传递到 `src` 属性，如下所示：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Note that you only want to show this `<img>` tag when `imageData` exists with
    some data. The `imageData` variable could be Base64 or an internal URL of the
    photo. To specify this option, there is a toggle button, as shown here:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你只想在 `imageData` 存在且包含数据时显示此 `<img>` 标签。`imageData` 变量可以是 Base64 或照片的内部 URL。为了指定此选项，有一个切换按钮，如图所示：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You will use the `useURI` variable inside the class, as illustrated, to determine
    which format to return the photo data in:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在类中使用 `useURI` 变量，如图所示，以确定返回照片数据的格式：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Both `useURI` and `sourceType` will be used in the `getPicture()` function,
    as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`useURI` 和 `sourceType` 都将在 `getPicture()` 函数中使用，如下所示：'
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: It's important to adjust the quality, `targetWidth`, and `targetHeight` to low
    so that the photo is not too big, which could crash the device, especially when
    it doesn't have enough memory. When you return the Base64 data, it must be prefixed
    with the string `data:image/jpeg;base64`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 调整质量、`targetWidth` 和 `targetHeight` 至低非常重要，这样照片就不会太大，否则可能会使设备崩溃，尤其是在内存不足的情况下。当你返回
    Base64 数据时，必须在字符串前加上 `data:image/jpeg;base64`。
- en: It is also important to note that inside `app.module.ts`, we are adding the
    `Camera` plugin to the NgModule's provider's array. This is very important because
    it allows us to use the plugin via Angular's Dependency Injection system. We have
    to do this for each plugin throughout this chapter.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要注意，在 `app.module.ts` 中，我们正在将 `Camera` 插件添加到 NgModule 的提供者数组中。这非常重要，因为它允许我们通过
    Angular 的依赖注入系统使用插件。在本章中，我们必须为每个插件都这样做。
- en: One item that isn't discussed here is the ability to post image data to the
    server. The common scenario is to upload the file from the filesystem. It's not
    a good idea to send data as Base64 because of the data size, which is double the
    original binary size.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有讨论的一项功能是将图像数据发布到服务器。常见场景是从文件系统中上传文件。由于数据大小是原始二进制大小的两倍，因此将数据作为 Base64 发送不是一个好主意。
- en: There's more...
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: It is possible to create Instagram-like filter effects using just JavaScript.
    You can leverage an existing library, such as `Filterous` ([https://github.com/girliemac/Filterous](https://github.com/girliemac/Filterous)),
    to modify the image canvas directly.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 只使用 JavaScript 就可以创建类似 Instagram 的滤镜效果。你可以利用现有的库，例如 `Filterous` ([https://github.com/girliemac/Filterous](https://github.com/girliemac/Filterous))，直接修改图像画布。
- en: There is an Instagram plugin ([https://github.com/vstirbu/InstagramPlugin](https://github.com/vstirbu/InstagramPlugin))
    for Cordova on GitHub. You could write some extra code to pass the image to Instagram.
    The user must have Instagram installed on the phone first, though. This idea is
    nice when you plan to do some cool image processing (for example, adding funny
    text) before letting Instagram perform the photo filter operation.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub上有一个针对Cordova的Instagram插件([https://github.com/vstirbu/InstagramPlugin](https://github.com/vstirbu/InstagramPlugin))。您可以为传递图片到Instagram编写一些额外的代码。不过，用户必须首先在手机上安装Instagram。当您计划在Instagram执行照片滤镜操作之前做一些酷炫的图像处理（例如，添加有趣的文字）时，这个想法很不错。
- en: You could even add the Cordova's social network plugin and post the resulting
    images to Twitter or Facebook.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您甚至可以添加Cordova的社交网络插件并将生成的图片发布到Twitter或Facebook。
- en: Sharing content using the social sharing plugin
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用社交分享插件分享内容
- en: If you develop an app with shareable content, you might want to utilize the
    native device feature to share via the device's authorized social media accounts.
    There are several benefits to using this approach. First, users don't need to
    open a separate browser to log in to their social media account each time they
    want to share. Second, all the information can be filled out programmatically,
    such as title, body, link, or image. Finally, since this is a native feature of
    the device, the menu selection allows users to see multiple accounts, which they
    are already familiar with, to choose from. The social sharing plugin can greatly
    enhance the user experience.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您开发了一个具有可分享内容的应用，您可能希望利用设备的原生功能通过设备的授权社交媒体账户进行分享。使用这种方法有几个好处。首先，用户每次想要分享时，不需要打开单独的浏览器来登录他们的社交媒体账户。其次，所有信息都可以通过编程方式填写，例如标题、正文、链接或图片。最后，由于这是设备的原生功能，菜单选择允许用户看到他们已经熟悉的多个账户，从而进行选择。社交分享插件可以极大地提升用户体验。
- en: 'This is the app that you will build:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您将要构建的应用：
- en: '![](img/aa9d354c-f096-45da-a550-ec72ef532a14.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/aa9d354c-f096-45da-a550-ec72ef532a14.png)'
- en: 'When the user clicks on the SHARE button, the app will show the following native
    button menu for social media account selection:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击分享按钮时，应用将显示以下用于社交媒体账户选择的原生按钮菜单：
- en: '![](img/e026109e-9ac5-42c9-91c6-94baa394239c.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e026109e-9ac5-42c9-91c6-94baa394239c.png)'
- en: 'If the user selects Twitter, a popup will show up with all the information
    prefilled, as illustrated in the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户选择了Twitter，将会弹出一个包含所有预先填写信息的窗口，如下面的截图所示：
- en: '![](img/dccc0885-866d-4a22-a226-a04162f5acbb.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dccc0885-866d-4a22-a226-a04162f5acbb.png)'
- en: After posting on Twitter, the user goes right back to the app without ever leaving
    it.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在Twitter上发布后，用户可以直接返回应用，而无需离开。
- en: Getting ready
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have a physical device or simulator ready in order to test the social
    sharing capability.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试社交分享功能，您应该准备好一个物理设备或模拟器。
- en: How to do it...
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following are the instructions:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是指示：
- en: 'Start a blank project (for example, `LinkSocialShare`), as follows, and go
    to that folder:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始一个空白项目（例如，`LinkSocialShare`），如下所示，并进入该文件夹：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add the social sharing plugin and Ionic Native wrapper for the plugin with
    the following command line:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令行添加社交分享插件和插件的Ionic Native包装器：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Open `./src/pages/home/home.html` and replace its contents with the following
    code:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./src/pages/home/home.html`并将其内容替换为以下代码：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This is a very simple page with the card element. The Like button is there just
    for cosmetic reasons without code implementation. However, all the JavaScript
    logic will focus on the
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的页面，包含卡片元素。点赞按钮只是出于美观原因而存在，没有代码实现。然而，所有的JavaScript逻辑都将集中在
- en: SHARE button.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 分享按钮。
- en: 'Open `./src/pages/home/home.ts`, as shown here:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./src/pages/home/home.ts`，如下所示：
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Replace `./src/app/app.module.ts` with the following code:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`./src/app/app.module.ts`替换为以下代码：
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Go to the Terminal and execute either of the following command lines:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往终端并执行以下任一命令行：
- en: '[PRE18]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works...
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'You can start looking at the template because that is where the social media
    content is extracted from. The subject value is from the `#messageSubject` local
    variable, as illustrated:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以开始查看模板，因为社交媒体内容是从那里提取的。主题值来自`#messageSubject`局部变量，如下所示：
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the preceding case, the subject is `Ionic Developer` because you will access
    `messageSubject.innerText` later on. `messageSubject` is just referencing your
    H2 DOM node.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，主题是`Ionic Developer`，因为您稍后将会访问`messageSubject.innerText`。`messageSubject`只是引用您的H2
    DOM节点。
- en: 'Similarly, the body is from `#messageBody`, as shown here:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，正文来自`#messageBody`，如图所示：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'When the user clicks on the SHARE button, it will trigger the `sendShare()`
    method, as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击“分享”按钮时，将触发`sendShare()`方法，如下所示：
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Let's take a look at your `home.ts` to understand how `sendShare()` works.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看您的`home.ts`，了解`sendShare()`是如何工作的。
- en: 'First, you need to import the `SocialSharing` module from Ionic Native, as
    illustrated:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要从Ionic Native导入`SocialSharing`模块，如图所示：
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To share your content and trigger the social media menu, the logic, as shown,
    is very simple:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要分享内容并触发社交媒体菜单，逻辑，如图所示，非常简单：
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If you want to share a file, you can replace the third parameter (where it is
    `null`) with the URL to the user's local filesystem. This is useful when you want
    people to send a PDF or JPG via email or post it on Facebook.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想分享一个文件，可以将第三个参数（其中为`null`）替换为用户本地文件系统的URL。当您想让人通过电子邮件发送PDF或JPG或将其发布在Facebook上时，这很有用。
- en: There's more...
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: To see the latest update of the social sharing plugin, you can visit the documentation
    page at [http://ionicframework.com/docs/v2/native/social-sharing/](http://ionicframework.com/docs/v2/native/social-sharing/).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看社交分享插件的最新更新，您可以访问[http://ionicframework.com/docs/v2/native/social-sharing/](http://ionicframework.com/docs/v2/native/social-sharing/)的文档页面。
- en: Displaying a local notification using the local notification plugin
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用本地通知插件显示本地通知
- en: When you are developing mobile applications, your app might want to notify the
    user about something. If the information is coming from the backend, we use push
    notifications. But, if the information is generated by the app, locally on the
    device, we can use a local notification for that.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发移动应用程序时，您的应用程序可能需要通知用户某些信息。如果信息来自后端，我们使用推送通知。但是，如果信息是由应用程序在设备本地生成的，我们可以使用本地通知来实现这一点。
- en: This recipe is intended to help you understand how local notifications work.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱旨在帮助您了解本地通知是如何工作的。
- en: When you open the app, you will see the following page.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当您打开应用程序时，您将看到以下页面。
- en: '![](img/3c4a369d-e77b-483e-aecb-857278e5e80d.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3c4a369d-e77b-483e-aecb-857278e5e80d.png)'
- en: 'You can input anything in the input box and then click on SHOW NOTIFICATION.
    You can also schedule a notification to show later. This is what a notification
    looks like in the notification area:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在输入框中输入任何内容，然后点击“显示通知”。您还可以安排稍后显示的通知。这是通知区域中通知的外观：
- en: '![](img/0085089c-049a-4876-952f-c8ac8bf3f02d.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0085089c-049a-4876-952f-c8ac8bf3f02d.png)'
- en: Getting ready
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have a physical device ready in order to test local notifications.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该准备一个物理设备以便测试本地通知。
- en: How to do it...
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Here are the instructions:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是说明：
- en: 'Create a blank Ionic app (for example, `Notifications`) and `cd` to that folder,
    as shown here:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个空的Ionic应用程序（例如，`Notifications`）并`cd`到该文件夹，如图所示：
- en: '[PRE24]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Install the local notification plugin and Ionic native wrapper for the plugin
    using the following command:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令安装本地通知插件和插件的Ionic本地包装器：
- en: '[PRE25]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Open `./src/pages/home/home.html` and replace with the following code:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./src/pages/home/home.html`并替换以下代码：
- en: '[PRE26]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Open `./src/pages/home/home.ts` and replace with the following code:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./src/pages/home/home.ts`并替换以下代码：
- en: '[PRE27]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Replace `./src/app/app.module.ts` with the following code:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`./src/app/app.module.ts`替换为以下代码：
- en: '[PRE28]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Run the app in the Terminal using the following command line:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中使用以下命令行运行应用程序：
- en: '[PRE29]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: How it works...
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'First, let''s take a look at the template `home.html`:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看一下模板`home.html`：
- en: '[PRE30]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: We have an input field where we add text for notifications. Then we have a button
    to show notifications immediately. Then we have an `ion-datetime` input, which
    is used to specify the time in seconds. It will be used to schedule a notification
    for the future, using the Schedule a Notification button. Finally, we have a Clear
    all Notifications button to clear notifications in the device's notification area.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个输入字段，用于添加通知文本。然后我们有一个按钮用于立即显示通知。然后我们有一个`ion-datetime`输入，用于指定秒数。它将用于通过“安排通知”按钮安排未来的通知。最后，我们有一个清除所有通知按钮，用于清除设备通知区域中的通知。
- en: 'In your `home.ts`, you must import the `LocalNotifications` module first, as
    shown here:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的`home.ts`中，您必须首先导入`LocalNotifications`模块，如图所示：
- en: '[PRE31]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'When someone clicks on the **Show Notification** or **Schedule a Notification**
    buttons, it fires the **Show Notification** button. Here is the `showNotification`
    method:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当有人点击“显示通知”或“安排通知”按钮时，会触发“显示通知”按钮。以下是`showNotification`方法：
- en: '[PRE32]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '`The showNotifications` method takes an argument `type`. `type` is used to
    determine if we want to show a notification immediately or at some time in the
    future. if `type` is equal to `now`, we show it immediately; otherwise, we schedule
    the notification to show up later on. For showing notifications, we use the plugin''s
    `schedule` method. We have to specify the `id` , `text`, and `at` values. The
    `at` value is used to schedule a notification for showing in the future.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`The showNotifications` 方法接受一个参数 `type`。`type` 用于确定我们是否希望立即显示通知或在未来的某个时间显示。如果
    `type` 等于 `now`，我们立即显示它；否则，我们安排稍后显示通知。为了显示通知，我们使用插件的 `schedule` 方法。我们必须指定 `id`、`text`
    和 `at` 值。`at` 值用于安排将来显示的通知。'
- en: '`The clearNotifications` method clears all the notifications.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`The clearNotifications` 方法清除所有通知。'
- en: There's more...
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Take a look at the GitHub page of the local notification plugin for more information,
    at [https://github.com/katzer/cordova-plugin-local-notifications](https://github.com/katzer/cordova-plugin-local-notifications).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 查看本地通知插件的 GitHub 页面以获取更多信息，[https://github.com/katzer/cordova-plugin-local-notifications](https://github.com/katzer/cordova-plugin-local-notifications)。
- en: Fingerprint authentication using the fingerprint AIO plugin
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用指纹 AIO 插件进行指纹验证
- en: Gone are the days when you wanted to just use a password authentication system.
    Authentication is becoming stronger and more intuitive. Most iOS devices these
    days have a fingerprint sensor and this trend is now starting to prevail in Android
    devices too. Users can secure their devices using a fingerprint password. Luckily,
    for developers like us, we can use the same technology to secure content inside
    our application, which the user can access after authentication.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 那些只想使用密码验证系统的日子已经过去了。验证正在变得更强和更直观。如今，大多数 iOS 设备都有指纹传感器，这种趋势现在也开始在 Android 设备中盛行。用户可以使用指纹密码来保护他们的设备。幸运的是，对于像我们这样的开发者来说，我们可以使用相同的技术来保护我们应用程序内的内容，用户在验证后可以访问这些内容。
- en: In this recipe, we are creating an unlock secret app. It is basically a joke
    app. The home page looks like the following.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们正在创建一个解锁秘密应用程序。它基本上是一个玩笑应用程序。主页看起来如下。
- en: '![](img/a8c27258-b274-466f-9a8f-06f93641d8ff.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a8c27258-b274-466f-9a8f-06f93641d8ff.png)'
- en: 'When the user clicks on the **Reveal Secret** button, it shows the Fingerprint
    Authentication dialog:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击 **揭示秘密** 按钮时，它会显示指纹验证对话框：
- en: '![](img/d2ce4a9b-0de8-4687-94f9-9e3c0d5ef848.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d2ce4a9b-0de8-4687-94f9-9e3c0d5ef848.png)'
- en: 'And when the user authenticates, we show a joke on the screen. It is as simple
    as that:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户进行验证时，我们在屏幕上显示一个笑话。就这么简单：
- en: '![](img/45cc8813-8cad-48bf-b5c1-928b40498cbf.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/45cc8813-8cad-48bf-b5c1-928b40498cbf.png)'
- en: Getting ready
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have a physical device with a fingerprint sensor in order to test
    this application.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试这个应用程序，你应该有一个带有指纹传感器的物理设备。
- en: How to do it...
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Here are the instructions:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是说明：
- en: 'Create a blank Ionic app (for example, `FingerAuth`) and `cd` to that folder,
    as shown here:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个空白 Ionic 应用程序（例如，`FingerAuth`）并 `cd` 到该文件夹，如下所示：
- en: '[PRE33]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Install the fingerprint `aio` plugin and the Ionic Native wrapper, using the
    following command:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令安装指纹 `aio` 插件和 Ionic Native 包装器：
- en: '[PRE34]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Open `./src/pages/home/home.html` and replace with the following code:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `./src/pages/home/home.html` 并替换为以下代码：
- en: '[PRE35]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Open `./src/pages/home/home.ts` and replace with the following code:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `./src/pages/home/home.ts` 并替换为以下代码：
- en: '[PRE36]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Replace `./src/pages/home/home.scss` with the following code:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `./src/pages/home/home.scss` 替换为以下代码：
- en: '[PRE37]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Replace `./src/app/app.module.ts` with the following code:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `./src/app/app.module.ts` 替换为以下代码：
- en: '[PRE38]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Run the app in the Terminal, using the following command line:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中运行应用程序，使用以下命令行：
- en: '[PRE39]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: How it works...
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'First, let''s take a look at the template `home.html`:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看模板 `home.html`：
- en: '[PRE40]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: If the device doesn't have a fingerprint sensor, we display a notice on the
    screen saying that This Device doesn't have Fingerprint Sensor. Otherwise, we
    show a Reveal a Secret Button. When the user clicks on it, it opens a Fingerprint
    Authentication dialog.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设备没有指纹传感器，我们会在屏幕上显示一条通知说 This Device doesn't have Fingerprint Sensor。否则，我们显示一个揭示秘密按钮。当用户点击它时，它会打开指纹验证对话框。
- en: 'In your `home.ts`, you must import the `FingerprintAIO` module first, as shown
    here:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 `home.ts` 中，你必须首先导入 `FingerprintAIO` 模块，如下所示：
- en: '[PRE41]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: When the page is loaded, we check the availability of the sensor in `ionViewDidLoad`
    hook via the plugin's `isAvailable` method. It returns a promise. If it is resolved,
    it means the sensor is available. The `authenticate` method is fired when the
    user clicks on the Reveal a secret button in the UI.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 当页面加载时，我们通过插件中的`isAvailable`方法在`ionViewDidLoad`钩子中检查传感器的可用性。它返回一个承诺。如果已解析，则表示传感器可用。当用户在UI中点击“揭示秘密”按钮时，会触发`authenticate`方法。
- en: 'Here is the `authenticate()` method:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`authenticate()`方法：
- en: '[PRE42]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Inside this method, we call the plugin's `show` method, which returns a promise.
    If the promise is resolved, it means the user is authenticated and we reveal the
    joke. Otherwise, we do nothing.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在此方法中，我们调用插件的`show`方法，它返回一个承诺。如果承诺已解析，则表示用户已认证，我们将揭示笑话。否则，我们不做任何事情。
- en: There's more...
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: You can read more about the fingerprint AIO plugin at [https://github.com/NiklasMerz/cordova-plugin-fingerprint-aio](https://github.com/NiklasMerz/cordova-plugin-fingerprint-aio).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/NiklasMerz/cordova-plugin-fingerprint-aio](https://github.com/NiklasMerz/cordova-plugin-fingerprint-aio)了解更多关于指纹AIO插件的信息。
- en: Creating a media player with the Media Player notification control
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用媒体播放器通知控件创建媒体播放器
- en: Media Player is an important app in a user's phone. Almost every media app has
    a control in the notification area nowadays. In this recipe, we are going to create
    a very simple media player with **Play** and **Pause** buttons and we will add
    Media Player controls in the notification area.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体播放器是用户手机中的一个重要应用。现在几乎每个媒体应用都在通知区域有一个控件。在这个菜谱中，我们将创建一个非常简单的媒体播放器，带有**播放**和**暂停**按钮，并将媒体播放器控件添加到通知区域。
- en: 'This is what the home page of our app will look like:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的应用主页将看起来像：
- en: '![](img/86f6c6aa-f7ce-4918-8060-4341ea7ee355.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/86f6c6aa-f7ce-4918-8060-4341ea7ee355.png)'
- en: 'And this is what the notification area will look like:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是通知区域将看起来像：
- en: '![](img/03e3a11e-a3b5-43da-9d74-f4265f4df9bf.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/03e3a11e-a3b5-43da-9d74-f4265f4df9bf.png)'
- en: When the user clicks on the **Play** button inside the app, it shows controls
    in the notification area. When the user clicks on the **Pause** button inside
    the app, it updates the music controls too. This also works the other way around.
    You can play and pause the media from Music Control in the notification area.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在应用内点击**播放**按钮时，它会在通知区域显示控件。当用户在应用内点击**暂停**按钮时，它也会更新音乐控件。这也适用于相反的情况。您可以从通知区域的音乐控件播放和暂停媒体。
- en: Getting ready
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should have a physical device ready in order to test this app, since it
    uses the Cordova plugin.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该应用使用了Cordova插件，因此您应该准备一个物理设备来测试此应用。
- en: How to do it...
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Here are the instructions:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是说明：
- en: 'Create a blank Ionic app (for example, `MediaPlayer`) and `cd` to that folder,
    as shown here:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个空的Ionic应用（例如，`MediaPlayer`），然后`cd`到该文件夹，如下所示：
- en: '[PRE43]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Install the Music Control plugin and it''s Ionic Native wrapper using the following
    command:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令安装音乐控件插件及其Ionic Native包装器：
- en: '[PRE44]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Open `./src/pages/home/home.html` and replace with the following code:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./src/pages/home/home.html`并替换为以下代码：
- en: '[PRE45]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Open `./src/pages/home/home.ts` and replace with the following code:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`./src/pages/home/home.ts`并替换为以下代码：
- en: '[PRE46]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Replace `./src/pages/home/home.scss` with the following code:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`./src/pages/home/home.scss`替换为以下代码：
- en: '[PRE47]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Create a file at `./src/services/audio-service.ts` and add the following content:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`./src/services/audio-service.ts`中创建一个文件并添加以下内容：
- en: '[PRE48]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Replace `./src/app/app.module.ts` with the following code:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`./src/app/app.module.ts`替换为以下代码：
- en: '[PRE49]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Run the app in the Terminal using the following command line:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令行在终端中运行应用：
- en: '[PRE50]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: How it works...
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'First, let''s take a look at the template `home.html`:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看一下模板`home.html`：
- en: '[PRE51]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: It is very simple. We are showing the track's thumbnail and track title along
    with the track artist in `ion-item`. Then we have the `play` and `pause` buttons,
    shown inside `ion-row`.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 非常简单。我们在`ion-item`中显示了轨道的缩略图和轨道标题，以及轨道艺术家。然后我们有`play`和`pause`按钮，它们在`ion-row`内部显示。
- en: At `home.ts`, we have a list of audio tracks for our media player. For the sake
    of simplicity, I just added a single track, so that we don't add too much extra
    functionality and we remain focused on the plugin part. Then we have the `play`
    and `pause` methods. These methods are linked to the `play` and `pause` buttons
    in the UI and they are fired when the user clicks on them.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在`home.ts`中，我们有媒体播放器的音频轨道列表。为了简化，我只添加了一个轨道，这样我们就不添加太多额外的功能，并保持对插件部分的关注。然后我们有`play`和`pause`方法。这些方法与UI中的`play`和`pause`按钮相关联，并且当用户点击它们时会被触发。
- en: Inside the `play` button, we fire AudioProvider's `play` method with the track's
    source `url` and also call the `createControls` method. This `createControls`
    method creates **Music Control** in the notification area of the device.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在`play`按钮内部，我们使用轨道的源`url`触发AudioProvider的`play`方法，并调用`createControls`方法。这个`createControls`方法在设备的通知区域创建**音乐控制**。
- en: Inside the `pause` button, we fire AudioProvider's `pause` method and also update
    Music Control by telling it that we have paused the audio and it changes the UI
    accordingly.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在`pause`按钮内部，我们触发AudioProvider的`pause`方法，并更新音乐控制，告诉它我们已经暂停了音频，并且它相应地更改了UI。
- en: 'In the `createControls()` method:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在`createControls()`方法中：
- en: '[PRE52]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Also, take a look at our miniature `AudioProvider`:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，看看我们的微型`AudioProvider`：
- en: '[PRE53]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: In the `play` method, we get `url` as an argument. if the new `url` is different
    to the previous one, we make the `Audio` object using the url and load the media
    and then we play the media and set `this.isPaused` to `true`.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在`play`方法中，我们获取`url`作为参数。如果新的`url`与之前的不同，我们使用该`url`创建`Audio`对象，并加载媒体，然后播放媒体并将`this.isPaused`设置为`true`。
- en: In the `pause` method, we pause the track and set the `this.isPaused` Boolean
    to `true`, which is by default set to `false`.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在`pause`方法中，我们暂停轨道并将`this.isPaused`布尔值设置为`true`，默认设置为`false`。
- en: There's more...
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: For the sake of simplicity, we used only the play and pause buttons. But it
    is easy to implement forthcoming and previous features in the notification area
    as well as the app. Take a look at the GitHub page of the plugin at [https://github.com/homerours/cordova-music-controls-plugin](https://github.com/homerours/cordova-music-controls-plugin).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化，我们只使用了播放和暂停按钮。但是，很容易在通知区域以及应用中实现即将到来的下一首和上一首功能。查看插件的GitHub页面[https://github.com/homerours/cordova-music-controls-plugin](https://github.com/homerours/cordova-music-controls-plugin)。
- en: Creating a taxi app using the Google Maps plugin and geocode support
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Google Maps插件和地理编码支持创建出租车应用
- en: Today, many mobile apps utilize different mapping features, such as showing
    the current location, creating routes, and providing suggestive business searches.
    This section will show you how to use Ionic Native's Google Maps plugin to provide
    mapping support.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，许多移动应用利用不同的地图功能，例如显示当前位置、创建路线和提供建议性的商业搜索。本节将向您展示如何使用Ionic Native的Google Maps插件提供地图支持。
- en: 'You will create a taxi app that can do the following things:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 你将创建一个可以执行以下操作的出租车应用：
- en: Display Google Maps in fullscreen
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以全屏显示Google Maps
- en: Add a button overlay on top of the map
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在地图上添加一个按钮覆盖层
- en: Detect the current device location
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测当前设备位置
- en: Add a marker with any text
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加带有任何文本的标记
- en: 'This is the screenshot of the taxi app:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这是出租车应用的截图：
- en: '![](img/8fd4ce32-21f9-409f-844a-9a1c8604e6e3.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8fd4ce32-21f9-409f-844a-9a1c8604e6e3.png)'
- en: 'When users click on the PICK ME UP button, it will go to the current device
    location and show longitude and latitude information:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击PICK ME UP按钮时，它会跳转到当前设备位置并显示经纬度信息：
- en: '![](img/9763ff8d-e3f0-44e3-b5db-e5a685eefc0c.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9763ff8d-e3f0-44e3-b5db-e5a685eefc0c.png)'
- en: It is possible to use the HTML5 and JavaScript version of geolocation and maps
    instead of the Cordova plugin's. However, you will see a negative impact on performance.
    It's very obvious that if you use the SDK, map rendering and optimization tends
    to be faster. In addition, HTML5 geolocation sometimes has some strange bugs that
    require the user to accept permission twice-once for the app and once for the
    inside browser object.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用HTML5和JavaScript版本的地理位置和地图，而不是Cordova插件的。然而，你将看到性能上的负面影响。很明显，如果你使用SDK，地图渲染和优化通常会更快。此外，HTML5地理位置有时会有一些奇怪的bug，需要用户接受两次权限——一次为应用，一次为内部浏览器对象。
- en: Getting ready
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The Google Maps plugin requires a Google Maps API key for your project. You
    need a Google account and login to get started:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps插件需要为你的项目提供一个Google Maps API密钥。你需要一个Google账户并登录才能开始：
- en: Navigate to the Google APIs Console at [https://console.developers.google.com/cloud-resource-manager](https://console.developers.google.com/cloud-resource-manager).
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到Google APIs控制台[https://console.developers.google.com/cloud-resource-manager](https://console.developers.google.com/cloud-resource-manager)。
- en: 'Create a project if you don''t have one yet. Just fill in the required fields:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你还没有创建项目，请创建一个。只需填写所需的字段：
- en: '![](img/ed874cd7-cecf-47c2-95c4-749bb74794f6.png)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed874cd7-cecf-47c2-95c4-749bb74794f6.png)'
- en: 'You need to enable the Google Maps SDK for iOS, the Google Maps Android API,
    or both. It depends on how many platforms you plan to support. Let''s select Google
    Maps SDK for iOS for this example:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要启用 Google Maps SDK for iOS、Google Maps Android API 或两者都启用。这取决于您计划支持多少平台。在这个例子中，让我们选择
    Google Maps SDK for iOS：
- en: '![](img/2c4294eb-0c36-47df-9950-677efab1cb77.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c4294eb-0c36-47df-9950-677efab1cb77.png)'
- en: 'Click on the Enable button:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击启用按钮：
- en: '![](img/4d4278b0-e934-464c-bd47-60bb2de6d248.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4d4278b0-e934-464c-bd47-60bb2de6d248.png)'
- en: 'Go to Credentials to create your own key:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往凭证以创建您自己的密钥：
- en: '![](img/baba030c-cddc-42d7-ba8d-22903e9eacac.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![](img/baba030c-cddc-42d7-ba8d-22903e9eacac.png)'
- en: 'Click on the Create credential | API key option:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建凭证 | API 密钥选项：
- en: '![](img/0fbe20ba-5f51-4d48-be77-e05501fd991c.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0fbe20ba-5f51-4d48-be77-e05501fd991c.png)'
- en: 'Select the RESTRICT KEY option. In the following example, you will select the
    iOS apps radio button:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 RESTRICT KEY 选项。在以下示例中，您将选择 iOS 应用程序单选按钮：
- en: '![](img/ef08f867-6e5b-4611-98cc-ce2ccea64f7f.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ef08f867-6e5b-4611-98cc-ce2ccea64f7f.png)'
- en: 'Fill in your app''s Bundle ID. You might not know exactly what it is yet because
    Ionic will create a random ID. So just put in `com.ionicframework.starter` and
    change that later:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写您应用程序的 Bundle ID。您可能还不知道确切是什么，因为 Ionic 将创建一个随机的 ID。所以只需输入 `com.ionicframework.starter`
    并稍后更改它：
- en: '![](img/cf00ead3-9b73-43c0-98a5-29b226f5bc48.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cf00ead3-9b73-43c0-98a5-29b226f5bc48.png)'
- en: Click on the Save button.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击保存按钮。
- en: 'Now you should see the key for the iOS applications section as follows:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您应该会看到如下所示的 iOS 应用程序部分的关键字：
- en: '![](img/585369c7-a90f-49dc-aee9-48fed79047fa.png)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![](img/585369c7-a90f-49dc-aee9-48fed79047fa.png)'
- en: Copy the API key so that you can use it to add the Cordova Google Maps plugin.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制 API 密钥，以便您可以使用它来添加 Cordova Google Maps 插件。
- en: How to do it...
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s start an Ionic project from scratch and add Google Maps features, as
    follows:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从零开始创建一个 Ionic 项目并添加 Google Maps 功能，如下所示：
- en: 'Create a blank Ionic project, as shown, and go to that folder:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照所示创建一个空的 Ionic 项目，并进入该文件夹：
- en: '[PRE54]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Replace the iOS platform with version 3.9.0 with the following command lines:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令行将 iOS 平台替换为版本 3.9.0：
- en: '[PRE55]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: You have to pick `ios@3.9.0` specifically because the current version of the
    Cordova Google Maps plugin only works with this version. Otherwise, your build
    will fail. You should experiment with the newest version if possible.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须特别选择 `ios@3.9.0`，因为当前版本的 Cordova Google Maps 插件仅与此版本兼容。否则，您的构建将失败。如果可能的话，您应该尝试最新的版本。
- en: 'Install the Google Maps plugin with your copied key replacing `` `YOUR_IOS_API_KEY_IS_HERE
    ``, as follows:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您复制的密钥替换 `` `YOUR_IOS_API_KEY_IS_HERE ``，如下所示安装 Google Maps 插件：
- en: '[PRE56]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'If you do this for both iOS and Android, use the following command line:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您为 iOS 和 Android 都这样做，请使用以下命令行：
- en: '[PRE57]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: You have to use the Cordova CLI here because using the Ionic CLI to add Google
    Maps with the API Key will not work
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须在这里使用 Cordova CLI，因为使用 Ionic CLI 添加带有 API 密钥的 Google Maps 不会起作用
- en: 'Open `./src/pages/home/home.html` to modify your template, as shown here:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `./src/pages/home/home.html` 以修改您的模板，如下所示：
- en: '[PRE58]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The main element here is your `div` with the `map` ID because that is where
    you have to inject the Google Maps object.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的主要元素是您的具有 `map` ID 的 `div`，因为您必须在这里注入 Google Maps 对象。
- en: 'Edit your `./src/pages/home/home.ts` in the same folder:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一文件夹中编辑您的 `./src/pages/home/home.ts`：
- en: '[PRE59]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Make some minor adjustments to the style sheet so that the map can take over
    the full screen. Edit `./src/pages/home/home.scss`, as illustrated here:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对样式表进行一些小的调整，以便地图可以占据整个屏幕。编辑 `./src/pages/home/home.scss`，如下所示：
- en: '[PRE60]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Go to the Terminal and then run the application:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往终端并运行应用程序：
- en: '[PRE61]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: You can use either one of the preceding command lines, depending on the platform.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用上述任意一条命令行，具体取决于平台。
- en: How it works...
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The core of this app is mainly in the JavaScript code-`home.ts`. In order to
    use the plugin object, you should declare it on top, as shown here:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序的核心主要在 JavaScript 代码 `home.ts` 中。为了使用插件对象，您应该在顶部声明它，如下所示：
- en: '[PRE62]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'While it might seem that there are a lot of moving parts, the basic flow is
    very simple, as listed here:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然看起来有很多部分在移动，但基本流程非常简单，如下所示：
- en: Whenever Ionic and Cordova are ready, trigger `platform.ready().then` to initialize
    the map by calling `showMap()` in the constructor of the `HomePage`.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当 Ionic 和 Cordova 准备就绪时，通过在 `HomePage` 构造函数中调用 `showMap()` 来初始化地图，触发 `platform.ready().then`。
- en: When a user clicks on the button, the app will call `getMyLocation` to get the
    location data.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户点击按钮时，应用程序将调用 `getMyLocation` 来获取位置数据。
- en: The data will be used to create the marker and move the map's camera to center
    on that location.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些数据将被用来创建标记并将地图的摄像头移动到该位置的中心。
- en: It's important to know that `GoogleMaps.create` does take some time to process,
    and it will trigger a *ready* event once it has successfully created the map.
    That's why you need to add an event listener for `GoogleMapsEvent.MAP_READY`.
    This example does not do anything right after the map is ready, but later, you
    could add more processing functions, such as jumping to the current location automatically
    or adding more markers on top of the map.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要知道 `GoogleMaps.create` 需要一些时间来处理，并且一旦成功创建地图，它将触发一个 *ready* 事件。这就是为什么你需要添加一个事件监听器来监听
    `GoogleMapsEvent.MAP_READY`。这个示例在地图准备好后并没有立即做任何事情，但稍后你可以添加更多的处理函数，例如自动跳转到当前位置或向地图上添加更多标记。
- en: When the user clicks on the `PICK ME UP` button, it will trigger the `getMyLocation()`
    method. The location object returned will contain the latitude (`location.latLng.lat`)
    and longitude (`location.latLng.lng`). To move the camera anywhere, just call
    `map.moveCamera` by passing the location coordinate (`location.latLng`). To add
    a marker, call `map.addMarker` with the position and title as HTML.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击 `PICK ME UP` 按钮时，它将触发 `getMyLocation()` 方法。返回的位置对象将包含纬度 (`location.latLng.lat`)
    和经度 (`location.latLng.lng`)。要移动摄像头到任何地方，只需通过传递位置坐标 (`location.latLng`) 调用 `map.moveCamera`。要添加标记，使用位置和标题作为
    HTML 调用 `map.addMarker`。
- en: There's more...
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'The Cordova Google Maps plugin has many more features, such as the following:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: Cordova Google Maps 插件还有许多其他功能，例如以下内容：
- en: Showing an `InfoWindow`
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示 `InfoWindow`
- en: Adding a marker with multiple lines
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加多行标记
- en: Modifying icons
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改图标
- en: Text styling
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本样式
- en: Base64-encoded icons
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Base64 编码的图标
- en: Clicking on a marker
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击标记
- en: Clicking on an InfoWindow
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击信息窗口
- en: Creating a draggable marker
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建可拖动的标记
- en: Dragging events
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拖动事件
- en: Creating a flat marker
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建平面标记
- en: 'Since you cannot pop up a `div` on top of native Google Maps, the marker features
    are very handy. Some additional scenarios are as follows:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你无法在原生 Google Maps 之上弹出 `div`，标记功能非常实用。一些额外的场景如下：
- en: '**Touch a marker and go to a page**: You just need to listen to the'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**触摸标记并跳转到页面**：你只需要监听'
- en: '`GoogleMapsEvent.MARKER_CLICK` event and do whatever is'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`GoogleMapsEvent.MARKER_CLICK` 事件并执行任何操作'
- en: needed in the callback function.
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在回调函数中需要的。
- en: '**Show an avatar/profile image as a marker**: The `addMarker` takes the Base64
    image string. Thus, you can pass something like this in the argument title-`canvas.toDataURL()`.'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将头像/个人资料图片作为标记显示**：`addMarker` 接受 Base64 图像字符串。因此，你可以在参数标题中传递类似这样的内容 `-`
    `canvas.toDataURL()`。'
- en: 'Note that Google has a quota on free API usage. For example, you cannot exceed
    one request per second per user, and you can only have a couple of thousand requests
    per day. This quota changes all the time, but it''s important to know about it.
    In any case, if you have problems with your key, you have to go back to the Credentials
    page and regenerate the key. In order to change the key manually in your app,
    you have to edit `` `/plugins/ios.json` ``. Look for the following two places:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Google 对免费 API 使用量有限额。例如，每个用户每秒只能请求一次，每天只能请求几千次。这个限额会不断变化，但了解这一点很重要。无论如何，如果你遇到密钥问题，你必须回到凭证页面并重新生成密钥。为了在应用中手动更改密钥，你必须编辑
    ```/plugins/ios.json```。查找以下两个位置：
- en: '[PRE63]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Along with the following code:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码：
- en: '[PRE64]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: You just need to edit the `YOUR_IOS_API_KEY_IS_HERE` line and replace it with
    your new key.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需要编辑 `YOUR_IOS_API_KEY_IS_HERE` 这一行，并将其替换为你的新密钥。
- en: There are a lot of ways to work with Google Maps. You can visit the GitHub page
    of the Google Maps plugin to learn more, at [https://github.com/mapsplugin/cordova-plugin-googlemaps](https://github.com/mapsplugin/cordova-plugin-googlemaps.).
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多种方法可以与 Google Maps 一起工作。你可以访问 Google Maps 插件的 GitHub 页面了解更多信息，网址为 [https://github.com/mapsplugin/cordova-plugin-googlemaps](https://github.com/mapsplugin/cordova-plugin-googlemaps.)。
