- en: Supporting Device Functionalities Using Ionic Native
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following tasks related to native device
    feature support:'
  prefs: []
  type: TYPE_NORMAL
- en: Taking a photo using the camera plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing content using the social-sharing plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a local notification using the local notification plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fingerprint authentication using the fingerprint AIO plugin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a media player and adding a media player notification control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a taxi app using the Google Maps plugin and geocode support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to access some common features of a device,
    such as a camera, contact list, email, and maps. Some of these features can be
    written in a JavaScript-only environment, but the performance is not on a par
    with native support.
  prefs: []
  type: TYPE_NORMAL
- en: Cordova has a very well-supported community with many plugins. You may want
    to check out [http://plugins.cordova.io/](http://plugins.cordova.io/) to understand
    what is out there. Luckily, you don't need to deal with these plugins directly.
    You will use the Ionic Native ([http://ionicframework.com/docs/v2/native/](http://ionicframework.com/docs/v2/native/))
    service on top of Cordova and Angular. Keep in mind that you have to use Ionic
    Native instead of ngCordova for Ionic 2+ because of compatibility issues. You
    can only use ngCordova for Ionic 1.x.
  prefs: []
  type: TYPE_NORMAL
- en: Taking a photo using the camera plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, you will make an app to take a picture using the device camera
    or load an existing picture from the device album. The picture could be either
    in the Base64 format or saved in a local filesystem relating to your app. The
    following is a screenshot of the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c34edd84-09b4-46e2-b9f8-5a58598ae1c5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is the high-level process:'
  prefs: []
  type: TYPE_NORMAL
- en: Access the Cordova camera plugin to trigger camera capture and get the image
    back in the Base64 or URI format
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Parse the Base64 data or URI on an `<img>` DOM object
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Display the URI if it's in the URI format
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Capture an event of a toggle component
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Display long data (for example, URI) using a horizontal scroll
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have a physical device ready in order to test the camera capability.
    It's possible to just run the code via an emulator, but the filesystem support
    might look different across the various platforms.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the instructions to add camera support:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start a blank project (for example, `MyCamera`) and go to that folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the Cordova camera plugin and Ionic Native wrapper for the plugin using
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You should not use the `cordova add` command line directly; instead use `ionic
    cordova plugin add`
  prefs: []
  type: TYPE_NORMAL
- en: You should be able to see a new folder, `cordova-plugin-camera`, being added
    to the `/plugins` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace `./src/pages/home/home.html` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Since you only have one page, this template will show two buttons and an area
    to display the image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace `./src/pages/home/home.ts` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'There is only one method: `getPicture()`. This method will return the photo
    data so that the template can render.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace `.src/pages/home/home.scss` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: There are only a few minor changes in the styling so that you can keep them
    simple.
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace `./src/app/app.module.ts` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Connect your device to your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the Terminal and execute the following command line for iOS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If you are not able to push the app to your physical device using the preceding
    command line, you can use `ionic cordova run ios --device` to specify the CLI
    to use the physical device instead of a simulator.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to run the app on your Android device, use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'When you run the app and take a picture, you should see the app, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ee72ca1d-c441-4da0-8fd8-3ca331c41857.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Camera.getPicture()` is just an abstraction of `navigator.camera.getPicture()`
    from the Cordova camera plugin. If you are already familiar with Cordova or ngCordova
    from Ionic 1, this should be very familiar. Let''s start with the template. You
    have the following two buttons, which trigger the same, `getPicture()`, method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'These are just different ways to access photos: either from the camera itself
    or from the existing photos in the phone''s album. For the photo to render, you
    need to pass the photo data into the `src` attribute, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that you only want to show this `<img>` tag when `imageData` exists with
    some data. The `imageData` variable could be Base64 or an internal URL of the
    photo. To specify this option, there is a toggle button, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You will use the `useURI` variable inside the class, as illustrated, to determine
    which format to return the photo data in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Both `useURI` and `sourceType` will be used in the `getPicture()` function,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: It's important to adjust the quality, `targetWidth`, and `targetHeight` to low
    so that the photo is not too big, which could crash the device, especially when
    it doesn't have enough memory. When you return the Base64 data, it must be prefixed
    with the string `data:image/jpeg;base64`.
  prefs: []
  type: TYPE_NORMAL
- en: It is also important to note that inside `app.module.ts`, we are adding the
    `Camera` plugin to the NgModule's provider's array. This is very important because
    it allows us to use the plugin via Angular's Dependency Injection system. We have
    to do this for each plugin throughout this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: One item that isn't discussed here is the ability to post image data to the
    server. The common scenario is to upload the file from the filesystem. It's not
    a good idea to send data as Base64 because of the data size, which is double the
    original binary size.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is possible to create Instagram-like filter effects using just JavaScript.
    You can leverage an existing library, such as `Filterous` ([https://github.com/girliemac/Filterous](https://github.com/girliemac/Filterous)),
    to modify the image canvas directly.
  prefs: []
  type: TYPE_NORMAL
- en: There is an Instagram plugin ([https://github.com/vstirbu/InstagramPlugin](https://github.com/vstirbu/InstagramPlugin))
    for Cordova on GitHub. You could write some extra code to pass the image to Instagram.
    The user must have Instagram installed on the phone first, though. This idea is
    nice when you plan to do some cool image processing (for example, adding funny
    text) before letting Instagram perform the photo filter operation.
  prefs: []
  type: TYPE_NORMAL
- en: You could even add the Cordova's social network plugin and post the resulting
    images to Twitter or Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing content using the social sharing plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you develop an app with shareable content, you might want to utilize the
    native device feature to share via the device's authorized social media accounts.
    There are several benefits to using this approach. First, users don't need to
    open a separate browser to log in to their social media account each time they
    want to share. Second, all the information can be filled out programmatically,
    such as title, body, link, or image. Finally, since this is a native feature of
    the device, the menu selection allows users to see multiple accounts, which they
    are already familiar with, to choose from. The social sharing plugin can greatly
    enhance the user experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the app that you will build:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aa9d354c-f096-45da-a550-ec72ef532a14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the user clicks on the SHARE button, the app will show the following native
    button menu for social media account selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e026109e-9ac5-42c9-91c6-94baa394239c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If the user selects Twitter, a popup will show up with all the information
    prefilled, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dccc0885-866d-4a22-a226-a04162f5acbb.png)'
  prefs: []
  type: TYPE_IMG
- en: After posting on Twitter, the user goes right back to the app without ever leaving
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have a physical device or simulator ready in order to test the social
    sharing capability.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start a blank project (for example, `LinkSocialShare`), as follows, and go
    to that folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the social sharing plugin and Ionic Native wrapper for the plugin with
    the following command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `./src/pages/home/home.html` and replace its contents with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This is a very simple page with the card element. The Like button is there just
    for cosmetic reasons without code implementation. However, all the JavaScript
    logic will focus on the
  prefs: []
  type: TYPE_NORMAL
- en: SHARE button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./src/pages/home/home.ts`, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace `./src/app/app.module.ts` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to the Terminal and execute either of the following command lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can start looking at the template because that is where the social media
    content is extracted from. The subject value is from the `#messageSubject` local
    variable, as illustrated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding case, the subject is `Ionic Developer` because you will access
    `messageSubject.innerText` later on. `messageSubject` is just referencing your
    H2 DOM node.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, the body is from `#messageBody`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'When the user clicks on the SHARE button, it will trigger the `sendShare()`
    method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Let's take a look at your `home.ts` to understand how `sendShare()` works.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you need to import the `SocialSharing` module from Ionic Native, as
    illustrated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To share your content and trigger the social media menu, the logic, as shown,
    is very simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: If you want to share a file, you can replace the third parameter (where it is
    `null`) with the URL to the user's local filesystem. This is useful when you want
    people to send a PDF or JPG via email or post it on Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To see the latest update of the social sharing plugin, you can visit the documentation
    page at [http://ionicframework.com/docs/v2/native/social-sharing/](http://ionicframework.com/docs/v2/native/social-sharing/).
  prefs: []
  type: TYPE_NORMAL
- en: Displaying a local notification using the local notification plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you are developing mobile applications, your app might want to notify the
    user about something. If the information is coming from the backend, we use push
    notifications. But, if the information is generated by the app, locally on the
    device, we can use a local notification for that.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe is intended to help you understand how local notifications work.
  prefs: []
  type: TYPE_NORMAL
- en: When you open the app, you will see the following page.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c4a369d-e77b-483e-aecb-857278e5e80d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can input anything in the input box and then click on SHOW NOTIFICATION.
    You can also schedule a notification to show later. This is what a notification
    looks like in the notification area:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0085089c-049a-4876-952f-c8ac8bf3f02d.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have a physical device ready in order to test local notifications.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a blank Ionic app (for example, `Notifications`) and `cd` to that folder,
    as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the local notification plugin and Ionic native wrapper for the plugin
    using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `./src/pages/home/home.html` and replace with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `./src/pages/home/home.ts` and replace with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace `./src/app/app.module.ts` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app in the Terminal using the following command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, let''s take a look at the template `home.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: We have an input field where we add text for notifications. Then we have a button
    to show notifications immediately. Then we have an `ion-datetime` input, which
    is used to specify the time in seconds. It will be used to schedule a notification
    for the future, using the Schedule a Notification button. Finally, we have a Clear
    all Notifications button to clear notifications in the device's notification area.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your `home.ts`, you must import the `LocalNotifications` module first, as
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'When someone clicks on the **Show Notification** or **Schedule a Notification**
    buttons, it fires the **Show Notification** button. Here is the `showNotification`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '`The showNotifications` method takes an argument `type`. `type` is used to
    determine if we want to show a notification immediately or at some time in the
    future. if `type` is equal to `now`, we show it immediately; otherwise, we schedule
    the notification to show up later on. For showing notifications, we use the plugin''s
    `schedule` method. We have to specify the `id` , `text`, and `at` values. The
    `at` value is used to schedule a notification for showing in the future.'
  prefs: []
  type: TYPE_NORMAL
- en: '`The clearNotifications` method clears all the notifications.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Take a look at the GitHub page of the local notification plugin for more information,
    at [https://github.com/katzer/cordova-plugin-local-notifications](https://github.com/katzer/cordova-plugin-local-notifications).
  prefs: []
  type: TYPE_NORMAL
- en: Fingerprint authentication using the fingerprint AIO plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gone are the days when you wanted to just use a password authentication system.
    Authentication is becoming stronger and more intuitive. Most iOS devices these
    days have a fingerprint sensor and this trend is now starting to prevail in Android
    devices too. Users can secure their devices using a fingerprint password. Luckily,
    for developers like us, we can use the same technology to secure content inside
    our application, which the user can access after authentication.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we are creating an unlock secret app. It is basically a joke
    app. The home page looks like the following.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a8c27258-b274-466f-9a8f-06f93641d8ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the user clicks on the **Reveal Secret** button, it shows the Fingerprint
    Authentication dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d2ce4a9b-0de8-4687-94f9-9e3c0d5ef848.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And when the user authenticates, we show a joke on the screen. It is as simple
    as that:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/45cc8813-8cad-48bf-b5c1-928b40498cbf.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have a physical device with a fingerprint sensor in order to test
    this application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a blank Ionic app (for example, `FingerAuth`) and `cd` to that folder,
    as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the fingerprint `aio` plugin and the Ionic Native wrapper, using the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `./src/pages/home/home.html` and replace with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `./src/pages/home/home.ts` and replace with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace `./src/pages/home/home.scss` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace `./src/app/app.module.ts` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app in the Terminal, using the following command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, let''s take a look at the template `home.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: If the device doesn't have a fingerprint sensor, we display a notice on the
    screen saying that This Device doesn't have Fingerprint Sensor. Otherwise, we
    show a Reveal a Secret Button. When the user clicks on it, it opens a Fingerprint
    Authentication dialog.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your `home.ts`, you must import the `FingerprintAIO` module first, as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: When the page is loaded, we check the availability of the sensor in `ionViewDidLoad`
    hook via the plugin's `isAvailable` method. It returns a promise. If it is resolved,
    it means the sensor is available. The `authenticate` method is fired when the
    user clicks on the Reveal a secret button in the UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the `authenticate()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Inside this method, we call the plugin's `show` method, which returns a promise.
    If the promise is resolved, it means the user is authenticated and we reveal the
    joke. Otherwise, we do nothing.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can read more about the fingerprint AIO plugin at [https://github.com/NiklasMerz/cordova-plugin-fingerprint-aio](https://github.com/NiklasMerz/cordova-plugin-fingerprint-aio).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a media player with the Media Player notification control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Media Player is an important app in a user's phone. Almost every media app has
    a control in the notification area nowadays. In this recipe, we are going to create
    a very simple media player with **Play** and **Pause** buttons and we will add
    Media Player controls in the notification area.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what the home page of our app will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/86f6c6aa-f7ce-4918-8060-4341ea7ee355.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And this is what the notification area will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/03e3a11e-a3b5-43da-9d74-f4265f4df9bf.png)'
  prefs: []
  type: TYPE_IMG
- en: When the user clicks on the **Play** button inside the app, it shows controls
    in the notification area. When the user clicks on the **Pause** button inside
    the app, it updates the music controls too. This also works the other way around.
    You can play and pause the media from Music Control in the notification area.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have a physical device ready in order to test this app, since it
    uses the Cordova plugin.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a blank Ionic app (for example, `MediaPlayer`) and `cd` to that folder,
    as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the Music Control plugin and it''s Ionic Native wrapper using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `./src/pages/home/home.html` and replace with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `./src/pages/home/home.ts` and replace with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace `./src/pages/home/home.scss` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file at `./src/services/audio-service.ts` and add the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace `./src/app/app.module.ts` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app in the Terminal using the following command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, let''s take a look at the template `home.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: It is very simple. We are showing the track's thumbnail and track title along
    with the track artist in `ion-item`. Then we have the `play` and `pause` buttons,
    shown inside `ion-row`.
  prefs: []
  type: TYPE_NORMAL
- en: At `home.ts`, we have a list of audio tracks for our media player. For the sake
    of simplicity, I just added a single track, so that we don't add too much extra
    functionality and we remain focused on the plugin part. Then we have the `play`
    and `pause` methods. These methods are linked to the `play` and `pause` buttons
    in the UI and they are fired when the user clicks on them.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `play` button, we fire AudioProvider's `play` method with the track's
    source `url` and also call the `createControls` method. This `createControls`
    method creates **Music Control** in the notification area of the device.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `pause` button, we fire AudioProvider's `pause` method and also update
    Music Control by telling it that we have paused the audio and it changes the UI
    accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `createControls()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, take a look at our miniature `AudioProvider`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: In the `play` method, we get `url` as an argument. if the new `url` is different
    to the previous one, we make the `Audio` object using the url and load the media
    and then we play the media and set `this.isPaused` to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: In the `pause` method, we pause the track and set the `this.isPaused` Boolean
    to `true`, which is by default set to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the sake of simplicity, we used only the play and pause buttons. But it
    is easy to implement forthcoming and previous features in the notification area
    as well as the app. Take a look at the GitHub page of the plugin at [https://github.com/homerours/cordova-music-controls-plugin](https://github.com/homerours/cordova-music-controls-plugin).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a taxi app using the Google Maps plugin and geocode support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Today, many mobile apps utilize different mapping features, such as showing
    the current location, creating routes, and providing suggestive business searches.
    This section will show you how to use Ionic Native's Google Maps plugin to provide
    mapping support.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will create a taxi app that can do the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Display Google Maps in fullscreen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a button overlay on top of the map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detect the current device location
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a marker with any text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is the screenshot of the taxi app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8fd4ce32-21f9-409f-844a-9a1c8604e6e3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When users click on the PICK ME UP button, it will go to the current device
    location and show longitude and latitude information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9763ff8d-e3f0-44e3-b5db-e5a685eefc0c.png)'
  prefs: []
  type: TYPE_IMG
- en: It is possible to use the HTML5 and JavaScript version of geolocation and maps
    instead of the Cordova plugin's. However, you will see a negative impact on performance.
    It's very obvious that if you use the SDK, map rendering and optimization tends
    to be faster. In addition, HTML5 geolocation sometimes has some strange bugs that
    require the user to accept permission twice-once for the app and once for the
    inside browser object.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Google Maps plugin requires a Google Maps API key for your project. You
    need a Google account and login to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the Google APIs Console at [https://console.developers.google.com/cloud-resource-manager](https://console.developers.google.com/cloud-resource-manager).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a project if you don''t have one yet. Just fill in the required fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ed874cd7-cecf-47c2-95c4-749bb74794f6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You need to enable the Google Maps SDK for iOS, the Google Maps Android API,
    or both. It depends on how many platforms you plan to support. Let''s select Google
    Maps SDK for iOS for this example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2c4294eb-0c36-47df-9950-677efab1cb77.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Enable button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4d4278b0-e934-464c-bd47-60bb2de6d248.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to Credentials to create your own key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/baba030c-cddc-42d7-ba8d-22903e9eacac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Create credential | API key option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0fbe20ba-5f51-4d48-be77-e05501fd991c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the RESTRICT KEY option. In the following example, you will select the
    iOS apps radio button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ef08f867-6e5b-4611-98cc-ce2ccea64f7f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fill in your app''s Bundle ID. You might not know exactly what it is yet because
    Ionic will create a random ID. So just put in `com.ionicframework.starter` and
    change that later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cf00ead3-9b73-43c0-98a5-29b226f5bc48.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Save button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now you should see the key for the iOS applications section as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/585369c7-a90f-49dc-aee9-48fed79047fa.png)'
  prefs: []
  type: TYPE_IMG
- en: Copy the API key so that you can use it to add the Cordova Google Maps plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start an Ionic project from scratch and add Google Maps features, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a blank Ionic project, as shown, and go to that folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the iOS platform with version 3.9.0 with the following command lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: You have to pick `ios@3.9.0` specifically because the current version of the
    Cordova Google Maps plugin only works with this version. Otherwise, your build
    will fail. You should experiment with the newest version if possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the Google Maps plugin with your copied key replacing `` `YOUR_IOS_API_KEY_IS_HERE
    ``, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'If you do this for both iOS and Android, use the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: You have to use the Cordova CLI here because using the Ionic CLI to add Google
    Maps with the API Key will not work
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./src/pages/home/home.html` to modify your template, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: The main element here is your `div` with the `map` ID because that is where
    you have to inject the Google Maps object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit your `./src/pages/home/home.ts` in the same folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Make some minor adjustments to the style sheet so that the map can take over
    the full screen. Edit `./src/pages/home/home.scss`, as illustrated here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to the Terminal and then run the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: You can use either one of the preceding command lines, depending on the platform.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The core of this app is mainly in the JavaScript code-`home.ts`. In order to
    use the plugin object, you should declare it on top, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'While it might seem that there are a lot of moving parts, the basic flow is
    very simple, as listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: Whenever Ionic and Cordova are ready, trigger `platform.ready().then` to initialize
    the map by calling `showMap()` in the constructor of the `HomePage`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When a user clicks on the button, the app will call `getMyLocation` to get the
    location data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The data will be used to create the marker and move the map's camera to center
    on that location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's important to know that `GoogleMaps.create` does take some time to process,
    and it will trigger a *ready* event once it has successfully created the map.
    That's why you need to add an event listener for `GoogleMapsEvent.MAP_READY`.
    This example does not do anything right after the map is ready, but later, you
    could add more processing functions, such as jumping to the current location automatically
    or adding more markers on top of the map.
  prefs: []
  type: TYPE_NORMAL
- en: When the user clicks on the `PICK ME UP` button, it will trigger the `getMyLocation()`
    method. The location object returned will contain the latitude (`location.latLng.lat`)
    and longitude (`location.latLng.lng`). To move the camera anywhere, just call
    `map.moveCamera` by passing the location coordinate (`location.latLng`). To add
    a marker, call `map.addMarker` with the position and title as HTML.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Cordova Google Maps plugin has many more features, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Showing an `InfoWindow`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a marker with multiple lines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying icons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text styling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Base64-encoded icons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clicking on a marker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clicking on an InfoWindow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a draggable marker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dragging events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a flat marker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Since you cannot pop up a `div` on top of native Google Maps, the marker features
    are very handy. Some additional scenarios are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Touch a marker and go to a page**: You just need to listen to the'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GoogleMapsEvent.MARKER_CLICK` event and do whatever is'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: needed in the callback function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Show an avatar/profile image as a marker**: The `addMarker` takes the Base64
    image string. Thus, you can pass something like this in the argument title-`canvas.toDataURL()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note that Google has a quota on free API usage. For example, you cannot exceed
    one request per second per user, and you can only have a couple of thousand requests
    per day. This quota changes all the time, but it''s important to know about it.
    In any case, if you have problems with your key, you have to go back to the Credentials
    page and regenerate the key. In order to change the key manually in your app,
    you have to edit `` `/plugins/ios.json` ``. Look for the following two places:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Along with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: You just need to edit the `YOUR_IOS_API_KEY_IS_HERE` line and replace it with
    your new key.
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot of ways to work with Google Maps. You can visit the GitHub page
    of the Google Maps plugin to learn more, at [https://github.com/mapsplugin/cordova-plugin-googlemaps](https://github.com/mapsplugin/cordova-plugin-googlemaps.).
  prefs: []
  type: TYPE_NORMAL
