["```js\nclass Queue {\n  #items = [];\n  // other methods\n}\n```", "```js\nenqueue(item) {\n  this.#items.push(item);\n}\n```", "```js\ndequeue() {\n  return this.#items.shift();\n}\n```", "```js\nfront() {\n  return this.#items[0];\n}\n```", "```js\n isEmpty() {\n    return this.#items.length === 0;\n  }\n  get size() {\n    return this.#items.length;\n  }\n  clear() {\n    this.#items = [];\n  }\n```", "```js\ntoString() {\n  if (this.isEmpty()) {\n    return 'Empty Queue';\n  } else {\n    return this.#items.map(item => {\n      if (typeof item === 'object' && item !== null) {\n        return JSON.stringify(item);\n      } else {\n        return item.toString();\n      }\n    }).join(', ');\n  }\n}\n```", "```js\n// queue.js\nclass Queue {\n  // our Queue class implementation\n}\nmodule.exports = Queue;\n```", "```js\nconst Queue = require('./queue');\nconst queue = new Queue();\n```", "```js\n console.log(queue.isEmpty()); // true\n```", "```js\nqueue.enqueue({ document: 'Chapter05.docx', pages: 20 });\nqueue.enqueue({ document: 'JavaScript.pdf', pages: 60 });\nqueue.enqueue({ document: 'TypeScript.pdf', pages: 80 });\n```", "```js\nconsole.log(queue.front()); // { document: 'Chapter05.docx', pages: 20 }\n```", "```js\n console.log(queue.size); // 3\n```", "```js\n// print all documents\nwhile (!queue.isEmpty()) {\n  console.log(queue.dequeue());\n}\n```", "```js\nclass Deque {\n  #items = [];\n}\n```", "```js\naddFront(item) {\n  this.#items.unshift(item);\n}\naddRear(item) {\n  this.#items.push(item);\n}\n```", "```js\nremoveFront() {\n  return this.#items.shift();\n}\nremoveRear() {\n  return this.#items.pop();\n}\n```", "```js\npeekFront() {\n  return this.#items[0];\n}\npeekRear() {\n  return this.#items[this.#items.length - 1];\n}\n```", "```js\nconst Deque = require('./deque');\nclass BrowserHistory {\n  #history = new Deque(); // {1}\n  #currentPage = null; // {2}\n  visit(url) {\n    this.#history.addFront(url); // {3}\n    this.#currentPage = url; // {4}\n  }\n  goBack() {\n    if (this.#history.size() > 1) { // {5}\n      this.#history.removeFront();  // {6}\n      this.#currentPage = this.#history.peekFront(); // {7}\n    }\n  }\n  goForward() {\n    if (this.#currentPage !== this.#history.peekBack()) { // {8}\n      this.#history.addFront(this.#currentPage);  // {9}\n      this.#currentPage = this.#history.removeFront(); // {10}\n    }\n  }\n  get currentPage() { // returns the current page for information\n    return this.#currentPage;\n  }\n}\n```", "```js\nconst browser = new BrowserHistory();\nbrowser.visit('loiane.com');\nbrowser.visit('https://loiane.com/about'); // click on About menu\nbrowser.goBack();\nconsole.log(browser.currentPage); // loiane.com\nbrowser.goForward();\nconsole.log(browser.currentPage); // https://loiane.com/about\n```", "```js\n// src/05-queue-deque/queue.ts\nclass Queue<T> {\n  private items: T[] = [];\n  enqueue(item: T): void {}\n  // all other methods are the same as in JavaScript\n}\nexport default Queue;\n```", "```js\n// src/05-queue-deque/deque.ts\nclass Deque<T> {\n  private items: T[] = [];\n  addFront(item: T): void {}\n  addRear(item: T): void {}\n  // all other methods are the same as in JavaScript\n}\nexport default Deque;\n```", "```js\nclass CircularQueue {\n  #items = [];\n  #capacity = 0; // {1}\n  #front = 0; // {2}\n  #rear = -1; // {3}\n  #size = 0; // {4}\n  constructor(capacity) { // {5}\n    this.#items = new Array(capacity);\n    this.#capacity = capacity;\n  }\n  get size() { return this.#size; }\n}\n```", "```js\nenqueue(item) {\n  if (this.isFull()) { // {6}\n    throw new Error(\"Queue is full\");\n  }\n  this.#rear = (this.#rear + 1) % this.#capacity; // {7}\n  this.#items[this.#rear] = item; // {8}\n  this.#size++; // {9}\n}\nisFull() { return this.#size === this.#capacity; }\n```", "```js\ndequeue() {\n  if (this.isEmpty()) { throw new Error(\"Queue is empty\"); } // {10}\n  const item = this.#items[this.#front]; // {11}\n  this.#size--; // {12}\n  if (this.isEmpty()) {\n    this.#front = 0; // {13}\n    this.#rear = -1; // {14}\n  } else {\n    this.#front = (this.#front + 1) % this.#capacity; // {15}\n  }\n  return item; // {16}\n}\nisEmpty() { return this.#size === 0;  }\n```", "```js\nfunction hotPotato(players, numPasses) {\n  const queue = new CircularQueue(players.length); // {1}\n  for (const player of players) { // {2}\n    queue.enqueue(player);\n  }\n  while (queue.size > 1) { // {3}\n    for (let i = 0; i < numPasses; i++) { // {4}\n      queue.enqueue(queue.dequeue()); // {5}\n    }\n    console.log(`${queue.dequeue()} is eliminated!`); // {6}\n  }\n  return queue.dequeue(); // {7} The winner\n}\n```", "```js\nconst players = [\"Violet\", \"Feyre\", \"Poppy\", \"Oraya\", \"Aelin\"];\nconst winner = hotPotato(players, 7);\nconsole.log(`The winner is: ${winner}!`);\n```", "```js\nPoppy is eliminated!\nFeyre is eliminated!\nAelin is eliminated!\nOraya is eliminated!\nThe winner is: Violet!\n```", "```js\nconst Deque = require('./deque');\nfunction isPalindrome(word) {\n  if (word === undefined || word === null ||\n     (typeof word === 'string' && word.length === 0)) { // {1}\n    return false;\n  }\n  const deque = new Deque(); // {2}\n  word = word.toLowerCase().replace(/\\s/g, ''); // {3}\n  for (let i = 0; i < word.length; i++) {\n    deque.addRear(word[i]); // {4}\n  }\n  while (deque.size() > 1) { // {5}\n    if (deque.removeFront() !== deque.removeRear()) { // {6}\n      return false;\n    }\n  }\n  return true;\n}\n```", "```js\nconsole.log(isPalindrome(\"racecar\")); // Output: true\n```", "```js\nfunction countStudents(students: number[], sandwiches: number[]) {\n    while (students.length > 0) { // {1}\n      if (students[0] === sandwiches[0]) { // {2}\n          students.shift(); // {3}\n          sandwiches.shift(); // {4}\n      } else {\n          if (students.includes(sandwiches[0])) { // {5}\n              let num = students.shift(); // {6}\n              students.push(num); // {7}\n          } else {\n              break; // {8}\n          }\n      }\n  }\n  return students.length;\n}\n```"]