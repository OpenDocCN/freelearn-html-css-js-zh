- en: Chapter 2. DocumentJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Source code alone is insufficient; documentation is an important part of software
    engineering. **DocumentJS** is a powerful, yet simple tool designed to easily
    create searchable documentation for any JavaScript codebase.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will to get an overview of DocumentJS. We will learn how
    it works and learn to generate its documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the key features of DocumentJS:'
  prefs: []
  type: TYPE_NORMAL
- en: Flexible and easy to extend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Support Markdown: [http://en.wikipedia.org/wiki/Markdown](http://en.wikipedia.org/wiki/Markdown)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrated documentation viewer with API search
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Works with any JavaScript code and not only with JavaScriptMVC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are familiar with JSDoc, YUIDoc, YARD, or similar documentation syntax/tools
    in then DocumentJS can be learned a, few minutes.
  prefs: []
  type: TYPE_NORMAL
- en: The documentation for DocumentJS can be found at [http://javascriptmvc.com/docs.html#!DocumentJS](http://javascriptmvc.com/docs.html#!DocumentJS).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Markdown** is a text-to-HTML conversion tool that allows you to write using
    an easy-to-read and easy-to-write plain text format ([http://daringfireball.net/projects/markdown](http://daringfireball.net/projects/markdown)).'
  prefs: []
  type: TYPE_NORMAL
- en: How does DocumentJS work?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The architecture of DocumentJS is organized around types and tags.
  prefs: []
  type: TYPE_NORMAL
- en: '**Types** represent every relatively independent part of the JavaScript code
    that we may want to comment, such as classes, functions (methods), or attributes.'
  prefs: []
  type: TYPE_NORMAL
- en: Tags provide additional information to types, such as parameters and returns.
  prefs: []
  type: TYPE_NORMAL
- en: DocumentJS parses JavaScript and Markdown files to produce JSONP files that
    are used by JMVCDoc to render documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's add a documentation to our `Todo` list application in [Chapter 1](ch01.html
    "Chapter 1. Getting Started with JavaScriptMVC"), *Getting Started with JavaScriptMVC*.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the main documentation page, create a Markdown file `todo.md` in the
    `Todo/todo` directory with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add these documentation blocks to the `todo.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Type directives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Type directives represent JavaScript constructs that you may want to document:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@page`: This adds a standalone page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@attribute`: These are the document values on an object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@function`: These are document functions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@class`: This documents a class'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@prototype`: This is added to the previous class or a constructor''s prototype
    functions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@static`: This is added to the previous class or constructor''s static functions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@add`: This adds the docs to a class or constructor described in another file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tag directives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Tag directives provide additional information to the comments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@alias`: This specifies other commonly used names for class or constructor'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@author`: This specifies the author of a class'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@codestart`: This specifies the start of a code block'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@codeend`: This specifies end of a code block'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@constructor`: This documents a contractor function and its parameters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@demo`: This is the placeholder for an application demo'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@description`: This is used to add a short description'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@download`: This is used to adds download link'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@iframe`: This is used to add an iframe with example code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@hide`: This hides the class view'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@inherits`: This specifies what the Class or Constructor inherits'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@parent`: This specifies under which parent the current type should be located'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@param`: This specifies a function parameter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@plugin`: This specifies a plugin by which an object gets stolen'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@return`: This specifies what a function returns'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@scope`: This forces the current type to start the scope'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@tag`: This specifies the tags for searching'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@test`: This specifies the links for test cases'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@type`: This sets the type for the current commented code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@image`: This adds an image'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating the documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All we need to do to generate the documentation is run the `doc` command from
    the command line (inside the `Todo` directory):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This generates the documentation, which we can browse by opening `docs.html`
    located in the `Todo/todo` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating the documentation](img/0205_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can customize the look and feel of the documentation by changing the `summary.ejs`
    template file. Simply copy the template from `documentjs/jmvcdoc` to `Todo/todo`
    and modify it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned what it DocumentJS is and how to write and
    generate its documentation.
  prefs: []
  type: TYPE_NORMAL
- en: One good habit that every programmer should have is that he or she must document
    the codebase and keep it up to date.
  prefs: []
  type: TYPE_NORMAL
