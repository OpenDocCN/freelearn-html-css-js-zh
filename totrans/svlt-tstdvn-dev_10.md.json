["```js\n    import { expect, test } from '@playwright/test';\n    test('creating and reading a birthday', async ({\n      request\n    }) => {\n      const newBirthday = await request.post(\n        '/api/birthdays',\n        {\n          data: {\n            name: 'Nyx',\n            dob: '1993-02-04'\n          }\n        }\n      );\n      expect(newBirthday.ok()).toBeTruthy();\n    });\n    ```", "```js\nPOST http://localhost:1234/api/birthdays\n{\n  \"name\": \"Nyx\",\n  \"dob\": \"1993-02-04\"\n}\n```", "```js\n    test('creating and reading a birthday', async ({\n      request\n    }) => {\n      ...\n      const birthdays = await request.get(\n        '/api/birthdays'\n      );\n      expect(birthdays.ok()).toBeTruthy();\n      expect(await birthdays.json()).toEqual({\n        birthdays: expect.arrayContaining([\n          {\n            name: 'Nyx',\n            dob: '1993-02-04',\n            id: expect.anything()\n          }\n        ])\n      });\n    });\n    ```", "```js\n    PUT http://localhost:1234/api/birthday/abc123\n    {\n      \"name\": \"Nyx\",\n      \"dob\": \"1992-01-02\"\n    }\n    ```", "```js\ntest('updating a birthday', async ({ request }) => {\n  const newBirthday = await request.post(\n    '/api/birthdays',\n    {\n      data: {\n        name: 'Nyx',\n        dob: '1993-02-04'\n      }\n    }\n  );\n  expect(newBirthday.ok()).toBeTruthy();\n  const { id } = await newBirthday.json();\n});\n```", "```js\n    test('updating a birthday', async ({ request }) => {\n      ...\n      const birthdays = await request.put(\n        `/api/birthday/${id}`,\n        {\n          data: {\n            name: 'Nyxx',\n            dob: '1992-01-03'\n          }\n        }\n      );\n      expect(birthdays.ok()).toBeTruthy();\n      const updatedBirthdays = await request.get(\n        '/api/birthdays'\n      );\n      expect(await updatedBirthdays.json()).toEqual({\n        birthdays: expect.arrayContaining([\n          {\n            name: 'Nyxx',\n            dob: '1992-01-03',\n            id\n          }\n        ])\n      });\n    });\n    ```", "```js\n    import {\n      describe, it, expect, beforeEach\n    } from 'vitest';\n    import {\n      createBirthday\n    } from 'src/factories/birthday.js';\n    import\n       as birthdayRepository\n    from '$lib/server/birthdayRepository.js';\n    import { GET } from './+server.js';\n    ```", "```js\n    const bodyOfResponse = (response) => response.json();\n    ```", "```js\n    describe('GET', () => {\n      it('returns all the birthdays from the store', async\n      () => {\n        birthdayRepository.addNew(\n          createBirthday('Hercules', '2010-04-05')\n          );\n        birthdayRepository.addNew(\n          createBirthday('Ares', '2008-03-02')\n        );\n        const { birthdays } = await bodyOfResponse(GET());\n        expect(birthdays).toEqual([\n          expect.objectContaining(\n            createBirthday('Hercules', '2010-04-05')\n          ),\n          expect.objectContaining(\n            createBirthday('Ares', '2008-03-02')\n          )\n        ]);\n      });\n    });\n    ```", "```js\n    import {\n      getAll\n    } from '$lib/server/birthdayRepository.js';\n    import { json } from '@sveltejs/kit';\n    export const GET = () =>\n      json({ birthdays: getAll() });\n    ```", "```js\n    export const createRequest = (json) => ({\n      json: () => Promise.resolve(json)\n    });\n    ```", "```js\n    import {\n      createRequest\n    } from 'src/factories/request.js';\n    import { GET, POST } from './+server.js';\n    ```", "```js\n    describe('POST', () => {\n      beforeEach(birthdayRepository.clear);\n      it('saves the birthday in the store', async () => {\n        await POST({\n          request: createRequest(\n            createBirthday('Hercules', '2009-03-01')\n          )\n        });\n        expect(birthdayRepository.getAll()).toHaveLength(1\n          );\n        expect(birthdayRepository.getAll()[0]).toContain(\n          createBirthday('Hercules', '2009-03-01')\n        );\n      });\n    });\n    ```", "```js\n    import {\n      addNew,\n      getAll\n    } from '$lib/server/birthdayRepository.js';\n    ```", "```js\n    export const POST = async ({ request }) => {\n      const { name, dob } = await request.json();\n      addNew({ name, dob });\n    };\n    ```", "```js\n    it('returns a json response with the data', async () => {\n      const response = await POST({\n        request: createRequest(\n          createBirthday('Hercules', '2009-03-01')\n        )\n      });\n      expect(await bodyOfResponse(response)).toContain(\n        createBirthday('Hercules', '2009-03-01')\n      );\n    });\n    ```", "```js\n    export const POST = async ({ request }) => {\n      const { name, dob } = await request.json();\n      const result = addNew({ name, dob });\n      return json(result);\n    };\n    ```", "```js\n    it('throws an error if the data is invalid', async () => {\n      expect.hasAssertions();\n      try {\n        await POST({\n          request: createRequest(\n            createBirthday('Ares', '')\n          )\n        });\n      } catch (error) {\n        expect(error.status).toEqual(422);\n        expect(error.body).toEqual({\n          message:\n            'Please provide a date of birth in the YYYY-\n              MM-DD format.'\n        });\n      }\n    });\n    ```", "```js\n    import { json, error } from '@sveltejs/kit';\n    ```", "```js\n    export const POST = async ({ request }) => {\n      const { name, dob } = await request.json();\n      const result = addNew({ name, dob });\n      if (result.error) throw error(422, result.error);\n      return json(result);\n    };\n    ```", "```js\nPUT http://localhost:1234/api/birthday/abc123\n```", "```js\n    import {\n      describe,\n      it,\n      expect,\n      beforeEach\n    } from 'vitest';\n    import\n       as birthdayRepository\n    from '$lib/server/birthdayRepository.js';\n    import {\n      createBirthday\n    } from 'src/factories/birthday.js';\n    import {\n      createRequest\n    } from 'src/factories/request.js';\n    import { PUT } from './+server.js';\n    ```", "```js\n    describe('PUT', () => {\n      beforeEach(() => {\n        birthdayRepository.clear();\n        birthdayRepository.addNew(\n          createBirthday('Hercules', '2009-03-01')\n        );\n      });\n    });\n    ```", "```js\n    const storedId = () =>\n      birthdayRepository.getAll()[0].id;\n    ```", "```js\n    it('updates the birthday in the store', async () => {\n      await PUT({\n        request: createRequest(\n          createBirthday('Hercules', '1999-03-01')\n        ),\n        params: { id: storedId() }\n      });\n      expect(birthdayRepository.getAll()).toHaveLength(1);\n      expect(birthdayRepository.getAll()[0]).toContain(\n        createBirthday('Hercules', '1999-03-01')\n      );\n    });\n    ```", "```js\n    import {\n      replace\n    } from '$lib/server/birthdayRepository.js';\n    export const PUT = async ({\n      request,\n      params: { id }\n    }) => {\n      const { name, dob } = await request.json();\n      const result = replace(id, { name, dob });\n    };\n    ```", "```js\n    const bodyOfResponse = (response) => response.json();\n    ```", "```js\n    it('returns a json response with the data', async () => {\n      const response = await PUT({\n        request: createRequest(\n          createBirthday('Hercules', '1999-03-01')\n        ),\n        params: { id: storedId() }\n      });\n      expect(await bodyOfResponse(response)).toContain(\n        createBirthday('Hercules', '1999-03-01', {\n          id: storedId()\n        })\n      );\n    });\n    ```", "```js\n    import { json } from '@sveltejs/kit';\n    ```", "```js\n    export const PUT = async ({\n      request,\n      params: { id }\n    }) => {\n      const { name, dob } = await request.json();\n      const result = replace(id, { name, dob });\n      return json(result);\n    };\n    ```", "```js\n    it('throws an error if the data is invalid', async () => {\n      expect.hasAssertions();\n      try {\n        await PUT({\n          request: createRequest(\n            createBirthday('Hercules', '')\n          ),\n          params: { id: storedId() }\n        });\n      } catch (error) {\n        expect(error.status).toEqual(422);\n        expect(error.body).toEqual({\n          message:\n            'Please provide a date of birth in the YYYY-\n              MM-DD format.'\n        });\n      }\n    });\n    ```", "```js\n    import { json, error } from '@sveltejs/kit';\n    ```", "```js\n    export const PUT = async ({\n      request,\n      params: { id }\n    }) => {\n      const { name, dob } = await request.json();\n      const result = replace(id, { name, dob });\n      if (result.error) throw error(422, result.error);\n      return json(result);\n    };\n    ```"]