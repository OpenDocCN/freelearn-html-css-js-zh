["```js\n$ meteor create twitter-login\n$ cd twitter-login\n$ mkdir {client,server,both}\n$ mv twitter-login.* client/\n$ meteor add twbs:bootstrap\n$ meteor\n\n```", "```js\n    $ meteor add accounts-twitter\n    $ meteor add accounts-ui\n\n    ```", "```js\n    <body>\n     {{> loginButtons}}\n\n    ```", "```js\n{\nmethodArguments: [{oauth: {\ncredentialToken: \"m3OHQUrRWU34anuq40Bx3q7JBoEmVgwKGICU1jY4H7_\"\ncredentialSecret: \"2qPoqew8m-AXiC2OVfrkWem0_M_APcdMpnz-cGsl6-k\"\n}},\n...\n]}\n```", "```js\nTwitter.retrieveCredential = \n function(credentialToken, credentialSecret) {\n    return OAuth.retrieveCredential(\n      credentialToken, credentialSecret);\n };\n```", "```js\n$ meteor mongo\n\n```", "```js\n> db.meteor_accounts_loginServiceConfiguration.find()\n\n```", "```js\n{ \"service\" : \"twitter\", \n  \"consumerKey\" : \"th2is2i2safa333kecon442sume24r433key\", \n  \"secret\" : \"th9isi9sa9fa87kesecr666e3t\", \n  \"loginStyle\" : \"popup\", \"_id\" : \"DBfakeYnnFbmidbC\" \n}\n```", "```js\n> db.meteor_accounts_loginServiceConfiguration.remove({})\n\n```", "```js\n> db.users.findOne()\n\n```", "```js\n$ meteor create twitter-custom\n$ cd twitter-custom\n$ mkdir {client,server,both}\n$ mv twitter-custom.* client/\n$ meteor add twbs:bootstrap\n$ meteor\n\n```", "```js\n$ meteor add service-configuration\n$ meteor add accounts-twitter\n\n```", "```js\nServiceConfiguration.configurations.upsert({\n  service:\"twitter\" },\n  {\n    $set: {\n      \"consumerKey\" : \"[your API Key from apps.twitter.com]\",\n      \"secret\" : \"[your API secret from apps.twitter.com]\"\n    }\n  }\n);\n```", "```js\n    <template name=\"customLogin\">\n      {{#if currentUser}}\n        <div id=\"logout\" class=\"btn btn-info\">Log out</div>\n        <img src=\"img/{{profPic}}\" alt=\"\">\n      {{else}}\n        <div id=\"login\" class=\"btn btn-default\">Log in</div>\n      {{/if}}\n    </template>\n    ```", "```js\n    <body>\n     <div class=\"container\">\n     {{>customLogin}}\n\n        <h1>Welcome to Meteor!</h1>\n\n        {{> hello}}\n      </div>\n    </body>\n    ```", "```js\n    Template.customLogin.helpers({\n      profPic: function(){\n        var loggedin = Meteor.user();\n        return loggedin &&\n    loggedin.services...url;\n      }\n    });\n    ```", "```js\n    Template.customLogin.events({\n      'click #login' : function(e){\n        Meteor.loginWithTwitter();\n      },\n      'click #logout': function(e){\n        Meteor.logout();\n      }\n    });\n    ```", "```js\n$ meteor add meteorhacks:npm\n\n```", "```js\n$ meteor\n\n```", "```js\n-> npm support has been initialized.\n-> please start your app again.\n\n```", "```js\n{\n \"twilio\":\"1.10.0\"\n}\n```", "```js\nsendTwilio = function (phone, message) {\n  return Meteor.wrapAsync(function (phone, message, callback) {\n    var Twilio = Meteor.npmRequire('twilio')\n      ('[YOUR AccountSID GOES HERE]',\n        '[YOUR AuthToken GOES HERE]');\n    var phoneNum = '+1' + phone;\n    var twilioPhone = '[TWILIO NUMBER PATTERN: +1NUMBER]';\n\n    Twilio.sendMessage({\n      to: phoneNum,\n      from: twilioPhone,\n      body: message\n    }, function (err, msg) {\n      if (err) {\n        callback && callback(err);\n      } else {\n        callback && callback(null, msg);\n      }\n    });\n  })(phone, message);\n};\n```", "```js\n$ meteor shell\n> sendTwilio('5558675309','test',function(e,d){console.log(e,d);})\n\n```", "```js\n    $ meteor add random\n\n    ```", "```js\n    Random.digits = function(len){\n      var numArr = [0,1,2,3,4,5,6,7,8,9];\n      var ret = '';\n      while(ret.length<len){\n        ret+=Random.choice(numArr);\n      }\n      return ret;\n    };\n    ```", "```js\n    var verifiedField = ['services.twofactor.verified', 'services.twofactor.phone'];\n    Accounts.addAutopublishFields({ forLoggedInUser: verifiedField, forOtherUsers: [] });\n    ```", "```js\n    Accounts.onCreateUser(function(options,user) {\n      check(options, Object);\n      check(user, Object);\n      user.services.twofactor = {};\n      user.services.twofactor.code = Random.digits(6);\n      user.services.twofactor.verified = false;\n      user.profile = options.profile;\n      return user;\n    });\n\n    Accounts.onLogin(function(options){\n      if (options.type!=='resume'){\n        Meteor.users.update(\n          options.user._id,\n          {$set:\n           {\"services.twofactor.verified\":false,\n            \"services.twofactor.code\":Random.digits(6)\n           }\n          }\n        );\n      }\n    });\n    ```", "```js\n    Meteor.methods({\n      sendChallenge : function (phone){\n        if (!this.userId) return;\n        var newCode = Random.digits(6);\n        if (phone!=null){\n          Meteor.users.update(\n            this.userId,\n            {$set:\n             {\"services.twofactor.phone\":phone,\n              \"services.twofactor.code\":newCode}});\n        } else {\n          Meteor.users.update(\n            this.userId,\n            {$set:\n             {\"services.twofactor.code\":newCode}});\n\n        }\n        var curUser = Meteor.users.findOne(this.userId);\n        return sendTwilio(curUser.services.twofactor.phone, curUser.services.twofactor.code);\n      },\n      verifyCode : function(code){\n        if (!this.userId) return;\n        var curUser = Meteor.users.findOne(this.userId);\n        if (!curUser) return;\n        if (curUser.services.twofactor.code == code){\n          Meteor.users.update(\n            this.userId,\n            {$set:\n             {\"services.twofactor.verified\":true}});\n        }\n      }\n    });\n    ```", "```js\n    <button class=\"btn {{btnState}}\">Click Me</button>\n    ```", "```js\n    counter: function () {\n          return Session.get('counter');\n        },\n     btnState: function(){\n     var curUser =Meteor.user();\n     if (curUser && curUser.services.twofactor.verified)\n     return 'btn-success';\n     return 'btn-danger';\n     }\n\n    ```", "```js\n    'click button': function () {\n          // increment the counter when button is clicked\n     var curUser =Meteor.user();\n     if (curUser && curUser.services.twofactor.verified) {\n     Session.set('counter', Session.get('counter') + 1);\n     } else {\n     alert ('not authorized!');\n     }\n        }\n    ```", "```js\n    <template name=\"customLogin\">\n     <div class=\"btn-toolbar\">\n     <div class=\"btn-group\" role=\"group\">\n          {{#if currentUser}}\n          <div type=\"button\" id=\"logout\" class=\"btn btn-info btn-lg\">Log out</div>\n     <div id=\"profile\" class=\"btn btn-default btn-lg\">\n           <img src=\"img/{{profPic}}\" alt=\"\">\n     </div>\n          {{else}}\n          <div type=\"button\" id=\"login\" class=\"btn btn-default btn-lg\">Log in</div>\n          {{/if}}\n        </div>\n     {{#if currentUser}}\n     {{>secondLogin}}\n     {{/if}}\n      </div>\n    </template>\n    ```", "```js\n    <template name=\"secondLogin\">\n      {{#if verified}}\n      <div class=\"btn btn-success btn-lg\">\n        <span class=\"glyphicon glyphicon-ok\"></span>\n      </div>\n      {{else}}\n      <div class=\"btn-group\" role=\"group\">\n        <div class=\"btn btn-primary btn-lg\" id=\"btnChallenge\">\n          <span class=\"glyphicon glyphicon-phone\"></span>\n        </div>\n        <input type=\"text\" id=\"phoneNum\" class=\"btn btn-default btn-lg\" placeholder=\"{{defaultPhone}}\">\n      </div>\n      <div class=\"btn-group\" role=\"group\">\n        <input type=\"text\" id=\"verCode\" class=\"btn btn-default btn-lg\" placeholder=\"code...\">\n        <div class=\"btn btn-primary btn-lg\" id=\"btnVerify\">\n          <span class=\"glyphicon glyphicon-check\"></span>\n        </div>\n      </div>\n      {{/if}}\n    </template>\n    ```", "```js\n    #profile img {\n      max-height: 44px;\n      margin: 0 0;\n    }\n\n    #profile {\n      padding: 0 0;\n    }\n    ```", "```js\n    Template.secondLogin.helpers({\n      verified: function(){\n        var curUser = Meteor.user();\n        return (curUser&&curUser.services.twofactor.verified);\n      },\n      defaultPhone: function(){\n        var curUser = Meteor.user();\n        return curUser && curUser.services.twofactor.phone;\n      }\n    });\n    ```", "```js\n    Template.secondLogin.events({\n      'click #btnChallenge' : function (e){\n        var phoneNum = $('#phoneNum').val();\n        if (!phoneNum.length)\n          phoneNum = $('#phoneNum').attr('placeholder');\n        if (!phoneNum.length==10) return;\n        Meteor.call('sendChallenge',phoneNum);\n      },\n      'click #btnVerify' : function(e){\n        var verCode = $('#verCode').val();\n        if (!verCode.length==6) return;\n        Meteor.call('verifyCode',verCode);\n      }\n    });\n    ```", "```js\nAccounts.addAutopublishFields({ forLoggedInUser: verifiedField, forOtherUsers: [] });\nAccounts.onCreateUser(function(options,user) {\n  ...\n  user.services.twofactor.code = Random.digits(6);\n user.services.twofactor.verified = false;\n  ...\n});\n  Accounts.onLogin(function(options){\n    ...\n        {$set:\n         {\"services.twofactor.verified\":false,\n          \"services.twofactor.code\":Random.digits(6)\n         }\n    ...\n  });\n```", "```js\nMeteor.methods({\n sendChallenge : function (phone){\n    if (!this.userId) return;\n    var newCode = Random.digits(6);\n    ...\n    return sendTwilio(...);\n  },\n verifyCode : function(code){\n    ...\n    if (curUser.services.twofactor.code == code){\n      Meteor.users.update(\n        this.userId,\n        {$set:\n         {\"services.twofactor.verified\":true}});\n    }\n  }\n});\n```", "```js\n<template name=\"secondLogin\">\n {{#if verified}}\n  <div class=\"btn btn-success btn-lg\">\n    <span class=\"glyphicon glyphicon-ok\"></span>\n  </div>\n {{else}}\n    ...\n {{/if}}\n</template>\n```"]