["```js\nDate,AAPL,MSFT\n2014-01-02,-0.01406,-0.00668\n2014-01-03,-0.02197,-0.00673\n2014-01-06,0.00545,-0.02113\n2014-01-07,-0.00715,0.00775\n2014-01-08,0.00633,-0.01785\n2014-01-09,-0.01277,-0.00643\n2014-01-10,-0.00667,0.01435\n2014-01-13,0.00524,-0.02941\n2014-01-14,0.0199,0.02287\n2014-01-15,0.02008,0.02739\n```", "```js\nvar url = \"https://gist.githubusercontent.com/d3byex/520e6dcb30e673c149cc/raw/432623f00f6740021bdc13141612ac0b6196b022/corr_aapl_msft.csv\";\nd3.csv(url, function (error, rawData) {\n```", "```js\n    var data = rawData.map(function(d) {\n        return { X: +d.AAPL, Y: +d.MSFT }\n    });\n```", "```js\n    var xExtents = d3.extent(data, function(d) { return d.X; });\n    var yExtents = d3.extent(data, function(d) { return d.Y; });\n```", "```js\nvar maxExtent = d3.max(\n    xExtents.concat(yExtents), \n    function(d) { return Math.abs(d); \n});\n```", "```js\n    var graphWidth = 400, graphHeight = 400;\n    var radius = 5;\n```", "```js\n    var scale = d3.scale.linear()\n        .domain([-maxExtent, maxExtent])\n        .range([0, graphWidth]);\n```", "```js\n    var svg = d3.select('body')\n        .append('svg')\n        .attr('width', graphWidth)\n        .attr('height', graphHeight);\n```", "```js\n    svg.selectAll('circle')\n        .data(data)\n        .enter()\n        .append('circle')\n        .attr({\n            cx: function(d) { return xScale(d.AAPL); },\n            cy: function(d) { return yScale(d.MSFT); },\n            r: radius,\n            fill: 'steelblue'\n        });\n}); // closing the call to d3.csv\n```", "```js\ngraphGroup.selectAll('circle')\n    .data(data)\n    .enter()\n    .append('circle')\n    .attr({\n        cx: function(d) { return scale(d.X); },\n        cy: function(d) { return scale(d.Y); },\n        r: radius,\n        fill: 'none',\n        stroke: 'steelblue'\n    });\n```", "```js\nvar yGridlinesAxis = d3.svg.axis().scale(scale).orient(\"left\");\nvar yGridlineNodes = svg.append('g')\n    .attr('transform', 'translate(' + (margins.left + graphWidth)\n                       + ',' + margins.top + ')')\n    .call(yGridlinesAxis\n          .tickSize(graphWidth + axisPadding, 0, 0)\n          .tickFormat(\"\"));\nstyleGridlineNodes(yGridlineNodes);\n```", "```js\nfunction styleGridlineNodes(axisNodes) {\n    axisNodes.selectAll('.domain')\n        .attr({\n            fill: 'none',\n            stroke: 'none'\n        });\n    axisNodes.selectAll('.tick line')\n        .attr({\n            fill: 'none',\n            'stroke-width': 1,\n            stroke: 'lightgray'\n        });\n}\n```", "```js\nvar xGridlinesAxis = d3.svg.axis().scale(scale).orient(\"bottom\");\nvar xGridlineNodes = svg.append('g')\n    .attr('transform', 'translate(' + margins.left + ',' + \n            (totalHeight - margins.bottom + axisPadding) + ')')\n    .call(xGridlinesAxis\n          .tickSize(-graphWidth - axisPadding, 0, 0)\n          .tickFormat(\"\"));\nstyleGridlineNodes(xGridlineNodes);\n```", "```js\nCountryCode,CountryName,LifeExp,FertRate,Population,Region\nABW,Aruba,75.33217073,1.673,102911,Latin America & Caribbean\nAFG,Afghanistan,60.93141463,4.9,30551674,South Asia\n```", "```js\nvar url = \"https://gist.githubusercontent.com/d3byex/30231953acaa9433a46f/raw/6c7eb1c562de92bdf8d0cd99c6912048161c187e/fert_pop_exp.csv\";\n    var data = rawData.map(function(d) {\n        return {\n            CountryCode: d.CountryCode,\n            CountryName: d.CountryName,\n            LifeExp: +d.LifeExp,\n            FertRate: +d.FertRate,\n            Population: +d.Population,\n            Region: d.Region\n        }\n    });\n```", "```js\nvar minBubbleSize = 5, maxBubbleSize = 50;\nvar margin = { left: maxBubbleSize/2, top: maxBubbleSize/2,\n               bottom: maxBubbleSize/2, right: maxBubbleSize/2\n};\n```", "```js\nvar lifeExpectancy = data.map(function(d) { return d.LifeExp; });\nvar fertilityRate = data.map(function(d) { return d.FertRate; });\nvar population = data.map(function(d) { return d.Population; });\nvar regions = data.map(function(d) { return d.Region; });\n```", "```js\nvar xScale = d3.scale.linear()\n    .domain([d3.min(lifeExpectancy), d3.max(lifeExpectancy)])\n    .range([0, graphWidth]);\n```", "```js\nvar yScale = d3.scale.linear()\n    .domain([d3.max(fertilityRate), 0])\n    .range([0, graphHeight]);\n```", "```js\nvar popScale = d3.scale.linear()\n    .domain(d3.extent(population))\n    .range([minBubbleSize, maxBubbleSize]);\n```", "```js\nvar uniqueRegions = d3.set(regions).values();\nvar regionColorMap = d3.scale.ordinal()\n    .domain(uniqueRegions)\n    .range(d3.scale.category10().range());\n```", "```js\nvar yAxis = d3.svg.axis().scale(yScale).orient('left');\nvar yAxisNodes = svg.append('g')\n    .attr('transform', 'translate(' + \n          (margin.left - axisPadding) + ',' + margin.top + ')')\n    .call(yAxis);\nstyleAxisNodes(yAxisNodes);\n\nvar xAxis = d3.svg.axis().scale(xScale).orient('bottom');\nvar xAxisNodes = svg.append('g')\n    .attr('transform', 'translate(' + margin.left + ',' +\n          (totalHeight - margin.bottom + axisPadding) + ')')\n    .call(xAxis);\nstyleAxisNodes(xAxisNodes);\n```", "```js\nsvg.append('g')\n    .attr('transform', 'translate(' + margin.left + ',' +\n                                      margin.top + ')')\n    .selectAll('circle')\n    .data(data)\n    .enter()\n    .append('circle')\n    .each(function(d) {\n        d3.select(this).attr({\n            cx: xScale(d.LifeExp),\n            cy: yScale(d.FertRate),\n            r: popScale(d.Population),\n            fill: regionColorMap(d.Region),\n            stroke: regionColorMap(d.Region),\n            'fill-opacity': 0.5\n        });\n    });\n```"]