- en: Chapter 11. Building an RSS Reader Using React and Flux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React is not enough to build a complete application, as it's just the view layer.
    We need an architecture for holding the application logic and data, and this is
    where Flux comes in. Obviously, React can be used with any other architecture,
    but Flux is what is mostly used with React, as Flux is based on unidirectional
    data flow, like React. In this chapter, we will build a single-page RSS reader
    using React and Flux.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Flux architecture in depth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Routing using the React Router library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Flux.js to create a dispatcher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using MicroEvent.js to emit events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Flux and routing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Flux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Flux** is an application architecture and not a framework. You can think
    of it as an alternative to MVC. It was primarily developed to be used with React
    as both of them are based on unidirectional data flow. The Flux architecture enforces
    unidirectional data flow.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a diagram that shows all the parts of the Flux architecture and how
    data flows in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding Flux](img/B05154_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is how each part works:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Actions**: An action is an object that describes what we want to do and the
    data that we need to do it. In Flux, all events and data from all sources are
    converted to actions. Even UI events are converted to actions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dispatcher**: The dispatcher is a special type of event system. It is used
    to broadcast actions to registered callbacks. What the dispatcher does is not
    the same as a pub/sub system, as callbacks are not subscribed to particular events.
    Instead, every action is dispatched to every registered callback. An application
    should contain only one dispatcher.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Action creators**: Action creators are methods that dispatch actions to the
    dispatcher.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stores**: Stores are objects that store the application data and logic. Stores
    react to actions. Callbacks ping the store to take appropriate action whenever
    an action that the store depends on is dispatched by the dispatcher.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**React views**: React views are the React components that can retrieve data
    from stores and display as well as listen to events emitted from stores whenever
    there is a change in the data stored by them. Note that the events emitted by
    stores are not converted into actions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, in Flux, all the events and data from different sources are dispatched to
    the dispatcher as actions, then the stores update themselves whenever the dispatcher
    dispatches actions, and finally, views get updated whenever stores update.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an another diagram, which provides a much higher-level abstraction
    of how Flux works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding Flux](img/B05154_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here you can see that the data flows in a single direction, that is, data and
    events first go to the **Dispatcher**, then to the **Store**, and finally to the
    **View**. So, we can say that dispatcher, store, and view are the three major
    parts of the Flux architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Just as there are many MVC frameworks, such as Angular, Ember, and Backbone,
    there are many Flux frameworks, such as Fluxible, Reflux, Alt, and Redux. But
    to keep things simple and easier to learn, we will not use any of these frameworks.
    Instead, we will use the Flux.js and MicroEvent.js libraries to implement the
    Flux architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Using Flux.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Flux.js** is a library created by the creators of Flux. It is used to
    build dispatchers. You can find the Flux.js source code at [https://github.com/facebook/flux](https://github.com/facebook/flux)
    and the CDN version at [https://cdnjs.com/libraries/flux](https://cdnjs.com/libraries/flux).
  prefs: []
  type: TYPE_NORMAL
- en: 'A dispatcher is created using the `Dispatcher` constructor. It has five methods,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`register(callback)`: This method lets us register a callback. It returns a
    string called the `callback` ID to uniquely identify a callback.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unregister(id)`: This is a method lets us unregister a registered callback.
    To unregister, we need to pass the ID of the callback that we want to unregister.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`waitFor(array)`: This waits for the specified callbacks to be invoked before
    continuing with the execution of the current callback. This method should only
    be used by a callback in response to a dispatched action.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dispatch(action)`: This dispatches an action to registered callbacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isDispatching()`: This returns a Boolean indication of whether the dispatcher
    is currently dispatching.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will go through example code while building the RSS feed reader.
  prefs: []
  type: TYPE_NORMAL
- en: Using MicroEvent.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**MicroEvent.js** is an event emitter library, which provides the observer
    pattern to JavaScript objects. We need MicroEvent.js for triggering events from
    stores to update views.'
  prefs: []
  type: TYPE_NORMAL
- en: You can get MicroEvent.js from [http://notes.jetienne.com/2011/03/22/microeventjs.html](http://notes.jetienne.com/2011/03/22/microeventjs.html).
  prefs: []
  type: TYPE_NORMAL
- en: To make an object or constructor be able to emit events and others to be able
    to subscribe to it, we need to integrate a `MicroEvent` interface into the object
    or constructor using the `MicroEvent.mixin` method.
  prefs: []
  type: TYPE_NORMAL
- en: Now, inside the object or constructor, we can trigger events using `this.trigger()`,
    and others can subscribe to events using the `bind()` method of the object. We
    can also unbind using the `unbind()` method.
  prefs: []
  type: TYPE_NORMAL
- en: We will look at example code while building the RSS feed reader.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to React Router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The RSS feed reader application we will create is going to be a single-page
    application. In single-page applications, routes are defined on the frontend instead
    of the backend. We need some sort of library that lets us define routes and assign
    components to them, that is, it can keep the UI in sync with the URL.
  prefs: []
  type: TYPE_NORMAL
- en: '**React Router** is the most popular and recommended routing library for React.
    It provides a simple API with powerful features such as dynamic route matching
    and location transition handling built in.'
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source code of React Router at [https://github.com/reactjs/react-router](https://github.com/reactjs/react-router)
    and the CDN version at [https://cdnjs.com/libraries/react-router](https://cdnjs.com/libraries/react-router).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a code sample of how to define routes using React Router and assign
    components to them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is how the preceding code works:'
  prefs: []
  type: TYPE_NORMAL
- en: React Router lets us define routes and their components using React components
    themselves. This makes it easy to write routes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A `Route` component is used to define individual routes. The paths of the routes
    are of the same pattern as the paths in Express.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All the `Route` components are wrapped with the `Router` component and the `Router`
    component is rendered on the page. The `Router` component finds the matching route
    for the current URL and renders the component assigned to the route.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We assigned the `history` property of the `Router` component to `ReactRouter.browserHistory`,
    which makes `Router` use the HTML5 History API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `Link` component should be used instead of the `<a>` tag as this component
    prevents full-page reloads and instead just changes the URL and renders the matching
    component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating the RSS feed reader
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The RSS feed reader we will create will let you add feed URLs, view a list of
    added URLs, and view the content of each feed URL. We will be storing the URLs
    in HTML5 local storage.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the project directories and files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the exercise files of this chapter, you will find two directories: `Initial`
    and `Final`. `Final` contains the final source code of the application whereas
    `Initial` contains the files to help you quickly get started with building the
    application.'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Initial` directory, you will find `app.js`, `package.json`, and a public
    directory containing files to be served to the frontend. The `app.js` file will
    contain backend code. Currently, `app.js` and `package.json` contain no code.
  prefs: []
  type: TYPE_NORMAL
- en: We will put our HTML code in `public/html/index.html`, and in the `public/js/index.js`
    file, we will place our frontend JavaScript code, that is, React code.
  prefs: []
  type: TYPE_NORMAL
- en: Let's first build the backend, after which we will build the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Building the backend
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, let''s download the packages required for the backend. Place this code
    in the `package.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now, run `npm install` in the `Initial` directory to download the packages.
    Here, we require the `express`, `request` and `xml2json` npm packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Place the following code in the `app.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how the preceding code works:'
  prefs: []
  type: TYPE_NORMAL
- en: At first, we import the libraries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we add a middleware program to serve static files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We then create a route that takes a URL as a query parameter, fetches the content
    of the URL, and sends it back as a response. We cannot fetch the feeds from the
    frontend because of CROS; therefore, we will fetch it through this route. It also
    converts the XML to JSON, because JSON is easier to work with.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, for all other paths, we return the `index.html` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we listen on port number `8080`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Building the frontend
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the `public/js` directory, you will find all the libraries that we will be
    using in the frontend. In the `public/css` directory, you will find Bootstrap
    4, which we will use for designing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Place this code in the `index.html` file to enqueue the JS and CSS files as
    well as creating a container for React components to render:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: At first, we enqueued Bootstrap 4\. Then, we enqueued the React, React Router,
    Flux, and MicroEvent libraries. Finally, we enqueued the `index.js` file, in which
    we will put our application code.
  prefs: []
  type: TYPE_NORMAL
- en: The `appContainer` element is the one inside which all of the UI will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Defining routes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here is the code to define routes for our application. Compile it using Babel
    and place it in the `index.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ve defined four routes here, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The first route is for the home page. When a user visits the home page, we will
    display a list of feed URLs that the user has added.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The second route is for displaying the content of a feed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The third route is for adding a new feed URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, if nothing matches, then the fourth route displays a **not found**
    message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating dispatcher, actions, and stores
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s create the dispatcher, a store that lets us manage feed URLs, and the
    `FeedList` component for displaying the feed URLs on the home page. To create
    all these, compile and place the following code in the `index.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how the code works:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we create a dispatcher for our app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we create a store named `FeedStore`, which provides us methods to add
    or retrieve a list of feed URLs. If we try to add an invalid URL, it sends out
    an `invalid-url` event; otherwise, it sends out a `valid-url` event so that we
    can display a message to the user indicating whether the URL was successfully
    added. This store stores and retrieves feed URLs from the HTML5 local storage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we call `MicroEvent.mixin` by passing `FeedStore` as an argument so that
    the store is able to trigger events and others can bind to those events.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we create a `Header` component, which will be our application header.
    The `Header` component currently displays only two links: the root path and the
    path to add a new URL.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we create the `FeedList` component. The `getInitialState` method of
    the component retrieves the list of feed URLs from `FeedStore` and returns them
    to be displayed. Note that we are not using the `<a>` tag while displaying the
    list; instead, we are using the `Link` component. The ID of a feed is its position
    in the array stored in local storage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s create the `SubmitFeed` component, which lets us add a new feed
    URL and then displays whether the URL has been added successfully. Here is the
    code for it. Compile and place it in the `index.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is how this code works:'
  prefs: []
  type: TYPE_NORMAL
- en: The `SubmitFeed` component displays a form with a text field and a button to
    submit it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When a user clicks on the **Submit** button, the `add` handler is invoked. The
    `add` handler dispatches an action with the `add-feed-url` action type and the
    URL to be added as the data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As soon as the component is mounted, we start listening to the `invalid-url`
    and `valid-url` events from `FeedStore`. If a URL is added successfully, we display
    a success message; otherwise, we get a failure message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: And, as soon as the component is unmounted, we stop listening to events from
    `FeedStore`. We should unbind, or we will end up with multiple listeners.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we register an action callback that checks for the `add-feed-url` action
    type and invokes the `addFeed` method of the `FeedStore` store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s create the `Feed` component, which displays the content of an individual
    feed URL. Here''s the code for it. Compile and place it in the `index.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: At first, we create `SingleFeedStore`, which has a `get` method that returns
    the content of a feed URL. It uses our server route to fetch the content of the
    URL. Once the content has been fetched, it triggers the `feed-fetched` event with
    that content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we called `MicroEvent.mixin` by passing `SingleFeedStore` as an argument
    so that the store is able to trigger events and others can bind to those events.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, in the `getInitialState` method of the `Feed` component, we return an
    empty data array, and inside the `componentDidMount` method, we make a request
    to `SingleFeedStore` as the `get` method of `SingleFeedStore` gets the data asynchronously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `componentDidMount`, we bind an event handler for the `feed-fetched` event
    and update the view as soon as the event occurs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As usual, we unbind the event handler as soon as the component is unmounted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, let''s create the `NotFound` component. Here is the code for it. Compile
    and place it in the `index.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Testing the application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are now done with building the application. To run the webserver, inside
    the `Initial` directory, run `node app.js`. Now, in a browser, open `localhost:8080`.
    You will only be able to see the header as we haven''t added anything yet. Here
    is how it should look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing the application](img/B05154_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, click on the **Add** menu item. You would see a form like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing the application](img/B05154_11_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter a valid feed URL, such as [http://qnimate.com/feed/](http://qnimate.com/feed/),
    and click on **Submit**. Now, go back to the home page, and you will see this
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing the application](img/B05154_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, click on the URL to see the content of the feed. The output will be something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing the application](img/B05154_11_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Clicking on any of the titles will open the URL in the same tab.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to build a single page application using React
    and Flux. We also explored many libraries, such as `xml2json`, `Flux.js`, `MicroEvent.js`,
    and React Router. Afterwards, we built a fully operational RSS feed reader.
  prefs: []
  type: TYPE_NORMAL
- en: You can now go ahead and add new things to the app, such as real-time feed updates
    and notifications.
  prefs: []
  type: TYPE_NORMAL
