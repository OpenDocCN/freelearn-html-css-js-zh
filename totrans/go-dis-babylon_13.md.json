["```js\nnpm i workbox-webpack-plugin copy-webpack-plugin --save-dev\n```", "```js\n\nconst WorkboxPlugin = require('workbox-webpack-plugin');\nconst CopyPlugin = require('copy-webpack-plugin');\n```", "```js\n\nplugins: [\n    new CleanWebpackPlugin(),\n    new HtmlWebpackPlugin({\n        template: path.resolve(appDirectory, \"public/index.xhtml\"),\n        inject: true\n    }),\n    new WorkboxPlugin.GenerateSW({\n        clientsClaim: true,\n        skipWaiting: true,\n        maximumFileSizeToCacheInBytes: 8388608,\n    }),\n    new CopyPlugin({\n        patterns: [\n            { from: path.resolve(appDirectory,\n              'public/assets/icons'), to:\n              path.resolve(appDirectory,\n              'dist/assets/icons') },\n            { from: path.resolve(appDirectory,\n              'public/manifest.json'), to:\n              path.resolve(appDirectory,\n              'dist/manifest.webmanifest') }\n        ]\n    })\n]\n```", "```js\n\n<link rel=\"manifest\" href=\"./manifest.webmanifest\" />\n<script>\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      navigator.serviceWorker.register('service-worker.js')\n      .then(registration => {\n        console.log('SW registered: ', registration);\n      }).catch(registrationError => {\n        console.log('SW registration failed: ',\n          registrationError);\n      });\n    });\n  }\n</script>\n```", "```js\n\nlet SpaceTruckersDb = function () {\n    const scoreData = [\n        { name: \"AAA\", score: 10000 },\n        { name: \"BBB\", score: 7000 },\n        { name: \"CCC\", score: 5000 },\n        { name: \"DDD\", score: 3400 },\n        { name: \"EEE\", score: 3000 },\n        { name: \"FFF\", score: 2500 },\n        { name: \"GGG\", score: 2000 },\n        { name: \"HHH\", score: 1000 },\n        { name: \"III\", score: 1000 },\n        { name: \"JBE\", score: 500 },\n    ];\n    let indexedDbIsSupported = window.indexedDB;\n    const currentSchemaVersion = 1;\n    const databaseName = \"SpaceTruckersDb\";\n    const tableName = \"HighScores\";\n    var database;\n// ... \nreturn { retrieveScores, addScore, readyPromise };\n```", "```js\n\nopenDbRequest.onupgradeneeded = (event) => {\n    database = event.currentTarget.result;\n    database.onerror = handleError;\n    let objectStore = database.createObjectStore(tableName,\n      {\n            autoIncrement: true\n      });\n    objectStore.createIndex(\"score\", \"score\", \n      {unique: false});\n    objectStore.transaction.oncomplete = (event) => {\n        let scoreStore = database\n       .transaction(tableName, \"readwrite\")\n            .objectStore(tableName);\n        scoreData.forEach(scoreD =>\n          scoreStore.add(scoreD));\n        resolve(database);\n    };\n};\n```", "```js\n\nfunction getScoreTextLine(s) {\n    if (!s.score) {\n        return s.name;\n    }\n    let scoreText = s.score.toFixed(0);\n    let text = `${s.name}${'.'.repeat\n      (20 - scoreText.length)}${s.score}\\n`;\n    return text;\n}\n```", "```js\n\nnameInput.onTextChangedObservable.add((ev, es) => {\n    if (ev.text.indexOf('↵') >= 0 || ev.text.length >= 3 || \n        ev.currentKey === \"Enter\") {\n            scene.editHighScores = false;\n    }\n});\n// ...\nwhile (scene.editHighScores) {\n    yield Tools.DelayAsync(1000);\n}\n```", "```js\n\nif (newScore) {\n    scoreToAdd.name = nameInput.text.substring(0,3);\n    await databaseManager.addScore(scoreToAdd);\n    console.log('saved newScore', scoreToAdd);\n    virtualKB.disconnect();\n    virtualKB.dispose();\n    newScore = null;\n    nameInput.dispose();\n    scoreToAdd = null;\n    scores = await databaseManager.retrieveScores();\n    await displayScores(scores);\n}\n```", "```js\n\nconst highScoreOpts = {\n    name: \"btHighScores\",\n    title: \"High Scores\",\n    background: \"green\",\n    color: \"black\",\n    onInvoked: () => {\n        logger.logInfo(\"High Scores button clicked\");\n        this._onMenuLeave(1000, () =>\n          this.onHighScoreActionObservable.\n          notifyObservers());\n    }\n}\n```", "```js\n\nthis.onHighScoreActionObservable.add(async () => {\n    this.isTopMost = false;\n    let scoreDialog = HighScoreScreen(this.scene);\n    scoreDialog.onCancelledObservable.add(() => {\n    this._onMenuEnter(1000);\n    this.isTopMost = true;\n});\n```", "```js\n\nscoreDialog.onAcceptedObservable.add(async () => {\n    let score = scoreData.finalScores['Final Total'];\n    await scoreDialog.hide();\n    let scoreScreen = HighScoreScreen(scene, score);\n    scoreScreen.onCancelledObservable.add(async () => {\n        await scoreDialog.show();\n    });\n});\n```"]