- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Editing Form Data
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑表单数据
- en: The preceding two chapters showed how to build an HTML form to add new birthdays
    into the *Birthdays* application and how to add server-side validation for that
    form. This chapter wraps up the form implementation by adding the ability to edit
    existing birthday information.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 前两章展示了如何构建一个 HTML 表单来将新的生日添加到 *Birthdays* 应用程序中，以及如何为该表单添加服务器端验证。本章通过添加编辑现有生日信息的能力来总结表单实现。
- en: Doing this will involve adding Svelte component state to track whether the edit
    form is in listing or editing mode.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 做这件事将涉及添加 Svelte 组件状态来跟踪编辑表单是在列表模式还是编辑模式。
- en: Up to this point, the server has stored data in a plain JavaScript array. We
    have been using TDD to force the simplest implementation that could possibly work.
    This chapter brings in a more complex implementation that uses a `Map` object,
    which we’ll do as part of the *Refactor* step as part of the *Red-Green-Refactor*
    workflow.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，服务器一直在使用纯 JavaScript 数组存储数据。我们一直使用 TDD 来强制实施最简单的可能工作的实现。本章引入了一个更复杂的实现，它使用了一个
    `Map` 对象，我们将作为 *Refactor* 步骤的一部分，在 *Red-Green-Refactor* 工作流程中进行。
- en: 'This chapter will cover the following key topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下关键主题：
- en: Planning the path ahead
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规划未来的路径
- en: Adding a Playwright test for editing form data
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为编辑表单数据添加 Playwright 测试
- en: Evolving the repository to allow ID lookup
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逐步演化存储库以允许 ID 查找
- en: Updating the form action to handle edits
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新表单操作以处理编辑
- en: Updating the list page with a new edit mode
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用新的编辑模式更新列表页面
- en: By the end of the chapter, you’ll have seen how TDD is used to evolve system
    design when you increase the functionality of a software system.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将看到如何使用 TDD 来演化系统设计，当你增加软件系统的功能时。
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code for the chapter can be found online at [https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter06/Start](https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter06/Start).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 该章节的代码可以在网上找到，地址为 [https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter06/Start](https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter06/Start)。
- en: Planning the path ahead
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规划未来的路径
- en: Before we get started with the code, let’s do a little upfront design so we
    have a rough course of action.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写代码之前，让我们做一些初步设计，以便有一个大致的行动路线。
- en: The overall goal is to allow every birthday entry in the system to be modified.
    We’d like to reuse the existing `BirthdayForm` component so that it can be used
    for this purpose.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 总体目标是允许系统中的每个生日条目都可以被修改。我们希望重用现有的 `BirthdayForm` 组件，以便它可以用于此目的。
- en: '*Figure 6**.1* shows a diagram of how we could update the system to support
    this new feature. Each list item will have an `Birthday` component will be switched
    to a `BirthdayForm` component:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6.1* 展示了如何更新系统以支持这个新功能的示意图。每个列表项将有一个 `Birthday` 组件，将被切换到 `BirthdayForm`
    组件：'
- en: '![Figure 6.1 – A mockup of editing birthdays](img/Figure_6.1_B19611.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.1 – 编辑生日的原型](img/Figure_6.1_B19611.jpg)'
- en: Figure 6.1 – A mockup of editing birthdays
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – 编辑生日的原型
- en: While in this edit mode, it makes sense to hide the form for adding a birthday
    and also prohibit editing other birthdays, just to ensure that there’s only ever
    one active form on display.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑模式下，隐藏添加生日的表单并禁止编辑其他生日是有意义的，只是为了确保始终只有一个活动表单在显示。
- en: There’s one question remaining, and that’s how do we let the backend form action
    know that we’re editing a birthday and not adding one?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的一个问题是如何让后端表单操作知道我们正在编辑一个生日而不是添加一个？
- en: A straightforward approach to doing this is to add a special `id` property to
    each birthday data object. This is a unique value that the server can use to identify
    each individual object. The `id` will never change and cannot be edited, whereas
    the other data items can be changed. And the user never needs to see the `id`
    value. Its purpose is simply to enable modification of existing data items.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 做这件事的一个直接方法是给每个生日数据对象添加一个特殊的 `id` 属性。这是一个服务器可以用来识别每个单独对象的唯一值。`id` 将永远不会改变且不能被编辑，而其他数据项可以更改。用户永远不需要看到
    `id` 值。它的目的是简单地启用现有数据项的修改。
- en: We can use the standard JavaScript `randomUUID` function to give us a unique
    string to create an `id` for each birthday.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用标准的 JavaScript `randomUUID` 函数来生成一个唯一的字符串，为每个生日创建一个 `id`。
- en: '*Figure 6**.2* shows the various SvelteKit components and functions, together
    with the important bits of data that are needed to make this work, including a
    new editing state variable in the page component and the `id` field used to pick
    out the birthday for editing:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6**.2*显示了各种SvelteKit组件和函数，以及实现此功能所需的重要数据，包括页面组件中的新编辑状态变量和用于选择编辑生日所用的`id`字段：'
- en: '![Figure 6.2 – Using the component state and a lookup table to implement edit
    behavior](img/Figure_6.2_B19611.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图6.2 – 使用组件状态和查找表实现编辑行为](img/Figure_6.2_B19611.jpg)'
- en: Figure 6.2 – Using the component state and a lookup table to implement edit
    behavior
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 – 使用组件状态和查找表实现编辑行为
- en: Before continuing, it’s worth noting that our current birthday repository holds
    its `birthday` objects in a plain JavaScript array. This is fine for listing and
    adding new items, but it’s not ideal for replacing existing items without updated
    versions. A better data structure is a `Map` object, which allows us to easily
    update items based on a key. Since we’ve already realized we need a fixed `id`
    value to represent each birthday, we already have a good choice for a key.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，值得注意的是，我们当前的生日存储库以纯JavaScript数组的形式存储其`birthday`对象。这对于列出和添加新项目来说是不错的，但不是在不需要更新版本的情况下替换现有项目的理想数据结构。更好的数据结构是一个`Map`对象，它允许我们根据键轻松更新项目。由于我们已经意识到我们需要一个固定的`id`值来表示每个生日，我们已经有了一个很好的键选择。
- en: That covers our up front design. With a plan in place, it’s time for an end-to-end
    test.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了我们的初步设计。有了计划，现在是时候进行端到端测试了。
- en: Adding a Playwright test for editing form data
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加用于编辑表单数据的 Playwright 测试
- en: In this section, we’ll build the latest Playwright test for our system. Because
    this test is quite long, we’ll build it bit by bit. In [*Chapter 7*](B19611_07.xhtml#_idTextAnchor093),
    *Tidying up Test Suites*, we’ll look at how this test script can be shortened.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将构建我们系统的最新 Playwright 测试。因为这个测试相当长，我们将逐步构建它。在[*第7章*](B19611_07.xhtml#_idTextAnchor093)“整理测试套件”中，我们将看看如何缩短这个测试脚本。
- en: 'Let’s follow these steps to create the test:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤创建测试：
- en: 'In `tests/birthday.test.js`, begin the test with the following code, which
    loads the application, the `/birthdays` endpoint, and then completes the form
    to add a new birthday for `Ares`. We have to be careful to find the button specifically
    with the **Save** name. That’s because we’ll now have multiple buttons on the
    page: one named **Save**, and then multiple buttons named **Edit**:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`tests/birthday.test.js`中，使用以下代码开始测试，该代码加载应用程序、`/birthdays`端点，然后完成表单以添加`Ares`的新生日。我们必须小心地找到名为**保存**的按钮。这是因为我们现在将在页面上有多个按钮：一个名为**保存**的按钮，然后是多个名为**编辑**的按钮：
- en: '[PRE0]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, add the following command to find the `Ares`. This uses the special `getByRole(''listitem'').filter(...)`
    chain command, which finds an element with the `listitem` role (meaning the `li`
    elements) that also contains the `''Ares''` text. We then find the **Edit** button
    within that list item element:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加以下命令以找到`Ares`。这使用特殊的`getByRole('listitem').filter(...)`链式命令，该命令找到一个具有`listitem`角色的元素（意味着`li`元素），同时也包含`'Ares'`文本。然后我们在该列表项元素中找到**编辑**按钮：
- en: '[PRE1]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We now assume that a new form has appeared for editing the birthday information
    for `Ares`. Continue the test with the following code, which replaces the `Date
    of birth` field with another value, and then click the **Save** button:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在假设已经出现了一个新的表单，用于编辑`Ares`的生日信息。使用以下代码继续测试，该代码将`出生日期`字段替换为另一个值，然后点击**保存**按钮：
- en: '[PRE2]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finish off the new test with a couple of expectations. We check that the original
    date of birth no longer appears and that the new date of birth does appear:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用几个期望来完成新的测试。我们检查原始出生日期不再出现，而新的出生日期确实出现：
- en: '[PRE3]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Finally, the previous Playwright tests need to be modified. Each test assumed
    that there was just one button on the page, the `find a button` and change them
    to be `find a button named Save`. Find all the lines that look like this:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，需要修改之前的 Playwright 测试。每个测试都假设页面上只有一个按钮，即`find a button`，并将它们更改为`find a button
    named Save`。找到所有看起来像这样的行：
- en: '[PRE4]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And update them to look like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 并将它们更新如下：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: That completes the new test. You can see we’ve already made some design decisions
    about the new **Edit** buttons and how they operate.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了新的测试。您可以看到，我们已经在新的**编辑**按钮及其操作上做出了一些设计决策。
- en: 'If you run tests now with the `npm test` command, you’ll see the new test timeout
    waiting for the **Edit** button to appear:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在使用`npm test`命令运行测试，您将看到新的测试超时等待**编辑**按钮出现：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the next section, we’ll translate that into decisions about the application
    code.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将将其转换为关于应用程序代码的决定。
- en: Evolving the repository to allow ID lookup
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使存储库进化以允许 ID 查找
- en: It’s now time to update our birthday data items to include an `id` field.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候更新我们的生日数据项，包括一个 `id` 字段。
- en: Let’s start with a new test to check that `id` is present.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个新的测试开始，检查 `id` 是否存在。
- en: 'Start by adding this test into the `src/routes/birthdays/page.server.test.js`
    file, within the `describe` block named `/birthdays - default action`. It checks
    that each birthday has a unique `id` field associated with it:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先将此测试添加到 `src/routes/birthdays/page.server.test.js` 文件中，在名为 `/birthdays - default
    action` 的 `describe` 块内。它检查每个生日都有一个与其关联的唯一 `id` 字段：
- en: '[PRE7]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Make that pass in `src/lib/server/birthdayRepository.js`. Start by adding the
    `import` statement:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/lib/server/birthdayRepository.js` 中使其通过。首先添加 `import` 语句：
- en: '[PRE8]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then update the definition of the `addNew` function:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后更新 `addNew` 函数的定义：
- en: '[PRE9]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you run tests now, you’ll see that the test passes, but we have a new failure
    in a different part of the test suite. The `returns a fixture of two items` test
    is now erroring because of these new `id` fields. We can fix this by using the
    `expect.objectContaining` constraining function, which is useful for for saying,
    *I don’t care about anything except these properties*. It’s a useful tool for
    reducing the brittleness of tests. Update that test now to read as shown in the
    following code block:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你现在运行测试，你会看到测试通过了，但我们测试套件中的另一个部分出现了新的失败。由于这些新的 `id` 字段，`返回两个项目的固定值` 测试现在出现了错误。我们可以通过使用
    `expect.objectContaining` 约束函数来修复这个问题，这是一个有用的工具，可以用来表示，“我不在乎除了这些属性之外的一切”。它是减少测试脆弱性的有用工具。现在更新那个测试，如下面的代码块所示：
- en: '[PRE10]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now add this next test, which checks that if we send in a request with an `id`
    property, then we should choose to update the item matching that `id`, rather
    than adding a new birthday. Notice the use of the `storedId` function, which pulls
    out the `id` property that was saved into the repository:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在添加这个下一个测试，该测试检查如果我们发送一个带有 `id` 属性的请求，那么我们应该选择更新与该 `id` 匹配的项目，而不是添加一个新的生日。注意
    `storedId` 函数的使用，它提取出已保存到存储库中的 `id` 属性：
- en: '[PRE11]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: It’s now a great time to refactor our `db` value to be a `Map` object rather
    than an array, as we discussed in the previous section. Doing that refactor will
    make this new test straightforward. But we don’t *refactor* on *Red*. So, begin
    by skipping the test you just wrote and checking the test suite is *Green*.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是时候重构我们的 `db` 值，使其成为一个 `Map` 对象，而不是数组，正如我们在上一节中讨论的那样。进行这个重构将使这个新测试变得简单。但我们不在
    *Red* 上 *重构*。所以，首先跳过你刚刚编写的测试，并检查测试套件是否 *Green*。
- en: '[PRE12]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In `src/lib/server/birthdayRepository.js`, replace `db`, `addNew`, `getAll`,
    and `clear` with this implementation that uses the `Map` object:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/lib/server/birthdayRepository.js` 中，将 `db`、`addNew`、`getAll` 和 `clear`
    替换为使用 `Map` 对象的这个实现：
- en: '[PRE13]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Run your tests after this change and make sure they are still *Green*.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此更改后运行测试，并确保它们仍然是 *Green*。
- en: Refactoring with confidence
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 有信心地进行重构
- en: Notice how the presence of your unit tests removes any fear of change when you
    completely replace the internal data structure. The tests encourage you to make
    whatever change you need without worrying about unintentional changes in behavior.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你的单元测试的存在消除了当你完全替换内部数据结构时的任何改变恐惧。测试鼓励你做出任何必要的更改，而不用担心行为上的无意改变。
- en: All the tests should pass – fantastic!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 所有测试都应该通过——太棒了！
- en: This section has shown you another example of how we can use TDD to delay complex
    designs until the point that our unit tests force us. You’ve seen how we can migrate
    an important variable from an array to a `Map` object.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 本节向您展示了另一个示例，说明我们可以如何使用 TDD 将复杂设计推迟到单元测试迫使我们的时候。您已经看到我们可以如何将一个重要变量从数组迁移到 `Map`
    对象。
- en: Now let’s get on with building the edit feature.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们继续构建编辑功能。
- en: Updating the form action to handle edits
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新表单操作以处理编辑
- en: 'In this section, we’ll continue with updating the repository to handle updating
    birthdays in addition to adding new ones. We’ll tackle this in three parts: first,
    replacing items in the `db` field, second, guarding against invalid `id` values,
    and third, ensuring that `id` values are passed back in validation errors so that
    the same birthday can be corrected by the user.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将继续更新存储库以处理更新生日以及添加新生日。我们将分三部分来处理这个问题：首先，替换 `db` 字段中的项目，其次，防止无效的 `id`
    值，最后，确保在验证错误中返回 `id` 值，以便用户可以更正相同的生日。
- en: Replacing items in the repository
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 替换存储库中的项目
- en: 'Let’s get started with the test you wrote in the previous section:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从上一节中写的测试开始：
- en: 'Un-skip the last test you wrote in the `src/routes/birthdays/page.server.test.js`
    file. Make sure to run the tests and watch it fail, ensuring you’re on *Red*:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消 `src/routes/birthdays/page.server.test.js` 文件中你最后写的测试的跳过。确保运行测试并观察它失败，确保你处于
    *红色* 状态：
- en: '[PRE14]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To make that test pass, start by adding a `replace` function to `src/lib/server/birthdayRepository.js`:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使这个测试通过，首先在 `src/lib/server/birthdayRepository.js` 中添加一个 `replace` 函数：
- en: '[PRE15]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then, import that new function into `src/routes/birthdays/+page.server.js`:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将那个新函数导入到 `src/routes/birthdays/+page.server.js`：
- en: '[PRE16]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Update the `actions` constant, first by pulling out `id` from the request,
    and then using that `id` value to switch behavior. If `id` is present, then call
    the `replace` function; otherwise, call the `addNew` function:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `actions` 常量，首先从请求中提取 `id`，然后使用该 `id` 值来切换行为。如果 `id` 存在，则调用 `replace` 函数；否则，调用
    `addNew` 函数：
- en: '[PRE17]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Re run your tests; you should now be on *Green*.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新运行你的测试；你现在应该处于 *绿色* 状态。
- en: Next, let’s ensure that only valid `id` values are accepted.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们确保只接受有效的 `id` 值。
- en: Protecting against unknown identifiers
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防止未知标识符
- en: 'The final validation we need is to make sure that we don’t try to update items
    in the repository that don’t exist. Let’s begin with a new test context:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要的最后一个验证是确保我们不会尝试更新库中不存在的项目。让我们从一个新的测试上下文开始：
- en: 'Still in `src/routes/birthdays/page.server.test.js`, add a new nested `describe`
    block to the *validation errors* context, as shown in the following code. I’ve
    skipped ahead and included *three* tests here since we’ve solved these kinds of
    tests before, and we can feel confident about solving them at the same time:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在 `src/routes/birthdays/page.server.test.js` 中，向 *验证错误* 上下文中添加一个新的嵌套 `describe`
    块，如下面的代码所示。我已经跳过了一些内容，并包括了 *三个* 测试，因为我们之前已经解决过这类测试，并且我们可以对同时解决它们有信心：
- en: '[PRE18]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To make this pass, start by adding a new `has` function to `src/lib/server/birthdayRepository.js`:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使这个通过，首先在 `src/lib/server/birthdayRepository.js` 中添加一个新的 `has` 函数：
- en: '[PRE19]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then import that into `src/routes/birthdays/+page.server.js`:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后将它导入到 `src/routes/birthdays/+page.server.js`：
- en: '[PRE20]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: And finally, make use of it by adding a new guard clause.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，通过添加一个新的防护子句来利用它。
- en: '[PRE21]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We’re almost done with the form action validations, but there’s one more thing
    we need to do.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎完成了表单操作验证，但还有一件事需要做。
- en: Updating return values to include identifiers
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新返回值以包含标识符
- en: When a validation error occurs, such as when the `name` field is empty, we need
    to ensure the `id` form value is included in the return error value. That ensures
    that back in the web browser, the correct edit form can be reopened to allow the
    user to correct their edits.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当发生验证错误时，例如当 `name` 字段为空时，我们需要确保 `id` 表单值包含在返回的错误值中。这确保了在网页浏览器中，可以重新打开正确的编辑表单，以便用户更正他们的编辑。
- en: 'Before we launch into the code changes, let’s discuss the strategy. This is
    how the application code will end up looking:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始代码更改之前，让我们讨论一下策略。这是应用程序代码最终将呈现的样子：
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Before you make that change, however, think about how you’ll test this. We
    already have a test that checks the contents of the return value, so one option
    is to go back and edit this test like this:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在你做出更改之前，考虑一下你将如何测试这个。我们已经有了一个检查返回值内容的测试，所以一个选择是回过头来编辑这个测试，如下所示：
- en: '[PRE23]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: But don’t do this.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 但不要这样做。
- en: I find that editing previous tests is generally a bad idea. The reason for that
    is it can produce tests that end up specifying invalid scenarios that can never
    happen. The preceding example is indeed an invalid scenario. That’s because there’s
    no birthday in the system with an `id` value of `123`. To make it valid, we’d
    need new test setup instructions that create the birthday with the `id` value
    of `123` to ensure the `id` value is valid.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现编辑之前的测试通常是一个坏主意。原因是它可能会产生测试，最终指定了永远不会发生的不合法场景。前面的例子确实是一个不合法的场景。这是因为系统中没有
    `id` 值为 `123` 的生日。为了使其有效，我们需要新的测试设置说明，创建一个 `id` 值为 `123` 的生日，以确保 `id` 值是有效的。
- en: 'But if we do that, then we have no test for the original scenario of adding
    a birthday! Instead, let’s create new tests that cover each of the two use cases
    that can happen: an invalid name or an invalid date of birth when a birthday is
    being edited.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果我们这样做，那么我们就没有对添加生日时的原始场景进行测试了！相反，让我们创建新的测试，覆盖可能发生的两种用例：编辑生日时无效的名称或无效的出生日期。
- en: Scenario-based testing
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 基于场景的测试
- en: When you’re writing unit tests, always make sure your tests cover valid scenarios.
    If you’re following TDD, that generally means always adding new tests rather than
    going back to modify existing tests.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编写单元测试时，始终确保你的测试覆盖了有效场景。如果你遵循TDD，那通常意味着总是添加新的测试而不是返回修改现有测试。
- en: 'Let’s begin by adding a new nested context inside the `validation` `errors`
    context:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在`validation` `errors`上下文中添加一个新的嵌套上下文开始：
- en: 'Add the following `describe` context with its associated `beforeEach` block,
    which adds a birthday into the system:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下带有相关`beforeEach`块的`describe`上下文，该块将生日添加到系统中：
- en: '[PRE24]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now, add the first test into the context. It attempts to edit the created birthday
    but has an empty name. The expectation checks that the same `id` value is passed
    back in the response:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将第一个测试添加到上下文中。它尝试编辑创建的生日，但名称为空。期望检查响应中返回的`id`值是否相同：
- en: '[PRE25]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'To make that pass, include the `id` property in the relevant guard clause:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使这一步通过，请在相关的保护子句中包含`id`属性：
- en: '[PRE26]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Next, add a test for an invalid date of birth:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加一个针对无效出生日期的测试：
- en: '[PRE27]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To make that pass, update the second guard clause, as shown here:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使这一步通过，更新第二个保护子句，如下所示：
- en: '[PRE28]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: That completes the changes to the form action.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就完成了表单操作的更改。
- en: Listening to your tests
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 倾听你的测试
- en: It’s very important to listen to your tests. If they are a slog to write and
    update, that’s a sign that either the tests can be improved or the application
    code design can be improved.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 倾听你的测试非常重要。如果它们编写和更新起来很困难，那么这可能意味着测试可以改进或应用程序代码设计可以改进。
- en: In [*Chapter 9*](B19611_09.xhtml#_idTextAnchor111), *Extracting Logic Out of
    the Framework*, we’ll move validation into the birthday repository, and this will
    give us a chance to rethink how these tests are structured.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第9章*](B19611_09.xhtml#_idTextAnchor111)《从框架中提取逻辑》中，我们将验证移动到生日仓库中，这将给我们一个重新思考这些测试结构的机会。
- en: 'This section has covered a whole bunch of changes: adding repository functionality
    for replacing items, updating the form action to either add or replace items,
    adding another guard clause to protect against invalid replacements, and finally,
    updating the existing guard clauses to return the `id` value.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 本节涵盖了大量的更改：为替换项目添加仓库功能，更新表单操作以添加或替换项目，添加另一个保护子句以防止无效替换，并最终更新现有的保护子句以返回`id`值。
- en: Now it’s time to update the page component to display `BirthdayForm` in edit
    mode.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候更新页面组件以在编辑模式下显示`BirthdayForm`了。
- en: Updating the list page with a new edit mode
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新列表页面以使用新的编辑模式
- en: In this section, you’ll update the page so that it can toggle into an edit mode
    for a given birthday. That relies on having a hidden form field for the `id` value.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将更新页面，使其能够切换到特定生日的编辑模式。这依赖于有一个隐藏的表单字段用于`id`值。
- en: Testing hidden fields
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 测试隐藏字段
- en: Testing Library doesn’t give us an easy way to query the `hidden` input fields
    because it generally concerns itself with what is visible to the user, and our
    `id` field is purposefully designed to be an internal system detail.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 测试库没有提供一种简单的方法来查询`隐藏`输入字段，因为它通常关注的是用户可以看到的内容，而我们的`id`字段是故意设计成内部系统细节。
- en: Fortunately, we can fall back to the standard **Document Object Model** (**DOM**)
    Form API to figure this out.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们可以退回到标准的**文档对象模型**（**DOM**）表单API来解决这个问题。
- en: The nature of writing unit tests for frameworks such as SvelteKit means that
    sometimes you’re checking for internal details like this.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 为SvelteKit等框架编写单元测试的性质意味着有时你需要检查像这样的内部细节。
- en: 'Let’s start with a new test in a new nested `describe` block:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个新的嵌套`describe`块中的新测试开始：
- en: 'In the `src/routes/birthdays/BirthdayForm.test.js` file, and within the `BirthdayForm`
    root in the `describe` block, add this new nested `describe` block and test:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/routes/birthdays/BirthdayForm.test.js`文件中，并在`describe`块中的`BirthdayForm`根内部，添加这个新的嵌套`describe`块和测试：
- en: '[PRE29]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'To make that pass, update the `BirthdayForm` component (in `src/routes/birthdays/BirthdayForm.svelte`)
    to include a new hidden field:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使这一步通过，更新`BirthdayForm`组件（在`src/routes/birthdays/BirthdayForm.svelte`）以包含一个新的隐藏字段：
- en: '[PRE30]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Notice how we need optional chaining (with `form?`) to ensure our existing
    tests, with no `form` prop, continue to work. However, this presents a problem:
    what is the value of the `id` field if we’re not editing but creating? We need
    another test, which you can add to the same `describe` block:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意我们如何需要可选链（使用`form?`）来确保我们的现有测试（没有`form`属性）继续工作。然而，这提出了一个问题：如果我们不是在编辑而是在创建，`id`字段的值是什么？我们需要另一个测试，你可以将其添加到同一个`describe`块中：
- en: '[PRE31]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'To make that pass, pull up the optional chain into a conditional that wraps
    the hidden `input` element in the `BirthdayForm` component:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使这个测试通过，将可选链提升到条件中，该条件将`BirthdayForm`组件中的隐藏`input`元素包装起来：
- en: '[PRE32]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Okay, that’s it for the `BirthdayForm` component itself. Now what about the
    page component?
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，这就是`BirthdayForm`组件本身的所有内容。现在关于页面组件呢？
- en: Adding a toggle mode to the page
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在页面上添加切换模式
- en: In this section, you’ll introduce a component state variable named `editing`
    that allows us to toggle between *create* and *update* mode.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将引入一个名为`editing`的组件状态变量，使我们能够在*创建*和*更新*模式之间切换。
- en: 'Let’s start by displaying the **Edit** buttons for each of the birthdays listed
    on the page:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从显示页面上列出的每个生日的**编辑**按钮开始：
- en: 'In `src/routes/birthdays/page.test.js`, add the following test. Remember that
    the repository has, by default, two items, so this test allows us to test that
    *both* have an **Edit** button:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/routes/birthdays/page.test.js`中添加以下测试。请记住，默认情况下，仓库有两个项目，因此这个测试允许我们测试*两个*都有一个**编辑**按钮：
- en: '[PRE33]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'To make that pass, in `/src/routes/birthdays/+page.svelte`, update each `li`
    element to contain a new `button` element:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使这个测试通过，在`/src/routes/birthdays/+page.svelte`中，更新每个`li`元素以包含一个新的`button`元素：
- en: '[PRE34]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Next, what happens when we click that button? Let’s add a set of tests for
    checking the behavior when the `beforeEach` function that we’re going to use to
    pull out some common setup for each of our tests. The second is for the `click`
    function, which will be used to simulate a DOM click event:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，当我们点击那个按钮时会发生什么？让我们添加一组测试来检查使用`beforeEach`函数（我们将用它来提取每个测试的公共设置）时的行为。第二个是为`click`函数，它将用于模拟DOM点击事件：
- en: '[PRE35]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Then add this new nested `describe` block and test. The `beforeEach` function
    is used to pull out the *Arrange* portion of the test to avoid having to repeat
    it in each of the subsequent tests. This code also makes use of a helper function
    named `firstEditButton` that keeps the tests readable and short:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后添加这个新的嵌套`describe`块和测试。`beforeEach`函数用于提取测试的*安排*部分，以避免在后续的每个测试中重复它。此代码还使用了一个名为`firstEditButton`的辅助函数，使测试可读且简短：
- en: '[PRE36]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'To make that pass, start by introducing a new component state variable named
    `editing` into the page component:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使这个测试通过，首先在页面组件中引入一个新的组件状态变量`editing`：
- en: '[PRE37]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'When the `editing` to the specific `birthday` object, which is given to us
    by the `each` construct. We can then wrap the original `Birthday` component in
    a conditional; if `editing` is equal to the current `birthday` object, then don’t
    show `Birthday`:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当`editing`到特定的`birthday`对象时，这个对象是由`each`构造函数给我们的。然后我们可以用条件包装原始的`Birthday`组件；如果`editing`等于当前的`birthday`对象，则不显示`Birthday`：
- en: '[PRE38]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Next, we also want to hide the original form for adding the page:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们还想隐藏添加页面的原始表单：
- en: '[PRE39]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'To make that pass, wrap the last bit of the page component in `if`:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使这个测试通过，将页面组件的最后部分用`if`包装起来：
- en: '[PRE40]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'But hang on a second! We’re now defining behavior on a static element that
    we’ve never tested before: the heading. The `Add a new birthday` text was something
    we didn’t bother testing. But now that it’s an integral part of our test suite,
    surely we should have a test to prove that it’s initially there? (Otherwise, the
    most straightforward way to get the last test to *Green* would have been to delete
    the heading.)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 但是等等！我们现在正在定义一个静态元素的行为，我们之前从未测试过：标题。`添加新生日`文本是我们没有费心测试的东西。但现在它是我们测试套件的一个组成部分，我们当然应该有一个测试来证明它最初在那里？（否则，使最后一个测试变为*绿色*的最直接方法就是删除标题。）
- en: 'In fact, do that now. Go ahead and delete it and watch your test suite happily
    pass. To bring it back in, we need a failing test:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，现在就做吧。删除它并观察你的测试套件愉快地通过。为了将其恢复，我们需要一个失败的测试：
- en: 'Add this new test right at the top of the test suite:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在测试套件的顶部添加这个新测试：
- en: '[PRE41]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Watch the test fail, and then go ahead and undelete the heading.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察测试失败，然后继续取消删除标题。
- en: 'Onto the next test. This time, let’s check that `BirthdayForm` is shown. We
    can do that by looking for a `Name` field that has the existing name in there
    (in this case, that’s `Hercules`):'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是下一个测试。这次，让我们检查是否显示了`BirthdayForm`。我们可以通过查找包含现有名称的`Name`字段来完成（在这种情况下，是`Hercules`）：
- en: '[PRE42]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'To make that pass, flesh out the `if` conditional block with a new `:else`
    block. Notice the order of proceedings swaps around here: if `editing` is equal
    to `birthday`, then display `BirthdayForm`; otherwise, display `Birthday`:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使这个测试通过，用一个新的`:else`块充实`if`条件块。注意这里的执行顺序发生了变化：如果`editing`等于`birthday`，则显示`BirthdayForm`；否则，显示`Birthday`：
- en: '[PRE43]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Now that we have a **Save** button on the page, shouldn’t we hide all the **Edit**
    buttons? Yes, let’s do that:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们页面上有了**保存**按钮，难道我们不应该隐藏所有的**编辑**按钮吗？是的，让我们这么做：
- en: '[PRE44]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'To make that pass, introduce another `if` block around the button:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使它通过，在按钮周围引入另一个`if`块：
- en: '[PRE45]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'There’s one final test left. This is an important one. It checks that if SvelteKit
    passes us back a `form` object with an `id` value, then we need to immediately
    start in *edit* mode for that birthday. Since the `id` value is important here,
    this test includes its own `data` and `form` properties:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还有一个最后的测试。这是一个重要的测试。它检查如果SvelteKit返回一个带有`id`值的`form`对象，那么我们需要立即开始对该生日进行*编辑*模式。由于`id`值在这里很重要，这个测试包括它自己的`data`和`form`属性：
- en: '[PRE46]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Using factory methods to shorten tests
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 使用工厂方法缩短测试
- en: In [*Chapter 7*](B19611_07.xhtml#_idTextAnchor093), *Tidying up Test Suites*,
    you’ll create a factory method for birthdays that will shorten this test.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第7章*](B19611_07.xhtml#_idTextAnchor093)，*整理测试套件*中，您将创建一个用于生日的工厂方法，这将缩短这个测试。
- en: 'The tests allude to the fact that the initial value of `editing` depends on
    `form`. So, update that now to look like this:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试暗示`editing`的初始值取决于`form`。所以，现在更新它，使其看起来像这样：
- en: '[PRE47]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Then, because we’re dealing with different objects, we can no longer use equality
    based on object identity to match the currently edited birthday. So, update the
    first `if` to be the one shown in the following code, which checks `id` rather
    than the whole object itself:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，因为我们正在处理不同的对象，我们不能再使用基于对象身份的相等性来匹配当前正在编辑的生日。所以，更新第一个`if`，使其像以下代码所示，检查`id`而不是整个对象本身：
- en: '[PRE48]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Now, because of this new reliance on the `id` field, you’ll find other tests
    breaking. Update the `birthdays` array to include the `id` values like this:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，由于对`id`字段的这种新依赖，您会发现其他测试正在中断。更新`birthdays`数组，包括像这样的`id`值：
- en: '[PRE49]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: After this point, your tests should pass, including your Playwright test.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 从这一点开始，您的测试应该通过，包括Playwright测试。
- en: '*Figure 6**.3* shows what the application looks like if you fire up the dev
    server (with the `npm run dev` command) and try to replace an existing birthday
    with an invalid date:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6**.3*显示了如果您启动开发服务器（使用`npm run dev`命令）并尝试用无效日期替换现有的生日，应用程序看起来会是什么样子：'
- en: '![Figure 6.3 – A validation error when editing a birthday](img/Figure_6.3_B19611.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图6.3 – 编辑生日时的验证错误](img/Figure_6.3_B19611.jpg)'
- en: Figure 6.3 – A validation error when editing a birthday
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3 – 编辑生日时的验证错误
- en: This section has shown you how you can use the Svelte component state to switch
    between add and edit modes of a form and how you can test-drive those modifications
    in both the form component and the page component.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 本节向您展示了如何使用Svelte组件状态在表单的添加和编辑模式之间切换，以及如何对这两种修改进行测试驱动开发，既在表单组件中也在页面组件中。
- en: Summary
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'This chapter has demonstrated how the TDD process works once you have a substantial
    amount of code in place. In addition, you have seen how we can build feature upon
    feature using the same *Red-Green-Refactor* workflow that you learned about in
    [*Chapter 2*](B19611_02.xhtml#_idTextAnchor036), *Introducing the Red-Green-Refactor
    Workflow*: first, by refactoring the store implementation, and then by introducing
    Svelte component state.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 本章演示了在放置了大量代码之后，TDD过程是如何工作的。此外，您还看到了我们如何使用与[*第2章*](B19611_02.xhtml#_idTextAnchor036)，*介绍红-绿-重构工作流程*中学习到的相同的*红-绿-重构*工作流程来构建功能：首先，通过重构存储实现，然后通过引入Svelte组件状态。
- en: In the next chapter, we’ll stop to look at some of the ways we can simplify
    the current code base.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将停下来看看我们可以简化当前代码库的一些方法。
- en: 'Part 2: Refactoring Tests and Application Code'
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2部分：重构测试和应用代码
- en: Now that you’ve learned about and practiced the test-driven development workflow,
    it’s time to focus on practices and strategies that will keep your automated tests
    and application code neat and tidy. The chapters in this part will provide you
    with guidance on creating elegant and maintainable automated test suites.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了并实践了测试驱动开发的工作流程，是时候关注那些将保持您的自动化测试和应用代码整洁有序的实践和策略了。本部分中的章节将为您提供创建优雅且可维护的自动化测试套件的指导。
- en: 'This part has the following chapters:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分包含以下章节：
- en: '[*Chapter 7*](B19611_07.xhtml#_idTextAnchor093), *Tidying up Test Suites*'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第7章*](B19611_07.xhtml#_idTextAnchor093)，*整理测试套件*'
- en: '[*Chapter 8*](B19611_08.xhtml#_idTextAnchor100), *Creating Matchers to Simplify
    Tests*'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第8章*](B19611_08.xhtml#_idTextAnchor100)，*创建匹配器以简化测试*'
- en: '[*Chapter 9*](B19611_09.xhtml#_idTextAnchor111), *Extracting Logic Out of the
    Framework*'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第9章*](B19611_09.xhtml#_idTextAnchor111), *从框架中提取逻辑*'
- en: '[*Chapter 10*](B19611_10.xhtml#_idTextAnchor119), *Test-Driving API Endpoints*'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B19611_10.xhtml#_idTextAnchor119), *测试驱动API端点*'
- en: '[*Chapter 11*](B19611_11.xhtml#_idTextAnchor127), *Replacing Behavior with
    a Side-By-Side Implementation*'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第11章*](B19611_11.xhtml#_idTextAnchor127), *用并排实现替换行为*'
- en: '[*Chapter 12*](B19611_12.xhtml#_idTextAnchor134), *Using Component Mocks to
    Clarify Tests*'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第12章*](B19611_12.xhtml#_idTextAnchor134), *使用组件模拟来澄清测试*'
- en: '[*Chapter 13*](B19611_13.xhtml#_idTextAnchor148), *Adding Cucumber Tests*'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第13章*](B19611_13.xhtml#_idTextAnchor148), *添加Cucumber测试*'
