- en: Chapter 5. Ember Controllers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。Ember控制器
- en: 'In this chapter, we''ll cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Storing application properties
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储应用程序属性
- en: Handling actions in controllers
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理控制器中的动作
- en: Working with transitions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与转换一起工作
- en: Managing dependencies between controllers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理控制器之间的依赖关系
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Controllers in Ember.js are similar to components. They can encapsulate code,
    handle actions, and have properties. In addition, controllers can transition to
    different parts of the application and retrieve information from other controllers.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Ember.js中的控制器与组件类似。它们可以封装代码，处理动作，并具有属性。此外，控制器可以转换到应用程序的不同部分，并从其他控制器检索信息。
- en: In the near future, controllers will be completely replaced by components. However,
    until this happens, it's good to have some basic understanding on how controllers
    work.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在不久的将来，控制器将被组件完全取代。然而，直到这一发生，了解控制器的工作原理是很有帮助的。
- en: Storing application properties
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储应用程序属性
- en: One advantage of a controller is storing properties. Controllers have properties
    that are stored in the application, which is unlike the model where properties
    are saved to the server. In this recipe, we'll take a look at a few different
    types of properties and how they can be displayed in a template.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器的一个优点是存储属性。控制器具有存储在应用程序中的属性，这与模型不同，模型中的属性是保存到服务器的。在本食谱中，我们将查看几种不同类型的属性以及它们如何在模板中显示。
- en: How to do it...
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In a new application, run the following command:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新应用程序中，运行以下命令：
- en: '[PRE0]'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this application, we'll be using the `application controller` to store all
    our properties.
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个应用程序中，我们将使用`application controller`来存储所有属性。
- en: 'Update the application controller to add a new action and a few properties:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新应用程序控制器以添加新的动作和几个属性：
- en: '[PRE1]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This controller has two properties. The first property contains a string. The
    second has a Boolean value of `true` attached to it. The `enter` action displays
    a few alert boxes. Let''s take a closer look at the `enter` action:'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此控制器有两个属性。第一个属性包含一个字符串。第二个具有附加的布尔值`true`。`enter`动作显示几个警告框。让我们更详细地看看`enter`动作：
- en: '[PRE2]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When accessing properties in Ember, always use `this.get` and `this.set`. This
    guarantees that the property will be read or set correctly in Ember. In addition,
    we can use `this.getProperties`. This allows us to get multiple properties at
    once. It returns an object of those properties and their values.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在Ember中访问属性时，始终使用`this.get`和`this.set`。这保证了属性将在Ember中被正确读取或设置。此外，我们可以使用`this.getProperties`。这允许我们一次性获取多个属性。它返回一个包含这些属性及其值的对象。
- en: Another useful method is `toggleProperty`. This will take a Boolean value and
    toggle it. In other words, a value of `false` will become `true` and vice versa.
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一个有用的方法是`toggleProperty`。这将取一个布尔值并将其切换。换句话说，`false`的值将变为`true`，反之亦然。
- en: Be aware that you don't have to declare each property in the controller definition.
    Properties can be retrieved directly from the template and be manipulated. In
    the preceding example, the `prop1` property is retrieved from the template. It
    was never defined in the controller. If needed, you can set default property values.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，您不必在控制器定义中声明每个属性。属性可以直接从模板中检索并进行操作。在上面的示例中，`prop1`属性是从模板中检索的。它从未在控制器中定义过。如果需要，您可以设置默认属性值。
- en: 'Update the template for the application. Display the properties:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新应用程序的模板。显示属性：
- en: '[PRE3]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `prop1` property is bound to the bracket input and `input` helper. By default,
    bracket input tags are one-way. What this means is that the `prop1` property is
    retrieved from the controller when the template is rendered. It's copied over,
    and changes to the property are not reflected back in the controller. On the other
    hand, `input` helpers are bound two-way. Any changes to the value in the `input`
    helper will be reflected in the controller.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`prop1`属性绑定到括号输入和`input`辅助工具。默认情况下，括号输入标签是单向的。这意味着当模板渲染时，`prop1`属性是从控制器中检索的。它被复制，并且属性的变化不会反映回控制器。另一方面，`input`辅助工具是双向绑定的。对`input`辅助工具中的值所做的任何更改都会反映在控制器中。'
- en: Start the Ember server and update the values in the one-way input:![How to do
    it...](img/00017.jpeg)
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Ember服务器并更新单向输入中的值：![如何操作...](img/00017.jpeg)
- en: Even though the bracket input tag value is set to `prop1`, it's not changing
    the `{{prop1}}` property elsewhere in the template. This is because the value
    is set to work only one way. The only way to change the value of `prop1` in the
    controller is to send it as an action back to the controller from the template.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 即使括号输入标签的值设置为`prop1`，它也不会改变模板中其他地方的`{{prop1}}`属性。这是因为值被设置为仅以这种方式工作。在控制器中更改`prop1`值的唯一方法是将它作为从模板发送回控制器的操作。
- en: This is the basis behind data down, actions up. Data is copied down to the template
    from the controller or component. Any changes to it are then sent back in an action
    to the parent component or controller. Keep this concept in mind as it is becoming
    more and more popular in Ember.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是“数据向下，操作向上”的基础。数据从控制器或组件复制到模板。对其的任何更改都会随后通过操作发送回父组件或控制器。请记住这个概念，因为它在Ember中变得越来越流行。
- en: Update the values in the two-way input helper box:![How to do it...](img/00018.jpeg)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新双向输入助手框中的值：![如何操作...](img/00018.jpeg)
- en: The two-way `input` helper updates all the values in the template because it's
    linked back to the controller. Any changes to the property in the template are
    reflected back in the controller because it's two-way bound.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 双向`input`助手更新模板中的所有值，因为它链接回控制器。模板中属性的任何更改都会反映在控制器中，因为它双向绑定。
- en: Press the **Value of prop1** button:![How to do it...](img/00019.jpeg)
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**prop1的值**按钮：![如何操作...](img/00019.jpeg)
- en: When the button is clicked, an action is triggered. It displays three alert
    boxes. Each alert box will display the `prop1` property. It will then toggle the
    third Boolean property from `true` to `false`.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当按钮被点击时，会触发一个操作。它会显示三个警告框。每个警告框都会显示`prop1`属性。然后它会将第三个布尔属性从`true`切换到`false`。
- en: Computed properties, or observers, can be added to controllers as well. To learn
    more about these, check out [Chapter 2](part0023_split_000.html#LTSU1-d21a6ad8148a415181fa52c0043435bb
    "Chapter 2. The Ember.Object Model"), *The Ember.Object Model*.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 计算属性或观察者也可以添加到控制器中。要了解更多信息，请查看[第2章](part0023_split_000.html#LTSU1-d21a6ad8148a415181fa52c0043435bb
    "第2章。Ember.Object模型")，*Ember.Object模型*。
- en: How it works...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Controllers can use properties to show information to a user. Unlike models,
    they are not persisted to a server. However, they are persisted in the application
    state. When working with templates, they can be one-way or two-way bound.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器可以使用属性向用户显示信息。与模型不同，它们不会被持久化到服务器。然而，它们被持久化在应用程序状态中。当与模板一起工作时，它们可以是单向或双向绑定。
- en: Handling actions in controllers
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在控制器中处理操作
- en: Actions are important to controllers. They are triggered by the user action
    and can be used to change the application state. In this recipe, we'll create
    four different types of actions and see how they react to different situations.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 操作对控制器很重要。它们由用户操作触发，可以用来改变应用程序状态。在这个菜谱中，我们将创建四种不同类型的操作，并看看它们如何对不同情况进行反应。
- en: How to do it...
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In a new application, generate the following files:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新的应用中，生成以下文件：
- en: '[PRE4]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We'll be using the `controller` and `application` to store actions. Some actions
    will bubble up to the `route`, and some won't.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将使用`controller`和`application`来存储操作。一些操作会冒泡到`route`，而一些则不会。
- en: 'Update the application controller and add three new actions:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新应用程序控制器并添加三个新操作：
- en: '[PRE5]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let''s take a look at each action:'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们看看每个操作：
- en: '[PRE6]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is a normal action. It just displays an alert box:'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是一个正常的操作。它只是显示一个警告框：
- en: '[PRE7]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This action is a little more interesting. By default, all controller actions
    `return false` if they exist in the controller. By returning the value to `true`,
    this action will bubble up to the `application` route after the alert box is displayed.
    The route can then handle the action:'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个操作有点更有趣。默认情况下，如果控制器中存在所有控制器操作，它们会`return false`。通过将值返回到`true`，这个操作将在显示警告框后冒泡到`application`路由。然后路由可以处理这个操作：
- en: '[PRE8]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The action has a value passed to it. It will display this value to the user
    in an alert box. The text in the alert box is using something called ES6 template
    strings. This makes it a little easier to display variables in text.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 操作会传递一个值给它。它会在警告框中向用户显示这个值。警告框中的文本正在使用一种称为ES6模板字符串的东西。这使得在文本中显示变量变得稍微容易一些。
- en: 'Update the application route with two more actions:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新应用程序路由并添加两个更多操作：
- en: '[PRE9]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Each action displays an alert box. You might have noticed that the `enter` action
    was not present in the controller. By convention, template `actions` will look
    first in the controller. If the action is not defined in the controller, it will
    bubble up to the route.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个动作都会显示一个警告框。你可能已经注意到 `enter` 动作在控制器中不存在。按照惯例，模板 `actions` 首先在控制器中查找。如果动作在控制器中未定义，它将向上冒泡到路由。
- en: 'Add four buttons to the application template:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向应用程序模板添加四个按钮：
- en: '[PRE10]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Each `button` has an `action` bound to it. By default, this is bound to the
    click event; this can be changed if needed.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个 `button` 都绑定了一个 `action`。默认情况下，这是绑定到点击事件；如果需要，可以更改它。
- en: Run `ember server`. Open a web browser to see the following screen:![How to
    do it...](img/00020.jpeg)
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `ember server`。打开网页浏览器查看以下屏幕：![如何操作...](img/00020.jpeg)
- en: Each button represents a different type of action.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个按钮代表不同类型的动作。
- en: Click on the first button:![How to do it...](img/00021.jpeg)
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击第一个按钮：![如何操作...](img/00021.jpeg)
- en: This displays a message from the controller.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这显示了控制器中的消息。
- en: Click on the second button:![How to do it...](img/00022.jpeg)
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击第二个按钮：![如何操作...](img/00022.jpeg)
- en: This alert box is displayed first from the controller:![How to do it...](img/00023.jpeg)
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个警告框首先从控制器中显示：![如何操作...](img/00023.jpeg)
- en: This second alert box is displayed from the application route.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第二个警告框是从应用程序路由中显示的。
- en: Click on the third action:![How to do it...](img/00024.jpeg)
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击第三个动作：![如何操作...](img/00024.jpeg)
- en: This shows the message from the controller with the value passed.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这显示了带有传递值的控制器消息。
- en: Click on the last button:![How to do it...](img/00025.jpeg)
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击最后一个按钮：![如何操作...](img/00025.jpeg)
- en: This will show the message from the application route as it was not defined
    in the controller.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将显示应用程序路由中的消息，因为它在控制器中未定义。
- en: How it works...
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Actions in Ember bubble up but they are dependent on the user action. They start
    in the controller and then move to the route. We can add actions to our templates
    and pass values from the template to our actions.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Ember 中的动作会冒泡，但它们依赖于用户动作。它们从控制器开始，然后移动到路由。我们可以在模板中添加动作并从模板传递值到我们的动作。
- en: Working with transitions
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与过渡一起工作
- en: When inside a route, you can use the controller to transition to another route.
    We'll look at an example on how to transition from one route to another.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当在路由内部时，你可以使用控制器过渡到另一个路由。我们将查看如何从一个路由过渡到另一个路由的示例。
- en: How to do it...
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In a new application, generate the following files:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新应用程序中，生成以下文件：
- en: '[PRE11]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will generate two different routes for us—the `foo1` and `foo2` routes.
    Each route will have a button that transitions to the other route. Each controller
    will handle the action logic.
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将为我们生成两个不同的路由——`foo1` 和 `foo2` 路由。每个路由将有一个按钮，可以过渡到另一个路由。每个控制器将处理动作逻辑。
- en: 'Add an action to the foo1 controller:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向 foo1 控制器添加一个动作：
- en: '[PRE12]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This controller has one action called `enter` that transitions to the route
    called `foo2`. The `this.transitionToRoute` method is used to transition to different
    routes in the application. It takes two arguments. The first argument is the name
    of the route. The second argument is optional, and it is where you enter in the
    model. By default, it will be serialized in the URL if added.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个控制器有一个名为 `enter` 的动作，它过渡到名为 `foo2` 的路由。`this.transitionToRoute` 方法用于在应用程序中过渡到不同的路由。它接受两个参数。第一个参数是路由的名称。第二个参数是可选的，你可以在其中输入模型。默认情况下，如果添加，它将在
    URL 中序列化。
- en: The `trasintionToRoute` method can take route paths as well. For example, you
    might have a `foo2` nested route called `foo3`. You can transition to this route
    by calling `this.trasitionToRoute('foo2.foo3')`.
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`trasintionToRoute` 方法可以接受路由路径。例如，你可能有一个名为 `foo2` 的嵌套路由 `foo3`。你可以通过调用 `this.trasitionToRoute(''foo2.foo3'')`
    来过渡到这个路由。'
- en: 'Add an action to the foo2 controller:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向 foo2 控制器添加一个动作：
- en: '[PRE13]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: When the `enter` action is triggered, it transitions to the `foo1` route.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当触发 `enter` 动作时，它将过渡到 `foo1` 路由。
- en: 'Update the foo1 template:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 foo1 模板：
- en: '[PRE14]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This `button` triggers the `enter` `action` in the `foo1` controller.
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个 `button` 触发了 `foo1` 控制器中的 `enter` `action`。
- en: 'Update the foo2 template:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 foo2 模板：
- en: '[PRE15]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This `button` triggers the `enter` `action` in the `foo2` controller.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个 `button` 触发了 `foo2` 控制器中的 `enter` `action`。
- en: 'Add a link to both the routes in the index template file:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在索引模板文件中为两个路由添加一个链接：
- en: '[PRE16]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This uses the `link-to` helper in a non-block form. The first argument is the
    name displayed and the second is the name of the route.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这使用非块形式的 `link-to` 辅助函数。第一个参数是显示的名称，第二个是路由的名称。
- en: 'Update the application template file:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新应用模板文件：
- en: '[PRE17]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The application template file has a link back to the application at the top.
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应用模板文件顶部有一个链接返回到应用。
- en: Run `ember server` and you'll see the following screen after opening a web browser:![How
    to do it...](img/00026.jpeg)
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`ember server`，在打开网页浏览器后，你会看到以下屏幕：![如何操作...](img/00026.jpeg)
- en: This displays a link to each route.
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这显示了每个路由的链接。
- en: Click on the **Foo1 Route** link. The following page will be displayed:![How
    to do it...](img/00027.jpeg)
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Foo1路由**链接。将显示以下页面：![如何操作...](img/00027.jpeg)
- en: This displays the foo1 route.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这显示了foo1路由。
- en: Click on the **Foo2 Route** button. The following screen will be displayed:![How
    to do it...](img/00028.jpeg)
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Foo2路由**按钮。将显示以下屏幕：![如何操作...](img/00028.jpeg)
- en: After the button is clicked, the foo2 route is displayed.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击按钮后，显示foo2路由。
- en: How it works...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To navigate through an application, we can use transitions inside a controller.
    The `trasitionToRoute` method is used to transition from one route to another.
    It's a part of the `Ember.Controller` class.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要在应用中导航，我们可以在控制器中使用转换。`trasitionToRoute`方法用于从一个路由转换到另一个路由。它是`Ember.Controller`类的一部分。
- en: Managing dependencies between controllers
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理控制器之间的依赖关系
- en: Often, controllers will need to access other controllers' properties and models.
    This is especially important when you have nested resources. In this recipe, we'll
    take a look at a nested controller that needs access to the parent controller's
    model and properties.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 经常，控制器需要访问其他控制器的属性和模型。当你有嵌套资源时，这尤为重要。在这个菜谱中，我们将查看一个需要访问父控制器模型和属性的嵌套控制器。
- en: How to do it...
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In a new application, generate a couple of new routes and templates:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新应用中，生成一些新的路由和模板：
- en: '[PRE18]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This generates the `foo1` and `foo2` routes and controllers. The `foo2` route
    is a nested route. The index template will contain links.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这生成了`foo1`和`foo2`路由和控制器。`foo2`路由是一个嵌套路由。索引模板将包含链接。
- en: 'Verify in the `router.js` file that all the routes have been created correctly:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`router.js`文件中验证是否已正确创建所有路由：
- en: '[PRE19]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As we generated the routes, `router.js` should already be set up for us. As
    you can see, the `foo2` route is nested under the `foo1` route. What this means
    is that we'll have to access the URL at `/foo1/foo2` to access the `foo2` route.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 随着我们生成了路由，`router.js`应该已经为我们设置好了。正如你所见，`foo2`路由嵌套在`foo1`路由下。这意味着我们将必须访问`/foo1/foo2`
    URL来访问`foo2`路由。
- en: 'Add a new model to the foo1 route:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向foo1路由添加一个新模型：
- en: '[PRE20]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: All this route does is return a model with a simple array of letters.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此路由所做的只是返回一个包含简单字母数组的模型。
- en: 'Add a new model to the foo2 route:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向foo2路由添加一个新模型：
- en: '[PRE21]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The nested `foo2` route also returns a simple array of letters in its `model`
    hook.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 嵌套的`foo2`路由在其`model`钩子中也返回一个简单的字母数组。
- en: 'Add a new property to the foo1 controller:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向foo1控制器添加一个新属性：
- en: '[PRE22]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This controller has one string property.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此控制器有一个字符串属性。
- en: 'Create a property in the foo2 controller that can access the `foo1` model and
    properties:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在foo2控制器中创建一个可以访问`foo1`模型和属性的属性：
- en: '[PRE23]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '`Ember.inject.controller` allows us access to the `foo1` controller and properties.
    We can then use the `Ember.computed.reads` method to set the `foo1` property.
    This creates a read-only computed property that we can use in the template.'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Ember.inject.controller`允许我们访问`foo1`控制器和属性。然后我们可以使用`Ember.computed.reads`方法设置`foo1`属性。这创建了一个只读的计算属性，我们可以在模板中使用它。'
- en: 'Update the foo1 template file:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新foo1模板文件：
- en: '[PRE24]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: All the `foo1` template does is display the list from the model.
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`foo1`模板所做的只是显示模型中的列表。'
- en: 'Update the foo2 template file:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新foo2模板文件：
- en: '[PRE25]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `foo2` template has access to all the properties of the `foo2` and `foo1`
    controllers. In this example, we can use the `each` helper to list all the letters
    in the `foo2` model. It can also use the `foo1` computed property to list all
    the letters in the `foo1` controller. We can even access individual properties
    using `foo1Controller`.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`foo2`模板可以访问`foo2`和`foo1`控制器的所有属性。在这个例子中，我们可以使用`each`辅助函数列出`foo2`模型中的所有字母。它还可以使用`foo1`计算属性列出`foo1`控制器中的所有字母。我们甚至可以使用`foo1Controller`访问单个属性。'
- en: 'Add some basic links to the application and index template files:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向应用和索引模板文件添加一些基本链接：
- en: '[PRE26]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The application file will have a link at the top:'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应用文件顶部将有一个链接：
- en: '[PRE27]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `link-to` helpers here link to the `foo1` and `foo2` routes.
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里的`link-to`辅助函数链接到`foo1`和`foo2`路由。
- en: Start the Ember server and you'll see the following screen after you open a
    web browser:![How to do it...](img/00029.jpeg)
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Ember 服务器，打开网页浏览器后，你会看到以下屏幕：![如何操作...](img/00029.jpeg)
- en: The index home screen displays a link to each route.
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 索引主页显示每个路由的链接。
- en: Click on **Foo2 Route**. The following window will be displayed:![How to do
    it...](img/00030.jpeg)
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Foo2 路由**。以下窗口将显示：![如何操作...](img/00030.jpeg)
- en: As you can see, the `foo1` template is displayed as well as the `foo2` template.
    The `foo2` template has access to both the `foo2` and `foo1` properties and model.
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如你所见，`foo1` 模板和 `foo2` 模板都会显示。`foo2` 模板可以访问 `foo2` 和 `foo1` 属性和模型。
- en: How it works...
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Controllers can access other controllers using `Ember.inject.controller`. This
    is known as **dependency injection**. Dependency injection occurs when we take
    one object and inject it into another. Dependency injection is covered in more
    detail in the *Using dependency injection* recipe of [Chapter 11](part0088_split_000.html#2JTHG1-d21a6ad8148a415181fa52c0043435bb
    "Chapter 11. Real-Time Web Applications"), *Real-Time Web Applications*.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器可以使用 `Ember.inject.controller` 访问其他控制器。这被称为**依赖注入**。当我们将一个对象注入到另一个对象中时，就会发生依赖注入。依赖注入在[第11章](part0088_split_000.html#2JTHG1-d21a6ad8148a415181fa52c0043435bb
    "第11章。实时Web应用")的*使用依赖注入*配方中进行了更详细的介绍，*实时Web应用*。
