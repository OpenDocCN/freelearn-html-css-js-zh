- en: Chapter 5. Ember Controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Storing application properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling actions in controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with transitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing dependencies between controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Controllers in Ember.js are similar to components. They can encapsulate code,
    handle actions, and have properties. In addition, controllers can transition to
    different parts of the application and retrieve information from other controllers.
  prefs: []
  type: TYPE_NORMAL
- en: In the near future, controllers will be completely replaced by components. However,
    until this happens, it's good to have some basic understanding on how controllers
    work.
  prefs: []
  type: TYPE_NORMAL
- en: Storing application properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One advantage of a controller is storing properties. Controllers have properties
    that are stored in the application, which is unlike the model where properties
    are saved to the server. In this recipe, we'll take a look at a few different
    types of properties and how they can be displayed in a template.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a new application, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this application, we'll be using the `application controller` to store all
    our properties.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the application controller to add a new action and a few properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This controller has two properties. The first property contains a string. The
    second has a Boolean value of `true` attached to it. The `enter` action displays
    a few alert boxes. Let''s take a closer look at the `enter` action:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When accessing properties in Ember, always use `this.get` and `this.set`. This
    guarantees that the property will be read or set correctly in Ember. In addition,
    we can use `this.getProperties`. This allows us to get multiple properties at
    once. It returns an object of those properties and their values.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Another useful method is `toggleProperty`. This will take a Boolean value and
    toggle it. In other words, a value of `false` will become `true` and vice versa.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Be aware that you don't have to declare each property in the controller definition.
    Properties can be retrieved directly from the template and be manipulated. In
    the preceding example, the `prop1` property is retrieved from the template. It
    was never defined in the controller. If needed, you can set default property values.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the template for the application. Display the properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `prop1` property is bound to the bracket input and `input` helper. By default,
    bracket input tags are one-way. What this means is that the `prop1` property is
    retrieved from the controller when the template is rendered. It's copied over,
    and changes to the property are not reflected back in the controller. On the other
    hand, `input` helpers are bound two-way. Any changes to the value in the `input`
    helper will be reflected in the controller.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start the Ember server and update the values in the one-way input:![How to do
    it...](img/00017.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Even though the bracket input tag value is set to `prop1`, it's not changing
    the `{{prop1}}` property elsewhere in the template. This is because the value
    is set to work only one way. The only way to change the value of `prop1` in the
    controller is to send it as an action back to the controller from the template.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This is the basis behind data down, actions up. Data is copied down to the template
    from the controller or component. Any changes to it are then sent back in an action
    to the parent component or controller. Keep this concept in mind as it is becoming
    more and more popular in Ember.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Update the values in the two-way input helper box:![How to do it...](img/00018.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The two-way `input` helper updates all the values in the template because it's
    linked back to the controller. Any changes to the property in the template are
    reflected back in the controller because it's two-way bound.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press the **Value of prop1** button:![How to do it...](img/00019.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the button is clicked, an action is triggered. It displays three alert
    boxes. Each alert box will display the `prop1` property. It will then toggle the
    third Boolean property from `true` to `false`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Computed properties, or observers, can be added to controllers as well. To learn
    more about these, check out [Chapter 2](part0023_split_000.html#LTSU1-d21a6ad8148a415181fa52c0043435bb
    "Chapter 2. The Ember.Object Model"), *The Ember.Object Model*.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Controllers can use properties to show information to a user. Unlike models,
    they are not persisted to a server. However, they are persisted in the application
    state. When working with templates, they can be one-way or two-way bound.
  prefs: []
  type: TYPE_NORMAL
- en: Handling actions in controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Actions are important to controllers. They are triggered by the user action
    and can be used to change the application state. In this recipe, we'll create
    four different types of actions and see how they react to different situations.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a new application, generate the following files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We'll be using the `controller` and `application` to store actions. Some actions
    will bubble up to the `route`, and some won't.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the application controller and add three new actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s take a look at each action:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is a normal action. It just displays an alert box:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This action is a little more interesting. By default, all controller actions
    `return false` if they exist in the controller. By returning the value to `true`,
    this action will bubble up to the `application` route after the alert box is displayed.
    The route can then handle the action:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The action has a value passed to it. It will display this value to the user
    in an alert box. The text in the alert box is using something called ES6 template
    strings. This makes it a little easier to display variables in text.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the application route with two more actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Each action displays an alert box. You might have noticed that the `enter` action
    was not present in the controller. By convention, template `actions` will look
    first in the controller. If the action is not defined in the controller, it will
    bubble up to the route.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add four buttons to the application template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Each `button` has an `action` bound to it. By default, this is bound to the
    click event; this can be changed if needed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run `ember server`. Open a web browser to see the following screen:![How to
    do it...](img/00020.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each button represents a different type of action.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the first button:![How to do it...](img/00021.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This displays a message from the controller.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the second button:![How to do it...](img/00022.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This alert box is displayed first from the controller:![How to do it...](img/00023.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This second alert box is displayed from the application route.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the third action:![How to do it...](img/00024.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This shows the message from the controller with the value passed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the last button:![How to do it...](img/00025.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will show the message from the application route as it was not defined
    in the controller.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Actions in Ember bubble up but they are dependent on the user action. They start
    in the controller and then move to the route. We can add actions to our templates
    and pass values from the template to our actions.
  prefs: []
  type: TYPE_NORMAL
- en: Working with transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When inside a route, you can use the controller to transition to another route.
    We'll look at an example on how to transition from one route to another.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a new application, generate the following files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will generate two different routes for us—the `foo1` and `foo2` routes.
    Each route will have a button that transitions to the other route. Each controller
    will handle the action logic.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add an action to the foo1 controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This controller has one action called `enter` that transitions to the route
    called `foo2`. The `this.transitionToRoute` method is used to transition to different
    routes in the application. It takes two arguments. The first argument is the name
    of the route. The second argument is optional, and it is where you enter in the
    model. By default, it will be serialized in the URL if added.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `trasintionToRoute` method can take route paths as well. For example, you
    might have a `foo2` nested route called `foo3`. You can transition to this route
    by calling `this.trasitionToRoute('foo2.foo3')`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add an action to the foo2 controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When the `enter` action is triggered, it transitions to the `foo1` route.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the foo1 template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This `button` triggers the `enter` `action` in the `foo1` controller.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the foo2 template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This `button` triggers the `enter` `action` in the `foo2` controller.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a link to both the routes in the index template file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This uses the `link-to` helper in a non-block form. The first argument is the
    name displayed and the second is the name of the route.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the application template file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The application template file has a link back to the application at the top.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run `ember server` and you'll see the following screen after opening a web browser:![How
    to do it...](img/00026.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This displays a link to each route.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Foo1 Route** link. The following page will be displayed:![How
    to do it...](img/00027.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This displays the foo1 route.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Foo2 Route** button. The following screen will be displayed:![How
    to do it...](img/00028.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the button is clicked, the foo2 route is displayed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To navigate through an application, we can use transitions inside a controller.
    The `trasitionToRoute` method is used to transition from one route to another.
    It's a part of the `Ember.Controller` class.
  prefs: []
  type: TYPE_NORMAL
- en: Managing dependencies between controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often, controllers will need to access other controllers' properties and models.
    This is especially important when you have nested resources. In this recipe, we'll
    take a look at a nested controller that needs access to the parent controller's
    model and properties.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a new application, generate a couple of new routes and templates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This generates the `foo1` and `foo2` routes and controllers. The `foo2` route
    is a nested route. The index template will contain links.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify in the `router.js` file that all the routes have been created correctly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we generated the routes, `router.js` should already be set up for us. As
    you can see, the `foo2` route is nested under the `foo1` route. What this means
    is that we'll have to access the URL at `/foo1/foo2` to access the `foo2` route.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a new model to the foo1 route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: All this route does is return a model with a simple array of letters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a new model to the foo2 route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The nested `foo2` route also returns a simple array of letters in its `model`
    hook.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a new property to the foo1 controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This controller has one string property.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a property in the foo2 controller that can access the `foo1` model and
    properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`Ember.inject.controller` allows us access to the `foo1` controller and properties.
    We can then use the `Ember.computed.reads` method to set the `foo1` property.
    This creates a read-only computed property that we can use in the template.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the foo1 template file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: All the `foo1` template does is display the list from the model.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the foo2 template file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `foo2` template has access to all the properties of the `foo2` and `foo1`
    controllers. In this example, we can use the `each` helper to list all the letters
    in the `foo2` model. It can also use the `foo1` computed property to list all
    the letters in the `foo1` controller. We can even access individual properties
    using `foo1Controller`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add some basic links to the application and index template files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The application file will have a link at the top:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `link-to` helpers here link to the `foo1` and `foo2` routes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start the Ember server and you'll see the following screen after you open a
    web browser:![How to do it...](img/00029.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The index home screen displays a link to each route.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **Foo2 Route**. The following window will be displayed:![How to do
    it...](img/00030.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see, the `foo1` template is displayed as well as the `foo2` template.
    The `foo2` template has access to both the `foo2` and `foo1` properties and model.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Controllers can access other controllers using `Ember.inject.controller`. This
    is known as **dependency injection**. Dependency injection occurs when we take
    one object and inject it into another. Dependency injection is covered in more
    detail in the *Using dependency injection* recipe of [Chapter 11](part0088_split_000.html#2JTHG1-d21a6ad8148a415181fa52c0043435bb
    "Chapter 11. Real-Time Web Applications"), *Real-Time Web Applications*.
  prefs: []
  type: TYPE_NORMAL
