- en: Chapter 11. Preparing for Production and Themes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We completed our application in the preceding chapter. Now, it is time to create
    a nice theme to put a personal touch on the application and also prepare to deploy
    it on production. After all, we have been working on the development environment,
    and when we want to go live, we cannot simply deploy all the files; we need to
    do some preparation first. So, in this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom themes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packaging the application for production
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we start
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main tool we are going to use in this chapter is Sencha Cmd. With Sencha
    Cmd, we will be able to create custom themes and make the production build. We
    always need to make sure the Sencha Cmd version we are using is compatible with
    the Ext JS version we are using. If you downloaded the preceding version of Ext
    JS from the Sencha website, please also get the latest Sencha Cmd (it will be
    compatible).
  prefs: []
  type: TYPE_NORMAL
- en: 'So far, this is what we have developed throughout this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Before we start](img/0457OT_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: All the code we created is inside `app`, `index.html`, `php`, `resources` (custom
    image icon, font, and custom locale files), and `sass` (custom application CSS).
    The other folders and files were created by Sencha Cmd, as you learned in [Chapter
    2](ch02.html "Chapter 2. Getting Started"), *Getting Started*.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first task we will perform in this chapter is to create a new theme for
    our project. To do so, we will use Sencha Cmd and the terminal application of
    the operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Sencha Cmd now has the capability to generate the complete file structure we
    need to create a brand new theme.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s create a new theme step by step. First, with the terminal open,
    change the directory to the project''s root folder. Then, we will use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for the preceding command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new theme](img/0457OT_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, `masteringextjs-theme` is the name of our theme. This command will create
    a new directory with the name of our theme inside the `packages` folder, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new theme](img/0457OT_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `package.json` file contains some configurations of the theme used by Sencha
    Cmd, such as theme name, version, and dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `sass` directory contains all the Sass files of our theme. Inside this
    directory, we will find three more main directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '`var`: This contains Sass variables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src`: This contains Sass rules and mixins. These rules and mixins use variables
    declared on files inside the `sass/var` directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`etc`: This contains additional utility functions and mixins.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the files that we create must match the classpath of the component we are
    styling. For example, if we want to style the button component, we need to create
    the styles inside the file `sass/var/button/Button.scss`; if want to style the
    Component Panel, we need to create styles inside the file `sass/var/panel.scss`.
  prefs: []
  type: TYPE_NORMAL
- en: The `resources` folder contains images and other static resources that will
    be used by our theme.
  prefs: []
  type: TYPE_NORMAL
- en: The `overrides` folder contains all the JavaScript overrides to components that
    might be required for theming these components.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Spend some time exploring the contents of the following directories that we
    can find inside the `packages` folder to get more familiar with this way of organizing
    the Sass files: `ext-theme-classic`, `ext-theme-gray`, and `ext-theme-neptune`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, any theme that we create uses `ext-theme-classic` as a base (the
    classic Ext JS blue theme). We are going to change to the `Neptune` theme that
    we have been using until now. To change the theme base, open the `package.json`
    file and locate the `extend` property. Change its value from `ext-theme-classic`
    to `ext-theme-neptune`. The content of `package.json` will be something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use any Ext JS theme as the base theme of our custom theme. These are
    the possible options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new theme](img/0457OT_11_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can use any theme package from Ext JS. We can find these packages inside
    `ext/packages`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can try the Theme Viewer example from the Ext JS example pages to try each
    theme.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the theme structure is created, and we have changed the base theme, let''s
    build it. To build it, we are going to use the terminal and Sencha Cmd again.
    Change the directory to `packages/masteringextjs-theme` and type the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The result will be somewhat like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new theme](img/0457OT_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The result of this command will be the creation of the `build` directory inside
    the `packages/masteringextjs-theme` folder, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new theme](img/0457OT_11_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Inside this `build` folder, we can find the `resources` folder, and inside the
    resources folder we can find a file named `masteringextjs-theme-all.css`, which
    contains all the styles for all the components we styled on our theme (which is
    none so far, but we will get there). Even though we created a complete theme (styled
    all components), it is not 100 percent certain that we will use all the components
    in our application. Sencha Cmd has the ability to filter and create a CSS file
    with only the components we are going to use in our project. For this reason,
    we do not need to include `masteringextjs-theme-all.css` manually in our application.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `masteringextjs-theme`.`pkg` file will also be created inside `build/ masteringextjs-theme`.
    We can use this file to distribute the theme package to other developers. For
    more information, please read [http://docs.sencha.com/cmd/5.x/cmd_packages/cmd_packages.html](http://docs.sencha.com/cmd/5.x/cmd_packages/cmd_packages.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'So let''s set up our project so that it can use our theme. Inside `app.json`,
    locate the theme entry and change it to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: With `sencha app watch` being executed in a terminal, we will be able to see
    that `Packt-all.css` will be overwritten. When we refresh the application, there
    will be no changes because we have not started to customize our theme yet.
  prefs: []
  type: TYPE_NORMAL
- en: For the next steps, it is very important to keep `sencha app watch` executed
    while we make the changes. This way we will be able to see the modifications by
    simply refreshing the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the base color
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start customizing the theme right now! Let''s go back to the `packages/masteringextjs-theme`
    folder. Here''s how we customize the theme:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `sass/var` folder, create a new file named `Component.scss`. Let''s
    add the following content to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, we are declaring a Sass variable named `$base-color`
    with a greenish value. This will change the base color of the theme from blue
    to green. Let's apply the changes on our theme and see the changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the browser and we will have something like the following screenshot:![Changing
    the base color](img/0457OT_11_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With a single line, we have a complete new theme! We can continue to add more
    styles to our custom theme and customize each and every component.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s make some changes in our theme. Inside `Component.scss`, add the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing components](img/0457OT_11_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note how the button background, the Grid Column header, and the Panel header
    inside the accordion menu have changed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and create some other files so that we can add more custom
    styles, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the following files and folders:![Customizing components](img/0457OT_11_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside `Accordion.scss`, we will add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will change the color of the header title of the panels inside the accordion
    menu.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Inside `Panel.scss`, we will add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This color will be used to create a different shade of green for the Panel component.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Inside `Bar.scss`, we will add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will change the gradient of the tab panel bar. Possible values can be found
    at [http://goo.gl/fapTBA](http://goo.gl/fapTBA).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Inside `Tab.scss`, we will add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will change the tab color to different shades of green.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'So far, this is the output we have:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Customizing components](img/0457OT_11_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Try comparing it to the previous output screenshot.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Inside `Button.scss`, we will add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will be the output for our new custom buttons:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Customizing components](img/0457OT_11_11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The buttons (normal ones and the ones placed inside a toolbar) look very different
    now.
  prefs: []
  type: TYPE_NORMAL
- en: Some useful tips while creating new themes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is no recipe or detailed tutorial on how to create a completely customized
    theme in Ext JS. Usually, the names of the Sass variables used by Ext JS are self-explanatory.
    For example, `$button-default-glyph-color` is the color used to render the glyphs
    for buttons.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some tips that could prove useful in the process of creating
    Ext JS themes:'
  prefs: []
  type: TYPE_NORMAL
- en: Try learning Sass and Compass. Sass and Compass have mixins and useful functions
    to work with colors, among other functionalities ([http://sass-lang.com/documentation/file.SASS_REFERENCE.html](http://sass-lang.com/documentation/file.SASS_REFERENCE.html)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Take a look at the variables and the current values used by the theme you are
    using as the base theme. You can find its source code at `ext/packages/ext-theme-neptune/sass/var`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experiment! The best way to learn something new is to practice it. A good approach
    can be to copy the original file (for example, `Button.scss`) from the directory
    listed previously, start changing the variable values, and see what happens!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While experimenting, try using different colors (with contrast, such as red,
    yellow, black, blue, or any other color of your preference) so you can see exactly
    what is being changed in the theme!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consult the documentation. Each class in Ext JS has a section of the Sass variables
    used, with a description and possible values. Make sure to make the most of it:![Some
    useful tips while creating new themes](img/0457OT_11_12.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom UIs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ext JS also supports UIs, which are special themes that can be applied to specific
    components. For example, let's say that for the buttons **Print**, **Export to
    PDF** and **Export to Excel**, we want to apply a different theme. We can create
    a UI.
  prefs: []
  type: TYPE_NORMAL
- en: The first step is checking the documentation for what UIs, known as **CSS Mixins**,
    are available:![Creating custom UIs](img/0457OT_11_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, check all the variables needed to create this mixin. We can declare the
    custom variables inside the `masteringextjs-theme/sass/var/button/Button.scss`
    file we created earlier, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we are going to create a new file `masteringextjs-theme/sass/src/button/Button.scss`
    with our custom UI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that we are assigning our custom variables to the mixin variables needed
    to create this UI. As the button has three sizes in Ext JS, for now, we are going
    to declare the custom UI only for the small button, but it can be done for the
    other sizes as well.
  prefs: []
  type: TYPE_NORMAL
- en: Applying the UI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In our code, we are going to create a new file `app/view/base/CustomButton.js`
    with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we are going to replace the `xtype` class of the buttons to which we
    want to apply this UI (creating a super class is easier than applying the `ui`
    configuration to each component, but the choice of doing it or not is up to you).
    We are going to replace the `xtype` configuration for the **Print**, **Export
    to PDF** and **Export to Excel** buttons as shown by the following code (`Films.js`
    file):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If we try to execute our application again, this will be the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Applying the UI](img/0457OT_11_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that the **Print** and **Export** buttons look different from the **Add**
    button.
  prefs: []
  type: TYPE_NORMAL
- en: We can create as many UIs as we need and for any component that supports it.
    It is also possible to create UIs that are not part of a theme, meaning we can
    create it inside the `masteringextjs/sass` folder following the same structure
    we followed in this topic.
  prefs: []
  type: TYPE_NORMAL
- en: Now, all you have to do is free the designer who exists inside yourself!
  prefs: []
  type: TYPE_NORMAL
- en: Packaging the application for production
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our theme is created, so now the only thing left is to make the production build
    and deploy the code on the production web server. Again, we will use Sencha Cmd
    to do it for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do a production build, we need to have a terminal opened. We also need to
    change the directory to the application''s root directory and type the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here''s how the command looks on the terminal:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Packaging the application for production](img/0457OT_11_15.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Once the command execution is completed, it will create a new directory called
    `build/production/NameofTheApp`. As our application namespace is `Packt`, it creates
    the directory `build/production/Packt`, as follows:![Packaging the application
    for production](img/0457OT_11_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What this command does is get all the code we developed (inside the `app` folder)
    plus the Ext JS code we really need to run the application and put it inside the
    `all-classes.js` file. Then, using **YUI Compressor**, Sencha Cmd will minimize
    the code and obfuscate the JavaScript code; this way, we will have a very small
    JavaScript file that the user will need to load. Also, Sencha Cmd will evaluate
    all the components our application is using, filter the CSS that is not needed,
    and put it inside the `resources/Packt-all.css` file. All our custom images (icon
    images) will also be copied from the development environment to the `production`
    folder (inside the `resources` folder as well).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The next step now is to make sure that the production build is working as expected.
    To access the development environment we use `http://localhost/masteringextjs`.
    To test the production build, we need to access `http://localhost/masteringextjs/build/production/Packt`.
    When we test it, we will see that it is not working as we really expect. We will
    get some errors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we need to copy the `php` folders to the `production` folder as well,
    as shown in the following screenshot:![Packaging the application for production](img/0457OT_11_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We should also copy `ext/packages/ext-locale/build` and the locale files we
    are going to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: And now, we can test the application again. It should work as expected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Compiling ext-locale
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here''s a quick note about the `ext-locale` package: if you are using only
    one locale, you can add the `ext-locale` package in `requires` of `app.json` and
    a new entry `"locale" : "es"` with the code of the locale you want to use. Ext
    JS will compile the required files.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using multiple locales, there are two options: doing like we did
    (manually copying the files) or making a production build for each locale. You
    can see an example of how to do it by exploring `app.json` and the source code
    of the **EXT JS Kitchen Sink** example ([http://dev.sencha.com/ext/5.0.1/examples/kitchensink/](http://dev.sencha.com/ext/5.0.1/examples/kitchensink/)).'
  prefs: []
  type: TYPE_NORMAL
- en: What to deploy in production
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Always remember that we have the `app` folder and all the code developed as
    our development environment. And inside the `production` folder, we have all the
    code that should be deployed in production.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s say we want to deploy this application right now. Simply transfer
    all the content from `masteringextjs/build/production/Packt` to the desired folder
    on your web server, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What to deploy in production](img/0457OT_11_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Happy production code!
  prefs: []
  type: TYPE_NORMAL
- en: Benefits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What are the benefits of the production build? Can we just deploy the development
    code? We can deploy the development code as is in production, but it is not recommended.
    With the production build, we boost the performance while loading the files, but
    the file is minimized, which makes the code harder to read as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let''s do the following testing: open the application on the browser,
    log in, and open the **Actors** screen from the static data module.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the development code, we will have the following result from Chrome Developer
    Tools (or Firebug):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Benefits](img/0457OT_11_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The application made **657** **requests**, resulting in **7.7 MB** of data transferred
    to the user, and it took **17.50 s** to complete it. This is a lot, and talking
    about **7.7 MB** to be transferred to the user is unacceptable!
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s see the results using the production build:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Benefits](img/0457OT_11_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The application made **47 requests** and **1.9 MB transferred**. The most important
    change is the size of the data transferred: from **7.7 MB** to **1.9 MB**! This
    is a great improvement although **1.9 MB** is still a large amount of data to
    be transferred. The files will be cached, and this number will decrease even more.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another thing to notice is the files that are being loaded. In the development
    environment, we can see each Ext JS class being loaded by the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Benefits](img/0457OT_11_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: At the end of it, it is going to be more than 400 JavaScript files being loaded
    just to render the **Login** screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we try the production build, we will have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Benefits](img/0457OT_11_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Only one JavaScript file is being loaded with the application's source code
    and the required Ext JS SDK code (`app.js`).
  prefs: []
  type: TYPE_NORMAL
- en: So, for performance purposes, always deploy the production build. Use the development
    code only for development purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If the application starts to grow, the amount of data that will be transferred
    to the browser will be greater than 2 MB, which is not good. You can create separate
    small applications and combine them as in a portal application. This way, the
    user will be able to download only the application files to the portion of the
    application that is going to be used at that moment and will not need to download
    all the application''s source at once. This link contains a good discussion about
    the topic: [http://goo.gl/az8uVT](http://goo.gl/az8uVT).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to create a new theme, and we also learned how
    to create custom component UIs. You learned why it is important to make a production
    build and how to do it, including the difference between the files from the development
    environment to the production environment.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you have enjoyed this book! Now, let the creativity flow to create really
    awesome Ext JS apps!
  prefs: []
  type: TYPE_NORMAL
