["```js\n    var minLat = 36,\n        maxLat = 42,\n        minLng = 25,\n        maxLng = 44,\n        markerId = 1;\n    ```", "```js\n    function startButtonEvents() {document.getElementById('addStandardMarker').addEventListener('click', function(){\n          addStandardMarker();\n      });\n\n      document.getElementById('addIconMarker' ).addEventListener('click', function(){\n          addIconMarker();\n      });\n    }\n    ```", "```js\n    function createRandomLatLng() {\n      var deltaLat = maxLat - minLat;\n      var deltaLng = maxLng - minLng;\n      var rndNumLat = Math.random();\n      var newLat = minLat + rndNumLat * deltaLat;\n      var rndNumLng = Math.random();\n      var newLng = minLng + rndNumLng * deltaLng;\n      return new google.maps.LatLng(newLat, newLng);\n    }\n    ```", "```js\n    function addStandardMarker() {\n      var coordinate = createRandomLatLng();\n      var marker = new google.maps.Marker({\n        position: coordinate,\n        map: map,\n        title: 'Random Marker - ' + markerId\n      });\n    // If you don't specify a Map during the initialization //of the Marker you can add it later using the line //below\n    //marker.setMap(map);\n      markerId++;\n    }\n    ```", "```js\n    function addIconMarker() {\n      var markerIcons = ['coffee', 'restaurant_fish', 'walkingtour', 'postal', 'airport'];\n      var rndMarkerId = Math.floor(Math.random() * markerIcons.length);\n      var coordinate = createRandomLatLng();\n      var marker = new google.maps.Marker({\n        position: coordinate,\n        map: map,\n        icon: 'img/' + markerIcons[rndMarkerId] + '.png',\n        title: 'Random Marker - ' + markerId\n      });\n      markerId++;\n    }\n    ```", "```js\n    <a id=\"addStandardMarker\" href=\"#\">Add Standard Marker</a>\n    <a id=\"addIconMarker\" href=\"#\">Add Icon Marker</a>\n    ```", "```js\nvar istanbul = new google.maps.LatLng(41.038627, 28.986933);\n```", "```js\nvar marker = new google.maps.Marker({\n  position: new google.maps.LatLng(41.038627, 28.986933)\n});\nmarker.setMap(map);\n```", "```js\nmarker.setMap(null);\n```", "```js\nvar marker = new google.maps.Marker({\n  position: coordinate,\n  icon: 'img/coffeeshop.png',\n  title: 'My Coffee Shop'\n});\n```", "```js\n    var infowindow = new google.maps.InfoWindow({\n      content: '<div style=\"width:200px; height:100px; \"><b>Popup Content :</b><br><br>This popups show the center of map, which is Ankara, Turkiye</div>',\n      position: new google.maps.LatLng(39.9078, 32.8252)\n    });\n\n    infowindow.open(map);\n    ```", "```js\n    function startButtonEvents() {document.getElementById('addStandardMarker').addEventListener('click', function(){\n          addStandardMarker();\n      });\n    }\n    ```", "```js\n    startButtonEvents();\n    ```", "```js\n    var infowindow = new google.maps.InfoWindow({\n      content: 'Marker Info Window – ID : ' + markerId\n    });\n\n    google.maps.event.addListener(marker, 'click', function() {\n      infowindow.open(map, marker);\n    });\n    ```", "```js\nvar infowindow = new google.maps.InfoWindow({\ncontent: '<div style=\"width:200px; height:100px; \"><b>Popup Content :</b><br><br>This popups show the center of map, which is Ankara, Turkiye</div>',\n  position: new google.maps.LatLng(39.9078, 32.8252)\n});\ninfowindow.open(map);\n```", "```js\nvar infowindow = new google.maps.InfoWindow({\n  content: 'Marker Info Window – ID : ' + markerId\n});\ngoogle.maps.event.addListener(marker, 'click', function() {\n  infowindow.open(map, marker);\n});\n```", "```js\n    var lineCoordinates = [\n      [41.01306,29.14672],[40.8096,29.4818],\n      [40.7971,29.9761],[40.7181,30.4980],\n      [40.8429,31.0253],[40.7430,31.6241],\n      [40.7472,32.1899],[39.9097,32.8216]\n    ];\n    ```", "```js\n    function addPolyline () {\n\n    }\n    ```", "```js\n    //First we iterate over the coordinates array to create a \n    // new array which includes objects of LatLng class.\n    var pointCount = lineCoordinates.length;\n    var linePath = [];\n    for (var i=0; i < pointCount; i++) {\n      var tempLatLng = new google.maps.LatLng( lineCoordinates[i][0] , lineCoordinates[i][1]\n      );\n      linePath.push(tempLatLng);\n    }\n    ```", "```js\n    //Polyline properties are defined below\n    var lineOptions = {\n      path: linePath,\n      strokeWeight: 7,\n      strokeColor: '#FF0000',\n      strokeOpacity: 0.8\n    }\n    var polyline = new google.maps.Polyline(lineOptions);\n    ```", "```js\n    //Polyline is set to current map.\n    polyline.setMap(map);\n    ```", "```js\n    addPolyline();\n    ```", "```js\nvar pointCount = lineCoordinates.length;\nvar linePath = [];\nfor (var i=0; i < pointCount; i++) {\n  var tempLatLng = new google.maps.LatLng(lineCoordinates[i][0], lineCoordinates[i][1]);\n  linePath.push(tempLatLng);\n}\n```", "```js\npolyline.setPath(newRoute);\n```", "```js\n    var areaCoordinates = [\n      [40.0192,32.6953],[39.9434,32.5854],\n      [39.7536,32.6898],[39.8465,32.8106],\n      [39.9139,33.0084],[40.0318,32.9260],\n      [40.0402,32.7832],[40.0192,32.6953]\n    ];\n    ```", "```js\n    function addPolygon () {\n\n    }\n    ```", "```js\n    //First we iterate over the coordinates array to create a \n    // new array which includes objects of LatLng class.\n    var pointCount = areaCoordinates.length;\n    var areaPath = [];\n    for (var i=0; i < pointCount; i++) {\n      var tempLatLng = new google.maps.LatLng(areaCoordinates[i][0] , areaCoordinates[i][1]);\n      areaPath.push(tempLatLng);\n    }\n    ```", "```js\n    //Polygon properties are defined below\n    var polygonOptions = {\n      paths: areaPath,\n      strokeColor: '#FF0000 ,\n      strokeOpacity: 0.9,\n      strokeWeight: 3,\n      fillColor: '#FFFF00',\n      fillOpacity: 0.25\n    }\n    var polygon = new google.maps.Polygon(polygonOptions);\n    ```", "```js\n    //Polygon is set to current map.\n    polygon.setMap(map);\n    ```", "```js\n    addPolygon();\n    ```", "```js\n    // Defining coordinates and populations of major cities in // Turkey as Ankara, Istanbul and Izmir\n    var cities = [{\n      center: new google.maps.LatLng(39.926588, 32.854614), \n      population : 4630000\n    },\n    {\n      center: new google.maps.LatLng(41.013066, 28.976440), \n      population : 13710000\n    },\n    {\n      center: new google.maps.LatLng(38.427774, 27.130737),  \n      population : 3401000\n    }\n    ];\n\n    // Defining the corner coordinates for bounding box of \n    // Turkey\n    var bboxSouthWest = new google.maps.LatLng(35.817813, 26.047461);\n    var bboxNorthEast = new google.maps.LatLng(42.149293, 44.774902);\n    ```", "```js\n    function addCircle() {\n\n    }\n\n    function addRectangle() {\n\n    }\n    ```", "```js\n    // Iterating over the cities array to add each of them to // map\n    for (var i=0; i < cities.length; i++) {\n      var circleOptions = {\n        fillColor: '#FFFF00',\n        fillOpacity: 0.55,\n        strokeColor: '#FF0000',          \n        strokeOpacity: 0.7,\n        strokeWeight: 1,\n        center: cities[i].center,\n        radius: cities[i].population / 100\n      };\n      cityCircle = new google.maps.Circle(circleOptions);\n      cityCircle.setMap(map);\n    }\n    ```", "```js\n    var bounds = new google.maps.LatLngBounds(bboxSouthWest, bboxNorthEast);\n    var rectOptions = {\n      fillColor: '#A19E98',\n      fillOpacity: 0.45,\n      strokeColor: '#FF0000',\n      strokeOpacity: 0.0,\n      strokeWeight: 1,\n      map: map,\n      bounds: bounds\n    };\n\n    var rectangle = new google.maps.Rectangle(rectOptions);\n    ```", "```js\n    var mapOptions = {\n      center: new google.maps.LatLng(39.9046, 32.75926),\n      zoom: 5,\n      mapTypeId: google.maps.MapTypeId.ROADMAP\n    };\n    ```", "```js\n    addRectangle();\n    addCircle();\n    ```", "```js\n  var citiesLen = cities.length;\n  for (var i=0; i < citiesLen; i++) {\n      var circleOptions = {\n        fillColor: '#FFFF00',\n        fillOpacity: 0.55,\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.7,\n        strokeWeight: 1,\n        center: cities[i].center,\n        radius: cities[i].population / 100\n      };\n      cityCircle = new google.maps.Circle(circleOptions);\n      cityCircle.setMap(map);\n    }\n```", "```js\nvar bounds = new google.maps.LatLngBounds(bboxSouthWest, bboxNorthEast);\n\nvar rectOptions = {\n  fillColor: '#A19E98',\n  fillOpacity: 0.45,\n  strokeColor: '#FF0000',\n  strokeOpacity: 0.0,\n  strokeWeight: 1,\n  map: map,\n  bounds: bounds\n};\nvar rectangle = new google.maps.Rectangle(rectOptions);\n```", "```js\n    var polyline;\n    ```", "```js\n    // Defining arrow symbol\n    var arrowSymbol = {\n      strokeColor: '#000',\n      scale: 3,\n      path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW\n    };\n    ```", "```js\n    var lineOptions = {\n      path: linePath,\n      icons: [{\n        icon: arrowSymbol,\n        offset: '100%'\n      }],\n      strokeWeight: 3,\n      strokeColor: '#FF0000',\n      strokeOpacity: 0.8\n    }\n    ```", "```js\n    // Calling the arrow animation function\n    animateArrow();\n    ```", "```js\n    function animateArrow() {\n      var counter = 0;\n      var accessVar = window.setInterval(function() {\n        counter = (counter + 1) % 200;\n        var arrows = polyline.get('icons');\n        arrows[0].offset = (counter / 2) + '%';\n        polyline.set('icons', arrows);\n      }, 50);\n    }\n    ```", "```js\n    addAnimatedPolyline();\n    ```", "```js\n  var arrowSymbol = {              \n    strokeColor: '#000',\n    scale: 3,\n    path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW\n  };\n```", "```js\nvar triangle = 'M 100 100 L 300 100 L 200 300 Z';               \n```", "```js\n  var arrowSymbol = {                \n    path : 'M 100 100 L 300 100 L 200 300 Z',\n    anchor: new google.maps.Point(175,175),\n    scale: 0.15,\n    fillColor: '#FFFF00',\n    fillOpacity: 0.8,\n    strokeColor: '#000000',\n    strokeWeight: 3\n  };\n```", "```js\n  function() {\n    counter = (counter + 1) % 200;\n    var arrows = polyline.get('icons');\n    arrows[0].offset = (counter / 2) + '%';\n    polyline.set('icons', arrows);\n  }\n```", "```js\n    var georssLayer, kmlLayer;\n    ```", "```js\n    function addGeoRSSLayer() {\n      georssLayer = new google.maps.KmlLayer( 'http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/4.5_month.atom');\n      georssLayer.setMap(map);\n    }\n    ```", "```js\n    function addKMLLayer() {\n      kmlLayer = new google.maps.KmlLayer(' http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_month_depth.kml');\n      kmlLayer.setMap(map);\n    }\n    ```", "```js\n    function clearMap() {\n      if (georssLayer != undefined) {\n        georssLayer.setMap(null);\n        georssLayer = null;\n      }\n\n      if (kmlLayer != undefined) {\n        kmlLayer.setMap(null);\n        kmlLayer = null;\n      }\n    }\n    ```", "```js\n    function startButtonEvents () {\n      document.getElementById('linkGeoRSS' ).addEventListener('click', function(){\n            addGeoRSSLayer();\n      });\n      document.getElementById('linkKML' ).addEventListener('click', function(){\n            addKMLLayer();\n      });\n      document.getElementById('linkClearMap' ).addEventListener('click', function(){\n            clearMap();\n      });\n    }\n    ```", "```js\n    startButtonEvents();\n    ```", "```js\n    <a id=\"linkGeoRSS\" href=\"#\">Add GeoRSS Layer</a>\n    <a id=\"linkKML\" href=\"#\">Add KML Layer</a>\n    <a id=\"linkClearMap\" href=\"#\">Clear Map</a>\n    ```", "```js\nvar vectorLayer = new google.maps.KmlLayer('URL_TO_FEED');\n```", "```js\n    <script src=\"img/jquery.min.js\"></script>\n    ```", "```js\n    function drawGeometry(geom) {\n\n    }\n    ```", "```js\n    if (geom.type == 'Point') {\n      var coordinate = new google.maps.LatLng(geom.coordinates[1], geom.coordinates[0]);\n      var marker = new google.maps.Marker({\n        position: coordinate,\n        map: map,\n        title: 'Marker'\n      });\n    }\n    ```", "```js\n    else if (geom.type == 'LineString') {\n      var pointCount = geom.coordinates.length;\n      var linePath = [];\n      for (var i=0; i < pointCount; i++) {\n        var tempLatLng = new google.maps.LatLng(geom.coordinates[i][1], geom.coordinates[i][0]);\n        linePath.push(tempLatLng);\n      }\n\n      var lineOptions = {\n        path: linePath,\n        strokeWeight: 7,\n        strokeColor: '#19A3FF',\n        strokeOpacity: 0.8,\n        map: map\n      };\n      var polyline = new google.maps.Polyline(lineOptions);\n    }\n    ```", "```js\n    else if (geom.type == 'Polygon') {\n      var pointCount = geom.coordinates[0].length;\n      var areaPath = [];\n      for (var i=0; i < pointCount; i++) {\n        var tempLatLng = new google.maps.LatLng( geom.coordinates[0][i][1], geom.coordinates[0][i][0]);\n        areaPath.push(tempLatLng);\n      }\n\n      var polygonOptions = {\n        paths: areaPath,\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.9,\n        strokeWeight: 3,\n        fillColor: '#FFFF00',\n        fillOpacity: 0.25,\n        map: map\n      };\n\n      var polygon = new google.maps.Polygon(polygonOptions);\n    }\n    ```", "```js\n    function parseGeoJSON() {\n      $.getJSON('geojson.js', function(data) {\n        $.each(data.features, function(key, val) {\n          drawGeometry(val.geometry);\n        });\n      });\n    }\n    ```", "```js\n    parseGeoJSON();\n    ```", "```js\n{ \"type\": \"FeatureCollection\",\n  \"features\": [\n    { \"type\": \"Feature\",\n      \"geometry\": {\"type\": \"Point\", \"coordinates\": [102.0, 0.5]},\n      \"properties\": {\"prop0\": \"value0\"}\n    },\n    { \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"LineString\",\n        \"coordinates\": [\n          [102.0, 0.0], [103.0, 1.0], [104.0, 0.0], [105.0, 1.0]\n        ]\n      },\n      \"properties\": {\n        \"prop0\": \"value0\",\n        \"prop1\": 0.0\n      }\n    },\n    { \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],\n            [100.0, 1.0], [100.0, 0.0] ]\n          ]\n      },\n      \"properties\": {\n        \"prop0\": \"value0\",\n        \"prop1\": {\"this\": \"that\"}\n      }\n    }\n  ]\n}\n```", "```js\n$.getJSON('geojson.js', function(data) {\n  $.each(data.features, function(key, val) {\n    drawGeometry(val.geometry);\n  });\n});\n```", "```js\nvar pointCount = geom.coordinates.length;\nvar linePath = [];\nfor (var i=0; i < pointCount; i++) {\n  var tempLatLng = new google.maps.LatLng( geom.coordinates[i][1], geom.coordinates[i][0]);\n  linePath.push(tempLatLng);\n}\n```", "```js\n    <script src=\"img/jquery.min.js\"></script>\n    ```", "```js\n    function drawGeometry(geom) {\n      var slices = geom.split('(');\n      var geomType = slices[0];\n    }\n    ```", "```js\n    if (geomType == 'POINT') {\n      var coords = slices[1].split(')')[0].split(',');\n      var finalCoords = coords[0].split(' ');\n      var coordinate = new google.maps.LatLng(finalCoords[1], finalCoords[0]);\n      var marker = new google.maps.Marker({\n        position: coordinate,\n        map: map,\n        title: 'Marker'\n      });\n    }\n    ```", "```js\n    else if (geomType == 'LINESTRING') {\n      var coords = slices[1].split(')')[0].split(',');\n      var pointCount = coords.length;\n      var linePath = [];\n      for (var i=0; i < pointCount; i++) {\n        if (coords[i].substring(0,1) == ' ') {\n          coords[i] = coords[i].substring(1);\n        }\n        var finalCoords = coords[i].split(' ');\n        var tempLatLng = new google.maps.LatLng(finalCoords[1], finalCoords[0]);\n        linePath.push(tempLatLng);\n      }\n\n      var lineOptions = {\n        path: linePath,\n        strokeWeight: 7,\n        strokeColor: '#19A3FF',\n        strokeOpacity: 0.8,\n        map: map\n      }\n      var polyline = new google.maps.Polyline(lineOptions);\n    }\n    ```", "```js\n    else if (geomType == 'POLYGON') {\n      var coords = slices[2].split(')')[0].split(',');\n      var pointCount = coords.length;\n      for (var i=0; i < pointCount; i++) {\n        if (coords[i].substring(0,1) == ' ') {\n          coords[i] = coords[i].substring(1);\n        }\n        var finalCoords = coords[i].split(' ');\n        var tempLatLng = new google.maps.LatLng(finalCoords[1], finalCoords[0]);\n        areaPath.push(tempLatLng);\n      }\n\n      var polygonOptions = {\n        paths: areaPath,\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.9,\n        strokeWeight: 3,\n        fillColor: '#FFFF00',\n        fillOpacity: 0.25,\n        map: map\n      }\n\n      var polygon = new google.maps.Polygon(polygonOptions);\n    }\n    ```", "```js\n    function parseWKT() {\n      $.getJSON('wkt.js', function(data) {\n        $.each(data.objects, function(key, val) {\n          drawGeometry(val.geom);\n        });\n      });\n    }\n    ```", "```js\n    parseWKT();\n    ```", "```js\n$.getJSON('wkt.js', function(data) {\n  $.each(data.objects, function(key, val) {\n    drawGeometry(val.geom);\n  });\n});\n```", "```js\nvar slices = geom.split('(');\nvar geomType = slices[0]; \n```", "```js\nvar coords = slices[1].split(')')[0].split(',');\nvar finalCoords = coords[0].split(' ');\nvar coordinate = new google.maps.LatLng(finalCoords[1], finalCoords[0]);\n```", "```js\nvar coords = slices[1].split(')')[0].split(',');\nvar pointCount = coords.length;\nvar linePath = [];\nfor (var i=0; i < pointCount; i++) {\n  if (coords[i].substring(0,1) == ' ') {\n    coords[i] = coords[i].substring(1);\n  }\n  var finalCoords = coords[i].split(' ');\n  var tempLatLng = new google.maps.LatLng(finalCoords[1], finalCoords[0]);\n  linePath.push(tempLatLng);\n}\n```", "```js\nvar coords = slices[2].split(')')[0].split(',');\n```"]