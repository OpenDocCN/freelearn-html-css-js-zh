["```js\n<p><strong>First: </strong>{{first}}</p>\n<p><strong>Last: </strong>{{last}}</p>\n```", "```js\n// Imports the compiled Handlebars \"template\"\n// function just like a regular JavaScript module.\nimport template from './my-view.hbs';\nimport myStore from '../stores/my-store';\n\nexport default class MyView {\n  constructor(element) {\n\n    // Sets the container element that\n    // we'll use to place the rendered template\n    // content. Expected to be a jQuery object.\n    this.element = element;\n\n    // When the store state changes, we can\n    // re-render the view.\n    myStore.on('change', (state) => {\n      this.render(state);\n    });\n  }\n\n  // Renders the view. The default state is\n  // the initial \"myStore.state\". We use the\n  // \"element\" property of the view to set the\n  // HTML to the rendered output of the Handlebars\n  // \"template()\".\n  render(state = myStore.state) {\n    this.element.html(template(state));\n    return this;\n  }\n}\n```", "```js\nimport { EventEmitter } from 'events';\n\nimport dispatcher from '../dispatcher';\nimport { MY_ACTION } from '../actions/my-action';\n\n// The initial state of the store. Instead of\n// empty strings, this state uses labels that\n// indicate that there's still data to come.\nvar state = {\n  first: 'loading...',\n  last: 'loading...'\n};\n\nclass MyStore extends EventEmitter {\n  constructor() {\n    super();\n\n    this.id = dispatcher.register((e) => {\n      switch(e.type) {\n\n        // When the \"MY_ACTION\" action is\n        // dispatched, we extend the state\n        // with the value of \"payload\",\n        // overriding any existing property values.\n        case MY_ACTION:\n          this.emit('change',\n            (state = Object.assign(\n              {},\n              state,\n              e.payload\n            ))\n          );\n          break;\n      }\n    });\n  }\n\n  get state() {\n    return state;\n  }\n}\n\nexport default new MyStore();\n```", "```js\nimport $ from 'jquery';\n\nimport { myAction } from './actions/my-action';\nimport MyView from './views/my-view';\n\n// Constructs the new view and performs the\n// initial render by calling \"render()\". Note\n// that there's now stored reference to this view,\n// because we don't actually need to. If we\n// did, \"render()\" returns the view instance.\nnew MyView($('#app')).render();\n\n// After 1 second, dispatch \"MY_ACTION\", which\n// will replace the \"loading...\" labels.\nsetTimeout(() => {\n  myAction({\n    first: 'Face',\n    last: 'Book'\n  });\n}, 1000);\n```", "```js\n<ul>\n  {{#each users}}\n  <li>{{> item-view}}</li>\n  {{/each}}\n</ul>\n```", "```js\n<span style=\"text-transform: capitalize\">{{first}}</span>\n<span style=\"text-transform: capitalize\">{{last}}</span>\n```", "```js\nimport { EventEmitter } from 'events';\n\nimport dispatcher from '../dispatcher';\nimport { REVERSE } from '../actions/reverse';\n\n// The initial state is a list of\n// user objects.\nvar state = {\n  users: [\n    { first: 'first 1', last: 'last 1' },\n    { first: 'first 2', last: 'last 2' },\n    { first: 'first 3', last: 'last 3' }\n  ]\n};\n\nclass MyStore extends EventEmitter {\n  constructor() {\n    super();\n\n    this.id = dispatcher.register((e) => {\n      switch(e.type) {\n\n        // When the \"REVERSE\" action is dispatched,\n        // the \"state.users\" array is reversed by\n        // calling \"reverse()\".\n        case REVERSE:\n          this.emit('change',\n            (state = Object.assign(\n              {},\n              state,\n              { users: state.users.reverse() }\n            ))\n          );\n          break;\n      }\n    });\n  }\n\n  get state() {\n    return state;\n  }\n}\n\nexport default new MyStore();\n```", "```js\nimport $ from 'jquery';\n\nimport { reverse } from './actions/reverse';\nimport ListView from './views/list-view';\n\n// Performs the initial rendering of\n// the list view, after initializing\n// the view using the \"#app\" element.\nnew ListView($('#app')).render();\n\n// Every second, toggle the sort\n// order of the list by re-rendering\n// the main template and it's partial\n// templates.\nsetInterval(reverse, 1000);\n```", "```js\n<a href=\"#{{@index}}\" style=\"font-weight: {{fontWeight}}\"\n  <span style=\"text-transform: capitalize\">{{first}}</span>\n  <span style=\"text-transform: capitalize\">{{last}}</span>\n</a>\n```", "```js\n<button>Reverse</button>\n<ul>\n  {{#each users}}\n  <li>{{> item-view}}</li>\n  {{/each}}\n</ul>\n```", "```js\nimport template from './list-view.hbs';\nimport { reverse } from '../actions/reverse';\nimport { select } from '../actions/select';\nimport myStore from '../stores/my-store';\n\nexport default class ListView {\n  constructor(element) {\n\n    this.element = element;\n\n    // When the store state changes, re-render\n    // the view.\n    myStore.on('change', (state) => {\n      this.render(state);\n    });\n\n    this.element\n\n      // Binds the click event to \"#app\", but\n      // is only handled if a \"button\" element\n      // generated the event. The \"reverse()\"\n      // action creator is used as the handler.\n      .on('click', 'button', reverse)\n\n      // Binds the click event to \"#app\", but\n      // is only handled if an \"a\" element\n      // generated the event. The index is parsed\n      // from the \"href\" attribute, and this is\n      // passed as the payload to the \"select()\"\n      // action creator.\n      .on('click', 'a', (e) => {\n        e.preventDefault();\n\n        let index = +(/(\\d+)$/)\n          .exec(e.currentTarget.href)[1];\n\n        select(index);\n      });\n  }\n\n  // Sets the HTML of \"element\" to the rendered\n  // Handlebars \"template()\". The context of\n  // the template is always the Flux store state.\n  render(state = myStore.state) {\n    this.element.html(template(state));\n    return this;\n  }\n}\n```", "```js\nimport { EventEmitter } from 'events';\n\nimport dispatcher from '../dispatcher';\nimport { REVERSE } from '../actions/reverse';\nimport { SELECT } from '../actions/select';\n\n// The initial state is a list of\n// user objects. They each have a\n// \"fontWeight\" property which is\n// translated to a CSS value when\n// rendered.\nvar state = {\n  users: [\n    {\n      first: 'first 1',\n      last: 'last 1',\n      fontWeight: 'normal'\n    },\n    {\n      first: 'first 2',\n      last: 'last 2',\n      fontWeight: 'normal'\n    },\n    {\n      first: 'first 3',\n      last: 'last 3',\n      fontWeight: 'normal'\n    }\n  ]\n};\n\nclass MyStore extends EventEmitter {\n  constructor() {\n    super();\n\n    this.id = dispatcher.register((e) => {\n      switch(e.type) {\n\n        // When the \"REVERSE\" action is dispatched,\n        // the \"state.users\" array is reversed by\n        // calling \"reverse()\".\n        case REVERSE:\n          this.emit('change',\n            (state = Object.assign(\n              {},\n              state,\n              { users: state.users.reverse() }\n            ))\n          );\n          break;\n\n        // When the \"SELECT\" action is dispatched, we\n        // need to find the appropriate item based on\n        // the \"payload\" index and mark it as selected.\n        case SELECT:\n          this.emit('change',\n            (state = Object.assign(\n              {},\n              state,\n              { users: state.users.map((v, i) => {\n\n                // If the current index is the selected\n                // item, change the \"fontWeight\" property.\n                if (i === e.payload) {\n                  return Object.assign({}, v,\n                    { fontWeight: 'bold' });\n\n                // Otherwise, set the \"fontWeight\" back\n                // to \"normal\" so that any previously\n                // selected items are reset.\n                } else {\n                  return Object.assign({}, v,\n                    { fontWeight: 'normal' });\n                }\n              })}\n            ))\n          );\n          break;\n      }\n    });\n  }\n\n  get state() {\n    return state;\n  }\n}\n\nexport default new MyStore();\n```"]