["```js\n$ export NODE_ENV=production\n\n```", "```js\napp.configure('development', function(){\n  app.use(express.errorHandler());\n});\n```", "```js\n$ nohup npm start 2>&1 >> npmout.log &\n\n```", "```js\n$ screen\n$ npm start\n\n```", "```js\n$ screen -r\n\n```", "```js\n$ sudo yum install monit\n\n```", "```js\n$ apt-get install monit\n\n```", "```js\ncheck host objdump with address 127.0.0.1\n start program = \"/bin/sh -c \\\n    'NODE_ENV=production \\\n    node /opt/node_apps/awesome-chat/app.js 2>&1 \\\n    >> /var/log/awesome-chat.log'\"\n        as uid nobody and gid nobody\n stop program  = \"/usr/bin/pkill -f \\\n  'node /opt/node_apps/awesome-chat/app.js'\"\n    if failed port 3000 protocol HTTP\n        request /\n        with timeout 10 seconds\n        then restart\n```", "```js\n$ monit start awesome-chat\n\n```", "```js\n$ monit stop awesome-chat\n\n```", "```js\n $ sudo npm install forever -g\n\n```", "```js\n$ forever start app.js\n\n```", "```js\n$ forever list\n 0 app.js [ 24597, 24596 ]\n\n```", "```js\n$ forever stop 0\n\n```", "```js\nglobal\n  maxconn 4096\n\ndefaults\n  environment http\n\nfrontend all 0.0.0.0:80\n  default_backend www_Node.js\n\nbackend www_Node.js\n  environment http\n  option forwardfor\n  server Node.js 127.0.0.1:3000 weight 1 maxconn 10000 check\n```", "```js\nglobal\n  maxconn 4096\n\ndefaults\n  environment http\n\nfrontend all 0.0.0.0:80\n timeout client 86400000\n  default_backend www_Node.js\n acl is_websocket hdr(upgrade) -i websocket\n acl is_websocket hdr_beg(host) -i ws\n\n use_backend www_\nNode.js if is_websocket\n\nbackend www_Node.js\n  environment http\n  option forwardfor\n timeout server 86400000\n timeout connect 4000\n  server Node.js 127.0.0.1:3000 weight 1 maxconn 10000 check\n```", "```js\n  balance roundrobin\n```", "```js\n  server Node.js 127.0.0.1:4000 weight 1 maxconn 10000 check\n  server Node.js 192.168.1.101:3000 weight 1 maxconn 10000 check\n```", "```js\nvar cluster = require('cluster');\n\nif (cluster.isMaster) {\n  var noOfWorkers =\n           process.env.NODE_WORKERS || require('os').cpus().length;\n  while(workers.length < noOfWorkers) {\n    cluster.fork();\n  }\n} else {\n  require('./app.js');\n}\n```", "```js\n$ export NODE_WORKERS=2\n\n```", "```js\ncluster.on('exit', function (worker, code, signal){\n  var exitCode = worker.process.exitCode;\n  console.log('worker ' + worker.process.pid +\n                               ' died ('+exitCode+'). restarting...');\n  cluster.workers[worker.id].delete();\n  cluster.fork();\n});\n```", "```js\n \"scripts\": {\n    \"start\": \"node cluster\",\n  }\n```", "```js\nnpm start\n\n```", "```js\n    \"connect-redis\":\"*\",\n    \"redis\":\"*\"\n```", "```js\nvar express = require('express')\n  , routes = require('./routes')\n  , http = require('http')\n  , path = require('path')\n  , connect = require('connect')\n , RedisStore = require('connect-redis')(express);\n\nvar app = express();\n\nvar sessionStore = new RedisStore();\n\n//Existing Code\n```", "```js\nvar io = require('socket.io')\n , redis = require('redis')\n , RedisStore = require('socket.io/lib/stores/redis')\n , pub    = redis.createClient()\n , sub    = redis.createClient()\n , client = redis.createClient();\n\nexports.initialize = function (server) {\n  io = io.listen(server);\n\n io.set('store', new RedisStore({\n redisPub : pub\n , redisSub : sub\n , redisClient : client\n }));\n\n  //Existing Code\n}\n```", "```js\n io.set('store', new RedisStore({\n redisPub : pub\n , redisSub : sub\n , redisClient : client\n }));\n\n```", "```js\nnpm start\n\n```"]