- en: Chapter 6. Building a Live Score Site
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章. 构建实时得分网站
- en: The best way to master socket.io is by building a real-world application, which
    is what we will be doing in this chapter. A live score website shows score changes
    in real time to the user as soon as the administrator updates the scores. We will
    create a football live score website. Discussing how to build a live score website
    will help us study socket.io in depth, as it requires socket.io authentication,
    and optionally, integrating socket.io with Express. Our live score website will
    provide an admin panel for the administrators to update the score.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 掌握socket.io的最佳方式是通过构建实际应用，这正是本章我们将要做的。一个实时得分网站会在管理员更新得分后立即将得分变化实时显示给用户。我们将创建一个足球实时得分网站。讨论如何构建实时得分网站将帮助我们深入学习socket.io，因为它需要socket.io认证，并且可选地集成socket.io与Express。我们的实时得分网站将为管理员提供一个用于更新得分的控制面板。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Accessing cookies in the socket.io middleware
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在socket.io中间件中访问cookies
- en: Discussing HTTP basic authentication
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论HTTP基本认证
- en: Integrating socket.io with Express
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将socket.io与Express集成
- en: Discussing socket.io authentication
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论socket.io认证
- en: Building the backend
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建后端
- en: Before we start building the backend of our live score site, let's first set
    up our directory and files.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始构建实时得分网站的后端之前，让我们首先设置我们的目录和文件。
- en: We will only write code for the backend and frontend architecture and functionality,
    not any HTML and CSS design code.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将只编写后端和前端架构及功能的代码，不包括任何HTML和CSS设计代码。
- en: 'The exercise files of this chapter contain two directories: `Initial` and `Final`.
    In both the directories, you will find a directory named `Live-Score`. In the
    `Final/Live-Score` directory, you will get the complete live score website source
    code. In the `Initial/Live-Score` directory, you will only find HTML and CSS files
    for our live score site. The `Initial/Live-Score` directory is to help you quickly
    get started with building the live score site.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的练习文件包含两个目录：`Initial`和`Final`。在这两个目录中，你都会找到一个名为`Live-Score`的目录。在`Final/Live-Score`目录中，你会得到完整的实时得分网站源代码。在`Initial/Live-Score`目录中，你只会找到我们实时得分网站的HTML和CSS文件。`Initial/Live-Score`目录是为了帮助你快速开始构建实时得分网站。
- en: In the `Initial/LiveScore` directory, you will find the `public` directory,
    `app.js` file, and `package.json` file. Inside the `public` directory, you will
    find `css`, `html`, and `js` directories. In the `css` and `html` directories,
    you will find HTML files and CSS files for our user and administrator pages. In
    the `js` directory, you will find `admin.js` and `index.js` files, inside which
    you will place the socket.io client code for the administrator and users, respectively.
    Similarly, in the `html` directory, you will find `index.html` and `admin.html`
    files that will be served to the users and administrator respectively.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Initial/LiveScore`目录中，你会找到`public`目录、`app.js`文件和`package.json`文件。在`public`目录中，你会找到`css`、`html`和`js`目录。在`css`和`html`目录中，你会找到我们用户和管理员页面的HTML文件和CSS文件。在`js`目录中，你会找到`admin.js`和`index.js`文件，在其中分别放置管理员和用户的socket.io客户端代码。同样，在`html`目录中，你会找到将被分别提供给用户和管理员的`index.html`和`admin.html`文件。
- en: 'Inside the `package.json` file, place the following code:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在`package.json`文件中，放置以下代码：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now run the `npm install` command inside the `Initial/Live-Score` directory
    to download `express`, `socket.io`, `basic-auth`, and `socket.io-cookie` npm packages.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`Initial/Live-Score`目录中运行`npm install`命令，下载`express`、`socket.io`、`basic-auth`和`socket.io-cookie`
    npm包。
- en: Integrating socket.io server with the Express server
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将socket.io服务器与Express服务器集成
- en: We can integrate the socket.io server with the Express server with just a few
    lines of code. Here is the code to integrate the socket.io server with the Express
    server.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需几行代码就可以将socket.io服务器与Express服务器集成。以下是集成socket.io服务器与Express服务器的代码。
- en: 'Create an `app.js` file and place the following code in it:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个`app.js`文件，并在其中放置以下代码：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The fourth line is where the main integration happens. Here we are using the
    `/socket-io` path for socket.io handshaking.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第四行是主要集成发生的地方。在这里，我们使用`/socket-io`路径进行socket.io握手。
- en: Finally, we are listening on port number `8080`. That is, both Express server
    and socket.io server will listen on port number `8080`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在端口号`8080`上监听。也就是说，Express服务器和socket.io服务器都将监听端口号`8080`。
- en: Serving static files and HTML to the users
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向用户提供静态文件和HTML
- en: 'Now we need to write the code to server HTML, CSS, and JavaScript files to
    the site users. The following is the code to do this. Place this code in the `app.js`
    file right after the previous snippet:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要编写代码来向网站用户服务器HTML、CSS和JavaScript文件。以下是要执行的代码。将此代码放置在`app.js`文件中，在之前的代码片段之后：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, the first line of the code is serving static files. The rest of the code
    is serving `index.html` to the site users when they visit the root path.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，代码的第一行是提供静态文件。其余代码是在用户访问根路径时向网站用户提供`index.html`。
- en: Serving HTML to the administrator and protecting the admin panel
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向管理员提供HTML服务并保护管理面板
- en: We only want the administrators to access the admin panel to update the scores.
    So, for visitors to access the admin panel, they must enter the username and password.
    We will use the HTTP basic authentication to protect the admin panel.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只希望管理员访问管理面板来更新分数。因此，为了使访客能够访问管理面板，他们必须输入用户名和密码。我们将使用HTTP基本认证来保护管理面板。
- en: 'The following is the code to authenticate and serve HTML to the administrator:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是为管理员进行认证并提供HTML服务的代码：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here is how the code works:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是代码的工作原理：
- en: First, we imported the `basic-auth` library, which is used to implement basic
    authentication in Express.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们导入了`basic-auth`库，该库用于在Express中实现基本认证。
- en: Then, we wrote a custom function to generate a unique number whenever it's called.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们编写了一个自定义函数，每次调用时都会生成一个唯一的数字。
- en: We also created a function with the name `auth`, which will be used to check
    whether the visitor is authenticated. If not, then we will send an HTTP status
    code 404, asking the visitor to provide the username and password. If the visitor
    is authenticated, then we will generate a unique number and store it as a cookie
    in the administrator's browser. Later on, this cookie will be used by the socket.io
    server to check whether the administrator is authenticated.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还创建了一个名为`auth`的函数，该函数将用于检查访客是否已认证。如果没有，我们将发送HTTP状态码404，要求访客提供用户名和密码。如果访客已认证，则我们将生成一个唯一的数字并将其存储为管理员浏览器中的cookie。稍后，此cookie将由socket.io服务器用于检查管理员是否已认证。
- en: Finally, we created a route with the `/admin` path, which has two route handlers
    attached to it. The first one is the `auth` function to check for authentication
    and the second serves the `admin.html` file.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们创建了一个具有`/admin`路径的路由，该路由附加了两个路由处理程序。第一个是`auth`函数，用于检查认证；第二个用于提供`admin.html`文件。
- en: Socket.IO cookie authentication and broadcasting messages to a namespace
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Socket.IO cookie认证和向命名空间广播消息
- en: 'We will have two namespaces in our socket.io server: the default namespace
    where users will connect and the `/admin` namespace where the administrator will
    connect.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的socket.io服务器中，将有两个命名空间：用户将连接的默认命名空间和管理员将连接的`/admin`命名空间。
- en: A socket.io client will not require authentication to connect to the default
    namespace. However, to connect to the `/admin` namespace, the socket.io will need
    authentication.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: socket.io客户端连接到默认命名空间时不需要认证。然而，要连接到`/admin`命名空间，socket.io需要认证。
- en: Updates made by the administrator will be broadcasted to all the users in the
    default namespace.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 管理员所做的更新将被广播到默认命名空间中的所有用户。
- en: 'Here is the code for creating the `/admin` namespace, broadcasting messages
    to the default namespace, and implementing authentication for the `/admin` namespace.
    Place this code in the `app.js` file:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是创建`/admin`命名空间、向默认命名空间广播消息以及为`/admin`命名空间实现认证的代码。将此代码放置在`app.js`文件中：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here is how the code works:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是代码的工作原理：
- en: First, we imported the socket.io-cookie middleware, which is used to parse the
    HTTP `Cookie` header
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们导入了socket.io-cookie中间件，该中间件用于解析HTTP `Cookie`头。
- en: Then, we created the `/admin` namespace
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们创建了`/admin`命名空间。
- en: We also parsed the cookie using the socket.io-cookie middleware
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还使用socket.io-cookie中间件解析了cookie。
- en: Then, we wrote our own middleware to check whether `authentication_id` exists,
    and if yes, then whether it was valid
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们编写了自己的中间件来检查`authentication_id`是否存在，如果存在，则检查它是否有效。
- en: Finally, we listened to the `message` event and broadcasted the message to the
    users in the default namespace
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们监听了`message`事件，并将消息广播到默认命名空间中的用户。
- en: Now we are done with our backend. Run the `node app.js` command inside the initial
    directory. Then visit `http://localhost:8080` and `http://localhost:8080/admin`
    in any browser. Here, I am assuming that you are running the Express server locally.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了我们的后端。在初始目录中运行`node app.js`命令。然后在任何浏览器中访问`http://localhost:8080`和`http://localhost:8080/admin`。这里，我假设您正在本地运行Express服务器。
- en: 'When you visit `http://localhost:8080`, you will see the following screen:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当您访问`http://localhost:8080`时，您将看到以下屏幕：
- en: '![Socket.IO cookie authentication and broadcasting messages to a namespace](img/B05154_06_01.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![Socket.IO cookie身份验证和向命名空间广播消息](img/B05154_06_01.jpg)'
- en: There is nothing inside the box yet as the user hasn't received any messages.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 由于用户尚未收到任何消息，框内目前没有任何内容。
- en: 'When you visit `http://localhost:8080/admin`, you will see the following screen:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当您访问`http://localhost:8080/admin`时，您将看到以下屏幕：
- en: '![Socket.IO cookie authentication and broadcasting messages to a namespace](img/B05154_06_02.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![Socket.IO cookie身份验证和向命名空间广播消息](img/B05154_06_02.jpg)'
- en: 'Now enter `admin` as **User Name** and **Password** and click on **Log In**.
    You will see the following screen:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在输入**用户名**和**密码**，然后点击**登录**。您将看到以下屏幕：
- en: '![Socket.IO cookie authentication and broadcasting messages to a namespace](img/B05154_06_03.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![Socket.IO cookie身份验证和向命名空间广播消息](img/B05154_06_03.jpg)'
- en: Building the frontend
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建前端
- en: Let's write the frontend code for the users and administrators. socket.io client
    instances of users will listen to incoming messages from the server and display
    them. Whereas, socket.io client instances of administrator will send messages
    to the server so that the messages can be broadcasted to the users.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为用户和管理员编写前端代码。用户的socket.io客户端实例将监听来自服务器的消息并将其显示出来。而管理员客户端实例将向服务器发送消息，以便消息可以广播给用户。
- en: 'The following is the socket.io client code for the users. Place this code inside
    the `index.js` file:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是为用户编写的socket.io客户端代码。将此代码放置在`index.js`文件中：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This code is self-explanatory.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码是自我解释的。
- en: 'Here is the socket.io client code for the administrators. Place this code inside
    the `admin.js` file:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是为管理员编写的socket.io客户端代码。将此代码放置在`admin.js`文件中：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is how the preceding code works:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是前面代码的工作原理：
- en: In the first line, we connected to the socket.io `/admin` namespace. If the
    cookie is invalid in any case, then the connection will fail.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第一行，我们连接到了socket.io `/admin`命名空间。如果任何情况下cookie无效，则连接将失败。
- en: We also made sure that the team names and their scores are filled, otherwise
    we will display an alert message asking them to enter all the details.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还确保填写了团队名称和他们的分数，否则我们将显示一个警告消息，要求他们输入所有详细信息。
- en: Then, we sent the message to the socket.io server.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们将消息发送到socket.io服务器。
- en: Testing the website
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试网站
- en: Now we are done building our live score website. To test the site, refresh the
    `http://localhost:8080/` and `http://localhost:8080/admin` pages.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了我们的实时得分网站的构建。要测试网站，请刷新`http://localhost:8080/`和`http://localhost:8080/admin`页面。
- en: 'Now, in the `admin` panel, fill the form with some sample data, and click on
    the **Send** button:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`admin`面板中，用一些示例数据填写表单，然后点击**发送**按钮：
- en: '![Testing the website](img/B05154_06_04.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![测试网站](img/B05154_06_04.jpg)'
- en: 'On the user page, you should see something similar to the following image:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户页面上，您应该看到以下图像类似的内容：
- en: '![Testing the website](img/B05154_06_05.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![测试网站](img/B05154_06_05.jpg)'
- en: Summary
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw how to build a live score website using socket.io and
    Express. You should now be comfortable with building any kind of application that
    requires bidirectional communication in real time. You should now try building
    a chat application, multiplayer game, or something else where socket.io would
    be very useful.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何使用socket.io和Express构建一个实时得分网站。现在，您应该能够舒适地构建任何需要实时双向通信的应用程序。现在您可以尝试构建一个聊天应用程序、多人游戏或其他socket.io非常有用的东西。
- en: So, overall you learned socket.io in depth, WebSockets, and bidirectional communication.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，总的来说，您已经深入学习了socket.io、WebSockets和双向通信。
