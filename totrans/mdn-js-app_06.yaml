- en: Chapter 6. Building a Live Score Site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best way to master socket.io is by building a real-world application, which
    is what we will be doing in this chapter. A live score website shows score changes
    in real time to the user as soon as the administrator updates the scores. We will
    create a football live score website. Discussing how to build a live score website
    will help us study socket.io in depth, as it requires socket.io authentication,
    and optionally, integrating socket.io with Express. Our live score website will
    provide an admin panel for the administrators to update the score.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Accessing cookies in the socket.io middleware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discussing HTTP basic authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating socket.io with Express
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discussing socket.io authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the backend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start building the backend of our live score site, let's first set
    up our directory and files.
  prefs: []
  type: TYPE_NORMAL
- en: We will only write code for the backend and frontend architecture and functionality,
    not any HTML and CSS design code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The exercise files of this chapter contain two directories: `Initial` and `Final`.
    In both the directories, you will find a directory named `Live-Score`. In the
    `Final/Live-Score` directory, you will get the complete live score website source
    code. In the `Initial/Live-Score` directory, you will only find HTML and CSS files
    for our live score site. The `Initial/Live-Score` directory is to help you quickly
    get started with building the live score site.'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Initial/LiveScore` directory, you will find the `public` directory,
    `app.js` file, and `package.json` file. Inside the `public` directory, you will
    find `css`, `html`, and `js` directories. In the `css` and `html` directories,
    you will find HTML files and CSS files for our user and administrator pages. In
    the `js` directory, you will find `admin.js` and `index.js` files, inside which
    you will place the socket.io client code for the administrator and users, respectively.
    Similarly, in the `html` directory, you will find `index.html` and `admin.html`
    files that will be served to the users and administrator respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `package.json` file, place the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now run the `npm install` command inside the `Initial/Live-Score` directory
    to download `express`, `socket.io`, `basic-auth`, and `socket.io-cookie` npm packages.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating socket.io server with the Express server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can integrate the socket.io server with the Express server with just a few
    lines of code. Here is the code to integrate the socket.io server with the Express
    server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an `app.js` file and place the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The fourth line is where the main integration happens. Here we are using the
    `/socket-io` path for socket.io handshaking.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we are listening on port number `8080`. That is, both Express server
    and socket.io server will listen on port number `8080`.
  prefs: []
  type: TYPE_NORMAL
- en: Serving static files and HTML to the users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we need to write the code to server HTML, CSS, and JavaScript files to
    the site users. The following is the code to do this. Place this code in the `app.js`
    file right after the previous snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here, the first line of the code is serving static files. The rest of the code
    is serving `index.html` to the site users when they visit the root path.
  prefs: []
  type: TYPE_NORMAL
- en: Serving HTML to the administrator and protecting the admin panel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We only want the administrators to access the admin panel to update the scores.
    So, for visitors to access the admin panel, they must enter the username and password.
    We will use the HTTP basic authentication to protect the admin panel.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code to authenticate and serve HTML to the administrator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is how the code works:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we imported the `basic-auth` library, which is used to implement basic
    authentication in Express.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we wrote a custom function to generate a unique number whenever it's called.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also created a function with the name `auth`, which will be used to check
    whether the visitor is authenticated. If not, then we will send an HTTP status
    code 404, asking the visitor to provide the username and password. If the visitor
    is authenticated, then we will generate a unique number and store it as a cookie
    in the administrator's browser. Later on, this cookie will be used by the socket.io
    server to check whether the administrator is authenticated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we created a route with the `/admin` path, which has two route handlers
    attached to it. The first one is the `auth` function to check for authentication
    and the second serves the `admin.html` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Socket.IO cookie authentication and broadcasting messages to a namespace
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will have two namespaces in our socket.io server: the default namespace
    where users will connect and the `/admin` namespace where the administrator will
    connect.'
  prefs: []
  type: TYPE_NORMAL
- en: A socket.io client will not require authentication to connect to the default
    namespace. However, to connect to the `/admin` namespace, the socket.io will need
    authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Updates made by the administrator will be broadcasted to all the users in the
    default namespace.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code for creating the `/admin` namespace, broadcasting messages
    to the default namespace, and implementing authentication for the `/admin` namespace.
    Place this code in the `app.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is how the code works:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we imported the socket.io-cookie middleware, which is used to parse the
    HTTP `Cookie` header
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we created the `/admin` namespace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also parsed the cookie using the socket.io-cookie middleware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we wrote our own middleware to check whether `authentication_id` exists,
    and if yes, then whether it was valid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we listened to the `message` event and broadcasted the message to the
    users in the default namespace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we are done with our backend. Run the `node app.js` command inside the initial
    directory. Then visit `http://localhost:8080` and `http://localhost:8080/admin`
    in any browser. Here, I am assuming that you are running the Express server locally.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you visit `http://localhost:8080`, you will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Socket.IO cookie authentication and broadcasting messages to a namespace](img/B05154_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There is nothing inside the box yet as the user hasn't received any messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you visit `http://localhost:8080/admin`, you will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Socket.IO cookie authentication and broadcasting messages to a namespace](img/B05154_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now enter `admin` as **User Name** and **Password** and click on **Log In**.
    You will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Socket.IO cookie authentication and broadcasting messages to a namespace](img/B05154_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Building the frontend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's write the frontend code for the users and administrators. socket.io client
    instances of users will listen to incoming messages from the server and display
    them. Whereas, socket.io client instances of administrator will send messages
    to the server so that the messages can be broadcasted to the users.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the socket.io client code for the users. Place this code inside
    the `index.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This code is self-explanatory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the socket.io client code for the administrators. Place this code inside
    the `admin.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how the preceding code works:'
  prefs: []
  type: TYPE_NORMAL
- en: In the first line, we connected to the socket.io `/admin` namespace. If the
    cookie is invalid in any case, then the connection will fail.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also made sure that the team names and their scores are filled, otherwise
    we will display an alert message asking them to enter all the details.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we sent the message to the socket.io server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we are done building our live score website. To test the site, refresh the
    `http://localhost:8080/` and `http://localhost:8080/admin` pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in the `admin` panel, fill the form with some sample data, and click on
    the **Send** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing the website](img/B05154_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'On the user page, you should see something similar to the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing the website](img/B05154_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how to build a live score website using socket.io and
    Express. You should now be comfortable with building any kind of application that
    requires bidirectional communication in real time. You should now try building
    a chat application, multiplayer game, or something else where socket.io would
    be very useful.
  prefs: []
  type: TYPE_NORMAL
- en: So, overall you learned socket.io in depth, WebSockets, and bidirectional communication.
  prefs: []
  type: TYPE_NORMAL
