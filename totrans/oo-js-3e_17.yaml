- en: Appendix D. Regular Expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you use regular expressions (discussed in [Chapter 4](ch04.html "Chapter 4. Objects"),
    *Objects*), you can match literal strings, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'However, the true power of regular expressions comes from matching patterns,
    not literal strings. The following table describes the different syntax you can
    use in your patterns, and provides some examples of their use:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Pattern** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `[abc]` | Matches a class of characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `[a-z]` | A class of characters defined as a range. For example, [a-d] is
    the same as [abcd], [a-z] matches all lowercase characters, [a-zA-Z0-9_] matches
    all characters, numbers, and the underscore character:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `[^abc]` | Matches everything that is not matched by the class of characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `a&#124;b` | Matches a or b. The pipe character means OR, and it can be used
    more than once:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `a(?=b)` | Matches a only if followed by b:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `a(?!b)` | Matches a only when not followed by b:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `\` | Escape character used to help you match the special characters used
    in patterns as literals:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `\n``\r``\f``\t``\v` | New lineCarriage returnForm feedTabVertical tab |'
  prefs: []
  type: TYPE_TB
- en: '| `\s` | White space, or any of the previous five escape sequences:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `\S` | Opposite of the above; matches everything but white space. Same as
    [^\s]:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `\w` | Any letter, number, or underscore. Same as [A-Za-z0-9_]:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `\W` | Opposite of `\w`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `\d` | Matches a number, same as [0-9]:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `\D` | Opposite of `\d`; matches non-numbers, same as [^0-9] or [^\d]:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `\b` | Matches a word boundary such as space or punctuation.Matching R or
    D followed by 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Same as above but only at the end of a word:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Same pattern but the input has a dash, which is also an end of a word:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `\B` | The opposite of `\b`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `[\b]` | Matches the backspace character. |'
  prefs: []
  type: TYPE_TB
- en: '| `\0` | The null character. |'
  prefs: []
  type: TYPE_TB
- en: '| `\u0000` | Matches a Unicode character, represented by a four-digit hexadecimal
    number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `\x00` | Matches a character code represented by a two-digit hexadecimal
    number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `^` | The beginning of the string to be matched. If you set the `m` modifier
    (multi-line), it matches the beginning of each line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `$` | Matches the end of the input or, when using the multiline modifier,
    the end of each line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `.` | Matches any single character except for the new line and the line feed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `*` | Matches the preceding pattern if it occurs zero or more times. For
    example, `/.*/` will match anything including nothing (an empty input):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Keep in mind that the pattern is "greedy", meaning it will match as much as
    possible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `?` | Matches the preceding pattern if it occurs zero or one times:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `+` | Matches the preceding pattern if it occurs at least once (or more times):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `{n}` | Matches the preceding pattern if it occurs exactly n times:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `{min,max}` | Matches the preceding pattern if it occurs between min and
    max number of times. You can omit max, which will mean no maximum, but only a
    minimum. You cannot omit min.An example where the input is "doodle" with the "o"
    repeated 10 times:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `(pattern)` | When the pattern is in parentheses, it is remembered so that
    it can be used for replacements. These are also known as capturing patterns.The
    captured matches are available as $1, $2,... $9Matching all "r" occurrences and
    repeating them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Matching "re" and turning it to "er":'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `(?:pattern)` | Non-capturing pattern, not remembered and not available in
    $1, $2...Here''s an example of how "re" is matched, but the "r" is not remembered
    and the second pattern becomes $1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you pay attention when a special character can have two meanings,
    as is the case with `^`, `?`, and `\b`.
  prefs: []
  type: TYPE_NORMAL
