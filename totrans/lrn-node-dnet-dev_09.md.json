["```js\n> mongod --dbpath C:\\data\\mongodb\n\n```", "```js\n> mongo demo\n\n```", "```js\n> function square(x) { return x*x; }\n> square(42)\n1764\n> new Date()\nISODate(\"2016-01-01T20:05:39.652Z\")\n> var foo = { bar: \"baz\" }\n> typeof foo\nobject\n> foo.bar\nbaz\n\n```", "```js\ndb.holidays.insert(\n  { name: \"New Year's Day\", date: ISODate(\"2016-01-01\") });\ndb.holidays.insert(\n  { name: \"Good Friday\", date: ISODate(\"2016-03-25\") });\ndb.holidays.insert(\n  { name: \"Easter Monday\", date: ISODate(\"2016-03-28\") });\ndb.holidays.insert(\n  { name: \"Early May bank holiday\", date: ISODate(\"2016-05-02\") });\ndb.holidays.insert(\n  { name: \"Spring bank holiday\", date: ISODate(\"2016-05-30\") });\ndb.holidays.insert(\n  { name: \"Summer bank holiday\", date: ISODate(\"2016-08-29\") });\ndb.holidays.insert(\n  { name: \"Boxing Day\", date: ISODate(\"2016-12-26\") });\ndb.holidays.insert(\n  { name: \"Christmas Day\", date: ISODate(\"2016-12-27\"),\n    substitute_for: ISODate(\"2016-12-25\") });\n```", "```js\n> mongo demo holidays.js --shell\n\n```", "```js\n> db.holidays.find()\n{ \"_id\" : ObjectId(\"572f760fffb6888d70c45eeb\"), \"name\" : \"New Year's Day\", \"date\" : ISODate(\"2016-01-01T00:00:00Z\") }\n{ \"_id\" : ObjectId(\"572f7610ffb6888d70c45eec\"), \"name\" : \"Good Friday\", \"date\" : ISODate(\"2016-03-25T00:00:00Z\") }\n...\n\n```", "```js\n> db.holidays.find({name: \"Boxing Day\"})\n\n```", "```js\n> db.holidays.find({ date: { $gte: new Date(\"2016-07-01\") }})\n\n```", "```js\n> db.holidays.aggregate({\n $group: { _id: { $month: \"$date\" }, count: { $sum: 1 } }})\n\n```", "```js\n> db.holidays.aggregate([\n { $project: { _id: false, name: \"$name\",\n date: { $ifNull: [\"$substitute_for\", \"$date\"] } } },\n { $sort: { date: 1 } }\n])\n\n```", "```js\n> npm install mongoose --save\n\n```", "```js\n'use strict';\n\nconst mongoose = require('mongoose');\n\nconst Schema = mongoose.Schema;\nconst gameSchema = new Schema({\n word: String,\n setBy: String\n});\n```", "```js\nconst gameSchema = new Schema({\n    word: String,\n    setBy: String\n});\n\nconst Game = mongoose.model('Game', gameSchema);\n\n```", "```js\nconst gameSchema = new Schema({\n    word: String,\n    setBy: String\n});\n\ngameSchema.methods.positionsOf = function(character) {\n let positions = [];\n for (let i in this.word) {\n if (this.word[i] === character.toUpperCase()) {\n positions.push(i);\n }\n }\n return positions;\n};\n\nconst Game = mongoose.model('Game', gameSchema);\n```", "```js\nconst Game = mongoose.model('Game', gameSchema);\n\nmodule.exports.create = (userId, word) => {\n let game = new Game({setBy: userId, word: word.toUpperCase()});\n return game.save();\n};\n```", "```js\nconst mongoose = require('mongoose');\nmongoose.Promise = Promise;\nmongoose.connect('mongodb://localhost/hangman');\n\n```", "```js\nmodule.exports.create = (userId, word) => {\n    ...\n};\nmodule.exports.createdBy =\n (userId) => Game.find({setBy: userId});\nmodule.exports.availableTo =\n (userId) => Game.find({setBy: { $ne: userId } });\nmodule.exports.get =\n (id) => Game.findById(id);\n\n```", "```js\nmodule.exports.availableTo =\n  (userId) => Game.where('setBy').ne(userId);\n```", "```js\n'use strict';\n\nmodule.exports = (gamesService) => {\n    var express = require('express');\n    var router = express.Router();\n    ...\n return router;\n};\n\n```", "```js\nmodule.exports = (mongoose) => {\n    'use strict';\n\n let Game = mongoose.models['Game'];\n\n if (!Game) {\n        const Schema = mongoose.Schema;\n        const gameSchema = new Schema({\n            word: String,\n            setBy: String\n        });\n\n        gameSchema.methods.positionsOf = function(character) {\n            ...\n        };\n\n        Game = mongoose.model('Game', gameSchema);\n }\n\n return {\n create: (userId, word) => {\n const game = new Game({\n setBy: userId, word: word.toUpperCase()\n });\n return game.save();\n },\n createdBy: userId => Game.find({setBy: userId}),\n availableTo: userId => Game.where('setBy').ne(userId),\n get: id => Game.findById(id)\n };\n};\n\n```", "```js\nmodule.exports = (mongoose) => {\n    ...\n\n let gamesService = require('./services/games')(mongoose);\n let routes = require('./routes/index')(gamesService);\n let games = require('./routes/games')(gamesService);\n    ...\n\n return app;\n};\n```", "```js\n> npm install mockgoose@~5.x --save-dev\n\n```", "```js\n'use strict';\n\nconst mongoose = require('mongoose');\nconst debug = require('debug')('hangman:config:mongoose');\n\nmongoose.Promise = Promise;\nif (!process.env.MONGODB_URL) {\n    debug('MongoDB URL not found. Falling back to in-memory database...');\n    require('mockgoose')(mongoose);\n}\n\nlet db = mongoose.connection;\nmongoose.connect(process.env.MONGODB_URL);\nmodule.exports = new Promise(function(resolve, reject) {\n    db.once('open', () => resolve(mongoose));\n    db.on('error', reject);\n});\n```", "```js\n...\n\nrequire('../src/config/mongoose').then((mongoose) => {\n var app = require('../src/app')(mongoose);\n    ...\n    server.on('listening', onListening);\n}).catch(function(error) {\n console.log(error);\n process.exit(1);\n});\n\n```", "```js\n'use strict';\n\nconst expect = require('chai').expect;\n\ndescribe('Game service', () => {\n  const firstUserId = 'user-id-1';\n  const secondUserId = 'user-id-2';\n\n let service;\n before(done => {\n require('../../src/config/mongoose.js').then((mongoose) => {\n service = require('../../src/services/games.js')(mongoose);\n done();\n }).catch(done);;\n });\n  ...\n```", "```js\n'use strict';\n\nconst request = require('supertest');\nconst expect = require('chai').expect;\n\ndescribe('/games', () => {\n  let agent, userId;\n let mongoose, gamesService, app;\n\n before(function(done) {\n require('../../src/config/mongoose.js').then((mongoose) => {\n app = require('../../src/app.js')(mongoose);\n gamesService =\n require('../../src/services/games.js')(mongoose);\n done();\n }).catch(done);\n });\n\n    ...\n```", "```js\n'use strict';\n\nafter(function(done) {\n    require('../src/config/mongoose.js').then(\n        (mongoose) => mongoose.disconnect(done));\n});\n```", "```js\ngulp.task('integration-test',\n        ['lint-integration-test', 'test'], function(done) {\n    const TEST_PORT = 5000;\n\n require('./src/config/mongoose.js').then((mongoose) => {\n let server, teardown = (error) => {\n server.close(() =>\n mongoose.disconnect(() => done(error)));\n };\n server = require('http')\n .createServer(require('./src/app.js')(mongoose))\n            .listen(TEST_PORT, function() {\n                gulp.src('integration-test/**/*.js')\n                    .pipe(\n                        ...\n                    )\n .on('error', teardown)\n .on('end', teardown)\n            });\n });\n});\n```", "```js\nservices:\n - mongodb\nenv:\n global:\n - MONGODB_URL=mongodb://localhost/hangman\n\n```", "```js\n> choco install redis-64\n\n```", "```js\n127.0.0.1:6379> set counter 100\nOK\n127.0.0.1:6379> get counter\n\"100\"\n127.0.0.1:6379> incr counter\n(integer) 101\n\n```", "```js\n127.0.0.1:6379> set counter 200 nx\n(nil)\n\n```", "```js\n127.0.0.1:6379> rpush fruit apple banana pear\n(integer) 3\n127.0.0.1:6379> rpop fruit\n\"pear\"\n127.0.0.1:6379> lpush fruit orange\n(integer) 3\n127.0.0.1:6379> lrange fruit 0 -1\n1) \"orange\"\n2) \"apple\"\n3) \"banana\"\n\n```", "```js\n127.0.0.1:6379> hmset game:2 word JavaScript setBy user-id-7\nOK\n127.0.0.1:6379> hget game:2 word\n\"JavaScript\"\n127.0.0.1:6379> hgetall game:2\n1) \"word\"\n2) \"JavaScript\"\n3) \"setBy\"\n4) \"user-id-7\"\n\n```", "```js\n127.0.0.1:6379> sadd numbers one two three\n(integer) 3\n127.0.0.1:6379> smembers numbers\n1) \"two\"\n2) \"three\"\n3) \"one\"\n\n```", "```js\n127.0.0.1:6379> zadd votes 3 Aye\n(integer) 1\n127.0.0.1:6379> zadd votes 4 No\n(integer) 1\n127.0.0.1:6379> zadd votes 1 Abstain\n(integer) 1\n127.0.0.1:6379> zrevrange votes 0 1\n1) \"No\"\n2) \"Aye\"\n\n```", "```js\n> npm install redis --save\n> npm install bluebird --save\n\n```", "```js\n'use strict';\n\nconst bluebird = require('bluebird');\nconst redis = require('redis');\nbluebird.promisifyAll(redis.RedisClient.prototype);\nmodule.exports = redis.createClient(process.env.REDIS_URL);\n```", "```js\n'use strict';\n\nlet redisClient = require('../config/redis.js');\n\nmodule.exports = {\n    getUsername: userId =>\n        redisClient.getAsync(`user:${userId}:name`),\n    setUsername: (userId, name) =>\n        redisClient.setAsync(`user:${userId}:name`, name)\n};\n```", "```js\n'use strict';\n\nconst expect = require('chai').expect;\nconst service = require('../../src/services/users.js');\n\ndescribe('User service', function() {\n    describe('getUsername', function() { \n        it('should return a previously set username', done => {\n            const userId = 'user-id-1';\n            const name = 'User Name';\n            service.setUsername(userId, name)\n                .then(() => service.getUsername(userId))\n                .then(actual => expect(actual).to.equal(name))\n                .then(() => done(), done);\n        });\n\n        it('should return null if no username is set', done => {\n            const userId = 'user-id-2';\n\n            service.getUsername(userId)\n                .then(name => expect(name).to.be.null)\n                .then(() => done(), done);\n        });\n    });\n});\n```", "```js\n> npm install redis-js --save-dev\n\n```", "```js\n'use strict';\n\nconst bluebird = require('bluebird');\nconst debug = require('debug')('hangman:config:redis');\n\nif (process.env.REDIS_URL) {\n let redis = require('redis');\n bluebird.promisifyAll(redis.RedisClient.prototype);\n module.exports = redis.createClient(process.env.REDIS_URL);\n} else {\n debug('Redis URL not found. Falling back to mock DB...');\n let redisClient = require('redis-js');\n bluebird.promisifyAll(redisClient);\n module.exports = redisClient;\n}\n```", "```js\nservices:\n - mongodb\n - redis-server\nenv:\n  global:\n    - MONGODB_URL=mongodb://localhost/hangman\n - REDIS_URL=redis://127.0.0.1:6379/\n\n```", "```js\n'use strict';\n\nbefore(function(done) {\n require('../src/config/redis.js').flushdbAsync().then(() => done());\n});\n\nafter(function(done) {\n require('../src/config/redis.js').quit();\n    require('../src/config/mongoose.js').then(\n        (mongoose) => mongoose.disconnect(done));\n});\n```", "```js\n        let server, teardown = (error) => {\n require('./src/config/redis.js').quit();\n            server.close(() =>\n                mongoose.disconnect(() => done(error)));\n        };\n```", "```js\nmodule.exports = {\n  ...\n\n  recordWin: userId =>\n    redisClient.zincrbyAsync('user:wins', 1, userId),\n\n  getTopPlayers: () =>\n    redisClient.zrevrangeAsync('user:wins', 0, 2, 'withscores')\n    .then(interleaved => {\n      if (interleaved.length === 0) {\n        return [];\n      }\n      let userIds = interleaved\n        .filter((user, index) => index % 2 === 0)\n        .map((userId) => `user:${userId}:name`);\n      return redisClient.mgetAsync(userIds)\n        .then(names => names.map((username, index) => ({\n          name: username,\n          userId: interleaved[index * 2],\n          wins: parseInt(interleaved[index * 2 + 1], 10)\n        })));\n    }),\n\n  getRanking: userId => {\n    return Promise.all([\n      redisClient.zrevrankAsync('user:wins', userId),\n      redisClient.zscoreAsync('user:wins', userId)\n    ]).then(out => {\n      if (out[0] === null) {\n        return null;\n      }\n      return { rank: out[0] + 1, wins: parseInt(out[1], 10) };\n    });\n  }\n};\n```"]