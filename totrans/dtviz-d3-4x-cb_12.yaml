- en: Chapter 12. Knowing Your Map
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 12 章. 了解你的地图
- en: 'In this chapter we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Projecting the US map
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 投影美国地图
- en: Projecting the world map
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 投影世界地图
- en: Building a choropleth map
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建渐变地图
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: The ability to project and correlate data points to geographic regions is crucial
    in many types of visualizations. Geographic visualization is a complex topic with
    many competing standards emerging and maturing for today's web technology. D3
    provides a few different ways to visualize geographic and cartographic data. In
    this chapter, we will introduce basic D3 cartographic visualization techniques
    and how to implement a fully-functional choropleth map (a special purpose colored
    map) in D3.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多类型的可视化中，将数据点投影并关联到地理区域的能力至关重要。地理可视化是一个复杂的话题，许多与今天网络技术相关的标准正在出现和成熟。D3 提供了几种不同的方法来可视化地理和制图数据。在本章中，我们将介绍基本的
    D3 制图可视化技术，以及如何在 D3 中实现一个功能齐全的渐变地图（一种特殊用途的彩色地图）。
- en: Projecting the US map
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 投影美国地图
- en: In this recipe we are going to start with projecting the US map using D3 GEO
    API, while also getting familiar with a few different JSON data formats for describing
    geographic data. Let's first take a look at how geographic data are typically
    presented and consumed in JavaScript.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将从使用 D3 GEO API 投影美国地图开始，同时熟悉几种不同的 JSON 数据格式，用于描述地理数据。让我们首先看看地理数据在
    JavaScript 中通常是如何呈现和消费的。
- en: GeoJSON
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GeoJSON
- en: The first standard JavaScript geographic data format we are going to touch upon
    is called **GeoJSON**. GeoJSON format was originally written and maintained by
    an Internet working group of developers. Later it was standardized by the **Internet
    Engineering Task Force** (**IETF**) with RFC 7946 and published in August 2016.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要接触的第一个标准 JavaScript 地理数据格式被称为 **GeoJSON**。GeoJSON 格式最初由一个开发者的互联网工作组编写和维护。后来，它由
    **互联网工程任务组**（**IETF**）通过 RFC 7946 标准化，并于 2016 年 8 月发布。
- en: '*GeoJSON is a format for encoding a variety of geographic data structures.
    GeoJSON supports the following geometry types: Point, LineString, Polygon, MultiPoint,
    MultiLineString, and MultiPolygon. Geometric objects with additional properties
    are Feature objects. Sets of features are contained by FeatureCollection objects.*'
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*GeoJSON 是一种用于编码各种地理数据结构的格式。GeoJSON 支持以下几何类型：点（Point）、线字符串（LineString）、多边形（Polygon）、多点（MultiPoint）、多线字符串（MultiLineString）和多多边形（MultiPolygon）。具有附加属性的几何对象是特征对象。特征集合包含在特征集合对象中。*'
- en: '*Source: [http://www.geojson.org/](http://www.geojson.org/)*'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*来源：[http://www.geojson.org/](http://www.geojson.org/)*'
- en: 'GeoJSON format is a very popular standard for encoding GIS information and
    is supported by numerous open source as well as commercial software. GeoJSON format
    uses latitude and longitude points as its coordinates; therefore, it requires
    any software, including D3, to find the proper projection, scale and translation
    method in order to visualize its data. The following GeoJSON data describes the
    state of Alabama in feature coordinates:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: GeoJSON 格式是编码 GIS 信息的一个非常流行的标准，得到了众多开源和商业软件的支持。GeoJSON 格式使用经纬度点作为其坐标；因此，它要求任何软件，包括
    D3，找到适当的投影、比例和转换方法，以便可视化其数据。以下 GeoJSON 数据描述了以特征坐标表示的阿拉巴马州的状态：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: GeoJSON is currently the de facto GIS information standard for JavaScript project
    and is well supported by D3; however, before we jump right into D3 geographic
    visualization using this data format, we want to also introduce you to another
    emerging technology closely related to GeoJSON.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: GeoJSON 目前是 JavaScript 项目中事实上的 GIS 信息标准，并且得到了 D3 的良好支持；然而，在我们直接跳入使用这种数据格式进行
    D3 地理可视化之前，我们还想向您介绍与 GeoJSON 密切相关的另一种新兴技术。
- en: TopoJSON
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: TopoJSON
- en: '*TopoJSON is an extension of GeoJSON that encodes topology. Rather than representing
    geometries discretely, geometries in TopoJSON files are stitched together from
    shared line segments called arcs. This technique is similar to Matt Bloch''s MapShaper
    and the Arc/Info Export format, .e00.*'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*TopoJSON 是 GeoJSON 的一个扩展，它编码了拓扑信息。与离散表示几何形状不同，TopoJSON 文件中的几何形状是由称为弧的共享线段拼接而成的。这种技术与
    Matt Bloch 的 MapShaper 和 Arc/Info 导出格式 .e00 类似。*'
- en: '*TopoJSON Wiki [https://github.com/topojson/topojson](https://github.com/topojson/topojson)*'
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*TopoJSON Wiki [https://github.com/topojson/topojson](https://github.com/topojson/topojson)*'
- en: TopoJSON was created by D3's author *Mike Bostock* originally and designed to
    overcome some of the drawbacks in GeoJSON while providing a similar feature set
    when describing geographic information. In most cases concerning cartographic
    visualization TopoJSON can be a drop-in replacement for GeoJSON with much smaller
    footprint and better performance. Therefore, in this chapter, we will use TopoJSON
    instead of GeoJSON. Nevertheless, all techniques discussed in this chapter will
    work perfectly fine with GeoJSON as well. We will not list TopoJSON example here
    since its arcs-based format is not very human readable. However, you can easily
    convert your **shapefiles** (popular open source geographic vector format file)
    into TopoJSON using ogr2ogr command line tool provided by GDAL ([http://www.gdal.org/ogr2ogr.html](http://www.gdal.org/ogr2ogr.html)
    ).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: TopoJSON 是由 D3 的作者 *Mike Bostock* 创造的，最初是为了克服 GeoJSON 的一些缺点，同时在描述地理信息时提供类似的功能集。在大多数涉及地图可视化的情况下，TopoJSON
    可以作为 GeoJSON 的直接替代品，具有更小的体积和更好的性能。因此，在本章中，我们将使用 TopoJSON 而不是 GeoJSON。尽管如此，本章中讨论的所有技术也可以与
    GeoJSON 完美地工作。我们不会在这里列出 TopoJSON 的示例，因为其基于弧的格式不太适合人类阅读。然而，您可以使用 GDAL 提供的 ogr2ogr
    命令行工具轻松地将您的 **shapefiles**（流行的开源地理矢量格式文件）转换为 TopoJSON（[http://www.gdal.org/ogr2ogr.html](http://www.gdal.org/ogr2ogr.html)）。
- en: Now equipped with this background information let's see how we can make a map
    in D3.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了这些背景信息，让我们看看如何在 D3 中制作地图。
- en: Getting ready
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser hosted on your
    local HTTP server:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的本地 HTTP 服务器上托管的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter12/usa.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter12/usa.html)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter12/usa.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter12/usa.html)'
- en: How to do it...
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe we will load US TopoJSON data and render them using D3 Geo API.
    Here is the code sample:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将加载美国 TopoJSON 数据并使用 D3 地理 API 进行渲染。以下是代码示例：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This recipe projects US map with Albers USA mode:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方使用 Albers USA 模式投影美国地图：
- en: '![How to do it...](img/image_12_001.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_12_001.jpg)'
- en: US map projected with Albers USA mode
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Albers USA 模式投影的美国地图
- en: How it works...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: 'As you can see, the code required to project a US map using TopoJSON and D3
    is quite short, especially the part concerning map projection. This is because
    both D3 geographic API and TopoJSON library are built explicitly to make this
    kind of job as easy as possible for developers. To make a map, first you need
    to load the TopoJSON data file (line `A`). The following screenshot shows what
    the topology data looks like once loaded:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，使用 TopoJSON 和 D3 投影美国地图所需的代码相当简短，尤其是关于地图投影的部分。这是因为 D3 地理 API 和 TopoJSON
    库都是专门构建的，以便尽可能简化开发者的这项工作。要制作地图，首先您需要加载 TopoJSON 数据文件（行 `A`）。以下截图显示了加载后的拓扑数据的外观：
- en: '![How it works...](img/image_12_002.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/image_12_002.jpg)'
- en: Topology data from TopoJSON
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: TopoJSON 的拓扑数据
- en: 'Once the topology data is loaded, all we have to do is to use the TopoJSON
    library `topojson.feature` function to convert topology arcs into coordinates
    similar to what GeoJSON format provides as shown in the following screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦加载了拓扑数据，我们只需使用 TopoJSON 库的 `topojson.feature` 函数将拓扑弧转换为类似于 GeoJSON 格式提供的坐标，如下截图所示：
- en: '![How it works...](img/5530_12_03_new.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/5530_12_03_new.jpg)'
- en: Feature collection converted using topojson.feature function
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 topojson.feature 函数转换的要素集合
- en: 'Then `d3.geo.path` will automatically recognize and use the coordinates to
    generate `svg:path` highlighted in the following code snippet:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然后 `d3.geo.path` 将自动识别并使用坐标来生成以下代码片段中突出显示的 `svg:path`：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: On line `A`, we first create a D3 GEO path object configured with Albers USA
    projection mode. Then we insert a `svg:path` that describe the outline of US,
    since this can be achieved by a single `svg:path` element (on line `B`). For the
    outline of each states we use the feature collection generated on line `C` to
    create one `svg:path` for each state that allow us to highlight the state on hover.
    With separate SVG element representing the states will also allow you to respond
    user interaction like click and touch.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在行 `A` 上，我们首先创建了一个配置为 Albers USA 投影模式的 D3 GEO 路径对象。然后我们插入一个 `svg:path` 元素来描述美国的轮廓，因为可以通过单个
    `svg:path` 元素（在行 `B` 上）实现这一点。对于每个州的轮廓，我们使用行 `C` 上生成的要素集合来为每个州创建一个 `svg:path`，这样我们就可以在悬停时突出显示该州。使用代表各州的单独
    SVG 元素还可以让您响应用户交互，如点击和触摸。
- en: 'That''s it! This is all you need to do to project a map in D3 using TopoJSON.
    Additionally, we have also attached a zoom handler to the parent `svg:g` element:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！这就是你使用TopoJSON在D3中投影地图所需做的所有事情。此外，我们还向父`svg:g`元素附加了一个缩放处理程序：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This allows the user to perform simple geometric zoom on our map.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许用户对我们的地图执行简单的几何缩放。
- en: See also
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考以下内容
- en: 'GeoJSON v1.0 specification: [http://geojson.org/geojson-spec.html](http://geojson.org/geojson-spec.html)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GeoJSON v1.0规范：[http://geojson.org/geojson-spec.html](http://geojson.org/geojson-spec.html)
- en: 'TopoJSON Wiki: [https://github.com/topojson/topojson/wiki](https://github.com/topojson/topojson/wiki)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'TopoJSON Wiki: [https://github.com/topojson/topojson/wiki](https://github.com/topojson/topojson/wiki)'
- en: '[Chapter 3](ch03.html "Chapter 3. Dealing with Data"), *Dealing with Data*,
    for more information on asynchronous data loading'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第3章](ch03.html "第3章。处理数据"), *处理数据*，了解更多关于异步数据加载的信息'
- en: '[Chapter 10](ch10.html "Chapter 10. Interacting with Your Visualization"),
    *Interacting with Your Visualization*, for more information on how to implement
    zooming'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第10章](ch10.html "第10章。与你的可视化交互"), *与你的可视化交互*，了解更多关于如何实现缩放的信息'
- en: Mike Bostock's post on Albers USA projection on which this recipe is based [http://bl.ocks.org/mbostock/4090848](http://bl.ocks.org/mbostock/4090848)
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于此配方基于Mike Bostock的关于Albers USA投影的帖子 [http://bl.ocks.org/mbostock/4090848](http://bl.ocks.org/mbostock/4090848)
- en: Projecting the world map
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 投影世界地图
- en: What if our visualization project is not just about US, but rather concerns
    the whole world? No worries, D3 comes with various built-in projection modes that
    work well with the world map that we will explore in this recipe.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的可视化项目不仅仅是关于美国，而是关注整个世界呢？不用担心，D3提供了各种内置投影模式，这些模式与我们将在此配方中探索的世界地图配合得很好。
- en: Getting ready
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser hosted on your
    local HTTP server:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的本地HTTP服务器上，使用你的网络浏览器打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter12/world.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter12/world.html)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter12/world.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter12/world.html)'
- en: How to do it...
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe we will project the world map using various different D3 built-in
    projection modes. Here is the code sample:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配方中，我们将使用各种不同的D3内置投影模式来投影世界地图。以下是代码示例：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This recipe generates world maps with different projection modes as shown in
    the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方生成了具有不同投影模式的世界地图，如下面的截图所示：
- en: '![How to do it...](img/image_12_004.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_12_004.jpg)'
- en: World map projection
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 世界地图投影
- en: How it works...
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we first define an array containing six different D3 projection
    modes on line `A`. A world topology data was loaded on line `B`. Similar to the
    previous recipe we have a `d3.geoPath` generator defined on line `C`. We also
    customized the projection mode for geo path generator calling its `projection`
    function. The rest of the recipe is almost identical to what we have done in the
    previous recipe. The `topojson.feature` function was used to convert topology
    data into geographic coordinates so `d3.geoPath` can generate `svg:path` required
    for map rendering (line `D`). On line `E`, one new function `mesh` from TopoJSON
    was used worth mentioning here. `topojson.mesh` function returns the GeoJSON `MultiLineString`
    geometry object representing complicated topology. This is a very compact way
    to render complex geometric shapes since all shared arcs are only included once.
    In our case since we don't really need to visualize country outline on each continent
    separately and they are share their borders therefore this is the most efficient
    option in rendering.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配方中，我们首先在行`A`上定义了一个包含六个不同D3投影模式的数组。在行`B`上加载了世界拓扑数据。类似于之前的配方，我们在行`C`上定义了一个`d3.geoPath`生成器。我们还通过调用其`projection`函数自定义了地理路径生成器的投影模式。配方剩余部分几乎与之前的配方相同。使用`topojson.feature`函数将拓扑数据转换为地理坐标，以便`d3.geoPath`可以生成用于地图渲染所需的`svg:path`（行`D`）。在行`E`，使用了一个值得注意的新函数`mesh`，来自TopoJSON。`topojson.mesh`函数返回表示复杂拓扑的GeoJSON
    `MultiLineString`几何对象。这是一个渲染复杂几何形状的非常紧凑的方式，因为所有共享的弧只包含一次。在我们的情况下，由于我们实际上不需要单独可视化每个大陆的国家轮廓，并且它们共享边界，因此这是渲染中最有效的方法。
- en: See also
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考以下内容
- en: D3 wiki Geo Projection page ([https://github.com/d3/d3-geo/blob/master/README.md#projections](https://github.com/d3/d3-geo/blob/master/README.md#projections)
    ) for more information on different projection modes as well as on how raw custom
    projection can be implemented
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D3 wiki 地理投影页面 ([https://github.com/d3/d3-geo/blob/master/README.md#projections](https://github.com/d3/d3-geo/blob/master/README.md#projections)
    ) 了解更多关于不同投影模式以及如何实现原始自定义投影的信息。
- en: Building a choropleth map
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建面状图
- en: Choropleth map is a thematic map, in other words, a specially designed map not
    a general purpose one, which is designed to show measurement of statistical variable
    on the map using different color shades or patterns; or sometimes referred as
    geographic heat-map in simpler terms. We have already seen in the previous two
    recipes that geographic projection in D3 consists of a group of `svg:path` elements,
    therefore, they can be manipulated as any other `svg` elements including coloring.
    We will explore this feature in geo-projection and implement a Choropleth map
    in this recipe.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 面状图是一种专题地图，换句话说，是一种专门设计的地图，而不是通用目的的地图，它通过不同的颜色阴影或图案在地图上展示统计变量的测量值；或者有时也被称为地理热图。在前两个食谱中，我们已经看到在D3中的地理投影由一组`svg:path`元素组成，因此，它们可以被像其他`svg`元素一样操作，包括着色。我们将在本食谱中探索这一特性并实现一个面状图。
- en: Getting ready
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser hosted on your
    local HTTP server:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的本地HTTP服务器上托管您的本地副本的以下文件，并在您的网络浏览器中打开：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter12/choropleth.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter12/choropleth.html).'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter12/choropleth.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter12/choropleth.html).'
- en: How to do it...
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In a choropleth map different geographic regions are colored according to their
    corresponding variables, in this case based on 2008 unemployment rate in US by
    county. Now, let''s see how to do it in code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在面状图中，不同的地理区域根据它们对应的变量着色，在本例中基于2008年美国各县的失业率。现在，让我们看看如何在代码中实现它：
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This recipe generates the following choropleth map:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱生成了以下面状图：
- en: '![How to do it...](img/image_12_005.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_12_005.jpg)'
- en: Choropleth Map of 2008 Unemployment Rate
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 2008年失业率面状图
- en: How it works...
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In this recipe we loaded two different data sets: one for the US topology and
    the other containing unemployment rate by county in 2008 (line `B`). This technique
    is generally considered as layering and is not necessarily limited to only two
    layers. The unemployment data are stitched to counties by their ID (line `B` and
    `C`). Region coloring is achieved by using a threshold scale defined on line `A`.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们加载了两个不同的数据集：一个用于美国拓扑结构，另一个包含2008年各县的失业率（行`B`）。这种技术通常被认为是分层，并不一定仅限于两层。失业数据通过它们的ID与各县连接（行`B`和`C`）。区域着色是通过在行`A`上定义的阈值比例尺实现的。
- en: See also
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考信息
- en: 'TopoJSON Wiki for more information on mesh function: [https://github.com/topojson/topojson-client#mesh](https://github.com/topojson/topojson-client#mesh)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TopoJSON Wiki了解更多关于网格函数的信息：[https://github.com/topojson/topojson-client#mesh](https://github.com/topojson/topojson-client#mesh)
- en: 'D3 Wiki for more information on threshold scale: [https://github.com/d3/d3-scale/blob/master/README.md#scaleThreshold](https://github.com/d3/d3-scale/blob/master/README.md#scaleThreshold)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D3 Wiki了解更多关于阈值比例尺的信息：[https://github.com/d3/d3-scale/blob/master/README.md#scaleThreshold](https://github.com/d3/d3-scale/blob/master/README.md#scaleThreshold)
- en: 'Mike Bostock''s post on choropleth map which this recipe is based on: [http://bl.ocks.org/mbostock/4090848](http://bl.ocks.org/mbostock/4090848)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本食谱基于Mike Bostock关于面状图的帖子：[http://bl.ocks.org/mbostock/4090848](http://bl.ocks.org/mbostock/4090848)
