- en: Chapter 12. Knowing Your Map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Projecting the US map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Projecting the world map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a choropleth map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ability to project and correlate data points to geographic regions is crucial
    in many types of visualizations. Geographic visualization is a complex topic with
    many competing standards emerging and maturing for today's web technology. D3
    provides a few different ways to visualize geographic and cartographic data. In
    this chapter, we will introduce basic D3 cartographic visualization techniques
    and how to implement a fully-functional choropleth map (a special purpose colored
    map) in D3.
  prefs: []
  type: TYPE_NORMAL
- en: Projecting the US map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we are going to start with projecting the US map using D3 GEO
    API, while also getting familiar with a few different JSON data formats for describing
    geographic data. Let's first take a look at how geographic data are typically
    presented and consumed in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: GeoJSON
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first standard JavaScript geographic data format we are going to touch upon
    is called **GeoJSON**. GeoJSON format was originally written and maintained by
    an Internet working group of developers. Later it was standardized by the **Internet
    Engineering Task Force** (**IETF**) with RFC 7946 and published in August 2016.
  prefs: []
  type: TYPE_NORMAL
- en: '*GeoJSON is a format for encoding a variety of geographic data structures.
    GeoJSON supports the following geometry types: Point, LineString, Polygon, MultiPoint,
    MultiLineString, and MultiPolygon. Geometric objects with additional properties
    are Feature objects. Sets of features are contained by FeatureCollection objects.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Source: [http://www.geojson.org/](http://www.geojson.org/)*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'GeoJSON format is a very popular standard for encoding GIS information and
    is supported by numerous open source as well as commercial software. GeoJSON format
    uses latitude and longitude points as its coordinates; therefore, it requires
    any software, including D3, to find the proper projection, scale and translation
    method in order to visualize its data. The following GeoJSON data describes the
    state of Alabama in feature coordinates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: GeoJSON is currently the de facto GIS information standard for JavaScript project
    and is well supported by D3; however, before we jump right into D3 geographic
    visualization using this data format, we want to also introduce you to another
    emerging technology closely related to GeoJSON.
  prefs: []
  type: TYPE_NORMAL
- en: TopoJSON
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*TopoJSON is an extension of GeoJSON that encodes topology. Rather than representing
    geometries discretely, geometries in TopoJSON files are stitched together from
    shared line segments called arcs. This technique is similar to Matt Bloch''s MapShaper
    and the Arc/Info Export format, .e00.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*TopoJSON Wiki [https://github.com/topojson/topojson](https://github.com/topojson/topojson)*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: TopoJSON was created by D3's author *Mike Bostock* originally and designed to
    overcome some of the drawbacks in GeoJSON while providing a similar feature set
    when describing geographic information. In most cases concerning cartographic
    visualization TopoJSON can be a drop-in replacement for GeoJSON with much smaller
    footprint and better performance. Therefore, in this chapter, we will use TopoJSON
    instead of GeoJSON. Nevertheless, all techniques discussed in this chapter will
    work perfectly fine with GeoJSON as well. We will not list TopoJSON example here
    since its arcs-based format is not very human readable. However, you can easily
    convert your **shapefiles** (popular open source geographic vector format file)
    into TopoJSON using ogr2ogr command line tool provided by GDAL ([http://www.gdal.org/ogr2ogr.html](http://www.gdal.org/ogr2ogr.html)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: Now equipped with this background information let's see how we can make a map
    in D3.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser hosted on your
    local HTTP server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter12/usa.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter12/usa.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe we will load US TopoJSON data and render them using D3 Geo API.
    Here is the code sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This recipe projects US map with Albers USA mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_12_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: US map projected with Albers USA mode
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you can see, the code required to project a US map using TopoJSON and D3
    is quite short, especially the part concerning map projection. This is because
    both D3 geographic API and TopoJSON library are built explicitly to make this
    kind of job as easy as possible for developers. To make a map, first you need
    to load the TopoJSON data file (line `A`). The following screenshot shows what
    the topology data looks like once loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image_12_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Topology data from TopoJSON
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the topology data is loaded, all we have to do is to use the TopoJSON
    library `topojson.feature` function to convert topology arcs into coordinates
    similar to what GeoJSON format provides as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/5530_12_03_new.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Feature collection converted using topojson.feature function
  prefs: []
  type: TYPE_NORMAL
- en: 'Then `d3.geo.path` will automatically recognize and use the coordinates to
    generate `svg:path` highlighted in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: On line `A`, we first create a D3 GEO path object configured with Albers USA
    projection mode. Then we insert a `svg:path` that describe the outline of US,
    since this can be achieved by a single `svg:path` element (on line `B`). For the
    outline of each states we use the feature collection generated on line `C` to
    create one `svg:path` for each state that allow us to highlight the state on hover.
    With separate SVG element representing the states will also allow you to respond
    user interaction like click and touch.
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s it! This is all you need to do to project a map in D3 using TopoJSON.
    Additionally, we have also attached a zoom handler to the parent `svg:g` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This allows the user to perform simple geometric zoom on our map.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'GeoJSON v1.0 specification: [http://geojson.org/geojson-spec.html](http://geojson.org/geojson-spec.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'TopoJSON Wiki: [https://github.com/topojson/topojson/wiki](https://github.com/topojson/topojson/wiki)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Dealing with Data"), *Dealing with Data*,
    for more information on asynchronous data loading'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.html "Chapter 10. Interacting with Your Visualization"),
    *Interacting with Your Visualization*, for more information on how to implement
    zooming'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mike Bostock's post on Albers USA projection on which this recipe is based [http://bl.ocks.org/mbostock/4090848](http://bl.ocks.org/mbostock/4090848)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Projecting the world map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What if our visualization project is not just about US, but rather concerns
    the whole world? No worries, D3 comes with various built-in projection modes that
    work well with the world map that we will explore in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser hosted on your
    local HTTP server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter12/world.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter12/world.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe we will project the world map using various different D3 built-in
    projection modes. Here is the code sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This recipe generates world maps with different projection modes as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_12_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: World map projection
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we first define an array containing six different D3 projection
    modes on line `A`. A world topology data was loaded on line `B`. Similar to the
    previous recipe we have a `d3.geoPath` generator defined on line `C`. We also
    customized the projection mode for geo path generator calling its `projection`
    function. The rest of the recipe is almost identical to what we have done in the
    previous recipe. The `topojson.feature` function was used to convert topology
    data into geographic coordinates so `d3.geoPath` can generate `svg:path` required
    for map rendering (line `D`). On line `E`, one new function `mesh` from TopoJSON
    was used worth mentioning here. `topojson.mesh` function returns the GeoJSON `MultiLineString`
    geometry object representing complicated topology. This is a very compact way
    to render complex geometric shapes since all shared arcs are only included once.
    In our case since we don't really need to visualize country outline on each continent
    separately and they are share their borders therefore this is the most efficient
    option in rendering.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: D3 wiki Geo Projection page ([https://github.com/d3/d3-geo/blob/master/README.md#projections](https://github.com/d3/d3-geo/blob/master/README.md#projections)
    ) for more information on different projection modes as well as on how raw custom
    projection can be implemented
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a choropleth map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Choropleth map is a thematic map, in other words, a specially designed map not
    a general purpose one, which is designed to show measurement of statistical variable
    on the map using different color shades or patterns; or sometimes referred as
    geographic heat-map in simpler terms. We have already seen in the previous two
    recipes that geographic projection in D3 consists of a group of `svg:path` elements,
    therefore, they can be manipulated as any other `svg` elements including coloring.
    We will explore this feature in geo-projection and implement a Choropleth map
    in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser hosted on your
    local HTTP server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter12/choropleth.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter12/choropleth.html).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a choropleth map different geographic regions are colored according to their
    corresponding variables, in this case based on 2008 unemployment rate in US by
    county. Now, let''s see how to do it in code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This recipe generates the following choropleth map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_12_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Choropleth Map of 2008 Unemployment Rate
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe we loaded two different data sets: one for the US topology and
    the other containing unemployment rate by county in 2008 (line `B`). This technique
    is generally considered as layering and is not necessarily limited to only two
    layers. The unemployment data are stitched to counties by their ID (line `B` and
    `C`). Region coloring is achieved by using a threshold scale defined on line `A`.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'TopoJSON Wiki for more information on mesh function: [https://github.com/topojson/topojson-client#mesh](https://github.com/topojson/topojson-client#mesh)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'D3 Wiki for more information on threshold scale: [https://github.com/d3/d3-scale/blob/master/README.md#scaleThreshold](https://github.com/d3/d3-scale/blob/master/README.md#scaleThreshold)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Mike Bostock''s post on choropleth map which this recipe is based on: [http://bl.ocks.org/mbostock/4090848](http://bl.ocks.org/mbostock/4090848)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
