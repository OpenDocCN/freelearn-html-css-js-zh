- en: '*Chapter 9*: Integrating Vue.js with Node.js'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to integrate a Vue.js application into a
    Node.js server, using Express to structure the server code (according to the MVC
    model) and MongoDB to store the information.
  prefs: []
  type: TYPE_NORMAL
- en: For this, we will use the example of the list management application built in
    [*Chapter 5*](B17416_05_ePub.xhtml#_idTextAnchor109), *Managing a List with Vue.js*.
    But here, the server used will be a Node.js server, and the list items will be
    stored in the MongoDB database. This will allow them to be redisplayed later,
    if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: In the end, we will obtain a client-server application entirely made in JavaScript
    (both on the client side and on the server side).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the topics covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying application screens
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the app with Express
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MongoDB database structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the Axios library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inserting a new element in the list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying list elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying an element in the list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing an element from the list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application uses the same screens as those already used in [*Chapter 5*](B17416_05_ePub.xhtml#_idTextAnchor109)*,
    Managing a List with Vue.js*. We repeat them below to make them easier for you
    to understand.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find the code files for this chapter on GitHub at: [https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%209.zip](https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%209.zip).'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying application screens
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here, we visualize the screens of the application, allowing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the already existing list (empty at first)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inserting a new element at the end of the list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying an element of the list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing an item from the list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The URL to access the list is `http://localhost:3000`. The server used here
    is a Node.js server running with the **Express** module. The database used is
    **MongoDB**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Initially, the list is empty. Only the **Add Element** button is present on
    the page (see the following figure):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1 – Empty item list'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.01_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.1 – Empty item list
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking the **Add Element** button multiple times creates multiple rows with
    the text **Element X** followed by **Remove** and **Modify** buttons (here, we
    clicked on the **Add Element** button three times):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2 – Adding three items to the list'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.02_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.2 – Adding three items to the list
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let’s modify the second element. An input field appears in place of the
    item text. Let’s type `New Element 2` in place of the text displayed in the input
    field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.3 – Editing the second item in the list'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.03_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.3 – Editing the second item in the list
  prefs: []
  type: TYPE_NORMAL
- en: 'By clicking outside the input field, the input field disappears, and the text
    of the element appears modified:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4 – Second list item changed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.04_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.4 – Second list item changed
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, let’s remove the first and third items from the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.5 – First and third list items removed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.06_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.5 – First and third list items removed
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, when we refresh the previous window, we see that the list is re-displayed
    with `New Element 2`, thus indicating that the modifications made are indeed stored
    in a database. This was not the case when we made this application in [*Chapter
    5*](B17416_05_ePub.xhtml#_idTextAnchor109), *Managing a List with Vue.js*, with
    only Vue.js, because the elements of the list were not saved in a database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.6 – New list display: the list is preserved'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.06_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.6 – New list display: the list is preserved'
  prefs: []
  type: TYPE_NORMAL
- en: To create this application, we will, of course, use the Vue.js program that
    we have already written in [*Chapter 5*](B17416_05_ePub.xhtml#_idTextAnchor109),
    *Managing a List with Vue.js*. But it will have to be modified so that this application
    works on a Node.js server with the Express module and that the data displayed
    is stored in the MongoDB database.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll indicate here the files of the `<GlobalApp>` and `<Element>` components,
    written previously, in [*Chapter 5*](B17416_05_ePub.xhtml#_idTextAnchor109), *Managing
    a List with Vue.js*, to explain the modifications that will be made to them hereafter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the `<GlobalApp>` component:'
  prefs: []
  type: TYPE_NORMAL
- en: <GlobalApp> component (global-app.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the `<Element>` component:'
  prefs: []
  type: TYPE_NORMAL
- en: <Element> component (element.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'The `index.html` file that allows you to include the `<GlobalApp>` component
    is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: index.html file
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: To create this application, we start by creating the Node.js application, which
    will host the JavaScript code written with Vue.js. To do this, the application
    is created using the `express` command. The application will be named *list* (for
    example), so we will have to type the `express list` command to create this application,
    as is explained in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Building the app with Express
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s start by creating the application with Express. To do this, type the `express
    list` command, which creates the application named *list*. This application will
    be accessible using the URL `http://localhost:3000`, as seen in [*Chapter 7*](B17416_07_ePub.xhtml#_idTextAnchor138),
    *Using Express with Node.js*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s type the `express list` command in the current directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7 – Creating the application list with Express'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.07_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.7 – Creating the application list with Express
  prefs: []
  type: TYPE_NORMAL
- en: 'The server is started by typing the indicated commands, namely: `cd list`,
    `npm install`, followed by `npm start`.'
  prefs: []
  type: TYPE_NORMAL
- en: The application is started by typing the URL `http://localhost:3000` in the
    browser.
  prefs: []
  type: TYPE_NORMAL
- en: We display the basic application created as standard by Express (see *Figure
    9.8*).
  prefs: []
  type: TYPE_NORMAL
- en: If an error occurs while loading the Express modules, you can type the `npm
    link express` command in order to locate the Express module within the application.
    And if an error occurs while loading the mongoose module, you can type the `npm
    link mongoose` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'If all is okay, you obtain the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.8 – Standard application created with Express'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.08_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.8 – Standard application created with Express
  prefs: []
  type: TYPE_NORMAL
- en: 'The goal now is to visualize our list management application, created with
    Vue.js. It consists of three files:'
  prefs: []
  type: TYPE_NORMAL
- en: The `index.html` file, which is the file to view at startup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `global-app.js` file, which describes the main `<GlobalApp>` component of
    the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `element.js` file, which describes the `<Element>` component corresponding
    to a displayed element line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main directory of the Express application (the `list` directory) includes
    a `public` subdirectory containing the `images`, `javascripts`, and `stylesheets`
    subdirectories.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s drop the three files `index.html`, `global-app.js`, and `element.js` in
    the `public` directory, directly under the root.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Modifying files in the `public` directory does not require a server restart.
    On the other hand, modifying the `app.js` file of the Express application requires
    restarting the server with `npm start`.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s view the URL `http://localhost:3000` again in the browser. The Vue.js
    application we built in [*Chapter 5*](B17416_05_ePub.xhtml#_idTextAnchor109),
    *Managing a List with Vue.js*, will now appear. Button clicks will also start
    working.
  prefs: []
  type: TYPE_NORMAL
- en: The only difference is that our Vue.js application runs on a Node.js server
    instead of running on another application server like in [*Chapter 5*](B17416_05_ePub.xhtml#_idTextAnchor109),
    *Managing a List with Vue.js*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.9 – Application running on a Node.js server'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.09_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.9 – Application running on a Node.js server
  prefs: []
  type: TYPE_NORMAL
- en: However, if the page displayed is refreshed, the list previously displayed is
    deleted because there is currently no persistence of the information displayed
    in the database.
  prefs: []
  type: TYPE_NORMAL
- en: We will now see how our application can interact with the Node.js server and
    the MongoDB database.
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB database structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To build our application, we will have to perform data reads and updates on
    the server in the database. For example, each click on the `elements` collection.
    Indeed, each document of the `elements` collection will represent the text of
    the element displayed in the list on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To access the MongoDB database, you start by installing the mongoose module
    (see the previous chapter), which allows you to manipulate database documents
    in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, type the `npm install mongoose` command (from the main directory,
    `list`, of the Express application).
  prefs: []
  type: TYPE_NORMAL
- en: The `elements` collection will be the one that will store the list items in
    MongoDB. A document in the `elements` collection will consist of its text associated
    with the `text` property. Each document will also have the `_id` property, whose
    unique value is assigned by MongoDB for each document inserted into the collection.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The structure of the database is described using the `listSchema` schema, which
    will be associated with the `List` model used to create the documents of the `elements`
    collection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Express’s `app.js` file is modified to include these definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding List model to use MongoDB’s elements collection (app.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: The `app.js` file will then be enriched to define the new routes that will update
    the database. These routes will be created by using the `app.use()` method (as
    explained in [*Chapter 7*](B17416_07_ePub.xhtml#_idTextAnchor138), *Using Express
    with Node.js*). The creation of these routes will be described in the following
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to the `List` model that we have created, we will have access to the
    methods `List.create()`, `List.find()`, and so on for manipulating documents in
    the `elements` collection of the MongoDB database.
  prefs: []
  type: TYPE_NORMAL
- en: To create interactions between the client (here, the browser) and the server
    (here, the Node.js server) in order to update the database containing the list
    of elements, we use the **Axios JavaScript library** here.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Axios library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We see that, for now, we can manipulate the list items displayed on the HTML
    page, but we cannot yet update them in the database on the server.
  prefs: []
  type: TYPE_NORMAL
- en: For this, the Vue.js program must be able to communicate with the Node.js server.
    This is possible using a JavaScript library such as Axios (see [https://github.com/axios/axios](https://github.com/axios/axios)).
    All you have to do is include the library in the HTML page (here, it will be in
    the `index.html` file) in order to be able to use its features.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The Axios library is a library allowing communication between a browser and
    a server using **Ajax technology**. This technology allows a browser and a server
    to exchange information while remaining on the same HTML page, which is what we
    want here. This is called a **single-page application** (**SPA**) (when the application
    consists of a single HTML page).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s include the Axios library in the `index.html` file (using the `<script>`
    tag), and display the value of the `axios.VERSION` variable, which contains the
    version number of the library. This verifies that the Axios library is accessible:'
  prefs: []
  type: TYPE_NORMAL
- en: Including Axios library and displaying version number (index.html file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: We simply added in the `index.html` file the Axios library (using the `<script>`
    tag) and the instruction to display the version number of the Axios library in
    the console, which allows us to check that the Axios library is accessible afterward.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s display the page again in the browser (with the URL `http://localhost:3000`).
  prefs: []
  type: TYPE_NORMAL
- en: 'We get a message in the console indicating the version number of Axios used
    (see the following figure), thus showing that we have access to the functionalities
    of the Axios library:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.10 – Displaying the Axios version number'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.10_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.10 – Displaying the Axios version number
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s see how to use Axios to interact with the server and update the database
    documents.
  prefs: []
  type: TYPE_NORMAL
- en: The goal is, of course, to make maximum use of the Vue.js code that we have
    already written by modifying it to use the Axios library and thus perform communication
    with the Node.js server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Subsequently, we will therefore modify the following files (in addition to
    the `index.html` file previously modified to include the Axios library):'
  prefs: []
  type: TYPE_NORMAL
- en: The `global-app.js` file, to make calls to the Axios library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `element.js` file, to adapt it to the structure of the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `app.js` file (created by Express), to perform database queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have seen how to install and use Axios in our program. Now let’s see how
    to use it to insert an element into the database.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting a new element in the list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s see how to store a new element in the list, following a click on the **Add
    Element** button.
  prefs: []
  type: TYPE_NORMAL
- en: The text associated with this element must be transmitted to the server, which
    will be of the form **Element X**. We will see later how to modify this text after
    clicking on the **Modify** button.
  prefs: []
  type: TYPE_NORMAL
- en: The `add()` method defined in the `<GlobalApp>` component is used to insert
    a new element into the displayed list. It will be necessary to add instructions
    that use the Axios library in order to also insert this new element in the MongoDB
    `elements` collection.
  prefs: []
  type: TYPE_NORMAL
- en: Before starting to use Axios, it is useful to slightly modify the JavaScript
    program written with Vue.js. To do this, we will use a new attribute when creating
    the `<Element>` component, replacing the `text` and `index` attributes with the
    `element` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Replacing the text and index attributes with the element attribute
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When creating an element, we currently use the element’s text and index, which
    are then used in the `<Element>` component, to display it (with its text) or to
    modify or delete it (with its index).
  prefs: []
  type: TYPE_NORMAL
- en: The use of the index to identify the element in the list displayed on the screen
    was relevant before, but this is no longer the case if we want to modify or delete
    the element in the database. This is because the documents of a MongoDB collection
    are not identified by their index but rather by their identifier `_id`.
  prefs: []
  type: TYPE_NORMAL
- en: Rather than passing the `text` and `index` parameters in the `<Element>` component,
    we simplify by passing only the `element` parameter, which is a `{ text, _id }`
    object. The `element.text` field allows you to retrieve the text to be displayed,
    while the `element._id` field allows you to access the unique identifier of the
    element (such as the index, which was unique for each element).
  prefs: []
  type: TYPE_NORMAL
- en: We modify the `global-app.js` and `element.js` files to take this into account.
  prefs: []
  type: TYPE_NORMAL
- en: 'These files are modified below but will be modified again to take into account
    the connection with the database:'
  prefs: []
  type: TYPE_NORMAL
- en: global-app.js file
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: 'The following remarks can be made about the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: The reactive `elements` variable now becomes an array of `{ text, _id }` objects.
    To do this, we write in the `add()` method the instruction `this.elements.push({text:text,
    _id:this.elements.length})` by inserting an object of the form `{text, _id}` into
    the `elements` array.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The value of the `_id` property is temporary here: in fact, you must then retrieve
    the identifier provided by MongoDB when the document has been saved in the database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each `<Element>` component is constructed (in the template) by passing it an
    `element` attribute that represents a `{ text, _id }` object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `remove()` method must remove from the list the element having the passed
    identifier. To do this, we use the JavaScript `filter()` method to keep all the
    elements except the one with this identifier.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similarly, the `modify()` method must modify the value of the element of the
    list having this identifier. We use the JavaScript `map()` method to return a
    new array of elements, for which the element with this identifier has its value
    modified.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `element.js` file becomes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: element.js file
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: As the attribute transmitted for the creation of the `<Element>` component is
    named `element` and corresponds to an object `{ text, _id }`, we use `element.text`
    and `element._id` to display the text and use the identifier of the element (instead
    of the index).
  prefs: []
  type: TYPE_NORMAL
- en: You can check that the program still works, even if the connection with the
    server for insertion into the database has not yet been made.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We have modified the code of the Vue.js program in order to adapt it to the
    use of the MongoDB database.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now explain how the Axios library will allow the client and the server
    to communicate with each other, in order to update the MongoDB database.
  prefs: []
  type: TYPE_NORMAL
- en: Description of the Axios library for communicating between the client and the
    server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let’s use Axios to insert the element into the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Axios offers four main methods for communicating between the browser and the
    server, with the JavaScript language. The server we are using here is a Node.js
    server, but Axios allows you to interact with any type of server. The four methods
    are those related to the types of HTTP requests one can make: `GET`, `POST`, `PUT`,
    and `DELETE`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`axios.get(url, options)`: This allows you to perform a `GET` type request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`axios.post(url, options)`: This allows you to perform a `POST` type request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`axios.put(url, options)`: This allows you to perform a `PUT` type request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`axios.delete(url, options)`: This allows you to perform a `DELETE` type request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `options` parameter allows you to specify additional parameters that will
    allow the server to perform its processing. For example, in the case of our application,
    we will indicate in this parameter the text of the list element that we want to
    store in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: All these methods return a `Promise` object, which then allows you to continue
    with the `then(callback)` method. The `callback(response)` function is used to
    retrieve and analyze the server’s response following the request being made.
  prefs: []
  type: TYPE_NORMAL
- en: '`Promise` objects were studied at the end of [*Chapter 2*](B17416_02_ePub.xhtml#_idTextAnchor044),
    *Exploring the Advanced Concepts of JavaScript*.'
  prefs: []
  type: TYPE_NORMAL
- en: In each case, we will have to process the Axios request sent on the client side
    (in the `global-app.js` file associated with the `<GlobalApp>` component), then
    take it into account on the server side (in the `app.js` file, which receives
    the queries issued by Axios).
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s see how the `POST` request will allow us to insert elements into the
    database.
  prefs: []
  type: TYPE_NORMAL
- en: Using Axios with a POST type request (client side)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let’s see how to use the `axios.post()` method to insert a new element into
    the `elements` collection, following the creation of a new element in the list.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We are using the `POST` request here to insert the item, but other types of
    requests would work the same. However, using the `POST` request makes sense here
    because it follows the official recommendations for using **REpresentational State
    Transfer** (**REST**) requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although only a few lines are added to each file, the full code is shown below
    each time, so you can see where the changes are located:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new element in the database, client side (global-app.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE279]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE280]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE281]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE282]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE283]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE284]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE286]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE288]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE290]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE291]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE292]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE293]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE295]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE296]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE297]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE298]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE299]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE300]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE301]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE302]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE303]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE304]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE305]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE306]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE307]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE308]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE309]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE311]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE312]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE313]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE314]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE315]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE316]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE317]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE318]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE319]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE320]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE321]'
  prefs: []
  type: TYPE_PRE
- en: The `axios.post("/list", {text:text})` method activates the `/list` URL on the
    server, using a `POST` type request. The `text` parameter is passed to the server
    so that it stores it in the `elements` collection.
  prefs: []
  type: TYPE_NORMAL
- en: In return for the call to the server, the latter returns a `response` object
    containing in `data.id` the identifier of the document created in MongoDB. This
    identifier and the element text are then stored in the `elements` array. Because
    the `elements` array is a reactive variable of Vue.js, its update causes the list
    to be re-displayed in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Notice how the callback function is written in the `then(callback)` method.
    We use the form with `=>` (that is without using the `function` keyword) in order
    to preserve the value of `this` in the callback function. If you use the `function`
    keyword instead, the value of `this` is `undefined` and you can no longer access
    the `elements` variable through `this.elements`, which will cause an error.
  prefs: []
  type: TYPE_NORMAL
- en: The `POST` request was issued by the client (the browser), so it must now be
    processed by the server to insert a new element into the collection. Let’s study
    how to proceed.
  prefs: []
  type: TYPE_NORMAL
- en: POST type request processing (server side)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let’s see how the server handles the receipt of the `POST` request. It
    must create a new document in the `elements` collection of the database. The server’s
    `app.js` file is modified to take into account the `POST` request on the `/list`
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new element in the database, server side (app.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE322]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE323]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE324]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE325]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE326]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE327]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE328]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE329]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE330]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE331]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE332]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE333]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE334]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE335]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE336]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE337]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE338]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE339]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE340]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE341]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE342]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE343]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE344]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE345]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE346]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE347]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE348]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE349]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE350]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE351]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE352]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE353]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE354]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE355]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE356]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE357]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE358]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE359]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE360]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE361]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE362]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE363]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE364]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE365]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE366]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE367]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE368]'
  prefs: []
  type: TYPE_PRE
- en: The `app.post("/list", callback)` method is used to receive and process the
    request to insert the new element into the `elements` collection.
  prefs: []
  type: TYPE_NORMAL
- en: The text sent in the Axios `text` parameter is received on the server in the
    `req.body.text` variable. The update of the `elements` collection is performed
    by the `List.create()` class method, to which we pass the `text` parameter. In
    the callback function associated with the `create()` method, we retrieve the identifier
    of the document created in `doc._id`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We return this identifier in the response sent to the browser as a JSON object
    `{ id : doc._id }`. We use the `res.json()` method for this. This server return
    is processed in the `then(callback)` method when calling the `axios.post()` method
    previously seen (the `global-app.js` file).'
  prefs: []
  type: TYPE_NORMAL
- en: If you run the preceding program, you’ll see that the lines containing **Element
    X** are inserted one under the other on the page. But nothing says that the database
    has been updated. Let’s verify the correct insertion using the tools available
    in MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying the correct operation of the insertion in the database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To verify the insertion in the database, just use the `mongo` utility, then
    type the command `db.elements.find()` to see the inserted documents displayed
    (assuming we have already connected the `mydb_test` database with the `db=connect("mydb_test")`
    command).
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming that three list items have been inserted, we get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.11 – Using the mongo utility to view the contents of the elements
    collection'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.11_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.11 – Using the mongo utility to view the contents of the elements collection
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to retrieve the information stored in the database to display
    the items in the list. The list should be viewed when the page is displayed at
    the start and will be updated as insertions, modifications, or deletions are made.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying list elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we deal with the first display of the page. Insertion has been
    seen previously, and modification and deletion are covered in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To display the list when the application starts, you must use the `created()`
    method or the `mounted()` method of the component, which are called in each Vue.js
    component when the component is created.
  prefs: []
  type: TYPE_NORMAL
- en: To retrieve the list of elements, we are going to use an HTTP `GET` request.
  prefs: []
  type: TYPE_NORMAL
- en: Using Axios with a GET type request (client side)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, we are going to make a `GET` type request with the `/list` URL to the
    server. The `axios.get("/list")` instruction is used to perform this request.
    We can use this instruction in the `created()` or `mounted()` method. Here, we
    choose to use it in the `created()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving list of items, client side (global-app.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE369]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE370]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE371]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE372]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE373]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE374]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE375]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE376]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE377]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE378]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE379]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE380]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE381]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE382]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE383]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE384]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE385]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE386]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE387]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE388]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE389]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE390]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE391]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE392]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE393]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE394]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE395]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE396]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE397]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE398]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE399]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE400]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE401]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE402]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE403]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE404]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE405]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE406]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE407]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE408]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE409]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE410]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE411]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE412]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE413]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE414]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE415]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE416]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE417]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE418]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE419]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE420]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE421]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE422]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE423]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE424]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE425]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE426]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE427]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE428]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE429]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE430]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE431]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE432]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE433]'
  prefs: []
  type: TYPE_PRE
- en: The `axios.get("/list")` method makes the request to the server, then processes
    the response received in the `then(callback)` method. As before, the received
    `response` object contains the `data` property, which contains the response returned
    by the server (the `elements` field – see below).
  prefs: []
  type: TYPE_NORMAL
- en: As the server sends all the document fields of the `elements` collection, we
    filter the list received by the `map()` method in order to keep only the `_id`
    and `text` fields (we thus remove the `__v` field associated with the version
    number, which is unnecessary here).
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s see how to process the `GET` request on the Node.js server side.
  prefs: []
  type: TYPE_NORMAL
- en: GET type request processing (server side)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `GET` `/list` request is received by the Node.js server through the `app.get("/list")`
    method defined in the `app.js` file. The processing will consist of reading the
    content of the `elements` collection and returning it in JSON form to the browser
    in the `elements` property. Each item in the returned collection has `_id`, `text`,
    and `__v` (for the version number of the document) fields:'
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving list of items, server side (app.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE434]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE435]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE436]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE437]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE438]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE439]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE440]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE441]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE442]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE443]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE444]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE445]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE446]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE447]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE448]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE449]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE450]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE451]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE452]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE453]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE454]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE455]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE456]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE457]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE458]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE459]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE460]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE461]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE462]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE463]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE464]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE465]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE466]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE467]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE468]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE469]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE470]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE471]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE472]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE473]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE474]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE475]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE476]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE477]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE478]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE479]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE480]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE481]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE482]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE483]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE484]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE485]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE486]'
  prefs: []
  type: TYPE_PRE
- en: 'The `elements` collection is read using the `List.find()` class method. We
    return the `{ elements : elements }` object in response to the browser, the use
    of which we saw earlier.'
  prefs: []
  type: TYPE_NORMAL
- en: The list of items is now displayed each time the application is started. Just
    restart the server with `npm start`, then re-display the URL of the page, `http://localhost:3000`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.12 – The list of elements is displayed when the application starts'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.12_B17416.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.12 – The list of elements is displayed when the application starts
  prefs: []
  type: TYPE_NORMAL
- en: We have seen how to insert an element and retrieve the list of elements. Next,
    let’s see how to modify an element in the list.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying an element in the list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here we show how to modify an element of the list, keeping this modification
    in the database. A `PUT` type request will be used for this.
  prefs: []
  type: TYPE_NORMAL
- en: Using Axios with a PUT type request (client side)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `axios.put("/list", options)` method is used to perform a `PUT` type request
    to the server. We transmit to the server in the `options` parameter the new text
    of the modified element and its identifier in the database. The identifier and
    the new text will allow the item to be updated on the server:'
  prefs: []
  type: TYPE_NORMAL
- en: Modifying an element, client side (global-app.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE487]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE488]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE489]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE490]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE491]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE492]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE493]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE494]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE495]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE496]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE497]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE498]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE499]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE500]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE501]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE502]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE503]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE504]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE505]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE506]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE507]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE508]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE509]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE510]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE511]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE512]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE513]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE514]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE515]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE516]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE517]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE518]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE519]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE520]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE521]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE522]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE523]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE524]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE525]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE526]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE527]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE528]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE529]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE530]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE531]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE532]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE533]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE534]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE535]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE536]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE537]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE538]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE539]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE540]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE541]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE542]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE543]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE544]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE545]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE546]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE547]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE548]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE549]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE550]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE551]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE552]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE553]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE554]'
  prefs: []
  type: TYPE_PRE
- en: The `then(callback)` method should not be used here because the server does
    not return any information for the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now see the management of the `PUT` request on the server side.
  prefs: []
  type: TYPE_NORMAL
- en: PUT type request processing (server side)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The server processes the `PUT` `/list` request in the `app.js` file. The processing
    consists of carrying out an update of the document of the collection having this
    identifier, with the text received from the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: Modifying an element, server side (app.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE555]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE556]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE557]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE558]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE559]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE560]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE561]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE562]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE563]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE564]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE565]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE566]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE567]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE568]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE569]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE570]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE571]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE572]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE573]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE574]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE575]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE576]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE577]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE578]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE579]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE580]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE581]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE582]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE583]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE584]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE585]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE586]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE587]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE588]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE589]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE590]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE591]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE592]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE593]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE594]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE595]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE596]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE597]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE598]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE599]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE600]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE601]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE602]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE603]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE604]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE605]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE606]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE607]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE608]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE609]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE610]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE611]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE612]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE613]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE614]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE615]'
  prefs: []
  type: TYPE_PRE
- en: The text and the identifier are retrieved from the server in the `req.body.text`
    and `req.body.id` variables. The document with this identifier is updated in the
    database with the new text. The `List.updateOne()` class method allows this document
    to be modified, but since it does not use a callback function afterward, the `exec()`
    method must be used afterward for the update to be carried out in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Also notice the `res.send()` instruction at the end of the processing. It closes
    the connection between the browser and the server. If the connection is not closed,
    the browser waits for the server’s response, which would never come if the server
    sends nothing back to the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s finish by explaining how to remove an item from the list.
  prefs: []
  type: TYPE_NORMAL
- en: Removing an element from the list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, we will learn how to remove an element from the list. A `DELETE` type
    request will be used for this.
  prefs: []
  type: TYPE_NORMAL
- en: Using Axios with a DELETE type request (client side)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `axios.delete("/list", options)` method is used to trigger a `DELETE` type
    request on the server. The `options` parameter must indicate the identifier of
    the element to be deleted from the collection.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, unlike the previous `axios.get()`, `axios.put()`, and `axios.post()`
    calls, the `axios.delete("/list", options)` call requires that the `options` parameter
    be written in the `data` property (thus written as `{ data : options }`). If you
    don’t follow this convention, it won’t work.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the instructions for performing a `DELETE` request with the Axios
    library:'
  prefs: []
  type: TYPE_NORMAL
- en: Deleting an element, client side (global-app.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE616]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE617]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE618]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE619]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE620]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE621]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE622]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE623]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE624]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE625]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE626]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE627]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE628]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE629]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE630]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE631]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE632]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE633]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE634]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE635]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE636]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE637]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE638]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE639]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE640]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE641]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE642]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE643]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE644]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE645]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE646]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE647]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE648]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE649]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE650]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE651]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE652]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE653]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE654]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE655]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE656]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE657]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE658]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE659]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE660]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE661]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE662]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE663]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE664]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE665]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE666]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE667]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE668]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE669]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE670]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE671]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE672]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE673]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE674]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE675]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE676]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE677]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE678]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE679]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE680]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE681]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE682]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE683]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE684]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE685]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE686]'
  prefs: []
  type: TYPE_PRE
- en: 'As mentioned before, we use the `options` parameter of the `axios.delete(/list",
    options)` method in the form `{ data : options }` so that the options are correctly
    passed by the `DELETE` method.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now examine the processing performed by the server when receiving the
    `DELETE` request.
  prefs: []
  type: TYPE_NORMAL
- en: DELETE type request processing (server side)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The server receives the `DELETE` `/list` request using the `app.delete("/list,
    callback)` method. The callback function uses the identifier passed in the request
    to delete the corresponding document from the `elements` collection:'
  prefs: []
  type: TYPE_NORMAL
- en: Deleting an element, server side (app.js file)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE687]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE688]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE689]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE690]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE691]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE692]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE693]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE694]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE695]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE696]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE697]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE698]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE699]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE700]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE701]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE702]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE703]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE704]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE705]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE706]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE707]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE708]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE709]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE710]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE711]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE712]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE713]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE714]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE715]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE716]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE717]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE718]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE719]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE720]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE721]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE722]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE723]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE724]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE725]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE726]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE727]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE728]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE729]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE730]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE731]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE732]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE733]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE734]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE735]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE736]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE737]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE738]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE739]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE740]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE741]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE742]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE743]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE744]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE745]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE746]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE747]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE748]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE749]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE750]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE751]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE752]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE753]'
  prefs: []
  type: TYPE_PRE
- en: The `List.deleteOne({_id:id})` method is used to delete the document having
    this identifier in the collection. As we do not use a callback function in the
    `List.deleteOne()` method, we call the `exec()` method so that the deletion is
    performed in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Also, notice the `res.send()` instruction at the end of the processing. It closes
    the connection between the browser and the server. If the connection is not closed,
    the browser waits for the server’s response, which would never come if the server
    sends nothing back to the browser. In this case, you would see unexpected results
    by clicking several times on the **Delete** buttons in the list and reloading
    the list.
  prefs: []
  type: TYPE_NORMAL
- en: We have seen how to use MongoDB to insert, modify, and delete elements in a
    list, using a library such as Axios, allowing communication between the JavaScript
    code of the browser and the JavaScript code written for the server. And now, this
    brings us to the end of this chapter and the book.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Through this complete example, we have seen how to use JavaScript on both the
    client side (here, with Vue.js) and the server side (with Node.js and MongoDB).
  prefs: []
  type: TYPE_NORMAL
- en: The use of a single language to carry out all development simplifies learning
    and ensures great consistency throughout the application.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, tools such as Vue.js, allowing the creation of reusable components,
    and modules such as Express and mongoose based on the MVC model, make it possible
    to properly architect JavaScript code, both on the client side and on the server
    side.
  prefs: []
  type: TYPE_NORMAL
- en: We also saw how the Axios library made it possible to communicate between the
    client and the server.
  prefs: []
  type: TYPE_NORMAL
- en: You now have everything you need to create reliable, robust, and well-structured
    client and server applications entirely in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thank you, dear reader, for purchasing and reading this book. It was written
    for the sole purpose of helping and guiding you. We hope it has been of great
    help to you.
  prefs: []
  type: TYPE_NORMAL
- en: If so, we ask you for a very small but extremely important contribution – to
    make our book knownto others by means at your disposal, in the hope that it can
    keep helping people like you. Thanks very much!
  prefs: []
  type: TYPE_NORMAL
