- en: '*Chapter 9*: Integrating Vue.js with Node.js'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第9章*：集成Vue.js与Node.js'
- en: In this chapter, we will learn how to integrate a Vue.js application into a
    Node.js server, using Express to structure the server code (according to the MVC
    model) and MongoDB to store the information.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用Express（根据MVC模型）来结构化服务器代码并将Vue.js应用程序集成到Node.js服务器中，并使用MongoDB来存储信息。
- en: For this, we will use the example of the list management application built in
    [*Chapter 5*](B17416_05_ePub.xhtml#_idTextAnchor109), *Managing a List with Vue.js*.
    But here, the server used will be a Node.js server, and the list items will be
    stored in the MongoDB database. This will allow them to be redisplayed later,
    if necessary.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这一点，我们将使用[*第5章*](B17416_05_ePub.xhtml#_idTextAnchor109)中构建的列表管理应用程序的例子，即*使用Vue.js管理列表*。但在这里，我们将使用Node.js服务器，并将列表项存储在MongoDB数据库中。这将允许它们在必要时重新显示。
- en: In the end, we will obtain a client-server application entirely made in JavaScript
    (both on the client side and on the server side).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将获得一个完全由JavaScript（客户端和服务器端）制成的客户端-服务器应用程序。
- en: 'Here are the topics covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: Displaying application screens
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示应用程序屏幕
- en: Building the app with Express
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Express构建应用程序
- en: MongoDB database structure
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MongoDB数据库结构
- en: Installing the Axios library
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Axios库
- en: Inserting a new element in the list
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在列表中插入新元素
- en: Displaying list elements
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示列表元素
- en: Modifying an element in the list
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改列表中的元素
- en: Removing an element from the list
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从列表中删除元素
- en: The application uses the same screens as those already used in [*Chapter 5*](B17416_05_ePub.xhtml#_idTextAnchor109)*,
    Managing a List with Vue.js*. We repeat them below to make them easier for you
    to understand.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序使用与[*第5章*](B17416_05_ePub.xhtml#_idTextAnchor109)*使用Vue.js管理列表*中已经使用的相同屏幕。我们将在下面重复它们，以便您更容易理解。
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You can find the code files for this chapter on GitHub at: [https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%209.zip](https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%209.zip).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上找到本章的代码文件：[https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%209.zip](https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%209.zip)。
- en: Displaying application screens
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示应用程序屏幕
- en: 'Here, we visualize the screens of the application, allowing the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可视化应用程序的屏幕，允许以下操作：
- en: Displaying the already existing list (empty at first)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示已存在的列表（最初为空）
- en: Inserting a new element at the end of the list
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在列表末尾插入新元素
- en: Modifying an element of the list
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改列表中的元素
- en: Removing an item from the list
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从列表中删除项目
- en: Note
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The URL to access the list is `http://localhost:3000`. The server used here
    is a Node.js server running with the **Express** module. The database used is
    **MongoDB**.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 访问列表的URL是`http://localhost:3000`。这里使用的服务器是运行**Express**模块的Node.js服务器。使用的数据库是**MongoDB**。
- en: 'Initially, the list is empty. Only the **Add Element** button is present on
    the page (see the following figure):'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 初始时，列表为空。页面上只存在**添加元素**按钮（见以下图示）：
- en: '![Figure 9.1 – Empty item list'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.1 – 空项目列表'
- en: '](img/Figure_9.01_B17416.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.01_B17416.jpg)'
- en: Figure 9.1 – Empty item list
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 – 空项目列表
- en: 'Clicking the **Add Element** button multiple times creates multiple rows with
    the text **Element X** followed by **Remove** and **Modify** buttons (here, we
    clicked on the **Add Element** button three times):'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**添加元素**按钮多次会创建多个带有文本**元素X**以及**删除**和**修改**按钮的行（这里我们点击了**添加元素**按钮三次）：
- en: '![Figure 9.2 – Adding three items to the list'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.2 – 向列表中添加三个项目'
- en: '](img/Figure_9.02_B17416.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.02_B17416.jpg)'
- en: Figure 9.2 – Adding three items to the list
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2 – 向列表中添加三个项目
- en: 'Next, let’s modify the second element. An input field appears in place of the
    item text. Let’s type `New Element 2` in place of the text displayed in the input
    field:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们修改第二个元素。一个输入字段出现在项目文本的位置。让我们在输入字段中输入`New Element 2`来替换显示在输入字段中的文本：
- en: '![Figure 9.3 – Editing the second item in the list'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.3 – 编辑列表中的第二个项目'
- en: '](img/Figure_9.03_B17416.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.03_B17416.jpg)'
- en: Figure 9.3 – Editing the second item in the list
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3 – 编辑列表中的第二个项目
- en: 'By clicking outside the input field, the input field disappears, and the text
    of the element appears modified:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击输入字段外的地方，输入字段消失，元素的文本被修改：
- en: '![Figure 9.4 – Second list item changed'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.4 – 第二个列表项已更改'
- en: '](img/Figure_9.04_B17416.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.04_B17416.jpg)'
- en: Figure 9.4 – Second list item changed
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4 – 第二个列表项已更改
- en: 'Finally, let’s remove the first and third items from the list:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.5 – First and third list items removed'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.06_B17416.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.5 – First and third list items removed
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, when we refresh the previous window, we see that the list is re-displayed
    with `New Element 2`, thus indicating that the modifications made are indeed stored
    in a database. This was not the case when we made this application in [*Chapter
    5*](B17416_05_ePub.xhtml#_idTextAnchor109), *Managing a List with Vue.js*, with
    only Vue.js, because the elements of the list were not saved in a database:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.6 – New list display: the list is preserved'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.06_B17416.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.6 – New list display: the list is preserved'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: To create this application, we will, of course, use the Vue.js program that
    we have already written in [*Chapter 5*](B17416_05_ePub.xhtml#_idTextAnchor109),
    *Managing a List with Vue.js*. But it will have to be modified so that this application
    works on a Node.js server with the Express module and that the data displayed
    is stored in the MongoDB database.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: We’ll indicate here the files of the `<GlobalApp>` and `<Element>` components,
    written previously, in [*Chapter 5*](B17416_05_ePub.xhtml#_idTextAnchor109), *Managing
    a List with Vue.js*, to explain the modifications that will be made to them hereafter.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the `<GlobalApp>` component:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: <GlobalApp> component (global-app.js file)
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Here’s the `<Element>` component:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: <Element> component (element.js file)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The `index.html` file that allows you to include the `<GlobalApp>` component
    is the following:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: index.html file
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: To create this application, we start by creating the Node.js application, which
    will host the JavaScript code written with Vue.js. To do this, the application
    is created using the `express` command. The application will be named *list* (for
    example), so we will have to type the `express list` command to create this application,
    as is explained in the following section.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Building the app with Express
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s start by creating the application with Express. To do this, type the `express
    list` command, which creates the application named *list*. This application will
    be accessible using the URL `http://localhost:3000`, as seen in [*Chapter 7*](B17416_07_ePub.xhtml#_idTextAnchor138),
    *Using Express with Node.js*.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s type the `express list` command in the current directory:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7 – Creating the application list with Express'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.07_B17416.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.7 – Creating the application list with Express
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: 'The server is started by typing the indicated commands, namely: `cd list`,
    `npm install`, followed by `npm start`.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: The application is started by typing the URL `http://localhost:3000` in the
    browser.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: We display the basic application created as standard by Express (see *Figure
    9.8*).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: If an error occurs while loading the Express modules, you can type the `npm
    link express` command in order to locate the Express module within the application.
    And if an error occurs while loading the mongoose module, you can type the `npm
    link mongoose` command.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在加载Express模块时发生错误，你可以输入`npm link express`命令以在应用程序中定位Express模块。如果加载mongoose模块时发生错误，你可以输入`npm
    link mongoose`命令。
- en: 'If all is okay, you obtain the following:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，你将获得以下结果：
- en: '![Figure 9.8 – Standard application created with Express'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.8 – 使用Express创建的标准应用程序'
- en: '](img/Figure_9.08_B17416.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.08_B17416.jpg)'
- en: Figure 9.8 – Standard application created with Express
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.8 – 使用Express创建的标准应用程序
- en: 'The goal now is to visualize our list management application, created with
    Vue.js. It consists of three files:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 目前的目标是可视化我们使用Vue.js创建的列表管理应用程序。它由三个文件组成：
- en: The `index.html` file, which is the file to view at startup
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动时需要查看的`index.html`文件
- en: The `global-app.js` file, which describes the main `<GlobalApp>` component of
    the application
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述应用程序主`<GlobalApp>`组件的`global-app.js`文件
- en: The `element.js` file, which describes the `<Element>` component corresponding
    to a displayed element line
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述与显示元素行对应的`<Element>`组件的`element.js`文件
- en: The main directory of the Express application (the `list` directory) includes
    a `public` subdirectory containing the `images`, `javascripts`, and `stylesheets`
    subdirectories.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: Express应用程序的主目录（`list`目录）包括一个包含`images`、`javascripts`和`stylesheets`子目录的`public`子目录。
- en: Let’s drop the three files `index.html`, `global-app.js`, and `element.js` in
    the `public` directory, directly under the root.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将三个文件`index.html`、`global-app.js`和`element.js`直接放入`public`目录下，位于根目录之下。
- en: Note
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Modifying files in the `public` directory does not require a server restart.
    On the other hand, modifying the `app.js` file of the Express application requires
    restarting the server with `npm start`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 修改`public`目录中的文件不需要重启服务器。另一方面，修改Express应用程序的`app.js`文件则需要使用`npm start`命令重启服务器。
- en: Let’s view the URL `http://localhost:3000` again in the browser. The Vue.js
    application we built in [*Chapter 5*](B17416_05_ePub.xhtml#_idTextAnchor109),
    *Managing a List with Vue.js*, will now appear. Button clicks will also start
    working.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在浏览器中再次查看URL `http://localhost:3000`。我们将在[*第5章*](B17416_05_ePub.xhtml#_idTextAnchor109)，*使用Vue.js管理列表*中构建的Vue.js应用程序现在将显示出来。按钮点击也将开始工作。
- en: The only difference is that our Vue.js application runs on a Node.js server
    instead of running on another application server like in [*Chapter 5*](B17416_05_ePub.xhtml#_idTextAnchor109),
    *Managing a List with Vue.js*.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的区别是，我们的Vue.js应用程序运行在Node.js服务器上，而不是像在[*第5章*](B17416_05_ePub.xhtml#_idTextAnchor109)，*使用Vue.js管理列表*中那样运行在其他应用程序服务器上。
- en: '![Figure 9.9 – Application running on a Node.js server'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.9 – 在Node.js服务器上运行的应用程序'
- en: '](img/Figure_9.09_B17416.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.09_B17416.jpg)'
- en: Figure 9.9 – Application running on a Node.js server
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.9 – 在Node.js服务器上运行的应用程序
- en: However, if the page displayed is refreshed, the list previously displayed is
    deleted because there is currently no persistence of the information displayed
    in the database.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果显示的页面被刷新，之前显示的列表将被删除，因为目前数据库中显示的信息没有持久化。
- en: We will now see how our application can interact with the Node.js server and
    the MongoDB database.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看到我们的应用程序如何与Node.js服务器和MongoDB数据库交互。
- en: MongoDB database structure
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MongoDB数据库结构
- en: To build our application, we will have to perform data reads and updates on
    the server in the database. For example, each click on the `elements` collection.
    Indeed, each document of the `elements` collection will represent the text of
    the element displayed in the list on the screen.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建我们的应用程序，我们将在数据库服务器上执行数据读取和更新。例如，每次点击`elements`集合。实际上，`elements`集合中的每个文档都将代表屏幕上列表中显示的元素文本。
- en: Note
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To access the MongoDB database, you start by installing the mongoose module
    (see the previous chapter), which allows you to manipulate database documents
    in JavaScript.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问MongoDB数据库，你首先需要安装mongoose模块（见上一章），这允许你在JavaScript中操作数据库文档。
- en: To do this, type the `npm install mongoose` command (from the main directory,
    `list`, of the Express application).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行此操作，请在Express应用程序的主目录（`list`目录）中输入`npm install mongoose`命令。
- en: The `elements` collection will be the one that will store the list items in
    MongoDB. A document in the `elements` collection will consist of its text associated
    with the `text` property. Each document will also have the `_id` property, whose
    unique value is assigned by MongoDB for each document inserted into the collection.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`elements`集合将用于在MongoDB中存储列表项。`elements`集合中的一个文档将包含与其`text`属性关联的文本。每个文档还将有一个`_id`属性，MongoDB将为每个插入集合的文档分配一个唯一的值。'
- en: Note
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The structure of the database is described using the `listSchema` schema, which
    will be associated with the `List` model used to create the documents of the `elements`
    collection.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库的结构使用`listSchema`模式描述，该模式将与用于创建`elements`集合文档的`List`模型相关联。
- en: 'Express’s `app.js` file is modified to include these definitions:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: Express的`app.js`文件被修改以包含这些定义：
- en: Adding List model to use MongoDB’s elements collection (app.js file)
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 将List模型添加到使用MongoDB的元素集合（app.js文件）
- en: '[PRE100]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: The `app.js` file will then be enriched to define the new routes that will update
    the database. These routes will be created by using the `app.use()` method (as
    explained in [*Chapter 7*](B17416_07_ePub.xhtml#_idTextAnchor138), *Using Express
    with Node.js*). The creation of these routes will be described in the following
    sections.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 然后`app.js`文件将被丰富以定义将更新数据库的新路由。这些路由将通过使用`app.use()`方法（如在第7章[*章7*](B17416_07_ePub.xhtml#_idTextAnchor138)，*使用Node.js中的Express*）中解释的那样创建。以下各节将描述这些路由的创建。
- en: Note
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Thanks to the `List` model that we have created, we will have access to the
    methods `List.create()`, `List.find()`, and so on for manipulating documents in
    the `elements` collection of the MongoDB database.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了我们创建的`List`模型，我们将能够访问`List.create()`、`List.find()`等方法，以操作MongoDB数据库的`elements`集合中的文档。
- en: To create interactions between the client (here, the browser) and the server
    (here, the Node.js server) in order to update the database containing the list
    of elements, we use the **Axios JavaScript library** here.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在客户端（这里指浏览器）和服务器（这里指Node.js服务器）之间创建交互，以便更新包含元素列表的数据库，我们在这里使用**Axios JavaScript库**。
- en: Installing the Axios library
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Axios库
- en: We see that, for now, we can manipulate the list items displayed on the HTML
    page, but we cannot yet update them in the database on the server.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，目前我们可以操作在HTML页面上显示的列表项，但我们还不能在服务器上的数据库中更新它们。
- en: For this, the Vue.js program must be able to communicate with the Node.js server.
    This is possible using a JavaScript library such as Axios (see [https://github.com/axios/axios](https://github.com/axios/axios)).
    All you have to do is include the library in the HTML page (here, it will be in
    the `index.html` file) in order to be able to use its features.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，Vue.js程序必须能够与Node.js服务器通信。这可以通过使用Axios（见[https://github.com/axios/axios](https://github.com/axios/axios)）这样的JavaScript库来实现。你所要做的就是将库包含在HTML页面中（这里将在`index.html`文件中），以便能够使用其功能。
- en: Note
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The Axios library is a library allowing communication between a browser and
    a server using **Ajax technology**. This technology allows a browser and a server
    to exchange information while remaining on the same HTML page, which is what we
    want here. This is called a **single-page application** (**SPA**) (when the application
    consists of a single HTML page).
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: Axios库是一个允许浏览器和服务器使用**Ajax技术**进行通信的库。这项技术允许浏览器和服务器在保持同一HTML页面的情况下交换信息，这正是我们在这里想要的。这被称为**单页应用**（SPA）（当应用由单个HTML页面组成时）。
- en: 'Let’s include the Axios library in the `index.html` file (using the `<script>`
    tag), and display the value of the `axios.VERSION` variable, which contains the
    version number of the library. This verifies that the Axios library is accessible:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`index.html`文件中包含Axios库（使用`<script>`标签），并显示`axios.VERSION`变量的值，该变量包含库的版本号。这验证了Axios库是可以访问的：
- en: Including Axios library and displaying version number (index.html file)
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 包含Axios库并显示版本号（index.html文件）
- en: '[PRE143]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: We simply added in the `index.html` file the Axios library (using the `<script>`
    tag) and the instruction to display the version number of the Axios library in
    the console, which allows us to check that the Axios library is accessible afterward.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 我们简单地在`index.html`文件中添加了Axios库（使用`<script>`标签）和显示Axios库版本号的指令，这允许我们在之后检查Axios库是否可访问。
- en: Let’s display the page again in the browser (with the URL `http://localhost:3000`).
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在浏览器中再次显示页面（使用URL `http://localhost:3000`）。
- en: 'We get a message in the console indicating the version number of Axios used
    (see the following figure), thus showing that we have access to the functionalities
    of the Axios library:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在控制台中收到一条消息，指示使用的 Axios 版本号（见下图），从而表明我们有权访问 Axios 库的功能：
- en: '![Figure 9.10 – Displaying the Axios version number'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.10 – 显示 Axios 版本号'
- en: '](img/Figure_9.10_B17416.jpg)'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.10_B17416.jpg)'
- en: Figure 9.10 – Displaying the Axios version number
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.10 – 显示 Axios 版本号
- en: Now let’s see how to use Axios to interact with the server and update the database
    documents.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何使用 Axios 与服务器交互并更新数据库文档。
- en: The goal is, of course, to make maximum use of the Vue.js code that we have
    already written by modifying it to use the Axios library and thus perform communication
    with the Node.js server.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 目标当然是，当然，通过修改我们已编写的 Vue.js 代码以使用 Axios 库，从而与 Node.js 服务器进行通信，最大限度地利用我们已有的 Vue.js
    代码。
- en: 'Subsequently, we will therefore modify the following files (in addition to
    the `index.html` file previously modified to include the Axios library):'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将修改以下文件（除了之前修改的 `index.html` 文件以包含 Axios 库之外）：
- en: The `global-app.js` file, to make calls to the Axios library
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于调用 Axios 库的 `global-app.js` 文件
- en: The `element.js` file, to adapt it to the structure of the database
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于将 `element.js` 文件适配到数据库结构的文件
- en: The `app.js` file (created by Express), to perform database queries
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于执行数据库查询的 `app.js` 文件
- en: We have seen how to install and use Axios in our program. Now let’s see how
    to use it to insert an element into the database.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何在程序中安装和使用 Axios。现在让我们看看如何使用它将元素插入到数据库中。
- en: Inserting a new element in the list
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在列表中插入新元素
- en: Let’s see how to store a new element in the list, following a click on the **Add
    Element** button.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何通过点击**添加元素**按钮将新元素存储到列表中。
- en: The text associated with this element must be transmitted to the server, which
    will be of the form **Element X**. We will see later how to modify this text after
    clicking on the **Modify** button.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 与此元素相关的文本必须以**元素 X**的形式传输到服务器。我们将在稍后看到如何在点击**修改**按钮后修改此文本。
- en: The `add()` method defined in the `<GlobalApp>` component is used to insert
    a new element into the displayed list. It will be necessary to add instructions
    that use the Axios library in order to also insert this new element in the MongoDB
    `elements` collection.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `<GlobalApp>` 组件中定义的 `add()` 方法用于将新元素插入到显示的列表中。将需要添加使用 Axios 库的指令，以便也将此新元素插入到
    MongoDB 的 `elements` 集合中。
- en: Before starting to use Axios, it is useful to slightly modify the JavaScript
    program written with Vue.js. To do this, we will use a new attribute when creating
    the `<Element>` component, replacing the `text` and `index` attributes with the
    `element` attribute.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用 Axios 之前，修改使用 Vue.js 编写的 JavaScript 程序是有用的。为此，我们将使用在创建 `<Element>` 组件时的新属性，用
    `element` 属性替换 `text` 和 `index` 属性。
- en: Replacing the text and index attributes with the element attribute
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将文本和索引属性替换为元素属性
- en: When creating an element, we currently use the element’s text and index, which
    are then used in the `<Element>` component, to display it (with its text) or to
    modify or delete it (with its index).
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建元素时，我们目前使用元素的文本和索引，然后它们在 `<Element>` 组件中使用，以显示它（及其文本）或修改或删除它（使用其索引）。
- en: The use of the index to identify the element in the list displayed on the screen
    was relevant before, but this is no longer the case if we want to modify or delete
    the element in the database. This is because the documents of a MongoDB collection
    are not identified by their index but rather by their identifier `_id`.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在屏幕上显示的列表中通过索引识别元素在之前是有意义的，但如果我们想修改或删除数据库中的元素，这就不再适用了。这是因为 MongoDB 集合的文档不是通过它们的索引来识别的，而是通过它们的标识符
    `_id`。
- en: Rather than passing the `text` and `index` parameters in the `<Element>` component,
    we simplify by passing only the `element` parameter, which is a `{ text, _id }`
    object. The `element.text` field allows you to retrieve the text to be displayed,
    while the `element._id` field allows you to access the unique identifier of the
    element (such as the index, which was unique for each element).
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不是在 `<Element>` 组件中传递 `text` 和 `index` 参数，而是通过只传递 `element` 参数来简化，该参数是一个 `{
    text, _id }` 对象。`element.text` 字段允许您检索要显示的文本，而 `element._id` 字段允许您访问元素的唯一标识符（例如索引，每个元素都是唯一的）。
- en: We modify the `global-app.js` and `element.js` files to take this into account.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 我们修改 `global-app.js` 和 `element.js` 文件以考虑这一点。
- en: 'These files are modified below but will be modified again to take into account
    the connection with the database:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件以下将进行修改，但将再次修改以考虑与数据库的连接：
- en: global-app.js file
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: global-app.js 文件
- en: '[PRE174]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: 'The following remarks can be made about the preceding code:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 关于前面的代码，可以做出以下说明：
- en: The reactive `elements` variable now becomes an array of `{ text, _id }` objects.
    To do this, we write in the `add()` method the instruction `this.elements.push({text:text,
    _id:this.elements.length})` by inserting an object of the form `{text, _id}` into
    the `elements` array.
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在的 `elements` 变量现在变成了一个 `{ text, _id }` 对象的数组。为此，我们在 `add()` 方法中写入指令 `this.elements.push({text:text,
    _id:this.elements.length})`，通过将一个 `{text, _id}` 形式的对象插入到 `elements` 数组中来实现。
- en: 'The value of the `_id` property is temporary here: in fact, you must then retrieve
    the identifier provided by MongoDB when the document has been saved in the database.'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_id` 属性的值在这里是临时的：实际上，你必须检索 MongoDB 在文档保存到数据库时提供的标识符。'
- en: Each `<Element>` component is constructed (in the template) by passing it an
    `element` attribute that represents a `{ text, _id }` object.
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个 `<Element>` 组件是通过传递一个表示 `{ text, _id }` 对象的 `element` 属性来构建的（在模板中）。
- en: The `remove()` method must remove from the list the element having the passed
    identifier. To do this, we use the JavaScript `filter()` method to keep all the
    elements except the one with this identifier.
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`remove()` 方法必须从列表中删除具有传递的标识符的元素。为此，我们使用 JavaScript 的 `filter()` 方法来保留除具有此标识符的元素之外的所有元素。'
- en: Similarly, the `modify()` method must modify the value of the element of the
    list having this identifier. We use the JavaScript `map()` method to return a
    new array of elements, for which the element with this identifier has its value
    modified.
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同样，`modify()` 方法必须修改具有此标识符的列表元素的值。我们使用 JavaScript 的 `map()` 方法来返回一个新元素数组，其中具有此标识符的元素值被修改。
- en: 'The `element.js` file becomes the following:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '`element.js` 文件变为以下内容：'
- en: element.js file
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: element.js 文件
- en: '[PRE228]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '[PRE238]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '[PRE239]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '[PRE241]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: '[PRE242]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '[PRE244]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '[PRE254]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '[PRE255]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '[PRE257]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '[PRE262]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: '[PRE263]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '[PRE264]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: As the attribute transmitted for the creation of the `<Element>` component is
    named `element` and corresponds to an object `{ text, _id }`, we use `element.text`
    and `element._id` to display the text and use the identifier of the element (instead
    of the index).
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 由于用于创建 `<Element>` 组件的属性名为 `element`，并且对应于一个 `{ text, _id }` 对象，我们使用 `element.text`
    和 `element._id` 来显示文本并使用元素的标识符（而不是索引）。
- en: You can check that the program still works, even if the connection with the
    server for insertion into the database has not yet been made.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以检查程序仍然可以工作，即使尚未建立与服务器建立数据库插入的连接。
- en: Note
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We have modified the code of the Vue.js program in order to adapt it to the
    use of the MongoDB database.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经修改了 Vue.js 程序的代码，以便适应 MongoDB 数据库的使用。
- en: Let’s now explain how the Axios library will allow the client and the server
    to communicate with each other, in order to update the MongoDB database.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来解释 Axios 库如何允许客户端和服务器相互通信，以便更新 MongoDB 数据库。
- en: Description of the Axios library for communicating between the client and the
    server
  id: totrans-410
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Axios 库在客户端和服务器之间通信的描述
- en: Now let’s use Axios to insert the element into the database.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们使用 Axios 将元素插入到数据库中。
- en: 'Axios offers four main methods for communicating between the browser and the
    server, with the JavaScript language. The server we are using here is a Node.js
    server, but Axios allows you to interact with any type of server. The four methods
    are those related to the types of HTTP requests one can make: `GET`, `POST`, `PUT`,
    and `DELETE`:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: Axios 提供了四种主要方法用于在浏览器和服务器之间进行通信，使用 JavaScript 语言。我们在这里使用的是 Node.js 服务器，但 Axios
    允许你与任何类型的服务器交互。这四种方法是与可以执行的 HTTP 请求类型相关的：`GET`、`POST`、`PUT` 和 `DELETE`：
- en: '`axios.get(url, options)`: This allows you to perform a `GET` type request.'
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`axios.get(url, options)`: 这允许你执行一个 `GET` 类型的请求。'
- en: '`axios.post(url, options)`: This allows you to perform a `POST` type request.'
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`axios.post(url, options)`: 这允许你执行一个 `POST` 类型的请求。'
- en: '`axios.put(url, options)`: This allows you to perform a `PUT` type request.'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`axios.put(url, options)`: 这允许你执行一个 `PUT` 类型的请求。'
- en: '`axios.delete(url, options)`: This allows you to perform a `DELETE` type request.'
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`axios.delete(url, options)`: 这允许你执行一个 `DELETE` 类型的请求。'
- en: The `options` parameter allows you to specify additional parameters that will
    allow the server to perform its processing. For example, in the case of our application,
    we will indicate in this parameter the text of the list element that we want to
    store in the database.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '`options` 参数允许你指定将允许服务器执行其处理的附加参数。例如，在我们的应用程序中，我们将在此参数中指示我们想要存储在数据库中的列表元素文本。'
- en: Note
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: All these methods return a `Promise` object, which then allows you to continue
    with the `then(callback)` method. The `callback(response)` function is used to
    retrieve and analyze the server’s response following the request being made.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些方法都返回一个 `Promise` 对象，这然后允许你使用 `then(callback)` 方法继续操作。`callback(response)`
    函数用于在请求发出后检索和分析服务器的响应。
- en: '`Promise` objects were studied at the end of [*Chapter 2*](B17416_02_ePub.xhtml#_idTextAnchor044),
    *Exploring the Advanced Concepts of JavaScript*.'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 2 章*](B17416_02_ePub.xhtml#_idTextAnchor044) 的末尾研究了 `Promise` 对象，*探索 JavaScript
    的高级概念*。
- en: In each case, we will have to process the Axios request sent on the client side
    (in the `global-app.js` file associated with the `<GlobalApp>` component), then
    take it into account on the server side (in the `app.js` file, which receives
    the queries issued by Axios).
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 在每种情况下，我们都需要处理客户端发送的 Axios 请求（在 `<GlobalApp>` 组件关联的 `global-app.js` 文件中），然后在服务器端（在接收
    Axios 发起的查询的 `app.js` 文件中）考虑它。
- en: Now let’s see how the `POST` request will allow us to insert elements into the
    database.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看 `POST` 请求如何允许我们将元素插入到数据库中。
- en: Using Axios with a POST type request (client side)
  id: totrans-423
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Axios 和 POST 类型请求（客户端）
- en: Now let’s see how to use the `axios.post()` method to insert a new element into
    the `elements` collection, following the creation of a new element in the list.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何使用 `axios.post()` 方法在列表创建新元素后将其插入到 `elements` 集合中。
- en: Note
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We are using the `POST` request here to insert the item, but other types of
    requests would work the same. However, using the `POST` request makes sense here
    because it follows the official recommendations for using **REpresentational State
    Transfer** (**REST**) requests.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用 `POST` 请求来插入项目，但其他类型的请求也会按相同方式工作。然而，使用 `POST` 请求在这里是有意义的，因为它遵循使用 **REpresentational
    State Transfer** (**REST**) 请求的官方建议。
- en: 'Although only a few lines are added to each file, the full code is shown below
    each time, so you can see where the changes are located:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然每个文件只添加了几行，但每次都会在下面显示完整的代码，这样你可以看到更改的位置：
- en: Adding a new element in the database, client side (global-app.js file)
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据库中添加新元素（客户端 global-app.js 文件）
- en: '[PRE265]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '[PRE267]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '[PRE269]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '[PRE272]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '[PRE274]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '[PRE276]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '[PRE277]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: '[PRE278]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '[PRE280]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '[PRE281]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: '[PRE282]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '[PRE283]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: '[PRE284]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '[PRE285]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: '[PRE286]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '[PRE287]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '[PRE288]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '[PRE289]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '[PRE290]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '[PRE291]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '[PRE292]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '[PRE293]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[PRE294]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '[PRE297]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '[PRE298]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '[PRE300]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: '[PRE301]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: '[PRE302]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '[PRE303]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: '[PRE304]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '[PRE305]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '[PRE306]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '[PRE307]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '[PRE308]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: '[PRE309]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: '[PRE310]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: '[PRE311]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '[PRE312]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '[PRE313]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: '[PRE314]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '[PRE315]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: '[PRE316]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: '[PRE317]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: '[PRE318]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '[PRE319]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: '[PRE320]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: '[PRE321]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: The `axios.post("/list", {text:text})` method activates the `/list` URL on the
    server, using a `POST` type request. The `text` parameter is passed to the server
    so that it stores it in the `elements` collection.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: '`axios.post("/list", {text:text})` 方法激活服务器上的 `/list` URL，使用 `POST` 类型的请求。`text`
    参数传递给服务器，以便将其存储在 `elements` 集合中。'
- en: In return for the call to the server, the latter returns a `response` object
    containing in `data.id` the identifier of the document created in MongoDB. This
    identifier and the element text are then stored in the `elements` array. Because
    the `elements` array is a reactive variable of Vue.js, its update causes the list
    to be re-displayed in the browser.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 作为对服务器调用的回报，服务器返回一个包含在 `data.id` 中的文档标识符的 `response` 对象。然后，该标识符和元素文本存储在 `elements`
    数组中。因为 `elements` 数组是 Vue.js 的响应式变量，其更新会导致列表在浏览器中重新显示。
- en: Note
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Notice how the callback function is written in the `then(callback)` method.
    We use the form with `=>` (that is without using the `function` keyword) in order
    to preserve the value of `this` in the callback function. If you use the `function`
    keyword instead, the value of `this` is `undefined` and you can no longer access
    the `elements` variable through `this.elements`, which will cause an error.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在 `then(callback)` 方法中编写的回调函数。我们使用 `=>` 形式（即不使用 `function` 关键字）来保留回调函数中的 `this`
    值。如果你使用 `function` 关键字，则 `this` 的值将是 `undefined`，你将无法通过 `this.elements` 访问 `elements`
    变量，这会导致错误。
- en: The `POST` request was issued by the client (the browser), so it must now be
    processed by the server to insert a new element into the collection. Let’s study
    how to proceed.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: '`POST` 请求是由客户端（浏览器）发出的，因此现在必须由服务器处理，以便将新元素插入到集合中。让我们研究如何进行。'
- en: POST type request processing (server side)
  id: totrans-491
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: POST 类型请求处理（服务器端）
- en: 'Now let’s see how the server handles the receipt of the `POST` request. It
    must create a new document in the `elements` collection of the database. The server’s
    `app.js` file is modified to take into account the `POST` request on the `/list`
    URL:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看服务器如何处理接收到的`POST`请求。它必须在数据库的`elements`集合中创建一个新的文档。服务器的`app.js`文件被修改以考虑`/list`
    URL上的`POST`请求：
- en: Adding a new element in the database, server side (app.js file)
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据库中添加新元素（服务器端app.js文件）
- en: '[PRE322]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE322]'
- en: '[PRE323]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: '[PRE324]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE324]'
- en: '[PRE325]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE325]'
- en: '[PRE326]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: '[PRE327]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: '[PRE328]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE328]'
- en: '[PRE329]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE329]'
- en: '[PRE330]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE330]'
- en: '[PRE331]'
  id: totrans-503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE331]'
- en: '[PRE332]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE332]'
- en: '[PRE333]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE333]'
- en: '[PRE334]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE334]'
- en: '[PRE335]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE335]'
- en: '[PRE336]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE336]'
- en: '[PRE337]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE337]'
- en: '[PRE338]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE338]'
- en: '[PRE339]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE339]'
- en: '[PRE340]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE340]'
- en: '[PRE341]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE341]'
- en: '[PRE342]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE342]'
- en: '[PRE343]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE343]'
- en: '[PRE344]'
  id: totrans-516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE344]'
- en: '[PRE345]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE345]'
- en: '[PRE346]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE346]'
- en: '[PRE347]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE347]'
- en: '[PRE348]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE348]'
- en: '[PRE349]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE349]'
- en: '[PRE350]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE350]'
- en: '[PRE351]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE351]'
- en: '[PRE352]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE352]'
- en: '[PRE353]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE353]'
- en: '[PRE354]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE354]'
- en: '[PRE355]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE355]'
- en: '[PRE356]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE356]'
- en: '[PRE357]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE357]'
- en: '[PRE358]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE358]'
- en: '[PRE359]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE359]'
- en: '[PRE360]'
  id: totrans-532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE360]'
- en: '[PRE361]'
  id: totrans-533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE361]'
- en: '[PRE362]'
  id: totrans-534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE362]'
- en: '[PRE363]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE363]'
- en: '[PRE364]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE364]'
- en: '[PRE365]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE365]'
- en: '[PRE366]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE366]'
- en: '[PRE367]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE367]'
- en: '[PRE368]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE368]'
- en: The `app.post("/list", callback)` method is used to receive and process the
    request to insert the new element into the `elements` collection.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`app.post("/list", callback)`方法接收并处理插入新元素到`elements`集合的请求。
- en: The text sent in the Axios `text` parameter is received on the server in the
    `req.body.text` variable. The update of the `elements` collection is performed
    by the `List.create()` class method, to which we pass the `text` parameter. In
    the callback function associated with the `create()` method, we retrieve the identifier
    of the document created in `doc._id`.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: Axios `text`参数中发送的文本在服务器上接收在`req.body.text`变量中。通过`List.create()`类方法更新`elements`集合，我们传递`text`参数。在`create()`方法相关的回调函数中，我们检索创建的文档的标识符`doc._id`。
- en: 'We return this identifier in the response sent to the browser as a JSON object
    `{ id : doc._id }`. We use the `res.json()` method for this. This server return
    is processed in the `then(callback)` method when calling the `axios.post()` method
    previously seen (the `global-app.js` file).'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: '我们将此标识符作为JSON对象`{ id : doc._id }`返回给浏览器。我们使用`res.json()`方法进行此操作。此服务器返回在调用先前看到的`axios.post()`方法（`global-app.js`文件）时的`then(callback)`方法中处理。'
- en: If you run the preceding program, you’ll see that the lines containing **Element
    X** are inserted one under the other on the page. But nothing says that the database
    has been updated. Let’s verify the correct insertion using the tools available
    in MongoDB.
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行前面的程序，你会看到包含**元素X**的行在页面上依次插入。但没有任何说明表明数据库已被更新。让我们使用MongoDB中可用的工具来验证正确的插入操作。
- en: Verifying the correct operation of the insertion in the database
  id: totrans-545
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证数据库中插入操作的正确性
- en: To verify the insertion in the database, just use the `mongo` utility, then
    type the command `db.elements.find()` to see the inserted documents displayed
    (assuming we have already connected the `mydb_test` database with the `db=connect("mydb_test")`
    command).
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证数据库中的插入操作，只需使用`mongo`实用程序，然后输入命令`db.elements.find()`以查看显示的插入文档（假设我们已使用命令`db=connect("mydb_test")`连接了`mydb_test`数据库）。
- en: 'Assuming that three list items have been inserted, we get the following:'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 假设已插入三个列表项，我们得到以下结果：
- en: '![Figure 9.11 – Using the mongo utility to view the contents of the elements
    collection'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.11 – 使用mongo实用程序查看元素集合的内容'
- en: '](img/Figure_9.11_B17416.jpg)'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.11_B17416.jpg)'
- en: Figure 9.11 – Using the mongo utility to view the contents of the elements collection
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.11 – 使用mongo实用程序查看元素集合的内容
- en: The next step is to retrieve the information stored in the database to display
    the items in the list. The list should be viewed when the page is displayed at
    the start and will be updated as insertions, modifications, or deletions are made.
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是检索数据库中存储的信息以显示列表项。列表应在页面首次显示时查看，并在插入、修改或删除操作时更新。
- en: Displaying list elements
  id: totrans-552
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示列表元素
- en: In this section, we deal with the first display of the page. Insertion has been
    seen previously, and modification and deletion are covered in the following sections.
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们处理页面的首次显示。插入操作已在前面介绍，修改和删除操作将在以下章节中介绍。
- en: Note
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To display the list when the application starts, you must use the `created()`
    method or the `mounted()` method of the component, which are called in each Vue.js
    component when the component is created.
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 要在应用程序启动时显示列表，你必须使用组件的`created()`方法或`mounted()`方法，这些方法在Vue.js组件创建时被调用。
- en: To retrieve the list of elements, we are going to use an HTTP `GET` request.
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 要检索元素列表，我们将使用HTTP `GET`请求。
- en: Using Axios with a GET type request (client side)
  id: totrans-557
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Axios进行GET类型请求（客户端）
- en: 'Here, we are going to make a `GET` type request with the `/list` URL to the
    server. The `axios.get("/list")` instruction is used to perform this request.
    We can use this instruction in the `created()` or `mounted()` method. Here, we
    choose to use it in the `created()` method:'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们将向服务器发送一个带有`/list` URL的`GET`类型请求。使用`axios.get("/list")`指令执行此请求。我们可以在`created()`或`mounted()`方法中使用此指令。这里，我们选择在`created()`方法中使用它：
- en: Retrieving list of items, client side (global-app.js file)
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 获取项目列表，客户端（global-app.js 文件）
- en: '[PRE369]'
  id: totrans-560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE369]'
- en: '[PRE370]'
  id: totrans-561
  prefs: []
  type: TYPE_PRE
  zh: '[PRE370]'
- en: '[PRE371]'
  id: totrans-562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE371]'
- en: '[PRE372]'
  id: totrans-563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE372]'
- en: '[PRE373]'
  id: totrans-564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE373]'
- en: '[PRE374]'
  id: totrans-565
  prefs: []
  type: TYPE_PRE
  zh: '[PRE374]'
- en: '[PRE375]'
  id: totrans-566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE375]'
- en: '[PRE376]'
  id: totrans-567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE376]'
- en: '[PRE377]'
  id: totrans-568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE377]'
- en: '[PRE378]'
  id: totrans-569
  prefs: []
  type: TYPE_PRE
  zh: '[PRE378]'
- en: '[PRE379]'
  id: totrans-570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE379]'
- en: '[PRE380]'
  id: totrans-571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE380]'
- en: '[PRE381]'
  id: totrans-572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE381]'
- en: '[PRE382]'
  id: totrans-573
  prefs: []
  type: TYPE_PRE
  zh: '[PRE382]'
- en: '[PRE383]'
  id: totrans-574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE383]'
- en: '[PRE384]'
  id: totrans-575
  prefs: []
  type: TYPE_PRE
  zh: '[PRE384]'
- en: '[PRE385]'
  id: totrans-576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE385]'
- en: '[PRE386]'
  id: totrans-577
  prefs: []
  type: TYPE_PRE
  zh: '[PRE386]'
- en: '[PRE387]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE387]'
- en: '[PRE388]'
  id: totrans-579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE388]'
- en: '[PRE389]'
  id: totrans-580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE389]'
- en: '[PRE390]'
  id: totrans-581
  prefs: []
  type: TYPE_PRE
  zh: '[PRE390]'
- en: '[PRE391]'
  id: totrans-582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE391]'
- en: '[PRE392]'
  id: totrans-583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE392]'
- en: '[PRE393]'
  id: totrans-584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE393]'
- en: '[PRE394]'
  id: totrans-585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE394]'
- en: '[PRE395]'
  id: totrans-586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE395]'
- en: '[PRE396]'
  id: totrans-587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE396]'
- en: '[PRE397]'
  id: totrans-588
  prefs: []
  type: TYPE_PRE
  zh: '[PRE397]'
- en: '[PRE398]'
  id: totrans-589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE398]'
- en: '[PRE399]'
  id: totrans-590
  prefs: []
  type: TYPE_PRE
  zh: '[PRE399]'
- en: '[PRE400]'
  id: totrans-591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE400]'
- en: '[PRE401]'
  id: totrans-592
  prefs: []
  type: TYPE_PRE
  zh: '[PRE401]'
- en: '[PRE402]'
  id: totrans-593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE402]'
- en: '[PRE403]'
  id: totrans-594
  prefs: []
  type: TYPE_PRE
  zh: '[PRE403]'
- en: '[PRE404]'
  id: totrans-595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE404]'
- en: '[PRE405]'
  id: totrans-596
  prefs: []
  type: TYPE_PRE
  zh: '[PRE405]'
- en: '[PRE406]'
  id: totrans-597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE406]'
- en: '[PRE407]'
  id: totrans-598
  prefs: []
  type: TYPE_PRE
  zh: '[PRE407]'
- en: '[PRE408]'
  id: totrans-599
  prefs: []
  type: TYPE_PRE
  zh: '[PRE408]'
- en: '[PRE409]'
  id: totrans-600
  prefs: []
  type: TYPE_PRE
  zh: '[PRE409]'
- en: '[PRE410]'
  id: totrans-601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE410]'
- en: '[PRE411]'
  id: totrans-602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE411]'
- en: '[PRE412]'
  id: totrans-603
  prefs: []
  type: TYPE_PRE
  zh: '[PRE412]'
- en: '[PRE413]'
  id: totrans-604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE413]'
- en: '[PRE414]'
  id: totrans-605
  prefs: []
  type: TYPE_PRE
  zh: '[PRE414]'
- en: '[PRE415]'
  id: totrans-606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE415]'
- en: '[PRE416]'
  id: totrans-607
  prefs: []
  type: TYPE_PRE
  zh: '[PRE416]'
- en: '[PRE417]'
  id: totrans-608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE417]'
- en: '[PRE418]'
  id: totrans-609
  prefs: []
  type: TYPE_PRE
  zh: '[PRE418]'
- en: '[PRE419]'
  id: totrans-610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE419]'
- en: '[PRE420]'
  id: totrans-611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE420]'
- en: '[PRE421]'
  id: totrans-612
  prefs: []
  type: TYPE_PRE
  zh: '[PRE421]'
- en: '[PRE422]'
  id: totrans-613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE422]'
- en: '[PRE423]'
  id: totrans-614
  prefs: []
  type: TYPE_PRE
  zh: '[PRE423]'
- en: '[PRE424]'
  id: totrans-615
  prefs: []
  type: TYPE_PRE
  zh: '[PRE424]'
- en: '[PRE425]'
  id: totrans-616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE425]'
- en: '[PRE426]'
  id: totrans-617
  prefs: []
  type: TYPE_PRE
  zh: '[PRE426]'
- en: '[PRE427]'
  id: totrans-618
  prefs: []
  type: TYPE_PRE
  zh: '[PRE427]'
- en: '[PRE428]'
  id: totrans-619
  prefs: []
  type: TYPE_PRE
  zh: '[PRE428]'
- en: '[PRE429]'
  id: totrans-620
  prefs: []
  type: TYPE_PRE
  zh: '[PRE429]'
- en: '[PRE430]'
  id: totrans-621
  prefs: []
  type: TYPE_PRE
  zh: '[PRE430]'
- en: '[PRE431]'
  id: totrans-622
  prefs: []
  type: TYPE_PRE
  zh: '[PRE431]'
- en: '[PRE432]'
  id: totrans-623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE432]'
- en: '[PRE433]'
  id: totrans-624
  prefs: []
  type: TYPE_PRE
  zh: '[PRE433]'
- en: The `axios.get("/list")` method makes the request to the server, then processes
    the response received in the `then(callback)` method. As before, the received
    `response` object contains the `data` property, which contains the response returned
    by the server (the `elements` field – see below).
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: '`axios.get("/list")` 方法向服务器发送请求，然后在 `then(callback)` 方法中处理接收到的响应。和之前一样，接收到的
    `response` 对象包含 `data` 属性，其中包含服务器返回的数据（`elements` 字段 – 见下文）。'
- en: As the server sends all the document fields of the `elements` collection, we
    filter the list received by the `map()` method in order to keep only the `_id`
    and `text` fields (we thus remove the `__v` field associated with the version
    number, which is unnecessary here).
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 由于服务器发送了 `elements` 集合的所有文档字段，我们通过 `map()` 方法过滤接收到的列表，以仅保留 `_id` 和 `text` 字段（我们因此删除了与版本号相关的
    `__v` 字段，这在这里是不必要的）。
- en: Now let’s see how to process the `GET` request on the Node.js server side.
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看如何在 Node.js 服务器端处理 `GET` 请求。
- en: GET type request processing (server side)
  id: totrans-628
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GET 类型请求处理（服务器端）
- en: 'The `GET` `/list` request is received by the Node.js server through the `app.get("/list")`
    method defined in the `app.js` file. The processing will consist of reading the
    content of the `elements` collection and returning it in JSON form to the browser
    in the `elements` property. Each item in the returned collection has `_id`, `text`,
    and `__v` (for the version number of the document) fields:'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: '`GET` `/list` 请求通过在 `app.js` 文件中定义的 `app.get("/list")` 方法被 Node.js 服务器接收。处理将包括读取
    `elements` 集合的内容，并以 JSON 形式将其返回到浏览器的 `elements` 属性中。返回集合中的每个项目都有 `_id`、`text`
    和 `__v`（文档的版本号）字段：'
- en: Retrieving list of items, server side (app.js file)
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 获取项目列表，服务器端（app.js 文件）
- en: '[PRE434]'
  id: totrans-631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE434]'
- en: '[PRE435]'
  id: totrans-632
  prefs: []
  type: TYPE_PRE
  zh: '[PRE435]'
- en: '[PRE436]'
  id: totrans-633
  prefs: []
  type: TYPE_PRE
  zh: '[PRE436]'
- en: '[PRE437]'
  id: totrans-634
  prefs: []
  type: TYPE_PRE
  zh: '[PRE437]'
- en: '[PRE438]'
  id: totrans-635
  prefs: []
  type: TYPE_PRE
  zh: '[PRE438]'
- en: '[PRE439]'
  id: totrans-636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE439]'
- en: '[PRE440]'
  id: totrans-637
  prefs: []
  type: TYPE_PRE
  zh: '[PRE440]'
- en: '[PRE441]'
  id: totrans-638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE441]'
- en: '[PRE442]'
  id: totrans-639
  prefs: []
  type: TYPE_PRE
  zh: '[PRE442]'
- en: '[PRE443]'
  id: totrans-640
  prefs: []
  type: TYPE_PRE
  zh: '[PRE443]'
- en: '[PRE444]'
  id: totrans-641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE444]'
- en: '[PRE445]'
  id: totrans-642
  prefs: []
  type: TYPE_PRE
  zh: '[PRE445]'
- en: '[PRE446]'
  id: totrans-643
  prefs: []
  type: TYPE_PRE
  zh: '[PRE446]'
- en: '[PRE447]'
  id: totrans-644
  prefs: []
  type: TYPE_PRE
  zh: '[PRE447]'
- en: '[PRE448]'
  id: totrans-645
  prefs: []
  type: TYPE_PRE
  zh: '[PRE448]'
- en: '[PRE449]'
  id: totrans-646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE449]'
- en: '[PRE450]'
  id: totrans-647
  prefs: []
  type: TYPE_PRE
  zh: '[PRE450]'
- en: '[PRE451]'
  id: totrans-648
  prefs: []
  type: TYPE_PRE
  zh: '[PRE451]'
- en: '[PRE452]'
  id: totrans-649
  prefs: []
  type: TYPE_PRE
  zh: '[PRE452]'
- en: '[PRE453]'
  id: totrans-650
  prefs: []
  type: TYPE_PRE
  zh: '[PRE453]'
- en: '[PRE454]'
  id: totrans-651
  prefs: []
  type: TYPE_PRE
  zh: '[PRE454]'
- en: '[PRE455]'
  id: totrans-652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE455]'
- en: '[PRE456]'
  id: totrans-653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE456]'
- en: '[PRE457]'
  id: totrans-654
  prefs: []
  type: TYPE_PRE
  zh: '[PRE457]'
- en: '[PRE458]'
  id: totrans-655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE458]'
- en: '[PRE459]'
  id: totrans-656
  prefs: []
  type: TYPE_PRE
  zh: '[PRE459]'
- en: '[PRE460]'
  id: totrans-657
  prefs: []
  type: TYPE_PRE
  zh: '[PRE460]'
- en: '[PRE461]'
  id: totrans-658
  prefs: []
  type: TYPE_PRE
  zh: '[PRE461]'
- en: '[PRE462]'
  id: totrans-659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE462]'
- en: '[PRE463]'
  id: totrans-660
  prefs: []
  type: TYPE_PRE
  zh: '[PRE463]'
- en: '[PRE464]'
  id: totrans-661
  prefs: []
  type: TYPE_PRE
  zh: '[PRE464]'
- en: '[PRE465]'
  id: totrans-662
  prefs: []
  type: TYPE_PRE
  zh: '[PRE465]'
- en: '[PRE466]'
  id: totrans-663
  prefs: []
  type: TYPE_PRE
  zh: '[PRE466]'
- en: '[PRE467]'
  id: totrans-664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE467]'
- en: '[PRE468]'
  id: totrans-665
  prefs: []
  type: TYPE_PRE
  zh: '[PRE468]'
- en: '[PRE469]'
  id: totrans-666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE469]'
- en: '[PRE470]'
  id: totrans-667
  prefs: []
  type: TYPE_PRE
  zh: '[PRE470]'
- en: '[PRE471]'
  id: totrans-668
  prefs: []
  type: TYPE_PRE
  zh: '[PRE471]'
- en: '[PRE472]'
  id: totrans-669
  prefs: []
  type: TYPE_PRE
  zh: '[PRE472]'
- en: '[PRE473]'
  id: totrans-670
  prefs: []
  type: TYPE_PRE
  zh: '[PRE473]'
- en: '[PRE474]'
  id: totrans-671
  prefs: []
  type: TYPE_PRE
  zh: '[PRE474]'
- en: '[PRE475]'
  id: totrans-672
  prefs: []
  type: TYPE_PRE
  zh: '[PRE475]'
- en: '[PRE476]'
  id: totrans-673
  prefs: []
  type: TYPE_PRE
  zh: '[PRE476]'
- en: '[PRE477]'
  id: totrans-674
  prefs: []
  type: TYPE_PRE
  zh: '[PRE477]'
- en: '[PRE478]'
  id: totrans-675
  prefs: []
  type: TYPE_PRE
  zh: '[PRE478]'
- en: '[PRE479]'
  id: totrans-676
  prefs: []
  type: TYPE_PRE
  zh: '[PRE479]'
- en: '[PRE480]'
  id: totrans-677
  prefs: []
  type: TYPE_PRE
  zh: '[PRE480]'
- en: '[PRE481]'
  id: totrans-678
  prefs: []
  type: TYPE_PRE
  zh: '[PRE481]'
- en: '[PRE482]'
  id: totrans-679
  prefs: []
  type: TYPE_PRE
  zh: '[PRE482]'
- en: '[PRE483]'
  id: totrans-680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE483]'
- en: '[PRE484]'
  id: totrans-681
  prefs: []
  type: TYPE_PRE
  zh: '[PRE484]'
- en: '[PRE485]'
  id: totrans-682
  prefs: []
  type: TYPE_PRE
  zh: '[PRE485]'
- en: '[PRE486]'
  id: totrans-683
  prefs: []
  type: TYPE_PRE
  zh: '[PRE486]'
- en: 'The `elements` collection is read using the `List.find()` class method. We
    return the `{ elements : elements }` object in response to the browser, the use
    of which we saw earlier.'
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: '使用 `List.find()` 类方法读取 `elements` 集合。我们向浏览器返回 `{ elements : elements }` 对象，我们之前已经看到了它的使用。'
- en: The list of items is now displayed each time the application is started. Just
    restart the server with `npm start`, then re-display the URL of the page, `http://localhost:3000`.
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 每次启动应用程序时都会显示项目列表。只需使用 `npm start` 重新启动服务器，然后重新显示页面 URL，`http://localhost:3000`。
- en: '![Figure 9.12 – The list of elements is displayed when the application starts'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.12 – 应用程序启动时显示元素列表'
- en: '](img/Figure_9.12_B17416.jpg)'
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.12 – 应用程序启动时显示元素列表'
- en: Figure 9.12 – The list of elements is displayed when the application starts
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.12 – 应用程序启动时显示元素列表
- en: We have seen how to insert an element and retrieve the list of elements. Next,
    let’s see how to modify an element in the list.
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何插入元素和检索元素列表。接下来，让我们看看如何修改列表中的元素。
- en: Modifying an element in the list
  id: totrans-690
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改列表中的元素
- en: Here we show how to modify an element of the list, keeping this modification
    in the database. A `PUT` type request will be used for this.
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们展示了如何修改列表中的元素，并将此修改保存在数据库中。将使用 `PUT` 类型请求来完成此操作。
- en: Using Axios with a PUT type request (client side)
  id: totrans-692
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Axios 进行 PUT 类型请求（客户端）
- en: 'The `axios.put("/list", options)` method is used to perform a `PUT` type request
    to the server. We transmit to the server in the `options` parameter the new text
    of the modified element and its identifier in the database. The identifier and
    the new text will allow the item to be updated on the server:'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `axios.put("/list", options)` 方法执行对服务器的 `PUT` 类型请求。我们在 `options` 参数中向服务器传输修改元素的新的文本及其在数据库中的标识符。标识符和新的文本将允许在服务器上更新项目：
- en: Modifying an element, client side (global-app.js file)
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 修改元素，客户端（global-app.js 文件）
- en: '[PRE487]'
  id: totrans-695
  prefs: []
  type: TYPE_PRE
  zh: '[PRE487]'
- en: '[PRE488]'
  id: totrans-696
  prefs: []
  type: TYPE_PRE
  zh: '[PRE488]'
- en: '[PRE489]'
  id: totrans-697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE489]'
- en: '[PRE490]'
  id: totrans-698
  prefs: []
  type: TYPE_PRE
  zh: '[PRE490]'
- en: '[PRE491]'
  id: totrans-699
  prefs: []
  type: TYPE_PRE
  zh: '[PRE491]'
- en: '[PRE492]'
  id: totrans-700
  prefs: []
  type: TYPE_PRE
  zh: '[PRE492]'
- en: '[PRE493]'
  id: totrans-701
  prefs: []
  type: TYPE_PRE
  zh: '[PRE493]'
- en: '[PRE494]'
  id: totrans-702
  prefs: []
  type: TYPE_PRE
  zh: '[PRE494]'
- en: '[PRE495]'
  id: totrans-703
  prefs: []
  type: TYPE_PRE
  zh: '[PRE495]'
- en: '[PRE496]'
  id: totrans-704
  prefs: []
  type: TYPE_PRE
  zh: '[PRE496]'
- en: '[PRE497]'
  id: totrans-705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE497]'
- en: '[PRE498]'
  id: totrans-706
  prefs: []
  type: TYPE_PRE
  zh: '[PRE498]'
- en: '[PRE499]'
  id: totrans-707
  prefs: []
  type: TYPE_PRE
  zh: '[PRE499]'
- en: '[PRE500]'
  id: totrans-708
  prefs: []
  type: TYPE_PRE
  zh: '[PRE500]'
- en: '[PRE501]'
  id: totrans-709
  prefs: []
  type: TYPE_PRE
  zh: '[PRE501]'
- en: '[PRE502]'
  id: totrans-710
  prefs: []
  type: TYPE_PRE
  zh: '[PRE502]'
- en: '[PRE503]'
  id: totrans-711
  prefs: []
  type: TYPE_PRE
  zh: '[PRE503]'
- en: '[PRE504]'
  id: totrans-712
  prefs: []
  type: TYPE_PRE
  zh: '[PRE504]'
- en: '[PRE505]'
  id: totrans-713
  prefs: []
  type: TYPE_PRE
  zh: '[PRE505]'
- en: '[PRE506]'
  id: totrans-714
  prefs: []
  type: TYPE_PRE
  zh: '[PRE506]'
- en: '[PRE507]'
  id: totrans-715
  prefs: []
  type: TYPE_PRE
  zh: '[PRE507]'
- en: '[PRE508]'
  id: totrans-716
  prefs: []
  type: TYPE_PRE
  zh: '[PRE508]'
- en: '[PRE509]'
  id: totrans-717
  prefs: []
  type: TYPE_PRE
  zh: '[PRE509]'
- en: '[PRE510]'
  id: totrans-718
  prefs: []
  type: TYPE_PRE
  zh: '[PRE510]'
- en: '[PRE511]'
  id: totrans-719
  prefs: []
  type: TYPE_PRE
  zh: '[PRE511]'
- en: '[PRE512]'
  id: totrans-720
  prefs: []
  type: TYPE_PRE
  zh: '[PRE512]'
- en: '[PRE513]'
  id: totrans-721
  prefs: []
  type: TYPE_PRE
  zh: '[PRE513]'
- en: '[PRE514]'
  id: totrans-722
  prefs: []
  type: TYPE_PRE
  zh: '[PRE514]'
- en: '[PRE515]'
  id: totrans-723
  prefs: []
  type: TYPE_PRE
  zh: '[PRE515]'
- en: '[PRE516]'
  id: totrans-724
  prefs: []
  type: TYPE_PRE
  zh: '[PRE516]'
- en: '[PRE517]'
  id: totrans-725
  prefs: []
  type: TYPE_PRE
  zh: '[PRE517]'
- en: '[PRE518]'
  id: totrans-726
  prefs: []
  type: TYPE_PRE
  zh: '[PRE518]'
- en: '[PRE519]'
  id: totrans-727
  prefs: []
  type: TYPE_PRE
  zh: '[PRE519]'
- en: '[PRE520]'
  id: totrans-728
  prefs: []
  type: TYPE_PRE
  zh: '[PRE520]'
- en: '[PRE521]'
  id: totrans-729
  prefs: []
  type: TYPE_PRE
  zh: '[PRE521]'
- en: '[PRE522]'
  id: totrans-730
  prefs: []
  type: TYPE_PRE
  zh: '[PRE522]'
- en: '[PRE523]'
  id: totrans-731
  prefs: []
  type: TYPE_PRE
  zh: '[PRE523]'
- en: '[PRE524]'
  id: totrans-732
  prefs: []
  type: TYPE_PRE
  zh: '[PRE524]'
- en: '[PRE525]'
  id: totrans-733
  prefs: []
  type: TYPE_PRE
  zh: '[PRE525]'
- en: '[PRE526]'
  id: totrans-734
  prefs: []
  type: TYPE_PRE
  zh: '[PRE526]'
- en: '[PRE527]'
  id: totrans-735
  prefs: []
  type: TYPE_PRE
  zh: '[PRE527]'
- en: '[PRE528]'
  id: totrans-736
  prefs: []
  type: TYPE_PRE
  zh: '[PRE528]'
- en: '[PRE529]'
  id: totrans-737
  prefs: []
  type: TYPE_PRE
  zh: '[PRE529]'
- en: '[PRE530]'
  id: totrans-738
  prefs: []
  type: TYPE_PRE
  zh: '[PRE530]'
- en: '[PRE531]'
  id: totrans-739
  prefs: []
  type: TYPE_PRE
  zh: '[PRE531]'
- en: '[PRE532]'
  id: totrans-740
  prefs: []
  type: TYPE_PRE
  zh: '[PRE532]'
- en: '[PRE533]'
  id: totrans-741
  prefs: []
  type: TYPE_PRE
  zh: '[PRE533]'
- en: '[PRE534]'
  id: totrans-742
  prefs: []
  type: TYPE_PRE
  zh: '[PRE534]'
- en: '[PRE535]'
  id: totrans-743
  prefs: []
  type: TYPE_PRE
  zh: '[PRE535]'
- en: '[PRE536]'
  id: totrans-744
  prefs: []
  type: TYPE_PRE
  zh: '[PRE536]'
- en: '[PRE537]'
  id: totrans-745
  prefs: []
  type: TYPE_PRE
  zh: '[PRE537]'
- en: '[PRE538]'
  id: totrans-746
  prefs: []
  type: TYPE_PRE
  zh: '[PRE538]'
- en: '[PRE539]'
  id: totrans-747
  prefs: []
  type: TYPE_PRE
  zh: '[PRE539]'
- en: '[PRE540]'
  id: totrans-748
  prefs: []
  type: TYPE_PRE
  zh: '[PRE540]'
- en: '[PRE541]'
  id: totrans-749
  prefs: []
  type: TYPE_PRE
  zh: '[PRE541]'
- en: '[PRE542]'
  id: totrans-750
  prefs: []
  type: TYPE_PRE
  zh: '[PRE542]'
- en: '[PRE543]'
  id: totrans-751
  prefs: []
  type: TYPE_PRE
  zh: '[PRE543]'
- en: '[PRE544]'
  id: totrans-752
  prefs: []
  type: TYPE_PRE
  zh: '[PRE544]'
- en: '[PRE545]'
  id: totrans-753
  prefs: []
  type: TYPE_PRE
  zh: '[PRE545]'
- en: '[PRE546]'
  id: totrans-754
  prefs: []
  type: TYPE_PRE
  zh: '[PRE546]'
- en: '[PRE547]'
  id: totrans-755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE547]'
- en: '[PRE548]'
  id: totrans-756
  prefs: []
  type: TYPE_PRE
  zh: '[PRE548]'
- en: '[PRE549]'
  id: totrans-757
  prefs: []
  type: TYPE_PRE
  zh: '[PRE549]'
- en: '[PRE550]'
  id: totrans-758
  prefs: []
  type: TYPE_PRE
  zh: '[PRE550]'
- en: '[PRE551]'
  id: totrans-759
  prefs: []
  type: TYPE_PRE
  zh: '[PRE551]'
- en: '[PRE552]'
  id: totrans-760
  prefs: []
  type: TYPE_PRE
  zh: '[PRE552]'
- en: '[PRE553]'
  id: totrans-761
  prefs: []
  type: TYPE_PRE
  zh: '[PRE553]'
- en: '[PRE554]'
  id: totrans-762
  prefs: []
  type: TYPE_PRE
  zh: '[PRE554]'
- en: The `then(callback)` method should not be used here because the server does
    not return any information for the browser.
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: 这里不应该使用 `then(callback)` 方法，因为服务器不会向浏览器返回任何信息。
- en: Let’s now see the management of the `PUT` request on the server side.
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看服务器端 `PUT` 请求的管理。
- en: PUT type request processing (server side)
  id: totrans-765
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PUT 类型请求处理（服务器端）
- en: 'The server processes the `PUT` `/list` request in the `app.js` file. The processing
    consists of carrying out an update of the document of the collection having this
    identifier, with the text received from the browser:'
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器在 `app.js` 文件中处理 `PUT` `/list` 请求。处理包括对具有此标识符的集合文档进行更新，使用从浏览器接收到的文本：
- en: Modifying an element, server side (app.js file)
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 修改元素，服务器端（app.js 文件）
- en: '[PRE555]'
  id: totrans-768
  prefs: []
  type: TYPE_PRE
  zh: '[PRE555]'
- en: '[PRE556]'
  id: totrans-769
  prefs: []
  type: TYPE_PRE
  zh: '[PRE556]'
- en: '[PRE557]'
  id: totrans-770
  prefs: []
  type: TYPE_PRE
  zh: '[PRE557]'
- en: '[PRE558]'
  id: totrans-771
  prefs: []
  type: TYPE_PRE
  zh: '[PRE558]'
- en: '[PRE559]'
  id: totrans-772
  prefs: []
  type: TYPE_PRE
  zh: '[PRE559]'
- en: '[PRE560]'
  id: totrans-773
  prefs: []
  type: TYPE_PRE
  zh: '[PRE560]'
- en: '[PRE561]'
  id: totrans-774
  prefs: []
  type: TYPE_PRE
  zh: '[PRE561]'
- en: '[PRE562]'
  id: totrans-775
  prefs: []
  type: TYPE_PRE
  zh: '[PRE562]'
- en: '[PRE563]'
  id: totrans-776
  prefs: []
  type: TYPE_PRE
  zh: '[PRE563]'
- en: '[PRE564]'
  id: totrans-777
  prefs: []
  type: TYPE_PRE
  zh: '[PRE564]'
- en: '[PRE565]'
  id: totrans-778
  prefs: []
  type: TYPE_PRE
  zh: '[PRE565]'
- en: '[PRE566]'
  id: totrans-779
  prefs: []
  type: TYPE_PRE
  zh: '[PRE566]'
- en: '[PRE567]'
  id: totrans-780
  prefs: []
  type: TYPE_PRE
  zh: '[PRE567]'
- en: '[PRE568]'
  id: totrans-781
  prefs: []
  type: TYPE_PRE
  zh: '[PRE568]'
- en: '[PRE569]'
  id: totrans-782
  prefs: []
  type: TYPE_PRE
  zh: '[PRE569]'
- en: '[PRE570]'
  id: totrans-783
  prefs: []
  type: TYPE_PRE
  zh: '[PRE570]'
- en: '[PRE571]'
  id: totrans-784
  prefs: []
  type: TYPE_PRE
  zh: '[PRE571]'
- en: '[PRE572]'
  id: totrans-785
  prefs: []
  type: TYPE_PRE
  zh: '[PRE572]'
- en: '[PRE573]'
  id: totrans-786
  prefs: []
  type: TYPE_PRE
  zh: '[PRE573]'
- en: '[PRE574]'
  id: totrans-787
  prefs: []
  type: TYPE_PRE
  zh: '[PRE574]'
- en: '[PRE575]'
  id: totrans-788
  prefs: []
  type: TYPE_PRE
  zh: '[PRE575]'
- en: '[PRE576]'
  id: totrans-789
  prefs: []
  type: TYPE_PRE
  zh: '[PRE576]'
- en: '[PRE577]'
  id: totrans-790
  prefs: []
  type: TYPE_PRE
  zh: '[PRE577]'
- en: '[PRE578]'
  id: totrans-791
  prefs: []
  type: TYPE_PRE
  zh: '[PRE578]'
- en: '[PRE579]'
  id: totrans-792
  prefs: []
  type: TYPE_PRE
  zh: '[PRE579]'
- en: '[PRE580]'
  id: totrans-793
  prefs: []
  type: TYPE_PRE
  zh: '[PRE580]'
- en: '[PRE581]'
  id: totrans-794
  prefs: []
  type: TYPE_PRE
  zh: '[PRE581]'
- en: '[PRE582]'
  id: totrans-795
  prefs: []
  type: TYPE_PRE
  zh: '[PRE582]'
- en: '[PRE583]'
  id: totrans-796
  prefs: []
  type: TYPE_PRE
  zh: '[PRE583]'
- en: '[PRE584]'
  id: totrans-797
  prefs: []
  type: TYPE_PRE
  zh: '[PRE584]'
- en: '[PRE585]'
  id: totrans-798
  prefs: []
  type: TYPE_PRE
  zh: '[PRE585]'
- en: '[PRE586]'
  id: totrans-799
  prefs: []
  type: TYPE_PRE
  zh: '[PRE586]'
- en: '[PRE587]'
  id: totrans-800
  prefs: []
  type: TYPE_PRE
  zh: '[PRE587]'
- en: '[PRE588]'
  id: totrans-801
  prefs: []
  type: TYPE_PRE
  zh: '[PRE588]'
- en: '[PRE589]'
  id: totrans-802
  prefs: []
  type: TYPE_PRE
  zh: '[PRE589]'
- en: '[PRE590]'
  id: totrans-803
  prefs: []
  type: TYPE_PRE
  zh: '[PRE590]'
- en: '[PRE591]'
  id: totrans-804
  prefs: []
  type: TYPE_PRE
  zh: '[PRE591]'
- en: '[PRE592]'
  id: totrans-805
  prefs: []
  type: TYPE_PRE
  zh: '[PRE592]'
- en: '[PRE593]'
  id: totrans-806
  prefs: []
  type: TYPE_PRE
  zh: '[PRE593]'
- en: '[PRE594]'
  id: totrans-807
  prefs: []
  type: TYPE_PRE
  zh: '[PRE594]'
- en: '[PRE595]'
  id: totrans-808
  prefs: []
  type: TYPE_PRE
  zh: '[PRE595]'
- en: '[PRE596]'
  id: totrans-809
  prefs: []
  type: TYPE_PRE
  zh: '[PRE596]'
- en: '[PRE597]'
  id: totrans-810
  prefs: []
  type: TYPE_PRE
  zh: '[PRE597]'
- en: '[PRE598]'
  id: totrans-811
  prefs: []
  type: TYPE_PRE
  zh: '[PRE598]'
- en: '[PRE599]'
  id: totrans-812
  prefs: []
  type: TYPE_PRE
  zh: '[PRE599]'
- en: '[PRE600]'
  id: totrans-813
  prefs: []
  type: TYPE_PRE
  zh: '[PRE600]'
- en: '[PRE601]'
  id: totrans-814
  prefs: []
  type: TYPE_PRE
  zh: '[PRE601]'
- en: '[PRE602]'
  id: totrans-815
  prefs: []
  type: TYPE_PRE
  zh: '[PRE602]'
- en: '[PRE603]'
  id: totrans-816
  prefs: []
  type: TYPE_PRE
  zh: '[PRE603]'
- en: '[PRE604]'
  id: totrans-817
  prefs: []
  type: TYPE_PRE
  zh: '[PRE604]'
- en: '[PRE605]'
  id: totrans-818
  prefs: []
  type: TYPE_PRE
  zh: '[PRE605]'
- en: '[PRE606]'
  id: totrans-819
  prefs: []
  type: TYPE_PRE
  zh: '[PRE606]'
- en: '[PRE607]'
  id: totrans-820
  prefs: []
  type: TYPE_PRE
  zh: '[PRE607]'
- en: '[PRE608]'
  id: totrans-821
  prefs: []
  type: TYPE_PRE
  zh: '[PRE608]'
- en: '[PRE609]'
  id: totrans-822
  prefs: []
  type: TYPE_PRE
  zh: '[PRE609]'
- en: '[PRE610]'
  id: totrans-823
  prefs: []
  type: TYPE_PRE
  zh: '[PRE610]'
- en: '[PRE611]'
  id: totrans-824
  prefs: []
  type: TYPE_PRE
  zh: '[PRE611]'
- en: '[PRE612]'
  id: totrans-825
  prefs: []
  type: TYPE_PRE
  zh: '[PRE612]'
- en: '[PRE613]'
  id: totrans-826
  prefs: []
  type: TYPE_PRE
  zh: '[PRE613]'
- en: '[PRE614]'
  id: totrans-827
  prefs: []
  type: TYPE_PRE
  zh: '[PRE614]'
- en: '[PRE615]'
  id: totrans-828
  prefs: []
  type: TYPE_PRE
  zh: '[PRE615]'
- en: The text and the identifier are retrieved from the server in the `req.body.text`
    and `req.body.id` variables. The document with this identifier is updated in the
    database with the new text. The `List.updateOne()` class method allows this document
    to be modified, but since it does not use a callback function afterward, the `exec()`
    method must be used afterward for the update to be carried out in the database.
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: 文本和标识符从服务器的 `req.body.text` 和 `req.body.id` 变量中检索。具有此标识符的文档在数据库中使用新文本进行更新。`List.updateOne()`
    类方法允许修改此文档，但由于它之后没有使用回调函数，因此必须使用 `exec()` 方法才能在数据库中执行更新。
- en: Also notice the `res.send()` instruction at the end of the processing. It closes
    the connection between the browser and the server. If the connection is not closed,
    the browser waits for the server’s response, which would never come if the server
    sends nothing back to the browser.
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: 注意处理结束时的 `res.send()` 指令。它关闭了浏览器与服务器之间的连接。如果连接没有关闭，浏览器将等待服务器的响应，如果服务器没有向浏览器发送任何内容，则服务器将永远不会返回响应。
- en: Let’s finish by explaining how to remove an item from the list.
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过解释如何从列表中删除一个项目来结束。
- en: Removing an element from the list
  id: totrans-832
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从列表中删除一个元素
- en: Finally, we will learn how to remove an element from the list. A `DELETE` type
    request will be used for this.
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将学习如何从列表中删除一个元素。为此将使用 DELETE 类型请求。
- en: Using Axios with a DELETE type request (client side)
  id: totrans-834
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Axios 进行 DELETE 类型请求（客户端）
- en: The `axios.delete("/list", options)` method is used to trigger a `DELETE` type
    request on the server. The `options` parameter must indicate the identifier of
    the element to be deleted from the collection.
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: '`axios.delete("/list", options)` 方法用于在服务器上触发 DELETE 类型请求。`options` 参数必须指示要从集合中删除的元素的标识符。'
- en: 'However, unlike the previous `axios.get()`, `axios.put()`, and `axios.post()`
    calls, the `axios.delete("/list", options)` call requires that the `options` parameter
    be written in the `data` property (thus written as `{ data : options }`). If you
    don’t follow this convention, it won’t work.'
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: '然而，与之前的 `axios.get()`、`axios.put()` 和 `axios.post()` 调用不同，`axios.delete("/list",
    options)` 调用要求将 `options` 参数写入 `data` 属性（因此写作 `{ data : options }`）。如果您不遵循此约定，它将不会工作。'
- en: 'Here are the instructions for performing a `DELETE` request with the Axios
    library:'
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是使用 Axios 库执行 DELETE 请求的说明：
- en: Deleting an element, client side (global-app.js file)
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端删除一个元素（global-app.js 文件）
- en: '[PRE616]'
  id: totrans-839
  prefs: []
  type: TYPE_PRE
  zh: '[PRE616]'
- en: '[PRE617]'
  id: totrans-840
  prefs: []
  type: TYPE_PRE
  zh: '[PRE617]'
- en: '[PRE618]'
  id: totrans-841
  prefs: []
  type: TYPE_PRE
  zh: '[PRE618]'
- en: '[PRE619]'
  id: totrans-842
  prefs: []
  type: TYPE_PRE
  zh: '[PRE619]'
- en: '[PRE620]'
  id: totrans-843
  prefs: []
  type: TYPE_PRE
  zh: '[PRE620]'
- en: '[PRE621]'
  id: totrans-844
  prefs: []
  type: TYPE_PRE
  zh: '[PRE621]'
- en: '[PRE622]'
  id: totrans-845
  prefs: []
  type: TYPE_PRE
  zh: '[PRE622]'
- en: '[PRE623]'
  id: totrans-846
  prefs: []
  type: TYPE_PRE
  zh: '[PRE623]'
- en: '[PRE624]'
  id: totrans-847
  prefs: []
  type: TYPE_PRE
  zh: '[PRE624]'
- en: '[PRE625]'
  id: totrans-848
  prefs: []
  type: TYPE_PRE
  zh: '[PRE625]'
- en: '[PRE626]'
  id: totrans-849
  prefs: []
  type: TYPE_PRE
  zh: '[PRE626]'
- en: '[PRE627]'
  id: totrans-850
  prefs: []
  type: TYPE_PRE
  zh: '[PRE627]'
- en: '[PRE628]'
  id: totrans-851
  prefs: []
  type: TYPE_PRE
  zh: '[PRE628]'
- en: '[PRE629]'
  id: totrans-852
  prefs: []
  type: TYPE_PRE
  zh: '[PRE629]'
- en: '[PRE630]'
  id: totrans-853
  prefs: []
  type: TYPE_PRE
  zh: '[PRE630]'
- en: '[PRE631]'
  id: totrans-854
  prefs: []
  type: TYPE_PRE
  zh: '[PRE631]'
- en: '[PRE632]'
  id: totrans-855
  prefs: []
  type: TYPE_PRE
  zh: '[PRE632]'
- en: '[PRE633]'
  id: totrans-856
  prefs: []
  type: TYPE_PRE
  zh: '[PRE633]'
- en: '[PRE634]'
  id: totrans-857
  prefs: []
  type: TYPE_PRE
  zh: '[PRE634]'
- en: '[PRE635]'
  id: totrans-858
  prefs: []
  type: TYPE_PRE
  zh: '[PRE635]'
- en: '[PRE636]'
  id: totrans-859
  prefs: []
  type: TYPE_PRE
  zh: '[PRE636]'
- en: '[PRE637]'
  id: totrans-860
  prefs: []
  type: TYPE_PRE
  zh: '[PRE637]'
- en: '[PRE638]'
  id: totrans-861
  prefs: []
  type: TYPE_PRE
  zh: '[PRE638]'
- en: '[PRE639]'
  id: totrans-862
  prefs: []
  type: TYPE_PRE
  zh: '[PRE639]'
- en: '[PRE640]'
  id: totrans-863
  prefs: []
  type: TYPE_PRE
  zh: '[PRE640]'
- en: '[PRE641]'
  id: totrans-864
  prefs: []
  type: TYPE_PRE
  zh: '[PRE641]'
- en: '[PRE642]'
  id: totrans-865
  prefs: []
  type: TYPE_PRE
  zh: '[PRE642]'
- en: '[PRE643]'
  id: totrans-866
  prefs: []
  type: TYPE_PRE
  zh: '[PRE643]'
- en: '[PRE644]'
  id: totrans-867
  prefs: []
  type: TYPE_PRE
  zh: '[PRE644]'
- en: '[PRE645]'
  id: totrans-868
  prefs: []
  type: TYPE_PRE
  zh: '[PRE645]'
- en: '[PRE646]'
  id: totrans-869
  prefs: []
  type: TYPE_PRE
  zh: '[PRE646]'
- en: '[PRE647]'
  id: totrans-870
  prefs: []
  type: TYPE_PRE
  zh: '[PRE647]'
- en: '[PRE648]'
  id: totrans-871
  prefs: []
  type: TYPE_PRE
  zh: '[PRE648]'
- en: '[PRE649]'
  id: totrans-872
  prefs: []
  type: TYPE_PRE
  zh: '[PRE649]'
- en: '[PRE650]'
  id: totrans-873
  prefs: []
  type: TYPE_PRE
  zh: '[PRE650]'
- en: '[PRE651]'
  id: totrans-874
  prefs: []
  type: TYPE_PRE
  zh: '[PRE651]'
- en: '[PRE652]'
  id: totrans-875
  prefs: []
  type: TYPE_PRE
  zh: '[PRE652]'
- en: '[PRE653]'
  id: totrans-876
  prefs: []
  type: TYPE_PRE
  zh: '[PRE653]'
- en: '[PRE654]'
  id: totrans-877
  prefs: []
  type: TYPE_PRE
  zh: '[PRE654]'
- en: '[PRE655]'
  id: totrans-878
  prefs: []
  type: TYPE_PRE
  zh: '[PRE655]'
- en: '[PRE656]'
  id: totrans-879
  prefs: []
  type: TYPE_PRE
  zh: '[PRE656]'
- en: '[PRE657]'
  id: totrans-880
  prefs: []
  type: TYPE_PRE
  zh: '[PRE657]'
- en: '[PRE658]'
  id: totrans-881
  prefs: []
  type: TYPE_PRE
  zh: '[PRE658]'
- en: '[PRE659]'
  id: totrans-882
  prefs: []
  type: TYPE_PRE
  zh: '[PRE659]'
- en: '[PRE660]'
  id: totrans-883
  prefs: []
  type: TYPE_PRE
  zh: '[PRE660]'
- en: '[PRE661]'
  id: totrans-884
  prefs: []
  type: TYPE_PRE
  zh: '[PRE661]'
- en: '[PRE662]'
  id: totrans-885
  prefs: []
  type: TYPE_PRE
  zh: '[PRE662]'
- en: '[PRE663]'
  id: totrans-886
  prefs: []
  type: TYPE_PRE
  zh: '[PRE663]'
- en: '[PRE664]'
  id: totrans-887
  prefs: []
  type: TYPE_PRE
  zh: '[PRE664]'
- en: '[PRE665]'
  id: totrans-888
  prefs: []
  type: TYPE_PRE
  zh: '[PRE665]'
- en: '[PRE666]'
  id: totrans-889
  prefs: []
  type: TYPE_PRE
  zh: '[PRE666]'
- en: '[PRE667]'
  id: totrans-890
  prefs: []
  type: TYPE_PRE
  zh: '[PRE667]'
- en: '[PRE668]'
  id: totrans-891
  prefs: []
  type: TYPE_PRE
  zh: '[PRE668]'
- en: '[PRE669]'
  id: totrans-892
  prefs: []
  type: TYPE_PRE
  zh: '[PRE669]'
- en: '[PRE670]'
  id: totrans-893
  prefs: []
  type: TYPE_PRE
  zh: '[PRE670]'
- en: '[PRE671]'
  id: totrans-894
  prefs: []
  type: TYPE_PRE
  zh: '[PRE671]'
- en: '[PRE672]'
  id: totrans-895
  prefs: []
  type: TYPE_PRE
  zh: '[PRE672]'
- en: '[PRE673]'
  id: totrans-896
  prefs: []
  type: TYPE_PRE
  zh: '[PRE673]'
- en: '[PRE674]'
  id: totrans-897
  prefs: []
  type: TYPE_PRE
  zh: '[PRE674]'
- en: '[PRE675]'
  id: totrans-898
  prefs: []
  type: TYPE_PRE
  zh: '[PRE675]'
- en: '[PRE676]'
  id: totrans-899
  prefs: []
  type: TYPE_PRE
  zh: '[PRE676]'
- en: '[PRE677]'
  id: totrans-900
  prefs: []
  type: TYPE_PRE
  zh: '[PRE677]'
- en: '[PRE678]'
  id: totrans-901
  prefs: []
  type: TYPE_PRE
  zh: '[PRE678]'
- en: '[PRE679]'
  id: totrans-902
  prefs: []
  type: TYPE_PRE
  zh: '[PRE679]'
- en: '[PRE680]'
  id: totrans-903
  prefs: []
  type: TYPE_PRE
  zh: '[PRE680]'
- en: '[PRE681]'
  id: totrans-904
  prefs: []
  type: TYPE_PRE
  zh: '[PRE681]'
- en: '[PRE682]'
  id: totrans-905
  prefs: []
  type: TYPE_PRE
  zh: '[PRE682]'
- en: '[PRE683]'
  id: totrans-906
  prefs: []
  type: TYPE_PRE
  zh: '[PRE683]'
- en: '[PRE684]'
  id: totrans-907
  prefs: []
  type: TYPE_PRE
  zh: '[PRE684]'
- en: '[PRE685]'
  id: totrans-908
  prefs: []
  type: TYPE_PRE
  zh: '[PRE685]'
- en: '[PRE686]'
  id: totrans-909
  prefs: []
  type: TYPE_PRE
  zh: '[PRE686]'
- en: 'As mentioned before, we use the `options` parameter of the `axios.delete(/list",
    options)` method in the form `{ data : options }` so that the options are correctly
    passed by the `DELETE` method.'
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: '如前所述，我们使用 `axios.delete(/list", options)` 方法中的 `options` 参数的格式 `{ data : options
    }`，以确保选项通过 DELETE 方法正确传递。'
- en: Let’s now examine the processing performed by the server when receiving the
    `DELETE` request.
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来检查服务器在接收到 DELETE 请求时执行的处理。
- en: DELETE type request processing (server side)
  id: totrans-912
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DELETE 类型请求处理（服务器端）
- en: 'The server receives the `DELETE` `/list` request using the `app.delete("/list,
    callback)` method. The callback function uses the identifier passed in the request
    to delete the corresponding document from the `elements` collection:'
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器使用 `app.delete("/list, callback)` 方法接收 DELETE `/list` 请求。回调函数使用请求中传递的标识符从
    `elements` 集合中删除相应的文档：
- en: Deleting an element, server side (app.js file)
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器端删除一个元素（app.js 文件）
- en: '[PRE687]'
  id: totrans-915
  prefs: []
  type: TYPE_PRE
  zh: '[PRE687]'
- en: '[PRE688]'
  id: totrans-916
  prefs: []
  type: TYPE_PRE
  zh: '[PRE688]'
- en: '[PRE689]'
  id: totrans-917
  prefs: []
  type: TYPE_PRE
  zh: '[PRE689]'
- en: '[PRE690]'
  id: totrans-918
  prefs: []
  type: TYPE_PRE
  zh: '[PRE690]'
- en: '[PRE691]'
  id: totrans-919
  prefs: []
  type: TYPE_PRE
  zh: '[PRE691]'
- en: '[PRE692]'
  id: totrans-920
  prefs: []
  type: TYPE_PRE
  zh: '[PRE692]'
- en: '[PRE693]'
  id: totrans-921
  prefs: []
  type: TYPE_PRE
  zh: '[PRE693]'
- en: '[PRE694]'
  id: totrans-922
  prefs: []
  type: TYPE_PRE
  zh: '[PRE694]'
- en: '[PRE695]'
  id: totrans-923
  prefs: []
  type: TYPE_PRE
  zh: '[PRE695]'
- en: '[PRE696]'
  id: totrans-924
  prefs: []
  type: TYPE_PRE
  zh: '[PRE696]'
- en: '[PRE697]'
  id: totrans-925
  prefs: []
  type: TYPE_PRE
  zh: '[PRE697]'
- en: '[PRE698]'
  id: totrans-926
  prefs: []
  type: TYPE_PRE
  zh: '[PRE698]'
- en: '[PRE699]'
  id: totrans-927
  prefs: []
  type: TYPE_PRE
  zh: '[PRE699]'
- en: '[PRE700]'
  id: totrans-928
  prefs: []
  type: TYPE_PRE
  zh: '[PRE700]'
- en: '[PRE701]'
  id: totrans-929
  prefs: []
  type: TYPE_PRE
  zh: '[PRE701]'
- en: '[PRE702]'
  id: totrans-930
  prefs: []
  type: TYPE_PRE
  zh: '[PRE702]'
- en: '[PRE703]'
  id: totrans-931
  prefs: []
  type: TYPE_PRE
  zh: '[PRE703]'
- en: '[PRE704]'
  id: totrans-932
  prefs: []
  type: TYPE_PRE
  zh: '[PRE704]'
- en: '[PRE705]'
  id: totrans-933
  prefs: []
  type: TYPE_PRE
  zh: '[PRE705]'
- en: '[PRE706]'
  id: totrans-934
  prefs: []
  type: TYPE_PRE
  zh: '[PRE706]'
- en: '[PRE707]'
  id: totrans-935
  prefs: []
  type: TYPE_PRE
  zh: '[PRE707]'
- en: '[PRE708]'
  id: totrans-936
  prefs: []
  type: TYPE_PRE
  zh: '[PRE708]'
- en: '[PRE709]'
  id: totrans-937
  prefs: []
  type: TYPE_PRE
  zh: '[PRE709]'
- en: '[PRE710]'
  id: totrans-938
  prefs: []
  type: TYPE_PRE
  zh: '[PRE710]'
- en: '[PRE711]'
  id: totrans-939
  prefs: []
  type: TYPE_PRE
  zh: '[PRE711]'
- en: '[PRE712]'
  id: totrans-940
  prefs: []
  type: TYPE_PRE
  zh: '[PRE712]'
- en: '[PRE713]'
  id: totrans-941
  prefs: []
  type: TYPE_PRE
  zh: '[PRE713]'
- en: '[PRE714]'
  id: totrans-942
  prefs: []
  type: TYPE_PRE
  zh: '[PRE714]'
- en: '[PRE715]'
  id: totrans-943
  prefs: []
  type: TYPE_PRE
  zh: '[PRE715]'
- en: '[PRE716]'
  id: totrans-944
  prefs: []
  type: TYPE_PRE
  zh: '[PRE716]'
- en: '[PRE717]'
  id: totrans-945
  prefs: []
  type: TYPE_PRE
  zh: '[PRE717]'
- en: '[PRE718]'
  id: totrans-946
  prefs: []
  type: TYPE_PRE
  zh: '[PRE718]'
- en: '[PRE719]'
  id: totrans-947
  prefs: []
  type: TYPE_PRE
  zh: '[PRE719]'
- en: '[PRE720]'
  id: totrans-948
  prefs: []
  type: TYPE_PRE
  zh: '[PRE720]'
- en: '[PRE721]'
  id: totrans-949
  prefs: []
  type: TYPE_PRE
  zh: '[PRE721]'
- en: '[PRE722]'
  id: totrans-950
  prefs: []
  type: TYPE_PRE
  zh: '[PRE722]'
- en: '[PRE723]'
  id: totrans-951
  prefs: []
  type: TYPE_PRE
  zh: '[PRE723]'
- en: '[PRE724]'
  id: totrans-952
  prefs: []
  type: TYPE_PRE
  zh: '[PRE724]'
- en: '[PRE725]'
  id: totrans-953
  prefs: []
  type: TYPE_PRE
  zh: '[PRE725]'
- en: '[PRE726]'
  id: totrans-954
  prefs: []
  type: TYPE_PRE
  zh: '[PRE726]'
- en: '[PRE727]'
  id: totrans-955
  prefs: []
  type: TYPE_PRE
  zh: '[PRE727]'
- en: '[PRE728]'
  id: totrans-956
  prefs: []
  type: TYPE_PRE
  zh: '[PRE728]'
- en: '[PRE729]'
  id: totrans-957
  prefs: []
  type: TYPE_PRE
  zh: '[PRE729]'
- en: '[PRE730]'
  id: totrans-958
  prefs: []
  type: TYPE_PRE
  zh: '[PRE730]'
- en: '[PRE731]'
  id: totrans-959
  prefs: []
  type: TYPE_PRE
  zh: '[PRE731]'
- en: '[PRE732]'
  id: totrans-960
  prefs: []
  type: TYPE_PRE
  zh: '[PRE732]'
- en: '[PRE733]'
  id: totrans-961
  prefs: []
  type: TYPE_PRE
  zh: '[PRE733]'
- en: '[PRE734]'
  id: totrans-962
  prefs: []
  type: TYPE_PRE
  zh: '[PRE734]'
- en: '[PRE735]'
  id: totrans-963
  prefs: []
  type: TYPE_PRE
  zh: '[PRE735]'
- en: '[PRE736]'
  id: totrans-964
  prefs: []
  type: TYPE_PRE
  zh: '[PRE736]'
- en: '[PRE737]'
  id: totrans-965
  prefs: []
  type: TYPE_PRE
  zh: '[PRE737]'
- en: '[PRE738]'
  id: totrans-966
  prefs: []
  type: TYPE_PRE
  zh: '[PRE738]'
- en: '[PRE739]'
  id: totrans-967
  prefs: []
  type: TYPE_PRE
  zh: '[PRE739]'
- en: '[PRE740]'
  id: totrans-968
  prefs: []
  type: TYPE_PRE
  zh: '[PRE740]'
- en: '[PRE741]'
  id: totrans-969
  prefs: []
  type: TYPE_PRE
  zh: '[PRE741]'
- en: '[PRE742]'
  id: totrans-970
  prefs: []
  type: TYPE_PRE
  zh: '[PRE742]'
- en: '[PRE743]'
  id: totrans-971
  prefs: []
  type: TYPE_PRE
  zh: '[PRE743]'
- en: '[PRE744]'
  id: totrans-972
  prefs: []
  type: TYPE_PRE
  zh: '[PRE744]'
- en: '[PRE745]'
  id: totrans-973
  prefs: []
  type: TYPE_PRE
  zh: '[PRE745]'
- en: '[PRE746]'
  id: totrans-974
  prefs: []
  type: TYPE_PRE
  zh: '[PRE746]'
- en: '[PRE747]'
  id: totrans-975
  prefs: []
  type: TYPE_PRE
  zh: '[PRE747]'
- en: '[PRE748]'
  id: totrans-976
  prefs: []
  type: TYPE_PRE
  zh: '[PRE748]'
- en: '[PRE749]'
  id: totrans-977
  prefs: []
  type: TYPE_PRE
  zh: '[PRE749]'
- en: '[PRE750]'
  id: totrans-978
  prefs: []
  type: TYPE_PRE
  zh: '[PRE750]'
- en: '[PRE751]'
  id: totrans-979
  prefs: []
  type: TYPE_PRE
  zh: '[PRE751]'
- en: '[PRE752]'
  id: totrans-980
  prefs: []
  type: TYPE_PRE
  zh: '[PRE752]'
- en: '[PRE753]'
  id: totrans-981
  prefs: []
  type: TYPE_PRE
  zh: '[PRE753]'
- en: The `List.deleteOne({_id:id})` method is used to delete the document having
    this identifier in the collection. As we do not use a callback function in the
    `List.deleteOne()` method, we call the `exec()` method so that the deletion is
    performed in the database.
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `List.deleteOne({_id:id})` 方法从集合中删除具有此标识符的文档。由于我们在 `List.deleteOne()` 方法中未使用回调函数，因此我们调用
    `exec()` 方法以在数据库中执行删除。
- en: Also, notice the `res.send()` instruction at the end of the processing. It closes
    the connection between the browser and the server. If the connection is not closed,
    the browser waits for the server’s response, which would never come if the server
    sends nothing back to the browser. In this case, you would see unexpected results
    by clicking several times on the **Delete** buttons in the list and reloading
    the list.
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，注意处理结束时的 `res.send()` 指令。它关闭了浏览器与服务器之间的连接。如果连接没有关闭，浏览器将等待服务器的响应，如果服务器没有向浏览器发送任何内容，则服务器将永远不会返回响应。在这种情况下，您会通过在列表中多次点击
    **删除** 按钮并重新加载列表看到意外的结果。
- en: We have seen how to use MongoDB to insert, modify, and delete elements in a
    list, using a library such as Axios, allowing communication between the JavaScript
    code of the browser and the JavaScript code written for the server. And now, this
    brings us to the end of this chapter and the book.
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何使用MongoDB通过像Axios这样的库在列表中插入、修改和删除元素，这个库允许浏览器中的JavaScript代码与为服务器编写的JavaScript代码进行通信。现在，这把我们带到了本章和本书的结尾。
- en: Summary
  id: totrans-985
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Through this complete example, we have seen how to use JavaScript on both the
    client side (here, with Vue.js) and the server side (with Node.js and MongoDB).
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个完整的示例，我们看到了如何在客户端（这里，使用Vue.js）和服务器端（使用Node.js和MongoDB）使用JavaScript。
- en: The use of a single language to carry out all development simplifies learning
    and ensures great consistency throughout the application.
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
  zh: 使用单一语言进行所有开发简化了学习，并确保整个应用程序中的一致性极高。
- en: In addition, tools such as Vue.js, allowing the creation of reusable components,
    and modules such as Express and mongoose based on the MVC model, make it possible
    to properly architect JavaScript code, both on the client side and on the server
    side.
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，像Vue.js这样的工具，允许创建可重用组件，以及基于MVC模型的Express和mongoose等模块，使得在客户端和服务器端正确架构JavaScript代码成为可能。
- en: We also saw how the Axios library made it possible to communicate between the
    client and the server.
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到了Axios库如何使得客户端和服务器之间的通信成为可能。
- en: You now have everything you need to create reliable, robust, and well-structured
    client and server applications entirely in JavaScript.
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在拥有创建可靠、健壮和结构良好的客户端和服务器应用程序所需的一切，全部使用JavaScript。
- en: Thanks
  id: totrans-991
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 感谢
- en: Thank you, dear reader, for purchasing and reading this book. It was written
    for the sole purpose of helping and guiding you. We hope it has been of great
    help to you.
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您，亲爱的读者，购买并阅读这本书。它是为了帮助和指导您而写的。我们希望它对您有很大的帮助。
- en: If so, we ask you for a very small but extremely important contribution – to
    make our book knownto others by means at your disposal, in the hope that it can
    keep helping people like you. Thanks very much!
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是这样的话，我们请求您做出一个非常小但极其重要的贡献——通过您所能利用的方式让我们的书为他人所知，希望它能够继续帮助像您这样的人。非常感谢！
