["```js\ntest('saves a new birthday', async ({ page }) => {\n  await page.goto('/birthdays');\n  await page.getByLabel('Name').fill('Persephone');\n  await page\n    .getByLabel('Date of birth')\n    .fill('1985-01-01');\n  await page.getByRole('button').click();\n  await expect(\n    page.getByText('Persephone')\n  ).toBeVisible();\n});\n```", "```js\n    import { describe, it, expect } from 'vitest';\n    import {\n      render,\n      screen\n    } from '@testing-library/svelte';\n    import BirthdayForm from './BirthdayForm.svelte';\n    describe('BirthdayForm', () => {\n      it('displays a form', () => {\n        render(BirthdayForm);\n        expect(screen.queryByRole('form')).toBeVisible();\n      });\n    });\n    ```", "```js\n    <form />\n    ```", "```js\n    <form name=\"birthday\" />\n    ```", "```js\n    it('has a form method of POST', () => {\n      render(BirthdayForm);\n      expect(screen.getByRole('form').method).toEqual(\n        'post'\n      );\n    });\n    ```", "```js\n    <form method=\"post\" name=\"birthday\" />\n    ```", "```js\n    it('displays a button to save the form', () => {\n      render(BirthdayForm);\n      expect(\n        screen.queryByRole('button')\n      ).toBeVisible();\n    });\n    ```", "```js\n    <form method=\"post\" name=\"birthday\">\n      <input type=\"submit\" value=\"Save\" />\n    </form>\n    ```", "```js\n    describe('name field', () => {\n      it('displays a text field for the contact name', ()\n      => {\n        render(BirthdayForm);\n        const field = screen.queryByLabelText('Name', {\n          selector: 'input[type=text]'\n        });\n        expect(field).toBeVisible();\n        expect(field.name).toEqual('name');\n      });\n    });\n    ```", "```js\n    <form method=\"post\" name=\"birthday\">\n      <label>\n        Name\n    <input type=\"text\" name=\"name\" />\n      </label>\n      <input type=\"submit\" value=\"Save\" />\n    </form>\n    ```", "```js\n    describe('date of birth field', () => {\n      it('displays a text field for the date of birth', ()\n      => {\n        render(BirthdayForm);\n        const field = screen.queryByLabelText(\n          'Date of birth',\n          {\n            selector: 'input[type=text]'\n          }\n        );\n        expect(field).toBeVisible();\n        expect(field.name).toEqual('dob');\n      });\n    });\n    ```", "```js\n    <form method=\"post\" name=\"birthday\">\n      <label>\n        Name\n        <input type=\"text\" name=\"name\" />\n      </label>\n      <label>\n        Date of birth\n        <input type=\"text\" name=\"dob\" />\n      </label>\n      <input type=\"submit\" value=\"Save\" />\n    </form>\n    ```", "```js\n    it('displays a form for adding new birthdays', () => {\n      render(Page, { data: { birthdays } });\n      expect(screen.getByRole('form')).toBeVisible();\n    });\n    ```", "```js\n    <script>\n       import Birthday from './Birthday.svelte';\n    import BirthdayForm from './BirthdayForm.svelte';\n       export let data;\n    </script>\n    ```", "```js\n    <ol>\n      ...\n    </ol>\n    <h1>Add a new birthday</h1>\n    <div>\n      <BirthdayForm />\n    </div>\n    ```", "```js\n    <style>\n      ...\n      li,\n    div {\n        ...\n      }\n    </style>\n    ```", "```js\nexport const actions = {\n  default: async ({ request }) => {\n    const data = await request.formData();\n    // ... do something with data here ...\n  }\n};\n```", "```js\nconst createFormDataFromObject = (obj) => {\n  const formData = new FormData();\n  Object.keys(obj).forEach((k) =>\n    formData.append(k, obj[k])\n  );\n  return formData;\n};\n```", "```js\nexport const createFormDataRequest = (obj) => ({\n  formData: () =>\n    new Promise((resolve) =>\n      resolve(createFormDataFromObject(obj))\n    )\n});\n```", "```js\nimport { load, actions } from './+page.server.js';\n```", "```js\nimport {\n  createFormDataRequest\n} from 'src/factories/formDataRequest.js';\n```", "```js\ndescribe('/birthdays - default action', () => {\n  it('adds a new birthday into the list', async () => {\n    const request = createFormDataRequest({\n      name: 'Zeus',\n      dob: '2009-02-02'\n    });\n    await actions.default({ request });\n    expect(load().birthdays).toContainEqual(\n      expect.objectContaining({\n        name: 'Zeus',\n        dob: '2009-02-02'\n      })\n    );\n  });\n});\n```", "```js\nit.skip('adds a new birthday into the list', async () => {\n  ...\n});\n```", "```js\n✓ src/routes/birthdays/page.server.test.js (2)\n   ✓ /birthdays - load (1)\n     ✓ returns a fixture of two items\n   ↓ /birthdays - default action (1) [skipped]\n     ↓ adds a new birthday into the list [skipped]\n...\n Test Files  5 passed (5)\n      Tests  15 passed | 1 skipped (16)\n```", "```js\nconst db = [];\nconst addNew = (item) => db.push(item);\naddNew({ name: 'Hercules', dob: '1994-02-02' });\naddNew({ name: 'Athena', dob: '1989-01-01' });\nexport const load = () => ({\n    birthdays: Array.from(db)\n});\n```", "```js\n FAIL  src/routes/birthdays/page.server.test.js > /birthdays - default action > adds a new birthday into the list\nTypeError: Cannot read properties of undefined (reading 'default')\n ❯ src/routes/birthdays/page.server.test.js:22:17\n     20|   });\n     21|\n     22|   await actions.default({ request });\n```", "```js\nexport const actions = {\n  default: async ({ request }) => {\n  }\n};\n```", "```js\nFAIL  src/routes/birthdays/page.server.test.js > /birthdays - default action > adds a new birthday into the list\nAssertionError: expected [ { name: 'Hercules', …(1) }, …(1) ] to deep equally contain ObjectContaining{ …(3) }\n ❯ src/routes/birthdays/page.server.test.js:24:28\n     22|   await actions.default({ request });\n     23|\n     24|   expect(load().birthdays).toContainEqual(\n       |                            ^\n     25|    expect.objectContaining({\n     26|     name: 'Zeus',\n  - Expected  - 4\n  + Received  + 10\n  - ObjectContaining {\n  -   \"dob\": \"2009-02-02\",\n  -   \"name\": \"Zeus\",\n  - }\"\n...\n```", "```js\nexport const actions = {\n  default: async ({ request }) => {\n    const data = await request.formData();\n    addNew({\n      name: data.get('name'),\n      dob: data.get('dob')\n    });\n  }\n};\n```", "```js\n[WebServer]\n  ✓  1 test.js:3:1 › index page has expected h1 (499ms)\n  ✓  2 birthdays.test.js:3:1 › lists all birthday (507ms)\n  ✓  3 birthdays.test.js:13:1 › saves a new birthday (309ms)\n  3 passed (5s)\n```"]