- en: Chapter 10. Testing Your Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Testing is an important activity conducted on any software project. Tests automate
    bug checks and ensure that new features not only work as expected but also don''t
    introduce undesired behavior. Ambitious Ember.js projects, therefore, need to
    be well tested in order to guarantee their stability and ensure satisfying user
    experiences. Therefore, by the end of this chapter, we should be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Test object-computed properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test object observers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test user journeys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ember.js supports writing the following two common types of tests:'
  prefs: []
  type: TYPE_NORMAL
- en: Unit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unit tests test a specific attribute of a class (or instance) defined in an
    application. For example, think of scenarios such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A created user object has a name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A user's full name is computed properly from their first and last name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A book model is validated properly before being saved to the server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An observer reacts to changes correctly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Integration tests, on the other hand, test user journeys and important application
    workflows; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: Only authenticated users can access the app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Submitting a form persists the form data to a store, and redirects the user
    back to a listing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clicking on a checkout button adds the product to a cart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will be testing a simple implementation of a typical e-commerce
    site that you can load via the `index.html` file located in the chapter sample.
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing tests](img/00018.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The site in the preceding screenshot has the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: Users can order meals to be delivered at specified locations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Admins can log in to the site to add new meals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Admins can see orders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To test the admin interface, log in with the username `admin` and password
    `pass`. The application has been tested with the help of the following libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Mocha.js ([http://visionmedia.github.io/mocha](http://visionmedia.github.io/mocha)):
    This is a testing library'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sinon.js ([http://sinonjs.org/](http://sinonjs.org/)): This is the spies, stubs,
    and mocks library'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Chai.js ([http://chaijs.com](http://chaijs.com)): This is an assertion library'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Ember mocha adapter ([https://github.com/teddyzeenny/ember-mocha-adapter](https://github.com/teddyzeenny/ember-mocha-adapter))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Loading `test.html` in the browser runs the two types of tests located at `test.integration.js`
    and `test.unit.js`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing tests](img/00019.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we examine the test loader file content, we see that the testing framework
    required the following element to be created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the element in which the test report was rendered. We also needed to
    create our application''s root element in the same way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Near the bottom of the file, the application scripts were loaded in order,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the testing libraries were loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Ember.js comes with test utilities that help write these tests. These test
    helpers are meant to be used with any testing library of your choice. In our case,
    we used Mocha.js, a popular, easy-to-use library. The first task we needed to
    do was set up the test environment. This was done by first defining the root element
    of the Ember.js application. This ensured that the Ember.js application was only
    executed within the element and didn''t affect other parts of the testing environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We then needed to run the `setupForTesting` method of the application. This
    deferred the readiness of the application for later execution during testing.
    It also prevented the tests from manipulating the window''s location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We also needed to call another method, `injectTestHelpers`, which injected
    Ember.js test helpers into the test environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We finally loaded and executed the tests included in the two files, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You will notice that, for each of the tests, we defined `beforeEach` and `afterEach`
    hooks that got called before and after the test was executed, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, the default pre-test run hook used the `visit` helper to transition
    the app into the `index` route, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The post-test hook, on the other hand, resets the application state after each
    test by destroying such instances as the Ember-data store:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Ember.js comes with a number of test helpers that we will be using to help us
    in writing tests.
  prefs: []
  type: TYPE_NORMAL
- en: Asynchronous test helpers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'These helpers are used to perform asynchronous operations. This means that,
    if used, the next bunch of tests needs then to be wrapped in a run loop function.
    They include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`visit(url)`: This performs an asynchronous application transition into the
    provided URL route.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fillIn(selector, text)`: This is used to asynchronously set the value of an
    input that matches the given selector with the given text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`click(selector)`: This is used to trigger a click event on an element that
    matches the given selector. This is good for the `triggerEvent(selector, "click")`
    helper.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keyEvent(selector, type, keyCode)`: This is used to trigger a key event on
    the given selector.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`triggerEvent(selector, type, options)`: This is used to trigger other DOM
    events on the given selector.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Synchronous test helpers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'These helpers are used to perform synchronous operations. They include the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`find(selector, context)`: This helper is used to perform an element selection
    within the given optional context'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`currentPath()`: This is used to get the current application''s route path'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`currentRouteName()`: This is used to get the name of the current application
    route'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`currentURL()`: This is used to get the URL of the current route'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wait helpers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is currently only one helper of this type: `andThen`. It is used to run
    a block of test operations after the previous asynchronous operations have been
    completed.'
  prefs: []
  type: TYPE_NORMAL
- en: Writing unit tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unit testing involves testing object-computed properties, observers, and method
    calls.
  prefs: []
  type: TYPE_NORMAL
- en: Testing computed properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start by looking at the first tested object-computed property in the
    chapter sample, the `total` property of `App.CartItem`, that is applied from `App.TotalMixin`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'When a user clicks on the order button of a meal, we expect the cart to be
    filled by the new item. We also expect the item''s `total` property to be incremented,
    which is ascertained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'First, we created an order and verified that its total defaulted to zero. We
    then updated its quantity and price and ascertained that the total was computed
    properly in each case. We also did the same for the `App.Order` model, this time
    creating the order from the store:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note how the store instance was referenced from the main application container.
  prefs: []
  type: TYPE_NORMAL
- en: Testing method calls
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app contains a mixin `App.OnhasMixin` that defines a function `onhas` that
    invokes a given callback if the property being bound is defined or as soon as
    it gets set. This is comparable to a situation where you can either buy a new
    computer now if you have the money or wait till you get a pay check. We started
    by testing the first case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, the function fired as the object already contained the `id` property.
    We simply needed to pass the callback `done` provided by the Mocha test runner.
    The second test case asserts that the callback is called only when the bound property
    gets set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Testing observers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the observers, `App.UserController#storeUser`, stores the username of
    the current logged-in user to the local storage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'To test the observer, we first cleared any stored user in the local storage
    in the pre-test hook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We then created the user controller, set the user, and asserted that the user
    is actually stored in the browser''s local store:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We also set up a spy using **Sinon.js** to record the observer invocations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The spy, as shown in the preceding code, enabled us to verify that the observer
    subscribed properly to the property changes.
  prefs: []
  type: TYPE_NORMAL
- en: Writing integration tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We now already know that integration tests test the import workflows and user
    journeys in an application. The Ember.js framework is well tested; reviewing these
    tests can help a great deal in learning how to write tests for your application.
    Many features such as bindings and observers are already tested, so you will be
    writing more integration tests than unit tests. The integration tests in the chapter
    sample cover virtually all user interactions in the application. We will first
    go through all consumer-related cases, the first of which ascertains that users
    can see the available meals on the first page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This example shows the use of the synchronous `find` helper, which returned
    the elements that listed the meals. We also checked whether the meal attributes
    were being displayed correctly to the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Our next check verified that the cart link on the navigation bar indicated
    that the cart was empty:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Next to the cart link, we also ascertained that users were able to see the
    login link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we checked whether the customer was also able to see the site branding:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The next set of test cases verified that users would be able to add products
    to the cart. Before each test case, we triggered a click event on the checkout
    button of the first meal to add the meal to the cart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The first test checked whether the desired meal was actually added to the cart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We first queried this product from the store and then asserted that it was
    indeed added to the cart controller. We also asserted that the cart item contained
    the expected attributes: `product`, `price`, and `quantity`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'By then, we expected the cart link counter indicator to be incremented:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We also expected the user to have been transitioned to the cart page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The proceeding tests tested the cart page to which our user has transitioned.
    First, we tested that viewing an empty cart page presents an appropriate message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We then tested the page for when the cart was filled, by first adding two items
    to the cart in the pre-test hook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'We used the `controller.addItem` method to add the two products to the cart.
    Just as in the preceding test case, we asserted that the cart link indicated that
    two cart items had been added to the cart, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The cart page contains a table that shows the cart details. It also contains
    additional information to the left; one of these is the cart total:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The `find` helper returned the label that displayed the order total. We got
    its `textContent` and asserted that it was equal to the order total. We then proceeded
    to test the cart table by first ensuring that the relevant table header cells
    were displayed in the right order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we tested the table body:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code tests the first row of the table by asserting that it displays
    the expected values. For the third cell, we test that the input contains the expected
    product quantity. The user is free to adjust the product amount using this input.
    We test this in the next test case. First, we update the input to a new value,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'We then allow any triggered operations to finish before we assert that the
    quantity in the cart was updated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'This assertion shows how to use the `fillIn` helper to asynchronously update
    the value of an input. We also asserted that the cart total was updated as a result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the user is satisfied with the order details, they should be able to go
    to the payment page by clicking on the pay button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the user is on the checkout page, if their cart is empty an appropriate
    message will be shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'If the cart is not empty, the user sees a table that summarizes the order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The table body lists the order''s product name alongside its quantity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The table also displays the order total:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The table tested sits on the left-hand side of the page. The main page contains
    a form in which the user enters their payment information before submission. We
    use the `triggerEvent` helper to invoke this event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'A success message is displayed to the user, notifying them that the order will
    be delivered to them shortly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'This tests the payment action defined in the checkout controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'As shown, the cart items are converted to actual orders that the shop admin
    can see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: As a recap, you can see the preceding test cases tested the user's journey from
    the index page to the checkout page through the cart page. This is what constitutes
    integration tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next case will test the admin''s user journey. Admins can get access to
    the admin dashboard by logging into the app on the login page with the right credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'A successful login redirects the user to the index route. We also tested the
    case when a user tries to access the admin dashboard with the wrong credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: We expect the user to remain in the login route on login failure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once logged in, the admin should be able to add meals as well as edit or remove
    existing ones. These are covered in the next tests where we first log in as an
    admin into the site via the login helper defined at the bottom of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The application contains a hidden form whose file input prompts the user to
    select a meal image when the list-product component is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The corresponding `App.ListProductComponent` defines a click event handler
    that gets invoked when the component is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the user selects a file, the preceding `post` method is called with a
    `FileReader` instance argument, from which we get the URL representation of the
    selected image for storage. You would obviously upload this file to a storage
    service such as S3 or Google Cloud Storage in an actual application, instead.
    We finally create the product, which gets automatically listed in the page. Since
    it''s not possible to update the value of a file input, our next test spec partially
    confirms this by manually adding a product to the cart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we triggered the `createProduct` action on the index controller, which
    adds a product to the cart. Note that this is the same action that is called by
    the `post` function. In the next run loop, we asserted that a new product was
    added to the listing. This product''s name and price are undefined, so the next
    test case checks whether the admin can actually edit these products:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: The preceding test case showed that the admin is able to update the product's
    name and price via the provided corresponding inputs. In an actual app, you would
    probably add a `save` button that persisted the changes to the backend.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the navigation bar, there''s an `orders` link that the user can click on
    to transition to the orders page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The next test ascertains that clicking on the link transitions the user to
    the orders page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, the admin is presented with a message if no orders have been made yet.
    However, if orders have been made, the admin should be able to see a table that
    lists them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We just learned the various test techniques you can use to ensure the stability
    of your application. Since you will mostly be writing integration tests, the best
    approach would be to break your app into clear user journeys. Then, test any expected
    interactions as well as transitions. This would obviously be done when developing
    new features. When testing against external resources, you can use libraries such
    as Sinon to stub these services or extend the test timeout, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: In the next chapter, we will learn how to build Ember.js applications that are
    backed by external real-time data and service resources. We will specifically
    learn how to use the popular **socket.io** library within Ember.js applications.
  prefs: []
  type: TYPE_NORMAL
