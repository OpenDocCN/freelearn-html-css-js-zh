- en: Chapter 4. Working with Images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter introduces the widgets for working with images: the **carousel**,
    **gallery**, and **lightbox**. The carousel is a simpler form of the gallery widget,
    without thumbnails by default. Both of them are used to display a list of images
    on the page. The carousel is intended to show multiple images at once. The lightbox
    works differently in that it shows a selected image in full size and opens in
    a dialog on top of the page contents.'
  prefs: []
  type: TYPE_NORMAL
- en: Using the carousel widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The carousel widget displays a list of images. The images by default are aligned
    horizontally with previous and next buttons to scroll through them. Captions can
    be displayed at the bottom of each of the images. In the sections that follow,
    I'll show you how to create, configure, and use the carousel widget.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the carousel widget
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To set up the carousel widget, the width and height of the container element
    needs to be the same as the image sizes. For instance, if your images are 300
    x 200, then the width and height needs to be set in the CSS as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'With these settings, one image is displayed at a time with next and previous
    buttons on the sides of the image, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the carousel widget](img/6067OT_4_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: All of the images used in the example are the same size. This allows us to set
    the container dimensions without cropping or resizing the images.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the carousel widget
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The carousel widget supports a number of settings that let you control the
    features available in the user interface as well as its display. The most useful
    ones are shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Setting | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `display` | This setting specifies the number of images shown |'
  prefs: []
  type: TYPE_TB
- en: '| `step` | This setting specifies the number of images scrolled by a transition
    |'
  prefs: []
  type: TYPE_TB
- en: '| `orientation` | This setting specifies whether to scroll the images horizontally
    or vertically |'
  prefs: []
  type: TYPE_TB
- en: '| `showTimer` | This setting allows the images in carousel to be played with
    a timer displaying the progress and a play/pause button |'
  prefs: []
  type: TYPE_TB
- en: '| `loop` | This setting allows cycling to continue through the images so that
    the last image returns to the first one |'
  prefs: []
  type: TYPE_TB
- en: 'The following diagram shows the different parts of the carousel widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the carousel widget](img/6067OT_4_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the display options to show multiple images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To show multiple images with the carousel widget, we increase the width of
    the `wijcarousel` element proportional to the number of images to show. Since
    each image is 300 pixels wide, to show two images at a time, we would set the
    display option to `2` and the width of the element to 600 pixels. As another example,
    to show three images at a time, we set the display options and CSS as shown in
    the code listing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the following screenshot, setting the width to 900 pixels
    allows enough room for the next and previous buttons so that they do not overlap
    with the images.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the display options to show multiple images](img/6067OT_4_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We also set the `step` property in the options to `2` so that hitting the next
    button slides the current images to the left so that two of them disappear. Wijmo
    plays a nice animation while sliding the third image into the position of the
    first image. To try out various animation and options, head to [http://wijmo.com/demo/explore/?widget=Carousel&sample=Animation](http://wijmo.com/demo/     explore/?widget=Carousel&sample=Animation).'
  prefs: []
  type: TYPE_NORMAL
- en: Specifying the navigation options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to the next and previous buttons, a pager can be added to navigate
    to a specific image. The pager comes in many forms, specified by the `pagerType`
    option. The available options are numbers, dots, thumbnails, and a slider. If
    you want to use thumbnails, I recommend switching to the gallery widget as it
    comes with thumbnails by default. The gallery widget is covered in the next section.
    The position settings for a pager, as well as other elements, have fields that
    position elements relative to each other.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a visual display of the position options, refer to the section *Positioning
    the Tooltip* in the next chapter. In this example, we place the pager''s center
    top at the bottom of the carousel with the `my` option and move it left by 10
    pixels with the offset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Another handy option to make the carousel look cleaner is to display buttons
    on the outside instead of overlapping them with the image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Putting it all together, we initialize the carousel widget with the pager as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To center align the carousel, a common pattern is to set the width and let
    the margins be automatically adjusted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The end result is a user friendly, clean interface as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Specifying the navigation options](img/6067OT_4_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding the timer and autoplay
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To let the images play like a slideshow, we only need to set the `auto` option
    to `true`. Along with the `loop` option, the images can play continuously. If
    you have many images to show, you will want to reduce the interval or duration
    when each is shown. Furthermore, the `timer` option allows the user to pause the
    slideshow. The timer in progress looks like the one shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the timer and autoplay](img/6067OT_4_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'An example setting to play each image for three seconds before moving onto
    the next one is listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Using the gallery widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in the section on the carousel widget, the gallery widget displays
    navigable thumbnails by default. Selecting a thumbnail shows a larger version
    of the image above it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the gallery widget
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you might expect by now, the Wijmo gallery widget is created with the `wijgallery`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This gallery is created with as much reuse of the carousel example as possible.
    For the gallery, we only limit the width on the container as it needs space to
    display the thumbnails:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We set the number of thumbnails to 3 due to the horizontal area below our images.
    Wijmo automatically crops the images for the thumbnails. Our gallery widget now
    looks like the one shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the gallery widget](img/6067OT_4_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the example, we used the same HTML list format as for the carousel. Nevertheless,
    the Wijmo documentation recommends another format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Although more verbose, this format allows us to specify the thumbnail images.
    Now each 300 x 200 image is accompanied by a 100 x 100 thumbnail. The gallery
    widget automatically resizes images to fit the display area. If you want to resize
    the images in your gallery widget without changing the aspect ratio, refer to
    a blog post by one of the developers at [http://wijmo.com/maintaining-aspect-ratio-in-wijgallery/](http://wijmo.com/maintaining-aspect-ratio-in-wijgallery/).
  prefs: []
  type: TYPE_NORMAL
- en: Playing videos in the gallery widget
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To play videos within the gallery widget, you just need to specify a thumbnail
    of the video and a link to it. An example markup with three videos is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The thumbnails will display at the bottom of the gallery. To prevent Wijmo
    from cropping the thumbnails, we can set the `thumbsLength` option to the width
    of the image. Moreover, the `thumbsDisplay` option, which determines the number
    of thumbnails shown, needs to be adjusted. The mode can be set to `swf` for flash
    or `iframe` for other video types. Since we did not specify a caption for the
    video, we set the `showCaption` option to `false`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, the thumbnails are assumed to be 100 pixels wide. An additional
    library is required to play flash videos. The `swfobject.js` library must be loaded
    before the `wijgallery` method is called. A Wijmo gallery configured to play YouTube
    videos is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Playing videos in the gallery widget](img/6067OT_4_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the lightbox widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The lightbox widget is a tool to give focus to images. It displays the current
    image on top of other page contents in a modal dialog. The Wijmo lightbox widget
    shares many common features with the carousel and gallery widgets, including the
    navigation buttons, timer, and caption area. The lightbox comes with default settings
    that show the control buttons on hover along with an image count. In addition,
    it also adds a close button to the top right corner.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the lightbox widget
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Unlike the gallery and carousel widgets, the lightbox requires options to be
    specified in the `rel` attribute of the `anchor` element. The following example
    shows the required elements and a script that creates the lightbox:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The lightbox widget requires an `img` element inside an anchor element. Also,
    the `img` element needs to have a title, which is displayed as a caption. As you''re
    familiar now, we set the `width` attribute of the lightbox to be the width of
    the image. When you call the `wijlightbox` method with no settings and click on
    one of the images, you get an image frame on top of the page contents as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the lightbox widget](img/6067OT_4_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Changing the lightbox widget's appearance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The lightbox by default shows navigation and close buttons when hovering over
    it; and play/pause buttons for slideshows are also available. To show these buttons,
    use the `ctrlButtons` option. You may also want to display the lightbox with a
    `modal` view by setting the `modal` option to `true`. To avoid having the navigation
    controls overlap with the images, set the `controlsPosition` property to `outside`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the lightbox widget''s appearance](img/6067OT_4_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the carousel widget, which is used for displaying
    multiple images, and how to configure it with display and navigation options.
    This chapter also introduced the animation and timer options available for the
    carousel. Next, we learned about the gallery widget and using it to play videos.
    Finally, this chapter concluded with a section on the lightbox widget.
  prefs: []
  type: TYPE_NORMAL
