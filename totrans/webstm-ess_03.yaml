- en: Chapter 3. Developing Simple Web Pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you are familiar with some of WebStorm's smart features, we will focus
    on creating simple web pages or projects with its assistance.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be able to quickly start projects with
    the help of templates and use your existing codebase inside WebStorm. You will
    also learn the basics of version control systems, and to use WebStorm for working
    with transpiled languages like SASS, LESS, or TypeScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to study the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new project using templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing an existing project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with a VCS inside WebStorm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File Watchers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new project using templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Whereas in the previous chapter we have created a new project from scratch,
    we are now going to use some popular templates to help us to start faster. When
    you use a template, your project is automatically equipped with all the necessary
    libraries and files. In WebStorm 10, you can create a project using the following
    templates:'
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 Boilerplate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web Starter Kit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React Starter Kit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Foundation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AngularJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js express app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PhoneGap/Cordova app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Meteor app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following sections, we are going to focus on some of the popular simple
    frameworks like Bootstrap, Foundation, HTML5 Boilerplate, and the Web Starter
    Kit. For each of these frameworks, we are going to create or use a simple frameworks
    example.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '|   | *"Bootstrap is the most popular HTML, CSS, and JS framework for developing
    responsive, mobile first projects on the web"* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --[http://getbootstrap.com/](http://getbootstrap.com/) |'
  prefs: []
  type: TYPE_TB
- en: Bootstrap is a framework created by Twitter for the faster creation of device-responsive
    web applications. It can be seen as a collection of CSS classes that can be used
    to create different elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a project based on this framework, we have to first choose **New Project**
    from either the **File** menu or the welcome screen. Then, in the new screen,
    select **Twitter Bootstrap** as the template. Fill in the desired location for
    the project, and click **Create**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrap](img/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This will create a project with the selected version of the framework, and will
    create a project with its inbuilt files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since Bootstrap doesn''t come with an example page, we are going to create
    a simple one by ourselves. In the root project directory, create an `index.html`
    file and fill in the following code. I strongly advise you to try and enter all
    the content manually, so that you can get a better understanding of how the autocomplete
    features help you with your coding:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we need to create the `main.css` file, and add the following rules
    to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can see that our CSS code is minimal, because by using Bootstrap, we get
    all the necessary styles. The only thing that we have to use is the HTML markup
    that Bootstrap recommends.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have created the page, we can click the browser icons to open the
    file inside the selected browser. These browser icons appear when you hover your
    mouse on the top-right side of the `index.html` file, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrap](img/00032.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'WebStorm will create a local server, and open the page in the selected browser.
    We will now see the following page in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrap](img/00033.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We have created a simple page using some of the styles that come with the Bootstrap
    framework. One of the big advantages that come with this framework is that our
    page is responsive and suited for a whole range of devices.
  prefs: []
  type: TYPE_NORMAL
- en: Foundation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '|   | *"The most advanced responsive front-end framework in the world."* |
      |'
  prefs: []
  type: TYPE_TB
- en: '|   | --[http://foundation.zurb.com/](http://foundation.zurb.com/) |'
  prefs: []
  type: TYPE_TB
- en: Foundation is a framework similar to Bootstrap that provides a responsive grid
    and a set of UI elements that we can use to jumpstart our project creation.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a project, we go through the same steps as for the Bootstrap project;
    but this time, we select **Foundation** as the project template, as seen in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Foundation](img/00034.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Foundation comes with a previously-created example, so if we want to see an
    example, we have to open the `index.html` file inside WebStorm. A quick way to
    open files inside a project is by using the open a file by name dialog: press
    *Shift* + *⌘* N on Mac or *Ctrl* + *Shift* + *N* on Windows, and start typing
    the name of the file that you want to open.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Foundation](img/00035.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the opened `index.html` file, we have to click the browser icon, just like
    we did in the Bootstrap example, to see the Foundation example page in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: '![Foundation](img/00036.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: HTML5 Boilerplate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '|   | *"The web''s most popular front-end template**HTML5 Boilerplate helps
    you build fast, robust, and adaptable web apps or sites. Kick-start your project
    with the combined knowledge and effort of 100s of developers, all in one little
    package."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --[https://html5boilerplate.com](https://html5boilerplate.com) |'
  prefs: []
  type: TYPE_TB
- en: HTML5 Boilerplate is a template that helps you to quickly start your project
    by creating some of the most important files and importing some libraries like
    `normalize.css`, `jQuery`, and `Modernizer`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new project based on this template, we have to choose **New Project**
    from either the **File** menu or the welcome screen. Then, in the new screen,
    select **HTML5 Boilerplate** as the template. Fill in the desired location for
    the project and click **Create**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![HTML5 Boilerplate](img/00037.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: HTML5 Boilerplate comes with an example page; so, to see it, we have to open
    the `index.html` file inside WebStorm. A quick way to open files inside a project
    is by using the open a file by name dialog, press *Shift* + *⌘* + *N* on Mac or
    *Ctrl* + *Shift* + *N* on Windows, and start typing the name of the file that
    you want to open.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have opened the `index.html` file, we can click the browser icons to
    open the file inside the selected browser. These browser icons appear when you
    hover the mouse on the top-right side of the opened file.
  prefs: []
  type: TYPE_NORMAL
- en: You have now created a new project based on the popular HTML5 framework, and
    you can start changing and adding new files to expand your project.
  prefs: []
  type: TYPE_NORMAL
- en: Web Starter Kit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Web Starter Kit is a boilerplate and tooling template for multi-device
    development. It is presented on the developers'' website as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | *"Your starting point for building great multi-device web experiences
    Start your project with the Web Starter Kit and ensure you''re following the Web
    Fundamentals guidelines out of the box."* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --[https://developers.google.com/web/starter-kit/](https://developers.google.com/web/starter-kit/)
    |'
  prefs: []
  type: TYPE_TB
- en: Now we are going to start a new project again, but this time, it will be one
    based on the Google framework. To do that we are going to select **New Project**
    from the **File** menu or the welcome screen, and select **Web Starter Kit** as
    the template.
  prefs: []
  type: TYPE_NORMAL
- en: 'This template has more features and dependencies, so we need to install the
    required packages and Gulp. We are going to install Gulp globally so that it will
    be available to all the projects. To do this, we simply open the WebStorm internal
    terminal and run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Once you have all the packages installed, you can start developing. The Web
    Starter Kit has three development phases that you are going to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first one is the local server development phase. To get in this phase,
    you have to run the following command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot displays the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Web Starter Kit](img/00038.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once you run this command, you should see the preceding message in the terminal
    and your browser opens with the page. Make a note of the `External URL` as you
    can use this to test your page across multiple devices. Just point your phone
    or tablet to this URL, and the browsing experience will be synced as you work.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this phase, the following tools are at work:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Live Reload**: This watches the files for changes and automatically loads
    them in the browser'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Browser Sync**: This synchronizes the opened page across multiple browsers
    and devices'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JSHint**: This scans your JavaScript code and checks for possible problems'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sass compile**: Any changes you make to the Sass files will be compiled into
    CSS after your page is reloaded with Live Reload'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automate prefixing**: This automatically appends any vendor prefixes that
    are necessary in your styles'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The second phase is the production build phase. In this phase, the production
    version of your page is built. To run this phase, execute the following command
    in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following steps are performed in the build phase:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Build Styles**: This compiles the Sass and runs the autoprefixer.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**JSHint**: This scans your JavaScript code and checks for possible problems.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**HTML build**: This minifies the HTML and the JavaScript.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Automate prefixing**: This automatically appends any vendor prefixes that
    are necessary in your styles.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The third phase is the production build test. In this phase, we test our production
    build to make sure that everything works as expected. A production version of
    your site is built in this phase, and is then opened in a browser. To run this
    phase, you have to type the following command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the example pages, the Web Starter Kit is a really powerful
    platform that helps you quickly start building a web application, especially for
    cross-platform applications and responsive websites.
  prefs: []
  type: TYPE_NORMAL
- en: Importing an existing project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous sections, we have created new projects based on some of the
    popular templates available in WebStorm. In this section, we are going to focus
    on working with the existing projects, and we are going to explore two ways of
    creating a project using the existing files or a versioning control system.
  prefs: []
  type: TYPE_NORMAL
- en: Importing from existing files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes, you have existing projects on your drive that you want to edit in
    WebStorm. To do that, we simply have to select **Create Project From Existing
    files** from either the welcome Screen or the **File** menu. Once we select this
    option, we are presented with the following screen where we have to select a scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Importing from existing files](img/00039.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding dialog, we are presented with the following scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Web Server is installed locally, source files are located under its document
    root**: In this scenario, we presume that we have installed a local server and
    our project is inside the server document root (for example, document root in
    Apache Mac or httpdocs on an XAMPP installation).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web Server is installed locally, source files are located elsewhere locally**:
    In this scenario, we have installed a local server and our project is outside
    the server document root. The files will be copied to the server and synchronized
    when necessary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web server is on remote host, files are accessible via network share or mounted
    drive**: We select this option to make WebStorm copy files to a local drive via
    the network from a remote server, and then set up a project around them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web server is on remote host, files are accessible via FTP/SFTP/FTPS**: Select
    this option to make WebStorm download files from a remote server via the FTP,
    SFTP, or FTPS protocol (for example a hosting account).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Source files are in a local directory, no Web server is yet configured**:
    Select this option if you want to work with files in a certain local directory,
    without using any Web server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We are going to use the last version mentioned in the previous list since we
    don''t want to use a specific server at the moment. On selecting the version,
    we will be presented with the screen where we have to select the project directory
    page, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Importing from existing files](img/00040.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Select the folder that contains your project (in this case, we are going to
    use the previously-created `TwitterBootstrap` folder), mark it as **Project Root,**
    and then click **Finish**.
  prefs: []
  type: TYPE_NORMAL
- en: Importing an existing project from VCS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to explore some of the ways for importing an existing
    project from a VCS. We are going to import an existing Git project.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, we have to select **Check out from version control** from either
    the welcome screen or the VCS. In this demo, we are going to check out a project
    from **Git,** so select that option, as shown in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Importing an existing project from VCS](img/00041.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now specify the **Git Repository URL**. We have created a GitHub project for
    this purpose; so go ahead and fill this with [https://github.com/srosca/youAreHere.git](https://github.com/srosca/youAreHere.git),
    and click on **Clone**. You can also **Test** your connection to the Git repository
    in this screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![Importing an existing project from VCS](img/00042.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This will clone the Git repository inside the specified directory, and then
    prompt you to open the project.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we have focused on creating a project from a Git repository,
    but the same steps can be used with other versioning systems like GitHub, CVS,
    Git, Mercurial, and Subversion.
  prefs: []
  type: TYPE_NORMAL
- en: Working with VCS inside WebStorm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you have a project linked to a VCS, you can perform all the necessary actions
    inside WebStorm. We will now go through some of the most-used tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Update**: We can update the project by selecting **Update Project** from
    the **VCS** menu, as seen in the following image:![Working with VCS inside WebStorm](img/00043.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will be presented with a dialog to select the update strategy. Select **Branch
    Default** and **Using Stash**; click on **OK**. In this way, WebStorm will use
    the default command for the applied branch, and use and save the changes in a
    Git stash.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Add**: Before you commit files, we must add them to the current change list.
    We can add files by going to the **Local Changes** tab in the **Version Control**
    section. Under that, select the files, and then select **Add to VCS** from the
    context menu:![Working with VCS inside WebStorm](img/00044.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Commit**: To commit the files, we have to select **Commit Changes** from
    the **VCS** menu or use the shortcuts *⌘* + *K* or *Ctrl* + *K*:![Working with
    VCS inside WebStorm](img/00045.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we have any files selected in the **Version Control** section, then the commit
    will have only these files preselected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We can also select **Commit and Push...** to commit and then push the files.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Push**: If we have committed changes, we can do a push by going to **VCS**
    | **Git** | **Push**:![Working with VCS inside WebStorm](img/00046.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Branches**: WebStorm displays the active branch at the bottom-right corner
    of the screen. We can also perform all the branch-related tasks (for example,
    creating a new branch) in this menu:![Working with VCS inside WebStorm](img/00047.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**History**: In WebStorm, we always have access to a powerful history viewer
    were we can see all the commits and branches. We can access this in the **Version
    Control** section, under the **Log** tab:![Working with VCS inside WebStorm](img/00048.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One thing to remember about WebStorm and Git is that all the tasks performed
    through the UI are, in fact, `git` commands that WebStorm runs in the background.
    You can see these commands and all the actions performed in the **Console** tab
    of the **Version Control** section.
  prefs: []
  type: TYPE_NORMAL
- en: We have gone through the Git integration system since it is among the most used
    ones, but WebStorm works in a similar way with other VCS systems as well.
  prefs: []
  type: TYPE_NORMAL
- en: File Watchers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the current development cycle, transpiled languages have an ever increasing
    impact. WebStorm can help you work easily with these files with the help of watchers.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to start by creating a `map.scss` file in the `CSS` folder. Once
    this file has been created and opened, WebStorm will inform us that a watcher
    is available, and ask us to add a watcher. Copy the code from the `map.css` file
    inside `map.scss`, and then click on **Add watcher**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![File Watchers](img/00049.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we click on the **Add watcher** button, we will be taken to the **New
    Watcher** dialog where we choose the settings for this process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![File Watchers](img/00050.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once we start the watcher, WebStorm will watch for changes in the `scss` file
    and translate it into CSS code.
  prefs: []
  type: TYPE_NORMAL
- en: 'WebStorm supports integration with various third-party transpilers that perform
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Translate Less, Sass, and SCSS source code into CSS code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Translate TypeScript and CoffeeScript source code into JavaScript code, possibly
    also creating source maps to enable debugging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compress JavaScript and CSS code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that WebStorm does not contain built-in transpilers, but only supports
    integration with the tools that you have to download and install outside WebStorm.
  prefs: []
  type: TYPE_NORMAL
- en: You can see a list of the watchers associated with the current project in the
    **Preferences** | **Tools** | **File Watchers** dialog.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned how to use WebStorm to quickly start new projects
    with the use of templates, and also how to use the existing code bases in the
    editor.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn to use package managers and build
    systems by means of WebStorm's built-in features.
  prefs: []
  type: TYPE_NORMAL
