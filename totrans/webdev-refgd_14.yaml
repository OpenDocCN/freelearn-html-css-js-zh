- en: Chapter 14. jQuery – The Popular JavaScript Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: jQuery is an open source JavaScript library. jQuery makes JavaScript programming
    much simpler.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the notable corporate members of the jQuery foundation:'
  prefs: []
  type: TYPE_NORMAL
- en: '**WordPress**: ([http://wordpress.org/](http://wordpress.org/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IBM**: ([http://ibm.com/](http://ibm.com/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NeoBux**: ([http://www.neobux.com/](http://www.neobux.com/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mozilla**: ([http://www.mozilla.org/](http://www.mozilla.org/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Intel''s** **Open Source Technology Center**: ([http://software.intel.com/en-us/oss](http://software.intel.com/en-us/oss))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Adobe**: ([http://adobe.com/](http://adobe.com/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find all about jQuery at their official website ([www.jQuery.com](http://www.jQuery.com)).
  prefs: []
  type: TYPE_NORMAL
- en: The evolution of JQuery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: jQuery has been evolving since day one. There are two major releases available
    for download. The versions 1.x and 2.x differ in a way; 1.x is more stable and
    supports older browsers as well; whereas, 2.x has the same API as 1.x but without
    the support for legacy browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A legacy browser is an older version of a browser that has not been updated
    to the latest available version.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using jQuery for a project, you can get another version that takes
    fewer resources and is faster to load.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started with developing jQuery, you can download jQuery software by visiting
    [https://jquery.com/](https://jquery.com/). In the following sections, we will
    cover a few download links.
  prefs: []
  type: TYPE_NORMAL
- en: Installing JQuery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can download jQuery from [http://jquery.com/download/](http://jquery.com/download/).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two versions of jQuery available for download: compressed and uncompressed.'
  prefs: []
  type: TYPE_NORMAL
- en: To choose your option, go to the preceding link and right-click on **Save as**
    and select **My Computer** and download it.
  prefs: []
  type: TYPE_NORMAL
- en: jQuery 1.x
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can download the minified version from [http://code.jquery.com/jquery-1.11.3.min.js](http://code.jquery.com/jquery-1.11.3.min.js).
  prefs: []
  type: TYPE_NORMAL
- en: For development, we can download the version 1.x from [http://code.jquery.com/jquery-1.11.3.js](http://code.jquery.com/jquery-1.11.3.js).
  prefs: []
  type: TYPE_NORMAL
- en: jQuery 2.x
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can download the minified version from [http://code.jquery.com/jquery-2.1.4.min.js](http://code.jquery.com/jquery-2.1.4.min.js).
  prefs: []
  type: TYPE_NORMAL
- en: For development, we can download the version 2.x from [http://code.jquery.com/jquery-2.1.4.js](http://code.jquery.com/jquery-2.1.4.js).
  prefs: []
  type: TYPE_NORMAL
- en: Using jQuery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: jQuery is an extremely powerful JavaScript library. Here are a few sample pieces
    of code to give you a head start on your next project.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have downloaded the jQuery library to your hard disk and plan to use
    it from there, then you can include the following code in your HTML `<head>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here, `js` is a folder in the root directory of your project.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To avoid longer loading time and performance issues, scripts should be added
    to the end of the `<body>` tag because when the browser loads the web page (let's
    say, `sample1.html`) and the scripts are at the end of the body tag, the browser
    can render the content of the page (the body) and only start loading scripts afterward.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another preferred approach is to use the Google hosted libraries; these provide
    faster rendering to your pages and jQuery code than using your own hosted jQuery
    libraries. You can use the Google developer hosted libraries with the following
    piece of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The jQuery syntax is used to perform any specific action on elements of HTML.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the description:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$`: `$` is used to access the jQuery object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(selector)`: The `query (or find)` HTML elements using familiar CSS-style
    selector syntax. For example, you can select by element name, type, class or id.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jQuery action()`: For example, it can be events like click, keypress, focus
    and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selectors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the name suggests, `selector` attributes are used to select various elements
    of HTML. The `selector` attributes basically support the CSS selectors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Selectors begin with a `$` sign followed by parentheses: `$()`'
  prefs: []
  type: TYPE_NORMAL
- en: Element selectors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Element selectors select elements using their name. For example, if a paragraph
    is written in the tags `<p>`, you can select this paragraph using its name, that
    is, `p`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The name of the element to be chosen is passed as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The element selectors returns the element.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The element selectors select elements using their name. For example, if a paragraph
    is written in the tags `<p>`, you can select this paragraph using its name.
  prefs: []
  type: TYPE_NORMAL
- en: ID selectors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'ID selectors select elements using their ID. Each element of the HTML can have
    its own identifying ID and it can be accessed using `#`. For example, to access
    the element with the ID text, we can use the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The pound sign (or number sign) or a hash sign followed by the ID name is passed
    as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This returns the element using the ID passed as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This selects elements using their ID. IDs are usually used to uniquely identify
    DOM elements that are accessed through the pound symbol in Javascript or the hash
    sign.
  prefs: []
  type: TYPE_NORMAL
- en: Class selectors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Class selectors select the elements using the class name. For example, a class
    named sample can be accessed by the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A dot/period followed by the name of the class is passed as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This returns the elements using the `Class` name passed as parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This selects the elements using the class name.
  prefs: []
  type: TYPE_NORMAL
- en: Events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JQuery makes it easier to response when user interacts with the web page. For
    example, we can perform several tasks when they click somewhere, scroll the document,
    hover on field or anything like that. Whenever user interacts with the web page,
    an event is occurred. We can use event handling to execute our code.
  prefs: []
  type: TYPE_NORMAL
- en: Mouse events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These are the events that are instantiated as soon as the user activates any
    of the functions related to the mouse. In the following sections, we will cover
    the description of each mouse event.
  prefs: []
  type: TYPE_NORMAL
- en: .click()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The click event takes a DOM object and calls the function if or when it is clicked
    by the user.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The click event receives a callback function.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This returns the response generated by the function called on click.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `click` event uses the ID to get what the user has clicked on and accordingly
    calls its respective function defined inside the body.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of its usage.
  prefs: []
  type: TYPE_NORMAL
- en: '**HTML Code**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**jQuery Code**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: .dblclick()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can attach a handler to the double-click event of an HTML element using the
    `.dblclick()` jQuery method.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `dbclick` event receives a callback function.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This returns the response generated by the function called on **double click**.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `dblclick` event uses the ID to get what the user had double clicked on
    and accordingly calls its respective function.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of its usage.
  prefs: []
  type: TYPE_NORMAL
- en: '**HTML Code**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**jQuery Code**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: .hover()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `hover` event uses the ID to get what the user had his mouse on and accordingly
    calls its respective function.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `hover` event receives a callback function.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This returns the response generated by the function called **on hover**.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `hover` event uses the ID to get what the user had his mouse on and accordingly
    calls its respective function.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of its usage.
  prefs: []
  type: TYPE_NORMAL
- en: '**HTML Code**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**jQuery Code**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: .mousedown()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `.mousedown` event is activated when the user left-clicks on the mouse and
    highlights a specific text.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `.mousedown()` function which gets executed when the element is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This returns the response generated by the function called **on click**.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The event is activated when the user left-clicks and highlights some specific
    text.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of its usage.
  prefs: []
  type: TYPE_NORMAL
- en: '**HTML Code**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**jQuery Code**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: .mouseenter()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The event is activated when the mouse is hovered over the selected text and
    a function is called accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `mouseenter` event receives a callback function.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This returns the response generated by the function called **on mouse enter**.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This event is activated when the mouse is hovered over the selected text and
    a function is called accordingly. The event related to the `mouseenter()` is fired
    only once, so it does not matter if you hold the cursor over an element, the function
    assigned through this function is executed only once.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of its usage.
  prefs: []
  type: TYPE_NORMAL
- en: '**HTML Code**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**jQuery Code**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: .mouseleave()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `.mouseleave` event is activated when the cursor is moved away from the
    HTML element.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `mouseleave` event receives a callback function.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This returns the response generated by the function called **on clicked**.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The event is activated when the mouse is left. The function is called accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of its usage.
  prefs: []
  type: TYPE_NORMAL
- en: '**HTML Code**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '**jQuery** **Code**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: .mousemove()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `.mousemove` event is triggered when the mouse is being moved within an
    element.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `mousemove` event receives a callback function.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This returns the response generated by the function called on mouse move.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This event is triggered when the mouse is being moved within an element.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of its usage.
  prefs: []
  type: TYPE_NORMAL
- en: '**HTML Code**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '**jQuery Code**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: .mouseout()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `.mouseout` event is triggered when the mouse pointer leaves the boundaries
    of the element. Any HTML element can be bound to this event.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `mouseout` event receives a callback function.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This returns the response generated by the function called when the mouse moves
    out of the targeted element.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `mouseout` event is triggered when the mouse pointer leaves the element.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of its usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Required HTML Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Required jQuery Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: .toggle()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This `.toggle()` function is used to bind multiple handlers to matching elements
    that are executed on alternate clicks.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The parameters of the `toggle()` function are `duration`, `easing`, and `callback`.
  prefs: []
  type: TYPE_NORMAL
- en: The `duration` parameter is optional and is used to specify the speed of the
    hide and show effect. The possible values are fast, slow, and milliseconds. The
    default is 400 ms.
  prefs: []
  type: TYPE_NORMAL
- en: The `easing` parameter is optional and is used to specify the `easing()` function
    that is to be used for animation. The default value is `string`.
  prefs: []
  type: TYPE_NORMAL
- en: The `callback` parameter too is optional and is used to specify the function
    that is to be called once the animation is complete.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This returns the output of the function that is called.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This function is used to check the visibility of an element and then alternate
    between the `hide()` and `show()` methods. The callback is always fired once the
    animation is complete and only once for the element that finds a match.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of its usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Required HTML Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Required jQuery Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Keyboard events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The keyboard events are triggered on `Keyboard` functions, for example, when
    a button/key is pressed or released, and so on. Keyboard events can be controlled
    with the following built-in jQuery functions. The available functions are `KeyDown`,
    `KeyPress`, and `KeyUp`.
  prefs: []
  type: TYPE_NORMAL
- en: The only practical difference between `KeyDown` and `KeyPress` is that `KeyPress`
    relays the character resulting from a `KeyPress` event and is only called if there
    is one.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you press *A* on your keyboard, you''ll get this sequence of
    events:'
  prefs: []
  type: TYPE_NORMAL
- en: '`KeyDown`: `KeyCode=Keys.A`, `KeyData=Keys.A`, `Modifiers=Keys.None`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`KeyPress`: `KeyChar=''a''`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`KeyUp`: `KeyCode=Keys.A`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: .keydown()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `keydown` event is instantiated when a key is pressed by the user.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `keydown` event sends the key pressed as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This returns the output of the function that is called when a key is pushed
    down.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `keydown` event is instantiated when the user presses a key, which calls
    the function to be executed.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of its usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Required HTML Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Required jQuery Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The preceding sample code selects the `div` element with the `myTarget` ID and
    triggers the alert function when a key is pressed down.
  prefs: []
  type: TYPE_NORMAL
- en: .keypress()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `keypress` event is instantiated when a key is pressed by the user.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This sends the key pressed as parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This returns the output of the function called by the key press.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `keypress` event is instantiated when the user presses a key, which calls
    the function to be executed.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of its usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Required HTML Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Required jQuery Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The preceding sample code selects the `div` element with the `myTarget` ID and
    triggers the alert function when a key is pressed.
  prefs: []
  type: TYPE_NORMAL
- en: .keyup()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `keyup` event occurs when the key that is pressed is released by the user.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This sends the key pressed as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This returns the output of the function that is called when key is released.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The event occurs when the key pressed is released by the user.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of its usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Required HTML Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Required jQuery Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The preceding sample code selects the `div` with the `myTarget` ID and triggers
    the alert function when a key is released.
  prefs: []
  type: TYPE_NORMAL
- en: Form events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Form events are when elements inside a form are bound to jQuery. These events
    are helpful when it comes to processing data entered via forms. These events can
    be used on elements inside the `<form>` tags. We will now cover the description
    of each form event.
  prefs: []
  type: TYPE_NORMAL
- en: submit()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `submit` event, as the name suggests, is fired when a form is submitted.
  prefs: []
  type: TYPE_NORMAL
- en: Its syntax is `$(selector).submit(function)`.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The parameter taken is the function that is to be run once the form is submitted.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This event does not return anything.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `submit()` function is a form event. It is used to bind form elements with
    a function that needs to be called whenever a form is submitted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Required HTML Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Required JQuery Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: change()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `change` event is fired whenever the value of an element in a form changes.
  prefs: []
  type: TYPE_NORMAL
- en: Its syntax is `$(selector).change(function)`.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The parameter taken is the function that is to be run once the value of the
    selected element changes.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This event does not return anything.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This event is used to bind the event to a function that needs to be called whenever
    a value inside a form element changes. This function works only on the `<input>`,
    `<textarea>`, and `<select>` elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Required HTML Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Required JQuery Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: blur()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `blur` event is fired whenever an element in a form loses its focus and
    the user moves to the next element in the form.
  prefs: []
  type: TYPE_NORMAL
- en: Its syntax is `$(selector).blur(function)`.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The parameter taken is the function that is to be run once the element loses
    focus.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This event does not return anything.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `blur` event is used to call a function whenever an element loses its focus.
  prefs: []
  type: TYPE_NORMAL
- en: 'Required HTML Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Required JQuery Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: focus()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `focus` event is fired whenever an element in a form gets its focus.
  prefs: []
  type: TYPE_NORMAL
- en: Its syntax is `$(selector).focus(function)`.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The parameter taken is the function that is to be run once the element is in
    focus.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This event does not return anything.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `focus` event is used to call a function whenever an element is in focus.
    An element is generally *in focus* when we select it with the mouse or use the
    *Tab* key to navigate to it. This event is triggered only when the specified element
    is in focus and not the element's children.
  prefs: []
  type: TYPE_NORMAL
- en: The focus event is generally used with the `blur` event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Required HTML Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Required JQuery Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: focusin()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This event is fired whenever an element or its child is in focus.
  prefs: []
  type: TYPE_NORMAL
- en: Its syntax is `$(selector).focusin(function)`.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The parameter taken is the function that is to be run once the element is in
    focus.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This event does not return anything.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `focusin` event is used to call a function whenever an element is in focus.
    This event is also called whenever a child element is in focus.
  prefs: []
  type: TYPE_NORMAL
- en: 'Required HTML Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Required JQuery Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: focusout()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `focusout` event is fired whenever an element or its child is out of focus.
  prefs: []
  type: TYPE_NORMAL
- en: Its syntax is `$(selector).focusout(function)`.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The parameter taken is the function that is to be run once the element is in
    focus.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This event does not return anything.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This event is fired whenever an element or its child loses its focus. This event
    is generally used along with the `focusin` event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Required HTML Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Required JQuery Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Document events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Document events are generally fired whenever a document is loaded. In the following
    sections, we will cover the description of each document event.
  prefs: []
  type: TYPE_NORMAL
- en: resize()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `resize` event is fired whenever the user resizes the window. Its syntax
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The parameter taken is the function that is to be run once the window is resized.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This event does not return anything.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `resize` event is used to call a function when the user resizes the window.
  prefs: []
  type: TYPE_NORMAL
- en: 'Required HTML Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Required JQuery Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: scroll()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `scroll` event is fired whenever the user scrolls in the (scrollable) element.
    We can use this event to bind it to a function. Its syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The parameter taken is the function that is to be run once the user scrolls
    on the element.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This event does not return anything.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `scroll` event is fired whenever the user scrolls in an element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Required HTML Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Required JQuery Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Effects and animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Custom animations and effects can be added to various elements to enhance your
    interface using varying designs and colors.
  prefs: []
  type: TYPE_NORMAL
- en: animate()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `animate()` function uses some built-in animations to animate objects in
    and off the view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Its syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The animate function accepts the parameters `duration`, `easing`, and `callback`.
  prefs: []
  type: TYPE_NORMAL
- en: The `duration` parameter is optional and is used to specify the speed of the
    hide and show effect. Its possible values are fast, slow, and milliseconds. The
    default is 400ms.
  prefs: []
  type: TYPE_NORMAL
- en: The `easing` parameter is optional and is used to specify the easing function
    that is to be used for the animation. The default is `string`.
  prefs: []
  type: TYPE_NORMAL
- en: The `callback` parameter too is optional and is used to specify the function
    that is to be called once the animation is complete.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Animations return the modified object containing all the modifications.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Custom animations and effects can be added to various elements to enhance your
    interface using varying designs and colors.
  prefs: []
  type: TYPE_NORMAL
- en: stop()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `stop()` method stops the animation of the selected element.
  prefs: []
  type: TYPE_NORMAL
- en: Its syntax is `$(selector).stop(stopAll,goToEnd);`
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This takes two Booleans, which are both set to false by default, as parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This does not return anything.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This function stops running the animation as soon as it is called. If the first
    parameter is set to `true`, this removes all the other animations for the element.
    If the second parameter is set to `true`, it quickly finishes the current animation.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of its usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Required HTML Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Required jQuery Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The preceding sample code creates a nice fade effect without the common problem
    of multiple queued animations.
  prefs: []
  type: TYPE_NORMAL
- en: Hide, show, and toggle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Elements can be set to hide and show, where hide makes the elements disappear
    from the eye of the user and show does the opposite.
  prefs: []
  type: TYPE_NORMAL
- en: hide()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `hide()` function, if applied on an HTML element, hides it from view. This
    can be used in generating dynamic content based on user activity. The following
    is its syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This takes speed in milliseconds and the callback function as parameters. The
    values taken as parameters are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Fast`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Slow`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Time` in milliseconds'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This does not return anything.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This function is equivalent to setting the CSS property `display: none` for
    the selected element. It also saves the original display property for future use.'
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of its usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Required HTML Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Required jQuery Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: show()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `show()` function, if applied on an HTML element, makes the hidden element
    visible. This can be used to control and manipulate dynamic content based on user
    activity, for example, making certain form options visible after a certain checkbox
    is selected. The following is its syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This takes speed in milliseconds and the callback function as parameters. The
    values taken as parameters are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Fast`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Slow`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Time` in milliseconds'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This does not return anything.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This function removes the `display:none` property from the element and reverts
    it to the original. For example, if an element has a property `display:inline-block`
    and was hidden using the hide function, it will set the display back to inline-block.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of its usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Required HTML Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Required jQuery Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: toggle()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `toggle()` function, if applied on an HTML element, toggles with the visibility
    of that element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This takes the speed in milliseconds and the callback function as parameters.
    The values taken are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Fast`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Slow`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Time` in milliseconds'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This does not return anything.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This function is used to toggle with the visibility of the elements.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This function should not be confused with the mouse event function `toggle()`,
    which was explained previously. To ensure which `toggle()` function is being used.
    Check the parameters passed to the function.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of its usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Required HTML Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Required jQuery Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Fade
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fade can be used to set the visibility of elements.
  prefs: []
  type: TYPE_NORMAL
- en: fadeIn()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `fadeIn()` function is similar to the `show()` function in functionality,
    but `fadeIn()` comes with a nice fading transition effect.
  prefs: []
  type: TYPE_NORMAL
- en: Its syntax is `$(selector).fadeIn(speed,callback);`.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This takes speed in milliseconds and the callback function as parameters. The
    values taken as parameters are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Fast`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Slow`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Time` in milliseconds'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This does not return anything.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This works in a similar way to the `show()` function but with a fade transition.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of its usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Required HTML Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Required jQuery Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: The preceding sample code selects the `div` element with the `sample` ID and
    fades in the image with the `myImage` ID with slow animation.
  prefs: []
  type: TYPE_NORMAL
- en: fadeOut()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `fadeOut()` function is similar to the `hide()` function in functionality,
    but it comes with a nice fading transition effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'Its syntax is as follows: `$(selector).fadeOut(speed,callback);`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This takes speed in milliseconds and the callback function as parameters. The
    values taken as parameters are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Fast`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Slow`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Time` in milliseconds'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This does not return anything.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `fadeOut()` function works in a similar way to the `hide()` function but
    with a fade transition.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of its usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Required HTML Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Required jQuery Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: fadeToggle()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `fadeToggle()` function automatically toggles an element's display property
    from `none` to `block`, `inline`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of its syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This takes speed in milliseconds and the callback function as parameters. The
    values taken as parameters are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Fast`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Slow`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Time` in milliseconds'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This does not return anything.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If an element is already hidden, `fadeToggle()` will make it visible and vice
    versa.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of its usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Required HTML Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Required jQuery Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: fadeTo()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `fadeTo()` function adjusts the opacity of the target element to the given
    value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Its syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This takes duration in milliseconds as parameters. The values taken as parameters
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Fast`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Slow`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Time` in milliseconds'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The other parameter is opacity for the target element. The value lies between
    `0` and `1` and the final parameter is the callback function.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This does not return anything.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `fadeTo()` function is similar to the `fadeIn()` method. But the user can
    specify the target opacity here. For example, set an element to 50% opacity by
    pacing 0.5 as the opacity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Required HTML Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Required jQuery Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Sliding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sliding methods are used to slide the elements in up or down directions. The
    `slideDown()` function will make element visible, while the `slideUp()` function
    will hide the contents of the element.
  prefs: []
  type: TYPE_NORMAL
- en: slideDown()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `slideDown()` function slides down the selected element with the specified
    speed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of its syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This this takes speed in milliseconds and the callback function as parameters.
    The values taken as parameters are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Fast`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Slow`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Time` in milliseconds'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This does not return anything.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `slideDown()` function makes a hidden element visible with a nice sliding
    effect.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of its usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Required HTML Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Required jQuery Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: slideUp()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `slideUp()` function slides up (hides) the selected element with the specified
    speed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of its syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Takes speed in milliseconds and the callback function as parameters. The values
    taken as parameters are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Fast`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Slow`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Time` in milliseconds'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This does not return anything.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This function hides the selected element with a nice sliding effect in the upward
    direction.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of its usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Required HTML Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Required jQuery Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: slideToggle()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `slideToggle()` function toggles between `slideUp()` and `slideDown()` for
    the selected element with the specified speed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of its syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This takes speed in milliseconds and the callback function as parameters. The
    values taken as parameters are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Fast`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Slow`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Time` in milliseconds'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This does not return anything.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Just as `fadeToggle()` switches transitions between two states, `slideToggle()`
    can slide an element up or down.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of its usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Required HTML Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Required jQuery Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Callback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Multiple lines of statements are queued rather than being executed simultaneously.
    A callback function queues the statements and executes them one by one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Its syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: The object created can be used to add, remove, instantiate, and disable callbacks.
    The supported functions are `callbacks.add()`, `callbacks.remove()`, `callbacks.fire()`,
    and `callbacks.disable()`.
  prefs: []
  type: TYPE_NORMAL
- en: callbacks.add()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This function is used to add all the functions in an array that are to be called
    later.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This takes flags as strings as its parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This method returns the callback's object to which it is associated with, (this).
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `callbacks.add()` function adds the function to the callback array.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of its usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Required jQuery Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: callbacks.fire()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `callbacks.fire()` function invokes the callbacks in a list with any arguments
    that have been passed.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This takes a list of arguments to pass back to the callback list.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This returns the callback objects onto which it is attached.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `callbacks.fire()` function is used to invoke the callbacks in a list with
    the arguments. The preceding example could be referenced.
  prefs: []
  type: TYPE_NORMAL
- en: callbacks.remove()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `callbacks.remove()` function is used to remove a function from the array.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This takes flags as strings as its parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This returns the callbacks object onto which it is attached.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This removes the function from the callback array. The preceding example could
    be referenced.
  prefs: []
  type: TYPE_NORMAL
- en: callbacks.disable()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `callbacks.disable()` function disables the call of the next function in
    the array.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This does not take any parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This returns the callbacks object to which the object is attached.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The execution of the next function in the array is prevented using the `callbacks.disable()`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Chaining
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A varying amount of statements can be executed by chaining them on the same
    element. Each statement will be executed one after the other.
  prefs: []
  type: TYPE_NORMAL
- en: 'The value returned from each chained action is a new jQuery object. Chaining
    can be done by appending one action to the previous action; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Here, the actions `slideUp()` and `slideDown()` are performed one after the
    other.
  prefs: []
  type: TYPE_NORMAL
- en: jQuery and the document object model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The DOM defines a standard for accessing HTML and XML documents:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"The W3C Document Object Model (DOM) is a platform and language-neutral interface
    that allows programs and scripts to dynamically access and update the content,
    structure, and style of a document."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The following are some ways of DOM manipulation in jQuery:'
  prefs: []
  type: TYPE_NORMAL
- en: '`text()`: This sets or returns the text content of the selected elements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`html()`: This sets or returns the content of the selected elements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`val()`: This sets or returns the values of form fields'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jQuery traversing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can traverse through the elements in the order they are combined. All the
    elements are mostly combined in the form of a tree, and we can traverse them starting
    from the root.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Elements are not *combined* per se, but they are rather structured or modeled
    within the document object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![jQuery traversing](img/Image1541.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s take a look at the following description:'
  prefs: []
  type: TYPE_NORMAL
- en: The `<div>` element is the parent of `<ul>` and an ancestor of everything inside
    it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<ul>` element is the parent of both the `<li>` elements and a child of
    `<div>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The left `<li>` element is the parent of `<span>`, child of `<ul>`, and a descendant
    of `<div>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<span>` element is a child of the left `<li>` and a descendant of `<ul>`
    and `<div>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The two `<li>` elements are siblings (they share the same parent)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The right `<li>` element is the parent of `<b>`, child of `<ul>`, and a descendant
    of `<div>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<b>` element is a child of the right `<li>` and a descendant of `<ul>`
    and `<div>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ancestors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An ancestor is a parent!
  prefs: []
  type: TYPE_NORMAL
- en: We will cover three useful jQuery methods for traversing up the DOM tree in
    the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: parent()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `parent()` function returns the parent of selected element.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This takes no parameter, but it is called as a function of the jQuery object.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This returns the parent of the element.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This function returns the parent of the selected element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'parents():'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `parents():` function returns an array of parents of the selected element
    till root.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This takes no parameter but is called as a function of the jQuery object.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This function returns all the parents of an element.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `parents():` function returns an array of parents of the selected element
    till root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'parentsUntil():'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: The `parentsUntil()` method returns all ancestors between the `selector` and
    `stop` element.
  prefs: []
  type: TYPE_NORMAL
- en: An ancestor element is a parent, grandparent, great-grandparent, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Stop an optional parameter that indicates where to stop the search for matching
    ancestor elements. Filter an optional parameter usually an expression to narrow
    down the search between selector and stop.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This returns all parents between the two selected elements.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This function returns the parents between two selected elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Descendants
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A child of the parent is called its descendant.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we will cover two useful jQuery methods for traversing
    down the DOM tree.
  prefs: []
  type: TYPE_NORMAL
- en: children()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `children()` function returns the children of the selected element.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This takes no parameters but it is called as a function of the jQuery object.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This returns an array of HTML elements that are children of the target element.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This function returns the children of the selected element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: find()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `find()` function returns an array of children up to the child that has
    no children of its own, which is also called a **leaf**.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `find()` function takes the HTML element as parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This returns all the children of the target element.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This function returns an array of children up to the leaf of the tree:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Siblings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Siblings are elements that share a same parent.
  prefs: []
  type: TYPE_NORMAL
- en: There are many useful jQuery methods for traversing sideways in the DOM tree,
    which we cover here.
  prefs: []
  type: TYPE_NORMAL
- en: siblings()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: The `siblings()` function returns all the siblings of the selected element.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Filter is an optional parameter usually an expression to narrow down the search
    among all siblings.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This returns all the siblings of the element.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This function returns all the siblings of the selected element using the `filter`
    parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: next()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Filter is an optional parameter usually an expression to narrow down the search
    for next sibling.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This takes no parameters, but is called as a function of the jQuery object.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This returns the next siblings of the element.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This function returns the next siblings of the selected element using the `filter`
    parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: nextAll()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: The `nextAll()` function returns an array of the next siblings of the selected
    element.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Filter is an optional parameter usually an expression to narrow down the search
    for all next sibling.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This returns an array of all the next siblings of the target element.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This function returns an array of the next siblings of the selected element
    using the parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: nextUntil()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: The `nextUntil()` function returns an array of next siblings of the selected
    element between two specified elements.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Stop an optional parameter that indicates where to stop the search for next
    matching sibling elements.
  prefs: []
  type: TYPE_NORMAL
- en: Filter an optional parameter usually an expression to narrow down the search
    for sibling elements between selector and stop.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This returns all the next siblings of the element.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This function returns an array of next siblings of the selected element between
    two elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: prev()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: The `prev()` function returns the previous siblings of the selected element.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Filter is an optional parameter usually an expression to narrow down the search
    for previous sibling.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `prev()` function returns the previous siblings of the element.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This function returns the previous siblings of the selected element using the
    `filter` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: prevAll()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: The `prevAll()` function returns an array of the previous siblings of the selected
    element.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Filter is an optional parameter usually an expression to narrow down the search
    for all previous siblings.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `prevAll()` function returns the array of all the previous siblings of the
    element.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This function returns an array of the previous siblings of the selected element
    using the parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: prevUntil()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `prevUntil()` function returns an array of the previous siblings of the
    selected element between two elements.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This takes the element up to which the search of siblings is limited.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This returns an array of all the previous siblings of the element.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This function returns an array of the previous siblings of the selected element
    and the parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: Filtering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The filtering method is used to locate a specific element based on its location.
  prefs: []
  type: TYPE_NORMAL
- en: first()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `first()` function outputs the first element of the selected elements.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `first()` function takes the selected element as parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This returns a jQuery object that stores a reference to the first item from
    an array of items matching the provided selector string.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This function outputs the first element of the selected elements. The following
    example outputs the first `H1` heading inside the `<div>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: last()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This function returns the last element of the selected elements.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `last()` function takes the selected element as parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This returns a jQuery object that stores a reference to the last item from an
    array of items matching the provided selector string.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This function outputs the last element of the selected elements. The following
    example outputs the last `H1` heading inside the `<div>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: eq()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `eq()` function returns the element specified at the corresponding index
    number, provided that we begin the numbering from `0`. Hence, the first element
    will have its index number as `0`, the second element will have the index number
    `1`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `eq()` function takes the selected element and the index number as parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This returns the element at the specified index number.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This function returns the element specified at the corresponding index number.
    The following example returns the fifth `div` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: filter()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `filter()` function is used to obtain a list of elements that satisfy a
    particular condition. All the elements that satisfy the specified condition will
    be returned.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The element to be searched and the condition that the element must satisfy are
    taken as parameters here.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This returns a list of elements that satisfy a specified condition.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `filter()` function is useful for searching and obtaining a list of elements
    that satisfy a specified condition. In the following example, we will search and
    obtain a list of all the `<div>` elements that have their class named as `Feedback`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `not()` method is the reverse of the `filter()` method. If you want to find
    elements that do not satisfy the mentioned condition, `not()` can be used.
  prefs: []
  type: TYPE_NORMAL
- en: Using AJAX in jQuery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Asynchronous** **JavaScript and XML** (**AJAX**) was the base building block
    of **Single Page Applications** (**SPAs**). This method is used to update the
    content of a web page without reloading the whole page. This method helps save
    precious resources and decreases the time taken for loading a page considerably,
    since only parts of the page are reloaded and not the entire page.'
  prefs: []
  type: TYPE_NORMAL
- en: More than often, you have visited the Google search page for searching answers
    to your questions. Have you noticed how the page displays results as you type
    into the search box and provides useful suggestions of related searches? Or the
    product filters on Amazon and Ebay websites. These effects are achieved with AJAX.
  prefs: []
  type: TYPE_NORMAL
- en: The jQuery Ajax load
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `load()` method loads data from a server and puts the returned data into
    the selected element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Its syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `load()` method take the `URL`, `data`, and `callback` as parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `callback` parameter can have the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`responseTxt`: This parameter contains the resulting content when successful'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`statusTxt`: This parameter contains the status of the request, that is, `success`,
    `notmodified`, `error`, `timeout`, `parsererror`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xhr`: This parameter contains the `XMLHttpRequest` object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The data from the URL is placed in the selected element.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `load()` method loads data from a server and puts the returned data into
    the selected element. The following example loads the `Sample.txt` file into the
    specified `<div>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: jQuery Ajax Get
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Get` request gets the data from the server with an HTTP `GET` request:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GET`: This requests data from a specified resource'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Its syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This takes the URL and callback as parameters. Here the `callback` parameter
    is optional.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Get` request returns the data fetched from the URL.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `Get` request gets the data from the server with an HTTP `GET` request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'The required HTML file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will fetch the data from the html file and the line **This
    is the data from the Sample.html** will be displayed in an alert box on triggering.
  prefs: []
  type: TYPE_NORMAL
- en: jQuery Ajax Post
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Post` request gets data from the server with an HTTP `POST` request:'
  prefs: []
  type: TYPE_NORMAL
- en: '`POST`: This requests data from a specified resource'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Its syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This takes `URL`, `data`, and `callback` as parameters. Here, the `data` and
    `callback` parameters are optional.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This returns the data fetched from the URL.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This gets data from the server with an HTTP `POST` request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'The required HTML file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will fetch the data from the HTML file and **This is the
    data from the Sample.html** will be displayed in an alert box when triggered.
  prefs: []
  type: TYPE_NORMAL
- en: Miscellaneous jQuery functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are a few more jQuery functions.
  prefs: []
  type: TYPE_NORMAL
- en: noConflict()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Different scripts cannot work at the same time. Hence, in order to remove the
    conflicts, we use the `noConflict()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Its syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An optional parameter for this method is `removeAll`. This parameter is used
    to release the control over all jQuery variables. It's a Boolean value. If present,
    it indicates that the control over all values must be released.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This method does not return anything.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `$` symbol is used by various JavaScript libraries, which if used alongside
    jQuery may cause issues. The `noConflict()` function returns the control of the
    `$` symbol to the other library.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code shows how one event has to wait when the other event is
    in process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: param()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `param()` method is used to create a serialized representation of an object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Its syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Object` and `trad` are the parameters used in this function. `Trad` is an
    optional parameter and is used when a traditional param serialization is needed.
    This parameter is optional.'
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This returns a serialized representation of the object.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `param()` method is used to generate a serialized representation of an
    object or an array. This is mostly used where a query string is to be generated.
    The following example creates a query string for the student object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: index()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `index()` method is used to find out the position of an element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Its syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The element whose position is to be found is taken as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This method returns the index position of the first occurrence of the specified
    element, which is relative to the selector or specified element.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `index()` method is used to get the position of the element that is passed
    as a parameter. The first occurrence of that element is searched for and its position
    is returned. If the particular element is not found, then `-1` is returned. The
    position numbering begins at `0`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example finds the position of the `div` element and returns its
    index in an alert box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: each()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `each()` function is used to run a specific function for every element that
    matches the criteria.
  prefs: []
  type: TYPE_NORMAL
- en: 'Its syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The only parameter this takes is the `function(index, element)`. Here the position
    of the selector can be specified at `index` and the element can be specified in
    `element`.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This method does not return anything.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `each()` function runs the specified function for each and every element
    that matches the criteria. In the following example, an alert is created every
    time the `<div>` tag is encountered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: data()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `data()` method is used to obtain data from the selected element. It is
    also used to submit data to the selected element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Its syntax is as follows: `$(selector).data(name)`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: To attach data to element, parameters passed are name and value. that name is
    then used to retrieve the data value.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This returns data from the selected element.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `data()` function is used to attach data to or from an element. In the
    following example, we first attach the data to the `<div>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: removeData()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `removeData()` method is used to remove data that was previously attached
    to the element with the `data()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Its syntax is `$(selector).removeData(name)`.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The name of the data that is to be removed is taken as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Returns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This does not return anything.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As the name suggests, the `removeData()` method is used to remove data that
    was already set. The following example removes data that was set on the `<div>`
    tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: jQuery plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Plugins are used to create a modular part of an application using various elements
    that can be used in multiple projects. Here is a simple demonstration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more support on creating custom plugins, you can visit [https://learn.jquery.com/plugins/basic-plugin-creation/](https://learn.jquery.com/plugins/basic-plugin-creation/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The jQuery community is huge. Developers have made some really great jQuery
    plugins and extensions that you can use in your projects. All these projects are
    available free of cost; however, there are some paid options too. The following
    are some great jQuery plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NIVO Slider**: This is one of the oldest and most popular image gallery plugins
    by **Dev7Studios**. It has a built-in image cropping system and comes with many
    themes and visual transitions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**nanoGALLERY**: This is another great image gallery plugin that comes with
    navigation, lightbox, lazy load, thumbnails, and many more goodies. It is also
    compatible with Bootstrap.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MixItUp**: This plugin will help you make AJAX filters for your portfolio
    and galleries with smooth animations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**jQuery Knob**: This is an extremely innovative jQuery plugin that makes touchable
    and clickable dials. Even if you are not using it in your projects, you should
    definitely take a look at its implementation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tubular**: This plugin lets you set a YouTube video as your web page''s background.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Arc Text**: This plugin converts your text into arc shapes. You can use your
    mouse to push and pull the text to shape them in arcs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: jQuery resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are hungry for more jQuery goodies, head over to this great website called
    **jQuery Rain** at [www.jqueryrain.com](http://www.jqueryrain.com). They have
    over 3500 jQuery plugins and tutorials with working demonstrations and sample
    codes.
  prefs: []
  type: TYPE_NORMAL
