["```js\nclass MyView extends Backbone.View {\n  constructor(options) {\n    super(options);\n    template: _.template($(\"#my-template\").html());\n  }\n\n  render() {\n       var data = this.model.toJSON();\n    var renderedHtml = this.template(data);\n    this.$el.html(renderedHtml);\n    return this;\n  }\n}\n```", "```js\n    $(\"#my-template\").html()\n\n    ```", "```js\n    _.template($(\"#my-template\").html())\n\n    ```", "```js\n    var data = this.model.toJSON()\n\n    ```", "```js\n    renderedHtml = this.template(data)\n\n    ```", "```js\n    this.$el.html(renderedHtml)\n\n    ```", "```js\nclass ModelView extends Backbone.View {\n  render() {\n    var data = this.serializeData();\n\n    // Compile the template\n    var renderedHtml = _.template(this.template, data);\n\n    // Put the result in the DOM\n    this.$el.html(renderedHtml);\n    return this;\n  }\n\n  serializeData() {\n    var data;\n\n    // Serialize only if a model is present\n    if (this.model) {\n      data = this.model.toJSON();\n    }\n\n    return data;\n  }\n});\n```", "```js\n  class ModelView extends Backbone.View {  \n    // Compile template with underscore templates. This method\n    // can be redefined to implemente another template engine\n    // like Handlebars or Jade\n    compileTemplate() {\n      var $el = $(this.template);\n      return _.template($el.html());\n    }\n\n    // ...\n  }\n```", "```js\nclass ModelView extends Backbone.View {\n  render() {\n    // Get JSON representation of the model\n    var data = this.serializeData();\n    var renderedHtml;\n\n    // If template is a function assume that is a compiled\n    // template, if not assume that is a CSS selector where\n    // the template is defined and is compatible with\n    // underscore templates\n    if (_.isFunction(this.template)) {\n      renderedHtml = this.template(data);\n    } else if (_.isString(this.template)) {\n      var compiledTemplate = this.compileTemplate();\n      renderedHtml = compiledTemplate(data);\n    }\n\n    this.$el.html(renderedHtml);\n    return this;\n  }\n\n  // …\n}\n```", "```js\nvar contact = new Backbone.Model({\n  name: 'John Doe',\n  phone: '5555555'\n});\n\nvar ContactView extends ModelView {\n  constructor(options) {\n    super(options);\n    this.template = $('#contact-template').html();\n  }\n\n  // ... anything else like event handlers\n}\n\nvar contactView = new ContactView({\n  model: contact,\n  el: 'body'\n});\ncontactView.render();\n```", "```js\nclass CollectionView extends Backbone.View {\n  render() {\n    // Render a view for each model in the collection\n    var html = this.collection.map(model => {\n      var view = new this.modelView(model);\n      view.render();\n      return view.$el;\n    });\n\n    // Put the rendered items in the DOM\n    this.$el.html(html);\n    return this;\n  }\n}\n```", "```js\nclass MyModelView extends ModelView {\n  // …\n)\n\nclass MyView extends CollectionView {\n  constructor(options) {\n    super(options);\n    this.el = '#main';\n    this.modelView = MyModelView;\n  }\n}\n\nvar view = new MyView({collection: someCollection});\nview.render();\n```", "```js\nclass CollectionView extends Backbone.View {\n  initialize() {\n    this.listenTo(this.collection, 'add', this.addModel);\n  }\n\n  // ...\n}\n```", "```js\nvar CollectionView = Backbone.View.extend({\n  // ...\n  // Render a model when is added to the collection\n  modelAdded(model) {\n    var view = this.renderModel(model);\n    this.$el.append(view.$el);\n  }\n\n  render() {\n    // Render a view for each model in the collection\n    var html = this.collection.map(model => {\n      var view = this.renderModel(model);\n      return view.$el;\n    });\n\n    // Put the rendered items in the DOM\n    this.$el.html(html);\n    return this;\n  }\n\n  renderModel(model) {\n    // Create a new view instance, modelView should be\n    // redefined as a subclass of Backbone.View\n    var view = new this.modelView({model: model});\n\n    // Keep track of which view belongs to a model\n    this.children[model.cid] = view;\n\n    // Re-trigger all events in the children views, so that\n    // you can listen events of the children views from the\n    // collection view\n    this.listenTo(view, 'all', eventName => {\n      this.trigger('item:' + eventName, view, model);\n    });\n\n    view.render();\n    return view;\n  }\n}\n```", "```js\nvar myCollectionView = new CollectionView({...});\n\nmyCollectionView.on('item:does:something', (view, model) => {\n  // Do something with the model or the view\n});\n```", "```js\nfunction modelRemoved(model) {\n  var view = getViewForModel(model); // Find view for this model\n  view.destroy();\n}\n```", "```js\nclass CollectionView extends Backbone.View {\n  initialize() {\n    this.children = {};\n    this.listenTo(this.collection, 'add', this.modelAdded);\n    this.listenTo(this.collection, 'remove', this.modelRemoved);\n  }\n\n  // ...\n\n  // Close view of model when is removed from the collection\n  modelRemoved(model) {\n    var view = this.children[model.cid];\n\n    if (view) {\n      view.remove();\n      this.children[model.cid] = undefined;\n    }\n  }\n\n  // ...\n\n  renderModel(model) {\n    // Create a new view instance, modelView should be\n    // redefined as a subclass of Backbone.View\n    var view = new this.modelView({model: model});\n\n    // Keep track of which view belongs to a model\n    this.children[model.cid] = view;\n\n    // Re-trigger all events in the children views, so that\n    // you can listen events of the children views from the\n    // collection view\n    this.listenTo(view, 'all', eventName => {\n      this.trigger('item:' + eventName, view, model);\n    });\n\n    view.render();\n    return view;\n  }\n}\n```", "```js\nclass CollectionView extends Backbone.View {\n  // ...\n\n  // Close view of model when is removed from the collection\n  modelRemoved(model) {\n    if (!model) return;\n\n    var view = this.children[model.cid];\n    this.closeChildView(view);\n  }\n\n  // ...\n\n  // Called to close the collection view, should close\n  // itself and all the live childrens\n  remove() {\n    Backbone.View.prototype.remove.call(this);\n    this.closeChildren();\n  }\n\n  // Close all the live childrens\n  closeChildren() {\n    var children = this.children || {};\n\n    // Use the arrow function to bind correctly the \"this\" object\n    _.each(children, child => this.closeChildView(child));\n  }\n\n  closeChildView(view) {\n    // Ignore if view is not valid\n    if (!view) return;\n\n    // Call the remove function only if available\n    if (_.isFunction(view.remove)) {\n      view.remove();\n    }\n\n    // Remove event handlers for the view\n    this.stopListening(view);\n\n    // Stop tracking the model-view relationship for the\n    // closed view\n    if (view.model) {\n      this.children[view.model.cid] = undefined;\n    }\n  }\n}\n```", "```js\nclass CollectionView extends Backbone.View {\n  initialize() {\n    // ...\n    this.listenTo(this.collection, 'reset', this.render);\n  }\n\n  // ...\n}\n```", "```js\nclass CollectionView extends Backbone.View.extend({\n  // ...\n  render () {\n    // Clean up any previous elements rendered\n    this.closeChildren();\n\n    // Render a view for each model in the collection\n    var html = this.collection.map(model => {\n      var view = this.renderModel(model);\n      return view.$el;\n    });\n\n    // Put the rendered items in the DOM\n    this.$el.html(html);\n    return this;\n  }\n\n  // ...\n}\n```", "```js\nvar mainRegion = new Region({el: '#main'});\nvar contactViewer = new ContactViewer({model: contact});\n\ncontactViewer.on('edit:contact', function(contact) {\n  var editContact = new EditContactView({ model: contact });\n  mainRegion.show(editContact);\n});\n\nmainRegion.show(contactViewer);\n```", "```js\nclass Region {\n  constructor(options) {\n    this.el = options.el;\n  }\n\n  // Closes any active view and render a new one\n  show(view) {\n    this.closeView(this.currentView);\n    this.currentView = view;\n    this.openView(view);\n  }\n\n  closeView(view) {\n    // Only remove the view when the remove function\n    // is available\n    if (view && view.remove) {\n      view.remove();\n    }\n  }\n\n  openView(view) {\n    // Be sure that this.$el exists\n    this.ensureEl();\n\n    // Render the view on the this.$el element\n    view.render();\n    this.$el.html(view.el);\n  }\n\n  // Create the this.$el attribute if do not exists\n  ensureEl() {\n    if (this.$el) return;\n    this.$el = $(this.el);\n  }\n\n  // Close the Region and any view on it\n  remove() {\n    this.closeView(this.currentView);\n  }\n}\n```", "```js\nview.render();\nthis.$el.html(view.el);\n```", "```js\nvar AppLayout = new Layout({\n  template: $('#app-layout').html(),\n  regions: {\n    header: 'header',\n    sicebar: '#sidebar',\n    footer: 'footer',\n    main: '#main'\n  }\n});\n\nVar layout = new AppLayout({ el: 'body' });\nvar header = new HeaderView();\n\nlayout.render();\nlayout.getRegion('header').show(header);\n```", "```js\nclass Layout extends ModelView {\n  render() {\n    // Clean up any rendered DOM\n    this.closeRegions();\n\n    // Render the layout template\n    var result = ModelView.prototype.render.call(this);\n\n    // Creand and expose the configurated regions\n    this.configureRegions();\n    return result;\n  }\n\n  configureRegions() {\n    var regionDefinitions = this.regions || {};\n\n    if (!this._regions) {\n      this._regions = {};\n    }\n\n    // Create the configurated regions and save a reference\n    // in the this._regions attribute\n    _.each(regionDefinitions, (selector, name) => {\n      let $el = this.$(selector);\n      this._regions[name] = new Region({el: $el});\n    });\n  }\n\n  // Get a Region instance for a named region\n  getRegion(regionName) {\n    // Ensure that regions is a valid object\n    var regions = this._regions || {};\n    return regions[regionName];\n  }\n\n  // Close the layout and all the regions on it\n  remove(options) {\n    ModelView.prototype.remove.call(this, options);\n    this.closeRegions();\n  }\n\n  closeRegions() {\n    var regions = this._regions || {};\n\n    // Close each active region\n    _.each(regions, region => {\n      if (region && region.remove) region.remove();\n    });\n  }\n}\n```", "```js\n<!doctype html>\n<html lang=\"\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>mastering backbone design</title>\n    <meta name=\"description\" content=\"\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n    <link rel=\"shortcut icon\" href=\"/favicon.ico\">\n    <link rel=\"apple-touch-icon\" href=\"/apple-touch-icon.png\">\n    <!-- Place favicon.ico and apple-touch-icon.png in the root directory -->\n\n    <link rel=\"stylesheet\" href=\"css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"css/sweetalert.css\">\n    <link rel=\"stylesheet\" href=\"css/pnotify.custom.min.css\">\n    <link rel=\"stylesheet\" href=\"css/font-awesome.min.css\">\n    <link rel=\"stylesheet\" href=\"css/main.css\">\n  </head>\n  <body>\n    <!--[if lt IE 10]>\n      <p class=\"browsehappy\">You are using an <strong>outdated</strong> browser. Please <a href=\"http://browsehappy.com/\">upgrade your browser</a> to improve your experience.</p>\n    <![endif]-->\n\n    <nav class=\"navbar\">\n      <div class=\"container\">\n        <div class=\"navbar-header\">\n          <a class=\"navbar-brand\" href=\"#\">\n            Mastering Backbone.js\n          </a>\n        </div>\n      </div>\n    </nav>\n\n    <div id=\"main\" class=\"container\"></div>\n\n    <script src=\"img/jquery-2.1.4.min.js\"></script>\n    <script src=\"img/bootstrap.min.js\"></script>\n    <script src=\"img/sweetalert.min.js\"></script>\n    <script src=\"img/pnotify.custom.min.js\"></script>\n    <script src=\"img/underscore-min.js\"></script>\n    <script src=\"img/backbone-min.js\"></script>\n\n  </body>\n</html>\n```", "```js\n// apps/contacts/contactList.js\nshowList(contacts) {\n  // Create the views\n  var layout = new ContactListLayout();\n  var actionBar = new ContactListActionBar();\n  var contactList = new ContactListView({collection: contacts});\n\n  // Show the views\n  this.region.show(layout);\n  layout.getRegion('actions').show(actionBar);\n  layout.getRegion('list').show(contactList);\n\n  this.listenTo(contactList, 'item:contact:delete',\n    this.deleteContact);\n}\n```", "```js\n// index.html\n<script id=\"contact-list-layout\" type=\"text/template\">\n  <div class=\"actions-bar-container\"></div>\n  <div class=\"list-container\"></div>\n  <div class=\"footer text-muted\">\n    © 2015\\. <a href=\"#\">Mastering Backbone.js</a> by <a href=\"https://twitter.com/abieealejandro\" target=\"_blank\">Abiee Alejandro</a>\n  </div>\n</script>\n```", "```js\n// apps/contacts/contactList.js\nclass ContactListLayout extends Layout {\n  constructor(options) {\n    super(options);\n    this.template = '#contact-list-layout';\n    this.regions = {\n      actions: '.actions-bar-container',\n      list: '.list-container'\n    };\n  }\n\n  get className() {\n    return 'row page-container';\n  }\n}\n```", "```js\n// apps/contacts/contactList.js\nclass ContactListView extends CollectionView {\n  constructor(options) {\n    super(options);\n    this.modelView = ContactListItemView;\n  }\n\n  get className() {\n    return 'contact-list';\n  }\n}\n```", "```js\n// index.html\n<script id=\"contact-list-item\" type=\"text/template\">\n  <div class=\"box thumbnail\">\n    <div class=\"photo\">\n      <img src=\"img/250x250\"\n        alt=\"Contact photo\" />\n      <div class=\"action-bar clearfix\">\n        <div class=\"action-buttons pull-right\">\n          <button id=\"delete\"\n            class=\"btn btn-danger btn-xs\">delete</button>\n          <button id=\"view\"\n            class=\"btn btn-primary btn-xs\">view</button>\n        </div>\n      </div>\n    </div>\n    <div class=\"caption-container\">\n      <div class=\"caption\">\n        <h5><%= name %></h5>\n        <% if (phone) { %>\n          <p class=\"phone no-margin\"><%= phone %></p>\n        <% } %>\n        <% if (email) { %>\n          <p class=\"email no-margin\"><%= email %></p>\n        <% } %>\n        <div class=\"bottom\">\n          <ul class=\"social-networks\">\n            <% if (facebook) { %>\n            <li>\n              <a href=\"<%= facebook %>\" title=\"Google Drive\">\n                <i class=\"fa fa-facebook\"></i>\n              </a>\n            </li>\n            <% } %>\n            <% if (twitter) { %>\n            <li>\n              <a href=\"<%= twitter %>\" title=\"Twitter\">\n                <i class=\"fa fa-twitter\"></i>\n              </a>\n            </li>\n            <% } %>\n            <% if (google) { %>\n            <li>\n              <a href=\"<%= google %>\" title=\"Google Drive\">\n                <i class=\"fa fa-google-plus\"></i>\n              </a>\n            </li>\n            <% } %>\n            <% if (github) { %>\n            <li>\n              <a href=\"<%= github %>\" title=\"Github\">\n                <i class=\"fa fa-github\"></i>\n              </a>\n            </li>\n            <% } %>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </div>\n</script>\n```", "```js\n// apps/contacts/contactList.js\nclass ContactListItemView extends ModelView {\n  constructor(options) {\n    super(options);\n    this.template = '#contact-list-item';\n  }\n\n  get className() {\n    return 'col-xs-12 col-sm-6 col-md-3';\n  }\n\n  get events() {\n    return {\n      'click #delete': 'deleteContact',\n      'click #view': 'viewContact'\n    };\n  }\n\n  initialize(options) {\n    this.listenTo(options.model, 'change', this.render);\n  }\n\n  deleteContact() {\n    this.trigger('contact:delete', this.model);\n  }\n\n  viewContact() {\n    var contactId = this.model.get('id');\n    App.router.navigate(`contacts/view/${contactId}`, true);\n  }\n}\n```", "```js\n<script id=\"contact-list-action-bar\" type=\"text/template\">\n  <button class=\"btn btn-lg btn-success\">\n    Create a new contact\n  </button>\n</script>\n```", "```js\n// apps/contacts/contactList.js\nclass ContactListActionBar extends ModelView {\n  constructor(options) {\n    super(options);\n    this.template = '#contact-list-action-bar';\n  }\n\n  get className() {\n    return 'options-bar col-xs-12';\n  }\n\n  get events() {\n    return {\n      'click button': 'createContact'\n    };\n  }\n\n  createContact() {\n    App.router.navigate('contacts/new', true);\n  }\n}\n```", "```js\n<script id=\"contact-view-layout\" type=\"text/template\">\n  <div class=\"row page-container\">\n    <div id=\"contact-widget\"\n      class=\"col-xs-12 col-sm-4 col-md-3\"></div>\n    <div class=\"col-xs-12 col-sm-8 col-md-9\">\n      <div class=\"row\">\n        <div id=\"about-container\"></div>\n        <div id=\"call-log-container\"></div>\n      </div>\n    </div>\n  </div>\n  <div class=\"footer text-muted\">\n    © 2015\\. <a href=\"#\">Mastering Backbone.js</a> by <a href=\"https://twitter.com/abieealejandro\" target=\"_blank\">Abiee Alejandro</a>\n  </div>\n</script>\n```", "```js\n// apps/contacts/contactViewer.js\nclass ContactViewLayout extends Layout {\n  constructor(options) {\n    super(options);\n    this.template = '#contact-view-layout';\n    this.regions = {\n      widget: '#contact-widget',\n      about: '#about-container'\n    };\n  }\n\n  get className() {\n    return 'row page-container';\n  }\n}\n```", "```js\n// apps/contacts/contactViewer.js\nclass ContactAbout extends ModelView {\n  constructor(options) {\n    super(options);\n    this.template = '#contact-view-about';\n  }\n\n  get className() {\n    return 'panel panel-simple';\n  }\n\n  get events() {\n    return {\n      'click #back': 'goToList',\n      'click #delete': 'deleteContact',\n      'click #edit': 'editContact'\n    };\n  }\n\n  goToList() {\n    App.router.navigate('contacts', true);\n  }\n\n  deleteContact() {\n    this.trigger('contact:delete', this.model);\n  }\n\n  editContact() {\n    var contactId = this.model.get('id');\n    App.router.navigate(`contacts/edit/${contactId}`, true);\n  }\n}\n```", "```js\n<script id=\"contact-form-layout\" type=\"text/template\">\n  <div id=\"preview-container\"\n    class=\"col-xs-12 col-sm-4 col-md-3\"></div>\n  <div id=\"form-container\"\n    class=\"col-xs-12 col-sm-8 col-md-9\"></div>\n\n  <div class=\"footer text-muted\">\n    © 2015\\. <a href=\"#\">Mastering Backbone.js</a> by <a href=\"http://themeforest.net/user/Kopyov\" target=\"_blank\">Abiee Alejandro</a>\n  </div>\n</script>\n```", "```js\n// apps/contacts/contactEditor.js\nclass ContactFormLayout extends Layout {\n  constructor(options) {\n    super(options);\n    this.template = '#contact-form-layout';\n    this.regions = {\n      preview: '#preview-container',\n      form: '#form-container'\n    };\n  }\n\n  get className() {\n    return 'row page-container';\n  }\n}\n```", "```js\n// index.html\n<script id=\"contact-form\" type=\"text/template\">\n  <div class=\"panel panel-simple\">\n    <div class=\"panel-heading\">Edit contact</div>\n    <div class=\"panel-body\">\n      <form class=\"form-horizontal\">\n        <div class=\"form-group\">\n          <label for=\"name\"\n            class=\"col-sm-2 control-label\">Name</label>\n          <div class=\"col-sm-10\">\n            <input id=\"name\" type=\"text\"\n              class=\"form-control\" placeholder=\"Full name\"\n              value=\"<%= name %>\" />\n          </div>\n        </div>\n        // ...\n\n        <hr />\n\n        <h4>Contact info</h4>\n        <div class=\"form-group\">\n          <label for=\"name\"\n            class=\"col-sm-2 control-label\">Phone</label>\n          <div class=\"col-sm-10\">\n            <input id=\"name\" type=\"text\"\n              class=\"form-control\"\n              placeholder=\"(123) 456 7890\" value=\"<%= phone %>\" />\n          </div>\n        </div>\n        // ...\n      </form>\n    </div>\n    <div class=\"panel-footer clearfix\">\n      <div class=\"panel-buttons\">\n        <button id=\"cancel\" class=\"btn btn-default\">Cancel</button>\n        <button id=\"save\" class=\"btn btn-success\">Save</button>\n      </div>\n    </div>\n  </div>\n</script>\n```", "```js\n// apps/contacts/contactEditor.js \nclass ContactForm extends ModelView {\n  constructor(options) {\n    super(options);\n    this.template = '#contact-form';\n  }\n\n  get className() {\n    return 'form-horizontal';\n  }\n\n  get events() {\n    return {\n      'click #save': 'saveContact',\n      'click #cancel': 'cancel'\n    };\n  }\n\n  serializeData() {\n    return _.defaults(this.model.toJSON(), {\n      name: '',\n      age: '',\n      phone: '',\n      email: '',\n      address1: '',\n      address2: ''\n    });\n  }\n\n  saveContact(event) {\n    event.preventDefault();\n    this.model.set('name', this.getInput('#name'));\n    this.model.set('phone', this.getInput('#phone'));\n    this.model.set('email', this.getInput('#email'));\n    this.model.set('address1', this.getInput('#address1'));\n    this.model.set('address2', this.getInput('#address2'));\n    this.model.set('facebook', this.getInput('#facebook'));\n    this.model.set('twitter', this.getInput('#twitter'));\n    this.model.set('google', this.getInput('#google'));\n    this.model.set('github', this.getInput('#github'));\n    this.trigger('form:save', this.model);\n  }\n\n  getInput(selector) {\n    return this.$el.find(selector).val();\n  }\n\n  cancel() {\n    this.trigger('form:cancel');\n  }\n}\n```", "```js\n// apps/contacts/contactEditor.js \n  cancel() {\n    // Warn user before make redirection to prevent accidental\n    // cencel\n    App.askConfirmation('Changes will be lost', isConfirm => {\n      if (isConfirm) {\n        App.router.navigate('contacts', true);\n      }\n    });\n  }\n```", "```js\n// apps/contacts/edit-contact.js \n  saveContact(contact) {\n    contact.save(null, {\n      success() {\n        // Redirect user to contact list after save\n        App.notifySuccess('Contact saved');\n        App.router.navigate('contacts', true);\n      },\n      error() {\n        // Show error message if something goes wrong\n        App.notifyError('Something goes wrong');\n      }\n    });\n  }\n```", "```js\n// index.html\n// ...\n<div class=\"form-group\">\n  <label for=\"birthdate\">Birth date</label>\n  <input id=\"birthdate \" type=\"text\"\n    class=\"form-control\" value=\"<%= birthdate %>\" />\n//...\n```", "```js\nclass ContactForm extends ModelView {\n  // ...\n  serializeData() {\n    return _.defaults(this.model.toJSON(), {\n      name: '',\n      birthdate: '',\n      // ...\n    });\n  },\n  saveContact(event) {\n    event.preventDefault();\n    this.model.set('name', this.$el.find('#name').val());\n    this.model.set('birthdate',\n      this.$el.find('#birthdate').val()\n    );\n    // ...\n  },\n// ...\n});\n```", "```js\n// ... edit-contact.js\nclass ContactEditor {\n  // ...\n\n  showEditor(contact) {\n    var contactForm = new ContactForm({model: contact});\n    this.region.show(contactForm);\n    contactForm.$('#birthdate').datepicker();\n\n    this.listenTo(contactForm, 'form:save', this.saveContact);\n    this.listenTo(contactForm, 'form:cancel', this.cancel);\n  };\n};\n```", "```js\n// ... edit-contact.js\nvar ContactForm extends ModelView {\n  // ...\n  onRender() {\n    this.$('#birthdate').datepicker();\n  },\n  //...\n});\n```", "```js\nclass Region {\n// ...\n  openView(view) {\n    this.ensureEl();\n    view.render();\n    this.$el.html(view.el);\n  }\n// ...\n}\n```", "```js\nclass Region {\n// ...\n  openView(view) {\n    this.ensureEl();\n    view.render();\n    this.$el.html(view.el);\n\n    // Callback when the view is in the DOM\n    if (view.onShow) {\n      view.onShow();\n    }\n  }\n// ...\n}\n```", "```js\n// common.js\nclass CollectionView extends Backbone.View {\n  // ...\n  onShow() {\n    var children = this.children || {};\n    _.each(children, child => {\n      if (child.onShow) {\n        child.onShow();\n      }\n    });\n  }\n}\n```", "```js\n// apps/contacts/contactEditor.js\nclass ContactForm extends ModelView {\n  // ...\n\n  // Call the onShow method for each children\n  onShow() {\n    // Ensure that children exists\n    var children = this.children || {};\n\n    _.each(children, child => {\n      if (child.onShow) {\n        child.onShow();\n      }\n    });\n  }\n  //...\n}\n```"]