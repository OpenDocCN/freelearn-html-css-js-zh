- en: Chapter 14. Preparing for the Future
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mastering CSS is an essential skill—the technology is continually evolving,
    so in order to succeed, we must keep abreast of changes. PostCSS is a great tool
    that allows us to not only use CSS rules of today, but work with rules of the
    future. In this chapter, we'll take a look at some of the CSS syntax that makes
    up what is frequently referred to as CSS4, and how we can provide equivalent support
    using current CSS3 classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover a number of topics throughout this chapter, which will include
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding some of the risks of supporting future CSS standards today
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring using `cssnext` to provide support for future CSS syntax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with some of the existing plugins to convert CSS4 standards into current
    CSS3 code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examining how we can change existing plugins to add more support for new CSS4
    selectors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's make a start!
  prefs: []
  type: TYPE_NORMAL
- en: Supporting CSS4 styles today
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Style sheets have been in existence for over 35 years, with the original version
    of what we now know as CSS dating from the days of SGML in the 1980s.
  prefs: []
  type: TYPE_NORMAL
- en: We have come a long way since the original CSS standard was released in 1996—over
    the last few years, the standard for CSS4 has been developed, with new features
    such as `:not` or `:matches` pseudo-classes to better target elements, custom
    properties (or variables), and location-based links, such as `local-link`. Over
    the course of the next few pages, we're going to explore a few of these CSS4 features,
    and see how we can introduce support for them using current CSS3 equivalent code.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is one small thing that we need to clear up first—CSS4…does not exist.
    What? I hear you say. Surely it must, I''ve seen plenty online about it! Yes,
    it is true: CSS4 as a standard does exist, but *not as a single unique entity*.
    Let me explain.'
  prefs: []
  type: TYPE_NORMAL
- en: Previous iterations of CSS have been based around creating a single global standard,
    irrespective of how browser manufacturers decide to support elements that make
    up standard. It's for this reason that we had to rely heavily on vendor prefixes
    for some years, we still do, but most vendors have since removed prefixes from
    many of the more common attributes such as `border-radius` or `box-shadow`.
  prefs: []
  type: TYPE_NORMAL
- en: The key difference here, though, is that a decision was taken to deliver CSS4
    as a series of modules—CSS as a standard has become very heavy, with the resulting
    increase in time required for development becoming unsustainable. This is why
    we will see talk of CSS Modules, such as Custom Properties or Selectors—these
    can evolve as independent standards to a point that we may no longer refer to
    CSS as version X, but just CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Any reference to CSS4 within this chapter is purely to identify next generation
    styles we can implement using PostCSS plugins and CSS3 current standards.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, this aside, it''s time to get stuck in: PostCSS offers good support for
    some of the more common elements of we collectively call CSS4\. Let''s take a
    look to see what is available.'
  prefs: []
  type: TYPE_NORMAL
- en: Converting CSS4 styles for use
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The idea behind basing CSS4 around a series of modules was aimed at making it
    easier (and ultimately quicker) to update each standard; it does mean that modules
    will be in a state of flux, at least for the time being!
  prefs: []
  type: TYPE_NORMAL
- en: This said, there are some clear styles we can recreate using current CSS3 styles—one
    such example is CSS4 Selectors. Even though it is still in draft at the time of
    writing, a PostCSS plugin is available in the form of `postcss-selector-not` (from
    [https://github.com/postcss/postcss-selector-not](https://github.com/postcss/postcss-selector-not)).
    A sister style that is also available as a PostCSS plugin is `postcss-selector-matches`
    (available from [https://github.com/postcss/postcss-selector-matches](https://github.com/postcss/postcss-selector-matches))—these
    two are intended to replicate the `:not` negation and `:matches` pseudo-selectors
    that are coming as part of the new CSS4 standard.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on individual CSS4 selectors, take a look at the full list
    available at [http://css4-selectors.com/selectors/](http://css4-selectors.com/selectors/).
    This will also give you an indication of available browser support—this list will
    be updated with changes as selectors are ratified for use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking further afield, there are a small handful of plugins that provide support
    for upcoming CSS4 standards—in addition to the `:matches` and `:not` plugins,
    we can use any of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of plugin | Purpose of plugin |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `mq4-hover-shim` | Currently in beta, this plugin provides limited support
    for the Media Queries Level 4 hover media feature—it is available from [https://github.com/twbs/mq4-hover-shim](https://github.com/twbs/mq4-hover-shim).
    |'
  prefs: []
  type: TYPE_TB
- en: '| `host` | Working with the Shadow DOM? If you need to make `:host` selectors
    work properly with pseudo-classes, then this plugin is for you—the source is available
    at [https://github.com/vitkarpov/postcss-host](https://github.com/vitkarpov/postcss-host).
    |'
  prefs: []
  type: TYPE_TB
- en: '| `pseudo-class-any-link` | How many times have you had to add pseudo-selectors
    such as `:link` or `:visited` to your code? This PostCSS plugin fixes that—we
    can now use the proposed `:any-link` pseudo-class in CSS.Head over to [https://github.com/jonathantneal/postcss-pseudo-class-any-link](https://github.com/jonathantneal/postcss-pseudo-class-any-link)
    for more details. |'
  prefs: []
  type: TYPE_TB
- en: '| `postcss-initial` | The PostCSS Initial plugin resets a specified property''s
    value to what it was initially set in code (and not by the browser). For more
    details, head over to [https://github.com/maximkoretskiy/postcss-initial](https://github.com/maximkoretskiy/postcss-initial).
    |'
  prefs: []
  type: TYPE_TB
- en: '| `font-variant` | This plugin transforms `font-variant` settings to the equivalent
    `font-feature-settings value`—it is designed for special cases, when it is not
    possible to reproduce using normal means, for example, a slashed zero to differentiate
    between a 0 and an O—the former equates to zero.The source for the plugin is available
    at [https://github.com/postcss/postcss-font-variant](https://github.com/postcss/postcss-font-variant).
    |'
  prefs: []
  type: TYPE_TB
- en: '| `postcss-input-range` | This plugin allows us to style input range elements.
    We need to provide unprefixed CSS styles, and the plugin will automatically handle
    support for all of the various prefixes required to allow this element to be styled
    across different browsers.The source for this plugin can be downloaded from [https://github.com/jonathantneal/postcss-input-range](https://github.com/jonathantneal/postcss-input-range).
    |'
  prefs: []
  type: TYPE_TB
- en: 'Okay, let''s move on: I feel a demo coming! Let''s take a look at using the
    `postcss-selector-matches` property, to see how we can use it in action.'
  prefs: []
  type: TYPE_NORMAL
- en: Validating e-mail addresses
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How many times have you come across e-mail submissions from your site, where
    you aren't 100% sure your visitors have left a valid e-mail address?
  prefs: []
  type: TYPE_NORMAL
- en: If we leave aside exact numbers, it goes without saying that any requests submitted
    from any website must have a valid e-mail address; with the plethora of top level
    domains that are now available, it's even more critical that they be valid!
  prefs: []
  type: TYPE_NORMAL
- en: To help with this, we can use the `:invalid` and `:valid` attributes to style
    `<input>` fields—whilst they may not be able to tell if `.design` is a valid TLD
    (and yes, it is), they can at least cope with the basics of ensuring that you
    have a TLD present, an `@` symbol, and the name of a recipient.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can perform a test in your browser to gauge support for these and other
    CSS4 selectors—check out the CSS4 Selectors site, at [http://css4-selectors.com/](http://css4-selectors.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s knock up a simple example using the `postcss-selectors-matches` plugin
    for PostCSS, to see how we can style such fields:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start as always by firing up a Node.js command prompt session, then changing
    the working folder to our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the prompt, go ahead and enter this command, then press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Keep the window open, we will need it shortly. If all is well, we should see
    this appear:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Validating e-mail addresses](img/BO5194_14_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Next, extract a copy of the `T69 - matches pseudo-selector` folder from the
    code download that accompanies this book, and save it to the root of our project
    area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy `matches – pre-compile.css` from the `css`—completed version folder within
    `T69 - matches pseudo-selector`, and save it to the `src` folder at the root of
    our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `gulpfile.js` and `package.json` files from the `T69 - matches pseudo-selector`
    folder to the root of our project area, and rename it `matches.css`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Revert to the Node.js command prompt session from earlier, then at the prompt
    enter `gulp` and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If all is well, PostCSS will go away and compile our code into valid CSS—we
    should see the now familiar files appear in the `dest` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the contents of this `dest` folder to the `css` folder underneath `T69
    - matches pseudo-selector`, then try previewing the `matches.html` file in a browser.
    If all is well, we should see something akin to this:![Validating e-mail addresses](img/BO5194_14_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It''s a simple demo, and yes, somewhat contrived. At this level, it wouldn''t
    be necessary to use `:matches`, as it ends up generating more code than is necessary!
    But it does show how easy it is to apply the technique, and have it provide valid
    CSS, as in the case of our example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Validating e-mail addresses](img/BO5194_14_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Okay, let''s change tack: we will stay with the range theme for our next demo,
    but this time look at a more stylish example, where we can really go to town on
    transforming the appearance of our selected element.'
  prefs: []
  type: TYPE_NORMAL
- en: The range input element is one that has been traditionally hard to style, more
    often than not, we may end up resorting to using jQuery UI to change its appearance!
    Not so with CSS4—we can use a series of new CSS attributes to apply styles, without
    the use of any additional libraries. Let's take a look at this in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Supporting the new range input
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A quick question, how many times have you had to create a site where you needed
    to choose a value, say from 1 to 100? Or pick a specific opacity of color, from
    almost transparent to completely opaque?
  prefs: []
  type: TYPE_NORMAL
- en: Okay, perhaps they're an odd couple of questions to ask, but the eagle-eyed
    should spot that I am of course referring to using sliders, which we can adjust
    to select a specific value. There are different ways to add these to a page, but
    which in the main will require some help to style, perhaps the most recognizable
    tool being jQuery UI!
  prefs: []
  type: TYPE_NORMAL
- en: 'This is fine if we need to use jQuery UI in our pages to provide other functionality,
    but what if we only needed it for the slider? It''s a bit of overkill—thankfully,
    we can fix that with the use of the `postcss-input-range` plugin, available from
    [https://github.com/jonathantneal/postcss-input-range](https://github.com/jonathantneal/postcss-input-range).
    It''s time for that demo, so let''s knock up a quick example of how one can be
    styled to represent a progress bar:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the `postcss-input-range` plugin, for this, go ahead
    and fire up a Node.js command prompt, then change the working folder to our project
    area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the prompt, enter the following command, then press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If all is well, we should see something akin to this screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Supporting the new range input](img/BO5194_14_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Next, extract a copy of the `T70 - using range input` folder from the code download
    that accompanies this book. Go ahead and save it in our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `css` folder of `T70 - using range input`, copy the `range – pre-compile.css`
    file to the `src` folder of our project area, and rename it `range.css`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `gulpfile.js` and `package.json` files from the `T70 - using range
    input` folder to the root of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Revert to the Node.js command prompt window, then at the prompt enter `gulp`
    and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Gulp will now run our compilation process, if all is well, we should see the
    now familiar style sheet files appear in the `dest` folder, along with a map file
    in the maps subfolder. Copy these to the `css` folder under `T70 - using range
    input`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If all is well, we should see something akin to this screenshot when previewing
    the results in a browser:![Supporting the new range input](img/BO5194_14_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is nothing complicated in this demo, even though we've only scratched
    the surface of what is possible when styling the range element—for example, we
    can add datalists to define certain values to scroll through, such as specific
    times of the day.
  prefs: []
  type: TYPE_NORMAL
- en: Browser support is still limited, but for an idea of what is possible, check
    out [http://demo.agektmr.com/datalist/](http://demo.agektmr.com/datalist/); the
    CSS guru Chris Coyier also has a couple of articles on the use of range inputs
    on his site at [http://www.css-tricks.com](http://www.css-tricks.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'The real magic in our demo appears when we take a look at the compiled code—one
    of the key elements for styling a range input is the `range-thumb` attribute,
    which is the knob we use to select a value on the slider. Here are two examples
    of how our code now looks, with support added for Firefox:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Supporting the new range input](img/BO5194_14_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This has support for Internet Explorer (which has been superseded by Edge):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Supporting the new range input](img/BO5194_14_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When using this plugin, we don't have to worry about adding vendor prefixes—our
    original code contains just the unprefixed versions; the relevant prefixes will
    be added at compilation, until such time as they are no longer needed for styling
    our input element.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you would like help with styling the new range input element, then check
    out [http://danielstern.ca/range.css/](http://danielstern.ca/range.css/)—it's
    a useful tool!
  prefs: []
  type: TYPE_NORMAL
- en: Over the course of the last two demos, we've briefly scratched the surface of
    what is possible when using PostCSS—we've used the same format of Gulp task file
    to incorporate support for each plugin, which when run, has produced the requisite
    CSS style sheet for each demo. Nothing outrageous here, right? After all, it's
    followed the same principles we covered earlier, such as one plugin for one task…or
    can we do better?
  prefs: []
  type: TYPE_NORMAL
- en: Yes, by now you should know that I always like to go one better if I can. Remember
    how I said it is preferable to create tasks in our runner that worked on a one-to-one
    basis? Was each task in our (Gulp) file related to a specific plugin? Well, as
    someone once said, rules are meant to be broken—it's time to throw out the rulebook,
    and consider a different approach, at least for future syntax…
  prefs: []
  type: TYPE_NORMAL
- en: Supporting future syntax with cssnext
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A key part of supporting CSS4 is the constant state of flux that we must deal
    with, until such time as modules have been standardized. If we maintained our
    current approach, it would entail constant updates of any plugins we decided to
    use that relate to CSS4 attributes—this is clearly not sustainable!
  prefs: []
  type: TYPE_NORMAL
- en: Instead, we can use a single plugin pack, in this case `cssnext`, to manage
    support for a range of new features. The beauty, though, is that all of the features
    are enabled by default, and will only kick in when needed in the code. There will
    of course come a time when new features are supported natively, at this point,
    we can simply discard the compilation process without impacting the final result.
  prefs: []
  type: TYPE_NORMAL
- en: It's worth taking the time to get to know `cssnext`—let's dive in and take a
    look in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a site template with cssnext
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `cssnext` plugin is one of those exceptions to our guideline of one plugin
    per task; we call it using the plugin name, but in reality, it will perform a
    number of transformations at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: The plugin is available from [http://cssnext.io/](http://cssnext.io/). It is
    worth noting that an older version exists; we're using the newer version in this
    demo. The `cssnext` plugin was originally a complete system in its own right,
    before PostCSS became as popular as it is now.
  prefs: []
  type: TYPE_NORMAL
- en: The plugin contained options which didn't really belong to a plugin focused
    on the future of CSS, so the developers rewrote it to make `cssnext` simpler.
    At the same time, it was designed to be integrated into PostCSS, where we can
    use it at the same time as other plugins within our processor.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The plugin even has its own playground, which we can use to test if changes
    will produce the desired effect—check it out at [http://cssnext.io/playground/](http://cssnext.io/playground/).
  prefs: []
  type: TYPE_NORMAL
- en: Let's explore this plugin in more detail—we'll begin by installing it, before
    setting up code for our next demo.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up our demo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this next demo, we''re going to set up a basic template that can be used
    for a site—it''s not going to win any awards for style, but the aim here is to
    explore how easy it is to make the changes, not become top billing at the next
    awards ceremony! Let''s dive in and take a look at what we need to do:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by firing up a Node.js command prompt session then changing the
    working folder to the root of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the prompt, enter this command, then press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If all is well, we should see something akin to this screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Setting up our demo](img/BO5194_14_08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Next, go ahead and extract a copy of the `T71 - working with cssnext` folder
    from the code download that accompanies this book—save it to the root of our project
    area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the `T71 - working with cssnext` folder, save copies of the *styles.css*
    file to the `src` folder at the root of our project area, then `package.json`
    and `gulpfile.js` to the root of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Revert to the prompt we had open, then enter `gulp` and press `Enter`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Gulp will go away and compile our file, when it has completed, we will see the
    now familiar files appear in the `dest` folder at the root of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the contents of the `dest` folder at the root of our project area to the
    `css` folder within `T71 - working with cssnext` folder at the root of our project
    area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go ahead and preview `sitepage.html` from within the `T71 - working with cssnext`
    folder in a browser—if all is well, we should see something akin to this screenshot:![Setting
    up our demo](img/BO5194_14_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We''ve now seen the template for our site—there are several places where we
    have made changes to take advantage of the power of `cssnext`. For this, go ahead
    and open up a copy of the file `stylescss` from within the `css` folder of `T71
    - working with cssnext` folder that we saved to our project area—let''s explore
    what changes have been made:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Autoprefixer**: The plugin covers support for providing vendor prefixes for
    any future styles; any in the base file have been removed, and will be added during
    compilation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Media query ranges / custom queries**: Instead of using the existing format,
    which isn''t always clear, we can begin to use `>=` or `<=` to better express
    the range that we''re applying as part of our query. At the same time, we can
    use a custom query to define preset ranges at the top of our file, which can be
    used throughout the style sheet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nesting**: Fans of existing preprocessors such as SASS or Less will be familiar
    with the nesting principle; put simply, this allows us to nest styles inside each
    other. We can then adjust the selectors used for these rules, so that when compiled,
    each rule is transformed into valid CSS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Custom selectors**: Staying with the preprocessor theme, we can create custom
    values at the top of our code, and apply them as appropriate throughout.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**#rrggbbaa colors**: Traditionally, hex colors have been expressed as either
    three or six digit values; using `cssnext`, we can expand them to either four
    or eight digit values. The `cssnext` plugin will transpile them into standard
    RGBA values, with equivalent HEX values provided as a fallback mechanism.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rem units**: Traditionally, developers have used pixel values to apply sizes
    to elements or fonts. Pixel values don''t respect user settings in a browser,
    so may not resize as expected. To work around this, `em` units were introduced;
    the math behind calculating `em` values was simplified with the introduction of
    rem units. Today, some developers argue that pixel values should reign supreme;
    the `cssnext` plugin provides both pixel and rem units, which can be used where
    supported by browsers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'At first thought, you might expect to have to include a number of plugins,
    or a detailed configuration object; not so! Instead, all we need in our Gulp task
    file is this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up our demo](img/BO5194_14_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: I've always been a keen fan of keeping things simple—the `cssnext` plugin is
    a perfect example! Whilst we may need to update the plugin regularly to keep abreast
    of changes, we don't need to change our Gulp file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The plugin will simply transform those styles it finds that are supported by
    the plugin, and leave alone any not covered by the plugin. The beauty of this
    is that we can either let it run as is, or if we want disable functionality that
    is no longer needed, then we simply disable it within the configuration object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To prove that the changes we made work, we''ve turned our (non-responsive)
    template from this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up our demo](img/BO5194_14_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '…to this view, where our content clearly fits the smaller screen better:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up our demo](img/BO5194_14_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Even though it's only a small part of the changes made, is directly responsible
    for making our template responsive, it goes to show that incorporating `cssnext`
    into our processes is easier than you might think!
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, let''s move on: we''re going to take a look at a couple more plugins,
    but with a twist. We''ll first look at using a plugin to provide support for a
    new color being introduced as part of CSS4, before using it as a basis for fixing
    a keyword issue that should have been fixed a long time ago!'
  prefs: []
  type: TYPE_NORMAL
- en: Creating plugins to provide extra CSS4 support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout the course of this chapter, we've covered a number of plugins that
    handle support for the upcoming CSS4 standards, and explored how we can use the
    `cssnext` plugin pack to manage the transition to using these new styles.
  prefs: []
  type: TYPE_NORMAL
- en: There is more out there that we can do—the great thing about PostCSS is that
    we can absolutely write our own plugins to help bolster support for CSS4 attributes.
    To help prove this, over the next few pages we'll work our way through fixing
    some issues in CSS, and altering an existing CSS4 color plugin to add support
    for a different color; we'll start with adding a little color to our next demo,
    if you pardon the pun!
  prefs: []
  type: TYPE_NORMAL
- en: Adding future color support to CSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*"She made it to six. For almost twelve hours, she was six…"*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: There is something of a poignant twist to this next demo—the color `rebeccapurple`,
    which forms the basis for this next exercise, came about as a tribute to Eric
    Meyer's daughter, Rebecca, who passed away on her sixth birthday in June 2014,
    due to cancer.
  prefs: []
  type: TYPE_NORMAL
- en: As anyone who spends any time developing CSS styles will know, Eric has been
    a major advocate of web standards, and in particular CSS—it is often said that
    one would be hard pushed not to read a book about CSS during their development
    that had not been written by Eric! The community proposed the addition of `rebeccapurple`
    as a color in Rebecca's memory (it was her favorite color), and in recognition
    of Eric's contribution. It was announced by the CSS Working Group that the change
    had been approved, to be added as part of the upcoming CSS4 standard.
  prefs: []
  type: TYPE_NORMAL
- en: To help support the change for browsers that have not yet caught up, the developer
    Maxime Thirouin created a PostCSS plugin to transform the `rebeccapurple` color
    to the more compatible format of `rgb(102, 51, 153)`—the source for this plugin
    is available at [https://github.com/postcss/postcss-color-rebeccapurple](https://github.com/postcss/postcss-color-rebeccapurple).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the plugin in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the `postcss-color-rebeccapurple` plugin, so go ahead
    and fire up a Node.js command prompt, and change the working folder to our project
    root.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the prompt, go ahead and enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then press *Enter*—if all is well, we should see something akin to this screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Adding future color support to CSS](img/BO5194_14_13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Keep the window open—we'll need it shortly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, go ahead and extract a copy of the `T72 - adding rebeccapurple color`
    folder from the code download that accompanies this book—save the folder to the
    root of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `styles – pre-compile.css` from within the `T72 - adding rebeccapurple
    color` folder to the root `src` folder of our project area, and rename as `styles.css`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `gulpfile.js` and `package.json` files from the `T72 - adding rebeccapurple
    color` folder to the root of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Revert to the Node.js command prompt session, then enter `gulp` at the prompt
    and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When compilation has finished, copy the contents of the `dest` folder from the
    root of our project area to the `css` folder under `T72 - adding rebeccapurple
    color`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try previewing the results—if all is well, we should see this simple box, which
    has been backfilled with the color `rebeccapurple`:![Adding future color support
    to CSS](img/BO5194_14_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To prove it works, have a look at the `.css` file from within the `css` folder
    under `T72 - adding rebeccapurple color`—we should see the compiled RGB value
    within:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding future color support to CSS](img/BO5194_14_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can also validate this with a quick check using a site such as *ColorHexa.com*—check
    out [http://www.colorhexa.com/663399](http://www.colorhexa.com/663399); searching
    for `rebecca purple` will show the same page.
  prefs: []
  type: TYPE_NORMAL
- en: There is a perfect opportunity here—I believe that there is always something
    good that can come from something tragic. Leaving aside the *raison d'être* for
    this plugin, we can use it as a basis for adding support for additional colors
    from the CSS4 Color Module standard.
  prefs: []
  type: TYPE_NORMAL
- en: 'The changes we need to make are relatively straightforward, and can easily
    form the basis for a new plugin. Let''s take a look at what''s involved; for this
    demo we will use `burlywood`, which is a light shade of brown:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start by editing our CSS file—open up `styles.css` in the `src` folder
    under the root of our project area and change the highlighted line as indicated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to update the `rebeccapurple` plugin file to change existing
    color references to use the new color—we''ll start with the initial declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The plugin `index.js` file can be found within the `node_modules\postcss-color-rebeccapurple\`
    folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We then need to change the check made in the code that changes each instance
    of the color:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For now, go ahead and save the file—yes, the plugin name doesn't represent the
    color, but this is only a test, so it won't matter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fire up a Node.js command prompt, then change the working folder to our project
    area. At the prompt, enter `gulp` then press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the contents of the root `dest` folder to the `css` folder in the `T73
    - adding support for new color` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `testpage.html`—if all is well, we can see the compiled RGB value within,
    as before:![Adding future color support to CSS](img/BO5194_14_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try re-running the `testpage.html` file from within the `T73 - adding support
    for new color` folder; we should see the change in color (and yes, it's definitely
    not purple!):![Adding future color support to CSS](img/BO5194_14_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can verify that the color displayed is indeed `burleywood`, using the same
    principle as before. This time check out [http://www.colorhexa.com/deb887](http://www.colorhexa.com/deb887),
    which clearly shows the HEX and RGB values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding future color support to CSS](img/BO5194_14_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'All that remains for you now is to convert this into a plugin. This should
    be easy to do: try taking a copy of the existing `rebeccapurple` plugin, then
    performing a search and replace with the color of your choice. It''s not perfect,
    but will give you a head start—the next part will be to use what we learnt back
    in [Chapter 8](ch08.html "Chapter 8. Creating PostCSS Plugins"), *Creating PostCSS
    Plugins*, to turn it into a fully-fledged plugin available in the NPM repository.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To get a list of the CSS4 Module colors, have a look on Google—there are plenty
    of links; try this as a start: [https://github.com/segundofdez/css4-colors/blob/master/less/colors.less](https://github.com/segundofdez/css4-colors/blob/master/less/colors.less).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, time to change focus: although this chapter is meant to be about looking
    forward, we''re going to change direction and look backwards for a moment.'
  prefs: []
  type: TYPE_NORMAL
- en: The reason for this? A number of mistakes in the design of CSS have been acknowledged
    by the CSS Working Group. A PostCSS plugin by Jonathan Neal provides a short-term
    fix for a number of these issues—some which could well be fixed properly in a
    future version of CSS!
  prefs: []
  type: TYPE_NORMAL
- en: Going back in time
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When developing code, I'm a great fan of only developing for modern browsers
    as a rule—ideally *n-1*, or current plus one previous version. In the main, this
    isn't an issue for the likes of Firefox or Chrome, but it's a different story
    for IE. Where possible, older versions of IE will very likely be left by the wayside…but
    that's another story!
  prefs: []
  type: TYPE_NORMAL
- en: The one exception we can make though is not around browser support, but trying
    to correct some issues with attribute naming. The CSS Working Group have acknowledged
    that some of the attribute names weren't defined correctly when they were released—you
    can see a complete list at [https://wiki.csswg.org/ideas/mistakes](https://wiki.csswg.org/ideas/mistakes),
    which is regularly updated.
  prefs: []
  type: TYPE_NORMAL
- en: To help with this, and as a precursor to the second demo in this section, we're
    going to install the Time Machine plugin for PostCSS (hence the title of this
    section!). This provides a short-term fix for some of the bugs in CSS. We will
    then use this as inspiration to design a quick and dirty plugin to fix another
    bug that is listed on the CSSWG site, but which is not fixed by the Time Machine
    plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The source for this plugin is available from [https://github.com/jonathantneal/postcss-time-machine](https://github.com/jonathantneal/postcss-time-machine).
  prefs: []
  type: TYPE_NORMAL
- en: For this demo, we will reuse the simple demo created to display the `rebeccapurple`
    color from *Adding future color support to CSS*. The compiled results from that
    demo use an RGBA function—the CSSWG have stated that RGBA should not exist, and
    instead the alpha channel should have been added as the fourth channel for the
    `RGB()` function. We'll fix that as part of our demo—the plugin will allow us
    to write what was intended, whilst compiling it to code that can be understood
    by any browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make a start on installing the plugin for use in our demo:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the plugin, so go ahead and fire up a Node.js command
    prompt session, then change the working folder to our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the prompt, enter this command and press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If all is well, we should see something akin to this screenshot—keep the session
    open, as we will need it shortly:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Going back in time](img/BO5194_14_19.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Next, go ahead and extract a copy of the `T74 - going back in time` folder from
    the code download that accompanies this book—save the folder to the root of our
    project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `styles – pre-compile.css` from within the `T74 - going back in time`
    folder to the root `src` folder of our project area, and rename it `styles.css`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `gulpfile.js` and `package.json` files from the same `T74 - going back
    in time` folder to the root folder of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Revert to the Node.js command prompt, then at the prompt, enter `gulp` and press
    *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If all is well, we should see our usual compiled files appear in the `dest`
    folder—copy these to the `css` folder under `T74 - going back in time`.![Going
    back in time](img/BO5194_14_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, try previewing the results of our demo, if all is well, we should
    see the same box as before, but this time with a slightly lighter shade of `rebecca
    purple` as its color:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we take a look at the CSS styles though, the keen-eyed may spot something—how
    come we''re using `194` as our alpha value, yet the code shows `0.8`? The answer
    is simple: this plugin was designed to use `0` to `255` for each value, including
    the alpha channel. Simply divide `194` by `255`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Going back in time](img/BO5194_14_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The answer is `0.8`. Okay, you will actually get something like `0.76078`,
    but if we round up to one decimal place, this will become `0.8`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Going back in time](img/BO5194_14_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, before we continue, there is something we should consider: the practical
    application of this plugin. It''s not meant to pour cold water on a nice idea,
    but adoption may take a little time—developers in a team will be used to writing
    styles that include functions such as `rgba()`, `background-blend-mode`, or `hsla()`,
    so it may take some time to change the mindset!'
  prefs: []
  type: TYPE_NORMAL
- en: This said, it is a useful fix if we want to adhere to the intended standards,
    and can manage the change of mindset to not type function names that we may have
    been doing for some time. We can even take things a step further and create our
    own plugin—Time Machine doesn't include fixes for all of the attributes, so let's
    take a look at creating one to manage the bug that surrounds the `background-blend-mode`
    attribute in CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our own plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the attributes not fixed by the Time Machine plugin is the `background-blend-mode`
    function—this is normally used to calculate the final color pixel when layers
    overlap each other.
  prefs: []
  type: TYPE_NORMAL
- en: The bug that was introduced relates to the name—the **CSS Working Group** (**CSSWG**)
    have acknowledged that all blend-mode variants should be written without -mode
    in the name, so that in our case, background-blend-mode would be written as `background-blend`.
  prefs: []
  type: TYPE_NORMAL
- en: It's an easy fix to make, here's a perfect opportunity for you to try creating
    your own plugin! We're going to take a different route at this point—time for
    some audience participation, so to speak!
  prefs: []
  type: TYPE_NORMAL
- en: 'To help you along the way, it''s worth taking another look at [Chapter 8](ch08.html
    "Chapter 8. Creating PostCSS Plugins"), *Creating PostCSS Plugins*; when creating
    the plugin, we can use this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Most of this code is boilerplate, but the key to making this work is this excerpt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In a nutshell, we parse each CSS rule in turn—if any contain background-blend,
    we simply replace each instance with background-blend-mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'To prove it works, we can use the following code to test if our plugin works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If all is well, we should get something akin to this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our own plugin](img/BO5194_14_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you get stuck, then a completed version is available in the code download
    that accompanies this book; a quick peek in the `T75 - back in time change` folder
    for `styles – pre-compile.css` will show this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our own plugin](img/BO5194_14_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When compiled, we can clearly see it shows the version we will be used to seeing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our own plugin](img/BO5194_14_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It's a quick and dirty plugin, which will likely need a little more development
    before putting it into production use—for example, it caters purely for background-blend-mode,
    whereas we should support any attribute that contains blend-mode within the name!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Creating CSS styles opens up a world of possibilities: we are only limited
    by what we must support! Throughout the course of this chapter, we''ve explored
    some of the possible options we can use when working with the newer CSS4 styles—let''s
    take a moment to review what we have learnt.'
  prefs: []
  type: TYPE_NORMAL
- en: We kicked off with a quick introduction to what we know as CSS4—we then moved
    on to explore some of the plugins that cater for supporting newer styles with
    more compatible CSS equivalent code.
  prefs: []
  type: TYPE_NORMAL
- en: Up next came a simple demo that explored some of the new CSS4 pseudo-classes,
    and how we might use them in a (theoretical) context. We then moved onto something
    more practical, in the form of styling the new range input using just CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Moving swiftly on, we then took a look at the cssnext plugin pack, which provides
    an abstract layer for supporting CSS4; we saw how easy it is to implement, and
    that we can easily switch off functionality if it is no longer needed in our projects.
  prefs: []
  type: TYPE_NORMAL
- en: Our next demo came in the form of working with color—we used the `rebeccapurple`
    plugin to show firstly how easy it is to add support for one of the new colors
    within CSS4, then to modify it to provide support for other colors as needed in
    our projects. We then rounded out the chapter with a look back in time at some
    of the mistakes made when CSS was released, and how (with a little imagination),
    we might provide a temporary workaround until such time as these mistakes are
    fixed in a future version of CSS.
  prefs: []
  type: TYPE_NORMAL
- en: We've now come to the end of the book - I hope you've enjoyed our journey through
    the world of PostCSS, and that hopefully this book will help improve your skills
    as a future developer or user of PostCSS.
  prefs: []
  type: TYPE_NORMAL
