- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fortress of Solitude – Configuring WebdriverIO
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will install WebdriverIO and its dependencies. There are
    two approaches, and we will discuss the advantages of each. It is also important
    to keep the versions of the dependencies up to date. To help with this, we will
    use Yarn to keep our package.json and yarn.lock files up to date.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'The setup instructions for WDIO can be found in the **Getting Started** section
    on the official website ([https://webdriver.io/docs/gettingstarted](https://webdriver.io/docs/gettingstarted)):'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Getting Started](img/B19395_Figure_2.1.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – Getting Started
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Current documentation indicators for version 7.x](img/B19395_Figure_2.2.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – Current documentation indicators for version 7.x
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we''ll cover the following main topics:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: WebdriverIO setup
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and installing the project dependencies
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making out first commit
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Be sure you are viewing the latest version of WDIO 8.0\. Googling questions
    about WDIO features can lead to support pages of prior versions.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: WebdriverIO setup
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The WDIO team works hard to make everything easy to install, as described in
    the documentation. WDIO can be set up in two ways:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Custom configuration while answering a series of questions
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloned from an existing project on GitHub
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For this project, we will show the questions and the selected answers. The second
    option, cloning the boilerplate project approach, is described in the following
    section.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Option 1 – required steps to start installing WebdriverIO 8.0 for TypeScript
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate from the `\repos\wdio` folder. The quickest way to set up a WDIO project
    quickly from Yarn is to type `yarn create wdio`, ending with a dot (`.`):'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The WDIO robot will appear, and a list of configuration questions will be presented:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – WDIO initialization from the code TERMINAL window](img/B19395_Figure_2.3.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – WDIO initialization from the code TERMINAL window
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'The initialization will ask how to configure WDIO from scratch. Here is the
    list of settings for WebDriver 8.0\. There are several options, and many will
    use the default. Each item with a star (`*`) shows the choice selected at setup:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: WebdriverIO is always being updated. These questions themselves should be similar
    for both Mac and Windows users. However, the order, phrasing, and selection details
    do change slightly as new features are added.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – Settings](img/B19395_Figure_2.4.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – Settings
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '**? What type of testing would you like to do? (Use** **arrow keys)**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: (*) E2E Testing - of Web or Mobile Applications
  id: totrans-31
  prefs:
  - PREF_UL
  - PREF_BQ
  type: TYPE_NORMAL
- en: ( ) Component or Unit Testing - in the browser
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: https://webdriver.io/docs/component-testing
  id: totrans-33
  prefs:
  - PREF_UL
  - PREF_BQ
  type: TYPE_NORMAL
- en: ( ) Desktop Testing - of Electron Applications
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: https://webdriver.io/docs/desktop-testing/electron
  id: totrans-35
  prefs:
  - PREF_UL
  - PREF_BQ
  type: TYPE_NORMAL
- en: ( ) Desktop Testing - of MacOS Applications
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: https://webdriver.io/docs/desktop-testing/macos
  id: totrans-37
  prefs:
  - PREF_UL
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**? Where is your automation backend located? (Use** **arrow keys)**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: (*) On my local machine (default)
  id: totrans-39
  prefs:
  - PREF_UL
  - PREF_BQ
  type: TYPE_NORMAL
- en: ( ) In the cloud using Experitest
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) In the cloud using Sauce Labs
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) In the cloud using Browserstack or Testingbot or LambdaTest or a different
    service
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) I have my own Selenium cloud
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Today, there are many cloud options, including `Experitest`, `Sauce Labs`, `BrowserStack`,
    `Testingbot`, and `LambdaTest`. For this book, we will install the automation
    backend on our local Mac or Windows machine.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'Next is the environment type. For these purposes, we will use `Web`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '**? Which environment would you like to automate? (Use** **arrow keys)**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: (*) Web - web applications in the browser
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) Mobile - native, hybrid, and mobile web apps, on Android or iOS
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, select the browser(s) we will be using. Select the default of Chrome.
    Note that we can add others later:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '**? With which browser should we start? (Press <space> to select, <a> to toggle
    all, <i> to invert selection, and <enter>** **to proceed)**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: (*) Chrome
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) Firefox
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) Safari
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) Microsoft Edge
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next is the reporting framework type. For this book, we will be using Jasmine.
    However, much of the code that’s supplied will apply to all listed frameworks:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '**? Which framework do you want to use? (Use** **arrow keys)**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: ( ) Mocha (https://mochajs.org/)
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) Mocha with Serenity/JS (https://serenity-js.org/)
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (*) Jasmine (https://jasmine.github.io/)
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) Jasmine with Serenity/JS (https://serenity-js.org/)
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) Cucumber (https://cucumber.io/)
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) Cucumber with Serenity/JS (https://serenity-js.org/)
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Out of the box, WebdriverIO uses Mocha by default. However, it also supports
    Jasmine and can be combined with Chai for advanced assertions. Cucumber is an
    extra layer of abstraction framework that hides the core code. This allows fewer
    technical resources to create tests from Feature files. Cucumber is outside the
    scope of this book, but the techniques described can be implemented in a Cucumber
    WDIO project. Next, we will tell WDIO this is a Typescript project:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '**? Do you want to use a compiler? (Use** **arrow keys**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: ( ) Babel (https://babeljs.io/)
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (*) TypeScript (https://www.typescriptlang.org/)
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) No!
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Question: What is Babel and is** **it needed?**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Babel ([https://babeljs.io/](https://babeljs.io/)) is a JavaScript transpiler.
    Because JavaScript is implemented differently in different browsers, a transpiler
    is used to transform our code to an older JavaScript version. Some features are
    not implemented in certain browsers, such as async/await, depending on what browser
    version we are testing against. So, a transpiler allows us to have our framework
    be backward compatible. Although this is a TypeScript project, we do not need
    the TypeScript transpiler.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '**Question: How to know what features are available in different browsers**
    **and versions?**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: 'The [caniuse.com](http://caniuse.com) website provides descriptive tables of
    the different ECMAScript features that are supported:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: We will be creating our tests in TypeScript, which is a superset of JavaScript.
    The Typescript transpiler will be used. Now to get a quick startup sample script.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '**? Do you want WebdriverIO to autogenerate some** **test files?**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: (Y/n) Yes
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: This will automatically set up a sample test to run to ensure WebdriverIO is
    working. It is also where we will build a framework unit test to check features
    are working. Oh yes, we are developers, and our automation project has its own
    unit and integration tests.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the default path for the TypeScript sample test cases and
    should not be changed:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '**? Where should be the location of your** **specs files?**'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: ./test/specs/**/*.ts
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Tests can be organized into feature sub-folders and smoke tests under the specs
    folder. Notice that because we selected TypeScript in the prior question, the
    test extensions (.js) replaced with .ts.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '**? Do you want to use page** **objects (**[https://martinfowler.com/bliki/PageObject.html](https://martinfowler.com/bliki/PageObject.html)**)?**'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 'Yes'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: This sets up a Page Object Model folder structure for our project.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '**? Where are your page objects** **located? ./test/pageobjects/**/*.ts**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Now, we want to configure our reporters.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Which reporter do you want to use?
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: (*) spec
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) dot
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) junit
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (*) allure
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) video
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) mochawesome
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) slack
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WebdriverIO supports a wide variety of reporters. For this small sample, we
    will start with the spec and allure reporters. Note that WDIO even supports a
    **Video** option. You may notice that Slack is included. In the final chapter
    of this book, we will be using Jenkins to send update messages to a Slack channel.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '**? Do you want to add a plugin to your** **test setup?**'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '( ) wait-for: utilities that provide functionalities to wait for certain conditions
    till a defined task is complete.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: https://www.npmjs.com/package/wdio-wait-for
  id: totrans-96
  prefs:
  - PREF_UL
  - PREF_BQ
  type: TYPE_NORMAL
- en: '( ) angular-component-harnesses: support for Angular component test harnesses'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: https://www.npmjs.com/package/@badisi/wdio-harness
  id: totrans-98
  prefs:
  - PREF_UL
  - PREF_BQ
  type: TYPE_NORMAL
- en: '( ) Testing Library: utilities that encourage good testing practices laid down
    by dom-testing-library.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: https://testing-library.com/docs/webdriverio-testing-library/intro
  id: totrans-100
  prefs:
  - PREF_UL
  - PREF_BQ
  type: TYPE_NORMAL
- en: In our framework, we will have an advanced approach for waiting for page synchronization.
    This option will be left as-is.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: If the application under test (AUT) is an Angular project, it is recommended
    to use the Angular Component Harnesses configuration.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '**? Do you want to add a service to your** **test setup?**'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: ( ) vscode
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) eslinter-service
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) lambdatest
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) crossbrowsertesting
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) vscode
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) docker
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) slack
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: 34 additional services are integrated into WDIO, including Slack, Cross Browser
    Testing (Selenium Standalone), and ES-Linter. Covering them all is beyond the
    scope of this book.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: 'The WebdriverIO **Visual Studio Code** (**VS Code**) service allows us to seamlessly
    test extensions from end to end in the VS Code Desktop ID. By providing a path
    to your extension, the service does the rest, as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: 🏗 Installs VS Code (either stable, insiders, or a specified version).
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ⬇ Download Chromedriver specific to the given VS Code version.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 🚀 Enables you to access the VS Code API from your tests.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 🖥 Starts VS Code with custom user settings (including support for VS Code on
    Ubuntu, macOS, and Windows).
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 🌐 Serves VS Code from a server to be accessed by any browser for testing web
    extensions.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 📔 Bootstraps page objects with locators that match your VS Code version.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next question asks you to enter the landing page for the application under
    test. For this, we will use the default provided as the sample tests use this
    to navigate internally to a website for testing.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '**? What is the** **base URL?**'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: http://localhost
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: This is the base landing page that our tests will launch.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: A base landing page ensures we do not repeatedly add code to navigate to the
    same landing page. Later in this book, we will see how to customize this value.
    For the moment, we will use the internet sandbox for testing.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: The final installation step is to have npm download and install all the packages.
    While this part can be performed by the installer, we need to make one modification.
    Choose No for the final question.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '**? Do you want me to run `npm** **install` (Y/n)**'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: 'No'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: We will be using Yarn rather than npm as our package manager due to its speed.
    This completes the setup for installing and configuring WebdriverIO from the wizard.
    Another option is to clone an existing project, which will be covered next. Skip
    to the *Installing and configuring WebdriverIO* section if you do not plan to
    clone from an existing project.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: Because we are using Yarn as our package manager instead of npm, we will need
    to remove the package-lock.json file and run the yarn install command to build
    the equivalent yarn.lock file.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Option 1 – cloning WebdriverIO from a boilerplate project
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An alternate way to set up WDIO is to use a preconfigured WDIO boilerplate project
    from the WDIO GitHub repo. This means that less troubleshooting might be needed.
    We can choose from many preconfigured boilerplate projects with all the necessary
    components.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: 'For this project, we will fork the `Jasmine TypeScript Boilerplate` project
    from GitHub:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 – The Jasmine TypeScript boilerplate project on GitHub](img/B19395_Figure_2.5.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – The Jasmine TypeScript boilerplate project on GitHub
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **jasmine-boilerplate** link. This will allow us to create our own
    version via the **Code** button:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 – Copying the project URL from GitHub](img/B19395_Figure_2.6.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – Copying the project URL from GitHub
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Code**. Multiple choices for cloning the project will be displayed.
    Select **Open with** **GitHub Desktop**:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7 – Cloning from the source path to the local destination](img/B19395_Figure_2.7.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 – Cloning from the source path to the local destination
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Click `repos` path.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will change the `repo\wdio`, and clicking **Clone**:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.8 – The project’s Explorer icon in VS Code](img/B19395_Figure_2.8.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
- en: Figure 2.8 – The project’s Explorer icon in VS Code
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Click the `WDIO` folder.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, click `repo\wdio` folder, and click **Open**:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.9 – Trusting the authors of a project](img/B19395_Figure_2.9.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
- en: Figure 2.9 – Trusting the authors of a project
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: If this dialogue appears, check the **Trust the authors of all files in the
    parent folder ‘repos’** option and click **Yes, I trust** **the authors**.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: With that, we have covered the clone installation approach. Next, we will install
    everything.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Building and installing the project dependencies
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you installed WebdriverIO from an existing project, this is where we continue.
    We need to build the project before we can run our first test. From the Terminal,
    type the following:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will bring in all the associated packages to run the project. Sometime
    in the future, vulnerabilities may occur and we will have to update our packages.
    We can use Yarn to check which packages are current and which are outdated:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output can be seen in the following screenshot:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.10 – Displaying the outdated package](img/B19395_Figure_2.10.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
- en: Figure 2.10 – Displaying the outdated package
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: 'Incompatibility could occur if we upgrade all packages blindly. Fortunately,
    there is the yarn upgrade command, which allows the packages to be upgraded individually:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We will see the following output:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.11 – Interactive package list for upgrading](img/B19395_Figure_2.11.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
- en: Figure 2.11 – Interactive package list for upgrading
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: This gives us the most flexibility when we’re keeping our project packages up
    to date.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: Quick tip
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: If you want to clear the Terminal, use cls in Windows or Ctrl + K or clear on
    Mac.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: After the installation, the yarn.lock file will be updated and the node_modules
    folder will have all the supporting dependencies downloaded. This contains the
    expanded list of packages, which has been included to support the packages in
    package.json. The `yarn.lock` file will never need to be edited.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, we should point out that the WebdriverIO setup assumes that
    a novice user may not know what to do to bring in all the supporting packages:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.12 – WebdriverIO with TypeScript successfully installed](img/B19395_Figure_2.12.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
- en: Figure 2.12 – WebdriverIO with TypeScript successfully installed
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we can confirm the version of WebdriverIO that is installed with the
    version flag.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: 'For Windows users:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'For Mac users:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We made it! All the supported features have been added to the package.json
    file. WDIO even gives us a hint to try out our first test – `npm` `run wdio`:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.13 – WebdriverIO gives us a hint on how to run the first test](img/B19395_Figure_2.13.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
- en: Figure 2.13 – WebdriverIO gives us a hint on how to run the first test
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: 'This has set up WebdriverIO and created a sample test that can be executed
    with the following yarn command:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This results in the following output:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19395_Figure_2.14.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
- en: Figure 2.14 – Output of yard command
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.14 – yard 命令的输出
- en: 'Tests can also be executed by running a command. Let’s take a look at the options
    for both Windows and Mac:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 测试也可以通过运行命令来执行。让我们看看 Windows 和 Mac 的选项：
- en: 'For Windows users:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows 用户：
- en: '[PRE8]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'For Mac users:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Mac 用户：
- en: '[PRE9]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'All the test examples can be found in this book’s GitHub repository: [https://github.com/PacktPublishing/Enhanced-Test-Automation-with-WebdriverIO](https://github.com/PacktPublishing/Enhanced-Test-Automation-with-WebdriverIO).'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 所有测试示例都可以在这个书的 GitHub 仓库中找到：[https://github.com/PacktPublishing/Enhanced-Test-Automation-with-WebdriverIO](https://github.com/PacktPublishing/Enhanced-Test-Automation-with-WebdriverIO)。
- en: 'This runs the sample tests with basic output detail to the Terminal window
    from the **spec** **Reporter** window:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在 **spec** **Reporter** 窗口中运行样本测试，并将基本输出详细信息输出到终端窗口：
- en: '![Figure 2.15 – Pass results shown in the spec report from the sample WDIO
    test](img/B19395_Figure_2.15.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.15 – 从样本 WDIO 测试的 spec 报告中显示的通过结果](img/B19395_Figure_2.15.jpg)'
- en: Figure 2.15 – Pass results shown in the spec report from the sample WDIO test
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.15 – 从样本 WDIO 测试的 spec 报告中显示的通过结果
- en: 'Now that we have set up our project, either by answering the initial configuration
    questions or cloning an existing project, we are ready to look at the configurations
    and file settings of our new WDIO automation project:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了项目，无论是通过回答初始配置问题还是克隆现有项目，我们就可以查看我们新的 WDIO 自动化项目的配置和文件设置：
- en: '![Figure 2.16 – All project files](img/B19395_Figure_2.16.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.16 – 所有项目文件](img/B19395_Figure_2.16.jpg)'
- en: Figure 2.16 – All project files
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.16 – 所有项目文件
- en: This will display all the files and folders in the project. There are quite
    a lot of them, so we will cover the important ones here. Open the `README.md`
    file first.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示项目中的所有文件和文件夹。它们相当多，所以我们将在这里介绍重要的部分。首先打开 `README.md` 文件。
- en: For any project, the `README` file is the best place to start. It gives us critical
    information about how the project is configured, its features, and, most importantly,
    how to quick-start a sample test.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何项目，`README` 文件是开始的最佳位置。它提供了关于项目配置、特性和，最重要的是，如何快速开始样本测试的关键信息。
- en: Next, open the `package.json` file.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开 `package.json` 文件。
- en: 'This is where much of the `Node.js` configuration occurs:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是大部分 `Node.js` 配置发生的地方：
- en: '![Figure 2.17 – All devDependancies in the wdio project](img/B19395_Figure_2.17.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.17 – wdio 项目中的所有 devDependancies](img/B19395_Figure_2.17.jpg)'
- en: Figure 2.17 – All devDependancies in the wdio project
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.17 – wdio 项目中的所有 devDependancies
- en: What is the `yarn.lock` file?
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`yarn.lock` 文件是什么？'
- en: The `yarn.lock` file contains the full list of required project packages, including
    ones that support other packages in package.json. It is massive, but don’t worry
    – you will never have to change it. Yarn Package Manager handles all of this.
    Whew!
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`yarn.lock` 文件包含所需项目包的完整列表，包括在 `package.json` 中支持其他包的包。它很大，但不用担心——你永远不需要更改它。Yarn
    包管理器处理所有这些。哇！'
- en: 'Let’s run Yarn Package Manager with the `install` command to get everything
    loaded and up to date:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 `install` 命令运行 Yarn 包管理器，以获取所有内容并保持最新：
- en: '[PRE10]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This can be seen in the following screenshot:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以在以下屏幕截图中看到：
- en: '![Figure 2.18 – Building the project using Yarn Package Manager](img/B19395_Figure_2.18.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.18 – 使用 Yarn 包管理器构建项目](img/B19395_Figure_2.18.jpg)'
- en: Figure 2.18 – Building the project using Yarn Package Manager
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.18 – 使用 Yarn 包管理器构建项目
- en: Making our first commit
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进行第一次提交
- en: Now that we have our first test running, it is time to bring it all to our fortress
    of solitude – by committing it to our local repo and then to the GitHub repository.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经运行了第一个测试，是时候将它带到我们的孤独堡垒——通过将其提交到本地仓库，然后到 GitHub 仓库。
- en: Ignoring files in the Git repository
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 忽略 Git 仓库中的文件
- en: 'Before we make our first commit to the Git repo, we need to ignore some files.
    Once we have set up our WDIO project, VS Code might suggest that the `node_modules`
    folder should be included in the `gitignore` file:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们将第一个提交到 Git 仓库之前，我们需要忽略一些文件。一旦我们设置了 WDIO 项目，VS Code 可能会建议将 `node_modules`
    文件夹包含在 `gitignore` 文件中：
- en: '![Figure 2.19 – VS Code detects that the node_modules folder can be ignored](img/B19395_Figure_2.19.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.19 – VS Code 检测到 node_modules 文件夹可以被忽略](img/B19395_Figure_2.19.jpg)'
- en: Figure 2.19 – VS Code detects that the node_modules folder can be ignored
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.19 – VS Code 检测到 node_modules 文件夹可以被忽略
- en: 'We never want to commit this folder to our Git repo as it gets updated constantly
    by npm. Having `npm` create the folder contents on the fly with the most up-to-date
    versions is better:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.20 – GitHub Desktop indicates over 12,000 files to be committed
    to the new repo](img/B19395_Figure_2.20.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
- en: Figure 2.20 – GitHub Desktop indicates over 12,000 files to be committed to
    the new repo
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: This is far more files than we need.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: 'To tell Git to ignore this project folder, simply create a `.gitignore` file
    in the root of the project and enter the `node_modules` folder name:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.21 – A .gitignore file contains files and folders that should not
    be committed](img/B19395_Figure_2.21.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
- en: Figure 2.21 – A .gitignore file contains files and folders that should not be
    committed
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: The same goes for our Allure report and results folders. These files will be
    rebuilt repeatedly after each test and will not need to be under version control.
    Once these tests are run from Jenkins, prior runs can be preserved there temporarily
    or permanently.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: 'By simply adding and saving the `.gitignore` file, the list of files changes
    dramatically:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.22 – The repo now only stores the files](img/B19395_Figure_2.22.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
- en: Figure 2.22 – The repo now only stores the files
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: Once this `.gitignore` file is saved, we will see the changes reflected in GitHub
    Desktop with a manageable size of just eight files.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: Never store passwords in the repo. A password should be provided by a secure
    data provider service such as Vault or AWS Secrets. If no such option exists,
    then a password file could be referenced in the folder above the project. Otherwise,
    storing such a credential file in the project requires adding it to the `.gitignore`
    file for security.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: One of the first bugs I found in my career was related to passwords. Here, the
    user had the option to reset their password with a random string of characters.
    This page would occasionally crash. The reason was that the requirement had the
    password generated from all 128 ASCII characters. This included BELL, unprintable
    characters, as well as ones that were difficult to type on the keyboard. The real
    problem was that this set included angle brackets (`<` and `>`). The page would
    only crash when a new password was generated with one of those two characters,
    as they were interpreted as opening or closing HTML tags on the page.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: There are tools that IT security uses to detect passwords in repos, but they
    often only check the `main` or `master` repos and ignore the later `feature` branches.
    This, too, is a security risk. Always clean up old branches, as this can be considered
    a **security operations center** (**SOC**) II compliance violation, even if the
    passwords have long since expired.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now add a summary description and optional details. Simply click **Commit
    to main** – all our new files will be committed to our local main branch:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.23 – Adding a comment and details to a local commit](img/B19395_Figure_2.23.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
- en: Figure 2.23 – Adding a comment and details to a local commit
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.23 – 向本地提交添加注释和详细信息
- en: 'However, this is just staged on our local Git repo. The final step is to click
    **Push origin**, which will push it up to GitHub for our team to pull down:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这只是在我们的本地 Git 仓库中进行了暂存。最后一步是点击**推送到远程仓库**，这将将其推送到 GitHub，以便我们的团队可以拉取：
- en: '![Figure 2.24 – GitHub Desktop shows that all changes have been committed and
    suggests pushing any new changes](img/B19395_Figure_2.24.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.24 – GitHub Desktop 显示所有更改都已提交，并建议推送任何新更改](img/B19395_Figure_2.24.jpg)'
- en: Figure 2.24 – GitHub Desktop shows that all changes have been committed and
    suggests pushing any new changes
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.24 – GitHub Desktop 显示所有更改都已提交，并建议推送任何新更改
- en: Congratulations! You have made your first commit to your Git repo. Your team
    members can now pull your changes to be sure all their tests are running smoothly.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经向你的 Git 仓库提交了第一个更改。现在，你的团队成员可以拉取你的更改，以确保所有测试都能顺利运行。
- en: But what if you need to add new functionality that will take a few days to complete?
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你需要添加需要几天时间才能完成的新功能呢？
- en: Branching out
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分支
- en: 'To be a part of an automation team, you may be asked to add new and complex
    functionality. If this takes a few days, we might consider feature branching.
    A new branch is created from `main`. Your changes will be committed to your branch,
    and changes from `main` will be brought in periodically:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 要成为自动化团队的一员，你可能会被要求添加新的和复杂的功能。如果这需要几天时间，我们可能会考虑特性分支。新分支将从 `main` 分支创建。你的更改将提交到你的分支，并且会定期引入
    `main` 分支的更改：
- en: '![Figure 2.25 – Adding a new branch in GitHub Desktop from main](img/B19395_Figure_2.25.jpg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.25 – 在 GitHub Desktop 中从主分支添加新分支](img/B19395_Figure_2.25.jpg)'
- en: Figure 2.25 – Adding a new branch in GitHub Desktop from main
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.25 – 在 GitHub Desktop 中从主分支添加新分支
- en: When your changes are complete, a pull request will be made to pull your changes
    into the `main` branch, and the `feature` branch may be deleted.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的更改完成后，将创建一个拉取请求，以将你的更改拉入 `main` 分支，并且可能删除 `feature` 分支。
- en: For this book, the final state of the framework will be in a branch named after
    this chapter. The `main` branch will contain the final project.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书，框架的最终状态将在这个章节命名的分支中。`main` 分支将包含最终项目。
- en: Summary
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we installed WebdriverIO with several options added to a set
    of configuration questions. We also showed how Yarn can keep dependencies current.
    Lastly, we showed how to make a commit to the repo from GitHub Desktop.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们在一系列配置问题中添加了几个选项来安装 WebdriverIO。我们还展示了 Yarn 如何保持依赖项最新。最后，我们展示了如何从 GitHub
    Desktop 向仓库提交更改。
- en: If you run into issues, check the [*Appendix*](B19395_16.xhtml#_idTextAnchor314)
    at the end of this book. There, you will find a detailed list of common and arcane
    issues with causes, explanations, and resolutions. It also includes a node command
    cheatsheet for many of these initial processes.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到问题，请查看本书末尾的[*附录*](B19395_16.xhtml#_idTextAnchor314)。在那里，你可以找到一个详细的常见和复杂问题的列表，包括原因、解释和解决方案。它还包括许多这些初始过程的节点命令速查表。
- en: In the next chapter, we will explore the files and connections in the `wdio`
    config file and look at different ways to debug our code.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探索 `wdio` 配置文件中的文件和连接，并查看调试我们代码的不同方法。
