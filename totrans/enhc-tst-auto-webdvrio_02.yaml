- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fortress of Solitude – Configuring WebdriverIO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will install WebdriverIO and its dependencies. There are
    two approaches, and we will discuss the advantages of each. It is also important
    to keep the versions of the dependencies up to date. To help with this, we will
    use Yarn to keep our package.json and yarn.lock files up to date.
  prefs: []
  type: TYPE_NORMAL
- en: 'The setup instructions for WDIO can be found in the **Getting Started** section
    on the official website ([https://webdriver.io/docs/gettingstarted](https://webdriver.io/docs/gettingstarted)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Getting Started](img/B19395_Figure_2.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – Getting Started
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Current documentation indicators for version 7.x](img/B19395_Figure_2.2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – Current documentation indicators for version 7.x
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we''ll cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: WebdriverIO setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and installing the project dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making out first commit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Be sure you are viewing the latest version of WDIO 8.0\. Googling questions
    about WDIO features can lead to support pages of prior versions.
  prefs: []
  type: TYPE_NORMAL
- en: WebdriverIO setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The WDIO team works hard to make everything easy to install, as described in
    the documentation. WDIO can be set up in two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Custom configuration while answering a series of questions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloned from an existing project on GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For this project, we will show the questions and the selected answers. The second
    option, cloning the boilerplate project approach, is described in the following
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Option 1 – required steps to start installing WebdriverIO 8.0 for TypeScript
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate from the `\repos\wdio` folder. The quickest way to set up a WDIO project
    quickly from Yarn is to type `yarn create wdio`, ending with a dot (`.`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The WDIO robot will appear, and a list of configuration questions will be presented:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – WDIO initialization from the code TERMINAL window](img/B19395_Figure_2.3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – WDIO initialization from the code TERMINAL window
  prefs: []
  type: TYPE_NORMAL
- en: 'The initialization will ask how to configure WDIO from scratch. Here is the
    list of settings for WebDriver 8.0\. There are several options, and many will
    use the default. Each item with a star (`*`) shows the choice selected at setup:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: WebdriverIO is always being updated. These questions themselves should be similar
    for both Mac and Windows users. However, the order, phrasing, and selection details
    do change slightly as new features are added.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – Settings](img/B19395_Figure_2.4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – Settings
  prefs: []
  type: TYPE_NORMAL
- en: '**? What type of testing would you like to do? (Use** **arrow keys)**'
  prefs: []
  type: TYPE_NORMAL
- en: (*) E2E Testing - of Web or Mobile Applications
  prefs:
  - PREF_UL
  - PREF_BQ
  type: TYPE_NORMAL
- en: ( ) Component or Unit Testing - in the browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: https://webdriver.io/docs/component-testing
  prefs:
  - PREF_UL
  - PREF_BQ
  type: TYPE_NORMAL
- en: ( ) Desktop Testing - of Electron Applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: https://webdriver.io/docs/desktop-testing/electron
  prefs:
  - PREF_UL
  - PREF_BQ
  type: TYPE_NORMAL
- en: ( ) Desktop Testing - of MacOS Applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: https://webdriver.io/docs/desktop-testing/macos
  prefs:
  - PREF_UL
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**? Where is your automation backend located? (Use** **arrow keys)**'
  prefs: []
  type: TYPE_NORMAL
- en: (*) On my local machine (default)
  prefs:
  - PREF_UL
  - PREF_BQ
  type: TYPE_NORMAL
- en: ( ) In the cloud using Experitest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) In the cloud using Sauce Labs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) In the cloud using Browserstack or Testingbot or LambdaTest or a different
    service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) I have my own Selenium cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Today, there are many cloud options, including `Experitest`, `Sauce Labs`, `BrowserStack`,
    `Testingbot`, and `LambdaTest`. For this book, we will install the automation
    backend on our local Mac or Windows machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next is the environment type. For these purposes, we will use `Web`:'
  prefs: []
  type: TYPE_NORMAL
- en: '**? Which environment would you like to automate? (Use** **arrow keys)**'
  prefs: []
  type: TYPE_NORMAL
- en: (*) Web - web applications in the browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) Mobile - native, hybrid, and mobile web apps, on Android or iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, select the browser(s) we will be using. Select the default of Chrome.
    Note that we can add others later:'
  prefs: []
  type: TYPE_NORMAL
- en: '**? With which browser should we start? (Press <space> to select, <a> to toggle
    all, <i> to invert selection, and <enter>** **to proceed)**'
  prefs: []
  type: TYPE_NORMAL
- en: (*) Chrome
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) Firefox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) Safari
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) Microsoft Edge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next is the reporting framework type. For this book, we will be using Jasmine.
    However, much of the code that’s supplied will apply to all listed frameworks:'
  prefs: []
  type: TYPE_NORMAL
- en: '**? Which framework do you want to use? (Use** **arrow keys)**'
  prefs: []
  type: TYPE_NORMAL
- en: ( ) Mocha (https://mochajs.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) Mocha with Serenity/JS (https://serenity-js.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (*) Jasmine (https://jasmine.github.io/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) Jasmine with Serenity/JS (https://serenity-js.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) Cucumber (https://cucumber.io/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) Cucumber with Serenity/JS (https://serenity-js.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Out of the box, WebdriverIO uses Mocha by default. However, it also supports
    Jasmine and can be combined with Chai for advanced assertions. Cucumber is an
    extra layer of abstraction framework that hides the core code. This allows fewer
    technical resources to create tests from Feature files. Cucumber is outside the
    scope of this book, but the techniques described can be implemented in a Cucumber
    WDIO project. Next, we will tell WDIO this is a Typescript project:'
  prefs: []
  type: TYPE_NORMAL
- en: '**? Do you want to use a compiler? (Use** **arrow keys**'
  prefs: []
  type: TYPE_NORMAL
- en: ( ) Babel (https://babeljs.io/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (*) TypeScript (https://www.typescriptlang.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) No!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Question: What is Babel and is** **it needed?**'
  prefs: []
  type: TYPE_NORMAL
- en: Babel ([https://babeljs.io/](https://babeljs.io/)) is a JavaScript transpiler.
    Because JavaScript is implemented differently in different browsers, a transpiler
    is used to transform our code to an older JavaScript version. Some features are
    not implemented in certain browsers, such as async/await, depending on what browser
    version we are testing against. So, a transpiler allows us to have our framework
    be backward compatible. Although this is a TypeScript project, we do not need
    the TypeScript transpiler.
  prefs: []
  type: TYPE_NORMAL
- en: '**Question: How to know what features are available in different browsers**
    **and versions?**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The [caniuse.com](http://caniuse.com) website provides descriptive tables of
    the different ECMAScript features that are supported:'
  prefs: []
  type: TYPE_NORMAL
- en: We will be creating our tests in TypeScript, which is a superset of JavaScript.
    The Typescript transpiler will be used. Now to get a quick startup sample script.
  prefs: []
  type: TYPE_NORMAL
- en: '**? Do you want WebdriverIO to autogenerate some** **test files?**'
  prefs: []
  type: TYPE_NORMAL
- en: (Y/n) Yes
  prefs: []
  type: TYPE_NORMAL
- en: This will automatically set up a sample test to run to ensure WebdriverIO is
    working. It is also where we will build a framework unit test to check features
    are working. Oh yes, we are developers, and our automation project has its own
    unit and integration tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the default path for the TypeScript sample test cases and
    should not be changed:'
  prefs: []
  type: TYPE_NORMAL
- en: '**? Where should be the location of your** **specs files?**'
  prefs: []
  type: TYPE_NORMAL
- en: ./test/specs/**/*.ts
  prefs: []
  type: TYPE_NORMAL
- en: Tests can be organized into feature sub-folders and smoke tests under the specs
    folder. Notice that because we selected TypeScript in the prior question, the
    test extensions (.js) replaced with .ts.
  prefs: []
  type: TYPE_NORMAL
- en: '**? Do you want to use page** **objects (**[https://martinfowler.com/bliki/PageObject.html](https://martinfowler.com/bliki/PageObject.html)**)?**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Yes'
  prefs: []
  type: TYPE_NORMAL
- en: This sets up a Page Object Model folder structure for our project.
  prefs: []
  type: TYPE_NORMAL
- en: '**? Where are your page objects** **located? ./test/pageobjects/**/*.ts**'
  prefs: []
  type: TYPE_NORMAL
- en: Now, we want to configure our reporters.
  prefs: []
  type: TYPE_NORMAL
- en: Which reporter do you want to use?
  prefs: []
  type: TYPE_NORMAL
- en: (*) spec
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) dot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) junit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (*) allure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) video
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) mochawesome
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) slack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WebdriverIO supports a wide variety of reporters. For this small sample, we
    will start with the spec and allure reporters. Note that WDIO even supports a
    **Video** option. You may notice that Slack is included. In the final chapter
    of this book, we will be using Jenkins to send update messages to a Slack channel.
  prefs: []
  type: TYPE_NORMAL
- en: '**? Do you want to add a plugin to your** **test setup?**'
  prefs: []
  type: TYPE_NORMAL
- en: '( ) wait-for: utilities that provide functionalities to wait for certain conditions
    till a defined task is complete.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: https://www.npmjs.com/package/wdio-wait-for
  prefs:
  - PREF_UL
  - PREF_BQ
  type: TYPE_NORMAL
- en: '( ) angular-component-harnesses: support for Angular component test harnesses'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: https://www.npmjs.com/package/@badisi/wdio-harness
  prefs:
  - PREF_UL
  - PREF_BQ
  type: TYPE_NORMAL
- en: '( ) Testing Library: utilities that encourage good testing practices laid down
    by dom-testing-library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: https://testing-library.com/docs/webdriverio-testing-library/intro
  prefs:
  - PREF_UL
  - PREF_BQ
  type: TYPE_NORMAL
- en: In our framework, we will have an advanced approach for waiting for page synchronization.
    This option will be left as-is.
  prefs: []
  type: TYPE_NORMAL
- en: If the application under test (AUT) is an Angular project, it is recommended
    to use the Angular Component Harnesses configuration.
  prefs: []
  type: TYPE_NORMAL
- en: '**? Do you want to add a service to your** **test setup?**'
  prefs: []
  type: TYPE_NORMAL
- en: ( ) vscode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) eslinter-service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) lambdatest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) crossbrowsertesting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) vscode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ( ) slack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 34 additional services are integrated into WDIO, including Slack, Cross Browser
    Testing (Selenium Standalone), and ES-Linter. Covering them all is beyond the
    scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'The WebdriverIO **Visual Studio Code** (**VS Code**) service allows us to seamlessly
    test extensions from end to end in the VS Code Desktop ID. By providing a path
    to your extension, the service does the rest, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 🏗 Installs VS Code (either stable, insiders, or a specified version).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ⬇ Download Chromedriver specific to the given VS Code version.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 🚀 Enables you to access the VS Code API from your tests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 🖥 Starts VS Code with custom user settings (including support for VS Code on
    Ubuntu, macOS, and Windows).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 🌐 Serves VS Code from a server to be accessed by any browser for testing web
    extensions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 📔 Bootstraps page objects with locators that match your VS Code version.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next question asks you to enter the landing page for the application under
    test. For this, we will use the default provided as the sample tests use this
    to navigate internally to a website for testing.
  prefs: []
  type: TYPE_NORMAL
- en: '**? What is the** **base URL?**'
  prefs: []
  type: TYPE_NORMAL
- en: http://localhost
  prefs: []
  type: TYPE_NORMAL
- en: This is the base landing page that our tests will launch.
  prefs: []
  type: TYPE_NORMAL
- en: A base landing page ensures we do not repeatedly add code to navigate to the
    same landing page. Later in this book, we will see how to customize this value.
    For the moment, we will use the internet sandbox for testing.
  prefs: []
  type: TYPE_NORMAL
- en: The final installation step is to have npm download and install all the packages.
    While this part can be performed by the installer, we need to make one modification.
    Choose No for the final question.
  prefs: []
  type: TYPE_NORMAL
- en: '**? Do you want me to run `npm** **install` (Y/n)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'No'
  prefs: []
  type: TYPE_NORMAL
- en: We will be using Yarn rather than npm as our package manager due to its speed.
    This completes the setup for installing and configuring WebdriverIO from the wizard.
    Another option is to clone an existing project, which will be covered next. Skip
    to the *Installing and configuring WebdriverIO* section if you do not plan to
    clone from an existing project.
  prefs: []
  type: TYPE_NORMAL
- en: Because we are using Yarn as our package manager instead of npm, we will need
    to remove the package-lock.json file and run the yarn install command to build
    the equivalent yarn.lock file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Option 1 – cloning WebdriverIO from a boilerplate project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An alternate way to set up WDIO is to use a preconfigured WDIO boilerplate project
    from the WDIO GitHub repo. This means that less troubleshooting might be needed.
    We can choose from many preconfigured boilerplate projects with all the necessary
    components.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this project, we will fork the `Jasmine TypeScript Boilerplate` project
    from GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 – The Jasmine TypeScript boilerplate project on GitHub](img/B19395_Figure_2.5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – The Jasmine TypeScript boilerplate project on GitHub
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **jasmine-boilerplate** link. This will allow us to create our own
    version via the **Code** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 – Copying the project URL from GitHub](img/B19395_Figure_2.6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – Copying the project URL from GitHub
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Code**. Multiple choices for cloning the project will be displayed.
    Select **Open with** **GitHub Desktop**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7 – Cloning from the source path to the local destination](img/B19395_Figure_2.7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 – Cloning from the source path to the local destination
  prefs: []
  type: TYPE_NORMAL
- en: Click `repos` path.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will change the `repo\wdio`, and clicking **Clone**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.8 – The project’s Explorer icon in VS Code](img/B19395_Figure_2.8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.8 – The project’s Explorer icon in VS Code
  prefs: []
  type: TYPE_NORMAL
- en: Click the `WDIO` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, click `repo\wdio` folder, and click **Open**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.9 – Trusting the authors of a project](img/B19395_Figure_2.9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.9 – Trusting the authors of a project
  prefs: []
  type: TYPE_NORMAL
- en: If this dialogue appears, check the **Trust the authors of all files in the
    parent folder ‘repos’** option and click **Yes, I trust** **the authors**.
  prefs: []
  type: TYPE_NORMAL
- en: With that, we have covered the clone installation approach. Next, we will install
    everything.
  prefs: []
  type: TYPE_NORMAL
- en: Building and installing the project dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you installed WebdriverIO from an existing project, this is where we continue.
    We need to build the project before we can run our first test. From the Terminal,
    type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This will bring in all the associated packages to run the project. Sometime
    in the future, vulnerabilities may occur and we will have to update our packages.
    We can use Yarn to check which packages are current and which are outdated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.10 – Displaying the outdated package](img/B19395_Figure_2.10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.10 – Displaying the outdated package
  prefs: []
  type: TYPE_NORMAL
- en: 'Incompatibility could occur if we upgrade all packages blindly. Fortunately,
    there is the yarn upgrade command, which allows the packages to be upgraded individually:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.11 – Interactive package list for upgrading](img/B19395_Figure_2.11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.11 – Interactive package list for upgrading
  prefs: []
  type: TYPE_NORMAL
- en: This gives us the most flexibility when we’re keeping our project packages up
    to date.
  prefs: []
  type: TYPE_NORMAL
- en: Quick tip
  prefs: []
  type: TYPE_NORMAL
- en: If you want to clear the Terminal, use cls in Windows or Ctrl + K or clear on
    Mac.
  prefs: []
  type: TYPE_NORMAL
- en: After the installation, the yarn.lock file will be updated and the node_modules
    folder will have all the supporting dependencies downloaded. This contains the
    expanded list of packages, which has been included to support the packages in
    package.json. The `yarn.lock` file will never need to be edited.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, we should point out that the WebdriverIO setup assumes that
    a novice user may not know what to do to bring in all the supporting packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.12 – WebdriverIO with TypeScript successfully installed](img/B19395_Figure_2.12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.12 – WebdriverIO with TypeScript successfully installed
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we can confirm the version of WebdriverIO that is installed with the
    version flag.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Windows users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'For Mac users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We made it! All the supported features have been added to the package.json
    file. WDIO even gives us a hint to try out our first test – `npm` `run wdio`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.13 – WebdriverIO gives us a hint on how to run the first test](img/B19395_Figure_2.13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.13 – WebdriverIO gives us a hint on how to run the first test
  prefs: []
  type: TYPE_NORMAL
- en: 'This has set up WebdriverIO and created a sample test that can be executed
    with the following yarn command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19395_Figure_2.14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.14 – Output of yard command
  prefs: []
  type: TYPE_NORMAL
- en: 'Tests can also be executed by running a command. Let’s take a look at the options
    for both Windows and Mac:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For Windows users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'For Mac users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'All the test examples can be found in this book’s GitHub repository: [https://github.com/PacktPublishing/Enhanced-Test-Automation-with-WebdriverIO](https://github.com/PacktPublishing/Enhanced-Test-Automation-with-WebdriverIO).'
  prefs: []
  type: TYPE_NORMAL
- en: 'This runs the sample tests with basic output detail to the Terminal window
    from the **spec** **Reporter** window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.15 – Pass results shown in the spec report from the sample WDIO
    test](img/B19395_Figure_2.15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.15 – Pass results shown in the spec report from the sample WDIO test
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have set up our project, either by answering the initial configuration
    questions or cloning an existing project, we are ready to look at the configurations
    and file settings of our new WDIO automation project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.16 – All project files](img/B19395_Figure_2.16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.16 – All project files
  prefs: []
  type: TYPE_NORMAL
- en: This will display all the files and folders in the project. There are quite
    a lot of them, so we will cover the important ones here. Open the `README.md`
    file first.
  prefs: []
  type: TYPE_NORMAL
- en: For any project, the `README` file is the best place to start. It gives us critical
    information about how the project is configured, its features, and, most importantly,
    how to quick-start a sample test.
  prefs: []
  type: TYPE_NORMAL
- en: Next, open the `package.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is where much of the `Node.js` configuration occurs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.17 – All devDependancies in the wdio project](img/B19395_Figure_2.17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.17 – All devDependancies in the wdio project
  prefs: []
  type: TYPE_NORMAL
- en: What is the `yarn.lock` file?
  prefs: []
  type: TYPE_NORMAL
- en: The `yarn.lock` file contains the full list of required project packages, including
    ones that support other packages in package.json. It is massive, but don’t worry
    – you will never have to change it. Yarn Package Manager handles all of this.
    Whew!
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s run Yarn Package Manager with the `install` command to get everything
    loaded and up to date:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.18 – Building the project using Yarn Package Manager](img/B19395_Figure_2.18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.18 – Building the project using Yarn Package Manager
  prefs: []
  type: TYPE_NORMAL
- en: Making our first commit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have our first test running, it is time to bring it all to our fortress
    of solitude – by committing it to our local repo and then to the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Ignoring files in the Git repository
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before we make our first commit to the Git repo, we need to ignore some files.
    Once we have set up our WDIO project, VS Code might suggest that the `node_modules`
    folder should be included in the `gitignore` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.19 – VS Code detects that the node_modules folder can be ignored](img/B19395_Figure_2.19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.19 – VS Code detects that the node_modules folder can be ignored
  prefs: []
  type: TYPE_NORMAL
- en: 'We never want to commit this folder to our Git repo as it gets updated constantly
    by npm. Having `npm` create the folder contents on the fly with the most up-to-date
    versions is better:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.20 – GitHub Desktop indicates over 12,000 files to be committed
    to the new repo](img/B19395_Figure_2.20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.20 – GitHub Desktop indicates over 12,000 files to be committed to
    the new repo
  prefs: []
  type: TYPE_NORMAL
- en: This is far more files than we need.
  prefs: []
  type: TYPE_NORMAL
- en: 'To tell Git to ignore this project folder, simply create a `.gitignore` file
    in the root of the project and enter the `node_modules` folder name:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.21 – A .gitignore file contains files and folders that should not
    be committed](img/B19395_Figure_2.21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.21 – A .gitignore file contains files and folders that should not be
    committed
  prefs: []
  type: TYPE_NORMAL
- en: The same goes for our Allure report and results folders. These files will be
    rebuilt repeatedly after each test and will not need to be under version control.
    Once these tests are run from Jenkins, prior runs can be preserved there temporarily
    or permanently.
  prefs: []
  type: TYPE_NORMAL
- en: 'By simply adding and saving the `.gitignore` file, the list of files changes
    dramatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.22 – The repo now only stores the files](img/B19395_Figure_2.22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.22 – The repo now only stores the files
  prefs: []
  type: TYPE_NORMAL
- en: Once this `.gitignore` file is saved, we will see the changes reflected in GitHub
    Desktop with a manageable size of just eight files.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Never store passwords in the repo. A password should be provided by a secure
    data provider service such as Vault or AWS Secrets. If no such option exists,
    then a password file could be referenced in the folder above the project. Otherwise,
    storing such a credential file in the project requires adding it to the `.gitignore`
    file for security.
  prefs: []
  type: TYPE_NORMAL
- en: One of the first bugs I found in my career was related to passwords. Here, the
    user had the option to reset their password with a random string of characters.
    This page would occasionally crash. The reason was that the requirement had the
    password generated from all 128 ASCII characters. This included BELL, unprintable
    characters, as well as ones that were difficult to type on the keyboard. The real
    problem was that this set included angle brackets (`<` and `>`). The page would
    only crash when a new password was generated with one of those two characters,
    as they were interpreted as opening or closing HTML tags on the page.
  prefs: []
  type: TYPE_NORMAL
- en: There are tools that IT security uses to detect passwords in repos, but they
    often only check the `main` or `master` repos and ignore the later `feature` branches.
    This, too, is a security risk. Always clean up old branches, as this can be considered
    a **security operations center** (**SOC**) II compliance violation, even if the
    passwords have long since expired.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now add a summary description and optional details. Simply click **Commit
    to main** – all our new files will be committed to our local main branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.23 – Adding a comment and details to a local commit](img/B19395_Figure_2.23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.23 – Adding a comment and details to a local commit
  prefs: []
  type: TYPE_NORMAL
- en: 'However, this is just staged on our local Git repo. The final step is to click
    **Push origin**, which will push it up to GitHub for our team to pull down:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.24 – GitHub Desktop shows that all changes have been committed and
    suggests pushing any new changes](img/B19395_Figure_2.24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.24 – GitHub Desktop shows that all changes have been committed and
    suggests pushing any new changes
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have made your first commit to your Git repo. Your team
    members can now pull your changes to be sure all their tests are running smoothly.
  prefs: []
  type: TYPE_NORMAL
- en: But what if you need to add new functionality that will take a few days to complete?
  prefs: []
  type: TYPE_NORMAL
- en: Branching out
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To be a part of an automation team, you may be asked to add new and complex
    functionality. If this takes a few days, we might consider feature branching.
    A new branch is created from `main`. Your changes will be committed to your branch,
    and changes from `main` will be brought in periodically:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.25 – Adding a new branch in GitHub Desktop from main](img/B19395_Figure_2.25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.25 – Adding a new branch in GitHub Desktop from main
  prefs: []
  type: TYPE_NORMAL
- en: When your changes are complete, a pull request will be made to pull your changes
    into the `main` branch, and the `feature` branch may be deleted.
  prefs: []
  type: TYPE_NORMAL
- en: For this book, the final state of the framework will be in a branch named after
    this chapter. The `main` branch will contain the final project.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we installed WebdriverIO with several options added to a set
    of configuration questions. We also showed how Yarn can keep dependencies current.
    Lastly, we showed how to make a commit to the repo from GitHub Desktop.
  prefs: []
  type: TYPE_NORMAL
- en: If you run into issues, check the [*Appendix*](B19395_16.xhtml#_idTextAnchor314)
    at the end of this book. There, you will find a detailed list of common and arcane
    issues with causes, explanations, and resolutions. It also includes a node command
    cheatsheet for many of these initial processes.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore the files and connections in the `wdio`
    config file and look at different ways to debug our code.
  prefs: []
  type: TYPE_NORMAL
