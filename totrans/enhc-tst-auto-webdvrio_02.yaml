- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Fortress of Solitude – Configuring WebdriverIO
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 独立堡垒 – 配置 WebdriverIO
- en: In this chapter, we will install WebdriverIO and its dependencies. There are
    two approaches, and we will discuss the advantages of each. It is also important
    to keep the versions of the dependencies up to date. To help with this, we will
    use Yarn to keep our package.json and yarn.lock files up to date.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将安装 WebdriverIO 及其依赖项。有两种方法，我们将讨论每种方法的优点。同时，保持依赖项的版本更新也很重要。为此，我们将使用 Yarn
    来保持我们的 package.json 和 yarn.lock 文件更新。
- en: 'The setup instructions for WDIO can be found in the **Getting Started** section
    on the official website ([https://webdriver.io/docs/gettingstarted](https://webdriver.io/docs/gettingstarted)):'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: WDIO 的设置说明可以在官方网站的 **入门** 部分找到（[https://webdriver.io/docs/gettingstarted](https://webdriver.io/docs/gettingstarted)）：
- en: '![Figure 2.1 – Getting Started](img/B19395_Figure_2.1.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.1 – 入门](img/B19395_Figure_2.1.jpg)'
- en: Figure 2.1 – Getting Started
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1 – 入门
- en: '![Figure 2.2 – Current documentation indicators for version 7.x](img/B19395_Figure_2.2.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.2 – 7.x 版本的当前文档指示器](img/B19395_Figure_2.2.jpg)'
- en: Figure 2.2 – Current documentation indicators for version 7.x
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 – 7.x 版本的当前文档指示器
- en: 'In this section, we''ll cover the following main topics:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将涵盖以下主要主题：
- en: WebdriverIO setup
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WebdriverIO 设置
- en: Building and installing the project dependencies
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建和安装项目依赖项
- en: Making out first commit
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进行第一次提交
- en: Tip
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Be sure you are viewing the latest version of WDIO 8.0\. Googling questions
    about WDIO features can lead to support pages of prior versions.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您正在查看 WDIO 8.0 的最新版本。在 Google 上搜索有关 WDIO 功能的问题可能会导致旧版本的支持页面。
- en: WebdriverIO setup
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WebdriverIO 设置
- en: 'The WDIO team works hard to make everything easy to install, as described in
    the documentation. WDIO can be set up in two ways:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: WDIO 团队努力使一切安装变得简单，如文档所述。WDIO 可以以两种方式设置：
- en: Custom configuration while answering a series of questions
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在回答一系列问题时进行自定义配置
- en: Cloned from an existing project on GitHub
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 GitHub 上的现有项目克隆
- en: For this project, we will show the questions and the selected answers. The second
    option, cloning the boilerplate project approach, is described in the following
    section.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此项目，我们将展示问题和所选答案。第二种方法，克隆样板项目方法，将在下一节中描述。
- en: Option 1 – required steps to start installing WebdriverIO 8.0 for TypeScript
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 选项 1 – 开始安装 TypeScript 的 WebdriverIO 8.0 所需的步骤
- en: 'Navigate from the `\repos\wdio` folder. The quickest way to set up a WDIO project
    quickly from Yarn is to type `yarn create wdio`, ending with a dot (`.`):'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `\repos\wdio` 文件夹导航。使用 Yarn 快速设置 WDIO 项目的最快方法是键入 `yarn create wdio`，以点（`.`）结束：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The WDIO robot will appear, and a list of configuration questions will be presented:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: WDIO 机器人将出现，并显示一系列配置问题：
- en: '![Figure 2.3 – WDIO initialization from the code TERMINAL window](img/B19395_Figure_2.3.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.3 – 从代码 TERMINAL 窗口初始化 WDIO](img/B19395_Figure_2.3.jpg)'
- en: Figure 2.3 – WDIO initialization from the code TERMINAL window
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3 – 从代码 TERMINAL 窗口初始化 WDIO
- en: 'The initialization will ask how to configure WDIO from scratch. Here is the
    list of settings for WebDriver 8.0\. There are several options, and many will
    use the default. Each item with a star (`*`) shows the choice selected at setup:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化将询问如何从头开始配置 WDIO。以下是 WebDriver 8.0 的设置列表。有几个选项，许多人会使用默认设置。带有星号（`*`）的每个项目都显示了在设置时选择的选项：
- en: Note
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: WebdriverIO is always being updated. These questions themselves should be similar
    for both Mac and Windows users. However, the order, phrasing, and selection details
    do change slightly as new features are added.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: WebdriverIO 一直在更新。这些问题本身对于 Mac 和 Windows 用户应该是相似的。然而，随着新功能的添加，顺序、措辞和选择细节会有所变化。
- en: '![Figure 2.4 – Settings](img/B19395_Figure_2.4.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.4 – 设置](img/B19395_Figure_2.4.jpg)'
- en: Figure 2.4 – Settings
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4 – 设置
- en: '**? What type of testing would you like to do? (Use** **arrow keys)**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**? 您想进行哪种类型的测试？（使用** **箭头键）**'
- en: (*) E2E Testing - of Web or Mobile Applications
  id: totrans-31
  prefs:
  - PREF_UL
  - PREF_BQ
  type: TYPE_NORMAL
  zh: (*) 端到端测试 - Web 或移动应用程序
- en: ( ) Component or Unit Testing - in the browser
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) 组件或单元测试 - 在浏览器中
- en: https://webdriver.io/docs/component-testing
  id: totrans-33
  prefs:
  - PREF_UL
  - PREF_BQ
  type: TYPE_NORMAL
  zh: https://webdriver.io/docs/component-testing
- en: ( ) Desktop Testing - of Electron Applications
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) 桌面测试 - Electron 应用程序
- en: https://webdriver.io/docs/desktop-testing/electron
  id: totrans-35
  prefs:
  - PREF_UL
  - PREF_BQ
  type: TYPE_NORMAL
  zh: https://webdriver.io/docs/desktop-testing/electron
- en: ( ) Desktop Testing - of MacOS Applications
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) 桌面测试 - MacOS 应用程序
- en: https://webdriver.io/docs/desktop-testing/macos
  id: totrans-37
  prefs:
  - PREF_UL
  - PREF_BQ
  type: TYPE_NORMAL
  zh: https://webdriver.io/docs/desktop-testing/macos
- en: '**? Where is your automation backend located? (Use** **arrow keys)**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**? 您的自动化后端位于何处？（使用** **箭头键）**'
- en: (*) On my local machine (default)
  id: totrans-39
  prefs:
  - PREF_UL
  - PREF_BQ
  type: TYPE_NORMAL
  zh: (*) 在我的本地机器（默认）
- en: ( ) In the cloud using Experitest
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) 在云中使用 Experitest
- en: ( ) In the cloud using Sauce Labs
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) 在云中使用 Sauce Labs
- en: ( ) In the cloud using Browserstack or Testingbot or LambdaTest or a different
    service
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) 在云中使用 Browserstack 或 Testingbot 或 LambdaTest 或其他服务
- en: ( ) I have my own Selenium cloud
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) 我有自己的 Selenium 云
- en: Today, there are many cloud options, including `Experitest`, `Sauce Labs`, `BrowserStack`,
    `Testingbot`, and `LambdaTest`. For this book, we will install the automation
    backend on our local Mac or Windows machine.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，有许多云选项，包括 `Experitest`、`Sauce Labs`、`BrowserStack`、`Testingbot` 和 `LambdaTest`。对于这本书，我们将在本地的
    Mac 或 Windows 机器上安装自动化后端。
- en: 'Next is the environment type. For these purposes, we will use `Web`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是环境类型。为此目的，我们将使用 `Web`：
- en: '**? Which environment would you like to automate? (Use** **arrow keys)**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**? 您想自动化哪个环境？(使用** **箭头键)**'
- en: (*) Web - web applications in the browser
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (*) Web - 浏览器中的网页应用
- en: ( ) Mobile - native, hybrid, and mobile web apps, on Android or iOS
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) 移动设备 - 原生、混合和移动网页应用，在 Android 或 iOS 上
- en: 'Then, select the browser(s) we will be using. Select the default of Chrome.
    Note that we can add others later:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，选择我们将要使用的浏览器。选择默认的 Chrome。注意，我们稍后可以添加其他浏览器：
- en: '**? With which browser should we start? (Press <space> to select, <a> to toggle
    all, <i> to invert selection, and <enter>** **to proceed)**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**? 我们应该从哪个浏览器开始？(按 <space> 选择，按 <a> 切换所有，按 <i> 反转选择，并按 <enter> ****继续)**'
- en: (*) Chrome
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (*) Chrome
- en: ( ) Firefox
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) Firefox
- en: ( ) Safari
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) Safari
- en: ( ) Microsoft Edge
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) Microsoft Edge
- en: 'Next is the reporting framework type. For this book, we will be using Jasmine.
    However, much of the code that’s supplied will apply to all listed frameworks:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是报告框架类型。对于这本书，我们将使用 Jasmine。然而，提供的许多代码将适用于所有列出的框架：
- en: '**? Which framework do you want to use? (Use** **arrow keys)**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**? 您想使用哪个框架？(使用** **箭头键)**'
- en: ( ) Mocha (https://mochajs.org/)
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) Mocha (https://mochajs.org/)
- en: ( ) Mocha with Serenity/JS (https://serenity-js.org/)
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) Mocha with Serenity/JS (https://serenity-js.org/)
- en: (*) Jasmine (https://jasmine.github.io/)
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (*) Jasmine (https://jasmine.github.io/)
- en: ( ) Jasmine with Serenity/JS (https://serenity-js.org/)
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) Jasmine with Serenity/JS (https://serenity-js.org/)
- en: ( ) Cucumber (https://cucumber.io/)
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) Cucumber (https://cucumber.io/)
- en: ( ) Cucumber with Serenity/JS (https://serenity-js.org/)
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) Cucumber with Serenity/JS (https://serenity-js.org/)
- en: 'Out of the box, WebdriverIO uses Mocha by default. However, it also supports
    Jasmine and can be combined with Chai for advanced assertions. Cucumber is an
    extra layer of abstraction framework that hides the core code. This allows fewer
    technical resources to create tests from Feature files. Cucumber is outside the
    scope of this book, but the techniques described can be implemented in a Cucumber
    WDIO project. Next, we will tell WDIO this is a Typescript project:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: WebdriverIO 默认使用 Mocha。然而，它也支持 Jasmine，并且可以与 Chai 结合使用进行高级断言。Cucumber 是一个抽象层框架，它隐藏了核心代码。这使得使用
    Feature 文件创建测试时需要的专业技术资源更少。Cucumber 不在本书的范围之内，但描述的技术可以在 Cucumber WDIO 项目中实现。接下来，我们将告诉
    WDIO 这是一个 TypeScript 项目：
- en: '**? Do you want to use a compiler? (Use** **arrow keys**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**? 您想使用编译器吗？(使用** **箭头键)**'
- en: ( ) Babel (https://babeljs.io/)
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) Babel (https://babeljs.io/)
- en: (*) TypeScript (https://www.typescriptlang.org/)
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (*) TypeScript (https://www.typescriptlang.org/)
- en: ( ) No!
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) 不！
- en: '**Question: What is Babel and is** **it needed?**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题：什么是 Babel 以及是否需要它？**'
- en: Babel ([https://babeljs.io/](https://babeljs.io/)) is a JavaScript transpiler.
    Because JavaScript is implemented differently in different browsers, a transpiler
    is used to transform our code to an older JavaScript version. Some features are
    not implemented in certain browsers, such as async/await, depending on what browser
    version we are testing against. So, a transpiler allows us to have our framework
    be backward compatible. Although this is a TypeScript project, we do not need
    the TypeScript transpiler.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Babel ([https://babeljs.io/](https://babeljs.io/)) 是一个 JavaScript 编译器。由于 JavaScript
    在不同的浏览器中实现方式不同，因此使用编译器将我们的代码转换为较旧的 JavaScript 版本。某些功能在某些浏览器中未实现，例如 async/await，这取决于我们测试的浏览器版本。因此，编译器允许我们的框架具有向后兼容性。尽管这是一个
    TypeScript 项目，但我们不需要 TypeScript 编译器。
- en: '**Question: How to know what features are available in different browsers**
    **and versions?**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题：如何知道不同浏览器和版本中可用的功能？**'
- en: 'The [caniuse.com](http://caniuse.com) website provides descriptive tables of
    the different ECMAScript features that are supported:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[caniuse.com](http://caniuse.com) 网站提供了不同 ECMAScript 特性支持的描述性表格：'
- en: We will be creating our tests in TypeScript, which is a superset of JavaScript.
    The Typescript transpiler will be used. Now to get a quick startup sample script.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 TypeScript 编写测试，它是 JavaScript 的超集。将使用 TypeScript 编译器。现在，为了快速启动示例脚本。
- en: '**? Do you want WebdriverIO to autogenerate some** **test files?**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**? 您想让 WebdriverIO 自动生成一些** **测试文件吗？**'
- en: (Y/n) Yes
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: (Y/n) 是
- en: This will automatically set up a sample test to run to ensure WebdriverIO is
    working. It is also where we will build a framework unit test to check features
    are working. Oh yes, we are developers, and our automation project has its own
    unit and integration tests.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这将自动设置一个示例测试以运行，以确保 WebdriverIO 正在正常工作。这也是我们将构建框架单元测试以检查功能是否正常工作的地方。哦，是的，我们是开发者，我们的自动化项目有自己的单元和集成测试。
- en: 'The following is the default path for the TypeScript sample test cases and
    should not be changed:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是为 TypeScript 示例测试用例提供的默认路径，不应更改：
- en: '**? Where should be the location of your** **specs files?**'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**? 您的** **规格文件** **应该位于何处？**'
- en: ./test/specs/**/*.ts
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: ./test/specs/**/*.ts
- en: Tests can be organized into feature sub-folders and smoke tests under the specs
    folder. Notice that because we selected TypeScript in the prior question, the
    test extensions (.js) replaced with .ts.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 测试可以组织到 specs 文件夹下的功能子文件夹和冒烟测试中。请注意，因为我们之前选择了 TypeScript，所以测试扩展 (.js) 已替换为 .ts。
- en: '**? Do you want to use page** **objects (**[https://martinfowler.com/bliki/PageObject.html](https://martinfowler.com/bliki/PageObject.html)**)?**'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**? 您想使用页面** **对象(**[https://martinfowler.com/bliki/PageObject.html](https://martinfowler.com/bliki/PageObject.html)**)
    吗？**'
- en: 'Yes'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 是
- en: This sets up a Page Object Model folder structure for our project.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们项目设置了一个页面对象模型文件夹结构。
- en: '**? Where are your page objects** **located? ./test/pageobjects/**/*.ts**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**? 您的页面对象** **位于何处？ ./test/pageobjects/**/*.ts**'
- en: Now, we want to configure our reporters.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们想要配置我们的报告器。
- en: Which reporter do you want to use?
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您想使用哪个报告器？
- en: (*) spec
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (*) spec
- en: ( ) dot
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) dot
- en: ( ) junit
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) junit
- en: (*) allure
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: (*) Allure
- en: ( ) video
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) 视频
- en: ( ) mochawesome
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) mochawesome
- en: ( ) slack
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) Slack
- en: WebdriverIO supports a wide variety of reporters. For this small sample, we
    will start with the spec and allure reporters. Note that WDIO even supports a
    **Video** option. You may notice that Slack is included. In the final chapter
    of this book, we will be using Jenkins to send update messages to a Slack channel.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: WebdriverIO 支持广泛的报告器。在这个小型示例中，我们将从 spec 和 allure 报告器开始。请注意，WDIO 甚至支持 **视频**
    选项。您可能会注意到 Slack 已包含在内。在本书的最后一章中，我们将使用 Jenkins 向 Slack 频道发送更新消息。
- en: '**? Do you want to add a plugin to your** **test setup?**'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**? 您想将插件添加到您的** **测试设置中吗？**'
- en: '( ) wait-for: utilities that provide functionalities to wait for certain conditions
    till a defined task is complete.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '( ) wait-for: 提供等待特定条件直到定义的任务完成的功能的实用工具。'
- en: https://www.npmjs.com/package/wdio-wait-for
  id: totrans-96
  prefs:
  - PREF_UL
  - PREF_BQ
  type: TYPE_NORMAL
  zh: https://www.npmjs.com/package/wdio-wait-for
- en: '( ) angular-component-harnesses: support for Angular component test harnesses'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) angular-component-harnesses：支持 Angular 组件测试工具包。
- en: https://www.npmjs.com/package/@badisi/wdio-harness
  id: totrans-98
  prefs:
  - PREF_UL
  - PREF_BQ
  type: TYPE_NORMAL
  zh: https://www.npmjs.com/package/@badisi/wdio-harness
- en: '( ) Testing Library: utilities that encourage good testing practices laid down
    by dom-testing-library.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) Testing Library：鼓励遵循 dom-testing-library 的良好测试实践的实用工具。
- en: https://testing-library.com/docs/webdriverio-testing-library/intro
  id: totrans-100
  prefs:
  - PREF_UL
  - PREF_BQ
  type: TYPE_NORMAL
  zh: https://testing-library.com/docs/webdriverio-testing-library/intro
- en: In our framework, we will have an advanced approach for waiting for page synchronization.
    This option will be left as-is.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的框架中，我们将采用高级方法等待页面同步。此选项将保持不变。
- en: If the application under test (AUT) is an Angular project, it is recommended
    to use the Angular Component Harnesses configuration.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要测试的应用程序（AUT）是 Angular 项目，建议使用 Angular Component Harnesses 配置。
- en: '**? Do you want to add a service to your** **test setup?**'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**? 您想将服务添加到您的** **测试设置中吗？**'
- en: ( ) vscode
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) VS Code
- en: ( ) eslinter-service
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) eslinter-service
- en: ( ) lambdatest
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) lambdatest
- en: ( ) crossbrowsertesting
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) crossbrowsertesting
- en: ( ) vscode
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) VS Code
- en: ( ) docker
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) docker
- en: ( ) slack
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ( ) Slack
- en: Note
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 备注
- en: 34 additional services are integrated into WDIO, including Slack, Cross Browser
    Testing (Selenium Standalone), and ES-Linter. Covering them all is beyond the
    scope of this book.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 34 个附加服务已集成到 WDIO 中，包括 Slack、跨浏览器测试（Selenium Standalone）和 ES-Linter。涵盖所有这些超出了本书的范围。
- en: 'The WebdriverIO **Visual Studio Code** (**VS Code**) service allows us to seamlessly
    test extensions from end to end in the VS Code Desktop ID. By providing a path
    to your extension, the service does the rest, as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: WebdriverIO **Visual Studio Code** （**VS Code**）服务允许我们在 VS Code 桌面 ID 中无缝测试从端到端的扩展。通过提供您的扩展路径，服务将完成其余工作，如下所示：
- en: 🏗 Installs VS Code (either stable, insiders, or a specified version).
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 🏗 安装 VS Code（可以是稳定版、内部版本或指定版本）。
- en: ⬇ Download Chromedriver specific to the given VS Code version.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ⬇ 下载与给定 VS Code 版本特定的 Chromedriver。
- en: 🚀 Enables you to access the VS Code API from your tests.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 🚀 允许您从测试中访问 VS Code API。
- en: 🖥 Starts VS Code with custom user settings (including support for VS Code on
    Ubuntu, macOS, and Windows).
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 🖥 使用自定义用户设置启动 VS Code（包括对 Ubuntu、macOS 和 Windows 上 VS Code 的支持）。
- en: 🌐 Serves VS Code from a server to be accessed by any browser for testing web
    extensions.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 🌐 从服务器提供 VS Code，以便任何浏览器都可以访问进行测试扩展。
- en: 📔 Bootstraps page objects with locators that match your VS Code version.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 📔 使用与您的 VS Code 版本匹配的定位器启动页面对象。
- en: The next question asks you to enter the landing page for the application under
    test. For this, we will use the default provided as the sample tests use this
    to navigate internally to a website for testing.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个问题要求您输入测试应用的着陆页。为此，我们将使用默认提供的，因为示例测试使用它来导航到测试网站。
- en: '**? What is the** **base URL?**'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**? 基础 URL 是什么？**'
- en: http://localhost
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: http://localhost
- en: This is the base landing page that our tests will launch.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的测试将启动的基本着陆页。
- en: A base landing page ensures we do not repeatedly add code to navigate to the
    same landing page. Later in this book, we will see how to customize this value.
    For the moment, we will use the internet sandbox for testing.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 一个基本着陆页确保我们不会重复添加代码来导航到相同的着陆页。在本书的后面部分，我们将看到如何自定义此值。目前，我们将使用互联网沙盒进行测试。
- en: The final installation step is to have npm download and install all the packages.
    While this part can be performed by the installer, we need to make one modification.
    Choose No for the final question.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的安装步骤是让 npm 下载并安装所有包。虽然这部分可以由安装程序执行，但我们需要进行一项修改。对于最终问题选择否。
- en: '**? Do you want me to run `npm** **install` (Y/n)**'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**? 你想要我运行 `npm** **install` (Y/n)**'
- en: 'No'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 否
- en: We will be using Yarn rather than npm as our package manager due to its speed.
    This completes the setup for installing and configuring WebdriverIO from the wizard.
    Another option is to clone an existing project, which will be covered next. Skip
    to the *Installing and configuring WebdriverIO* section if you do not plan to
    clone from an existing project.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Yarn 的速度更快，我们将使用 Yarn 而不是 npm 作为包管理器。这完成了从向导安装和配置 WebdriverIO 的设置。另一个选项是克隆现有项目，这将在下一部分介绍。如果您不打算从现有项目克隆，请跳转到
    *安装和配置 WebdriverIO* 部分。
- en: Because we are using Yarn as our package manager instead of npm, we will need
    to remove the package-lock.json file and run the yarn install command to build
    the equivalent yarn.lock file.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用 Yarn 作为包管理器而不是 npm，我们需要删除 package-lock.json 文件并运行 yarn install 命令来构建等效的
    yarn.lock 文件。
- en: '[PRE1]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Option 1 – cloning WebdriverIO from a boilerplate project
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选项 1 – 从模板项目克隆 WebdriverIO
- en: An alternate way to set up WDIO is to use a preconfigured WDIO boilerplate project
    from the WDIO GitHub repo. This means that less troubleshooting might be needed.
    We can choose from many preconfigured boilerplate projects with all the necessary
    components.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 WDIO 的另一种方法是使用 WDIO GitHub 仓库中的预配置 WDIO 模板项目。这意味着可能不需要进行太多的故障排除。我们可以从许多预配置的模板项目中选择，这些项目包含所有必要的组件。
- en: 'For this project, we will fork the `Jasmine TypeScript Boilerplate` project
    from GitHub:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，我们将从 GitHub 上的 `Jasmine TypeScript Boilerplate` 项目进行分支：
- en: '![Figure 2.5 – The Jasmine TypeScript boilerplate project on GitHub](img/B19395_Figure_2.5.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.5 – GitHub 上的 Jasmine TypeScript 模板项目](img/B19395_Figure_2.5.jpg)'
- en: Figure 2.5 – The Jasmine TypeScript boilerplate project on GitHub
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5 – GitHub 上的 Jasmine TypeScript 模板项目
- en: 'Click the **jasmine-boilerplate** link. This will allow us to create our own
    version via the **Code** button:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **jasmine-boilerplate** 链接。这将允许我们通过 **代码** 按钮创建自己的版本：
- en: '![Figure 2.6 – Copying the project URL from GitHub](img/B19395_Figure_2.6.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.6 – 从 GitHub 复制项目 URL](img/B19395_Figure_2.6.jpg)'
- en: Figure 2.6 – Copying the project URL from GitHub
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6 – 从 GitHub 复制项目 URL
- en: 'Click **Code**. Multiple choices for cloning the project will be displayed.
    Select **Open with** **GitHub Desktop**:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **代码**。将显示克隆项目的多个选择。选择 **使用** **GitHub Desktop** 打开：
- en: '![Figure 2.7 – Cloning from the source path to the local destination](img/B19395_Figure_2.7.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.7 – 从源路径克隆到本地目标](img/B19395_Figure_2.7.jpg)'
- en: Figure 2.7 – Cloning from the source path to the local destination
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7 – 从源路径克隆到本地目标
- en: Click `repos` path.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 `repos` 路径。
- en: 'Next, we will change the `repo\wdio`, and clicking **Clone**:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将更改 `repo\wdio`，并点击 **克隆**：
- en: '![Figure 2.8 – The project’s Explorer icon in VS Code](img/B19395_Figure_2.8.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.8 – VS Code 中的项目资源管理器图标](img/B19395_Figure_2.8.jpg)'
- en: Figure 2.8 – The project’s Explorer icon in VS Code
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.8 – VS Code 中的项目资源管理器图标
- en: Click the `WDIO` folder.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 `WDIO` 文件夹。
- en: 'Then, click `repo\wdio` folder, and click **Open**:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，点击 `repo\wdio` 文件夹，并点击 **打开**：
- en: '![Figure 2.9 – Trusting the authors of a project](img/B19395_Figure_2.9.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.9 – 信任项目的作者](img/B19395_Figure_2.9.jpg)'
- en: Figure 2.9 – Trusting the authors of a project
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.9 – 信任项目的作者
- en: If this dialogue appears, check the **Trust the authors of all files in the
    parent folder ‘repos’** option and click **Yes, I trust** **the authors**.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出现此对话框，请检查 **信任父文件夹‘repos’中所有文件的作者** 选项，然后点击 **是，我信任** **作者**。
- en: With that, we have covered the clone installation approach. Next, we will install
    everything.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们就涵盖了克隆安装方法。接下来，我们将安装所有内容。
- en: Building and installing the project dependencies
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建和安装项目依赖项
- en: 'If you installed WebdriverIO from an existing project, this is where we continue.
    We need to build the project before we can run our first test. From the Terminal,
    type the following:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从一个现有项目中安装了 WebdriverIO，这就是我们继续的地方。在我们运行第一个测试之前，我们需要构建项目。在终端中，输入以下内容：
- en: '[PRE2]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will bring in all the associated packages to run the project. Sometime
    in the future, vulnerabilities may occur and we will have to update our packages.
    We can use Yarn to check which packages are current and which are outdated:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这将引入所有相关包以运行项目。在未来某个时候，可能会出现漏洞，我们不得不更新我们的包。我们可以使用 Yarn 检查哪些包是当前的，哪些是过时的：
- en: '[PRE3]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output can be seen in the following screenshot:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 输出可以在以下屏幕截图中看到：
- en: '![Figure 2.10 – Displaying the outdated package](img/B19395_Figure_2.10.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.10 – 显示过时的包](img/B19395_Figure_2.10.jpg)'
- en: Figure 2.10 – Displaying the outdated package
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.10 – 显示过时的包
- en: 'Incompatibility could occur if we upgrade all packages blindly. Fortunately,
    there is the yarn upgrade command, which allows the packages to be upgraded individually:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们盲目地升级所有包，可能会发生不兼容的情况。幸运的是，有 yarn upgrade 命令，允许单独升级包：
- en: '[PRE4]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We will see the following output:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到以下输出：
- en: '![Figure 2.11 – Interactive package list for upgrading](img/B19395_Figure_2.11.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.11 – 升级时的交互式包列表](img/B19395_Figure_2.11.jpg)'
- en: Figure 2.11 – Interactive package list for upgrading
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.11 – 升级时的交互式包列表
- en: This gives us the most flexibility when we’re keeping our project packages up
    to date.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们保持项目包更新时具有最大的灵活性。
- en: Quick tip
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 快速提示
- en: If you want to clear the Terminal, use cls in Windows or Ctrl + K or clear on
    Mac.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想清除终端，在 Windows 中使用 cls 或者在 Mac 上使用 Ctrl + K 或 clear。
- en: After the installation, the yarn.lock file will be updated and the node_modules
    folder will have all the supporting dependencies downloaded. This contains the
    expanded list of packages, which has been included to support the packages in
    package.json. The `yarn.lock` file will never need to be edited.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，yarn.lock 文件将被更新，node_modules 文件夹将下载所有支持依赖项。这包含已包含以支持 package.json 中包的包的扩展列表。`yarn.lock`
    文件永远不需要编辑。
- en: 'At this point, we should point out that the WebdriverIO setup assumes that
    a novice user may not know what to do to bring in all the supporting packages:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们应该指出，WebdriverIO 的设置假设新手用户可能不知道如何引入所有支持包：
- en: '![Figure 2.12 – WebdriverIO with TypeScript successfully installed](img/B19395_Figure_2.12.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.12 – 成功安装 TypeScript 的 WebdriverIO](img/B19395_Figure_2.12.jpg)'
- en: Figure 2.12 – WebdriverIO with TypeScript successfully installed
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.12 – 成功安装 TypeScript 的 WebdriverIO
- en: Lastly, we can confirm the version of WebdriverIO that is installed with the
    version flag.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以使用版本标志确认已安装的 WebdriverIO 版本。
- en: 'For Windows users:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows 用户：
- en: '[PRE5]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'For Mac users:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Mac 用户：
- en: '[PRE6]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We made it! All the supported features have been added to the package.json
    file. WDIO even gives us a hint to try out our first test – `npm` `run wdio`:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们做到了！所有支持的功能都已添加到 package.json 文件中。WDIO 甚至给我们一个提示来尝试我们的第一个测试 – `npm` `run wdio`：
- en: '![Figure 2.13 – WebdriverIO gives us a hint on how to run the first test](img/B19395_Figure_2.13.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.13 – WebdriverIO 给我们提示如何运行第一个测试](img/B19395_Figure_2.13.jpg)'
- en: Figure 2.13 – WebdriverIO gives us a hint on how to run the first test
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.13 – WebdriverIO 给我们提示如何运行第一个测试
- en: 'This has set up WebdriverIO and created a sample test that can be executed
    with the following yarn command:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这已经设置了 WebdriverIO 并创建了一个可以执行以下 yarn 命令的示例测试：
- en: '[PRE7]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This results in the following output:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![](img/B19395_Figure_2.14.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19395_Figure_2.14.jpg)'
- en: Figure 2.14 – Output of yard command
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.14 – yard 命令的输出
- en: 'Tests can also be executed by running a command. Let’s take a look at the options
    for both Windows and Mac:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 测试也可以通过运行命令来执行。让我们看看 Windows 和 Mac 的选项：
- en: 'For Windows users:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows 用户：
- en: '[PRE8]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'For Mac users:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Mac 用户：
- en: '[PRE9]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'All the test examples can be found in this book’s GitHub repository: [https://github.com/PacktPublishing/Enhanced-Test-Automation-with-WebdriverIO](https://github.com/PacktPublishing/Enhanced-Test-Automation-with-WebdriverIO).'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 所有测试示例都可以在这个书的 GitHub 仓库中找到：[https://github.com/PacktPublishing/Enhanced-Test-Automation-with-WebdriverIO](https://github.com/PacktPublishing/Enhanced-Test-Automation-with-WebdriverIO)。
- en: 'This runs the sample tests with basic output detail to the Terminal window
    from the **spec** **Reporter** window:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在 **spec** **Reporter** 窗口中运行样本测试，并将基本输出详细信息输出到终端窗口：
- en: '![Figure 2.15 – Pass results shown in the spec report from the sample WDIO
    test](img/B19395_Figure_2.15.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.15 – 从样本 WDIO 测试的 spec 报告中显示的通过结果](img/B19395_Figure_2.15.jpg)'
- en: Figure 2.15 – Pass results shown in the spec report from the sample WDIO test
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.15 – 从样本 WDIO 测试的 spec 报告中显示的通过结果
- en: 'Now that we have set up our project, either by answering the initial configuration
    questions or cloning an existing project, we are ready to look at the configurations
    and file settings of our new WDIO automation project:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了项目，无论是通过回答初始配置问题还是克隆现有项目，我们就可以查看我们新的 WDIO 自动化项目的配置和文件设置：
- en: '![Figure 2.16 – All project files](img/B19395_Figure_2.16.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.16 – 所有项目文件](img/B19395_Figure_2.16.jpg)'
- en: Figure 2.16 – All project files
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.16 – 所有项目文件
- en: This will display all the files and folders in the project. There are quite
    a lot of them, so we will cover the important ones here. Open the `README.md`
    file first.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示项目中的所有文件和文件夹。它们相当多，所以我们将在这里介绍重要的部分。首先打开 `README.md` 文件。
- en: For any project, the `README` file is the best place to start. It gives us critical
    information about how the project is configured, its features, and, most importantly,
    how to quick-start a sample test.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何项目，`README` 文件是开始的最佳位置。它提供了关于项目配置、特性和，最重要的是，如何快速开始样本测试的关键信息。
- en: Next, open the `package.json` file.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开 `package.json` 文件。
- en: 'This is where much of the `Node.js` configuration occurs:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是大部分 `Node.js` 配置发生的地方：
- en: '![Figure 2.17 – All devDependancies in the wdio project](img/B19395_Figure_2.17.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.17 – wdio 项目中的所有 devDependancies](img/B19395_Figure_2.17.jpg)'
- en: Figure 2.17 – All devDependancies in the wdio project
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.17 – wdio 项目中的所有 devDependancies
- en: What is the `yarn.lock` file?
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`yarn.lock` 文件是什么？'
- en: The `yarn.lock` file contains the full list of required project packages, including
    ones that support other packages in package.json. It is massive, but don’t worry
    – you will never have to change it. Yarn Package Manager handles all of this.
    Whew!
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`yarn.lock` 文件包含所需项目包的完整列表，包括在 `package.json` 中支持其他包的包。它很大，但不用担心——你永远不需要更改它。Yarn
    包管理器处理所有这些。哇！'
- en: 'Let’s run Yarn Package Manager with the `install` command to get everything
    loaded and up to date:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 `install` 命令运行 Yarn 包管理器，以获取所有内容并保持最新：
- en: '[PRE10]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This can be seen in the following screenshot:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以在以下屏幕截图中看到：
- en: '![Figure 2.18 – Building the project using Yarn Package Manager](img/B19395_Figure_2.18.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.18 – 使用 Yarn 包管理器构建项目](img/B19395_Figure_2.18.jpg)'
- en: Figure 2.18 – Building the project using Yarn Package Manager
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.18 – 使用 Yarn 包管理器构建项目
- en: Making our first commit
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进行第一次提交
- en: Now that we have our first test running, it is time to bring it all to our fortress
    of solitude – by committing it to our local repo and then to the GitHub repository.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经运行了第一个测试，是时候将它带到我们的孤独堡垒——通过将其提交到本地仓库，然后到 GitHub 仓库。
- en: Ignoring files in the Git repository
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 忽略 Git 仓库中的文件
- en: 'Before we make our first commit to the Git repo, we need to ignore some files.
    Once we have set up our WDIO project, VS Code might suggest that the `node_modules`
    folder should be included in the `gitignore` file:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们将第一个提交到 Git 仓库之前，我们需要忽略一些文件。一旦我们设置了 WDIO 项目，VS Code 可能会建议将 `node_modules`
    文件夹包含在 `gitignore` 文件中：
- en: '![Figure 2.19 – VS Code detects that the node_modules folder can be ignored](img/B19395_Figure_2.19.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.19 – VS Code 检测到 node_modules 文件夹可以被忽略](img/B19395_Figure_2.19.jpg)'
- en: Figure 2.19 – VS Code detects that the node_modules folder can be ignored
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.19 – VS Code 检测到 node_modules 文件夹可以被忽略
- en: 'We never want to commit this folder to our Git repo as it gets updated constantly
    by npm. Having `npm` create the folder contents on the fly with the most up-to-date
    versions is better:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们绝不想将这个文件夹提交到我们的 Git 仓库，因为它会不断由 npm 更新。让 `npm` 在线创建包含最新版本的文件夹内容会更好：
- en: '![Figure 2.20 – GitHub Desktop indicates over 12,000 files to be committed
    to the new repo](img/B19395_Figure_2.20.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.20 – GitHub Desktop 显示有超过 12,000 个文件需要提交到新仓库](img/B19395_Figure_2.20.jpg)'
- en: Figure 2.20 – GitHub Desktop indicates over 12,000 files to be committed to
    the new repo
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.20 – GitHub Desktop 显示有超过 12,000 个文件需要提交到新仓库
- en: This is far more files than we need.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这比我们需要的文件多得多。
- en: 'To tell Git to ignore this project folder, simply create a `.gitignore` file
    in the root of the project and enter the `node_modules` folder name:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 要告诉 Git 忽略此项目文件夹，只需在项目根目录中创建一个 `.gitignore` 文件，并输入 `node_modules` 文件夹名称：
- en: '![Figure 2.21 – A .gitignore file contains files and folders that should not
    be committed](img/B19395_Figure_2.21.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.21 – .gitignore 文件包含不应提交的文件和文件夹](img/B19395_Figure_2.21.jpg)'
- en: Figure 2.21 – A .gitignore file contains files and folders that should not be
    committed
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.21 – .gitignore 文件包含不应提交的文件和文件夹
- en: The same goes for our Allure report and results folders. These files will be
    rebuilt repeatedly after each test and will not need to be under version control.
    Once these tests are run from Jenkins, prior runs can be preserved there temporarily
    or permanently.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这同样适用于我们的 Allure 报告和结果文件夹。这些文件将在每次测试后反复重建，并且不需要置于版本控制之下。一旦这些测试从 Jenkins 运行，之前的运行可以暂时或永久地保存在那里。
- en: 'By simply adding and saving the `.gitignore` file, the list of files changes
    dramatically:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 通过简单地添加和保存 `.gitignore` 文件，文件列表会显著变化：
- en: '![Figure 2.22 – The repo now only stores the files](img/B19395_Figure_2.22.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.22 – 仓库现在只存储文件](img/B19395_Figure_2.22.jpg)'
- en: Figure 2.22 – The repo now only stores the files
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.22 – 仓库现在只存储文件
- en: Once this `.gitignore` file is saved, we will see the changes reflected in GitHub
    Desktop with a manageable size of just eight files.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦保存此 `.gitignore` 文件，我们将在 GitHub Desktop 中看到反映出的变化，文件数量减少到仅八个文件。
- en: Tip
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Never store passwords in the repo. A password should be provided by a secure
    data provider service such as Vault or AWS Secrets. If no such option exists,
    then a password file could be referenced in the folder above the project. Otherwise,
    storing such a credential file in the project requires adding it to the `.gitignore`
    file for security.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 永远不要在仓库中存储密码。密码应由安全数据提供者服务（如 Vault 或 AWS Secrets）提供。如果没有此类选项，则可以在项目文件夹之上引用密码文件。否则，将此类凭证文件存储在项目中需要将其添加到
    `.gitignore` 文件中以确保安全。
- en: One of the first bugs I found in my career was related to passwords. Here, the
    user had the option to reset their password with a random string of characters.
    This page would occasionally crash. The reason was that the requirement had the
    password generated from all 128 ASCII characters. This included BELL, unprintable
    characters, as well as ones that were difficult to type on the keyboard. The real
    problem was that this set included angle brackets (`<` and `>`). The page would
    only crash when a new password was generated with one of those two characters,
    as they were interpreted as opening or closing HTML tags on the page.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我在我的职业生涯中发现的第一个错误与密码有关。在这里，用户有选项使用随机字符序列重置他们的密码。这个页面偶尔会崩溃。原因是要求密码由所有 128 个 ASCII
    字符生成。这包括 BELL、不可打印字符，以及难以在键盘上输入的字符。真正的问题是这个集合包括了角度括号（`<` 和 `>`）。只有当新密码生成时包含这两个字符之一，页面才会崩溃，因为它们被解释为页面上的打开或关闭
    HTML 标签。
- en: There are tools that IT security uses to detect passwords in repos, but they
    often only check the `main` or `master` repos and ignore the later `feature` branches.
    This, too, is a security risk. Always clean up old branches, as this can be considered
    a **security operations center** (**SOC**) II compliance violation, even if the
    passwords have long since expired.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: IT 安全使用一些工具来检测仓库中的密码，但它们通常只检查 `main` 或 `master` 仓库，并忽略后续的 `feature` 分支。这也是一个安全风险。始终清理旧分支，因为这可能被视为
    **安全运营中心**（**SOC**）II 合规违规，即使密码已经很久以前就过期了。
- en: 'We can now add a summary description and optional details. Simply click **Commit
    to main** – all our new files will be committed to our local main branch:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以添加总结描述和可选的详细信息。只需点击 **提交到主分支** – 我们的所有新文件都将提交到我们的本地主分支：
- en: '![Figure 2.23 – Adding a comment and details to a local commit](img/B19395_Figure_2.23.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.23 – 向本地提交添加注释和详细信息](img/B19395_Figure_2.23.jpg)'
- en: Figure 2.23 – Adding a comment and details to a local commit
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.23 – 向本地提交添加注释和详细信息
- en: 'However, this is just staged on our local Git repo. The final step is to click
    **Push origin**, which will push it up to GitHub for our team to pull down:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这只是在我们的本地 Git 仓库中进行了暂存。最后一步是点击**推送到远程仓库**，这将将其推送到 GitHub，以便我们的团队可以拉取：
- en: '![Figure 2.24 – GitHub Desktop shows that all changes have been committed and
    suggests pushing any new changes](img/B19395_Figure_2.24.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.24 – GitHub Desktop 显示所有更改都已提交，并建议推送任何新更改](img/B19395_Figure_2.24.jpg)'
- en: Figure 2.24 – GitHub Desktop shows that all changes have been committed and
    suggests pushing any new changes
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.24 – GitHub Desktop 显示所有更改都已提交，并建议推送任何新更改
- en: Congratulations! You have made your first commit to your Git repo. Your team
    members can now pull your changes to be sure all their tests are running smoothly.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经向你的 Git 仓库提交了第一个更改。现在，你的团队成员可以拉取你的更改，以确保所有测试都能顺利运行。
- en: But what if you need to add new functionality that will take a few days to complete?
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你需要添加需要几天时间才能完成的新功能呢？
- en: Branching out
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分支
- en: 'To be a part of an automation team, you may be asked to add new and complex
    functionality. If this takes a few days, we might consider feature branching.
    A new branch is created from `main`. Your changes will be committed to your branch,
    and changes from `main` will be brought in periodically:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 要成为自动化团队的一员，你可能会被要求添加新的和复杂的功能。如果这需要几天时间，我们可能会考虑特性分支。新分支将从 `main` 分支创建。你的更改将提交到你的分支，并且会定期引入
    `main` 分支的更改：
- en: '![Figure 2.25 – Adding a new branch in GitHub Desktop from main](img/B19395_Figure_2.25.jpg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.25 – 在 GitHub Desktop 中从主分支添加新分支](img/B19395_Figure_2.25.jpg)'
- en: Figure 2.25 – Adding a new branch in GitHub Desktop from main
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.25 – 在 GitHub Desktop 中从主分支添加新分支
- en: When your changes are complete, a pull request will be made to pull your changes
    into the `main` branch, and the `feature` branch may be deleted.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的更改完成后，将创建一个拉取请求，以将你的更改拉入 `main` 分支，并且可能删除 `feature` 分支。
- en: For this book, the final state of the framework will be in a branch named after
    this chapter. The `main` branch will contain the final project.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书，框架的最终状态将在这个章节命名的分支中。`main` 分支将包含最终项目。
- en: Summary
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we installed WebdriverIO with several options added to a set
    of configuration questions. We also showed how Yarn can keep dependencies current.
    Lastly, we showed how to make a commit to the repo from GitHub Desktop.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们在一系列配置问题中添加了几个选项来安装 WebdriverIO。我们还展示了 Yarn 如何保持依赖项最新。最后，我们展示了如何从 GitHub
    Desktop 向仓库提交更改。
- en: If you run into issues, check the [*Appendix*](B19395_16.xhtml#_idTextAnchor314)
    at the end of this book. There, you will find a detailed list of common and arcane
    issues with causes, explanations, and resolutions. It also includes a node command
    cheatsheet for many of these initial processes.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到问题，请查看本书末尾的[*附录*](B19395_16.xhtml#_idTextAnchor314)。在那里，你可以找到一个详细的常见和复杂问题的列表，包括原因、解释和解决方案。它还包括许多这些初始过程的节点命令速查表。
- en: In the next chapter, we will explore the files and connections in the `wdio`
    config file and look at different ways to debug our code.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探索 `wdio` 配置文件中的文件和连接，并查看调试我们代码的不同方法。
