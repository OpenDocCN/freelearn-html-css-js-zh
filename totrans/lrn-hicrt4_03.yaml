- en: Chapter 3. Line, Area, and Scatter Charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about line, area, and scatter charts and explore
    their plotting options in more details. We will also learn how to create a stacked
    area chart and projection charts. Then, we will attempt to plot the charts in
    a slightly more artistic style. The reason for that is to provide us with an opportunity
    to utilize various plotting options. In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing line charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sketching an area chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highlighting and raising the base level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mixing line and area series
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combining scatter and area series
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing line charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First let''s start with a single-series line chart. We will use one of the
    many data sets provided by *The World Bank* organization at [www.worldbank.org](http://www.worldbank.org).
    The following is the code snippet to create a simple line chart that shows the
    percentage of population aged 65 and above in Japan for the past three decades:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the display of the simple chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing line charts](img/7451OS_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Instead of specifying the year number manually as strings in categories, we
    can use the `pointStart` option in the `series` config to initiate the *x* axis
    value for the first point. So we have an empty `xAxis` config and `series` config,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Extending to multiple-series line charts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can include several more line series and emphasize the Japan series by increasing
    the line width to be `6`-pixels wide, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'By making that line thicker, the line series for the Japanese population becomes
    the focus in the chart, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Extending to multiple-series line charts](img/7451OS_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s move on to a more complicated line graph. For the sake of demonstrating
    inverted line graphs, we use the `chart.inverted` option to flip the y and x axes
    to opposite orientations. Then, we change the line colors of the axes to match
    the same series colors as in the previous chapter. We also disable data point
    markers for all the series, and finally align the second series to the second
    entry on the y-axis array, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the inverted graph with double y axes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Extending to multiple-series line charts](img/7451OS_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The data representation of the chart may look slightly odd as the usual time
    labels are swapped to the *y* axis and the data trend is difficult to comprehend.
    The `inverted` option is normally used for showing data in a non-continuous form
    and in a bar format. If we interpret the data from the graph, 12 percent of the
    population is 65 or over in 1990, and the life expectancy is 79.
  prefs: []
  type: TYPE_NORMAL
- en: 'Setting `plotOptions.series.marker.enabled` to `false` switches off all the
    data point markers. If we want to display a point marker for a particular series,
    we can either switch off the marker globally and then turn the marker on for individual
    series, or the other way round:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following graph demonstrates that only the 65-and-over series has point
    markers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Extending to multiple-series line charts](img/7451OS_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Highlighting negative values and raising the base level
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes, we may want to highlight both positive and negative regions in different
    colors. In such cases, we can specify the series color for negative values with
    the series option, `negativeColor`. Let''s create a simple example with inflation
    data, containing both positive and negative data. Here is the series configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We assign the color red for negative inflation values and disable the markers
    in the line series. The line series color is defined by another color, blue, which
    is used for positive values. The following is the graph showing the series in
    separate colors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Highlighting negative values and raising the base level](img/7451OS_03_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s create another slightly more advanced example, in which we define the
    negative territory in terms of the subject. We plot another inflation chart, but
    based on the **European Central Bank** (**ECB**) definition of healthy inflation
    that is 2 percent. Anything below that level is regarded as unhealthy for the
    economy, so we set the color below that threshold to red. Beside the color threshold,
    we also set up a plotline on the y-axis to indicate the cut-off level. The following
    is our first try to set up the chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We set up a green plotline along the y-axis at the value 2, 3 pixels wide.
    The `zIndex` option is to avoid the interval line appearing on top of the plot
    line. With the inflation line series, we disable the markers and also set the
    line width to 3 pixels wide. The following is the initial attempt without thresholding:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Highlighting negative values and raising the base level](img/7451OS_03_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s apply the threshold level to the lines series. The default negative
    color on the y-axis level is at 0 value. As for this particular example, the base
    level for a negative color would be 2\. To raise the base level to 2, we set the
    `threshold` property along with the `negativeColor` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding modification turns part of the line series red to indicate an
    alert:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Highlighting negative values and raising the base level](img/7451OS_03_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Sketching an area chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to use our very first example and turn it into
    a more stylish graph (based on the design of a wind energy poster by Kristin Clute):
    an area spline chart. An **area spline chart** is generated using the combined
    properties of area and spline charts. The main data line is plotted as a spline
    curve and the region underneath the line is filled in a similar color with a gradient
    and opaque style:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sketching an area chart](img/7451OS_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'First, we want to make the graph easier for viewers to look up the values for
    the current trend, so we move the y-axis values to the right side of the chart,
    where they will be closest to the most recent year:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The next thing is to remove the interval lines and have a thin axis line along
    the y axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we simplify the y-axis title with a percentage sign and align to the
    top of the axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'As for the x axis, we thicken the axis line with red and remove the interval
    ticks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'For the chart title, we move the title to the right of the chart, increase
    the margin between the chart and the title, and then adopt a different font for
    the title:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: After that, we are going to modify the whole series presentation, so we first
    change the `chart.type` property from `'line'` to `'areaspline'`. Notice that
    setting the properties inside this `series` object will overwrite the same properties
    defined in `plotOptions.areaspline` and so on in `plotOptions.series`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since so far there is only one series in the graph, there is no need to display
    the legend box. We can disable it with the `showInLegend` property. We then smarten
    the area part with a gradient color and the spline with a darker color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we introduce a couple of data labels along the line to indicate
    that the ranking of old age population has increased over time. We use the values
    in the series data array corresponding to the year 1995 and 2010, and then convert
    the numerical value entries into data point objects. Since we only want to show
    point markers for these two years, we turn off markers globally in `plotOptions.series.marker.enabled`
    and set the marker on individually inside the point objects, accompanied by style
    settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We then set a bounding box around the data labels with round corners (`borderRadius`)
    in the same border color (`borderColor`) as the x axis. The data label positions
    are then finely adjusted with the `x` and `y` options. Finally, we change the
    default implementation of the data label formatter. Instead of returning the point
    value, we print the country ranking:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The final touch is to apply a gray background to the chart and add extra space
    for `spacingBottom`. The extra space for `spacingBottom` is to avoid the credit
    label and x-axis label getting too close together, because we have disabled the
    legend box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: When all these configurations are put together, it produces the chart shown
    in the screenshot at the start of this section.
  prefs: []
  type: TYPE_NORMAL
- en: Mixing line and area series
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to explore different plots including line and
    area series together, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a projection chart, where a single trend line is joined with two series
    in different line styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plotting an area spline chart with another step line series
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring a stacked area spline chart, where two area spline series are stacked
    on top of each other
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simulating a projection chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The projection chart has a spline area with the section of real data, and continues
    in a dashed line with the projection data. To do that we separate the data into
    two series, one for real data and the other for projection data. The following
    is the series configuration code for the data from the year 2015 to 2024\. This
    data is based on the National Institute of Population and Social Security Research
    report ([http://www.ipss.go.jp/pp-newest/e/ppfj02/ppfj02.pdf](http://www.ipss.go.jp/pp-newest/e/ppfj02/ppfj02.pdf)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The future series is configured as a spline in a dashed line style and the
    legend box is disabled, because we want to show both series as being part of the
    same series. Then we set the future (second) series color the same as the first
    series. The final part is to construct the series data. As we specify the x-axis
    time data with the `pointStart` property, we need to align the projection data
    after 2014\. There are two approaches that we can use to specify the time data
    in a continuous form, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Insert null values into the second series data array for padding, to align with
    the real data series
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specify the second series data in `tuples`, an array with both time and projection
    data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here we are going to use the second approach because the series presentation
    is simpler. The following is the screenshot for the future data series only:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Simulating a projection chart](img/7451OS_03_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The real data series is exactly the same as the graph in the screenshot at
    the start of the *Sketching an area chart* section, except without the point markers
    and data labels decorations. The next step is to join both series together, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Since there is no overlap between both series data, they produce a smooth projection
    graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Simulating a projection chart](img/7451OS_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Contrasting a spline with a step line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we are going to plot an area spline series with another line
    series, but in step presentation. The step line transverses vertically and horizontally
    according to changes in series data only. It is generally used for presenting
    discrete data: data without continuous/gradual movement.'
  prefs: []
  type: TYPE_NORMAL
- en: For the purpose of showing a step line, we will continue from the first area
    spline example. First of all, we need to enable the legend by removing the disabled
    `showInLegend` setting and also remove `dataLabels` in the series data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next is to include a new series—**Ages 0 to 14**—in the chart with the default
    line type. Then, we change the line style slightly into different steps. The following
    is the configuration for both series:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the second series in line step style:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Contrasting a spline with a step line](img/7451OS_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Extending to the stacked area chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we are going to turn both series into area splines and stack
    them on top of each other to create a stacked area chart. As the data series are
    stacked together, we can observe the series quantities as individual, proportional,
    and total amounts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s change the second series into another `''areaspline''` type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the `stacking` option to `''normal''` as a default setting for `areaspline`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'This sets both area graphs stacked on top of each other. By doing so, we can
    observe from the data that both age groups roughly compensate for each other to
    make up a total of around 33 percent of the overall population, and the **Ages
    65 and over** group is increasingly outpaced in the later stage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Extending to the stacked area chart](img/7451OS_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Suppose we have three area spline series and we only want to stack two of them
    (although it is clearer to do that in a column chart rather than in an area spline
    chart). As described in the *Exploring PlotOptions* section in [Chapter 2](ch02.html
    "Chapter 2. Highcharts Configurations"), *Highcharts Configurations*, we can set
    the `stacking` option in `plotOptions.series` to `''normal''`, and manually turn
    off `stacking` in the third series configuration. The following is the series
    configuration with another series:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This creates an area spline graph with the third series **Ages 15 to 64** covering
    the other two stacked series, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Extending to the stacked area chart](img/7451OS_03_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Plotting charts with missing data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If a series has missing data, then the default action of Highcharts is to display
    the series as a broken line. There is an option—`connectNulls`—that allows a series
    line to continue even if there is missing data. The default value for this option
    is `false`. Let''s examine the default behavior by setting two spline series with
    null data points. We also enable the point markers, so that we can clearly view
    the missing data points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a chart with the spline series presenting missing points in
    different styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Plotting charts with missing data](img/7451OS_03_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, the **Ages 0 to 14** series has a clear broken line, whereas
    **Ages 65 and over** is configured by setting `connectNulls` to `true`, which
    joins the missing points with a spline curve. If the point marker is not enabled,
    we wouldn't be able to notice the difference.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, we should use this option with caution and it should certainly never
    be enabled with the `stacking` option. Suppose we have a stacked area chart with
    both series and there is missing data only in the **Ages 0 to 14** series, which
    is the bottom series. The default action for the missing data will make the graph
    look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Plotting charts with missing data](img/7451OS_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Although the bottom series does show the broken part, the stack graph overall
    still remains correct. The same area of the top series drops back to single-series
    values and the overall percentage is still intact.
  prefs: []
  type: TYPE_NORMAL
- en: 'The problem arises when we set the `connectNulls` option to `true` and do not
    realize that there is missing data in the series. This results in an inconsistent
    graph, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Plotting charts with missing data](img/7451OS_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The bottom series covers a hole left from the top series that contradicts the
    stack graph's overall percentage.
  prefs: []
  type: TYPE_NORMAL
- en: Combining the scatter and area series
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Highcharts also supports a scatter chart that enables us to plot the data trend
    from a large set of data samples. Here we are going to use the scatter series
    differently, which makes our chart a bit like a poster chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we are going to use a subset of the `''Ages 0 to 14''` data and set
    the series to the `scatter` type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we will enable the data labels for the `scatter` series and make sure
    the `marker` shape is always `''circle''`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code snippet gives us the following graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Combining the scatter and area series](img/7451OS_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Highcharts provides a list of marker symbols as well as allowing users to supply
    their own marker icons (see [Chapter 2](ch02.html "Chapter 2. Highcharts Configurations"),
    *Highcharts Configurations*). The list of supported symbols contains: circle,
    square, diamond, triangle, and triangle-down.'
  prefs: []
  type: TYPE_NORMAL
- en: Polishing a chart with an artistic style
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next step is to format each scatter point into a bubble style with the `radius`
    property and manually set the data label font size proportional to the percentage
    value.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The reason we used the scatter series instead of the bubble series is because
    most of the material in this chapter was written for the first edition; this chart
    was created with an earlier version of Highcharts that didn't support the bubble
    series.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then use the `verticalAlign` property to adjust the labels to center inside
    the enlarged scatter points. The various sizes of scatter points require us to
    present each data point with different attributes. Therefore, we need to change
    the series data definition into an array of point object configurations, such
    as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a graph with a sequence of data points, starting
    with a large marker size and font, then gradually becoming smaller according to
    their percentage values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Polishing a chart with an artistic style](img/7451OS_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, we have two issues with the preceding graph. First, the scatter series
    color (the default second series color) clashes with the gray text labels inside
    the markers, making them hard to read.
  prefs: []
  type: TYPE_NORMAL
- en: 'To resolve this issue, we will change the scatter series to a lighter color
    with the gradient setting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we give the scatter points a darker outline in `plotOptions`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Secondly, the data points are blocked by the end of the axes'' ranges. The
    issue can be resolved by introducing extra padding spaces into both axes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the new look for the graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Polishing a chart with an artistic style](img/7451OS_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For the next part, we will put up a logo and some decorative text. There are
    two ways to import an image into a chart—the `plotBackgroundImage` option or the
    `renderer.image` API call. The `plotBackgroundImage` option brings the whole image
    into the chart background, which is not what we intend to do. The `renderer.image`
    method offers more control over the location and size of the image. The following
    is the call after the chart is created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '`logo.png` is the URL path for the logo image file. The next two parameters
    are the x and y positions (starting from 0, where 0 is the upper-left corner)
    of the chart where the image will be displayed. The last two parameters are the
    width and height of the image file. The `image` call basically returns an `element`
    object and the subsequent `.add` call puts the returned image object into the
    renderer.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As for the decorative text, it is a red circle with white bold text in a different
    size. They are all created from the renderer. In the following code snippet, the
    first renderer call is to create a red circle with x and y locations, and radius
    size. Then SVG attributes are immediately set with the `attr` method that configures
    the transparency and outline in a darker color. The next three renderer calls
    are to create text inside the red circle and set up the text using the `css` method
    for font size, style, and color. We will revisit `chart.renderer` as part of the
    Highcharts API in [Chapter 10](ch10.html "Chapter 10. Highcharts APIs"), *Highcharts
    APIs*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we move the legend box to the top of the chart. In order to locate
    the legend inside the plot area, we need to set the `floating` property to `true`,
    which forces the legend into a fixed layout mode. Then, we remove the default
    border line and set the legend items list into a vertical direction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is our final graph with the decorations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Polishing a chart with an artistic style](img/7451OS_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have explored the usage of line, area, and scatter charts.
    We have seen how much flexibility Highcharts can offer to make a poster-like chart.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to plot column and bar charts with their
    plotting options.
  prefs: []
  type: TYPE_NORMAL
