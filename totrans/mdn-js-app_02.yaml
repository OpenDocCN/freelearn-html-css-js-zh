- en: Chapter 2. Building a Coupon Site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best way to understand Seneca and microservices architecture is by building
    a server-side application that would benefit from the microservices architecture.
    In previous chapter, we saw how large and complex server-side application benefits
    from the microservices architecture and why enterprises use microservices architecture.
    In this chapter, we will build a coupon website to practically demonstrate the
    benefits of using microservices architecture and Seneca to create a server-side
    application. While building this coupon site, you will also learn how to design
    a server-side application using the microservices architecture from scratch, how
    to split the functionality of the application into services, how a client can
    directly communicate with the services, and many other things.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the things that we will cover in this chapter, apart from things related
    to Seneca and microservices architecture, are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the `seneca-mongo-store` plugin to store data in MongoDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a basic image storage server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discussing HTTP basic authentication using the basic-auth npm package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the connect-multiparty npm package to parse HTTP POST requests with the
    `multipart/form-data` content type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving, deleting, and renaming files in Node.js using the `fs` npm package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing pagination with MongoDB and Express
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The coupon site that we will build will allow users to submit coupons. For the
    coupon to be publicly visible, the administrator of the site should accept the
    coupon. Every coupon will have an image attached to it that will be stored and
    served by an image storage server.
  prefs: []
  type: TYPE_NORMAL
- en: We will be using MongoDB to store the coupons. Before you continue further,
    make sure that you have MongoDB installed and running. I am assuming that you
    have basic knowledge of MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: 'The exercise files contain two directories: `Initial` and `Final`. Inside the
    `Final` directory, you will find the complete coupon site source code. In the
    `Initial` directory, you will find the HTML code and directories for the monolithic
    core, services, image storage server, and so on. You will put code related to
    them in their respective directories. The `Initial` directory will help you quickly
    get started with building the coupon site.'
  prefs: []
  type: TYPE_NORMAL
- en: We won't get into designing the frontend of our coupon site. We will only be
    concentrating on building the architecture and functionalities of the site. Therefore,
    the HTML code is already included in the `Initial` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Architecture of our site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our server-side application will be composed of a monolithic core, three services,
    MongoDB server, and image storage server.
  prefs: []
  type: TYPE_NORMAL
- en: The monolithic core will serve pages to the site visitors and administrators.
  prefs: []
  type: TYPE_NORMAL
- en: 'The three services are database service, URL configuration service, and upload
    service. The following is what each of these services do:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Database service**: Adding, retrieving, updating, and deleting coupons in
    MongoDB is done through database service. The monolithic core retrieves coupons
    from MongoDB through database service, and upload service stores coupons through
    database service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Upload service**: When a user submits a coupon, the HTML form is submitted
    to the upload service. The upload service then sends the image to the image storage
    server and adds metadata about the coupon to the database using the database service.
    We moved these operations to a different service, because if we are resizing and
    converting the uploaded image, then it will consume more memory and CPU time and
    keep the port open for more time, which will flood the server and break the monolithic
    core in case there are a large number of submissions at a time, so moving these
    operations to a different service makes sure that if there is a rise in submissions,
    it doesn''t affect the site visitors who are looking for the coupons. We won''t
    be resizing and converting images, but if you want to add this functionality,
    you can add this by simply updating the upload service. While the upload service
    is being updated, the form submissions will not work, but everything else will
    work. Therefore, we can say that this functionality can be independently updated
    without affecting other functionalities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**URL config service**: The client communicates with the monolithic core, image
    storage server, and upload service. In a production site, these three servers
    will remain in three different physical computers with three different IP addresses.
    So, for the client to be able to communicate with them, these three need to be
    exposed via different domain names (that is the monolithic core can be pointed
    using the main domain and the other two using sub domains) or we can use a load
    balancer or reverse proxy that supports URL rerouting so that we can have a single
    domain name and route the requests to the respective server based on the path
    of the URL. The URL config service will serve the base URL to communicate with
    these three servers. To follow this chapter, you can simply run these servers
    in the same physical computer using different ports, and when you are ready to
    make the site live, you can change the base URLs in the URL config service, depending
    on what technique you used to make the client able to communicate with the servers.
    You don''t have to modify the source code of the servers directly, which is a
    cumbersome and risky task.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will be creating our own image storage server. However, in a production site,
    I would recommend that you use Amazon S3 or something similar to store images,
    as it makes it easy to serve images via CDN. You don't have to worry about scaling
    and reliability, and it's low cost. The image storage server that we will be creating
    will be a basic one to just demonstrate how to store images in a separate server
    and serve from there.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the diagram that shows all the architecture''s looks and how
    the servers in the architecture communicate with each other:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Architecture of our site](img/B05154_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating the services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's first build the services before building the image storage server and
    monolithic core.
  prefs: []
  type: TYPE_NORMAL
- en: We will build the database service first, as it only depends on the MongoDB
    server, which is already running. The upload service and monolithic core depend
    on it, therefore it needs to be built before these.
  prefs: []
  type: TYPE_NORMAL
- en: Database service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The database service will provide actions to add coupons, list verified coupons,
    list unverified coupons, verify a coupon, and delete a coupon. These actions will
    be used by the upload service and monolithic core.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Initial/database-service` directory. Inside the directory, you will
    find a `package.json` file and an `app.js` file. The `app.js` file is where you
    will write the code, and `package.json` lists the dependencies for the database
    service. The database service is dependent on the `seneca` and `seneca-mongo-store`
    plugins. Run the `npm install` command inside `Initial/database-service` to install
    the dependencies locally.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code to import the `seneca` module, create the `seneca` instance,
    attach the `seneca-mongo-store` plugin, and initialize the plugin to connect to
    MongoDB:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here we are using `gocoupons` as the database name. I am assuming that the MongoDB
    server is running locally on the default port `27017`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code to create an action that allows you to add a coupon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We will store the coupons in a collection named `coupons`. Here we are setting
    the `verified` property of the document to `false`, that is, whenever a new coupon
    is submitted by a user, we will make it unverified so that the administrator can
    retrieve this newly submitted coupon and verify it manually.
  prefs: []
  type: TYPE_NORMAL
- en: The `thumbnail_id` property doesn't hold the complete URL of the coupon thumbnail,
    instead it's just the filename.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code to create an action to retrieve the verified coupons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This action retrieves maximum 21 coupons and it takes a `skip` argument that
    is used to skip some documents, making it possible to implement pagination using
    this action.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code to create an action to retrieve the unverified coupons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This action will be used to retrieve coupons to display on the admin panel for
    the administrator to accept or reject a coupon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code to create an action to verify a coupon, that is, change the
    `verified` property from `false` to `true`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This action will be invoked when the admin accepts a coupon to be displayed
    publicly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code to create an action to delete a coupon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This action will be invoked when the admin rejects a coupon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have created all the actions for our database service, let''s expose
    these actions via the network so that the other servers can call them. Here is
    the code to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now go ahead and run the database service using the `node app.js` command.
  prefs: []
  type: TYPE_NORMAL
- en: URL config service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The upload services use the URL config service to find the base URL of the monolithic
    core so that it can redirect the user there once the coupon is submitted successfully.
    Also, the monolithic core uses this service to find the base URL of the image
    storage server and upload service so that it can include them in the HTML code.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Initial/config-service` directory. Inside the directory, you will
    find a `package.json` file and an `app.js` file. The `app.js` file is where you
    will write the code and `package.json` lists the dependencies for the config service.
    URL config service is only dependent on seneca. Run the `npm install` command
    inside `Initial/config-service` to install the dependencies locally.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code to import the `seneca` module and create actions
    to return the base URLs of the upload service, monolithic core, and image storage
    server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now go ahead and run the URL config service using the `node app.js` command.
  prefs: []
  type: TYPE_NORMAL
- en: Upload service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The upload service handles the new coupon form submission. The form consists
    of a coupon title, URL, description, price, discount price, and a thumbnail. The
    content type of form submission is `multipart/form-data`, as it is uploading an
    image file.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Initial/upload-service` directory. Inside the directory, you will
    find a `package.json` file and an `app.js` file. The `app.js` file is where you
    will write the code and `package.json` lists the dependencies for the upload service.
    The upload service is dependent on `seneca`, `express`, `connect-multiparty`,
    `path`, `fs` and `request` packages. Run the `npm install` command inside `Initial/upload-service`
    to install the dependencies locally.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code to import the modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'There are chances that the users may upload images with the same name. We don''t
    want images with the same name to overwrite each other. Therefore, we need rename
    every image with a unique name. The following is the code for defining a function
    to generate a unique number, which will be used as an image name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, for the upload service to be able to communicate with the database and
    URL config services, we need to add them to the upload service `seneca` instance.
    The following is the code to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to define an express route to handle POST requests submitted to
    the `/submit` path. Inside the route handler, we will rename the image, upload
    the image to image storage server, add the metadata of the coupon to MongoDB using
    the database service, and redirect to the monolithic core with the status stating
    that the form was submitted successfully. Here is the code to define the route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is how the preceding code works:'
  prefs: []
  type: TYPE_NORMAL
- en: First we added a callback provided by the connect-multiparty module, which parses
    the `multipart/form-data` body and moves the files to a temporary location.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the second callback, we performed our custom operations. In the second callback,
    we first renamed the file so that every image file gets a unique name. Renaming
    is done using the `rename` method of the filesystem module.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then we uploaded the image file to the image storage server using the `post`
    method of the request module.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After this, we deleted the local version of the image file using the `unlink`
    method of the filesystem module.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If uploading the image to the image storage server failed for some reason, then
    we will return an HTTP internal server error to the client.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the image got uploaded to the image storage server successfully, then we
    will add the coupon metadata to MongoDB via the database service.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If, for some reason, the metadata did not get added, we will delete the previously
    stored image in the image storage server and then return an HTTP internal server
    error to the client.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the coupon metadata got added successfully, we will retrieve the base URL
    of monolithic core from the URL config service and redirect there with a `/?status=submitted`
    query string, which indicates that the form was submitted successfully. When the
    monolithic core sees this query string, it displays a message saying that the
    coupon was submitted successfully.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In case the URL config service didn't respond for some reason, we will return
    an HTTP internal server error to the client.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So what you need to keep in mind while coding such services is that you need
    to handle all sorts of failures and also roll back changes if a failure occurs.
    Now, this also makes it easy to update and redeploy the database service, URL
    config service, and image storage server as the upload service handles the failure
    of these services and provides a feedback to the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we have defined our routes. Finally, we need to start the Express server.
    The following is the code to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now go ahead and run the upload service using the `node app.js` command.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the image upload server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have finished building the services. Now let's build the image storage server.
    The image storage server defines the routes using which an image can be stored,
    deleted, or retrieved.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Initial/image-storage` directory. Inside the directory, you will find
    a `package.json` file and an `app.js` file. The `app.js` file is where you will
    write the code, and `package.json` lists the dependencies for the image storage
    server. The upload service is dependent on `express`, `connect-multiparty`, `path`,
    and `fs`. Run the `npm install` command inside `Initial/image-storage` to install
    the dependencies locally.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code to import the modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s define the route using which the upload service can store images
    in the image storage server. The upload service makes the POST request to the
    `/store` URL path to store the image. Here is the code to define the route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Here, at first, we are adding the callback provided by the connect-multiparty
    module, which parses the `multipart/form-data` content type body and also moves
    the files to a temporary location.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we are moving the file from temporary directory to another directory.
    The directory we are moving the file to is `public/images/`. We are moving the
    file using the `rename` method of the filesystem module. Finally, we are sending
    a `Done` string as the body of HTTP response to tell the upload service that the
    file is stored successfully.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s define the route using which the upload service can delete an image
    stored in the image storage server. The upload service makes the GET request to
    the `/delete/:id` URL path, where the `id` parameter indicates the image name.
    The following is the code to define the route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Here we are deleting the image file using the `unlink` method of the `fs` module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we need to serve images to the browser. Looking for static file in
    the `public/images/` directory can do this. The following is the code to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Here we are using the static middleware that looks for static files in the directory
    provided by arguments and serves directly to the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we have defined our routes. Finally, we need to start the Express server.
    Here is the code to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now go ahead and run the image storage server using the `node app.js` command.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the monolithic core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have finished creating the services and image storage server. The users interact
    with the monolithic core to view coupons and the admin interacts with the monolithic
    core to view unverified coupons, and then it either rejects or accepts a coupon.
    Other than new coupon submission by the user, everything else by the user and
    admin is done in the monolithic core.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Initial/monolithic` directory. Inside the directory, you will find
    a `package.json` file and an `app.js` file. The `app.js` file is where you will
    write the code, and `package.json` lists the dependencies for the monolithic core.
    The monolithic core is dependent on `express`, `seneca`, `request` and `basic-auth
    npm` packages. Run the `npm install` command inside `Initial/monolithic` to install
    the dependencies locally.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the `ejs` template engine with Express. Inside the `views` directory,
    you will find `ejs` files for home, new coupon submit forms, and admin pages.
    The files already contain the templates and HTML code. The site is designed using
    Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code to import the modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, for the monolithic core to be able to communicate with the database and
    `url- config` services, we need to add them to the monolithic core `seneca` instance.
    The following is the code to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to set `ejs` as the `view engine`. Here is the code to set `ejs`
    as the view engine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'All the static files such as CSS, JS, and fonts are kept on the `public` directory.
    We need to serve them to the client. Here is the code to serve the static files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Here we are serving the static files in the same way as we served the static
    files (that is, images) in the image upload server.
  prefs: []
  type: TYPE_NORMAL
- en: Now we need to add a route to the server of the home page of our website that
    displays the first 20 coupons. It also displays the **Next** and **Previous**
    buttons to navigate between the next or previous 20 buttons.
  prefs: []
  type: TYPE_NORMAL
- en: 'The home page is accessed via the root URL. The following is the code to add
    a route to the server of the home page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The `index.ejs` file is the view of the home page of our site. The preceding
    code renders this view to generate the final HTML code for the home page.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding code implements pagination by checking whether `prev` or `next`
    keys are present in the query string. If these keys are undefined, then it displays
    the first 20 coupons, otherwise it calculates the `skip` value argument by adding
    20 to the value of the `current` key in the query string.
  prefs: []
  type: TYPE_NORMAL
- en: Then, the code checks whether the total number of coupons retrieved is 21 or
    less. If they are less than 21, then it doesn't display the **Next** button by
    assigning the `next` variable to `false`, otherwise it displays the **next** button
    by assigning the `next` variable to `true`. However, the total number of coupons
    it displays is `20`. We retrieved an extra coupon to just check whether we should
    display the **next** button or not. To find out whether we should display the
    **previous** button or not is fairly easy, that is, if the `next` key is `true`
    in the query string, then we must display the **previous** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding code also checks for the `status=submitted` query string that
    indicates the user was redirected back from the upload service. If it''s present,
    then it assigns the `submitted` local variable for the view to `true`. This is
    the `ejs` template present in the view that checks whether the `submitted` local
    variable is `true` or `undefined` and displays a successful form submission message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the `ejs` template present in the view that displays the coupons and
    the **next** and **previous** buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We are done creating our home page. Now we need to create a route with the
    `/add` URL path that will display a form to submit a new coupon. The view for
    this coupon submission page is `add.ejs`. Here is the code to create the route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Here we are retrieving the base URL of the upload service from the URL config
    service and assigning it to the `upload_service_url` local variable so that the
    form knows where to submit the POST request.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the template in the `add.ejs` view that displays the coupon
    submission form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Now we need to provide a path for the site admin to access the admin panel.
    The path to access admin panel is going to be `/admin`. The admin panel will be
    protected using HTTP basic authentication.
  prefs: []
  type: TYPE_NORMAL
- en: We will create two more routes that will be used by the admin to accept or reject
    a coupon. The routes are `/admin/accept` and `/admin/reject`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code to protect the admin panel using the HTTP basic authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Here we are executing the `auth` callback for all the admin panel paths. The
    callback checks whether the user is logged in or not. If user is not logged in,
    we will ask the user to log in. If the user tries to log in, then we will check
    whether the username and password is correct. If the username and password are
    wrong, we will ask the user to log in again. We will parse the HTTP basic authentication
    based the headers using the `basic-auth` module, that is, we will pass the `req`
    object to the `basicAuth` function to parse it. Here we are hardcoding the username
    and password.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to define the routes to access the admin panel. The `admin.ejs`
    file is the view for the admin panel. The following is the code to add the routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: When the admin visits `/admin`, unverified coupons are displayed along with
    buttons to accept or reject a coupon. When the admin clicks on the **Accept**
    button, then a request is made to the `/admin/accept` path to mark the coupon
    as verified, and when the admin clicks on the **Reject** button, a request is
    made to the `/admin/reject` path to delete the coupon. After accepting or deleting
    a coupon, the admin is redirected to the `/admin` path.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the template that displays the **coupons** and **verification**
    buttons to the admin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We have defined our routes. Finally, we need to start the Express server. Here
    is the code to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Now go ahead and run the monolithic core server using the `node app.js` command.
  prefs: []
  type: TYPE_NORMAL
- en: Website walkthrough
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have completed creating our website. Now, let's walkthrough our site to see
    how it works overall. Before that, make sure that everything is running.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can visit the home page of the website using the `http://localhost:8080/`
    URL. The following is how the web page will look when you will visit it for the
    first time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Website walkthrough](img/B05154_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now to add a coupon, click on the **Submit Coupon** button. Now you will see
    a form. Fill in the form. Here is how it looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Website walkthrough](img/B05154_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now submit the form. After submitting the form, you will be redirected to the
    home page. The following is how the home page will look after redirect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Website walkthrough](img/B05154_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now click on the **Admin** button to visit the admin panel and accept the coupon.
    Here is how the admin panel will look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Website walkthrough](img/B05154_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the **Accept** button to accept it. Now go back to the home page.
    This is how the home page will look now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Website walkthrough](img/B05154_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding image, you can see that the product is listed.
  prefs: []
  type: TYPE_NORMAL
- en: Further improvements to the site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is a list of things we can do now to make the site architecture even better
    and add some extra features. You will also get some practice writing code involving
    the microservices architecture by performing the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a separate service for the admin panel. The benefit of this is that you
    can update the admin panel without affecting the visitors, that is, while the
    admin panel is being updated, the users will still be able to visit and browse
    coupons. For this, you need to move the route of the admin panel to a new service.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetch the username and password from the database. For this, you need to add
    some actions to the database service.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resize or crop images to thumbnail size, as that's the size of an image being
    displayed on the frontend. This will save the disk space. This needs to be done
    with the help of the upload service.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can create a mobile app for the website. For this, you need to create a
    service that provides APIs for the mobile app. New coupons can be submitted to
    the upload service by adding a query string, indicating that the request has arrived
    from the mobile app so that it won't redirect, instead send a response once coupon
    is submitted successfully.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are just some ideas to make the site even better.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how to build a website using Seneca and microservices
    architecture from scratch. The website we built was simple in terms of features,
    but involved a lot of important techniques that are used while building sites
    using the microservices architecture. Now you are ready to choose the architecture
    that suits your site best. I also mentioned the things you can do to make the
    site even better.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss real-time communication among browsers
    using WebRTC.
  prefs: []
  type: TYPE_NORMAL
