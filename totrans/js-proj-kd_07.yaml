- en: Chapter 7. Introducing the Canvas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to learn about HTML canvas. An HTML canvas helps
    you to draw, especially the graphics (for example, circles, squares, rectangles,
    and so on) on your HTML page. The `<canvas></canvas>` tags are usually controlled
    by JavaScript. Canvas can draw texts, which can also be animated. Let's see what
    we can do using the HTML canvas.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing canvas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To add canvas on your HTML page, you need to define the height and width of
    your canvas in the `<canvas></canvas>` tags as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We have defined the canvas ID as `canvasTest`, which will be used to play with
    the canvas. We used inline CSS on our canvas. The 2 px solid border is used to
    have a better view of the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: Adding JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we are going to add few lines of JavaScript for our canvas. We need to
    add our JavaScript just after the `<canvas></canvas>` tags in the `<script></script>`
    tags.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing a rectangle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To test our canvas, let''s draw a rectangle in the canvas by typing the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the script, we declared two JavaScript variables. The `canvas` variable is
    used to hold the content of our canvas using the canvas ID, which we used in our
    `<canvas></canvas>` tags. The `canvasElement` variable is used to hold the context
    of the canvas. We assign `black` to `fillstyle` so that the rectangle that we
    want to draw turns black when filled. We used `canvasElement.fillRect(x, y, w,
    h);` for the shape of the rectangle. Where `x` is the distance of the rectangle
    from the *x* axis; `y` is the distance of the rectangle from the *y* axis; and
    `w` and `h` are the width and height of the rectangle, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full code is as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Drawing a rectangle](img/B04720_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Drawing a line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To draw a line in the canvas that you need to insert the following code in
    your `<script></script>` tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, `canvasElement.moveTo(0,0);` is used to have our line start from the (0,0)
    co-ordinate of our canvas. The `canvasElement.lineTo(100,100);` statement is used
    to make the line diagonal. The `canvasElement.stroke();` statement is used to
    make the line visible. I would suggest you to change the numbers in `canvasElement.lineTo(100,100);`
    and `canvasElement.moveTo(0,0);` and see the changes to your line drawn by canvas.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the output of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Drawing a line](img/B04720_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A quick exercise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Draw a line using canvas and JavaScript, which will be parallel to the *y* axis
    of the canvas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Draw a rectangle having 300 px height and 200 px width. Draw a line on the same
    canvas, touching the rectangle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drawing a circle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To draw a circle in the canvas, you need to add the following code in your
    `<script></script>` tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here, we used `canvasElement.beginPath();` to start drawing the circle, `canvasElement.arc(95,50,40,0,2*Math.PI);`
    for the shape of the circle, and `canvasElement.stroke();` to set the circle visible.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `canvasElement.arc(95,50,40,0,2*Math.PI);` statement is similar to `canvasElement.arc(x,
    y, r, sA, eA, ac);`,
  prefs: []
  type: TYPE_NORMAL
- en: where `x` is the starting coordinate from *x* axis, `y` is the starting coordinate
    from *y* axis, `r` is the radius of the circle, `sA` is the starting angle of
    the circle, `eA` is the ending angle of the circle, and `ac` is the direction
    of the circle. Here, `ac` denotes anticlockwise.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output of our code will be the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Drawing a circle](img/B04720_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Draw linear gradient
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s draw something new. We will draw a rectangle and make its color fade
    gradually. Type the following code in your `<script></script>` tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We added `canvasElement.createLinearGradient(0,0,100,0);` to create the gradient
    or fading. We added `grdient.addColorStop(0,"blue");` and `grdient.addColorStop(1,"white");`
    to color the rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output of the code is as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Draw linear gradient](img/B04720_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A quick exercise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Draw the following smiley face using HTML canvas. (**Hint**: you will have
    to draw three full circles and a half circle. The trick is that you can draw the
    figure by playing with the code of circle for the canvas.):![A quick exercise](img/B04720_07_05.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Draw a circle with a color gradient.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's make a clock!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to draw an analog clock and make it work as a real clock. In your
    body part of the HTML document, type the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here, `cX` and `cY` are the center coordinates of our clock. We took 150 px
    as the clock's radius. You can increase or decrease it.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we need to initialize the variables. Make an `init();` function after
    defining the preceding variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'The function should look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s initialize the second, minute, and hour hands of our clock:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here, `date.getHours()`, `date.getMinutes()`, and `date.getSeconds()` will return
    your computer's time and save them on our variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make another function that will animate our clock:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We will write `clearCanvas()`, `refreshTime()`, and `drawClock()` now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here, `canvasElement.clearRect(0, 0, canvas.width, canvas.height);` will reset
    our canvas after a definite time interval.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our `refreshTime()` function should look as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We incremented our `seconds` variable in the `refreshTime()` function. Therefore,
    whenever this function is called, our variable will be incremented by `1`. Then,
    we have done two conditional operations for our `hours` and `minutes`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s draw the clock:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We will write the `drawClockBackground()`, `drawSecondsHand()`, `drawMinutesHand()`,
    and `drawHoursHand()` functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We performed some mathematical things in this function and wrote the `drawLittleCircle(cX,
    cY)` function for a little circle on the center of our clock.
  prefs: []
  type: TYPE_NORMAL
- en: 'The function should look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Write the `drawSecondsHand()` function. This function will draw the second
    hand, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Our `drawMinutesHand()` function should look as shown in the following. This
    function will draw the minute hand of our clock, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s see our `drawHoursHand();` function. This function will draw the
    hour hand:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We used a `drawHand();` function in the preceding functions. Let''s write the
    function, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we are going to write the last function for our clock, as shown in the
    following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The full code of our clock should look similar to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'If you can see the output of your code as the following image, then congratulations!
    You successfully created your HTML clock using canvas:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Let''s make a clock!](img/B04720_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned the basics of HTML canvas. I hope that you
    can now draw anything using the HTML canvas. You may have played online games;
    the components of most of them are drawn using HTML canvas. Therefore, if you
    want to develop your own web applications or games, you need to learn about canvas.
    You can easily code to draw and animate the shapes using JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will develop a game called **Rat-man** using the HTML
    canvas. Before starting [Chapter 8](ch08.html "Chapter 8. Building Rat-man!"),
    *Building Rat-man!*, I hope that you've learned a lot about HTML canvas through
    this chapter. If you've, let's develop our game now.
  prefs: []
  type: TYPE_NORMAL
