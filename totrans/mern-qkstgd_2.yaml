- en: Building a Web server with ExpressJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Routing in ExpressJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modular route handlers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing middleware functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing configurable middleware functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing router-level middleware functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing error-handler middleware functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using ExpressJS' built-in middleware function to serve static assets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parsing the HTTP request body
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compressing HTTP responses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using an HTTP request logger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing and creating virtual domains
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing an ExpressJS web application with helmet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using template engines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging your ExpressJS web application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will be required to have an IDE, Visual Studio Code, Node.js and MongoDB.
    You will also need to install Git, in order use the Git repository of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code files of this chapter can be found on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/MERN-Quick-Start-Guide/tree/master/Chapter02](https://github.com/PacktPublishing/MERN-Quick-Start-Guide/tree/master/Chapter02)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://goo.gl/xXhqWK](https://goo.gl/xXhqWK)'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ExpressJS is the preferred de facto Node.js web application framework for building
    robust web applications and APIs.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, the recipes will focus on building a fully functional web server
    and understanding the core fundamentals.
  prefs: []
  type: TYPE_NORMAL
- en: Routing in ExpressJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Routing refers to how an application responds or acts when a resource is requested
    via an HTTP verb or HTTP method.
  prefs: []
  type: TYPE_NORMAL
- en: '**HTTP** stands for **Hypertext Transfer Protocol** and it''s the basis of
    data communication for the **World Wide Web** (**WWW**). All documents and data
    in the WWW are identified by a **Uniform Resource Locator** (**URL**).'
  prefs: []
  type: TYPE_NORMAL
- en: HTTP verbs or HTTP methods are a *client-server* model. Typically, a web browser
    serves as a *client*, and in our case ExpressJS is the framework that allows us
    to create a *server* capable of understanding these requests. Every request expects
    a response to be sent to the client to recognize the status of the resource that
    it is requesting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Request methods can be:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Safe**: An HTTP verb that performs read-only operations on the server. In
    other words, it does not alter the server state. For example: `GET`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Idempotent**: An HTTP verb that has the same effect on the server when identical
    requests are made. For instance, sending a `PUT` request to modify a user''s first
    name should have the same effect on the server if implemented correctly when multiple
    identical requests are sent. All *safe* methods are also idempotent. For example,
    the `GET`, `PUT`, and `DELETE` methods are idempotent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cacheable**: An HTTP response that can be cached. Not all methods or HTTP
    verbs can be cached. A response is cacheable only if the *status code* of the
    response and the method used to make the request are both cacheable. For example,
    the GET method is cacheable and the following status codes: `200` (Request succeeded),
    `204` (No content), `206` (Partial content), `301` (Moved permanently), `404`
    (Not found), `405` (Method not allowed), `410` (Gone or Content permanently removed
    from server), and `414` (URI too long).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding routing is one of the most important core aspects in building
    robust RESTful APIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we will see how ExpressJS handles or interprets HTTP requests.
    Before you start, create a new `package.json` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a Terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'ExpressJS does the whole job of understanding a client''s request. The request
    may come from a browser, for instance. Once the request has been interpreted,
    ExpressJS saves all the information in two objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Request**: This contains all the data and information about the client''s
    request. For instance, ExpressJS parses the URI and makes its parameters available
    on request.query.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Response**: This contains data and information that will be sent to the client.
    The response''s headers can be modified as well before sending the information
    to the client. The `response` object has several methods available for sending
    the status code and data to the client. For instance: `response.status(200).send(''Some
    Data!'')`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Request` and `Response` objects are passed as arguments to the *route handlers*
    defined inside a `route` method.'
  prefs: []
  type: TYPE_NORMAL
- en: Route methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These are derived from HTTP verbs or HTTP methods. A route method is used to
    define the response that an application will have for a specific HTTP verb.
  prefs: []
  type: TYPE_NORMAL
- en: 'ExpressJS route methods have equivalent names to HTTP verbs. For instance:
    `app.get()` for the `GET` HTTP verb or `app.delete()` for the `DELETE` HTTP verb.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A very basic route can be written as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `1-basic-route.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the ExpressJS library first and initialize a new ExpressJS application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a new route method to handle requests for the path `"/"`. The first argument
    specifies the path or URL, the next argument is the route handler. Inside the
    route handler, let''s use the `response` object to send a status code `200 (OK)`
    and text to the client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, use the `listen` method to accept new connections on port `1337`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a Terminal and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Open a new tab on your browser and visit `localhost` on port `1337` in your
    web browser to see the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: For more information about which HTTP methods are supported by ExpressJS, visit
    the official ExpressJS website at [https://expressjs.com/en/guide/routing.html#route-methods](https://expressjs.com/en/guide/routing.html#route-methods).
  prefs: []
  type: TYPE_NORMAL
- en: Route handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Route handlers are callback functions that accept three arguments. The first
    one is the `request` object, the second one is the `response` object, and the
    last one is a `callback,` which passes the handler to the next request handler
    in the chain. Multiple `callback` functions can be used inside a route method
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see a working example of how we could write route handlers inside route
    methods:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `2-route-handlers.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the ExpressJS library, then initialize a new ExpressJS application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Add two route methods to handle a request in the same path `"/one"`. Use the
    `type` method of the `response` object to set the content type of the response
    sent to the client to `text/plain`. Using the `write` method send partial data
    to the client. To finalize sending data, use the `end` method of the response
    object. Calling `nextHandler` will pass the handler to the second handler in the
    chain:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a `route` method to handle a request in the path `"/two"`. Two route handlers
    are defined inside the `route` method to handle the same request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `listen` method to accept new connections on port `1337`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a Terminal and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To see the result, open a new tab in your web browser and visit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Chainable route methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Route methods can be chainable using `app.route(path)` because the `path` is
    specified for a single location. This is probably the best approach when dealing
    with multiple route methods because, besides making the code more readable and
    less prone to typos and redundancy, it allows to work with multiple route methods
    at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `3-chainable-routes.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Initialize a new ExpressJS application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Chain three route methods using the `route` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `listen` method to accept new connections on port `1337`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a terminal and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'To see the result, open a new tab in your web browser and visit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Route paths can be strings or regular expressions. Route paths are internally
    turned into regular expressions using the `path-to-regexp` NPM package [https://www.npmjs.com/package/path-to-regexp](https://www.npmjs.com/package/path-to-regexp).
  prefs: []
  type: TYPE_NORMAL
- en: '`path-to-regexp`, in a way, helps you write path regular expressions in a more
    human-readable way. For example, consider the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This could be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Or better:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a look at this expression: `/([a-z]+)-([0-9]+)$/`. The parentheses in
    the regular expression are called **capturing parentheses**; and when they find
    a match, they remember it. In the preceding example, for `abc-12345`, two strings
    are remembered, `{"0":"abc","1":"12345"}`. This is the way that ExpressJS finds
    a match, remembers its value, and associates it to a key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Modular route handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ExpressJS has a built-in class called **router**. A router is just a class that
    allows developers to write mountable and modular route handlers.
  prefs: []
  type: TYPE_NORMAL
- en: 'A **Router** is an instance of ExpressJS'' core routing system. That means,
    all routing methods from an ExpressJS application are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we will see how to use a router to make a modular application.
    Before you start, create a new `package.json` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Suppose that you want to write a modular mini-application within your ExpressJS
    main application that can be mounted to any URI. You want to be able to choose
    the path where to mount it, or you just want to mount the same route methods and
    handlers to several others paths or a URI.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `modular-router.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Initialize a new ExpressJS application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a router for your mini-application and add a request method to handle
    requests for path `"/home"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Mount your modular mini-application to `"/first"` path, and to `"/second"`
    path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Listen for new connections on port `1337`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a Terminal and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'To see the results, navigate in your web browser to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see two different outputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: As can be seen, a *router* was mounted to two different mount points. Routers
    are usually referred to as mini-applications because they can be mounted to an
    ExpressJS application's specific routes and not only once but also several times
    to different mount points, paths, or URIs.
  prefs: []
  type: TYPE_NORMAL
- en: Writing middleware functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Middleware functions are mainly used to make changes in the `request` and `response`
    object. They are executed in sequence, one after another, but if a middleware
    functions does not pass control to the next one, the request is left hanging.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Middleware functions have the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The signature is very similar to writing route handlers. In fact, a middleware
    function can be written for a specific HTTP method and a specific path route,
    and will look like this, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'So, if you are wondering what the difference is between route handlers, and
    middleware functions, the answer is simple: their purpose.'
  prefs: []
  type: TYPE_NORMAL
- en: If you are writing route handlers, and the `request` objects and/or the `response`
    object is modified, then you are writing middleware functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, you will see how to use a middleware function to restrict access
    to certain paths or routes that depend on a certain condition. Before you start,
    create a new `package.json` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will write a middleware function that allows access to the root path `"/"`
    only when the query parameter `allowme` is present:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `middleware-functions.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Initialize a new ExpressJS application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Write a middleware function that will add a property `allowed` to the `request`
    object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a request method to handle requests for path `"/"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Listen on port `1337` for new connections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a terminal and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'To see the results, in your web browser, navigate to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like with route handlers, middleware functions need to pass control to
    the next handler; otherwise, our application will have been hanging because no
    data was sent to the client, and the connection was not closed either.
  prefs: []
  type: TYPE_NORMAL
- en: If new properties are added to the `request` or `response` objects inside a
    middleware function, the next handler will have access to those new properties.
    As in our previously written code, the `allowed property` in the `request` object
    is available to the next handler.
  prefs: []
  type: TYPE_NORMAL
- en: Writing configurable middleware functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common pattern for writing middleware functions is to wrap the middleware
    function inside another function. The result of doing so is a configurable middleware
    function. They are also *higher-order functions*, that is, a function that returns
    another function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Usually an object is used as an `options` parameters. However, there is nothing
    stopping you from doing it in your own way.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will write a configurable logger middleware function. Before
    you start, create a new `package.json` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What your configurable middleware function will do is simple: it will print
    the status code and the URL when a request is made.'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `middleware-logger.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Export a function that accepts an object as the first argument. The function
    expects the object to have a property `enable`, which can be either `true` or
    `false`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's test it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our configurable middleware function is not useful on its own. Create a simple
    ExpressJS application to see our middleware actually working:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `configurable-middleware-test.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include our `middleware-logger.js` module and initialize a new ExpressJS application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `use` method to include our configurable middleware function. When
    the `enable` property is set to `true`, your logger will work and log every request''s
    status code and URL to the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Listen on port `1337` for new connections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a terminal and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'In your browser, navigate to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The Terminal should display:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to experiment, start your configurable middleware test application
    with the `enable` property set to `false`. No logs should be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Usually, you would want to disable logging in production, since this operation
    could hit performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'An alternative to disabling all logging is to use other libraries to do this
    task instead of using `console`. There are libraries that allow you to set different
    levels of logging as well, for instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Debug module**: [https://www.npmjs.com/package/debug](https://www.npmjs.com/package/debug)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Winston**: [https://www.npmjs.com/package/winston](https://www.npmjs.com/package/winston)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Logging is useful for several reasons. The main reasons are:'
  prefs: []
  type: TYPE_NORMAL
- en: It checks whether your services are running properly, for example, checking
    whether your application is connected to MongoDB.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It discovers errors and bugs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It helps you to understand better how your application is working. For instance,
    if you have a modular application, you can see how it integrates when included
    in other applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing router-level middleware functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Router-level middleware functions are only executed inside a router. They are
    usually used when applying a middleware to a mount point only or to a specific
    path.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will create a small logger router-level middleware function
    that will only log requests to paths mounted or located in the router''s mounted
    path. Before you start, create a new `package.json` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a Terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new file named `router-level.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Initialize a new ExpressJS application and define a router:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Define our logger middleware function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Mount the Router to the path `"/router"`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Listen on port `1337` for new connections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a terminal and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'In your web browser navigate to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'The Terminal should display:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'After, in your web browser, navigate to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: No logs should be displayed in terminal
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is possible to pass control back to the next middleware function or route
    method outside of a router by calling `next('router')`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, by creating a router that expects to receive a user ID as a query
    parameter. The `next(''router'')` function can be used to get out of the router
    or pass control to the next middleware function outside of the router when a user
    ID is not provided. The next middleware function out of the router can be used
    to display other information when the router passes control to it. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `router-level-control.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Initialize a new ExpressJS application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a new router:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Define our logger middleware function inside the router:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a route method to handle `GET` requests for path `"/"` which will be executed
    only if the middleware function passes control to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a route method to handle `GET` requests for path `"/"` outside of the router.
    However, include the router as a route handler as the second argument, and another
    route handler to handle the same request only if the router passes control to
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Listen on port `1337` for new connections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a terminal and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'To see the result, in your browser, navigate to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When navigating to the first URL (`http://localhost:1337/`), the following
    message is shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: This is because the middleware function in the router checks if the `id` was
    provided in the query, and because it is not, it passes control to the next handler
    outside of the router with `next('router')`.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the other hand, when navigating to the second URL ([http://localhost:1337/?id=7331](http://localhost:1337/?id=7331)),
    the following message is shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: That happens because, as an `id` was provided in the query, the middleware function
    in the router will pass control to the next handler inside the router with `next()`.
  prefs: []
  type: TYPE_NORMAL
- en: Writing error-handler middleware functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ExpressJS already includes by default a built-in error handler which gets executed
    at the end of all middleware and route handlers.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are ways that the built-in error handler can be triggered. One is implicit
    when an error occurs inside a route handler. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'And another way of triggering the built-in error handler is explicit when passing
    an `error` as an argument to `next(error)`. For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: The stack trace is displayed on the client side. If `NODE_ENV` is set to production,
    then the stack trace is not included.
  prefs: []
  type: TYPE_NORMAL
- en: 'A custom error handler middleware function can be written as well and it looks
    pretty much the same as route handlers do with the exception that an error handler
    function middleware expects to receive four arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Take into account that `next(error)`is optional. That means, if specified, `next(error)`
    will pass control over to the next error handler. If no other error handler was
    defined, then the control will pass to the built-in error handler.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we will see how to create a custom error handler. Before you
    start, create a new `package.json` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will build a custom error handler that sends to the client the error message.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `custom-error-handler.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the ExpressJS library, then initialize a new ExpressJS application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a new Route Method to handle `GET` requests for path `"/"` and throw
    an error every time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a custom error handler middleware function to send the error message
    back to the client''s browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Listen on port `1337` for new connections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a terminal and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'To see the result, in your web browser, navigate to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Using ExpressJS' built-in middleware function for serving static assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Prior to the 4.x version of ExpressJS, it has depended on ConnectJS which is
    an HTTP server framework [https://github.com/senchalabs/connect](https://github.com/senchalabs/connect).
    In fact, most middleware written for ConnectJS is also supported in ExpressJS.
  prefs: []
  type: TYPE_NORMAL
- en: As from the 4.x version of ExpressJS, it no longer depends on ConnectJS, and
    all previously built-in middleware functions were moved to separate modules [https://expressjs.com/en/resources/middleware.html](https://expressjs.com/en/resources/middleware.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'ExpressJS 4.x and newer versions include only two built-in middleware functions.
    The first one has already been seen: the built-in error handler middleware function.
    The second one is the `express.static` middleware function that is responsible
    for serving static assets.'
  prefs: []
  type: TYPE_NORMAL
- en: The `express.static` middleware function is based on `serve-static` module [https://expressjs.com/en/resources/middleware/serve-static.html](https://expressjs.com/en/resources/middleware/serve-static.html).
  prefs: []
  type: TYPE_NORMAL
- en: The main difference between `express.static` and `serve-static` is that the
    second one can be used outside of ExpressJS.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will see how to build a web application that will serve
    static assets in a certain path. Before you start, create a new `package.json`
    file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new directory named `public`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move into the new `public` directory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file named `index.html`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate back out of the `public` directory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file named `serve-static-assets.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code. Initialize a new ExpressJS application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Include the `express.static` configurable middleware function and Pass the
    path of the `/public` directory where `index.html` file is located:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'Listen on port `1337` for new connections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a terminal and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'To see the result, in your browser, navigate to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our `index.html` file will be shown because we specified `"/"` as the root directory
    where to look for assets.
  prefs: []
  type: TYPE_NORMAL
- en: Try changing the path from `"/"` to `"/public"`. Then, you will be able to see
    that the `index.html` file, and other files that you want to include in the `/public`
    directory, will be accessible under `http://localhost:1337/public/[fileName]`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s pretend that you have a big project that serves dozens of static files,
    including images, font files, and PDF documents (those about privacy and legal
    stuff) among others. You decided that you want to keep them in separate files,
    but you do not want to change the mount path or URI. They can be served under
    `/public`, for example, but they will exist in separate directories in your project
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s create the first `public` directory that will contain a single
    file named `index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new directory named `public` if you didn't create it in the previous
    recipe
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move into the new `public` directory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file named `index.html`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s create a second public directory that will contain another file
    named `second.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: Move back out of the `public` directory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory named `another-public`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move into the new `another-public` directory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new empty file named `second.html`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As you can see, both files exist in different directories. To serve those files
    under one mount point:'
  prefs: []
  type: TYPE_NORMAL
- en: Move back out of the `another-public` directory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file named `router-serve-static.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the ExpressJS and path libraries. Then, initialize a new ExpressJS
    application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a router:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `express.static` configurable middleware function to include both directories,
    `public` and `another-public`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'Mount the Router to the `"/"` path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'Listen on port `1337` for new connections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a terminal and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'To see the result, in the browser, navigate to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Two different files in different locations were served under one path
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If two or more files with the same name exist under different directories, only
    the first one found will be displayed on the client-side.
  prefs: []
  type: TYPE_NORMAL
- en: Parsing the HTTP request body
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`body-parser` is a middleware function that parses the incoming request body
    and makes it available in the `request` object as `request.body` [https://expressjs.com/en/resources/middleware/body-parser.html](https://expressjs.com/en/resources/middleware/body-parser.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'This module allows an application to parse the incoming request as:'
  prefs: []
  type: TYPE_NORMAL
- en: JSON
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raw (buffer original incoming data)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL encoded form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The module supports automatic decompression of gzip and deflates encodings when
    the incoming request is compressed.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will see how to use the `body-parser` NPM module to parse
    the content body sent from two different forms encoded in two different ways.
    Before you start, create a new `package.json` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Two forms will be displayed to the user, both of them will send data to our
    web server application encoded in two different ways. The first one is a URL encoded
    form while the other one will encode its body as plain text.
  prefs: []
  type: TYPE_NORMAL
- en: Create a file named `parse-form.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the `body-parser` NPM module. Then, initialize a new ExpressJS application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'Include the `body-parser` middleware functions to handle URL encoded requests
    and text plain requests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a new route method to handle `GET` requests for path `"/"`. Serve HTML
    content with two forms that submit data using different encodings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a new route method to handle `POST` requests for path `"/setdata"`. Display
    on terminal the content of `request.body`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'Listen on port `1337` for new connections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a terminal and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: 'In your web browser, navigate to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'Fill the first input box with any data and submit the form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In your web browser, navigate back to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'Fill the second input box with any data and submit the form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the output in the terminal
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Terminal outputs something like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'Two parsers are used above:'
  prefs: []
  type: TYPE_NORMAL
- en: The first one `bodyParser.urlencoded()` parses incoming requests for `multipart/form-data`
    encoding type. The result is available as an **Object** in `request.body`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The second one `bodyParser.text()` parses incoming requests for `text/plain`
    encoding type. The result is available as a **String** in `request.body`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compressing HTTP responses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**compression** is a middleware function that compresses the response body
    that will be send to the client. This module uses the `zlib` module [https://nodejs.org/api/zlib.html](https://nodejs.org/api/zlib.html)
    that supports the following content-encoding mechanisms:'
  prefs: []
  type: TYPE_NORMAL
- en: gzip
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: deflate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Accept-Encoding` HTTP header is used to determine which content-encoding
    mechanism is supported on the client-side (for example web browser) while the
    `Content-Encoding` HTTP header is used to tell the client which content encoding
    mechanism was applied to the response body.
  prefs: []
  type: TYPE_NORMAL
- en: '`compression` is a configurable middleware function. It accepts an `options`
    object as the first argument to define a specific behavior for the middleware
    and also to pass `zlib` options as well.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we will see how to configure and use the `compression` NPM
    module to compress the request body sent to the client. Before you start, create
    a new `package.json` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new file named `compress-site.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the `compression` NPM module. Then, initialize a new ExpressJS application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: 'Include the `compression` middleware function. Specify the `level` of compression
    to `9` (best compression) and `threshold`, or minimum size in bytes that the response
    should have to consider compressing the response body, to `0` bytes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a route method to handle `GET` requests for path `"/"` which will serve
    a sample HTML content that we expect to be compressed and will print the encodings
    that the client accepts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: 'Listen on port `1337` for new connections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a terminal and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: 'In your browser, navigate to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The output of the Terminal will show the content encoding mechanism that the
    client (for example web browser) supports. It may look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: The content encoding mechanism sent by the client is used by `compression` internally
    to know if compression is supported. If compression is not supported, then the
    response body is not compressed.
  prefs: []
  type: TYPE_NORMAL
- en: If opening Chrome Dev Tools or similar and analyzing the request made, the `Content-Encoding`
    header that was sent by the server indicates the kind of content encoding mechanism
    used by `compression`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50e0019b-c8b1-4cfb-86f8-aaa8200854f8.png)'
  prefs: []
  type: TYPE_IMG
- en: Chrome Dev Tools | Network Tab displaying Response Headers
  prefs: []
  type: TYPE_NORMAL
- en: The `compression` library sets the `Content-Encoding` header to the encoding
    mechanism used for compressing the response body.
  prefs: []
  type: TYPE_NORMAL
- en: The `threshold` option is set by default to 1 KB which means that if the response
    size is below the number of bytes specified, then it is not compressed. Set it
    to 0 or `false` to compress the response even when the size is below 1 KB
  prefs: []
  type: TYPE_NORMAL
- en: Using an HTTP request logger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As previously seen, writing a request logger is simple. However, writing our
    own could take precious time. Luckily, there are several other alternatives out
    there. For example, a very popular HTTP request logger widely used is morgan [https://expressjs.com/en/resources/middleware/morgan.html](https://expressjs.com/en/resources/middleware/morgan.html).
  prefs: []
  type: TYPE_NORMAL
- en: '**morgan** is a configurable middleware function that takes two arguments `format`
    and `options` which are used to specify the format in which the logs are displayed
    and what kind of information needs to be displayed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several predefined formats:'
  prefs: []
  type: TYPE_NORMAL
- en: '`tiny`: Minimal output'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`short`: Same as tiny, including remote IP address'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`common`: Standard Apache log output'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`combined`: Standard Apache combined log output'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dev`: Displays the same information as the tiny format does. However, the
    response statuses are colored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new `package.json` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's build a working example. We will include the **morgan** configurable middleware
    function with the `dev` format to display information of every request.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `morgan-logger.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Initialize a new ExpressJS application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: 'Include the `morgan` configurable middleware. Pass `''dev''` as the format
    we will use as the first argument to the middleware function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a route method to handle all `GET` requests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: 'Listen on port `1337` for new connections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a terminal and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: 'To see the result in your terminal, in your web browser, navigate to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: Managing and creating virtual domains
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing virtual domains is really easy with ExpressJS. Imagine that you have
    two or more subdomains, and you want to serve two different web applications.
    However, you do not want to create a different web server application for each
    subdomain. In this kind of situation, ExpressJS allows developers to manage virtual
    domains within a single web server application using **vhost** [https://expressjs.com/en/resources/middleware/vhost.html](https://expressjs.com/en/resources/middleware/vhost.html).
  prefs: []
  type: TYPE_NORMAL
- en: '**vhost** is a configurable middleware function that accepts two arguments.
    The first one is the `hostname`. The second argument is the request handler which
    will be called when the `hostname` matches.'
  prefs: []
  type: TYPE_NORMAL
- en: The `hostname` follows the same rules as route paths do. They can be either
    a string or a regular expression.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new `package.json` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Build two mini applications using **Router** that will be served in two different
    sub-domains:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `virtual-domains.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include `vhost` NPM module. Then, initialize a new ExpressJS application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: 'Define two routers that we will use to build two mini-applications:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a route method to handle `GET` requests for path `"/"` in the first router:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a route method to handle `GET` requests for path `"/"` in the second router:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: 'Mount our routers to our ExpressJS application. Serve the first application
    under `localhost` and the second under `second.localhost`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: 'Listen on port `1337` for new connections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a terminal and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: 'To see the result, in your web browser navigate to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`vhost` adds a `vhost object` to the `request` object, which contains the complete
    hostname (displaying the hostname and port), hostname (without the port), and
    matching strings. These give you more control in how to handle virtual domains.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we could write an application that allows users to have their
    own sub-domain with their name:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `user-subdomains.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the `vhost` NPM module. Then, initialize a new ExpressJS application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a new router. Then, add a route method to handle `GET` requests on path
    `"/"`. Use the `vhost` object to access the array of subdomains:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: 'Mount the router:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: 'Listen on port `1337` for new connections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a terminal and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: 'To see the result, in your web browser, navigate to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: Securing an ExpressJS web application with Helmet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Helmet** allows to protect web server applications against common attacks,
    such as **cross-site scripting (XSS)**, insecure requests, and clickjacking.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Helmet is a collection of 12 middleware functions that allow you to set specific
    HTTP headers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Content Security Policy (CSP)`: This is an effective way to whitelist what
    kind of external resources are allowed in your web application, such as JavaScript,
    CSS, and images, for instance.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Certificate Transparency`: This is a way of providing more transparency for
    certificates issued for a specific domain or specific domains [https://sites.google.com/a/chromium.org/dev/Home/chromium-security/certificate-transparency](https://sites.google.com/a/chromium.org/dev/Home/chromium-security/certificate-transparency).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`DNS Prefetch Control`: This tells the browser if it should perform domain
    name resolution (DNS) on resources that are not yet loaded, such as links.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Frameguard`: This helps to prevent **clickjacking** by telling the browser
    not to allow your web application to be put inside an `iframe.`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Hide Powered-By`: This simply hides the `X-Powered-By` header indicates not
    to display what technology powers the server. ExpressJS sets this header to `"Express"`
    by default.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`HTTP Public Key Pinning`: This helps to prevent **man-in-the-middle-attacks**
    by pinning your web application''s public keys to the `Public-Key-Pins`header.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`HTTP Strict Transport Security`: This tells the browser to strictly stick
    to the HTTPs version of your web application.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`IE No Open`: This prevents Internet Explorer from executing untrusted downloads,
    or HTML files, on the context of your site, thus preventing the injection of malicious
    scripts.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`No Cache`: This tells the browser to disable browser caching.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Don''t Sniff Mimetype`: This forces the browser to disable mime sniffing or
    guessing the content type of a served file.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Referrer Policy`: The referrer headers provide the server with data regarding
    where the request was originated. It allows developers to disable it, or set a
    stricter policy for setting a `referrer` header.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`XSS Filter`: This prevents reflected cross-site scripting (XSS) attacks by
    setting the `X-XSS-Protection` header.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we will use most of the middleware functions provided by Helmet
    to secure our ExpressJS web application against common attacks. Before you start,
    create a new `package.json` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a Terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new file named `secure-helmet.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the ExpressJS, helmet, and body NPM modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: 'Generate a random ID which will be used for `nonce` which is an HTML attribute
    used for whitelist which scripts or styles are allowed to be executed inline in
    the HTML code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: 'Use body parser to parse JSON request body for `json` and `application/csp-report`
    content types. `application/csp-report` is a content type that contains a JSON
    request body of type `json` which is sent by the browser when one or several CSP
    rules are violated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `Content Security Policy` middleware function to define directives.
    `defaultSrc` specifies where resources can be loaded from. The `self` option specifies
    to load resources only from your own domain. We will use `none` instead, which
    means that no resources will be loaded. However, because we are whitelisting `scriptSrc`,
    we will be able to load Javascript scripts but only the ones that have the `nonce`
    that we will specify. The `reportUri` is used to tell the browser where to send
    violation reports of our `Content Security Policy`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a route method to handle `POST` request for path `"/csp-violation"` to
    receive violation reports from the client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `DNS Prefetch Control` middleware to disable prefetch of resources:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `Frameguard` middleware function to disable your application from being
    loaded inside a `iframe`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `hidePoweredBy` middleware function to replace the `X-Powered-By` header
    and set a fake one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `ieNoOpen` middleware function to disable IE untrusted executions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `noSniff` middleware function to disable mime-type guessing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `referrerPolicy` middleware function to make the header available only
    for our domain:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `xssFilter` middleware function to prevent Reflected XSS attacks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a route method to handle `GET` requests on path `"/"` and serve a sample
    HTML content that will try to load an image from an external source, try to execute
    an inline script, and try to load an external script without a `nonce` specified.
    We will add a valid script as well that is allowed to be executed because a `nonce`
    attribute will be specified:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: 'Listen on port `1337` for new connections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a terminal and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: 'To see the results, in your web browser, navigate to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How everything works is pretty straight forward with `Helmet`. You specify the
    security measures you want to implement by choosing and applying a specific `Helmet`
    middleware function and `Helmet` will do the work of setting the right headers
    that will be sent to the client.
  prefs: []
  type: TYPE_NORMAL
- en: In the client side (web browser), everything just works by its own. The web
    browser is in charge of interpreting the headers sent by the server and applying
    the security policies. This also means that old browsers cannot support or understand
    all these headers. Saying that, there are not many good reasons why you would
    want to support old web browsers if you have security in mind for your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using Chrome, for instance, you should be able to see something
    similar to this in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e75f8ade-149b-4074-971f-489e190d69ca.png)'
  prefs: []
  type: TYPE_IMG
- en: Chrome Dev Tools | Console displaying CSP violation
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Terminal, you should be able to see similar output to the following
    that is sent by the browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: Using template engines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Template engines allow you to generate HTML code in a more convenient way. Templates
    or views can be written in any format, interpreted by a template engine that will
    replace variables with other values, and finally transform to HTML.
  prefs: []
  type: TYPE_NORMAL
- en: A big list of template engines that work out of the box with ExpressJS, is available
    in the official website at [https://github.com/expressjs/express/wiki#template-engines](https://github.com/expressjs/express/wiki#template-engines).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will build your own template engine. To develop and use
    your own template engine, you will first need to register it, then define the
    path where the views are located, and finally tell ExpressJS which template engine
    to use.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: 'Before you start, create a new `package.json` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First create a `views` directory which will contain a simple template:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new directory named `views`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file named `home.tpl` inside our `views` directory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, create a new template engine that will transform the previous template
    into HTML and replace `%[var]%` with the options provided:'
  prefs: []
  type: TYPE_NORMAL
- en: Move out of the `views` directory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file named `my-template-engine.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the ExpressJS and fs (file system) libraries. Then, initialize a new
    ExpressJS application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `engine` method to register a new template engine named `tpl`. We will
    read the file''s content and replace `%[var]%` with the one specified in the `options`
    object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the path where the views are located. Our template is located in the
    `views` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: 'Tell ExpressJS to use our template engine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a route method to handle `GET` requests for path `"/"` and render our home
    template. Provide the `title` and `description` options which will replace `%title%`
    and `%description%` in our template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: 'Listen on port `1337` for new connections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a terminal and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: 'In your browser, navigate to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: The template engine we just have wrote doesn't escape HTML characters. That
    means, you should be careful if replacing those properties with data gotten from
    the client because it may be vulnerable to XSS attacks. You may want to use a
    template engine from the official ExpressJS website that is safer.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging your ExpressJS web application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Debugging information on ExpressJS about all of the cycle of a web application
    is something simple. ExpressJS uses the **debug** NPM module internally to log
    information. Unlike `console.log`, **debug** logs can easily be disabled on production
    mode.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will see how to debug your ExpressJS web application. Before
    you start, create a new `package.json` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new file named `debugging.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Initialize a new ExpressJS application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a route method to handle `GET` requests for any path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: 'Listen on port `1337` for new connections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a terminal and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On Windows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: 'On Linux or MacOS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: 'In your web browser, navigate to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: Observe your terminal's output for logs
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `DEBUG` environment variable is used to tell the **debug** module which
    parts of the ExpressJS application to debug. In our previously written code, `express:*`
    tells the debug module to log everything related to the express application.
  prefs: []
  type: TYPE_NORMAL
- en: We could use `DEBUG=express:router` to displays logs related to the Router or
    routing of ExpressJS.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use the debug NPM module in your own projects. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `myapp.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a terminal and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On Windows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: 'On Linux and MacOS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: 'In your web browser, navigate to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Observe your Terminal''s output. It would display something like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use the `DEBUG` environment variable to tell the `debug` module to
    displays logs not only for `myapp` but also for ExpressJS like so:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: 'On Linux and MacOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
