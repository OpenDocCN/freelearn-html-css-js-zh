["```js\n$ node --version\nv22.9.0\n```", "```js\n    $ mkdir debugging-with-chrome\n    $ cd debugging-with-chrome\n    $ npm init --yes\n    $ npm install express\n    $ touch server.js random.js\n    ```", "```js\n    const express = require('express');\n    const app = express();\n    const random = require('./random');\n    app.get('/:number', (req, res) => {\n      const number = req.params.number;\n      res.send(random(number).toString());\n    });\n    app.listen(3000, () => {\n      console.log('Server listening on port 3000');\n    });\n    ```", "```js\n    module.exports = (n) => {\n      const randomNumber = Math.floor(Math.random() * n) + '1';\n      return randomNumber;\n    };\n    ```", "```js\n    $ node --inspect server.js\n    Debugger listening on ws://127.0.0.1:9229/35fa7c65-62a5-48b4-8428-9a414ec28afe\n    For help, see: https://nodejs.org/en/docs/inspector\n    Server listening on port 3000\n    ```", "```js\n$ node inspect server.js\n```", "```js\ndebug> list(11)\n> 1 const express = require('express');\n  2 const app = express();\n  3 const random = require('./random');\n  4\n  5 app.get('/:number', (req, res) => {\n  6   const number = req.params.number;\n  7   res.send(random(number).toString());\n  8 });\n  9\n10 app.listen(3000, () => {\n11   console.log('Server listening on port 3000');\n12 });\n```", "```js\ndebug> setBreakpoint(7)\n  2 const app = express();\n  3 const random = require('./random');\n  4\n  5 app.get('/:number', (req, res) => {\n  6   const number = req.params.number;\n> 7   res.send(random(number).toString());\n  8 });\n  9\n10 app.listen(3000, () => {\n11   console.log('Server listening on port 3000');\n12 });\n```", "```js\ndebug> cont\n< Server listening on port 3000\n<\n```", "```js\n$ curl http://localhost:3000/10\n```", "```js\nbreak in server.js:7\n  5 app.get('/:number', (req, res) => {\n  6   const number = req.params.number;\n> 7   res.send(random(number).toString());\n  8 });\n  9\n```", "```js\ndebug> step\nbreak in random.js:2\n  1 module.exports = (n) => {\n> 2   const randomNumber = Math.floor(Math.random() * n) + '1';\n  3   return randomNumber;\n  4 };\n```", "```js\ndebug> exec n\n'10'\n```", "```js\ndebug> next\nbreak in random.js:3\n  1 module.exports = (n) => {\n  2   const randomNumber = Math.floor(Math.random() * n) + '1';\n> 3   return randomNumber;\n  4 };\n  5\n```", "```js\ndebug> exec randomNumber\n'71'\n```", "```js\ndebug> out\nbreak in server.js:7\n  5 app.get('/:number', (req, res) => {\n  6   const number = req.params.number;\n> 7   res.send(random(number).toString());\n  8 });\n  9\n```", "```js\n  \"compilerOptions\": {\n    \"sourceMap\": true,\n    ...\n  }\n```", "```js\n    $ mkdir logging-with-pino\n    $ cd logging-with-pino\n    $ npm init --yes\n    ```", "```js\n    $ touch log.js logToFile.js redactLog.js\n    ```", "```js\n    $ npm install pino\n    ```", "```js\n    const pino = require('pino');\n    const logger = pino();\n    ```", "```js\n    logger.info('This is an info message');\n    logger.warn('This is a warning message');\n    logger.error('This is an error message');\n    logger.debug('This is a debug message');\n    ```", "```js\n    $ node log.js\n    {\"level\":30,\"time\":1715650619079,\"pid\":11107,\"hostname\":\"bgriggs-mac\",\"msg\":\"This is an info message\"}\n    {\"level\":40,\"time\":1715650619079,\"pid\":11107,\"hostname\":\"bgriggs-mac\",\"msg\":\"This is a warning message\"}\n    {\"level\":50,\"time\":1715650619079,\"pid\":11107,\"hostname\":\"bgriggs-mac\",\"msg\":\"This is an error message\"}\n    ```", "```js\n    const logger = pino({\n      level: 'debug'\n    });\n    ```", "```js\n    $ node log.js\n    {\"level\":30,\"time\":1715650992560,\"pid\":11344,\"hostname\":\"bgriggs-mac\",\"msg\":\"This is an info message\"}\n    {\"level\":40,\"time\":1715650992561,\"pid\":11344,\"hostname\":\"bgriggs-mac\",\"msg\":\"This is a warning message\"}\n    {\"level\":50,\"time\":1715650992561,\"pid\":11344,\"hostname\":\"bgriggs-mac\",\"msg\":\"This is an error message\"}\n    {\"level\":20,\"time\":1715650992561,\"pid\":11344,\"hostname\":\"bgriggs-mac\",\"msg\":\"This is a debug message\"}\n    ```", "```js\n    $ node log.js | npx pino-pretty\n    npm WARN exec The following package was not found and will be installed: pino-pretty@11.0.0\n    [02:57:10.042] INFO (11785): This is an info message\n    [02:57:10.042] WARN (11785): This is a warning message\n    [02:57:10.042] ERROR (11785): This is an error message\n    [02:57:10.042] DEBUG (11785): This is a debug message\n    ```", "```js\n    const fs = require('node:fs');\n    const pino = require('pino');\n    const stream = fs.createWriteStream('app.log');\n    const logger = pino(stream);\n    logger.info('This is an info message');\n    ```", "```js\n    $ node logToFile.js\n    $ cat app.log\n    {\"level\":30,\"time\":1715651351046,\"pid\":11554,\"hostname\":\"bgriggs-mac\",\"msg\":\"This is an info message\"}\n    ```", "```js\n    const pino = require('pino');\n    const logger = pino({\n        redact: ['user.password', 'user.ip']\n      });\n      logger.info({\n        user: {\n            name: 'Jane Doe',\n            password: 'secret',\n            ip: '192.168.1.1'\n        }\n    }, 'User login');\n    ```", "```js\n    $ node redactLog.js\n    {\"level\":30,\"time\":1715658998631,\"pid\":4583,\"hostname\":\"Bethanys-MacBook-Pro.local\",\"user\":{\"name\":\"Jane Doe\",\"password\":\"[Redacted]\",\"ip\":\"[Redacted]\"},\"msg\":\"User login\"}\n    ```", "```js\nconst express = require('express');\nconst pino = require('pino');\nconst expressPino = require('express-pino-logger');\nconst logger = pino();\nconst app = express();\napp.use(expressPino({ logger }));\napp.get('/', (req, res) => {\n  req.log.info('Handling request');\n  res.send('Hello World');\n});\napp.listen(3000, () => {\n  logger.info('Server is running on port 3000');\n});\n```", "```js\n const fastify = require('fastify')({\n  logger: true,\n});\n```", "```js\n    $ mkdir express-debug-app\n    $ cd express-debug-app\n    $ npm init --yes\n    $ npm install express\n    ```", "```js\n    $ touch server.js\n    ```", "```js\n    const express = require('express');\n    const app = express();\n    app.get('/', (req, res) => res.send('Hello World!'));\n    app.listen(3000, () => {\n      console.log('Server listening on port 3000');\n    });\n    ```", "```js\n    $ DEBUG=* node server.js\n    ```", "```js\n      express:router dispatching GET / +1s\n      express:router query  : / +1ms\n      express:router expressInit  : / +0ms\n    ```", "```js\n    $ DEBUG=express:router* node server.js\n    ```", "```js\n    $ cp server.js debug-server.js\n    $ npm install debug\n    ```", "```js\n    const express = require('express');\n    const app = express();\n    const debug = require('debug')('my-server');\n    app.get('/', (req, res) => {\n      debug('HTTP GET request to /');\n      res.send('Hello World!');\n    });\n    app.listen(3000, () => {\n      console.log('Server listening on port 3000');\n    });\n    ```", "```js\n    $ DEBUG=my-server node debug-server.js\n    Server listening on port 3000\n     my-server HTTP GET request to / +0ms\n    ```", "```js\n    $ mkdir core-debug-logs\n    $ cd core-debug-logs\n    $ npm init --yes\n    $ npm install express\n    $ touch server.js\n    ```", "```js\n    const express = require('express');\n    const app = express();\n    app.get('/', (req, res) => {\n      res.send('Hello World!');\n    });\n    app.listen(3000, () => {\n      console.log('Server listening on port 3000');\n      setInterval(() => {\n        console.log('Server listening...');\n      }, 3000);\n    });\n    ```", "```js\n    $ NODE_DEBUG=timer node server.js\n    ```", "```js\n    $ NODE_DEBUG=http node server.js\n    ```", "```js\n$ NODE_DEBUG=http,timer node server.js\n```", "```js\n    $ mkdir stack-trace-app\n    $ cd stack-trace-app\n    $ npm init --yes\n    $ npm install express\n    ```", "```js\n    $ touch server.js routes.js\n    ```", "```js\n    const express = require('express');\n    const routes = require('./routes');\n    const app = express();\n    app.use(routes);\n    app.listen(3000, () => {\n      console.log('Server listening on port 3000');\n    });\n    ```", "```js\n    const express = require('express');\n    const router = new express.Router();\n    router.get('/', (req, res) => {\n      res.send(recursiveContent());\n    });\n    function recursiveContent (content, i = 10) {\n      --i;\n      if (i !== 0) {\n        return recursiveContent(content, i);\n      } else {\n        return content.undefined_property;\n      }\n    }\n    module.exports = router;\n    ```", "```js\n    $ node server.js\n    Server listening on port 3000\n    ```", "```js\n    TypeError: Cannot read properties of undefined (reading 'undefined_property')\n        at recursiveContent (/Users/bgriggs/Node.js-Cookbook/Chapter12/stack-trace-app/routes.js:13:20)\n        at recursiveContent (/Users/bgriggs/Node.js-Cookbook/Chapter12/stack-trace-app/routes.js:11:12)\n        at recursiveContent (/Users/bgriggs/Node.js-Cookbook/Chapter12/stack-trace-app/routes.js:11:12)\n        at recursiveContent (/Users/bgriggs/Node.js-Cookbook/Chapter12/stack-trace-app/routes.js:11:12)\n        at recursiveContent (/Users/bgriggs/Node.js-Cookbook/Chapter12/stack-trace-app/routes.js:11:12)\n        at recursiveContent (/Users/bgriggs/Node.js-Cookbook/Chapter12/stack-trace-app/routes.js:11:12)\n        at recursiveContent (/Users/bgriggs/Node.js-Cookbook/Chapter12/stack-trace-app/routes.js:11:12)\n        at recursiveContent (/Users/bgriggs/Node.js-Cookbook/Chapter12/stack-trace-app/routes.js:11:12)\n        at recursiveContent (/Users/bgriggs/Node.js-Cookbook/Chapter12/stack-trace-app/routes.js:11:12)\n        at recursiveContent (/Users/bgriggs/Node.js-Cookbook/Chapter12/stack-trace-app/routes.js:11:12)\n    ```", "```js\n    $ node --stack-trace-limit=20 server.js\n    Server listening on port 3000\n    ```", "```js\n    ...\n        at recursiveContent (/Users/bgriggs/Node.js-Cookbook/Chapter12/stack-trace-app/routes.js:11:12)\n        at /Users/bgriggs/Node.js-Cookbook/Chapter12/stack-trace-app/routes.js:5:12\n        at Layer.handle [as handle_request] (/Users/bgriggs/Node.js-Cookbook/Chapter12/stack-trace-app/node_modules/express/lib/router/layer.js:95:5)\n        at next (/Users/bgriggs/Node.js-Cookbook/Chapter12/stack-trace-app/node_modules/express/lib/router/route.js:149:13)\n        at Route.dispatch (/Users/bgriggs/Node.js-Cookbook/Chapter12/stack-trace-app/node_modules/express/lib/router/route.js:119:3)\n        at Layer.handle [as handle_request] (/Users/bgriggs/Node.js-Cookbook/Chapter12/stack-trace-app/node_modules/express/lib/router/layer.js:95:5)\n        at /Users/bgriggs/Node.js-Cookbook/Chapter12/stack-trace-app/node_modules/express/lib/router/index.js:284:15\n        at Function.process_params (/Users/bgriggs/Node.js-Cookbook/Chapter12/stack-trace-app/node_modules/express/lib/router/index.js:346:12)\n        at next (/Users/bgriggs/Node.js-Cookbook/Chapter12/stack-trace-app/node_modules/express/lib/router/index.js:280:10)\n        at Function.handle (/Users/bgriggs/Node.js-Cookbook/Chapter12/stack-trace-app/node_modules/express/lib/router/index.js:175:3)\n        at router (/Users/bgriggs/Node.js-Cookbook/Chapter12/stack-trace-app/node_modules/express/lib/router/index.js:47:12)\n    ```", "```js\nError.stackTraceLimit = 20;\n```", "```js\nError.stackTraceLimit = Infinity\n```", "```js\n    $ touch async-stack-trace.js\n    ```", "```js\n    foo().then(\n      () => console.log('success'),\n      (error) => console.error(error.stack)\n    );\n    async function foo () {\n      await bar();\n    }\n    async function bar () {\n      await Promise.resolve();\n      throw new Error('Fail');\n    }\n    ```", "```js\n    $ node async-stack-trace.js\n    Error: Fail\n        at bar (/Users/bgriggs/Node.js-Cookbook/Chapter12/stack-trace-app/async-stack-trace.js:15:9)\n        at process.runNextTicks [as _tickCallback] (internal/process/task_queues.js:52:5)\n        at Function.Module.runMain (internal/modules/cjs/loader.js:880:11)\n        at internal/main/run_main_module.js:21:11\n    (internal/bootstrap/node.js:623:3)\n    ```", "```js\n    $ node async-stack-trace.js\n    Error: Fail\n        at bar (/Users/bgriggs/Node.js-Cookbook/Chapter12/stack-trace-app/async-stack-trace.js:15:9)\n        at async foo (/Users/bgriggs/Node.js-Cookbook/Chapter12/stack-trace-app/async-stack-trace.js:9:3)\n    ```", "```js\n    $ mkdir diagnostic-report\n    $ cd diagnostic-report\n    ```", "```js\n    $ touch server.js\n    ```", "```js\n    $ mkdir reports\n    ```", "```js\n    const http = require('node:http');\n    const path = require('node:path');\n    ```", "```js\n    process.report.directory = path.join(__dirname, 'reports');\n    process.report.filename = 'my-diagnostic-report.json';\n    ```", "```js\n    http.get('hello://localhost:3000', (response) => {});\n    ```", "```js\n    $ node server.js\n    node:_http_client:183\n        throw new ERR_INVALID_PROTOCOL(protocol, expectedProtocol);\n        ^\n    TypeError [ERR_INVALID_PROTOCOL]: Protocol \"hello:\" not supported. Expected \"http:\"\n        at new ClientRequest (node:_http_client:183:11)\n        at request (node:http:103:10)\n        at Object.get (node:http:114:15)\n        at Object.<anonymous> (/Users/bgriggs/Node.js-Cookbook/Chapter12/diagnostic-report/server.js:7:6)\n        at Module._compile (node:internal/modules/cjs/loader:1358:14)\n        at Module._extensions..js (node:internal/modules/cjs/loader:1416:10)\n        at Module.load (node:internal/modules/cjs/loader:1208:32)\n        at Module._load (node:internal/modules/cjs/loader:1024:12)\n        at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\n        at node:internal/main/run_main_module:28:49 {\n      code: 'ERR_INVALID_PROTOCOL'\n    }\n    Node.js v22.9.0\n    ```", "```js\n    $ node --report-uncaught-exception server.js\n    ...\n    Writing Node.js report to file: my-diagnostic-report.json\n    Node.js report completed\n    Node.js v22.9.0\n    ```", "```js\n        \"event\": \"Exception\",\n        \"trigger\": \"Exception\",\n    ```", "```js\n    \"javascriptStack\": {\n        \"message\": \"TypeError [ERR_INVALID_PROTOCOL]: Protocol \\\"hello:\\\" not supported. Expected \\\"http:\\\"\",\n        \"stack\": [\n          \"at new ClientRequest (node:_http_client:183:11)\",\n          \"at request (node:http:103:10)\",\n          \"at Object.get (node:http:114:15)\",\n          \"at Object.<anonymous> (/Users/bgriggs/Node.js-Cookbook/Chapter12/diagnostic-report/server.js:7:6)\",\n          \"at Module._compile (node:internal/modules/cjs/loader:1358:14)\",\n          \"at Module._extensions..js (node:internal/modules/cjs/loader:1416:10)\",\n          \"at Module.load (node:internal/modules/cjs/loader:1208:32)\",\n          \"at Module._load (node:internal/modules/cjs/loader:1024:12)\",\n          \"at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)\"\n        ],\n        \"errorProperties\": {\n          \"code\": \"ERR_INVALID_PROTOCOL\"\n        }\n      }\n    ```", "```js\nprocess.report.writeReport();\n```"]