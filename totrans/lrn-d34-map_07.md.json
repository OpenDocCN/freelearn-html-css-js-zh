["```js\nnpm install\n```", "```js\nnode node_modules/http-server/bin/http-server  \n```", "```js\nnode_modules/karma/bin/karma start \n```", "```js\nINFO [karma]: Karma v0.12.21 server started at \nhttp://localhost:9876/ \nINFO [launcher]: Starting browser Chrome \nINFO [Chrome 37.0.2062 (Mac OS X 10.9.5)]: Connected on socket \ngoMqmrnZkxyz9nlpQHem with id 16699326Chrome 37.0.2062 (Mac OS X 10.9.5): Executed 5 of 5 SUCCESS \n(0.018 secs / 0.013 secs)\n```", "```js\n<link rel=\"stylesheet\" type=\"text/css\" href=\"main.css\"> \n```", "```js\n<script src=\"img/d3.min.js\"></script> \n<script src=\"img/topojson.v1.min.js\"></script> \n```", "```js\n<!-- A base function for setting up the SVG and container --> \n<script src=\"img/base.js\"></script> \n\n<!-- The main visualization code --> \n<script src=\"img/viz.js\"></script> \n```", "```js\n<!-- The script acts as a proxy to call the visualization \n and draw it with sample data --> \n<script src=\"img/viz_factory.js\"></script> \n```", "```js\nif (d3.charts === null || typeof(d3.charts) !== 'object') \n { d3.charts = {}; }\n```", "```js\nd3.charts.viz = function () { \n  // Functional inheritance of common areas \n  var my = d3.ext.base(); \n```", "```js\n  // Define getter/setter style accessors.. \n  // defaults assigned \n  my.accessor('example', true); \n```", "```js\n  // Data for Global Scope \n  var svg = void 0, \n      chart = void 0; \n```", "```js\n  // Declare D3 functions, also in instance scope \n  var x = d3.scale.linear(), \n      y = d3.scale.ordinal(); \n```", "```js\n  my.draw = function(selection) { \n    selection.each(function(data) { \n      // code in base/scripts.js \n      // resuable way of dealing with margins \n      svg = my.setupSVG(this); \n      chart = my.setupChart(svg); \n\n      // Create the visualization \n      my.chart(data); \n    }); \n  }; \n\n  // main method for drawing the viz \n  my.chart = function(data) { \n    var chartData = my.profit(data); \n\n    x.domain([0, my.profitMax(chartData)]) \n        .range([0,my.w()]); \n    y.domain(my.categories(chartData)) \n        .rangeRoundBands([0, my.h()], 0.2); \n\n    var boxes = chart.selectAll('.box').data(chartData); \n\n    // Enter \n    boxes.enter().append('rect') \n        .attr('class', 'box') \n        .attr('fill', 'steelblue'); \n\n    // Update \n    boxes.transition().duration(1000) \n        .attr('x', 0) \n        .attr('y', function(d) { return y(d.category) }) \n        .attr('width', function(d) {  return x(d.profit) }) \n        .attr('height', y.rangeBand()) \n\n    // Exit \n    boxes.exit().remove(); \n  }; \n```", "```js\n  // Example function to create profit. \n  my.profit = function(data) { \n    return data.map(function(d) { \n      d.profit = parseFloat(d.sales) - parseFloat(d.cost); \n      return d; \n    }); \n  }; \n```", "```js\n  my.categories = function(data) { \n    return data.map(function(d) { \n      return d.category; \n    }); \n  }; \n```", "```js\n  my.profitMax = function(data) { \n    return d3.max(data, function(d) { return d.profit; }); \n  }; \n```", "```js\n   return my; \n  }; \n```", "```js\nnode_modules/karma/bin/karma start \n```", "```js\n'use strict'; \n\ndescribe('Visualization: Stacked', function () { \n  var viz; \n\n  var data = [ \n    {\"category\": \"gold\",  \"cost\": \"10\",  \"sales\": \"60\"}, \n    {\"category\": \"white\", \"cost\": \"20\",  \"sales\": \"30\"}, \n    {\"category\": \"black\", \"cost\": \"100\", \"sales\": \"140\"} \n  ]; \n```", "```js\n  beforeEach(function() { \n    viz = d3.charts.viz() \n        .height(600) \n        .width(900) \n        .margin({top: 10, right: 10, bottom: 10, left: 10}); \n  }); \n```", "```js\n  it ('sets the profit', function() { \n    var profits = viz.profit(data); \n    expect(profits.length).toBe(3); \n    expect(profits[0].profit).toBe(50) \n  }); \n```", "```js\n  it ('returns a list of all categories', function() { \n    var categories = viz.categories(data); \n    expect(categories.length).toBe(3); \n    expect(categories).toEqual([ 'gold', 'white', 'black' ]); \n  }); \n```", "```js\n  it ('calculates the profit max', function() { \n    var profits = viz.profit(data); \n    expect(viz.profitMax(profits)).toEqual(50); \n  }); \n```", "```js\n  it ('calculates the height of the chart box', function() { \n    expect(viz.h()).toBe(580); \n    viz.height(700); // change the height \n    viz.margin({top: 20, right: 10, bottom: 10, left: 10}) \n    expect(viz.h()).toBe(670); \n  }); \n\n  it ('calculates the width of the chart box', function() { \n    expect(viz.w()).toBe(880); \n    viz.height(700); // change the height \n    viz.margin({top: 10, right: 10, bottom: 10, left: 20}) \n    expect(viz.w()).toBe(870); \n  }); \n```", "```js\n(function() { \n    var viz = d3.charts.viz(); \n```", "```js\n    var rand = function() { \n      return Math.floor((Math.random() * 10) + 1) \n    }; \n```", "```js\n    var data = function() { \n      return [1,2,3].map(function(d,i) { \n        var cost = rand(); \n        var sales = rand(); \n\n        return { \n          category: 'category-'+i, \n          cost: cost, \n          sales: cost + sales \n        }; \n      }); \n    }; \n```", "```js\n    d3.select(\"#chart\").datum(data()).call(viz.draw); \n```", "```js\n      var id = setInterval(function() { \n        var d = data(); \n        console.log('data:', d); \n        d3.select(\"#chart\").datum(d).call(viz.draw); \n      }, 2000); \n      setTimeout(function() { \n      clearInterval(id); \n      }, 10000); \n```", "```js\nnode_modules/http-server/bin/http-server  \n```", "```js\n    var set = function() { \n      var k = rand(); \n      var d = []; \n      for (var i = 1; i < k; i++) { \n        d.push[i]; \n      }; \n      return d; \n    }; \n```", "```js\n    var data = function() { \n      var d = set(); \n      console.log('d', d); \n      return d.map(function(d,i) { \n        var cost = rand(); \n        var sales = rand(); \n\n        return { \n          category: 'category-'+i, \n          cost: cost, \n          sales: cost + sales \n        }; \n      }); \n    }; \n```"]