["```js\n<div class=\"outer\"> \n  <div class=\"inner\"> \n    <span class=\"origin\"></span> \n  </div> \n</div> \n\n```", "```js\n$('.origin').click(event => { \n  console.log('Click on `span.origin`.'); \n}); \n\n$('.outer').click(event => { \n  console.log('Click on `div.outer`.'); \n}); \n\n```", "```js\n$('.origin').click(event => { \n  console.log('Click on `span.origin`.'); \n event.stopPropagation(); \n}); \n\n$('.outer').click(event => { \n  Console.log('Click on `div.outer`.'); \n}); \n\n```", "```js\nfunction foo() { \n  // throw some errors. \n} \n\nfunction bar() { \n  foo(); \n} \n\nfunction biu() { \n  bar(); \n} \n\nbiu(); \n\n```", "```js\nfunction foo() { \n  let value = Math.random(); \n\n  if (value < 0.5) { \n    throw new Error('Awesome error'); \n  } else if (value < 0.8) { \n    throw new TypeError('Awesome type error'); \n  } \n} \n\n```", "```js\nfunction bar() { \n  try { \n    foo(); \n  } catch (error) { \n    if (error instanceof TypeError) { \n      console.log('Some type error occurs', error); \n    } else { \n      throw error; \n    } \n  } \n} \n\n```", "```js\nfunction biu() { \n  try { \n    bar(); \n  } catch (error) { \n    console.log('Some error occurs', error); \n  } \n} \n\n```", "```js\nlet objectA = { \n  scope: 'user.installation.package' \n}; \n\nlet objectB = { \n  scope: 'user.installation' \n}; \n\n```", "```js\ntype RequestType = 'help' | 'feedback'; \n\ninterface Request { \n  type: RequestType; \n} \n\n```", "```js\nclass Handler { \n  private successor: Handler; \n\n  handle(request: Request): void { \n    if (this.successor) { \n      this.successor.handle(request); \n    } \n  } \n} \n\n```", "```js\nclass HelpHandler extends Handler { \n  handle(request: Request): void { \n    if (request.type === 'help') { \n      // Show help information. \n    } else { \n      super.handle(request); \n    } \n  } \n} \n\n```", "```js\nclass FeedbackHandler extends Handler { \n  handle(request: Request): void { \n    if (request.type === 'feedback') { \n      // Prompt for feedback. \n    } else { \n      super.handle(request); \n    } \n  } \n} \n\n```", "```js\npromise \n  .catch(TypeError, reason => { \n    // handles TypeError. \n  }) \n  .catch(ReferenceError, reason => { \n    // handles ReferenceError. \n  }) \n  .catch(reason => { \n    // handles other errors. \n  }); \n\n```", "```js\nfunction wait() { \n  let $layer = $('.wait-layer'); \n\n  $layer.show(); \n\n  return () => { \n    $layer.hide(); \n  }; \n} \n\nlet cancel = wait(); \n\nsetTimeout(() => cancel(), 1000); \n\n```", "```js\nclass TextContext { \n  content = 'text content'; \n} \n\nabstract class TextCommand { \n  constructor( \n    public context: TextContext \n  ) { } \n\n  abstract execute(...args: any[]): void; \n} \n\n```", "```js\nclass ReplaceCommand extends TextCommand { \n  execute(index: number, length: number, text: string): void { \n    let content = this.context.content; \n\n    this.context.content = \n      content.substr(0, index) + \n      text + \n      content.substr(index + length); \n  } \n} \n\nclass InsertCommand extends TextCommand { \n  execute(index: number, text: string): void { \n    let content = this.context.content; \n\n    this.context.content = \n      content.substr(0, index) + \n      text + \n      content.substr(index); \n  } \n} \n\n```", "```js\nclass Client { \n  private context = new TextContext(); \n\n  replaceCommand = new ReplaceCommand(this.context); \n  insertCommand = new InsertCommand(this.context); \n} \n\nlet client = new Client(); \n\n$('.replace-button').click(() => { \n  client.replaceCommand.execute(0, 4, 'the'); \n}); \n\n$('.insert-button').click(() => { \n  client.insertCommand.execute(0, 'awesome '); \n}); \n\n```", "```js\ninterface TextCommandInfo { \n  command: TextCommand, \n  args: any[]; \n} \n\nclass MacroTextCommand { \n  constructor( \n    public infos: TextCommandInfo[] \n  ) { } \n\n  execute(): void { \n    for (let info of this.infos) { \n      info.command.execute(...info.args); \n    } \n  } \n} \n\n```", "```js\ninterface State { } \n\nclass Memento { \n  private state: State; \n\n  constructor(state: State) { \n    this.state = Object.assign({} as State, state); \n  } \n\n  restore(state: State): void { \n    Object.assign(state, this.state); \n  } \n} \n\n```", "```js\nclass Originator { \n  state: State; \n\n  get memento(): Memento { \n    return new Memento(this.state); \n  } \n\n  set memento(memento: Memento) { \n    memento.restore(this.state); \n  } \n} \n\n```", "```js\nclass Caretaker { \n  originator: Originator; \n  history: Memento[] = []; \n\n  save(): void { \n    this.history.push(this.originator.memento); \n  } \n\n  restore(): void { \n    this.originator.memento = this.history.shift(); \n  } \n} \n\n```", "```js\ninterface Iterator<T> { \n  first(): void; \n  next(): void; \n  end: boolean; \n  item: T; \n  index: number; \n} \n\n```", "```js\nclass ArrayIterator<T> implements Iterator<T> { \n  index = 0; \n\n  constructor( \n    public array: T[] \n  ) { } \n\n  first(): void { \n    this.index = 0; \n  } \n\n  next(): void { \n    this.index++; \n  } \n\n  get end(): boolean { \n    return this.index >= this.array.length; \n  } \n\n  get item(): T { \n    return this.array[this.index]; \n  } \n} \n\n```", "```js\nObject.defineProperty(Array.prototype, 'iterator', { \n  get() { \n    return new ArrayIterator(this); \n  } \n}); \n\n```", "```js\ninterface Array<T> { \n  iterator: IteratorPattern.Iterator<T>; \n} \n\n```", "```js\ninterface IteratorResult<T> { \n  done: boolean; \n  value: T; \n} \n\ninterface Iterator<T> { \n  next(value?: any): IteratorResult<T>; \n  return?(value?: any): IteratorResult<T>; \n  throw?(e?: any): IteratorResult<T>; \n} \n\ninterface Iterable<T> { \n  [Symbol.iterator](): Iterator<T>; \n} \n\n```", "```js\nclass SomeData<T> { \n  array: T[]; \n} \n\n```", "```js\nclass SomeIterator<T> implements Iterator<T> { \n  index: number; \n\n  constructor( \n    public array: T[] \n  ) { \n    this.index = array.length - 1; \n  } \n\n  next(): IteratorResult<T> { \n    if (this.index <= this.array.length) { \n      return { \n        value: undefined, \n        done: true \n      }; \n    } else { \n      return { \n        value: this.array[this.index--], \n        done: false \n      } \n    } \n  } \n} \n\n```", "```js\nclass SomeData<T> { \n  array: T[]; \n\n [Symbol.iterator]() {\n return new SomeIterator<T>(this.array); \n } \n} \n\n```", "```js\ninterface LocationResult { \n  country: string; \n  province: string; \n  city: string; \n} \n\n```", "```js\nclass LocationPicker { \n  $country = $(document.createElement('select')); \n  $province = $(document.createElement('select')); \n  $city = $(document.createElement('select')); \n\n  $element = $(document.createElement('div')) \n    .append(this.$country) \n    .append(this.$province) \n    .append(this.$city); \n\n  get value(): LocationResult { \n    return { \n      country: this.$country.val(), \n      province: this.$province.val(), \n      city: this.$city.val() \n    }; \n  } \n} \n\n```", "```js\nprivate static setOptions( \n  $select: JQuery, \n  values: string[] \n): void { \n  $select.empty(); \n\n  let $options = values.map(value => { \n    return $(document.createElement('option')) \n      .text(value) \n      .val(value); \n  }); \n\n  $select.append($options); \n} \n\n```", "```js\nprivate static getCountries(): string[] { \n  return ['-'].concat([/* countries */]); \n} \n\nprivate static getProvincesByCountry(country: string): string[] { \n  return ['-'].concat([/* provinces */]); \n} \n\nprivate static getCitiesByCountryAndProvince( \n  country: string, \n  province: string \n): string[] { \n  return ['-'].concat([/* cities */]); \n} \n\n```", "```js\nupdateProvinceOptions(): void { \n  let country: string = this.$country.val(); \n\n  let provinces = LocationPicker.getProvincesByCountry(country); \n  LocationPicker.setOptions(this.$province, provinces); \n\n  this.$city.val('-'); \n} \n\nupdateCityOptions(): void { \n  let country: string = this.$country.val(); \n  let province: string = this.$province.val(); \n\n  let cities = LocationPicker \n    .getCitiesByCountryAndProvince(country, province); \n  LocationPicker.setOptions(this.$city, cities); \n} \n\n```", "```js\nconstructor() { \n  LocationPicker \n    .setOptions(this.$country, LocationPicker.getCountries()); \n  LocationPicker.setOptions(this.$province, ['-']); \n  LocationPicker.setOptions(this.$city, ['-']); \n\n  this.$country.change(() => { \n    this.updateProvinceOptions(); \n  }); \n\n  this.$province.change(() => { \n    this.updateCityOptions(); \n  }); \n} \n\n```"]