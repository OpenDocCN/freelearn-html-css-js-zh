["```js\nimport { readFile } from \"fs\"; \n\nreadFile(\"./hello.txt\", (err, buffer) => { \n\n    console.log(buffer.toString()); \n\n}); \n```", "```js\nfunction readJson( \n    fileName: string, \n    callback: (err: Error|null, json?: any) => void \n) { \n    readFile(fileName, \"utf-8\", (err, buffer) => { \n        if (err) { \n            callback(err); \n        } \n\n        try { \n            const parsed = JSON.parse(buffer); \n            callback(null, parsed); \n        } catch (innerErr) { \n            callback(err); \n        } \n    }); \n} \n```", "```js\nimport * as util from \"util\";\nconst promisify = util.promisify;\n```", "```js\nimport { readFile } from \"fs\"; \n\nconst readFileAsync = promisify(readFile); \n\n(async () => { \n    const buffer = await readFileAsync(\"./hello.txt\", \"utf-8\"); \n    console.log(buffer.toString()); \n})(); \n```", "```js\nimport { readFile } from \"fs\"; \n\nconst { promisify } = require(\"util\"); \nconst readFileAsync = promisify(readFile); \n\nasync function readJson(fileName: string) { \n    try { \n        const buffer = await readFileAsync(fileName, \"utf-8\"); \n        const parsed = JSON.parse(buffer.toString()); \n        return parsed; \n    } catch (err) { \n        return err; \n    } \n} \n```", "```js\nnpm install react \n```", "```js\nnpm install @types/react \n```", "```js\nimport * as fs from \"fs\"; \n```", "```js\nnpm install @types/node \n```", "```js\nnode app.js \n\nts-node app.ts \n```", "```js\nts-node app.ts --files ./**/*.txt --find SOMETHING --replace SOMETHING_ELSE \n```", "```js\nnpm install glob yargs --save \n\nnpm install @types/glob @types/yargs @types/node -save-dev \n```", "```js\nimport * as fs from \"fs\"; \n\nimport * as yargs from \"yargs\"; \n\nimport glob from \"glob\"; \n\nconst { promisify } = require(\"util\"); \n```", "```js\nconst globAsync = promisify(glob); \n\nconst readFileAsync = promisify(fs.readFile); \n\nconst writeFileAsync = promisify(fs.writeFile); \n```", "```js\nfunction getCommandLineArguments() { \n    const files = yargs.argv.files; \n\n    if (!files) { \n        throw new Error(\"Missing argument --files\"); \n    } \n\n    const find = yargs.argv.find; \n\n    if (!find) { \n        throw new Error(\"Missing argument --find\"); \n    } \n\n    const replace = yargs.argv.replace; \n\n    if (!replace) { \n        throw new Error(\"Missing argument --replace\"); \n    } \n\n    return { \n        pattern: files, \n        find: find, \n        replace: replace \n    }; \n};\n```", "```js\nfunction validateCommandLineArguments(args: any) { \n\n    if (args.pattern === undefined) { \n\n        throw new Error(`Invalid pattern ${args.pattern}`); \n\n    } \n\n    if (args.find === undefined) { \n\n        throw new Error(`Invalid find ${args.find}`); \n\n    } \n\n    if (args.replace === undefined) { \n\n        throw new Error(`Invalid replace ${args.replace}`); \n\n    } \n\n} \n```", "```js\nasync function findMatchingFilesAsync(pattern: string) { \n\n    const files = await globAsync(pattern); \n\n    // We need to let TypeScript that files are an array \n\n    return files as string[]; \n\n} \n```", "```js\nasync function findAndReplaceAsync( \n\n    file: string, \n\n    find: string, \n\n    replace: string \n\n) { \n\n    const buffer = await readFileAsync(file); \n\n    const originalText = buffer.toString(); \n\n    // This is a quick way to replace a word in JavaScript \n\n    const newText = originalText.split(find).join(replace); \n\n    await writeFileAsync(file, newText, \"utf8\"); \n\n} \n```", "```js\nasync function runAsync() { \n\n    // Read arguments \n    const args = getCommandLineArguments(); \n\n    // Validate arguments \n    validateCommandLineArguments(args); \n\n    // Find matching files \n    const files = await findMatchingFilesAsync(args.pattern);  \n\n    // Find and replace \n    files.forEach(async (file) => { \n        await findAndReplaceAsync(file, args.find, args.replace); \n    }); \n} \n```", "```js\n(async () => { \n    await runAsync(); \n})(); \n```", "```js\ndocker pull postgres:9.5 \n```", "```js\ndocker images \n```", "```js\nexport DATABASE_USER=postgres  \n\nexport DATABASE_PASSWORD=secret  \n\nexport DATABASE_HOST=localhost  \n\nexport DATABASE_PORT=5432  \n\nexport DATABASE_DB=demo \n```", "```js\ndocker run --name POSTGRES_USER -p \"$DATABASE_PORT\":\"$DATABASE_PORT\"   \n\n-e POSTGRES_PASSWORD=\"$DATABASE_PASSWORD\"   \n\n-e POSTGRES_USER=\"$DATABASE_USER\"   \n\n-e POSTGRES_DB=\"$DATABASE_DB\"  \n\n-d postgres \n```", "```js\ndocker ps -a \n```", "```js\ndocker stop $containerId \n\ndocker rm $containerId \n```", "```js\nnpm install reflect-metadata pg typeorm \n```", "```js\nimport \"reflect-metadata\"; \n\nimport { \n    Entity, \n    getConnection, \n    createConnection, \n    PrimaryGeneratedColumn, \n    Column \n} from \"typeorm\"; \n\n@Entity() \nclass Movie { \n    @PrimaryGeneratedColumn() \n    public id!: number; \n    @Column() \n    public title!: string; \n    @Column() \n    public year!: number; \n} \n\nconst entities = [ \n    Movie \n]; \n\nconst DATABASE_HOST = process.env.DATABASE_HOST || \"localhost\"; \nconst DATABASE_USER = process.env.DATABASE_USER || \"\"; \nconst DATABASE_PORT = 5432; \nconst DATABASE_PASSWORD = process.env.DATABASE_PASSWORD || \"\"; \nconst DATABASE_DB = \"demo\"; \n\n(async () => {     \n    const conn = await createConnection({ \n        type: \"postgres\", \n        host: DATABASE_HOST, \n        port: DATABASE_PORT, \n        username: DATABASE_USER, \n        password: DATABASE_PASSWORD, \n        database: DATABASE_DB, \n        entities: entities, \n        synchronize: true \n    }); \n\n    const getRepository = (entity: Function) => conn.getRepository(entity); \n    const movieRepository = conn.getRepository(Movie); \n\n    // INSERT INTO movies \n    // VALUES ('Star Wars: Episode IV - A New Hope', 1977) \n    await movieRepository.save({ \n        title: \"Star Wars: Episode IV - A New Hope\", \n        year: 1977 \n    }); \n\n    // SELECT * FROM movies WHERE year=1977 \n    const aMovieFrom1977 = await movieRepository.findOne({ \n        year: 1977 \n    }); \n\n    if (aMovieFrom1977) { \n        console.log(aMovieFrom1977.title); \n    } \n})(); \n```", "```js\nts-node app.ts \n```", "```js\nimport * as http from \"http\"; \nconst hostname = \"127.0.0.1\"; \nconst port = 3000; \n\nconst server = http.createServer((req, res) => { \n    res.statusCode = 200; \n    res.setHeader(\"Content-Types\", \"text/plain\"); \n    res.end(\"Hello world!\"); \n}); \n\nserver.listen(port, hostname, () => { \n    console.log(`Server running at http://${hostname}:${port}/`); \n}); \n```", "```js\nnpm install @types/node @types/express -save-dev \n\nnpm install express --save \n```", "```js\nimport express from \"express\"; \n\nconst port = 3000; \nconst app = express(); \n\napp.get(\"/\", (req, res) => { \n    res.send(\"Hello World!\"); \n}); \n\napp.listen(port, () => { \n    console.log(`Server running at http://127.0.0.1:${port}/`); \n}); \n```", "```js\nimport express from \"express\"; \n\nconst moviesRouter = express.Router(); \n\n// URL \"/api/v1/movies\" + \"/\" \nmoviesRouter.get(\"/\", (req, res) => { \n    res.send(\"Hello from movies!\"); \n}); \n\nconst directorsRouter = express.Router(); \n\n// URL \"/api/v1/directors\" + \"/\" \ndirectorsRouter.get(\"/\", (req, res) => { \n    res.send(\"Hello from directors!\"); \n}); \n\nconst port = 3000; \nconst app = express(); \n\napp.use(\"/api/v1/movies\", moviesRouter); \napp.use(\"/api/v1/directors\", directorsRouter); \n\napp.listen(port, () => { \n    console.log(`Server running at http://127.0.0.1:${port}/`); \n}); \n```", "```js\nconst middlewareFunction = ( \n    req: express.Request, \n    res: express.Response, \n    next: express.NextFunction \n) => { \n    next(); \n}; \n```", "```js\nimport express from \"express\"; \n\nconst port = 3000; \nconst app = express();  \n\nconst timerMiddleware = ( \n    req: express.Request, \n    res: express.Response, \n    next: express.NextFunction \n) => { \n    console.log(`Time: ${Date.now()}`); \n    next(); \n}; \n\nconst loggerMiddleware = ( \n    req: express.Request, \n    res: express.Response, \n    next: express.NextFunction \n) => { \n\n    console.log(`URL: ${req.url}`); \n    next(); \n}; \n\n// Application level middleware \napp.use(timerMiddleware); \n\n// Route level middleware \napp.get(\"/\", loggerMiddleware, (req, res) => { \n    res.send(\"Hello World!\"); \n}); \n\napp.listen(port, () => { \n    console.log(`Server running at http://127.0.0.1:${port}/`); \n}); \n```", "```js\nURL: / \nTime: 1520354128960 \n```", "```js\nimport { \n    Entity, \n    PrimaryGeneratedColumn, \n    Column \n} from \"typeorm\"; \n\n@Entity() \nexport class Movie { \n    @PrimaryGeneratedColumn() \n    public id!: number; \n    @Column() \n    public title!: string; \n    @Column() \n    public year!: number; \n} \n```", "```js\nimport { getConnection } from \"typeorm\"; \n\nimport { Movie } from \"../entities/movie\"; \n\nexport function getRepository() { \n    const conn = getConnection(); \n    const movieRepository = conn.getRepository(Movie); \n    return movieRepository; \n} \n```", "```js\nimport { Router } from \"express\"; \n\nimport { getRepository } from \"../repositories/movie_repository\"; \n\nconst movieRouter = Router(); \nmovieRouter.get(\"/\", function (req, res) { \n    const movieRepository = getRepository(); \n    movieRepository.find().then((movies) => { \n        res.json(movies); \n    }).catch((e: Error) => { \n        res.status(500); \n        res.send(e.message); \n    }); \n}); \n\nmovieRouter.get(\"/:year\", function (req, res) { \n    const movieRepository = getRepository(); \n    movieRepository.find({ \n        year: req.params.year \n    }).then((movies) => { \n        res.json(movies); \n    }).catch((e: Error) => { \n        res.status(500); \n        res.send(e.message); \n    }); \n}); \n\nmovieRouter.post(\"/\", function (req, res) { \n    const movieRepository = getRepository(); \n    const newMovie = req.body; \n    if ( \n        typeof newMovie.title !== \"string\" || \n        typeof newMovie.year !=== \"number\" \n    ) { \n        res.status(400); \n        res.send(`Invalid Movie!`); \n    } \n\n    movieRepository.find(newMovie).then((movie) => { \n        res.json(movie); \n    }).catch((e: Error) => { \n        res.status(500); \n        res.send(e.message); \n    }); \n}); \n\nexport { movieRouter }; \n```", "```js\nimport { createConnection } from \"typeorm\"; \n\nimport { Movie } from \"./entities/movie\"; \n\nexport async function getDbConnection() { \n    const DATABASE_HOST = process.env.DATABASE_HOST || \"localhost\"; \n    const DATABASE_USER = process.env.DATABASE_USER || \"\"; \n    const DATABASE_PORT = 5432; \n    const DATABASE_PASSWORD = process.env.DATABASE_PASSWORD || \"\"; \n    const DATABASE_DB = \"demo\"; \n\n    const entities = [ \n        Movie \n    ]; \n\n    const conn = await createConnection({ \n        type: \"postgres\", \n        host: DATABASE_HOST, \n        port: DATABASE_PORT, \n        username: DATABASE_USER, \n        password: DATABASE_PASSWORD, \n        database: DATABASE_DB, \n        entities: entities, \n        synchronize: true \n    }); \n\n    return conn; \n\n} \n```", "```js\nimport \"reflect-metadata\"; \n\nimport express from \"express\"; \n\nimport { getDbConnection } from \"./db\"; \n\nimport { movieRouter } from \"./controllers/movie_controller\"; \n\n(async () => { \n    await getDbConnection();\n    const port = 3000; \n    const app = express(); \n    app.use(\"/api/v1/movies\", movieRouter); \n    app.listen(port, () => { \n        console.log(`Server running at http://127.0.0.1:${port}/`) \n    }); \n})(); \n```", "```js\nnpm install inversify inversify-express-utils \n```", "```js\nexport const TYPE = { \n    MovieRepository: Symbol(\"MovieRepository\") \n}; \n```", "```js\nimport express from \"express\"; \n\nimport { inject } from \"inversify\"; \n\nimport { \n    controller, \n    httpGet, \n    httpPost, \n    response, \n    requestParam, \n    requestBody \n} from \"inversify-express-utils\"; \n\nimport { Repository } from \"typeorm\"; \n\nimport { Movie } from \"../entities/movie\"; \n\nimport { TYPE } from \"../constants/types\"; \n\n@controller(\"/api/v1/movies\") \nexport class MovieController { \n    private readonly _movieRepository: Repository<Movie>; \n    public constructor( \n        @inject(TYPE.MovieRepository)movieRepository: Repository<Movie> \n    ) { \n        this._movieRepository = movieRepository; \n    } \n    @httpGet(\"/\") \n    public async get( \n        @response() res: express.Response \n    ) { \n\n        try { \n            return await this._movieRepository.find(); \n        } catch(e) { \n            res.status(500); \n            res.send(e.message); \n        } \n    } \n\n    @httpGet(\"/:year\") \n    public async getByYear( \n        @response() res: express.Response, \n        @requestParam(\"year\") yearParam: string \n    ) { \n\n        try { \n            const year = parseInt(yearParam); \n            return await this._movieRepository.find({ \n                year \n            }); \n        } catch(e) { \n            res.status(500); \n            res.send(e.message); \n        } \n    } \n\n    @httpPost(\"/\") \n    public async post( \n        @response() res: express.Response, \n        @requestBody() newMovie: Movie \n    ) { \n\n        if ( \n            typeof newMovie.title !== \"string\" | \n            typeof newMovie.year !== \"number\" \n        ) { \n            res.status(400); \n            res.send(`Invalid Movie!`); \n        } \n\n        try { \n            return await this._movieRepository.save(newMovie); \n        } catch(e) { \n            res.status(500); \n            res.send(e.message); \n        } \n    } \n} \n```", "```js\nimport { AsyncContainerModule } from \"inversify\"; \n\nimport { Repository, Connection } from \"typeorm\"; \n\nimport { Movie } from \"./entities/movie\"; \n\nimport { getDbConnection } from \"./db\"; \n\nimport { getRepository } from \"./repositories/movie_repository\"; \n\nimport { TYPE } from \"./constants/types\"; \n\nexport const bindings = new AsyncContainerModule(async (bind) => { \n    await getDbConnection(); \n    await require(\"./controllers/movie_controller\"); \n    bind<Repository<Movie>>(TYPE.MovieRepository).toDynamicValue(() => { \n        return getRepository(); \n    }).inRequestScope(); \n}); \n```", "```js\nimport \"reflect-metadata\"; \n\nimport { Container } from \"inversify\"; \n\nimport { InversifyExpressServer } from \"inversify-express-utils\"; \n\nimport { bindings } from \"./inversify.config\"; \n\n(async () => { \n    const port = 3000; \n    const container = new Container(); \n    await container.loadAsync(bindings); \n    const app = new InversifyExpressServer(container); \n    const server = app.build(); \n    server.listen(port, () => { \n        console.log(`Server running at http://127.0.0.1:${port}/`) \n    }); \n})(); \n```"]