- en: Chapter 8. Special Techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Using mixins with Backbone objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a `Backbone.js` extension with Grunt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wiring tests for a Backbone extension with QUnit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mocking up a RESTful service with jQuery Mockjax in asynchronous tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing a mobile application with jQuery Mobile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building an iOS/Android app with PhoneGap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organizing a project structure with `Require.js`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensuring compatibility with search engines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoiding memory leaks in a Backbone application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is aimed at showing how to solve the most challenging problems
    that can occur during Backbone development.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to learn how to mix the existing Backbone objects to add any additional
    functionality. We will create a Backbone extension using Grunt.
  prefs: []
  type: TYPE_NORMAL
- en: We will also create tests for our extension, which will help us to ensure it
    works as expected when any new functionality is added to the extension.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we will integrate **jQuery Mobile** and `Backbone.js` and will use **PhoneGap**
    to build native applications for mobile platforms such as iOS and Android.
  prefs: []
  type: TYPE_NORMAL
- en: We will learn how to deal with `Require.js`, how to use it to organize project
    structure, and how to use it in our mobile applications.
  prefs: []
  type: TYPE_NORMAL
- en: And finally, we will understand how to make the search engine index the AJAX
    application created with `Backbone.js`.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter assumes that you are using a Unix like shell and have `Node.js`
    and npm (Node Package Modules) installed in your system.
  prefs: []
  type: TYPE_NORMAL
- en: Using mixins with Backbone objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Though there are hundreds of Backbone extensions that provide additional functionality,
    a project may need to extend Backbone objects with some custom functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several ways to do this. Typically, you can extend a Backbone object
    with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'It works great unless you face one of following scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: You want to modify the `Backbone.Model` object and all its children objects
    at once
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have different extensions which together modify the same object, and thus
    you will need to avoid conflicts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The solution is to use mixins, which we are going to deal with within the scope
    of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to define `mixin` and add it to `Backbone.Model`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the `mixin` object in the following way:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `mixin` to the existing object as described in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save `mixin` so that it can be mixed to the other model objects, if required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Another way is to apply mixin to `Backbone.Model.prototype`. This will make
    all `Backbone.Model` children to have such mixin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If there are more functionalities you need to define them in different mixins,
    you can extend the Backbone object in a similar way:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create a new model object, we used the `extend()` method provided by the
    ancestor model. To extend all Backbone models at once, we perform the mixing operation
    on the prototype of `Backbone.Model` using the `extend()` method of `Undercore.js`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To understand prototype inheritance, please navigate to [http://en.wikipedia.org/wiki/Prototype-based_programming](http://en.wikipedia.org/wiki/Prototype-based_programming)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Backbone.js extension with Grunt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It could be very important for the developer to create a Backbone extension
    that will be shared with the rest of the world or even re-used in future projects.
    In this recipe, we are going to learn how to create our own extension using Grunt,
    and we will upload it on **GitHub**.
  prefs: []
  type: TYPE_NORMAL
- en: Grunt is the JavaScript task runner that allows automating different tasks such
    as minification, compilation, unit testing, and linting. These repetitive tasks
    are defined in the `Gruntfile.js` file and are triggered from a console. There
    are many different packages for Grunt that are available as npm extensions. We
    are going to use one of them, named grunt-init, for scaffolding the Backbone extension
    from a template.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our extension is going to provide a compatibility with MongoDB. In the previous
    chapter, we used MongoLab ([https://mongolab.com](https://mongolab.com)), which
    is a MongoDB with a RESTful interface. **MongoLab** provides the data in the **MongoDB
    Extended JSON**, which is not supported by Backbone by default. The following
    code is an example of how a resource ID is presented in the MongoDB Extended JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: By default, the `Backbone.js` file does not deal with such IDs, but our extension
    will allow us to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to get prepared for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that `Node.js` and npm are installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install `grunt-init`, which allows generating a project from a template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Install `grunt-cli`, which allows running grunt commands from a command line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Download `grunt-init-backbone-plugin` and place it in your local `grunt-init`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the public repository on [http://github.com](http://github.com) where
    we will upload our extension.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a Backbone extension with Grunt:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a directory that will contain the source code of our extension. This
    directory should be named `backbone-mongodb`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build an extension project from the Grunt template. Run the next command and
    follow the steps asked by Grunt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `backbone-mongodb.js` file with the following extension code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the GitHub project by accessing the [https://github.com/new](https://github.com/new)
    link and fill the form that appears.![How to do it...](img/2728OS_08_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Initialize the repository and push the code to the GitHub project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we run the `grunt-init` command with the `backbone-plugin` parameter, it
    builds a new project from the `backbone-plugin` template, which we downloaded
    and saved in the `~/.grunt-init/backbone-plugin` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The newly generated project structure is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`node_modules/`: This option provides Node.js modules for our application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grunt/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grint-contrib-qunit/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`test/`: This option performs tests for our application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.html`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mongodb.js`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vendor/`: This option lists the libraries used in the application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`backbone/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`backbone-mongodb.js`: This is the main file of our application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Gruntfile.js`: This is the Grunt file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LICENSE-MIT`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`README.md`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`package.json`: This is the Node.js module file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The source code of the extension is available at [https://github.com/dealancer/backbone-mongo](https://github.com/dealancer/backbone-mongo)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grunt documentation is available at [http://gruntjs.com/getting-started](http://gruntjs.com/getting-started)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more info about the `grunt-init` backbone plugin, please navigate to [https://github.com/gsamokovarov/grunt-init-backbone-plugin](https://github.com/gsamokovarov/grunt-init-backbone-plugin)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing tests for a Backbone extension with QUnit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are working on a complex project or a Backbone extension, you need to
    make sure that the new commits do not break any existing functionality. This is
    why many developers choose to create tests prior to or after writing new code.
  prefs: []
  type: TYPE_NORMAL
- en: For JavaScript applications, there are a good number of different testing tools
    that perfectly integrate with Backbone. In this recipe, we are going to learn
    one of the tools named QUnit.
  prefs: []
  type: TYPE_NORMAL
- en: When we were building our project from a template using Grunt, QUnit was included
    in the project, and the `test/mongodb.js` file was created. Let's add a simple
    test to the extension we did in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to test an application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `test/mongodb.js` file and add some basic models and collections to
    the extension, as described in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add some variables that we will use, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `setup()` and `teardown()` methods, which will run before and after
    each test, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define as many tests as you need by calling the `test()` function as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the tests by opening the `test/index.html` file in the browser, as shown
    in the following screenshot:![How to do it...](img/2728OS_08_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can also run tests in a console with the following command, as shown in
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/2728OS_08_03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'QUnit runs all tests defined by the `test()` function, which takes the following
    parameters: `name`, `amount of asserts`, and `callback function`. Inside a testing
    callback, we can use the following asserts:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ok()`: This is a Boolean assertion that is equivalent to `CommonJS''s assert.ok()`
    and `JUnit''s assertTrue()`. It passes if the first argument is true.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`equal()`: This is a non-strict comparison assertion that is roughly equivalent
    to `JUnit assertEquals`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`notEqual()`: This is a non-strict comparison assertion that checks for inequality.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`strictEqual()`: This is a strict type and value comparison assertion.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`throws()`: This is an assertion that tests if a callback throws an exception
    when run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`notStrictEqual()`: This is a non-strict comparison assertion that checks for
    inequality.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deepEqual()`: This is a deep, recursive comparison assertion that works on
    primitive types, arrays, objects, regular expressions, dates, and functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`notDeepEqual()`: This is an inverted deep, recursive comparison assertion
    that works on primitive types, arrays, objects, regular expressions, dates, and
    functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the required amount of asserts are achieved, the test is considered as successful.
  prefs: []
  type: TYPE_NORMAL
- en: Before running each test, QUnit runs the `setup()` function, and afterwards
    the `teardown()` function. This can be useful in case we need to change some global
    settings and then revert to the changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Source code of the `index.html` file, which was generated by Grunt, looks
    like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, the source code of the `Gruntfile.js` file, which describes the commands
    for Grunt, looks like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please refer to the official QUnit documentation in order to get more familiar
    with it, at [http://api.qunitjs.com/](http://api.qunitjs.com/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mocking up a RESTful service with jQuery Mockjax in asynchronous tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we got familiar with QUnit and tested the `toJSON()`
    method, which is used for pushing data to a RESTful service. In this recipe, we
    are going to test the `fetch()` method, which works asynchronously. Fortunately,
    QUnit allows us to create asynchronous tests. We also going to emulate a RESTful
    service using jQuery Mockjax.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download the jQuery Mockjax extension from its GitHub page, [https://github.com/appendto/jquery-mockjax](https://github.com/appendto/jquery-mockjax),
    and place it in the vendor directory of the extension. Then, include its main
    JS file in the `test/index.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to mock up a RESTful service for an asynchronous
    testing:'
  prefs: []
  type: TYPE_NORMAL
- en: Define the mocked URLs and its output in the JSON format in the `setup()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Cancel mocking in the `teardown()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add asynchronous tests that sync data from the mocked up RESTful service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous code, we defined our test in the `asyncTest()` function, which
    works almost the same as the `test()` function, except that it does not proceed
    to the next test unless the `start()` function is called.
  prefs: []
  type: TYPE_NORMAL
- en: There is also a way to define asynchronous tests using the `test()` and `stop()`
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: From the previous code, we have seen that the `asyncTest()` function is an equivalent
    of the `test()` function, which calls the `stop()` function right away.
  prefs: []
  type: TYPE_NORMAL
- en: It is interesting to know what is happening in the mocked up service. jQuery
    Mockjax replaces the `jQuery.ajax()` method with its own method, which emulates
    AJAX calls to the server.
  prefs: []
  type: TYPE_NORMAL
- en: Mocked URLs are defined using `$.mockjax()` and canceled with some help from
    `$.mockjaxClear()`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please refer to the jQuery Mockjax documentation at [https://github.com/appendto/jquery-mockjax](https://github.com/appendto/jquery-mockjax)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docs about asynchronous testing with QUnit are available at [http://api.qunitjs.com/category/async-control/](http://api.qunitjs.com/category/async-control/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing a mobile application with jQuery Mobile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: jQuery Mobile is a useful HTML5/JavaScript framework for building mobile applications.
    It provides mobiles with look-and-feel components such as lists, buttons, toolbars,
    and dialogs. It is quite easy to create our own theme by customizing jQuery Mobile.
  prefs: []
  type: TYPE_NORMAL
- en: By default, all mobile pages can be stored in a single HTML file in different
    divs or are rendered on a fly. jQuery Mobile also allows us to use transition
    effects to switch between pages.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we are going to create a simple iOS-looking application with
    jQuery Mobile and `Backbone.js`, which allows users to view and create posts.
    Data is stored on [https://mongolab.com/welcome/](https://mongolab.com/welcome/)
    and accessed via REST.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our application will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Developing a mobile application with jQuery Mobile](img/2728OS_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to get prepared for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the backbone-mongodb extension from its GitHub page, [http://github.com/dealancer/backbone-mongodb/](http://github.com/dealancer/backbone-mongodb/),
    and save it in `lib/backbone-mongodb.js`. We are going to use backbone-mongodb
    to connect to [https://mongolab.com/welcome/](https://mongolab.com/welcome/),
    the RESTful MongoDB service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the jQuery Mobile library from [http://jquerymobile.com/](http://jquerymobile.com/)
    and extract it in the `lib/jquery.mobile/` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the iOS-inspired theme for jQuery Mobile from its GitHub page, [https://github.com/taitems/iOS-Inspired-jQuery-Mobile-Theme](https://github.com/taitems/iOS-Inspired-jQuery-Mobile-Theme),
    and extract it in the `lib/ios_inspired/` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the icons that we are going to use in our mobile app from [http://www.glyphish.com/](http://www.glyphish.com/),
    and extract them into the `lib/glyphish/` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create a mobile application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Render a page in the mobile browser using the default browser width, otherwise
    the page could be rendered for 980 pixels screen width and then scaled down. Include
    the following line into the header of `index.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Include the CSS files into the header of `index.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the `js/jqm-config.js` file that will retain the jQuery Mobile configuration
    and include this file it in `index.html`. Make sure it is included after jQuery
    and before jQuery Mobile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bind the callback to the `mobileinit` event in `js/jqm-config.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Disable the jQuery Mobile routing by adding the following code in the `mobileinit`
    event callback that we defined in the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set up transitions and effects by adding the following code in the mobileinit
    event callback:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the page from the **Document Object Model** (**DOM**) when it''s being
    replaced. Add the following code into the mobileinit event callback:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Include the Backbone-mongodb extension in `index.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Enable **Cross-site scripting** and disable the AJAX cache by adding the following
    code in `js/app-config.js`. Also, include this file in `index.html`. Make sure
    it is included before the main file of the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Mix `Backbone.MongoModel` in `Backbone.Model` to support the MongoDB Extended
    JSON by adding the following command line in `js/app-config.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the RESTful service URL in `js/app-config.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the template loader in `js/template-loader.js` and include this file in
    `index.html` before the main application file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Define the router object with routes and callbacks in `js/main.js`, which is
    our main application file. It should be included after all other files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the `changePage()` method to the router object to switch to the current
    view page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the `showDialog()` method to show dialogs in the router object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Define the model and collection in `js/models/post.js` and include this file
    in `index.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Define `PostDetailsView` and `PostDetailsPageView` in `js/views/post-details-page.js`
    and include this file in `index.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add templates for all your views in `index.html`. This will make them load
    faster. The following code is a template for the view we defined previously:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add views and templates to show other pages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add styles in `index.html` to show the Glyphish icons at the bottom of the toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the order of CSS and JS inclusions in `index.html`. It should look like
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The main challenge of this recipe is to integrate jQuery Mobile with `Backbone.js`.
    Basically, there shouldn't be any problem unless you are trying to use the Backbone
    router. Both `Backbone.js` and jQuery Mobile provide their own routing mechanisms,
    which conflict with each other when used together.
  prefs: []
  type: TYPE_NORMAL
- en: The jQuery Mobile routing is enabled by default. You need to disable it manually
    if you want to use `Backbone.Router`. This is what we did in `js/jqm-comfig.js`
    in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: However, we still use jQuery Mobile to switch pages. To do this, we dynamically
    create a new page in the div and then call `$.mobile.changePage`, passing the
    new page element and other parameters. If transition effects are configured, animation
    is performed.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Please refer to the official jQuery Mobile resources:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://view.jquerymobile.com/1.3.1/dist/demos/](http://view.jquerymobile.com/1.3.1/dist/demos/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://api.jquerymobile.com/](http://api.jquerymobile.com/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A live demo of the preceding application is available online at [http://dealancer.github.io/sma](http://dealancer.github.io/sma).
    You can try it from your mobile device.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The source code of this application is available in the GitHub repository:
    [https://github.com/dealancer/sma/](https://github.com/dealancer/sma/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building an iOS/Android app with PhoneGap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PhoneGap is a free and open source framework that allows building mobile applications
    from HTML/CSS/JavaScript. It supports iOS, Android, Windows Phone, Blackberry,
    and some other mobile platforms. Also, developers can get access to the mobile
    device features, such as camera, contacts, geolocation, and storage.
  prefs: []
  type: TYPE_NORMAL
- en: To build a mobile application, you need to download a specific version of PhoneGap
    for the mobile platform with you are working. Also, there is a premium online
    service named **PhoneGap Build** that allows building mobile apps online. It integrates
    with GitHub and can extract recent version of the code.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we are going to build a mobile application with PhoneGap Build.
    It will be easy and cool.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please make sure you have created an account on the website [https://build.phonegap.com/apps](https://build.phonegap.com/apps).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to build an iOS/Android application with PhoneGap:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the `config.xml` file in the same directory where the `index.html` file
    is located.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the following PhoneGap configuration in the XML format in `config.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Place the `icon.png` file with the application icon in the root directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [https://build.phonegap.com/apps/](https://build.phonegap.com/apps/) and
    click on the **+ new app** button.![How to do it...](img/2728OS_08_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the repository URL git://github.com/dealancer/sma.git in the form.![How
    to do it...](img/2728OS_08_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you want to enter a non-GitHub account or upload an application from your
    machine, click on the **Private** tab. PhoneGap allows you to create one private
    application for free.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the project is pulled out from the GitHub repository, click on the **Ready
    to Build** button, which launches the building process for multiple platforms.
    To build an application for iOS or Blackberry, you are required to enter a developer's
    key.![How to do it...](img/2728OS_08_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, the project is ready to be downloaded. You can do it by scanning the QR
    code on a mobile device. The QR code contains a link to your application. However,
    for many platforms, you need to place the built app on a special application market![How
    to do it...](img/2728OS_08_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you are ready to build a new version of the application, click on the **Update
    Code** button, and then click on the **Rebuild All** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please refer to official PhoneGap docs at [http://docs.phonegap.com/en/edge/index.html](http://docs.phonegap.com/en/edge/index.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organizing a project structure with Require.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going to use the **Asynchronous Module Definition** (**AMD**)
    technique that is implemented in `Require.js`, the JavaScript library, which helps
    to bring more order into your project. It allows you to define and load JavaScript
    modules dynamically from other parts of your code in a way similar to that in
    PHP using the `include` command. It can also optimize and uglify the JavaScript
    files so that they are loaded and executed faster.
  prefs: []
  type: TYPE_NORMAL
- en: We will take the **Social Mobile Application** example from the previous recipe
    and will refactor it using the `Require.js` library.
  prefs: []
  type: TYPE_NORMAL
- en: 'The directory structure of our app will look like the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '`css/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`main.css`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`js/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`collection/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`post.js`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`post.js`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`view/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`about-page.js`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`main-page.js`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`post-add-page.js`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`post-delete-dialog.js`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`post-details-page.js`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`post-list-page.js`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`settings-page.js`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app-config.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jqm-config.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`router.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`template-loader.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lib/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`glyphish`/'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ios_inspired/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jquery`.`mobile/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`backbone-mongodb.js`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`backbone.js`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jquery.js`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`require.js`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`underscore.js`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`icon.png`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`README.md`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download the `Require.js` file from [http://www.requirejs.org/docs/download.html](http://www.requirejs.org/docs/download.html),
    and place it in the `lib` directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to organize the mobile application with `Require.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: Extract the collection definition from `js/model/post.js` and place it in a
    separate file under the path `js/collection/post.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove all CSS inclusions from the `index.html` file, and keep only a single
    one that should contain links to others.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remove all script inclusions from the `index.html` file and keep only the one
    that will load `Require.js`. Make sure to define the `data-main` attribute with
    a relative path to the main application file. No `.js` extension is required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `js/app.js` file, add the `Require` configuration, which defines aliases
    to the libraries. We will use the other aliases later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Define module dependencies by adding the shim property into the `Require` configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here we make Require know about third-party library dependencies; for example,
    `jquery.mobile` requires `jquery` and `jqm-config`, and should have been loaded
    earlier. If you use standard JS libraries with no AMD support, you should define
    objects that are provided by those libraries (for example,. `$` in jQuery). This
    can be done by defining the object name in the `export` property.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Add mapping settings into the `Require` configuration to load the `backbone-mongodb`
    object instead of the `backbone` object in all the JS files of your app; however,
    to load `backbone-mongodb`, we still need to load `backbone`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the `requirejs()` function call to `js/app.js` to start an application.
    The first parameter contains an array of modules that should be loaded, while
    the second parameter provides the callback function, which is executed. Parameters
    of such callback functions are objects returned by the modules defined in the
    first parameter of the `requirejs()` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code means that the `app-config.js` and `router.js` files will
    be included and implemented before executing the code in the callback function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Refactor all your custom JS files to be AMD compatible. Add the `define()`
    function call, which has a similar syntax as the `requirejs()` function. If the
    module provides an object (or value) to be used by other modules, such an object
    should be returned by the module. The `app-config.js` file will look like the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Though the `Require.js` file can load templates from the text files, let's deal
    with the template loader we used before. It also needs to be AMD compatible.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure all view files are refactored as well. They may look like the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure all the required module dependencies are included in the `router.js`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remove the `main.js` file, because we have moved all functionality from it into
    the `app.js` and `router.js` files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Require.js` library provides two main functions, `define()` and `requirejs()`,
    to load other modules. The `requirejs()` function is used to start an application.
    Both the functions have similar syntax. The first parameter is used to list all
    the libraries required by the current module, and the second parameter contains
    the callback function that is executed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Parameters of the callback function are objects/values returned by the libraries
    required by the module. They are listed in the same order as the modules required.
  prefs: []
  type: TYPE_NORMAL
- en: If the module defines an object that is required by other modules, it should
    return such an object.
  prefs: []
  type: TYPE_NORMAL
- en: If you are dealing with no AMD library, but it provides an object to be used
    by other modules of your app, you should define such objects in the `require.config()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: If you need to make sure that the modules are always loaded in a specific order,
    you should define the dependencies in the `require.config()` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: By default, the `Require.js` file loads a library using the path relative to
    the main project directory. The `.js` extension is used when referencing of such
    libraries is skipped. There is also a way to define path aliases in the `require.config()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: When the application is started, the main application file runs and all the
    required modules and libraries are loaded in the correct order and according to
    the definition and configuration.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Optimizing JS files with r.js
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`R.js` is a submodule of `Require.js` that can optimize JavaScript or CSS files
    by combining them into a single file and minimizing it so that it is loaded and
    executed much faster.'
  prefs: []
  type: TYPE_NORMAL
- en: To load our Social Mobile Application from the localhost, it takes the browser
    to perform 27 requests, which is about 308 milliseconds.
  prefs: []
  type: TYPE_NORMAL
- en: '![Optimizing JS files with r.js](img/2728OS_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The same application, now optimized, is loaded with just 4 requests in 53 milliseconds.
  prefs: []
  type: TYPE_NORMAL
- en: '![Optimizing JS files with r.js](img/2728OS_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here, we see a six times boost in performance, which is a good result. Actually,
    that boost could be even bigger for larger projects, which are loaded over slow
    Internet connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'To optimize your app, please perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have `Node.js` and `npm` installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install `Require.js` as the Node module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new subdirectory named src and move all project files there.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download `r.js` from [http://www.requirejs.org/docs/download.html](http://www.requirejs.org/docs/download.html)
    and save it into the root project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the `app.build.js` file in the project root. This file should contain
    an `R.js` build configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the following command to build the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can find the built application in the `build` directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Check out the official `Require.js` documentation at [http://www.requirejs.org/](http://www.requirejs.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensuring compatibility with search engines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a search engine finds an AJAX-powered web application, it can't index such
    an app, because the search engine does not execute the complex JavaScript code.
    What the search engine wants is a static HTML.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we are going to learn how to make the search engine index the
    AJAX web application. We are going to deal mostly with Google, but we will also
    consider how to work with others.
  prefs: []
  type: TYPE_NORMAL
- en: The idea behind this recipe is that we can render the AJAX app into a static
    HTML page on the server and deliver it to a search engine spider via a proxy redirect.
  prefs: []
  type: TYPE_NORMAL
- en: To render JavaScript on the server, we are going to use the `Node.js` and `Phantom.js`
    files, which is a headless WebKit browser available as a Node module. We will
    also use a Node module named Seoserver that helps us to run `Phantom.js` and output
    the result.
  prefs: []
  type: TYPE_NORMAL
- en: To distinguish the search engine spider from a regular client and use a proxy
    redirect to the Seoserver, we will use Apache's `mod_rewrite`, `mod_proxy`, and
    `mod_proxy_http` modules.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to get prepared for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have `Node.js` and npm installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install `Phantom.js` as a Node module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Install Seoserver, which is also a Node module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure you have Apache installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure you have the following Apache extensions installed and configured:
    `mod_rewrite`, `mod_proxy`, and `mod_proxy_http`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure you have permissions to override a configuration in the `.htaccess`
    files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to ensure compatibility with search engines:'
  prefs: []
  type: TYPE_NORMAL
- en: Tell **Google** bot to use `_escaped_fragement_` instead of `#!` by adding the
    following line into the header section of `index.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will learn what it means later.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create the `.htaccess` file and place the following lines to perform the redirect
    operation via proxy to the Seoserver running on the 3000 port.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To redirect other search engines (for example, Yandex) to the Seoserver via
    proxy, add the following lines into the `.htaccess` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the Seoserver by running the following command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Optionally, create a site map with URLs in the following format: `http://<host>/<path>index.html#!route`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can check a result and see what the Google bot sees using the following
    link: [http://support.google.com/webmasters/bin/answer.py?hl=en&answer=158587](http://support.google.com/webmasters/bin/answer.py?hl=en&answer=158587)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also check the result manually by accessing `http://<host>/<path>index.html?_escaped_fragement_=route`.
    In this case, make sure you have disabled JavaScript in your browser to avoid
    any conflicts.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is a way how **Googlebot** understands that the site supports the AJAX
    crawling scheme. It simply tries to access the website using URL like `http://<host>/</path>index.html#!route`
    and checks for any significant result. `#!` is used instead of `#` to indicate
    to the webmaster that it is exactly what Googlebot wants while trying to access
    the resource. Googlebot also scans the sitemap and tries to find URLs with the
    same URL scheme.
  prefs: []
  type: TYPE_NORMAL
- en: 'Webmaster should implement handling of such URLs and output the HTML snapshots
    that can be easily indexed by a search engine. In case if a URL with `#!` could
    not be processed by the server, it is allowed to use the following URL scheme:
    `http://<host>/</path>index.html?_escaped_fragement_=route`. This should be indicated
    by adding a special meta tag in the HTML output.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Such a URL scheme that is easily handled by Apache and Googlebot is redirected
    via the proxy to the server that outputs the HTML snapshot.
  prefs: []
  type: TYPE_NORMAL
- en: We will pass all parameters to the Seoserver, which is running on port 3000,
    and calls `phantom` to get the HTML snapshot of the requested resource.
  prefs: []
  type: TYPE_NORMAL
- en: Seoserver is written on `Node.js`. Let's see its sources in `seoserver.js`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Seoserver also includes the `phantom-server.js` file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Check out the Seoserver source repository at [https://github.com/apiengine/seoserver](https://github.com/apiengine/seoserver)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To learn more about URL rewriting, please visit [http://publib.boulder.ibm.com/httpserv/manual60/misc/rewriteguide.html](http://publib.boulder.ibm.com/httpserv/manual60/misc/rewriteguide.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Phantom.js` docs are available at [https://github.com/ariya/phantomjs/wiki](https://github.com/ariya/phantomjs/wiki)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Please refer to the Google Developers docs to learn more about AJAX app crawling
    at [https://developers.google.com/webmasters/ajax-crawling/](https://developers.google.com/webmasters/ajax-crawling/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoiding memory leaks in a Backbone application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A memory leak is a problem that can occur in a computer program due to incorrect
    memory allocation. In high-level object-oriented languages such as JavaScript,
    memory leak is often related to an object that is stored in the memory but isn't
    used by an application code. A memory leak can lead to a more serious problem
    such as exhausting the available system memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example demonstrates memory leak caused by a closure (anonymous
    function):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, a new HTML element is created and the `onclick` callback
    is assigned to an anonymous function. Such a code produces a memory leak because
    `div` references to a closure, while closure references to a div since the div
    variable can be accessed in a closure scope. Such cyclic referencing can produce
    a memory leak because neither div nor closure is utilized by a garbage collector.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to detect memory leaks in a Backbone application
    and how to fix them. We will use Google Chrome Heap Profiler, which is a part
    of the Google Chrome browser.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we are going to take an example application from the recipe
    binding a collection to a view of [Chapter 5](ch05.html "Chapter 5. Events and
    Bindings"), *Events and Binding* and modify it. Such modifications are not required
    in the production application but will help us to detect memory leaks using Google
    Chrome Heap Profiler.
  prefs: []
  type: TYPE_NORMAL
- en: Add a named constructor to the each object in your program, which is extended
    from a standard Backbone object, such as Model or View. Inside this constructor,
    call a parent constructor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It could be much easier to detect memory leaks in Google Chrome Heap Profiler
    by finding object instances using their class names, which would only be possible
    if we defined such classes using named constructors.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Following code shows the `InvoiceItemModel` object with the named constructor
    defined.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Make sure your application code is performed in a global scope. This will make
    it easier to find Backbone objects in Google Chrome Heap Profiler. Contents of
    your `main.js` file shouldn't be enclosed by any function. The next few lines
    of code should be removed from your `main.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inclusion of `main.js` into `index.html` should be performed in the `body`
    section as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `ControlsView` by adding a button which deletes `InvoiceItemsTableView`
    to demonstrate a memory leak. The following code explains how it works:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our prepared application should look like the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready...](img/2728OS_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to detect and to fix memory leaks in this application:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a web application in the **Chrome** browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the *F12* key to open **Chrome DevTool**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Profiles** tab and select the **Take Heap Snapshot** item.![How
    to do it…](img/2728OS_08_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Take Snapshot** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Invoice` in the **Class Filter** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see all the classes starting with an `Invoice` and an amount of their
    instances under the **Objects Count** column.![How to do it…](img/2728OS_08_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Remove table view** button and take the heap snapshot once again
    to see a memory leak.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see that **Objects Count** was not decreased for any class but should
    have been.![How to do it…](img/2728OS_08_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete any references to objects from other objects when those references aren't
    required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete references to the `InvoiceItemsTableView` instance after we called the
    `remove()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Delete all the child subviews when the parent view is removed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the following code, when the new sub-view is created, we assign its remove
    method as a handler to the clear event of the parent view. In the `remove()` method
    of the parent view, we trigger the clear event.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use `listenTo()` method instead of `on()` to bind callbacks to the events.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `listenTo()` method keeps track of the bound events that unbinds them when
    the object is removed to make sure there is no any cyclic reference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Reload the page, remove the table view, and then create a new heap snapshot
    to make sure no invoice views are leaked. We can still see some models are kept
    in the memory, but it happens because they are used by `ControlsView`.![How to
    do it…](img/2728OS_08_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The JavaScript Garbage Collector is described at the following location: [http://blogs.msdn.com/b/ericlippert/archive/2003/09/17/53038.aspx](http://blogs.msdn.com/b/ericlippert/archive/2003/09/17/53038.aspx)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Memory leaks'' patterns in JavaScript are described at the following location:
    [http://www.ibm.com/developerworks/web/library/wa-memleak/](http://www.ibm.com/developerworks/web/library/wa-memleak/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
