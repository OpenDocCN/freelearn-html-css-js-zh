- en: Chapter 2. Creating Basic Elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned about **Google Apps Script** (**GAS**)
    and how to create a script project. In this chapter, you will learn how to create
    a clickable button, a custom menu, a message box, a sidebar and dialogs, as well
    as how to debug your script. We will use Sheets for the first two tasks and Docs
    for all the other tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a clickable button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, you learned how to open the script editor in Google
    Sheets. For this task, open the script editor in a newly created or any existing
    Google Sheet and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select cell *B3* or any other cell. Click on **Insert** and select **Drawing...**,
    as shown in the following screenshot:![Creating a clickable button](img/B05010_02_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A drawing editor window will open. Click on the **Text box** icon and then click
    anywhere within the canvas area. Type `Click Me`. Resize the object to enclose
    the text only, as shown in the following screenshot:![Creating a clickable button](img/B05010_02_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save & Close** to exit the drawing editor. Now, the **Click Me**
    image will be inserted into the active cell (*B3*), as shown in the following
    screenshot:![Creating a clickable button](img/B05010_02_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can drag this image anywhere around the spreadsheet except in the menu bar.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In Google Sheets, images are not anchored to a particular cell, and they can
    be dragged or moved around.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you click on the image, a drop-down arrow on the top-right corner will be
    visible:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Creating a clickable button](img/B05010_02_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Click on the **Assign script…** menu item. A script assignment window will open.
    Type `greeting` or any other name you like, but remember the name as the same
    name will be used to create a function in the next steps. Click on **OK**:![Creating
    a clickable button](img/B05010_02_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now open the script editor in the same spreadsheet. When you open the script
    editor, a project selector dialog will open. You can close it or select **Blank
    Project**. A default function, `myFunction`, will be there in the editor. Delete
    everything in the editor and insert the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you type `.` next to `Browser`, the code completion hint will open as
    shown:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Creating a clickable button](img/B05010_02_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: If you click on `msgBox(String title, String prompt, ButtonSet buttons):String`,
    then `msgBox(title, prompt, buttons)` will be inserted automatically.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to the code hint feature, you can use the auto-indent feature. Ensure
    that the **Indent** icon, on the left side of the **Save** icon, is pressed. Select
    the few lines of code you would like to indent, then press the *Tab* key on your
    keyboard. Now you can see that these lines of code indented automatically.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In this code, `Browser` denotes that you are calling the `Browser` class from
    the `Base` (or basic) script services. `msgBox` is the `Browser` class's method
    with three parameters. The names of the parameters are self-explanatory. The `title`
    parameter denotes the title of the message box, `prompt` denotes your message
    to the user, and `buttons` denotes what category or sets of buttons you would
    like to include in your message box.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now edit or replace the code with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click on the **Save** icon and enter a project name if asked. You have completed
    the coding of your `greeting` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, activate the spreadsheet tab/window and click on your **Click Me** button.
    An authorization window will open and you need to click **Continue**. In the successive
    **Request for Permission** window, click on **Allow**, as shown in the following
    screenshot:![Creating a clickable button](img/B05010_02_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You only need to do this once for this particular scope. The scopes will be
    shown in the concerned permission dialog/window. In this script, the scope is
    **View and manage your spreadsheets in Google Drive**. Above the scope, you can
    see the title **Chapter 2 would like to:**, which means your script project (project
    name **Chapter 2**) or application would like to get your permission for that
    particular scope.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As soon as you click **Allow**, the permission dialog will close, and your
    actual greeting message box will open as shown here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Creating a clickable button](img/B05010_02_08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Click **Ok** to close the message box. Whenever you click on your button, this
    message box will open.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Congratulations! You have created a clickable button and associated a GAS function
    with it.
  prefs: []
  type: TYPE_NORMAL
- en: Showing toast when a button is clicked
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Toast appears as a popup window in the lower-right corner of the active spreadsheet
    with a title and message. To create a toast dialog, edit or replace the `greeting`
    function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if you click the button, then a toast dialog will appear as shown in the
    following screenshot, and it disappears within 5 seconds (the default):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Showing toast when a button is clicked](img/B05010_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can include a third argument, that is, timeout seconds, in the `toast` method.
    This means how long the toast will be visible for. Put a negative number if you
    want it to show up forever. For example, `toast("Hello World!", "Greeting", -1)`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Toast only works in Sheets.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You might be wondering whether you can execute the `greeting` function without
    the help of the button. The answer is yes. In the script editor, there is a **Run**
    menu. If you click on **Run** | **greeting**, then the `greeting` function will
    be executed and the message box will open.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a button for every function may not be feasible. Although you cannot
    alter or add items to the application's standard menu (except the **Add-ons**
    menu) such as **File**, **Edit**, **View**, and so on, you can add custom menus
    and menu items.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this task, create a new Google Docs document or open an existing document.
    Open the script editor and type these two functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the first function, you are using the `DocumentApp` class, invoking the `getUi`
    method, and consecutively invoking the `createMenu`, `addItem`, and `addToUi`
    methods by method chaining. The second function should be familiar to you, as
    you created it in the previous task, but this time with the `DocumentApp` class
    and associated methods.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not copy-paste these functions or codes; create/edit them yourself line by
    line. This will help you become familiar with the script editor's code hinting
    and completion features.
  prefs: []
  type: TYPE_NORMAL
- en: Now run the `createMenu` function and flip to the document window/tab. You will
    see a new menu item called **PACKT** added next to the **Help** menu. You can
    see the custom menu **PACKT** with an item **Greeting** as shown in the following
    screenshot. The item label **Greeting** is associated with the function `greeting`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a custom menu](img/B05010_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The menu item **Greeting** works the same way as the button created in the previous
    task. The drawback with this method of inserting the custom menu is that to get
    the custom menu to show up, you need to run `createMenu` every time within the
    script editor. Consider how your user would be able to use this `greeting` function
    if they didn't know about GAS and the script editor. Think about how your user
    may not be a programmer like you. To enable your users to execute selected GAS
    functions, you should create a custom menu and make it visible as soon as the
    document opens. To do so, rename the `createMenu` function `onOpen`, and that's
    all.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `onOpen` function is a special function name. Whenever a user opens a document,
    the GAS interpreter executes this function first. Other similar function names
    are `onEdit`, `onInstall`, `doGet`, and `doPost`. The first two are spreadsheet
    event-related functions and the next two are published script service's `get`
    and `post` callback functions. You should not use these function names other than
    for the intended purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a sidebar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A sidebar is a static dialog box and is included on the right-hand side of
    the document editor window. To create a sidebar, type the following code in the
    editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, you are using `HtmlService` and invoking its method `createHtmlOutput`
    then consecutively invoking the `setTitle` method. To test this code, run the
    `onOpen` function or reload the document. The sidebar will open in the right-hand
    side of the document window as shown in the following screenshot. The sidebar
    layout size is a fixed one, which means you cannot change, alter, or resize it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a sidebar](img/B05010_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The button in the sidebar is an HTML element, not a GAS element, and if clicked,
    it opens the browser interface's alert box.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Add-ons menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous task, you included the HTML code inline as a string argument
    to the `createHtmlOutput` method. Alternatively, you can put this HTML snippet
    in a separate HTML file.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new HTML file, in the script editor, go to **File** | **New** |
    **Html file**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an Add-ons menu](img/B05010_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then in the **Create File** box, enter your preferred name for the new HTML
    file. For this task, enter `Index` and click on the **OK** button. The `.html`
    extension will be added automatically.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an Add-ons menu](img/B05010_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A new `Index.html` file will be created with a few lines of default HTML code,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an Add-ons menu](img/B05010_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Insert your `button` tags between the `body` tags as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert the code shown here in the `Code.gs` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To test the code, run the `onOpen` function or reload the document. In the
    **Add-ons** menu, a new item, called **Chapter 2** (the project name), will be
    added, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an Add-ons menu](img/B05010_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Show Sidebar** is the label for the `showSidebar` function; click on it to
    show your sidebar.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a modal dialog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a modal dialog, which prevents the user from updating anything in
    the spreadsheet or document, update the code in the `Code.gs` file as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to **Add-ons** | **Chapter 2** | **Show Dialog** and a modal dialog will
    pop up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a modal dialog](img/B05010_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a modeless dialog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we will create a modeless dialog and see the difference between modal and
    modeless dialogs. Update the `showDialog` function as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `showModalDialog` method has been changed to `showModelessDialog`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modeless dialogs do not prevent you from doing other things, such as editing
    the document, and you can drag the dialog around as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a modeless dialog](img/B05010_02_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Debugging your script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Logging the values of variables at a few points is essential when testing and
    debugging your code. The `Logger` class is a helpful tool to do this and has a
    few methods that are essential to debug your code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `showDialog` function as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Run the `showDialog` function as usual from the **Add-ons** menu. Do anything,
    for example, enter your name and click on **Yes** or **No** or close the dialog.
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging your script](img/B05010_02_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now within the script editor, press *Ctrl* + *Enter* (Windows) or Command +
    *Enter* (Mac) or from the **View** menu, select **Logs**, then you can see the
    logged text with a timestamp as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging your script](img/B05010_02_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For a more detailed study of the `Logger` future, create the function `debug`
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `debug` function and see the `Logger` result as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging your script](img/B05010_02_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In addition to logging, you can use the `debug` feature of the editor. In the
    editor, you set break points at one or more lines. To do so, click once on the
    line number on which you want to set a break point. A red dot will be toggled
    just on the left-hand side of the line number, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging your script](img/B05010_02_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the `debug` function that you want to debug in the **Select function**
    selector if it is not already selected. Click on the **Debug** button (shown as
    an insect) to the left of the function selector. The function is executed up to
    the break point and then pauses. The edit window is split horizontally and shows
    the object and its values in the bottom part of the window as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging your script](img/B05010_02_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click on the **Continue debugging** button to see the values on every cycle
    of the `for` loop.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can experiment with the other features such as step into, step over, and
    step out.
  prefs: []
  type: TYPE_NORMAL
- en: To exit the debugging session, click on the **Stop debugging** button and remember
    to remove (toggle) all the break points.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about many type of dialog and how to create and
    display them, you found out how to use the `Logger` class to log values, and you
    also saw how to debug your script. In the next chapter, you will learn about Gmail
    and Contacts.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [http://www.packtpub.com](http://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register to our website using your e-mail address and password.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hover the mouse pointer on the **SUPPORT** tab at the top.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **Code Downloads & Errata**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enter the name of the book in the **Search** box.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select the book for which you're looking to download the code files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose from the drop-down menu where you purchased this book from.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **Code Download**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR / 7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg / iZip / UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip / PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
