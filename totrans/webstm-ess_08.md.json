["```js\nnpm install -g karma-cli\n\n```", "```js\nnpm install karma --save-dev\n\n```", "```js\nkarma init\n\n```", "```js\n(function () {\n    'use strict';\n\n    describe('Tests', function () {\n\n        it('True should be truthy', function () {\n           expect(true).toBeTruthy();\n        });\n\n        it('True should fail falsy', function () {\n            expect(true).toBeFalsy();\n        });\n    });\n})();\n```", "```js\n(function () {\n    'use strict';\n\n    var fib = window.fib;\n\n    describe('Fibonacci', function () {\n\n        it('Should return the term at the given position', function () {\n            expect(fib(0)).toEqual(0);\n            expect(fib(1)).toEqual(1);\n            expect(fib(2)).toEqual(1);\n            expect(fib(3)).toEqual(2);\n            expect(fib(4)).toEqual(3);\n            expect(fib(8)).toEqual(21);\n            expect(fib(9)).toEqual(34);\n            expect(fib(51)).toEqual(20365011074);\n        });\n\n        it('Should return the value as the sum of previous values', function(){\n            expect(fib(0) + fib(1)).toEqual(fib(2));\n            expect(fib(1) + fib(2)).toEqual(fib(3));\n            expect(fib(10) + fib(11)).toEqual(fib(12));\n            expect(fib(2500) + fib(2499)).toEqual(fib(2501));\n        });\n\n    });\n})();\n```", "```js\nnpm install nodeunit --save-dev\n\n```", "```js\n(function () {\n    'use strict';\n\n    var fibModule = require('./../../fib.js');\n    var fib = fibModule.fib;\n\n    exports.term = function (test) {\n        test.equal(fib(0),0, 'Fibonacci 0 is 0');\n        test.equal(fib(1),1, 'Fibonacci 1 is 1');\n        test.equal(fib(2),1, 'Fibonacci 2 is 1');\n        test.equal(fib(3),2, 'Fibonacci 3 is 2');\n        test.equal(fib(4),3, 'Fibonacci 4 is 3');\n        test.equal(fib(8),21, 'Fibonacci 8 is 21');\n        test.equal(fib(9),34, 'Fibonacci 9 is 34');\n        test.equal(fib(51),20365011074, 'Fibonacci 51 is 20365011074');\n        test.done();\n    };\n\n    exports.recursion = function (test) {\n        test.equal(fib(2),fib(0) + fib(1), 'Fibonacci 2 is  fib 0 + fib 1');\n        test.equal(fib(3),fib(1) + fib(2), 'Fibonacci 3 is  fib 1 + fib 2');\n        test.equal(fib(12),fib(10) + fib(11), 'Fibonacci 12 is fib 10 + fib 11');        test.equal(fib(2501),fib(2499) + fib(2500), 'Fibonacci 2501 is  fib 2499 + fib 2500');\n\n        test.done();\n    };\n})();\n```", "```js\nnpm install mocha --save-dev\n\n```", "```js\n(function () {\n    'use strict';\n    var assert = require(\"assert\");\n\n    var fibModule = require('./../../fib.js');\n    var fib = fibModule.fib;\n\n    suite('Fibonacci', function () {test('Should return the term at the given position', function () {\n            assert.equal(fib(0), 0);\n            assert.equal(fib(1),1);\n            assert.equal(fib(2),1);\n            assert.equal(fib(3),2);\n            assert.equal(fib(4),3);\n            assert.equal(fib(8),21);\n            assert.equal(fib(9),34);\n            assert.equal(fib(51),20365011074);\n        });\n\n        test('Should return the value as the sum of previous values', function () {\n            assert.equal(fib(0) + fib(1), fib(2));\n            assert.equal(fib(1) + fib(2), fib(3));\n            assert.equal(fib(10) + fib(11), fib(12));\n            assert.equal(fib(2500) + fib(2499), fib(2501));\n        });\n    });\n\n})();\n```", "```js\nnpm install cucumber -save-dev\n\n```", "```js\nFeature: User can calculate the nth term in the Fibonacci seriesAs a user\n  I want to calculate the nth term in the Fibonacci series\n  So that I know what the value is\n\n  Scenario Outline: Value calculated for <number>\n    Given I have a <number> as n\n    When I pass n to the fib function\n    Then It calculate the <result> as value of the nth term\n\n    Examples:\n      |number |result |\n      |0      |0      |\n      |1      |1      |\n      |2      |1      |\n      |3      |2      |\n      |4      |3      |\n      |8      |21     |\n      |9      |34     |\n      |51     |20365011074 |\n```", "```js\n'use strict';\nvar assert = require('assert');\n\nvar fibModule = require(process.cwd() + '/../fib.js');\nvar fib = fibModule.fib;\nvar n, result;\n\nmodule.exports = function() {\n\n    this.Given(/^I have a (\\d+) as n$/, function(number, callback)\n{\n        n = parseInt(number, 10);\n        callback();\n    });\n\n    this.When(/^I pass n to the fib function$/, function(callback)\n{\n        result = fib(n);\n        callback();\n    });\n\n    this.Then(/^It calculate the (\\d+) as value of the nth term$/, function(value , callback) {\n        assert.equal(result, value, 'fib of ' + n +'should be ' + value );\n        callback();\n    });\n\n};\n```", "```js\nmodule.exports = function (wallaby) {\n  return {\n    files: ['fib.js'],\n    tests: ['test/jasmine/*.spec.js']\n  };\n};\n```"]