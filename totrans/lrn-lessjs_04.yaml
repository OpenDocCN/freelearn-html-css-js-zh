- en: Chapter 4. Working with Variables, Mixins, and Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this book, we've built up the basics of what will become our development
    toolkit for working with Less and taken a whistle-stop tour through some of the
    syntax and concepts that are associated with Less as a CSS preprocessor. I am
    sure some well-known actor once said in a film somewhere, "It's time...."
  prefs: []
  type: TYPE_NORMAL
- en: Yes, it's time to get stuck with using Less! However, hold on; this chapter
    says it's about working with variables, functions, and the like; surely, this
    means we're developing in programming code, right?
  prefs: []
  type: TYPE_NORMAL
- en: Wrong. Don't worry, my friends; granted, we will look at functions, but they
    are nothing like the functions you might see when developing using languages such
    as C# or Visual Basic. Indeed, the only similarity is the name—as we will see,
    functions within the world of Less are more akin to using a scientific calculator
    than complicated code.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is just a small part of what we will cover. Throughout this chapter, we
    will look at some of the building blocks of Less, including:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating and scoping variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing simple and parametric mixins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Less functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using prebuilt libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intrigued? Let's get started...
  prefs: []
  type: TYPE_NORMAL
- en: Discovering variables in Less
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As with all good things, we must start somewhere—it seems like an opportune
    moment to ask ourselves a question: for those of you who are already familiar
    with the basics of programming, when is a variable not a variable? It''s a constant—but
    hold on, this section is about variables, right...? If this seemed like double
    Dutch to you, then don''t worry, let me explain.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Variables in Less are very much like the variables in most programming or scripting
    languages—they act as a placeholder for a value. Consider the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of the previous code we could write this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This code will produce the same result.
  prefs: []
  type: TYPE_NORMAL
- en: You might ask yourself though, "Why write double the code for the same result?"
    Surely, we can simply use the first method, right?
  prefs: []
  type: TYPE_NORMAL
- en: Yes and no—on its own, this example isn't actually that effective. However—and
    this is where the big difference lies when using Less—it comes into its own when
    you are using the same rule to style multiple items of the same type, with the
    same effect.
  prefs: []
  type: TYPE_NORMAL
- en: If we had the need to style a number of buttons throughout a site, for example,
    then we would normally set the style either inline or using classes. This is likely
    to require updating of styles at several different places in our style sheet,
    if we need to make a change; this is time-consuming and prone to errors!
  prefs: []
  type: TYPE_NORMAL
- en: Instead, we set up variables at the start of our Less styling, which are used
    throughout our code. This means that with a single stroke, we can automatically
    update all the instances of a particular value; this can be a real timesaver,
    particularly if a client is unsure what they want to see!
  prefs: []
  type: TYPE_NORMAL
- en: The key to setting up variables is planning; with a little care and forethought,
    we can set up our variables at the head of the style sheet and then use them as
    appropriate throughout our Less code. To see what I mean, let's put this into
    practice with a simple example.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Polaroid images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the first example of this chapter, we''re going to use Less to create the
    tried-and-trusted **Polaroid effect**, as developed by the Canadian developer
    Nick La ([http://www.webdesignerwall.com](http://www.webdesignerwall.com)), and
    apply it to a number of images, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Polaroid images](img/00040.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The beauty of this is that there is no need for any JavaScript or jQuery in
    our code; it will use pure Less, which we will compile into valid CSS.
  prefs: []
  type: TYPE_NORMAL
- en: For the purpose of this book, it is assumed that we will be using Sublime Text
    that has been configured to automatically compile Less files to valid CSS, as
    we saw in [Chapter 2](part0025_split_000.html#page "Chapter 2. Building a Less
    Development Toolkit"), *Building a Less Development Toolkit*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are using a different means to compile the Less code, then you will need
    to adjust the steps accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: In a copy of the code download that accompanies this book, extract a copy of
    `variables.html`—we will use this as the basis for our Polaroid image effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'With our framework in place, let''s add some styling. In a separate file, let''s
    start adding in the Less styles, beginning with the variables that will define
    our colors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have created our variables, it''s time to use them; let''s begin
    by styling each list item, to turn them into the container for each image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now turn our attention to styling the contents of each Polaroid; let''s
    begin by setting the main images to appear within each container, and not displaced
    to right:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next comes the addition of each flower image, along with its overlay effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s add the styling for each image caption:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `variables.less`. Sublime Text will automatically compile this
    into a valid CSS file, although for the purpose of this demo, we will compile
    the Less code dynamically as it is not very complex.
  prefs: []
  type: TYPE_NORMAL
- en: 'The keen-eyed among you will notice that we are using a nonstandard font for
    the caption—this is the Handlee font, available from Google Fonts. To ensure that
    this works as expected, add this line immediately after the `<title>` tag in `variables.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If you preview the results in a browser, you will see something similar to
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Polaroid images](img/00041.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In our example, we''ve created a number of variables to handle the colors being
    used; instead of displaying hex codes throughout our code, which aren''t easy
    to understand, we can use names, such as `@dark-brown`, which are easier to understand:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also use variables to define text, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'It is important to note that while using variables to define colors is the
    most common, it is by no means the only use for variables. We can also use variables
    to define strings, as we have done here, or even include them in URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This will compile to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is worth reading through the variable examples on the main Less site ([http://less.github.io/features/#variables-feature](http://less.github.io/features/#variables-feature)).
  prefs: []
  type: TYPE_NORMAL
- en: In our example, we compiled our styles dynamically; so, Less will automatically
    substitute every instance of each variable name for the appropriate value throughout
    our code. At this point, we could easily substitute the Less file for the compiled
    CSS file—it will produce the same effect. This is something we should do for a
    production environment; we should also go one step further and minimize the code
    to ensure that bandwidth usage is kept to a minimum.
  prefs: []
  type: TYPE_NORMAL
- en: Loading variables and setting the scope
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When setting and using variables, there is one key element that we need to
    be aware of: setting variable scope when loading variables in Less.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Variables in Less are **lazy-loaded**, which means they don''t have to be declared
    before being used. If we have declared an instance of a variable, then redeclare
    it with a new value. Less will always use the last definition of the variable,
    searching upwards from the point where it is called. Consider this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In this instance, you might expect to see `.style1` contain a rule of `one:
    3`. Instead, it will compile to `one: 1`, as the `@var: 3` is contained in the
    `.class1` class rule, which is not within the same scope. It becomes even more
    important that variables are correctly assigned at the right point in our Less
    code, as we don''t have to declare them upfront before using them. As an example,
    consider the following two methods of writing the same code, both of which will
    compile to equally valid CSS. Consider the first method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The other method of writing the code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Both will compile to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: See what I mean? The first method is more concise—there is no need to use the
    second method if it produces the same result! On this note, let's change tack
    and focus on how we can remove repetition in our Less code by introducing the
    use of mixins.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring mixins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When writing code, how many times have you written a similar code, but for different
    projects? Ever wondered if you could, with a little change in the writing style,
    convert to using prebuilt blocks of CSS that you can drop in a project at a moment's
    notice?
  prefs: []
  type: TYPE_NORMAL
- en: 'Sure, you could start to create your own library of code—this would work perfectly
    well. However, it suffers from at least one potential drawback: you will very
    likely have to manually modify any stored code to fit the needs of a new project.
    While this will work, you might find yourself expending more time updating code
    than if it had been written from scratch!'
  prefs: []
  type: TYPE_NORMAL
- en: What if I said you could still maintain a code library, but you don't have to
    keep modifying each block of library code that you reuse? It is possible—with
    the use of Less' mixin functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Mixins are blocks of code that do as the name suggests—they can be mixed-in
    to your project code and called when required. They can even be moved to a library
    style sheet, which you can include in your projects—the beauty is that while you
    may have a library style sheet that is huge, only those styles that are actively
    used in the code are called and compiled in the resulting CSS style sheet.
  prefs: []
  type: TYPE_NORMAL
- en: The uses for mixins are as wide as your imagination—it can be as simple as defining
    a block of static code to call in your CSS, all the way through to passing specific
    values as parameters to mixins, otherwise known as parametric mixins. To see how
    mixins can work, let's begin by creating a simple web form using normal CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a web form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you've spent any time looking at websites—and in this modern day of technology,
    it would be difficult not to—then you will have come across, or needed to use,
    the ubiquitous contact form. They pop up everywhere—you could almost take the
    cynical view that people use them as a means of avoiding human contact!
  prefs: []
  type: TYPE_NORMAL
- en: Nonetheless, they still serve a valid purpose. Over the next few sections, we're
    going to develop a simple contact form and enhance it using Less mixins to illustrate
    how they can be used to reduce the amount of code that we need to write.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For this example, you will need to avail yourself of a copy of the code download
    that accompanies this book, as we will be using content from it during the exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by opening a copy of `project.html`, which we created earlier, and then
    updating the `<head>` section, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add the following markup in between the `<body>` tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this as `mixins.html`—a copy of this file is also available in the code
    download. From the code download, retrieve a copy of the `buttons.css` file that
    is in the `css` subfolder, in the code folder for this chapter. Space constraints
    mean all 59 lines of the file can''t be reproduced in full here, but once they
    are saved in the same folder, we can preview the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a web form](img/00042.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see from the CSS styles, there is definitely a fair amount of repetition—even
    for an example as simple as ours! Let's change this by introducing mixins in our
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Adding basic mixins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can start by adding in two simple mixins to our code—let''s begin by editing
    a copy of `buttons.css` and then adding the following code at the start of the
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we can remove the original code from the `.button` style block, as this
    is no longer needed—it will be replaced by the names of our three simple mixins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this as `mixins1.less`; we can then remove the `buttons.css` link that
    is already in the code. Don''t forget to add in a link for our Less file, within
    `mixins1.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Save the HTML file as `mixins1.html`—if we preview the results in a browser,
    we should not see any difference in the outcome, but we can rest assured with
    the knowledge that our three styles can be reused at any time in our code.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, we've made a simple change to hive off styles in the blocks
    that we can reuse—in this instance, our three mixins could be called by any of
    the buttons used on a site, but they need to be of a similar style to ours. In
    each mixin, we've grouped together the styles that complement each other, such
    as `font-family` and `font-size`. There are no hard and fast rules about what
    should and shouldn't be grouped; it all comes down to what makes sense and helps
    reduce the amount of code we need to use.
  prefs: []
  type: TYPE_NORMAL
- en: We can further develop mixins by passing in parameters—this makes them more
    useful, as we can use the same code to produce different results, depending on
    our needs. However, when working with mixins, there are a couple of *gotchas*
    that we need to be aware of—the first one is code repetition.
  prefs: []
  type: TYPE_NORMAL
- en: Hiding the original mixin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When working with mixins, Less will compile (and display) both the mixin and
    the calling code so that we end up with duplicated code in the CSS style sheet.
    This isn't desirable, as it will make the style sheet larger than it is necessary
    and harder to debug in the event of any issue.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get around this, we need to make a small modification to our existing styles—in
    the `mixin1.less` file, alter both the Less mixins, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file as you normally do—Sublime Text will recompile the Less file.
    We can prove this by examining the code in Firebug—the following screenshot shows
    the effect of not using `()` in our mixins:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hiding the original mixin](img/00043.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When the code has been compiled, you can clearly see that the styles have been
    removed—they are still present but are incorporated into the CSS style rules and
    not as separate mixins:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hiding the original mixin](img/00044.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Using the !important keyword
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When working with mixins, we can also specify the `!important` attribute, in
    the same way as we might do with normal CSS. All we need to do is to add it immediately
    after any style that must take precedence over subsequent definitions of the same
    rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This will be compiled by Less as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: As the second style rule has been assigned the `!important` attribute, this
    will take precedence over the first rule. The `!important` override should be
    used with care though—it has gained something of a bad reputation since its introduction
    in CSS1 as it has often been misused. When used with care, it can perform an important
    function—although some might say that if you need to rely on it, then it is worth
    checking your CSS to ensure that you can't achieve the same results without it!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a good explanation of the role of the `!important` tag in CSS as a whole,
    you might want to refer to Ian Devlin's article on how to best use this attribute,
    which you can find at [http://www.iandevlin.com/blog/2013/05/css/using-important-in-your-media-queries](http://www.iandevlin.com/blog/2013/05/css/using-important-in-your-media-queries).
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on and take a look at how you can make mixins more powerful by passing
    attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Developing parametric mixins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have examined how you can use mixins to create blocks of code that
    can easily be reused throughout your style sheets. On principle, this works great.
    However, what if you found yourself wanting to reuse the same block of code but
    couldn't, as the values were different?
  prefs: []
  type: TYPE_NORMAL
- en: Well, this is possible with Less; we've already covered how we can create mixins
    as reusable blocks of code. Let's take this a step further and introduce the use
    of parameters—here, we can pass values between the main Less file and individual
    mixins. When compiled, Less will use the appropriate values that are being passed
    to produce the desired CSS. Let's see this in action by making some changes to
    our simple form, which we created earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Crack open a new file and add the following mixins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file as `mixinlibrary.less`. Next, let''s modify a copy of `mixins1.less`,
    as there are some styles contained in it that are now redundant. In `mixins1.less`,
    make the following changes to the `.button` mixin, as highlighted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'At the top of `mixins1.less`, we need to link in our `mixinlibrary.less` file;
    otherwise, the compilation will fail with errors—to fix this, add the following
    line at the top of `mixins1.less`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to make a few more changes; in `mixins1.less`, we have three style
    rules for the `.red` class, namely `.red`, `.red:hover`, and `.red:active`. Within
    each, we need to change the rule for `.background-color` to use the Less mixin
    we''ve included in our mixin library. So, let''s go ahead and make the following
    changes, as highlighted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file as `parametric1.less`—don''t forget to update `parametric1.html`
    with a new link for the Less style sheet! If we preview the results in a browser,
    we can see that there has not been any change to our design (which we would expect):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Developing parametric mixins](img/00045.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'However, on closer inspection using a DOM inspector, such as Firebug (under
    the **Console** section), we can see that our mixins from `mixinslibrary.less`
    have been imported successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Developing parametric mixins](img/00046.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We covered a couple of useful techniques in this exercise—it's worth taking
    a moment to go through this in some detail.
  prefs: []
  type: TYPE_NORMAL
- en: In previous exercises, we used mixins by defining them as static blocks of code
    that we can drop in at a moment's notice. This is great, but while the code blocks
    are static, they are limited to what's contained within each block; we will need
    to modify them to use different values if required, which makes them less useful.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead, we''ve incorporated parameters, such as this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'These are passed from the calling statement to the mixin and used to produce
    different results, depending on the values being passed. When compiled using the
    mixin in `mixinlibrary.less`, this will produce the following CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This makes them infinitely more useful—one mixin can now serve a variety of
    different uses, depending on which values are passed to it.
  prefs: []
  type: TYPE_NORMAL
- en: Now, did the keen-eyed among you notice that I said we introduced a couple of
    useful techniques here? Well, the second one is the use of the `@import` statement.
    It is worth getting to know this keyword well, as it is a key part of Less. It
    allows you to break down long, complicated Less files into smaller, more manageable
    ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hold on, I hear you ask: doesn''t this mean more CSS files? No, that''s the
    beauty of Less; it doesn''t matter how many Less files you create, you will always
    end up with one compiled CSS file. Ideally, we would limit the number in practice,
    for practical purposes (7-10 is a good guideline, to allow uses such as WordPress).
    If you find yourself using more than 10, then I would suggest that you revisit
    your page design! We will return to importing Less and CSS files later in this
    chapter, in the *Using external libraries* section and also in [Chapter 5](part0050_split_000.html#page
    "Chapter 5. Inheritance, Overriding, and Nesting in Less"), *Inheritance, Overriding,
    and Nesting in Less*.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on and take this a step further; we introduced the use of multiple
    parameters with the use of the `.box-shadow` mixin, but it would be worth taking
    out time to explore these further, as we can make more useful changes to our page's
    Less design.
  prefs: []
  type: TYPE_NORMAL
- en: Passing multiple parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we've seen how you can pass a single parameter to a mixin, such as the
    radius size when using the border-radius rule. This is a great start, but as always,
    we can do more—how about passing in *multiple* parameters?
  prefs: []
  type: TYPE_NORMAL
- en: This opens up a world of possibilities, as we can widen the scope of what can
    be passed to our mixins. For example, if we're creating gradients, then we will
    have to hardcode color values in our mixins, which doesn't make them very flexible!
    Instead, if we use parametric mixins, then this allows us to pass colors as parameters
    to the mixin, thereby making the mixin far more flexible and useful.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at how this works in practice, by updating our existing code
    for `linear-gradient` (and the associated vendor prefixes), to use a Less mixin.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a copy of `mixinlibrary.less`, add the following mixin at the end of the
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'We now have redundant code in our Less file; so, in a copy of `parametric1.less`,
    remove the six background statements in each block, along with the filter and
    border statements. In their place, add the following, as highlighted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `parametric2.less`—don't forget to update the `parametric.html`
    file with the new name of our Less file.
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we continued with the theme of using parametric mixins, but
    this time, we called the same mixin with different parameters in each instance.
    In theory, it doesn't matter how many parameters are passed as long as Less can
    match them with valid inputs in each mixin. However, if you end up with more than
    4-5 parameters being passed, then it would be a good point to reassess your mixin
    and perhaps see if it should be rewritten!
  prefs: []
  type: TYPE_NORMAL
- en: 'If we preview the results in a browser, we should not expect to see any visible
    results in our form, but we can see the change from within the HTML tab in Firebug:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Passing multiple parameters](img/00047.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Applying conditions to mixins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When using static or parametric mixins, there is one thing that we should note—the
    mixin will be applied, no matter what the circumstances are and provided that
    any parameters passed to a mixin can be correctly matched and processed.
  prefs: []
  type: TYPE_NORMAL
- en: This isn't always a good thing; fortunately, we can fix this by attaching conditions
    to mixins so that they only execute if they can fulfill the condition(s) attached.
    These are known as **guarded mixins**—we will cover these in more detail in [Chapter
    8](part0074_split_000.html#page "Chapter 8. Media Queries with Less"), *Media
    Queries with Less*, where we will see how Less can be put to good use when producing
    responsive websites.
  prefs: []
  type: TYPE_NORMAL
- en: Using special keywords
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you spend any time working with mixins, then there are two useful variables
    that you will come across at some point in your Less development. They are `@arguments`
    and `@rest`. Let's take a look at how they work, in the context of the `.box-shadow`
    mixin we created in the last exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the last exercise, we created the `.box-shadow` mixin to handle our `box-shadow`
    styling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We referenced this mixin using the following command, which works perfectly
    well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if you don''t want to deal with all of the individual parameters (and
    particularly if there are a few involved), then you can replace `@x @y @blur @color;`
    with the `@arguments` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This handles the individual parameters in exactly the same way and produces
    valid CSS when compiled by Less.
  prefs: []
  type: TYPE_NORMAL
- en: 'If, however, you want to alter the number of parameters accepted by a mixin,
    then you can use Less'' ability to reference named variables. Less will automatically
    match them with the variables in the mixin and produce the appropriate result
    when compiling the code. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use the `@rest` keyword—we first pass different values to any
    named variable in the parameter list and then use `@rest` to tell Less to work
    with the remaining variables as they are now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'These two simple tricks will be of great help when you start working with mixins—there
    is one trick that we have not covered yet, which is a little more advanced: using
    mixins as if they were functions. Let''s fix this now and see what this means
    for developing mixins.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating mixins as functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On our journey through creating and developing mixins, we've seen how you can
    hive off styles into groups and vary the output if needed, if it is set to receive
    values from the calling statements. We have not covered one area though, which
    is the use of functions within mixins—let's remedy this and take a brief look
    at what this means.
  prefs: []
  type: TYPE_NORMAL
- en: 'Any variable created inside a mixin is visible to the outside world and can
    be referenced from the calling statement. This means that within a mixin, we can
    call another mixin and reference any variable from within the second mixin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code, when compiled, results in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Taking this further, we can use the variables defined within a mixin, as if
    it were a return value—this applies to any variable that is being called within
    the mixin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will result in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: This is really useful, as it means that we don't have to have a bunch of declarations
    for variables at the start of our code, but we can convert them into mixins that
    we can store in a mixin library and reuse in future projects. We will cover this
    in more detail, as a real-world example, in the *Moving calculations to a mixin*
    section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Using external libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now, we've developed a number of mixins and referenced them from either
    our main Less file or from a library file that we've created to store a number
    of our mixins. This is all good, but—hold on for a minute—one of Less' core concepts
    is DRY or Don't Repeat Yourself. While we are creating these mixin library files,
    we are (in a sense) repeating what other individuals may have already done, by
    creating—and publishing—their own solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this in mind, it is worth researching online to see if anyone has already
    made their own mixin library available for use; there are a number of good libraries
    you can try, which include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**LESS Elements**: This is available at [http://www.lesselements.com](http://www.lesselements.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LESS Hat 2**: This can be downloaded from [http://www.lesshat.com](http://www.lesshat.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**3L**: This is hosted on GitHub at [http://mateuszkocz.github.io/3l/‎](http://mateuszkocz.github.io/3l/%E2%80%8E)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ClearLess**: This is available at [https://github.com/clearleft/clearless](https://github.com/clearleft/clearless)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Less library available as part of Bootstrap also contains some useful mixins—we
    will look at this in more detail, in [Chapter 10](part0091_split_000.html#page
    "Chapter 10. Using Bootstrap with Less"), *Using Bootstrap with Less*.
  prefs: []
  type: TYPE_NORMAL
- en: There are hundreds more available online—it is worth taking the time to look,
    as a library may exist that fulfills your need.
  prefs: []
  type: TYPE_NORMAL
- en: 'To incorporate the library, it is as easy as adding this line to the head of
    your Less file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Call the name of the mixin, including any parameters that are needed. We've
    already used this earlier in this chapter, in the *Developing parametric mixins*
    section—the principles used there apply here too, whether it be for calling in
    a prebuilt library made by someone else or one of your own creations.
  prefs: []
  type: TYPE_NORMAL
- en: Enough talk of mixins—let's change the subject and focus on another area of
    Less, which is the use of functions in our code.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another useful feature of Less is its ability to work out values that should
    be used in CSS, as a result of calculating the answers to functions and not merely
    using static values.
  prefs: []
  type: TYPE_NORMAL
- en: If you are already familiar with functions in programming, you might think that
    using functions in Less will involve writing lots of complicated formulae. Before
    you put your hands up in horror, fear not—it doesn't have to be that complicated!
    In this section, we're going to take a look at how you can use some simple math
    functions to automatically calculate values, using operators and the `data-uri`
    function as the basis for some examples of the many functions available within
    Less.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can see the complete list of functions, on the main website at [http://lesscss.org/functions/](http://lesscss.org/functions/).
  prefs: []
  type: TYPE_NORMAL
- en: Creating column-based layouts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the many tasks that a developer has to perform is to build the outline
    framework for a site—this could be one of the hundreds of designs, but it is likely
    that it will involve the use of columns in some format.
  prefs: []
  type: TYPE_NORMAL
- en: 'In some cases, this can be fraught with problems, particularly when dealing
    with differences between each browser. Thankfully, Less can help here—we can use
    some of its maths operators to construct a suitable layout with ease. To give
    you an idea of what can be done, here''s a screenshot of the finished article
    from our next exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating column-based layouts](img/00048.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In a copy of the code download that accompanies this book, extract a copy of
    `functions1.html`—we will use this as the basis for styling our simple page layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we preview the results now, the design will look terrible. Let''s fix this
    by adding in the all-important styling rules. In a new file, add the following
    Less styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file as `functions.less`. Sublime Text will automatically compile
    this into a valid CSS file as `functions.css`. If we preview the results, we should
    see a simple, yet perfectly acceptable page appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating column-based layouts](img/00049.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this example, we''ve used a number of styles to produce a simple two-column
    web page. The key to this trick lies in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Here, we've set three variables; the first variable, `@basewidth`, sets the
    overall size of the content container and is crucial for working out the widths
    that we will use for each column. Next, we've set the `@mainwidth` value, which
    calculates the value from `@basewidth`, divided by `1.618` (or approximately 61
    percent)—this gives a value of `494px`. Lastly, we use the same principle to work
    out the value for the column—the formula for this becomes `800 x 0.382`, which
    gives `305.6px` or approximately 39 percent of the total width.
  prefs: []
  type: TYPE_NORMAL
- en: Using this calculation means that we can be sure that the columns will maintain
    the correct width, irrespective of the size of our container.
  prefs: []
  type: TYPE_NORMAL
- en: Moving calculations to a mixin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the last example, we used some simple maths to determine the sizes needed
    to produce a two-column layout; this formed the basis of a simple, but useful
    page layout that could be used to produce any number of websites with relative
    ease.
  prefs: []
  type: TYPE_NORMAL
- en: However, there is still a nagging thought that we could do better—what if we
    could turn our statements into a mixin and use it as if it were a function? Sounds
    crazy? Well, perhaps not—we covered the basics of how to do this earlier in the
    chapter, in the *Creating mixins as functions* section. Let's put some of that
    theory into practice and see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by opening a copy of `functions.less`, which we used to create our Less
    styling for the page demo earlier. At the top, remove the top three variable statements.
    Next, add the following mixin immediately below it—this is our replacement for
    the statements we have just commented out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to adjust the three `<div>` elements, where we use the variables from
    within this mixin; so, go ahead and make the following changes, as highlighted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Save the changes as `functions.less`. If you preview the results in a browser,
    you should not see any change to the page visually. However, this gives us the
    opportunity to hive off the mixin into a mixin library, if we've been creating
    one—a great example is the `mixinlibrary.less` file, which we put together earlier
    in the book. Even though this will, by now, contain a number of mixins that we
    wouldn't need to use here, Less will only ever pull in those mixins that it needs
    to use if it encounters a direct call for them as part of the compilation process.
  prefs: []
  type: TYPE_NORMAL
- en: Working with the data-uri function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this point, we're going to completely change tack and look at the other functions
    available within Less—the use of the `data-uri` option.
  prefs: []
  type: TYPE_NORMAL
- en: '`Data-uri` is a function available in Less, which inlines a resource to your
    style sheet; it avoids the need to link to external files by embedding the content
    directly in your style sheet. Although it may not help with document sizes, it
    will help reduce the number of HTTP requests from your server; this is one of
    the key factors that can affect how fast a page loads on the Internet. We will
    cover more of some of the pitfalls at the end of this section.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started with writing some code—there are a few steps involved in
    this process, so to give you a flavor of what we are going to produce, here''s
    a screenshot of the finished article:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with the data-uri function](img/00050.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s start by opening a copy of `functions1.html` and altering the `<div>`
    footer, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this as `functions2.html`. We need to add some social media icons at this
    point—there are thousands available on the Internet; the ones I''ve used in our
    example are the icons from *Vintage Social Media Stamps: Icon Pack* by John Negoita,
    which are available at [http://designinstruct.com/free-resources/icons/vintage-social-media-stamps-icon-pack/](http://designinstruct.com/free-resources/icons/vintage-social-media-stamps-icon-pack/).'
  prefs: []
  type: TYPE_NORMAL
- en: If you would like some inspiration, you may want to take a look at the various
    packs listed at [http://www.hongkiat.com/blog/free-social-media-icon-sets-best-of/](http://www.hongkiat.com/blog/free-social-media-icon-sets-best-of/)—there
    are some stunning examples on display!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we''re using three icons: the RSS, Facebook, and Twitter icons,
    although you may prefer to use different icons from the pack, depending on your
    needs.'
  prefs: []
  type: TYPE_NORMAL
- en: Next, to make positioning of the icons easier, we're going to convert them into
    an image sprite. For the uninitiated, image sprites are a really useful means
    of reducing the number of requests for resources from the server. This is particularly
    useful if you have lots of small images, such as arrows or icons, on your site;
    once you've downloaded the initial image, it will be cached for further use elsewhere
    on the site.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you would like to learn more about using CSS image sprites, then visit [http://css-tricks.com/css-sprites/](http://css-tricks.com/css-sprites/).
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of ways to create image sprites; the easiest way is to use
    an online service such as the one at [http://spritepad.wearekiss.com/](http://spritepad.wearekiss.com/),
    which we will use in our example.
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the site and then drag-and-drop each image onto the grid. Position
    them until you have an even gap around each image—aim to leave 3-5 pixels between
    each image. When you are happy with the layout, click on **Download** to obtain
    the converted sprite and associated CSS styles that are produced by the site.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the compressed archive that we''ve just downloaded, extract the image
    to the `lessjs` project folder; store it within the `img` subfolder. Switch to
    a new document in your text editor and then add the following, assuming that you''ve
    used the same icons as those outlined earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file as `social.less`—don''t forget to add a link to `social.less`
    in the `<head>` section of `functions2.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Sublime Text will have compiled the code into valid CSS—while the benefits
    of using this method won''t be apparent immediately, you will see the effects
    once you look at the `social.css` file that is produced (and which is available
    in the code download for this book). To give you a flavor, this is an extract
    from our compiled `social.css` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'If you save the files and preview the results in a browser, you will see the
    icons appear in the footer of your page, similar to this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with the data-uri function](img/00051.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In our example, we've taken three images and converted them into a single image
    sprite. We've then referenced this from our Less style sheet, using the `data-uri`
    function, and positioned this on our page using standard CSS attributes to determine
    the height and width (necessary for the background-image rule to work correctly).
  prefs: []
  type: TYPE_NORMAL
- en: Using the data-uri function – some words of caution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'While it is in a developer''s best interests to ensure that his/her page sizes
    are kept to a minimum, there are some pitfalls that we need to be aware of when
    using `data-uris`:'
  prefs: []
  type: TYPE_NORMAL
- en: Updating sites that use `data-uri` to render images throughout can make it harder
    to maintain—it's better to use `data-uri` where icons or images are frequently
    repeated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's a good practice to set a long expiry time on the CSS style sheet so that
    it remains cached as much as possible, particularly for often-repeated images.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some browsers will have strict limits on the size of `data-uri` that can be
    used. For example, IE8 has a maximum of 32KB; this will limit the size of the
    images that can be used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will find that embedded code means larger file sizes—this isn't necessarily
    an issue as long as the document is cached; you can help reduce this by using
    the **gzip** compression if needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This shouldn't put you off from using `data-uri`—it just means that you need
    to be careful about its use in your pages! `Data-uri` is a really useful way of
    reducing the number of requests to the server, as long as the content to be used
    is chosen with care. A good example is small credit card images—these are repeated
    frequently throughout an e-commerce site, so they could easily be used inline
    within a CSS style sheet.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Phew! We've covered a lot in this chapter! Let's recap what we learned.
  prefs: []
  type: TYPE_NORMAL
- en: We kicked off with a look at how to create variables in Less, and with care,
    we used them to good effect in creating our take on the time-honored Polaroid
    effect on a series of images. We saw how this can be a real timesaver, by reducing
    the number of alterations required to code, while at the same time, noting that
    the scope of variables can be varied, and how this can impact our code.
  prefs: []
  type: TYPE_NORMAL
- en: We then moved on to looking at mixins—both the static and parametric varieties.
    Here, we saw, with a little forethought, that we could create reusable blocks
    of code that can be dropped in with ease either within our main Less file or a
    code library file. We used this technique to iteratively alter the code required
    to build a very simple web form in order to prove that the improvements made will
    not affect the overall outcome.
  prefs: []
  type: TYPE_NORMAL
- en: Next up, came an introduction to using functions, where we saw that with the
    use of some simple operators or math functions, we can produce some useful results
    with little input. We saw how easy it is to create a simple two-column page layout
    using a small mixin, and that this can be developed further to incorporate more
    columns, if desired.
  prefs: []
  type: TYPE_NORMAL
- en: Last, but by no means least, we took a look at using another of Less' functions,
    in the form of the `data-uri` operator. We saw how easy it is to convert the image
    into something that can be rendered inline in our code, helping to reduce the
    number of requests to render content from the server and increase the speed of
    accessing our page.
  prefs: []
  type: TYPE_NORMAL
- en: We're going to move on and change tack to cover another key area of Less in
    the next chapter, by looking at inheritance, overriding, and nesting within Less.
  prefs: []
  type: TYPE_NORMAL
