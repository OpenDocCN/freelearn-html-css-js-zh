- en: Chapter 5. Charting and Documents
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章. 图表和文档
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下内容：
- en: Opening PDF documents
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开PDF文档
- en: Using an iPad for document signatures
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用iPad进行文档签名
- en: Creating PDF documents from images or screenshots
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从图像或屏幕截图创建PDF文档
- en: Generating PDF documents using jsPDF
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用jsPDF生成PDF文档
- en: Creating a scheduling chart using RGraph
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用RGraph创建调度图表
- en: Displaying information with Google gauges
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Google仪表板显示信息
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Through the convenience of a mobile device, your customers and employees have
    the ability to access data, documents, and related information, wherever and whenever
    needed. This chapter provides recipes to assist with the development of at-a-glance
    and portable information.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通过移动设备的便利性，您的客户和员工能够随时随地访问数据、文档和相关信息。本章提供了配方，以帮助开发一目了然和便携式信息。
- en: Depending on your industry, an innovative mobile-document strategy can provide
    a key competitive advantage. Forms, contracts, recipes, and invoices are all examples
    of areas a mobile document strategy can reduce costs while better engaging your
    users. In this chapter, we will cover several strategies to deal with documents
    in a cross-platform fashion.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的行业，创新的移动文档策略可以提供关键的竞争优势。表格、合同、配方和发票都是移动文档策略可以降低成本并更好地吸引用户注意力的领域示例。在本章中，我们将介绍几种处理跨平台文档的策略。
- en: The creation of dashboards using charts and graphs to paint a compelling picture
    is a common management-team request, and is a powerful way to harness mobile technology
    to provide business value. An example of this value proposition is mobility, enabling
    your marketing, sales, or operations teams with current market data in an at-a-glance
    format, allowing the management team to make faster decisions. In this chapter,
    we demonstrate how to use Titanium to create powerful, interactive charting experiences.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用图表和图形创建仪表板，以绘制引人入胜的画面，这是管理团队常见的请求，并且是利用移动技术提供商业价值的一种强大方式。这种价值主张的一个例子是移动性，它使您的营销、销售或运营团队能够以一目了然的方式获取当前市场数据，从而使管理团队能够做出更快的决策。在本章中，我们将展示如何使用Titanium创建强大的交互式图表体验。
- en: Opening PDF documents
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打开PDF文档
- en: The ability to open, view, and exchange PDF documents is a common requirement
    in Enterprise app development. This recipe discusses how to use the openPDF `CommonJS`
    module to view PDF documents in a cross-platform manner.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在企业级应用开发中，能够打开、查看和交换PDF文档是一个常见的要求。本配方讨论了如何使用openPDF的`CommonJS`模块以跨平台的方式查看PDF文档。
- en: 'The following screenshots illustrate this recipe running on both an iPhone
    and an Android device:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了该配方在iPhone和Android设备上的运行情况：
- en: '![Opening PDF documents](img/5343OT_05_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![打开PDF文档](img/5343OT_05_01.jpg)'
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The recipe uses both a `CommonJS` and an Android native module. These can be
    downloaded from the source code provided by the book, or individually through
    the links provided in the *See also* section at the end of this recipe. Installing
    these in your project is straightforward. Simply copy the `openPDF.js` file and
    the `bencoding.android.tools` folder into your Titanium project, as shown highlighted
    in the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 该配方同时使用`CommonJS`和Android原生模块。这些可以从本书提供的源代码中下载，或者通过本配方末尾的*另请参阅*部分提供的链接单独下载。将这些模块安装到您的项目中很简单。只需将`openPDF.js`文件和`bencoding.android.tools`文件夹复制到您的Titanium项目中，如下面的截图所示：
- en: '![Getting ready](img/5343OT_05_02.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/5343OT_05_02.jpg)'
- en: 'After copying the module folder, you will need to click on your `tiapp.xml`
    file in Titanium Studio and add a reference to the `bencoding.android.tools` module,
    as shown in the following screenshot:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在复制模块文件夹后，您需要在Titanium Studio中点击您的`tiapp.xml`文件，并添加对`bencoding.android.tools`模块的引用，如下面的截图所示：
- en: '![Getting ready](img/5343OT_05_03.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/5343OT_05_03.jpg)'
- en: How to do it…
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Once you have added `openPDF.js` and the native android module to your project,
    you need to create your application namespaces and use `require` to import the
    module into your code, as the following snippet demonstrates:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您已将`openPDF.js`和原生Android模块添加到您的项目中，您需要创建您的应用程序命名空间，并使用`require`将模块导入到您的代码中，如下面的代码片段所示：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Creating a link to the PDF file
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建指向PDF文件的链接
- en: 'The next step in this recipe is to create a variable with the path to our PDF
    file. For example purposes, we are using a PDF file called `w4.pdf` located in
    our project''s `resources` directory. The following snippet demonstrates how to
    create this path variable:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱的下一步是创建一个变量，包含我们的PDF文件的路径。为了示例目的，我们使用一个名为`w4.pdf`的PDF文件，该文件位于我们项目的`resources`目录中。以下代码片段演示了如何创建此路径变量：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Creating our example UI
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建我们的示例UI
- en: This recipe provides a basic UI to help illustrate how to use the `openPDF`
    module. This straightforward screen contains a button that opens a dialog providing
    different options the user can select to open a PDF file. If this recipe is running
    on an iOS device, the user will have a second button demonstrating how to open
    the PDF file inside the app.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱提供了一个基本的用户界面，以帮助说明如何使用`openPDF`模块。这个简单的屏幕包含一个按钮，该按钮打开一个对话框，提供用户可以选择以打开PDF文件的不同选项。如果此食谱在iOS设备上运行，则用户将有一个第二个按钮，演示如何在应用内部打开PDF文件。
- en: 'We first create a `Ti.UI.Window` window to attach all UI elements onto:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先创建一个`Ti.UI.Window`窗口，将所有UI元素附加到该窗口上：
- en: '[PRE2]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, we add a label instructing the user which button to press:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们添加一个标签，指示用户按下哪个按钮：
- en: '[PRE3]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, the button that will launch our first example is added to the `Ti.UI.Window`
    window:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将启动我们第一个示例的按钮添加到`Ti.UI.Window`窗口中：
- en: '[PRE4]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Opening a PDF file on the click of a button
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在按钮点击时打开PDF文件
- en: 'The first example of how to use the `openPDF` module is shown in the following
    `goButton` click-event snippet:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`openPDF`模块的第一个示例如下面的`goButton`点击事件代码片段所示：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: First, the `isSupported` method is called to determine if the device supports
    PDF files. This method will return a `true` if supported, or a `false` if no support
    is available.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，调用`isSupported`方法以确定设备是否支持PDF文件。如果支持，则此方法将返回`true`，如果不支持，则返回`false`。
- en: '[PRE6]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, the file path to our PDF is provided to the `open` method. This will
    then present the user with an `options` dialog on how they wish to view the file:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将我们的PDF文件的文件路径提供给`open`方法。然后，将向用户展示一个`options`对话框，询问他们希望如何查看文件：
- en: '[PRE7]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If the `isSupported` method results a `false`, you can then call the `isSupportedDetail`
    method for more information on why. As the following snippet shows, you can use
    the `reason` property returned by the `isSupportedDetail` method to alert your
    user to the specific issue. You can also use the `code` property to create your
    own customized messages.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`isSupported`方法返回`false`，则可以调用`isSupportedDetail`方法以获取更多关于为什么无法显示PDF文件的信息。如下面的代码片段所示，可以使用`isSupportedDetail`方法返回的`reason`属性来提醒用户具体问题。您还可以使用`code`属性来创建自己的自定义消息。
- en: '[PRE8]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Opening a PDF file within your iOS app
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在你的iOS应用中打开PDF文件
- en: 'The iOS platform has built-in support for working with PDF files. The `openPDF`
    module leverages this platform to provide the ability to create a PDF dialog viewer
    within your app, as shown in the following screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: iOS平台内置了对PDF文件的支持。`openPDF`模块利用这个平台，在您的应用中提供创建PDF对话框查看器的功能，如下面的截图所示：
- en: '![Opening a PDF file within your iOS app](img/5343OT_05_04.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![在你的iOS应用中打开PDF文件](img/5343OT_05_04.jpg)'
- en: 'In this section, a check is performed to ensure that the recipe is running
    on an iOS device. If so, the button `goButton2` is added to our `Ti.UI.Window`
    window:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本节中，进行了一次检查以确保食谱在iOS设备上运行。如果是这样，则将按钮`goButton2`添加到我们的`Ti.UI.Window`窗口中：
- en: '[PRE9]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `goButton2` click event demonstrates how to open a PDF file in a dialog
    window:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`goButton2`点击事件演示了如何在对话框窗口中打开PDF文件：'
- en: '[PRE10]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, the `isSupported` method is called to verify whether the device can read
    a PDF file:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，调用`isSupported`方法以验证设备是否可以读取PDF文件：
- en: '[PRE11]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If the device does not support the displaying of PDF files, the `isSupportDetail`
    method is called to return the reason why PDF files cannot be displayed:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果设备不支持显示PDF文件，则调用`isSupportDetail`方法以返回无法显示PDF文件的原因：
- en: '[PRE12]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, the `openDialog` method is called to display the PDF file. The `openDialog`
    method requires two arguments. The first is a path to the PDF file that is to
    be displayed. The second is a configuration object containing a UI object that
    specifies the view relative to where the viewer should be displayed. In the following
    example, we provide the `infoLabel` label created earlier as our `view` object:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，调用`openDialog`方法以显示PDF文件。`openDialog`方法需要两个参数。第一个是要显示的PDF文件的路径。第二个是一个包含一个UI对象的配置对象，该对象指定了查看器应显示的视图相对位置。在以下示例中，我们提供之前创建的`infoLabel`标签作为我们的`view`对象：
- en: '[PRE13]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Tip
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Additional elements can be added to the configuration object, such as the `animated`
    property to determine if an animation should be applied while opening and closing
    a PDF file.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以向配置对象添加其他元素，例如 `animated` 属性，以确定在打开和关闭 PDF 文件时是否应该应用动画。
- en: 'To close the PDF dialog programmatically, use the `closeDialog` method, as
    shown in the following snippet:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要程序化地关闭 PDF 对话框，请使用 `closeDialog` 方法，如下面的代码片段所示：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: File clean-up on closing a window
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关闭窗口时的文件清理
- en: 'The `openPDF` module creates cache objects and temporary files to assist in
    the display process. It is important to call the `dispose` method when PDF operations
    are no longer needed:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`openPDF` 模块创建缓存对象和临时文件以协助显示过程。当不再需要 PDF 操作时，调用 `dispose` 方法很重要：'
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Tip
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you are using the `openDialog` option on iOS, calling `dispose` will close
    the PDF dialog as well.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在 iOS 上使用 `openDialog` 选项，调用 `dispose` 也会关闭 PDF 对话框。
- en: See also
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'To learn more about the libraries and frameworks used in this recipe, please
    visit the following links:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于本食谱中使用的库和框架的信息，请访问以下链接：
- en: '**iOS DocumentViewer**: The `openPDF` module uses the `Ti.UI.iOS.DocumentViewer`
    object to work with PDF files on the iOS platform. For additional details, please
    review Titanium''s online documentation at [http://docs.appcelerator.com](http://docs.appcelerator.com).'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**iOS DocumentViewer**：`openPDF` 模块使用 `Ti.UI.iOS.DocumentViewer` 对象在 iOS 平台上处理
    PDF 文件。有关更多详细信息，请查阅 Titanium 的在线文档 [http://docs.appcelerator.com](http://docs.appcelerator.com)。'
- en: '**Working with Android Intents**: The `openPDF` module uses the `Ti.Android.intent`
    object to launch a PDF viewer on the user''s device. For additional information
    about working with `Ti.Android.intent`, visit this Appcelerator blog entry at
    [http://developer.appcelerator.com/blog/2011/09/sharing-project-assets-with-android-intents.html](http://developer.appcelerator.com/blog/2011/09/sharing-project-assets-with-android-intents.html).'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与 Android Intent 一起工作**：`openPDF` 模块使用 `Ti.Android.intent` 对象在用户设备上启动 PDF
    查看器。有关使用 `Ti.Android.intent` 的更多信息，请访问此 Appcelerator 博客文章 [http://developer.appcelerator.com/blog/2011/09/sharing-project-assets-with-android-intents.html](http://developer.appcelerator.com/blog/2011/09/sharing-project-assets-with-android-intents.html)。'
- en: '**Android Intent Supported**: The `openPDF` library uses the `bencoding.android.tools`
    module''s project to check if there is an available intent to open a PDF document
    on user''s device. To learn more about this project, please visit [https://github.com/benbahrenburg/benCoding.Android.Tools](https://github.com/benbahrenburg/benCoding.Android.Tools).'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Android Intent 支持**：`openPDF` 库使用 `bencoding.android.tools` 模块的项目来检查用户设备上是否有可用的意图来打开
    PDF 文档。要了解更多关于这个项目的信息，请访问 [https://github.com/benbahrenburg/benCoding.Android.Tools](https://github.com/benbahrenburg/benCoding.Android.Tools)。'
- en: Using an iPad for document signatures
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 iPad 进行文档签名
- en: Tablets and other touch devices provide a naturally immersive environment for
    working with documents. Through the use of several open source modules and our
    example PDF, this recipe illustrates how to create a document-signing app for
    your organization.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 平板和其他触摸设备为处理文档提供了一个自然沉浸式环境。通过使用几个开源模块和我们的示例 PDF，本食谱说明了如何为您的组织创建一个文档签名应用程序。
- en: 'The following screenshot demonstrates this recipe running on an iPad:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了本食谱在 iPad 上的运行情况：
- en: '![Using an iPad for document signatures](img/5343OT_05_05.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![使用 iPad 进行文档签名](img/5343OT_05_05.jpg)'
- en: Tip
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: This recipe is designed to run only on an iPad.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱仅适用于 iPad。
- en: Getting ready
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'This recipe uses both `CommonJS` and native modules. These modules can be downloaded
    from the source code provided by the book, or individually through the links provided
    in the *See also* section at the end of this recipe. The installation process
    is straightforward and requires only copying a few folders and files. Simply copy
    the `library.js` file and the `modules` folder into your Titanium Project, as
    highlighted in the following screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱使用 `CommonJS` 和本地模块。这些模块可以从本书提供的源代码中下载，或者通过本食谱末尾的 *另请参阅* 部分的链接单独下载。安装过程简单，只需复制几个文件夹和文件。只需将
    `library.js` 文件和 `modules` 文件夹复制到您的 Titanium 项目中，如下面的截图所示：
- en: '![Getting ready](img/5343OT_05_06.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/5343OT_05_06.jpg)'
- en: 'After copying the `modules` folder, you will need to click on your `tiapp.xml`
    file in Titanium Studio and add a reference to `ti.paint` module, as shown in
    the following screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在复制 `modules` 文件夹后，您需要在 Titanium Studio 中点击您的 `tiapp.xml` 文件，并添加对 `ti.paint`
    模块的引用，如下面的截图所示：
- en: '![Getting ready](img/5343OT_05_07.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/5343OT_05_07.jpg)'
- en: How to do it…
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Once you have added `library.js` and the native modules to your project, you
    need to create your application namespaces and use `require` to import the module
    into your `app.js` file, as the following snippet demonstrates:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您已将`library.js`和原生模块添加到项目中，您需要创建应用程序命名空间，并使用`require`将模块导入到`app.js`文件中，如下代码片段所示：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Creating a window for the recipe
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建菜谱窗口
- en: 'The following snippet demonstrates how to create a `Ti.UI.Window` window to
    hold all the controls used in this recipe:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段演示了如何创建一个`Ti.UI.Window`窗口来容纳此菜谱中使用的所有控件：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Adding a document view
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加文档视图
- en: The first UI element added to `Ti.UI.Window` is used to display the recipe's
    document. On iOS, the `Ti.UI.WebView` object has built-in support for displaying
    PDF files. This sample demonstrates how to load a single PDF document from the
    `Resources` folder of your Titanium project.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 添加到`Ti.UI.Window`的第一个UI元素用于显示菜谱的文档。在iOS上，`Ti.UI.WebView`对象内置了对显示PDF文件的支持。此示例演示了如何从Titanium项目的`Resources`文件夹中加载单个PDF文档。
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Adding a signature view
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加签名视图
- en: 'The next UI element added to the `Ti.UI.Window` window is `PaintView`. This
    `UIView` is provided by the `Ti.Paint` module added during the setup process.
    This view allows the user to draw on the screen using touch. The following snippet
    demonstrates how to set up this view to allow the user to draw using a black hue
    with a stroke size of 10 points:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来添加到`Ti.UI.Window`窗口的下一个UI元素是`PaintView`。这个`UIView`是在设置过程中添加的`Ti.Paint`模块提供的。此视图允许用户通过触摸在屏幕上绘制。以下代码片段演示了如何设置此视图，以便用户可以使用黑色色调和10点的笔触大小进行绘制：
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Adding buttons
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加按钮
- en: The next step is to create buttons to save or clear a signature. The `bClear`
    button is added to the lower-left section of the screen. This button will provide
    the ability for the user to clear the signature area. This button can also be
    used to remove a saved signature.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建用于保存或清除签名的按钮。`bClear`按钮被添加到屏幕的左下角。此按钮将提供用户清除签名区域的能力。此按钮还可以用于删除已保存的签名。
- en: '[PRE20]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'When the click event is fired on the `bClear` button, the signature is cleared
    and any saved signature files are removed:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击`bClear`按钮的事件被触发时，签名将被清除，并且任何已保存的签名文件都将被移除：
- en: '[PRE21]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Call the `clear` method on `vwSign`. This will remove all the contents of `PaintView`.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`vwSign`上调用`clear`方法。这将移除`PaintView`中的所有内容。
- en: '[PRE22]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Next, the `deleteSignature` method is called on the library `CommonJS` module.
    This removes the stored signature image.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在库`CommonJS`模块上调用`deleteSignature`方法。这将移除存储的签名图像。
- en: '[PRE23]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Then, `vwSign` is touch-enabled, and the user is alerted that their signature
    has been removed. After this is completed, the user will be able to create a new
    document signature.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，`vwSign`启用触摸功能，并通知用户他们的签名已被移除。完成此操作后，用户将能够创建新的文档签名。
- en: '[PRE24]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Next, the `bSave` button is added to the lower-right side of the iPad screen.
    This button allows the user to save a copy of their signature for later use.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将`bSave`按钮添加到iPad屏幕的右下角。此按钮允许用户保存签名的副本以供以后使用。
- en: '[PRE25]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: When the click event on the `bSave` button is fired, an image of the user's
    signature is saved to a library folder on the device.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当点击`bSave`按钮的事件被触发时，用户的签名图像将被保存到设备上的一个库文件夹中。
- en: '[PRE26]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Perform the following steps to complete the saving process:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以完成保存过程：
- en: Convert the contents of the signature view into an image blob. This blob is
    then provided to the library `CommonJS` module's `saveSignature` method to be
    persisted to the device's documents folder.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将签名视图的内容转换为图像blob。然后，将此blob提供给库`CommonJS`模块的`saveSignature`方法，以便将其持久保存到设备的文档文件夹中。
- en: '[PRE27]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Once the signature image has been saved to disk, the signature surface is made
    read-only so no additional updates can be performed:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦签名图像已保存到磁盘，签名表面将被设置为只读，因此无法执行任何额外的更新：
- en: '[PRE28]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Reloading a saved signature
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重新加载已保存的签名
- en: The last section of this recipe describes how, on opening a window, to check
    if the document has been signed and loads the stored signature for display.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 本菜谱的最后一部分描述了在打开窗口时，如何检查文档是否已签名并加载存储的签名以供显示。
- en: '[PRE29]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: First the `isSigned` method is called on the `library` module. This method will
    check if the signature file is present within the device's `library` folder.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 首先在`library`模块上调用`isSigned`方法。此方法将检查签名文件是否存在于设备的`library`文件夹中。
- en: '[PRE30]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The `signatureUrl` method is used to provide the signature''s image path to
    the view for display:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`signatureUrl`方法用于向视图提供签名的图像路径以供显示：'
- en: '[PRE31]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Since the document has already been signed, the signature view is then disabled
    so no additional updates can be made without clearing the existing signature first.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 由于文档已经被签署，因此签名视图随后被禁用，因此在没有清除现有签名的情况下无法进行任何额外的更新。
- en: '[PRE32]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: See also
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: This recipe uses the `Ti.Paint` open source module. The `Ti.Paint` module was
    used in this recipe to provide the user with the ability to sign a document. To
    learn more about this project, please visit [https://github.com/appcelerator/titanium_modules/tree/master/paint/mobile/ios](https://github.com/appcelerator/titanium_modules/tree/master/paint/mobile/ios).
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个食谱使用了 `Ti.Paint` 开源模块。在这个食谱中，`Ti.Paint` 模块被用来为用户提供签署文档的能力。要了解更多关于这个项目的信息，请访问
    [https://github.com/appcelerator/titanium_modules/tree/master/paint/mobile/ios](https://github.com/appcelerator/titanium_modules/tree/master/paint/mobile/ios)。
- en: Creating PDF documents from images or screenshots
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从图像或屏幕截图创建 PDF 文档
- en: Mobile devices are wonderful consumers of PDF documents. But, what about creating
    them? Many scenarios, such as issuing recipes or invoices, require a PDF file
    to be created by the device. One easy approach for doing this is to convert an
    image into a PDF file. This approach works well with Titanium's robust image creation
    and maintenance functionality.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 移动设备是 PDF 文档的绝佳消费者。但是，创建它们怎么办？许多场景，例如发布食谱或发票，需要设备创建 PDF 文件。实现这一目标的一个简单方法是将图像转换为
    PDF 文件。这种方法与 Titanium 强大的图像创建和维护功能配合得很好。
- en: This recipe demonstrates how to convert a `Ti.UI.View` into a PDF document.
    Also demonstrated is how to use Titanium's `Ti.Media.takeScreenshot` API to convert
    a fullscreen image of your app into a PDF file. This could be helpful for consumers
    looking to "print" their screen.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱演示了如何将 `Ti.UI.View` 转换为 PDF 文档。还演示了如何使用 Titanium 的 `Ti.Media.takeScreenshot`
    API 将应用程序的全屏图像转换为 PDF 文件。这可能对希望“打印”屏幕的消费者有所帮助。
- en: '![Creating PDF documents from images or screenshots](img/5343OT_05_08.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![从图像或屏幕截图创建 PDF 文档](img/5343OT_05_08.jpg)'
- en: Getting ready
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'This recipe leverages the `bencoding.pdf` native module. This module and supporting
    source code can be downloaded from the source code provided by the book, or individually
    through the links provided in the *See also* section at the end of this recipe.
    The installation process for this recipe is straightforward and only requires
    copying the two `bencoding.pdf` folders into their appropriate `modules` folder,
    as highlighted in the screenshot at the end of this section. If your Titanium
    project does not currently have a `modules` folder, you can simply copy the complete
    `modules` folder from this recipe into your project. In addition to the two native
    modules, you will need to copy the `sampleUI.js` file, shown the following screenshot:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱利用了 `bencoding.pdf` 原生模块。这个模块及其支持源代码可以从本书提供的源代码中下载，或者通过本食谱末尾的 *相关内容* 部分的链接单独下载。这个食谱的安装过程很简单，只需将两个
    `bencoding.pdf` 文件夹复制到相应的 `modules` 文件夹中，如本节末尾的截图所示。如果你的 Titanium 项目当前没有 `modules`
    文件夹，你可以简单地将这个食谱中的完整 `modules` 文件夹复制到你的项目中。除了这两个原生模块，你还需要复制 `sampleUI.js` 文件，如下面的截图所示：
- en: '![Getting ready](img/5343OT_05_09.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/5343OT_05_09.jpg)'
- en: After copying the `modules` folder, you will need to click on your `tiapp.xml`
    file in Titanium Studio, and add a reference to the `bencoding.pdf` modules, as
    shown in the following screenshot. Please note only one module entry will appear
    for `bencoding.pdf`, but both iOS and Android will be added to your `tiapp.xml`
    file, once selected.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在复制 `modules` 文件夹后，你需要在 Titanium Studio 中点击你的 `tiapp.xml` 文件，并添加对 `bencoding.pdf`
    模块的引用，如下面的截图所示。请注意，对于 `bencoding.pdf`，将只出现一个模块条目，但一旦选择，iOS 和 Android 都将被添加到你的
    `tiapp.xml` 文件中。
- en: '![Getting ready](img/5343OT_05_10.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/5343OT_05_10.jpg)'
- en: How to do it…
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Once you have added the `sampleUI.js` file and native modules to your project,
    you need to create your application namespaces in the `app.js` file and use `require`
    to import the module into your code, as the following snippet demonstrates:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你将 `sampleUI.js` 文件和原生模块添加到你的项目中，你需要在 `app.js` 文件中创建你的应用程序命名空间，并使用 `require`
    将模块导入到你的代码中，如下面的代码片段所示：
- en: '[PRE33]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Creating a UI for the recipe
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为食谱创建 UI
- en: 'Now, we create a `Ti.UI.Window` window to host the recipe''s UI elements:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们创建一个 `Ti.UI.Window` 窗口来承载食谱的 UI 元素：
- en: '[PRE34]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Once `Ti.UI.Window` has been created, the contents of the sample invoice is
    provided by our `sampleUI` module. The `sampleUI` module uses several `Ti.UI.View`
    and `Ti.UI.Label` controls to generate a sample invoice layout.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了`Ti.UI.Window`，样本发票的内容由我们的`sampleUI`模块提供。`sampleUI`模块使用几个`Ti.UI.View`和`Ti.UI.Label`控件来生成样本发票布局。
- en: '[PRE35]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Creating a PDF from a view
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从视图创建PDF
- en: Next, the `makeImageButton` button is added to the recipe's `Ti.UI.Window`.
    This button will later be used to create a PDF sample invoice.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将`makeImageButton`按钮添加到菜谱的`Ti.UI.Window`中。此按钮将稍后用于创建PDF样本发票。
- en: '[PRE36]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: When the click event on the `makeImageButton` button is fired, a PDF is generated
    with the contents from the `Ti.UI.View` containing our sample invoice.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当`makeImageButton`按钮的点击事件被触发时，将生成一个包含`Ti.UI.View`内容的PDF。
- en: '[PRE37]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The first step in generating a PDF is to create an image from the `Ti.UI.View`
    containing the invoice layout. The following snippet demonstrates how to do this
    on both iOS and Android:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成PDF的第一步是从包含发票布局的`Ti.UI.View`创建一个图像。以下代码片段演示了如何在iOS和Android上完成此操作：
- en: '[PRE38]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The image blob for the invoice `Ti.UI.View` is then provided to the `convertImageToPDF`
    method in the `PDF Converters` module. This method converts the provided image
    into a PDF `Ti.File` blob. In addition to the image on iOS, you can provide a
    resolution to be used in the conversion process. The following sample uses a resolution
    of 100:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将发票`Ti.UI.View`的图像blob提供给`PDF Converters`模块中的`convertImageToPDF`方法。此方法将提供的图像转换为PDF
    `Ti.File` blob。除了iOS上的图像外，您还可以提供用于转换过程的分辨率。以下示例使用分辨率为100：
- en: '[PRE39]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The invoice PDF `Ti.File` blob can then be saved using the standard `Ti.FileSystem`
    method, as the following snippet shows:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，可以使用标准`Ti.FileSystem`方法将发票PDF `Ti.File` blob保存，如下所示：
- en: '[PRE40]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Creating a PDF document from a screenshot
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从截图创建PDF文档
- en: 'A similar technique can be used to create a PDF document containing a screenshot
    of the app. The first step in doing this is to add a button named `ssButton` to
    the recipe''s `Ti.UI.Window`:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用类似的技术来创建包含应用截图的PDF文档。执行此操作的第一步是在菜谱的`Ti.UI.Window`中添加一个名为`ssButton`的按钮：
- en: '[PRE41]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'When we click on the `ssButton` button, a screenshot will be taken and converted
    into a PDF file:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击`ssButton`按钮时，将进行截图并将其转换为PDF文件：
- en: '[PRE42]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The first step in this process is to use the `Ti.Media.takeScreenshot` API
    to take a screenshot of the app:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 此过程的第一步是使用`Ti.Media.takeScreenshot` API对应用进行截图：
- en: '[PRE43]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The screenshot API returns an image blob of the device''s screen:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 截图API返回设备屏幕的图像blob：
- en: '[PRE44]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The screenshot image blob is then provided to the `convertImageToPDF` method
    in the `PDF Converters` module. This method converts the provided image into a
    PDF `Ti.File` blob. In addition to the image on iOS, you can provide a resolution
    to be used in the conversion process. This sample uses a resolution of 96 points:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将截图图像blob提供给`PDF Converters`模块中的`convertImageToPDF`方法。此方法将提供的图像转换为PDF `Ti.File`
    blob。除了iOS上的图像外，您还可以提供用于转换过程的分辨率。此示例使用分辨率为96点：
- en: '[PRE45]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The screenshot PDF `Ti.File` blob can then be saved using the standard `Ti.FileSystem`
    methods:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，可以使用标准`Ti.FileSystem`方法将截图PDF `Ti.File` blob保存：
- en: '[PRE46]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: See also
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: To learn more about the modules used in this recipe, please visit [https://github.com/benbahrenburg/benCoding.PDF](https://github.com/benbahrenburg/benCoding.PDF).
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多关于此菜谱中使用的模块的信息，请访问[https://github.com/benbahrenburg/benCoding.PDF](https://github.com/benbahrenburg/benCoding.PDF)。
- en: Generating PDF documents using jsPDF
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用jsPDF生成PDF文档
- en: Creating formatted PDF documents on a mobile device can be difficult. Adding
    cross-platform to the equation only compounds this challenge. The jsPDF JavaScript
    library and the associated jsPDF Titanium module provide a robust and pure JavaScript
    cross-platform approach.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在移动设备上创建格式化的PDF文档可能很困难。将跨平台添加到等式中只会使这一挑战更加复杂。jsPDF JavaScript库及其相关的jsPDF Titanium模块提供了一种强大且纯JavaScript的跨平台方法。
- en: 'This recipe demonstrates how to create formatted PDF documents, similar to
    the following screenshot, using a powerful JavaScript API:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱演示了如何使用强大的JavaScript API创建格式化的PDF文档，类似于以下截图：
- en: '![Generating PDF documents using jsPDF](img/5343OT_05_11.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![使用jsPDF生成PDF文档](img/5343OT_05_11.jpg)'
- en: Getting ready
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'This recipe uses the `jsPDF` module for Titanium to create PDF files. This
    module and supporting source code can be downloaded from the source code provided
    by the book, or individually through the links provided in the *See also* section
    at the end of this recipe. The installation process for this recipe is straightforward
    and only requires copying the `jsPDFMod` folder into the `Resources` folder of
    your Titanium project, as shown in the following screenshot:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱使用Titanium的`jsPDF`模块来创建PDF文件。此模块及其支持源代码可以从本书提供的源代码中下载，或者通过此菜谱末尾的“也见”部分提供的链接单独下载。此菜谱的安装过程简单直接，只需将`jsPDFMod`文件夹复制到您的Titanium项目的`Resources`文件夹中，如下截图所示：
- en: '![Getting ready](img/5343OT_05_12.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![准备中](img/5343OT_05_12.jpg)'
- en: How to do it…
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Once you have added the `jsPDFMod` folder to your project, you will need to
    create your application namespaces in the `app.js` file, and use `require` to
    import the module into your code, as the following snippet demonstrates:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 将`jsPDFMod`文件夹添加到您的项目后，您需要在`app.js`文件中创建您的应用程序命名空间，并使用`require`将模块导入到您的代码中，如下面的代码片段所示：
- en: '[PRE47]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Creating a UI for the recipe
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建菜谱的UI
- en: This recipe contains a basic UI that allows the user to generate a recipe PDF
    and open an e-mail dialog.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱包含一个基本的用户界面，允许用户生成菜谱PDF并打开电子邮件对话框。
- en: 'Create a `Ti.UI.Window` window to hold all UI controls:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`Ti.UI.Window`窗口来容纳所有UI控件：
- en: '[PRE48]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Next, the `goButton` button is added to the recipe''s `Ti.UI.Window`:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将`goButton`按钮添加到菜谱的`Ti.UI.Window`中：
- en: '[PRE49]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The `goButton` button''s click event launches the PDF creation process by calling
    the `generatePDFExample` method:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`goButton`按钮的点击事件通过调用`generatePDFExample`方法启动PDF创建过程：'
- en: '[PRE50]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Creating a PDF document using jsPDF
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用jsPDF创建PDF文档
- en: 'The following snippet describes how to use `generatePDFExample` to create a
    PDF document using the `jsPDF` module:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段描述了如何使用`generatePDFExample`通过`jsPDF`模块创建PDF文档：
- en: '[PRE51]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The next line demonstrates how to create a new instance of the `jsPDF` module.
    This creates a new virtual PDF document.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行演示了如何创建`jsPDF`模块的新实例。这创建了一个新的虚拟PDF文档。
- en: '[PRE52]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The following snippet demonstrates how to add document properties to the PDF
    document object:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段演示了如何向PDF文档对象添加文档属性：
- en: '[PRE53]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The following snippet demonstrates how to embed an image into a PDF document.
    It is important that the images contain a full native path as shown here, otherwise
    the document will generate errors on saving:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段演示了如何将图像嵌入到PDF文档中。重要的是图像必须包含完整的本地路径，如所示，否则在保存时文档将生成错误：
- en: '[PRE54]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'We then create a header using `Helvetica` `bold` and a font size of `32`:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们然后使用`Helvetica`粗体和字体大小`32`创建一个标题：
- en: '[PRE55]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The following code snippet creates the itemized recipe section with `normal`
    font and a size of `18`:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段使用`normal`字体和大小`18`创建了一个项目符号菜谱部分：
- en: '[PRE56]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'A `Ti.File` object is created to the location where we wish to save `recipe.pdf`:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个指向我们希望保存`recipe.pdf`的位置的`Ti.File`对象：
- en: '[PRE57]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The `Ti.File` object is then passed into the `jsPDF` module''s `save` method.
    The `save` method will generate a PDF file with the attributes created earlier:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将`Ti.File`对象传递给`jsPDF`模块的`save`方法。`save`方法将生成一个具有先前创建的属性的PDF文件：
- en: '[PRE58]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The `Ti.File` reference for the saved PDF file is then provided to `Ti.UI.EmailDialog`
    as an attachment and opened, so the user can compose an e-mail:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 将保存的PDF文件的`Ti.File`引用作为附件提供给`Ti.UI.EmailDialog`并打开，以便用户可以编写电子邮件：
- en: '[PRE59]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: See also
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 也见
- en: To learn more about the jsPDF project created by James Hall, please visit the
    Github repository at [https://github.com/MrRio/jsPDF](https://github.com/MrRio/jsPDF).
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解更多关于James Hall创建的jsPDF项目的信息，请访问GitHub仓库[https://github.com/MrRio/jsPDF](https://github.com/MrRio/jsPDF)。
- en: 'This recipe uses the a Titanium module for jsPDF. Please refer to the following
    links for additional documentation, samples, and guidance with the module:'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此菜谱使用Titanium的jsPDF模块。有关模块的附加文档、示例和指南，请参阅以下链接：
- en: 'Author: Malcolm Hollingsworth'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作者：Malcolm Hollingsworth
- en: 'Repository: [https://github.com/Core-13](https://github.com/Core-13)'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仓库：[https://github.com/Core-13](https://github.com/Core-13)
- en: 'Sponsoring organization: Core13; website: [core13.co.uk](http://core13.co.uk)'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 赞助组织：Core13；网站：[core13.co.uk](http://core13.co.uk)
- en: Creating a scheduling chart using RGraph
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用RGraph创建调度图
- en: 'A picture can be worth a thousand words, and in today''s fast-paced business
    environments, using graphics to display information can be a competitive advantage.
    This recipe demonstrates how you can use the popular RGraph JavaScript library
    to create a chart reflecting project scheduling. The following screenshots illustrate
    what this recipe will look like when completed:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 一图胜千言，在当今快节奏的商业环境中，使用图形来显示信息可以是一个竞争优势。本菜谱演示了您如何使用流行的RGraph JavaScript库创建反映项目调度的图表。以下截图显示了完成此菜谱后的样子：
- en: '![Creating a scheduling chart using RGraph](img/5343OT_05_13.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![使用RGraph创建调度图](img/5343OT_05_13.jpg)'
- en: Getting ready
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe uses RGraph and several non-native components to display the chart.
    These components can be downloaded from the source code provided by the book,
    or individually through the links provided in the *See also* section at the end
    of this recipe.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 本菜谱使用RGraph和几个非原生组件来显示图表。这些组件可以从本书提供的源代码中下载，或者通过本菜谱末尾的“也见”部分提供的链接单独下载。
- en: 'The first step in setting up this recipe is to copy the `web` folder (highlighted
    in the following screenshot) into the `Resources` folder of your project folder.
    After copying the `web` folder, you will need to then copy the `teamBuilder.js`,
    `chartLauncher.js`, `sampleUI.js`, and `scheduleBuilder.js` files into the `Resources`
    folder of your Titanium project, as shown in the following screenshot:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 设置此菜谱的第一步是将以下截图中的`web`文件夹（突出显示）复制到项目文件夹的`Resources`文件夹中。在复制`web`文件夹后，您需要将`teamBuilder.js`、`chartLauncher.js`、`sampleUI.js`和`scheduleBuilder.js`文件复制到Titanium项目的`Resources`文件夹中，如下截图所示：
- en: '![Getting ready](img/5343OT_05_14.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/5343OT_05_14.jpg)'
- en: How to do it…
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'After adding the `web` folder and CommonJS modules, as discussed earlier, you
    will need to create your application namespaces in the `app.js` file and use `require`
    to import the module into your code, as the following snippet demonstrates:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面讨论的添加`web`文件夹和CommonJS模块之后，您需要在`app.js`文件中创建您的应用程序命名空间，并使用`require`将模块导入到您的代码中，如下面的代码片段所示：
- en: '[PRE60]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Creating a UI for the recipe
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为菜谱创建UI
- en: The next step in this recipe is to create the main `Ti.UI.Window` window. This
    `Ti.UI.Window` will be used to launch the recipe's functionality.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 本菜谱的下一步是创建主`Ti.UI.Window`窗口。此`Ti.UI.Window`将用于启动菜谱的功能。
- en: '[PRE61]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'After the `Ti.UI.Window` window is created, the `fetchDemoView` method is called
    on our `sampleUI` module. This displays the recipe''s instructions to the user:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建`Ti.UI.Window`窗口后，我们在`sampleUI`模块上调用`fetchDemoView`方法。这向用户显示菜谱的说明：
- en: '[PRE62]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Creating schedules and assigning tasks
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建调度和分配任务
- en: This section of the recipe demonstrates how to create schedules, and assign
    tasks to individuals on your project.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分菜谱演示了如何创建调度，并将任务分配给项目中的个人。
- en: 'The first step is to create a schedule for a team member. This is done by creating
    a new schedule object and providing the individual''s name. The following line
    demonstrates how to create a schedule for Richard:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是为团队成员创建一个调度。这是通过创建一个新的调度对象并提供个人的名字来完成的。以下行演示了如何为理查德创建一个调度：
- en: '[PRE63]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Next, the `createTask` method is used to create a task for the individual.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用`createTask`方法为个人创建一个任务。
- en: '[PRE64]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The `createTask` method has the following parameters:'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`createTask`方法有以下参数：'
- en: '**Task name**: A string containing the name of the task'
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**任务名称**: 包含任务名称的字符串'
- en: '**Start on day**: This is the position (day) the task is to start'
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开始于某天**: 这是任务开始的位置（天）'
- en: '**Duration**: The number of days the task will take'
  id: totrans-235
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续时间**: 任务所需的天数'
- en: '**Percentage complete**: The percentage completion of the task'
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完成百分比**: 任务的完成百分比'
- en: '**Comment**: The comment for the task'
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注释**: 任务的注释'
- en: 'Finally, the team member''s schedule is added to the team:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将团队成员的调度添加到团队中：
- en: '[PRE65]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The next snippet demonstrates how to perform the steps discussed earlier, for
    another team member:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段演示了如何执行前面讨论的步骤，为另一位团队成员：
- en: '[PRE66]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Tip
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can add additional individuals by following the pattern detailed here.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过以下详细说明的模式添加额外的个人。
- en: Launching the example
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动示例
- en: 'Perform the following steps to launch the example we created in the previous
    section:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以启动我们在上一节中创建的示例：
- en: 'The first step is to add the `goButton` button to the `Ti.UI.Window` window
    to allow the user to launch the chart sample:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是将`goButton`按钮添加到`Ti.UI.Window`窗口中，以便用户可以启动图表示例：
- en: '[PRE67]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: The click event of the `goButton` button launches the chart example by using
    the `openDialog` method on the `chartLauncher` module. The `openDialog` method
    uses the `my.team` object created previously to generate a Gantt chart containing
    a team schedule.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`goButton` 按钮的点击事件通过在 `chartLauncher` 模块上使用 `openDialog` 方法启动图表示例。`openDialog`
    方法使用之前创建的 `my.team` 对象生成包含团队预定的甘特图。'
- en: '[PRE68]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Calling the `openDialog` method is demonstrated in the following snippet:'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在以下片段中展示了调用 `openDialog` 方法：
- en: '[PRE69]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: How it works…
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'The `chartLauncher` module (`chartLauncher.js`) is used to display the team''s
    scheduled tasks. The following line demonstrates how this module uses RGraph to
    create a Gantt chart with the results. First, the `openDialog` method is added
    to the `exports` object:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`chartLauncher` 模块（`chartLauncher.js`）用于显示团队的预定任务。以下行展示了该模块如何使用 RGraph 创建包含结果的甘特图。首先，将
    `openDialog` 方法添加到 `exports` 对象中：'
- en: '[PRE70]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The next step in this part of the recipe is to create a window to display to
    the user:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱本部分的下一步是创建一个窗口以向用户显示：
- en: '[PRE71]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'After `Ti.UI.Window` is created, a `Ti.UI.WebView` object is attached. The
    RGraph chart information is contained in the `index.html` file that `Ti.UI.WebView`
    displays:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 `Ti.UI.Window` 之后，附加一个 `Ti.UI.WebView` 对象。RGraph 图表信息包含在 `Ti.UI.WebView`
    显示的 `index.html` 文件中：
- en: '[PRE72]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'On the `Ti.UI.Window` open event, the team''s schedule information is passed
    into the `index.html` file containing the RGraph methods:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Ti.UI.Window` 打开事件中，将团队的预定信息传递到包含 RGraph 方法的 `index.html` 文件中：
- en: '[PRE73]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: The `createSchedules` and `createComments` methods are called on the team object.
    These format the schedule and comment information so that RGraph can display the
    details.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在团队对象上调用 `createSchedules` 和 `createComments` 方法。这些方法格式化预定和评论信息，以便 RGraph 可以显示详细信息。
- en: '[PRE74]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: A load event listener is added to `Ti.UI.WebView` after the `Ti.UI.Window` window
    is opened. This allows for the contents of `Ti.UI.WebView` to be fully loaded
    before the information is injected.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Ti.UI.Window` 窗口打开后，向 `Ti.UI.WebView` 添加一个加载事件监听器。这允许在注入信息之前，`Ti.UI.WebView`
    的内容完全加载。
- en: '[PRE75]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: The `evalJS` method is used to pass the formatted team information to the `addGraph`
    method currently being displayed in `Ti.UI.WebView`. You can view the contents
    of the `addGraph` method by opening the `index.html` file supported with this
    recipe.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `evalJS` 方法将格式化的团队信息传递到当前在 `Ti.UI.WebView` 中显示的 `addGraph` 方法。您可以通过打开此食谱支持的
    `index.html` 文件来查看 `addGraph` 方法的具体内容。
- en: '[PRE76]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: See also
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: This recipe uses the powerful RGraph HTML5/JavaScript canvas library to create
    the Gantt chart displayed. I encourage you to visit their website, [https://rgraph.net](https://rgraph.net),
    to learn more about RGraph and the different charting options provided.
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此食谱使用强大的 RGraph HTML5/JavaScript canvas 库来创建显示的甘特图。我鼓励您访问他们的网站 [https://rgraph.net](https://rgraph.net)，了解更多关于
    RGraph 和提供的不同图表选项。
- en: Displaying information with Google gauges
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Google 仪表显示信息
- en: 'Gauges are a powerful way to display velocity, status, or simple measurements.
    This recipe demonstrates how to use the Google gauge chart control to display
    progress towards meeting monthly sales targets. The following screenshots show
    this completed recipe running on both iOS and Android:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表是显示速度、状态或简单测量的强大方式。此食谱演示了如何使用 Google 仪表图表控件来显示达成月销售目标的进度。以下截图显示了此完成的食谱在 iOS
    和 Android 上的运行情况：
- en: '![Displaying information with Google gauges](img/5343OT_05_15.jpg)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Google 仪表显示信息](img/5343OT_05_15.jpg)'
- en: Tip
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: When running this recipe on Android, please note Android 4.0 or higher is required.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 上运行此食谱时，请注意需要 Android 4.0 或更高版本。
- en: Getting ready
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'This recipe uses Google Charts to display the gauge. When adding this recipe
    to your app, you will need to design for a network dependency as Google Charts
    requires a connection to render chart information. These components can be downloaded
    from the source code provided by the book, or individually through the links provided
    in the *See also* section at the end of this recipe. The first step in setting
    up this recipe is to copy the `web` folder highlighted in the following screenshot
    into the `Resources` folder of your project folder. After copying the `web` folder,
    you will need to copy the `persist.js` file into the `Resources` folder of your
    Titanium project as shown in the following screenshot:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱使用 Google Charts 来显示仪表盘。当将此菜谱添加到您的应用程序时，您需要设计网络依赖项，因为 Google Charts 需要连接来渲染图表信息。这些组件可以从本书提供的源代码中下载，或者通过此菜谱末尾的
    *另请参阅* 部分的链接单独下载。设置此菜谱的第一步是将以下截图中的 `web` 文件夹复制到您的项目文件夹的 `Resources` 文件夹中。在复制 `web`
    文件夹后，您需要将 `persist.js` 文件复制到您的 Titanium 项目的 `Resources` 文件夹中，如下截图所示：
- en: '![Getting ready](img/5343OT_05_16.jpg)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![准备中](img/5343OT_05_16.jpg)'
- en: How to do it…
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'After adding the `web` folder and `persist.js` CommonJS module as discussed
    in he previous section, you will need to create your application namespaces and
    use `require` to import the module into your code, as the following snippet demonstrates:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中讨论的将 `web` 文件夹和 `persist.js` CommonJS 模块添加到应用程序后，您需要创建您的应用程序命名空间，并使用 `require`
    将模块导入到您的代码中，如下代码片段所示：
- en: '[PRE77]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Loading saved sales information
  id: totrans-280
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加载已保存的销售信息
- en: After our namespace has been created, the first step is to load our saved sales
    information. If no prior sales data has been saved, a default of 10 is provided.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建我们的命名空间后，第一步是加载我们保存的销售信息。如果没有保存之前的数据，将提供一个默认值 10。
- en: '[PRE78]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Creating a UI for the recipe
  id: totrans-283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为菜谱创建 UI
- en: Now we create the UI to display our sales data.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们创建 UI 来显示我们的销售数据。
- en: 'First, a `Ti.UI.Window` window is created to host all of our UI elements:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个 `Ti.UI.Window` 窗口来承载所有我们的 UI 元素：
- en: '[PRE79]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Next, a `Ti.UI.WebView` is created to display the Google gauge. This `Ti.UI.WebView`
    is used to display a local html page that hosts the Google Chart control. The
    following snippet demonstrates how to load a local html page (`index.html`) from
    the project''s `web` folder:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个 `Ti.UI.WebView` 来显示 Google 仪表盘。此 `Ti.UI.WebView` 用于显示一个本地 html 页面，该页面承载
    Google Chart 控件。以下代码片段演示了如何从项目的 `web` 文件夹中加载本地 html 页面（`index.html`）：
- en: '[PRE80]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Finally, a `Ti.UI.Slider` is added to the recipe's `Ti.UI.Window`. The user
    can use this slider to adjust their monthly sales.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将一个 `Ti.UI.Slider` 添加到菜谱的 `Ti.UI.Window` 中。用户可以使用这个滑块来调整他们的月度销售。
- en: '[PRE81]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Adjusting sales
  id: totrans-291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调整销售
- en: 'As the user adjusts the `Ti.UI.Slider`, the following methods are used to update
    the Google gauge with the new sales numbers. The `updateSales` method updates
    the contents of `Ti.UI.WebView` with the new sales number:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户调整 `Ti.UI.Slider` 时，以下方法被用来使用新的销售数字更新 Google 仪表盘。`updateSales` 方法使用新的销售数字更新
    `Ti.UI.WebView` 的内容：
- en: '[PRE82]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'The passed-in `sales` value is placed into the session''s `my.session.sales`
    property for later use:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 传入的 `sales` 值被放置到会话的 `my.session.sales` 属性中，以供后续使用：
- en: '[PRE83]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: The `evalJS` method is called on `Ti.UI.WebView` to provide the new sales information
    to the `updateGauge` method contained within the example `index.html` file. This
    method is used to update the Google gauge. For more details, please see the contents
    of this recipe's `index.html` file.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Ti.UI.WebView` 上调用 `evalJS` 方法，以将新的销售信息提供给示例 `index.html` 文件中包含的 `updateGauge`
    方法。此方法用于更新 Google 仪表盘。有关更多详细信息，请参阅此菜谱的 `index.html` 文件内容。
- en: '[PRE84]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'After updating `Ti.UI.WebView`, the new sales value is saved into `Ti.App.Properties`
    for later use:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在更新 `Ti.UI.WebView` 后，新的销售值被保存到 `Ti.App.Properties` 中以供后续使用：
- en: '[PRE85]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'The change event on the recipe''s `Ti.UI.Slider` method adjusts the Google
    gauge as the user moves the slider:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 菜谱的 `Ti.UI.Slider` 方法上的更改事件在用户移动滑块时调整 Google 仪表盘：
- en: '[PRE86]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Each time the change event is fired, the new `Ti.UI.Slider` value is provided
    to the `updateSales` method, to be reflected by the Google gauge hosted in the
    recipe's `Ti.Ui.WebView`.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 每当触发更改事件时，新的 `Ti.UI.Slider` 值会被提供给 `updateSales` 方法，以便在菜谱的 `Ti.Ui.WebView` 中反映出来。
- en: '[PRE87]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Reloading saved sales
  id: totrans-304
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重新加载已保存的销售信息
- en: 'Each time `Ti.Ui.Window` is loaded, the following code is use to display the
    saved sales values and initialize the Google gauge. The next snippet demonstrates
    how the recipe reloads the sales information on opening `Ti.UI.Window`:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 每次加载 `Ti.Ui.Window` 时，以下代码用于显示保存的销售值并初始化 Google 仪表。下一个片段演示了如何在打开 `Ti.UI.Window`
    时重新加载销售信息：
- en: '[PRE88]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'First, a network connection is performed. Since the recipe uses Google Charts,
    a network connection is required to display this information:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，执行网络连接。由于这个食谱使用 Google Charts，显示这些信息需要网络连接：
- en: '[PRE89]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Finally, a load event listener is added to `Ti.UI.WebView`. Once loaded, the
    `updateSales` function is called to initialize any previously saved sales information:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，向 `Ti.UI.WebView` 添加一个加载事件监听器。一旦加载完成，`updateSales` 函数被调用以初始化任何之前保存的销售信息：
- en: '[PRE90]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: See also
  id: totrans-311
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: This recipe uses Google Charts to provide the gauges displayed. To learn more
    about Google's charting tools, please visit their developer site, [https://google-developers.appspot.com/chart/](https://google-developers.appspot.com/chart/).
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个食谱使用 Google Charts 来提供显示的仪表。要了解更多关于 Google 的图表工具，请访问他们的开发者网站，[https://google-developers.appspot.com/chart/](https://google-developers.appspot.com/chart/).
