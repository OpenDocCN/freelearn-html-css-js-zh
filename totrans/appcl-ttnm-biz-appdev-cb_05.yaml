- en: Chapter 5. Charting and Documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Opening PDF documents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using an iPad for document signatures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating PDF documents from images or screenshots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating PDF documents using jsPDF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a scheduling chart using RGraph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying information with Google gauges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Through the convenience of a mobile device, your customers and employees have
    the ability to access data, documents, and related information, wherever and whenever
    needed. This chapter provides recipes to assist with the development of at-a-glance
    and portable information.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on your industry, an innovative mobile-document strategy can provide
    a key competitive advantage. Forms, contracts, recipes, and invoices are all examples
    of areas a mobile document strategy can reduce costs while better engaging your
    users. In this chapter, we will cover several strategies to deal with documents
    in a cross-platform fashion.
  prefs: []
  type: TYPE_NORMAL
- en: The creation of dashboards using charts and graphs to paint a compelling picture
    is a common management-team request, and is a powerful way to harness mobile technology
    to provide business value. An example of this value proposition is mobility, enabling
    your marketing, sales, or operations teams with current market data in an at-a-glance
    format, allowing the management team to make faster decisions. In this chapter,
    we demonstrate how to use Titanium to create powerful, interactive charting experiences.
  prefs: []
  type: TYPE_NORMAL
- en: Opening PDF documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ability to open, view, and exchange PDF documents is a common requirement
    in Enterprise app development. This recipe discusses how to use the openPDF `CommonJS`
    module to view PDF documents in a cross-platform manner.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshots illustrate this recipe running on both an iPhone
    and an Android device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Opening PDF documents](img/5343OT_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The recipe uses both a `CommonJS` and an Android native module. These can be
    downloaded from the source code provided by the book, or individually through
    the links provided in the *See also* section at the end of this recipe. Installing
    these in your project is straightforward. Simply copy the `openPDF.js` file and
    the `bencoding.android.tools` folder into your Titanium project, as shown highlighted
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343OT_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After copying the module folder, you will need to click on your `tiapp.xml`
    file in Titanium Studio and add a reference to the `bencoding.android.tools` module,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343OT_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have added `openPDF.js` and the native android module to your project,
    you need to create your application namespaces and use `require` to import the
    module into your code, as the following snippet demonstrates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating a link to the PDF file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The next step in this recipe is to create a variable with the path to our PDF
    file. For example purposes, we are using a PDF file called `w4.pdf` located in
    our project''s `resources` directory. The following snippet demonstrates how to
    create this path variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Creating our example UI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This recipe provides a basic UI to help illustrate how to use the `openPDF`
    module. This straightforward screen contains a button that opens a dialog providing
    different options the user can select to open a PDF file. If this recipe is running
    on an iOS device, the user will have a second button demonstrating how to open
    the PDF file inside the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'We first create a `Ti.UI.Window` window to attach all UI elements onto:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we add a label instructing the user which button to press:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, the button that will launch our first example is added to the `Ti.UI.Window`
    window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Opening a PDF file on the click of a button
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first example of how to use the `openPDF` module is shown in the following
    `goButton` click-event snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: First, the `isSupported` method is called to determine if the device supports
    PDF files. This method will return a `true` if supported, or a `false` if no support
    is available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, the file path to our PDF is provided to the `open` method. This will
    then present the user with an `options` dialog on how they wish to view the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the `isSupported` method results a `false`, you can then call the `isSupportedDetail`
    method for more information on why. As the following snippet shows, you can use
    the `reason` property returned by the `isSupportedDetail` method to alert your
    user to the specific issue. You can also use the `code` property to create your
    own customized messages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Opening a PDF file within your iOS app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The iOS platform has built-in support for working with PDF files. The `openPDF`
    module leverages this platform to provide the ability to create a PDF dialog viewer
    within your app, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Opening a PDF file within your iOS app](img/5343OT_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this section, a check is performed to ensure that the recipe is running
    on an iOS device. If so, the button `goButton2` is added to our `Ti.UI.Window`
    window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `goButton2` click event demonstrates how to open a PDF file in a dialog
    window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, the `isSupported` method is called to verify whether the device can read
    a PDF file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the device does not support the displaying of PDF files, the `isSupportDetail`
    method is called to return the reason why PDF files cannot be displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, the `openDialog` method is called to display the PDF file. The `openDialog`
    method requires two arguments. The first is a path to the PDF file that is to
    be displayed. The second is a configuration object containing a UI object that
    specifies the view relative to where the viewer should be displayed. In the following
    example, we provide the `infoLabel` label created earlier as our `view` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Additional elements can be added to the configuration object, such as the `animated`
    property to determine if an animation should be applied while opening and closing
    a PDF file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To close the PDF dialog programmatically, use the `closeDialog` method, as
    shown in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: File clean-up on closing a window
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `openPDF` module creates cache objects and temporary files to assist in
    the display process. It is important to call the `dispose` method when PDF operations
    are no longer needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are using the `openDialog` option on iOS, calling `dispose` will close
    the PDF dialog as well.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To learn more about the libraries and frameworks used in this recipe, please
    visit the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '**iOS DocumentViewer**: The `openPDF` module uses the `Ti.UI.iOS.DocumentViewer`
    object to work with PDF files on the iOS platform. For additional details, please
    review Titanium''s online documentation at [http://docs.appcelerator.com](http://docs.appcelerator.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Working with Android Intents**: The `openPDF` module uses the `Ti.Android.intent`
    object to launch a PDF viewer on the user''s device. For additional information
    about working with `Ti.Android.intent`, visit this Appcelerator blog entry at
    [http://developer.appcelerator.com/blog/2011/09/sharing-project-assets-with-android-intents.html](http://developer.appcelerator.com/blog/2011/09/sharing-project-assets-with-android-intents.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Android Intent Supported**: The `openPDF` library uses the `bencoding.android.tools`
    module''s project to check if there is an available intent to open a PDF document
    on user''s device. To learn more about this project, please visit [https://github.com/benbahrenburg/benCoding.Android.Tools](https://github.com/benbahrenburg/benCoding.Android.Tools).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using an iPad for document signatures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tablets and other touch devices provide a naturally immersive environment for
    working with documents. Through the use of several open source modules and our
    example PDF, this recipe illustrates how to create a document-signing app for
    your organization.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot demonstrates this recipe running on an iPad:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using an iPad for document signatures](img/5343OT_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This recipe is designed to run only on an iPad.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe uses both `CommonJS` and native modules. These modules can be downloaded
    from the source code provided by the book, or individually through the links provided
    in the *See also* section at the end of this recipe. The installation process
    is straightforward and requires only copying a few folders and files. Simply copy
    the `library.js` file and the `modules` folder into your Titanium Project, as
    highlighted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343OT_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After copying the `modules` folder, you will need to click on your `tiapp.xml`
    file in Titanium Studio and add a reference to `ti.paint` module, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343OT_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have added `library.js` and the native modules to your project, you
    need to create your application namespaces and use `require` to import the module
    into your `app.js` file, as the following snippet demonstrates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Creating a window for the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following snippet demonstrates how to create a `Ti.UI.Window` window to
    hold all the controls used in this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Adding a document view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first UI element added to `Ti.UI.Window` is used to display the recipe's
    document. On iOS, the `Ti.UI.WebView` object has built-in support for displaying
    PDF files. This sample demonstrates how to load a single PDF document from the
    `Resources` folder of your Titanium project.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Adding a signature view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The next UI element added to the `Ti.UI.Window` window is `PaintView`. This
    `UIView` is provided by the `Ti.Paint` module added during the setup process.
    This view allows the user to draw on the screen using touch. The following snippet
    demonstrates how to set up this view to allow the user to draw using a black hue
    with a stroke size of 10 points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Adding buttons
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The next step is to create buttons to save or clear a signature. The `bClear`
    button is added to the lower-left section of the screen. This button will provide
    the ability for the user to clear the signature area. This button can also be
    used to remove a saved signature.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'When the click event is fired on the `bClear` button, the signature is cleared
    and any saved signature files are removed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Call the `clear` method on `vwSign`. This will remove all the contents of `PaintView`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, the `deleteSignature` method is called on the library `CommonJS` module.
    This removes the stored signature image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, `vwSign` is touch-enabled, and the user is alerted that their signature
    has been removed. After this is completed, the user will be able to create a new
    document signature.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, the `bSave` button is added to the lower-right side of the iPad screen.
    This button allows the user to save a copy of their signature for later use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When the click event on the `bSave` button is fired, an image of the user's
    signature is saved to a library folder on the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Perform the following steps to complete the saving process:'
  prefs: []
  type: TYPE_NORMAL
- en: Convert the contents of the signature view into an image blob. This blob is
    then provided to the library `CommonJS` module's `saveSignature` method to be
    persisted to the device's documents folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once the signature image has been saved to disk, the signature surface is made
    read-only so no additional updates can be performed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Reloading a saved signature
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The last section of this recipe describes how, on opening a window, to check
    if the document has been signed and loads the stored signature for display.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: First the `isSigned` method is called on the `library` module. This method will
    check if the signature file is present within the device's `library` folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The `signatureUrl` method is used to provide the signature''s image path to
    the view for display:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Since the document has already been signed, the signature view is then disabled
    so no additional updates can be made without clearing the existing signature first.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the `Ti.Paint` open source module. The `Ti.Paint` module was
    used in this recipe to provide the user with the ability to sign a document. To
    learn more about this project, please visit [https://github.com/appcelerator/titanium_modules/tree/master/paint/mobile/ios](https://github.com/appcelerator/titanium_modules/tree/master/paint/mobile/ios).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating PDF documents from images or screenshots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mobile devices are wonderful consumers of PDF documents. But, what about creating
    them? Many scenarios, such as issuing recipes or invoices, require a PDF file
    to be created by the device. One easy approach for doing this is to convert an
    image into a PDF file. This approach works well with Titanium's robust image creation
    and maintenance functionality.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe demonstrates how to convert a `Ti.UI.View` into a PDF document.
    Also demonstrated is how to use Titanium's `Ti.Media.takeScreenshot` API to convert
    a fullscreen image of your app into a PDF file. This could be helpful for consumers
    looking to "print" their screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating PDF documents from images or screenshots](img/5343OT_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe leverages the `bencoding.pdf` native module. This module and supporting
    source code can be downloaded from the source code provided by the book, or individually
    through the links provided in the *See also* section at the end of this recipe.
    The installation process for this recipe is straightforward and only requires
    copying the two `bencoding.pdf` folders into their appropriate `modules` folder,
    as highlighted in the screenshot at the end of this section. If your Titanium
    project does not currently have a `modules` folder, you can simply copy the complete
    `modules` folder from this recipe into your project. In addition to the two native
    modules, you will need to copy the `sampleUI.js` file, shown the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343OT_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After copying the `modules` folder, you will need to click on your `tiapp.xml`
    file in Titanium Studio, and add a reference to the `bencoding.pdf` modules, as
    shown in the following screenshot. Please note only one module entry will appear
    for `bencoding.pdf`, but both iOS and Android will be added to your `tiapp.xml`
    file, once selected.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343OT_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have added the `sampleUI.js` file and native modules to your project,
    you need to create your application namespaces in the `app.js` file and use `require`
    to import the module into your code, as the following snippet demonstrates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Creating a UI for the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, we create a `Ti.UI.Window` window to host the recipe''s UI elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Once `Ti.UI.Window` has been created, the contents of the sample invoice is
    provided by our `sampleUI` module. The `sampleUI` module uses several `Ti.UI.View`
    and `Ti.UI.Label` controls to generate a sample invoice layout.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Creating a PDF from a view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, the `makeImageButton` button is added to the recipe's `Ti.UI.Window`.
    This button will later be used to create a PDF sample invoice.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: When the click event on the `makeImageButton` button is fired, a PDF is generated
    with the contents from the `Ti.UI.View` containing our sample invoice.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The first step in generating a PDF is to create an image from the `Ti.UI.View`
    containing the invoice layout. The following snippet demonstrates how to do this
    on both iOS and Android:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The image blob for the invoice `Ti.UI.View` is then provided to the `convertImageToPDF`
    method in the `PDF Converters` module. This method converts the provided image
    into a PDF `Ti.File` blob. In addition to the image on iOS, you can provide a
    resolution to be used in the conversion process. The following sample uses a resolution
    of 100:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The invoice PDF `Ti.File` blob can then be saved using the standard `Ti.FileSystem`
    method, as the following snippet shows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating a PDF document from a screenshot
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A similar technique can be used to create a PDF document containing a screenshot
    of the app. The first step in doing this is to add a button named `ssButton` to
    the recipe''s `Ti.UI.Window`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'When we click on the `ssButton` button, a screenshot will be taken and converted
    into a PDF file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The first step in this process is to use the `Ti.Media.takeScreenshot` API
    to take a screenshot of the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The screenshot API returns an image blob of the device''s screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The screenshot image blob is then provided to the `convertImageToPDF` method
    in the `PDF Converters` module. This method converts the provided image into a
    PDF `Ti.File` blob. In addition to the image on iOS, you can provide a resolution
    to be used in the conversion process. This sample uses a resolution of 96 points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The screenshot PDF `Ti.File` blob can then be saved using the standard `Ti.FileSystem`
    methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To learn more about the modules used in this recipe, please visit [https://github.com/benbahrenburg/benCoding.PDF](https://github.com/benbahrenburg/benCoding.PDF).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating PDF documents using jsPDF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating formatted PDF documents on a mobile device can be difficult. Adding
    cross-platform to the equation only compounds this challenge. The jsPDF JavaScript
    library and the associated jsPDF Titanium module provide a robust and pure JavaScript
    cross-platform approach.
  prefs: []
  type: TYPE_NORMAL
- en: 'This recipe demonstrates how to create formatted PDF documents, similar to
    the following screenshot, using a powerful JavaScript API:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating PDF documents using jsPDF](img/5343OT_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe uses the `jsPDF` module for Titanium to create PDF files. This
    module and supporting source code can be downloaded from the source code provided
    by the book, or individually through the links provided in the *See also* section
    at the end of this recipe. The installation process for this recipe is straightforward
    and only requires copying the `jsPDFMod` folder into the `Resources` folder of
    your Titanium project, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343OT_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have added the `jsPDFMod` folder to your project, you will need to
    create your application namespaces in the `app.js` file, and use `require` to
    import the module into your code, as the following snippet demonstrates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Creating a UI for the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This recipe contains a basic UI that allows the user to generate a recipe PDF
    and open an e-mail dialog.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `Ti.UI.Window` window to hold all UI controls:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, the `goButton` button is added to the recipe''s `Ti.UI.Window`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `goButton` button''s click event launches the PDF creation process by calling
    the `generatePDFExample` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating a PDF document using jsPDF
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following snippet describes how to use `generatePDFExample` to create a
    PDF document using the `jsPDF` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The next line demonstrates how to create a new instance of the `jsPDF` module.
    This creates a new virtual PDF document.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The following snippet demonstrates how to add document properties to the PDF
    document object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'The following snippet demonstrates how to embed an image into a PDF document.
    It is important that the images contain a full native path as shown here, otherwise
    the document will generate errors on saving:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'We then create a header using `Helvetica` `bold` and a font size of `32`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code snippet creates the itemized recipe section with `normal`
    font and a size of `18`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'A `Ti.File` object is created to the location where we wish to save `recipe.pdf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Ti.File` object is then passed into the `jsPDF` module''s `save` method.
    The `save` method will generate a PDF file with the attributes created earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Ti.File` reference for the saved PDF file is then provided to `Ti.UI.EmailDialog`
    as an attachment and opened, so the user can compose an e-mail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To learn more about the jsPDF project created by James Hall, please visit the
    Github repository at [https://github.com/MrRio/jsPDF](https://github.com/MrRio/jsPDF).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This recipe uses the a Titanium module for jsPDF. Please refer to the following
    links for additional documentation, samples, and guidance with the module:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Author: Malcolm Hollingsworth'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Repository: [https://github.com/Core-13](https://github.com/Core-13)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Sponsoring organization: Core13; website: [core13.co.uk](http://core13.co.uk)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Creating a scheduling chart using RGraph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A picture can be worth a thousand words, and in today''s fast-paced business
    environments, using graphics to display information can be a competitive advantage.
    This recipe demonstrates how you can use the popular RGraph JavaScript library
    to create a chart reflecting project scheduling. The following screenshots illustrate
    what this recipe will look like when completed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a scheduling chart using RGraph](img/5343OT_05_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses RGraph and several non-native components to display the chart.
    These components can be downloaded from the source code provided by the book,
    or individually through the links provided in the *See also* section at the end
    of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step in setting up this recipe is to copy the `web` folder (highlighted
    in the following screenshot) into the `Resources` folder of your project folder.
    After copying the `web` folder, you will need to then copy the `teamBuilder.js`,
    `chartLauncher.js`, `sampleUI.js`, and `scheduleBuilder.js` files into the `Resources`
    folder of your Titanium project, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343OT_05_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After adding the `web` folder and CommonJS modules, as discussed earlier, you
    will need to create your application namespaces in the `app.js` file and use `require`
    to import the module into your code, as the following snippet demonstrates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Creating a UI for the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The next step in this recipe is to create the main `Ti.UI.Window` window. This
    `Ti.UI.Window` will be used to launch the recipe's functionality.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'After the `Ti.UI.Window` window is created, the `fetchDemoView` method is called
    on our `sampleUI` module. This displays the recipe''s instructions to the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Creating schedules and assigning tasks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This section of the recipe demonstrates how to create schedules, and assign
    tasks to individuals on your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to create a schedule for a team member. This is done by creating
    a new schedule object and providing the individual''s name. The following line
    demonstrates how to create a schedule for Richard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, the `createTask` method is used to create a task for the individual.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `createTask` method has the following parameters:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Task name**: A string containing the name of the task'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Start on day**: This is the position (day) the task is to start'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Duration**: The number of days the task will take'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Percentage complete**: The percentage completion of the task'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Comment**: The comment for the task'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, the team member''s schedule is added to the team:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next snippet demonstrates how to perform the steps discussed earlier, for
    another team member:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can add additional individuals by following the pattern detailed here.
  prefs: []
  type: TYPE_NORMAL
- en: Launching the example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Perform the following steps to launch the example we created in the previous
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to add the `goButton` button to the `Ti.UI.Window` window
    to allow the user to launch the chart sample:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The click event of the `goButton` button launches the chart example by using
    the `openDialog` method on the `chartLauncher` module. The `openDialog` method
    uses the `my.team` object created previously to generate a Gantt chart containing
    a team schedule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calling the `openDialog` method is demonstrated in the following snippet:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `chartLauncher` module (`chartLauncher.js`) is used to display the team''s
    scheduled tasks. The following line demonstrates how this module uses RGraph to
    create a Gantt chart with the results. First, the `openDialog` method is added
    to the `exports` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step in this part of the recipe is to create a window to display to
    the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'After `Ti.UI.Window` is created, a `Ti.UI.WebView` object is attached. The
    RGraph chart information is contained in the `index.html` file that `Ti.UI.WebView`
    displays:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'On the `Ti.UI.Window` open event, the team''s schedule information is passed
    into the `index.html` file containing the RGraph methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: The `createSchedules` and `createComments` methods are called on the team object.
    These format the schedule and comment information so that RGraph can display the
    details.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: A load event listener is added to `Ti.UI.WebView` after the `Ti.UI.Window` window
    is opened. This allows for the contents of `Ti.UI.WebView` to be fully loaded
    before the information is injected.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: The `evalJS` method is used to pass the formatted team information to the `addGraph`
    method currently being displayed in `Ti.UI.WebView`. You can view the contents
    of the `addGraph` method by opening the `index.html` file supported with this
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the powerful RGraph HTML5/JavaScript canvas library to create
    the Gantt chart displayed. I encourage you to visit their website, [https://rgraph.net](https://rgraph.net),
    to learn more about RGraph and the different charting options provided.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying information with Google gauges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Gauges are a powerful way to display velocity, status, or simple measurements.
    This recipe demonstrates how to use the Google gauge chart control to display
    progress towards meeting monthly sales targets. The following screenshots show
    this completed recipe running on both iOS and Android:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying information with Google gauges](img/5343OT_05_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When running this recipe on Android, please note Android 4.0 or higher is required.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe uses Google Charts to display the gauge. When adding this recipe
    to your app, you will need to design for a network dependency as Google Charts
    requires a connection to render chart information. These components can be downloaded
    from the source code provided by the book, or individually through the links provided
    in the *See also* section at the end of this recipe. The first step in setting
    up this recipe is to copy the `web` folder highlighted in the following screenshot
    into the `Resources` folder of your project folder. After copying the `web` folder,
    you will need to copy the `persist.js` file into the `Resources` folder of your
    Titanium project as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343OT_05_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After adding the `web` folder and `persist.js` CommonJS module as discussed
    in he previous section, you will need to create your application namespaces and
    use `require` to import the module into your code, as the following snippet demonstrates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Loading saved sales information
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After our namespace has been created, the first step is to load our saved sales
    information. If no prior sales data has been saved, a default of 10 is provided.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Creating a UI for the recipe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now we create the UI to display our sales data.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, a `Ti.UI.Window` window is created to host all of our UI elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, a `Ti.UI.WebView` is created to display the Google gauge. This `Ti.UI.WebView`
    is used to display a local html page that hosts the Google Chart control. The
    following snippet demonstrates how to load a local html page (`index.html`) from
    the project''s `web` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, a `Ti.UI.Slider` is added to the recipe's `Ti.UI.Window`. The user
    can use this slider to adjust their monthly sales.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Adjusting sales
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As the user adjusts the `Ti.UI.Slider`, the following methods are used to update
    the Google gauge with the new sales numbers. The `updateSales` method updates
    the contents of `Ti.UI.WebView` with the new sales number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'The passed-in `sales` value is placed into the session''s `my.session.sales`
    property for later use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: The `evalJS` method is called on `Ti.UI.WebView` to provide the new sales information
    to the `updateGauge` method contained within the example `index.html` file. This
    method is used to update the Google gauge. For more details, please see the contents
    of this recipe's `index.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'After updating `Ti.UI.WebView`, the new sales value is saved into `Ti.App.Properties`
    for later use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'The change event on the recipe''s `Ti.UI.Slider` method adjusts the Google
    gauge as the user moves the slider:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Each time the change event is fired, the new `Ti.UI.Slider` value is provided
    to the `updateSales` method, to be reflected by the Google gauge hosted in the
    recipe's `Ti.Ui.WebView`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Reloading saved sales
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Each time `Ti.Ui.Window` is loaded, the following code is use to display the
    saved sales values and initialize the Google gauge. The next snippet demonstrates
    how the recipe reloads the sales information on opening `Ti.UI.Window`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'First, a network connection is performed. Since the recipe uses Google Charts,
    a network connection is required to display this information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, a load event listener is added to `Ti.UI.WebView`. Once loaded, the
    `updateSales` function is called to initialize any previously saved sales information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses Google Charts to provide the gauges displayed. To learn more
    about Google's charting tools, please visit their developer site, [https://google-developers.appspot.com/chart/](https://google-developers.appspot.com/chart/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
