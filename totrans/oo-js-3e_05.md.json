["```js\n    const iter = ['a', 'b']; \n    for (const i of iter) { \n      console.log(i); \n    } \n    \"a\" \n    \"b\" \n\n```", "```js\n    for (let c of \"String\"){ \n      console.log(c); \n    } \n    //\"s\" \"t\" \"r\" \"i\" \"n\" \"g\" \n\n```", "```js\n    //Take an array and return an iterator \n    function iter(array){ \n      var nextId= 0; \n      return { \n        next: function() { \n          if(nextId < array.length) { \n            return {value: array[nextId++], done: false}; \n          } else { \n            return {done: true}; \n          } \n        } \n      } \n    } \n    var it = iter(['Hello', 'Iterators']); \n    console.log(it.next().value); // 'Hello' \n    console.log(it.next().value); // 'Iterators' \n    console.log(it.next().done);  // true \n\n```", "```js\n    //An iterable object \n    //1\\. Has a method with key has 'Symbol.iterator' \n    //2\\. This method returns an iterator via method 'next' \n    let iter = { \n      0: 'Hello', \n      1: 'World of ', \n      2: 'Iterators', \n      length: 3, \n      [Symbol.iterator]() { \n        let index = 0; \n        return { \n          next: () => { \n            let value = this[index]; \n            let done = index >= this.length; \n            index++; \n            return { value, done }; \n          } \n        }; \n      } \n    }; \n    for (let i of iter) { \n      console.log(i);  \n    } \n    \"Hello\" \n    \"World of \" \n    \"Iterators\" \n\n```", "```js\n    function* generatorFunc() { \n      console.log('1'); //-----------> A \n      yield;            //-----------> B \n      console.log('2'); //-----------> C \n    } \n    const generatorObj = generatorFunc(); \n    console.log(generatorObj.next());   \n    //\"1\" \n    //Object { \n    // \"done\": false, \n    // \"value\": undefined \n    //} \n\n```", "```js\n    function *f(){ }  \n    function* f(){ } \n\n```", "```js\n    const generatorObj = generatorFunc(); \n    generatorObj.next();  //\"1\" \n\n```", "```js\n    console.log(generatorObj.next());   \n    //\"2\" \n    //Object { \n    // \"done\": true, \n    // \"value\": undefined \n    //} \n\n```", "```js\n    function* logger() { \n      console.log('start') \n      console.log(yield) \n      console.log(yield) \n      console.log(yield) \n      return('end') \n    } \n\n    var genObj = logger(); \n\n    // the first call of next executes from the \n      start of the function until the first yield statement \n    console.log(genObj.next())         \n    // \"start\", Object {\"done\": false,\"value\": undefined} \n    console.log(genObj.next('Save'))   \n    // \"Save\", Object {\"done\": false,\"value\": undefined} \n    console.log(genObj.next('Our'))    \n    // \"Our\", Object {\"done\": false,\"value\": undefined} \n    console.log(genObj.next('Souls'))  \n    // \"Souls\",Object {\"done\": true,\"value\": \"end\"} \n\n```", "```js\n    var genObj = logger(); \n\n```", "```js\n    \"Save\", Object {\"done\": false,\"value\": undefined} \n\n```", "```js\n    \"Souls\",Object {\"done\": true,\"value\": \"end\"} \n\n```", "```js\n    function* logger() { \n      yield 'a' \n      yield 'b' \n    } \n    var genObj = logger(); \n    //the generator object is built using generator function \n    console.log(typeof genObj[Symbol.iterator] === 'function')    //true \n    // it is an iterable \n    console.log(typeof genObj.next === 'function') //true \n    // and an iterator (has a next() method) \n    console.log(genObj[Symbol.iterator]() === genObj) //true \n\n```", "```js\n    function* logger() { \n      yield 'a' \n      yield 'b' \n    } \n    for (const i of logger()) { \n      console.log(i) \n    } \n    //\"a\" \"b\" \n\n```", "```js\n    function* logger() { \n      yield 'a' \n      yield 'b' \n    } \n    const arr = [...logger()] \n    console.log(arr) //[\"a\",\"b\"] \n\n```", "```js\n    function* logger() { \n      yield 'a' \n      yield 'b' \n    } \n    const [x,y] = logger() \n    console.log(x,y) //\"a\" \"b\" \n\n```", "```js\n    const m = new Map(); //Creates an empty Map \n    m.set('first', 1);   //Set a value associated with a key \n    console.log(m.get('first'));  //Get a value using the key \n\n```", "```js\n    console.log(m.has('first')); //Checks for existence of a key \n    //true \n    m.delete('first'); \n    console.log(m.has('first')); //false \n\n    m.set('foo', 1); \n    m.set('bar', 0); \n\n    console.log(m.size); //2 \n    m.clear(); //clears the entire map \n    console.log(m.size); //0 \n\n```", "```js\n    const m2 = new Map([ \n        [ 1, 'one' ], \n        [ 2, 'two' ], \n        [ 3, 'three' ], \n    ]); \n\n```", "```js\n    const m3 = new Map().set(1, 'one').set(2, 'two').set(3, 'three'); \n\n```", "```js\n    const obj = {} \n    const m2 = new Map([ \n      [ 1, 'one' ], \n      [ \"two\", 'two' ], \n      [ obj, 'three' ], \n    ]); \n    console.log(m2.has(obj)); //true \n\n```", "```js\n    const m = new Map([ \n      [ 1, 'one' ], \n      [ 2, 'two' ], \n      [ 3, 'three' ], \n    ]); \n    for (const k of m.keys()){ \n      console.log(k);  \n    } \n    //1 2 3 \n\n```", "```js\n    for (const v of m.values()){ \n      console.log(v);  \n    } \n    //\"one\" \n    //\"two\" \n    //\"three\" \n\n```", "```js\n    for (const entry of m.entries()) { \n      console.log(entry[0], entry[1]); \n    } \n    //1 \"one\" \n    //2 \"two\" \n    //3 \"three\" \n\n```", "```js\n    for (const [key, value] of m.entries()) { \n      console.log(key, value); \n    } \n    //1 \"one\" \n    //2 \"two\" \n    //3 \"three\" \n\n```", "```js\n    for (const [key, value] of m) { \n      console.log(key, value); \n    } \n    //1 \"one\" \n    //2 \"two\" \n    //3 \"three\" \n\n```", "```js\n    const m = new Map([ \n      [ 1, 'one' ], \n      [ 2, 'two' ], \n      [ 3, 'three' ], \n    ]); \n    const keys = [...m.keys()] \n    console.log(keys) \n    //Array [ \n    //1, \n    //2, \n    //3 \n    //] \n\n```", "```js\n    const m = new Map([ \n      [ 1, 'one' ], \n      [ 2, 'two' ], \n      [ 3, 'three' ], \n    ]); \n    const arr = [...m] \n    console.log(arr) \n    //Array [ \n    //[1,\"one\"], \n    //[2,\"two\"], \n    //[3,\"three\"] \n    //] \n\n```", "```js\n    const s = new Set(); \n    s.add('first'); \n    s.has('first'); // true \n    s.delete('first'); //true \n    s.has('first'); //false \n\n```", "```js\n    const colors = new Set(['red', white, 'blue']); \n\n```"]