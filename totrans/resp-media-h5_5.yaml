- en: Chapter 5. Using Frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this book, we've covered a number of tips and tricks we can use to
    add media to our responsive sites, which includes both images and video. These
    are good, but how do they work in real life?
  prefs: []
  type: TYPE_NORMAL
- en: Let's answer that now. We can't fail to note the rapid rise of three popular
    frameworks, namely Less CSS, WordPress, and of course Twitter's Bootstrap. These
    are used in thousands of sites worldwide—certainly not something to be sniffed
    at! In this chapter, we're going to work through some simple examples that use
    these tools to show how we can apply some of the techniques that we've covered
    so far in the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Over the next few pages, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding responsive media to a CMS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing responsive media in frameworks such as Twitter Bootstrap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Less CSS preprocessor to create CSS media queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ready? Let's make a start!
  prefs: []
  type: TYPE_NORMAL
- en: Introducing our three examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this book, we've covered a number of simple, practical techniques
    to make media responsive within our sites—these are good, but nothing beats seeing
    these principles used in a real-world context, right?
  prefs: []
  type: TYPE_NORMAL
- en: 'Absolutely! To prove this, we''re going to look at three examples throughout
    this chapter, using technologies that you are likely to be familiar with: WordPress,
    Bootstrap, and Less CSS. Each demo will assume a certain level of prior knowledge,
    so it may be worth reading up a little first. In all three cases, we should see
    that with little effort, we can easily add responsive media to each one of these
    technologies. Let''s kick off with a look at working with WordPress.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding responsive media to a CMS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will begin the first of our three examples with a look at using the ever
    popular WordPress system. Created back in 2003, WordPress has been used to host
    sites by small independent traders all the way up to Fortune 500 companies—this
    includes some of the biggest names in business such as eBay, UPS, and Ford. WordPress
    comes in two flavors; the one we're interested in is the self-install version
    available at [http://www.wordpress.org](http://www.wordpress.org).
  prefs: []
  type: TYPE_NORMAL
- en: This example assumes you have a local installation of WordPress installed and
    working; if not, then head over to [http://codex.wordpress.org/Installing_WordPress](http://codex.wordpress.org/Installing_WordPress)
    and follow the tutorial to get started. We will also need a DOM inspector such
    as Firebug installed if you don't already have it. It can be downloaded from [http://www.getfirebug.com](http://www.getfirebug.com)
    if you need to install it.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you only have access to WordPress.com (the other flavor of WordPress), then
    some of the tips in this section may not work, due to limitations in that version
    of WordPress.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, assuming we have WordPress set up and running, let's make a start on making
    uploaded media responsive.
  prefs: []
  type: TYPE_NORMAL
- en: Adding responsive media manually
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we cast our minds back to [Chapter 1](ch01.html "Chapter 1. Working with
    Responsive Images"), *Working with Responsive Images*, we discovered that in most
    cases, it was sufficient to simply set `max-width: 100%` against any image that
    we wanted to be responsive.'
  prefs: []
  type: TYPE_NORMAL
- en: It's at this point that you're probably thinking we have to do something complex
    when working in WordPress, right? Wrong! As long as you use the Twenty Fourteen
    core theme, the work has already been done for you.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For this exercise, and the following sections, I will assume you have installed
    and/or activated WordPress' Twenty Fourteen theme.
  prefs: []
  type: TYPE_NORMAL
- en: 'Don''t believe me? It''s easy to verify: try uploading an image to a post or
    page in WordPress. Resize the browser—you should see the image shrink or grow
    in size as the browser window changes size. If we take a peek at WordPress under
    the covers, using a DOM Inspector such as Firebug, we can easily see how the code
    is no different to that back in [Chapter 1](ch01.html "Chapter 1. Working with
    Responsive Images"), *Working with Responsive Images*.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding responsive media manually](img/6968OT_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we take a look at the code elsewhere using Firebug, we can also see the
    `height: auto` set against a number of the `img` tags; this is frequently done
    for responsive images to ensure they maintain the correct proportions.'
  prefs: []
  type: TYPE_NORMAL
- en: The responsive style seems to work well in the Twenty Fourteen theme; if you
    are using an older theme, we can easily apply the same style rule to images stored
    in WordPress when using that theme.
  prefs: []
  type: TYPE_NORMAL
- en: Fixing a responsive issue
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, so good. Now, we have the Twenty Fourteen theme in place, we've uploaded
    images of various sizes, and we try resizing the browser window ... only to find
    that the images don't seem to grow in size above a certain point. At least not
    well—what gives?
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, it''s a classic trap: we''ve talked about using percentage values to
    dynamically resize images, only to find that we''ve shot ourselves in the foot
    (proverbially speaking, of course!). The reason? Let''s dive in and find out using
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to your WordPress installation and activate Firebug using *F12*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch to the **HTML** tab and select your preferred image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Firebug, look for the `<header class="entry-header">` line, then look for
    the following line in the rendered styles on the right-hand side of the window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The keen-eyed amongst you should hopefully spot the issue straightaway—we''re
    using percentages to make the sizes dynamic for each image, yet we''re constraining
    its parent container! To fix this, change the highlighted line as indicated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To balance the content, we need to make the same change to the comments area.
    So go ahead and change `max-width` to `100%` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If we try resizing the browser window now, we should see the image size adjust
    automatically.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this stage, the change is not permanent. To fix this, we would log in to
    WordPress' admin area, go to **Appearance** | **Editor** and add the adjusted
    styles at the foot of the **Stylesheet (style.css)** file.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on. Did anyone notice two rather critical issues with the approach
    used here? Hopefully, you must have spotted that if a large image is used and
    then resized to a smaller size, we're still working with large files. The alteration
    we're making has a big impact on the theme, even though it is only a small change.
    Even though it proves that we can make images truly responsive, it is the kind
    of change that we would not necessarily want to make without careful consideration
    and plenty of testing.
  prefs: []
  type: TYPE_NORMAL
- en: We can improve on this. However, making changes directly to the CSS style sheet
    is not ideal; they could be lost when upgrading to a newer version of the theme.
    We can improve on this by either using a custom CSS plugin to manage these changes
    or (better) using a plugin that tells WordPress to swap an existing image for
    a small one automatically if we resize the window to a smaller size.
  prefs: []
  type: TYPE_NORMAL
- en: Using plugins to add responsive images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A drawback though, of using a theme such as Twenty Fourteen, is the resizing
    of images. While we can grow or shrink an image when resizing the browser window,
    we are still technically altering the size of what could potentially be an unnecessarily
    large image!
  prefs: []
  type: TYPE_NORMAL
- en: This is considered bad practice (and also bad manners!)—browsing on a desktop
    with a fast Internet connection as it might not have too much of an impact; the
    same cannot be said for mobile devices, where we have less choice.
  prefs: []
  type: TYPE_NORMAL
- en: To overcome this, we need to take a different approach—get WordPress to automatically
    swap in smaller images when we reach a particular size or breakpoint. Instead
    of doing this manually using code, we can take advantage of one of the many plugins
    available that offer responsive capabilities in some format.
  prefs: []
  type: TYPE_NORMAL
- en: 'I feel a demo coming on. Now''s a good time to take a look at one such plugin
    in action:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by downloading our plugin. For this exercise, we'll use the `PictureFill.WP`
    plugin by Kyle Ricks, which is available at [https://wordpress.org/plugins/picturefillwp/](https://wordpress.org/plugins/picturefillwp/).
    We're going to use the version that uses `Picturefill.js` version 2\. This is
    available to download from [https://github.com/kylereicks/picturefill.js.wp/tree/master](https://github.com/kylereicks/picturefill.js.wp/tree/master).
    Click on **Download ZIP** to get the latest version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to the admin area of your WordPress installation and click on **Settings**
    and then **Media**. Make sure your image settings for **Thumbnail**, **Medium**,
    and **Large** sizes are set to values that work with useful breakpoints in your
    design.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We then need to install the plugin. In the admin area, go to **Plugins** | **Add
    New** to install the plugin and activate it in the normal manner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, we will have installed responsive capabilities in WordPress—everything
    is managed automatically by the plugin; there is no need to change any settings
    (except maybe the image sizes we talked about in step 2).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Switch back to your WordPress frontend and try resizing the screen to a smaller
    size.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *F12* to activate Firebug and switch to the **HTML** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl* + *Shift* + *C* (or *Cmd* + *Shift* + *C* for Mac users) to toggle
    the element inspector; move your mouse over your resized image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we've set the right image sizes in WordPress' admin area and the window is
    resized correctly, we can expect to see something like the following screenshot:![Using
    plugins to add responsive images](img/6968OT_05_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To confirm we are indeed using a smaller image, right-click on the image and
    select **View Image Info**; it will display something akin to the following screenshot:![Using
    plugins to add responsive images](img/6968OT_05_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We should now have a fully functioning plugin within our WordPress installation.
    A good tip is to test this thoroughly, if only to ensure we've set the right sizes
    for our breakpoints in WordPress!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**What happens if WordPress doesn''t refresh my thumbnail images properly?**'
  prefs: []
  type: TYPE_NORMAL
- en: This can happen. If you find this happening, get hold of and install the Regenerate
    Thumbnails plugin to resolve this issue; it's available at [https://wordpress.org/plugins/regenerate-thumbnails/](https://wordpress.org/plugins/regenerate-thumbnails/).
  prefs: []
  type: TYPE_NORMAL
- en: Adding responsive videos using plugins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we can add responsive images to WordPress, let's turn our attention
    to videos. The process of adding them is a little more complex; we need to use
    code to achieve the best effect. Let's examine our options.
  prefs: []
  type: TYPE_NORMAL
- en: If you are hosting your own videos, the simplest way is to add some additional
    CSS style rules. Although this removes any reliance on JavaScript or jQuery using
    this method, the result isn't perfect and will need additional styles to handle
    the repositioning of the play button overlay.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although we are working locally, we should remember the note from earlier in
    the chapter; changes to the CSS style sheet may be lost when upgrading. A custom
    CSS plugin should be used, if possible, to retain any changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use a CSS-only solution, it only requires a couple of steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to your WordPress theme folder and open a copy of `styles.css` in your
    text editor of choice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following lines at the end of the file and save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Close the file. You now have the basics in place for responsive videos.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this stage, you're probably thinking, "great, my videos are now responsive.
    I can handle the repositioning of the play button overlay myself, no problem";
    sounds about right?
  prefs: []
  type: TYPE_NORMAL
- en: Thought so and therein lies the main drawback of this method! Repositioning
    the overlay shouldn't be too difficult. The real problem is in the high costs
    of hardware and bandwidth that is needed to host videos of any reasonable quality
    and that even if we were to spend time repositioning the overlay, the high costs
    would outweigh any benefit of using a CSS-only solution.
  prefs: []
  type: TYPE_NORMAL
- en: A far better option is to let a service such as YouTube do all the hard work
    for you and to simply embed your chosen video directly from YouTube into your
    pages. The main benefit of this is that YouTube's servers do all the hard work
    for you. You can take advantage of an increased audience and YouTube will automatically
    optimize the video for the best resolution possible for the Internet connections
    being used by your visitors.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although aimed at beginners, wpbeginner.com has a useful article located at
    [http://www.wpbeginner.com/beginners-guide/why-you-should-never-upload-a-video-to-wordpress/](http://www.wpbeginner.com/beginners-guide/why-you-should-never-upload-a-video-to-wordpress/),
    on the pros and cons of why self-hosting videos isn't recommended and that using
    an external service is preferable.
  prefs: []
  type: TYPE_NORMAL
- en: Using plugins to embed videos
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Embedding videos from an external service into WordPress is ironically far simpler
    than using the CSS method. There are dozens of plugins available to achieve this,
    but one of the simplest to use (and my personal favorite) is FluidVids, by Todd
    Motto, available at [http://github.com/toddmotto/fluidvids/](http://github.com/toddmotto/fluidvids/).
  prefs: []
  type: TYPE_NORMAL
- en: 'To get it working in WordPress, we need to follow these steps using a video
    from YouTube as the basis for our example:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to your WordPress' theme folder and open a copy of `functions.php` in
    your usual text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the bottom, add the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file, then log in to the admin area of your WordPress installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Posts** | **Add New** to add a post and switch to the **Text**
    tab of your Post Editor, then add [http://www.youtube.com/watch?v=Vpg9yizPP_g&hd=1](http://www.youtube.com/watch?v=Vpg9yizPP_g&hd=1)
    to the editor on the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Update** to save your post, then click on **View post** to see the
    video in action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There is no need to further configure WordPress—any video added from services
    such as YouTube or Vimeo will be automatically set as responsive by the FluidVids
    plugin. At this point, try resizing the browser window. If all is well, we should
    see the video shrink or grow in size, depending on how the browser window has
    been resized:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using plugins to embed videos](img/6968OT_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To prove that the code is working, we can take a peek at the compiled results
    within Firebug. We will see something akin to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using plugins to embed videos](img/6968OT_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For those of us who are not feeling quite so brave (!), there is fortunately
    a WordPress plugin available that will achieve the same results, without configuration.
    It's available at [https://wordpress.org/plugins/fluidvids/](https://wordpress.org/plugins/fluidvids/)
    and can be downloaded and installed using the normal process for WordPress plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Let's change track and move onto our next demo. I feel a need to get stuck in
    some coding, so let's take a look at how we can implement responsive images in
    frameworks such as Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing responsive media in Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A question—as developers, hands up if you have not heard of Bootstrap? Good—not
    too many hands going down
  prefs: []
  type: TYPE_NORMAL
- en: Why have I asked this question, I hear you say? Easy—it's to illustrate that
    in popular frameworks (such as Bootstrap), it is easy to add basic responsive
    capabilities to media, such as images or video. The exact process may differ from
    framework to framework, but the result is likely to be very similar. To see what
    I mean, let's take a look at using Bootstrap for our second demo, where we'll
    see just how easy it is to add images and video to our Bootstrap-enabled site.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you would like to explore using some of the free Bootstrap templates that
    are available, then [http://www.startbootstrap.com/](http://www.startbootstrap.com/)
    is well worth a visit!
  prefs: []
  type: TYPE_NORMAL
- en: Using Bootstrap's CSS classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Making images and videos responsive in Bootstrap uses a slightly different approach
    to what we've examined so far; this is only because we don't have to define each
    style property explicitly, but instead simply add the appropriate class to the
    media HTML for it to render responsively.
  prefs: []
  type: TYPE_NORMAL
- en: For the purposes of this demo, we'll use an edited version of the Blog Page
    example, available at [http://www.getbootstrap.com/getting-started/#examples](http://www.getbootstrap.com/getting-started/#examples);
    a copy of the edited version is available on the code download that accompanies
    this book. Before we begin, go ahead and download a copy of the Bootstrap Example
    folder that is in the code download. Inside, you'll find the CSS, image and JavaScript
    files needed, along with our HTML markup file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our files, the following is a screenshot of what we''re going
    to achieve over the course of our demo:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Bootstrap''s CSS classes](img/6968OT_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s make a start on our example using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up `bootstrap.html` and look for the following lines (around lines 34
    to 35):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Immediately below, add the following code—this contains markup for our embedded
    video, using Bootstrap''s responsive CSS styling:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the video now styled, let''s go ahead and add in an image—this will go
    in the **About** section on the right. Look for these lines, on or around lines
    74 and 75:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Immediately below, add in the following markup for our image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file and preview the results in a browser. If all is well, we can see
    our video and image appear, as shown at the start of our demo.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, try resizing the browser—you should see the video and placeholder
    image shrink or grow as the window is resized. However, the great thing about
    Bootstrap is that the right styles have already been set for each class. All we
    need to do is apply the correct class to the appropriate media file—`.embed-responsive
    embed-responsive-16by9` for videos or `.img-responsive for images`—for that image
    or video to behave responsively within our site.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this example, we used Bootstrap''s `.img-responsive` class in the code;
    if we have a lot of images, we could consider using `img { max-width: 100%; height:
    auto; }` instead.'
  prefs: []
  type: TYPE_NORMAL
- en: So far, we've worked with two popular examples of frameworks in the form of
    WordPress and Bootstrap. This is great, but it can mean getting stuck into a lot
    of CSS styling, particularly if we're working with media queries, as we saw earlier
    in the book! Can we do anything about this? Absolutely! It's time for a brief
    look at CSS preprocessing and how this can help with adding responsive media to
    our pages.
  prefs: []
  type: TYPE_NORMAL
- en: Using Less CSS to create responsive content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with frameworks often means getting stuck into a lot of CSS styling;
    this can become awkward to manage if we're not careful! To help with this, and
    for our third scenario, we're going back to basics to work on an alternative way
    of rendering CSS using the Less CSS preprocessing language.
  prefs: []
  type: TYPE_NORMAL
- en: Why? Well, as a superset (or extension) of CSS, Less allows us to write our
    styles more efficiently; it then compiles them into valid CSS. The aim of this
    example is to show that if you're already using Less, then we can still apply
    the same principles that we've covered throughout this book, to make our content
    responsive.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It should be noted that this exercise does assume a certain level of prior experience
    using Less; if this is the first time, you may like to peruse my book, *Learning
    Less*, by Packt Publishing.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see what I mean—let''s rework the responsive demo from [Chapter 3](ch03.html
    "Chapter 3. Mixing Content"), *Mixing Content*, where we mixed both video and
    images to use Less in place of normal CSS. There will be a few steps involved
    in making the changes, so the following screenshot gives a heads-up on what it
    will look like, once we''ve finished:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Less CSS to create responsive content](img/6968OT_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Hold on! the keen-eyed amongst you might notice that there is nothing different
    between this version and the one from [Chapter 3](ch03.html "Chapter 3. Mixing
    Content"), *Mixing Content*.
  prefs: []
  type: TYPE_NORMAL
- en: 'You would be right. If we play our cards right, there should indeed be no change
    in appearance; working with Less is all about writing CSS more efficiently. Let''s
    see what is involved:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by extracting copies of the Less CSS example from the code download
    that accompanies this book—inside it, we'll find our HTML markup, reset style
    sheet, images, and video needed for our demo. Save the folder locally to your
    PC.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, add the following styles in a new file, saving it as `responsive.less`
    in the `css` subfolder—we''ll start with some of the styling for the base elements,
    such as the video and banner:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to add some basic formatting styles for images and links, so go ahead
    and add the following, immediately below the `#skipTo` rule:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next up comes the navigation for our page. These styles control the main navigation
    and the **Skip To…** link that appears when viewed on smaller devices. Go ahead
    and add these style rules immediately below the rules for `a` and `img`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to add the media query that controls the display for smaller devices,
    so go ahead and add the following to a new file and save it as `media.less` in
    the `css` subfolder. We''ll start with setting the screen size for our media query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next up comes the media query rule that will handle the **Skip To…** link at
    the top of our resized window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can''t forget the main navigation, so go ahead and add the following line
    of code immediately below the block for `#skipTo`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: At this point, we should then compile the Less style sheet before previewing
    the results of our work. If we launch `responsive.html` in a browser, we'll see
    our mocked up portfolio page appear as we saw at the beginning of the exercise.
    If we resize the screen to its minimum width, its responsive design kicks in to
    reorder and resize elements on screen, as we would expect to see.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, so we now have a responsive page that uses Less CSS for styling; it still
    seems like a lot of code, right?
  prefs: []
  type: TYPE_NORMAL
- en: Working through the code in detail
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although this seems like a lot of code for a simple page, the principles we've
    used are in fact very simple and are the ones we already used earlier in the book.
    Not convinced? Well, let's look at it in more detail—the focus of this book is
    on responsive images and video, so we'll start with video.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `responsive.css` style sheet and look for the `#video-wrapper` video
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Notice how it's set to a `max-width` value of `100%`? We used `max-width` to
    style the original video back in [Chapter 2](ch02.html "Chapter 2. Adding Responsive
    Video Content"), *Adding Responsive Video Content*. It's no different here. Granted,
    we don't want to resize a large video to a really small size—we would use a media
    query to replace it with a smaller version. But, for most purposes, `max-width`
    should be sufficient.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, for the image, this is a little more complicated, but it still uses the
    same principles we applied back in [Chapter 1](ch01.html "Chapter 1. Working with
    Responsive Images"), *Working with Responsive Images*. Let''s start with the code
    from `responsive.less`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we used the `max-width` value again, exactly as we did back in [Chapter
    1](ch01.html "Chapter 1. Working with Responsive Images"), *Working with Responsive
    Images*. In both instances, we can style the element directly, unlike videos where
    we have to add a container in order to style it. The theme continues in the media
    query setup in `media.less`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In this instance, we're styling the element to cover the width of the viewport,
    in exactly the same way as we did back in [Chapter 3](ch03.html "Chapter 3. Mixing
    Content"), *Mixing Content*.
  prefs: []
  type: TYPE_NORMAL
- en: A small point of note; you might ask why we are using the `rem` values instead
    of the percentage values when styling our image? This is a good question—the key
    to it is that when using pixel values, these do not scale well in responsive designs.
    However, the `rem` values do scale beautifully; we could use percentage values
    if we're so inclined, although they are best suited to instances where we need
    to fill a container that only covers part of the screen (as we did with the video
    for this demo).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An interesting article extolling the virtues of why we should use rem units
    is available at [http://techtime.getharvest.com/blog/in-defense-of-rem-units](http://techtime.getharvest.com/blog/in-defense-of-rem-units)
    - it's worth a read. Of particular note is a known bug with using rem values in
    Mobile Safari, which should be considered when developing for mobile platforms;
    with all of the iPhones available, its usage could be said to be higher than Firefox!
    For more details, head over to [http://wtfhtmlcss.com/#rems-mobile-safari](http://wtfhtmlcss.com/#rems-mobile-safari).
  prefs: []
  type: TYPE_NORMAL
- en: Transferring to production use
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Throughout this exercise, we used Less to compile our styles on the fly each
    time. This is okay for development purposes, but is not recommended for production
    use. Once we've worked out the requisite styles needed for our site, we should
    always look to precompile them into valid CSS before uploading the results into
    our site.
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of options available for this purpose; two of my personal
    favorites are Crunch! available at [http://www.crunchapp.net](http://www.crunchapp.net)
    and the Less2CSS plugin for Sublime Text available at [https://github.com/timdouglas/sublime-less2css](https://github.com/timdouglas/sublime-less2css).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can learn more about precompiling Less code from my new book, *Learning
    Less.js*, by Packt Publishing.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wow! We've certainly covered a lot; it shows that adding basic responsive capabilities
    to media need not be difficult. Let's take a moment to recap on what you learned.
  prefs: []
  type: TYPE_NORMAL
- en: We kicked off this chapter with an introduction to three real-word scenarios
    that we would then cover. Our first scenario looked at using WordPress. We covered
    how although we can add simple CSS styling to make images and videos responsive,
    the preferred method is to use one of the several plugins available to achieve
    the same result.
  prefs: []
  type: TYPE_NORMAL
- en: Our next scenario visited the all too familiar framework known as Twitter Bootstrap.
    In comparison, we saw that this is a much easier framework to work with, in that
    styles have been predefined and that all we needed to do was add the right class
    to the right selector.
  prefs: []
  type: TYPE_NORMAL
- en: Our third and final scenario went completely the opposite way, with a look at
    using the Less CSS preprocessor to handle the styles that we would otherwise have
    manually created. We saw how easy it was to rework the styles we originally created
    earlier in the chapter to produce a more concise and efficient version that compiled
    into valid CSS with no apparent change in design.
  prefs: []
  type: TYPE_NORMAL
- en: Well, we've now reached the end of the book; all good things must come to an
    end at some point! Nonetheless, I hope you've enjoyed reading the book as much
    as I have writing it. Hopefully, I've shown that adding responsive media to your
    sites need not be as complicated as it might first look and that it gives you
    a good grounding to develop something more complex using responsive media.
  prefs: []
  type: TYPE_NORMAL
