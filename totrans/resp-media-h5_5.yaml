- en: Chapter 5. Using Frameworks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章 使用框架
- en: Throughout this book, we've covered a number of tips and tricks we can use to
    add media to our responsive sites, which includes both images and video. These
    are good, but how do they work in real life?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们介绍了一些技巧和窍门，我们可以使用它们将媒体添加到我们的响应式网站中，包括图片和视频。这些技巧很好，但在现实生活中它们是如何工作的呢？
- en: Let's answer that now. We can't fail to note the rapid rise of three popular
    frameworks, namely Less CSS, WordPress, and of course Twitter's Bootstrap. These
    are used in thousands of sites worldwide—certainly not something to be sniffed
    at! In this chapter, we're going to work through some simple examples that use
    these tools to show how we can apply some of the techniques that we've covered
    so far in the book.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在来回答这个问题。我们无法忽视三个流行框架的快速崛起，即 Less CSS、WordPress 和当然还有 Twitter 的 Bootstrap。这些被用于全球成千上万的网站中——这绝对不是可以忽视的！在本章中，我们将通过一些简单的示例来展示如何使用这些工具来应用我们在书中介绍的一些技术。
- en: 'Over the next few pages, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几页中，我们将涵盖以下主题：
- en: Adding responsive media to a CMS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将响应式媒体添加到 CMS 中
- en: Implementing responsive media in frameworks such as Twitter Bootstrap
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在框架如 Twitter Bootstrap 中实现响应式媒体
- en: Using the Less CSS preprocessor to create CSS media queries
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Less CSS 预处理器创建 CSS 媒体查询
- en: Ready? Let's make a start!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好了吗？让我们开始吧！
- en: Introducing our three examples
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍我们的三个示例
- en: Throughout this book, we've covered a number of simple, practical techniques
    to make media responsive within our sites—these are good, but nothing beats seeing
    these principles used in a real-world context, right?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们介绍了一些简单实用的技术，用于使网站中的媒体响应式化——这些技术很好，但没有什么能比得上看到这些原则在实际应用中的使用，对吧？
- en: 'Absolutely! To prove this, we''re going to look at three examples throughout
    this chapter, using technologies that you are likely to be familiar with: WordPress,
    Bootstrap, and Less CSS. Each demo will assume a certain level of prior knowledge,
    so it may be worth reading up a little first. In all three cases, we should see
    that with little effort, we can easily add responsive media to each one of these
    technologies. Let''s kick off with a look at working with WordPress.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对可以！为了证明这一点，我们将在本章中查看三个示例，使用您可能熟悉的这些技术：WordPress、Bootstrap 和 Less CSS。每个演示都将假设一定的先验知识，因此可能值得先阅读一下。在所有三种情况下，我们应该看到，只需付出很少的努力，我们就可以轻松地将响应式媒体添加到这些技术中的每一个。让我们从查看如何与
    WordPress 一起工作开始。
- en: Adding responsive media to a CMS
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将响应式媒体添加到 CMS 中
- en: We will begin the first of our three examples with a look at using the ever
    popular WordPress system. Created back in 2003, WordPress has been used to host
    sites by small independent traders all the way up to Fortune 500 companies—this
    includes some of the biggest names in business such as eBay, UPS, and Ford. WordPress
    comes in two flavors; the one we're interested in is the self-install version
    available at [http://www.wordpress.org](http://www.wordpress.org).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先通过查看流行的 WordPress 系统来开始我们的三个示例。WordPress 是在 2003 年创建的，从小型独立交易商到财富 500 强公司都使用它来托管网站——这包括一些商业界的最大名字，如
    eBay、UPS 和福特。WordPress 有两种版本；我们感兴趣的是可在 [http://www.wordpress.org](http://www.wordpress.org)
    获取的自安装版本。
- en: This example assumes you have a local installation of WordPress installed and
    working; if not, then head over to [http://codex.wordpress.org/Installing_WordPress](http://codex.wordpress.org/Installing_WordPress)
    and follow the tutorial to get started. We will also need a DOM inspector such
    as Firebug installed if you don't already have it. It can be downloaded from [http://www.getfirebug.com](http://www.getfirebug.com)
    if you need to install it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例假设您已经安装并运行了本地的 WordPress；如果没有，请访问 [http://codex.wordpress.org/Installing_WordPress](http://codex.wordpress.org/Installing_WordPress)
    并按照教程开始。如果您还没有安装，我们还需要一个 DOM 检查器，如 Firebug。如果您需要安装，可以从 [http://www.getfirebug.com](http://www.getfirebug.com)
    下载。
- en: Note
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you only have access to WordPress.com (the other flavor of WordPress), then
    some of the tips in this section may not work, due to limitations in that version
    of WordPress.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只能访问 WordPress.com（WordPress 的另一种版本），那么本节中的一些提示可能不会工作，因为该版本的 WordPress 有局限性。
- en: Okay, assuming we have WordPress set up and running, let's make a start on making
    uploaded media responsive.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，假设我们已经设置了 WordPress 并让其运行，让我们开始制作上传的媒体响应式化。
- en: Adding responsive media manually
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动添加响应式媒体
- en: 'If we cast our minds back to [Chapter 1](ch01.html "Chapter 1. Working with
    Responsive Images"), *Working with Responsive Images*, we discovered that in most
    cases, it was sufficient to simply set `max-width: 100%` against any image that
    we wanted to be responsive.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '如果我们回顾一下[第1章](ch01.html "第1章. 使用响应式图片")，*使用响应式图片*，我们会发现，在大多数情况下，只需简单地将 `max-width:
    100%` 应用于我们希望响应式的任何图片就足够了。'
- en: It's at this point that you're probably thinking we have to do something complex
    when working in WordPress, right? Wrong! As long as you use the Twenty Fourteen
    core theme, the work has already been done for you.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 到这个时候，你可能可能认为在WordPress中工作我们必须做一些复杂的事情，对吧？错误！只要您使用Twenty Fourteen核心主题，工作就已经为您完成了。
- en: Note
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For this exercise, and the following sections, I will assume you have installed
    and/or activated WordPress' Twenty Fourteen theme.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个练习以及接下来的章节，我将假设您已经安装并/或激活了WordPress的Twenty Fourteen主题。
- en: 'Don''t believe me? It''s easy to verify: try uploading an image to a post or
    page in WordPress. Resize the browser—you should see the image shrink or grow
    in size as the browser window changes size. If we take a peek at WordPress under
    the covers, using a DOM Inspector such as Firebug, we can easily see how the code
    is no different to that back in [Chapter 1](ch01.html "Chapter 1. Working with
    Responsive Images"), *Working with Responsive Images*.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你不相信我？很容易验证：尝试将图片上传到WordPress中的帖子或页面。调整浏览器窗口大小——你应该看到图片随着浏览器窗口大小的变化而缩小或增大。如果我们使用DOM检查器（如Firebug）查看WordPress的内部结构，我们可以很容易地看到代码与[第1章](ch01.html
    "第1章. 使用响应式图片")中的代码没有区别。
- en: '![Adding responsive media manually](img/6968OT_05_01.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![手动添加响应式媒体](img/6968OT_05_01.jpg)'
- en: 'If we take a look at the code elsewhere using Firebug, we can also see the
    `height: auto` set against a number of the `img` tags; this is frequently done
    for responsive images to ensure they maintain the correct proportions.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '如果我们使用Firebug查看其他地方的代码，我们也可以看到针对许多 `img` 标签设置了 `height: auto`；这通常是为了响应式图片，以确保它们保持正确的比例。'
- en: The responsive style seems to work well in the Twenty Fourteen theme; if you
    are using an older theme, we can easily apply the same style rule to images stored
    in WordPress when using that theme.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式样式在Twenty Fourteen主题中似乎工作得很好；如果您使用的是较旧的主题，我们可以在使用该主题时轻松地将相同的样式规则应用于存储在WordPress中的图片。
- en: Fixing a responsive issue
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决响应式问题
- en: So far, so good. Now, we have the Twenty Fourteen theme in place, we've uploaded
    images of various sizes, and we try resizing the browser window ... only to find
    that the images don't seem to grow in size above a certain point. At least not
    well—what gives?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切顺利。现在，我们已经设置了Twenty Fourteen主题，上传了各种大小的图片，我们尝试调整浏览器窗口……却发现图片似乎在某个点以上不再增长大小。至少增长得不好——这是怎么回事？
- en: 'Well, it''s a classic trap: we''ve talked about using percentage values to
    dynamically resize images, only to find that we''ve shot ourselves in the foot
    (proverbially speaking, of course!). The reason? Let''s dive in and find out using
    the following steps:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，这是一个经典的陷阱：我们讨论了使用百分比值来动态调整图片大小，结果却发现我们给自己挖了个坑（当然，是比喻意义上的！）原因？让我们深入探究，以下步骤将帮助我们找到答案：
- en: Browse to your WordPress installation and activate Firebug using *F12*.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到您的WordPress安装并使用 *F12* 激活Firebug。
- en: Switch to the **HTML** tab and select your preferred image.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 **HTML** 选项卡并选择您喜欢的图片。
- en: 'In Firebug, look for the `<header class="entry-header">` line, then look for
    the following line in the rendered styles on the right-hand side of the window:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Firebug中，查找 `<header class="entry-header">` 行，然后在窗口右侧的渲染样式中查找以下行：
- en: '[PRE0]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The keen-eyed amongst you should hopefully spot the issue straightaway—we''re
    using percentages to make the sizes dynamic for each image, yet we''re constraining
    its parent container! To fix this, change the highlighted line as indicated:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 眼尖的你们中应该能立刻发现问题——我们使用百分比来使每个图片的大小动态变化，但我们却限制了其父容器！为了解决这个问题，按照指示更改高亮行：
- en: '[PRE1]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To balance the content, we need to make the same change to the comments area.
    So go ahead and change `max-width` to `100%` as follows:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了平衡内容，我们需要对评论区域做同样的修改。所以，请按照以下方式将 `max-width` 更改为 `100%`：
- en: '[PRE2]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If we try resizing the browser window now, we should see the image size adjust
    automatically.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在尝试调整浏览器窗口大小，我们应该看到图片大小会自动调整。
- en: At this stage, the change is not permanent. To fix this, we would log in to
    WordPress' admin area, go to **Appearance** | **Editor** and add the adjusted
    styles at the foot of the **Stylesheet (style.css)** file.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，更改不是永久的。为了解决这个问题，我们需要登录到WordPress的管理区域，转到**外观** | **编辑器**，并在**样式表（style.css）**文件的底部添加调整后的样式。
- en: Let's move on. Did anyone notice two rather critical issues with the approach
    used here? Hopefully, you must have spotted that if a large image is used and
    then resized to a smaller size, we're still working with large files. The alteration
    we're making has a big impact on the theme, even though it is only a small change.
    Even though it proves that we can make images truly responsive, it is the kind
    of change that we would not necessarily want to make without careful consideration
    and plenty of testing.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续。有人注意到这里使用的方法有两个相当关键的问题吗？希望你已经注意到，如果使用大图像并将其调整到更小的尺寸，我们仍在处理大文件。我们正在进行的更改对主题有很大的影响，尽管这只是一个小改动。即使它证明了我们可以使图像真正响应式，但这种改变在没有仔细考虑和大量测试的情况下，我们可能并不想进行。
- en: We can improve on this. However, making changes directly to the CSS style sheet
    is not ideal; they could be lost when upgrading to a newer version of the theme.
    We can improve on this by either using a custom CSS plugin to manage these changes
    or (better) using a plugin that tells WordPress to swap an existing image for
    a small one automatically if we resize the window to a smaller size.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以改进这一点。然而，直接对CSS样式表进行更改并不是最佳选择；在升级到主题的新版本时，这些更改可能会丢失。我们可以通过使用自定义CSS插件来管理这些更改，或者（更好）使用一个插件，告诉WordPress在调整窗口大小到更小尺寸时自动将现有图像替换为小图像。
- en: Using plugins to add responsive images
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用插件添加响应式图像
- en: A drawback though, of using a theme such as Twenty Fourteen, is the resizing
    of images. While we can grow or shrink an image when resizing the browser window,
    we are still technically altering the size of what could potentially be an unnecessarily
    large image!
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用像Twenty Fourteen这样的主题的一个缺点是图像的调整大小。虽然我们可以在调整浏览器窗口大小时增大或缩小图像，但我们实际上仍然在技术上改变了一个可能是不必要的大图像的大小！
- en: This is considered bad practice (and also bad manners!)—browsing on a desktop
    with a fast Internet connection as it might not have too much of an impact; the
    same cannot be said for mobile devices, where we have less choice.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这被认为是不良的做法（而且也是不礼貌的！）——在具有快速互联网连接的桌面浏览器上浏览可能不会产生太大的影响；对于移动设备来说，情况就不同了，我们选择的空间更小。
- en: To overcome this, we need to take a different approach—get WordPress to automatically
    swap in smaller images when we reach a particular size or breakpoint. Instead
    of doing this manually using code, we can take advantage of one of the many plugins
    available that offer responsive capabilities in some format.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了克服这个问题，我们需要采取不同的方法——让WordPress在达到特定大小或断点时自动替换较小的图像。而不是手动使用代码来做这件事，我们可以利用许多提供响应式功能的插件之一。
- en: 'I feel a demo coming on. Now''s a good time to take a look at one such plugin
    in action:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我感觉一个演示即将到来。现在是查看这样一个插件在行动中的好时机：
- en: Let's start by downloading our plugin. For this exercise, we'll use the `PictureFill.WP`
    plugin by Kyle Ricks, which is available at [https://wordpress.org/plugins/picturefillwp/](https://wordpress.org/plugins/picturefillwp/).
    We're going to use the version that uses `Picturefill.js` version 2\. This is
    available to download from [https://github.com/kylereicks/picturefill.js.wp/tree/master](https://github.com/kylereicks/picturefill.js.wp/tree/master).
    Click on **Download ZIP** to get the latest version.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从下载我们的插件开始。在这个练习中，我们将使用Kyle Ricks的`PictureFill.WP`插件，该插件可在[https://wordpress.org/plugins/picturefillwp/](https://wordpress.org/plugins/picturefillwp/)找到。我们将使用使用`Picturefill.js`版本2的版本。这可以从[https://github.com/kylereicks/picturefill.js.wp/tree/master](https://github.com/kylereicks/picturefill.js.wp/tree/master)下载。点击**下载ZIP**以获取最新版本。
- en: Log in to the admin area of your WordPress installation and click on **Settings**
    and then **Media**. Make sure your image settings for **Thumbnail**, **Medium**,
    and **Large** sizes are set to values that work with useful breakpoints in your
    design.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的WordPress安装的管理员区域，点击**设置**然后点击**媒体**。确保您的**缩略图**、**中等**和**大**尺寸的图片设置已设置为与您的设计中有用的断点相匹配的值。
- en: We then need to install the plugin. In the admin area, go to **Plugins** | **Add
    New** to install the plugin and activate it in the normal manner.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要安装这个插件。在管理员区域，转到**插件** | **添加新插件**来安装插件，并按正常方式激活它。
- en: At this point, we will have installed responsive capabilities in WordPress—everything
    is managed automatically by the plugin; there is no need to change any settings
    (except maybe the image sizes we talked about in step 2).
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经在WordPress中安装了响应式功能——所有操作都由插件自动管理；无需更改任何设置（除非可能需要更改我们在步骤2中提到的图像大小）。
- en: Switch back to your WordPress frontend and try resizing the screen to a smaller
    size.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回WordPress前端，尝试将屏幕大小调整为更小。
- en: Press *F12* to activate Firebug and switch to the **HTML** tab.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *F12* 激活Firebug并切换到 **HTML** 选项卡。
- en: Press *Ctrl* + *Shift* + *C* (or *Cmd* + *Shift* + *C* for Mac users) to toggle
    the element inspector; move your mouse over your resized image.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl* + *Shift* + *C*（或Mac用户的 *Cmd* + *Shift* + *C*）切换元素检查器；将鼠标移至调整大小的图像上。
- en: If we've set the right image sizes in WordPress' admin area and the window is
    resized correctly, we can expect to see something like the following screenshot:![Using
    plugins to add responsive images](img/6968OT_05_02.jpg)
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们在WordPress管理区域设置了正确的图像大小，并且窗口大小调整正确，我们可以期待看到以下截图所示的内容：![使用插件添加响应式图像](img/6968OT_05_02.jpg)
- en: To confirm we are indeed using a smaller image, right-click on the image and
    select **View Image Info**; it will display something akin to the following screenshot:![Using
    plugins to add responsive images](img/6968OT_05_03.jpg)
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了确认我们确实使用了一个较小的图像，右键单击图像并选择**查看图像信息**；它将显示类似于以下截图的内容：![使用插件添加响应式图像](img/6968OT_05_03.jpg)
- en: We should now have a fully functioning plugin within our WordPress installation.
    A good tip is to test this thoroughly, if only to ensure we've set the right sizes
    for our breakpoints in WordPress!
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在应该在WordPress安装中拥有一个完全功能的插件。一个好的建议是彻底测试它，至少要确保我们在WordPress中设置了正确的断点大小！
- en: Note
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**What happens if WordPress doesn''t refresh my thumbnail images properly?**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果WordPress没有正确刷新我的缩略图图像会发生什么？**'
- en: This can happen. If you find this happening, get hold of and install the Regenerate
    Thumbnails plugin to resolve this issue; it's available at [https://wordpress.org/plugins/regenerate-thumbnails/](https://wordpress.org/plugins/regenerate-thumbnails/).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能会发生。如果你发现这种情况，获取并安装Regenerate Thumbnails插件来解决这个问题；它可在[https://wordpress.org/plugins/regenerate-thumbnails/](https://wordpress.org/plugins/regenerate-thumbnails/)找到。
- en: Adding responsive videos using plugins
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用插件添加响应式视频
- en: Now that we can add responsive images to WordPress, let's turn our attention
    to videos. The process of adding them is a little more complex; we need to use
    code to achieve the best effect. Let's examine our options.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在WordPress中添加响应式图像了，让我们把注意力转向视频。添加它们的流程稍微复杂一些；我们需要使用代码来实现最佳效果。让我们看看我们的选项。
- en: If you are hosting your own videos, the simplest way is to add some additional
    CSS style rules. Although this removes any reliance on JavaScript or jQuery using
    this method, the result isn't perfect and will need additional styles to handle
    the repositioning of the play button overlay.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你自己托管视频，最简单的方法是添加一些额外的CSS样式规则。虽然这种方法消除了对JavaScript或jQuery的依赖，但结果并不完美，需要额外的样式来处理播放按钮覆盖层的重新定位。
- en: Note
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Although we are working locally, we should remember the note from earlier in
    the chapter; changes to the CSS style sheet may be lost when upgrading. A custom
    CSS plugin should be used, if possible, to retain any changes.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们正在本地工作，但我们应记住本章前面的注意事项；当升级时，CSS样式表中的更改可能会丢失。如果可能，应使用自定义CSS插件来保留任何更改。
- en: 'To use a CSS-only solution, it only requires a couple of steps:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用纯CSS解决方案，只需要几个步骤：
- en: Browse to your WordPress theme folder and open a copy of `styles.css` in your
    text editor of choice.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到你的WordPress主题文件夹，并在你选择的文本编辑器中打开`styles.css`的副本。
- en: 'Add the following lines at the end of the file and save it:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件末尾添加以下行并保存：
- en: '[PRE3]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Close the file. You now have the basics in place for responsive videos.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭文件。你现在已经为响应式视频打下了基础。
- en: At this stage, you're probably thinking, "great, my videos are now responsive.
    I can handle the repositioning of the play button overlay myself, no problem";
    sounds about right?
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，你可能正在想，“太好了，我的视频现在已经是响应式的了。我可以自己处理播放按钮覆盖层的重新定位，没问题”；听起来很对？
- en: Thought so and therein lies the main drawback of this method! Repositioning
    the overlay shouldn't be too difficult. The real problem is in the high costs
    of hardware and bandwidth that is needed to host videos of any reasonable quality
    and that even if we were to spend time repositioning the overlay, the high costs
    would outweigh any benefit of using a CSS-only solution.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，这就是这种方法的主要缺点！重新定位覆盖层不应该太难。真正的问题是硬件和带宽的高成本，这是为了托管任何合理质量的视频所必需的，即使我们花费时间重新定位覆盖层，高成本也会超过使用纯CSS解决方案的任何好处。
- en: A far better option is to let a service such as YouTube do all the hard work
    for you and to simply embed your chosen video directly from YouTube into your
    pages. The main benefit of this is that YouTube's servers do all the hard work
    for you. You can take advantage of an increased audience and YouTube will automatically
    optimize the video for the best resolution possible for the Internet connections
    being used by your visitors.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更好的选择是让像YouTube这样的服务为你完成所有艰苦的工作，并直接将你选择的视频从YouTube嵌入到你的页面中。这样做的主要好处是YouTube的服务器为你完成了所有艰苦的工作。你可以利用更大的观众群体，YouTube会自动优化视频，以适应你的访客所使用的互联网连接的最佳分辨率。
- en: Note
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Although aimed at beginners, wpbeginner.com has a useful article located at
    [http://www.wpbeginner.com/beginners-guide/why-you-should-never-upload-a-video-to-wordpress/](http://www.wpbeginner.com/beginners-guide/why-you-should-never-upload-a-video-to-wordpress/),
    on the pros and cons of why self-hosting videos isn't recommended and that using
    an external service is preferable.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然面向初学者，但wpbeginner.com有一个有用的文章，位于[http://www.wpbeginner.com/beginners-guide/why-you-should-never-upload-a-video-to-wordpress/](http://www.wpbeginner.com/beginners-guide/why-you-should-never-upload-a-video-to-wordpress/)，讨论了为什么不建议自行托管视频以及使用外部服务的优点。
- en: Using plugins to embed videos
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用插件嵌入视频
- en: Embedding videos from an external service into WordPress is ironically far simpler
    than using the CSS method. There are dozens of plugins available to achieve this,
    but one of the simplest to use (and my personal favorite) is FluidVids, by Todd
    Motto, available at [http://github.com/toddmotto/fluidvids/](http://github.com/toddmotto/fluidvids/).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 将外部服务中的视频嵌入到WordPress中，讽刺的是比使用CSS方法简单得多。有数十个插件可以实现这一功能，但其中最简单易用（也是我个人最喜欢的）是Todd
    Motto的FluidVids，可在[http://github.com/toddmotto/fluidvids/](http://github.com/toddmotto/fluidvids/)找到。
- en: 'To get it working in WordPress, we need to follow these steps using a video
    from YouTube as the basis for our example:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要在WordPress中使其工作，我们需要遵循以下步骤，以YouTube的视频作为我们的示例基础：
- en: Browse to your WordPress' theme folder and open a copy of `functions.php` in
    your usual text editor.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到你的WordPress主题文件夹，并在你常用的文本编辑器中打开`functions.php`的副本。
- en: 'At the bottom, add the following lines:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在底部，添加以下几行：
- en: '[PRE4]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save the file, then log in to the admin area of your WordPress installation.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件，然后登录到你的WordPress安装的管理员区域。
- en: Navigate to **Posts** | **Add New** to add a post and switch to the **Text**
    tab of your Post Editor, then add [http://www.youtube.com/watch?v=Vpg9yizPP_g&hd=1](http://www.youtube.com/watch?v=Vpg9yizPP_g&hd=1)
    to the editor on the page.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**文章** | **新建文章**来添加文章，然后切换到你的文章编辑器的**文本**标签页，然后将[http://www.youtube.com/watch?v=Vpg9yizPP_g&hd=1](http://www.youtube.com/watch?v=Vpg9yizPP_g&hd=1)添加到页面上的编辑器中。
- en: Click on **Update** to save your post, then click on **View post** to see the
    video in action.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**更新**以保存你的文章，然后点击**查看文章**以查看视频的实际效果。
- en: 'There is no need to further configure WordPress—any video added from services
    such as YouTube or Vimeo will be automatically set as responsive by the FluidVids
    plugin. At this point, try resizing the browser window. If all is well, we should
    see the video shrink or grow in size, depending on how the browser window has
    been resized:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 没有必要进一步配置WordPress——任何从YouTube或Vimeo等服务添加的视频都将自动由FluidVids插件设置为响应式。此时，尝试调整浏览器窗口的大小。如果一切正常，我们应该看到视频的大小会根据浏览器窗口的调整而缩小或增大：
- en: '![Using plugins to embed videos](img/6968OT_05_04.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![使用插件嵌入视频](img/6968OT_05_04.jpg)'
- en: 'To prove that the code is working, we can take a peek at the compiled results
    within Firebug. We will see something akin to the following screenshot:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了证明代码正在工作，我们可以在Firebug中查看编译结果。我们将看到类似于以下截图的内容：
- en: '![Using plugins to embed videos](img/6968OT_05_05.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![使用插件嵌入视频](img/6968OT_05_05.jpg)'
- en: For those of us who are not feeling quite so brave (!), there is fortunately
    a WordPress plugin available that will achieve the same results, without configuration.
    It's available at [https://wordpress.org/plugins/fluidvids/](https://wordpress.org/plugins/fluidvids/)
    and can be downloaded and installed using the normal process for WordPress plugins.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些不太勇敢的人来说（!），幸运的是有一个 WordPress 插件可以实现相同的效果，无需配置。它可在 [https://wordpress.org/plugins/fluidvids/](https://wordpress.org/plugins/fluidvids/)
    找到，并可以使用 WordPress 插件的正常流程下载和安装。
- en: Let's change track and move onto our next demo. I feel a need to get stuck in
    some coding, so let's take a look at how we can implement responsive images in
    frameworks such as Bootstrap.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们改变轨道并继续我们的下一个演示。我感觉有必要做一些编码，所以让我们看看我们如何在 Bootstrap 等框架中实现响应式图片。
- en: Implementing responsive media in Bootstrap
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Bootstrap 中实现响应式媒体
- en: A question—as developers, hands up if you have not heard of Bootstrap? Good—not
    too many hands going down
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一个问题——作为开发者，如果你没有听说过 Bootstrap，请举手？很好——没有太多的人放下手
- en: Why have I asked this question, I hear you say? Easy—it's to illustrate that
    in popular frameworks (such as Bootstrap), it is easy to add basic responsive
    capabilities to media, such as images or video. The exact process may differ from
    framework to framework, but the result is likely to be very similar. To see what
    I mean, let's take a look at using Bootstrap for our second demo, where we'll
    see just how easy it is to add images and video to our Bootstrap-enabled site.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你为什么问这个问题，你可能会问？简单——这是为了说明在流行的框架（如 Bootstrap）中，很容易为媒体添加基本响应式功能，如图片或视频。具体过程可能因框架而异，但结果可能非常相似。为了说明我的意思，让我们看看使用
    Bootstrap 进行我们的第二个演示，我们将看到添加图片和视频到我们的 Bootstrap 网站是多么容易。
- en: Note
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you would like to explore using some of the free Bootstrap templates that
    are available, then [http://www.startbootstrap.com/](http://www.startbootstrap.com/)
    is well worth a visit!
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要探索一些可用的免费 Bootstrap 模板，那么 [http://www.startbootstrap.com/](http://www.startbootstrap.com/)
    值得一看！
- en: Using Bootstrap's CSS classes
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Bootstrap 的 CSS 类
- en: Making images and videos responsive in Bootstrap uses a slightly different approach
    to what we've examined so far; this is only because we don't have to define each
    style property explicitly, but instead simply add the appropriate class to the
    media HTML for it to render responsively.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Bootstrap 中使图片和视频响应式，与我们之前检查的方法略有不同；这仅仅是因为我们不必显式地定义每个样式属性，而是只需为媒体 HTML 添加适当的类，以便它能够响应式渲染。
- en: For the purposes of this demo, we'll use an edited version of the Blog Page
    example, available at [http://www.getbootstrap.com/getting-started/#examples](http://www.getbootstrap.com/getting-started/#examples);
    a copy of the edited version is available on the code download that accompanies
    this book. Before we begin, go ahead and download a copy of the Bootstrap Example
    folder that is in the code download. Inside, you'll find the CSS, image and JavaScript
    files needed, along with our HTML markup file.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这个演示的目的，我们将使用 Blog 页面示例的编辑版本，可在 [http://www.getbootstrap.com/getting-started/#examples](http://www.getbootstrap.com/getting-started/#examples)
    找到；本书附带的代码下载中有一个编辑版本的副本。在我们开始之前，请先下载 Bootstrap 示例文件夹的副本。在里面，你可以找到需要的 CSS、图片和 JavaScript
    文件，以及我们的 HTML 标记文件。
- en: 'Now that we have our files, the following is a screenshot of what we''re going
    to achieve over the course of our demo:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了文件，以下是我们将在演示过程中实现的效果的截图：
- en: '![Using Bootstrap''s CSS classes](img/6968OT_05_06.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Bootstrap 的 CSS 类](img/6968OT_05_06.jpg)'
- en: 'Let''s make a start on our example using the following steps:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤开始我们的示例：
- en: 'Open up `bootstrap.html` and look for the following lines (around lines 34
    to 35):'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `bootstrap.html` 并查找以下行（在第 34 行到第 35 行附近）：
- en: '[PRE5]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Immediately below, add the following code—this contains markup for our embedded
    video, using Bootstrap''s responsive CSS styling:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 立即下面，添加以下代码——这包含我们嵌入视频的标记，使用 Bootstrap 的响应式 CSS 样式：
- en: '[PRE6]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'With the video now styled, let''s go ahead and add in an image—this will go
    in the **About** section on the right. Look for these lines, on or around lines
    74 and 75:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在视频已经设置了样式，让我们继续添加一张图片——这张图片将放在右侧的**关于**部分。查找以下行，在第 74 行或第 75 行附近：
- en: '[PRE7]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Immediately below, add in the following markup for our image:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 立即下面，添加以下标记来表示我们的图片：
- en: '[PRE8]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Save the file and preview the results in a browser. If all is well, we can see
    our video and image appear, as shown at the start of our demo.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并在浏览器中预览结果。如果一切顺利，我们可以看到我们的视频和图片出现，就像我们在演示开始时看到的那样。
- en: At this point, try resizing the browser—you should see the video and placeholder
    image shrink or grow as the window is resized. However, the great thing about
    Bootstrap is that the right styles have already been set for each class. All we
    need to do is apply the correct class to the appropriate media file—`.embed-responsive
    embed-responsive-16by9` for videos or `.img-responsive for images`—for that image
    or video to behave responsively within our site.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，尝试调整浏览器的大小——你应该会看到视频和占位图随着窗口大小的调整而缩小或增大。然而，Bootstrap的伟大之处在于，每个类都已经设置了正确的样式。我们只需要将正确的类应用到适当的媒体文件上——对于视频是`.embed-responsive
    embed-responsive-16by9`，对于图片是`.img-responsive`——这样图片或视频就能在我们的网站上响应式地表现。
- en: Tip
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'In this example, we used Bootstrap''s `.img-responsive` class in the code;
    if we have a lot of images, we could consider using `img { max-width: 100%; height:
    auto; }` instead.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '在这个例子中，我们在代码中使用了Bootstrap的`.img-responsive`类；如果我们有很多图片，我们可以考虑使用`img { max-width:
    100%; height: auto; }`代替。'
- en: So far, we've worked with two popular examples of frameworks in the form of
    WordPress and Bootstrap. This is great, but it can mean getting stuck into a lot
    of CSS styling, particularly if we're working with media queries, as we saw earlier
    in the book! Can we do anything about this? Absolutely! It's time for a brief
    look at CSS preprocessing and how this can help with adding responsive media to
    our pages.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经以WordPress和Bootstrap这两种流行的框架为例进行了工作。这很好，但这可能意味着我们需要处理大量的CSS样式，尤其是如果我们正在使用媒体查询，就像我们在本书前面看到的那样！我们能做些什么吗？当然可以！是时候简要地看看CSS预处理以及它是如何帮助我们向页面添加响应式媒体的了。
- en: Using Less CSS to create responsive content
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Less CSS创建响应式内容
- en: Working with frameworks often means getting stuck into a lot of CSS styling;
    this can become awkward to manage if we're not careful! To help with this, and
    for our third scenario, we're going back to basics to work on an alternative way
    of rendering CSS using the Less CSS preprocessing language.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 与框架一起工作通常意味着我们需要处理大量的CSS样式；如果我们不小心，这可能会变得难以管理！为了帮助解决这个问题，并且为了我们的第三个场景，我们回到基础，使用Less
    CSS预处理语言以不同的方式渲染CSS。
- en: Why? Well, as a superset (or extension) of CSS, Less allows us to write our
    styles more efficiently; it then compiles them into valid CSS. The aim of this
    example is to show that if you're already using Less, then we can still apply
    the same principles that we've covered throughout this book, to make our content
    responsive.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么？因为作为CSS的超集（或扩展），Less允许我们更高效地编写样式；然后将其编译成有效的CSS。本例的目的是展示如果你已经在使用Less，那么我们仍然可以应用本书中涵盖的相同原则，使我们的内容具有响应性。
- en: Tip
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: It should be noted that this exercise does assume a certain level of prior experience
    using Less; if this is the first time, you may like to peruse my book, *Learning
    Less*, by Packt Publishing.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 应该注意的是，这个练习假设您有一定的Less使用经验；如果您是第一次使用，您可能想阅读Packt出版社的我的书《Learning Less》。
- en: 'To see what I mean—let''s rework the responsive demo from [Chapter 3](ch03.html
    "Chapter 3. Mixing Content"), *Mixing Content*, where we mixed both video and
    images to use Less in place of normal CSS. There will be a few steps involved
    in making the changes, so the following screenshot gives a heads-up on what it
    will look like, once we''ve finished:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解我的意思——让我们重新设计第3章中的响应式演示[“第3章：混合内容”](ch03.html "第3章：混合内容")，其中我们混合了视频和图片，用Less代替了常规CSS。进行这些更改将涉及几个步骤，所以下面的截图可以提前让我们了解完成后的样子：
- en: '![Using Less CSS to create responsive content](img/6968OT_05_07.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![使用Less CSS创建响应式内容](img/6968OT_05_07.jpg)'
- en: Hold on! the keen-eyed amongst you might notice that there is nothing different
    between this version and the one from [Chapter 3](ch03.html "Chapter 3. Mixing
    Content"), *Mixing Content*.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 等一下！你们中那些敏锐的人可能会注意到这个版本和第3章中的版本[“第3章：混合内容”](ch03.html "第3章：混合内容")之间没有什么不同。
- en: 'You would be right. If we play our cards right, there should indeed be no change
    in appearance; working with Less is all about writing CSS more efficiently. Let''s
    see what is involved:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你是对的。如果我们玩得得体，确实不应该有任何外观上的变化；使用Less的全部内容都是关于更高效地编写CSS。让我们看看涉及的内容：
- en: We'll start by extracting copies of the Less CSS example from the code download
    that accompanies this book—inside it, we'll find our HTML markup, reset style
    sheet, images, and video needed for our demo. Save the folder locally to your
    PC.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先从本书附带的代码下载中提取Less CSS示例的副本——在里面，我们会找到我们需要的HTML标记、重置样式表、图片和视频。将文件夹保存在您的PC上本地。
- en: 'Next, add the following styles in a new file, saving it as `responsive.less`
    in the `css` subfolder—we''ll start with some of the styling for the base elements,
    such as the video and banner:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在新的文件中添加以下样式，并将其保存为`css`子文件夹中的`responsive.less`——我们将从一些基本元素（如视频和横幅）的样式开始：
- en: '[PRE9]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We need to add some basic formatting styles for images and links, so go ahead
    and add the following, immediately below the `#skipTo` rule:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要为图片和链接添加一些基本的格式化样式，所以请立即在`#skipTo`规则下方添加以下内容：
- en: '[PRE10]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next up comes the navigation for our page. These styles control the main navigation
    and the **Skip To…** link that appears when viewed on smaller devices. Go ahead
    and add these style rules immediately below the rules for `a` and `img`:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是我们的页面导航。这些样式控制主要导航和当在较小设备上查看时出现的**跳转到…**链接。请立即在`a`和`img`的规则下方添加这些样式规则：
- en: '[PRE11]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We need to add the media query that controls the display for smaller devices,
    so go ahead and add the following to a new file and save it as `media.less` in
    the `css` subfolder. We''ll start with setting the screen size for our media query:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要添加控制较小设备显示的媒体查询，所以请在新文件中添加以下内容，并将其保存为`css`子文件夹中的`media.less`。我们将从设置媒体查询的屏幕尺寸开始：
- en: '[PRE12]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next up comes the media query rule that will handle the **Skip To…** link at
    the top of our resized window:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是处理我们调整大小窗口顶部**跳转到…**链接的媒体查询规则：
- en: '[PRE13]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can''t forget the main navigation, so go ahead and add the following line
    of code immediately below the block for `#skipTo`:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们不能忘记主要导航，所以请立即在`#skipTo`的代码块下方添加以下行：
- en: '[PRE14]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: At this point, we should then compile the Less style sheet before previewing
    the results of our work. If we launch `responsive.html` in a browser, we'll see
    our mocked up portfolio page appear as we saw at the beginning of the exercise.
    If we resize the screen to its minimum width, its responsive design kicks in to
    reorder and resize elements on screen, as we would expect to see.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们应该在预览我们工作的结果之前编译Less样式表。如果我们在一个浏览器中启动`responsive.html`，我们会看到我们的模拟投资组合页面出现，就像我们在练习开始时看到的那样。如果我们调整屏幕到其最小宽度，其响应式设计就会启动，对屏幕上的元素进行重新排序和调整大小，正如我们所期望的那样。
- en: Okay, so we now have a responsive page that uses Less CSS for styling; it still
    seems like a lot of code, right?
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，那么我们现在有一个使用Less CSS进行样式的响应式页面；它仍然看起来代码很多，对吧？
- en: Working through the code in detail
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 详细分析代码
- en: Although this seems like a lot of code for a simple page, the principles we've
    used are in fact very simple and are the ones we already used earlier in the book.
    Not convinced? Well, let's look at it in more detail—the focus of this book is
    on responsive images and video, so we'll start with video.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然对于这样一个简单的页面来说，代码似乎很多，但我们所使用的原则实际上非常简单，并且是我们之前在书中已经使用过的。你还不信？那么，让我们更详细地看看——这本书的重点是响应式图片和视频，所以我们将从视频开始。
- en: 'Open the `responsive.css` style sheet and look for the `#video-wrapper` video
    class:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`responsive.css`样式表，查找`#video-wrapper`视频类：
- en: '[PRE15]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Notice how it's set to a `max-width` value of `100%`? We used `max-width` to
    style the original video back in [Chapter 2](ch02.html "Chapter 2. Adding Responsive
    Video Content"), *Adding Responsive Video Content*. It's no different here. Granted,
    we don't want to resize a large video to a really small size—we would use a media
    query to replace it with a smaller version. But, for most purposes, `max-width`
    should be sufficient.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 注意它被设置为`max-width`值为`100%`？我们之前在[第2章](ch02.html "第2章。添加响应式视频内容")中使用了`max-width`来样式化原始视频，*添加响应式视频内容*。这里没有不同。诚然，我们不想将大视频调整到非常小的尺寸——我们会使用媒体查询来替换为更小的版本。但是，对于大多数用途，`max-width`应该是足够的。
- en: 'Now, for the image, this is a little more complicated, but it still uses the
    same principles we applied back in [Chapter 1](ch01.html "Chapter 1. Working with
    Responsive Images"), *Working with Responsive Images*. Let''s start with the code
    from `responsive.less`:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对于图片，这稍微复杂一些，但它仍然使用了我们在[第1章](ch01.html "第1章。处理响应式图片")中应用的原则，*处理响应式图片*。让我们从`responsive.less`中的代码开始：
- en: '[PRE16]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here, we used the `max-width` value again, exactly as we did back in [Chapter
    1](ch01.html "Chapter 1. Working with Responsive Images"), *Working with Responsive
    Images*. In both instances, we can style the element directly, unlike videos where
    we have to add a container in order to style it. The theme continues in the media
    query setup in `media.less`:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们再次使用了`max-width`值，就像我们在[第1章](ch01.html "第1章. 与响应式图片一起工作")中做的那样，*与响应式图片一起工作*。在这两种情况下，我们可以直接对元素进行样式化，而与视频不同，我们必须添加一个容器才能对其进行样式化。这种主题在`media.less`中的媒体查询设置中继续：
- en: '[PRE17]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this instance, we're styling the element to cover the width of the viewport,
    in exactly the same way as we did back in [Chapter 3](ch03.html "Chapter 3. Mixing
    Content"), *Mixing Content*.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们正在对元素进行样式化，以覆盖视口的宽度，这与我们在[第3章](ch03.html "第3章. 混合内容")中做的方式完全相同，*混合内容*。
- en: A small point of note; you might ask why we are using the `rem` values instead
    of the percentage values when styling our image? This is a good question—the key
    to it is that when using pixel values, these do not scale well in responsive designs.
    However, the `rem` values do scale beautifully; we could use percentage values
    if we're so inclined, although they are best suited to instances where we need
    to fill a container that only covers part of the screen (as we did with the video
    for this demo).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，你可能会问为什么我们在对图片进行样式化时使用`rem`值而不是百分比值？这是一个好问题——关键在于，当使用像素值时，这些值在响应式设计中扩展得不好。然而，`rem`值扩展得非常好；如果我们愿意，我们可以使用百分比值，尽管它们最适合于我们需要填充只覆盖屏幕一部分的容器的实例（就像我们在本演示的视频中做的那样）。
- en: Note
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: An interesting article extolling the virtues of why we should use rem units
    is available at [http://techtime.getharvest.com/blog/in-defense-of-rem-units](http://techtime.getharvest.com/blog/in-defense-of-rem-units)
    - it's worth a read. Of particular note is a known bug with using rem values in
    Mobile Safari, which should be considered when developing for mobile platforms;
    with all of the iPhones available, its usage could be said to be higher than Firefox!
    For more details, head over to [http://wtfhtmlcss.com/#rems-mobile-safari](http://wtfhtmlcss.com/#rems-mobile-safari).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 一篇有趣的文章赞扬了我们使用rem单位的好处，可在[http://techtime.getharvest.com/blog/in-defense-of-rem-units](http://techtime.getharvest.com/blog/in-defense-of-rem-units)找到——值得一读。特别值得注意的是，在Mobile
    Safari中使用rem值的一个已知问题，在为移动平台开发时应予以考虑；鉴于所有可用的iPhone，其使用率可以说高于Firefox！更多详情请访问[http://wtfhtmlcss.com/#rems-mobile-safari](http://wtfhtmlcss.com/#rems-mobile-safari)。
- en: Transferring to production use
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转移到生产使用
- en: Throughout this exercise, we used Less to compile our styles on the fly each
    time. This is okay for development purposes, but is not recommended for production
    use. Once we've worked out the requisite styles needed for our site, we should
    always look to precompile them into valid CSS before uploading the results into
    our site.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个练习中，我们使用Less实时编译我们的样式。这对于开发目的来说是可行的，但不建议用于生产。一旦我们确定了网站所需的样式，我们应该始终考虑在将结果上传到我们的网站之前将它们预编译成有效的CSS。
- en: There are a number of options available for this purpose; two of my personal
    favorites are Crunch! available at [http://www.crunchapp.net](http://www.crunchapp.net)
    and the Less2CSS plugin for Sublime Text available at [https://github.com/timdouglas/sublime-less2css](https://github.com/timdouglas/sublime-less2css).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多选项可用于此目的；我个人的两个最喜欢的选项是Crunch!，可在[http://www.crunchapp.net](http://www.crunchapp.net)找到，以及Sublime
    Text的Less2CSS插件，可在[https://github.com/timdouglas/sublime-less2css](https://github.com/timdouglas/sublime-less2css)找到。
- en: Note
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can learn more about precompiling Less code from my new book, *Learning
    Less.js*, by Packt Publishing.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从我的新书《Learning Less.js》中了解更多关于预编译Less代码的信息，由Packt Publishing出版。
- en: Summary
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Wow! We've certainly covered a lot; it shows that adding basic responsive capabilities
    to media need not be difficult. Let's take a moment to recap on what you learned.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！我们确实覆盖了很多内容；这表明给媒体添加基本响应式功能并不困难。让我们花点时间回顾一下你学到了什么。
- en: We kicked off this chapter with an introduction to three real-word scenarios
    that we would then cover. Our first scenario looked at using WordPress. We covered
    how although we can add simple CSS styling to make images and videos responsive,
    the preferred method is to use one of the several plugins available to achieve
    the same result.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以介绍三个现实场景开始了这一章，然后我们将覆盖这些场景。我们的第一个场景是使用WordPress。我们介绍了虽然我们可以添加简单的CSS样式来使图片和视频响应式，但首选的方法是使用可用的几个插件来实现相同的结果。
- en: Our next scenario visited the all too familiar framework known as Twitter Bootstrap.
    In comparison, we saw that this is a much easier framework to work with, in that
    styles have been predefined and that all we needed to do was add the right class
    to the right selector.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来的场景是访问了一个非常熟悉的框架，即 Twitter Bootstrap。相比之下，我们发现这个框架更容易与之合作，因为样式已经被预定义，我们所需做的只是将正确的类添加到正确的选择器上。
- en: Our third and final scenario went completely the opposite way, with a look at
    using the Less CSS preprocessor to handle the styles that we would otherwise have
    manually created. We saw how easy it was to rework the styles we originally created
    earlier in the chapter to produce a more concise and efficient version that compiled
    into valid CSS with no apparent change in design.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第三个也是最后一个场景完全相反，是关于使用 Less CSS 预处理器来处理我们本应手动创建的样式。我们看到了如何轻松地将我们在本章早期创建的样式进行重构，以生成一个更简洁、更高效的版本，该版本编译成有效的
    CSS 而且设计上没有明显变化。
- en: Well, we've now reached the end of the book; all good things must come to an
    end at some point! Nonetheless, I hope you've enjoyed reading the book as much
    as I have writing it. Hopefully, I've shown that adding responsive media to your
    sites need not be as complicated as it might first look and that it gives you
    a good grounding to develop something more complex using responsive media.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我们现在已经到达了这本书的结尾；所有美好的事物最终都必须结束！尽管如此，我希望你阅读这本书的乐趣和我写作这本书的乐趣一样多。希望我已经展示了将响应式媒体添加到您的网站并不需要像最初看起来那么复杂，并且这为您使用响应式媒体开发更复杂的东西提供了一个良好的基础。
