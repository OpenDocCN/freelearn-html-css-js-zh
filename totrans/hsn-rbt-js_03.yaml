- en: Building Interactive Projects with RGB LED
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've  built a project with Johnny-Five and Raspi-IO, it's time to
    tackle GPIO expanders and PWM outputs, and build an interactive project with an
    RGB LED. We'll also learn more about the Johnny-Five REPL, learn how a PWM pin
    works, and use this knowledge to control an RGB LED from the command line.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the LED and LED.RGB API
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PWM pins and GPIO expanders
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bringing in other node packages with color
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Johnny-Five REPL
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will have already installed all the software prerequisites for this chapter
    from [Chapter 1](bab2feb9-9667-4f8b-bb2e-1702009b87b4.xhtml), *Setting Up Your
    Development Environment*. You'll want to make sure your Raspberry Pi is connected
    to the internet and that you have SSHed in using your method of choice.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: The example code for this chapter can be found at [https://github.com/nodebotanist/hands-on-robotics-with-javascript/tree/master/ch3](https://github.com/nodebotanist/hands-on-robotics-with-javascript/tree/master/ch3).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: 'As for hardware, you will need the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Your Raspberry Pi
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cobbler/breadboard
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Breadboard wires
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PCA9685 GPIO expander board
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RGB LED
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 330-ohm resistor x 3
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looking at the LED and LED.RGB API
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We took a brief look at the LED API in Johnny-Five in the last chapter, but
    in this chapter, we will delve deeper and talk about the PWM output and the cousin
    of the standard LED, the RGB LED—so named because it has a red, green, and blue
    channel, and can replicate thousands of colors. We will use an RGB LED, as well
    as some of the more powerful tools built into Johnny-Five, to build an interactive
    project in this chapter.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: The LED object
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The LED object is usually the first thing in Johnny-Five that people look through
    the documentation for. It''s also a great object to use to outline the general
    structure of the object documentation. Let''s take a look at each section and
    get a grasp of where we should look for what later:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '**Parameters**: This section addresses the parameters that need to be passed
    into the object constructor, and what form they need to be in (order, object key,
    and so on).'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shapes**: These are the fields attached to the constructed object that may
    be useful to the user in writing their code. They can be read-only, and are marked
    if this is the case.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Component Initialization**: This is usually a piece of sample code, but it''s
    always a description of how to construct a common usage of the object in question. If
    there are multiple controllers for a specific component, they are enumerated with
    examples for each controller. This will come in handy for our GPIO expander board.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Usage**: This is a sample code denoting how to use the most basic functions
    of an object; for the LED, this is the `blink` function, and for sensors, this
    would show the function that you would usually use to get readings from the sensor.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**API**: This is a full documentation of every function available to the object,
    including the parameters and intended result.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Events**: Many objects emit events (such as the board''s `ready` event);
    this section details when they will fire.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Examples**: The Johnny-Five community is a fantastic source of examples,
    and the examples that are relevant to the object in question will be cataloged
    and linked in this section.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Take a moment to get used to the LED documentation ([http://johnny-five.io/api/led/](http://johnny-five.io/api/led/)),
    because the `Led.RGB` object is essentially a subclass of the LED object, and
    will inherit many of its functions.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: The Led.RGB object
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you''ve acquainted yourself with the LED object, click on the Led.RGB
    link in the sidebar, as shown in the following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/383b380c-eff2-4b96-9fea-2c2d72c4aa25.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
- en: 'You''ll be taken to the Led.RGB documentation page. In the *Component Initialization*
    section, look for the *LED RGB PCA9685* section. Ignore the wiring diagram (it''s
    for the Tessel 2, a different microcontroller), but do make a note of the example
    code, as shown here:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is the code that we will use to initialize our `RGB.LED` object.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: We will also need the API section in order to determine the functions and parameters
    that we will need for using the `RGB.LED` object. Take a look at the `color()`
    function, in particular.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have our module for converting colors into RGB values, we can start
    talking about how to use an RGB LED in order to get those colors into our projects.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: PWM pins and GPIO expanders
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we wire up and run our RGB LED project, a discussion about PWM pins and
    GPIO expanders is warranted, because these are topics that will affect most Johnny-Five
    projects that you will complete.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: How do PWM pins work?
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You don''t always want an LED to at its full brightness, especially in the
    case of RGB LEDs, where the brightness of each channel (red, green, and blue)
    determines the perceived color of the LED. The pins on most microcontrollers are
    digital: they are either HIGH at 5V or LOW at 0V. So how do you adjust the brightness
    of an LED with these types of pins? The answer involves the idea of average voltage
    and the speed at which we can flip a digital pin from HIGH to LOW.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: 'Pulse-width modulation, or PWM, pins operate by setting, effectively, the percentage
    of time that a pin is HIGH and LOW. The following screenshot shows an oscilloscope
    reading for the state of a pin running at 50% over a short period of time:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ecb4a571-2d64-46e8-bbd3-406e66ee51bb.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
- en: Oscilloscope reading for a 50% PWM pin
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of the LED flickering on and off, this results in the LED appearing
    to glow at half-brightness: this is because the human eye cannot keep up with
    the speed of the state changes, and sees the LED as on, but dimmed. This helps
    us to use RGB LEDs to create thousands of different colors by combining a red,
    green, and blue channel at varying degrees of brightness.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: When we set the colors in our Johnny-Five code, we can pass values from `0`
    to `255` for red, green, and blue. This works well with web hex colors, which
    use the same range. In general, you can set a PWM pin from `0` to `255` (with
    some exceptions outside the scope of this book).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Why we need a GPIO expander
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So why do we need a GPIO expander right off the bat, when the Raspberry Pi has
    so many GPIO pins? This is because PWM pins require computing resources and timers,
    and many microcontrollers have a limited number of hardware PWM pins. You can
    emulate PWM pins with software, but the results tend to be on the unreliable side.
    The Arduino Uno, for example, has eight PWM pins. The Raspberry Pi has only one
    GPIO pin, and many projects (including the servo and motor projects included later
    in this book) will require many more than one, and we do not want to use software
    PWM.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 'This is why we are using the PCA9685 GPIO expander: it has 16 dedicated PWM
    pins and provides all the resources to run them. It communicates with the Raspberry
    Pi using a protocol called I²C (pronounced *eye-squared-see*), the details of
    which are outside the scope of this book, and are abstracted away in the Johnny-Five
    component object. See the *Further reading* section if you''d like to learn more
    about how I²C works.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Wiring up our GPIO expander and RGB LED
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, you''ll want to wire the PCA9685 breakout to your PI: GND to GND, VCC
    to 5V, SDA to SDA, and SCL to SCL. Next, wire a second GND pin from the cobbler
    to one of the ground lines on the side of the breadboard. Next, our LED: the long
    leg wires to ground. The leg by itself on one side of the long leg is the red
    channel; wire that to the 0 column PWM row pin on the PCA9685 board. Green and
    blue are on the other side; wire them to PWM-1 and PWM-2, respectively. Once this
    is all done, your project should look similar to the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/60cc32c2-5331-481e-b60d-5ddad2c72b00.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
- en: The finished wiring for this chapter's project
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Bringing in other node packages
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Node.js prides itself on creating small, bordering on tiny, packages, and has
    the excellent npm package manager (and others) to help manage those packages.
    Because the Raspberry Pi runs a full version of Node.js, we can leverage that
    to our advantage and bring in other packages in order to build more interesting
    projects.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Project – building a rainbow
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Can you remember the RGB code for orange off the top of your head? I can''t.
    It''s easier to remember to convert the color systems we do know into RGB (especially
    names such as red, orange, and cornflower blue). But instead of building a function
    to convert it for us, we''ll leverage what I call Stilwell''s law: *if you''ve
    thought of it, it''s probably on npm already*. True to form, the color module
    is going to help us out.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Using the color npm module
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to use the `color npm` module, first we will install it. In your SSH
    session, in your `project` folder, run the following code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will also save the color package to your `package.json` for code portability
    purposes. The module exports a function, which we will use to convert color strings
    like `red` or `#FF0000` to an array of integers representing `red`, `green`, and
    `blue`. We will use these values to set our RGB LED. This is shown in the following
    example:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We'll use this to help set the color of our RGB LED in our Johnny-Five program.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Getting our Johnny-Five code started
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s pull together what we''ve learned about the `Led.RGB` object and the
    color npm module to pull together a basic code project that we will call `rgb-led-rainbow.js`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This code cycles through the colors in the `colors` array and, once per second,
    sets the RGB LED's color and moves forward, generating a rainbow.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: The REPL – a powerful tool in Johnny-Five
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Debugging our LED can be tricky. Without rewiring things, how can we tell if
    our green and blue channels are flipped, or if the red is far brighter than the
    other channels? One tool that is very helpful for debugging Johnny-Five projects
    is the **Read–Eval–Print Loop** (**REPL**).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: How does the REPL work?
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you have worked with Node.js, Python, or a few other interpreted languages
    in the past, the REPL may not be new to you. It allows you to write statements
    into the CLI at runtime to generate results straight from the language engine.
    This can be very helpful when debugging code, as you can get a glimpse into and
    modify the state of code at runtime. This is also true in Johnny-Five: the REPL
    allows us to insert Johnny-Five objects, so we can look at manipulating them at
    runtime. We''re going to use this to play with our RGB LED and control it from
    the command line.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Adding our RGB LED to the REPL
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Take a look at the Johnny-Five documentation for the REPL; it''s in the `Board`
    component section of the API. What matters to us is `this.repl.inject()`, which
    takes an object and makes any property of that object accessible from the CLI.
    Let''s modify our code to make use of the REPL by making the `rainbow` function
    check for a Boolean before setting the LED, and adding that Boolean and the RGB
    LED component object to the CLI:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, we have access to the LED and the Boolean that controls the rainbow cycle
    from the command-line REPL supplied to us by Johnny-Five when we run this code
    on our Raspberry Pi.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Controlling our LED from the command-line interface
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Move the code over to your Raspberry Pi, and in your SSH session, navigate
    to your `project` folder using `cd` and run your project (be sure to use `sudo`!):'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, you can manipulate the RGB LED and the color library to change the light''s
    color. Here are a few things to try:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Summary
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you created your first interactive project with the Raspberry
    Pi and Johnny-Five! We started by exploring the LED and LED.RGB APIs, then explored
    the power that running in Node.js gives us by allowing us to use `npm` modules,
    and then we brought it all together with the REPL!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What does PWM stand for, and what does it accomplish with LEDs?
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PWM代表什么，它与LED有什么作用？
- en: Does the Raspberry Pi have any PWM-capable pins? How many?
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 树莓派有哪些支持PWM功能的引脚？有多少个？
- en: Why do we need a GPIO expander board to control our RGB LED?
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么我们需要一个GPIO扩展板来控制我们的RGB LED？
- en: How many colors would our RGB LED be able to show without PWM?
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不使用PWM，我们的RGB LED能显示多少种颜色？
- en: What protocol does our GPIO expander use to communicate with the Raspberry Pi?
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们GPIO扩展器使用什么协议与树莓派通信？
- en: What does the color module do for us?
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 颜色模块为我们做了什么？
- en: How does the REPL help with debugging? What makes it so powerful?
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: REPL如何帮助调试？是什么让它如此强大？
- en: Further reading
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '**More reading on PWM**: [https://learn.sparkfun.com/tutorials/pulse-width-modulation](https://learn.sparkfun.com/tutorials/pulse-width-modulation)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关于PWM的更多阅读**：[https://learn.sparkfun.com/tutorials/pulse-width-modulation](https://learn.sparkfun.com/tutorials/pulse-width-modulation)'
- en: '**More reading on I²C**: [https://learn.sparkfun.com/tutorials/i2c](https://learn.sparkfun.com/tutorials/i2c)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关于I²C的更多阅读**：[https://learn.sparkfun.com/tutorials/i2c](https://learn.sparkfun.com/tutorials/i2c)'
