- en: Building Interactive Projects with RGB LED
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用RGB LED构建交互式项目
- en: Now that we've  built a project with Johnny-Five and Raspi-IO, it's time to
    tackle GPIO expanders and PWM outputs, and build an interactive project with an
    RGB LED. We'll also learn more about the Johnny-Five REPL, learn how a PWM pin
    works, and use this knowledge to control an RGB LED from the command line.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经使用Johnny-Five和Raspi-IO构建了一个项目，现在是时候处理GPIO扩展器和PWM输出了，并使用RGB LED构建一个交互式项目。我们还将了解更多关于Johnny-Five
    REPL的信息，了解PWM引脚的工作原理，并使用这些知识从命令行控制RGB LED。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Looking at the LED and LED.RGB API
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看LED和LED.RGB API
- en: PWM pins and GPIO expanders
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PWM引脚和GPIO扩展器
- en: Bringing in other node packages with color
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有颜色的其他节点包
- en: The Johnny-Five REPL
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Johnny-Five REPL
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will have already installed all the software prerequisites for this chapter
    from [Chapter 1](bab2feb9-9667-4f8b-bb2e-1702009b87b4.xhtml), *Setting Up Your
    Development Environment*. You'll want to make sure your Raspberry Pi is connected
    to the internet and that you have SSHed in using your method of choice.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经从[第1章](bab2feb9-9667-4f8b-bb2e-1702009b87b4.xhtml)，*设置您的开发环境*中安装了本章所需的全部软件先决条件。您需要确保您的Raspberry
    Pi连接到互联网，并且已经使用您选择的方法SSH登录。
- en: The example code for this chapter can be found at [https://github.com/nodebotanist/hands-on-robotics-with-javascript/tree/master/ch3](https://github.com/nodebotanist/hands-on-robotics-with-javascript/tree/master/ch3).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的示例代码可以在[https://github.com/nodebotanist/hands-on-robotics-with-javascript/tree/master/ch3](https://github.com/nodebotanist/hands-on-robotics-with-javascript/tree/master/ch3)找到。
- en: 'As for hardware, you will need the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于硬件，您需要以下内容：
- en: Your Raspberry Pi
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的Raspberry Pi
- en: Cobbler/breadboard
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cobbler/breadboard
- en: Breadboard wires
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Breadboard wires
- en: PCA9685 GPIO expander board
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PCA9685 GPIO扩展板
- en: RGB LED
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RGB LED
- en: 330-ohm resistor x 3
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 330欧姆电阻 x 3
- en: Looking at the LED and LED.RGB API
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看LED和LED.RGB API
- en: We took a brief look at the LED API in Johnny-Five in the last chapter, but
    in this chapter, we will delve deeper and talk about the PWM output and the cousin
    of the standard LED, the RGB LED—so named because it has a red, green, and blue
    channel, and can replicate thousands of colors. We will use an RGB LED, as well
    as some of the more powerful tools built into Johnny-Five, to build an interactive
    project in this chapter.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们简要地介绍了Johnny-Five中的LED API，但在本章中，我们将深入探讨并讨论PWM输出以及标准LED的表亲RGB LED——之所以这样命名，是因为它有一个红色、绿色和蓝色通道，可以复制数千种颜色。我们将使用RGB
    LED以及Johnny-Five中内置的一些更强大的工具，在本章中构建一个交互式项目。
- en: The LED object
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LED对象
- en: 'The LED object is usually the first thing in Johnny-Five that people look through
    the documentation for. It''s also a great object to use to outline the general
    structure of the object documentation. Let''s take a look at each section and
    get a grasp of where we should look for what later:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: LED对象通常是人们首先查看Johnny-Five文档的对象。它也是一个很好的对象，可以用来概述对象文档的一般结构。让我们看一下每个部分，并了解我们稍后应该在哪里查找什么：
- en: '**Parameters**: This section addresses the parameters that need to be passed
    into the object constructor, and what form they need to be in (order, object key,
    and so on).'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**参数**：本节讨论需要传递给对象构造函数的参数，以及它们需要采取的形式（顺序、对象键等）。'
- en: '**Shapes**: These are the fields attached to the constructed object that may
    be useful to the user in writing their code. They can be read-only, and are marked
    if this is the case.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**形状**：这些是附加到构建对象上的字段，可能对用户编写代码有用。它们可以是只读的，如果是这种情况，会有标记。'
- en: '**Component Initialization**: This is usually a piece of sample code, but it''s
    always a description of how to construct a common usage of the object in question. If
    there are multiple controllers for a specific component, they are enumerated with
    examples for each controller. This will come in handy for our GPIO expander board.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组件初始化**：这通常是一段示例代码，但它始终是对如何构建相关对象的常见用法的描述。如果有多个控制器用于特定组件，它们将使用每个控制器的示例进行列举。这对于我们的GPIO扩展板将很有用。'
- en: '**Usage**: This is a sample code denoting how to use the most basic functions
    of an object; for the LED, this is the `blink` function, and for sensors, this
    would show the function that you would usually use to get readings from the sensor.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用法**：这是一个示例代码，表示如何使用对象的最基本功能；对于LED，这是`blink`函数，对于传感器，这将显示您通常用于从传感器获取读数的函数。'
- en: '**API**: This is a full documentation of every function available to the object,
    including the parameters and intended result.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API**：这是对对象可用的每个函数的完整文档，包括参数和预期结果。'
- en: '**Events**: Many objects emit events (such as the board''s `ready` event);
    this section details when they will fire.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件**：许多对象会发出事件（例如板上的 `ready` 事件）；本节详细说明了它们何时会触发。'
- en: '**Examples**: The Johnny-Five community is a fantastic source of examples,
    and the examples that are relevant to the object in question will be cataloged
    and linked in this section.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**示例**：Johnny-Five 社区是一个极好的示例来源，与所讨论对象相关的示例将被编目并链接在本节中。'
- en: Take a moment to get used to the LED documentation ([http://johnny-five.io/api/led/](http://johnny-five.io/api/led/)),
    because the `Led.RGB` object is essentially a subclass of the LED object, and
    will inherit many of its functions.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 花点时间熟悉 LED 文档 ([http://johnny-five.io/api/led/](http://johnny-five.io/api/led/))，因为
    `Led.RGB` 对象实际上是 LED 对象的一个子类，并将继承其许多功能。
- en: The Led.RGB object
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Led.RGB 对象
- en: 'Once you''ve acquainted yourself with the LED object, click on the Led.RGB
    link in the sidebar, as shown in the following screenshot:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你熟悉了 LED 对象，点击侧边栏中的 Led.RGB 链接，如下截图所示：
- en: '![](img/383b380c-eff2-4b96-9fea-2c2d72c4aa25.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/383b380c-eff2-4b96-9fea-2c2d72c4aa25.png)'
- en: 'You''ll be taken to the Led.RGB documentation page. In the *Component Initialization*
    section, look for the *LED RGB PCA9685* section. Ignore the wiring diagram (it''s
    for the Tessel 2, a different microcontroller), but do make a note of the example
    code, as shown here:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你将被带到 Led.RGB 文档页面。在 *组件初始化* 部分，查找 *LED RGB PCA9685* 部分。忽略布线图（它是为 Tessel 2，一个不同的微控制器），但请注意示例代码，如下所示：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is the code that we will use to initialize our `RGB.LED` object.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将用来初始化 `RGB.LED` 对象的代码。
- en: We will also need the API section in order to determine the functions and parameters
    that we will need for using the `RGB.LED` object. Take a look at the `color()`
    function, in particular.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要 API 部分，以便确定我们使用 `RGB.LED` 对象所需的函数和参数。特别看一下 `color()` 函数。
- en: Now that we have our module for converting colors into RGB values, we can start
    talking about how to use an RGB LED in order to get those colors into our projects.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了将颜色转换为 RGB 值的模块，我们可以开始讨论如何使用 RGB LED 将这些颜色引入我们的项目中。
- en: PWM pins and GPIO expanders
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PWM 引脚和 GPIO 扩展器
- en: Before we wire up and run our RGB LED project, a discussion about PWM pins and
    GPIO expanders is warranted, because these are topics that will affect most Johnny-Five
    projects that you will complete.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们连接并运行 RGB LED 项目之前，关于 PWM 引脚和 GPIO 扩展器的讨论是必要的，因为这些话题将影响你将要完成的绝大多数 Johnny-Five
    项目。
- en: How do PWM pins work?
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PWM 引脚是如何工作的？
- en: 'You don''t always want an LED to at its full brightness, especially in the
    case of RGB LEDs, where the brightness of each channel (red, green, and blue)
    determines the perceived color of the LED. The pins on most microcontrollers are
    digital: they are either HIGH at 5V or LOW at 0V. So how do you adjust the brightness
    of an LED with these types of pins? The answer involves the idea of average voltage
    and the speed at which we can flip a digital pin from HIGH to LOW.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你并不总是想让 LED 以全亮度发光，尤其是在 RGB LED 的情况下，每个通道（红色、绿色和蓝色）的亮度决定了 LED 的感知颜色。大多数微控制器的引脚是数字的：它们在
    5V 时为 HIGH，在 0V 时为 LOW。那么，你如何使用这些类型的引脚调整 LED 的亮度呢？答案涉及到平均电压和我们可以翻转数字引脚从 HIGH 到
    LOW 的速度。
- en: 'Pulse-width modulation, or PWM, pins operate by setting, effectively, the percentage
    of time that a pin is HIGH and LOW. The following screenshot shows an oscilloscope
    reading for the state of a pin running at 50% over a short period of time:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 脉宽调制（PWM）引脚通过设置引脚 HIGH 和 LOW 的时间百分比来操作。以下截图显示了在短时间内以 50% 运行的引脚状态的示波器读数：
- en: '![](img/ecb4a571-2d64-46e8-bbd3-406e66ee51bb.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ecb4a571-2d64-46e8-bbd3-406e66ee51bb.png)'
- en: Oscilloscope reading for a 50% PWM pin
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 50% PWM 引脚的示波器读数
- en: 'Instead of the LED flickering on and off, this results in the LED appearing
    to glow at half-brightness: this is because the human eye cannot keep up with
    the speed of the state changes, and sees the LED as on, but dimmed. This helps
    us to use RGB LEDs to create thousands of different colors by combining a red,
    green, and blue channel at varying degrees of brightness.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 与 LED 闪烁开和关相比，这导致 LED 看起来以半亮度发光：这是因为人眼无法跟上状态变化的速度，看到的是 LED 是开着的，但变暗了。这有助于我们通过组合不同亮度的红、绿、蓝通道来使用
    RGB LED 创建数千种不同的颜色。
- en: When we set the colors in our Johnny-Five code, we can pass values from `0`
    to `255` for red, green, and blue. This works well with web hex colors, which
    use the same range. In general, you can set a PWM pin from `0` to `255` (with
    some exceptions outside the scope of this book).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在Johnny-Five代码中设置颜色时，我们可以传递从`0`到`255`的值给红色、绿色和蓝色。这很好地与使用相同范围的Web十六进制颜色一起工作。一般来说，你可以设置PWM引脚从`0`到`255`（本书范围之外的某些例外除外）。
- en: Why we need a GPIO expander
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么我们需要GPIO扩展器
- en: So why do we need a GPIO expander right off the bat, when the Raspberry Pi has
    so many GPIO pins? This is because PWM pins require computing resources and timers,
    and many microcontrollers have a limited number of hardware PWM pins. You can
    emulate PWM pins with software, but the results tend to be on the unreliable side.
    The Arduino Uno, for example, has eight PWM pins. The Raspberry Pi has only one
    GPIO pin, and many projects (including the servo and motor projects included later
    in this book) will require many more than one, and we do not want to use software
    PWM.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么我们一开始就需要GPIO扩展器，当树莓派有这么多GPIO引脚时？这是因为PWM引脚需要计算资源和定时器，许多微控制器都有有限的硬件PWM引脚。你可以用软件模拟PWM引脚，但结果往往不可靠。例如，Arduino
    Uno有八个PWM引脚。树莓派只有一个GPIO引脚，许多项目（包括本书后面包含的伺服和电机项目）将需要比一个更多的引脚，我们不希望使用软件PWM。
- en: 'This is why we are using the PCA9685 GPIO expander: it has 16 dedicated PWM
    pins and provides all the resources to run them. It communicates with the Raspberry
    Pi using a protocol called I²C (pronounced *eye-squared-see*), the details of
    which are outside the scope of this book, and are abstracted away in the Johnny-Five
    component object. See the *Further reading* section if you''d like to learn more
    about how I²C works.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么我们使用PCA9685 GPIO扩展器的原因：它有16个专用的PWM引脚，并提供所有资源来运行它们。它使用名为I²C（发音为*eye-squared-see*）的协议与树莓派通信，其细节超出了本书的范围，并且被封装在Johnny-Five组件对象中。如果你想了解更多关于I²C如何工作，请参阅*进一步阅读*部分。
- en: Wiring up our GPIO expander and RGB LED
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接我们的GPIO扩展器和RGB LED
- en: 'First, you''ll want to wire the PCA9685 breakout to your PI: GND to GND, VCC
    to 5V, SDA to SDA, and SCL to SCL. Next, wire a second GND pin from the cobbler
    to one of the ground lines on the side of the breadboard. Next, our LED: the long
    leg wires to ground. The leg by itself on one side of the long leg is the red
    channel; wire that to the 0 column PWM row pin on the PCA9685 board. Green and
    blue are on the other side; wire them to PWM-1 and PWM-2, respectively. Once this
    is all done, your project should look similar to the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你将想要将PCA9685扩展板连接到你的PI上：GND连接到GND，VCC连接到5V，SDA连接到SDA，SCL连接到SCL。接下来，从cobbler连接一个第二个GND引脚到面包板侧面的一个地线。然后是我们的LED：长腿连接到地线。长腿一侧单独的腿是红色通道；将其连接到PCA9685板上的0列PWM行引脚。绿色和蓝色在另一侧；分别将它们连接到PWM-1和PWM-2。完成所有这些后，你的项目应该看起来类似于以下：
- en: '![](img/60cc32c2-5331-481e-b60d-5ddad2c72b00.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/60cc32c2-5331-481e-b60d-5ddad2c72b00.png)'
- en: The finished wiring for this chapter's project
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 本章项目的完成布线
- en: Bringing in other node packages
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入其他Node包
- en: Node.js prides itself on creating small, bordering on tiny, packages, and has
    the excellent npm package manager (and others) to help manage those packages.
    Because the Raspberry Pi runs a full version of Node.js, we can leverage that
    to our advantage and bring in other packages in order to build more interesting
    projects.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 以创建小型、几乎微小的包而自豪，并且拥有出色的npm包管理器（以及其他工具）来帮助管理这些包。因为树莓派运行的是完整的Node.js版本，我们可以利用这一点来构建更有趣的项目。
- en: Project – building a rainbow
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目 - 构建彩虹
- en: 'Can you remember the RGB code for orange off the top of your head? I can''t.
    It''s easier to remember to convert the color systems we do know into RGB (especially
    names such as red, orange, and cornflower blue). But instead of building a function
    to convert it for us, we''ll leverage what I call Stilwell''s law: *if you''ve
    thought of it, it''s probably on npm already*. True to form, the color module
    is going to help us out.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你能立刻想起橙色RGB代码吗？我做不到。将我们已知颜色系统转换为RGB（尤其是像红色、橙色和矢车菊蓝这样的名称）更容易记住。但与其构建一个为我们转换颜色的函数，我们不如利用我所说的Stilwell定律：*如果你想到了，它可能已经在npm上了*。不出所料，颜色模块将帮助我们。
- en: Using the color npm module
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`color npm`模块
- en: 'In order to use the `color npm` module, first we will install it. In your SSH
    session, in your `project` folder, run the following code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用`color npm`模块，我们首先需要安装它。在你的SSH会话中，在你的`项目`文件夹中，运行以下代码：
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will also save the color package to your `package.json` for code portability
    purposes. The module exports a function, which we will use to convert color strings
    like `red` or `#FF0000` to an array of integers representing `red`, `green`, and
    `blue`. We will use these values to set our RGB LED. This is shown in the following
    example:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这也将保存颜色包到您的 `package.json` 中，以便于代码的可移植性。该模块导出一个函数，我们将使用它将像 `red` 或 `#FF0000`
    这样的颜色字符串转换为表示 `red`、`green` 和 `blue` 的整数数组。我们将使用这些值来设置我们的 RGB LED。以下是一个示例：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We'll use this to help set the color of our RGB LED in our Johnny-Five program.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这个功能来帮助设置 Johnny-Five 程序中 RGB LED 的颜色。
- en: Getting our Johnny-Five code started
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动我们的 Johnny-Five 代码
- en: 'Let''s pull together what we''ve learned about the `Led.RGB` object and the
    color npm module to pull together a basic code project that we will call `rgb-led-rainbow.js`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们结合我们对 `Led.RGB` 对象和颜色 npm 模块的了解，来创建一个基本的代码项目，我们将称之为 `rgb-led-rainbow.js`：
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This code cycles through the colors in the `colors` array and, once per second,
    sets the RGB LED's color and moves forward, generating a rainbow.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码循环遍历 `colors` 数组中的颜色，并且每秒设置一次 RGB LED 的颜色，并向前移动，生成彩虹。
- en: The REPL – a powerful tool in Johnny-Five
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: REPL - Johnny-Five 中的强大工具
- en: Debugging our LED can be tricky. Without rewiring things, how can we tell if
    our green and blue channels are flipped, or if the red is far brighter than the
    other channels? One tool that is very helpful for debugging Johnny-Five projects
    is the **Read–Eval–Print Loop** (**REPL**).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 调试我们的 LED 可能很棘手。在不重新布线的情况下，我们如何判断我们的绿色和蓝色通道是否颠倒，或者红色是否比其他通道亮得多？一个在调试 Johnny-Five
    项目时非常有用的工具是 **读-求值-打印循环**（**REPL**）。
- en: How does the REPL work?
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: REPL 是如何工作的？
- en: 'If you have worked with Node.js, Python, or a few other interpreted languages
    in the past, the REPL may not be new to you. It allows you to write statements
    into the CLI at runtime to generate results straight from the language engine.
    This can be very helpful when debugging code, as you can get a glimpse into and
    modify the state of code at runtime. This is also true in Johnny-Five: the REPL
    allows us to insert Johnny-Five objects, so we can look at manipulating them at
    runtime. We''re going to use this to play with our RGB LED and control it from
    the command line.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您以前使用过 Node.js、Python 或其他一些解释型语言，REPL 可能对您来说并不陌生。它允许您在运行时将语句写入 CLI 以直接从语言引擎生成结果。这在调试代码时非常有帮助，因为您可以在运行时查看并修改代码的状态。这在
    Johnny-Five 中也是如此：REPL 允许我们插入 Johnny-Five 对象，因此我们可以查看并操作它们在运行时的状态。我们将使用这个功能来玩我们的
    RGB LED 并从命令行控制它。
- en: Adding our RGB LED to the REPL
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将我们的 RGB LED 添加到 REPL
- en: 'Take a look at the Johnny-Five documentation for the REPL; it''s in the `Board`
    component section of the API. What matters to us is `this.repl.inject()`, which
    takes an object and makes any property of that object accessible from the CLI.
    Let''s modify our code to make use of the REPL by making the `rainbow` function
    check for a Boolean before setting the LED, and adding that Boolean and the RGB
    LED component object to the CLI:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看 Johnny-Five 文档中的 REPL；它位于 API 的 `Board` 组件部分。对我们来说重要的是 `this.repl.inject()`，它接受一个对象，并使该对象的所有属性从
    CLI 可访问。让我们修改我们的代码，通过使 `rainbow` 函数在设置 LED 之前检查布尔值，并将该布尔值和 RGB LED 组件对象添加到 CLI
    中来利用 REPL：
- en: '[PRE4]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, we have access to the LED and the Boolean that controls the rainbow cycle
    from the command-line REPL supplied to us by Johnny-Five when we run this code
    on our Raspberry Pi.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过 Johnny-Five 在 Raspberry Pi 上运行此代码时提供的命令行 REPL 访问 LED 和控制彩虹循环的布尔值。
- en: Controlling our LED from the command-line interface
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从命令行界面控制我们的 LED
- en: 'Move the code over to your Raspberry Pi, and in your SSH session, navigate
    to your `project` folder using `cd` and run your project (be sure to use `sudo`!):'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 将代码移动到您的 Raspberry Pi 上，并在 SSH 会话中，使用 `cd` 命令导航到您的 `project` 文件夹，然后运行您的项目（务必使用
    `sudo`！）：
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, you can manipulate the RGB LED and the color library to change the light''s
    color. Here are a few things to try:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以操作 RGB LED 和颜色库来改变灯光的颜色。这里有一些您可以尝试的事情：
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Summary
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you created your first interactive project with the Raspberry
    Pi and Johnny-Five! We started by exploring the LED and LED.RGB APIs, then explored
    the power that running in Node.js gives us by allowing us to use `npm` modules,
    and then we brought it all together with the REPL!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您使用 Raspberry Pi 和 Johnny-Five 创建了您的第一个交互式项目！我们首先探索了 LED 和 LED.RGB API，然后通过允许我们使用
    `npm` 模块来探索在 Node.js 中运行的力量，然后我们通过 REPL 将所有这些结合起来！
- en: Questions
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What does PWM stand for, and what does it accomplish with LEDs?
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PWM代表什么，它与LED有什么作用？
- en: Does the Raspberry Pi have any PWM-capable pins? How many?
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 树莓派有哪些支持PWM功能的引脚？有多少个？
- en: Why do we need a GPIO expander board to control our RGB LED?
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么我们需要一个GPIO扩展板来控制我们的RGB LED？
- en: How many colors would our RGB LED be able to show without PWM?
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不使用PWM，我们的RGB LED能显示多少种颜色？
- en: What protocol does our GPIO expander use to communicate with the Raspberry Pi?
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们GPIO扩展器使用什么协议与树莓派通信？
- en: What does the color module do for us?
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 颜色模块为我们做了什么？
- en: How does the REPL help with debugging? What makes it so powerful?
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: REPL如何帮助调试？是什么让它如此强大？
- en: Further reading
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '**More reading on PWM**: [https://learn.sparkfun.com/tutorials/pulse-width-modulation](https://learn.sparkfun.com/tutorials/pulse-width-modulation)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关于PWM的更多阅读**：[https://learn.sparkfun.com/tutorials/pulse-width-modulation](https://learn.sparkfun.com/tutorials/pulse-width-modulation)'
- en: '**More reading on I²C**: [https://learn.sparkfun.com/tutorials/i2c](https://learn.sparkfun.com/tutorials/i2c)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关于I²C的更多阅读**：[https://learn.sparkfun.com/tutorials/i2c](https://learn.sparkfun.com/tutorials/i2c)'
