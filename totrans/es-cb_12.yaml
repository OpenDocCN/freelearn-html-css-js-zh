- en: Working with Sets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding and deleting items from a Set
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Set from existing data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding and deleting items from a WeakSet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a WeakSet from existing data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding the union of two sets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding the intersection of two sets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding the difference between two sets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a class that wraps a Set to work with more complex types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For our final chapter, we'll be taking a look at two more new, related types.
    `Set` and `WeakSet`, like `Map` and `WeakMap`, are collections of other values.
    However, rather than creating relationships between pairs of values, `Set` and
    `WeakSet` create a relationship between all entries in the collection. These data
    structures ensure that there are no duplicated entries. If a new item evaluates
    as equal with another member, it won't be added to the `Set`.
  prefs: []
  type: TYPE_NORMAL
- en: The recipes in this chapter will illustrate how to implement different behaviors
    with the set classes.
  prefs: []
  type: TYPE_NORMAL
- en: Adding and deleting items from a Set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start out with the simplest possible tasks involving a `Set`. In this
    recipe, we'll take a look at how to add and delete items from a `Set` using the
    respective instance methods.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application, and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `12-01-add-remove-from-set`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a `main` function. In that function, create
    a new `Set` instance, then add and remove a few items from it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server, and open the following URL in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/224ef062-02a4-4f7d-94e1-205afe5216ae.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A set is a collection of data. But it behaves differently than the more familiar
    `Array` type. Like mathematical sets, a `Set` instance is meant to only have a
    single copy of an element. That is, if you had an `Array` of numbers and a `Set`
    of numbers, the `Array` could contain the number `138` several times, but the
    `Set` could only contain a single copy if it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Membership to a Set is evaluated similarly to the `===` operator. In our case,
    you can see that `US: Saturn V` is only added to the set a single time, despite
    being provided as an argument to `add` twice. Next, you can see that `US: Falcon
    Heavy` is removed after being initially added. Subsequently, the set only has
    a single member.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about sets, visit the Mozilla developer documentation at the
    following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Set from existing data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We just saw how to add values individually to sets. This can be tedious, however.
    For example, if we are working with a dataset that might be very large or unknown
    ahead of time, it would be nice to initialize a map with a function call, rather
    than hundreds or thousands.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll take a look at how to create a new Set with the preexisting
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application, and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `12-02-create-set-from-data`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a `main` function with an array of string.
    Create a new set with that array as a constructor argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server, and the following URL in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8d2f887e-24ee-42b7-b9f7-43de30197478.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the preceding recipe we see how to create a `Set` with existing data. The
    constructor for a `Set` takes an `iterable` as an argument. The most familiar
    `iterable` is an array. In the case of the `Set`, each element in the `iterable`
    (array) is added to the collection in order. As we mentioned in the preceding
    recipe, membership of a `Set` is determined using a similar comparison to the
    `===` operator. Sets don''t allow duplicate values. Thus, we only see a single
    `US: Saturn V` in the `<entries>` section of the output.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding and deleting items from WeakSet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we'll take a look at the corresponding weak data structure, `WeakSet`.
    In this recipe, we'll look at how to add and delete items from a `WeakSet`, using
    the respective instance methods, and at some restrictions on membership.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application, and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `12-03-add-remove-from-weak-set`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new class named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function with some `Rocket` instances and a `WeakMap` instance.
    Add and remove the instances from the set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server, and open the following URL in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b01fec77-d825-4111-8468-349ee0678e81.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Membership to a `WeakSet` is evaluated similarly to the `===` operator. Looking
    at the  preceding, we can see that two `Rocket` instances with the name `US: Saturn
    V` are added to the set. This is, of course, because the set isn''t comparing
    name properties, but object instances. Thus, we''ll see two rather than one (unique
    names) or three (number of times added) `US: Saturn V` entries.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you can see that the `US: Falcon Heavy` is removed after being initially
    added. Subsequently, the set doesn''t have that member.'
  prefs: []
  type: TYPE_NORMAL
- en: An error is thrown when trying to add a string to the `WeakSet`. Like the keys
    of `WeakMap`, the elements of `WeakSet` must be objects. This is so that the `WeakSet`
    can only keep weak references to its entries. Thus, the memory allocated for the
    entries can be released when other references go out of scope.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a WeakSet from existing data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We just saw how to create a Set from existing data. The related class `WeakSet`
    can be created in a similar way, but has restrictions on membership. In this recipe,
    we'll take a look at how to create a `WeakSet` from existing data and some restrictions
    on membership.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application, and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `12-04-create-weak-set-from-data`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new class named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function with an array of rocket instances. Create a new `WeakSet`
    from the array. Try to add a string to `WeakSet`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server, and open the following URL in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fd90e972-6cb5-43d9-9e0c-190cb807e89f.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like the Set constructor, the `WeakSet` constructor takes an iterable.
    Each element of the array is added in turn. We'll note that multiple instances
    have the same `name` property. This is, of course, because they are separate `Rocket`
    instances, despite having the same name value.
  prefs: []
  type: TYPE_NORMAL
- en: Finding the union of two sets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've got a good handle on sets, it's time to start performing some
    set operations. Sets are unordered groups of things; something you might want
    to do is to combine two groups into one. This operation is called a `union` of
    two sets. An element is in the union of two sets, if it exists in either of them.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll take a look at how to create a union of two `Set` instances.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application, and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `12-05-set-union`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new class named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a function called `union` that takes two set arguments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `result` set. Loop through both set instances, and add each `entry`
    to the resultant set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function. Create a couple of sets with overlapping members.
    Log out from the union of the two sets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server, and open the following URL in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/83a13115-9f0c-44e5-bf23-dc13e0bec3a5.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding recipe, we rely on the properties of `Set` to implement the
    `union` operation. As stated before, sets do not store duplicate entries. So,
    when creating the union, we don't have to worry about adding duplicates to the
    resulting set, because that is taken care of for us by the class. Simply looping
    over all the members and adding them is sufficient to create the union set.
  prefs: []
  type: TYPE_NORMAL
- en: Finding the intersection of two sets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we'll take a look at how to find out the elements two Sets have in common.
    This operation is called an `intersection` of two sets. An element is in the intersection
    of two sets, if it exists in both of them.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to create an intersection of two `Set` instances.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application, and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `12-06-set-intersection`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new class named `Rocket` that takes
    a constructor argument name and assigns it to an instance property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a function called `intersection` that takes two `set` arguments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `result` set. Loop through the first `set` instance. Add each `entry`
    to the resultant `set`, if it appears in the second `set` as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function. Create a couple of sets with overlapping members.
    Log out the intersection of the two sets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server, and open the following URL in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7f0d661d-8929-4767-89d6-9f2b0bcf3ac8.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An intersection of two sets is defined as all the elements that appear in both
    sets. In this recipe, we use the `has` method to implement an `intersection` operation.
    We loop over the elements of the first `Set` and check whether the second contains
    each element. If the second `Set` contains that element, then the `has` method
    will return true. If this method returns true, then we know that the element is
    in both `Set` instances, and we add it to the new intersection.
  prefs: []
  type: TYPE_NORMAL
- en: Finding the difference between two sets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've seen how to combine two sets with the union operation, and find their
    common elements with the intersection  operation. The logical next step is to
    see how the sets differ. Next, we'll take a look at how to find out what elements
    one set has that another doesn't. This operation is called a `difference` of two
    sets. An element is in the difference of two sets, if it is in the first set,
    but not the second.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll take a look at how to find the difference between two
    `Set` instances.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application, and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `12-07-set-difference`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new class named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a function called `difference` that takes two `set` arguments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `result` set. Loop through the first set instance. Add each entry
    to the resultant set, if it does not appear in the second `set`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function. Create a couple of sets with overlapping members.
    Log out the differences of the two sets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server, and open the following URL in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7e6263e9-ae94-4c1f-b61b-4327ff90cf22.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding recipe, we rely on the `has` method on the `Set` class that
    implements the `difference` operation. An element of a `difference` must appear
    in the first set but not the second. When looping over the first set, we know
    that the element is part of the first. Next, we simply have to check whether it
    is in the second using the `has` method. If this method returns false, then we
    know that the element is in the difference.
  prefs: []
  type: TYPE_NORMAL
- en: An important distinction between difference and the other two operations we've
    seen (union and intersection) is that it is not commutative, that is, the order
    of arguments matters. You can see in the preceding recipe that the result of the
    difference function changes depending on which set is being differentiated from
    the other.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a class that wraps a Set to work with more complex types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Knowing what types we are working with is valuable. `WeakSet` has some restriction
    on membership, but as you may know, objects can vary quite a lot.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll take a look at how to create a wrapper class for `Map`
    in order to control what types are used in the `Map`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: If you are unfamiliar with the `WeakMap` class, refer to the *Setting and deleting
    entries from a WeakMap* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application, and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `12-08-create-class-to-wrap-set`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new class named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a class `RocketSet` file that creates a new map and assigns it as an
    instance property in the constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an `add` method that checks the type of the `key` and `value` arguments.
    This method should throw if the argument types are incorrect; otherwise, set the
    pair as an entry on the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a `has` method that returns `true` in the contained set has that entry:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function. Attempt to set various key and value pairs to an
    instance of `RocketSet`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following URL in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0a1ec30c-4187-4e15-87ab-dd2f878c96e2.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From the implementation of the `add` method, we can see where the types of the
    argument are being checked. The `Rocket` instances behave like other instances
    we've seen in other recipes, and can be checked like the others. When the incorrect
    type is passed as an argument to add, one of the conditionals will trigger and
    an error will be thrown.
  prefs: []
  type: TYPE_NORMAL
- en: We don't have to check the types for the `has` method; it doesn't mutate the
    collection, and it will return `false` anyway if the argument isn't a `Rocket`.
  prefs: []
  type: TYPE_NORMAL
