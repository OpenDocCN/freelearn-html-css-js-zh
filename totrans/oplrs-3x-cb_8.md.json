["```js\n    <script type=\"text/javascript\" src=\"img/proj4js-compressed.js\"></script>\n\n    ```", "```js\n    <textarea id=\"textarea\" name=\"textarea\" data-dojo-type=\"dijit.form.SimpleTextarea\" rows=\"4\" cols=\"80\"></textarea>\n    <br/><br/>\n    <div id=\"ch08_projections\" style=\"width: 100%; height: 85%;\"></div>\n\n    ```", "```js\n    <script type=\"text/javascript\">\n        // Create the click control\n        OpenLayers.Control.Click = OpenLayers.Class(OpenLayers.Control, {    \n\n            defaultHandlerOptions: {\n                'single': true,\n                'double': false,\n                'pixelTolerance': 0,\n                'stopSingle': false,\n                'stopDouble': false\n            },\n\n            initialize: function(options) {\n                this.handlerOptions = OpenLayers.Util.extend({}, this.defaultHandlerOptions);\n                OpenLayers.Control.prototype.initialize.apply(this, arguments); \n                this.handler = new OpenLayers.Handler.Click(\n                this, {\n                    'click': this.trigger\n                }, \n                this.handlerOptions);\n            }, \n\n    ```", "```js\n            trigger: function(e) {\n                var lonlatS = map.getLonLatFromViewPortPx(e.xy);\n                var lonlatT1 = lonlatS.clone().transform( map.getProjectionObject(), new OpenLayers.Projection(\"EPSG:41001\") );\n                var lonlatT2 = lonlatS.clone().transform( map.getProjectionObject(), new OpenLayers.Projection(\"EPSG:4326\") );\n\n                var message = \"Click at: \\n\"+\n                    \"Lon: \" + lonlatS.lon + \" , Lat: \"+lonlatS.lat + \" (\"+map.getProjection()+\")\\n\" +\n                    \"Lon: \" + lonlatT2.lon + \" , Lat: \"+lonlatT2.lat + \" (EPSG:4326) \\n\" +\n                    \"Lon: \" + lonlatT1.lon + \" , Lat: \"+lonlatT1.lat + \" (EPSG:41001) \\n\";\n\n                dijit.byId(\"textarea\").set('value', message);\n            },\n\n            CLASS_NAME: \"OpenLayers.Control.Click\"\n        });\n\n    ```", "```js\n        var map = new OpenLayers.Map(\"ch08_projections\");\n        var osm = new OpenLayers.Layer.OSM();\n        map.addLayer(osm);\n        map.setCenter(new OpenLayers.LonLat(0,0), 2);\n\n    ```", "```js\n        var click = new OpenLayers.Control.Click();\n        map.addControl(click);\n        click.activate();\n    </script>\n\n    ```", "```js\n<script type=\"text/javascript\" src=\"img/proj4js-compressed.js\"></script>\n\n```", "```js\n        trigger: function(e) {\n            var lonlatS = map.getLonLatFromViewPortPx(e.xy);\n            var lonlatT1 = lonlatS.clone().transform( map.getProjectionObject(), new OpenLayers.Projection(\"EPSG:41001\") );\n            var lonlatT2 = lonlatS.clone().transform( map.getProjectionObject(), new OpenLayers.Projection(\"EPSG:4326\") );\n            ...\n            ...\n\n```", "```js\n    OpenLayers.Control.Click = OpenLayers.Class(OpenLayers.Control, {\n\n```", "```js\n        defaultHandlerOptions: {\n            'single': true,\n            'double': false,\n            'pixelTolerance': 0,\n            'stopSingle': false,\n            'stopDouble': false\n        },\n\n```", "```js\n        initialize: function(options) {\n            this.handlerOptions = OpenLayers.Util.extend({}, this.defaultHandlerOptions);\n            OpenLayers.Control.prototype.initialize.apply(this, arguments); \n            this.handler = new OpenLayers.Handler.Click(\n            this, {\n                'click': this.trigger\n            }, \n            this.handlerOptions);\n        }, \n\n```", "```js\n        CLASS_NAME: \"OpenLayers.Control.Click\"\n    });\n\n```", "```js\n    <div id=\"ch08_requesting\" style=\"width: 100%; height: 95%;\"></div>\n\n    ```", "```js\n        var map = new OpenLayers.Map(\"ch08_requesting\");\n        var osm = new OpenLayers.Layer.OSM();\n        map.addLayer(osm);\n\n        // Certer viewport\n        map.setCenter(new OpenLayers.LonLat(0,0), 2);\n\n    ```", "```js\n        var vectorLayer = new OpenLayers.Layer.Vector(\"Points\");\n        map.addLayer(vectorLayer);\n\n    ```", "```js\n        OpenLayers.Request.GET({\n            url: \"utils/points.php\",\n            params: {\n                num: 100\n            },\n            success: function(response) {\n                var format = new OpenLayers.Format.JSON();\n\n                var points = format.read(response.responseText);\n                for(var i=0; i< points.length; i++) {\n                    var p = new OpenLayers.Geometry.Point(points[i].x, points[i].y);\n                    p.transform(new OpenLayers.Projection(\"EPSG:4326\"), new OpenLayers.Projection(\"EPSG:900913\"));\n\n                    var f = new OpenLayers.Feature.Vector(p);\n                    vectorLayer.addFeatures([f]);\n                }\n            },\n            failure: function(response) {\n                alert(\"Sorry, there was an error requesting data !!!\");\n            }\n        });\n\n    ```", "```js\n    OpenLayers.Request.GET({\n        url: \"utils/points.php\",\n        params: {\n            num: 100\n        },\n        success: function(response) {\n            ...\n        },\n        failure: function(response) {\n            ...\n        }\n    });\n\n```", "```js\n            var format = new OpenLayers.Format.JSON();            \n            var points = format.read(response.responseText);\n\n```", "```js\n            for(var i=0; i< points.length; i++) {\n                var p = new OpenLayers.Geometry.Point(points[i].x, points[i].y);\n                p.transform(new OpenLayers.Projection(\"EPSG:4326\"), new OpenLayers.Projection(\"EPSG:900913\"));\n\n                var f = new OpenLayers.Feature.Vector(p);\n                vectorLayer.addFeatures([f]);\n            }\n\n```", "```js\n    <script type=\"text/javascript\" src=\"img/crossControl.js\"></script>\n\n    ```", "```js\n    <style>\n        .olControlCross {\n            width: 48px;\n            height: 48px;\n            background: url('./recipes/data/target.png') no-repeat;\n        }\n        .olControlCrossText {\n            position: relative;\n            top: -10px;\n            width: 200px;\n            color: black;\n        }\n    </style>\n\n    ```", "```js\n    <div id=\"ch08_drawing_cross\" style=\"width: 100%; height: 95%;\"></div>\n\n    ```", "```js\n        var map = new OpenLayers.Map(\"ch08_drawing_cross\");\n        var layer = new OpenLayers.Layer.WMS( \"OpenLayers WMS\",\n        \"http://vmap0.tiles.osgeo.org/wms/vmap0\", {layers: 'basic'} );\n        map.addLayer(layer);\n\n        // Certer viewport\n        map.setCenter(new OpenLayers.LonLat(0,0), 2);\n\n    ```", "```js\n        var crossControl = new OpenLayers.Control.Cross({\n            eventListeners: {\n                \"crossClick\": function(event) {\n                    var lonlat = event.lonlat;\n                    var message = \"Clicked on: \" + lonlat.lon + \" / \" + lonlat.lat;\n                    alert(message);\n                }\n            }\n        });\n        map.addControl(crossControl);\n        crossControl.activate();\n\n    ```", "```js\n    /** \n     * Class: OpenLayers.Control.Cross \n     * The Cross control renders a cross in the middle of the map. \n     * \n     * Inherits from: \n     *  - <OpenLayers.Control> \n     */ \n\n    ```", "```js\n    OpenLayers.Control.Cross = OpenLayers.Class(OpenLayers.Control, {\n\n    ```", "```js\n        /** \n         * crossClick event is triggered when the cross is clicked by the mouse. \n         */ \n        EVENT_TYPES: [\"crossClick\"], \n\n    ```", "```js\n        /** \n         * Parameter: size \n         * {OpenLayers.Size} with the desired dimension for the image \n         */ \n        size: null, \n\n    ```", "```js\n        /** \n         * Parameter: element \n         * {DOMElement} for the label shown by the control \n         */ \n        element: null, \n\n    ```", "```js\n        /** \n         * Constructor: OpenLayers.Control.Cross \n         * Draw a cross in the middle of the map. \n         * \n         * Parameters: \n         * options - {Object} An optional object whose properties will be used \n         *     to extend the control. \n         */ \n        initialize: function(options) { \n            // Concatenate events specific to measure with those from the base \n            this.EVENT_TYPES = \n            OpenLayers.Control.Cross.prototype.EVENT_TYPES.concat( \n                OpenLayers.Control.prototype.EVENT_TYPES); \n\n            if(!options) { \n                options = {}; \n            }        \n            if(!options.size) { \n                options.size = new OpenLayers.Size(48, 48); \n            } \n            OpenLayers.Control.prototype.initialize.apply(this, [options]); \n        }, \n\n    ```", "```js\n        /** \n         * Method: draw \n         * \n         * Returns: \n         * {DOMElement} \n         */    \n        draw: function() { \n\n            // Compute center position \n            var position = new OpenLayers.Pixel( \n                (this.map.div.offsetWidth - this.size.w) / 2, \n                (this.map.div.offsetHeight - this.size.h) / 2 \n                ); \n\n    ```", "```js\n            OpenLayers.Control.prototype.draw.apply(this, [position]); \n\n    ```", "```js\n            // Create location label element \n            this.element = OpenLayers.Util.createDiv(null); \n            OpenLayers.Element.addClass(this.element, \"olControlCrossText\"); \n\n    ```", "```js\n            var lonlat = this.computeLonLat();(); \n            this.element.innerHTML = lonlat.lon + \" / \" + lonlat.lat; \n\n    ```", "```js\n            this.div.appendChild(this.element);\n\n    ```", "```js\n            // Listen for event in the control's div \n            OpenLayers.Event.observe(this.div, 'click', OpenLayers.Function.bind(this.onClick, this));\n\n    ```", "```js\n            // Register event for map's move event. \n            this.map.events.register(\"move\", this, this.onMove); \n\n    ```", "```js\n            return this.div; \n        }, \n\n    ```", "```js\n        /** \n         * Updates the location text. \n         */ \n        onMove: function (event) { \n            var lonlat = this.computeLonLat(); \n            this.element.innerHTML = lonlat.lon + \" / \" + lonlat.lat; \n        }, \n\n    ```", "```js\n        /** \n         * Fires a crossClick event. \n         */ \n        onClick: function (event) { \n            var lonlat = this.computeLonLat(); \n            this.events.triggerEvent(\"crossClick\", { \n                lonlat: lonlat \n            }); \n        }, \n\n    ```", "```js\n        /** \n         * Computes the control location. \n         * \n         * Returns: \n         * {<OpenLayers.LonLat>} \n         */ \n        computeLonLat: function() { \n            var pixel = this.position.clone(); \n            pixel.x += this.size.w/2; \n            pixel.y += this.size.h/2; \n            return this.map.getLonLatFromPixel(pixel); \n        }, \n\n    ```", "```js\n        CLASS_NAME: \"OpenLayers.Control.Cross\" \n    }); \n\n    ```", "```js\n    var crossControl = new OpenLayers.Control.Cross({\n        eventListeners: {\n            \"crossClick\": function(event) {\n                var lonlat = event.lonlat;\n                var message = \"Clicked on: \" + lonlat.lon + \" / \" + lonlat.lat;\n                alert(message);\n            }\n        }\n    });\n\n```", "```js\nOpenLayers.Control.Cross = OpenLayers.Class(OpenLayers.Control, { \n    ...\n});\n\n```", "```js\n        initialize: function(options) { \n            // Concatenate events specific to measure with those from the base \n            this.EVENT_TYPES = \n            OpenLayers.Control.Cross.prototype.EVENT_TYPES.concat( \n                OpenLayers.Control.prototype.EVENT_TYPES);\n\n    ```", "```js\n            if(!options) { \n                options = {}; \n            }        \n            if(!options.size) { \n                options.size = new OpenLayers.Size(48, 48); \n            } \n\n    ```", "```js\n            OpenLayers.Control.prototype.initialize.apply(this, [options]); \n        }, \n\n    ```", "```js\n    <script type=\"text/javascript\" src=\"img/gradientRenderer.js\"></script>\n\n    ```", "```js\n    <div id=\"ch08_renderer\" style=\"width: 100%; height: 95%;\"></div>\n\n    ```", "```js\n        var map = new OpenLayers.Map(\"ch08_renderer\");    \n        var osm = new OpenLayers.Layer.OSM();\n        map.addLayer(osm);\n\n    ```", "```js\n        var center = new OpenLayers.LonLat(-80,40);\n        center.transform(new OpenLayers.Projection(\"EPSG:4326\"), new OpenLayers.Projection(\"EPSG:900913\"));\n        map.setCenter(center, 5);\n\n    ```", "```js\n        var styles = {\n            7: { pointRadius: 5, label: \"${POP_RANK}\", fillColor: \"#FFF8DC\", fillOpacity: 0.6},\n            6: { pointRadius: 8, label: \"${POP_RANK}\", fillColor: \"#FFE4C4\", fillOpacity: 0.6},\n            5: { pointRadius: 11, label: \"${POP_RANK}\", fillColor: \"#DEB887\", fillOpacity: 0.6},\n            4: { pointRadius: 14, label: \"${POP_RANK}\", fillColor: \"#DAA520\", fillOpacity: 0.7},\n            3: { pointRadius: 16, label: \"${POP_RANK}\", fillColor: \"#CD853F\", fillOpacity: 0.8},\n            2: { pointRadius: 19, label: \"${POP_RANK}\", fillColor: \"#A0522D\", fillOpacity: 0.9},\n            1: { pointRadius: 22, label: \"${POP_RANK}\", fillColor: \"#B22222\", fillOpacity: 1.0}\n        };\n\n        var styleMap = new OpenLayers.StyleMap();\n        styleMap.addUniqueValueRules(\"default\", \"POP_RANK\", styles);\n\n    ```", "```js\n        var vectorLayer = new OpenLayers.Layer.Vector(\"Cities\", {\n            styleMap: styleMap,\n            renderers: [\"Gradient\"],\n            protocol: new OpenLayers.Protocol.HTTP({\n                url: \"http://localhost:8080/openlayers-cookbook/recipes/data/world_cities.json\",\n                format: new OpenLayers.Format.GeoJSON()\n            }),\n            strategies: [new OpenLayers.Strategy.Fixed()]\n        });\n        map.addLayer(vectorLayer);\n\n    ```", "```js\n    /** \n     * Class: OpenLayers.Renderer.Gradient \n     * Improved canvas based rendered to draw points using gradient. \n     * \n     * Inherits: \n     *  - <OpenLayers.Renderer.Canvas> \n     */ \n\n    ```", "```js\n    OpenLayers.Renderer.Gradient = OpenLayers.Class(OpenLayers.Renderer.Canvas, {\n\n    ```", "```js\n        /** \n         * Constructor: OpenLayers.Renderer.Gradient \n         * \n         * Parameters: \n         * containerID - {<String>} \n         * options - {Object} Optional properties to be set on the renderer. \n         */ \n        initialize: function(containerID, options) { \n            OpenLayers.Renderer.Canvas.prototype.initialize.apply(this, arguments); \n        }, \n\n    ```", "```js\n        /** \n         * Method: drawPoint \n         * This method is only called by the renderer itself. \n         * \n         * Parameters: \n         * geometry - {<OpenLayers.Geometry>} \n         * style    - {Object} \n         * featureId - {String} \n         */ \n        drawPoint: function(geometry, style, featureId) { \n\n    ```", "```js\n            var pt = this.getLocalXY(geometry); \n            var p0 = pt[0]; \n            var p1 = pt[1]; \n\n            if(!isNaN(p0) && !isNaN(p1)) {  \n                if(style.fill !== false) { \n                    this.setCanvasStyle(\"fill\", style); \n\n    ```", "```js\n                    // Create color from fillColor and fillOpacity properties. \n                    var color = style.fillColor; \n                    color += \"ff\"; \n                    color = color.replace(\"#\", \"0x\"); \n\n                    var colorRGBA = 'rgba(' + \n                    ((color >> 24) & 0xFF) + ',' + \n                    ((color >> 16) & 0xFF) + ',' + \n                    ((color >>  8) & 0xFF) + ',' + \n                    style.fillOpacity + ')'; \n\n    ```", "```js\n                    var gradient = this.canvas.createRadialGradient(p0, p1, 0, p0, p1, style.pointRadius); \n\n    ```", "```js\n                    gradient.addColorStop(0, '#FFFFFF'); \n                    gradient.addColorStop(0.9, colorRGBA); \n                    gradient.addColorStop(1, 'rgba(1,255,0,0)'); \n\n                    this.canvas.fillStyle = gradient;            \n                    this.canvas.fillRect(0, 0, this.root.width, this.root.height); \n\n                    this.canvas.fill(); \n                } \n            } \n        }, \n\n    ```", "```js\n        CLASS_NAME: \"OpenLayers.Renderer.Gradient \" \n    });\n\n    ```", "```js\n  var vectorLayer = new OpenLayers.Layer.Vector(\"Cities\", {\n        styleMap: styleMap,\n        renderers: [\"Gradient\"],\n        protocol: new OpenLayers.Protocol.HTTP({\n            url: \"http://localhost:8080/openlayers-cookbook/recipes/data/world_cities.json\",\n            format: new OpenLayers.Format.GeoJSON()\n        }),\n        strategies: [new OpenLayers.Strategy.Fixed()]\n    });\n\n```", "```js\n    var styleMap = new OpenLayers.StyleMap();\n    styleMap.addUniqueValueRules(\"default\", \"POP_RANK\", styles);\n\n```", "```js\n    var styles = {\n        7: { pointRadius: 5, label: \"${POP_RANK}\", fillColor: \"#FFF8DC\", fillOpacity: 0.6},\n        6: { pointRadius: 8, label: \"${POP_RANK}\", fillColor: \"#FFE4C4\", fillOpacity: 0.6},\n        5: { pointRadius: 11, label: \"${POP_RANK}\", fillColor: \"#DEB887\", fillOpacity: 0.6},\n        4: { pointRadius: 14, label: \"${POP_RANK}\", fillColor: \"#DAA520\", fillOpacity: 0.7},\n        3: { pointRadius: 16, label: \"${POP_RANK}\", fillColor: \"#CD853F\", fillOpacity: 0.8},\n        2: { pointRadius: 19, label: \"${POP_RANK}\", fillColor: \"#A0522D\", fillOpacity: 0.9},\n        1: { pointRadius: 22, label: \"${POP_RANK}\", fillColor: \"#B22222\", fillOpacity: 1.0}\n    };\n\n```", "```js\n    initialize: function(containerID, options) {\n        OpenLayers.Renderer.Canvas.prototype.initialize.apply(this, arguments); \n    }, \n\n```", "```js\n    <script type=\"text/javascript\" src=\"img/selectFeaturePath.js\"></script>\n\n    ```", "```js\n    <div id=\"ch08_selecting\" style=\"width: 100%; height: 95%;\"></div>\n\n    ```", "```js\n    <script type=\"text/javascript\">\n\n    ```", "```js\n        var map = new OpenLayers.Map(\"ch08_selecting\");\n        var osm = new OpenLayers.Layer.OSM();\n        map.addLayer(osm);\n\n        // Certer viewport\n        var center = new OpenLayers.LonLat(25,50);\n        center.transform(new OpenLayers.Projection(\"EPSG:4326\"), new OpenLayers.Projection(\"EPSG:900913\"));\n        map.setCenter(center, 4);\n\n    ```", "```js\n        var vectorLayer = new OpenLayers.Layer.Vector(\"Europe\", {\n            protocol: new OpenLayers.Protocol.HTTP({\n                url: \"http://localhost:8080/openlayers-cookbook/recipes/data/europe.gml\",\n                format: new OpenLayers.Format.GML()\n            }),\n            strategies: [new OpenLayers.Strategy.Fixed()]\n        });\n        map.addLayer(vectorLayer);\n\n    ```", "```js\n        var sp = new OpenLayers.Control.SelectFeaturePath(vectorLayer);\n        map.addControl(sp);\n        sp.activate();  \n    </script>\n\n    ```", "```js\n    /**\n     * Class: OpenLayers.Control.SelectFeaturePath\n     * The SelectFeaturePath control selects vector features from a given layer \n     * that intersects with a path.\n     *\n     * Inherits from:\n     *  - <OpenLayers.Control.SelectFeature>\n     */\n\n    ```", "```js\n    OpenLayers.Control.SelectFeaturePath = OpenLayers.Class(OpenLayers.Control.SelectFeature, {\n\n    ```", "```js\n        /**\n         * Constructor: OpenLayers.Control.SelectFeaturePath\n         * Create a new control for selecting features using \n         * an OpenLayers.Handler.Path handler.\n         *\n         * Parameters:\n         * layers - {<OpenLayers.Layer.Vector>}, or an array of vector layers. The\n         *     layer(s) this control will select features from.\n         * options - {Object} \n         */\n        initialize: function(layers, options) {\n            OpenLayers.Control.SelectFeature.prototype.initialize.apply(this, arguments);\n\n            this.box = true;                    \n            this.handlers.box = new OpenLayers.Handler.Path(this, {\n                done: this.selectPath\n            });\n        },\n\n    ```", "```js\n        /**\n         * Method: selectPath\n         * Callback from the handlers.box set up when <path> selection is done.\n         * Select those features that intersect with the path.\n         *\n         * Parameters:\n         * path - {<OpenLayers.Geometry.LineString>}  \n         */\n        selectPath: function(path) {\n            // If multiple is false, first deselect currently selected features\n            if (!this.multipleSelect()) {\n                this.unselectAll();\n            }\n\n            // Consider we want multiple selection\n            var prevMultiple = this.multiple;\n            this.multiple = true;\n            var layers = this.layers || [this.layer];\n            var layer;\n            for(var l=0; l<layers.length; ++l) {\n                layer = layers[l];\n                for(var i=0, len = layer.features.length; i<len; ++i) {\n                    var feature = layer.features[i];\n                    // Check if the feature is displayed\n                    if (!feature.getVisibility()) {\n                        continue;\n                    }\n\n                    if (this.geometryTypes == null || OpenLayers.Util.indexOf(\n                        this.geometryTypes, feature.geometry.CLASS_NAME) > -1) {\n                        if (path.intersects(feature.geometry)) {\n                            if (OpenLayers.Util.indexOf(layer.selectedFeatures, feature) == -1) {\n                                this.select(feature);\n                            }\n                        }\n                    }\n                }\n            }\n            this.multiple = prevMultiple;        \n        },\n\n    ```", "```js\n        CLASS_NAME: \"OpenLayers.Control.SelectFeaturePath\"\n    });\n\n    ```", "```js\n    var sp = new OpenLayers.Control.SelectFeaturePath(vectorLayer);\n    map.addControl(sp);\n    sp.activate(); \n\n```", "```js\n    var center = new OpenLayers.LonLat(25,50);\n    center.transform(new OpenLayers.Projection(\"EPSG:4326\"), new OpenLayers.Projection(\"EPSG:900913\"));\n    map.setCenter(center, 4);\n\n```", "```js\nOpenLayers.Control.SelectFeaturePath = OpenLayers.Class(OpenLayers.Control.SelectFeature, { \n    ...\n    ...\n});\n\n```", "```js\n    initialize: function(layers, options) {\n        OpenLayers.Control.SelectFeature.prototype.initialize.apply(this, arguments);\n\n        this.box = true;                    \n        this.handlers.box = new OpenLayers.Handler.Path(this, {\n            done: this.selectPath\n        });\n    },\n\n```", "```js\n    selectPath: function(path) { \n        // If multiple is false, first deselect currently selected features \n        if (!this.multipleSelect()) { \n            this.unselectAll(); \n        } \n\n```", "```js\n        // Consider we want multiple selection \n        var prevMultiple = this.multiple; \n        this.multiple = true; \n        var layers = this.layers || [this.layer]; \n        var layer; \n        for(var l=0; l<layers.length; ++l) { \n            layer = layers[l]; \n            for(var i=0, len = layer.features.length; i<len; ++i) { \n                var feature = layer.features[i]; \n                // Check if the feature is displayed \n                if (!feature.getVisibility()) { \n                    continue; \n                } \n\n```", "```js\n                if (this.geometryTypes == null || OpenLayers.Util.indexOf( \n                    this.geometryTypes, feature.geometry.CLASS_NAME) > -1) { \n                    if (path.intersects(feature.geometry)) { \n                        if (OpenLayers.Util.indexOf(layer.selectedFeatures, feature) == -1) { \n                            this.select(feature); \n                        } \n                    } \n                } \n            } \n        } \n        this.multiple = prevMultiple;        \n    }, \n\n```", "```js\n    <table>\n        <tr>\n            <td>\n                Animation:\n            </td>\n            <td>\n                <div id=\"animSlider\" dojoType=\"dijit.form.HorizontalSlider\" value=\"0\" minimum=\"0\" maximum=\"100\" intermediateChanges=\"true\"\n                     showButtons=\"false\" style=\"width:300px;\" onChange=\"animation\">\n                    <div dojoType=\"dijit.form.HorizontalRule\" container=\"bottomDecoration\" count=11 style=\"height:5px;\"></div>\n                </div> \n            </td>\n            <td>\n                <div dojoType=\"dijit.form.ToggleButton\" iconClass=\"dijitCheckBoxIcon\" onChange=\"animateAction\">Play</div>\n            </td>\n        </tr>\n    </table>\n\n    ```", "```js\n    <div id=\"ch08_animating_raster\" style=\"width: 100%; height: 100%;\"></div>\n\n    ```", "```js\n    <script type=\"text/javascript\">\n        var map = new OpenLayers.Map(\"ch08_animating_raster\");\n        var wms = new OpenLayers.Layer.WMS(\"OpenLayers WMS Basic\", \"http://labs.metacarta.com/wms/vmap0\",\n        {\n            layers: 'basic'\n        });\n        map.addLayer(wms);\n\n        // Center the view\n        map.setCenter(new OpenLayers.LonLat(-85, 40), 4);\n\n    ```", "```js\n        var img_extent = new OpenLayers.Bounds(-131.0888671875, 30.5419921875, -78.3544921875, 53.7451171875);\n        var img_size = new OpenLayers.Size(780, 480);\n\n        var img_ulr = image = null;\n        var imgArray = [];\n        for(var i=1; i<=32; i++) {\n            index = (i<10) ? \"0\"+i : i;\n            img_url = \"http://localhost:8080/openlayers-cookbook/recipes/data/radar/nexrad\"+index+\".png\";        \n            image = new OpenLayers.Layer.Image(\"Image Layer\", img_url, img_extent, img_size, {\n                isBaseLayer: false,\n                alwaysInRange: true, // Necessary to always draw the image\n                visibility: false\n            });\n            imgArray.push(image);\n            map.addLayer(image);\n        }\n        imgArray[0].setVisibility(true);\n\n    ```", "```js\n        var currentIndex = 0;\n        function animation(value){\n            imgArray[currentIndex].setVisibility(false);\n            currentIndex = Math.floor(value * 31 / 100);\n            imgArray[currentIndex].setVisibility(true);\n        }\n\n    ```", "```js\n        var interval = null;\n        function animateAction(checked) {\n            if(checked) {\n                interval = setInterval(function() {\n                    var v = dijit.byId('animSlider').get('value');\n                    v = (v>=100) ? 0 : (v+1);\n                    dijit.byId('animSlider').set('value', v);\n                    animation(v);\n                },50);\n            } else {\n                clearInterval(interval);\n            }\n        }\n    </script>\n\n    ```", "```js\n    var img_extent = new OpenLayers.Bounds(-131.0888671875, 30.5419921875, -78.3544921875, 53.7451171875);\n    var img_size = new OpenLayers.Size(780, 480);\n\n```", "```js\n        image = new OpenLayers.Layer.Image(\"Image Layer\", img_url, img_extent, img_size, {\n            isBaseLayer: false,\n            alwaysInRange: true, // Necessary to always draw the image\n            visibility: false\n        });\n        imgArray.push(image);\n\n```", "```js\n    imgArray[0].setVisibility(true);\n\n```", "```js\n    function animateAction(checked) {\n        if(checked) {\n\n```", "```js\n            interval = setInterval(function() {\n                var v = dijit.byId('animSlider').get('value');\n                v = (v>=100) ? 0 : (v+1);\n                dijit.byId('animSlider').set('value', v);\n                animation(v);\n            },50);\n        } else {\n\n```", "```js\n            clearInterval(interval);\n        }\n\n```", "```js\n    var currentIndex = 0;\n    function animation(value){\n        imgArray[currentIndex].setVisibility(false);\n        currentIndex = Math.floor(value * 31 / 100);\n        imgArray[currentIndex].setVisibility(true);\n    }\n\n```"]