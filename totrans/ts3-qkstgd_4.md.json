["```js\nexport class MyClass {\n}\n```", "```js\nexport class Variables {\n public a: number = 1;\n  private b: number = 2;\n  protected c: number = 3;\n  d: number = 4; // Also public\n}\n```", "```js\nconst d = new Variables();\n```", "```js\nconst d = new Variables();\n```", "```js\nclass MyClass {\n   constructor(param1: number, param2: string) {\n   }\n}\nconst myClassInstance = new MyClass(1, \"Must be present\");\n```", "```js\nclass MyClass {\n   private m1: number;\n   private m2: string;\n   private m3: number;\n   constructor(param1: number, param2: string) {\n     this.m1 = param1;\n     this.m2 = param2;\n     this.m3 = 123;\n }\n}\n```", "```js\n\nclass ClassWithConstructorOverloaded {\n private p1: number;\n private p2: string;\n\n constructor(p1: number);\n constructor(p1: number, p2?: string) {\n   this.p1 = p1;\n   if (p2 === undefined) {\n     p2 = \"default\";\n   }\n   this.p2 = p2;\n }\n}\n```", "```js\nclass MyClass2 extends MyClass {\n   constructor(p1: number) {\n     super(p1, \"Here\");\n   }\n}\n```", "```js\nexport class Variables {\n   public a: number = 1;\n}\nconst d = new Variables();\nd.a = 100;\nconsole.log(d.a);\n```", "```js\nexport class Variables {\n   private b: number = 2;\n}\nconst d = new Variables();\nd.b = 100; // Not allowed, won’t compile\nconsole.log(d.b); // Not allowed, won’t compile\n```", "```js\nclass BaseClass {\n  public a: number = 1;\n  private b: number = 2;\n  protected c: number = 3;\n}\n\nclass ChildClass extends BaseClass {\n  public d: number = 1;\n  private e: number = 2;\n  protected f: number = 3;\n  public f1():void{\n   super.a;\n   super.c;\n   this.a;\n   this.c;\n }\n}\n\nconst child = new ChildClass();\nconsole.log(child.a);\nconsole.log(child.d);\n```", "```js\nclass MyClass3{\n public constructor(private p1:number, public p2:string){}\n}\nconst myClass3 = new MyClass3(1, \"2\");\nconsole.log(myClass3.p2);\n```", "```js\nclass MyClass3Same {\n  private p1: number;\n  public p2: string;\n  public constructor(p1: number, p2: string) {\n   this.p1 = p1;\n   this.p2 = p2;\n }\n}\n\nconst myClass3Same = new MyClass3Same (1, \"2\");\nconsole.log(myClass3.p2);\n```", "```js\nabstract class FakeStaticClass {\n public static m1: number;\n public static f1(): void { }\n}\n\nconsole.log(FakeStaticClass.m1);\nFakeStaticClass.f1();\n\nconst instance1 = new FakeStaticClass(); // Doesn't compile\n```", "```js\nclass StaticClass {\n  public static ps: number;\n  private static privateStatic: number;\n  protected static protecStatic: number;\n}\n\nStaticClass.ps = 1;\n```", "```js\nclass StaticClass {\n  public static ps: number;\n  private static privateStatic: number;\n  protected static protecStatic: number;\n\n  public nonStaticFunction():void{\n    StaticClass.ps;\n    StaticClass.privateStatic;\n    StaticClass.protecStatic;\n  }\n}\n```", "```js\nclass PrivateConstructor{\n private constructor(){\n }\n}\n\nconst pc = new PrivateConstructor(); // Does not compile\n```", "```js\nclass SingletonClass {\n private static instance: SingletonClass;\n private constructor() {\n SingletonClass.instance = new SingletonClass();\n }\n\n public static GetInstance(): SingletonClass {\n   return SingletonClass.instance;\n }\n}\nconst singletonClass = SingletonClass.GetInstance();\n```", "```js\najax.then((response:any)=>{\n   return response as DataTyped;\n};\n```", "```js\ninterface ObjectDefinition {\n  m1: string;\n  funct1: () => void;\n}\n\nlet ajax: any;\nconst funct1 = () => { };\n\najax.then((response: any) => {\n  const r = response as ObjectDefinition;\n  r.funct1 = funct1;\n  return r;\n});\n```", "```js\nfunction createObj(m1: string): ObjectDefinitionClass {\n  return {\n   m1: m1,\n   funct1: () => { }\n  }\n}\n\najax.then((response: any) => {\n const r = response as Model;\n return createObj(r.m1);\n});\n```", "```js\nclass ObjectDefinitionClass implements ObjectDefinition {\n public m1: string;\n public funct1(): void { }\n\n constructor(param1: string) {\n  this.m1 = param1;\n }\n}\n\najax.then((response: any) => {\n const r = response as ObjectDefinition;\n return new ObjectDefinitionClass(r.m1);\n});\n```", "```js\ninterface Model {\n m1: string;\n}\n\ninterface Funct {\n funct1: () => void;\n}\n\nclass ObjectDefinitionClass2 implements Model, Funct {\n public m1: string;\n public funct1(): void { }\n constructor(param1: Model) {\n   this.m1 = param1.m1;\n }\n}\n\najax.then((response: any) => {\n const r = response as Model;\n return new ObjectDefinitionClass2(r);\n});\n```", "```js\nconst forTesting = new ObjectDefinitionClass(\"1\");\nforTesting.funct1 = jest.fn();\n```", "```js\nclass ClassA {\n public mainFunction(): void \n{\n  this.subFunction1();\n  this.subFunction2();\n }\n\n private subFunction1(): void { }\n private subFunction2(): void { }\n}\n```", "```js\ninterface IClassA {\n mainFunction(): void;\n}\n\nclass ClassA2 implements IClassA {\n public mainFunction(): void {\n   this.subFunction1();\n   this.subFunction2();\n }\n\n public subFunction1(): void { }\n public subFunction2(): void { }\n}\n```", "```js\ninterface IElement {\n m1: string;\n}\n\nclass E1 implements IElement { m1: string = \"E1->m1\"; a: number = 1; }\nclass E2 implements IElement { m1: string = \"E2->m1\"; b: boolean = true; }\n\nclass ClassB {\n public consume(element: IElement): void { }\n}\n```", "```js\nabstract class MainClass {\n public mainCoreLogic(): void {\n   // Code here [A]\n   this.delegatedLogic();\n   // Code here [B]\n }\n\n public abstract delegatedLogic(): void;\n\n}\n\nclass CustomLogic extends MainClass {\n\n public delegatedLogic(): void {\n   // Do some custom logic here [C]\n }\n\n}\n\nconst c: MainClass = new CustomLogic();\nc.mainCoreLogic();\n```", "```js\nabstract class Calculus {\n public isAboveZero(a: number, b: number): boolean {\n   const positiveA = Math.abs(a);\n   const positiveB = Math.abs(b);\n   const result = this.delegatedLogic(positiveA, positiveB);\n   return result > 0;\n }\n\n public abstract delegatedLogic(a: number, b: number): number;\n }\n\n class AddLogic extends Calculus {\n   public delegatedLogic(a: number, b: number): number {\n     return a * b;\n   }\n }\n\n const multi: Calculus = new AddLogic();\n multi.isAboveZero(1, 2);\n```", "```js\n class CalculusWithoutAbstract {\n   public constructor(private delegatedLogic: (a: number, b: number) => number) {\n   }\n\n   public isAboveZero(a: number, b: number): boolean {\n     const positiveA = Math.abs(a);\n     const positiveB = Math.abs(b);\n     const result = this.delegatedLogic(positiveA, positiveB);\n     return result > 0;\n   }\n}\n\nconst multi2: CalculusWithoutAbstract = new CalculusWithoutAbstract((a, b) => a * b);\nmulti2.isAboveZero(1, 2);\n```", "```js\nconst multi: Calculus = new AddLogic(); // Expose only the main function\nconst multi: AddLogic = new AddLogic(); // Expose the delegate function\n```", "```js\ninterface I1 {\n readonly id: string;\n name: string;\n}\n\nlet i1: I1 = {\n id: \"1\",\n name: \"test\"\n}\n\ni1.id = \"123\"; // Does not compile\n```", "```js\nclass C1 {\n public readonly id: string = \"C1\";\n\n constructor() {\n   this.id = \"Still can change\";\n }\n\n public f1(): void {\n   this.id = 1; // Doesn't compile\n }\n}\n```", "```js\nclass C2 {\n public static readonly MY_CONST: string = \"TEST\";\n public codeHere(): void {\n   C2.MY_CONST;\n }\n}\n```", "```js\ninterface ConstructorReturnType {    \n  member1: number;\n  funct(): void;\n}\ninterface EntityConstructor {\n  new(value: number): ConstructorReturnType;\n}\n```", "```js\nfunction entityFactory(ctor: EntityConstructor, value: number): ConstructorReturnType {\n   return new ctor(value);\n}\n```", "```js\nclass Implementation1 implements ConstructorReturnType {\n\n public member1: number;\n\n constructor(value: number) {\n   this.member1 = value;\n }\n\n public funct(): void {\n }\n\n}\nlet impl1 = entityFactory(Implementation1, 1);\n```", "```js\nclass Implementation2 {\n   constructor(value: number) { }\n}\n\nlet impl2 = entityFactory(Implementation2, 1);\n```", "```js\nclass Implementation3 implements ConstructorReturnType {\n  public member1: number = 1;\n  constructor() {\n    console.log(arguments);\n  }\n\n  public funct(): void {\n  }\n}\n\nlet impl3 = entityFactory(Implementation3, 1);\n```"]