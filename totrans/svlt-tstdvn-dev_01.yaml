- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting up for Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Back when you were a young schoolchild, you probably learned to write by using
    a pencil on paper. Now that you’re older, it’s likely you prefer pens. For learners,
    pencils have a distinct advantage over pens in that mistakes are easy to correct,
    and when you first start writing out letters and words, you will be making a lot
    of mistakes. Pencils are also safer for small children – no caps or messy ink
    to worry about.
  prefs: []
  type: TYPE_NORMAL
- en: But pencils remain a valid writing instrument, and you might still have a personal
    preference for pencils over pens. The pencil is a perfectly good tool for the
    job.
  prefs: []
  type: TYPE_NORMAL
- en: '**Test-Driven Development** (**TDD**) is a tool that can serve you in a similar
    way. It’s a great way to learn and grow as a developer. Many experienced developers
    prefer it for their day-to-day work over any alternative.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you’ll configure a work environment that’s designed to help
    you get the most out of TDD techniques. Since TDD asks you to do a bunch of small
    repetitive tasks – writing tests, running tests, committing early and often, and
    switching between test code and application code – it’s important that each of
    those tasks can be done easily and quickly.
  prefs: []
  type: TYPE_NORMAL
- en: 'It follows that an important personal discipline to cultivate is that of objectively
    critiquing your development tools. For every tool that you use, ask yourself this:
    is this tool serving me well? Is it easy and quick to use?'
  prefs: []
  type: TYPE_NORMAL
- en: This could be your **Integrated Development Environment** (**IDE**), your operating
    system, your source code repository, your note-taking program, your time management
    utilities, and so on. Anything and everything you use in your day job. Scrutinize
    your tools. Throw away whatever isn’t working for you.
  prefs: []
  type: TYPE_NORMAL
- en: This is a very personal thing and depends a lot on experience and individuality.
    And your preferences are likely to change over time, too.
  prefs: []
  type: TYPE_NORMAL
- en: I often reach for very plain, simple, keyboard-driven tools that work for me
    consistently, regardless of the programming language I’m working in, such as the
    text editor Vim. It doesn’t offer any knowledge about the JavaScript programming
    language or the Svelte framework, but it makes me extremely effective at editing
    text.
  prefs: []
  type: TYPE_NORMAL
- en: But if you care about learning JavaScript or program design, then you might
    prefer an IDE that gives you JavaScript auto-complete suggestions and helpful
    project assistance.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter walks through the setup of a new SvelteKit project and highlights
    all the individual choices you’ll need to make, and the additional extras you’ll
    need in order to practice effective TDD.
  prefs: []
  type: TYPE_NORMAL
- en: 'It covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new SvelteKit project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing your development environment for frequent test runs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring support for Svelte component tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optional configuration you may want to try
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of the chapter, you’ll know how to create a new Svelte project that
    is ready for test-driven feature building.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code for the chapter can be found online at [https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter01/Start](https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter01/Start).
  prefs: []
  type: TYPE_NORMAL
- en: You will need to have a recent version of Node.js installed. See [https://nodejs.org](https://nodejs.org)
    for instructions on how to install and update Node.js for your platform.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new SvelteKit project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you’ll use the default method for creating a new SvelteKit
    project, which uses the `npm create` command. (For reference, you can also check
    the official documentation at [https://kit.svelte.dev/docs/creating-a-project](https://kit.svelte.dev/docs/creating-a-project).)
  prefs: []
  type: TYPE_NORMAL
- en: The project we are building is called *Birthdays* and the npm package name is
    `birthdays`. It will be introduced properly in [*Chapter 2*](B19611_02.xhtml#_idTextAnchor036),
    *Introducing the* *Red-Green-Refactor Workflow*.
  prefs: []
  type: TYPE_NORMAL
- en: SvelteKit 1.0
  prefs: []
  type: TYPE_NORMAL
- en: These instructions were valid at the time of writing, for SvelteKit 1.0\. It’s
    likely things will improve in time, so you may find some of the later instructions
    will become unnecessary or may no longer work. Check the book’s GitHub repository
    for the most up-to-date instructions.
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, we’ll concentrate on the mechanics of building a new project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by opening a Terminal window in your usual work location (for me, this
    is `~/work` on my Mac). Then type the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If this is the first Svelte project you’ve created, you’ll be presented with
    the following message from npm:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Answer `y` to that. You’ll see a bunch more questions, which we’ll go through
    individually:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Since you’re already in the `birthdays` directory, just leave this blank, and
    hit *Enter*. Next, you’ll be asked about which app template you’d like to use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Choose `Skeleton project`. Next, you’ll be asked about TypeScript:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For this question, I’ve chosen `No`. That’s because this book is about testing
    techniques, not typing techniques. That’s not to say that this book doesn’t apply
    to TypeScript projects – it most certainly does – just that typing is not the
    topic at hand.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you want to use TypeScript
  prefs: []
  type: TYPE_NORMAL
- en: If you’re a seasoned TypeScript developer, please feel free to choose that option
    instead. The code samples in the book won’t need too much modification except
    for the additional type definitions, which you’ll need to provide.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, you’ll be asked about extra package dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Choose `Yes` as the answer to all these questions. Although we won’t mention
    ESLint in this book, it’s always good to have. And we’ll need Playwright and Vitest.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You’ll then see a summary of all your choices, followed by a `Next` `steps`
    list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We’ll perform these next steps but before we do that, we’ll run some extra verification
    steps. It’s always good to check your work.
  prefs: []
  type: TYPE_NORMAL
- en: Type `npm install` into the Terminal and confirm that everything is installed
    correctly. Then, go ahead and commit your changes. (If you’ve forked the GitHub
    repository, you won’t need to use the `git` `init` command.)
  prefs: []
  type: TYPE_NORMAL
- en: Committing early and often
  prefs: []
  type: TYPE_NORMAL
- en: It’s a good idea to be checking in your work very often. While you’re learning
    the TDD approach to testing, it can be helpful to check in after every single
    test. This might seem like a lot but it will help you backtrack in case you get
    stuck.
  prefs: []
  type: TYPE_NORMAL
- en: Then, run `npm run dev – –open`. It should open your web browser and show you
    a `"Welcome to` `SvelteKit"` message.
  prefs: []
  type: TYPE_NORMAL
- en: You can then close the browser and hit *Ctrl* + *C* in the Terminal to stop
    the web server.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s verify the Playwright and Vitest dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and running Playwright
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although we won’t use Playwright in this chapter, it’s a good idea to get it
    installed and verify that it’s working.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by running `npm test` at the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If you’ve never installed Playwright before, you’ll see a message like the preceding
    one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Playwright has its own environment setup to do, such as installing Chromium
    onto your machine. You can install it with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, trying `npm test` again should give you the following output, showing
    that the one example test that’s included is passing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This test, `index page has expected h1`, is a test for the `"Welcome to SvelteKit"`
    message you saw earlier when you launched the application in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Running Vitest
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Running `npm run test:unit` is the default way to run Vitest tests. Try it
    now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This automatically puts you in watch mode, which means any changes to the filesystem
    will cause tests to re-run. Press *q* to quit this mode. I personally don’t use
    watch mode and we won’t be using it in this book. See the *Creating a shell alias*
    section for a little discussion on why this is.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we’ll make the ergonomics of the project a little easier
    for us.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing your development environment for frequent unit testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we’ll take some configuration actions that will make our test-driven
    lives much simpler.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing your editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s start with your choice of code editor. More than likely, this means a
    choice between an IDE, such as Visual Studio Code, or a plain text editor, such
    as Vim or Emacs.
  prefs: []
  type: TYPE_NORMAL
- en: IDEs tend to have lots of bells and whistles and one of those is the built-in
    test runner, which runs tests for you and integrates test output into the editor
    itself. On the other hand, plain text editors will require you to have a separate
    Terminal window for you to enter test commands directly, as you did in the previous
    section.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 1**.1* shows how my own setup looks, using Vim and tmux to split windows.
    The top half of the screen is where I edit my source files, and when I’m ready
    to run tests, I can switch to the bottom half and enter the `test` command.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Using tmux and Vim](img/Figure_1.1_B19611.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – Using tmux and Vim
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 1**.2* shows the same project in Visual Studio Code with the Vitest
    extension installed. Notice the test runner has a bunch of neat features, such
    as the ability to filter the test output, and green ticks next to the line numbers
    of passing tests.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Using Visual Studio Code to run tests](img/Figure_1.2_B19611.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – Using Visual Studio Code to run tests
  prefs: []
  type: TYPE_NORMAL
- en: I think there is a lot to learn from using a plain editor and Terminal setup,
    but if you don’t feel comfortable with that, then it’s best to stick to your favorite
    IDE for now.
  prefs: []
  type: TYPE_NORMAL
- en: The one thing you want to make sure of is that it’s easy and quick to run tests.
    So, if you’re writing a new test, you want to immediately run it and see it fail.
    And if you’re making a test pass or refactoring tests, make sure you can quickly
    re-run tests to check your progress.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a shell alias
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you’re choosing to use the Terminal to run tests, then you will almost certainly
    want to set up an alias to make it simpler to run Vitest unit tests. You’ll recall
    that there are two commands that you use for running tests: `npm test` for Playwright
    tests and the `npm run test:unit` command for Vitest unit tests.'
  prefs: []
  type: TYPE_NORMAL
- en: The style of testing shown in this book follows the classic *test pyramid* approach
    to testing, which states that we should have lots of little unit tests (in Vitest)
    and far fewer system tests (in Playwright).
  prefs: []
  type: TYPE_NORMAL
- en: So, given that we’ll be working much more frequently with Vitest, doesn’t it
    make sense to have the *shorter* `test` command be the one that runs unit tests?
  prefs: []
  type: TYPE_NORMAL
- en: 'The solution that I use is a shell alias, `v`, that invokes Vitest. If you
    wanted to use the standard watch mode, you’d set up the shell alias to run this
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'However, because I don’t want to use watch mode, I set it up to use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: I‘d suggest you use this version, at least while you read through this book.
    I find that watch mode tends to break silently, especially when you’re in the
    first stages of setting up a project. To avoid confusion, better to just invoke
    the test command when you’re ready.
  prefs: []
  type: TYPE_NORMAL
- en: 'On my Mac, my default shell is `zsh`, which configures its shell aliases in
    the `~/.zshrc` file. You can add that alias to the file using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can simply type the `v` command to run your Vitest unit tests. You
    can also use this to run a single test file, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This is a handy way to run just a small part of your test suite.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the test runner to report each test name
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Recall that when we ran our Vitest unit tests, the test report told us the
    filename of the test suite that was run, together with some summary information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: It turns out this isn’t enough – we want to see test names too, just like how
    the Playwright test told us the description of the test that was passing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `vite.config.js` file and add a new `reporter` property that is set
    to `verbose`, as shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Be careful
  prefs: []
  type: TYPE_NORMAL
- en: If you had left your test runner running in watch mode, you’ll need to restart
    it at this point, and at any other point in which you modify the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, running tests at the command line using the `v` command will give this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Much better!
  prefs: []
  type: TYPE_NORMAL
- en: Watching the test fail
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’re almost done with configuring Vitest, but before continuing, let’s check
    that the test actually tests what we want it to test. This is an important concept
    with TDD: if you’ve never seen a test fail, how do you know it tests the right
    thing?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `src/index.test.js` and take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Make a change to the `expect` statement, like the one shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if you run the test, you should see a failure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Brilliant – our test runner seems to be in working order. You can go ahead and
    undo the change to the test, and watch it go green again. That’s it for the basic
    editor configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Test file location – src or test?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In many other programming environments, test files are kept apart from application
    source files. A separate directory named something like `tests` or `specs` is
    used to house all executable test scripts.
  prefs: []
  type: TYPE_NORMAL
- en: There can be a couple of advantages to that. First, it can avoid packaging tests
    with application code when it comes to building deployable units. However, Svelte
    (and JavaScript in general) doesn’t suffer from this problem because only modules
    referenced by the application entry point will be bundled.
  prefs: []
  type: TYPE_NORMAL
- en: 'Second, having a separate directory avoids the mindset of *one test file per
    module*. Not all modules need unit tests: if a unit exists as a part of a larger
    unit, we’ll often just write tests for the top-level unit and those tests will
    also provide coverage for the lower-level unit. Conversely, sometimes it’s helpful
    to have two (or more!) test files for a single module.'
  prefs: []
  type: TYPE_NORMAL
- en: That’s especially true when using component mocks that wipe out a component
    mock for an entire module. You might want a test file that mocks a component,
    and another test file where the component isn’t mocked. We’ll look at component
    mocks in [*Chapter 12*](B19611_12.xhtml#_idTextAnchor134), *Using Component Mocks
    to* *Clarify Tests*.
  prefs: []
  type: TYPE_NORMAL
- en: The current SvelteKit approach is to keep Vitest test files housed within the
    `src` directory. Partly, this is to avoid confusion with Playwright tests, which
    *do* live in a separate directory, named `tests`. (We’ll see Playwright tests
    starting from [*Chapter 3*](B19611_03.xhtml#_idTextAnchor050), *Loading Data into*
    *a Route*).
  prefs: []
  type: TYPE_NORMAL
- en: This book continues with that style, but I would encourage you to explore and
    adopt whichever style you feel most comfortable with.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we’ll add support for the kinds of tests we’ll be writing
    throughout the book.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring support for Svelte component tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Svelte *component test* is one that, perhaps unsurprisingly, tests a Svelte
    component. For this, we need access to a **Document Object Model** (**DOM**),
    which isn’t part of the standard Node.js environment. We’ll also need some additional
    packages for writing unit test expectations against the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: Installing jsdom and testing library helpers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At the Terminal, run the following command to install the `jsdom` package and
    `@testing-library` packages that we’ll use in our unit tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: If you’re using TypeScript, at this point, you may wish to add packages containing
    type definitions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, create a new file named `src/vitest/registerMatchers.js` with the following
    content. It ensures that the matchers we’ll be using are available for use via
    the `expect` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, update `vite.config.js` to add a new `environment` property, which installs
    `jsdom` correctly, and also a `setupFiles` property, which ensures the file defined
    previously is loaded (and invoked) just before the test suites are loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: That’s it for the basic setup. Now let’s test it out.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a test for the DOM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open the `src/index.test.js` file and add the following test definition, inside
    the `describe` block. This test makes use of the `document` object that is created
    for us by the `jsdom` package, and the `toHaveTextContent` matcher that is provided
    by the `@``testing-library/jest-dom` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Now, if you run the test, you should see it pass. But, just as you did with
    the first test, it’s important to confirm the test actually tests what it says
    it does. Change the test by commenting out or deleting the first line of the test,
    and then re-running the test runner.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see an output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: That proves the test is working. You can go ahead and undo the breaking change
    you made.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a first Svelte component test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, let’s write an actual Svelte component and test that out. Create a new
    file named `src/Hello.svelte` with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, go back to the `src/index.test.js` file and refactor your test to use
    this new component. To do that, replace the call to `document.outerHTML` with
    a call to the `render` function, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'This `render` function comes from the `@testing-library/svelte` package. Import
    that now, along with an import for the `Hello` component, placed at the top of
    the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Check that the test still passes with the refactor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, add this third test, which verifies that the `name` prop in the component
    is being used to verify the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Run the test and make sure it passes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, go ahead and comment out the `render` call in the last test. You might
    think that the test fails with an error saying nothing was rendered on-screen.
    But let’s see what happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Hold on a second; is this what we expected? This test didn’t ever print out
    a `Hello, world!` message so why is the test expectation picking it up?
  prefs: []
  type: TYPE_NORMAL
- en: It turns out that our tests share the same `document` object, which is clearly
    not good for test independence. Imagine if the second test also expected to see
    `Hello, world!` rather than `Hello, Svelte!`. It would have passed by virtue of
    the first test running. We need to do something about this.
  prefs: []
  type: TYPE_NORMAL
- en: Ensuring the DOM is cleared after each test run
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We want to make sure that every test gets its own clean version of the DOM.
    We can do this by using the `cleanup` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file named `src/vitest/cleanupDom.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, insert that into the `setupFiles` property in `vite.config.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Now, if you run your failing test again, you should see that the `Hello, world!`
    message no longer appears.
  prefs: []
  type: TYPE_NORMAL
- en: Before continuing, uncomment the `render` call and check your tests are back
    in an all-green state.
  prefs: []
  type: TYPE_NORMAL
- en: Restoring mocks automatically
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There’s one final piece of configuration we need in `vite.config.js`. Add the
    `restoreMocks` property, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: This is also important for test independence and will be important in [*Chapter
    11*](B19611_11.xhtml#_idTextAnchor127), *Replacing Behavior with a Side-By-Side
    Implementation*, when we begin using the `vi.fn` function for building test doubles.
  prefs: []
  type: TYPE_NORMAL
- en: That covers all the configuration you need for the rest of the book. The next
    section touches briefly on some optional configurations you might want to consider.
  prefs: []
  type: TYPE_NORMAL
- en: Optional configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we’ll look at configuring Prettier and setting up more appropriate
    tab widths on the Terminal. These settings mirror the print settings that are
    used in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Prettier’s print width
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Due to the constraint of the physical pages in this book, I have set the `printWidth`
    setting of Prettier to 54 characters, and all code samples are formatted with
    that setting.
  prefs: []
  type: TYPE_NORMAL
- en: I also think the default value, `100`, is too high. I like short columns of
    text as I find them easier to share and read in all sorts of environments – such
    as on mobile devices, where it’s much easier to scroll vertically than it is horizontally.
  prefs: []
  type: TYPE_NORMAL
- en: Also, having extra vertical space comes in handy when you are pairing with other
    developers and you want to refer to particular line numbers (assuming you have
    line numbers turned on).
  prefs: []
  type: TYPE_NORMAL
- en: 'In `.prettierrc`, you can set the print width with the following addition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: You might be more comfortable with something in the `60` to `80` range.
  prefs: []
  type: TYPE_NORMAL
- en: Reducing the tab width in the Terminal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Svelte community has a preference for tabs over spaces because tabs are
    better for screen readers. Unfortunately, a lot of Terminals and shell programs
    are set up for a default tab width of eight characters, which is way too many
    for my liking.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although every Terminal is different, the one solid piece of advice I have
    is to set `git config` to use `less` as its pager, with tab stops at positions
    `1`, `3`, `5`, and `7`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: This makes `git diff` and `git show` much more bearable, and these are two commands
    I use extremely frequently.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has taken a detailed look at the various parts of a base SvelteKit
    project, showing how Playwright and Vitest are added, together with the additional
    dependencies you’ll need to write Svelte component tests.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve also looked at some of the ways you can set up your development environment
    to help you be productive.
  prefs: []
  type: TYPE_NORMAL
- en: You’re now ready to start exploring TDD practices, starting with the *Red-Green-Refactor
    Cycle -> Workflow* in the next chapter.
  prefs: []
  type: TYPE_NORMAL
