- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Setting up for Testing
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试设置
- en: Back when you were a young schoolchild, you probably learned to write by using
    a pencil on paper. Now that you’re older, it’s likely you prefer pens. For learners,
    pencils have a distinct advantage over pens in that mistakes are easy to correct,
    and when you first start writing out letters and words, you will be making a lot
    of mistakes. Pencils are also safer for small children – no caps or messy ink
    to worry about.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在您还是一个小学生的时候，您可能通过在纸上使用铅笔来学习写作。现在您长大了，您可能更喜欢钢笔。对于学习者来说，铅笔在纠正错误方面比钢笔有明显的优势，因为当您刚开始书写字母和单词时，您会犯很多错误。铅笔对小孩子来说也更安全——没有盖子或混乱的墨水需要担心。
- en: But pencils remain a valid writing instrument, and you might still have a personal
    preference for pencils over pens. The pencil is a perfectly good tool for the
    job.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 但铅笔仍然是一种有效的书写工具，您可能仍然更喜欢铅笔而不是钢笔。铅笔是完成这项工作的完美工具。
- en: '**Test-Driven Development** (**TDD**) is a tool that can serve you in a similar
    way. It’s a great way to learn and grow as a developer. Many experienced developers
    prefer it for their day-to-day work over any alternative.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试驱动开发**（**TDD**）是一种可以以类似方式为您服务的工具。这是作为开发者学习和成长的好方法。许多经验丰富的开发者更喜欢它，而不是任何替代方案。'
- en: In this chapter, you’ll configure a work environment that’s designed to help
    you get the most out of TDD techniques. Since TDD asks you to do a bunch of small
    repetitive tasks – writing tests, running tests, committing early and often, and
    switching between test code and application code – it’s important that each of
    those tasks can be done easily and quickly.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将配置一个旨在帮助您充分利用 TDD 技术的工作环境。由于 TDD 要求您执行一系列小型重复性任务——编写测试、运行测试、尽早和经常提交，以及在测试代码和应用代码之间切换——因此，每个任务都应易于且快速完成。
- en: 'It follows that an important personal discipline to cultivate is that of objectively
    critiquing your development tools. For every tool that you use, ask yourself this:
    is this tool serving me well? Is it easy and quick to use?'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，一个重要的个人修养是客观地评价您的开发工具。对于您使用的每一个工具，问自己这个问题：这个工具是否为我服务得很好？它是否易于使用且快速？
- en: This could be your **Integrated Development Environment** (**IDE**), your operating
    system, your source code repository, your note-taking program, your time management
    utilities, and so on. Anything and everything you use in your day job. Scrutinize
    your tools. Throw away whatever isn’t working for you.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是您的 **集成开发环境**（**IDE**），您的操作系统，您的源代码仓库，您的笔记程序，您的时间管理工具，等等。您在日常工作中使用的任何和所有东西。审视您的工具。丢弃那些对您不起作用的工具。
- en: This is a very personal thing and depends a lot on experience and individuality.
    And your preferences are likely to change over time, too.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这是非常个人化的事情，很大程度上取决于经验和个性。而且，您的偏好也可能随着时间的推移而改变。
- en: I often reach for very plain, simple, keyboard-driven tools that work for me
    consistently, regardless of the programming language I’m working in, such as the
    text editor Vim. It doesn’t offer any knowledge about the JavaScript programming
    language or the Svelte framework, but it makes me extremely effective at editing
    text.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我经常使用非常简单、简单的键盘驱动工具，这些工具对我始终有效，无论我正在使用哪种编程语言，比如文本编辑器 Vim。它不提供关于 JavaScript 编程语言或
    Svelte 框架的知识，但它使我非常有效地编辑文本。
- en: But if you care about learning JavaScript or program design, then you might
    prefer an IDE that gives you JavaScript auto-complete suggestions and helpful
    project assistance.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果您关心学习 JavaScript 或程序设计，那么您可能更喜欢一个提供 JavaScript 自动完成建议和有帮助的项目辅助的 IDE。
- en: This chapter walks through the setup of a new SvelteKit project and highlights
    all the individual choices you’ll need to make, and the additional extras you’ll
    need in order to practice effective TDD.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将指导您设置一个新的 SvelteKit 项目，并突出您需要做出的所有个人选择，以及为了练习有效的 TDD 需要的额外功能。
- en: 'It covers the following topics:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 它涵盖了以下主题：
- en: Creating a new SvelteKit project
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的 SvelteKit 项目
- en: Preparing your development environment for frequent test runs
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备您的开发环境以进行频繁的测试运行
- en: Configuring support for Svelte component tests
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置对 Svelte 组件测试的支持
- en: Optional configuration you may want to try
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可能想要尝试的配置选项
- en: By the end of the chapter, you’ll know how to create a new Svelte project that
    is ready for test-driven feature building.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将知道如何创建一个适合测试驱动功能构建的新 Svelte 项目。
- en: Technical requirements
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code for the chapter can be found online at [https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter01/Start](https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter01/Start).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在网上找到，地址为 [https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter01/Start](https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter01/Start)。
- en: You will need to have a recent version of Node.js installed. See [https://nodejs.org](https://nodejs.org)
    for instructions on how to install and update Node.js for your platform.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要安装一个较新的 Node.js 版本。有关如何在你的平台上安装和更新 Node.js 的说明，请参阅 [https://nodejs.org](https://nodejs.org)。
- en: Creating a new SvelteKit project
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的 SvelteKit 项目
- en: In this section, you’ll use the default method for creating a new SvelteKit
    project, which uses the `npm create` command. (For reference, you can also check
    the official documentation at [https://kit.svelte.dev/docs/creating-a-project](https://kit.svelte.dev/docs/creating-a-project).)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将使用创建新 SvelteKit 项目的默认方法，该方法使用 `npm create` 命令。（作为参考，你还可以查看官方文档 [https://kit.svelte.dev/docs/creating-a-project](https://kit.svelte.dev/docs/creating-a-project)。）
- en: The project we are building is called *Birthdays* and the npm package name is
    `birthdays`. It will be introduced properly in [*Chapter 2*](B19611_02.xhtml#_idTextAnchor036),
    *Introducing the* *Red-Green-Refactor Workflow*.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在构建的项目被称为 *Birthdays*，npm 包名为 `birthdays`。它将在 [*第 2 章*](B19611_02.xhtml#_idTextAnchor036)，*介绍红-绿-重构工作流程*
    中详细介绍。
- en: SvelteKit 1.0
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: SvelteKit 1.0
- en: These instructions were valid at the time of writing, for SvelteKit 1.0\. It’s
    likely things will improve in time, so you may find some of the later instructions
    will become unnecessary or may no longer work. Check the book’s GitHub repository
    for the most up-to-date instructions.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这些说明在撰写本书时是有效的，针对 SvelteKit 1.0。随着时间的推移，事情可能会得到改善，因此你可能会发现一些后续说明将变得不再必要或可能不再适用。请查看本书的
    GitHub 仓库以获取最新说明。
- en: 'For now, we’ll concentrate on the mechanics of building a new project:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将专注于构建新项目的机制：
- en: 'Start by opening a Terminal window in your usual work location (for me, this
    is `~/work` on my Mac). Then type the following commands:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在你的常规工作位置打开一个终端窗口（对我来说，这是我的 Mac 上的 `~/work`）。然后输入以下命令：
- en: '[PRE0]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If this is the first Svelte project you’ve created, you’ll be presented with
    the following message from npm:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你这是创建的第一个 Svelte 项目，npm 将显示以下消息：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Answer `y` to that. You’ll see a bunch more questions, which we’ll go through
    individually:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对该问题回答 `y`。你会看到更多问题，我们将逐一解答：
- en: '[PRE2]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Since you’re already in the `birthdays` directory, just leave this blank, and
    hit *Enter*. Next, you’ll be asked about which app template you’d like to use:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于你已经在 `birthdays` 目录中，只需留空，然后按 *Enter*。接下来，你将被询问你想要使用哪个应用程序模板：
- en: '[PRE3]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Choose `Skeleton project`. Next, you’ll be asked about TypeScript:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 `骨架项目`。接下来，你将被询问关于 TypeScript 的问题：
- en: '[PRE4]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For this question, I’ve chosen `No`. That’s because this book is about testing
    techniques, not typing techniques. That’s not to say that this book doesn’t apply
    to TypeScript projects – it most certainly does – just that typing is not the
    topic at hand.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个问题，我选择了 `No`。这是因为这本书是关于测试技术，而不是类型技术。这并不是说这本书不适用于 TypeScript 项目——当然适用——只是类型不是这本书的主题。
- en: If you want to use TypeScript
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要使用 TypeScript
- en: If you’re a seasoned TypeScript developer, please feel free to choose that option
    instead. The code samples in the book won’t need too much modification except
    for the additional type definitions, which you’ll need to provide.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一位经验丰富的 TypeScript 开发者，请随时选择该选项。本书中的代码示例不需要太多修改，除了需要提供的额外类型定义。
- en: 'Finally, you’ll be asked about extra package dependencies:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，你将被询问额外的包依赖项：
- en: '[PRE5]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Choose `Yes` as the answer to all these questions. Although we won’t mention
    ESLint in this book, it’s always good to have. And we’ll need Playwright and Vitest.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对所有这些问题回答 `Yes`。尽管我们在这本书中不会提到 ESLint，但它总是好的。我们还需要 Playwright 和 Vitest。
- en: 'You’ll then see a summary of all your choices, followed by a `Next` `steps`
    list:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你将看到所有选择的摘要，随后是一个 `Next` `步骤` 列表：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We’ll perform these next steps but before we do that, we’ll run some extra verification
    steps. It’s always good to check your work.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将执行以下步骤，但在这样做之前，我们将运行一些额外的验证步骤。检查你的工作总是好的。
- en: Type `npm install` into the Terminal and confirm that everything is installed
    correctly. Then, go ahead and commit your changes. (If you’ve forked the GitHub
    repository, you won’t need to use the `git` `init` command.)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中输入 `npm install` 并确认一切安装正确。然后，继续提交你的更改。（如果你已经fork了GitHub仓库，你不需要使用 `git`
    `init` 命令。）
- en: Committing early and often
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 提前频繁提交
- en: It’s a good idea to be checking in your work very often. While you’re learning
    the TDD approach to testing, it can be helpful to check in after every single
    test. This might seem like a lot but it will help you backtrack in case you get
    stuck.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 经常检查你的工作是个好主意。当你学习TDD测试方法时，每次测试后都进行检查可能会有所帮助。这可能会显得有些多，但它将帮助你回溯，以防你遇到难题。
- en: Then, run `npm run dev – –open`. It should open your web browser and show you
    a `"Welcome to` `SvelteKit"` message.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，运行 `npm run dev – –open`。它应该会打开你的网页浏览器并显示一个 `"欢迎来到` `SvelteKit"` 的消息。
- en: You can then close the browser and hit *Ctrl* + *C* in the Terminal to stop
    the web server.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以关闭浏览器，并在终端中按 *Ctrl* + *C* 来停止web服务器。
- en: Next, let’s verify the Playwright and Vitest dependencies.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们验证Playwright和Vitest的依赖项。
- en: Installing and running Playwright
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装和运行Playwright
- en: Although we won’t use Playwright in this chapter, it’s a good idea to get it
    installed and verify that it’s working.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们在这章中不会使用Playwright，但安装它并验证它是否工作是个好主意。
- en: 'Start by running `npm test` at the command line:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 首先在命令行中运行 `npm test`：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If you’ve never installed Playwright before, you’ll see a message like the preceding
    one.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以前从未安装过Playwright，你会看到前面提到的消息。
- en: 'Playwright has its own environment setup to do, such as installing Chromium
    onto your machine. You can install it with the following command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Playwright有其自己的环境设置要做，例如在你的机器上安装Chromium。你可以使用以下命令安装它：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, trying `npm test` again should give you the following output, showing
    that the one example test that’s included is passing:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，再次尝试 `npm test` 应该会给出以下输出，显示包含的一个示例测试正在通过：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This test, `index page has expected h1`, is a test for the `"Welcome to SvelteKit"`
    message you saw earlier when you launched the application in the browser.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试，`index页面有预期的h1`，是对你在浏览器中启动应用程序时看到的 `"欢迎来到SvelteKit"` 消息的测试。
- en: Running Vitest
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行Vitest
- en: 'Running `npm run test:unit` is the default way to run Vitest tests. Try it
    now:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `npm run test:unit` 是运行Vitest测试的默认方式。现在试试看：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This automatically puts you in watch mode, which means any changes to the filesystem
    will cause tests to re-run. Press *q* to quit this mode. I personally don’t use
    watch mode and we won’t be using it in this book. See the *Creating a shell alias*
    section for a little discussion on why this is.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这会自动将你置于监视模式，这意味着文件系统中的任何更改都会导致测试重新运行。按 *q* 退出此模式。我个人不使用监视模式，我们在这本书中也不会使用它。请参阅
    *创建shell别名* 部分以了解为什么。
- en: In the next section, we’ll make the ergonomics of the project a little easier
    for us.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将使项目的操作更加便捷。
- en: Preparing your development environment for frequent unit testing
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为频繁的单元测试准备你的开发环境
- en: In this section, we’ll take some configuration actions that will make our test-driven
    lives much simpler.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将采取一些配置操作，这将使我们的测试驱动生活变得更加简单。
- en: Choosing your editor
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择你的编辑器
- en: Let’s start with your choice of code editor. More than likely, this means a
    choice between an IDE, such as Visual Studio Code, or a plain text editor, such
    as Vim or Emacs.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从你选择的代码编辑器开始。很可能这意味着在IDE，如Visual Studio Code，或纯文本编辑器，如Vim或Emacs之间做出选择。
- en: IDEs tend to have lots of bells and whistles and one of those is the built-in
    test runner, which runs tests for you and integrates test output into the editor
    itself. On the other hand, plain text editors will require you to have a separate
    Terminal window for you to enter test commands directly, as you did in the previous
    section.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: IDE通常有很多功能，其中之一是内置的测试运行器，它会为你运行测试并将测试输出集成到编辑器本身。另一方面，纯文本编辑器将需要你有一个单独的终端窗口来直接输入测试命令，就像你在上一节中所做的那样。
- en: '*Figure 1**.1* shows how my own setup looks, using Vim and tmux to split windows.
    The top half of the screen is where I edit my source files, and when I’m ready
    to run tests, I can switch to the bottom half and enter the `test` command.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1**.1* 展示了我的个人设置，使用Vim和tmux来分割窗口。屏幕的上半部分是我编辑源文件的地方，当我准备好运行测试时，我可以切换到下半部分并输入
    `test` 命令。'
- en: '![Figure 1.1 – Using tmux and Vim](img/Figure_1.1_B19611.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图1.1 – 使用tmux和Vim](img/Figure_1.1_B19611.jpg)'
- en: Figure 1.1 – Using tmux and Vim
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 – 使用tmux和Vim
- en: '*Figure 1**.2* shows the same project in Visual Studio Code with the Vitest
    extension installed. Notice the test runner has a bunch of neat features, such
    as the ability to filter the test output, and green ticks next to the line numbers
    of passing tests.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1**.2* 展示了安装了 Vitest 扩展的 Visual Studio Code 中的相同项目。注意测试运行器有许多整洁的功能，例如能够过滤测试输出，以及通过测试通过行的数字旁边的绿色勾选标记。'
- en: '![Figure 1.2 – Using Visual Studio Code to run tests](img/Figure_1.2_B19611.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2 – 使用 Visual Studio Code 运行测试](img/Figure_1.2_B19611.jpg)'
- en: Figure 1.2 – Using Visual Studio Code to run tests
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – 使用 Visual Studio Code 运行测试
- en: I think there is a lot to learn from using a plain editor and Terminal setup,
    but if you don’t feel comfortable with that, then it’s best to stick to your favorite
    IDE for now.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为从使用纯编辑器和终端设置中可以学到很多东西，但如果您对此感到不舒服，那么现在最好坚持使用您最喜欢的 IDE。
- en: The one thing you want to make sure of is that it’s easy and quick to run tests.
    So, if you’re writing a new test, you want to immediately run it and see it fail.
    And if you’re making a test pass or refactoring tests, make sure you can quickly
    re-run tests to check your progress.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您想要确保的一件事是测试运行既简单又快捷。因此，如果您正在编写一个新的测试，您希望立即运行它并看到它失败。如果您正在使测试通过或重构测试，请确保您可以快速重新运行测试以检查您的进度。
- en: Creating a shell alias
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 shell 别名
- en: 'If you’re choosing to use the Terminal to run tests, then you will almost certainly
    want to set up an alias to make it simpler to run Vitest unit tests. You’ll recall
    that there are two commands that you use for running tests: `npm test` for Playwright
    tests and the `npm run test:unit` command for Vitest unit tests.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择使用终端来运行测试，那么您几乎肯定想要设置一个别名，以便更简单地运行 Vitest 单元测试。您会记得，您使用两个命令来运行测试：`npm test`
    用于 Playwright 测试，以及 `npm run test:unit` 命令用于 Vitest 单元测试。
- en: The style of testing shown in this book follows the classic *test pyramid* approach
    to testing, which states that we should have lots of little unit tests (in Vitest)
    and far fewer system tests (in Playwright).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 本书展示的测试风格遵循经典的 *测试金字塔* 测试方法，该方法指出我们应该有很多小的单元测试（在 Vitest 中）和很少的系统测试（在 Playwright
    中）。
- en: So, given that we’ll be working much more frequently with Vitest, doesn’t it
    make sense to have the *shorter* `test` command be the one that runs unit tests?
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们将更频繁地使用 Vitest，那么让 `test` 命令运行单元测试不是更合理吗？
- en: 'The solution that I use is a shell alias, `v`, that invokes Vitest. If you
    wanted to use the standard watch mode, you’d set up the shell alias to run this
    command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用的解决方案是一个 shell 别名 `v`，它调用 Vitest。如果您想使用标准的监视模式，您需要设置 shell 别名为运行此命令：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'However, because I don’t want to use watch mode, I set it up to use this command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，因为我不想使用监视模式，所以我将其设置为使用此命令：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: I‘d suggest you use this version, at least while you read through this book.
    I find that watch mode tends to break silently, especially when you’re in the
    first stages of setting up a project. To avoid confusion, better to just invoke
    the test command when you’re ready.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议您使用这个版本，至少在您阅读这本书的时候。我发现监视模式往往会静默地崩溃，尤其是在您处于设置项目的初期阶段。为了避免混淆，最好在准备好时再调用测试命令。
- en: 'On my Mac, my default shell is `zsh`, which configures its shell aliases in
    the `~/.zshrc` file. You can add that alias to the file using the following commands:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的 Mac 上，我的默认 shell 是 `zsh`，它在其配置的 shell 别名在 `~/.zshrc` 文件中。您可以使用以下命令将该别名添加到文件中：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, you can simply type the `v` command to run your Vitest unit tests. You
    can also use this to run a single test file, like this:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您只需输入 `v` 命令即可运行您的 Vitest 单元测试。您也可以使用此命令运行单个测试文件，如下所示：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This is a handy way to run just a small part of your test suite.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种方便的方法来运行您测试套件的一小部分。
- en: Changing the test runner to report each test name
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将测试运行器更改为报告每个测试名称
- en: 'Recall that when we ran our Vitest unit tests, the test report told us the
    filename of the test suite that was run, together with some summary information:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，当我们运行我们的 Vitest 单元测试时，测试报告告诉我们运行的测试套件的文件名，以及一些摘要信息：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: It turns out this isn’t enough – we want to see test names too, just like how
    the Playwright test told us the description of the test that was passing.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 结果发现这还不够——我们还想看到测试名称，就像 Playwright 测试告诉我们通过测试的描述一样。
- en: 'Open the `vite.config.js` file and add a new `reporter` property that is set
    to `verbose`, as shown in the following code block:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `vite.config.js` 文件，并添加一个新的 `reporter` 属性，将其设置为 `verbose`，如下面的代码块所示：
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Be careful
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 小心
- en: If you had left your test runner running in watch mode, you’ll need to restart
    it at this point, and at any other point in which you modify the configuration.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前在监视模式下运行测试运行器，此时你需要重新启动它，以及在任何修改配置的其他时刻。
- en: 'Now, running tests at the command line using the `v` command will give this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用`v`命令在命令行运行测试将给出以下结果：
- en: '[PRE17]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Much better!
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！
- en: Watching the test fail
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 观察测试失败
- en: 'We’re almost done with configuring Vitest, but before continuing, let’s check
    that the test actually tests what we want it to test. This is an important concept
    with TDD: if you’ve never seen a test fail, how do you know it tests the right
    thing?'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎完成了Vitest的配置，但在继续之前，让我们检查一下测试实际上是否测试了我们想要测试的内容。这是TDD中的一个重要概念：如果你从未见过失败的测试，你怎么知道它测试了正确的内容？
- en: 'Open `src/index.test.js` and take a look:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`src/index.test.js`并查看：
- en: '[PRE18]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Make a change to the `expect` statement, like the one shown here:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 对`expect`语句进行更改，就像这里显示的那样：
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now if you run the test, you should see a failure:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果你运行测试，你应该会看到失败：
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Brilliant – our test runner seems to be in working order. You can go ahead and
    undo the change to the test, and watch it go green again. That’s it for the basic
    editor configuration.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了 – 我们的测试运行器似乎一切正常。你可以继续撤销对测试的更改，并再次看到它变绿。这就是基本编辑器配置的全部内容。
- en: Test file location – src or test?
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试文件位置 – 在`src`还是`test`？
- en: In many other programming environments, test files are kept apart from application
    source files. A separate directory named something like `tests` or `specs` is
    used to house all executable test scripts.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多其他编程环境中，测试文件与应用程序源文件分开。一个名为`tests`或`specs`的单独目录用于存放所有可执行测试脚本。
- en: There can be a couple of advantages to that. First, it can avoid packaging tests
    with application code when it comes to building deployable units. However, Svelte
    (and JavaScript in general) doesn’t suffer from this problem because only modules
    referenced by the application entry point will be bundled.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做有几个优点。首先，它可以在构建可部署单元时避免将测试与应用程序代码打包在一起。然而，Svelte（以及JavaScript）并不存在这个问题，因为只有由应用程序入口点引用的模块才会被打包。
- en: 'Second, having a separate directory avoids the mindset of *one test file per
    module*. Not all modules need unit tests: if a unit exists as a part of a larger
    unit, we’ll often just write tests for the top-level unit and those tests will
    also provide coverage for the lower-level unit. Conversely, sometimes it’s helpful
    to have two (or more!) test files for a single module.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 第二，拥有一个单独的目录可以避免“每个模块一个测试文件”的思维模式。并非所有模块都需要单元测试：如果一个单元作为更大单元的一部分存在，我们通常会只为顶层单元编写测试，这些测试也将为低层单元提供覆盖率。相反，有时为单个模块拥有两个（或更多！）测试文件是有帮助的。
- en: That’s especially true when using component mocks that wipe out a component
    mock for an entire module. You might want a test file that mocks a component,
    and another test file where the component isn’t mocked. We’ll look at component
    mocks in [*Chapter 12*](B19611_12.xhtml#_idTextAnchor134), *Using Component Mocks
    to* *Clarify Tests*.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这尤其在使用会清除整个模块的组件模拟时成立。你可能需要一个模拟组件的测试文件，以及另一个没有模拟组件的测试文件。我们将在[*第12章*](B19611_12.xhtml#_idTextAnchor134)中探讨组件模拟，*使用组件模拟来澄清测试*。
- en: The current SvelteKit approach is to keep Vitest test files housed within the
    `src` directory. Partly, this is to avoid confusion with Playwright tests, which
    *do* live in a separate directory, named `tests`. (We’ll see Playwright tests
    starting from [*Chapter 3*](B19611_03.xhtml#_idTextAnchor050), *Loading Data into*
    *a Route*).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当前SvelteKit的方法是将Vitest测试文件保存在`src`目录中。部分原因是避免与位于单独目录`tests`中的Playwright测试混淆，Playwright测试确实位于单独的目录中。（我们将在[*第3章*](B19611_03.xhtml#_idTextAnchor050)中看到Playwright测试，*将数据加载到路由中*）。
- en: This book continues with that style, but I would encourage you to explore and
    adopt whichever style you feel most comfortable with.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书将继续采用这种风格，但我鼓励你探索并采用你感觉最舒适的风格。
- en: In the next section, we’ll add support for the kinds of tests we’ll be writing
    throughout the book.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将添加对本书中将编写的各种测试的支持。
- en: Configuring support for Svelte component tests
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Svelte组件测试支持
- en: A Svelte *component test* is one that, perhaps unsurprisingly, tests a Svelte
    component. For this, we need access to a **Document Object Model** (**DOM**),
    which isn’t part of the standard Node.js environment. We’ll also need some additional
    packages for writing unit test expectations against the DOM.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Svelte *组件测试*是一种测试Svelte组件的测试。为此，我们需要访问**文档对象模型**（**DOM**），它不是Node.js标准环境的一部分。我们还需要一些额外的包来编写针对DOM的单元测试期望。
- en: Installing jsdom and testing library helpers
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装jsdom和测试库助手
- en: 'At the Terminal, run the following command to install the `jsdom` package and
    `@testing-library` packages that we’ll use in our unit tests:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中，运行以下命令来安装我们将用于单元测试的`jsdom`包和`@testing-library`包：
- en: '[PRE21]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: If you’re using TypeScript, at this point, you may wish to add packages containing
    type definitions.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用TypeScript，此时你可能希望添加包含类型定义的包。
- en: 'Next, create a new file named `src/vitest/registerMatchers.js` with the following
    content. It ensures that the matchers we’ll be using are available for use via
    the `expect` function:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为`src/vitest/registerMatchers.js`的新文件，内容如下。它确保我们将使用的匹配器可以通过`expect`函数使用：
- en: '[PRE22]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then, update `vite.config.js` to add a new `environment` property, which installs
    `jsdom` correctly, and also a `setupFiles` property, which ensures the file defined
    previously is loaded (and invoked) just before the test suites are loaded:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，更新`vite.config.js`以添加一个新的`environment`属性，正确安装`jsdom`，以及一个`setupFiles`属性，确保之前定义的文件在测试套件加载前（和调用）被加载（和调用）：
- en: '[PRE23]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: That’s it for the basic setup. Now let’s test it out.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 基本设置到此结束。现在让我们测试一下。
- en: Writing a test for the DOM
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写对DOM的测试
- en: 'Open the `src/index.test.js` file and add the following test definition, inside
    the `describe` block. This test makes use of the `document` object that is created
    for us by the `jsdom` package, and the `toHaveTextContent` matcher that is provided
    by the `@``testing-library/jest-dom` package:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`src/index.test.js`文件，在`describe`块内添加以下测试定义。这个测试使用了`jsdom`包为我们创建的`document`对象，以及由`@testing-library/jest-dom`包提供的`toHaveTextContent`匹配器：
- en: '[PRE24]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now, if you run the test, you should see it pass. But, just as you did with
    the first test, it’s important to confirm the test actually tests what it says
    it does. Change the test by commenting out or deleting the first line of the test,
    and then re-running the test runner.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你运行测试，你应该看到它通过。但，就像你第一次测试那样，确认测试实际上测试了它所说的内容非常重要。通过注释掉或删除测试的第一行来更改测试，然后重新运行测试运行器。
- en: 'You should see an output as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '[PRE25]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: That proves the test is working. You can go ahead and undo the breaking change
    you made.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这证明了测试正在工作。你可以继续撤销你做的破坏性更改。
- en: Writing a first Svelte component test
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写第一个Svelte组件测试
- en: 'Next, let’s write an actual Svelte component and test that out. Create a new
    file named `src/Hello.svelte` with the following content:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们编写一个实际的Svelte组件并对其进行测试。创建一个名为`src/Hello.svelte`的新文件，内容如下：
- en: '[PRE26]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then, go back to the `src/index.test.js` file and refactor your test to use
    this new component. To do that, replace the call to `document.outerHTML` with
    a call to the `render` function, like this:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，回到`src/index.test.js`文件，重构你的测试以使用这个新组件。为此，将`document.outerHTML`的调用替换为对`render`函数的调用，如下所示：
- en: '[PRE27]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This `render` function comes from the `@testing-library/svelte` package. Import
    that now, along with an import for the `Hello` component, placed at the top of
    the file:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`render`函数来自`@testing-library/svelte`包。现在导入它，以及一个`Hello`组件的导入，将其放置在文件顶部：
- en: '[PRE28]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Check that the test still passes with the refactor.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 确认重构后的测试仍然通过。
- en: 'Then, add this third test, which verifies that the `name` prop in the component
    is being used to verify the output:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，添加第三个测试，它验证组件中的`name`属性是否被用来验证输出：
- en: '[PRE29]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Run the test and make sure it passes.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 运行测试并确保它通过。
- en: 'Now, go ahead and comment out the `render` call in the last test. You might
    think that the test fails with an error saying nothing was rendered on-screen.
    But let’s see what happens:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，请先注释掉最后一个测试中的`render`调用。你可能认为测试会因为屏幕上没有渲染任何内容而失败。但让我们看看会发生什么：
- en: '[PRE30]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Hold on a second; is this what we expected? This test didn’t ever print out
    a `Hello, world!` message so why is the test expectation picking it up?
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 等一下，这是我们所期望的吗？这个测试从未打印出`Hello, world!`消息，那么为什么测试期望会捕捉到它？
- en: It turns out that our tests share the same `document` object, which is clearly
    not good for test independence. Imagine if the second test also expected to see
    `Hello, world!` rather than `Hello, Svelte!`. It would have passed by virtue of
    the first test running. We need to do something about this.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 结果表明，我们的测试共享同一个`document`对象，这显然不利于测试的独立性。想象一下，如果第二个测试也期望看到`Hello, world!`而不是`Hello,
    Svelte!`，它就会因为第一个测试的运行而通过。我们需要对此采取措施。
- en: Ensuring the DOM is cleared after each test run
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确保在每次测试运行后清除DOM
- en: We want to make sure that every test gets its own clean version of the DOM.
    We can do this by using the `cleanup` function.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想确保每个测试都得到其自己的干净DOM版本。我们可以通过使用`cleanup`函数来实现这一点。
- en: 'Create a new file named `src/vitest/cleanupDom.js`:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`src/vitest/cleanupDom.js`的新文件：
- en: '[PRE31]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then, insert that into the `setupFiles` property in `vite.config.js`:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将其插入`vite.config.js`中的`setupFiles`属性：
- en: '[PRE32]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Now, if you run your failing test again, you should see that the `Hello, world!`
    message no longer appears.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你再次运行你的失败测试，你应该会看到`Hello, world!`消息不再出现。
- en: Before continuing, uncomment the `render` call and check your tests are back
    in an all-green state.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，取消注释`render`调用并检查你的测试是否回到了全绿色状态。
- en: Restoring mocks automatically
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动恢复模拟
- en: 'There’s one final piece of configuration we need in `vite.config.js`. Add the
    `restoreMocks` property, as shown here:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在`vite.config.js`中进行最后的配置。添加`restoreMocks`属性，如下所示：
- en: '[PRE33]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This is also important for test independence and will be important in [*Chapter
    11*](B19611_11.xhtml#_idTextAnchor127), *Replacing Behavior with a Side-By-Side
    Implementation*, when we begin using the `vi.fn` function for building test doubles.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于测试的独立性也很重要，在[*第11章*](B19611_11.xhtml#_idTextAnchor127)中，*用并排实现替换行为*，当我们开始使用`vi.fn`函数构建测试替身时，这一点将变得很重要。
- en: That covers all the configuration you need for the rest of the book. The next
    section touches briefly on some optional configurations you might want to consider.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这涵盖了本书其余部分所需的所有配置。下一节简要介绍了你可能想要考虑的一些可选配置。
- en: Optional configuration
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可选配置
- en: In this section, we’ll look at configuring Prettier and setting up more appropriate
    tab widths on the Terminal. These settings mirror the print settings that are
    used in this book.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将查看配置Prettier并在终端上设置更合适的制表符宽度。这些设置与本书中使用的打印设置相匹配。
- en: Configuring Prettier’s print width
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Prettier的打印宽度
- en: Due to the constraint of the physical pages in this book, I have set the `printWidth`
    setting of Prettier to 54 characters, and all code samples are formatted with
    that setting.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书的物理页面限制，我已经将Prettier的`printWidth`设置设置为54个字符，并且所有代码示例都是使用该设置格式化的。
- en: I also think the default value, `100`, is too high. I like short columns of
    text as I find them easier to share and read in all sorts of environments – such
    as on mobile devices, where it’s much easier to scroll vertically than it is horizontally.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我也认为默认值，`100`，太高了。我喜欢短文本列，因为我觉得它们在各种环境中更容易分享和阅读——比如在移动设备上，垂直滚动比水平滚动要容易得多。
- en: Also, having extra vertical space comes in handy when you are pairing with other
    developers and you want to refer to particular line numbers (assuming you have
    line numbers turned on).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当你与其他开发者配对并想要参考特定的行号时（假设你已经打开了行号），额外的垂直空间也很有用。
- en: 'In `.prettierrc`, you can set the print width with the following addition:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在`.prettierrc`中，你可以通过以下方式设置打印宽度：
- en: '[PRE34]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: You might be more comfortable with something in the `60` to `80` range.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能更喜欢`60`到`80`范围内的某个值。
- en: Reducing the tab width in the Terminal
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在终端中减少制表符宽度
- en: The Svelte community has a preference for tabs over spaces because tabs are
    better for screen readers. Unfortunately, a lot of Terminals and shell programs
    are set up for a default tab width of eight characters, which is way too many
    for my liking.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Svelte 社区更喜欢使用制表符而不是空格，因为制表符对屏幕阅读器更好。不幸的是，很多终端和shell程序默认的制表符宽度是八个字符，这对我来说太多了。
- en: 'Although every Terminal is different, the one solid piece of advice I have
    is to set `git config` to use `less` as its pager, with tab stops at positions
    `1`, `3`, `5`, and `7`:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管每个终端都不相同，但我有一个坚定的建议，那就是将`git config`设置为使用`less`作为其分页器，制表符位置在`1`、`3`、`5`和`7`：
- en: '[PRE35]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This makes `git diff` and `git show` much more bearable, and these are two commands
    I use extremely frequently.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得`git diff`和`git show`更加可忍受，这两个命令我使用得非常频繁。
- en: Summary
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter has taken a detailed look at the various parts of a base SvelteKit
    project, showing how Playwright and Vitest are added, together with the additional
    dependencies you’ll need to write Svelte component tests.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 本章详细探讨了基础SvelteKit项目的各个部分，展示了如何添加Playwright和Vitest，以及您编写Svelte组件测试所需的额外依赖项。
- en: We’ve also looked at some of the ways you can set up your development environment
    to help you be productive.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还探讨了您如何设置开发环境的一些方法，以帮助您提高工作效率。
- en: You’re now ready to start exploring TDD practices, starting with the *Red-Green-Refactor
    Cycle -> Workflow* in the next chapter.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以开始探索TDD实践了，下一章将从*红-绿-重构周期 -> 工作流程*开始。
