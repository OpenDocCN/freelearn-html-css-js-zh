- en: Chapter 12. Basic Performance Tuning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Scalable infrastructure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up database access for the master/slave configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling JS and CSS minification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Turning on the CDN host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disabling unused Liferay features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JVM tuning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most important aspects of successful project realization is system
    performance. Everybody knows that Web users often face a long wait when downloading
    web pages. What is the tolerable waiting time for web page download? In our opinion,
    a comfortable response time should be less than 2 seconds. If users have to wait
    more than 4 seconds, they usually go away. Performance issues is the most difficult
    subject in a big data portal or intranet. System architecture affects performance.
    Portals with a lot of images, movies, and audio should have a different architecture
    compared to intranets, as these portals have a lot of users who log in very often
    at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, there are some general rules that help improve Liferay''s performance:'
  prefs: []
  type: TYPE_NORMAL
- en: Scalable infrastructure with HTTP cache proxy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fast database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Appropriate Java settings, such as garbage collector engine or memory settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minimal number of included files, such as JS, CSS, images, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Content distribution** **network** (**CDN**) for static resources'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Liferay Portal tuning, for instance, disabling unused filters, changing properties,
    and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scalable infrastructure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Defining the architecture is the most important part of a successful installation.
    A good architecture should be fault-tolerant and have a high level of availability.
    To achieve this, it is necessary to cluster all the possible nodes, such as Tomcat
    nodes, search nodes, and so on. The second important thing is building a scalable
    infrastructure that lets us add new nodes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will try defining reference infrastructure, which can be
    used on production deployments. This type of infrastructure is used in our projects
    and works perfectly. The main parts of our environments are: squid cache, Apache
    servers with `mod_jk` module and software load balancers, Apache Tomcat Application
    Servers, Solr Cloud and Database server. The following image shows the most important
    parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00378.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Squid cache
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first tier of our architecture is Squid cache ([http://www.squid-cache.org/](http://www.squid-cache.org/)).
    It is a caching proxy for the Web. It supports HTTP, HTTPS, and other protocols.
    It reduces the number of requests, which go to another tier, especially to the
    Liferay instance. Squid cache reads HTTP headers and decides whether a specific
    request can be cached and how long they can be cached. This option can be used
    for content that doesn't change frequently, such as images, CSS, JS, and so on.
    This kind of solution gives a noticeable boost to our application.
  prefs: []
  type: TYPE_NORMAL
- en: Apache web server and software load balancer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The next tier has Apache web server instances with a load balancer software.
    Each instance of the Apache server is connected with all Liferay nodes. This connection
    is established by the `mod_jk Tomcat-Apache` plugin ([https://tomcat.apache.org/tomcat-3.3-doc/mod_jk-howto.html](https://tomcat.apache.org/tomcat-3.3-doc/mod_jk-howto.html)).
    This plugin handles the communication between Tomcat and Apache using the AJP
    protocol. Every Apache server instance has a load balancer configuration. The
    most common load balancer configuration uses the `mod_jk` plugin. The configuration
    is placed in the `workers.properties` file in the `$APACHE_HOME/conf` directory.
    The following listing shows an example of the `mod_jk` and load balancer configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The first line specifies a list of workers. In our example, there are three
    workers: `node1`, `node2`, and `loadbalancer`. Workers with names `node1` and
    `node2` describe connection with Liferay (host, port, and timeout definitions).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The bold definition describes the load balancer configuration. It contains
    a list of workers (the `worker.loadbalancer.balance_workers` property), and specifies
    the sticky session policy and the number of retries if a request fails. Load balancer
    can be configured with the following two modes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sticky session**: This distributes all the requests for a specific session
    to a specific Liferay Portal server node.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Session replication**: This provides a mechanism for session replication.
    From a business point of view, this is a great feature because it is failure-independent.
    If one of the nodes fail, load balancer decides to send the request to a different
    one. Users don''t see any difference.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From the performance tuning point of view, the best option is sticky session,
    because it eliminates many requests compared to session replication. In other
    words, sticky session reduces traffic and saves resources.
  prefs: []
  type: TYPE_NORMAL
- en: Apache Tomcat Application Server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This tier is the heart of the application, because in this tier, the Tomcat
    container, with our Liferay Portal instance, is placed. In a clustered environment,
    it is important to properly configure Liferay Portal, because all the components
    must have a dedicated configuration, such as sharing documents and media files,
    configuring the same access to the database, and configuring cache and search
    index replication.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we use the Apache `mod_jk` module, it is important to set the `jvmRoute`
    identifier in every Apache Tomcat instance. To do this, place the following configuration
    in `${TOMCAT_HOME}/conf/server.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: To share documents and media files, we recommend that you use the glusterFS
    system ([http://www.gluster.org/](http://www.gluster.org/)), which shares documents
    and files between nodes. There are different ways to configure documents and media
    working in a clustered environment, which we described in the previous chapter.
    We will describe other configurations in the upcoming recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Database server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The database server tier is responsible for storing data on the database system.
    In a huge system, the database is usually one of the major bottlenecks, and database
    administrators often have a lot of problems with performance. In our projects,
    we generally use the MySQL database with master/slave configuration. The master
    database is responsible for writing, while the slave database is responsible for
    reading. Liferay provides out-of-the-box mechanisms that allow us to configure
    it. We will describe them in the upcoming recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Solr search engine server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The last tier is an Apache Solr search engine server ([http://lucene.apache.org/solr/](http://lucene.apache.org/solr/)).
    Solr is highly reliable, scalable, and fault-tolerant, providing distributed indexing,
    replication and load-balanced querying, automated failover and recovery, centralized
    configuration, and more. These things are possible to configure if we install
    Apache Zookeeper ([https://zookeeper.apache.org/](https://zookeeper.apache.org/))
    and Apache Solr together. Zookeeper is a centralized service that maintains configuration
    information, naming, and provides distributed synchronization and group services,
    for instance, Apache Solr. Therefore, Apache Zookeeper can be installed as a cloud
    solution that can eliminate single point of failure. The Zookeeper server selects
    a Solr node, which is a master, and gives a token.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For information on clustering and configuring the environment, refer to the
    following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: The *Integration with the Amazon S3 cloud* recipe from [Chapter 6](part0050.xhtml#aid-1FLS41
    "Chapter 6. Documents and Media in Liferay"), *Documents and Media in Liferay*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Solr installation and configuration* recipe from [Chapter 8](part0059.xhtml#aid-1O8H61
    "Chapter 8. Search and Content Presentation Tools"), *Search and Content Presentation
    Tools*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Clustering Liferay Portal and the Configuring Liferay with the SMTP server*
    recipes from [Chapter 11](part0080.xhtml#aid-2C9D01 "Chapter 11. Quick Tricks
    and Advanced Knowledge"), *Quick Tricks and Advanced Knowledge*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Setting up database access for the master/slave configuration* recipe from
    this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up database access for the master/slave configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Liferay allows us to configure two different data sources: first for writing
    and second for reading. This configuration, in an easy way, allows users to split
    writing and reading requests. This type of configuration lets us build scalable
    and high-performance infrastructure.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we mentioned at the beginning, we are focusing on Liferay configuration aspects.
    Our assumption is that you are ready to use database servers with master/slave
    replication. The MySql official documentation at [https://dev.mysql.com/doc/refman/5.1/en/replication-configuration.html](https://dev.mysql.com/doc/refman/5.1/en/replication-configuration.html)
    describes how to configure replication.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to achieve our goal, open `portal-ext.properties` and configure the
    following settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to enable the Spring configuration, which contains settings
    to read/write data sources. Add the following property into `portal-ext.properties`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: At the end, restart your application server. Make sure that database replication
    works correctly.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our configuration, all write transactions will address the `jdbc.write.*`
    data source and read transactions will use the `jdbc.read.*` data source. In order
    to verify this configuration, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Shut down the master database instance (`jdbc.write`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run your Liferay instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try to browse Liferay Portal and upload a new content, such as an article or
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `catalina.out` log file, there should be an appropriate error message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From a technical point of view, Liferay extends the `org.springframework.aop.TargetSource`
    Spring class, which can recognize whether the method contains a read or write
    operation. The rule is really simple: if a method on a service layer has the `@Transactional`
    annotation, then all queries go to the write data source. In other cases, queries
    go to the read data source.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some projects use Liferay with a lot of Portal instances. In this case, the
    term "Portal instances" means Liferay allows administrators to run more than one
    portal instance on a single server. Data for each portal instance can be kept
    separately from every other portal instance. This separation can be organized
    in the database tier. Each database node can store different types of data, depending
    on the portal instance. This separation is called database shard.
  prefs: []
  type: TYPE_NORMAL
- en: 'Portal instance configuration allows us to choose the shard in which data will
    be stored. A database shard is a horizontal partition of data in a database. Each
    shard is held on a separate database server instance to spread the load. To configure
    sharding in Liferay, follow this instruction:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `portal-ext.properties` file, specify an algorithm to select a new shard
    on portal instance creation. Use `ManualShardSelector` for shard selection via
    the web interface or round robin in other case. The round-robin algorithm evenly
    distributes the data between shards. A manual selector lets us assign each Liferay
    instance to the specific shard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, set your shard data sources:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last thing is the `spring.configs` configuration, which should look like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `<DEFAULT_CONFIGURATION>` placeholder keeps all the original `spring.configs`
    configurations, which are defined in the `portal.porperties` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enabling JS and CSS minification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When your web page loads in a browser, the browser sends an HTTP request to
    the web server for the page in the URL. Then, as the HTML is delivered, the browser
    parses it and looks for additional requests for images, scripts, CSS, and so on.
    Every time it sees a request for a new element, it sends another HTTP request
    to the server. In order to decrease the number of additional requests, Liferay
    has the following ready-to-use mechanisms:'
  prefs: []
  type: TYPE_NORMAL
- en: Minifier (compressor) that allows you to compress and minify your JavaScript
    and CSS files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Merging JavaScript files to reduce the number of HTTP requests using `barebone.jsp`
    and `everything.jsp`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Merging CSS files and images for faster loading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling Gzip compression
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To set Liferay''s fast-load mechanisms, set the following properties in the
    `portal-ext.properties` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, if you use custom scripts, add them to the `javascript.barebone.files`
    and `javascript.everything.files` properties in the `portal-ext.properties` file.
    The last step is enabling Gzip compression. It is possible to do this by turning
    on the following property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'A better option is delegating this responsibility to Apache server, because
    it reduces the number of requests in the Apache Tomcat server. To enable Gzip
    compression on Apache server, open `${APACHE_HOME}/conf/httpd.conf` and add the
    following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure that the `deflate` module is enabled. Look for the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we were concentrating on reducing the number of requests and
    decreasing the size of the response. Liferay combines JS files into one file and
    stores it in the application server''s `temp` directory. On the page, the link
    to this file for unauthenticated users looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: For authenticated users, it is very similar. Instead of `barebone.jsp`, there
    is the `everything.jsp` file.
  prefs: []
  type: TYPE_NORMAL
- en: If we dig deep inside the generated HTML source code, there are links to CSS
    files with the `minifierType=css` parameters. This parameter turns on file minification,
    which reduces the size of a file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last magic configuration is Gzip compression. If our browser sends a request
    with the `Accept-Encoding: gzip,deflate` header, our system returns Gzipped content.
    To test it, invoke the following command from your command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In the response, there should be the `Content-Encoding: gzip` header.'
  prefs: []
  type: TYPE_NORMAL
- en: Turning on the CDN host
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, you learned how to connect with minifying CSS and JS
    files and reduce the number of requests to the Liferay Portal. The next step in
    our configuration is reducing requests to the application server where Liferay
    is. The idea is that some static resources can be served by Apache server or,
    better, by Squid cache. Delivering static resources through the Apache server
    or Squid cache instead of the application server improves the response time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Liferay supports CDN. Wikipedia defines this term as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"A content delivery network or content distribution network (CDN) is a large
    distributed system of servers deployed in multiple data centers across the Internet.
    The goal of a CDN is to serve content to end-users with high availability and
    high performance."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Getting ready…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our idea is to use CDN domains to serve static resources and cache them in the
    Squid cache. The most difficult part is the Squid configuration, which caches
    all the static files coming from a CDN host. In this recipe, we will assume that
    this configuration is done, and we have a static domain for our resources, for
    example, [http://static.mysite.com](http://static.mysite.com)
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'CDN configuration is very simple in Liferay. There are only two properties,
    which should be set in the `portal-ext.properties`. These properties are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After successful CDN configuration, all of the static resources are served from
    an external domain. When we look inside HTML sources, we see that all static resources,
    such as CSS files, JavaScript files, and images, come from a different domain
    that was defined in the `cdn.host.http` property.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we built our little CDN in which our Squid cache serves static
    resources.
  prefs: []
  type: TYPE_NORMAL
- en: In huge systems, when the intended users are spread across the globe, it is
    necessary to use real CDN hosts, which are large networks of servers deployed
    across the world. There are several companies that provide this type of service,
    such as Amazon, CloudFlare, Bootstrap CDN, CacheFly, OVH, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Disabling unused Liferay features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Everybody knows that Liferay is a big system with many functionalities. The
    main idea of this portal is: we give you all the features and you fit them to
    your needs. This topic can be divided into three parts: disabling unused servlet
    filters, disabling unused autologin hooks, and disabling unused features.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Disabling unused filters allows you to increase performance, but you have to
    know which filters can be disabled. It is a difficult subject for beginners. Unfortunately,
    we cannot give you a golden rule that covers your needs. We will only try to give
    some advice and information about filters that can be turned off in the `portal-ext.properties`
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: If you don't use CAS authentication, disable the `com.liferay.portal.servlet.filters.sso.cas.CASFilter=false`
    filter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you use Gzip compression on Apache server, disable the `com.liferay.portal.servlet.filters.gzip.GZipFilter=false`
    filter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you don''t use NTLM authentication, disable the: `com.liferay.portal.servlet.filters.sso.ntlm.NtlmFilter=false`
    and `com.liferay.portal.servlet.filters.sso.ntlm.NtlmPostFilter=false` filters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you don't use OpenSSO authentication, disable the `com.liferay.portal.servlet.filters.sso.opensso.OpenSSOFilter=false`
    filter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you don't use SharePoint, disable the `com.liferay.portal.sharepoint.SharepointFilter=false`
    filter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you use Tomcat server to remove blank lines and whitespaces from the outputted
    content, disable the `com.liferay.portal.servlet.filters.strip.StripFilter=false`
    filter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The next configuration is to connect with authentication systems. Liferay supports
    many single-sign-on systems, which are enabled by default. Remove unused `AutoLogin`
    hooks from the following property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you disable the `auto.login.hooks` definition, make sure that every autologin
    definition is also disabled under the properties with the `com.liferay.portal.servlet.filters.sso`
    prefix. For instance, if you disable `com.liferay.portal.security.auth.NtlmAutoLogin`,
    check whether `com.liferay.portal.servlet.filters.sso.ntlm.NtlmFilter` is set
    as `false`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last configuration disables some features that affect the performance:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don''t use user session tracker or this functionality is not required,
    disable the: `session.tracker.memory.enabled=false` property'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you don't use the read count for document library files, disable the `dl.file.entry.read.count.enabled=false`
    property
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you don't use file rank for document library files, disable the `dl.file.rank.enabled=false`
    property
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you don't use the view counter for assets, disable the `asset.entry.increment.view.counter.enabled=false`
    property
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Disable pingbacks and trackbacks if you don''t use them:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Liferay gives users a file called `portal.properties` that can be overridden
    by the `portal-ext.properties` configuration file. The `portal.properties` file
    is located in the `portal-impl/src/` folder. This is the main tool to customize
    the Liferay Portal and disable unnecessary options. Every administrator and developer
    should study this file and try to fit portal to the project's requirements. It
    is hard work, because the configuration file has more than 10,000 lines. The good
    news is that every property has a comment.
  prefs: []
  type: TYPE_NORMAL
- en: JVM tuning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JVM tuning is an operation that should be done after performance tests or during
    production. JVM configuration affects the Java application''s performance. There
    are two necessary configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: Memory settings (such as heap configuration)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Garbage collector settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are a lot of publications about JVM tuning. Thus, in this recipe, we will
    only mention the main aspects.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every JVM setting can be set in `JAVA_OPTS` (Java Environment Options). A great
    place to do it is in the `${TOMCAT_HOME}/bin/setenv.sh` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s set a proper garbage collector. The best option for portal systems
    is **Concurrent Collector** or **G1** (in Java 8). These garbage collectors perform
    most of their work concurrently with only a small period of stop-the-world time.
    These garbage collectors give the best performance. The typical setting is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The following settings are connected with memory allocation. It is very hard
    to estimate the correct configuration. Our experience shows that the best performance
    is when each node has equal to or more than 8 GB RAM. Our setting looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Every project has a different memory characteristic. The given JVM settings
    form the initial configuration and should be verified by your Java engineering
    team.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We mentioned that the best garbage collector for portal solutions is Concurrent
    Collector or G1\. Let''s analyze each setting in our `JAVA_OPTS` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '`+UseParNewGC`: This turns on the parallel young generation collector.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`+UseConcMarkSweepGC`: This turns on concurrent mark-sweep collection for the
    old generation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`+CMSParallelRemarkEnabled`: This enables the garbage collector to use multiple
    threads during the CMS remark phase. This decreases the pauses during this phase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ParallelGCThreads`: The number of threads used during parallel phases of the
    garbage collectors. It shouldn''t be more than the number of cores (processors)
    on the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`+CMSScavengeBeforeRemark`: This forces young space collection before CMS remark.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`+CMSConcurrentMTEnabled`: This allows CMS to use multiple cores for concurrent
    phases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ParallelCMSThreads`: This controls the number of threads used for the CMS
    (concurrent mark and sweep) garbage collector.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
