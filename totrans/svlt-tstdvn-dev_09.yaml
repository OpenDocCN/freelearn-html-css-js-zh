- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Extracting Logic Out of the Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An important property of maintainable software is its **testability**. This
    is the idea that all parts of the application should be straightforward to test.
    More specifically, the design of the application code should make it easy to write
    automated unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’ll look at one technique for improving testability: moving
    domain logic out of the framework and into plain JavaScript. Plain JavaScript
    code is simpler to test because there are no complex framework objects that interact
    with your code.'
  prefs: []
  type: TYPE_NORMAL
- en: The following diagram shows how to think about a SvelteKit code base in this
    way.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1 – Keeping application code outside of framework components to
    aid testability](img/Figure_9.1_B19611.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.1 – Keeping application code outside of framework components to aid
    testability
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 7*](B19611_07.xhtml#_idTextAnchor093), *Tidying up Test Suites*,
    we took a step toward moving the storage of birthday data items into a `birthdayRepository`
    module. We’ll continue that process by pushing data validation out of the SvelteKit
    form action and into `birthdayRepository` That means we can test complex validation
    rules without having to set up the complex SvelteKit form request objects, and
    without having to test the form response objects either.
  prefs: []
  type: TYPE_NORMAL
- en: And since the repository has no asynchronous behavior, the moved tests no longer
    need to be littered with `async` and `await` keywords.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics are covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Migrating tests with a test to-do list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Porting tests from the form action
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Duplicating form validation behavior in the repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extracting common methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of the chapter, you’ll have used a test-driven approach to move domain
    logic out of the framework.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code for the chapter can be found online at [https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter09/Start](https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter09/Start).
  prefs: []
  type: TYPE_NORMAL
- en: Migrating tests with a test todo list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The task at hand is moving the validation logic out of the SvelteKit form action
    we completed in [*Chapter 5*](B19611_05.xhtml#_idTextAnchor070), *Validating Form
    Data*, and into the `birthdayRepository` module. And in this section, we’ll plan
    that task using a new technique.
  prefs: []
  type: TYPE_NORMAL
- en: 'You might remember that the `birthdayRepository` module already exists but
    has no tests. That’s a situation that we often find ourselves in when we extract
    modules during refactoring. And it’s often perfectly okay to leave these modules
    untested. The issue comes when we want to modify the behavior of these modules:
    where do we add the tests?'
  prefs: []
  type: TYPE_NORMAL
- en: There’s no clear answer to that, but in this case, we’ll use the opportunity
    to duplicate all the tests from the form action in the `birthdayRepository` module,
    in addition to adding some new tests too.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting tests in the original location
  prefs: []
  type: TYPE_NORMAL
- en: We won’t delete the original tests, but that is something you should consider
    doing so that you’re not at risk of over-testing. (The only thing worse than over-testing
    is under-testing!)
  prefs: []
  type: TYPE_NORMAL
- en: 'There’s a special modifier of the `it` test function that can be used for planning
    a test suite: the `it.todo` modifier. As a form of up-front planning, it’s useful
    when you already have a concrete idea of the tests you’ll need in a test suite.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `birthdayRepository` module has two exported functions that we’re interested
    in testing: the `addNew` and `replace` functions. We will split the existing form
    action tests between the two new functions. The tests for validation errors will
    need to be duplicated for both functions. In this way, each function will be fully
    specified.'
  prefs: []
  type: TYPE_NORMAL
- en: Go ahead and create the `src/lib/server/birthdayRepository.test.js` file with
    the following content. This gets all the imports in place and primes the `birthdayRepository`
    test suite with a call to `clear` so that each test starts from a blank slate.
  prefs: []
  type: TYPE_NORMAL
- en: 'There’s also a definition of `storedId` – we can use the same technique for
    verifying data that we used in the form action tests. And we also add an empty
    test for checking the initial state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add a nested `describe` block for the `addNew` function. This takes the
    original test descriptions from the `src/routes/birthdays/page.server.test.js`
    file and morphs them into a more appropriate form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'It’s time to look at the tests for the `replace` function. You’ll see that
    the validation errors are repeated from the `addNew` context. That highlights
    a difference when splitting a single `entrypoint` (the form action) into two (the
    `addNew` and `replace` functions):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The plan is complete. The remaining sections in this chapter will complete the
    test suite, starting with the *happy path* tests, which already pass, and then
    going back to complete the validation errors.
  prefs: []
  type: TYPE_NORMAL
- en: Porting tests from the form action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we’ll write out tests for the behavior that already exists
    in the `birthdayRepository` module, together with ensuring that the functions
    return values for the form action to reuse.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `src/lib/server/birthdayRepository.js` file already contains the working
    code that you last touched on in [*Chapter 6*](B19611_06.xhtml#_idTextAnchor079),
    *Editing Form Data*. Here’s a reminder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Most of this functionality is tested by way of the form action. We need to add
    tests and then double-check that they work.
  prefs: []
  type: TYPE_NORMAL
- en: Always requiring a failing test
  prefs: []
  type: TYPE_NORMAL
- en: When porting tests, you’ll be writing tests that already pass. You skip the
    *Red* step and pass directly to *Green*. However, it’s still important to verify
    that your tests check the correct thing, and the way to do that is to delete or
    comment out the application code under test so that you can see the test fail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start on that now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `src/lib/server/birthdayRepository.test.js`, remove the `.todo` modifier
    from the first test, and add the following test content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You’ll see that the test already passed. Verify that it tests the right thing
    by replacing the `getAll` implementation with a `null` return value, and then
    re-run the test to check that it’s red. An easy way to do this is to comment out
    the rest of the line, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After checking that the test fails, bring the original implementation back and
    verify that it’s green.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill out the body of the next test, as shown in the following code. This is
    now a simpler test than the form action test we’re porting, for a couple of reasons.
    First, there’s no longer any asynchronous behavior, and second, we use a single
    factory method of `createBirthday` and avoid the more complex `performFormAction`
    helper method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Although this will already pass, it’s important to check that it’s red. You
    can do that by using the same technique of commenting out the relevant line of
    code, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After verifying that the test fails, undo the commented code and get the test
    back to green.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, fill out the third test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To verify that, you can comment out the `id` value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we come on to the test for new behavior, checking that the object is returned
    together with its new `id` property. This uses the `storedId` function defined
    at the top of the test suite:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To make that pass, introduce a variable named `itemWithId` and return it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s move on to the `replace` tests. We’ll start with the migration of
    the `beforeEach` block and the `storedId` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we’ll move on to the first test for the `replace` function. You can verify
    that in the same way you verified the first test for `getAll`, by giving it a
    `null` implementation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The final test in this section ensures that we returned the updated item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To make that pass, make exactly the same change that you made in the `addNew`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That’s all the tests that prove the existing behavior. In the next section,
    we’ll need to port across the implementation in addition to the test cases.
  prefs: []
  type: TYPE_NORMAL
- en: Duplicating form validation behavior in the repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we’ll continue porting across tests from the `src/routes/birthdays/page.server.test.js`
    file, but now we’re going to duplicate the validation behavior within the form
    action itself.
  prefs: []
  type: TYPE_NORMAL
- en: Repetition as a design signal
  prefs: []
  type: TYPE_NORMAL
- en: The following steps contain a fair amount of repetition. First, the tests are
    very similar to tests you’ve already written in the form action. Second, the same
    checks are repeated for both the `addNew` and `replace` functions.
  prefs: []
  type: TYPE_NORMAL
- en: This kind of *forced repetition* (where you feel the pain of repeated work)
    can help you to figure out what (if any) shared logic you’d like to pull out.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s begin:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by filling in the `validation errors` nested `describe` block and the
    tests within it. I’m electing to copy two tests at once because these tests are
    very simple, and we already have a good idea of where we’re going to end up with
    the implementation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To make that pass in `src/lib/server/birthdayRepository.js`, start by defining
    the `empty` function at the bottom of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, update the `addNew` method to include a guard class that uses the `empty`
    function. After this change, both tests should pass:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we’ll move on to the next nested `describe` block, for checking the date
    of birth format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To make that pass, start by duplicating the `invalidDob` helper from the form
    action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add the guard clause, which should cause both tests to pass:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s repeat the validation checks for the `replace` function. In the
    original form action tests, this wasn’t necessary because we implemented the *edit
    form* functionality by building on the top of the original action for creating
    birthdays, so the validations were already there. But now, both operations are
    separated. Fill out the new nested `describe` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To make that pass, start by duplicating the same guard clause from `addNew`.
    We’ll remove this duplication later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, move on to the date of birth:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make that pass by adding in the second guard clause, by repeating *step 6*
    but, this time, adding code within the `replace` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then onto the final test. This one doesn’t need a `describe` block since it’s
    only one test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This time, put the guard clause right at the top. It seems to make sense that
    this guard should take precedence over the name and date of birth checks – notice,
    for example, how the argument comes first in the argument list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That completes all the new functionality. All the `birthdayRepository` behavior
    is complete. Next, we’ll stop to refactor to remove duplication.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting common methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we’ll pull out the validation clauses that are duplicated in
    the `addNew` and `replace` functions, moving them into a shared `validate` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start now with the `validate` function:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Below the definitions of `addNew` and `replace`, add the following function
    named `validate`. This contains the two guard clauses that appeared in each of
    the original functions. As a simplification, the `item` argument has been destructured
    into `name` and `dob` arguments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, update `addNew` to replace its guard clauses with a call to `validate`.
    The result is stored in `validationResult`, which can then be returned if it has
    a value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, do the same for the `replace` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, how about we pull out the last bit of each function? Add the `set` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, use that in `addNew`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And finally, add the same call at the end of the `replace` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That completes the `birthdayRepository` implementation – a straightforward but
    satisfying refactoring.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has covered techniques for porting existing behavior from one place
    to another. In particular, it’s shown how worthwhile it can be to move business
    logic out of framework objects – such as form actions – and into plain JavaScript
    objects. Doing so makes the tests simpler.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, our tests were no longer asynchronous, and no longer needed to
    use the complex `performFormAction` helper.
  prefs: []
  type: TYPE_NORMAL
- en: Another benefit is that `birthdayRepository`, along with its validation, can
    be reused in other places. That’s exactly what we’ll do in the next chapter, when
    we introduce new API endpoints that interact with the repository.
  prefs: []
  type: TYPE_NORMAL
