- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Extracting Logic Out of the Framework
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从框架中提取逻辑
- en: An important property of maintainable software is its **testability**. This
    is the idea that all parts of the application should be straightforward to test.
    More specifically, the design of the application code should make it easy to write
    automated unit tests.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 可维护软件的一个重要属性是其**可测试性**。这是指应用程序的所有部分都应该易于测试。更具体地说，应用程序代码的设计应该使其容易编写自动化的单元测试。
- en: 'In this chapter, we’ll look at one technique for improving testability: moving
    domain logic out of the framework and into plain JavaScript. Plain JavaScript
    code is simpler to test because there are no complex framework objects that interact
    with your code.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨一种提高可测试性的技术：将领域逻辑从框架中移出并放入纯JavaScript。纯JavaScript代码更容易测试，因为没有复杂的框架对象与你的代码交互。
- en: The following diagram shows how to think about a SvelteKit code base in this
    way.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图示展示了如何以这种方式思考SvelteKit代码库。
- en: '![Figure 9.1 – Keeping application code outside of framework components to
    aid testability](img/Figure_9.1_B19611.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![图9.1 – 将应用程序代码保留在框架组件之外以帮助可测试性](img/Figure_9.1_B19611.jpg)'
- en: Figure 9.1 – Keeping application code outside of framework components to aid
    testability
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 – 将应用程序代码保留在框架组件之外以帮助可测试性
- en: In [*Chapter 7*](B19611_07.xhtml#_idTextAnchor093), *Tidying up Test Suites*,
    we took a step toward moving the storage of birthday data items into a `birthdayRepository`
    module. We’ll continue that process by pushing data validation out of the SvelteKit
    form action and into `birthdayRepository` That means we can test complex validation
    rules without having to set up the complex SvelteKit form request objects, and
    without having to test the form response objects either.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第7章*](B19611_07.xhtml#_idTextAnchor093)“整理测试套件”中，我们朝着将生日数据项的存储移入`birthdayRepository`模块迈出了一步。我们将继续这个过程，通过将数据验证从SvelteKit表单操作中移出并放入`birthdayRepository`。这意味着我们可以测试复杂的验证规则，而无需设置复杂的SvelteKit表单请求对象，也无需测试表单响应对象。
- en: And since the repository has no asynchronous behavior, the moved tests no longer
    need to be littered with `async` and `await` keywords.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由于仓库没有异步行为，移动的测试不再需要充斥着`async`和`await`关键字。
- en: 'The following topics are covered in this chapter:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主题：
- en: Migrating tests with a test to-do list
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用测试待办事项列表迁移测试
- en: Porting tests from the form action
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从表单操作迁移测试
- en: Duplicating form validation behavior in the repository
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在仓库中复制表单验证行为
- en: Extracting common methods
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提取常用方法
- en: By the end of the chapter, you’ll have used a test-driven approach to move domain
    logic out of the framework.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将使用测试驱动的方法将领域逻辑从框架中移出。
- en: Technical requirements
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code for the chapter can be found online at [https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter09/Start](https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter09/Start).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 该章节的代码可以在网上找到，链接为[https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter09/Start](https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter09/Start)。
- en: Migrating tests with a test todo list
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用测试待办事项列表迁移测试
- en: The task at hand is moving the validation logic out of the SvelteKit form action
    we completed in [*Chapter 5*](B19611_05.xhtml#_idTextAnchor070), *Validating Form
    Data*, and into the `birthdayRepository` module. And in this section, we’ll plan
    that task using a new technique.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当前任务是将我们在[*第5章*](B19611_05.xhtml#_idTextAnchor070)“验证表单数据”中完成的SvelteKit表单操作中的验证逻辑移出，并放入`birthdayRepository`模块。在这一节中，我们将使用一种新技术来规划这个任务。
- en: 'You might remember that the `birthdayRepository` module already exists but
    has no tests. That’s a situation that we often find ourselves in when we extract
    modules during refactoring. And it’s often perfectly okay to leave these modules
    untested. The issue comes when we want to modify the behavior of these modules:
    where do we add the tests?'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还记得`birthdayRepository`模块已经存在，但没有测试。在我们重构时提取模块时，我们经常会遇到这种情况。通常，不测试这些模块是完全可以接受的。问题在于当我们想要修改这些模块的行为时：我们在哪里添加测试？
- en: There’s no clear answer to that, but in this case, we’ll use the opportunity
    to duplicate all the tests from the form action in the `birthdayRepository` module,
    in addition to adding some new tests too.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个问题，没有明确的答案，但在这个情况下，我们将利用这个机会在`birthdayRepository`模块中复制所有来自表单操作的测试，同时也会添加一些新的测试。
- en: Deleting tests in the original location
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 删除原始位置的测试
- en: We won’t delete the original tests, but that is something you should consider
    doing so that you’re not at risk of over-testing. (The only thing worse than over-testing
    is under-testing!)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会删除原始测试，但你应该考虑这样做，以免过度测试。（比过度测试更糟糕的是不足测试！）
- en: 'There’s a special modifier of the `it` test function that can be used for planning
    a test suite: the `it.todo` modifier. As a form of up-front planning, it’s useful
    when you already have a concrete idea of the tests you’ll need in a test suite.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`it` 测试函数有一个特殊的修饰符，可以用于规划测试套件：`it.todo` 修饰符。作为一种前置规划，当你已经有一个具体的测试套件中所需测试的明确想法时，它非常有用。'
- en: 'The `birthdayRepository` module has two exported functions that we’re interested
    in testing: the `addNew` and `replace` functions. We will split the existing form
    action tests between the two new functions. The tests for validation errors will
    need to be duplicated for both functions. In this way, each function will be fully
    specified.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`birthdayRepository` 模块导出了两个我们感兴趣要测试的函数：`addNew` 和 `replace` 函数。我们将把现有的表单操作测试在这两个新函数之间分配。验证错误的测试需要为两个函数重复。这样，每个函数都将被完全指定。'
- en: Go ahead and create the `src/lib/server/birthdayRepository.test.js` file with
    the following content. This gets all the imports in place and primes the `birthdayRepository`
    test suite with a call to `clear` so that each test starts from a blank slate.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 继续创建 `src/lib/server/birthdayRepository.test.js` 文件，并包含以下内容。这会放置所有导入，并通过调用 `clear`
    来初始化 `birthdayRepository` 测试套件，以便每个测试都从一个空白状态开始。
- en: 'There’s also a definition of `storedId` – we can use the same technique for
    verifying data that we used in the form action tests. And we also add an empty
    test for checking the initial state:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个 `storedId` 的定义——我们可以使用与表单操作测试中相同的技巧来验证数据。我们还添加了一个检查初始状态的空测试：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, add a nested `describe` block for the `addNew` function. This takes the
    original test descriptions from the `src/routes/birthdays/page.server.test.js`
    file and morphs them into a more appropriate form:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为 `addNew` 函数添加一个嵌套的 `describe` 块。这将从 `src/routes/birthdays/page.server.test.js`
    文件中获取原始测试描述，并将它们转换为更合适的形式：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'It’s time to look at the tests for the `replace` function. You’ll see that
    the validation errors are repeated from the `addNew` context. That highlights
    a difference when splitting a single `entrypoint` (the form action) into two (the
    `addNew` and `replace` functions):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候查看 `replace` 函数的测试了。你会看到验证错误是从 `addNew` 上下文中重复的。这突出了将单个 `entrypoint`（表单操作）拆分为两个（`addNew`
    和 `replace` 函数）时的一个差异：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The plan is complete. The remaining sections in this chapter will complete the
    test suite, starting with the *happy path* tests, which already pass, and then
    going back to complete the validation errors.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 计划已完成。本章剩余的部分将完成测试套件，从 *happy path* 测试开始，这些测试已经通过，然后回到完成验证错误。
- en: Porting tests from the form action
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从表单操作移植测试
- en: In this section, we’ll write out tests for the behavior that already exists
    in the `birthdayRepository` module, together with ensuring that the functions
    return values for the form action to reuse.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将编写针对 `birthdayRepository` 模块中已存在的行为的测试，同时确保函数为表单操作返回可重用的值。
- en: 'The `src/lib/server/birthdayRepository.js` file already contains the working
    code that you last touched on in [*Chapter 6*](B19611_06.xhtml#_idTextAnchor079),
    *Editing Form Data*. Here’s a reminder:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/lib/server/birthdayRepository.js` 文件已经包含了你在 [*第 6 章*](B19611_06.xhtml#_idTextAnchor079)，*编辑表单数据*
    中最后修改的工作代码。这里是一个提醒：'
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Most of this functionality is tested by way of the form action. We need to add
    tests and then double-check that they work.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分功能都是通过表单操作进行测试的。我们需要添加测试，然后再次检查它们是否工作。
- en: Always requiring a failing test
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 总是要求有一个失败的测试
- en: When porting tests, you’ll be writing tests that already pass. You skip the
    *Red* step and pass directly to *Green*. However, it’s still important to verify
    that your tests check the correct thing, and the way to do that is to delete or
    comment out the application code under test so that you can see the test fail.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在移植测试时，你会编写已经通过的测试。你跳过 *Red* 步骤，直接进入 *Green*。然而，仍然重要的是要验证你的测试检查的是正确的东西，而要做到这一点，你可以删除或注释掉正在测试的应用程序代码，这样你就可以看到测试失败。
- en: 'Let’s start on that now:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们开始吧：
- en: 'In `src/lib/server/birthdayRepository.test.js`, remove the `.todo` modifier
    from the first test, and add the following test content:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/lib/server/birthdayRepository.test.js` 中，从第一个测试中移除 `.todo` 修饰符，并添加以下测试内容：
- en: '[PRE4]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You’ll see that the test already passed. Verify that it tests the right thing
    by replacing the `getAll` implementation with a `null` return value, and then
    re-run the test to check that it’s red. An easy way to do this is to comment out
    the rest of the line, like this:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会看到测试已经通过了。通过将`getAll`实现替换为`null`返回值来验证它是否测试了正确的内容，然后重新运行测试以检查它是否为红色。这样做的一个简单方法是注释掉该行的其余部分，如下所示：
- en: '[PRE5]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: After checking that the test fails, bring the original implementation back and
    verify that it’s green.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查测试失败后，恢复原始实现并验证它是否为绿色。
- en: 'Fill out the body of the next test, as shown in the following code. This is
    now a simpler test than the form action test we’re porting, for a couple of reasons.
    First, there’s no longer any asynchronous behavior, and second, we use a single
    factory method of `createBirthday` and avoid the more complex `performFormAction`
    helper method:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写下一个测试用例的正文，如下所示。由于以下几个原因，这比我们正在迁移的表单操作测试要简单。首先，不再有任何异步行为，其次，我们使用单个`createBirthday`工厂方法，避免了更复杂的`performFormAction`辅助方法：
- en: '[PRE6]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Although this will already pass, it’s important to check that it’s red. You
    can do that by using the same technique of commenting out the relevant line of
    code, like this:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 虽然这已经通过了，但检查它是否为红色是很重要的。你可以通过使用相同的注释掉相关代码行的技术来完成，如下所示：
- en: '[PRE7]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: After verifying that the test fails, undo the commented code and get the test
    back to green.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在验证测试失败后，撤销注释的代码，并将测试恢复为绿色。
- en: 'Next, fill out the third test:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，填写第三个测试：
- en: '[PRE8]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To verify that, you can comment out the `id` value:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了验证这一点，你可以注释掉`id`值：
- en: '[PRE9]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, we come on to the test for new behavior, checking that the object is returned
    together with its new `id` property. This uses the `storedId` function defined
    at the top of the test suite:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们来测试新的行为，检查对象是否与其新的`id`属性一起返回。这使用了在测试套件顶部定义的`storedId`函数：
- en: '[PRE10]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To make that pass, introduce a variable named `itemWithId` and return it:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使其通过，引入一个名为`itemWithId`的变量并返回它：
- en: '[PRE11]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, let’s move on to the `replace` tests. We’ll start with the migration of
    the `beforeEach` block and the `storedId` method:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们继续进行`replace`测试。我们将从迁移`beforeEach`块和`storedId`方法开始：
- en: '[PRE12]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, we’ll move on to the first test for the `replace` function. You can verify
    that in the same way you verified the first test for `getAll`, by giving it a
    `null` implementation:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将继续进行`replace`函数的第一个测试。你可以通过给它一个`null`实现的方式来验证，就像你验证`getAll`的第一个测试一样：
- en: '[PRE13]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The final test in this section ensures that we returned the updated item:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本节中的最后一个测试确保我们返回了更新后的项目：
- en: '[PRE14]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To make that pass, make exactly the same change that you made in the `addNew`
    function:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使其通过，在`addNew`函数中做出完全相同的更改：
- en: '[PRE15]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: That’s all the tests that prove the existing behavior. In the next section,
    we’ll need to port across the implementation in addition to the test cases.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是证明现有行为的所有测试。在下一节中，我们除了需要迁移测试用例外，还需要迁移实现。
- en: Duplicating form validation behavior in the repository
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在仓库中复制表单验证行为
- en: In this section, we’ll continue porting across tests from the `src/routes/birthdays/page.server.test.js`
    file, but now we’re going to duplicate the validation behavior within the form
    action itself.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将继续从`src/routes/birthdays/page.server.test.js`文件迁移测试，但现在我们将复制表单操作中的验证行为。
- en: Repetition as a design signal
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 重复作为设计信号
- en: The following steps contain a fair amount of repetition. First, the tests are
    very similar to tests you’ve already written in the form action. Second, the same
    checks are repeated for both the `addNew` and `replace` functions.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤包含相当多的重复。首先，测试与你在表单操作中已经编写的测试非常相似。其次，对`addNew`和`replace`函数都进行了相同的检查。
- en: This kind of *forced repetition* (where you feel the pain of repeated work)
    can help you to figure out what (if any) shared logic you’d like to pull out.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这种*强制重复*（让你感受到重复工作的痛苦）可以帮助你找出你想要提取的（如果有的话）共享逻辑。
- en: 'Let’s begin:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始：
- en: 'Start by filling in the `validation errors` nested `describe` block and the
    tests within it. I’m electing to copy two tests at once because these tests are
    very simple, and we already have a good idea of where we’re going to end up with
    the implementation:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，填写嵌套的`validation errors` `describe`块及其中的测试。我选择一次性复制两个测试，因为这些测试非常简单，而且我们已经对实现的结果有了很好的了解：
- en: '[PRE16]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To make that pass in `src/lib/server/birthdayRepository.js`, start by defining
    the `empty` function at the bottom of the file:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在`src/lib/server/birthdayRepository.js`中实现这个通过，首先在文件底部定义`empty`函数：
- en: '[PRE17]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then, update the `addNew` method to include a guard class that uses the `empty`
    function. After this change, both tests should pass:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，更新`addNew`方法，包括使用`empty`函数的保护类。在此更改之后，两个测试都应该通过：
- en: '[PRE18]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, we’ll move on to the next nested `describe` block, for checking the date
    of birth format:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将继续到下一个嵌套的`describe`块，用于检查出生日期格式：
- en: '[PRE19]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To make that pass, start by duplicating the `invalidDob` helper from the form
    action:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要实现这个通过，首先从表单操作中复制`invalidDob`辅助函数：
- en: '[PRE20]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then, add the guard clause, which should cause both tests to pass:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，添加保护子句，这将使两个测试都通过：
- en: '[PRE21]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, let’s repeat the validation checks for the `replace` function. In the
    original form action tests, this wasn’t necessary because we implemented the *edit
    form* functionality by building on the top of the original action for creating
    birthdays, so the validations were already there. But now, both operations are
    separated. Fill out the new nested `describe` block:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们重复对`replace`函数的验证检查。在原始表单操作测试中，这并不是必需的，因为我们通过在创建生日的原始操作之上构建来实现了**编辑表单**功能，所以验证已经存在。但现在，这两个操作是分开的。填写新的嵌套`describe`块：
- en: '[PRE22]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To make that pass, start by duplicating the same guard clause from `addNew`.
    We’ll remove this duplication later:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要实现这个通过，首先从`addNew`复制相同的保护子句。我们稍后会移除这个重复：
- en: '[PRE23]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, move on to the date of birth:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，继续到出生日期：
- en: '[PRE24]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Make that pass by adding in the second guard clause, by repeating *step 6*
    but, this time, adding code within the `replace` function:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加第二个保护子句来实现这个通过，重复*步骤6*，但这次在`replace`函数中添加代码：
- en: '[PRE25]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then onto the final test. This one doesn’t need a `describe` block since it’s
    only one test:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，进行最后的测试。由于只有一个测试，所以不需要`describe`块：
- en: '[PRE26]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This time, put the guard clause right at the top. It seems to make sense that
    this guard should take precedence over the name and date of birth checks – notice,
    for example, how the argument comes first in the argument list:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这次，将保护子句放在最上面。这个保护子句似乎应该优先于姓名和出生日期检查——注意，例如，参数在参数列表中的位置：
- en: '[PRE27]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: That completes all the new functionality. All the `birthdayRepository` behavior
    is complete. Next, we’ll stop to refactor to remove duplication.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了所有新的功能。`birthdayRepository`的所有行为都已完成。接下来，我们将停下来重构以消除重复。
- en: Extracting common methods
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提取公共方法
- en: In this section, we’ll pull out the validation clauses that are duplicated in
    the `addNew` and `replace` functions, moving them into a shared `validate` function.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将从`addNew`和`replace`函数中提取重复的验证子句，将它们移动到共享的`validate`函数中。
- en: 'Let’s start now with the `validate` function:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`validate`函数开始：
- en: 'Below the definitions of `addNew` and `replace`, add the following function
    named `validate`. This contains the two guard clauses that appeared in each of
    the original functions. As a simplification, the `item` argument has been destructured
    into `name` and `dob` arguments:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`addNew`和`replace`的定义下方，添加以下名为`validate`的函数。这个函数包含了原始函数中出现的两个保护子句。为了简化，`item`参数已经被解构为`name`和`dob`参数：
- en: '[PRE28]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then, update `addNew` to replace its guard clauses with a call to `validate`.
    The result is stored in `validationResult`, which can then be returned if it has
    a value:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，更新`addNew`，用对`validate`的调用替换其保护子句。结果存储在`validationResult`中，如果有值则可以返回：
- en: '[PRE29]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Next, do the same for the `replace` function:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，对`replace`函数做同样的处理：
- en: '[PRE30]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, how about we pull out the last bit of each function? Add the `set` function:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们是否应该提取每个函数的最后部分？添加`set`函数：
- en: '[PRE31]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then, use that in `addNew`:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`addNew`中使用它：
- en: '[PRE32]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'And finally, add the same call at the end of the `replace` function:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`replace`函数的末尾添加相同的调用：
- en: '[PRE33]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: That completes the `birthdayRepository` implementation – a straightforward but
    satisfying refactoring.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了`birthdayRepository`的实现——一个简单但令人满意的重构。
- en: Summary
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter has covered techniques for porting existing behavior from one place
    to another. In particular, it’s shown how worthwhile it can be to move business
    logic out of framework objects – such as form actions – and into plain JavaScript
    objects. Doing so makes the tests simpler.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了将现有行为从一个地方迁移到另一个地方的技术。特别是，它展示了将业务逻辑从框架对象（如表单操作）移入普通JavaScript对象是多么有价值。这样做可以使测试更简单。
- en: In this case, our tests were no longer asynchronous, and no longer needed to
    use the complex `performFormAction` helper.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们的测试不再异步，也不再需要使用复杂的`performFormAction`辅助函数。
- en: Another benefit is that `birthdayRepository`, along with its validation, can
    be reused in other places. That’s exactly what we’ll do in the next chapter, when
    we introduce new API endpoints that interact with the repository.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个好处是`birthdayRepository`及其验证可以在其他地方重用。这正是我们在下一章将要做的，当时我们将介绍与存储库交互的新API端点。
