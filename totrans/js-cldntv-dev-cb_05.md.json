["```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch5/account-as-code --path cncb-account-as-code\n```", "```js\nservice: cncb-account-as-code\n\nprovider:\n  name: aws\n  # cfnRole: arn:aws:iam::${self:custom.accountNumber}:role/${opt:stage}-cfnRole\n\ncustom:\n  accountNumber: 123456789012\n\nresources:\n  Resources:\n    AuditBucket:\n      Type: AWS::S3::Bucket\n      DeletionPolicy: Retain\n      ...\n    CloudTrail: \n      Type: AWS::CloudTrail::Trail\n      ...\n\n    CloudFormationServiceRole:\n      Type: AWS::IAM::Role\n      Properties: \n        RoleName: ${opt:stage}-cfnRole\n        ...\n    ExecuteCloudFormationPolicy: \n      Type: AWS::IAM::ManagedPolicy\n      ...\n    CiCdUser: \n      Type: AWS::IAM::User\n      Properties:\n        ManagedPolicyArns:\n          - Ref: ExecuteCloudFormationPolicy \n\n    AdminUserGroup: \n      Type: AWS::IAM::Group\n      ...\n    ReadOnlyUserGroup: \n      Type: AWS::IAM::Group\n      ...\n    PowerUserGroup: \n      Type: AWS::IAM::Group\n      ...\n    ManageAccessKey:\n      Condition: IsDev\n      Type: AWS::IAM::ManagedPolicy\n      ...\n    MfaOrHqRequired:\n      Condition: Exclude\n      Type: AWS::IAM::ManagedPolicy\n      ...\n  ... \n```", "```js\n$ npm run dp:lcl -- -s $MY_STAGE\n\n> cncb-account-as-code@1.0.0 dp:lcl <path-to-your-workspace>/cncb-account-as-code\n> sls deploy -v -r us-east-1 \"-s\" \"john\"\n\nServerless: Packaging service...\n...\nServerless: Stack update finished...\n...\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch5/cognito-pool --path cncb-cognito-pool\n```", "```js\nservice: cncb-cognito-pool\n\nprovider:\n  name: aws\n  # cfnRole: arn:aws:iam::<account-number>:role/${opt:stage}-cfnRole\n\nresources:\n  Resources:\n    CognitoUserPoolCncb:\n      Type: AWS::Cognito::UserPool\n      Properties:\n        UserPoolName: cncb-${opt:stage}\n        ...\n        Schema:\n          - AttributeDataType: 'String'\n            DeveloperOnlyAttribute: false\n            Mutable: true\n            Name: 'email'\n            Required: true\n        ...\n    CognitoUserPoolCncbClient:\n      Type: AWS::Cognito::UserPoolClient\n      Properties:\n        UserPoolId:\n          Ref: CognitoUserPoolCncb\n\n  Outputs:\n    ...\n\nplugins:\n  - cognito-plugin\n\ncustom:\n  pool:\n    domain: cncb-${opt:stage}\n    allowedOAuthFlows: ['implicit']\n    allowedOAuthFlowsUserPoolClient: true\n    allowedOAuthScopes: ...\n    callbackURLs: ['http://localhost:3000/implicit/callback']\n    logoutURLs: ['http://localhost:3000']\n    refreshTokenValidity: 30\n    supportedIdentityProviders: ['COGNITO']\n```", "```js\n$ npm run dp:lcl -- -s $MY_STAGE\n\n> cncb-cognito-pool@1.0.0 dp:lcl <path-to-your-workspace>/cncb-cognito-pool\n> sls deploy -v -r us-east-1 \"-s\" \"john\"\n\nServerless: Packaging service...\n...\nServerless: Stack update finished...\n...\n\nStack Outputs\nuserPoolArn: arn:aws:cognito-idp:us-east-1:123456789012:userpool/us-east-1_tDXH8JAky\nuserPoolClientId: 4p5p08njgmq9sph130l3du2b7q\nloginURL: https://cncb-john.auth.us-east-1.amazoncognito.com/login?redirect_uri=http://localhost:3000/implicit/callback&response_type=token&client_id=4p5p08njgmq9sph130l3du2b7q\nuserPoolProviderName: cognito-idp.us-east-1.amazonaws.com/us-east-1_tDXH8JAky\nuserPoolId: us-east-1_tDXH8JAky\nuserPoolProviderURL: https://cognito-idp.us-east-1.amazonaws.com/us-east-1_tDXH8JAky\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch5/cognito-signin --path cncb-cognito-signin\n```", "```js\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { CognitoSecurity, ImplicitCallback, SecureRoute } from './authenticate';\nimport Home from './Home';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <CognitoSecurity\n          domain='cncb-<stage>.auth.us-east-1.amazoncognito.com'\n          clientId='a1b2c3d4e5f6g7h8i9j0k1l2m3'\n          ...\n          redirectSignIn={`${window.location.origin}/implicit/callback`}\n          redirectSignOut={window.location.origin}\n        >\n          <SecureRoute path='/' exact component={Home} />\n          <Route path='/implicit/callback' component={ImplicitCallback} />\n        </CognitoSecurity>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n```", "```js\nimport React from 'react';\nimport { withAuth } from './authenticate';\n...\n\nconst Home = ({ auth }) => (\n  <div ...>\n    ...\n    <button onClick={auth.logout}>Logout</button>\n    <pre ...>{JSON.stringify(auth.getSession(), null, 2)}</pre>\n  </div>\n);\n\nexport default withAuth(Home);\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch5/cognito-authorizer --path cncb-cognito-authorizer\n```", "```js\nservice: cncb-cognito-authorizer\n\nprovider:\n  name: aws\n  # cfnRole: arn:aws:iam::<account-number>:role/${opt:stage}-cfnRole\n  ...\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          ...\n          authorizer:\n            arn: ${cf:cncb-cognito-pool-${opt:stage}.userPoolArn}\n```", "```js\n$ npm run dp:lcl -- -s $MY_STAGE\n\n> cncb-cognito-authorizer@1.0.0 dp:lcl <path-to-your-workspace>/cncb-cognito-authorizer\n> sls deploy -v -r us-east-1 \"-s\" \"john\"\n\nServerless: Packaging service...\n...\nServerless: Stack update finished...\n...\nendpoints:\n  GET - https://ff70szvc44.execute-api.us-east-1.amazonaws.com/john/hello\nfunctions:\n  hello: cncb-cognito-authorizer-john-hello\n```", "```js\n$ curl https://<API-ID>.execute-api.us-east-1.amazonaws.com/$MY_STAGE/hello | json_pp\n\n{\n   \"message\" : \"Unauthorized\"\n}\n```", "```js\n$ export CNCB_TOKEN=<idToken value>\n```", "```js\n$ curl -v -H \"Authorization: Bearer $CNCB_TOKEN\"  https://<API-ID>.execute-api.us-east-1.amazonaws.com/$MY_STAGE/hello | json_pp\n\n{\n   \"message\" : \"JavaScript Cloud Native Development Cookbook! Your function executed successfully!\",\n   \"input\" : {\n      \"headers\" : {\n         \"Authorization\" : \"...\",\n         ...\n      },\n      ...\n      \"requestContext\" : {\n         ...\n         \"authorizer\" : {\n            \"claims\" : {\n               \"email_verified\" : \"true\",\n               \"auth_time\" : \"1528264383\",\n               \"cognito:username\" : \"john\",\n               \"event_id\" : \"e091cd96-694d-11e8-897c-e3fe55ba3d67\",\n               \"iss\" : \"https://cognito-idp.us-east-1.amazonaws.com/us-east-1_tDXH8JAky\",\n               \"exp\" : \"Wed Jun 06 06:53:03 UTC 2018\",\n               \"sub\" : \"e4bdd021-a160-4aff-bce2-e652f9469e3e\",\n               \"aud\" : \"4p5p08njgmq9sph130l3du2b7q\",\n               \"email\" : \"john@example.com\",\n               \"iat\" : \"Wed Jun 06 05:53:03 UTC 2018\",\n               \"token_use\" : \"id\"\n            }\n         }\n      },\n      ...\n   }\n}\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch5/custom-authorizer --path cncb-custom-authorizer\n```", "```js\nservice: cncb-custom-authorizer\n\nprovider:\n  name: aws\n  # cfnRole: arn:aws:iam::<account-number>:role/${opt:stage}-cfnRole\n  ...\n\nfunctions:\n  authorizer:\n    handler: handler.authorize\n    environment:\n      AUD: ${cf:cncb-cognito-pool-${opt:stage}.userPoolClientId}\n      ISS: ${cf:cncb-cognito-pool-${opt:stage}.userPoolProviderURL}\n      JWKS: ${self:functions.authorizer.environment.ISS}/.well-known/jwks.json\n      DEBUG: '*'\n\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          ...\n          authorizer: authorizer\n```", "```js\n...\nmodule.exports.authorize = (event, context, cb) => {\n  decode(event)\n    .then(fetchKey)\n    .then(verify)\n    .then(generatePolicy)\n    ...\n};\n\nconst decode = ({ authorizationToken, methodArn }) => {\n  ...\n  return Promise.resolve({\n    ...\n    token: match[1],\n    decoded: jwt.decode(match[1], { complete: true }),\n  });\n};\n\nconst fetchKey = (uow) => {\n  ...\n  return client.getSigningKeyAsync(kid)\n    .then(key => ({\n      key: key.publicKey || key.rsaPublicKey,\n      ...uow,\n    }));\n};\n\nconst verify = (uow) => {\n  ...\n  return verifyAsync(token, key, {\n    audience: process.env.AUD,\n    issuer: process.env.ISS\n  })\n    ...\n};\n\nconst generatePolicy = (uow) => {\n  ...\n  return {\n    policy: {\n      principalId: claims.sub,\n      policyDocument: {\n        Statement: [{ Action: 'execute-api:Invoke', Effect, Resource }],\n      },\n      context: claims,\n    },\n    ...uow,\n  };\n};\n...\n```", "```js\n$ npm run dp:lcl -- -s $MY_STAGE\n\n> cncb-custom-authorizer@1.0.0 dp:lcl <path-to-your-workspace>/cncb-custom-authorizer\n> sls deploy -v -r us-east-1 \"-s\" \"john\"\n\nServerless: Packaging service...\n...\nServerless: Stack update finished...\n...\nendpoints:\n  GET - https://8iznazkhr0.execute-api.us-east-1.amazonaws.com/john/hello\nfunctions:\n  authorizer: cncb-custom-authorizer-john-authorizer\n  hello: cncb-custom-authorizer-john-hello\n\nStack Outputs\n...\nServiceEndpoint: https://8iznazkhr0.execute-api.us-east-1.amazonaws.com/john\n```", "```js\n$ curl https://<API-ID>.execute-api.us-east-1.amazonaws.com/$MY_STAGE/hello | json_pp\n\n{\n   \"message\" : \"Unauthorized\"\n}\n```", "```js\n$ export CNCB_TOKEN=<idToken value>\n```", "```js\n$ curl -v -H \"Authorization: Bearer $CNCB_TOKEN\"  https://<API-ID>.execute-api.us-east-1.amazonaws.com/$MY_STAGE/hello | json_pp\n\n{\n   \"message\" : \"JavaScript Cloud Native Development Cookbook! Your function executed successfully!\",\n   \"input\" : {\n      \"headers\" : {\n         \"Authorization\" : \"...\",\n         ...\n      },\n      ...\n      \"requestContext\" : {\n         ...\n         \"authorizer\" : {\n            \"exp\" : \"1528342765\",\n            \"cognito:username\" : \"john\",\n            \"iss\" : \"https://cognito-idp.us-east-1.amazonaws.com/us-east-1_tDXH8JAky\",\n            \"sub\" : \"e4bdd021-a160-4aff-bce2-e652f9469e3e\",\n            \"iat\" : \"1528339165\",\n            \"email_verified\" : \"true\",\n            \"auth_time\" : \"1528339165\",\n            \"email\" : \"john@example.com\",\n            \"aud\" : \"4p5p08njgmq9sph130l3du2b7q\",\n            \"event_id\" : \"fdcdf125-69fb-11e8-a6ef-ab31871bed60\",\n            \"token_use\" : \"id\",\n            \"principalId\" : \"e4bdd021-a160-4aff-bce2-e652f9469e3e\"\n         }\n      },\n      ...\n   }\n}\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch5/graphql-jwt --path cncb-graphql-jwt\n```", "```js\nservice: cncb-graphql-jwt\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  # cfnRole: arn:aws:iam::<account-number>:role/${opt:stage}-cfnRole\n\nfunctions:\n  graphql:\n    handler: handler.graphql\n    events:\n      - http:\n          ...\n          authorizer:\n            arn: ${cf:cncb-cognito-pool-${opt:stage}.userPoolArn}\n```", "```js\nindex.js\n...\nconst { directiveResolvers } = require('./directives');\n\nconst directives = `\n  directive @hasRole(roles: [String]) on QUERY | FIELD | MUTATION\n`;\n...\nmodule.exports = {\n  typeDefs: [directives, schemaDefinition, query, mutation, thingTypeDefs],\n  resolvers: merge({}, thingResolvers),\n  directiveResolvers,\n};\n\nschema/thing/typedefs.js\n\nmodule.exports = `\n  ...\n  extend type Mutation {\n    saveThing(\n      input: ThingInput\n    ): Thing @hasRole(roles: [\"Author\"])\n    deleteThing(\n      id: ID!\n    ): Thing @hasRole(roles: [\"Manager\"])\n  }\n`;\n\ndirectives.js\n\nconst getGroups = ctx => get(ctx.event, 'requestContext.authorizer.claims.cognito:groups', '');\n\nconst directiveResolvers = {\n  hasRole: (next, source, { roles }, ctx) => {\n    const groups = getGroups(ctx).split(',');\n    if (intersection(groups, roles).length > 0) {\n      return next();\n    }\n    throw new UserError('Access Denied');\n  },\n}\n\nmodule.exports = { directiveResolvers };\n```", "```js\n$ npm run dp:lcl -- -s $MY_STAGE\n\n> cncb-graphql-jwt@1.0.0 dp:lcl <path-to-your-workspace>/cncb-graphql-jwt\n> sls deploy -v -r us-east-1 \"-s\" \"john\"\n\nServerless: Packaging service...\n...\nServerless: Stack update finished...\n...\nendpoints:\n  POST - https://b33zxnw20b.execute-api.us-east-1.amazonaws.com/john/graphql\nfunctions:\n  graphql: cncb-graphql-jwt-john-graphql\n\nStack Outputs\n...\nServiceEndpoint: https://b33zxnw20b.execute-api.us-east-1.amazonaws.com/john\n```", "```js\n$ export CNCB_TOKEN=<idToken value>\n```", "```js\n$ curl -v -X POST -H \"Authorization: Bearer $CNCB_TOKEN\" -H 'Content-Type: application/json' -d '{\"query\":\"mutation { saveThing(input: { id: \\\"55555555-6666-1111-1111-000000000000\\\", name: \\\"thing1\\\", description: \\\"This is thing one of two.\\\" }) { id } }\"}' https://b33zxnw20b.execute-api.us-east-1.amazonaws.com/$MY_STAGE/graphql | json_pp\n\n{\n   \"data\" : {\n      \"saveThing\" : {\n         \"id\" : \"55555555-6666-1111-1111-000000000000\"\n      }\n   }\n}\n\n$ curl -v -X POST -H \"Authorization: Bearer $CNCB_TOKEN\" -H 'Content-Type: application/json' -d '{\"query\":\"query { thing(id: \\\"55555555-6666-1111-1111-000000000000\\\") { id name description }}\"}' https://b33zxnw20b.execute-api.us-east-1.amazonaws.com/$MY_STAGE/graphql | json_pp\n{\n   \"data\" : {\n      \"thing\" : {\n         \"name\" : \"thing1\",\n         \"id\" : \"55555555-6666-1111-1111-000000000000\",\n         \"description\" : \"This is thing one of two.\"\n      }\n   }\n}\n\n$ curl -v -X POST -H \"Authorization: Bearer $CNCB_TOKEN\" -H 'Content-Type: application/json' -d '{\"query\":\"mutation { deleteThing( id: \\\"55555555-6666-1111-1111-000000000000\\\" ) { id } }\"}' https://b33zxnw20b.execute-api.us-east-1.amazonaws.com/$MY_STAGE/graphql | json_pp\n{\n   \"data\" : {\n      \"deleteThing\" : null\n   },\n   \"errors\" : [\n      {\n         \"message\" : \"Access Denied\"\n      }\n   ]\n}\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch5/jwt-filter --path cncb-jwt-filter\n```", "```js\nservice: cncb-jwt-filter\n\nprovider:\n  name: aws\n  # cfnRole: arn:aws:iam::<account-number>:role/${opt:stage}-cfnRole\n  ...\n\nfunctions:\n  save:\n    handler: handler.save\n    events:\n      - http:\n          ...\n          authorizer:\n            arn: ${cf:cncb-cognito-pool-${opt:stage}.userPoolArn}\n  get:\n    handler: handler.get\n    events:\n      - http:\n          path: things/{sub}/{id}\n          ...\n          authorizer:\n            arn: ${cf:cncb-cognito-pool-${opt:stage}.userPoolArn}\n\nresources:\n  Resources:\n    Table:\n      ...\n        KeySchema:\n          - AttributeName: sub\n            KeyType: HASH\n          - AttributeName: id\n            KeyType: RANG\n```", "```js\nmodule.exports.save = (request, context, callback) => {\n  const body = JSON.parse(request.body);\n  const sub = request.requestContext.authorizer.claims.sub;\n  const id = body.id || uuid.v4();\n\n  const params = {\n    TableName: process.env.TABLE_NAME,\n    Item: {\n      sub,\n      id,\n      ...body\n    }\n  };\n\n  ...\n  db.put(params, (err, resp) => {\n    ...\n  });\n};\n\nmodule.exports.get = (request, context, callback) => {\n  const sub = request.requestContext.authorizer.claims.sub;\n  const id = request.pathParameters.id;\n\n  if (sub !== request.pathParameters.sub) {\n    callback(null, { statusCode: 401 });\n    return;\n  }\n\n  const params = {\n    TableName: process.env.TABLE_NAME,\n    Key: {\n      sub,\n      id,\n    },\n  };\n\n  ...\n  db.get(params, (err, resp) => {\n    ...\n  });\n};\n```", "```js\n$ npm run dp:lcl -- -s $MY_STAGE\n\n> cncb-jwt-filter@1.0.0 dp:lcl <path-to-your-workspace>/cncb-jwt-filter\n> sls deploy -v -r us-east-1 \"-s\" \"john\"\n\nServerless: Packaging service...\n...\nServerless: Stack update finished...\n...\nendpoints:\n  POST - https://ho1q4u5hp6.execute-api.us-east-1.amazonaws.com/john/things\n  GET - https://ho1q4u5hp6.execute-api.us-east-1.amazonaws.com/john/things/{sub}/{id}\nfunctions:\n  save: cncb-jwt-filter-john-save\n  get: cncb-jwt-filter-john-get\n```", "```js\n$ export CNCB_TOKEN=<idToken value>\n```", "```js\n$ curl -v -X POST -H \"Authorization: Bearer $CNCB_TOKEN\" -H 'Content-Type: application/json' -d '{ \"id\": \"55555555-7777-1111-1111-000000000000\", \"name\": \"thing1\", \"description\": \"This is thing one of two.\" }' https://<API-ID>.execute-api.us-east-1.amazonaws.com/$MY_STAGE/things\n\n< HTTP/1.1 201 Created\n< location: https://ho1q4u5hp6.execute-api.us-east-1.amazonaws.com/john/things/e4bdd021-a160-4aff-bce2-e652f9469e3e/55555555-7777-1111-1111-000000000000\n\n$ curl -v -H \"Authorization: Bearer $CNCB_TOKEN\" <Location response header from POST> | json_pp\n\n{\n   \"description\" : \"This is thing one of two.\",\n   \"id\" : \"55555555-7777-1111-1111-000000000000\",\n   \"name\" : \"thing1\",\n   \"sub\" : \"e4bdd021-a160-4aff-bce2-e652f9469e3e\"\n}\n\n$ curl -v -H \"Authorization: Bearer $CNCB_TOKEN\" https://<API-ID>.execute-api.us-east-1.amazonaws.com/$MY_STAGE/things/<An invalid value>/55555555-7777-1111-1111-000000000000 | json_pp\n\n< HTTP/1.1 401 Unauthorized\n```", "```js\n$ sls logs -f save -r us-east-1 -s $MY_STAGE\n\n$ sls logs -f get -r us-east-1 -s $MY_STAGE\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch5/envelope-encryption --path cncb-envelope-encryption\n```", "```js\nservice: cncb-envelope-encryption\n\nprovider:\n  name: aws\n  # cfnRole: arn:aws:iam::<account-number>:role/${opt:stage}-cfnRole\n  runtime: nodejs8.10\n  endpointType: REGIONAL\n  iamRoleStatements:\n    ...\n  environment:\n    TABLE_NAME:\n      Ref: Table\n    MASTER_KEY_ALIAS:\n      Ref: MasterKeyAlias\n\nfunctions:\n  save:\n    ...\n  get:\n    ...\n\nresources:\n  Resources:\n    Table:\n      ...\n\n    MasterKey:\n      Type: AWS::KMS::Key\n      Properties:\n        KeyPolicy:\n          Version: '2012-10-17'\n          ...\n\n    MasterKeyAlias:\n      Type: AWS::KMS::Alias\n      Properties:\n        AliasName: alias/${self:service}-${opt:stage}\n        TargetKeyId:\n          Ref: MasterKey\n  ...\n```", "```js\nconst encrypt = (thing) => {\n  const params = {\n    KeyId: process.env.MASTER_KEY_ALIAS,\n    KeySpec: 'AES_256',\n  };\n\n  ...\n  return kms.generateDataKey(params).promise()\n    .then((dataKey) => {\n      const encryptedThing = Object.keys(thing).reduce((encryptedThing, key) => {\n        if (key !== 'id')\n          encryptedThing[key] = \n            CryptoJS.AES.encrypt(thing[key], dataKey.Plaintext);\n        return encryptedThing;\n      }, {});\n\n      return {\n        id: thing.id,\n        dataKey: dataKey.CiphertextBlob.toString('base64'),\n        ...encryptedThing,\n      };\n    });\n};\n\nconst decrypt = (thing) => {\n  const params = {\n    CiphertextBlob: Buffer.from(thing.dataKey, 'base64'),\n  };\n\n  ...\n  return kms.decrypt(params).promise()\n    .then((dataKey) => {\n      const decryptedThing = Object.keys(thing).reduce((decryptedThing, key) => {\n        if (key !== 'id' && key !== 'dataKey')\n          decryptedThing[key] = \n            CryptoJS.AES.decrypt(thing[key], dataKey.Plaintext);\n        return decryptedThing;\n      }, {});\n\n      return {\n        id: thing.id,\n        ...decryptedThing,\n      };\n    });\n};\n\nmodule.exports.save = (request, context, callback) => {\n  const thing = JSON.parse(request.body);\n  const id = thing.id || uuid.v4();\n\n  encrypt(thing)\n    .then((encryptedThing) => {\n      const params = {\n        TableName: process.env.TABLE_NAME,\n        Item: {\n          id,\n          ...encryptedThing,\n        }\n      };\n\n      ...\n      return db.put(params).promise();\n    })\n    ...\n};\n\nmodule.exports.get = (request, context, callback) => {\n  const id = request.pathParameters.id;\n  ...\n  db.get(params).promise()\n    .then((resp) => {\n      return resp.Item ? decrypt(resp.Item) : null;\n    })\n    ...\n};\n```", "```js\n$ npm run dp:lcl -- -s $MY_STAGE\n\n> cncb-envelope-encryption@1.0.0 dp:lcl <path-to-your-workspace>/cncb-envelope-encryption\n> sls deploy -v -r us-east-1 \"-s\" \"john\"\n\nServerless: Packaging service...\n...\nServerless: Stack update finished...\n...\nendpoints:\n  POST - https://7wpqdcsoad.execute-api.us-east-1.amazonaws.com/john/things\n  GET - https://7wpqdcsoad.execute-api.us-east-1.amazonaws.com/john/things/{id}\nfunctions:\n  save: cncb-envelope-encryption-john-save\n  get: cncb-envelope-encryption-john-get\n\nStack Outputs\n...\nMasterKeyId: c83de811-bda8-4bdc-83e1-32e8491849e5\nMasterKeyArn: arn:aws:kms:us-east-1:123456789012:key/c83de811-bda8-4bdc-83e1-32e8491849e5\n```", "```js\nServiceEndpoint: https://7wpqdcsoad.execute-api.us-east-1.amazonaws.com/john\nMasterKeyAlias: alias/cncb-envelope-encryption-john\n```", "```js\n$ curl -v -X POST -d '{ \"id\": \"55555555-8888-1111-1111-000000000000\", \"name\": \"thing1\", \"description\": \"This is thing one of two.\" }' https://7wpqdcsoad.execute-api.us-east-1.amazonaws.com/$MY_STAGE/things\n\n< HTTP/1.1 201 Created\n< location: https://7wpqdcsoad.execute-api.us-east-1.amazonaws.com/john/things/55555555-8888-1111-1111-000000000000\n\n$ curl -v https://7wpqdcsoad.execute-api.us-east-1.amazonaws.com/$MY_STAGE/things/55555555-8888-1111-1111-000000000000 | json_pp\n\n{\n   \"name\" : \"thing1\",\n   \"id\" : \"55555555-8888-1111-1111-000000000000\",\n   \"description\" : \"This is thing one of two.\"\n}\n```", "```js\n$ sls logs -f save -r us-east-1 -s $MY_STAGE\n\n$ sls logs -f get -r us-east-1 -s $MY_STAGE\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch5/ssl-cert --path cncb-ssl-cert\n```", "```js\nservice: cncb-ssl-cert\n\nprovider:\n  name: aws\n  # cfnRole: arn:aws:iam::<account-number>:role/${opt:stage}-cfnRole\n\nplugins:\n - serverless-spa-deploy\n - serverless-spa-config\n\ncustom:\n  spa:\n    ...\n  dns:\n    hostedZoneId: ZXXXXXXXXXXXXX\n    validationDomain: example.com\n    domainName: ${self:custom.dns.validationDomain}\n    wildcard: '*.${self:custom.dns.domainName}'\n    endpoint: ${opt:stage}-${self:service}.${self:custom.dns.domainName}\n  cdn:\n    acmCertificateArn: \n      Ref: WildcardCertificate\n\nresources:\n  Resources:\n    WildcardCertificate:\n      Type: AWS::CertificateManager::Certificate\n      Properties:\n        DomainName: ${self:custom.dns.wildcard}\n        DomainValidationOptions:\n          - DomainName: ${self:custom.dns.wildcard}\n            ValidationDomain: ${self:custom.dns.validationDomain}\n        SubjectAlternativeNames:\n          - ${self:custom.dns.domainName}\n\n  ...\n```", "```js\n$ npm run dp:lcl -- -s $MY_STAGE\n\n> cncb-ssl-cert@1.0.0 dp:lcl <path-to-your-workspace>/cncb-ssl-cert\n> sls deploy -v -r us-east-1 \"-s\" \"john\"\n\nServerless: Packaging service...\n...\nServerless: Stack update finished...\n...\n\nStack Outputs\n...\nWebsiteDistributionURL: https://d19i44112h4l3r.cloudfront.net\n...\nWebsiteURL: https://john-cncb-ssl-cert.example.com\nWebsiteDistributionId: EQSJSWLD0F1JI\nWildcardCertificateArn: arn:aws:acm:us-east-1:870671212434:certificate/72807b5b-fe37-4d5c-8f92-25ffcccb6f79\n\nServerless: Path: ./build\nServerless: File: index.html (text/html)\n```", "```js\n$ curl -v -https://john-cncb-ssl-cert.example.com\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch5/waf --path cncb-waf\n```", "```js\nservice: cncb-waf\n\nprovider:\n  name: aws\n  # cfnRole: arn:aws:iam::<account-number>:role/${opt:stage}-cfnRole\n\nplugins:\n - serverless-spa-deploy\n - serverless-spa-config\n\ncustom:\n  spa:\n    ...\n  cdn:\n    webACLId: \n      Ref: WebACL\n    # logging:\n    #   bucketName: ${cf:cncb-account-as-code-${opt:stage}.AuditBucketName}\n\nresources:\n  Resources:\n    WhitelistIPSet: \n      Type: AWS::WAF::IPSet\n      Properties: \n        Name: IPSet for whitelisted IP adresses\n        IPSetDescriptors: \n          - Type: IPV4\n            Value: 0.0.0.1/32\n\n    WhitelistRule: \n      Type: AWS::WAF::Rule\n      Properties: \n        Name: WhitelistRule\n        MetricName: WhitelistRule\n        Predicates: \n          - DataId: \n              Ref: WhitelistIPSet\n            Negated: false\n            Type: IPMatch  \n\n    WebACL: \n      Type: AWS::WAF::WebACL\n      Properties: \n        Name: Master WebACL\n        DefaultAction: \n          Type: BLOCK\n        MetricName: MasterWebACL\n        Rules: \n          - Action: \n              Type: ALLOW\n            Priority: 1\n            RuleId: \n              Ref: WhitelistRule        \n\n  Outputs:\n    WebACLId:\n      Value:\n        Ref: WebACL\n```", "```js\n$ curl ipecho.net/plain ; echo\n```", "```js\n$ npm run dp:lcl -- -s $MY_STAGE\n\n> cncb-waf@1.0.0 dp:lcl <path-to-your-workspace>/cncb-waf\n> sls deploy -v -r us-east-1 \"-s\" \"john\"\n\nServerless: Packaging service...\n...\nServerless: Stack update finished...\n...\n\nStack Outputs\nWebsiteDistributionURL: https://d3a9sc88i7431l.cloudfront.net\nWebsiteS3URL: http://cncb-waf-john-websitebucket-1c13hrzslok5s.s3-website-us-east-1.amazonaws.com\nWebsiteBucketName: cncb-waf-john-websitebucket-1c13hrzslok5s\nWebsiteDistributionId: E3OLRBU9LRZBUE\nWebACLId: 68af80b5-8eda-43d0-be25-6c65d5cc691e\n\nServerless: Path: ./build\nServerless: File: index.html (text/html)\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch5/dr/recovery-account --path cncb-dr-recovery-account\n\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch5/dr/src1-account --path cncb-dr-src1-account\n```", "```js\nservice: cncb-dr-recovery-account\n\nprovider:\n  name: aws\n  # cfnRole: arn:aws:iam::<account-number>:role/${opt:stage}-cfnRole\n\ncustom:\n  accounts:\n    src1:\n      accountNumber: '#{AWS::AccountId}' # using same account to simplify recipe\n...\nresources:\n  Resources:\n    DrSrc1Bucket1:\n      Type: AWS::S3::Bucket\n      DeletionPolicy: Retain\n      Properties:\n        BucketName: cncb-${opt:stage}-us-west-1-src1-bucket1-dr\n        VersioningConfiguration:\n          Status: Enabled\n    DrSrc1Bucket1Policy: \n      Type: AWS::S3::BucketPolicy\n      Properties: \n        Bucket: \n          Ref: DrSrc1Bucket1\n        PolicyDocument:\n          Statement:\n            - Effect: Allow\n              Principal:\n                AWS: arn:aws:iam::${self:custom.accounts.src1.accountNumber}:root\n              Action:\n                - s3:ReplicateDelete\n                - s3:ReplicateObject\n                - s3:ObjectOwnerOverrideToBucketOwner\n              Resource:\n                ...\n  ...\n```", "```js\n$ npm run dp:lcl -- -s $MY_STAGE\n\n> cncb-dr@1.0.0 dp:lcl <path-to-your-workspace>/cncb-dr\n> sls deploy -v -r us-east-1 \"-s\" \"john\"\n\nServerless: Packaging service...\n...\nServerless: Stack update finished...\n...\nStack Outputs\nDrSrc1Bucket1Name: cncb-john-us-west-1-src1-bucket1-dr\n```", "```js\nservice: cncb-dr-src1-account\n\nprovider:\n  name: aws\n  # cfnRole: arn:aws:iam::<account-number>:role/${opt:stage}-cfnRole\n  ...\n\ncustom:\n  replicationBucketArn: arn:aws:s3:::cncb-${opt:stage}-us-west-1-src1-bucket1-dr\n  recovery:\n    accountNumber: '#{AWS::AccountId}' # using same account to simplify recipe\n...\nresources:\n  Resources:\n    Src1Bucket1:\n      Type: AWS::S3::Bucket\n      DeletionPolicy: Retain\n      Properties:\n        BucketName: cncb-${opt:stage}-us-east-1-src1-bucket1\n        VersioningConfiguration:\n          Status: Enabled\n        ReplicationConfiguration:\n          Role: arn:aws:iam::#{AWS::AccountId}:role/${self:service}-${opt:stage}-${opt:region}-replicate\n          Rules:\n            - Destination:\n                Bucket: ${self:custom.replicationBucketArn}\n                StorageClass: STANDARD_IA\n                Account: ${self:custom.recovery.accountNumber}\n                AccessControlTranslation:\n                  Owner: Destination\n              Status: Enabled\n              Prefix: ''\n\n    Src1Bucket1ReplicationRole:\n      DependsOn: Src1Bucket1\n      Type: AWS::IAM::Role\n      Properties:\n        RoleName: ${self:service}-${opt:stage}-${opt:region}-replicate\n        AssumeRolePolicyDocument:\n          Statement:\n            - Effect: Allow\n              Principal:\n                Service:\n                  - s3.amazonaws.com\n              Action:\n                - sts:AssumeRole\n        Policies:\n          - PolicyName: replicate\n            PolicyDocument:\n              Statement:\n                ...\n                - Effect: Allow\n                  Action:\n                    - s3:ReplicateObject\n                    - s3:ReplicateDelete\n                    - s3:ObjectOwnerOverrideToBucketOwner\n                  Resource: ${self:custom.replicationBucketArn}/*\n\n  ...\n```", "```js\n$ npm run dp:lcl -- -s $MY_STAGE\n\n> cncb-dr@1.0.0 dp:lcl <path-to-your-workspace>/cncb-dr\n> sls deploy -v -r us-east-1 \"-s\" \"john\"\n\nServerless: Packaging service...\n...\nServerless: Stack update finished...\n...\nStack Outputs\nSrc1Bucket1Name: cncb-john-us-east-1-src1-bucket1\n```", "```js\n$ sls invoke -r us-east-1 -f load -s $MY_STAGE\n```"]