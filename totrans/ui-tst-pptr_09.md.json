["```js\nUser-agent: *\nSitemap: https://www.yoursite.com/sitemap.xml\n```", "```js\n# Please note: There are a lot of pages on this site, and there are\n# some misbehaved spiders out there that go _way_ too fast. If you're\n# irresponsible, your access to the site may be blocked.\n```", "```js\n# Crawlers that are kind enough to obey, but which we'd rather not have\n# unless they're feeding search engines.\nUser-agent: UbiCrawler\nDisallow: /\nUser-agent: DOC\nDisallow: /\nUser-agent: Zao\nDisallow: /\n# Some bots are known to be trouble, particularly those designed to copy\n# entire sites. Please obey robots.txt.\nUser-agent: sitecheck.internetseer.com\nDisallow: /\n```", "```js\nUser-agent: *\nAllow: /w/api.php?action=mobileview&\nAllow: /w/load.php?\nAllow: /api/rest_v1/?doc\nDisallow: /w/\nDisallow: /api/\nDisallow: /trap/\nDisallow: /wiki/Special:\n…\n```", "```js\nUser-agent: *\nDisallow: /index.php/\nDisallow: /*?\nDisallow: /checkout/\nDisallow: /app/\nDisallow: /lib/\nDisallow: /*.php$\nDisallow: /pkginfo/\nDisallow: /report/\nDisallow: /var/\nDisallow: /catalog/\nDisallow: /customer/\nDisallow: /sendfriend/\nDisallow: /review/\nDisallow: /*SID=\n```", "```js\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"\n    xmlns:image=\"http://www.google.com/schemas/sitemap-image/1.1\">\n    <url>\n        <loc>https://www.packtpub.com/web-development</loc>\n        <lastmod>2020-12-15T12:22:50+00:00</lastmod>\n        <changefreq>daily</changefreq>\n        <priority>0.5</priority>\n    </url>\n    <url>\n        <loc>https://www.packtpub.com/web-development/ecommerce</loc>\n        <lastmod>2019-09-13T07:29:53+00:00</lastmod>\n        <changefreq>daily</changefreq>\n        <priority>0.5</priority>\n    </url>\n    ...\n</urlset>\n```", "```js\nconst https = require('https');\n(async function() {\n    const sitemapxml = await getSitemap();\n})();\nfunction getSitemap() {\n    let resolve;\n    const promise = new Promise(r => resolve = r);\n    https.get('https://www.packtpub.com/sitemap.xml', function(res) {\n        let body = '';\n        res.on('data', (chunk)  => body += chunk);\n        res.on('end', () => resolve(body));\n    });\n    return promise;\n};\n```", "```js\nnpm install xml2js   \n```", "```js\nconst xmlParser = require('xml2js').parseString;\n```", "```js\n(async function() {\n    const sitemapxml = await getSitemap();\n    const categories = await getCategories(sitemapxml);\n})();\nfunction getCategories(sitemapxml) {\n    let resolve;\n    const promise = new Promise(r => resolve = r);\n    xmlParser(sitemapxml, function (err, result) {\n        const output = result.urlset.url\n          .filter(url => url.loc[0].match(/\\//g).length === 3)\n          .slice(0, 10)\n          .map(url => url.loc[0]);\n        resolve(output);\n    });\n    return promise;\n};\n```", "```js\n(async function() {\n    /*Previous code*/\n    const books = [];\n    const page = await getPuppeteerPage();\n})();\nasync function getPuppeteerPage() {\n    const browser = await puppeteer.launch({\n        headless: false, \n        slowMo: 500\n    });\n    const userAgent = await browser.userAgent();\n    const page = await browser.newPage();\n    await page.setUserAgent(userAgent + ' UITestingWithPuppeteerDemoBot');\n    return page;\n}\n```", "```js\n(async function() {\n    /*Previous code*/\n    for(const categoryURL of categories) {\n        const newBooks = await getBooks(categoryURL, page);\n        if(newBooks) {\n            books.push(...newBooks);\n        }\n    }\n    page.browser().close();\n})();\nasync function getBooks(categoryURL, page) {\n    try {\n        await page.goto(categoryURL);\n        await page.waitForSelector('a.card-body');\n        return await page.evaluate(() => {\n            const links = document.querySelectorAll('a.card-body');\n            return Array.from(links).map(l => l.getAttribute('href')).slice(0, 10);\n        });\n    }\n    catch {\n        console.log(`Unable to get books from ${categoryURL}`);\n    }\n}\n```", "```js\n(async function() {\n    /*Previous code*/\n    const prices = [];\n    for(const bookURL of books) {\n        const price = await getPrice(bookURL, page);\n        if(price) {\n            prices.push(price);\n        }\n    }\n    fs.writeFile('./prices.json', prices);\n    page.browser().close();\n})();\nasync function getPrice(bookURL, page) {\n    try\n    {\n        await page.goto(bookURL);\n        await page.waitForSelector('.price-list__item .price-list__price');\n        return await page.evaluate(() => {\n            const prices = document.querySelectorAll('.price-list__item .price-list__price');\n            if(document.querySelectorAll('.price-list__name')[1].innerText.trim() == 'Print + eBook') {\n                return {\n                    book: document.querySelector('.product-info__title').innerText,\n                    print: prices[1].innerText,\n                    ebook: prices[2].innerText,\n                }\n            }\n        });\n    }\n    catch {\n        console.log(`Unable to get price from ${bookURL}`);\n    }\n}\n```", "```js\n[\n  {\n    \"book\": \"Kubernetes and Docker - An Enterprise Guide\",\n    \"print\": \"$39.99\",\n    \"ebook\": \"$5.00 Was $27.99\"\n  },\n  {\n    \"book\": \"The Docker Workshop\",\n    \"print\": \"$39.99\",\n    \"ebook\": \"$5.00 Was $27.99\"\n  },\n]\n```", "```js\nnpm install puppeteer-cluster\n```", "```js\nconst { Cluster } = require(\"puppeteer-cluster\");\n```", "```js\nconst cluster = await Cluster.launch({\n    concurrency: Cluster.CONCURRENCY_PAGE,\n    maxConcurrency: 2,\n    retryLimit: 1,\n    monitor: true,\n    puppeteerOptions: {\n        headless : false, \n        slowMo: 500\n    }\n});\n```", "```js\ncluster.on('taskerror', (err, data, willRetry) => {\n    if (willRetry) {\n      console.warn(`Encountered an error while crawling ${data}. ${err.message}\\nThis job will be retried`);\n    } else {\n      console.error(`Failed to crawl ${data}: ${err.message}`);\n    }\n});\n```", "```js\nfor(const categoryURL of categories) {\n    cluster.queue(categoryURL, getBooks);\n}\n```", "```js\nasync function getBooks({page, data}) {\n    const userAgent = await page.browser().userAgent();\n    await page.setUserAgent(userAgent + ' UITestingWithPuppeteerDemoBot');\n    await page.goto(data);\n    await page.waitForSelector('a.card-body');\n\n    const newBooks = await page.evaluate(() => {\n        const links = document.querySelectorAll('a.card-body');\n        return Array.from(links).map(l => l.getAttribute('href')).slice(0, 10);\n    });\n    for(const book of newBooks) {\n        cluster.queue(book, getPrice);\n    }\n}\n```", "```js\nasync function getPrice({ page, data}) {\n    const userAgent = await page.browser().userAgent();\n    await page.setUserAgent(userAgent + ' UITestingWithPuppeteerDemoBot');\n    await page.goto(data);\n    await page.waitForSelector('.price-list__item .price-list__price');\n    prices.push(await page.evaluate(() => {\n        const prices = document.querySelectorAll('.price-list__item .price-list__price');\n        if(document.querySelectorAll('.price-list__name')[1].innerText.trim() == 'Print + eBook') {\n            return {\n                book: document.querySelector('.product-info__title').innerText,\n                print: prices[1].innerText,\n                ebook: prices[2].innerText,\n            }\n        }\n    }));\n}\n```", "```js\nawait cluster.idle();\nawait cluster.close();\n```", "```js\n> node crawler-with-cluster.js\n== Start:     2020-12-29 08:50:14.475\n== Now:       2020-12-29 08:51:28.078 (running for 1.2 minutes)\n== Progress:  6 / 70 (8.57%), errors: 0 (0.00%)\n== Remaining: 13.1 minutes (@ 0.08 pages/second)\n== Sys. load: 6.1% CPU / 95.3% memory\n== Workers:   2\n   #0 WORK https://www.packtpub.com/security\n   #1 WORK https://www.packtpub.com/all-products\n```", "```js\nconst puppeteer = require('puppeteer');\n(async function() {\n    const browser = await puppeteer.launch({});\n    const page = await browser.newPage();\n    await page.goto('https://arh.antoinevastel.com/bots/areyouheadless');\n    await page.screenshot({ path : './bot.png'});\n    browser.close()\n})();\n```", "```js\nnpm install puppeteer-extra\nnpm install puppeteer-extra-plugin-stealth\n```", "```js\nconst puppeteer = require('puppeteer');\n```", "```js\nconst puppeteer = require('puppeteer-extra');\nconst StealthPlugin = require('puppeteer-extra-plugin-stealth');\npuppeteer.use(StealthPlugin());\n```", "```js\n(async function() {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n    await page.authenticate({username: 'user', password: 'password'});\n    await page.goto('https://ptsv2.com/t/ui-testing-puppeteer/post');\n    await page.screenshot({ path : './authentication.png'});\n    browser.close()\n})();\n```", "```js\nconst puppeteer = require('puppeteer');\nconst cookies = require('./account.packtpub.com.cookies.json');\n(async function() {\n    const browser = await puppeteer.launch({defaultViewport : { width: 1024, height: 1024}});\n    const page = await browser.newPage();\n    await page.setCookie(...cookies);\n    await page.goto('https://account.packtpub.com/account/details');\n    await page.waitForSelector('[autocomplete=\"given-name\"]');\n    await page.screenshot({ path : './cookies.png'});\n    browser.close()\n})();\n```", "```js\n{\n  \"name\": \"packt_privacy\",\n  \"value\": \"true\",\n  \"domain\": \".packtpub.com\",\n  \"path\": \"/\",\n  \"expires\": 1611427077,\n  \"httpOnly\": false,\n  \"secure\": false\n}\n```", "```js\nAuthorization: <type> <credentials>\n```", "```js\n(async function() {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n    await page.setExtraHTTPHeaders({\n        authorization: 'basic dXNlcjpwYXNzd29yZA=='\n    });\n    await page.goto('https://ptsv2.com/t/ui-testing-puppeteer/post');\n    await page.screenshot({ path : './authentication-header.png'});\n    browser.close()\n})();\n```", "```js\nconst puppeteer = require('puppeteer');\n(async function() {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n    await page.setRequestInterception(true);\n    page.on('request', r => {\n        const overrides = {\n            headers: r.headers()\n        };\n        if(r.url() == 'https://ptsv2.com/t/ui-testing-puppeteer/post')\n            overrides.headers.authorization = 'basic dXNlcjpwYXNzd29yZA==';\n\n        r.continue(overrides);\n    });\n    await page.goto('https://ptsv2.com/t/ui-testing-puppeteer/post');\n    await page.screenshot({ path : './authentication-header.png'});\n    browser.close()\n})();\n```"]