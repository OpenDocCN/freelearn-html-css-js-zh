- en: Building Authentication with passport.js
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`passport.js`构建认证
- en: Authentication is a vital part of any application. Authentication is a way to
    secure the applications we build. Every application needs some kind of mechanism
    for authentication. It helps us to identify the users making requests to the application
    server.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 认证是任何应用程序的重要组成部分。认证是保护我们构建的应用程序的一种方式。每个应用程序都需要某种认证机制。它帮助我们识别向应用程序服务器发送请求的用户。
- en: 'In this chapter, we will discuss the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Creating a login and a register page
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建登录和注册页面
- en: Installing and configuring `passport.js`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置`passport.js`
- en: Learning more about the `passport.js` strategy, that is, the **JSON Web Token**
    (**JWT**) strategy
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解更多关于`passport.js`策略，即**JSON Web Token**（JWT）策略
- en: Learn more about `passport.js` Local Strategy
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解更多关于`passport.js`本地策略
- en: Creating necessary endpoints in the application server to handle register and
    login requests
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在应用程序服务器中创建必要的端点以处理注册和登录请求
- en: We can build the user authentication by ourselves. However, it adds a lot of
    configuration and lot of headaches. `passport.js` is a package that allows us
    to configure authentication efficiently, taking a very small amount of time. If
    you want to learn and develop all by yourself, I encourage you to do so. That
    will give you more insights into how everything works. However, for this book,
    we will use this awesome tool called `passport.js`, which is very easy to integrate
    and learn.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以自己构建用户认证。然而，这需要大量的配置和很多麻烦。`passport.js`是一个允许我们高效配置认证的包，只需花费很少的时间。如果您想自己学习和开发，我鼓励您这样做。这将使您更深入地了解一切是如何工作的。然而，对于这本书，我们将使用这个叫做`passport.js`的强大工具，它非常容易集成和学习。
- en: Up until this chapter, we have created a dynamic web application that displays
    all the movies that we have added via the Movie Add form and the API on the home
    page. We have a way of adding these movies to the database via the frontend as
    well. Now, since this will be a public web application, we cannot allow everyone
    to add movies by themselves without logging in. Only a user who logs in will have
    access and be able to add movies. Also, in order to rate a movie, a user should
    log in first and then rate the movie.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经创建了一个动态的Web应用程序，该程序在主页上显示我们通过电影添加表单和API添加的所有电影。我们也有一种方法通过前端将这些电影添加到数据库中。现在，由于这将是一个公开的Web应用程序，我们不能允许每个人在未登录的情况下自行添加电影。只有登录的用户才能访问并添加电影。此外，为了对电影进行评分，用户应先登录，然后对电影进行评分。
- en: Introduction to passport.js
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`passport.js`简介'
- en: '`passport.js` is a middleware provided by Node.js for authentication. The functionality
    of `passport.js` is to authenticate the requests that are made to the server.
    It provides several strategies for authentication. `passport.js` provides strategies
    to such as local strategy, Facebook strategy, Google strategy, Twitter strategy,
    and JWT strategy. In this chapter, we will focus on using the JWT strategy.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`passport.js`是Node.js提供的用于认证的中间件。`passport.js`的功能是认证发送到服务器的请求。它提供了多种认证策略。`passport.js`提供了诸如本地策略、Facebook策略、Google策略、Twitter策略和JWT策略等策略。在本章中，我们将专注于使用JWT策略。'
- en: JWT
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JWT
- en: 'JWT is a way of authenticating the requests using a token-based approach. There
    are two methods of authenticating requests: cookie-based authentication, and token-based
    authentication. The cookie-based authentication mechanism saves the user''s session
    ID in the browser''s cookie, whereas the token-based mechanism uses a signed token
    that will look like this:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: JWT是一种使用基于令牌的方法进行请求认证的方式。有两种认证请求的方法：基于cookie的认证和基于令牌的认证。基于cookie的认证机制将用户的会话ID保存在浏览器的cookie中，而基于令牌的机制使用一个签名的令牌，其外观如下：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This token is then validated on every request that we make to the `controllers`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，这个令牌将在我们向`controllers`发出的每个请求上进行验证。
- en: For our application, we will use a combination of both. When a user requests
    to log in to the app, we will create a signed token for them and then add that
    token to the browser's cookie. The next time when the user logs in, we will read
    that token from the cookie and validate that token using the `passport-jwt` module
    in the server, and then decide whether or not to log that user in.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的应用程序，我们将使用两种方法的组合。当用户请求登录到应用程序时，我们将为他们创建一个签名的令牌，然后将该令牌添加到浏览器的cookie中。下次用户登录时，我们将从cookie中读取该令牌，并使用服务器中的`passport-jwt`模块验证该令牌，然后决定是否让该用户登录。
- en: 'If you look at the preceding token carefully, you will see that the token has
    three parts separated by a period (`.`); each part has its own meaning:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: The first part represents the header
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second part represents the payload
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third part represents the signature
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To be able to use this JWT, we will need to add a package. To do that, we can
    just run the following command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To start using this package, let''s define it in `server.js` as well:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Installing passport.js
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just like any other `npm` package, we can install `passport.js` by running
    the following command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'On successful installation, you should have those package listed on your `package.json`
    as well:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can also do this by first adding the package to your `package.json` file
    and then running the following command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Configuring passport
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just like any other `node` package, we will need to configure the package for `passport.js`.
    In our `server.js` file, add the following lines of code:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The preceding code just initialized `passport.js` in our application. We still
    need to configure a couple of things to start using the JWT authentication mechanism.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: passport.js strategies
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned previously, `passport.js` provides a lot of strategies for easy
    integration. One of the strategies that we will be working on with is the JWT
    strategy. We have already added `passport.js` and initialized it. Now, let's add
    this strategy as well.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Installing the passport-jwt strategy
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just installing passport module is not sufficient for our needs. `passport.js`
    provides its strategies in separate `npm` packages. For `jwt` authentication,
    we have to install the `passport-jwt` module, as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'On successful installation, you should have these packages listed in the `package.json` file
    of the application:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Configuring the passport-jwt strategy
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have all the things we need, let''s jump into the configuration
    setting for the JWT strategy. Add the following lines of code in `server.js`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The preceding code is enough to get us started. We will need `JwtStrategy` from `passport.js`,
    and `ExtractJwT` will be used to extract the payload data in the `jwt` token.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: We have also defined a variable to set the JWT `auth` settings, which has a
    secret key configured. This secret key will be used to sign the payloads of any
    requests.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: You can also create a separate file to store your important keys.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Using the JWT strategy
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we are all set up to use the services provided by `passport.js`. Let''s
    quickly recap what we have done so far:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Installed passport, `passport-jwt`, and `jsonwebtoken`
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configured all settings for these three packages
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next steps are as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Creating our user model
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating API endpoints for the user entity, that is, sign in and sign up
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Building our authentication views,  that is, the login page and register page
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the JWT strategy to finally authenticate the requests
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up user registration
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start with adding the functionality to sign up users to our app.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Creating a User model
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We don''t have a collection yet to manage the users. We will have three parameters
    in our `User` model: `name`, `email`, and `password`. Let''s go ahead and create
    our `User` model called `User.js` in the `models` directory:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As you can see, the following are the three attributes for the user: `name`,
    `email`, and `password`.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Installing bcryptjs
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we cannot save these user''s passwords in plain text, so we will need
    a mechanism to encrypt them. Fortunately, we already have a package designed to
    encrypt passwords, which is `bcryptjs`. Let''s first add this package to our application:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When the package is installed, let''s add the initialization block in the `User.js` model:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, when we save a user, we should create our own method to add users to the
    database, as we want to encrypt their passwords. So, let''s add the following
    code to `models/User.js`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the preceding code, we have used the `bcrypt` library, which uses a `genSalt`
    mechanism to convert a password into an encrypted string. The preceding method—`createUser`—in
    the `User` model takes the `user` object, converts the user-provided password
    into a bcrypted password, and then saves it to the database.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Adding API endpoint to register a user
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have our model ready, let's move on to creating an endpoint to create
    a user. For that, let's first create a controller called  `users.js` in the `controllers`
    folder to manage all user related requests. Since we have added a code block to
    initialize all the files inside the `controllers` directory in `server.js`, we
    do not need to require those files here.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'In `users.js`, replace the file''s contents with the following code:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the preceding code, we have added an endpoint, that makes a POST request
    to the `http://localhost:8081/users/register`  URL, takes the `name`, `email`,
    and `password` of the user, and saves them to our database. In the response, it
    returns the user that was just created. It's quite simple.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s test this endpoint in Postman. You should be able to see the user
    returned in the response:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/64757a12-83f6-4ab9-a3d9-a61e0f19b6fd.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
- en: Creating a register view page
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s add a view page for the users to sign up. For that, we will need to
    create a form that takes the `name`, `email`, and `password` parameters. Create
    a file called `Register.vue` inside `src/components`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `vue` file is a simple template file that contains the form components.
    The next step is to add a route for that file.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: 'In `src/router/index.js`, add the following lines of code:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'That''s it! Now, let''s navigate to `http://localhost.com:8080/users/register`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/45360b7b-0695-4de3-a24c-25b3bcdf6448.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
- en: Adding submit and clear methods in the register form
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next step is to add functionality to the `submit` and `clear` methods.
    Let''s add some methods to `Register.vue`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We have also added some validations for the registration form here. It validates
    the email provided by the user according to the given regex.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: We have added two methods, `submit` and `clear`. The `clear` method resets the
    form values; pretty straightforward, right?  Now, when we click on the `submit`
    button, the validations are run first. If all the validations pass, then only
    the logic inside the `submit` method is processed. Here, we need to make a request
    to the server with the user parameters where `axios` comes into play.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Introducing axios
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The axios is a mechanism to send request data to the server. You can think of
    it as an AJAX request in JavaScript. With `axios`, we can handle success and error
    responses from the server effectively.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'To install `axios`, run the following command:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Using axios
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s modify our `Register.vue` file to implement `axios`—replace the
    content inside the `script` tag as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If you are familiar with `ajax`, you should be able to quickly understand the
    code. If not, don't worry, it's actually quite simple. The `axios` method takes
    important parameters, such as the `request` method (in preceding case, `post`),
    the data parameters or the payloads, and a URL endpoint to hit. It takes these
    parameters and routes them to either the `then()` method or `catch()` method depending
    on the server's response.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: If the request is successful, it goes to the `then()` method; if not, it goes
    to the `catch()` method. Now, the success and failure of the requests are also
    customizable according to our needs. For the preceding scenario, we will simply
    pass an error response if the `user` is not saved to the database. We can also
    do it for the validations.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s also modify `users.js` inside the `controller` method to accommodate
    these changes:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: As you can see in the preceding code, if there is a failure in the request,
    we will send a message saying `Something went wrong`. We can also display different
    types of message depending on the server's response.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the user login
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have successfully implemented the login process for a user, let's start
    building the functionality to log users in to our app.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the User model
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To log in users to the app, we will take the following two parameters: the
    user''s email and their password. We will need to query the database to find the
    record with their given email; so, let''s add a method that will extract the user
    according to the username:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The preceding method will return the user that has the given email.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'As I mentioned, another thing that we will need to check is the password. Let''s
    add method that compares the password provided by the user while logging in to
    the password that is saved in our database:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The preceding method takes both user-provided password and the saved password
    and returns `true` or `false` depending on whether the passwords match or not.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Now we are all set to jump into the controller part.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Adding an API endpoint to log a user in
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have added the methods required for a user to be able to log in. Now, the
    most important part of this chapter lies here. We need to set up the JWT `auth`
    mechanism to enable a user to log in.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'In `users.js`, add the following lines of code:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Since the JWT strategy is a part of `passport.js`, we will need to initialize
    that as well. We also need to add some configurations for JWT options to extract
    the data from the payload, and unencrypt it and then encrypt it again when a request
    is made to the server.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: The secret key is something that you can configure. It basically represents
    the token of your app. Ensure that it is not easily guessable.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, we have added an endpoint, which makes a POST request to `localhost:8081/users/login` and
    takes the user''s email and password. The following are a couple of things that
    this method does:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: Checks whether the user with the given email exists. If it does not exist, it
    sends a status code of 404, stating that the user does not exist in our app.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compares the provided password with our user's password in the app. If there
    is no match, it sends an error response stating that passwords do not match.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If everything goes fine, it signs the user's payload with the JWT signature,
    generates a token, and responds with that token.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s test this endpoint in Postman. You should be able to see the token
    returned in the response, as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9d43f252-4443-4cdb-b915-48e3fd30c63f.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, note that JWT takes the payload, signs it, and
    generates a random token.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Creating a register view page
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s add a view page for the users to log in now. For that, like we did on
    the register page, we will need to create a form that takes the email and password
    parameters. Create a file called `Login.vue` inside `src/components`, as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `vue` file is a simple template file that contains the form components.
    The next thing to do is to add a route for that file.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: 'In `src/router/index.js`, add the following code:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'That''s it. Now, let''s navigate to `http://localhost.com:8080/users/login`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/36840d36-9b09-4219-9797-57ad3e10df90.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
- en: Adding submit and clear methods to the login form
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next step is to add functionality in the `submit` and `clear` methods.
    Let''s add some methods to `Login.vue`. The `clear` method is the same as on the
    register page. For the `submit` method, we will use the `axios` method here. We
    have already categorized our success and error messages in the controller. Now
    we just need to make sure that they are displayed in the UI:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The validations are the same as on the register page. We have added two methods, `submit`
    and `clear`. The `clear` method resets the form values, and the `submit` method
    simply hits the API endpoint, taking the parameter from the form, and responds
    with the correct message, which is then displayed in the UI. Upon successful completion,
    the user will be redirected to the home page.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: The important part here is that since we are interacting on the client side,
    we will need the previously generated JWT token to be saved somewhere. The best
    way to access the token is by saving it to the browser's session. So, we have
    set a key called `auth`, which saves the JWT token in the local storage. Whenever
    any other requests are made, the request will first check whether it is a valid
    token or not and perform the action accordingly.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is what we have done so far:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Added `getUserByEmail()` and `comparePassword()` to the Users model
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Created a login view page
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added methods to be able to submit and clear the form
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generated a JWT signed token and saved it to the session for reuse later
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displayed success and error messages
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authenticating our user in Home.vue
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last thing we need to do is check whether the current logged in user is
    authorized to view the movie listing page or not. Although it makes sense to make
    the home page (movie listing page) accessible to all users, for learning purpose,
    let's add JWT authorization when a user goes to the home page. Let's make the
    home page not accessible to the outside users who are not in our app.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: 'In `movies.js`, add the following piece of code:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Yup, that''s it! We will need to initialize passport and just add `passport.authenticate(''jwt'',
    { session: false })`. We have to pass the JWT token and the passport JWT strategy
    automatically authenticates the current user.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s also send the JWT token while making a request to the movie listing
    page. In `Home.vue`, add the following code:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: While making the `axios` call, we will have to pass one extra parameter in the
    headers. We need to read the token from the local storage and pass it to the movies
    API through the headers.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: With this, any user who is not logged in to the app will not be able to view
    the movie listing page.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: Serving static files for Vue components
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before jumping into the Local Strategy, let''s learn a little bit about how
    we can make our Vue.js components to be served statically. Since we are using
    a separate frontend and backend, it can be a daunting task to keep maintaining
    these two versions, and especially while deploying the app, it can take a lot
    longer to configure everything. So, to manage our app better, we will build the
    Vue.js app, which will be a production build, and use the Node.js server only
    to serve the files. For that, we will be using a separate package called serve-static.
    So, let''s go ahead and install the package:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now, let''s add the following contents to our `server.js` file:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'With this, let''s now build our application with the following command:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The preceding command will create the necessary static files inside the `dist` folder
    in the application that will be served by the Node.js server, which is in the 8081 port.
    After the build, we now do not need to run the following command:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Also, now since we will be running our node server only, the application should
    be available at the URL `http://localhost:8081`.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding command starts our frontend server. We only need to run the Node.js
    server with the following command:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Since we now only have one port, 8081, we do not need to add the prefix `/api` in
    every backend API like we did earlier, we can get rid of those as well. So, let''s
    update the `controllers` and `vue` files as well:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the contents in `controllers/movies.js`, as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Replace the contents in `controllers/users.js`, as follows:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Replace the contents of the `script` tag of `AddMovie.vue` with the following
    code:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Replace the contents of the `script` tag of `Home.vue` with the following code:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Replace the contents of the `script` tag of `Login.vue` with the following
    code:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Replace the contents of the `script` tag of `Register.vue` with the following
    code:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Finally, we don't need to use the proxy anymore, so we can remove the proxy
    we set up earlier from `webpack.dev.conf.js`.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the contents inside `devServer` with the following code:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'With these updated, let''s build our application once more with the following
    command:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Our application should work as expected.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: Since our application is a **Single Page Application **(**SPA**), when we browse
    through the nested routes and reload the page, we will get an error. For example,
    if we browse the `http://localhost:8081/contact` page by clicking the link in
    the home page, it will work. However, if we try to navigate to the `http://localhost:8081/contact` page
    directly, we will get an error because this is an SPA, which means that the browser
    only renders the static `index.html` file. When we try to access the `/contact` page,
    it will look for the page called `contact`, which does not exist.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: For this, we will need to add a middleware, which acts as a fallback and renders
    the same `index.html` file when we try to reload the page directly or try to access
    the pages with dynamic IDs.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a middleware provided by `npm` to serve our purpose. Let''s go ahead
    and install the following package:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'After the installation, let''s modify our `server.js` file to use the middleware:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: With these in place, we should now be able to access all the routes directly.
    We can also reload the pages now.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: Since we are building our Vue.js components and running our app solely on the
    Node.js server, whenever we make a change to the Vue.js components, we will need
    to build the application again with the `npm run build` command.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: Passport's Local Strategy
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Passport's Local Strategy is easy to integrate. As always, let's start with
    the installation of this strategy as follows.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Installing Passport's Local Strategy
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can install passport''s Local Strategy by running the following command:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The following code should add the package to your package.json file:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Configuring Passport's Local Strategy
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a few steps to configure the Passport''s Local Strategy. We will
    discuss each step in detail:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: Add necessary routes for Local authentication.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a middleware method to check whether authentication is successful.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's dive into the details for each of the preceding steps.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解前面步骤的细节。
- en: Adding necessary routes for Local Authentication
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加必要的本地认证路由
- en: 'Let''s go ahead and add the necessary routes when we click on the login button.
    Replace the contents of `controllers/users.js` with the following code:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续添加必要的路由，当我们点击登录按钮时。用以下代码替换`controllers/users.js`的内容：
- en: '[PRE46]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Here, we have added a route for users login as `/users/login` which then uses
    `passport.js` local authentication mechanism to log in the user to the app.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们添加了一个用户登录的路由`/users/login`，然后使用`passport.js`本地认证机制将用户登录到应用中。
- en: Also, we configured `passport.js` to use LocalStrategy when user logs in which
    takes the `username` and `password` of the user.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们配置了`passport.js`，在用户登录时使用LocalStrategy，它需要用户的`username`和`password`。
- en: Installing express-session
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装express-session
- en: 'The next thing we need to do is setup a `session` so that when a user successfully
    logs in, the `user` data can be stored in the `session` and can be retrieved easily
    when we make other requests. For this, we need to add a package called `express-session`.
    Let''s go ahead and install the package with the following command:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步，我们需要设置一个`session`，这样当用户成功登录时，`user`数据可以存储在`session`中，并且在我们发出其他请求时可以轻松检索。为此，我们需要添加一个名为`express-session`的包。让我们继续使用以下命令安装这个包：
- en: '[PRE47]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Configuring express-session
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置express-session
- en: Now, that we have the package, let's configure this package to fulfill our needs
    to save the user in the `session`.  Add the following lines of code in it.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经有了这个包，让我们配置这个包以满足我们在`session`中保存用户的需要。在它里面添加以下几行代码。
- en: If `username` and `password` matches, the user object is saved in the session
    in the server and can be access via `req.user` in every request.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`username`和`password`匹配，用户对象将被保存在服务器的会话中，并且可以通过每个请求中的`req.user`访问。
- en: Also, let's updated our vue files as well since we do not need the passport
    JWT strategy now.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，由于我们现在不需要passport JWT策略，让我们也更新我们的vue文件。
- en: 'Update the contents in `server.js` with the following code:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码更新`server.js`中的内容：
- en: '[PRE48]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Here, we added the configuration for express-session with the following code
    block:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们添加了以下代码块的express-session配置：
- en: '[PRE49]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The above code blocks uses a secret token required to save the user details.
    We will be defining the token in a separate file so that all of our configuration
    token reside in a single place.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码块使用一个必要的密钥令牌来保存用户详情。我们将在一个单独的文件中定义这个令牌，以便所有配置令牌都位于一个地方。
- en: 'So, let''s go ahead and create a file called `Config.js` inside the `config`
    directory and the following lines of code:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们继续创建一个名为`Config.js`的文件，位于`config`目录中，并添加以下几行代码：
- en: '[PRE50]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: We also added a `GET` route called `/api/current_user` to fetch the current
    logged in user details. This api uses a middleware method called `isLoggedIn`
    which checks if the user's data is on the session or not. And if the user's data
    exists in the session, the current user details is sent back as the response.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了一个名为`/api/current_user`的`GET`路由来获取当前登录用户的信息。这个API使用一个名为`isLoggedIn`的中间件方法，检查用户数据是否在会话中。如果用户数据存在于会话中，则将当前用户详细信息作为响应发送回。
- en: Another endpoint which we added is the `/logout` which simply logs out the user
    and destroys the session.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了一个名为`/logout`的另一个端点，它简单地注销用户并销毁会话。
- en: Hence, with this configuration, now we should be able to log in successfully
    using the `passport.js` Local Strategy.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，有了这个配置，现在我们应该能够使用`passport.js`的Local Strategy成功登录。
- en: The only problem that we have now is  there is no way to know if the user successfully
    logged in or not. For that we need to display some user's information such as
    `email` to indicate the logged in user.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在唯一的问题是，没有方法知道用户是否成功登录。为此，我们需要显示一些用户信息，例如`email`，以指示已登录的用户。
- en: For this, we need to pass the user's information from `Login.vue` to `App.vue`
    so that we can display the user's email in the top bar. We can use a method called
    `emit` provided by `Vue` which is used to pass the information between the `Vue`
    components. Let's go ahead and configure that.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们需要从`Login.vue`传递用户信息到`App.vue`，这样我们就可以在顶部栏显示用户的电子邮件。我们可以使用`Vue`提供的名为`emit`的方法，该方法用于在`Vue`组件之间传递信息。让我们继续配置它。
- en: Configuring emit method
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置emit方法
- en: 'Let''s first create a transmitter which can communicate between the different
    Vue components. Create a file called `bus.js` inside `src` directory and add the
    following contents:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个可以用于不同Vue组件之间通信的传输器。在`src`目录内创建一个名为`bus.js`的文件，并添加以下内容：
- en: '[PRE51]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Now, replace the contents inside `script` tag of `Login.vue` with the following
    code:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 `Login.vue` 中 `script` 标签内的内容替换为以下代码：
- en: '[PRE52]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Here we are emitting a method called `refreshUser` which will be defined in
    the App.vue. Replace the contents inside `App.vue` with the following code:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在发出一个名为 `refreshUser` 的方法，该方法将在 `App.vue` 中定义。将 `App.vue` 中的内容替换为以下代码：
- en: '[PRE53]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Here we have added the method called `refreshUser` which is being listened by
    `App.vue` in the mounted method. Whenever a user logs in to the app, the method
    called `refreshUser` in `App.vue` gets called and fetches the logged in user's
    information.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们添加了名为 `refreshUser` 的方法，该方法在 `App.vue` 的 `mounted` 方法中被监听。每当用户登录到应用程序时，`App.vue`
    中的 `refreshUser` 方法就会被调用，并获取已登录用户的信息。
- en: Also, we are displaying the user's email in the top bar so that we can know
    if the user is logged in or not.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们在顶部栏中显示了用户的电子邮件，这样我们就可以知道用户是否已登录。
- en: 'Also, let''s remove the JWT authentication from movies controller as well.
    Replace the contents in `controllers/movies.js` with the following code:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，让我们也将 JWT 验证从电影控制器中移除。将 `controllers/movies.js` 中的内容替换为以下代码：
- en: '[PRE54]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'With this, we should be able to view the following screen when a user logs
    in to the app:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，当用户登录到应用程序时，我们应该能够看到以下屏幕：
- en: '![](img/2a7fa817-15de-4d8c-acf8-5d78928920ff.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a7fa817-15de-4d8c-acf8-5d78928920ff.png)'
- en: Summary
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered `passport.js` and how it works. We also covered
    how to use a simple JWT strategy with a MEVN application and handle register and
    login for users.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了 `passport.js` 的工作原理。我们还介绍了如何在 MEVN 应用程序中使用简单的 JWT 策略，并处理用户的注册和登录。
- en: In the next chapter, we will dig into different `passport.js` strategies, such
    as the Facebook strategy, the Google strategy, and the Twitter strategy.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨不同的 `passport.js` 策略，例如 Facebook 策略、Google 策略和 Twitter 策略。
