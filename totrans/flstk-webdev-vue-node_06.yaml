- en: Building Authentication with passport.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Authentication is a vital part of any application. Authentication is a way to
    secure the applications we build. Every application needs some kind of mechanism
    for authentication. It helps us to identify the users making requests to the application
    server.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a login and a register page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring `passport.js`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning more about the `passport.js` strategy, that is, the **JSON Web Token**
    (**JWT**) strategy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more about `passport.js` Local Strategy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating necessary endpoints in the application server to handle register and
    login requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can build the user authentication by ourselves. However, it adds a lot of
    configuration and lot of headaches. `passport.js` is a package that allows us
    to configure authentication efficiently, taking a very small amount of time. If
    you want to learn and develop all by yourself, I encourage you to do so. That
    will give you more insights into how everything works. However, for this book,
    we will use this awesome tool called `passport.js`, which is very easy to integrate
    and learn.
  prefs: []
  type: TYPE_NORMAL
- en: Up until this chapter, we have created a dynamic web application that displays
    all the movies that we have added via the Movie Add form and the API on the home
    page. We have a way of adding these movies to the database via the frontend as
    well. Now, since this will be a public web application, we cannot allow everyone
    to add movies by themselves without logging in. Only a user who logs in will have
    access and be able to add movies. Also, in order to rate a movie, a user should
    log in first and then rate the movie.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to passport.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`passport.js` is a middleware provided by Node.js for authentication. The functionality
    of `passport.js` is to authenticate the requests that are made to the server.
    It provides several strategies for authentication. `passport.js` provides strategies
    to such as local strategy, Facebook strategy, Google strategy, Twitter strategy,
    and JWT strategy. In this chapter, we will focus on using the JWT strategy.'
  prefs: []
  type: TYPE_NORMAL
- en: JWT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JWT is a way of authenticating the requests using a token-based approach. There
    are two methods of authenticating requests: cookie-based authentication, and token-based
    authentication. The cookie-based authentication mechanism saves the user''s session
    ID in the browser''s cookie, whereas the token-based mechanism uses a signed token
    that will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This token is then validated on every request that we make to the `controllers`.
  prefs: []
  type: TYPE_NORMAL
- en: For our application, we will use a combination of both. When a user requests
    to log in to the app, we will create a signed token for them and then add that
    token to the browser's cookie. The next time when the user logs in, we will read
    that token from the cookie and validate that token using the `passport-jwt` module
    in the server, and then decide whether or not to log that user in.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look at the preceding token carefully, you will see that the token has
    three parts separated by a period (`.`); each part has its own meaning:'
  prefs: []
  type: TYPE_NORMAL
- en: The first part represents the header
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second part represents the payload
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third part represents the signature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To be able to use this JWT, we will need to add a package. To do that, we can
    just run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To start using this package, let''s define it in `server.js` as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Installing passport.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just like any other `npm` package, we can install `passport.js` by running
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'On successful installation, you should have those package listed on your `package.json`
    as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also do this by first adding the package to your `package.json` file
    and then running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Configuring passport
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just like any other `node` package, we will need to configure the package for `passport.js`.
    In our `server.js` file, add the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code just initialized `passport.js` in our application. We still
    need to configure a couple of things to start using the JWT authentication mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: passport.js strategies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned previously, `passport.js` provides a lot of strategies for easy
    integration. One of the strategies that we will be working on with is the JWT
    strategy. We have already added `passport.js` and initialized it. Now, let's add
    this strategy as well.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the passport-jwt strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just installing passport module is not sufficient for our needs. `passport.js`
    provides its strategies in separate `npm` packages. For `jwt` authentication,
    we have to install the `passport-jwt` module, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'On successful installation, you should have these packages listed in the `package.json` file
    of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Configuring the passport-jwt strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have all the things we need, let''s jump into the configuration
    setting for the JWT strategy. Add the following lines of code in `server.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is enough to get us started. We will need `JwtStrategy` from `passport.js`,
    and `ExtractJwT` will be used to extract the payload data in the `jwt` token.
  prefs: []
  type: TYPE_NORMAL
- en: We have also defined a variable to set the JWT `auth` settings, which has a
    secret key configured. This secret key will be used to sign the payloads of any
    requests.
  prefs: []
  type: TYPE_NORMAL
- en: You can also create a separate file to store your important keys.
  prefs: []
  type: TYPE_NORMAL
- en: Using the JWT strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we are all set up to use the services provided by `passport.js`. Let''s
    quickly recap what we have done so far:'
  prefs: []
  type: TYPE_NORMAL
- en: Installed passport, `passport-jwt`, and `jsonwebtoken`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configured all settings for these three packages
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating our user model
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating API endpoints for the user entity, that is, sign in and sign up
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Building our authentication views,  that is, the login page and register page
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the JWT strategy to finally authenticate the requests
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up user registration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start with adding the functionality to sign up users to our app.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a User model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We don''t have a collection yet to manage the users. We will have three parameters
    in our `User` model: `name`, `email`, and `password`. Let''s go ahead and create
    our `User` model called `User.js` in the `models` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the following are the three attributes for the user: `name`,
    `email`, and `password`.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing bcryptjs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we cannot save these user''s passwords in plain text, so we will need
    a mechanism to encrypt them. Fortunately, we already have a package designed to
    encrypt passwords, which is `bcryptjs`. Let''s first add this package to our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'When the package is installed, let''s add the initialization block in the `User.js` model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when we save a user, we should create our own method to add users to the
    database, as we want to encrypt their passwords. So, let''s add the following
    code to `models/User.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we have used the `bcrypt` library, which uses a `genSalt`
    mechanism to convert a password into an encrypted string. The preceding method—`createUser`—in
    the `User` model takes the `user` object, converts the user-provided password
    into a bcrypted password, and then saves it to the database.
  prefs: []
  type: TYPE_NORMAL
- en: Adding API endpoint to register a user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have our model ready, let's move on to creating an endpoint to create
    a user. For that, let's first create a controller called  `users.js` in the `controllers`
    folder to manage all user related requests. Since we have added a code block to
    initialize all the files inside the `controllers` directory in `server.js`, we
    do not need to require those files here.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `users.js`, replace the file''s contents with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we have added an endpoint, that makes a POST request
    to the `http://localhost:8081/users/register`  URL, takes the `name`, `email`,
    and `password` of the user, and saves them to our database. In the response, it
    returns the user that was just created. It's quite simple.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s test this endpoint in Postman. You should be able to see the user
    returned in the response:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/64757a12-83f6-4ab9-a3d9-a61e0f19b6fd.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a register view page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s add a view page for the users to sign up. For that, we will need to
    create a form that takes the `name`, `email`, and `password` parameters. Create
    a file called `Register.vue` inside `src/components`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `vue` file is a simple template file that contains the form components.
    The next step is to add a route for that file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `src/router/index.js`, add the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s it! Now, let''s navigate to `http://localhost.com:8080/users/register`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/45360b7b-0695-4de3-a24c-25b3bcdf6448.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding submit and clear methods in the register form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next step is to add functionality to the `submit` and `clear` methods.
    Let''s add some methods to `Register.vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We have also added some validations for the registration form here. It validates
    the email provided by the user according to the given regex.
  prefs: []
  type: TYPE_NORMAL
- en: We have added two methods, `submit` and `clear`. The `clear` method resets the
    form values; pretty straightforward, right?  Now, when we click on the `submit`
    button, the validations are run first. If all the validations pass, then only
    the logic inside the `submit` method is processed. Here, we need to make a request
    to the server with the user parameters where `axios` comes into play.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing axios
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The axios is a mechanism to send request data to the server. You can think of
    it as an AJAX request in JavaScript. With `axios`, we can handle success and error
    responses from the server effectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install `axios`, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Using axios
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s modify our `Register.vue` file to implement `axios`—replace the
    content inside the `script` tag as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: If you are familiar with `ajax`, you should be able to quickly understand the
    code. If not, don't worry, it's actually quite simple. The `axios` method takes
    important parameters, such as the `request` method (in preceding case, `post`),
    the data parameters or the payloads, and a URL endpoint to hit. It takes these
    parameters and routes them to either the `then()` method or `catch()` method depending
    on the server's response.
  prefs: []
  type: TYPE_NORMAL
- en: If the request is successful, it goes to the `then()` method; if not, it goes
    to the `catch()` method. Now, the success and failure of the requests are also
    customizable according to our needs. For the preceding scenario, we will simply
    pass an error response if the `user` is not saved to the database. We can also
    do it for the validations.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s also modify `users.js` inside the `controller` method to accommodate
    these changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the preceding code, if there is a failure in the request,
    we will send a message saying `Something went wrong`. We can also display different
    types of message depending on the server's response.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the user login
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have successfully implemented the login process for a user, let's start
    building the functionality to log users in to our app.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the User model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To log in users to the app, we will take the following two parameters: the
    user''s email and their password. We will need to query the database to find the
    record with their given email; so, let''s add a method that will extract the user
    according to the username:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The preceding method will return the user that has the given email.
  prefs: []
  type: TYPE_NORMAL
- en: 'As I mentioned, another thing that we will need to check is the password. Let''s
    add method that compares the password provided by the user while logging in to
    the password that is saved in our database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The preceding method takes both user-provided password and the saved password
    and returns `true` or `false` depending on whether the passwords match or not.
  prefs: []
  type: TYPE_NORMAL
- en: Now we are all set to jump into the controller part.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an API endpoint to log a user in
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have added the methods required for a user to be able to log in. Now, the
    most important part of this chapter lies here. We need to set up the JWT `auth`
    mechanism to enable a user to log in.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `users.js`, add the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Since the JWT strategy is a part of `passport.js`, we will need to initialize
    that as well. We also need to add some configurations for JWT options to extract
    the data from the payload, and unencrypt it and then encrypt it again when a request
    is made to the server.
  prefs: []
  type: TYPE_NORMAL
- en: The secret key is something that you can configure. It basically represents
    the token of your app. Ensure that it is not easily guessable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, we have added an endpoint, which makes a POST request to `localhost:8081/users/login` and
    takes the user''s email and password. The following are a couple of things that
    this method does:'
  prefs: []
  type: TYPE_NORMAL
- en: Checks whether the user with the given email exists. If it does not exist, it
    sends a status code of 404, stating that the user does not exist in our app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compares the provided password with our user's password in the app. If there
    is no match, it sends an error response stating that passwords do not match.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If everything goes fine, it signs the user's payload with the JWT signature,
    generates a token, and responds with that token.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s test this endpoint in Postman. You should be able to see the token
    returned in the response, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9d43f252-4443-4cdb-b915-48e3fd30c63f.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, note that JWT takes the payload, signs it, and
    generates a random token.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a register view page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s add a view page for the users to log in now. For that, like we did on
    the register page, we will need to create a form that takes the email and password
    parameters. Create a file called `Login.vue` inside `src/components`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The `vue` file is a simple template file that contains the form components.
    The next thing to do is to add a route for that file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `src/router/index.js`, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s it. Now, let''s navigate to `http://localhost.com:8080/users/login`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/36840d36-9b09-4219-9797-57ad3e10df90.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding submit and clear methods to the login form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next step is to add functionality in the `submit` and `clear` methods.
    Let''s add some methods to `Login.vue`. The `clear` method is the same as on the
    register page. For the `submit` method, we will use the `axios` method here. We
    have already categorized our success and error messages in the controller. Now
    we just need to make sure that they are displayed in the UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The validations are the same as on the register page. We have added two methods, `submit`
    and `clear`. The `clear` method resets the form values, and the `submit` method
    simply hits the API endpoint, taking the parameter from the form, and responds
    with the correct message, which is then displayed in the UI. Upon successful completion,
    the user will be redirected to the home page.
  prefs: []
  type: TYPE_NORMAL
- en: The important part here is that since we are interacting on the client side,
    we will need the previously generated JWT token to be saved somewhere. The best
    way to access the token is by saving it to the browser's session. So, we have
    set a key called `auth`, which saves the JWT token in the local storage. Whenever
    any other requests are made, the request will first check whether it is a valid
    token or not and perform the action accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is what we have done so far:'
  prefs: []
  type: TYPE_NORMAL
- en: Added `getUserByEmail()` and `comparePassword()` to the Users model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Created a login view page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added methods to be able to submit and clear the form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generated a JWT signed token and saved it to the session for reuse later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displayed success and error messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authenticating our user in Home.vue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last thing we need to do is check whether the current logged in user is
    authorized to view the movie listing page or not. Although it makes sense to make
    the home page (movie listing page) accessible to all users, for learning purpose,
    let's add JWT authorization when a user goes to the home page. Let's make the
    home page not accessible to the outside users who are not in our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `movies.js`, add the following piece of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Yup, that''s it! We will need to initialize passport and just add `passport.authenticate(''jwt'',
    { session: false })`. We have to pass the JWT token and the passport JWT strategy
    automatically authenticates the current user.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s also send the JWT token while making a request to the movie listing
    page. In `Home.vue`, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: While making the `axios` call, we will have to pass one extra parameter in the
    headers. We need to read the token from the local storage and pass it to the movies
    API through the headers.
  prefs: []
  type: TYPE_NORMAL
- en: With this, any user who is not logged in to the app will not be able to view
    the movie listing page.
  prefs: []
  type: TYPE_NORMAL
- en: Serving static files for Vue components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before jumping into the Local Strategy, let''s learn a little bit about how
    we can make our Vue.js components to be served statically. Since we are using
    a separate frontend and backend, it can be a daunting task to keep maintaining
    these two versions, and especially while deploying the app, it can take a lot
    longer to configure everything. So, to manage our app better, we will build the
    Vue.js app, which will be a production build, and use the Node.js server only
    to serve the files. For that, we will be using a separate package called serve-static.
    So, let''s go ahead and install the package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add the following contents to our `server.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'With this, let''s now build our application with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will create the necessary static files inside the `dist` folder
    in the application that will be served by the Node.js server, which is in the 8081 port.
    After the build, we now do not need to run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Also, now since we will be running our node server only, the application should
    be available at the URL `http://localhost:8081`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding command starts our frontend server. We only need to run the Node.js
    server with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we now only have one port, 8081, we do not need to add the prefix `/api` in
    every backend API like we did earlier, we can get rid of those as well. So, let''s
    update the `controllers` and `vue` files as well:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the contents in `controllers/movies.js`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the contents in `controllers/users.js`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the contents of the `script` tag of `AddMovie.vue` with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the contents of the `script` tag of `Home.vue` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the contents of the `script` tag of `Login.vue` with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the contents of the `script` tag of `Register.vue` with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we don't need to use the proxy anymore, so we can remove the proxy
    we set up earlier from `webpack.dev.conf.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the contents inside `devServer` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'With these updated, let''s build our application once more with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Our application should work as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Since our application is a **Single Page Application **(**SPA**), when we browse
    through the nested routes and reload the page, we will get an error. For example,
    if we browse the `http://localhost:8081/contact` page by clicking the link in
    the home page, it will work. However, if we try to navigate to the `http://localhost:8081/contact` page
    directly, we will get an error because this is an SPA, which means that the browser
    only renders the static `index.html` file. When we try to access the `/contact` page,
    it will look for the page called `contact`, which does not exist.
  prefs: []
  type: TYPE_NORMAL
- en: For this, we will need to add a middleware, which acts as a fallback and renders
    the same `index.html` file when we try to reload the page directly or try to access
    the pages with dynamic IDs.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a middleware provided by `npm` to serve our purpose. Let''s go ahead
    and install the following package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'After the installation, let''s modify our `server.js` file to use the middleware:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: With these in place, we should now be able to access all the routes directly.
    We can also reload the pages now.
  prefs: []
  type: TYPE_NORMAL
- en: Since we are building our Vue.js components and running our app solely on the
    Node.js server, whenever we make a change to the Vue.js components, we will need
    to build the application again with the `npm run build` command.
  prefs: []
  type: TYPE_NORMAL
- en: Passport's Local Strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Passport's Local Strategy is easy to integrate. As always, let's start with
    the installation of this strategy as follows.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Passport's Local Strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can install passport''s Local Strategy by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code should add the package to your package.json file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Configuring Passport's Local Strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a few steps to configure the Passport''s Local Strategy. We will
    discuss each step in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: Add necessary routes for Local authentication.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a middleware method to check whether authentication is successful.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's dive into the details for each of the preceding steps.
  prefs: []
  type: TYPE_NORMAL
- en: Adding necessary routes for Local Authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s go ahead and add the necessary routes when we click on the login button.
    Replace the contents of `controllers/users.js` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have added a route for users login as `/users/login` which then uses
    `passport.js` local authentication mechanism to log in the user to the app.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we configured `passport.js` to use LocalStrategy when user logs in which
    takes the `username` and `password` of the user.
  prefs: []
  type: TYPE_NORMAL
- en: Installing express-session
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next thing we need to do is setup a `session` so that when a user successfully
    logs in, the `user` data can be stored in the `session` and can be retrieved easily
    when we make other requests. For this, we need to add a package called `express-session`.
    Let''s go ahead and install the package with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Configuring express-session
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, that we have the package, let's configure this package to fulfill our needs
    to save the user in the `session`.  Add the following lines of code in it.
  prefs: []
  type: TYPE_NORMAL
- en: If `username` and `password` matches, the user object is saved in the session
    in the server and can be access via `req.user` in every request.
  prefs: []
  type: TYPE_NORMAL
- en: Also, let's updated our vue files as well since we do not need the passport
    JWT strategy now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the contents in `server.js` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we added the configuration for express-session with the following code
    block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: The above code blocks uses a secret token required to save the user details.
    We will be defining the token in a separate file so that all of our configuration
    token reside in a single place.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s go ahead and create a file called `Config.js` inside the `config`
    directory and the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: We also added a `GET` route called `/api/current_user` to fetch the current
    logged in user details. This api uses a middleware method called `isLoggedIn`
    which checks if the user's data is on the session or not. And if the user's data
    exists in the session, the current user details is sent back as the response.
  prefs: []
  type: TYPE_NORMAL
- en: Another endpoint which we added is the `/logout` which simply logs out the user
    and destroys the session.
  prefs: []
  type: TYPE_NORMAL
- en: Hence, with this configuration, now we should be able to log in successfully
    using the `passport.js` Local Strategy.
  prefs: []
  type: TYPE_NORMAL
- en: The only problem that we have now is  there is no way to know if the user successfully
    logged in or not. For that we need to display some user's information such as
    `email` to indicate the logged in user.
  prefs: []
  type: TYPE_NORMAL
- en: For this, we need to pass the user's information from `Login.vue` to `App.vue`
    so that we can display the user's email in the top bar. We can use a method called
    `emit` provided by `Vue` which is used to pass the information between the `Vue`
    components. Let's go ahead and configure that.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring emit method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s first create a transmitter which can communicate between the different
    Vue components. Create a file called `bus.js` inside `src` directory and add the
    following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, replace the contents inside `script` tag of `Login.vue` with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we are emitting a method called `refreshUser` which will be defined in
    the App.vue. Replace the contents inside `App.vue` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Here we have added the method called `refreshUser` which is being listened by
    `App.vue` in the mounted method. Whenever a user logs in to the app, the method
    called `refreshUser` in `App.vue` gets called and fetches the logged in user's
    information.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we are displaying the user's email in the top bar so that we can know
    if the user is logged in or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, let''s remove the JWT authentication from movies controller as well.
    Replace the contents in `controllers/movies.js` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'With this, we should be able to view the following screen when a user logs
    in to the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a7fa817-15de-4d8c-acf8-5d78928920ff.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered `passport.js` and how it works. We also covered
    how to use a simple JWT strategy with a MEVN application and handle register and
    login for users.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will dig into different `passport.js` strategies, such
    as the Facebook strategy, the Google strategy, and the Twitter strategy.
  prefs: []
  type: TYPE_NORMAL
