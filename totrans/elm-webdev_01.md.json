["```js\n$(\"div\").on(\"click\", performAction())\n```", "```js\nSELECT * FROM Customers\n WHERE Car='Mercedes' AND Color='Green';\n```", "```js\nUncaught TypeError: undefined is not a function\n```", "```js\nType Mismatch: Your code was trying to run a function call on the primitive type of undefined. That is not possible, since only functions can be called, and undefined is not a function. \n```", "```js\n-- TYPE MISMATCH -------------------------------------- types/list.elm\nThe 3rd element of this list is an unexpected type of value.\n15| [ alice, bob, \"/users/chuck/pic\" ]\n ^^^^^^^^^^^^^^^^^^\nAll elements should be the same type of value so that we can iterate over the list without running into unexpected values.\n\nAs I infer the type of values flowing through your program, I see a conflict between these two types:\n HTML\n String\n```", "```js\nfunction multiply(a, b) {\n  return a * b;\n}\n```", "```js\nmultiply(8, \"10\");\n```", "```js\nimport HTML exposing (text)\n\nmultiplyNumber x y = \n  x * y\n\nmain =\n  text ( toString ( multiplyNumber 8 10 ) )\n```", "```js\nmain =\n  text ( toString ( multiplyNumber 8 10 ) )\n```", "```js\nmultiplyNumber 8 10\n```", "```js\ntoString ( multiplyNumber 8 10 )\n```", "```js\ntoString multiplyNumber 8 10\n```", "```js\n  text ( toString ( multiplyNumber 8 10 ) )\n```", "```js\n  text ( toString ( multiplyNumber 2 ( multiplyNumber 2 ( multiplyNumber 2 10 ) ) ) )\n```", "```js\n multiplyNumber 2 10\n```", "```js\nmultiplyNumber 2 ( multiplyNumber 2 10 )\n```", "```js\nimport HTML exposing (text)\n\nmultiplyNumber x y = \n  x * y\n\nmain =\n  multiplyNumber 2 10\n    |> multiplyNumber 2\n    |> multiplyNumber 2\n    |> toString\n    |> text\n```", "```js\nimport HTML exposing (text)\n\nmultiplyNumber x y = \n  x * y\n\nmain =\n  multiplyNumber 8 10\n    |> toString\n    |> text\n```", "```js\nimport HTML exposing (text)\n\nmultiplyNumber: Int -> Int -> Int\nmultiplyNumber x y = \n  x * y\n\nmain =\n  multiplyNumber 8 10\n    |> toString\n    |> text\n```", "```js\nimport HTML exposing (text)\n\nmain =\n text \"Hello, World!\"\n```", "```js\nimport HTML exposing (..)\n main =\n h1 [] [ text \"Hello, Elm!\" ]\n```", "```js\nh2 [] [ text \"Hello, Elm!\" ]\n```", "```js\nmain =\n a [] [ text \"Hello, Elm!\" ]\n```", "```js\nmain =\n li [] [ text \"Hello, Elm!\" ]\n```", "```js\nmain =\n p [] [ text \"Hello, Elm!\" ]\n```", "```js\nimport HTML exposing (..)\n\nmain =\n div []\n [ p [] [text \"1st paragraph\" ]\n , p [] [text \"2nd paragraph\" ]\n ]\n```", "```js\nimport HTML exposing (..)\nimport HTML.Attributes exposing (class)\n\nmain =\n div [ class \"danger\" ]\n [ p [] [text \"1st paragraph\" ]\n , p [] [text \"2nd paragraph\" ]\n ]\n```", "```js\n.danger {\n  background: red;\n}\n```", "```js\nTop-level value main does not have a type annotation.\n I inferred the type annotation so you can copy it into your code:\n main : HTML msg\n```", "```js\nimport HTML exposing (..)\nimport HTML.Attributes exposing (class)\n\nmain : HTML msg\nmain =\n  div [ class \"danger\" ]\n  [ p [] [text \"1st paragraph\" ]\n  , p [] [text \"2nd paragraph\" ]\n  ]\n```", "```js\nnpm install create-elm-app -g\n```", "```js\ncreate-elm-app elm-fun\n```", "```js\nelm-app start\n```", "```js\nimport HTML exposing (..)\nimport HTML.Attributes exposing (class)\n\nimport HTML exposing (..)\n\nmain : HTML msg\nmain =\n  div [ ]\n  [ h1 [] [text \"Elm is fun!\" ]\n  , p [] [text \"Let's learn some more!\" ]\n  ]\n```", "```js\nnpm install -g elm\n```", "```js\nnpm install -g elm-oracle\n```", "```js\napm install atom-beautify\n```", "```js\napm install elm-format\n```", "```js\nmodule Main exposing (..)\nimport HTML exposing (HTML, text)\nmain =\ntext \"Hello, Elm!\"\n```", "```js\nelm-format .\\poorly-formatted-file.elm\n```", "```js\nThis cannot be undone! Make sure to back up these files before proceeding.\nAre you sure you want to overwrite these files with formatted versions? (y/n)\n```", "```js\napm install linter\n```", "```js\napm install linter-elm-make\n```", "```js\nC:\\Users\\PC\\.atom\\packages\n```", "```js\nNo elm-package.json beneath or above the edited file.\nYou can generate an 'elm-package.json' file by running elm-package install' from the command line.\n```", "```js\nelm-package install -y\n```", "```js\nmodule Main exposing (..)\nimport HTML exposing (HTML, text)\n\nmain =\n    text \"Hello, Elm!\"\n```"]