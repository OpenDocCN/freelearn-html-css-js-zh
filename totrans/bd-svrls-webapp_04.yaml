- en: Hosting the Website
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 托管网站
- en: The frontend is the easiest layer to go serverless. You just need a service
    to host your website's static files, and the user's browser will download the
    files, render the pages and execute the client-side JavaScript code. On AWS, the
    service we will use to host the frontend pages is Amazon S3\. In this chapter,
    you'll also learn how to configure and optimize your website by adding a CDN and
    the supporting HTTPS connections.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 前端是过渡到无服务器架构最容易的一层。您只需要一个服务来托管您网站的静态文件，用户的浏览器将下载文件，渲染页面并执行客户端JavaScript代码。在AWS上，我们将使用Amazon
    S3来托管前端页面。在本章中，您还将学习如何通过添加CDN和支持的HTTPS连接来配置和优化您的网站。
- en: 'In summary, we are going to cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，我们将涵盖以下主题：
- en: Using Amazon S3 to host static files
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Amazon S3托管静态文件
- en: Configuring Route 53 to associate your domain name with S3
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Route 53以将您的域名与S3关联
- en: Using CloudFront to serve files through a CDN
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CloudFront通过CDN提供文件服务
- en: Requesting a free SSL/TLS certificate to support HTTPS connections
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求免费的SSL/TLS证书以支持HTTPS连接
- en: After this chapter, you'll have learned how to host a frontend in a serverless
    infrastructure.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章之后，您将学会如何在无服务器基础设施中托管前端。
- en: Serving static files with Amazon S3
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Amazon S3提供静态文件服务
- en: Amazon S3 is extremely useful because it is a cheap service that provides high
    availability and scalability, requiring zero management effort. The infrastructure
    is fully managed by AWS. In this section, we are going to use S3 to host our website
    static files such as HTML, CSS, JavaScript, and images. You will see that this
    is done by uploading the files to a bucket and configuring S3 to enable website
    hosting.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon S3非常有用，因为它是一个提供高可用性和可扩展性且成本低的低成本服务，无需任何管理努力。基础设施完全由AWS管理。在本节中，我们将使用S3来托管我们的网站静态文件，如HTML、CSS、JavaScript和图像。您将看到这是通过将文件上传到存储桶并配置S3以启用网站托管来完成的。
- en: 'Besides hosting static websites, you can also host complex applications. You
    just need to have a clear separation of concerns: the *frontend* files (HTML/CSS/JavaScript)
    will be hosted on S3 and will be used by the browser to render the web page and
    request additional data to the *backend* code, which will be hosted and executed
    by Lambda functions. As we are going to discuss in [Chapter 5](6cb9ccdc-61f3-437d-81ac-d05ec652f1a4.xhtml),
    *Building the Frontend*, you can build your frontend as an SPA. This requires
    the browser to render the pages. Alternatively, you can use Lambda to serve server-side
    rendered pages.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 除了托管静态网站，您还可以托管复杂的应用程序。您只需要有一个清晰的关注点分离：*前端*文件（HTML/CSS/JavaScript）将托管在S3上，并由浏览器用于渲染网页并请求发送到*后端*代码的额外数据，该代码将由Lambda函数托管和执行。正如我们将在[第5章](6cb9ccdc-61f3-437d-81ac-d05ec652f1a4.xhtml)，“构建前端”中讨论的，您可以将前端构建为一个单页应用程序（SPA）。这需要浏览器来渲染页面。或者，您可以使用Lambda来提供服务器端渲染的页面。
- en: Creating a bucket
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建存储桶
- en: In [Chapter 2](246b3080-28af-4aa3-805f-5fbf9908caae.xhtml), *Getting Started
    with AWS*, we created a bucket using the CLI. In this section, we are going to
    use the Management Console to create another bucket so you can see the configuration
    options that S3 offers.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](246b3080-28af-4aa3-805f-5fbf9908caae.xhtml)，“AWS入门”中，我们使用CLI创建了一个存储桶。在本节中，我们将使用管理控制台创建另一个存储桶，以便您可以看到S3提供的配置选项。
- en: 'Let''s perform the following steps to create a bucket:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤来创建一个存储桶：
- en: 'The first step is to browse the S3 console at [https://console.aws.amazon.com/s3](https://console.aws.amazon.com/s3)
    and select the Create bucket option:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是浏览S3控制台[https://console.aws.amazon.com/s3](https://console.aws.amazon.com/s3)并选择创建存储桶选项：
- en: '![](img/86450c8f-e00a-47ba-aa93-9548792ddbc2.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/86450c8f-e00a-47ba-aa93-9548792ddbc2.png)'
- en: 'We are creating a new bucket to host the website. If you don''t have a domain
    name, you can still use S3 to host the website. You will have to access it from
    a URL in the following format: `http://my-bucket-name.com.s3-website-us-east-1.amazonaws.com`.
    If you have a domain name, such as `example.com`, you *must* set the bucket name
    with the same name as that of your domain, in this case, `example.com`. It is
    mandatory that you match the domain with the bucket name to allow Route 53 to
    make the association. As for the region, choose the one that is closer to your
    target audience:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在创建一个新的存储桶来托管网站。如果您没有域名，您仍然可以使用S3来托管网站。您将需要通过以下格式的URL访问它：`http://my-bucket-name.com.s3-website-us-east-1.amazonaws.com`。如果您有一个域名，例如`example.com`，您*必须*将存储桶名称设置为与您的域名相同的名称，在这种情况下，`example.com`。您必须匹配域名和存储桶名称，以便Route
    53能够建立关联。至于区域，请选择离您的目标受众更近的区域：
- en: '![](img/a6548e0d-5eaf-49f7-b6d0-c610f42eb0c1.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a6548e0d-5eaf-49f7-b6d0-c610f42eb0c1.png)'
- en: 'The Set properties screen allows you to add Versioning, Logging, and Tags.
    However, these are not required for our sample and can be skipped:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置属性屏幕允许您添加版本控制、日志记录和标签。然而，这些对于我们的示例不是必需的，可以跳过：
- en: '![](img/792064e4-3225-4161-8878-5cc8d907efe7.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/792064e4-3225-4161-8878-5cc8d907efe7.png)'
- en: 'In the Set permissions screen, under Manage public permissions, select the
    option Grant public read access to this bucket. Click on Next to continue:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置权限屏幕中，在管理公共权限下，选择授予此存储桶公共读取访问权限的选项。点击下一步继续：
- en: '![](img/b6960cda-2a9c-4eff-9322-b3370fc135a9.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b6960cda-2a9c-4eff-9322-b3370fc135a9.png)'
- en: Finish by reviewing the selected options and clicking on Create bucket.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过检查选定的选项并点击创建存储桶来完成：
- en: Enabling web hosting
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用网站托管
- en: 'To enable web hosting in this bucket, perform the following steps:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要在此存储桶中启用网站托管，请执行以下步骤：
- en: 'Click on your bucket name and select Properties from the second tab:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击您的存储桶名称，并从第二个标签中选择属性：
- en: '![](img/b84cd453-4265-4c91-84d1-c921b7ee3844.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b84cd453-4265-4c91-84d1-c921b7ee3844.png)'
- en: 'Inside the Static website hosting card, click on the Disabled button to enable
    the option:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在静态网站托管卡中，点击禁用按钮以启用选项：
- en: '![](img/016d1be0-ae61-4729-bea8-742939d11130.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/016d1be0-ae61-4729-bea8-742939d11130.png)'
- en: 'Now select the Use this bucket to host a website option and set Index document and
    Error document with the value `index.html`. Also, note that you can see the bucket''s
    Endpoint address in this image. It''s `http://example.com.s3-website-us-east-1.amazonaws.com`
    in this example. Write it down because you will need it later during testing and
    when you configure the CloudFront distribution:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在选择使用此存储桶托管网站选项，并将索引文档和错误文档的值设置为`index.html`。此外，请注意，您可以在这张图片中看到存储桶的端点地址。在这个例子中是`http://example.com.s3-website-us-east-1.amazonaws.com`。请记下来，因为您稍后在进行测试和配置CloudFront分发时需要它：
- en: '![](img/79c53ba3-307f-494d-9958-a454ff6b5e0b.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/79c53ba3-307f-494d-9958-a454ff6b5e0b.png)'
- en: Click on Save to finish this setting.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击保存以完成此设置。
- en: Handling errors
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理错误
- en: There are four common ways to handle errors using S3\. I will explain the options
    you have, but before I do that, let me define what I mean by "handling errors".
    When a user makes an HTTP request, S3 may fail to get the answer and it will return
    a status code to explain the failure. An HTTP 500 *Internal Server Error* could
    be a possible result, but it would be extremely rare and odd. However, S3 returning
    either a 404 *Not Found* or 403 *Forbidden* error is pretty common.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用S3处理错误有四种常见方式。我将解释您拥有的选项，但在这样做之前，让我定义一下我所说的“处理错误”是什么意思。当用户发起一个HTTP请求时，S3可能无法获取答案，并将返回一个状态码来解释失败。一个可能的HTTP
    500 *内部服务器错误*可能是一个结果，但它会非常罕见和奇怪。然而，S3返回404 *未找到*或403 *禁止*错误相当常见。
- en: 404 *Not Found* is an error that will be returned when the user browses your
    website for a page that does not exist. For example, if you have a page named
    `company.io/about` and the user incorrectly browses `company.io/abot`, S3 won't
    be able to find the `abot.html` file and will return a 404 error. Another example
    is when you use a JavaScript framework to create a **Single-Page Application**
    (**SPA**). Although your frontend code knows how to serve the `/about` page, the
    framework will not create a physical `about.html` file to upload to S3, and a
    404 error will be returned even when browsing `company.io/about`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 404 *未找到* 是当用户浏览您的网站寻找不存在的页面时返回的错误。例如，如果您有一个名为 `company.io/about` 的页面，而用户错误地浏览了
    `company.io/abot`，S3 将无法找到 `abot.html` 文件并返回 404 错误。另一个例子是当您使用 JavaScript 框架创建一个
    **单页应用（SPA**）时。尽管您的前端代码知道如何服务 `/about` 页面，但框架不会创建一个物理的 `about.html` 文件上传到 S3，即使浏览
    `company.io/about` 也会返回 404 错误。
- en: We are going to discuss SPA in [Chapter 5](6cb9ccdc-61f3-437d-81ac-d05ec652f1a4.xhtml),
    *Building the Frontend*. For the time being, note that an SPA can serve multiple
    pages, but there is only one complete HTML file, named `index.html` file.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在第 5 章 [构建前端](6cb9ccdc-61f3-437d-81ac-d05ec652f1a4.xhtml)中讨论单页应用（SPA）。目前，请注意，一个
    SPA 可以服务多个页面，但只有一个完整的 HTML 文件，名为 `index.html` 文件。
- en: 403 *Forbidden* is an error that happens when the bucket has restricted permissions.
    If the bucket doesn't allow access to *everyone* or there is a specific file with
    restricted access, the 403 error will be returned. In my opinion, I prefer to
    consider *all* the files within the bucket public. If there is a page that shouldn't
    be public, showing the HTML file should not be a problem. The objective is to
    protect the *data* and not the *layout*. Setting authorization and data visibility
    is something that needs to be handled on the server side, not the client side.
    Also, if there are static files that must remain private, such as photos, you
    can save them in another bucket instead of reusing the bucket that was created
    to host the website. These *photos* can be considered *data* and, likewise, need
    to be controlled by the backend with special care.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 403 *禁止访问* 是当存储桶有受限权限时发生的错误。如果存储桶不允许所有人访问，或者有特定的文件有受限访问权限，将返回 403 错误。在我看来，我更喜欢将存储桶中的所有文件都视为公开。如果有页面不应该公开，显示
    HTML 文件不应成问题。目标是保护 *数据* 而不是 *布局*。设置授权和数据可见性需要在服务器端处理，而不是客户端。此外，如果有必须保持私密的静态文件，例如照片，您可以将它们保存在另一个存储桶中，而不是重复使用创建来托管网站的存储桶。这些
    *照片* 可以被视为 *数据*，同样，需要由后端特别关注来控制。
- en: Considering that all the files of a bucket will remain public, and that we don't
    need not worry so much about strange S3 errors, the only problem that we need
    to handle now is 404 errors.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到存储桶中的所有文件都将保持公开，并且我们不必过于担心奇怪的 S3 错误，我们现在需要处理的唯一问题是 404 错误。
- en: Using redirection rules
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用重定向规则
- en: 'A very common approach to handle 404 errors for an SPA is to add a redirection
    rule in the Static website hosting page using the `ReplaceKeyPrefixWith` option:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 处理单页应用（SPA）的 404 错误的一个非常常见的方法是在静态网站托管页面中使用 `ReplaceKeyPrefixWith` 选项添加重定向规则：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: With this solution, when the user browses `company.io/about`, the address will
    be replaced by `company.io/#!/about` and the `index.html` file will be returned.
    If you have an SPA, it can identify which page needs to be displayed and render
    it correctly. If the page doesn't exist, it will be able to render a generic 404
    page. Also, you can configure HTML5's pushState to remove the hashbang sign (`#!`)
    after the page loads, but it will make the page to blink.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此解决方案，当用户浏览 `company.io/about` 时，地址将被替换为 `company.io/#!/about`，并返回 `index.html`
    文件。如果您有一个单页应用（SPA），它能够识别需要显示的页面并正确渲染。如果页面不存在，它将能够渲染一个通用的 404 页面。此外，您还可以配置 HTML5
    的 pushState 在页面加载后移除哈希符号（`#!`），但这会使页面闪烁。
- en: The drawback of this approach is that you need to choose between a polluted
    URL with `#!` or experience the page blinking when it is loaded.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的缺点是您需要在带有 `#!` 的污染 URL 和页面加载时页面闪烁之间做出选择。
- en: Using an error document
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用错误文档
- en: Instead of setting a redirection rule, you can set an error document with `index.html`.
    This is the easiest solution for SPAs. When the user requests an `/about` page
    that doesn't have a physical `about.html` file to match, the `index.html` file
    is loaded and the SPA reads the address and understands that it needs to serve
    the contents of the `/about` page.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以设置一个带有`index.html`的错误文档，而不是设置重定向规则。这是SPAs的最简单解决方案。当用户请求一个没有物理`about.html`文件匹配的`/about`页面时，将加载`index.html`文件，SPA读取地址并理解它需要提供`/about`页面的内容。
- en: This configuration is what we have done in the previous image and it works pretty
    well without polluting the URL address with `#!` and without blinking the page
    when loading. However, search engines may refuse to index your website because,
    when browsing the `/about` page, the result's `body` message will be set using
    the correct page, but the `status code` will still be set as 404\. If the Google
    crawler sees a 404 error, it will understand that the page doesn't exist and the
    page content is probably a generic error page.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们在上一张图片中做的配置，它工作得相当好，没有在URL地址中污染`#!`，也没有在加载时使页面闪烁。然而，搜索引擎可能会拒绝索引你的网站，因为当浏览`/about`页面时，结果的`body`消息将使用正确的页面设置，但`status
    code`仍然设置为404。如果谷歌爬虫看到404错误，它将理解页面不存在，页面内容可能是一个通用的错误页面。
- en: Delegating to CloudFront
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 委派给CloudFront
- en: You can set the error document to `index.html`, as in the previous solution,
    but using CloudFront instead of S3\. CloudFront provides a *custom error response*
    setting that allows you to change the status code of the `response` object. In
    this case, we can configure CloudFront to act on 404 errors, returning S3's `index.html`
    file and modifying the `status code` to `200 *OK*` instead of returning 404.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将错误文档设置为`index.html`，就像之前的解决方案一样，但使用CloudFront而不是S3。CloudFront提供了一个*自定义错误响应*设置，允许你更改`response`对象的`status
    code`。在这种情况下，我们可以配置CloudFront在404错误上操作，返回S3的`index.html`文件，并将`status code`修改为`200
    *OK*`而不是返回404。
- en: If you opt for this, the problem is that you will return status code 200 even
    for pages that doesn't exist.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择这样做，问题是你将返回状态码200，即使对于不存在的页面。
- en: Prerendering pages
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预渲染页面
- en: Another issue with the other solutions is that **Search Engine Optimization**
    (**SEO**) is not considered, because they require JavaScript to be enabled in
    the browser to render the correct page. Since most web crawlers can't execute
    JavaScript code, they will not be able to index the webpage. This problem is solved
    with prerendering.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 其他解决方案的另一个问题是**搜索引擎优化**（**SEO**）没有被考虑，因为它们需要在浏览器中启用JavaScript才能渲染正确的页面。由于大多数网络爬虫无法执行JavaScript代码，它们将无法索引网页。这个问题通过预渲染得到了解决。
- en: In the next chapter, you are going to learn how you can prerender pages. This
    technique creates physical pages for SPA routes. For example, in an SPA, the `/about`
    page doesn't have an `about.html` file, but with prerendering, you will be able
    to create it.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何预渲染页面。这项技术为SPA路由创建物理页面。例如，在一个SPA中，`/about`页面没有`about.html`文件，但通过预渲染，你将能够创建它。
- en: When you prerender all the possible pages and upload the files to S3, there
    will be no need to worry about 404 errors. If the page exist, S3 will find an
    HTML file for it. We still need to configure the error document to `index.html` to
    handle pages that doesn't exist, but we don't need to configure CloudFront to
    force the status code 200.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当你预渲染所有可能的页面并将文件上传到S3时，就无需担心404错误。如果页面存在，S3将找到它的HTML文件。我们仍然需要将错误文档配置为`index.html`来处理不存在的页面，但我们不需要配置CloudFront强制状态码200。
- en: Supporting www anchors
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支持www锚点
- en: A domain name without the **www** anchor text is usually referred to as a *naked*
    domain. For instance, `www.example.com` is a domain with the www anchor and `example.com`
    is a naked domain. The *canonical* URL is the option that you choose as the main
    address.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 没有www锚文本的域名通常被称为*裸域名*。例如，`www.example.com`是一个带有www锚点的域名，而`example.com`是一个裸域名。*规范URL*是你选择作为主要地址的选项。
- en: There are pros and cons that you'll need to consider when deciding which address
    should be your website's main one. One issue with using naked domains is that
    if your site has cookies, then placing static files in a subdomain, such as `static.example.com`,
    will not be optimized because each browser request for static files will automatically
    send cookies that were created for `example.com`. If your login happens at `www.example.com`,
    you can place static content inside `static.example.com` without worrying about
    cookies.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在决定哪个地址应该是你的网站主地址时，你需要考虑利弊。使用裸域名的一个问题是你如果网站有cookies，那么将静态文件放在子域名中，例如`static.example.com`，将不会得到优化，因为每个浏览器对静态文件的请求都会自动发送为`example.com`创建的cookies。如果你的登录发生在`www.example.com`，你可以在`static.example.com`内部放置静态内容，而不必担心cookies。
- en: This issue can be mitigated by creating another domain or using a CDN to retrieve
    the static files. Despite this, the current trend is to drop the www anchor. It
    looks more modern to brand your tech company as `company.io` than it does using
    the old `www.company.com` format.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创建另一个域名或使用CDN来检索静态文件可以减轻这个问题。尽管如此，当前的潮流是放弃www锚点。将你的科技公司品牌化为`company.io`看起来比使用旧的`www.company.com`格式更现代。
- en: 'Choose your main address, but support both formats. Some people are used to
    adding www to the address and some of them may forget to include it. In the previous
    example, we created a domain without the www address. Now we are going to create
    another bucket, in the `www.example.com` format, and set the Static website hosting
    configuration with the Redirect requests option to target the address without
    www:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 选择你的主要地址，但支持两种格式。有些人习惯于在地址中添加www，而有些人可能会忘记包含它。在先前的例子中，我们创建了一个没有www地址的域名。现在我们将创建另一个以`www.example.com`格式的存储桶，并设置静态网站托管配置，将重定向请求选项设置为指向没有www的地址：
- en: '![](img/56f84f40-75d7-43b2-8448-22d3e5822a26.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/56f84f40-75d7-43b2-8448-22d3e5822a26.png)'
- en: Uploading static files
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上传静态文件
- en: 'Uploading is pretty straightforward. Let''s perform the following steps to
    upload static files:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 上传操作相当直接。让我们执行以下步骤来上传静态文件：
- en: 'First, create a very simple `index.html` file for testing purposes:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，为了测试目的，创建一个非常简单的`index.html`文件：
- en: '[PRE1]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When you click on the main bucket name, an Upload button will be made available.
    Click on it:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你点击主存储桶名称时，会出现一个上传按钮。点击它：
- en: '![](img/5001da1d-cb8d-4bac-b7a7-9053555a0886.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5001da1d-cb8d-4bac-b7a7-9053555a0886.png)'
- en: 'The next screen is simple. Click on Add files, select the `index.html` file,
    and continue by clicking on Next:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一屏幕很简单。点击添加文件，选择`index.html`文件，然后通过点击下一步继续：
- en: '![](img/c04237b1-2b72-4ca1-abd2-f850d72ae508.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c04237b1-2b72-4ca1-abd2-f850d72ae508.png)'
- en: 'At the Set permissions step, under Manage public permissions, select the option
    Grant public read access to this object(s):'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置权限步骤中，在管理公共权限下，选择授予此对象（s）公共读取访问权限的选项：
- en: '![](img/288cd06e-1f6c-47ae-bc94-9caafa7e11ca.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/288cd06e-1f6c-47ae-bc94-9caafa7e11ca.png)'
- en: 'At the Set properties step, keep the default option for Storage class as Standard
    because files will be frequently accessed. Also, set Encryption to None because
    all the files will be publicly available, and therefore, adding an extra layer
    of security is not necessary and will only slow down your responses. As for the
    Metadata fields, you don''t need to set them:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置属性步骤中，保持存储类为默认选项标准，因为文件会被频繁访问。同时，将加密设置为无，因为所有文件都将公开可用，因此，添加额外的安全层是不必要的，并且只会减慢你的响应速度。至于元数据字段，你不需要设置它们：
- en: '![](img/a8e62c85-9cd0-4528-a022-579309c94e4d.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a8e62c85-9cd0-4528-a022-579309c94e4d.png)'
- en: Finally, review the options and confirm by clicking on Upload.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，检查选项，并通过点击上传来确认。
- en: Now you can check whether it is working by browsing the bucket's endpoint, for
    example, `http://example.com.s3-website-us-east-1.amazonaws.com`.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以通过浏览存储桶的端点来检查它是否工作，例如，`http://example.com.s3-website-us-east-1.amazonaws.com`。
- en: If it doesn't work on the first try, clear your browser cache and try again
    because when you test the endpoint before uploading a file, the browser may cache
    the information indicating that the link is invalid. This may avoid further requests
    for a short time.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果第一次尝试不成功，请清除浏览器缓存并再次尝试，因为在你上传文件之前测试端点时，浏览器可能会缓存表示链接无效的信息。这可能会避免短时间内进一步的请求。
- en: Automating website publishing
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化网站发布
- en: We have gone through the necessary steps to upload our site's frontend using
    the S3 console. It's easy and fast, but it's also pretty easy to automate this
    task. If you haven't configured the AWS CLI, as instructed in [Chapter 2](246b3080-28af-4aa3-805f-5fbf9908caae.xhtml),
    *Getting Started with AWS*, do so now and see how useful it is to automate the
    uploading of files. In fact, what we are going to do is synchronize the bucket
    contents with a local folder. The CLI will upload only the modified files, which
    will make the upload much faster in future when your site grows.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经通过S3控制台完成了上传我们网站前端所需的步骤。这既简单又快捷，但也很容易自动化这个任务。如果你还没有按照[第2章](246b3080-28af-4aa3-805f-5fbf9908caae.xhtml)《AWS入门》中的说明配置AWS
    CLI，请现在就配置它，看看自动化文件上传有多有用。实际上，我们要做的是将存储桶内容与本地文件夹同步。CLI只会上传已修改的文件，这将在你的网站未来增长时使上传速度大大加快。
- en: 'You can execute the following command to upload your files:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令上传你的文件：
- en: '[PRE2]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Serving gzip files
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器端gzip文件
- en: The gzip file format is a standard format used on the Web to compress files
    and improve the download speed by reducing the transferred file sizes. It can
    lower the bandwidth costs for you and for your users by providing smaller files.
    This approach has a huge impact on the perceived performance when loading the
    website.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: gzip文件格式是Web上用于压缩文件并通过减少传输文件大小来提高下载速度的标准格式。它可以通过提供更小的文件来降低你和你用户的带宽成本。这种方法对加载网站时的感知性能有巨大影响。
- en: 'It is currently supported by every major browser. By default, for every request,
    the browser will add an `Accept-Encoding: gzip` header. If the server supports
    gzip, the file is sent in compressed form.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '它目前被每个主要浏览器支持。默认情况下，对于每个请求，浏览器都会添加一个`Accept-Encoding: gzip`头。如果服务器支持gzip，则文件将以压缩形式发送。'
- en: 'The following diagram shows an HTTP request without gzip support:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了没有gzip支持的HTTP请求：
- en: '![](img/26db65cb-1b15-4635-a7ec-9b5e434a5ea4.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/26db65cb-1b15-4635-a7ec-9b5e434a5ea4.png)'
- en: 'The following diagram shows how much bandwidth you can save with gzip. The
    compressed response is usually 10 times smaller:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了使用gzip可以节省多少带宽。压缩后的响应通常比未压缩的文件小10倍：
- en: '![](img/f75fb39d-f681-4660-a8e2-be1e28310e6b.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f75fb39d-f681-4660-a8e2-be1e28310e6b.png)'
- en: With this format, the server needs CPU time to compress the file and the user's
    browser needs CPU cycles to decompress the same file. However, with modern CPUs,
    the time to compress/decompress is much lower than the extra time taken to send
    the uncompressed file through the network. Even with low-end mobile devices, the
    CPU is much faster than the mobile network.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种格式，服务器需要CPU时间来压缩文件，用户的浏览器需要CPU周期来解压缩相同的文件。然而，随着现代CPU的发展，压缩/解压缩所需的时间远低于通过网络发送未压缩文件所花费的额外时间。即使对于低端移动设备，CPU的速度也比移动网络快得多。
- en: However, there is a problem. Since we don't have server-side processing with
    Amazon S3, there is no option to natively compress files in response to requests.
    You need to compress them locally before uploading the files and setting the metadata
    to identify `Content-Encoding` as `gzip`. Thankfully, you can skip the trouble
    of including this step in the deployment workflow if you use CloudFront. As we
    are going to see later, CloudFront has an option to automatically compress all
    your files with gzip.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一个问题。由于我们没有在Amazon S3上进行服务器端处理，因此没有选项可以原生地根据请求压缩文件。你需要在上传文件并设置元数据以标识`Content-Encoding`为`gzip`之前本地压缩它们。幸运的是，如果你使用CloudFront，你可以跳过在部署工作流程中包含此步骤的麻烦。正如我们稍后将要看到的，CloudFront有一个选项可以自动使用gzip压缩所有文件。
- en: Setting up Route 53
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Route 53
- en: 'Route 53 is a DNS management service. You don''t need to use it if you want
    to expose subdomains, such as `www.example.com`, however, it is indeed obligatory
    if you want to serve your website data under a naked domain, such as `example.com`,
    hosted on S3 or CloudFront. This is due to the RFC rule: you can''t have a CNAME
    record for your domain root, it must be an A record.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Route 53是一个DNS管理服务。如果你想要暴露子域名，例如`www.example.com`，则不需要使用它，但是如果你想在S3或CloudFront上托管裸域名，例如`example.com`，则确实有必要使用它。这是由于RFC规则：你的域名根不能有CNAME记录，它必须是A记录。
- en: What's the difference? CNAME and A records are both record types that help the
    DNS system to translate a domain name into an IP address. While CNAME references
    another domain, an A record references an IP address.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 有什么区别？CNAME和A记录都是帮助DNS系统将域名转换为IP地址的记录类型。虽然CNAME引用另一个域名，但A记录引用一个IP地址。
- en: So, if you don't want to use Route 53, you can use your own domain management
    system, such as GoDaddy, to add a CNAME that will map your `www.example.com` domain
    to an S3 endpoint, for example, `www.example.com.s3-website-us-east-1.amazonaws.com`.
    This configuration works fine, but you can't do the same for `example.com` because
    the IP address of the `example.com.s3-website-us-east-1.amazonaws.com` endpoint
    changes frequently and your third-party domain controller (GoDaddy, in this example)
    won't follow the changes.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您不想使用Route 53，您可以使用自己的域名管理系统，例如GoDaddy，添加一个CNAME，将您的`www.example.com`域名映射到S3端点，例如，`www.example.com.s3-website-us-east-1.amazonaws.com`。这种配置效果良好，但您不能对`example.com`做同样的操作，因为`example.com.s3-website-us-east-1.amazonaws.com`端点的IP地址会频繁变化，而您的第三方域名控制器（例如本例中的GoDaddy）不会跟随这些变化。
- en: In this case, you need to use Route 53 because it will allow an A record to
    be created referencing your S3 bucket endpoint, such as `example.com.s3-website-us-east-1.amazonaws.com`.
    You just need to say that this endpoint is an alias and Route 53 will be able
    to track the correct IP address to answer DNS queries.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，您需要使用Route 53，因为它将允许创建一个引用您的S3桶端点的A记录，例如`example.com.s3-website-us-east-1.amazonaws.com`。您只需说明此端点是别名，Route
    53就能跟踪正确的IP地址以回答DNS查询。
- en: Creating a hosted zone
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建托管区域
- en: If you register your domain address with Amazon, a hosted zone will be automatically
    created. If you register your domain with another vendor, you will need to create
    a new hosted zone.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在亚马逊注册了您的域名地址，托管区域将自动创建。如果您在其他供应商处注册了您的域名，您将需要创建一个新的托管区域。
- en: A hosted zone allows you to configure your domain's DNS settings. You can set
    where your naked domain and subdomains are hosted and configure other parameters,
    for example, a *mail exchange* record set.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 托管区域允许您配置您域的DNS设置。您可以设置您的裸域名和子域名托管在哪里，并配置其他参数，例如，一个*邮件交换*记录集。
- en: 'To create a hosted zone, perform the following steps:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建托管区域，请执行以下步骤：
- en: Browse the Route 53 Management Console at [https://console.aws.amazon.com/route53](https://console.aws.amazon.com/route53).
    You will see a welcome screen, click on Get started now.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览Route 53管理控制台[https://console.aws.amazon.com/route53](https://console.aws.amazon.com/route53)。您将看到一个欢迎屏幕，点击立即开始。
- en: 'In the next screen, click on Hosted zones in the left menu, followed by the
    Create Hosted Zone button:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一屏幕中，点击左侧菜单中的托管区域，然后点击创建托管区域按钮：
- en: '![](img/37c1fb06-d764-4ba5-b6d7-f4bc5f9cf683.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/37c1fb06-d764-4ba5-b6d7-f4bc5f9cf683.png)'
- en: 'Type the domain name and confirm:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入域名并确认：
- en: '![](img/255f2be9-668e-4bc4-9501-41b892dbb95f.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/255f2be9-668e-4bc4-9501-41b892dbb95f.png)'
- en: 'A hosted zone will be created with two record types, namely `NS` (Name Server)
    and `SOA` (Start Of Authority):'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将创建一个托管区域，包含两种记录类型，即`NS`（名称服务器）和`SOA`（权威开始）：
- en: '![](img/4fae923e-91c6-44ce-afdc-66a86fa97e7a.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4fae923e-91c6-44ce-afdc-66a86fa97e7a.png)'
- en: If you have registered your domain with another vendor, you must transfer the
    DNS management to Route 53\. This is done by changing your domain registrar Name
    Servers (NS records) to Amazon's Name Servers.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您已在其他供应商处注册了您的域名，您必须将DNS管理转移到Route 53。这是通过更改您的域名注册商名称服务器（NS记录）到亚马逊的名称服务器来完成的。
- en: Your registrar may offer a control panel for your domain with an option such
    as Manage DNS. Find where the Name Servers are located and edit them to use Amazon's
    servers.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的注册商可能为您提供的域名控制面板中有一个选项，如管理DNS。找到名称服务器所在的位置，并编辑它们以使用亚马逊的服务器。
- en: Creating record sets
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建记录集
- en: 'Now let''s create two record sets such as one for `example.com` and another
    for `www.example.com`. Do this by performing the following steps:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建两个记录集，例如一个用于`example.com`，另一个用于`www.example.com`。通过以下步骤执行此操作：
- en: 'Click on Create Record Set:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建记录集：
- en: '![](img/9e8c92d3-2af7-4023-b17a-4b2a60484f00.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9e8c92d3-2af7-4023-b17a-4b2a60484f00.png)'
- en: 'In the first record, set the following parameters:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一条记录中，设置以下参数：
- en: 'Name: Leave this field empty'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称：留空此字段
- en: 'Type: In this field, select A - IPv4 address'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型：在此字段中，选择A - IPv4地址
- en: 'Alias: Check this field with Yes'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 别名：选中此字段
- en: 'Alias Target: This field is a drop-down list where you can select the S3 endpoint
    of your bucket:'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 别名目标：此字段是一个下拉列表，您可以在其中选择您的存储桶的S3端点：
- en: '![](img/33fcd17e-73ea-48d1-a315-7a06dcfcc885.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/33fcd17e-73ea-48d1-a315-7a06dcfcc885.png)'
- en: 'Create another record set. This time, use the following parameter values:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个记录集。这次，使用以下参数值：
- en: 'Name: Set this field as `www`'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称：将此字段设置为`www`
- en: 'Type: In this field select CNAME - Canonical name'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型：在此字段中选择CNAME - 规范名称
- en: 'Alias: Check this field with No'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 别名：不选中此字段
- en: 'Value: Fill this field input with the S3 bucket''s endpoint:'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 值：将此字段输入框填写为S3存储桶的端点：
- en: '![](img/1166f2ae-aba1-4e06-8bc8-ffe94aed0db3.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1166f2ae-aba1-4e06-8bc8-ffe94aed0db3.png)'
- en: Now test your domain name by typing it in your browser address. You will see
    the `index.html` file that you have uploaded to the S3 bucket.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在通过在浏览器地址栏中输入您的域名来测试您的域名。您将看到您已上传到S3存储桶的`index.html`文件。
- en: If you have transferred DNS control from another vendor to AWS, then because
    of DNS caching, you may need to wait for some minutes or even hours before the
    transfer completes. You will only be able to see the files that were hosted on
    Amazon S3 after the transfer finishes.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已将DNS控制权从其他供应商转移到AWS，那么由于DNS缓存，您可能需要等待几分钟甚至几小时才能完成转移。只有在转移完成后，您才能看到托管在Amazon
    S3上的文件。
- en: Setting up CloudFront
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置CloudFront
- en: CloudFront serves static files as a **Content Delivery Network** (**CDN**).
    Having file copies next to your users reduces latency and improves your perceived
    website speed. Another feature, which we will discuss later, is support for HTTPS
    requests.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: CloudFront作为**内容分发网络**（**CDN**）提供静态文件。在用户附近保留文件副本可以减少延迟并提高您感知的网站速度。另一个我们将在后面讨论的功能是支持HTTPS请求。
- en: In the next sections, we will create a CloudFront distribution and adjust the
    Route 53 settings to use CloudFront instead of the S3 bucket.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将创建一个CloudFront分发并调整Route 53设置以使用CloudFront而不是S3存储桶。
- en: Creating a distribution
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建分发
- en: A CloudFront distribution is what makes it possible to associate a DNS configuration
    (Route 53) with CloudFront to distribute static content. A distribution needs
    an origin server to know where the files are stored. In our case, the origin will
    be the S3 bucket that was previously configured.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: CloudFront分发使得将DNS配置（Route 53）与CloudFront关联起来以分发静态内容成为可能。分发需要一个源服务器来知道文件存储的位置。在我们的案例中，源将是之前配置的S3存储桶。
- en: 'Let''s perform the following steps to create a CloudFront distribution:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤来创建CloudFront分发：
- en: 'Browse the CloudFront Management Console at [https://console.aws.amazon.com/cloudfront](https://console.aws.amazon.com/cloudfront)
    and click on Create Distribution:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览[https://console.aws.amazon.com/cloudfront](https://console.aws.amazon.com/cloudfront)的CloudFront管理控制台并点击创建分发：
- en: '![](img/44d8951c-f0ee-468a-a555-45287b7bdb1b.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/44d8951c-f0ee-468a-a555-45287b7bdb1b.png)'
- en: 'The next step is to select the distribution type. For our website, select Get
    Started under the Web option:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是选择分发类型。对于我们的网站，在Web选项下选择入门：
- en: '![](img/497cc3b0-36e5-440c-9181-5dc7903d4844.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/497cc3b0-36e5-440c-9181-5dc7903d4844.png)'
- en: The next screen is a big form that we need to fill out. In the first fieldset,
    Origin Settings, the Origin Domain Name option will provide a drop-down list of
    S3 endpoints.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一屏是一个需要我们填写的大表单。在第一个字段集中，源设置，源域名选项将提供一个S3端点的下拉列表。
- en: You should not use the endpoints provided here because some S3 configurations,
    such as redirects or error messages, won't be available when using this address.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您不应使用此处提供的端点，因为在使用此地址时，某些S3配置，如重定向或错误消息，将不可用。
- en: 'Instead, use the endpoint that is available in the bucket properties inside
    the Static Website Hosting settings. The difference between these S3 endpoints
    is that the suggested endpoint doesn''t have the bucket region (for example, `example.com.s3.amazonaws.com`)
    and the endpoint that we will use does have the region (for example, `example.com.s3-website-us-east-1.amazonaws.com`).
    Origin ID will be set automatically after you provide Origin Domain Name. Leave
    Origin Path and Origin Custom Headers empty:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，请在静态网站托管设置中的存储桶属性中使用的端点。这些S3端点之间的区别在于建议的端点没有存储桶区域（例如，`example.com.s3.amazonaws.com`），而我们将要使用的端点确实有区域（例如，`example.com.s3-website-us-east-1.amazonaws.com`）。在您提供源域名后，源ID将自动设置。请将源路径和源自定义头留空：
- en: '![](img/bb6b5c32-c102-4a52-a760-87c071d2dd65.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bb6b5c32-c102-4a52-a760-87c071d2dd65.png)'
- en: 'In Default Cache Behavior Settings, set the following parameters:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在默认缓存行为设置中，设置以下参数：
- en: Viewer Protocol Policy as HTTP and HTTPS
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 观众协议策略为HTTP和HTTPS
- en: Allowed HTTP Methods as all the HTTP verb options
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许的HTTP方法为所有HTTP动词选项
- en: Cached HTTP Methods with OPTIONS checked
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存的HTTP方法 带有 OPTIONS选中
- en: Object Caching as Use Origin Cache Headers
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以使用源缓存头作为对象缓存
- en: '![](img/5da573aa-b0a2-416e-92ad-ab699a02b9c2.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5da573aa-b0a2-416e-92ad-ab699a02b9c2.png)'
- en: 'Leave the rest of the fields in this section with their default values, except
    the Compress Objects Automatically option. This feature is used to compress the
    files on demand using gzip. As already discussed in this chapter, Amazon S3 doesn''t
    offer automatic compression, but CloudFront does. You just need to set the Yes
    option:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将本节中其余字段保留为默认值，除了自动压缩对象选项。此功能用于按需使用gzip压缩文件。正如本章已讨论的，Amazon S3不提供自动压缩，但CloudFront提供。你只需要设置“是”选项：
- en: '![](img/833ee269-532e-4313-be9e-b7a8b4d12c72.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/833ee269-532e-4313-be9e-b7a8b4d12c72.png)'
- en: 'In Distribution Settings, set the following parameters:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在分布设置中，设置以下参数：
- en: Set Price Class with the option based on your target audience and the costs
    that you are willing to pay (better performance means higher costs).
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据你的目标受众和愿意承担的成本（更好的性能意味着更高的成本）设置价格类别。
- en: Set Alternate Domain Names (CNAMEs) with the naked domain and the www domain,
    separated by commas.
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用裸域名和www域名设置替代域名（CNAMEs），域名之间用逗号分隔。
- en: In SSL Certificate, choose Default CloudFront Certificate (*.cloudfront.net).
    We will return to this option later once we issue our own certificate.
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在SSL证书中，选择默认的CloudFront证书（*.cloudfront.net）。一旦我们颁发自己的证书，我们将回到这个选项。
- en: Leave the rest of the fields with their default values.
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将其余字段保留为默认值。
- en: '![](img/38ebfe3e-0c14-4eae-b282-5f93e8870e13.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/38ebfe3e-0c14-4eae-b282-5f93e8870e13.png)'
- en: Now click on Create Distribution.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在点击创建分布。
- en: 'CloudFront needs a few minutes to replicate the distribution configuration
    between all the edge points, but you can follow the status in the CloudFront console
    main page. After it finishes, it will display the status as Deployed. In the following
    screenshot, you can see the CloudFront distribution address. Copy this link to
    your browser and test to check whether it is working:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CloudFront需要在几分钟内将分布配置复制到所有边缘点之间，但你可以在CloudFront控制台主页面中跟踪状态。完成后，它将显示状态为已部署。在下面的屏幕截图中，你可以看到CloudFront分布地址。将此链接复制到浏览器中并测试以检查它是否正常工作：
- en: '![](img/8dc3ce93-3830-4bed-90f7-a4f3fb61f141.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8dc3ce93-3830-4bed-90f7-a4f3fb61f141.png)'
- en: Handling CloudFront caching
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理CloudFront缓存
- en: 'By default, CloudFront will cache all the files for 24 hours. It means that
    if you modify the files in your S3 bucket, you won''t see any changes when browsing
    through a CloudFront distribution. Forcing a cache reset in your browser will
    not help because it''s server-side caching. So, what''s the recommended practice
    to handle caching? You have the following two options for this:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，CloudFront将缓存所有文件24小时。这意味着如果你修改了S3存储桶中的文件，你通过CloudFront分布浏览时将看不到任何变化。强制在浏览器中重置缓存不会有所帮助，因为它是服务器端缓存。那么，处理缓存的推荐做法是什么？你有以下两种选择：
- en: '**Server side**: Create a cache invalidation request'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**服务器端**：创建缓存失效请求'
- en: '**Client side**: Add suffixes to all the static files when changing their contents'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**客户端**：在更改静态文件内容时给所有文件添加后缀'
- en: Invalidating server-side cache
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使服务器端缓存失效
- en: Creating a cache invalidation request to CloudFront takes some minutes to process
    because CloudFront will need to contact all the edge locations and request them
    to clear their individual caches.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 向CloudFront创建缓存失效请求需要一些时间来处理，因为CloudFront需要联系所有边缘位置并请求它们清除各自的缓存。
- en: 'Since this will be a recurring task, I don''t recommend that you use the CloudFront
    console. It''s better to use the CLI. However, CLI support for CloudFront is currently
    only available at the preview stage. So you may need to enable it by running the
    following command:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这将是一个重复的任务，我不建议你使用CloudFront控制台。使用CLI更好。然而，目前CloudFront的CLI支持仅处于预览阶段。因此，你可能需要通过运行以下命令来启用它：
- en: '[PRE3]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To create a cache invalidation request for all files (path `/*`), execute the
    following command:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 要为所有文件（路径 `/*`）创建缓存失效请求，执行以下命令：
- en: '[PRE4]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can find `DISTRIBUTION_ID` of your CloudFront distribution by looking at
    the CloudFront console or running the following CLI command:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过查看CloudFront控制台或运行以下CLI命令来找到你的CloudFront分布的`DISTRIBUTION_ID`：
- en: '[PRE5]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can add `--query DistributionList.Items[0].Id` to the previous command in
    order to only output the distribution ID of the first distribution.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将 `--query DistributionList.Items[0].Id` 添加到之前的命令中，以便只输出第一个分布的分布ID。
- en: This solution requires a long time for the invalidation to take effect, and
    it doesn't solve the problem of client-side caching.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这种解决方案需要很长时间才能使失效生效，并且它不能解决客户端缓存的问题。
- en: Invalidating client-side cache
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使客户端缓存失效
- en: 'When you browse a web page, the browser will cache all the files that were
    downloaded to display the page (HTML, CSS, JavaScript, images, and so on) and
    avoid requiring the same files in the near future to improve performance. However,
    if you modify the contents of one file, how can you tell the browser to dispose
    of the previous cached content? You can''t create an invalidation request because
    this time the cache is at the client side, not server side, but you can force
    the browser to make a new request by changing the name of the file that has been
    modified. For example, you can change the file name from `script.js` to `script.v2.js`
    and use its new name inside the HTML page:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 当您浏览网页时，浏览器会缓存所有下载以显示页面（HTML、CSS、JavaScript、图片等）的文件，以避免在不久的将来需要相同的文件来提高性能。然而，如果您修改了一个文件的
    内容，您如何告诉浏览器丢弃之前的缓存内容呢？您不能创建一个失效请求，因为这次缓存是在客户端，而不是服务器端，但您可以通过更改已修改文件的名称来强制浏览器发出新的请求。例如，您可以将文件名从`script.js`更改为`script.v2.js`，并在HTML页面中使用其新名称：
- en: '[PRE6]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Another option is to add a query string to the filename when declaring it inside
    the HTML page, such as the following:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选项是在HTML页面内部声明文件名时添加查询字符串，如下所示：
- en: '[PRE7]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this example, the filename was not changed, but the reference was changed,
    and this is enough for the browser to consider the previous cache invalid and
    make a new request to get the updated content.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，文件名没有更改，但引用已更改，这对浏览器来说已经足够，使其认为之前的缓存已失效，并发出新的请求以获取更新的内容。
- en: The problem of both strategies is that you can't cache the HTML page. All other
    data can be cached, except the HTML page. Otherwise, the client will not understand
    that it should download a newer version of a file dependency.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种策略的问题在于您无法缓存HTML页面。除了HTML页面外，所有其他数据都可以被缓存。否则，客户端将不会理解它应该下载文件依赖项的新版本。
- en: 'To upload HTML files in such a way that they will never be cached, you must
    set the `Cache-Control` header to `no-cache` when uploading the files. In our
    website, after syncing a local folder with your bucket, upload the `index.html`
    file again, but this time, use the `cp` (copy) command and add the `Cache-Control`
    header:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 为了上传HTML文件，使其永远不会被缓存，您必须在上传文件时将`Cache-Control`头设置为`no-cache`。在我们的网站上，在将本地文件夹与存储桶同步后，再次上传`index.html`文件，但这次，使用`cp`（复制）命令并添加`Cache-Control`头：
- en: '[PRE8]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This strategy works pretty well, but it requires you to automate your build
    process to change the filenames or query string parameters for all changed files.
    In the next chapter, we are going to build a React app using the "Create React
    App" tool. Thankfully, this tool is already configured to change the filenames
    of all the deployments. It adds random strings, as in the `main.12657c03.js` file.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这种策略效果相当不错，但它要求您自动化构建过程，以更改所有更改文件的文件名或查询字符串参数。在下一章中，我们将使用“Create React App”工具构建一个React应用。幸运的是，这个工具已经配置好了，会更改所有部署的文件名。它添加了随机字符串，例如在`main.12657c03.js`文件中。
- en: Updating Route 53 to use CloudFront
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Route 53更新为使用CloudFront
- en: Our current record sets use S3 buckets. You just need to go back to Route 53
    and replace it with the new CloudFront distribution. For the naked domain, which
    uses the A record type, you need to select the Alias option as Yes and the CloudFront
    distribution in the drop-down menu.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当前的记录集使用S3存储桶。您只需回到Route 53，将其替换为新的CloudFront分发即可。对于使用A记录类型的裸域名，您需要在下拉菜单中选择别名选项为是，并选择CloudFront分发。
- en: For the `www` domain, which uses the CNAME record type, select the Alias option
    as No. In this case, copy the CloudFront distribution address available in the
    A record and paste it into the box of the CNAME record.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用CNAME记录类型的`www`域名，选择别名选项为否。在这种情况下，复制A记录中可用的CloudFront分发地址，并将其粘贴到CNAME记录的框中。
- en: Supporting HTTPS
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支持HTTPS
- en: Unfortunately, Amazon S3 does not support HTTPS connections, it only supports
    HTTP. We have set the Route 53 record sets to use a CloudFront distribution, but
    we haven't enabled support to HTTPS in CloudFront yet.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，Amazon S3不支持HTTPS连接，它只支持HTTP。我们已经将Route 53记录集设置为使用CloudFront分发，但我们还没有在CloudFront中启用HTTPS支持。
- en: 'But why should we support HTTPS? There are many reasons nowadays. Let''s list
    some of them:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 但为什么我们应该支持HTTPS呢？现在有很多原因。让我们列举一些：
- en: We are building an online store. We need to handle logins and payment transactions.
    Doing such things without an encrypted connection is not safe. It's too easy to
    eavesdrop the network and steal sensitive data.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在建立一个在线商店。我们需要处理登录和支付交易。在没有加密连接的情况下做这些事情是不安全的。很容易窃听网络并窃取敏感数据。
- en: HTTP/2 is the newest protocol and is much faster than the old HTTP/1.1 version.
    Currently, *all* major browsers that support HTTP/2 *require* HTTPS. It is not
    possible to support HTTP/2 over an unencrypted HTTP connection.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP/2是最新协议，比旧的HTTP/1.1版本快得多。目前，*所有*主要浏览器都支持HTTP/2，并且*要求*HTTPS。在未加密的HTTP连接上支持HTTP/2是不可能的。
- en: 'HTTP/2 with encryption is faster than HTTP/1.1 without encryption. Troy Hunt
    shows an interesting demo at this link: [https://www.troyhunt.com/i-wanna-go-fast-https-massive-speed-advantage](https://www.troyhunt.com/i-wanna-go-fast-https-massive-speed-advantage).
    In his test, loading a website with hundreds of small files was 80 percent faster
    with HTTP/2 over TLS due to the multiplexing feature of the newer protocol.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加密的HTTP/2比未加密的HTTP/1.1更快。Troy Hunt在这个链接中展示了有趣的演示：[https://www.troyhunt.com/i-wanna-go-fast-https-massive-speed-advantage](https://www.troyhunt.com/i-wanna-go-fast-https-massive-speed-advantage)。在他的测试中，由于新协议的多路复用功能，使用HTTP/2
    over TLS加载包含数百个小文件的网站比HTTP/1.1快80%。
- en: Another good reason is privacy. Using HTTPS everywhere helps to keep your browsing
    data safe. It's not enough because the domain names of the sites that you visit
    will continue to be exposed, but it helps a lot. The pages that you visit and
    the things that you read or write will not be (easily) compromised because data
    will always be transferred with encryption.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个很好的理由是隐私。在所有地方使用HTTPS有助于保护您的浏览数据安全。这还不够，因为您访问的网站域名将继续被暴露，但它帮助很大。您访问的页面以及您阅读或编写的内容将不会（轻易）受到损害，因为数据总是以加密的形式传输。
- en: 'If you are convinced and want to support HTTPS, follow these steps:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您确信并想支持HTTPS，请按照以下步骤操作：
- en: Create a mail exchange record in Route 53.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Route 53中创建一个邮件交换记录。
- en: Request a free SSL/TLS certificate to AWS.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向AWS请求免费SSL/TLS证书。
- en: Edit the CloudFront distribution to use this new certificate.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑CloudFront分发以使用此新证书。
- en: The first step, to create a mail account, is necessary because AWS will only
    issue a free SSL/TLS certificate if you prove that you own the domain, and this
    verification is done by following a link sent to the `admin@example.com` e-mail
    address.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步，创建邮件账户是必要的，因为AWS只有在您证明您拥有该域名时才会发放免费SSL/TLS证书，并且这种验证是通过发送到`admin@example.com`电子邮件地址的链接来完成的。
- en: Creating a mail exchange record
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建邮件交换记录
- en: 'We need a service that will handle e-mail messages before we request our free
    certificate to AWS. I suggest Zoho Mail as a free option (up to 5 GB space). In
    this section, we will see how to configure this service by performing the following
    steps:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们向AWS请求免费证书之前，我们需要一个处理电子邮件消息的服务。我建议使用Zoho Mail作为免费选项（高达5 GB空间）。在本节中，我们将通过执行以下步骤来了解如何配置此服务：
- en: First, browse [www.zoho.com/mail](http://www.zoho.com/mail) and sign up for
    a free *business* e-mail account. This account will be associated with your domain.
    When selecting the administrator account, choose the name `admin`. This name is
    important because AWS will check your domain ownership by sending a confirmation
    e-mail to `admin@example.com`.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，浏览[www.zoho.com/mail](http://www.zoho.com/mail)并注册一个免费的*商业*电子邮件账户。此账户将与您的域名相关联。在选择管理员账户时，选择名称`admin`。这个名称很重要，因为AWS将通过发送确认电子邮件到`admin@example.com`来检查您的域名所有权。
- en: 'After you create your account, you will be requested to confirm the ownership
    of the associated domain. There are a few options to prove your ownership, and
    I prefer using the CNAME method. In the Select your domain''s DNS Manager (DNS
    Hosting provider) from the list option, choose Others.. because AWS is not listed.
    Now, select CNAME Method, and the CNAME and Destination will be presented. You
    need to configure a new temporary Route 53 record set with this pair and finish
    clicking on the Proceed to CNAME Verification button:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您创建账户后，您将需要确认关联域的所有权。有几种方法可以证明您的所有权，我更喜欢使用CNAME方法。在从列表中选择您的域名DNS管理器（DNS托管提供商）选项中，选择“其他...”，因为AWS没有列出。现在，选择CNAME方法，CNAME和目标将显示出来。您需要使用这对组合配置一个新的临时Route
    53记录集，并完成点击“进行CNAME验证”按钮：
- en: '![](img/672b939a-0210-47a1-8ff1-2d0ef765a1f7.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/672b939a-0210-47a1-8ff1-2d0ef765a1f7.png)'
- en: After verifying, confirm the creation of the `admin` account. You can add in
    the sequence other users.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证后，确认创建`admin`账户。您可以按顺序添加其他用户。
- en: 'The next step is to configure MX (mail exchange) records in Route 53\. Copy
    the values that are presented by Zoho:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是在Route 53中配置MX（邮件交换）记录。复制Zoho提供的值：
- en: '![](img/0bc0c885-3afb-4f7c-b02b-160293bfe2df.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0bc0c885-3afb-4f7c-b02b-160293bfe2df.png)'
- en: 'Go back to Route 53\. Delete the CNAME record set that was created to verify
    your Zoho account because it is no longer necessary. Now you need to create a
    new record set of the type MX using the values from the preceding screenshot:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到Route 53。删除用于验证Zoho账户的CNAME记录集，因为它不再必要。现在您需要使用前面的截图中的值创建一个新的MX类型记录集：
- en: '![](img/ca7e6731-96b1-4121-bb0f-661c3fc49d49.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ca7e6731-96b1-4121-bb0f-661c3fc49d49.png)'
- en: We are done. You can test whether it is working correctly by sending an e-mail
    to this new address and by checking your Zoho e-mail account for received e-mails.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们完成了。您可以通过发送电子邮件到这个新地址并检查您的Zoho电子邮件账户中收到的电子邮件来测试它是否正常工作。
- en: Requesting free certificates with AWS Certificate Manager
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AWS证书管理器请求免费证书
- en: 'Let''s see how to request free certificates with AWS Certificate Manager by
    performing the following steps:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下步骤来了解如何使用AWS证书管理器请求免费证书：
- en: Request a TLS certificate at [https://console.aws.amazon.com/acm/home?region=us-east-1](https://console.aws.amazon.com/acm/home?region=us-east-1).
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[https://console.aws.amazon.com/acm/home?region=us-east-1](https://console.aws.amazon.com/acm/home?region=us-east-1)请求TLS证书。
- en: You need to be on us-east-1 because CloudFront only uses certificates from this
    region.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要位于us-east-1，因为CloudFront只使用该区域的证书。
- en: 'On the welcome screen, click on Get started. In the next screen, type your
    naked domain name and the www version and click on Review and request:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在欢迎屏幕上，点击“开始”。在下一个屏幕上，输入您的裸域名和www版本，然后点击“审查和请求”：
- en: '![](img/0b0a779c-f324-4ae8-a5c0-82eed3a82a93.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0b0a779c-f324-4ae8-a5c0-82eed3a82a93.png)'
- en: In the following screen, you just need to click on Confirm and request. Amazon
    will try to prove your domain ownership by sending an e-mail to `admin@example.com`.
    If you have configured your e-mail account correctly in the previous section,
    you will receive an e-mail in your Zoho inbox.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，您只需点击“确认”并请求。亚马逊将通过发送电子邮件到`admin@example.com`来尝试证明您的域名所有权。如果您在上一节中正确配置了您的电子邮件账户，您将在Zoho收件箱中收到一封电子邮件。
- en: The e-mail has a confirmation link that you must click on to prove your ownership.
    After that, Amazon will issue a new TLS certificate that will be available for
    your account.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该电子邮件有一个确认链接，您必须点击以证明您的所有权。之后，亚马逊将颁发一个新的TLS证书，该证书将可用于您的账户。
- en: You don't need to worry about the certificate expiration date. AWS will renew
    it automatically when necessary.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 您无需担心证书到期日期。AWS将在必要时自动续订。
- en: Configuring CloudFront to support HTTPS connections
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置CloudFront以支持HTTPS连接
- en: 'The last step to support HTTPS is to edit the CloudFront distribution to use
    the new certificate. To perform this task, take a look at the following steps:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 支持HTTPS的最后一步是编辑CloudFront分发以使用新证书。要执行此任务，请查看以下步骤：
- en: Browse the CloudFront Management Console at [https://console.aws.amazon.com/cloudfront](https://console.aws.amazon.com/cloudfront)
    and open your distribution.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览CloudFront管理控制台[https://console.aws.amazon.com/cloudfront](https://console.aws.amazon.com/cloudfront)，并打开您的分发。
- en: Under the General tab, click on the Edit option.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“常规”选项卡下，点击“编辑”选项。
- en: 'Click the Custom SSL Certificate (example.com): option and select your domain
    certificate using the drop-down button:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“自定义SSL证书（example.com）”选项，并使用下拉按钮选择您的域名证书：
- en: '![](img/169b6130-fe64-4b84-86ab-a5e244a20945.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/169b6130-fe64-4b84-86ab-a5e244a20945.png)'
- en: Save to return to the previous page, then click on the third tab, Behaviors,
    and click on Edit to edit the existing behavior.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存以返回上一页，然后点击第三个选项卡“行为”，并点击“编辑”来编辑现有行为。
- en: 'Now we can change the Viewer Protocol Policy parameter to Redirect HTTP to
    HTTPS to force the users to always use HTTPS:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以将查看器协议策略参数更改为将HTTP重定向到HTTPS，以强制用户始终使用HTTPS：
- en: '![](img/b3be0f11-99cb-4981-a1b5-e6304abc7ce2.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b3be0f11-99cb-4981-a1b5-e6304abc7ce2.png)'
- en: After changing these settings, CloudFront will automatically deploy the new
    configuration to all the edge nodes.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改这些设置后，CloudFront将自动将新配置部署到所有边缘节点。
- en: After waiting for some minutes, you can browse your domain to confirm HTTPS
    support.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待几分钟之后，您可以通过浏览您的域名来确认HTTPS支持。
- en: Summary
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to configure S3, CloudFront, and Route 53 to
    host a serverless frontend solution. Now you have your site distributed all around
    the world for reduced latency and increased speed along with HTTPS support to
    make the Web more safe and private.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何配置S3、CloudFront和Route 53来托管无服务器前端解决方案。现在，你的网站已经分布在全球各地，以降低延迟并提高速度，同时提供HTTPS支持，使网络更加安全和私密。
- en: In the next chapter, we are going to build the frontend of our serverless store
    application using React as an SPA.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用React作为单页应用（SPA）来构建我们的无服务器商店应用的前端。
