- en: Chapter 8. Testing Your Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we went through the process of analyzing and debugging
    our code. We learned to use the Code Inspector, Code Style checker, and the Code
    Quality Tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to see how WebStorm helps us in testing our code
    for ensuring that it is performs as expected. We will learn how to configure the
    test runners, run tests inside the IDE, and to use the following frameworks:'
  prefs: []
  type: TYPE_NORMAL
- en: Karma
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jasmine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node Unit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mocha
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cucumber.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wallaby.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before we start, please note that the processes explained in this chapter might
    seem to be repetitive. However, this will not be the case in a production environment,
    since you usually use only one framework. In WebStorm, the differences, when working
    with multiple testing frameworks, are mostly at the syntax level.
  prefs: []
  type: TYPE_NORMAL
- en: Karma
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Karma is a test runner created by the AngularJS team that helps us run out tests
    against several browsers. It starts the browsers that you select, loads the file
    you specify, and reports the results from your tests. Karma supports multiple-tests
    frameworks, so you can write your tests in Jasmine, Mocha, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you start, you need to install the command interface globally so that
    you can run Karma directly without having to go to the `node_modules` folder.
    In the terminal, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once you have the CLI installed globally, download the sample chapter from GitHub.
    So, create a new project using the Git repository at [https://github.com/srosca/webstorm_essentials_testing.git](https://github.com/srosca/webstorm_essentials_testing.git)
    as a source.
  prefs: []
  type: TYPE_NORMAL
- en: 'After downloading the project, you need to install Karma as a development dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can initialize Karma in the project. To do that, run the following
    command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You will be asked several questions for configuring the project. Answer them
    using the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Which testing framework do you want to use?**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jasmine**—to use Jasmine as the testing framework'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Do you want to use Require.js?**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**no**—since we don''t want to use `Require.js`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Do you want to capture any browsers automatically?**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chrome**—as we want to use Chrome from the beginning enter an empty string
    to move to the succeeding questions'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**What is the location of your source and test files?**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fib.js**—to test our file'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**test/jasmine/*.spec.js**—we are going to keep all our tests in the `test/jasmine`
    folder with `spec` as the name'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You have to again enter an empty string to move to the next question
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Should any of the files included by the previous patterns be excluded?**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leave this option blank
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Do you want Karma to watch all the files and run the tests on change?**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**yes**—as we want to watch for changes and run the test automatically'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once you''re done with this, you will have created the `karma.conf` file that
    keeps the settings for your project. Moreover, based on the selections that we
    make, Karma installs the required dependencies: `karma-chrome-launcher`, `karma-jasmine`,
    and `jasmine-core`.'
  prefs: []
  type: TYPE_NORMAL
- en: You can now create a **Run/Debug Configuration** to run Karma inside WebStorm.
    Navigate to **Run** | **Edit Configurations**, and select **Karma** from the **Add
    New Configuration** menu accessible from the ![Karma](img/00115.jpeg) icon or
    by pressing *Ctrl* + *N*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Karma](img/00116.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the configuration screen (shown in the preceding screenshot), you need to
    select the path to the `karma.config.js` file, node, and Karma. WebStorm picks
    these up automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Now we can start writing the tests for our code. One of the frameworks that
    we are going to look into first is Jasmine.
  prefs: []
  type: TYPE_NORMAL
- en: Jasmine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jasmine is a behavior-driven development framework for testing JavaScript code.
    It is designed to run on any JavaScript platform, does not depend on any other
    framework or the DOM, and has an easy-to-read obvious syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Before we start, it will help to install the Jasmine JavaScript library for
    WebStorm. We can use autocomplete and syntax highlight. Go to the **Preferences**
    | **JavaScript** | **Libraries** screen, and select **Download**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Jasmine](img/00117.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the new screen, select **TypeScript community stubs** and search for **jasmine**,
    and then select **Download and Install**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Jasmine](img/00118.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now that you have the library set up, you can start. First you need to create
    the `test` folder, a `jasmine` folder inside the `test` folder, and a `fib.spec.js`
    file in the `jasmine` folder. As a convention, the tests use the tested file name
    followed by `.spec.js`. In practice, the test files are placed directly inside
    the `test` folder, but we have created the `jasmine` folder so that it is easier
    to use multiple frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating the file, you need to fill it up with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This simple code will do some simple tests to check that everything is okay.
    You can now start Karma from the **Run** menu, the toolbar, or by using the shortcut,
    *Shift* + *W*. This will start Karma and display the results in the run section.
  prefs: []
  type: TYPE_NORMAL
- en: '![Jasmine](img/00119.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: These tests are just a simple example to make sure that everything is set up
    correctly. If you are able to see the same result like the preceding screenshot,
    we can now move to the next step, testing our Fibonacci function. While writing
    the test, it is a good practice to run the tests in continuous mode. We can do
    that by toggling auto run from the run section ![Jasmine](img/00120.jpeg). This
    is the equivalent of the watch mode, and it will run the tests automatically whenever
    we change the files.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will first have to delete the demo test that we did, and then get the `fib`
    function from the global object. Finally, you will test the result for some predefined
    values. You will also check if the recursion works okay by verifying that the
    current result is equal to the sum of the previous two results. The final code
    should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If you have toggled the auto run mode, then your run section should display
    the result as you complete them. If everything goes well, the entire tests should
    pass.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, you have created a test to check that your function calculates
    the value correctly with the help of Jasmine and Karma. In the next section, we
    are going to use another testing framework: Nodeunit.'
  prefs: []
  type: TYPE_NORMAL
- en: Nodeunit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nodeunit is a framework for testing the code for Node.js. Its main focus is
    to create an easy way to test the code written for node. Some of its main features
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Simple to use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to export tests from a module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Works with Node.js and in the browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows the use of mocks and stubs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Before writing the tests, you need to install Nodeunit as a development dependency.
    Run the following command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the package is installed, create a `fib.spec.js` file inside the new `nodeunit`
    folder in the test . After the file is created, add in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The tests are similar to the ones in the Jasmine section, but are written with
    the Nodeunit syntax. To run them, you need to create another run configuration
    but by selecting Nodeunit as a starting point this time. Open the configuration
    screen from the **Run** | **Edit Configurations** menu, and fill in the necessary
    settings. Use the installed package as the **Nodeunit** module, **All files in
    directory** as a **Run**, and `test/nodeunit` as the **Directory**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Nodeunit](img/00121.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have created the configuration, you can run the tests in the same
    way as the previous section, from either the toolbar or the **Run** menu. This
    will display the run section with the test results, as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Nodeunit](img/00122.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the workflow for creating and running tests is very similar
    between frameworks, the only difference being in the syntax that we write. Next,
    we are going to see another framework: Mocha.'
  prefs: []
  type: TYPE_NORMAL
- en: Mocha
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mocha is a framework for testing code for both Node.js and the browser. It is
    a more complex one with more features. It allows the user to write the tests using
    several syntaxes like BDD, TDD, exports, and so on. The tests in Mocha are run
    serially, which allows for a more flexible and accurate reporting, and the exceptions
    are correctly mapped to the test case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, before we write the tests, we need to install Mocha as a development
    dependency by running the following command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create a `fib.spec.js` file in a new `mocha` folder in `test`. Once the
    file is created, you need to fill the following tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the differences are again only at the syntax level. The logic
    of the tests remains the same. Now that you have the test created, create a run
    configuration, selecting **Mocha** as the template this time.
  prefs: []
  type: TYPE_NORMAL
- en: '![Mocha](img/00123.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Select the **Mocha** package, select **tdd** as a user interface, the test directory
    and then save the configuration, as seen in the preceding screenshot. This allows
    us to run the Mocha test and see the results in the run section.
  prefs: []
  type: TYPE_NORMAL
- en: '![Mocha](img/00124.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Next, we are going to focus on a framework that tries to use a more human-readable
    way to write the test.
  prefs: []
  type: TYPE_NORMAL
- en: Cucumber.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cucumber.js is a BDD framework that runs in Node.js and the browser. It uses
    a simple-to-understand syntax—the Gherkin language—that is described as a business
    readable, domain-specific language.
  prefs: []
  type: TYPE_NORMAL
- en: 'The test that you will write in Cucumber comprises two types of files:'
  prefs: []
  type: TYPE_NORMAL
- en: Feature files written in Gherkin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support files that are written in JavaScript or CoffeeScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'One of the first things to do before writing the test is to install Cucumber.js
    as a development dependency by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the package is installed, you need to create the folder structure; so,
    create a `cucumber` folder inside the `test` one. Inside the `cucumber` folder,
    create the features file, `fib.feature`, and fill it with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the Gherkin syntax focuses on the user story and not on the
    technical implementation. This is handled in the support files that we are going
    to create. These files will be placed in the `step_definitions` folder that you
    need to create inside the `cucumber` folder. In this folder, create the `fib.steps.js`
    file, and fill it with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, in this file, we are translating the steps from the features
    files into technical implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have all the files created, you can create a run configuration
    in the same way as in the previous section, but selecting `Cucumber.js` as the
    template this time.
  prefs: []
  type: TYPE_NORMAL
- en: You need to fill the **Feature file or directory** with the `fib.feature` file
    that we have created, and specify the executable path to the `Cucumber.js` file
    from the `node_modules/.bin/ folder`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Cucumber.js](img/00125.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Having performed these steps, you will have created a new run configuration
    that can be started from the toolbar or the **Run** menu, as seen in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cucumber.js](img/00126.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the run section, you can see the results of the test run grouped by features
    and scenarios. As you can see, the cucumber framework focuses more on creating
    the test in a syntax that is easy to read and translate into business requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we are going to focus on an intelligent test runner that runs and displays
    the results in a clever way: directly in your code.'
  prefs: []
  type: TYPE_NORMAL
- en: Wallaby.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wallaby.js is a test runner that runs your test in an innovative way. The tests
    are run in a continuous mode and Wallaby.js reports the code coverage and results
    directly in your code editor as you change the code.
  prefs: []
  type: TYPE_NORMAL
- en: Before using Wallaby.js, you need to download the plugin from the product page
    at [http://wallabyjs.com/](http://wallabyjs.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'After downloading the plugin, install it from the **Preferences** | **Plugins**
    dialog, and select **Install plugin from disk…**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wallaby.js](img/00127.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Follow the steps for installing the downloaded plugin, and restart WebStorm.
    Since Wallaby.js is a paid plugin, after restarting, you will be prompted for
    the license or for using the trial mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have it installed, you need to create a simple configuration file
    that will specify the files that you are using. Create a `wallaby.js` file in
    the project root, and fill it with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You are going to use the Jasmine tests that we have already defined in the
    previous section. Now create a run configuration that will run **wallaby**. Using
    the known steps, create a configuration based on the **Wallaby.js** template:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wallaby.js](img/00128.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You need to specify the `wallaby.js` configuration file that you created in
    the previous step.
  prefs: []
  type: TYPE_NORMAL
- en: When you run the project from the toolbar or from the **Run** menu, you will
    see some details in the run section, but this time the results and code coverage
    will be displayed as colored squares directly in your test files and source code.
  prefs: []
  type: TYPE_NORMAL
- en: '![Wallaby.js](img/00129.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Moreover, if you change one of your tests to fail, the failure will be displayed
    in line with the code so that you can easily see what the problem is.
  prefs: []
  type: TYPE_NORMAL
- en: '![Wallaby.js](img/00130.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, one of the big advantages that come with Wallaby.js is that
    you can see your results quickly, directly inside the code. This way, you can
    make changes quickly, without the need to jump between tools.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we focused on testing our code. We worked with some of the
    popular test runners and testing frameworks so that we can easily see the problems
    in our code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next and final chapter, we are going to see some of WebStorm''s features
    that will boost our productivity: Live Edit, TODO facility, Emmet, and others.'
  prefs: []
  type: TYPE_NORMAL
