["```js\nvar script_utils = Class.create();\nscript_utils.prototype = {\n    initialize: function() {\n    },\n\n    type: 'script_utils'\n};\n```", "```js\nvar script_utils = Class.create();\nscript_utils.prototype = Object.extendsObject(AbstractAjaxProcessor, {\n\n    type: 'script_utils'\n});\n```", "```js\nfunction script_include_test() {\n  return 'Test Complete';\n}\n```", "```js\nvar script_utils = Class.create();\nscript_utils.prototype = {\n  initialize: function() {\n  },\n\n  testMethod: function testMethod() {\n    return 'Method completed successfully';\n  },\n\n  type: 'script_utils'\n};\n```", "```js\nnew script_utils().testMethod();\n```", "```js\nvar dateTime = new GlideDateTime();\ndateTime.getDayOfWeek() != '7'\n```", "```js\ngs.log('Today is not Sunday');\n```", "```js\nvar inci = new GlideRecord('incident');\ninci.addQuery('category', 'software');\ninci.query();\n\nwhile (inci.next()) {\n  gs.log('Incident ' + inci.number + ' would be deleted');\n  //inci.deleteRecord();\n}\n```", "```js\n//Adds urgent to the short description if the priority is critical\nif (current.priority < 2) {\n  current.short_description = current.short_description + ' URGENT';\n  current.update();\n}\n```", "```js\ngs.eventQueue(\"custom.event\", current, gs.getUserID(), gs.getUserName());\n```", "```js\ngs.eventQueueScheduled(\"custom.event\", current, gs.getUserID(), gs.getUserName(), current.dateTimeField);\n```", "```js\ngs.log('Approval Inserted');\n```", "```js\nvar item_utils = Class.create();\nitem_utils.prototype = {\n    initialize: function() {\n    },\n\n  getActiveTasks: function getActiveTasks(item) {\n\n    var tasks = [];\n    var task = new GlideRecord('sc_task');\n    task.addQuery('request_item', item.sys_id);\n    task.addActiveQuery();\n    task.query();\n    while (task.next()) { \n      tasks.push(task.number.toString());\n    }\n    return tasks;\n  },\n\n    type: 'item_utils'\n};\n```", "```js\n(function executeRule(current, previous /*null when async*/) {\n\n  var tasks = new item_utils().getActiveTasks(current);\n  gs.log('Active tasks for ' + current.number + ' are ' + tasks.toString());\n\n})(current, previous);\n```", "```js\n//Delete incidents that have not been updated in the last year.\nvar date = new GlideDateTime();\ndate.addYearsLocalTime(-1);\n\nvar delIncident = new GlideRecord('incident');\ndelIncident.addQuery('sys_updated_on', '<', date);\ndelIncident.deleteMultiple();\n```", "```js\nvar manager = 'current.caller_id.manager';\nvar title;\nwhile (eval(manager) != '') {\n  title = manager + '.title';\n  if (eval(title) == 'Director') {\n    ans = manager + '.sys_id';\n    answer = eval(ans);\n    break;\n  } \n  manager = manager + '.manager';\n}\n```", "```js\n(function executeRule(current, previous /*null when async*/) {\n\n  gs.eventQueueScheduled(\"incident.off.hold\", current, current.sys_id, gs.getUserName(), current.u_on_hold_until);\n\n})(current, previous);\n```", "```js\nvar incident = new GlideRecord('incident');\nincident.get(event.parm1);\nincident.state = '2';\nincident.u_on_hold_until = '';\nincident.update();\n```"]