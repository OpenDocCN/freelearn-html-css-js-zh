["```js\n@page index TodoApp\n@description TodoApp is simple todo application.\n\n# TodoApp documentation\n\nHere we can add some more documentation formatted by [Markdown][1]!\n\n[1]: http://daringfireball.net/projects/markdown/syntax \"Check out Markdown syntax\"\n```", "```js\nsteal(\n    'jquery/class',\n    'jquery/model',\n    'jquery/util/fixture',\n    'jquery/view/ejs',\n    'jquery/controller',\n    'jquery/controller/route',\n    function ($) {\n\n        /**\n * @class Todo\n * @parent index\n * @constructor\n * @author Wojciech Bednarski\n * Creates a new todo.\n */\n        $.Model('Todo',{\n\n /**\n * @function findAll\n * Get all todos\n * @return {Array} an array contains objects with all todos\n */\n                findAll: 'GET /todos',\n\n /**\n * @function findOne\n * Get todo by id\n * @return {Object} an objects contains single todo\n */\n                findOne: 'GET /todos/{id}',\n\n /**\n * @function create\n * Create todo\n * @param {Object} todo\n * Todo object\n * @codestart\n * {name: 'read a book by Alfred Szklarski'}\n * @codeend\n *\n * @return {Object} an object contains newly created todo\n * @codestart\n * {\n *     id:   577,\n *     name: 'read a book by Alfred Szklarski'\n * }\n * @codeend\n *\n * ### Example:\n * @codestart\n * var todo = new Todo({name: 'read a book by Alfred Szklarski'});\n * todo.save(function (todo) {\n *     console.log(todo);\n * });\n * @codeend\n */\n                create:  'POST /todos',\n\n /**\n * @function update\n * Update todo by id\n * @return {Object} an object contains updated todo\n */\n                update:  'PUT /todos/{id}',\n\n /**\n * @function destroy\n * Destroy todo by id\n * @return {Object} an object contains destroyed todo\n */\n                destroy: 'DELETE /todos/{id}'\n            },\n            {\n\n            }\n        );\n\n        // Fixtures\n        (function () {\n            var TODOS = [\n                // list of todos\n                {\n                    id:   1,\n                    name: 'read The Good Parts'\n                },\n                {\n                    id:   2,\n                    name: 'read Pro Git'\n                },\n                {\n                    id:   3,\n                    name: 'read Programming Ruby'\n                }\n            ];\n\n            // findAll\n            $.fixture('GET /todos', function () {\n                return [TODOS];\n            });\n\n            // findOne\n            $.fixture('GET /todos/{id}', function (orig) {\n                return TODOS[(+orig.data.id) - 1];\n            });\n\n            // create\n            var id = 4;\n            $.fixture('POST /todos', function () {\n                return {\n                    id: (id++)\n                };\n            });\n\n            // update\n            $.fixture('PUT /todos/{id}', function () {\n                return {};\n            });\n\n            // destroy\n            $.fixture('DELETE /todos/{id}', function () {\n                return {};\n            });\n        }());\n\n /**\n * @class Todos\n * Creates a new Todos controller\n * @parent index\n * @constructor\n * @param {String} DOMElement DOM element\n * @return {Object}\n */\n        $.Controller('Todos', {\n            // init method is called when new instance is created\n            'init': function (element, options) {\n                this.element.html('todos.ejs', Todo.findAll());\n            },\n\n            // add event listener to strong element on click\n            'li strong click': function (el, e) {\n                // trigger custom event\n                el.trigger('selected', el.closest('li').model());\n\n                // log current model to the console\n                console.log('li strong click', el.closest('.todo').model());\n            },\n\n            // add event listener to em element on click\n            'li .destroy click': function (el, e) {\n                // call destroy on the model to prevent memory leaking\n                el.closest('.todo').model().destroy();\n            },\n\n            // add event listener to Todo model on destroyed\n            '{Todo} destroyed': function (Todo, e, destroyedTodo) {\n                // remove element from the DOM tree\n                destroyedTodo.elements(this.element).remove();\n\n                console.log('destroyed: ', destroyedTodo);\n            }\n        });\n\n /**\n * @class Routing\n * Creates application router\n * @parent index\n * @constructor\n * @param {String} DOMElement DOM element\n * @return {Object}\n */\n        $.Controller('Routing', {\n            init: function () {\n                new Todos('#todos');\n            },\n\n            // the index page\n            'route': function () {\n                console.log('default route');\n            },\n\n            // handle URL witch hash\n            ':id route': function (data) {\n                Todo.findOne(data, $.proxy(function (todo) {\n                    // increase font size for current todo item\n                    todo.elements(this.element).animate({fontSize: '125%'}, 750);\n                }, this));\n            },\n\n            // add event listener on selected\n            '.todo selected':  function (el, e, todo) {\n                // pass todo id as a parameter to the router\n                $.route.attr('id', todo.id);\n            }\n        });\n\n        // create new Routing controller instance\n        new Routing(document.body);\n    }\n);\n```", "```js\n$ ./documentjs/doc todo\nPROCESSING SCRIPTS\n\n todo/todo.js\n todo/todo.md\n\nGENERATING DOCS -> todo/docs\n\nUsing default page layout.  Overwrite by creating: todo/summary.ejs\n\n```"]