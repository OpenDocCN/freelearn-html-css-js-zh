["```js\n$ yarn add cucumber --dev\n```", "```js\n$ cd <project-root-dir>\n$ mkdir -p spec/cucumber/features/users/create\n$ touch spec/cucumber/features/users/create/main.feature\n```", "```js\nFeature: Create User\n\n Clients should be able to send a request to our API in order to create a\n user. Our API should also validate the structure of the payload and respond\n with an error if it is invalid.\n```", "```js\nFeature: Create User\n\n  Clients should be able to send a request to our API in order to create a\n  user. Our API should also validate the structure of the payload and respond\n  with an error if it is invalid.\n\n  Scenario: Empty Payload\n\n  If the client sends a POST request to /users with a unsupported payload, it\n  should receive a response with a 4xx status code.\n\n  When the client creates a POST request to /users\n  And attaches a generic empty payload\n  And sends the request\n  Then our API should respond with a 400 HTTP status code\n  And the payload of the response should be a JSON object\n  And contains a message property which says \"Payload should not be empty\"\n```", "```js\n$ npx cucumber-js spec/cucumber/features\nUUUUUU\n\nWarnings:\n1) Scenario: Empty Payload\n ? When the client creates a POST request to /users\n Undefined.\n ? And attaches a generic empty payload\n Undefined.\n ? And sends the request\n Undefined.\n ? Then our API should respond with a 400 HTTP status code\n Undefined.\n ? And the payload of the response should be a JSON object\n Undefined.\n ? And contains a message property which says \"Payload should not be \n empty\"\n Undefined.\n\n1 scenario (1 undefined)\n6 steps (6 undefined)\n```", "```js\n$ mkdir -p spec/cucumber/steps\n```", "```js\nimport { When, Then } from 'cucumber';\n\nWhen('the client creates a POST request to /users', function (callback) {\n  callback(null, 'pending');\n});\n\nWhen('attaches a generic empty payload', function (callback) {\n  callback(null, 'pending');\n});\n\nWhen('sends the request', function (callback) {\n  callback(null, 'pending');\n});\n\nThen('our API should respond with a 400 HTTP status code', function (callback) {\n  callback(null, 'pending');\n});\n\nThen('the payload of the response should be a JSON object', function (callback) {\n  callback(null, 'pending');\n});\n\nThen('contains a message property which says \"Payload should not be empty\"', function (callback) {\n  callback(null, 'pending');\n});\n```", "```js\n{\n  \"rules\": {\n      \"func-names\": \"off\",\n      \"prefer-arrow-callback\": \"off\"\n  }\n}\n```", "```js\n$ npx cucumber-js spec/cucumber/features --require spec/cucumber/steps\nspec/cucumber/steps/index.js:1\n(function (exports, require, module, __filename, __dirname) { import { Given, When, Then } from 'cucumber';\n ^^^^^^\nSyntaxError: Unexpected token import\n```", "```js\n$ yarn add @babel/register --dev\n```", "```js\n$ npx cucumber-js spec/cucumber/features --require-module @babel/register --require spec/cucumber/steps\nP-----\n\nWarnings:\n1) Scenario: Empty Payload\n ? When the client creates a POST request to /users\n Pending\n - And attaches a generic empty payload\n - And sends the request\n - Then our API should respond with a 400 HTTP status code\n - And the payload of the response should be a JSON object\n - And contains a message property which says \"Payload should not be empty\"\n\n1 scenario (1 pending)\n6 steps (1 pending, 5 skipped)\n```", "```js\n\"test:e2e\": \"cucumber-js spec/cucumber/features --require-module @babel/register --require spec/cucumber/steps\",\n```", "```js\n$ git branch dev\n```", "```js\n$ git checkout -b create-user/main\n$ git add -A\n$ git commit -m \"Set up infrastructure for Cucumber E2E tests\"\n```", "```js\nrequest\n  .post('/api/pet')\n  .send({ name: 'Manny', species: 'cat' }) // sends a JSON post body\n  .set('X-API-Key', 'foobar')\n  .set('accept', 'json')\n  .end((err, res) => {\n    // Calling the end function will send the request\n  });\n```", "```js\n$ yarn add superagent --dev\n```", "```js\nimport superagent from 'superagent';\nimport { When, Then } from 'cucumber';\nlet request;\nlet result;\nlet error;\n\nWhen('the client creates a POST request to /users', function () {\n  request = superagent('POST', 'localhost:8080/users');\n});\n\nWhen('attaches a generic empty payload', function () {\n  return undefined;\n});\n\nWhen('sends the request', function (callback) {\n  request\n    .then((response) => {\n      result = response.res;\n      callback();\n    })\n    .catch((errResponse) => {\n      error = errResponse.response;\n      callback();\n    });\n});\n```", "```js\n$ yarn run test:e2e\n...P--\n\nWarnings:\n1) Scenario: Empty Payload\n ![](img/f3eab50b-1146-40ee-bf21-d1d5b199debd.png) When the client creates a POST request to /users\n ![](img/f3eab50b-1146-40ee-bf21-d1d5b199debd.png) And attaches a generic empty payload\n ![](img/f3eab50b-1146-40ee-bf21-d1d5b199debd.png) And sends the request\n ? Then our API should respond with a 400 HTTP status code\n - And the payload of the response should be a JSON object - And contains a message property which says \"Payload should not be empty\"\n\n1 scenario (1 pending)\n6 steps (1 pending, 2 skipped, 3 passed)\n```", "```js\nThen('our API should respond with a 400 HTTP status code', function () {\n  if (error.statusCode !== 400) {\n    throw new Error();\n  }\n});\n```", "```js\n$ yarn run test:e2e\n...F--\n\nFailures:\n1) Scenario: Empty Payload\n ![](img/23d2583d-4b27-488f-8e7c-2ed13e44661b.png) When the client creates a POST request to /users\n ![](img/23d2583d-4b27-488f-8e7c-2ed13e44661b.png) And attaches a generic empty payload\n ![](img/23d2583d-4b27-488f-8e7c-2ed13e44661b.png)And sends the request\n ![](img/327fefc0-1079-4057-87c4-5d2c808453a4.png)Then our API should respond with a 400 HTTP status code\n {}\n Error\n at World.<anonymous> (spec/cucumber/steps/index.js:28:11)\n - And the payload of the response should be a JSON object\n - And contains a message property which says \"Payload should not be empty\"\n\n1 scenario (1 failed)\n6 steps (1 failed, 2 skipped, 3 passed)\n```", "```js\n$ yarn add ndb --dev\n```", "```js\n$ yarn global add windows-build-tools\n```", "```js\nconst requestHandler = function (req, res) {\n  debugger;\n  res.writeHead(200, {'Content-Type': 'text/plain'});\n  res.end('Hello, World!');\n}\n```", "```js\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"name\": \"Node\",\n      \"program\": \"${file}\",\n      \"protocol\": \"inspector\"\n    },\n    {\n      \"name\": \"Babel Node\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"runtimeExecutable\": \"${workspaceRoot}/node_modules/.bin/babel-\n      node\",\n      \"runtimeArgs\": [\n        \"--presets\",\n        \"@babel/env\"\n      ],\n      \"program\": \"${file}\",\n      \"protocol\": \"inspector\"\n    },\n    {\n      \"name\": \"Node with Experimental Modules\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"runtimeExecutable\": \"~/.nvm/versions/node/v8.11.4/bin/node\",\n      \"runtimeArgs\": [\n        \"--experimental-modules\"\n      ],\n      \"program\": \"${file}\",\n      \"protocol\": \"inspector\"\n    }\n  ],\n  \"compounds\": []\n}\n```", "```js\n$ yarn add @babel/node --dev\n```", "```js\n{\n  \"presets\": [\n    [\"@babel/env\", {\n      \"targets\": {\n        \"node\": \"current\"\n      }\n    }]\n  ],\n  \"env\": {\n    \"debug\": {\n      \"retainLines\": true\n    }\n  }\n}\n```", "```js\n{\n  \"name\": \"Babel Node\",\n  \"type\": \"node\",\n  ...\n  ...\n  \"protocol\": \"inspector\",\n  \"env\": {\n    \"BABEL_ENV\": \"debug\"\n  }\n},\n```", "```js\n$ git add package.json yarn.lock spec/cucumber/steps/index.js\n$ git commit -m \"WIP Implement Create User with Empty Payload\"\n$ git checkout dev\n$ yarn add @babel/node --dev\n$ git add -A\n$ git commit -m \"Add configuration for VSCode Debugger\"\n$ git checkout create-user/main\n$ git rebase dev\n$ yarn install\n```", "```js\nfunction requestHandler(req, res) {\n  if (req.method === 'POST' && req.url === '/users') {\n    res.statusCode = 400;\n    res.end();\n    return;\n  }\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.end('Hello, World!');\n}\n```", "```js\nlet payload;\n\n...\n\nThen('the payload of the response should be a JSON object', function () {\n  const response = result || error;\n\n  // Check Content-Type header\n  const contentType = response.headers['Content-Type'] || response.headers['content-type'];\n  if (!contentType || !contentType.includes('application/json')) {\n    throw new Error('Response not of Content-Type application/json');\n  }\n\n  // Check it is valid JSON\n  try {\n    payload = JSON.parse(response.text);\n  } catch (e) {\n    throw new Error('Response not a valid JSON object'); \n  }\n});\n```", "```js\n$ yarn run test:e2e\n....F-\n\n...\n ![](img/79b91ec0-f662-4302-a1d9-b7fdd9a9b9cb.png) Then our API should respond with a 400 HTTP status code\n ![](img/639c6c16-344c-4386-8492-9dca340551bf.png) And the payload of the response should be a JSON object\n Error: Response not of Content-Type application/json\n at World.<anonymous> (spec/cucumber/steps/index.js:41:11)\n - And contains a message property which says \"Payload should not be empty\"\n```", "```js\nfunction requestHandler(req, res) {\n  if (req.method === 'POST' && req.url === '/users') {\n    res.writeHead(400, { 'Content-Type': 'application/json' });\n    res.end(JSON.stringify({}));\n    return;\n  }\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.end('Hello, World!');\n}\n```", "```js\nThen('contains a message property which says \"Payload should not be empty\"', function () {\n  if (payload.message !== 'Payload should not be empty') {\n    throw new Error();\n  }\n});\n```", "```js\nif (req.method === 'POST' && req.url === '/users') {\n  res.writeHead(400, { 'Content-Type': 'application/json' });\n  res.end(JSON.stringify({\n    message: 'Payload should not be empty',\n  }));\n  return;\n}\n```", "```js\n$ yarn run test:e2e\n......\n\n1 scenario (1 passed)\n6 steps (6 passed)\n```", "```js\nimport superagent from 'superagent';\nimport { When, Then } from 'cucumber';\n\nWhen('the client creates a POST request to /users', function () {\n  this.request = superagent('POST', 'localhost:8080/users');\n});\n\nWhen('attaches a generic empty payload', function () {\n  return undefined;\n});\n\nWhen('sends the request', function (callback) {\n  this.request\n    .then((response) => {\n      this.response = response.res;\n      callback();\n    })\n    .catch((error) => {\n      this.response = error.response;\n      callback();\n    });\n});\n\nThen('our API should respond with a 400 HTTP status code', function () {\n  if (this.response.statusCode !== 400) {\n    throw new Error();\n  }\n});\n\nThen('the payload of the response should be a JSON object', function () {\n  // Check Content-Type header\n  const contentType = this.response.headers['Content-Type'] || this.response.headers['content-type'];\n  if (!contentType || !contentType.includes('application/json')) {\n    throw new Error('Response not of Content-Type application/json');\n  }\n\n  // Check it is valid JSON\n  try {\n    this.responsePayload = JSON.parse(this.response.text);\n  } catch (e) {\n    throw new Error('Response not a valid JSON object');\n  }\n});\n\nThen('contains a message property which says \"Payload should not be empty\"', function () {\n  if (this.responsePayload.message !== 'Payload should not be empty') {\n    throw new Error();\n  }\n});\n```", "```js\n$ yarn run test:e2e\n......\n\n1 scenario (1 passed)\n6 steps (6 passed)\n```", "```js\nthrow new Error();\n```", "```js\n✗ Then our API should respond with a 400 HTTP status code\n   {}\n   Error\n       at World.<anonymous>\n```", "```js\nimport { AssertionError } from 'assert';\n```", "```js\nThen('our API should respond with a 400 HTTP status code', function () {\n  if (this.response.statusCode !== 400) {\n    throw new AssertionError({\n      expected: 400,\n      actual: this.response.statusCode,\n    });\n  }\n});\n```", "```js\n Then our API should respond with a 400 HTTP status code\n       AssertionError [ERR_ASSERTION]: 200 undefined 400\n           + expected - actual\n           -200\n           +400\n\n           at new AssertionError (internal/errors.js:86:11)\n           at World.<anonymous> (spec/cucumber/steps/index.js:27:11)\n```", "```js\nimport assert from 'assert';\n...\nThen('our API should respond with a 400 HTTP status code', function () {\n  assert.equal(this.response.statusCode, 400);\n```", "```js\nThen('contains a message property which says \"Payload should not be empty\"', function () {\n  assert.equal(this.responsePayload.message, 'Payload should not be empty');\n});\n```", "```js\nSERVER_PROTOCOL=http\nSERVER_HOSTNAME=localhost\nSERVER_PORT=8080\n```", "```js\n$ yarn add dotenv-cli --dev\n```", "```js\ndotenv <command with arguments>\n```", "```js\n\"serve\": \"yarn run build && dotenv node dist/index.js\",\n\"test:e2e\": \"dotenv cucumber-js -- spec/cucumber/features --require-module @babel/register --require spec/cucumber/steps\",\n```", "```js\nthis.request = superagent('POST', `${process.env.SERVER_HOSTNAME}:${process.env.SERVER_PORT}/users`);\n```", "```js\n$ yarn run test:e2e\n......\n\n1 scenario (1 passed)\n6 steps (6 passed)\n```", "```js\n$ cp .env .env.example\n```", "```js\n$ git add -A\n$ git commit --amend -m \"Handle create user calls with empty payload\"\n```", "```js\n  Scenario: Payload using Unsupported Media Type\n\n  If the client sends a POST request to /users with an payload that is \n  not JSON,\n  it should receive a response with a 415 Unsupported Media Type HTTP \n  status code.\n\n    When the client creates a POST request to /users\n    And attaches a generic non-JSON payload\n    And sends the request\n    Then our API should respond with a 415 HTTP status code\n    And the payload of the response should be a JSON object\n    And contains a message property which says 'The \"Content-Type\" header must always be \"application/json\"'\n\n  Scenario: Malformed JSON Payload\n\n  If the client sends a POST request to /users with an payload that is \n  malformed,\n  it should receive a response with a 400 Unsupported Media Type HTTP \n  status code.\n\n    When the client creates a POST request to /users\n    And attaches a generic malformed payload\n    And sends the request\n    Then our API should respond with a 400 HTTP status code\n    And the payload of the response should be a JSON object\n    And contains a message property which says \"Payload should be in JSON format\"\n```", "```js\nWhen('attaches a generic non-JSON payload', function () {\n  this.request.send('<?xml version=\"1.0\" encoding=\"UTF-8\" ?><email>dan@danyll.com</email>');\n  this.request.set('Content-Type', 'text/xml');\n});\n\nWhen('attaches a generic malformed payload', function () {\n  this.request.send('{\"email\": \"dan@danyll.com\", name: }');\n  this.request.set('Content-Type', 'application/json');\n});\n\nThen('our API should respond with a 415 HTTP status code', function () {\n  assert.equal(this.response.statusCode, 415);\n});\n\nThen('contains a message property which says \\'The \"Content-Type\" header must always be \"application/json\"\\'', function () {\n  assert.equal(this.responsePayload.message, 'The \"Content-Type\" header must always be \"application/json\"');\n});\n\nThen('contains a message property which says \"Payload should be in JSON format\"', function () {\n  assert.equal(this.responsePayload.message, 'Payload should be in JSON format');\n});\n\n```", "```js\n$ yarn run test:e2e\n.........F--\n\nFailures:\n1) Scenario: Payload using Unsupported Media Type\n ![](img/e0af6967-8ddc-48e7-8c10-adcaaa04085e.png) When the client creates a POST request to /users\n ![](img/e0af6967-8ddc-48e7-8c10-adcaaa04085e.png)And attaches a generic non-JSON payload\n ![](img/e0af6967-8ddc-48e7-8c10-adcaaa04085e.png)And sends the request\n ![](img/bbe81b54-6452-42b0-8d57-42400eedc670.png)Then our API should respond with a 415 HTTP status code\n AssertionError [ERR_ASSERTION]: 400 == 415\n + expected - actual\n -400\n +415\n at World.<anonymous> (spec/cucumber/steps/index.js:35:10)\n - And the payload of the response should be a JSON object\n - And contains a message property which says \"Payload should be in JSON format\"\n\n2 scenarios (1 failed, 1 passed)\n12 steps (1 failed, 2 skipped, 9 passed)\n```", "```js\nimport '@babel/polyfill';\nimport http from 'http';\nfunction requestHandler(req, res) {\n  if (req.method === 'POST' && req.url === '/users') {\n    const payloadData = [];\n    req.on('data', (data) => {\n      payloadData.push(data);\n    });\n\n    req.on('end', () => {\n      if (payloadData.length === 0) {\n        res.writeHead(400, { 'Content-Type': 'application/json' });\n        res.end(JSON.stringify({\n          message: 'Payload should not be empty',\n        }));\n        return;\n      }\n      if (req.headers['content-type'] !== 'application/json') {\n        res.writeHead(415, { 'Content-Type': 'application/json' });\n        res.end(JSON.stringify({\n          message: 'The \"Content-Type\" header must always be \"application/json\"',\n        }));\n        return;\n      }\n      try {\n        const bodyString = Buffer.concat(payloadData).toString();\n        JSON.parse(bodyString);\n      } catch (e) {\n        res.writeHead(400, { 'Content-Type': 'application/json' });\n        res.end(JSON.stringify({\n          message: 'Payload should be in JSON format',\n        }));\n      }\n    });\n  } else {\n    res.writeHead(200, { 'Content-Type': 'text/plain' });\n    res.end('Hello, World!');\n  }\n}\nconst server = http.createServer(requestHandler);\nserver.listen(8080);\n```", "```js\nJSON.parse('<>'); // SyntaxError: Unexpected token < in JSON at position 0\n```", "```js\nThen(/^contains a message property which says 'The \"Content-Type\" header must always be \"application\\/json\"'$/, function () {\n  assert.equal(this.responsePayload.message, 'The \"Content-Type\" header must always be \"application/json\"');\n});\n```", "```js\n$ yarn run test:e2e\n..................\n\n3 scenarios (3 passed)\n18 steps (18 passed)\n```", "```js\nFeature: Create User\n\n  Clients should be able to send a request to our API in order to create a\n  user. Our API should also validate the structure of the payload and respond\n  with an error if it is invalid.\n\n  Scenario Outline: Bad Client Requests\n\n  If the client sends a POST request to /users with an empty payload, it\n  should receive a response with a 4xx Bad Request HTTP status code.\n\n    When the client creates a POST request to /users\n    And attaches a generic <payloadType> payload\n    And sends the request\n    Then our API should respond with a <statusCode> HTTP status code\n    And the payload of the response should be a JSON object\n    And contains a message property which says <message>\n\n  Examples:\n\n  | payloadType | statusCode | message                                                       |\n  | empty       | 400        | \"Payload should not be empty\"                                 |\n  | non-JSON    | 415        | 'The \"Content-Type\" header must always be \"application/json\"' |\n  | malformed   | 400        | \"Payload should be in JSON format\"                            |\n```", "```js\nThen('our API should respond with a {int} HTTP status code', function (statusCode) {\n  assert.equal(this.response.statusCode, statusCode);\n});\n```", "```js\nThen(/^our API should respond with a ([1-5]\\d{2}) HTTP status code$/, function (statusCode) {\n  assert.equal(this.response.statusCode, statusCode);\n});\n```", "```js\nimport assert from 'assert';\nimport superagent from 'superagent';\nimport { When, Then } from 'cucumber';\n\nWhen(/^the client creates a (GET|POST|PATCH|PUT|DELETE|OPTIONS|HEAD) request to ([/\\w-:.]+)$/, function (method, path) {\n  this.request = superagent(method, `${process.env.SERVER_HOSTNAME}:${process.env.SERVER_PORT}${path}`);\n});\n\nWhen(/^attaches a generic (.+) payload$/, function (payloadType) {\n  switch (payloadType) {\n    case 'malformed':\n      this.request\n        .send('{\"email\": \"dan@danyll.com\", name: }')\n        .set('Content-Type', 'application/json');\n      break;\n    case 'non-JSON':\n      this.request\n        .send('<?xml version=\"1.0\" encoding=\"UTF-8\" ?><email>dan@danyll.com</email>')\n        .set('Content-Type', 'text/xml');\n      break;\n    case 'empty':\n    default:\n  }\n});\n\nWhen(/^sends the request$/, function (callback) {\n  this.request\n    .then((response) => {\n      this.response = response.res;\n      callback();\n    })\n    .catch((error) => {\n      this.response = error.response;\n      callback();\n    });\n});\n\nThen(/^our API should respond with a ([1-5]\\d{2}) HTTP status code$/, function (statusCode) {\n  assert.equal(this.response.statusCode, statusCode);\n});\n\nThen(/^the payload of the response should be a JSON object$/, function () {\n  // Check Content-Type header\n  const contentType = this.response.headers['Content-Type'] || this.response.headers['content-type'];\n  if (!contentType || !contentType.includes('application/json')) {\n    throw new Error('Response not of Content-Type application/json');\n  }\n\n  // Check it is valid JSON\n  try {\n    this.responsePayload = JSON.parse(this.response.text);\n  } catch (e) {\n    throw new Error('Response not a valid JSON object');\n  }\n});\n\nThen(/^contains a message property which says (?:\"|')(.*)(?:\"|')$/, function (message) {\n  assert.equal(this.responsePayload.message, message);\n});\n```", "```js\nconst PAYLOAD_LIMIT = 1e6;\nreq.on('data', function (data) {\n  payloadData.push(data);\n  const bodyString = Buffer.concat(payloadData).toString();\n  if (bodyString.length > PAYLOAD_LIMIT) {\n    res.writeHead(413, { 'Content-Type': 'text/plain' });\n    res.end();\n    res.connection.destroy();\n  }\n});\n```", "```js\n$ git add -A && git commit -m \"Handle malformed/non-JSON payloads for POST /user\"\n```", "```js\n$ yarn add express\n```", "```js\n...\nimport http from 'http';\n...\nconst server = http.createServer(requestHandler);\nserver.listen(8080);\n```", "```js\n...\nimport express from 'express';\n...\nconst app = express();\napp.listen(process.env.SERVER_PORT);\n```", "```js\napp.listen(process.env.SERVER_PORT, () => {\n  // eslint-disable-next-line no-console\n  console.log(`Hobnob API server listening on port ${process.env.SERVER_PORT}!`);\n});\n```", "```js\nfunction requestHandler(req, res) {\n  if (req.method === 'POST' && req.url === '/users') {\n    // Handler logic for POST /user\n  } else {\n    res.writeHead(200, { 'Content-Type': 'text/plain' });\n    res.end('Hello, World!');\n  }\n}\n```", "```js\napp.post('/users', (req, res) => {\n  // Handler logic for POST /user\n});\n```", "```js\n$ yarn run test:e2e\n............\n\n2 scenarios (2 passed)\n12 steps (12 passed)\n```", "```js\n# Without Express\nres.writeHead(400, { 'Content-Type': 'application/json' });\n\n# With Express\nres.status(400);\nres.set('Content-Type', 'application/json');\n```", "```js\nres.end(JSON.stringify({ message: 'Payload should not be empty' }));    // Without Express\nres.json({ message: 'Payload should not be empty' });                   // With Express\n```", "```js\n$ yarn add body-parser\n```", "```js\nimport bodyParser from 'body-parser';\n...\napp.use(bodyParser.json({ limit: 1e6 }));\n```", "```js\napp.post('/users', (req, res) => {\n  if (req.headers['content-length'] === 0) {\n    res.status(400);\n    res.set('Content-Type', 'application/json');\n    res.json({\n      message: 'Payload should not be empty',\n    });\n    return;\n  }\n  if (req.headers['content-type'] !== 'application/json') {\n    res.status(415);\n    res.set('Content-Type', 'application/json');\n    res.json({\n      message: 'The \"Content-Type\" header must always be \"application/json\"',\n    });\n    return;\n  }\n  res.status(400);\n  res.set('Content-Type', 'application/json');\n  res.json({\n    message: 'Payload should be in JSON format',\n  });\n});\n```", "```js\nSyntaxError {\n  expose: true,\n  statusCode: 400,\n  status: 400,\n  body: '{\"email\": \"dan@danyll.com\", name: }',\n  type: 'entity.parse.failed'\n}\n```", "```js\nimport '@babel/polyfill';\nimport express from 'express';\nimport bodyParser from 'body-parser';\n\nconst app = express();\napp.use(bodyParser.json({ limit: 1e6 }));\n\napp.post('/users', (req, res) => {\n  if (req.headers['content-length'] === '0') {\n    res.status(400);\n    res.set('Content-Type', 'application/json');\n    res.json({\n      message: 'Payload should not be empty',\n    });\n    return;\n  }\n  if (req.headers['content-type'] !== 'application/json') {\n    res.status(415);\n    res.set('Content-Type', 'application/json');\n    res.json({\n      message: 'The \"Content-Type\" header must always be \"application/json\"',\n    });\n  }\n});\n\napp.use((err, req, res, next) => {\n if (err instanceof SyntaxError && err.status === 400 && 'body' in err && err.type === 'entity.parse.failed') {\n res.status(400);\n res.set('Content-Type', 'application/json');\n res.json({ message: 'Payload should be in JSON format' });\n return;\n }\n next();\n});\napp.listen(process.env.SERVER_PORT, () => {\n  // eslint-disable-next-line no-console\n  console.log(`Hobnob API server listening on port ${process.env.SERVER_PORT}!`);\n});\n```", "```js\n$ yarn run test:e2e\n..................\n\n3 scenarios (3 passed)\n18 steps (18 passed)\n```", "```js\n$ git add -A\n$ git commit -m \"Migrate API to Express\"\n```", "```js\nFeature: General\n\n  Scenario Outline: POST, PUT and PATCH requests should have non-empty payloads\n\n  All POST, PUT and PATCH requests must have non-zero values for its \"Content-Length\" header\n\n    When the client creates a <method> request to /users\n    And attaches a generic empty payload\n    And sends the request\n    Then our API should respond with a 400 HTTP status code\n    And the payload of the response should be a JSON object\n    And contains a message property which says 'Payload should not be empty'\n\n    Examples:\n    | method |\n    | POST   |\n    | PATCH  |\n    | PUT    |\n\n  Scenario: Content-Type Header should be set for requests with non-empty payloads\n\n  All requests which has non-zero values for its \"Content-Length\" header must have its \"Content-Type\" header set\n\n    When the client creates a POST request to /users\n    And attaches a generic non-JSON payload\n    But without a \"Content-Type\" header set\n    And sends the request\n    Then our API should respond with a 400 HTTP status code\n    And the payload of the response should be a JSON object\n    And contains a message property which says 'The \"Content-Type\" header must be set for requests with a non-empty payload'\n\n  Scenario: Content-Type Header should be set to application/json\n\n  All requests which has a \"Content-Type\" header must set its value to contain \"application/json\"\n\n    When the client creates a POST request to /users\n    And attaches a generic non-JSON payload\n    And sends the request\n    Then our API should respond with a 415 HTTP status code\n    And the payload of the response should be a JSON object\n    And contains a message property which says 'The \"Content-Type\" header must always be \"application/json\"'\n```", "```js\nWhen(/^without a (?:\"|')([\\w-]+)(?:\"|') header set$/, function (headerName) {\n  this.request.unset(headerName);\n});\n```", "```js\n...\nfunction checkEmptyPayload(req, res, next) {\n  if (\n    ['POST', 'PATCH', 'PUT'].includes(req.method)\n    && req.headers['content-length'] === '0'\n  ) {\n    res.status(400);\n    res.set('Content-Type', 'application/json');\n    res.json({\n      message: 'Payload should not be empty',\n    });\n  }\n  next();\n}\n\nfunction checkContentTypeIsSet(req, res, next) {\n  if (\n    req.headers['content-length']\n    && req.headers['content-length'] !== '0'\n    && !req.headers['content-type']\n  ) {\n    res.status(400);\n    res.set('Content-Type', 'application/json');\n    res.json({ message: 'The \"Content-Type\" header must be set for requests with a non-empty payload' });\n  }\n  next();\n}\n\nfunction checkContentTypeIsJson(req, res, next) {\n  if (!req.headers['content-type'].includes('application/json')) {\n    res.status(415);\n    res.set('Content-Type', 'application/json');\n    res.json({ message: 'The \"Content-Type\" header must always be \"application/json\"' });\n  }\n  next();\n}\n\napp.use(checkEmptyPayload);\napp.use(checkContentTypeIsSet);\napp.use(checkContentTypeIsJson);\napp.use(bodyParser.json({ limit: 1e6 }));\n\napp.post('/users', (req, res, next) => { next(); });\n...\n```", "```js\n$ git add -A\n$ git commit -m \"Move common logic into middleware functions\"\n```", "```js\nScenario Outline: Bad Request Payload\n\n  When the client creates a POST request to /users\n  And attaches a Create User payload which is missing the <missingFields> field\n  And sends the request\n  Then our API should respond with a 400 HTTP status code\n  And the payload of the response should be a JSON object\n  And contains a message property which says \"Payload must contain at least the email and password fields\"\n\n  Examples:\n\n  | missingFields |\n  | email         |\n  | password      |\n```", "```js\nWhen(/^attaches an? (.+) payload which is missing the ([a-zA-Z0-9, ]+) fields?$/, function (payloadType, missingFields) {\n  const payload = {\n    email: 'e@ma.il',\n    password: 'password',\n  };\n  const fieldsToDelete = missingFields.split(',').map(s => s.trim()).filter(s => s !== '');\n  fieldsToDelete.forEach(field => delete payload[field]);\n  this.request\n    .send(JSON.stringify(payload))\n    .set('Content-Type', 'application/json');\n});\n```", "```js\n// Inside the app.post('/users') callback\napp.post('/users', (req, res, next) => {\n  if (\n    !Object.prototype.hasOwnProperty.call(req.body, 'email')\n    || !Object.prototype.hasOwnProperty.call(req.body, 'password')\n  ) {\n    res.status(400);\n    res.set('Content-Type', 'application/json');\n    res.json({ message: 'Payload must contain at least the email and password fields' });\n  }\n  next();\n});\n```", "```js\n$ yarn run test:e2e\n.............................................................\n\n10 scenarios (10 passed)\n61 steps (61 passed)\n```", "```js\n$ git add -A && git commit -m \"Check Create User endpoint for missing fields\"\n```", "```js\nScenario Outline: Request Payload with Properties of Unsupported Type\n  When the client creates a POST request to /users\n  And attaches a Create User payload where the <field> field is not a <type>\n  And sends the request\n  Then our API should respond with a 400 HTTP status code\n  And the payload of the response should be a JSON object\n  And contains a message property which says \"The email and password fields must be of type string\"\n\n  Examples:\n  | field    | type   |\n  | email    | string |\n  | password | string |\n```", "```js\nWhen(/^attaches an? (.+) payload where the ([a-zA-Z0-9, ]+) fields? (?:is|are)(\\s+not)? a ([a-zA-Z]+)$/, function (payloadType, fields, invert, type) {\n  const payload = {\n    email: 'e@ma.il',\n    password: 'password',\n  };\n  const typeKey = type.toLowerCase();\n  const invertKey = invert ? 'not' : 'is';\n  const sampleValues = {\n    string: {\n      is: 'string',\n      not: 10,\n    },\n  };\n  const fieldsToModify = fields.split(',').map(s => s.trim()).filter(s => s !== '');\n  fieldsToModify.forEach((field) => {\n    payload[field] = sampleValues[typeKey][invertKey];\n  });\n  this.request\n    .send(JSON.stringify(payload))\n    .set('Content-Type', 'application/json');\n});\n```", "```js\nif (\n  typeof req.body.email !== 'string'\n  || typeof req.body.password !== 'string'\n) {\n  res.status(400);\n  res.set('Content-Type', 'application/json');\n  res.json({ message: 'The email and password fields must be of type string' });\n  return;\n}\n```", "```js\n$ git add -A && git commit -m \"Check data type of Create User endpoint payload\"\n```", "```js\nScenario Outline: Request Payload with invalid email format\n\n  When the client creates a POST request to /users\n  And attaches a Create User payload where the email field is exactly <email>\n  And sends the request\n  Then our API should respond with a 400 HTTP status code\n  And the payload of the response should be a JSON object\n  And contains a message property which says \"The email field must be a valid email.\"\n\n  Examples:\n\n  | email     |\n  | a238juqy2 |\n  | a@1.2.3.4 |\n  | a,b,c@!!  |\n```", "```js\nWhen(/^attaches an? (.+) payload where the ([a-zA-Z0-9, ]+) fields? (?:is|are) exactly (.+)$/, function (payloadType, fields, value) {\n  const payload = {\n    email: 'e@ma.il',\n    password: 'password',\n  };\n  const fieldsToModify = fields.split(',').map(s => s.trim()).filter(s => s !== '');\n  fieldsToModify.forEach((field) => {\n    payload[field] = value;\n  });\n  this.request\n    .send(JSON.stringify(payload))\n    .set('Content-Type', 'application/json');\n});\n```", "```js\nif (!/^[\\w.+]+@\\w+\\.\\w+$/.test(req.body.email)) {\n  res.status(400);\n  res.set('Content-Type', 'application/json');\n  res.json({ message: 'The email field must be a valid email.' });\n  return;\n}\n```", "```js\n$ git add -A && git commit -m \"Check validity of email for Create User endpoint\"\n```", "```js\nfunction getValidPayload(type) {\n  const lowercaseType = type.toLowerCase();\n  switch (lowercaseType) {\n    case 'create user':\n      return {\n        email: 'e@ma.il',\n        password: 'password',\n      };\n    default:\n      return undefined;\n  }\n}\n\nfunction convertStringToArray(string) {\n  return string\n    .split(',')\n    .map(s => s.trim())\n    .filter(s => s !== '');\n}\n\nexport {\n  getValidPayload,\n  convertStringToArray,\n};\n```", "```js\nimport { getValidPayload, convertStringToArray } from './utils';\n...\nWhen(/^attaches an? (.+) payload where the ([a-zA-Z0-9, ]+) fields? (?:is|are) exactly (.+)$/, function (payloadType, fields, value) {\n  this.requestPayload = getValidPayload(payloadType);\n  const fieldsToModify = convertStringToArray(fields);\n  fieldsToModify.forEach((field) => {\n    this.requestPayload[field] = value;\n  });\n  this.request\n    .send(JSON.stringify(this.requestPayload))\n    .set('Content-Type', 'application/json');\n});\n```", "```js\n$ git add -A && git commit -m \"Refactor test code\"\n```", "```js\nScenario: Minimal Valid User\n\n  When the client creates a POST request to /users\n  And attaches a valid Create User payload\n  And sends the request\n  Then our API should respond with a 201 HTTP status code\n  And the payload of the response should be a string\n  And the payload object should be added to the database, grouped under the \"user\" type\n```", "```js\nWhen(/^attaches a valid (.+) payload$/, function (payloadType) {\n  this.requestPayload = getValidPayload(payloadType);\n  this.request\n    .send(JSON.stringify(this.requestPayload))\n    .set('Content-Type', 'application/json');\n});\n```", "```js\nThen(/^the payload of the response should be an? ([a-zA-Z0-9, ]+)$/, function (payloadType) {\n  const contentType = this.response.headers['Content-Type'] || this.response.headers['content-type'];\n  if (payloadType === 'JSON object') {\n    // Check Content-Type header\n    if (!contentType || !contentType.includes('application/json')) {\n      throw new Error('Response not of Content-Type application/json');\n    }\n\n    // Check it is valid JSON\n    try {\n      this.responsePayload = JSON.parse(this.response.text);\n    } catch (e) {\n      throw new Error('Response not a valid JSON object');\n    }\n  } else if (payloadType === 'string') {\n    // Check Content-Type header\n    if (!contentType || !contentType.includes('text/plain')) {\n      throw new Error('Response not of Content-Type text/plain');\n    }\n\n    // Check it is a string\n    this.responsePayload = this.response.text;\n    if (typeof this.responsePayload !== 'string') {\n      throw new Error('Response not a string');\n    }\n  }\n});\n```"]