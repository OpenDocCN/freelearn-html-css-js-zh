["```js\ntype person = {*id*: int, *name*: string};\n```", "```js\n(Output from bsb -w)\n  We've found a bug for you!\n  /Users/yawar/src/learning-tydd-reason/src/Ch03/Ch03_Greet.re 10:20-22\n\n   8 │ type person = {id: int, name: string};\n   9 │ let bob = {id: 1, name: \"Bob\"};\n  10 │ let result = greet(bob);\n\n  This has type:\n    person\n  But somewhere wanted:\n    LearningTyddReason.Ch02_Demo.person (defined as\n      LearningTyddReason.Ch02_Demo.person)\n```", "```js\n/* src/Ch04/Ch04_RecordLiterals.re */\ntype person = {*id*: int, *name*: string};\n\nlet *bob* = {*name*: \"Bob\", *id*: 1}; /* (1) */\n\nlet *jim* = { /* (2) */\n  let *id* = 2;\n  let *name* = \"Jim\";\n  {*id*, *name*} /* (3) */\n};\n\nlet *tomId* = 3;\nlet *tom* = {*id*: *tomId*, *name*: \"Tom\"}; /* (4) */\n```", "```js\n(Output from bsb -w)\n  We've found a bug for you!\n  /Users/yawar/src/learning-tydd-reason/src/Ch04/Ch04_RecordLiterals.re 2:12-13\n\n  1 │ /* src/Ch04/Ch04_RecordLiterals.re */\n  2 │ let bob = {name: \"Bob\", id: 1}; /* (1) */\n  3 │ \n  4 │ let jim = { /* (2) */\n\n  The record field name can't be found.\n\n  If it's defined in another module or file, bring it into scope by:\n  - Annotating it with said module name: let baby = {MyModule.age: 3}\n  - Or specifying its type: let baby: MyModule.person = {age: 3}\n```", "```js\nlet *bob* = {*Ch02_Demo.id*: 1, *name*: \"Bob\"};\n```", "```js\n/* src/Ch04/Ch04_RecordUpdates.re */\nlet *bob* = *Ch04_RecordLiterals.bob*;\nlet *bobLongForm1* = {...*bob*, *name*: \"Robert\"}; /* (1) */\nlet *bobLongForm2* = {*Ch04_RecordLiterals.id*: *bob.id*, *name*: \"Robert\"}; /* (2) */\n```", "```js\n(Output from bsb -w)\n  We've found a bug for you!\n  /Users/yawar/src/learning-tydd-reason/src/Ch04/Ch04_RecordUpdates.re 4:20-51\n\n  2 │ let bob = Ch04_RecordLiterals.bob;\n  3 │ let bobLongForm1 = {...bob, name: \"Robert\"};\n  4 │ let bobLongForm2 = {Ch04_RecordLiterals.id: bob.id};\n\n  Some record fields are undefined: name\n```", "```js\nlet *bob* = *Ch04_RecordLiterals.bob*;\nlet *bob* = {...*bob*, *name*: \"Robert\"};\nlet *bob* = {...*bob*, *id*: *bob.id* + 1}\n```", "```js\n/* src/Ch04/Ch04_MutableFields.re */\ntype summaryStats = {\n  mutable *sum*: float, /* (1) */\n  *count*: int,\n  mutable *mean*: float\n};\n\nlet *summarise*(*array*) = {\n  let *result* = {*sum*: 0., *count*: *Array.length*(*array*), *mean*: 0.}; /* (2) */\n\n  for (*i* in 0 to *result.count* - 1) { /* (3) */\n    *result.sum* = *result.sum* +. *Array.unsafe_get*(*array*, *i*); /* (4), (5) */\n  };\n\n  *result.mean* = *result.sum* /. *float_of_int*(*result.count*); /* (6), (7) */\n  *result*\n};\n```", "```js\nlet *PATTERN* = *VALUE*;\n```", "```js\n/* src/Ch04/Ch04_RecordPatterns.re */\nopen *Ch04_RecordLiterals*; /* (1) */\n\nlet {*id*: *bobId*, *name*: *bobName*} = *bob*; /* (2) */\nlet {*id*, *name*: *jimName*} = *jim*; /* (3) */\nlet {*id*: *tomId*, *name*: _} = *tom*; /* (4) */\nlet {*name*, _} = *tom*; /* (5) */\nlet {*name*: *tomName*} = *tom*; /* (6) */\n```", "```js\n/* src/Ch04/Ch04_Tuples.re */\n\n/* ID, name */\nlet *bob* = (1, \"Bob\");\n\n/* Name, ID */\nlet *jim* = (\"Jim\", 2);\n\n/*let bobEqualsJim = bob == jim;*/\n```", "```js\n(Output from bsb -w)\n  We've found a bug for you!\n  /Users/yawar/src/learning-tydd-reason/src/Ch04/Ch04_Tuples.re 4:27-29\n\n  2 │ let bob = (1, \"Bob\");\n  3 │ let jim = (\"Jim\", 2);\n  4 │ let bobEqualsJim = bob == jim;\n\n  This has type:\n    (string, int)\n  But somewhere wanted:\n    (int, string)\n\n  The incompatible parts:\n    string\n    vs\n    int\n```", "```js\nlet (*bobId*, *bobName*) = *bob*;\nlet (*jimName*, *_*) = *jim*;\n```", "```js\n(Output from bsb -w)\n  We've found a bug for you!\n  /Users/yawar/src/learning-tydd-reason/src/Ch04/Ch04_Tuples.re 12:18-20\n\n  10 │ \n  11 │ let tom = (3, \"Tom\", 45); /* ID, name, age */\n  12 │ let (tomId, _) = tom;\n\n  This has type:\n    (int, string, int)\n  But somewhere wanted:\n    ('a, 'b)\n```", "```js\nlet *bobId* = *fst*(*bob*);\nlet *jimId* = *snd*(*jim*);\n```", "```js\n/* src/Ch04/Ch04_Objects.re */\nlet *bob* = {as _; pub *id* = 1; pub *name* = \"Bob\"}; /* (1), (2) */\n\nlet *greet*(*person*) =\n  \"Hello, \" ++\n  *person#name* ++\n  \" with ID \" ++\n  *string_of_int*(*person#id*); /* (3) */\n\nlet *jim* = {\n  pub *id* = 2;\n  pub *name* = \"Jim\";\n  pub *sayHi* = \"Hi, my name is \" ++ *this#name* /* (4) */\n};\n\n*Js.log*(*greet*(*jim*)); /* (5) */\n/*Js.log(greet({as _; pub name = \"Tom\"}));*/\n```", "```js\n(Output from bsb -w)\n  We've found a bug for you!\n  /Users/yawar/src/learning-tydd-reason/src/Ch04/Ch04_Objects.re 17:14-37\n\n  15 │ \n  16 │ Js.log(greet(jim)); /* (5) */\n  17 │ Js.log(greet({as _; pub name = \"Tom\"}));\n\n  This has type:\n    {. name : string }\n  But somewhere wanted:\n    {.. id : int, name : string }\n  The first object type has no method id\n```", "```js\n/* src/Ch04/Ch04_JsObjects.re */\nlet *bob* = {\"id\": 1, \"name\": \"Bob\"}; /* (1) */\n\nlet *greet*(*person*) =\n  \"Hello, \" ++\n  *person##name* ++\n  \" with ID \" ++\n  *string_of_int*(*person##id*); /* (2) */\n\nlet *jim* = {\"id\": 2, \"name\": \"Jim\", \"age\": 29}; /* (3) */\n\n*Js.log*(*greet*(*jim*));\n```"]