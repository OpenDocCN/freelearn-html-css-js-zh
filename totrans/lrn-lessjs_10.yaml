- en: Chapter 10. Using Bootstrap with Less
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To Bootstrap or not to Bootstrap, that is the question…
  prefs: []
  type: TYPE_NORMAL
- en: Leaving aside the clear misquote from Shakespeare's Hamlet, many developers
    might ask themselves whether they want to use a framework for their next project.
  prefs: []
  type: TYPE_NORMAL
- en: Frameworks have one clear advantage in that they can help get your site up and
    running very quickly—Bootstrap is no different. Developed by Twitter as an internal
    tool for unifying their own projects, Bootstrap has rapidly become the number
    one project on GitHub, with a user base that includes NASA and MSNBC.
  prefs: []
  type: TYPE_NORMAL
- en: 'Why talk about this in a book concerning Less, though? Easy; as you will find
    out, Bootstrap was built on Less; it is a perfect tool to help get accustomed
    to working with Less. In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap's Less file structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap's mixins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Bootstrap for your site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing a workflow for using Bootstrap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Curious? Let's get started...!
  prefs: []
  type: TYPE_NORMAL
- en: Dissecting Bootstrap's Less file structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, you've decided to take the plunge and use Bootstrap; it, like many other
    frameworks available on the Internet, is a good way to help get a website up and
    running quickly. However, this chapter is about how Less is used in Bootstrap,
    right? Absolutely; Less plays a key part in producing the CSS used to style each
    of the elements that make up the Bootstrap library. To see how, let's take a look
    at the library in more detail. To begin with, we will download it from the main
    website.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We first need to download a copy of the library—for this, visit [http://getbootstrap.com/](http://getbootstrap.com/)
    and click on **Download Bootstrap**. The Bootstrap library is currently at Version
    3.2.0 at the time of writing this and can be obtained in one of several ways,
    including via CDN or using Bower.
  prefs: []
  type: TYPE_NORMAL
- en: 'The version that is of interest to us is the source code one, so go ahead and
    click on **Source Code** and save a copy of the archive to a safe place. Once
    downloaded, extract a copy of the contents to your hard drive—on opening the archive,
    we''ll see the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Downloading the library](img/00101.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The folder that is of interest to us is naturally the `less` one—if we open
    this, we can see an array of Less mixin files within the folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of Less files that contain mixins that we can use when building
    a Bootstrap-enabled site; they can be split into four categories, namely:'
  prefs: []
  type: TYPE_NORMAL
- en: Utilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Layouts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Skins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll cover each of these categories in the *Dissecting Bootstrap's mixins*
    section later in this chapter. In the meantime, let's move on and familiarize
    ourselves with installing Bootstrap on your site.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Bootstrap for your site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although we've downloaded the source code version of Bootstrap, it's not one
    you would use by default.
  prefs: []
  type: TYPE_NORMAL
- en: Huh? I hear you ask. You'd be quite right to do so—after all, what's the point
    of downloading something you aren't going to use, right…? Well, we will make use
    of this later in the chapter; for now, it is enough to know that this contains
    all of the mixins that make up Bootstrap styles and that these can easily be customized
    at a later date.
  prefs: []
  type: TYPE_NORMAL
- en: For now, we will use the compiled version. In the *Building a more realistic
    site* section later in the chapter, we'll see the effects of what happens when
    we access the Bootstrap mixin file directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s change track and take a look at what''s required to add Bootstrap to
    your site:'
  prefs: []
  type: TYPE_NORMAL
- en: Start by creating a new folder on your hard drive and call it `projects`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the contents of the `bootstrap` folder we downloaded in the previous section
    into this folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Crack open the text editor of your choice and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the following lines just before the `</head>` tag—these are used
    by Bootstrap to make the site responsive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to add in Bootstrap''s base styles, so go ahead and add the following
    line immediately before the closing `</head>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file as `bootstrap.html` in the `projects` folder—if we preview the
    results, we will see this:![Configuring Bootstrap for your site](img/00102.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Granted, it's not going to set the world alight, but it does illustrate how
    easy it is to install Bootstrap! We will delve into a real-world example later
    in the chapter in the *Building a more realistic site* section. The key thing
    to remember is that Bootstrap is an effective collection of CSS style rules—provided
    we use the appropriate rules at the right points in our code, we can use them
    to produce anything. Bootstrap is ideal in order to help mock up a basic site;
    it then gives us the basis for developing it into something more complex at a
    later date.
  prefs: []
  type: TYPE_NORMAL
- en: Using Internet Explorer 8 or below
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we look at producing something more detailed, there is something we need
    to be aware of when using Bootstrap—this concerns our old friend, which is Internet
    Explorer.
  prefs: []
  type: TYPE_NORMAL
- en: 'The previous demo will work perfectly in modern browsers—it is worth noting,
    though, that if you still need to use IE8, then you will need to add the following
    code in your `<head>` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Internet Explorer 8 (or lower) does not support HTML5 by default, so we need
    to use two JavaScript libraries to provide fallback support for both HTML5 and
    media queries.
  prefs: []
  type: TYPE_NORMAL
- en: Okay; still with me, I hope? Good; let's move on. This is a perfect opportunity
    to delve into building a more realistic example that uses Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Building a more realistic site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although we can use Bootstrap to produce any variety of different sites, Bootstrap
    really comes into its own when used to mock up a site. It doesn't even matter
    if the colors aren't perfect from the start; it's enough to at least get a feel
    for what a page or site would look like in terms of layout. This isn't to say
    that color schemes should be discounted; they can come next, once we have a good
    idea of how the site will be laid out.
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate how useful Bootstrap can be in order to create a mock-up, we''re
    going to take a look at creating a sample page that would be perfect as a blog
    post or online article on a website. For the purposes of this example, we will
    need a copy of the code download that accompanies this book—it contains a copy
    of the HTML markup required; for reasons of space, we can''t reproduce it in full
    within the text! Okay—now that we have a copy of the code download, let''s make
    a start:'
  prefs: []
  type: TYPE_NORMAL
- en: From the code download, extract a copy of the `blogpage.html` file, which contains
    our HTML markup for the sample page. Save the file in the `projects` folder that
    we created in the previous exercise.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Crack open the text editor of your choice, and then add the following lines
    into the `<head>` tag of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, we need to download one small JavaScript file—this is the Holder plugin
    by Ivan Malopinsky. This plugin isn't essential for running Bootstrap but provides
    a nice effect for the image placeholder. Holder can be downloaded from [http://github.com/imsky/holder/zipball/v2.3.2](http://github.com/imsky/holder/zipball/v2.3.2),
    and `holder.js` extracted from the archive into the `js` folder within our `projects`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a minified copy of this plugin in the code download, which is stored
    as `docs.min.js`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save `blogpage.html`—if we preview the results in a browser, we can see our
    mocked-up page in all its glory.![Building a more realistic site](img/00103.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So, what happened here? Although it appears that we have a fair amount of code,
    in reality, we only have one block of code that is of any importance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Why is this so important, I hear you ask? Well, this is simple—Bootstrap is
    about providing a complete functionality set of styles that can help you get up
    and running quickly. Bootstrap isn't meant to be a permanent replacement, but
    it is a good starting point to develop your own styles. Indeed, as we will see
    in [Chapter 11](part0101_split_000.html#page "Chapter 11. Abstracting CSS Frameworks
    with Less"), *Abstracting CSS Frameworks with Less*, relying solely on Bootstrap
    is not always a good thing!
  prefs: []
  type: TYPE_NORMAL
- en: In this instance, we've set three meta tags—these handle the character set to
    be used, the version of IE that should be supported when displaying the page,
    and the display of the site on mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you would like to learn more about the IE compatibility and viewport tags,
    then it is worth reading the article by Microsoft at [https://www.modern.ie/en-us/performance/how-to-use-x-ua-compatible](https://www.modern.ie/en-us/performance/how-to-use-x-ua-compatible),
    which describes best practice when setting this tag. Mozilla has a useful article
    on applying the viewport tag in code, which you can view by visiting [https://developer.mozilla.org/en/docs/Mozilla/Mobile/Viewport_meta_tag](https://developer.mozilla.org/en/docs/Mozilla/Mobile/Viewport_meta_tag).
  prefs: []
  type: TYPE_NORMAL
- en: The first two can well appear on most sites—the line that is of real interest,
    though, is the link to the Bootstrap CSS file. This is a precompiled file that
    contains the Bootstrap styling, which has been generated from the Less mixins
    that form the library. We've referenced this in our code and used it to apply
    the styles defined in our HTML markup.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is worth noting, though, that if you want to use some of the jQuery plugins
    that come with Bootstrap, then you will also need to add a link to jQuery itself
    as well as the Bootstrap plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If you still need to support IE8 or lower, then change the reference for jQuery
    to `jquery-1.11.1.min.js`; Version 2 of jQuery is not supported in these earlier
    versions of IE.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling the Bootstrap CSS and JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've seen how Bootstrap can be used to great effect in getting our
    site off the ground, we can well decide that we want to move away from simply
    using the precompiled CSS file and compile the code ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main reason for doing this is to update or alter the code to fit our requirements—we
    should not forget that Bootstrap is intended to be customized in this manner!
    Fortunately, Bootstrap uses Grunt, which we discussed and installed earlier in
    the book (in [Chapter 2](part0025_split_000.html#page "Chapter 2. Building a Less
    Development Toolkit"), *Building a Less Development Toolkit*). Bootstrap comes
    preconfigured with its own `package.json` file, making compilation a cinch. All
    we have to do is:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fire up a command prompt window, and then navigate to the root of the `/bootstrap`
    folder and enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will automatically install all of the dependencies required to compile
    Bootstrap.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the same command window, enter the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will run the JSHint and QUnit tests, and then compile the CSS and JavaScript
    files into the `/dist` folder within the Bootstrap folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: That was easy enough, right? Good; let's move on and meet some of the mixins
    that come with Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Examining Bootstrap's mixins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the beginning of this chapter, we took a brief look at the file structure
    of the Bootstrap library download; now is a perfect opportunity to revisit this
    in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we open a copy of the downloaded archive and navigate to the root level
    of the `less` subfolder, we can see these mixins are spread over 29 mixin files,
    which can be split into these categories: Utilities, Components, Skins, and Layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Examining Bootstrap''s mixins](img/00104.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Most of these mixins are concerned with providing Bootstrap its core styles—the
    ones that are of particular interest are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bootstrap.less`: This is the master Less file that, when compiled and minified,
    will form `bootstrap.min.css`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`theme.less`: This contains some core theme styles'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note that if you download the version of Bootstrap directly from GitHub, then
    you will notice this additional folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Examining Bootstrap''s mixins](img/00105.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This folder contains the mixins required to control the styling for the theme;
    if we peek inside the folder, we will see the additional mixins that are used
    to create what will become `bootstrap-theme.min.css` in the production download
    file.
  prefs: []
  type: TYPE_NORMAL
- en: If we explore this folder further, we will see that most of the files stored
    there have the same names as the core mixins, but they have styles that form the
    basis for the themes within Bootstrap. It is worth noting that these mixins do
    not form part of the Less download archive that is available at [http://www.getbootstrap.com](http://www.getbootstrap.com);
    to use them, we need to download them directly from GitHub and compile them using
    Grunt/Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All of the mixins available for use in Bootstrap are stored within the `\less`
    subfolder—you can also view the original source file versions in GitHub at [https://github.com/twbs/bootstrap/tree/master/less](https://github.com/twbs/bootstrap/tree/master/less).
    The variables are stored within `variables.less`—this is in the aforementioned
    `\less` folder and is available on GitHub at [https://github.com/twbs/bootstrap/blob/master/less/variables.less](https://github.com/twbs/bootstrap/blob/master/less/variables.less).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've seen the make-up of the library, let's take a moment to reflect
    on some of the mixins that are available in the library.
  prefs: []
  type: TYPE_NORMAL
- en: Dissecting Bootstrap's mixins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we were to take a look at the mixins available for use in Bootstrap, we
    can see they are broken down into a number of groups. These groups are:'
  prefs: []
  type: TYPE_NORMAL
- en: Core variables and mixins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resets and dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Core CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Component files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Component files that use JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utility classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's take a brief look at each one in more detail, starting with the core variables
    and mixins.
  prefs: []
  type: TYPE_NORMAL
- en: Core variables and mixins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Core variables and mixins is probably one of the smallest groups of all of
    the mixins but is the most crucial—it contains `variables.less`, which lists all
    of the predefined variables available for use within Bootstrap. The second file
    contained within this group is `mixins.less`. While it is simpler in design, it
    plays an equally important role: it contains the `@import` statements that are
    used to build the `bootstrap-theme.css` file.'
  prefs: []
  type: TYPE_NORMAL
- en: Reset and dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next in the groupings come the reset and dependency mixins—to quote a phrase,
    these "do as it says on the tin"! `Normalize.less` uses the `normalize.css` project
    created by Nicolas Gallagher, which is also available from GitHub, and can be
    downloaded from [https://github.com/necolas/normalize.css](https://github.com/necolas/normalize.css).
  prefs: []
  type: TYPE_NORMAL
- en: If we're setting our site to be printable, then `print.less` is essential; it
    contains the media queries required to realign a Bootstrap in order to allow it
    to be printed. `Glyphicons.less` is a useful part of the library—it controls the
    styles required to display any of the glyph icons that come as part of the Bootstrap
    library.
  prefs: []
  type: TYPE_NORMAL
- en: Core CSS styles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this next grouping, we have a number of mixin files that perform different
    roles:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of Mixin file | Used to |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `scaffolding.less` | Control elements on a basic site, either directly or
    indirectly (by referencing styles from other mixin files) |'
  prefs: []
  type: TYPE_TB
- en: '| `type.less` | Set the default font sizes for H1 to H6 font sizes, along with
    some additional styles such as the warning or information text |'
  prefs: []
  type: TYPE_TB
- en: '| `code.less` | Determine styles when using markup such as `<code>` and `<pre>`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `grid.less` | Set up the basic styles used to control Bootstrap''s responsive
    grid functionality |'
  prefs: []
  type: TYPE_TB
- en: '| `tables.less` | Control styles for any tables we insert into our site |'
  prefs: []
  type: TYPE_TB
- en: '| `forms.less` | Apply styles to any forms that we host within our website
    |'
  prefs: []
  type: TYPE_TB
- en: '| `buttons.less` | Set up the base styles that are applied to any buttons on
    our site |'
  prefs: []
  type: TYPE_TB
- en: Components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far, most of our styles that we have looked at cover the structure of the
    site; let''s look at the component files that make up the visual elements we can
    add to any site:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of Mixin file | Used to define styles for |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `component-animations.less` | Animating any components with a site |'
  prefs: []
  type: TYPE_TB
- en: '| `dropdowns.less` | Drop-down menus |'
  prefs: []
  type: TYPE_TB
- en: '| `button-groups.less` | Grouped buttons |'
  prefs: []
  type: TYPE_TB
- en: '| `input-groups.less` | Input fields |'
  prefs: []
  type: TYPE_TB
- en: '| `navs.less, navbar.less` | Navigation bars and buttons |'
  prefs: []
  type: TYPE_TB
- en: '| `forms.less` | Form and non-form elements |'
  prefs: []
  type: TYPE_TB
- en: '| `breadcrumbs.less` | Breadcrumb trails |'
  prefs: []
  type: TYPE_TB
- en: '| `pagination.less, pager.less` | Pagination in a site |'
  prefs: []
  type: TYPE_TB
- en: '| `labels.less` | Various label styles, such as warning or danger |'
  prefs: []
  type: TYPE_TB
- en: '| `badges.less` | Badges within buttons or navigation |'
  prefs: []
  type: TYPE_TB
- en: '| `jumbotron.less` | Jumbotrons |'
  prefs: []
  type: TYPE_TB
- en: '| `thumbnails.less` | Thumbnail images and captions |'
  prefs: []
  type: TYPE_TB
- en: '| `alerts.less` | Alert messages and dialogs |'
  prefs: []
  type: TYPE_TB
- en: '| `progress-bars.less` | Progress bars |'
  prefs: []
  type: TYPE_TB
- en: '| `media.less` | Media objects, such as videos and images |'
  prefs: []
  type: TYPE_TB
- en: '| `list-group.less` | Items in a grouped or linked list |'
  prefs: []
  type: TYPE_TB
- en: '| `panels.less` | Panels and panel elements, such as titles |'
  prefs: []
  type: TYPE_TB
- en: '| `responsive-embed.less` | Embedding items such as iFrames responsively |'
  prefs: []
  type: TYPE_TB
- en: '| `wells.less` | Wells |'
  prefs: []
  type: TYPE_TB
- en: '| `close.less` | Close icons |'
  prefs: []
  type: TYPE_TB
- en: Utility classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The final grouping within the core Bootstrap files contains the utility classes—these
    are stored within `utilities.less` and `responsive-utilities.less`. These files
    contain some styles that are not immediately associated with any of the other
    mixin files but still play a part within a Bootstrap site nevertheless. Examples
    include the `.clearfix()` mixin and mixins for toggling content.
  prefs: []
  type: TYPE_NORMAL
- en: Let's change gear now and focus our attention on the mixin files that make up
    Bootstrap's theme styles.
  prefs: []
  type: TYPE_NORMAL
- en: Dissecting Bootstrap's theme mixins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to the core styles and mixins, Bootstrap provides a number of additional
    mixins that are incorporated into the Bootstrap theme's JavaScript and CSS files.
  prefs: []
  type: TYPE_NORMAL
- en: You can view these in the `mixins` subfolder under the `less` folder within
    the GitHub repository—it is worth noting that these do not appear in the Source
    Code option when downloading files from [http://www.getbootstrap.com](http://www.getbootstrap.com).
    Let's take a look at what lies within this folder—the mixins fall into a number
    of groups.
  prefs: []
  type: TYPE_NORMAL
- en: Utilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Name of Mixin file | Used to |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `hide-text.less` | Hide images when using CSS image replacement |'
  prefs: []
  type: TYPE_TB
- en: '| `opacity.less` | Set opacity levels |'
  prefs: []
  type: TYPE_TB
- en: '| `image.less` | Make images responsive. |'
  prefs: []
  type: TYPE_TB
- en: '| `labels.less` | Define colors for labels |'
  prefs: []
  type: TYPE_TB
- en: '| `reset-filter.less` | Reset filters for IE when gradient backgrounds are
    removed |'
  prefs: []
  type: TYPE_TB
- en: '| `resize.less` | Resize any element if the overflow isn''t visible |'
  prefs: []
  type: TYPE_TB
- en: '| `responsive-visibility.less` | Provide responsive states for `responsive-utilities.less`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `size.less` | Use a shortcut mixin to set the height and width for objects
    |'
  prefs: []
  type: TYPE_TB
- en: '| `tab-focus.less` | Add the `Webkit-style` focus to tabs |'
  prefs: []
  type: TYPE_TB
- en: '| `text-emphasis.less` | Add emphasis to the text |'
  prefs: []
  type: TYPE_TB
- en: '| `text-overflow.less` | Handle the text overflow—requires `display: inline`
    or `display: block` to be set for proper styling |'
  prefs: []
  type: TYPE_TB
- en: Components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Although we''ve defined most of the styles required for Bootstrap components
    by now, there are still some styles that are specific to the theme file; these
    are handled within this group of mixins:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of Mixin file | Used to |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `alerts.less` | Set the background, border, and forecolor values in alerts,
    along with the `<hr>` element and links within alerts. |'
  prefs: []
  type: TYPE_TB
- en: '| `buttons.less` | Create default styles, along with the `:hover`, `:focus`,
    `:active`, and `disabled` styles for buttons. |'
  prefs: []
  type: TYPE_TB
- en: '| `panels.less` | Define colors to be used on panel elements. |'
  prefs: []
  type: TYPE_TB
- en: '| `pagination.less` | Handle styles set for page pagination. |'
  prefs: []
  type: TYPE_TB
- en: '| `list-group.less` | Define styles used when selecting or hovering over list
    elements. |'
  prefs: []
  type: TYPE_TB
- en: '| `nav-divider.less` | Set dividers within dropdowns or navigation lists. |'
  prefs: []
  type: TYPE_TB
- en: '| `forms.less` | Generate form validation styles for use in forms. |'
  prefs: []
  type: TYPE_TB
- en: '| `progress-bar.less` | Set the background color for use with progress bars.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `table-row.less` | Set additional styles used for controlling the appearance
    of table rows. |'
  prefs: []
  type: TYPE_TB
- en: Skins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ve already defined a number of the theme styles at this point; some are
    added when applying the Bootstrap theme file:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of Mixin file | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `background-variant.less` | This mixin sets and then darkens the background
    color when hovering over it. |'
  prefs: []
  type: TYPE_TB
- en: '| `border-radius.less` | This mixin is not strictly required with the advent
    of native browser support for `border-radiu` `s`, but it is useful in order to
    set the radius value in pairs. |'
  prefs: []
  type: TYPE_TB
- en: '| `gradients.less` | This mixin sets up the styles for a number of gradient
    formats, such as striped and radial. |'
  prefs: []
  type: TYPE_TB
- en: Layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A key part of any theme is to position elements correctly on a page; this group
    of mixins handles this for the Bootstrap theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of Mixin file | Used to |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `clearfix.less` | Implement the micro clearfix hack, as created by Nicholas
    Gallagher at [http://nicolasgallagher.com/micro-clearfix-hack/](http://nicolasgallagher.com/micro-clearfix-hack/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `center-block.less` | Center-align a block-level element in the theme |'
  prefs: []
  type: TYPE_TB
- en: '| `nav-vertical-align.less` | Vertically center elements in a navigation bar
    |'
  prefs: []
  type: TYPE_TB
- en: '| `grid-framework.less` | Generate the correct number of grid classes from
    any given value of `@grid-columns`. by Bootstrap |'
  prefs: []
  type: TYPE_TB
- en: '| `grid.less` | Generate semantic grid columns |'
  prefs: []
  type: TYPE_TB
- en: Now that we understand the make-up of the library, we might well want to consider
    using different elements from it rather than just incorporating the library as
    it stands in our code, which would be wasteful on resources. However, what if
    we wanted to actually *change some of the default styles and not have to download
    everything*? Thankfully this is possible—let's take a look at how you can customize
    your Bootstrap downloads.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing our download
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've used the standard download from Bootstrap—while this has served
    us well, it can be a little awkward to start introducing our own styles.
  prefs: []
  type: TYPE_NORMAL
- en: Thankfully, the Bootstrap team has provided us with a means to allow us to build
    a custom download; while it might require a little work to determine what values
    are to be entered, it will at least allow us to tailor values to our liking! Let's
    take a look at how this works.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before doing so, we need to make one small change to our code—load up your
    copy of `blogpage.html` and comment out this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Don't worry for now. Why? All will become clear very shortly!
  prefs: []
  type: TYPE_NORMAL
- en: Start by browsing [http://getbootstrap.com/customize/#less-variables-section](http://getbootstrap.com/customize/#less-variables-section)—here,
    we can see a whole array of options that we can choose to include or discard from
    our download. If you've spent any time using jQuery UI, then the process should
    be pretty familiar to you—it is a matter of selecting or deselecting the appropriate
    checkboxes in order to include the components we need in our download.
  prefs: []
  type: TYPE_NORMAL
- en: This is a three-step process—let's begin by choosing the base CSS, components,
    and utilities that we want to use in our download.
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing our download](img/00106.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Next, we need to change the values within each component that we are going to
    include in our download. A great example here is the **Buttons** section—we created
    a button as part of our comments form, so let's go ahead and change the colors
    on the image as part of our custom download.
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing our download](img/00107.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Let's revert to the `blogpage.html` demo that we delved into earlier—if we view
    the source code for the button using a DOM Inspector such as Firebug, we can see
    the classes in use.
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing our download](img/00108.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can clearly see two classes in use—the base `.btn` and `.btn-primary`. Using
    a DOM Inspector such as Firebug, we can see the compiled styles for `.btn`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'On its own, this won''t show you a great deal—it will really begin to make
    sense once we take a look at the `.btn-primary` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: At this point, if we browse [http://getbootstrap.com/customize/#less-variables](http://getbootstrap.com/customize/#less-variables),
    we can see all of the Less variables that can be customized in our download. We
    can see that the `#428bca` value is being set by the `@btn-primary` value.
  prefs: []
  type: TYPE_NORMAL
- en: What is Less easy to spot, though, is how `#357ebd` is being set—this value
    is set using the `@btn-primary-border` variable, which is darkened by 5 percent.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To see the effects of lightening or darkening colors, visit the Hex Color tool
    site at [http://www.hexcolortool.com](http://www.hexcolortool.com), enter your
    hex value (without the hash), and click on **Lighten** or **Darken** to see a
    range of colors and their values.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also see how the button''s colors are being set—it is worth browsing
    the `buttons.less` mixin file on GitHub at [https://github.com/twbs/bootstrap/blob/master/less/buttons.less](https://github.com/twbs/bootstrap/blob/master/less/buttons.less),
    where we can see the mixin in action on line 60:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now that we've seen how the variables link back to the mixins, let's make a
    change to our download by setting a nice shade of red for our button.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the values in our download
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Altering the code download from Bootstrap is a cinch—we simply need to choose
    our primary colors, alter the ones already shown, and hit **Download** at the
    bottom of the page to get our customized library. Let''s do this now—you''ll see
    how easy it is:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by browsing [http://getbootstrap.com/customize/#less-variables](http://getbootstrap.com/customize/#less-variables)
    and altering the value for `@brand-primary to #be0000`, as shown:![Changing the
    values in our download](img/00109.jpeg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, scroll down to the bottom of the page, and click on **Compile and Download**—save
    the folder to a safe location, when prompted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We now have the library, but need to update our code. Remember how I asked
    you to comment out the line referencing the `bootstrap-theme.css` file? Well,
    here''s why: the customized downloads only apply to the core styles, and not the
    theme that has been applied. If we had not commented out this line, then our change
    would have been redundant—the theme would have overridden it!'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: At this point, go ahead and rename the CSS folder in our project folder—open
    the archive file we've just downloaded and copy the `css` folder into the project
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we browse a copy of the `blogpage.html` file and refresh the screen, we can
    see the updated colors in use on the **Submit** button.
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the values in our download](img/00110.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we open up a DOM Inspector such as Firebug, we can see that the code has
    changed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'A look at the `.btn-primary` styles, show us the new values as a result of
    the change in our CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: There are plenty more styles we can change—the world is our oyster! To help
    with changing colors, it's easier to change the existing hex color codes rather
    than swapping out the functions for explicit colors. If we leave the calculation
    statements alone, then we can be sure that they render the right shades of updated
    colors correctly, such as `:hover`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A modified version of the CSS folder, which incorporates this color change,
    is included in the code download that accompanies this book. You will need to
    extract a copy of the `REDcss` folder and rename it in order to replace the default
    `css` folder that comes with Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Let's change track now and move on—one of the key parts of using Bootstrap is
    developing your own workflow process; while there is no right or wrong answer,
    we'll look at an example that you can develop for your own projects.
  prefs: []
  type: TYPE_NORMAL
- en: Developing a workflow for using Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've seen something of how Bootstrap can be configured for use when
    creating a basic site, the final key stage in our journey using Bootstrap is to
    begin to develop a workflow that helps us be as efficient as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, designing our workflow will be a very personal affair—the same method
    won't suit everyone! The key to this is to find something that works for you;
    to give you a flavor of how to go about it, it is worth reading an article by
    Erik Flowers, which is available at [http://www.helloerik.com/bootstrap-3-less-workflow-tutorial](http://www.helloerik.com/bootstrap-3-less-workflow-tutorial).
  prefs: []
  type: TYPE_NORMAL
- en: 'In summary, his workflow centers on the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download a copy of the Bootstrap library from [http://www.getbootstrap.com](http://www.getbootstrap.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Decide which method you want to use to compile your Less files—will it be in
    a preprocessor app such as Crunch!, via the command line, or as an add-on package
    to an editor such as Sublime Text?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a source folder to hold your Less files—the name is not critical as long
    as you know what and where it is being stored.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a folder within the source folder, called `vendor`, and store copies
    of the Bootstrap Less files within it—this is to help keep yourself from making
    changes to core files that would be overwritten when upgrading Bootstrap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside your source folder, create a file called `styles.less` that imports `bootstrap/bootstrap.less`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Store any other Less files that are required within the top level source folder,
    and then import them to `styles.less` using the same format.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add your Less style rules into these individual files and not the `styles.less`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compile `styles.less` to wherever you want to refer to your `styles.css`; minify
    or compress the files as desired, either separately, or as part of using a package
    such as Grunt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While there are a few steps involved, this should give you a feel for an example
    workflow—it is worth noting that some of this can, potentially, be automated;
    the key to this is to ensure that it fits with any existing process that you have
    in place as part of your development workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For a project that was originally created for internal use within Twitter, Bootstrap
    has rapidly become one of the world's most popular projects on GitHub. Let's take
    a moment to recap what we've covered throughout this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We kicked off our journey with a look at downloading the library, followed by
    configuring it for use within our projects. We then created a basic example to
    illustrate how easy it is to add it to your projects; we then developed this into
    a more realistic example in order to better show how Bootstrap would look.
  prefs: []
  type: TYPE_NORMAL
- en: We moved on and examined how easy it is to compile Bootstrap's mixins in order
    to produce valid CSS code; we then covered the make-up of the `less` folder within
    the code download in order to see what mixins are available and how they make
    up Bootstrap. We then finished looking at Bootstrap by delving into how we can
    customize the download in order to tailor it more towards our needs.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on now—in the next chapter, we'll take a look at abstracting CSS
    frameworks using Less and why using Bootstrap isn't actually as good as it might
    first seem!
  prefs: []
  type: TYPE_NORMAL
