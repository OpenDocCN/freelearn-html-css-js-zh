- en: '21'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '21'
- en: 'SportsStore: Deployment'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SportsStore：部署
- en: In this chapter, I complete the SportsStore application and prepare it for deployment
    to a container platform. As part of the preparations, I move from the file-based
    SQLite database to a conventional database server and introduce an HTTPS proxy,
    which will allow multiple instances of the SportsStore application to receive
    requests and share load.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我完成了SportsStore应用程序，并为其部署到容器平台做准备。作为准备的一部分，我将从基于文件的SQLite数据库迁移到传统的数据库服务器，并引入HTTPS代理，这将允许多个SportsStore应用程序实例接收请求并分担负载。
- en: Preparing for this chapter
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备本章
- en: This chapter uses the `sportsstore` project from *Chapter 20*. Open a new command
    prompt, navigate to the `sportsstore` folder, and run the command shown in *Listing
    21.1* to start the development tools.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章使用的是来自*第20章*的 `sportsstore` 项目。打开一个新的命令提示符，导航到 `sportsstore` 文件夹，并运行*列表21.1*中显示的命令以启动开发工具。
- en: '**Tip**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: You can download the example project for this chapter – and for all the other
    chapters in this book – from [https://github.com/PacktPublishing/Mastering-Node.js-Web-Development](https://github.com/PacktPublishing/Mastering-Node.js-Web-Development).
    See *Chapter 1* for how to get help if you have problems running the examples.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[https://github.com/PacktPublishing/Mastering-Node.js-Web-Development](https://github.com/PacktPublishing/Mastering-Node.js-Web-Development)下载本章的示例项目——以及本书中所有其他章节的示例项目。有关运行示例时遇到问题的帮助，请参阅*第1章*。
- en: 'Listing 21.1: Starting the development tools'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 列表21.1：启动开发工具
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Open a new browser window, navigate to `http://localhost:5000`, and you will
    see the product catalog, as shown in *Figure 21.1*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个新的浏览器窗口，导航到 `http://localhost:5000`，您将看到产品目录，如图*图21.1*所示。
- en: '![](img/B21959_21_01.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_21_01.png)'
- en: 'Figure 21.1: Running the application'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图21.1：运行应用程序
- en: Installing Docker Desktop
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Docker Desktop
- en: There are many ways to deploy an application, and there is no way that I can
    describe them all. Instead, I have chosen the approach that offers the most flexibility,
    which is to use *containers*. Containers are lightweight virtual machines that
    run self-contained *images* and are built and deployed using standard tools. Containers
    are portable and can be deployed to private and cloud infrastructures, which makes
    them a good choice for most applications.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 部署应用程序有许多方法，我无法一一描述。相反，我选择了提供最大灵活性的方法，即使用*容器*。容器是轻量级的虚拟机，运行自包含的*镜像*，并使用标准工具构建和部署。容器是可移植的，可以部署到私有和云基础设施，这使得它们成为大多数应用程序的好选择。
- en: The most popular tool for creating and managing containers is Docker. Go to
    `docker.com` and download and install the Docker Desktop package. Follow the installation
    process, reboot your machine, and run the command shown in *Listing 21.2* to check
    that Docker has been installed and is in your path. (The Docker installation process
    seems to change often, which is why I have not been more specific about the process.)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 创建和管理容器最流行的工具是Docker。访问 `docker.com`，下载并安装Docker Desktop软件包。遵循安装过程，重新启动您的计算机，并运行*列表21.2*中显示的命令以检查Docker是否已安装并位于您的路径中。（Docker的安装过程似乎经常变化，这就是为什么我没有更具体地说明过程。）
- en: You will have to create an account on `docker.com`; the free version of Docker
    contains all of the features needed for this chapter and the paid-for services
    are not required.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在 `docker.com` 上创建一个账户；Docker的免费版本包含了本章所需的所有功能，而付费服务不是必需的。
- en: 'Listing 21.2: Checking the Docker Desktop installation'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 列表21.2：检查Docker Desktop安装
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If Docker is installed and running, you will see a response similar to this
    one:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Docker已安装并正在运行，您将看到类似以下响应：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You may see a different version number, but that’s OK because the point is to
    make sure that Docker Desktop is up and running.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能看到不同的版本号，但这没关系，因为重点是确保Docker Desktop正在运行。
- en: Managing the database
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理数据库
- en: Throughout this part of the book, the SportsStore application has been configured
    to automatically recreate and seed the database each time the server is started.
    I generally like this approach for my own projects, but it is especially useful
    for book examples because it ensures that the reader is always working with clean
    data and removes one potential cause of problems, where the code changes and becomes
    out of sync with the database schema.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的这一部分，SportsStore应用程序已被配置为每次服务器启动时自动重新创建和初始化数据库。我通常喜欢在自己的项目中采用这种方法，但对于本书的示例来说，它特别有用，因为它确保读者始终在干净的数据上工作，并消除了一个潜在的问题，即代码更改与数据库模式不同步。
- en: In production, the database should not be reset every time the server starts,
    but it is still important to ensure that the database is created and seeded during
    the initial deployment. To extend the administration tool so that the database
    can be reset and reseeded, add a file named `database_routes.ts` to the `src/routes/admin`
    folder, with the content shown in *Listing 21.3*.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中，每次服务器启动时不应重置数据库，但在初始部署期间确保数据库被创建和播种仍然很重要。为了扩展管理工具，以便可以重置和重新播种数据库，请将名为
    `database_routes.ts` 的文件添加到 `src/routes/admin` 文件夹中，内容如 *列表 21.3* 所示。
- en: 'Listing 21.3: The contents of the database_routes.ts file in the src/routes/admin
    folder'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 21.3：src/routes/admin 文件夹中 database_routes.ts 文件的内容
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The handler for `GET` requests renders a template named `admin/db_mgt`, which
    will present the user with the ability to reset the database. The handler for
    `POST` requests accesses the `Sequelize` object created by the repository through
    the `sequelize` property added to model classes, calls the `drop` and `sync` methods
    to reset the database, and then populates the database with the seed data. *Listing
    21.4* enables the new routes and defines a direct navigation URL.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`GET` 请求的处理程序渲染一个名为 `admin/db_mgt` 的模板，该模板将使用户能够重置数据库。`POST` 请求的处理程序通过添加到模型类的
    `sequelize` 属性访问由存储库创建的 `Sequelize` 对象，调用 `drop` 和 `sync` 方法来重置数据库，然后使用种子数据填充数据库。*列表
    21.4* 启用新路由并定义了一个直接导航 URL。'
- en: 'Listing 21.4: Enabling routes in the index.ts file in the src/routes/admin
    folder'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 21.4：在 src/routes/admin 文件夹中的 index.ts 文件中启用路由
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Add a file named `db_mgt.handlebars` to the `templates/admin` folder, with the
    content shown in *Listing 21.5*.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 将名为 `db_mgt.handlebars` 的文件添加到 `templates/admin` 文件夹中，内容如 *列表 21.5* 所示。
- en: 'Listing 21.5: The contents of the db_mgt.handlebars file in the templates/admin
    folder'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 21.5：templates/admin 文件夹中 db_mgt.handlebars 文件的内容
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The template contains a `button` element that sends a `POST` request to the
    handler defined in *Listing 21.4*, with an `h5` element that displays a message
    provided by the handler. *Listing 21.6* adds a button in the `area_buttons` template
    to include the database features in the content presented to the user.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 模板包含一个发送到在 *列表 21.4* 中定义的处理器的 `POST` 请求的 `button` 元素，以及一个显示处理器提供的消息的 `h5` 元素。*列表
    21.6* 在 `area_buttons` 模板中添加了一个按钮，以便将数据库功能包含在向用户展示的内容中。
- en: 'Listing 21.6: Adding a button in the area_buttons.handlebars file in the templates/admin
    folder'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 21.6：在 templates/admin 文件夹中的 area_buttons.handlebars 文件中添加按钮
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Use a browser to request `http://localhost:5000/admin`, authenticate using OAuth,
    and click the **Delete** button for a few of the products. It doesn’t matter how
    many or which ones you remove, since the purpose is to ensure that the database
    is reset and reseeded. Click the **Database** button, and then click **Reset &
    Seed Database**. Once the database has been reset, click the **Products** button
    and you will see the original data, as shown in *Figure 21.2*.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用浏览器请求 `http://localhost:5000/admin`，使用 OAuth 进行身份验证，然后点击几个产品的 **删除** 按钮。你移除多少或哪些产品都无关紧要，因为目的是确保数据库被重置并重新播种。点击
    **数据库** 按钮，然后点击 **重置并播种数据库**。一旦数据库被重置，点击 **产品** 按钮，你将看到如图 21.2 所示的原始数据。
- en: '![](img/B21959_21_02.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_21_02.png)'
- en: 'Figure 21.2: Resetting the database'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21.2：重置数据库
- en: Toggling the application environment
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 切换应用程序环境
- en: The SportsStore application will be deployed in a Docker container, which will
    be configured to set the application environment to `production`. It is helpful
    to be able to switch to the production environment outside of the container in
    order to prepare the application for deployment. One way to do this is to set
    an environment variable named `NODE_ENV` using the command prompt used to start
    Node.js, but that can be difficult to do consistently when there are multiple
    developers, each with their own command prompt or shell preferences, each of which
    deals with environment variables in its own way. A more reliable way is to rely
    on the `dotenv` package, which reads environment variables from files.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: SportsStore 应用程序将在 Docker 容器中部署，该容器被配置为将应用程序环境设置为 `production`。能够在容器外部切换到生产环境以便为部署准备应用程序是有帮助的。一种方法是通过启动
    Node.js 所使用的命令提示符设置名为 `NODE_ENV` 的环境变量，但这在有多位开发者，每位开发者都有自己的命令提示符或 shell 偏好，并且他们以自己的方式处理环境变量时可能难以做到一致。一种更可靠的方法是依赖于
    `dotenv` 包，该包从文件中读取环境变量。
- en: Add a file named `overrides.env` to the `sportsstore` folder, with the content
    shown in *Listing 21.7*. This is a temporary file, just to confirm that the application
    behaves as it should before it is prepared for deployment.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在`sportsstore`文件夹中添加一个名为`overrides.env`的文件，内容如*列表21.7*所示。这是一个临时文件，只是为了确认在准备部署之前应用程序的行为是否符合预期。
- en: 'Listing 21.7: The contents of the overrides.env file in the sportsstore folder'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 列表21.7：sportsstore文件夹中`overrides.env`文件的内容
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Listing 21.8* uses the `dotenv` package to read the `.env` file, which is
    done as soon as the application starts.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表21.8*使用`dotenv`包读取`.env`文件，这是在应用程序启动时完成的。'
- en: 'Listing 21.8: Reading the .env file in the index.ts file in the src/config
    folder'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 列表21.8：在src/config文件夹中的index.ts文件中读取.env文件
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You may be tempted to override the value returned by `getEnvironment` in the
    `config` module, which was created in *Chapter 16*. This will affect all of the
    custom *SportsStore* code, which has been written to use the `config` module,
    but it won’t change the behavior of the third-party packages on which *SportsStore*
    relies. The `NODE_ENV` environment variable is a widely used convention, and many
    packages alter their behavior based on its value. The `express-handlebars` package,
    which integrates Handlebars templates into the Express framework, automatically
    compiles and caches template files when `NODE_ENV` is set to production, for example.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会想覆盖在*第16章*中创建的`config`模块中`getEnvironment`返回的值。这将影响所有为使用`config`模块而编写的自定义*SportsStore*代码，但它不会改变*SportsStore*所依赖的第三方包的行为。`NODE_ENV`环境变量是一个广泛使用的约定，许多包根据其值改变其行为。例如，将Handlebars模板集成到Express框架中的`express-handlebars`包，当`NODE_ENV`设置为生产时，会自动编译和缓存模板文件。
- en: The application won’t run in production mode because there are no settings for
    the secrets used to sign session cookies or perform OAuth requests. *Listing 21.9*
    adds settings to the `overrides` file so that the application can be prepared
    for deployment.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序无法在生产模式下运行，因为没有为用于签名会话cookie或执行OAuth请求的秘密设置。*列表21.9*向`overrides`文件中添加了设置，以便应用程序可以准备部署。
- en: 'Listing 21.9: Adding settings in the overrides.env file in the sportsstore
    folder'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 列表21.9：在sportsstore文件夹中的overrides.env文件中添加设置
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You must replace the placeholder text in *Listing 21.9* with the client ID and
    secret provided by Google when you configured OAuth in *Chapter 19*. The application
    will start without these settings, but you won’t be able to authenticate with
    the administration tools and populate the database.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须将*列表21.9*中的占位符文本替换为在*第19章*配置OAuth时Google提供的客户端ID和秘密。没有这些设置，应用程序将启动，但您将无法使用管理工具进行身份验证并填充数据库。
- en: Stop the application and run the command shown in *Listing 21.10* in the `sportsstore`
    folder to start just the Node.js server. The **webpack** bundler, which was useful
    in ensuring that the client was updated during development, is no longer required.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 停止应用程序，并在`sportsstore`文件夹中运行*列表21.10*中显示的命令以仅启动Node.js服务器。在开发期间确保客户端更新的**webpack**打包器现在不再需要。
- en: 'Listing 21.10: Starting the Node.js server'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 列表21.10：启动Node.js服务器
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The server will still be built and restarted when there is a change, but the
    webpack development server isn’t started, and the `production` environment configured
    in the `overrides.env` file means that the Node.js server will handle all HTTP
    requests without attempting to forward them. Before moving on, check that the
    application is running correctly by using the browser to request `http://localhost:5000`,
    which should produce the catalog display shown in *Figure 21.3*.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当有更改时，服务器仍将构建和重启，但webpack开发服务器不会启动，`overrides.env`文件中配置的`production`环境意味着Node.js服务器将处理所有HTTP请求，而不会尝试转发它们。在继续之前，请通过浏览器请求`http://localhost:5000`来检查应用程序是否运行正确，它应该显示*图21.3*中的目录显示。
- en: '![](img/B21959_21_03.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_21_03.png)'
- en: 'Figure 21.3: Running the application in production mode'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图21.3：在生产模式下运行应用程序
- en: Using a database server
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数据库服务器
- en: It should be clear by now that I am a huge fan of the SQLite database, which
    is packaged with features and is supported by every major package and framework.
    The main limitation of SQLite is that it can’t be readily shared between multiple
    Node.js servers, so it is time to move to a conventional database server that
    can be queried over a network. The database I am going to use in this chapter
    is PostgreSQL, usually referred to just as Postgres. As I noted in *Part 2*, all
    of the mainstream databases are good, but I picked Postgres because it is the
    most popular open-source database and because it is well supported by the `Sequelize`
    ORM package.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，应该很清楚我是一个SQLite数据库的超级粉丝，它包含了许多功能，并且被每个主要包和框架支持。SQLite的主要限制是它不能在多个Node.js服务器之间轻松共享，因此是时候迁移到一个可以通过网络查询的传统数据库服务器了。在本章中，我将使用PostgreSQL，通常简称为Postgres。正如我在*第2部分*中提到的，所有主流数据库都很好，但我选择Postgres是因为它是最受欢迎的开源数据库，并且它得到了`Sequelize`
    ORM包的良好支持。
- en: The simplest way to use Postgres is by running the database server in a container.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Postgres最简单的方法是在容器中运行数据库服务器。
- en: Open a new command prompt and run the command shown in *Listing 21.11* to download
    an image for Postgres and use it to create a new container. The command may take
    a few moments to complete because the image has to be downloaded the first time
    it is used, but it will be cached for subsequent operations.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个新的命令提示符，并运行*列表21.11*中显示的命令以下载Postgres的镜像，并使用它创建一个新的容器。由于第一次使用时需要下载镜像，因此命令可能需要一些时间来完成，但后续操作将使用缓存。
- en: 'Listing 21.11: Creating a container'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 列表21.11：创建容器
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `docker run` command creates a new container. The `-e` argument sets environment
    variables for the container and, in this case, is used to set the password that
    is used to access the database server. The `-p` argument configures the network
    ports and is used to expose port `5432` so that it can be accessed from the host
    operating system, allowing the database server to be used from outside of its
    container. Leave the command prompt open. The container will run until the `docker
    run` command is terminated with *Ctrl + C*.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker run`命令创建一个新的容器。`-e`参数设置容器的环境变量，在这种情况下，用于设置访问数据库服务器的密码。`-p`参数配置网络端口，用于公开端口`5432`，以便可以从主机操作系统访问，允许从容器外部使用数据库服务器。保持命令提示符打开。容器将一直运行，直到使用*Ctrl
    + C*终止`docker run`命令。'
- en: Run the commands shown in *Listing 21.12* in the `sportsstore` folder to install
    the packages that will allow Sequelize to work with Postgres.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在`sportsstore`文件夹中运行*列表21.12*中显示的命令，安装允许Sequelize与Postgres一起工作的包。
- en: 'Listing 21.12: Adding database packages'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 列表21.12：添加数据库包
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*Table 21.1* describes these packages for quick reference.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '*表21.1*描述了这些包以供快速参考。'
- en: 'Table 21.1: The CookieOptions packges'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 表21.1：CookieOptions包
- en: '| Name | Description |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| `pg` | This package contains support for communicating with Postgres servers.
    |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `pg` | 此包包含与Postgres服务器通信的支持。|'
- en: '| `pg-hstore` | This package contains support for storing JSON data in a Postgres
    database. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `pg-hstore` | 此包包含在Postgres数据库中存储JSON数据的功能。|'
- en: Add a file named `production.server.config.json` in the `sportsstore` folder,
    with the content shown in *Listing 21.13*.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在`sportsstore`文件夹中添加一个名为`production.server.config.json`的文件，其内容如*列表21.13*所示。
- en: 'Listing 21.13: The contents of the production.server.config.json in the sportsstore
    folder'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 列表21.13：sportsstore文件夹中production.server.config.json的内容
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The settings in *Listing 21.13* override those defined in the `server.config.json`
    file and are only applied when the application is in the `production` environment.
    Both configuration sections disable resetting the database every time and provide
    the configuration settings to connect to the database in the container.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表21.13*中的设置会覆盖`server.config.json`文件中定义的设置，并且仅在应用程序处于`production`环境时应用。这两个配置部分都禁用了每次重置数据库，并提供了连接到容器中数据库的配置设置。'
- en: Stop the Node.js application and run the command shown in *Listing 21.14* in
    the `sportstore` folder to start it again using the new configuration file.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 停止Node.js应用程序，并在`sportstore`文件夹中运行*列表21.14*中显示的命令，以使用新的配置文件重新启动它。
- en: 'Listing 21.14: Starting the application'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 列表21.14：启动应用程序
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The application should connect to the Postgres database server. Use a browser
    to request `http://localhost:5000/admin`, authenticate using a Google account,
    and populate the database by clicking the **Reset & Seed** **Database** button
    in the **Database** section. Click the **Products** selection to confirm the database
    has been populated, as shown in *Figure 21.4*.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序应连接到 Postgres 数据库服务器。使用浏览器请求 `http://localhost:5000/admin`，使用 Google 账户进行身份验证，并通过点击
    **数据库** 部分的 **重置 & 种子** **数据库** 按钮来填充数据库。点击 **产品** 选择以确认数据库已被填充，如图 *图 21.4* 所示。
- en: '![](img/B21959_21_04.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21959_21_04.png)'
- en: 'Figure 21.4: Populating the database'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21.4：填充数据库
- en: Use *Ctrl + C* to stop both the application and the database once you have confirmed
    that *SportsStore* is working with Postgres.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 确认 *SportsStore* 与 Postgres 一起工作后，使用 *Ctrl + C* 停止应用程序和数据库。
- en: Creating the SportsStore Docker image
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 SportsStore Docker 镜像
- en: The next step is to prepare an image that contains Node.js, the *SportsStore*
    application, all of the packages that it relies on, the templates, and the configuration
    files. The first step is to create a file that tells Docker to ignore the `node_modules`
    folder, which causes a slowdown in the creation of an image because all of the
    folders are scanned. Create a file named `.dockerignore` in the `sportsstore`
    folder, with the contents shown in *Listing 21.15*.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是准备一个包含 Node.js、*SportsStore* 应用程序、它所依赖的所有包、模板和配置文件的镜像。第一步是创建一个文件，告诉 Docker
    忽略 `node_modules` 文件夹，因为所有文件夹都会被扫描，这会导致镜像创建速度变慢。在 `sportsstore` 文件夹中创建一个名为 `.dockerignore`
    的文件，其内容如 *列表 21.15* 所示。
- en: 'Listing 21.15: The contents of the .dockerignore file in the sportsstore folder'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 21.15：sportsstore 文件夹中 .dockerignore 文件的内容
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The next step is to create the file that tells Docker how to create the image.
    Add a file named `Dockerfile` (with no file extension) to the `sportsstore` folder
    with the content shown in *Listing 21.16*.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建一个文件，告诉 Docker 如何创建镜像。将一个名为 `Dockerfile`（不带文件扩展名）的文件添加到 `sportsstore`
    文件夹中，其内容如 *列表 21.16* 所示。
- en: 'Listing 21.16: The contents of the Dockerfile file in the sportsstore folder'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 21.16：sportsstore 文件夹中 Dockerfile 文件的内容
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`Dockerfile` contains a series of instructions that will be used to build the
    image. The `FROM` command tells Docker to use the image for the version of Node.js
    used throughout this book as the foundation for the image, which simplifies the
    setup process.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`Dockerfile` 包含一系列用于构建镜像的指令。`FROM` 命令告诉 Docker 使用本书中使用的 Node.js 版本的镜像作为基础，这简化了设置过程。'
- en: 'The `COPY` commands tell Docker to copy files from the project into the container.
    The `WORKDIR` command changes the working directory for subsequent commands. This
    command installs the packages required to run the application:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`COPY` 命令告诉 Docker 从项目复制文件到容器中。`WORKDIR` 命令更改后续命令的工作目录。此命令安装运行应用程序所需的包：'
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `--omit` argument is used to exclude the packages that were added with the
    `npm install --save-dev` command, which means that packages such as the TypeScript
    compiler won’t be included in the image.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`--omit` 参数用于排除使用 `npm install --save-dev` 命令添加的包，这意味着像 TypeScript 编译器这样的包将不会包含在镜像中。'
- en: 'The command that follows installs a package that is only required when the
    application is deployed:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个命令安装一个仅在应用程序部署时才需要的包：
- en: '[PRE18]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Coordinating between containers can be difficult and it is important to ensure
    that the SportsStore application isn’t started until the database server is ready
    to receive requests. The `wait-for-it` package waits until a TCP port has been
    opened and is a simple and reliable way to ensure that the application in one
    container is ready before another container is started.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在容器之间进行协调可能很困难，并且确保 SportsStore 应用程序在数据库服务器准备好接收请求之前不启动是很重要的。`wait-for-it` 包等待一个
    TCP 端口被打开，这是一种简单且可靠的方法，确保在一个容器启动之前另一个容器中的应用程序已经准备好。
- en: The `ENV` commands set the environment variables and are used to set `production`
    mode and define the secrets used to sign cookies and perform Google OAuth requests.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`ENV` 命令设置环境变量，并用于设置 `production` 模式和定义用于签名 cookie 和执行 Google OAuth 请求的秘密。'
- en: The `EXPOSE` command tells Docker to expose port `5000`, which will allow the
    SportsStore application to receive HTTP requests. The `ENTRYPOINT` command is
    executed when the container is started and comes in two parts. The first part
    uses the `wait-for-it` package to block until port `5432` on a server named `postgres`
    is open. This is the name that will be given to the database when the containers
    are connected in the *Composing the application and database servers* section.
    The second part runs the `server.js` file in the `dist` folder, which will start
    the *SportsStore* application.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`EXPOSE`命令告诉Docker公开端口`5000`，这将允许SportsStore应用程序接收HTTP请求。`ENTRYPOINT`命令在容器启动时执行，并分为两部分。第一部分使用`wait-for-it`包阻塞，直到名为`postgres`的服务器上的端口`5432`打开。这是在*组合应用程序和数据库服务器*部分中将为数据库赋予的名称。第二部分在`dist`文件夹中运行`server.js`文件，这将启动*SportsStore*应用程序。'
- en: Preparing the application
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备应用程序
- en: Images are a snapshot of an application and its associated files. Before creating
    the image, it is important to make any final configuration changes and build the
    code to make sure that the JavaScript included in the image reflects the final
    TypeScript code.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 镜像是应用程序及其相关文件的快照。在创建镜像之前，进行任何最终的配置更改并构建代码非常重要，以确保镜像中包含的JavaScript反映了最终的TypeScript代码。
- en: '*Listing 21.17* alters the name used for the Postgres server from `localhost`
    to `postgres`, which is the name that will be given to the database server when
    it is deployed.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表21.17*将Postgres服务器的名称从`localhost`更改为`postgres`，这是在部署时将赋予数据库服务器的名称。'
- en: '**Note**'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: In a real project, you would also change the OAuth redirection URLs so that
    they contain the public domain name by which your users connect to the service.
    The *SportsStore* application will only be used on the development machine, and
    so the redirection URLs containing `localhost` will continue to work, but this
    will not be the case for real projects.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际项目中，你还会更改OAuth重定向URL，以便它们包含用户连接到服务的公共域名。*SportsStore*应用程序将仅在开发机器上使用，因此包含`localhost`的重定向URL将继续工作，但对于实际项目来说情况并非如此。
- en: 'Listing 21.17: Changing the server name in the production.server.config.json
    file in the sportsstore folder'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 列表21.17：在sportsstore文件夹中的production.server.config.json文件中更改服务器名称
- en: '[PRE19]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Run the command shown in *Listing 21.18* in the `sportsstore` folder to run
    the TypeScript compiler to create the final build of the code.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在`sportsstore`文件夹中运行*列表21.18*中显示的命令，以运行TypeScript编译器来创建代码的最终构建版本。
- en: 'Listing 21.18: Compiling the TypeScript code'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 列表21.18：编译TypeScript代码
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Creating the SportsStore image
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建SportsStore镜像
- en: Run the command shown in *Listing 21.19* in the `sportsstore` folder to create
    the image that contains the SportsStore application.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在`sportsstore`文件夹中运行*列表21.19*中显示的命令，以创建包含SportsStore应用程序的镜像。
- en: 'Listing 21.19: Creating the sportsstore image'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 列表21.19：创建sportsstore镜像
- en: '[PRE21]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As the image is created, you will see output similar to the following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当图像创建时，你将看到类似以下输出的内容：
- en: '[PRE22]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This command can take a while to run because the Node.js image must be downloaded,
    and the packages required by the SportsStore application have to be installed.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令可能需要一段时间才能运行，因为必须下载Node.js镜像，并且SportsStore应用程序所需的包必须安装。
- en: Composing the application and database servers
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组合应用程序和数据库服务器
- en: The next step is to create the configuration file that specifies how the SportsStore
    and Postgres images will be used to create containers. This step is dependent
    on how the containers are going to be deployed, for which there are many options.
    All of the major cloud platforms provide support for using containers, and the
    configuration will have to be adapted to the needs and features of the target
    platform.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建配置文件，该文件指定如何使用SportsStore和Postgres镜像来创建容器。这一步骤取决于容器将如何部署，有多个选项。所有主要的云平台都提供使用容器的支持，并且配置必须根据目标平台的需求和功能进行调整。
- en: For this chapter, I am going to use Docker Compose, which is the built-in tool
    provided with Docker Desktop. You may not use Docker Compose for your projects,
    but it has the same core features that you will encounter regardless of how you
    deploy, and it makes it easy to combine and test containers to create a complete
    application. Add a file named `docker-compose.yml` to the `sportsstore` folder
    with the content shown in *Listing 21.20*.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，我将使用 Docker Compose，这是 Docker Desktop 内置的工具。你可能不会在你的项目中使用 Docker Compose，但它具有你将遇到的相同核心功能，无论你如何部署，它都使得组合和测试容器以创建完整的应用程序变得容易。将一个名为
    `docker-compose.yml` 的文件添加到 `sportsstore` 文件夹中，其内容如 *列表 21.20* 所示。
- en: 'Listing 21.20: The contents of the docker-compose.yml file in the sportsstore
    folder'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 21.20：`sportsstore` 文件夹中 docker-compose.yml 文件的内容
- en: '[PRE23]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The format of the file is YAML, which is sensitive to indentation and the contents
    must be entered exactly as shown. Most code editors, including Visual Studio Code,
    include YAML syntax highlighting, which helps identify content or formatting errors.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 文件的格式是 YAML，它对缩进很敏感，内容必须与显示的完全一致。大多数代码编辑器，包括 Visual Studio Code，都包含 YAML 语法高亮，这有助于识别内容或格式错误。
- en: The configuration in *Listing 21.20* tells Docker Compose to create two containers.
    The first, which will be given the name `postgres`, contains the database server.
    This service is configured with a volume, which is the Docker feature for persisting
    data and, without which, the contents of the database would be lost.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 21.20* 中的配置告诉 Docker Compose 创建两个容器。第一个，将被命名为 `postgres`，包含数据库服务器。此服务配置了一个卷，这是
    Docker 用于持久化数据的特性，没有它，数据库的内容将会丢失。'
- en: The second, named `sportsstore`, contains the application. The `sportsstore`
    container is configured to export port `5000` to the host operating system so
    that it can receive HTTP requests. Communication between containers uses the service
    names as hostnames, which is why *Listing 21.17* changes the name of the database
    server to `postgres`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个，命名为 `sportsstore`，包含应用程序。`sportsstore` 容器被配置为将端口 `5000` 导出至主机操作系统，以便它可以接收
    HTTP 请求。容器之间的通信使用服务名称作为主机名，这就是为什么 *列表 21.17* 将数据库服务器的名称更改为 `postgres`。
- en: Run the command shown in *Listing 21.21* in the `sportsstore` folder to prepare
    the containers.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `sportsstore` 文件夹中运行 *列表 21.21* 中显示的命令以准备容器。
- en: 'Listing 21.21: Preparing the containers'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 21.21：准备容器
- en: '[PRE24]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Run the command shown in *Listing 21.22* in the `sportsstore` folder to start
    the containers.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `sportsstore` 文件夹中运行 *列表 21.22* 中显示的命令以启动容器。
- en: 'Listing 21.22: Starting the containers'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 21.22：启动容器
- en: '[PRE25]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Docker will create and start the containers for the database server and the
    application and display the console messages they generate. Wait a moment to allow
    the containers to start up, and then use a browser to request `http://localhost:5000`.
    The database will be empty but can be populated using the administration tools,
    as shown in *Figure 21.5*.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 将创建并启动数据库服务器和应用程序的容器，并显示它们生成的控制台消息。等待片刻，以便容器启动，然后使用浏览器请求 `http://localhost:5000`。数据库将是空的，但可以使用管理工具填充，如图
    21.5 所示。
- en: '![](img/B21959_21_05.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_21_05.png)'
- en: 'Figure 21.5: Using Docker Compose'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21.5：使用 Docker Compose
- en: The application and the database server are each running in a container and
    can communicate with one another. The network used for communication between containers
    is created and managed by Docker.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序和数据库服务器各自运行在一个容器中，并且可以相互通信。容器之间用于通信的网络是由 Docker 创建和管理的。
- en: Setting up an HTTPS reverse proxy
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 HTTPS 反向代理
- en: The next step is to introduce support for HTTPS, which will be handled by a
    proxy package named **HAProxy** ([https://www.haproxy.org](https://www.haproxy.org)).
    There are many proxies available, but this is one that I have used for many years
    and have always found reliable.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是引入 HTTPS 的支持，这将由一个名为 **HAProxy** 的代理软件包处理（[https://www.haproxy.org](https://www.haproxy.org)）。有许多代理软件可用，但这是我多年来一直在使用且始终认为可靠的软件之一。
- en: To prepare for the proxy, copy your certificate and key files into the `sportsstore`
    folder with the names `cert.pem` and `key.pem`. *Chapter 5* contains instructions
    for creating a free self-signed certificate, or you can copy the files from the
    GitHub project for this chapter, which contains a self-signed certificate that
    I created.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备代理，将你的证书和密钥文件以 `cert.pem` 和 `key.pem` 的名称复制到 `sportsstore` 文件夹中。*第五章* 包含创建免费自签名证书的说明，或者你可以从本章的
    GitHub 项目中复制文件，该项目包含我创建的自签名证书。
- en: You can use a real certificate, but you must ensure that the domain name associated
    with the certificate resolves to the machine on which you are running the containers,
    which can be difficult to arrange.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用真实的证书，但必须确保与证书关联的域名解析到您运行容器的机器上，这可能很难安排。
- en: To create the proxy configuration file, add a file named `haproxy.cfg` to the
    `sportsstore` folder with the content shown in *Listing 21.23*.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建代理配置文件，请将名为 `haproxy.cfg` 的文件添加到 `sportsstore` 文件夹中，其内容如 *列表 21.23* 所示。
- en: 'Listing 21.23: The contents of the haproxy.cfg file in the sportsstore folder'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 21.23：sportsstore 文件夹中 haproxy.cfg 文件的内容
- en: '[PRE26]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This configuration sets up the proxy to listen for requests on port `80` and
    port `443`. HTTP requests will be redirected to use HTTPS. HTTPS requests will
    be forwarded to SportsStore, which is located by querying the DNS provided by
    Docker to containers. The use of DNS allows multiple `sportsstore` containers
    to run and for the proxy to distribute requests between them.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置设置代理以监听端口 `80` 和端口 `443`。HTTP 请求将被重定向以使用 HTTPS。HTTPS 请求将被转发到 SportsStore，SportsStore
    通过查询 Docker 提供给容器的 DNS 来定位。DNS 的使用允许多个 `sportsstore` 容器运行，并且代理可以在它们之间分配请求。
- en: Add a file named `Dockerfile.proxy` to the `sportsstore` folder with the content
    shown in *Listing 21.24*.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `sportsstore` 文件夹中添加一个名为 `Dockerfile.proxy` 的文件，其内容如 *列表 21.24* 所示。
- en: 'Listing 21.24: The contents of the Dockerfile.proxy file in the sportsstore
    folder'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 21.24：sportsstore 文件夹中 Dockerfile.proxy 文件的内容
- en: '[PRE27]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `FROM` command uses the `haproxy` image to create the new container, and
    the `COPY` commands include the configuration and certificate files in the image.
    Run the command shown in *Listing 21.25* to create an image for the proxy.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`FROM` 命令使用 `haproxy` 镜像创建新的容器，`COPY` 命令将配置和证书文件包含在镜像中。运行 *列表 21.25* 中显示的命令来创建代理的镜像。'
- en: 'Listing 21.25: Creating the proxy image'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 21.25：创建代理镜像
- en: '[PRE28]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Updating the OAuth URLs
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新 OAuth URL
- en: The change in ports and forcing the use of HTTPS require a change to the SportsStore
    configuration for the OAuth redirection URLs, as shown in *Listing 21.26*.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 端口更改和强制使用 HTTPS 需要更改 SportsStore 配置以反映 OAuth 重定向 URL，如 *列表 21.26* 所示。
- en: 'Listing 21.26: Updating URLs in the production.server.config.json file in the
    sportsstore folder'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 21.26：更新 sportsstore 文件夹中的 production.server.config.json 文件中的 URL
- en: '[PRE29]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Without these changes, the OAuth redirections won’t be received by the application.
    Run the command shown in *Listing 21.27* in the `sportsstore` folder to update
    the SportsStore image to reflect the configuration changes.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 没有这些更改，OAuth 重定向不会被应用程序接收。在 `sportsstore` 文件夹中运行 *列表 21.27* 中显示的命令来更新 SportsStore
    镜像以反映配置更改。
- en: 'Listing 21.27: Updating the SportsStore image'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 21.27：更新 SportsStore 镜像
- en: '[PRE30]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Completing the configuration
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完成配置
- en: The final step is to update the Docker Compose file to add the proxy and create
    multiple *SportsStore* containers, as shown in *Listing 21.28*.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是更新 Docker Compose 文件以添加代理并创建多个 *SportsStore* 容器，如 *列表 21.28* 所示。
- en: '**Note**'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: This configuration opens ports that are restricted on some operating systems,
    which means that superuser or administrator access may be required.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置打开了一些操作系统上受限制的端口，这意味着可能需要超级用户或管理员访问权限。
- en: 'Listing 21.28: Completing the configuration in the docker-compose.yml file
    in the sportsstore folder'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 21.28：在 sportsstore 文件夹中的 docker-compose.yml 文件中完成配置
- en: '[PRE31]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Stop all of the existing containers by running the command shown in *Listing
    21.29* in the `sportsstore` folder.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在 `sportsstore` 文件夹中运行 *列表 21.29* 中显示的命令来停止所有现有容器。
- en: 'Listing 21.29: Stopping containers'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 21.29：停止容器
- en: '[PRE32]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Wait until the containers have stopped and then run the command shown in *Listing
    21.30* in the `sportsstore` folder to start the database, multiple instances of
    the *SportsStore* application, and the proxy.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 等待容器停止，然后在 `sportsstore` 文件夹中运行 *列表 21.30* 中显示的命令来启动数据库、多个 *SportsStore* 应用程序实例和代理。
- en: 'Listing 21.30: Starting the containers'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 21.30：启动容器
- en: '[PRE33]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Docker will start a total of five *SportsStore* containers, all of which will
    share access to the same session and catalog data. Open a browser and request
    `http://localhost` and you will be redirected to use HTTPS instead, as shown in
    *Figure 21.6*. As explained in *Chapter 5*, you may have to navigate past security
    warnings because the certificate used by the proxy is self-signed.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Docker将启动总共五个*SportsStore*容器，所有这些容器都将共享对相同的会话和目录数据的访问。打开浏览器并请求`http://localhost`，您将被重定向到使用HTTPS，如图*图21.6*所示。如*第五章*中所述，您可能需要绕过安全警告，因为代理使用的证书是自签名的。
- en: '![](img/B21959_21_06.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_21_06.png)'
- en: 'Figure 21.6: Redirecting insecure connections'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图21.6：重定向不安全连接
- en: 'You can populate the database using the administration tools. The proxy is
    configured to forward requests to each *SportsStore* container in turn, and you
    can see this happening in the console messages, which include the name of the
    container from which each message originated:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用管理工具填充数据库。代理配置为依次将请求转发到每个*SportsStore*容器，您可以在控制台消息中看到这一过程，其中包含每个消息来源的容器名称：
- en: '[PRE34]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The configuration of the proxy detects up to five instances of the SportsStore
    container automatically and stops forwarding requests to containers if they become
    unavailable. Open a new command prompt and run the command shown in *Listing 21.31*
    in the `sportsstore` folder to disable one of the SportsStore containers.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 代理的配置可以自动检测多达五个SportsStore容器的实例，并在容器不可用时停止将请求转发到容器。打开一个新的命令提示符并运行`sportsstore`文件夹中*列表21.31*中显示的命令来禁用一个SportsStore容器。
- en: 'Listing 21.31: Changing the number of sportsstore containers'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 列表21.31：更改sportsstore容器的数量
- en: '[PRE35]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The command displays the containers that are running and stops one of them,
    like this:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 命令显示正在运行的容器并停止其中一个，如下所示：
- en: '[PRE36]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The proxy detects the change and determines that one of the containers is no
    longer available, producing a message like this:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 代理检测到变化并确定其中一个容器不再可用，产生如下信息：
- en: '[PRE37]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The names used for the containers don’t always match up with the names used
    by the Docker DNS service, which is why the container that has been stopped is
    named `sportsstore-sportsstore-5`, but the proxy reports that `app/sportsstore-3`
    has stopped.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 容器使用的名称并不总是与Docker DNS服务使用的名称相匹配，这就是为什么已停止的容器被命名为`sportsstore-sportsstore-5`，但代理报告称`app/sportsstore-3`已停止。
- en: Once you are happy that the application is working correctly, run the command
    shown in *Listing 21.32* in the `sportsstore` folder to stop all of the containers.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您确认应用程序运行正确，请在`sportsstore`文件夹中运行*列表21.32*中显示的命令来停止所有容器。
- en: 'Listing 21.32: Stopping the application containers'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 列表21.32：停止应用程序容器
- en: '[PRE38]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Docker will stop all of the containers, updating the status display until all
    are shown as removed:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: Docker将停止所有容器，更新状态显示，直到所有容器都显示为已移除：
- en: '[PRE39]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The application is containerized and the images are ready to be deployed onto
    a production platform.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序已容器化，镜像已准备好部署到生产平台。
- en: Summary
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, I completed the SportsStore application and prepared it for
    deployment to a container platform.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我完成了SportsStore应用程序并为其部署到容器平台做好了准备。
- en: The SportsStore image contains Node.js, the code and resources, and all of the
    JavaScript packages required to run the application.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SportsStore镜像包含Node.js、代码和资源，以及运行应用程序所需的所有JavaScript包。
- en: The container platform provides networking features that allow containers to
    communicate so that the SportsStore application can send requests to the database
    server using the name given to the Postgres container.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器平台提供了网络功能，允许容器进行通信，以便SportsStore应用程序可以使用分配给Postgres容器的名称向数据库服务器发送请求。
- en: The container platform can manage the number of instances of a container, which
    allows the SportsStore application to scale up to handle a larger number of requests.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器平台可以管理容器的实例数量，这使得SportsStore应用程序可以扩展以处理更多的请求。
- en: HTTPS requests are received by a proxy, which locates SportsStore containers
    using a DNS service provided by the container platform. The proxy detects when
    a container is down and stops forwarding requests to that container.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTPS请求由代理接收，代理使用容器平台提供的DNS服务定位SportsStore容器。当容器出现故障时，代理会检测到并停止将该容器的请求转发。
- en: HTTP requests are redirected to HTTPS by the proxy. The SportsStore containers
    receive only HTTP requests.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代理将HTTP请求重定向到HTTPS。SportsStore容器仅接收HTTP请求。
- en: Containers can be deployed to a wide range of platforms, including all of the
    large cloud providers, such as AWS and Azure.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器可以被部署到广泛的平台，包括所有的大型云服务提供商，例如 AWS 和 Azure。
- en: That’s all I have to teach you about using Node.js to create web applications.
    I can only hope that you have enjoyed reading this book as much as I enjoyed writing
    it, and I wish you every success in your Node.js projects.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 关于使用 Node.js 创建 Web 应用程序的所有内容，我就教到这里。我只希望您阅读这本书的乐趣能和我写作时的乐趣一样，并且祝愿您在 Node.js
    项目中取得每一步的成功。
