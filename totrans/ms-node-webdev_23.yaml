- en: '21'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SportsStore: Deployment'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, I complete the SportsStore application and prepare it for deployment
    to a container platform. As part of the preparations, I move from the file-based
    SQLite database to a conventional database server and introduce an HTTPS proxy,
    which will allow multiple instances of the SportsStore application to receive
    requests and share load.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing for this chapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter uses the `sportsstore` project from *Chapter 20*. Open a new command
    prompt, navigate to the `sportsstore` folder, and run the command shown in *Listing
    21.1* to start the development tools.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tip**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example project for this chapter – and for all the other
    chapters in this book – from [https://github.com/PacktPublishing/Mastering-Node.js-Web-Development](https://github.com/PacktPublishing/Mastering-Node.js-Web-Development).
    See *Chapter 1* for how to get help if you have problems running the examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.1: Starting the development tools'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Open a new browser window, navigate to `http://localhost:5000`, and you will
    see the product catalog, as shown in *Figure 21.1*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21959_21_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21.1: Running the application'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker Desktop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many ways to deploy an application, and there is no way that I can
    describe them all. Instead, I have chosen the approach that offers the most flexibility,
    which is to use *containers*. Containers are lightweight virtual machines that
    run self-contained *images* and are built and deployed using standard tools. Containers
    are portable and can be deployed to private and cloud infrastructures, which makes
    them a good choice for most applications.
  prefs: []
  type: TYPE_NORMAL
- en: The most popular tool for creating and managing containers is Docker. Go to
    `docker.com` and download and install the Docker Desktop package. Follow the installation
    process, reboot your machine, and run the command shown in *Listing 21.2* to check
    that Docker has been installed and is in your path. (The Docker installation process
    seems to change often, which is why I have not been more specific about the process.)
  prefs: []
  type: TYPE_NORMAL
- en: You will have to create an account on `docker.com`; the free version of Docker
    contains all of the features needed for this chapter and the paid-for services
    are not required.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.2: Checking the Docker Desktop installation'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If Docker is installed and running, you will see a response similar to this
    one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You may see a different version number, but that’s OK because the point is to
    make sure that Docker Desktop is up and running.
  prefs: []
  type: TYPE_NORMAL
- en: Managing the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this part of the book, the SportsStore application has been configured
    to automatically recreate and seed the database each time the server is started.
    I generally like this approach for my own projects, but it is especially useful
    for book examples because it ensures that the reader is always working with clean
    data and removes one potential cause of problems, where the code changes and becomes
    out of sync with the database schema.
  prefs: []
  type: TYPE_NORMAL
- en: In production, the database should not be reset every time the server starts,
    but it is still important to ensure that the database is created and seeded during
    the initial deployment. To extend the administration tool so that the database
    can be reset and reseeded, add a file named `database_routes.ts` to the `src/routes/admin`
    folder, with the content shown in *Listing 21.3*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.3: The contents of the database_routes.ts file in the src/routes/admin
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The handler for `GET` requests renders a template named `admin/db_mgt`, which
    will present the user with the ability to reset the database. The handler for
    `POST` requests accesses the `Sequelize` object created by the repository through
    the `sequelize` property added to model classes, calls the `drop` and `sync` methods
    to reset the database, and then populates the database with the seed data. *Listing
    21.4* enables the new routes and defines a direct navigation URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.4: Enabling routes in the index.ts file in the src/routes/admin
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Add a file named `db_mgt.handlebars` to the `templates/admin` folder, with the
    content shown in *Listing 21.5*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.5: The contents of the db_mgt.handlebars file in the templates/admin
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The template contains a `button` element that sends a `POST` request to the
    handler defined in *Listing 21.4*, with an `h5` element that displays a message
    provided by the handler. *Listing 21.6* adds a button in the `area_buttons` template
    to include the database features in the content presented to the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.6: Adding a button in the area_buttons.handlebars file in the templates/admin
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Use a browser to request `http://localhost:5000/admin`, authenticate using OAuth,
    and click the **Delete** button for a few of the products. It doesn’t matter how
    many or which ones you remove, since the purpose is to ensure that the database
    is reset and reseeded. Click the **Database** button, and then click **Reset &
    Seed Database**. Once the database has been reset, click the **Products** button
    and you will see the original data, as shown in *Figure 21.2*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21959_21_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21.2: Resetting the database'
  prefs: []
  type: TYPE_NORMAL
- en: Toggling the application environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The SportsStore application will be deployed in a Docker container, which will
    be configured to set the application environment to `production`. It is helpful
    to be able to switch to the production environment outside of the container in
    order to prepare the application for deployment. One way to do this is to set
    an environment variable named `NODE_ENV` using the command prompt used to start
    Node.js, but that can be difficult to do consistently when there are multiple
    developers, each with their own command prompt or shell preferences, each of which
    deals with environment variables in its own way. A more reliable way is to rely
    on the `dotenv` package, which reads environment variables from files.
  prefs: []
  type: TYPE_NORMAL
- en: Add a file named `overrides.env` to the `sportsstore` folder, with the content
    shown in *Listing 21.7*. This is a temporary file, just to confirm that the application
    behaves as it should before it is prepared for deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.7: The contents of the overrides.env file in the sportsstore folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 21.8* uses the `dotenv` package to read the `.env` file, which is
    done as soon as the application starts.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.8: Reading the .env file in the index.ts file in the src/config
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You may be tempted to override the value returned by `getEnvironment` in the
    `config` module, which was created in *Chapter 16*. This will affect all of the
    custom *SportsStore* code, which has been written to use the `config` module,
    but it won’t change the behavior of the third-party packages on which *SportsStore*
    relies. The `NODE_ENV` environment variable is a widely used convention, and many
    packages alter their behavior based on its value. The `express-handlebars` package,
    which integrates Handlebars templates into the Express framework, automatically
    compiles and caches template files when `NODE_ENV` is set to production, for example.
  prefs: []
  type: TYPE_NORMAL
- en: The application won’t run in production mode because there are no settings for
    the secrets used to sign session cookies or perform OAuth requests. *Listing 21.9*
    adds settings to the `overrides` file so that the application can be prepared
    for deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.9: Adding settings in the overrides.env file in the sportsstore
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You must replace the placeholder text in *Listing 21.9* with the client ID and
    secret provided by Google when you configured OAuth in *Chapter 19*. The application
    will start without these settings, but you won’t be able to authenticate with
    the administration tools and populate the database.
  prefs: []
  type: TYPE_NORMAL
- en: Stop the application and run the command shown in *Listing 21.10* in the `sportsstore`
    folder to start just the Node.js server. The **webpack** bundler, which was useful
    in ensuring that the client was updated during development, is no longer required.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.10: Starting the Node.js server'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The server will still be built and restarted when there is a change, but the
    webpack development server isn’t started, and the `production` environment configured
    in the `overrides.env` file means that the Node.js server will handle all HTTP
    requests without attempting to forward them. Before moving on, check that the
    application is running correctly by using the browser to request `http://localhost:5000`,
    which should produce the catalog display shown in *Figure 21.3*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21959_21_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21.3: Running the application in production mode'
  prefs: []
  type: TYPE_NORMAL
- en: Using a database server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It should be clear by now that I am a huge fan of the SQLite database, which
    is packaged with features and is supported by every major package and framework.
    The main limitation of SQLite is that it can’t be readily shared between multiple
    Node.js servers, so it is time to move to a conventional database server that
    can be queried over a network. The database I am going to use in this chapter
    is PostgreSQL, usually referred to just as Postgres. As I noted in *Part 2*, all
    of the mainstream databases are good, but I picked Postgres because it is the
    most popular open-source database and because it is well supported by the `Sequelize`
    ORM package.
  prefs: []
  type: TYPE_NORMAL
- en: The simplest way to use Postgres is by running the database server in a container.
  prefs: []
  type: TYPE_NORMAL
- en: Open a new command prompt and run the command shown in *Listing 21.11* to download
    an image for Postgres and use it to create a new container. The command may take
    a few moments to complete because the image has to be downloaded the first time
    it is used, but it will be cached for subsequent operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.11: Creating a container'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `docker run` command creates a new container. The `-e` argument sets environment
    variables for the container and, in this case, is used to set the password that
    is used to access the database server. The `-p` argument configures the network
    ports and is used to expose port `5432` so that it can be accessed from the host
    operating system, allowing the database server to be used from outside of its
    container. Leave the command prompt open. The container will run until the `docker
    run` command is terminated with *Ctrl + C*.
  prefs: []
  type: TYPE_NORMAL
- en: Run the commands shown in *Listing 21.12* in the `sportsstore` folder to install
    the packages that will allow Sequelize to work with Postgres.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.12: Adding database packages'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '*Table 21.1* describes these packages for quick reference.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 21.1: The CookieOptions packges'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| `pg` | This package contains support for communicating with Postgres servers.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `pg-hstore` | This package contains support for storing JSON data in a Postgres
    database. |'
  prefs: []
  type: TYPE_TB
- en: Add a file named `production.server.config.json` in the `sportsstore` folder,
    with the content shown in *Listing 21.13*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.13: The contents of the production.server.config.json in the sportsstore
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The settings in *Listing 21.13* override those defined in the `server.config.json`
    file and are only applied when the application is in the `production` environment.
    Both configuration sections disable resetting the database every time and provide
    the configuration settings to connect to the database in the container.
  prefs: []
  type: TYPE_NORMAL
- en: Stop the Node.js application and run the command shown in *Listing 21.14* in
    the `sportstore` folder to start it again using the new configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.14: Starting the application'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The application should connect to the Postgres database server. Use a browser
    to request `http://localhost:5000/admin`, authenticate using a Google account,
    and populate the database by clicking the **Reset & Seed** **Database** button
    in the **Database** section. Click the **Products** selection to confirm the database
    has been populated, as shown in *Figure 21.4*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21959_21_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21.4: Populating the database'
  prefs: []
  type: TYPE_NORMAL
- en: Use *Ctrl + C* to stop both the application and the database once you have confirmed
    that *SportsStore* is working with Postgres.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the SportsStore Docker image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next step is to prepare an image that contains Node.js, the *SportsStore*
    application, all of the packages that it relies on, the templates, and the configuration
    files. The first step is to create a file that tells Docker to ignore the `node_modules`
    folder, which causes a slowdown in the creation of an image because all of the
    folders are scanned. Create a file named `.dockerignore` in the `sportsstore`
    folder, with the contents shown in *Listing 21.15*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.15: The contents of the .dockerignore file in the sportsstore folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The next step is to create the file that tells Docker how to create the image.
    Add a file named `Dockerfile` (with no file extension) to the `sportsstore` folder
    with the content shown in *Listing 21.16*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.16: The contents of the Dockerfile file in the sportsstore folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '`Dockerfile` contains a series of instructions that will be used to build the
    image. The `FROM` command tells Docker to use the image for the version of Node.js
    used throughout this book as the foundation for the image, which simplifies the
    setup process.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `COPY` commands tell Docker to copy files from the project into the container.
    The `WORKDIR` command changes the working directory for subsequent commands. This
    command installs the packages required to run the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The `--omit` argument is used to exclude the packages that were added with the
    `npm install --save-dev` command, which means that packages such as the TypeScript
    compiler won’t be included in the image.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command that follows installs a package that is only required when the
    application is deployed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Coordinating between containers can be difficult and it is important to ensure
    that the SportsStore application isn’t started until the database server is ready
    to receive requests. The `wait-for-it` package waits until a TCP port has been
    opened and is a simple and reliable way to ensure that the application in one
    container is ready before another container is started.
  prefs: []
  type: TYPE_NORMAL
- en: The `ENV` commands set the environment variables and are used to set `production`
    mode and define the secrets used to sign cookies and perform Google OAuth requests.
  prefs: []
  type: TYPE_NORMAL
- en: The `EXPOSE` command tells Docker to expose port `5000`, which will allow the
    SportsStore application to receive HTTP requests. The `ENTRYPOINT` command is
    executed when the container is started and comes in two parts. The first part
    uses the `wait-for-it` package to block until port `5432` on a server named `postgres`
    is open. This is the name that will be given to the database when the containers
    are connected in the *Composing the application and database servers* section.
    The second part runs the `server.js` file in the `dist` folder, which will start
    the *SportsStore* application.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Images are a snapshot of an application and its associated files. Before creating
    the image, it is important to make any final configuration changes and build the
    code to make sure that the JavaScript included in the image reflects the final
    TypeScript code.
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 21.17* alters the name used for the Postgres server from `localhost`
    to `postgres`, which is the name that will be given to the database server when
    it is deployed.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**'
  prefs: []
  type: TYPE_NORMAL
- en: In a real project, you would also change the OAuth redirection URLs so that
    they contain the public domain name by which your users connect to the service.
    The *SportsStore* application will only be used on the development machine, and
    so the redirection URLs containing `localhost` will continue to work, but this
    will not be the case for real projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.17: Changing the server name in the production.server.config.json
    file in the sportsstore folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Run the command shown in *Listing 21.18* in the `sportsstore` folder to run
    the TypeScript compiler to create the final build of the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.18: Compiling the TypeScript code'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Creating the SportsStore image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Run the command shown in *Listing 21.19* in the `sportsstore` folder to create
    the image that contains the SportsStore application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.19: Creating the sportsstore image'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'As the image is created, you will see output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This command can take a while to run because the Node.js image must be downloaded,
    and the packages required by the SportsStore application have to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: Composing the application and database servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next step is to create the configuration file that specifies how the SportsStore
    and Postgres images will be used to create containers. This step is dependent
    on how the containers are going to be deployed, for which there are many options.
    All of the major cloud platforms provide support for using containers, and the
    configuration will have to be adapted to the needs and features of the target
    platform.
  prefs: []
  type: TYPE_NORMAL
- en: For this chapter, I am going to use Docker Compose, which is the built-in tool
    provided with Docker Desktop. You may not use Docker Compose for your projects,
    but it has the same core features that you will encounter regardless of how you
    deploy, and it makes it easy to combine and test containers to create a complete
    application. Add a file named `docker-compose.yml` to the `sportsstore` folder
    with the content shown in *Listing 21.20*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.20: The contents of the docker-compose.yml file in the sportsstore
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The format of the file is YAML, which is sensitive to indentation and the contents
    must be entered exactly as shown. Most code editors, including Visual Studio Code,
    include YAML syntax highlighting, which helps identify content or formatting errors.
  prefs: []
  type: TYPE_NORMAL
- en: The configuration in *Listing 21.20* tells Docker Compose to create two containers.
    The first, which will be given the name `postgres`, contains the database server.
    This service is configured with a volume, which is the Docker feature for persisting
    data and, without which, the contents of the database would be lost.
  prefs: []
  type: TYPE_NORMAL
- en: The second, named `sportsstore`, contains the application. The `sportsstore`
    container is configured to export port `5000` to the host operating system so
    that it can receive HTTP requests. Communication between containers uses the service
    names as hostnames, which is why *Listing 21.17* changes the name of the database
    server to `postgres`.
  prefs: []
  type: TYPE_NORMAL
- en: Run the command shown in *Listing 21.21* in the `sportsstore` folder to prepare
    the containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.21: Preparing the containers'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Run the command shown in *Listing 21.22* in the `sportsstore` folder to start
    the containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.22: Starting the containers'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Docker will create and start the containers for the database server and the
    application and display the console messages they generate. Wait a moment to allow
    the containers to start up, and then use a browser to request `http://localhost:5000`.
    The database will be empty but can be populated using the administration tools,
    as shown in *Figure 21.5*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21959_21_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21.5: Using Docker Compose'
  prefs: []
  type: TYPE_NORMAL
- en: The application and the database server are each running in a container and
    can communicate with one another. The network used for communication between containers
    is created and managed by Docker.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an HTTPS reverse proxy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next step is to introduce support for HTTPS, which will be handled by a
    proxy package named **HAProxy** ([https://www.haproxy.org](https://www.haproxy.org)).
    There are many proxies available, but this is one that I have used for many years
    and have always found reliable.
  prefs: []
  type: TYPE_NORMAL
- en: To prepare for the proxy, copy your certificate and key files into the `sportsstore`
    folder with the names `cert.pem` and `key.pem`. *Chapter 5* contains instructions
    for creating a free self-signed certificate, or you can copy the files from the
    GitHub project for this chapter, which contains a self-signed certificate that
    I created.
  prefs: []
  type: TYPE_NORMAL
- en: You can use a real certificate, but you must ensure that the domain name associated
    with the certificate resolves to the machine on which you are running the containers,
    which can be difficult to arrange.
  prefs: []
  type: TYPE_NORMAL
- en: To create the proxy configuration file, add a file named `haproxy.cfg` to the
    `sportsstore` folder with the content shown in *Listing 21.23*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.23: The contents of the haproxy.cfg file in the sportsstore folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This configuration sets up the proxy to listen for requests on port `80` and
    port `443`. HTTP requests will be redirected to use HTTPS. HTTPS requests will
    be forwarded to SportsStore, which is located by querying the DNS provided by
    Docker to containers. The use of DNS allows multiple `sportsstore` containers
    to run and for the proxy to distribute requests between them.
  prefs: []
  type: TYPE_NORMAL
- en: Add a file named `Dockerfile.proxy` to the `sportsstore` folder with the content
    shown in *Listing 21.24*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.24: The contents of the Dockerfile.proxy file in the sportsstore
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The `FROM` command uses the `haproxy` image to create the new container, and
    the `COPY` commands include the configuration and certificate files in the image.
    Run the command shown in *Listing 21.25* to create an image for the proxy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.25: Creating the proxy image'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Updating the OAuth URLs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The change in ports and forcing the use of HTTPS require a change to the SportsStore
    configuration for the OAuth redirection URLs, as shown in *Listing 21.26*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.26: Updating URLs in the production.server.config.json file in the
    sportsstore folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Without these changes, the OAuth redirections won’t be received by the application.
    Run the command shown in *Listing 21.27* in the `sportsstore` folder to update
    the SportsStore image to reflect the configuration changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.27: Updating the SportsStore image'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Completing the configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The final step is to update the Docker Compose file to add the proxy and create
    multiple *SportsStore* containers, as shown in *Listing 21.28*.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**'
  prefs: []
  type: TYPE_NORMAL
- en: This configuration opens ports that are restricted on some operating systems,
    which means that superuser or administrator access may be required.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.28: Completing the configuration in the docker-compose.yml file
    in the sportsstore folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Stop all of the existing containers by running the command shown in *Listing
    21.29* in the `sportsstore` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.29: Stopping containers'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Wait until the containers have stopped and then run the command shown in *Listing
    21.30* in the `sportsstore` folder to start the database, multiple instances of
    the *SportsStore* application, and the proxy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.30: Starting the containers'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Docker will start a total of five *SportsStore* containers, all of which will
    share access to the same session and catalog data. Open a browser and request
    `http://localhost` and you will be redirected to use HTTPS instead, as shown in
    *Figure 21.6*. As explained in *Chapter 5*, you may have to navigate past security
    warnings because the certificate used by the proxy is self-signed.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21959_21_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21.6: Redirecting insecure connections'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can populate the database using the administration tools. The proxy is
    configured to forward requests to each *SportsStore* container in turn, and you
    can see this happening in the console messages, which include the name of the
    container from which each message originated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The configuration of the proxy detects up to five instances of the SportsStore
    container automatically and stops forwarding requests to containers if they become
    unavailable. Open a new command prompt and run the command shown in *Listing 21.31*
    in the `sportsstore` folder to disable one of the SportsStore containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.31: Changing the number of sportsstore containers'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The command displays the containers that are running and stops one of them,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The proxy detects the change and determines that one of the containers is no
    longer available, producing a message like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The names used for the containers don’t always match up with the names used
    by the Docker DNS service, which is why the container that has been stopped is
    named `sportsstore-sportsstore-5`, but the proxy reports that `app/sportsstore-3`
    has stopped.
  prefs: []
  type: TYPE_NORMAL
- en: Once you are happy that the application is working correctly, run the command
    shown in *Listing 21.32* in the `sportsstore` folder to stop all of the containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 21.32: Stopping the application containers'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Docker will stop all of the containers, updating the status display until all
    are shown as removed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The application is containerized and the images are ready to be deployed onto
    a production platform.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, I completed the SportsStore application and prepared it for
    deployment to a container platform.
  prefs: []
  type: TYPE_NORMAL
- en: The SportsStore image contains Node.js, the code and resources, and all of the
    JavaScript packages required to run the application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The container platform provides networking features that allow containers to
    communicate so that the SportsStore application can send requests to the database
    server using the name given to the Postgres container.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The container platform can manage the number of instances of a container, which
    allows the SportsStore application to scale up to handle a larger number of requests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTPS requests are received by a proxy, which locates SportsStore containers
    using a DNS service provided by the container platform. The proxy detects when
    a container is down and stops forwarding requests to that container.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP requests are redirected to HTTPS by the proxy. The SportsStore containers
    receive only HTTP requests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Containers can be deployed to a wide range of platforms, including all of the
    large cloud providers, such as AWS and Azure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That’s all I have to teach you about using Node.js to create web applications.
    I can only hope that you have enjoyed reading this book as much as I enjoyed writing
    it, and I wish you every success in your Node.js projects.
  prefs: []
  type: TYPE_NORMAL
