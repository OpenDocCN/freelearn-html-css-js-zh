["```js\napt-get install libbatik-java\n\n```", "```js\njava -jar batik-rasterizer.jar chart.svg\n\n```", "```js\nphantomjs loadPage.js\n\n```", "```js\nvar page = require('webpage').create();\n\npage.onError = function(msg, trace) {\n    console.error(msg);\n    phantom.exit(1);\n};\n\npage.onConsoleMessage = function(msg) {\n    console.log(msg);\n};\n\npage.open('http://localhost/mychart.html', function(status) {\n    if (status === 'success') {\n        console.log('page loaded');\n        phantom.exit();\n    }\n});\n```", "```js\nphantomjs renderChart.js chart.html data.json chart.png\n\n```", "```js\n<html>\n  <head>\n     <meta> ....\n     <script src='..../jquery.min.js'></script>\n     <script src='..../Highcharts.js'></script>\n     <script type='text/javascript'>\n     $(function () {\n     $(document).ready(function() {\n        chart = new Highcharts.Chart({\n            chart: {\n                ....       \n            },\n            plotOptions: {\n                ....  \n            },\n            ....,\n            series: [{\n                   name: 'Nasdaq',\n                   data: seriesData\n            }]\n        });\n     });\n  });\n  </script>\n  </head>        \n  <body>\n   <div id=\"container\" ></div>\n  </body>\n</html>\n```", "```js\n[[1336728600000,2606.01],[1336730400000,2622.08],\n [1336732200000,2636.03],[1336734000000,2637.78],\n [1336735800000,2639.15],[1336737600000,2637.09],\n ....\n```", "```js\nvar page = require('webpage').create(),\n system = require('system'),\n fs = require('fs');\n\n// Convert temporary file with series data â€“ data.json\nvar jsonData = fs.read(system.args[2]);\nfs.write('/tmp/data.js', 'var seriesData = ' + jsonData + ';');\n\npage.onError = function(msg, trace) {\n    console.error(msg);\n    phantom.exit(1);\n}\n\npage.onConsoleMessage = function(msg) {\n    console.log(msg);\n};\n\n// initializes the seriesData variable before loading the script\npage.onInitialized = function() {\n page.injectJs('/tmp/data.js');\n};\n\n// load chart.html\npage.open(system.args[1], function(status) {\n    if (status === 'success') {\n        // output to chart.png\n        page.render(system.args[3]);\n        phantom.exit();\n    }\n});\n```", "```js\nphantomjs highcharts-convert.js -infile file \n -outfile chart1.png | -type ( png | jpg | pdf | svg ) -tmpdir dir\n [-scale num | -width pixels ] [ -constr (Highcharts | Highstocks) ]\n [-callback script.js ]\n\n```", "```js\n            { chart: {\n                renderTo: 'container',\n                height: 250,\n                spacingRight: 30,\n                animation: false\n              },\n              . . . .\n            }\n```", "```js\nfunction(chart) {\n    chart.renderer.text('SAMPLE', 220, 200).\n          attr({\n              rotation: -30\n          }).\n          css({\n              color: '#D0D0D0',\n              fontSize: '50px',\n              fontWeight: 'bold',\n              opacity: 0.8\n          }).\n          add();\n}\n```", "```js\nphantomjs highcharts-convert.js -infile options.json -outfile chart.png -width 550 -callback watermark.js\n\n```", "```js\nHighcharts.options.parsed\nHighcharts.cb.parsed\nHighcharts.customCode.parsed\n/tmp/chart.png\n\n```", "```js\nphantomjs highcharts-convert.js -host address -port num\n -type ( png | svg | jpg | pdf )\n\n```", "```js\nphantomjs highcharts-convert.js -host 127.0.0.1 -port 9413 -type png\n\n```", "```js\nOK, PhantomJS is ready.\n\n```", "```js\n{ \"infile\" : \" { chart: { .... }, series { .... } } \" , \n  \"callback\" : \"function(chart) { .... } \",\n  \"scale\" : 1.2\n}\n```", "```js\ncurl -X POST -H \"Content-Type: application/json\" -d @post.json http://localhost:9413/ | base64 -d > /tmp/chart.png\n\n```"]