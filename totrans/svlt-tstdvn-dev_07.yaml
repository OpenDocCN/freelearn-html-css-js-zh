- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tidying up Test Suites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Have you ever felt frustrated when working with your test suites? They can easily
    become messy and overgrown, unless you’re actively tending to them. In this chapter,
    we’ll look at some of the ways you can keep your test suites tidy.
  prefs: []
  type: TYPE_NORMAL
- en: The techniques you’ll use to tidy test suites differ from the techniques you’d
    use in your application code. Application code requires building abstractions
    and encapsulating details, with deep layers of connecting objects. However, tests
    benefit from being shallow, with each test statement having a clear effect.
  prefs: []
  type: TYPE_NORMAL
- en: Another way to think of it is that normal program flow can take many different
    paths through the code, but test suites have just one flow – they are scripts
    that run from top to bottom. There is an absence of control logic, such as conditional
    expressions and loop constructs.
  prefs: []
  type: TYPE_NORMAL
- en: The primary mechanism you have to control complexity in test suites is abstracting
    functions that hide detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following techniques:'
  prefs: []
  type: TYPE_NORMAL
- en: Using page object models in Playwright tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extracting an action helper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extracting a factory method for creating data objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of the chapter, you’ll have learned an array of strategies to cut
    down on the size of your test suites.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code for the chapter can be found online at [https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter07/Start](https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter07/Start).
  prefs: []
  type: TYPE_NORMAL
- en: Using page object models in Playwright tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **page object model** is simply a plain JavaScript class that groups up the
    mechanical actions of navigating a page (locating a field, clicking a button,
    or filling in a text field) into methods that describe high-level operations that
    occur within your application (completing a birthday form).
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you’ll build a page object model named `BirthdayListPage` that
    will allow you to rewrite your existing Playwright tests more simply.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s get started by adding the new class:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file named `tests/BirthdayListPage.js` and give it the following
    content. It creates the basic class along with a single method, `goto`, which
    is used to navigate to the `/birthdays` application URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can already make use of this class in our tests. In `tests/birthdays.test.js`,
    add the following import at the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, update all the tests to use this class, by replacing the direct call to
    `page.goto` with the indirect call via the `BirthdayListPage` object. For example,
    consider the following existing test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It should be modified to become this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we’ll move on to creating helpers for each of the individual files. Take
    a look at this original code from the editing test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'From this, we can pull helpers called `nameField`, `dateOfBirthField`, and
    `saveButton`. Now, add them to `BirthdayListPage`, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Still in `BirthdayLastPage`, you can now roll up these helper methods into
    a single helper method that performs the whole action, `saveNameAndDateOfBirth`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The section of code in *step 4* from the original test, which was eight lines
    of code including the explanatory comment, can now be done in a single function
    call. The comment is no longer necessary because the method name basically says
    the same thing. Go ahead and update the test now, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'That completes this section of the test. Now for the next bit, which looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'For this section, we can repeat the earlier steps to extract an internal helper
    to locate the desired field, and then extract a second external helper to perform
    the action. Start by adding a new helper in the `BirthdayListPage` page object
    model, named `entryFor`, that finds the entry for a person’s name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, use the `entryFor` method to build another helper, `beginEditingFor`,
    which clicks the **Edit** button for that birthday:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It’s time to remove the original code shown in *step 6* with a single call
    to this new helper in the page object model. Make the updates shown in the following
    code block, again getting rid of the comment and reducing six lines down to one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'There’s one final action within the test that can be updated, which is the
    action to modify the form values after beginning editing. We don’t need to create
    any new helpers for this action. We simply need to reuse the `saveNameAndDateOfBirth`
    helper. Go ahead and do that now, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last change to make is a change to the expectations. They can be updated
    to use the `entryFor` helper. Since this is the last change in this section, the
    listing shows the fully complete test. Make the changes to the expectations as
    shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The benefits of introducing the `BirthdayListPage` page object model are clear:
    the test is more readable, the test data is more prominent (the two changing date
    of births are now more visible), and any future changes will be quicker to make,
    simply because the test is shorter.'
  prefs: []
  type: TYPE_NORMAL
- en: Continuing with the remaining tests
  prefs: []
  type: TYPE_NORMAL
- en: The other Playwright tests in the repository can also be rewritten using the
    exact same helpers. These changes aren’t shown in this book but are available
    in the companion repository.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you saw how to create a Playwright page object model. Next,
    we’ll do something similar with the Vitest unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting an action helper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section covers the use of a helper to simplify the *Act* phase of a test.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Arrange-Act-Assert pattern
  prefs: []
  type: TYPE_NORMAL
- en: The *Arrange-Act-Assert* pattern is a standard way to describe the order in
    which unit tests are written.
  prefs: []
  type: TYPE_NORMAL
- en: They start with the *Arrange* phase, which is when the structure under test
    is primed for work. Any input data is constructed, and any preparatory methods
    are called that get the system into the right state.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we have the *Act* phase, which invokes the operation that is being checked.
    Finally, the test ends with the *Assert* phase, which can be one or more expectations
    (or *assertions*) that verify that the operation did what it was meant to.
  prefs: []
  type: TYPE_NORMAL
- en: Each of these three phases benefits from different strategies to remove duplication.
  prefs: []
  type: TYPE_NORMAL
- en: The *Act* phase is the one that I think benefits least from the removal of duplication.
    That’s because the majority of unit tests you’ll write – and all the unit tests
    in this book – have an action that is triggered by a single method call. It’s
    rare to find a scenario where the action that is being observed requires anything
    more than a single instruction.
  prefs: []
  type: TYPE_NORMAL
- en: And because of this, I like to ensure the method call is called directly within
    the unit tests, and not mixed up with any of the *Arrange* phase statements. That
    being said, there are some occasions when it helps to build an *Act* helper. The
    call to invoke a SvelteKit form action via the `actions.default` import, is one
    of these occasions.
  prefs: []
  type: TYPE_NORMAL
- en: There are a couple of reasons why. First, the name `actions.default` is non-descriptive
    in the context of a unit test suite. Second, the form action’s parameter is not
    trivial – it uses the Form API’s `request` object to wrap the form data, which
    is then packaged into a SvelteKit `RequestEvent`-like object. This needs to be
    done in every single test. What we care about are the values within the form data,
    not the plumbing around it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `src/routes/birthdays/page.server.test.js` file, you’ll see the following
    pattern repeated many times:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: You can consider the request statement part of the setup. It is required every
    single time the form action is called. There is no way to call the form action
    without doing the form data dance.
  prefs: []
  type: TYPE_NORMAL
- en: So, let’s create a helper that wraps this behavior. We’ll call it `performFormAction`,
    which makes it clear what’s happening in the test.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s begin:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `src/routes/birthdays/page.server.test.js`, add the following function definition
    to the top of the `/birthdays - default` `action` context:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In each test, look for the pattern described in the preceding code snippet
    – calling `createFormDataRequest` and then the imported `actions.default` function
    – and replace each instance with a call to `performFormAction`. The following
    is an example from one of the tests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure you rerun all your tests once you’ve made that change in all of them
    in the test suite. In the next section, we’ll continue with a look at simplifying
    the *Arrange* section of the test suite.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting a factory method for creating data objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It’s time to simplify the *Arrange* phase of the tests using a factory method
    named `createBirthday`.
  prefs: []
  type: TYPE_NORMAL
- en: The last section mentioned how each of the *Arrange-Act-Assert* phases needs
    a different treatment for simplification. A key method for the *Arrange* phase
    is the use of factories. You already created one of those in [*Chapter 4*](B19611_04.xhtml#_idTextAnchor060),
    *Saving Form Data*. That was the `createFormDataRequest` method that you used
    in the preceding section.
  prefs: []
  type: TYPE_NORMAL
- en: Using test factories to hide irrelevant data
  prefs: []
  type: TYPE_NORMAL
- en: Factory methods help you generate supporting objects in the shortest amount
    of code possible. One way they do that is by setting default values for object
    properties so that you don’t need to specify them. You’re then free to override
    those defaults in each individual test.
  prefs: []
  type: TYPE_NORMAL
- en: Hiding necessary but irrelevant data is a key method for keeping unit tests
    succinct and clear.
  prefs: []
  type: TYPE_NORMAL
- en: Our birthday objects have a very simple structure, with just three fields –
    `name`, `dob`, and `id`. Of these three, `name` and `dob` are set frequently and
    the `id` field infrequently. Also, each of the individual fields has a unique
    shape of data – a name looks very different from a date, and very different from
    a **universally unique** **identifier** (**UUID**).
  prefs: []
  type: TYPE_NORMAL
- en: With that in mind, the upcoming `createBirthday` helper requires both `name`
    and `dob` but leaves `id` as an extra field that can sometimes be specified. Those
    `name` and `dob` values are given as positional parameters – meaning they are
    identified by position and not by name – because it’s obvious which is which.
    That saves space on the page.
  prefs: []
  type: TYPE_NORMAL
- en: It might not seem important, but when you are writing software for maintainability,
    every single word must prove its worth.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example of how this looks. Note how `id` is specified differently,
    due to being rarely used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s begin:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file named `src/factories/birthday.js` and give it the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `src/routes/birthdays/Birthday.test.js` file and import the new helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, find all the `render` calls that use the `exampleBirthday` object. They
    look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update them to use the new helper, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in `src/routes/birthdays/page.server.test.js`, add the `createBirthday`
    import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find all the calls to `performFormAction` that you updated in the previous
    section. They’ll look something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update them to use the `createBirthday` helper, shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a couple of tests where the preceding change isn’t straightforward.
    In the *saves unique ids one each new birthday* test, you can save the created
    birthday in the `request` object, and then pass that into `performFormAction`
    twice, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The *updates an entrythat shares the same id* test needs a specific `id` passed
    into the second invocation. Note how the factory method is structured in such
    a way that uncommon information needs to be named, such as the `id` field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'For the final test suite, in `src/routes/birthdays/page.test.js`, the `birthdays`
    array can be updated to use two calls to `createBirthday`, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, update the test shown here so that it uses the `createBirthday` helper
    directly in the `render` call for both the `birthdays` prop value and the `form`
    prop value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That completes the use of `createBirthday`. Make sure to rerun your tests to
    ensure that everything is still green.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve now learned how a test factory method can be used to simplify and bring
    clarity to your unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter has shown you three techniques to shorten your test suites: page
    object models for Playwright end-to-end tests, action helpers for Vitest unit
    tests, and factory methods. Keeping test suites clear and meaningful is key to
    keeping them easily maintainable.'
  prefs: []
  type: TYPE_NORMAL
- en: In this next chapter, we’ll look at a more involved way of reducing unit test
    code – writing your own custom matchers.
  prefs: []
  type: TYPE_NORMAL
