["```js\n// app.js\n\nvar App = Ember.Application.create();\n\nApp.Router.map(function() {\n  this.resource('contacts', function(){\n    this.route('new');\n    this.resource('contact', {path: '/:contact_id'}, function(){\n      this.route('edit');\n    });\n  });\n  this.route('about');\n});\n```", "```js\nmap function takes a function as its only argument. Inside this function, we may define a resource using the corresponding method, which takes the following signature:\n```", "```js\nthis.resource(resourceName, options, function);\n```", "```js\nthis.resource('contact', {path: '/:contact_id'}, function(){\n   this.route('index'); // auto defined\n   this.route('edit');\n});\n```", "```js\nvar App = Ember.Application.create({\n LOG_TRANSITIONS: true\n});\n```", "```js\nApp.Router.reopen({\n  rootURL: '/contacts/'\n});\n```", "```js\nApp.Router.reopen({\n  location: 'history'\n});\n```", "```js\nApp.Router.reopen({\n  location: 'auto'\n});\n```", "```js\nApp.Router.reopen({\n  location: none\n});\n```", "```js\nthis.resource('contacts', {path: '/'}, function(){\n});\n```", "```js\nthis.resource('contact', {path: '/:contact_id'}, function(){\n});\n```", "```js\n/:contact_id is the dynamic segment that will be replaced by the actual contact's ID. One thing to note is that nested resources prefix their paths with those of parent resources. Therefore, the contact resource's full path would be /contacts/:contact_id. It's also worth noting that the name of the dynamic segment  is not mandated and so we could have named the dynamic segment as /:id.\n```", "```js\nApp.RouteHandlerNameRoute = Ember.Route.extend();\n```", "```js\nresourceName.routeName\n```", "```js\nresourceName/routeName\n```", "```js\nResourcenameRoutenameClassname\n```", "```js\nAppNamespace.RouteHandlerName = Ember.Route.extend({\n  model: function(){\n  }\n});\n```", "```js\n  model: function(){\n    return App.Contact.find();\n  }\n```", "```js\nApp.Contact.reopenClass({\n  find: function(id){\n    return (!!id)\n      ? App.Contact.findOne(id)\n      : App.Contact.findAll();\n  },\n  â€¦\n});\n```", "```js\n  findAll: function(){\n    var contacts = store('contacts') || [];\n    return contacts.map(function(contact){\n      return App.Contact.create(contact);\n    });\n  }\n```", "```js\n<ul class=\"nav nav-pills nav-stacked\">\n{{#each model}}\n  <li>\n    {{#link-to \"contact.index\" this}}{{name}}{{/link-to}}\n  </li>\n  {{/each}}\n</ul>\n```", "```js\n{{#if model.length}}\n   ...    \n{{else}}\n    <h1>Create contact</h1>\n{{/if}}\n```", "```js\nApp.ContactRoute = Ember.Route.extend({\n  model: function(params){\n    return App.Contact.find(params.contact_id);\n  },\n  ...\n});\n```", "```js\n  findOne: function(id){\n    var contacts = store('contacts') || [];\n    var contact = contacts.find(function(contact){\n      return contact.id == id;\n    });\n    if (!contact) return;\n    return App.Contact.create(contact);\n  }\n```", "```js\n{{#link-to \"contact.index\" this}}{{name}}{{/link-to}}\n```", "```js\nApp.ContactRoute = Ember.Route.extend({\n  ...\n  serialize: function(model, params){\n    var data = {}\n    data[params[0]] = Ember.get(model, 'id');\n    return data;\n  }\n});\n```", "```js\n{contact_id: 1}\n```", "```js\nthis.resource(\n  'book',\n  {path: '/name/:name/:publish_year'},\n  function(){\n  }\n);\n```", "```js\n{\n  name: 'jon+doe',\n  publish_year: '1990'\n}\n```", "```js\nApp.ContactsRoute = Ember.Route.extend({\n  model: function(params){\n    return Ember.$.getJSON('/contacts');\n  }\n});\n```", "```js\nApp.ContactsRoute = Ember.Route.extend({\n  model: function(params){\n  var promise = Ember\n    .Object\n    .createWithMixins(Ember.DeferredMixin);\n\n    Ember\n      .$\n      .getJSON('/contacts')\n      .then(reject, resolve);\n\n    function resolve(contacts){\n      contacts = contacts.map(function(contact){\n        return App.Contact.create(contact);\n      });\n      promise.resolve(contacts)\n    }\n\n    function reject(res){\n      var err = new Error(res.responseText);\n      promise.reject(err);\n    }\n\n    return promise;\n  }\n});\n```", "```js\nvar promise = Ember.Deferred.create();\n\nEmber\n  .$\n  .getJSON('/contacts')\n  .then(success, fail);\n\nfunction success(){\n  contacts = contacts.map(function(contact){\n    return App.Contact.create(contact);\n  });\n  promise.resolve(contacts)\n}\n\nfunction fail(res){\n  var err = new Error(res.responseText);\n  promise.reject(err);\n}\n\nreturn promise;\n```", "```js\nreturn new Ember.RSVP.Promise(function(resolve, reject){\n\n  Ember\n    .$\n    .getJSON('/contacts')\n    .then(success, fail);\n\n  function success(){\n    contacts = contacts.map(function(contact){\n      return App.Contact.create(contact);\n    });\n    resolve(contacts)\n  }\n\n  function fail(res){\n    var err = new Error(res.responseText);\n    reject(err);\n  }\n\n});\n```", "```js\nApp.ContactsRoute = Ember.Route.extend({\n  setupController: function(controller, model){\n    controller.set('model', model);\n  }\n});\n```", "```js\nApp.ContactsIndexRoute = Ember.Route.extend({\n  setupController: function(controller, model){\n   this._super(controller, model);\n   this\n        .controllerFor('application')\n        .set('contacts', this.modelFor('contacts'));\n  }\n});\n```", "```js\nmodelFor and controllerFor, that can be used to access the models and controllers of other handlers respectively. Note that the argument passed is the route's or resource's name. Here are more examples:\n```", "```js\nthis.modelFor('contacts.index');\nthis.controllerFor('contact.edit');\n```", "```js\n{{#with controller.controllers.contact}}\n...\n{{/with}}\n```", "```js\nApp.ContactEditRoute = Ember.Route.extend({\n  controllerName: 'contact'\n});\n```", "```js\n  <script type=\"text/x-handlebars\">\n    <div class=\"container\">\n      {{outlet}}\n    </div>\n  </script>\n```", "```js\nApp.ContactEditRoute = Ember.Route.extend({\n  renderTemplate: function() {\n    this.render('contacts/form');\n  }\n});\n```", "```js\n<script type=\"text/x-handlebars\" data-template-name=\"game\">\n  <div id=\"leaderboard\">{{outlet leaderboard}}</div>\n  <div id=\"mainboard\">{{outlet mainboard}}</div>\n</script>\n```", "```js\nApp.GameRoute = Ember.Route.extend({\n  renderTemplate: function() {\n    this.render('mainboard', {\n      into: 'game',\n      outlet: 'mainboard',\n      controller: 'mainboard'\n    });\n    this.render('leaderboard', {\n      into: 'game',\n      outlet: 'leaderboard',\n      controller: 'leaderboard'\n    });\n  }\n});\n```", "```js\nApp.IndexRoute = Ember.Route.extend({\n  redirect: function(){\n    this.transitionTo('contacts');\n  }});\n```", "```js\nApp.ContactsRoute = Ember.Route.extend({\n  beforeModel: function(){\n    var contacts = store('contacts') || CONTACTS;\n    store('contacts', contacts);\n  }\n});\n```", "```js\nApp.ContactsIndexRoute = Ember.Route.extend({\n  afterModel: function(){\n    var model = this.modelFor('contacts') || [];\n    var contact = model.get('firstObject');\n    if (!contact) return this.transitionTo('contacts.new');\n    return this.transitionTo('contact.index', contact);\n  },\n});\n```", "```js\nApp.ContactsRoute = Ember.Route.extend({\n  action: {\n    error: function(error){\n      this.controllerFor('error').set('error', error);\n      this.transitionTo('error');\n    } \n  }\n});\n```"]