- en: '*Chapter 6:* Refactoring with PageObjects'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main learning goal here will be to get familiar with how to upgrade a set
    of end-to-end tests (test suite) with a TestCafe role and the `PageObject` pattern.
    We will use `Role` to speed up the tests and will utilize `PageObjects` to achieve
    reduced code duplication and enhanced maintainability. By the end of this chapter,
    we will have a structured and optimized set of tests and know how to apply roles
    and `PageObject` patterns to any future projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a `Role` for logging in.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refactoring tests with `PageObjects`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving `PageObjects` with functions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All the code examples for this chapter can be found on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/tree/master/ch6](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/tree/master/ch6).'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Role for logging in
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we already learned from [*Chapter 2*](B16280_02_Final_JM_ePub.xhtml#_idTextAnchor027),
    *Exploring TestCafe under the Hood*, TestCafe has a built-in user role mechanism
    that emulates user actions for logging in to a website. The role mechanism saves
    the logged-in state of each user in a separate role that can then be reused in
    any part of your tests to switch between user accounts.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s start by adding a `Role` to optimize and speed up the logging-in
    process that we perform in each test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we are using the login steps inside the `Role`. These steps
    will be executed when the `regularUser` role is called for the first time. Once
    the login steps are executed, the final (logged-in) state of the authentication
    cookie and browser storage will be saved and reused in each further call of the
    `regularUser` role (login steps will not be executed again, as a saved logged-in
    state will be applied). Now, let''s use the `regularUser` role in the `Log out`
    test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s also replace the login steps with the `regularUser` role in the `beforeEach`
    blocks of all other fixtures:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also review and download this file on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch6/test-project/tests/basic-tests18.js](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch6/test-project/tests/basic-tests18.js).'
  prefs: []
  type: TYPE_NORMAL
- en: Utilizing roles speeds up execution of the test and our test project becomes
    more structured and granular, which is a good approach to follow.
  prefs: []
  type: TYPE_NORMAL
- en: As we have built our set of tests, improved them with setup, teardown, and roles,
    let's now make them even more effective and maintainable by refactoring with `PageObjects`.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring tests with PageObjects
  prefs: []
  type: TYPE_NORMAL
- en: '`PageObject` is a test automation pattern that gives you the option to create
    a separate file with selectors and functions that represent an abstraction of
    the tested page. This separate file can then be included and used in test code
    to refer to page elements.'
  prefs: []
  type: TYPE_NORMAL
- en: Note that our tests contain excessive code. For example, the `#top-menu .projects`
    CSS selector (https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch6/test-project/tests/basic-tests18.js#L62)
    is used in 22 lines of code - basically each time the test clicks on the `PageObjects`
    allow you to keep all selectors in one place, so the next time the web page changes,
    you will only need to modify the `PageObject` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s create a simple `redmine-page.js` file inside our `tests` folder.
    Open any shell, go to the `test-project` folder, and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open the `redmine-page.js` file in a code editor of your choice, add the
    code to declare the `linkProjects` selector inside the `redminePage` object, and
    then export this object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also review and download this file on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch6/test-project/tests/redmine-page1.js](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch6/test-project/tests/redmine-page1.js).'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we created a `redminePage` object with a `linkProjects` property containing
    a selector for this element. Now we need to include this object in our tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition to that, we will need to replace all occurrences of `#top-menu
    .projects` with a corresponding `PageObject` element. So, here is how the updated
    `Create a new project` test will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also review and download this file with all the tests updated to use
    `redminePage.linkProjects` on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch6/test-project/tests/basic-tests19.js](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch6/test-project/tests/basic-tests19.js).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now move all constants with random digit generation to `redmine-page.js`,
    as all the strings that are using random digits will be moved to `redmine-page.js`
    too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s move all selectors to the `redminePage` object inside `redmine-page.js`.
    We will start from the login credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add selectors for the page elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, let''s enhance the `redminePage` object with properties containing
    the text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also review and download this file on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch6/test-project/tests/redmine-page2.js](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch6/test-project/tests/redmine-page2.js).'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the URLs such as `http://demo.redmine.org/`, and the notification
    text strings such as `'Your account has been activated. You can now log in.'`
    can be easily refactored with `PageObjects` too.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s use `PageObject` elements in each of our tests. So, the updated
    `Redmine log in tests` fixture will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Create a new user` test with `PageObject` elements will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Log in` and `Log out` tests will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is what the updated `Redmine entities creation tests` fixture will look
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Create a new project` and `Create a new issue` tests will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also review and download this file with all the tests updated to use
    `PageObjects` on GitHub: [https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch6/test-project/tests/basic-tests20.js](https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch6/test-project/tests/basic-tests20.js).'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned how to enhance tests with `PageObjects` and refactored
    our test project accordingly. Now, let's improve maintainability of the tests
    even further by adding functions to `PageObject`.
  prefs: []
  type: TYPE_NORMAL
- en: Improving PageObjects with functions
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can observe in `redmine-page.js`, some of the properties inside `PageObject`
    still contain some repetitive code. Let''s optimize our `PageObject` even more
    by moving such repetitive code into the separate functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `buttonLogin` selector was updated. Previously, it was `[name="login"]`,
    but now, the `createButtonSelector` function will return it as `[value="Login
    Â»"]`. This was done to generalize our selector's generation, so now the `buttonLogin`
    selector is created with the same `createButtonSelector` function as all the other
    button elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now generate a group of selectors for the test project links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s generate a group of texts for the test project name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s generate a group of object properties that will contain texts
    for the issue name (for example, `Test issue 1598717241841`) and issue description
    (for example, `Test issue description 1598717241841`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also review and download this file with `PageObject` functions: https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch6/test-project/tests/redmine-page3.js,
    and the corresponding file with tests: https://github.com/PacktPublishing/Modern-Web-Testing-with-TestCafe/blob/master/ch6/test-project/tests/basic-tests21.js.'
  prefs: []
  type: TYPE_NORMAL
- en: So, now we have functions to create groups of similar selectors and texts. This
    technique is ultimately useful as a group of similar elements can be edited in
    one place by changing the corresponding function that creates them.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we explored how to use `Role` when logging in to speed up test
    execution, refactored the tests with `PageObject`, and improved `PageObject` with
    functions. Now we have a fast set of tests that are easy to maintain and expand
    upon (should that be necessary in the future). This knowledge can be utilized
    to refactor the existing tests, or to build a new robust and easy-to-maintain
    set of automated tests.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will wrap up the test project and have a quick peek
    into the future of TestCafe.
  prefs: []
  type: TYPE_NORMAL
