- en: Chapter 11. Optimizing Work and Increasing Collaboration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Aptana Studio can optimize your collaborative work within your development
    team in more ways than you might think. As you already know, Aptana Studio is
    much more than just a source code editor. In this chapter, we will not only take
    a look at how we can improve our own work, but also the effectiveness of the whole
    development team.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the syntax highlight and sharing the created theme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing and exporting settings for sharing it with other developers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing and exporting a code formatter profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organizing the work with Bookmarks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organizing the work with Tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with the Task view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using tasks within source code comments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a syntax highlight theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the first section of this chapter, we will take a look at how we can create
    our own syntax highlight theme. Everybody knows how to work with their favorite
    editor as they work with it frequently, but now it's time to switch over and work
    with the Aptana Studio.Unfortunately, at first it's quite difficult to get used
    to the new syntax highlight of the IDE, but hopefully by the end of this chapter
    you will find it easy.
  prefs: []
  type: TYPE_NORMAL
- en: The Aptana Studio provides you with a theme editor, where you can adjust the
    syntax highlight. Let's take a look at how easy it is to create your own syntax
    highlight theme.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating a syntax highlight theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to **Window** | **Preferences** and go to **Aptana Studio** | **Themes**
    within the tree.![Time for action – creating a syntax highlight theme](img/8246_11_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before we start adjusting the theme, we need to create our own theme. Therefore,
    we click on the small **+** button at the top of the **Themes** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the window which appears we will need to enter the name of our theme, as
    shown in the following screenshot:![Time for action – creating a syntax highlight
    theme](img/8246_11_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, using the theme which we had created before, we begin to customize the
    new one. At the top of the **Theme** window you can change the color of the foreground,
    background, caret, selection, and the line highlight. Just click on the required
    colored square in order to change these colors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is a long list of elements which you can use to adjust the foreground
    and background colors, and also the font style. Try this yourself and change some
    colors and styles to suit your preference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Font** row, you can change the font that is used for the editors. First
    click on the **Select...** button and then select the font, font style and font
    size that you prefer, as shown in the following screenshot:![Time for action –
    creating a syntax highlight theme](img/8246_11_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the bottom area of the **Themes** window, you can select in which views and
    editors the theme should be used. Simply select the checkbox combination that
    meets your requirements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you have finished customizing your own theme, click on **Apply** and then
    **OK** to complete this process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just created our own theme. In short, we have seen where we can create
    our own theme and how easy it is to customize it. In addition to this, we can
    also select where our theme should be used.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing or restoring your configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you already know, configuring the Aptana Studio can be a very long process.
    You may have already adjusted a lot of settings and there are nevertheless a lot
    of settings that you can still adjust. Thankfully you don't have to select all
    these settings twice, as the Aptana Studio comes with a lot of import and export
    features. If you have to reinstall a new instance of Aptana Studio or set up a
    new instance, you can easily import all your settings without you have to reconfigure
    them all again.
  prefs: []
  type: TYPE_NORMAL
- en: 'This feature is much more useful, for development teams, especially in the
    beginning of the project when the project leader elaborates a basic configuration.
    This task should be done with a handful of senior or lead developers, but not
    too many (if the group is too large the process may unnecessarily take a long
    time). The important points for elaborating the basic configuration are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Base configuration: We start with the base configuration. We have already covered
    this basic configuration in [Chapter 3](ch03.html "Chapter 3. Working with Workspaces
    and Projects"), *Working with Workspaces and Projects*. There we had examined
    the behavior, in which, when we had created a new workspace, all of our settings
    were lost. We do however, also need this functionality when we are setting up
    a completely new instance of Aptana Studio. As you may remember, we found this
    import/export feature by going to **File** | **Import** and navigating to **General**
    | **Preferences** within the tree. More information about performing an import
    or export can be found in the *Importing and exporting preferences* section of
    [Chapter 3](ch03.html "Chapter 3. Working with Workspaces and Projects"), *Working
    with Workspaces and Projects*. Among the many general settings, there are also
    settings such as the Bookmarks view configuration, Key Preferences, Tasks view
    configuration, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Connection settings: The export of the connection settings, as we already learned
    in [Chapter 8](ch08.html "Chapter 8. Remotely Working with FTP"), *Remotely Working
    with FTP*, contains all configured connections from the Connection Manager. If
    the development team works frequently with the connections to different servers,
    it''s very useful to create an export file which contains all of the required
    connections. After importing the connections, the user might have to just change
    the username for each connection, and enter their password (Note that no passwords
    are exported by the Connection settings export). As you may remember, this import/export
    feature can be found by going to **File** | **Import** and by navigating to **Aptana
    Studio** | **Connection Settings** within the tree. More information about performing
    an import or export can be found in the *Importing and exporting FTP settings*
    section of [Chapter 8](ch08.html "Chapter 8. Remotely Working with FTP"), *Remotely
    Working with FTP*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Syntax highlight: The team should work together to create a syntax highlight
    configuration for the most frequently used programming languages. This gives you
    the advantage when a team member needs help from another team member. The ones
    helping are able to orient themselves faster within the source code of the other.
    They quickly recognize all important keywords and code structures. We have already
    covered the topic of creating and configuring a syntax highlight theme in this
    chapter. We have also seen how to change a theme in the *Time for action – changing
    the color theme* section in the *Customizing Aptana Studio 3* section of [Chapter
    2](ch02.html "Chapter 2. Basics and How to Use Perspectives and Views"), *Basics
    and How to Use Perspectives and Views*. We will look at how you can import and
    export themes in the next few pages of this chapter but in the meantime we will
    complete this listing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Code formatting: For the same reason stated earlier, the team should format
    all their project source code in the same way. Therefore, they should work together
    to configure a code formatter profile that every developer must use. One bonus
    for doing this is that every developer can read the code faster when he has to
    read it on another team member''s workstation, and it will also save a lot time
    and stress when they don''t have to format each file before they can work with
    it. In [Chapter 10](ch10.html "Chapter 10. PHP Projects"), *PHP Projects*, in
    the *Using and configuring the code formatter* section, we have already seen how
    we can create some profiles. How we can import and export these profiles will
    be seen later in this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These were the important points for importing and exporting a lot of settings
    from Aptana Studio. Importing and exporting the base configuration and the connection
    settings has already been seen in the previous chapters. However, importing and
    exporting syntax highlight themes and code formatting profiles is something we
    will take a look at in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: If you have already created your own syntax highlight theme, you will now surely
    want to know how to export it and restore it at a later point in time. So, let's
    take a look at this.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – importing and exporting syntax highlight themes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to **Window** | **Preferences** and go to **Aptana Studio** | **Themes**
    within the tree.![Time for action – importing and exporting syntax highlight themes](img/8246_11_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the top-right corner of your **Themes** window, you will find the **Export**
    button. Firstly, we want to export our current theme, and then import it back
    afterwards. Therefore, we will need to select the theme that we want to export
    and then click on the **Export** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the window that opens, we will have to select the location where we want
    to save our theme file. Just select your preferred directory and enter a name
    for the theme. This theme file contains the theme information in an XML structure
    and must end with **.tmTheme**, as seen in the following screenshot:![Time for
    action – importing and exporting syntax highlight themes](img/8246_11_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you have chosen a filename and directory, just click on the **Save** button
    in order to complete the export process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we will try to import the profile file back from the location we had exported
    it to. Here, we will start again with the themes settings section from step 1.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the top-right corner of the **Themes** page, you will find the **Import**
    button to the left of the **Export** button—click on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The opening window allows you to select a theme file from your file system.
    Navigate to the directory where you saved the exported theme and select it, as
    shown in the following screenshot:![Time for action – importing and exporting
    syntax highlight themes](img/8246_11_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click on the **Open** button in order to complete the import process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now the created theme is available in Aptana Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just navigated into the preferences and exported an existing syntax highlight
    theme to our local file system. Then we went back to the preferences and imported
    the theme back into Aptana Studio. With this process you can restore your syntax
    highlight theme to other Aptana Studio instances, or share it with other developer's
    code formatter profiles.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 10](ch10.html "Chapter 10. PHP Projects"), *PHP Projects*, we have
    seen how we can create our own code formatting profile. However, like the syntax
    highlight themes, it's best practice to export these code formatting profiles
    in order to create a backup of these settings or to share it with other developers.
    It's just as easy as importing and exporting syntax highlight themes. Let's try
    it!
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – importing and exporting code formatter profiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to **Window** | **Preferences** and go to **Aptana Studio** | **Formatter**
    within the tree, as seen in the following screenshot:![Time for action – importing
    and exporting code formatter profiles](img/8246_11_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the top-right corner of the **Themes** page, you will find the **Export**
    button. In this view the **Import** and **Export** buttons are displayed with
    a blue icon. At first, we want to export our current theme, and might want to
    import it back in later. Therefore, we select the profile that we want to export
    and then click on the **Export** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the window which appears, we have to select the location where we want to
    save our profile file. Just select your preferred directory and enter a name for
    the profile. This profile file contains the formatter information in an XML structure
    and must end with the `.xml` extension, as shown in the following screenshot:![Time
    for action – importing and exporting code formatter profiles](img/8246_11_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you have chosen a filename and directory, just click on the **Save** button
    in order to complete the export process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we will try to import the profile file back from the same location which
    we had exported it to. Here we start again with the formatter settings section
    from step 1.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the top-right corner, you will find the **Import** button to the left of
    the **Export** button—click on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The window which appears allows you to select a profile file from your file
    system. Navigate to the directory where you have just saved the exported profile,
    and select it as shown in the following screenshot:![Time for action – importing
    and exporting code formatter profiles](img/8246_11_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click on the **Open** button in order to complete the import process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now the imported profile is available in Aptana Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just navigated through the preferences and exported an existing code
    formatter profile to our local filesystem. After that, we went back to the preferences
    and imported the profile back into Aptana Studio. Using this process, you can
    restore your code formatter profile to other Aptana Studio instances, or share
    it with other developers.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing Aptana Studio preferences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we have seen how you can export a lot of the settings
    and preferences of Aptana Studio. If your team now starts the developing process
    and has to configure the Aptana Studio workspace of each of their workstations,
    they can save a lot of time by simply importing the settings. When new developers
    join your team, they can be up and running with a fully configured Aptana Studio
    version in a few minutes without having to do endless amounts of configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the process again in a few steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create your first Aptana Studio instance and configure it completely to the
    needs of your upcoming project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Export all settings and share them with other team members.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each team member now installs the current version of Aptana Studio on their
    workstation and imports the shared settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The sharing of the team's settings, templates, and much more could be handled
    over an integrated source control, such as SVN. The team leader simply creates
    a new repository and defines the team members who can work on files and then commit
    it. This small circle can now extend the team's settings and template base to
    other team members , who can just check out each new project convention from the
    SVN and use it immediately. A further advantage of using version control is the
    history of the development of the configuration and template usage.
  prefs: []
  type: TYPE_NORMAL
- en: An additional solution of sharing a fully configured instance of the Aptana
    Studio is to make a complete copy of this basic installation of the Aptana Studio.
    One disadvantage of this process is that you have to create a basic installation
    for each operating system. Although, another advantage is that the team members
    will already have the required plugins installed. After installing a copy of the
    basic installation, the developer just has to perform an update of the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Ideas and discussion**'
  prefs: []
  type: TYPE_NORMAL
- en: If you have some ideas about optimizing Aptana Studio or you want to discuss
    some of our examined topics, just visit our page at [http://www.coding.ms/aptana-studio-3/](http://www.coding.ms/aptana-studio-3/).
  prefs: []
  type: TYPE_NORMAL
- en: Working with bookmarks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're working on different source code parts and therefore have to frequently
    jump between different source code files, it can save a lot of time if you use
    bookmarks to mark the currently used source code areas. Luckily Aptana Studio
    provides you with the ability to do this. You can place a bookmark simply on a
    line of any source code file without changing its content. Aptana Studio then
    remembers all bookmarks within your project.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Using bookmarks in libraries**'
  prefs: []
  type: TYPE_NORMAL
- en: If you're using external libraries and you have to often look up functionalities
    within other files, it is worth using bookmarks in order to jump quickly and easily
    to the required places. The only requirement for this is that the external libraries
    must be within an Aptana Studio project.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – setting a bookmark
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open the source code file within the editor, where you want to set a new bookmark.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the left margin of the line number in which you want to place
    the bookmark and select the **Add Bookmark...** entry, as shown in the following
    screenshot:![Time for action – setting a bookmark](img/8246_11_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the window which appears you're able to enter the bookmark name. If you're
    trying to set a bookmark on a line where some code is already contained, Aptana
    Studio will prefill this code into the name field. Please note that you don't
    have to use this prefilled name, you can name your bookmark anything you wish
    to in the following dialog box:![Time for action – setting a bookmark](img/8246_11_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click on **OK** in order to complete setting the new bookmark.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have just set a new bookmark into a line of a file where you might have
    to jump frequently to view or change something. It is easy to recognize which
    line has a bookmark by the small blue bookmark label on the left of the line number,
    as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/8246_11_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: However, by completing this process and setting one bookmark this doesn't tell
    us how we can then jump to it. To enable us to do this Aptana Studio provides
    us a bookmark view. Let's take a look and see how to work with this view.
  prefs: []
  type: TYPE_NORMAL
- en: The bookmark view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The bookmark view is a list that contains all of the available bookmarks in
    your currently opened project. You can open this view by navigating to **Window**
    | **Show view** | **Bookmarks**. The **Bookmarks** view is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The bookmark view](img/8246_11_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you want to jump to a bookmark from the list, simply double-click on the
    related bookmark and the Aptana Studio opens the bookmarked file within the editor.
    It then places the cursor on the line where the bookmark is located.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, over time, your list of bookmarks can become quite untidy and
    you may need to clean up or filter the bookmark view. We will now see how this
    can be done. For the next *Time for action* section, we will give ourselves the
    task of filtering all of the available ZendFramework bookmarks.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – configuring the bookmark view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open the bookmark view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **View** menu and select the **Configure Content...** entry.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before you can start to create and use your own filter, you have to deselect
    the **Show all items** checkbox, seen in the following screenshot:![Time for action
    – configuring the bookmark view](img/8246_11_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you can create a new configuration. Just click on the **New** button in
    order to create a new filter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you have clicked on the **New** button, within the left-hand side list,
    appears a new configuration entry with the name **New Configuration**. We will
    now have to configure this new entry so that we can use it. These actions can
    be seen in the following screenshot:![Time for action – configuring the bookmark
    view](img/8246_11_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will now rename this entry with a more descriptive name than "New Configuration".
    To do this, simply click on the **Rename** button and then enter a name, for example,
    `ZendFramework`. The following dialog, as seen in the following screenshot, can
    be used for renaming:![Time for action – configuring the bookmark view](img/8246_11_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we can select the scope in which the filter will work. For this simple
    example, we leave the scope on any element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we can enter some text that should or should not be contained within
    the bookmark's name. For this example, enter `ZF` as the short name of ZendFramework
    and select **contains** within the Text select box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we can finish the configuration by clicking on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just created a filter for the bookmark view. Now, the **View** menu
    provides us with a new entry named **Show**. This small sub menu contains all
    of the available filters and gives us the ability to filter the bookmark view
    quickly.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a quick test, we will create two bookmarks. The first contains the keyword
    **ZF** and the second will contain some other keywords. After this, just play
    a bit with the **ZendFramework** entry from the **Show** submenu. As you will
    see, the list will display and hide the entry without the **ZF** keyword. These
    actions are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/8246_11_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Collect the displayed list columns**'
  prefs: []
  type: TYPE_NORMAL
- en: If you are unable to see some of the information on the bookmarks, or if there
    are list columns you don't need, use the **Configure Columns…** entry within the
    **View** menu to customize the columns that you require.
  prefs: []
  type: TYPE_NORMAL
- en: If you work a lot with bookmarks and you already have a lot of bookmarks and
    filters, and you don't want to change the filter every time—no problem, just go
    ahead and create an additional bookmarks view over the current bookmarks view
    menu. You can equip your new bookmark view with any name of your choice that describes
    the configured list inside.
  prefs: []
  type: TYPE_NORMAL
- en: SVN commit comment templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're working a lot with SVN-based projects, it often occurs that you have
    to commit your current source codes. As discussed previously, it's always recommended
    that you provide your commits with detailed comments about what you have done.
    Hence, when you often make similar changes, it's a good idea to create a template
    for these comments.
  prefs: []
  type: TYPE_NORMAL
- en: Many development teams also use the post-commit hook of the SVN Repository in
    order to further process the committed data in additional ways. Therefore, it
    could be advantageous that every team member writes his comments in the same style
    and structure so that automatic processing is possible.
  prefs: []
  type: TYPE_NORMAL
- en: In order to make this easier, you can create templates for your SVN comments.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating SVN commit comment templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to **Window** | **Preferences**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Team** | **SVN** | **Comment Templates** within the tree. Here you will
    find the complete list of the available comment templates, as seen in the following
    screenshot:![Time for action – creating SVN commit comment templates](img/8246_11_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **New...** button on the right-hand side of the list in order to
    create a new template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here you can enter the complete text of your new comment, as seen in the following
    screenshot:![Time for action – creating SVN commit comment templates](img/8246_11_26.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click on the **OK** button to save your new comment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You have just created a comment template for the SVN-commit process. If you''re
    now performing an SVN commit, and the SVN plugin requires you to enter a comment,
    you have the possibility to choose one of your comment templates, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/8246_11_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After selecting the necessary template, you can adjust or extend the template
    text and finish your commit.
  prefs: []
  type: TYPE_NORMAL
- en: Working with tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While developing a web application, it may often be the case that you are working
    with sections that are not currently of high importance or are not completely
    coded, and you want to finish this part at a later time. Unfortunately, as your
    project gets larger and larger, that you may forget these sections within your
    source code, leaving holes in your code. What is the best solution to allow your
    to remember these positions?
  prefs: []
  type: TYPE_NORMAL
- en: How great would it be if there was a self-organizing to-do list that contains
    points such as to-dos and fix-mes, and the entries may also have different priorities.
    For this reason, the Aptana Studio provides you a Task view. This view helps you
    to remember all of the positions where you have to do or fix something. All entries
    within the list are automatically added while coding on your project. Aptana Studio
    understands by default the `@TODO` and the `@FIXME` tags, used for tagging task
    entries.
  prefs: []
  type: TYPE_NORMAL
- en: The tags that Aptana Studio generally understands can be configured within the
    preferences. Let's take a look at how this works.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – configuring the tasks and managing the task tags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First navigate to **Window** | **Preferences** and go to **Aptana Studio** |
    **Tasks**. The **Tasks** window is shown in the following screenshot:![Time for
    action – configuring the tasks and managing the task tags](img/8246_11_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this preference window, we firstly need to make a decision whether we want
    to use case-sensitive or case-insensitive task tags, via the **Case sensitive
    task tags** checkbox, located near the bottom of the window. Based on this decision,
    we either select the case-sensitive task tags or we don't. It is often a good
    choice to use case-sensitive task tags because if you write a comment where the
    tag name is contained in the comment text, the comment will be marked as a task.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The list above the checkbox allows us to get an overview of the currently available
    task tags. On the left, we see the tag name itself; and on the right, the related
    priority of each tag. In order to edit an entry, select the entry you want to
    change and click the **Edit...** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the edit window, you can change the tag name or priority of the task.
    After you have adjusted the task tag to fit with your requirements, click on **OK**
    to save your changes, as shown in the following screenshot:![Time for action –
    configuring the tasks and managing the task tags](img/8246_11_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we can add a new task tag by clicking on the **New...** button in order
    to open the creation window. This window has the same structure as the edit window.
    You only need to enter the tag name and the required priority of your new task
    tag, and that's it. At this point you can create a task tag named `OPTIMIZE` for
    source code parts that function well, but they might need to be optimized at a
    later date. An example of this task creation is shown in the following screenshot:![Time
    for action – configuring the tasks and managing the task tags](img/8246_11_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on **Apply** and then on the **OK** button to complete the configuration
    of the tasks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just configured the task behavior and managed the task tags that the
    Aptana Studio uses for feeding its task list. We have seen how we can add new
    task tags, and how to edit or remove the available task tags.
  prefs: []
  type: TYPE_NORMAL
- en: If you work within a development team, you may need to add some some more tags
    but thanks to the management of the tags this is not a problem, and you can create
    as many tags as you need.
  prefs: []
  type: TYPE_NORMAL
- en: Now we will see how we can work with the task tags.
  prefs: []
  type: TYPE_NORMAL
- en: Creating tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating tasks can be done in two different ways. In one way you can create
    a task over the line numbers, and in another you can write tasks within the source
    code comments. In the next section we will to examine how we can create such tasks
    and what are the differences between the creation processes.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating a task over the line numbers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open a PHP file within the editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the left of the line number where you want to create a task.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Add Task...** entry, as seen in the following screenshot:![Time
    for action – creating a task over the line numbers](img/8246_11_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the window which appears, the most important bits of information are already
    filled in. You just need to enter a description of the new task. Although, you
    must make sure that the description contains the task tag so that the task list
    is able to filter these tasks too. This is shown in the following screenshot:![Time
    for action – creating a task over the line numbers](img/8246_11_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click the **OK** button and that's it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have just created our first task with help of line numbers. The task view
    should immediately list them. In addition to this, you can also identify a line
    with a linked task on by the small task icon, as you can see in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/8246_11_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we have already mentioned, there is a second way to create a task; we'll
    take a look at this now.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating a task using a comment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open a PHP file within the editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for the line where you want to place the task.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, begin to enter a PHPDoc conform comment. This comment should contain the
    PHPDoc attribute `@TODO`, followed by the task description text.![Time for action
    – creating a task using a comment](img/8246_11_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After saving your file, the task should appear within the task list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just created a task with the help of a PHPDoc comment. After saving
    the file that contains the new task, the task list will include the new task.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Where are my tasks?**'
  prefs: []
  type: TYPE_NORMAL
- en: What if you have created your task as described here, but they don't appear
    within the task list? Make sure that your project has a nature type, otherwise
    the build process won't read out the task comments.
  prefs: []
  type: TYPE_NORMAL
- en: But, you surely may wonder, which method should I prefer? Well, it turns out
    that the comment-based method of creating tasks has more advantages. Firstly,
    the Tasks can be shared with Git and SVN; and secondly, if the comments are PHPDoc
    conform, you will also be to fill in these tasks into your PHPDoc documentation.
    The latter method of creating tasks is perhaps better for a single developer who
    doesn't want to equip his/her code with all the things that he/she still has to
    create.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Tasks within developer teams**'
  prefs: []
  type: TYPE_NORMAL
- en: When working on large projects, it's very advantageous when all team members
    have marked their tasks, bugs, and optimizations with the related tags. When all
    occurrences are marked accordingly, the project leader is can easily gain a rough
    overview of how many points are left to solve without getting in contact with
    each developer.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – try out what you have learned
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your task now is to create your own syntax highlight theme with the highlight
    that you prefer.
  prefs: []
  type: TYPE_NORMAL
- en: After that, export all of your Aptana Studio settings, themes, code formatter,
    and so on, so that you can restore them later. After you have finished exporting
    your data, try to import the files back in.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, when you've tried out the import and export features, make yourself
    familiar with the bookmarks and tasks. To do this, open one of your projects and
    navigate through the contained files and then place a bookmark on the lines which
    you use often. If you find a line which is incomplete or requires optimization,
    place a task on that line.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. Where can you export the themes and the code formatter?
  prefs: []
  type: TYPE_NORMAL
- en: The **Preferences** window within the **Aptana Studio** entry.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Export** button in the **File** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These settings can't be exported.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. What is the difference between the two ways that we have learned of creating
    tasks?
  prefs: []
  type: TYPE_NORMAL
- en: Comment-based tasks are located within the related file, the other within the
    project itself.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Comment-based tasks are located within the project itself, the other within
    the related file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is no difference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q3\. What task tags are predefined by Aptana Studio?
  prefs: []
  type: TYPE_NORMAL
- en: '`OPTIMIZE` and `TODO`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`TODO` and `FIXME`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`FIXME` and `OPTIMIZE`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By the end of this chapter, you should be able to create and manage your own
    syntax highlight themes. Additionally, you should be able to import and export
    the most important settings and configurations of the Aptana Studio. You should
    also be able to manage and optimize your work by using bookmarks and tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Aptana Studio can however do much more than what we have covered here. For example,
    you could extend the available bundles, templates, and snippets or create new
    ones, as you need within your project. Further more, there is the possibility
    of sharing them within your development team, like the Aptana Studio team does.
  prefs: []
  type: TYPE_NORMAL
- en: When your project environment has reached such a point, the bundle keeps learning
    with your increasing project. Integrate all the frequently used code structures
    into snippets, then create file templates with the base structure of your project
    where all headers and footers are already contained, extend the menu functionality
    of the bundle so that all developers are able to use the bundle features over
    the menu (writing their own commands that they will be executing directly from
    the editor), and much more.
  prefs: []
  type: TYPE_NORMAL
- en: In the next and last chapter, we will take a look at what we have to do when
    errors occur.
  prefs: []
  type: TYPE_NORMAL
