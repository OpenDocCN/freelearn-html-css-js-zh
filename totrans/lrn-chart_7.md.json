["```js\nconst data = {\n   labels: [\"One\", \"Two\", \"Three\", \"Four\"],\n   datasets: [{label:'Dataset 1',… },{label:'Dataset 2',…}, \n   {label:'Dataset 3',…}]\n};\nnew Chart('chart', {type: 'line', data: data,\n    options: {\n        legend: { display: false },\n        tooltips: {\n            mode: 'index',\n            titleFontSize: 16,\n            titleFontColor: 'pink',\n            bodyFontStyle: 'italic',\n            titleSpacing: 10,\n            caretSize: 10,\n            caretPadding: 10,\n            backgroundColor: 'rgba(10,10,60,.5)',\n            borderColor: 'yellow',\n            borderWidth: 3,\n        },\n    }\n});\n```", "```js\nconst data = {\n   labels: [\"One\", \"Two\", \"Three\", \"Four\"],\n   datasets: [{label:'Dataset 1',… },{label:'Dataset 2',…},\n   {label:'Dataset 3',…}]\n};\nnew Chart('chart', { type: 'line', data: data,\n    options: {\n        legend: { display: false },\n        tooltips: {\n            mode: 'index',\n            intersect: false,\n            filter: (item, data) => data.datasets[item.datasetIndex]\n                                        .data[item.index] < 20\n        },\n        events: ['click']\n    }\n});\n```", "```js\nnew Chart('chart', { type: 'line', data: data,\n        options: {\n            legend: { display: false },\n            tooltips: {\n                mode: 'index',\n                intersect: false,\n                itemSort: (a,b) => b.y - a.y\n            },\n            events: ['click']\n        }\n    });\n```", "```js\nnew Chart('chart', { type: 'horizontalBar', data: data,\n    options: {\n        legend: { display: false },\n        tooltips: {\n            mode: 'index',\n            callbacks: {\n                footer: (items, data) => 'Average: ' + (data.datasets\n                                        .map(d=>d.data[items[0].index])\n                                        .reduce((a,b)=>a+b, 0) /     \n                                         items.length)\n                                        .toFixed(2),\n                title: (items, data) => \"Stage \" + items[0].yLabel,\n                beforeBody: () => '============',\n                afterBody: () => '------------------',\n            }\n        },\n        events: ['click']\n    }\n});\n```", "```js\n<html><head> ...\n    <style> \n        #tooltip {\n            opacity: 0;\n            position: absolute;\n            margin: 5px;\n        }\n    </style>\n</head><body>\n<canvas id=\"chart\" width=\"200\" height=\"100\"></canvas>\n<div id=\"tooltip\"></div>\n<script>\n    const data = {\n        labels: [\"jupiter\", \"saturn\", \"uranus\", \"neptune\"],\n        datasets: [{\n           data: [142984,120536,51118,49528],\n           backgroundColor: ['#d7191c','#fdae61','#abdda4','#2b83ba'],\n        }]\n    };\n    new Chart('chart', { type: 'bar', data: data,\n        options: {\n           legend: { display: false },\n            title: {\n                display: true,\n                text: 'Planetary diameters',\n                fontSize: 24\n            },\n            tooltips: {\n                mode: 'index',\n                intersect: true,\n                enabled: false, // turn off canvas tooltips\n                custom: function(model) {\n                    const tooltip = document.getElementById('tooltip');\n                    if(model.opacity === 0) {\n                        tooltip.style.opacity = 0;\n                        return;                    }\n                   if(model.body) {\n                        const value = model.body[0].lines[0];\n                        tooltip.innerHTML = '<b>'+ value + \" km<br/>\"\n                                            +'<img width=\"50\"  \n                                            src=\"img/>                                            +model.title[0] +'.jpg\" \n                                            </img>';\n                        const pos =   \n                        this._chart.canvas.getBoundingClientRect();\n                        tooltip.style.opacity = 1;\n                        tooltip.style.left = pos.left + model.caretX +  \n                        'px';\n                        tooltip.style.top  = -50 + pos.top +  \n                        model.caretY + 'px';\n                    }\n                }\n            }\n        }\n    });\n</script>\n</body></html>\n```", "```js\noptions: {\n    legend: {\n        labels: {\n            usePointStyle: true,\n            fontSize: 14,\n            generateLabels: function(chart) {\n                const items = [];\n                chart.data.datasets.forEach((dataset, i) => {\n                    items.push({\n                        text: dataset.label,\n                        datasetIndex: i,\n                        fillStyle: dataset.borderColor,\n                        lineWidth: 0,\n                        pointStyle: 'rectRot',\n                    });\n                });\n                return items;\n            },\n        },  ...\n    }\n}\n```", "```js\n<div id=\"chart-legends\"></div>\n```", "```js\nconst myChart = new Chart(\"myChart\", {\n     type: 'line',\n     data: {\n         labels: ['Day 1','Day 2','Day 3','Day 4','Day 5','Day 6'],\n         datasets: datasets,\n     },\n     options: {\n         legendCallback: function(chart) {\n             const labels = document.createElement(\"ul\");\n             labels.style.display = 'flex';\n             labels.style.justifyContent = 'center';\n\n             chart.data.datasets.forEach((dataset, i) => {\n                 const item = document.createElement(\"li\");\n                 item.style.listStyle = 'none';\n                 item.style.display = 'inline';\n\n                 const icon = document.createElement(\"div\");\n                 icon.style.width = icon.style.height = '15px';\n                 icon.style.display = 'inline-block';\n                 icon.style.margin = '0 6px';\n                 icon.style.backgroundColor = dataset.borderColor;\n\n                 item.appendChild(icon); // add colored square\n                 item.innerHTML += dataset.label; // add label text\n                 labels.appendChild(item);\n             });\n             return labels.outerHTML;\n         },\n         legend: { display: false, position: 'bottom' }\n     }\n });\n\n const legend = document.getElementById('chart-legends');\n legend.innerHTML = myChart.generateLegend(); // generates HTML\n```", "```js\n<html lang=\"en\">\n<head>\n     <script src=\"img/Chart.min.js\"></script>\n     <style>\n         .container {\n             width: 98%;\n             height: 80vh;\n             position: absolute;\n         }\n         .top {\n             height:50%;\n             position: relative;\n         }\n         .col {\n             width: 50%;\n             position: absolute;\n         }\n         .col:nth-child(2n-1) {\n             left: 50%;\n         }\n         .footer {\n             height: 50%;\n             position: relative;\n         }\n     </style>\n </head>\n <body>\n <div class=\"container\">\n     <div class=\"top\" width=\"400\" height=\"200\">\n         <div class=\"col\"><canvas id=\"chart1\"></canvas></div>\n         <div class=\"col\"><canvas id=\"chart2\"></canvas></div>\n     </div>\n     <div class=\"top\" width=\"400\" height=\"200\">\n         <div class=\"col\"><canvas id=\"chart3\"></canvas></div>\n         <div class=\"col\"><canvas id=\"chart4\"></canvas></div>\n     </div>\n     <div class=\"footer\">\n         <form>\n           <button type=\"button\" id=\"changeData\">Get Data</button>\n         </form>\n     </div>\n </div>\n <script> ... </script>\n </body>\n </html>\n```", "```js\nfunction updateData() {\n     charts.forEach(c => {\n         let datasets = 3\n         if(c.canvas.id == 'chart4') {\n             datasets = 1;\n         }\n         for(let i = 0; i < datasets; i++) {\n             for (let j = 0; j < 6; j++) {\n                c.config.data.datasets[i].data[j] =  \n                Math.ceil(Math.random() * 25);\n             }\n         }\n         c.update();\n     });\n }\n\n Chart.defaults.global.legend.labels.boxWidth = 15;\n\n const data = [[12, 19, 3, 5, 2, 3],[6, 5, 22, 2, 7, 11],[2, 3, 5, 16,  \n 0, 1]],\n       labels = ['Day 1','Day 2','Day 3','Day 4','Day 5','Day 6'],\n       strokes = \n      ['rgba(54,162,235,1)','rgba(255,99,132,1)','rgba(132,255,99,1)'],\n       fills=   \n      ['rgba(54,162,235,.2)','rgba(255,99,132,.2)',\n      'rgba(132,200,99,.2)'];\n\n const datasets = [];\n for(let i = 0; i < data.length; i++) {\n     datasets.push({\n         label: 'Dataset ' + (i+1),\n         data: data[i],\n         backgroundColor: fills[i],\n         borderColor: strokes[i],\n     });\n }\n\n const charts = [];\n\n charts.push(new Chart(\"chart1\", { type: 'line',\n     data: { labels: labels, datasets: datasets }\n }));\n\n charts.push(new Chart(\"chart2\", { type: 'bar',\n     data: { labels: labels, datasets: datasets }\n }));\n\n charts.push(new Chart(\"chart3\", { type: 'radar',\n     data: { labels: labels, datasets: datasets },\n     options: {legend: {display: false }}\n }));\n\n charts.push(new Chart(\"chart4\", { type: 'doughnut',\n     data: {\n         labels: labels,\n         datasets: [datasets[0]].map(d => ({\n             data: d.data,\n             backgroundColor: ['#d73027','#fc8d59','#fee090',\n                               '#e0f3f8','#91bfdb','#4575b4'],\n         })),\n     },\n     options: {legend: {position: 'left'}}\n }));\n\n document.getElementById(\"changeData\")\n         .addEventListener(\"click\", updateData);\n```", "```js\nconst values = [12, 33, 42, 67, 90, 56, 51, 78, 95, 101, 120, 140];\nconst averages = [];\nfor(let i = 0; i < values.length; i++) {\n     averages[i] = values.slice(0,i+1).reduce((a,b)=>a+b,0)/(i+1);\n }\n\n new Chart(\"myChart\", {\n     type: 'bar',\n     data: {\n         labels: ['Jan','Feb','Mar','Apr','May','Jun','Jul',\n                  'Aug','Sep','Oct','Nov','Dec'],\n         datasets: [{\n             type: 'line',\n             label: 'Line dataset (average)',\n             data: averages,\n             borderColor: 'red',\n             fill: false\n         },{\n             label: 'Bar dataset (totals)',\n             data: values,\n             borderColor: 'blue',\n             backgroundColor: 'rgba(0,0,120,.6)'\n         }]\n     }\n })\n```", "```js\n<html lang=\"en\">\n <head>\n     <script src=\"img/canvasmap.js\" ></script>\n     <script src=\"img/Chart.min.js\"></script>\n     <script src=\"img/papaparse.min.js\"></script>\n     <style>\n         canvas {\n             position: absolute;\n             top:  0;\n             left: 0;\n         }\n     </style>\n </head>\n <body>\n\n<canvas id=\"map\" width=\"1000\" height=\"500\"></canvas>\n<canvas id=\"my-bubble-chart\" width=\"1000\" height=\"500\"></canvas>\n<script>...</script>\n</body></html>\n```", "```js\nconst mapCanvas = document.getElementById(\"map\");\nconst mapContext = mapCanvas.getContext(\"2d\");\n\n // Map ocean background\n mapContext.fillStyle = 'rgb(200,200,255)';\n mapContext.fillRect(0, 0, mapCanvas.width, mapCanvas.height);\n\n // countries border and background\n mapContext.lineWidth = .25;\n mapContext.strokeStyle = 'white';\n mapContext.fillStyle = 'rgb(50,50,160';\n\n // setup map canvas\n map.setCanvas(mapCanvas); // Function from JavaScript/canvasmap.js\n\n // load files\n const files = ['../Data/world.geojson', '../Data/cities15000.csv'];\n const promises = files.map(file => fetch(file).then(resp =>   \n resp.text()));\n Promise.all(promises).then(results => {\n\n     // Draw the map\n     const object = JSON.parse(results[0]);\n     map.drawMap(object.features); // function from  \n     JavaScript/canvasmap.js\n\n     // Draw the chart\n     const data = Papa.parse(results[1], {header: true});\n     drawChart(data.data);  // function described below\n });\n```", "```js\nfunction scaleR(value) {\n     const r = Math.floor(value / 100000);\n     return r != 0 ? r/10 : .25;\n }\n```", "```js\nfunction drawChart(datasets) {\n     const locations = [];\n     datasets.forEach(city => {\n         const obj = {\n             x: map.scaleX(+city.longitude), // From  \n             JavaScript/canvasmap.js\n             y: map.scaleY(-city.latitude),  // From \n             JavaScript/canvasmap.js\n             r: scaleR(city.population),\n             name: city.asciiname\n         };\n         locations.push(obj);\n     });\n\n     const dataObj = {\n         datasets: [\n             {   data: locations,\n                 backgroundColor: function(context) {...}\n             }\n         ]\n     }\n```", "```js\n    const chartObj = {\n         type: \"bubble\",\n         data: dataObj,\n         options: {\n             scales: {\n                 xAxes: [{ display: false,\n                           ticks: {\n                             min: map.scaleX(-180), // match map size  \n                             with\n                             max: map.scaleX(180)   // canvas size\n                         }\n                     }\n                 ],\n                 yAxes: [{ display: false,\n                           ticks: {\n                             min: map.scaleY(-90), // match map size \n                             with\n                             max: map.scaleY(90)   // canvas size\n                         }\n                     }\n                 ]\n             },\n             tooltips: {...}, // see full code\n             animation: { duration: 0 },\n             responsive: false,\n             legend: { display: false }\n         }\n     };\n     new Chart(\"my-bubble-chart\", chartObj);\n }\n```", "```js\n<image id=\"image\"></image>\n…\n<script>\nnew Chart(\"chart\", { type: 'line', data: {…},\n     options: {\n         animation: {\n             onComplete: function () {\n                 let image = document.getElementById('image');\n                 image.src = this.toBase64Image();\n        }\n    }\n});\n</script>\n```", "```js\n<script src=\"img/b64-to-blob\"></script>\n```", "```js\n<a id=’link’ download=’chart.png’></a>\n```", "```js\nconst link = document.getElementById('link');\nconst blob = b64toBlob(image.src.split(',')[1], 'image/png');\nlink.href = URL.createObjectURL(blob);\n```", "```js\nconst plugin = {\n     id: 'p1',\n     afterRender: function(chart, options) {\n         chart.ctx.fillStyle = 'blue';\n         chart.ctx.fillRect(60,60,100,100);\n     },\n     beforeDatasetsDraw: function(chart, percent, options) {\n         chart.ctx.fillStyle = 'red';\n         chart.ctx.fillRect(200,60,100,100);\n     },\n };\n```", "```js\nnew Chart(\"chart\", {\n     type: 'bar',\n     data: {…},\n     options: {…},\n     plugins: [plugin1]\n });\n```", "```js\nChart.plugins.register(plugin);\n```", "```js\nconst bgPlugin = { id: 'chartback',\n    beforeDraw: function(chart, steps, options) {\n       let ctx = chart.ctx;\n        if(options.backgroundColor) {\n            ctx.fillStyle = options.backgroundColor;\n            ctx.fillRect(0, 0, chart.width, chart.height);\n        }\n        if(options.backgroundImage) {\n            let image = new Image(chart.width, chart.height);\n            image.src = options.backgroundImage;\n            ctx.drawImage(image, 0,0,chart.width, chart.height);\n        }\n    }\n}\nChart.plugins.register(bgPlugin);\n```", "```js\n<script src=\"img/chartback.js\"></script>\n```", "```js\nnew Chart(\"chart\", { type: 'bar', data: {…},\n    options: {\n        animation: {…},\n        plugins: {\n            chartback: {\n                backgroundColor: 'white',\n                backgroundImage: '../Images/mars.jpg'\n            }\n        }\n    },\n});\n```"]