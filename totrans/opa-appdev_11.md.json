["```js\nopa create liveroom\n\n```", "```js\ntype Login.user = {unlogged} or {User.t user}\nstate = UserContext.make(Login.user {unlogged})\nfunction login(_) {\nusername = Dom.get_value(#username)\n  password = Dom.get_value(#password)\n  match(Model.auth(username,password)){\n  case {none}: Client.reload()\n  case {some:user}: {\n      UserContext.change(function(_){~{user}},state)\n          Client.goto(\"/\")\n  }}\n}\n```", "```js\nfunction logout(_){\nUserContext.remove(state)\n  Client.reload()\n}\n```", "```js\nfunction get_user() {\n  match(UserContext.get(state)){\n    case {unlogged}: \"anonymous\"\n    case ~{user}:    user.nickname\n  }\n}\n```", "```js\nconfig = { \napp_id: \"xxxxxxxxxxxxxxx\",\napi_key: \"xxxxxxxxxxxxxxx\",\napp_secret: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}\n```", "```js\ntype Topic.t = {\n  int   id,    //id, the primary key\n  string title,    //title of the topic\n  string author,  //the author\n  int   posttime,  //post time\n  int   lastupdate,  //last update time, \n  string lastposter,  //last poster\n  int   reply,    //number of replies\n  stringmap(Message.t) messages\n}\ntype Message.t = { \nstring author, string content, int posttime, \n  list(Comment.t) comments\n}\ntype Comment.t = { string author, string content, int posttime }\n```", "```js\ndatabase liveroom {\n  int     /next_id\n  Topic.t /topics[{id}]\n}\n```", "```js\nfunction query(page){\n  topics = /liveroom/topics[skip page*50;limit 50;order -lastupdate]\n  DbSet.iterator(topics)\n}\n```", "```js\nIter.map(function(t){\n... //map a topic to an xhtml showing on the page\n}, query(0))\n```", "```js\nfunction get(id) { \n/liveroom/topics[~{id}] \n}\n```", "```js\ntopic = Model.get(id)\nMap.iter(function(key, msg){\n  ...\n  List.map(function(comment){\n      ...\n  }, msg.comments)\n}, topic.messages)\n```", "```js\nfunction add_topic(_){L\n  topic = ...  //create a topic record from user's input\nmatch(Model.insert(topic)){  //insert the record into database\n    case {success: _}: Client.goto(\"/\")  //go back to main page\n    case {failure: f}: show_alert(\"{f}\")  //show alert info\n  }\n}\n```", "```js\nfunction insert(topic){\n  match(next_id()){\n  case {none}: {failure: \"Failed to generate next id!\"}\n  case {some:id}:{\n    /liveroom/topics[~{id}] <- {topic with ~id}\n    {success: id}  \n  }}\n}\n```", "```js\nmy_db = MongoConnection.openfatal(\"default\")\nfunction next_id(){\n  if(?/liveroom/next_id == none) { /liveroom/next_id <- 0 }\n    r = MongoCommands.findAndUpdateOpa(\n         my_db, \"liveroom\", \"_default\",\n         Bson.opa2doc({_id : \"/liveroom/next_id\"}),\n         Bson.opa2doc({`$inc` : { value : 1}}), \n{some : true}, {none}\n  );\n  match (r) {\n    case { success : {string _id, int value} v }: some(v.value)\n    case { failure : e }: {none}\n}\n}\n```", "```js\nfunction post_message(id, message){\n  now = get_now()  //current time in milliseconds\n  key = \"{id}_{now}_{Random.string(5)}\"\n  /liveroom/topics[~{id}]/messages[key] <- message\n  /liveroom/topics[~{id}]/reply++\n  /liveroom/topics[~{id}]/lastupdate = now\n  /liveroom/topics[~{id}]/lastposter = message.author\n}\n```", "```js\nfunction post_comment(id, key, comment){\n  /liveroom/topics[~{id}]/messages[key]/comments <+ comment\n}\n```", "```js\nheader = <><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\"></>\nxhtml = <>...</> //the body of the page\nResource.full_page(\"Live Room\", xhtml, header, {success}, [])\n```", "```js\nimport stdlib.themes.{bootstrap, bootstrap.responsive}\n```", "```js\n  <td align=\"center\" class=\"hidden-phone\">{t.lastposter}</td>\n  â€¦\n  <th align=\"center\" class=\"hidden-phone\">Last Poster</th>\n```"]