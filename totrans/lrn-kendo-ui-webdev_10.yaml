- en: Chapter 10. The Upload and Window Widgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modern web applications have advanced to the point that file uploads and dialog
    boxes have matured from simple, unattractive HTML elements into interactive and
    customizable controls. This powerful functionality does not come for free, however;
    it requires well written JavaScript and CSS styling. The Kendo UI Framework for
    the Web provides prebuilt controls that give you this functionality for very little
    effort. This chapter will explore these controls and illustrate their use.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: File uploads have traditionally been a clumsy element within web pages. Uploading
    multiple files was an even worse experience, often requiring multiple HTML upload
    elements which forced users to click on a separate button for every file. The
    Kendo UI Framework provides a specialized Upload widget that helps both users
    and developers in this process. Instead of clicking on buttons for every file,
    users can simply drag and drop as many files as necessary onto a web page and
    have them upload automatically, and asynchronously, in the background. Developers,
    likewise, can program to receive multiple files simultaneously and receive file
    uploads through JavaScript without causing web pages to become slow and unresponsive.
  prefs: []
  type: TYPE_NORMAL
- en: Learning the Upload widget
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since the Upload widget is designed to upload the contents of one or more files
    to a server, even the most basic implementation of this widget requires a server
    that can accept file uploads. You can accomplish this by using your ASP.NET MVC
    project. To receive the file uploads, you need to create an action method that
    accepts `IEnumerable<HttpPostedFileBase>` as an input parameter. The following
    is how the server will receive the files from the Kendo UI Upload widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'With this server code in place to receive the uploaded files, you can now build
    the page that will host the Kendo UI Upload widget from where the user will choose
    the files to upload. The following code sample shows an HTML form that has been
    configured for use as a Kendo UI Upload widget. Take special note that the form
    has two required input elements: a file input and a submit input. These are the
    normal input elements that you should expect for any form that uploads files,
    but in this case, there is also a `script` element that creates a special Kendo
    UI Upload widget on the file upload element.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the HTML for the index view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The following is how this markup will appear on an actual web page. Take special
    note that the file input element is displayed as a button instead of the normal
    style that you see with default HTML.
  prefs: []
  type: TYPE_NORMAL
- en: '![Learning the Upload widget](img/4346OT_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With all of this in place, you can click on the **Select** button to choose
    a file to upload to the server. Once you have selected that file and clicked **OK**,
    the server will receive the file and will run any processing instructions that
    you have set in the server-side code.
  prefs: []
  type: TYPE_NORMAL
- en: '![Learning the Upload widget](img/4346OT_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows the file selection dialog that will appear on
    the user's computer, so that he or she can choose the files to upload.
  prefs: []
  type: TYPE_NORMAL
- en: 'By adding a breakpoint within the `action` method code that receives the uploaded
    files, you can see how ASP.NET MVC interprets the posted data using Visual Studio
    2012\. The following is a screenshot of an uploaded file and the objects that
    display information about that uploaded file. In this case, I uploaded a small
    text file called `Reflection.linq`. You can see that the web server has received
    the file successfully and is able to process it as you see fit. This screenshot
    is showing Visual Studio in debug mode, which allows us to see the internal state
    of objects. Also, in this screenshot, we can see that the first object in the
    `IEnumerable<HttoPostedFileBase>` is a file with the `FileName` property value
    of `Reflection.linq`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Learning the Upload widget](img/4346OT_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Enabling asynchronous uploads
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While the upload experience that we just saw is already a superior experience
    to a traditional HTML upload element, the experience can get much better. JavaScript
    is now capable of sending file uploads asynchronously, or in the background, which
    means that the user does not have to submit a form that causes the page to reload.
    In other words, the process can run faster and smoother and requires less involvement.
    To enable this functionality, all you have to do is add the `async` configuration
    property to the Kendo Upload widget instantiation block. The following code sample
    shows how to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This functionality also requires some changes to the server. Although the majority
    of this code is the same as in the earlier example, this action method returns
    `ContentResult` instead of an `ActionResult`, because this action method is not
    sending a new web page back to the browser. Instead, it sends back a string result
    that notifies the JavaScript in the web page that the file upload(s) completed
    successfully. If something goes wrong with the file upload(s), the server will
    send an error code, such as a code `500` internal server error.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Uploading multiple files simultaneously
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default, the Kendo UI Upload widget enables uploading multiple files at
    the same time, but you can specify this setting explicitly, as in the following
    code sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: To upload multiple files, use the *Ctrl* key while you click on the files in
    the upload window. See the following screenshot for a display of multiple files
    selected at once. When you click the **OK** button, all of the files will be uploaded
    together to the server and will be processed in a single transaction. No more
    multiple buttons and dialogs required!
  prefs: []
  type: TYPE_NORMAL
- en: '![Uploading multiple files simultaneously](img/4346OT_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Removing uploaded files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As files are uploaded with the Kendo UI Upload widget, you will see a list
    of the filenames appear on the page in the file upload area. If you are using
    the standard upload behavior, not the `async` configuration, the files listed
    on the page have not yet been uploaded to the server. Rather, their filenames
    have been stored in preparation for when you click the **Submit** button on the
    page to submit the HTML with the files attached. You can see a list of files in
    the following screenshot that have been marked for upload; they have not yet been
    sent to the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Removing uploaded files](img/4346OT_10_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Since these files have not yet been uploaded, you can click the **Remove**
    button beside any of these files to remove them from the list without any side
    effects. If you are using the asynchronous file upload functionality, however,
    the files are uploaded instantly to the server and there is no way to remove them
    until they have already been fully uploaded. As you can see in this next screenshot,
    this file has already been loaded asynchronously to the server and has already
    been saved somewhere by that sever code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Removing uploaded files](img/4346OT_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There is still a way to remove the file, but it requires some extra code on
    the server to make this work. Specifically, for removing asynchronous automatic
    uploads, another controller action method is required. This action method receives
    a list of one or more file names and deletes them from the server since they have
    already been uploaded and saved. The Kendo UI Upload widget calls this method
    automatically when the **Remove** button is clicked on the page.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Tracking upload progress
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While a file is being uploaded asynchronously, you can see the progress of
    the upload with a progress bar displayed beneath the filename and a swirling circle
    of dots to indicate that the action is still occurring. The following screenshot
    shows a file upload in progress:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tracking upload progress](img/4346OT_10_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Cancelling an update in progress
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While a file upload is taking place asynchronously, a button will appear beside
    the progress bar for cancelling the upload. If you click this button, it will
    attempt to cancel the asynchronous upload that is in progress. You should note
    that cancelling asynchronous uploads is never a guaranteed success. Most file
    uploads occur very quickly and it is unlikely that you will be able to cancel
    it in time. Also, even if you are able to click the **Cancel** button in time,
    the process will still continue for a short period of time before the background
    threads respond to the cancellation. This is just to say that cancelling a file
    upload may work, but it also may not and it is hard to predict either way.
  prefs: []
  type: TYPE_NORMAL
- en: Using file drag and drop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are using the asynchronous file upload functionality, there is another
    special feature that you can take advantage of. Since the asynchronous file upload
    processes the files immediately through JavaScript, the web page can enable some
    special behavior, such as dragging and dropping files onto the page using your
    mouse. This functionality is also enabled by default, so you can take advantage
    of it without any further configuration. All you have to do is drag a file from
    your computer and drop it on the screen where the Kendo UI Upload widget is present.
    As you drag the file onto the page, you will see the page react by showing some
    text instructing the user where to drop the file. When the file is dropped, the
    upload starts immediately.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using file drag and drop](img/4346OT_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Kendo UI Window widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript has long supported pop-up windows that can send messages to a user
    in a web browser. These messages can be simple text for the user to see, they
    can be confirmation boxes to ask permission, or they can even sometimes prompt
    the user to enter some information. Of course, these pop-up messages have two
    big problems. First, they are unattractive and have the appearance of a system
    message instead of a coherent portion of a website. Second, they have been so
    overused and abused in the past that many users disable them entirely or make
    it a habit to avoid sites that use them because they are annoying at best and
    a potential security risk at worst.
  prefs: []
  type: TYPE_NORMAL
- en: Modern web programmers have found a solution to this problem. JavaScript frameworks
    have been created that can create a different kind of pop-up message. Instead
    of using the actual system prompts that JavaScript did in the past, they have
    found a way to display hovering HTML `div` elements that are not actual pop-up
    messages at all, they are a true portion of the page that can be hidden or displayed
    on demand. The Kendo UI Window widget is a tool to build these nice hovering page
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the underlying concept to this technology is hiding and displaying specific
    HTML `div` elements, the basic use of this widget is simply to create a Kendo
    UI Window widget directly on a `div` tag. This will hide it until you are ready
    to show it and, once you are ready to show it, it will animate it onto the screen
    as a hovering element above the rest of your page. See the following code sample
    for a basic example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You can see the Kendo UI Window widget being created over the HTML element with
    an `id` value of `window`. The button with the ID of `windowButton` is wired up
    to open the Window widget and the event handlers hide this button while the Window
    widget is open and then show it again when the Window widget is closed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The markup inside your `div` will be the markup inside the Window widget when
    it appears. This means that all of your styles and layouts are still shown properly
    in the same way as the rest of your page; there is no disconnect. The following
    is how this code looks when rendered on the page. Notice that the content of the
    Kendo UI Window widget is not yet shown, it must first be activated through an
    event; in this case that event is clicking on the **Show Window** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Kendo UI Window widget](img/4346OT_10_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is how the Kendo UI Window widget looks when it is activated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Kendo UI Window widget](img/4346OT_10_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Customizing Window actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Kendo UI Window widget adds some default functionality to all windows that
    it creates. There is a button at the upper-right corner of the window, which is
    used as a close button, there is a title bar to give the purpose of the window
    content clear to the user, and the window is resizable if a user clicks one of
    the edges with a mouse and drags it. The buttons that appear in the upper-right
    corner of the Window widget can be customized for your web page and specific needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you see, the only button that appears by default is the close button. However,
    there are three other buttons that can be added very easily: `Refresh`, `Minimize`,
    and `Maximize`. These buttons already have default functionality attached to them.
    The `Refresh` button will refresh the content inside the Window widget if it has
    been loaded from a remote source. The `Minimize` button will reduce the size of
    the Window widget to just the title bar. The `Maximize` button will enlarge the
    Window widget so that it takes up the entire web browser''s screen size. After
    you click either the `Minimize` or `Maximize` buttons, a new special button appears
    for the sole purpose of restoring the Window widget back to its original position
    and size. Here is the code you need to use in order to enable these actions in
    your Window widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is how the Window widget appears with these actions enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing Window actions](img/4346OT_10_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is a minimized Window widget, note that the `Minimize` button has been
    changed to the button which will restore the original size and shape of the window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing Window actions](img/4346OT_10_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is a maximized Window widget in the next screenshot. Note that the `Maximize`
    button has been changed to the button that will restore the original size and
    shape of the window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing Window actions](img/4346OT_10_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Loading content with AJAX
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All of the examples you have seen so far have displayed local content in the
    Window widget, or content already embedded in the web page. This is only useful
    in limited scenarios. The Window widget is much more flexible when it can load
    content from external sources, such as other web pages in your overall site. To
    make this work, you need to configure the Window widget with a content source.
    You can see an example of this in the following code sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'With this enabled, the Window widget will load and display this external content
    as soon as it is activated. This has the added benefit that the loaded content
    is not downloaded until necessary, so the page will load somewhat faster. Here
    is a Window widget that has loaded external content in this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Loading content with AJAX](img/4346OT_10_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the animation effects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the Window widget is activated on the page, it animates onto the screen
    with some pleasant effects. By default, it will use the zoom effect which makes
    the Window widget appear as if it zooms in from a very small object into the full
    size. The other available effects are the toggle effect, the expand effect, and
    a choice of whether or not the Window widget animation should start as semi-transparent.
    The following code sample shows the animation effects as they are configured by
    default:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that no special animation configuration is included. The only way to run
    the default animation is to leave the animation configuration element out of the
    setup.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: To enable the toggle animation, change the code so that it appears like the
    following code sample. The toggle animation is actually the absence of a special
    animation, so that the Window Widget appears or disappears immediately instead
    of going through a graphical transition.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: To enable the expand animation, change the code so that it appears like the
    following code sample. The `reverse` configuration property is used to reverse
    the animation for the `close` effect.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The transparency effect can be used with any of these animation effects, and
    it is enabled or disabled separately. The following code sample shows how to enable
    or disable the animation. The only difference from the previous example is the
    extra string value `fadeIn` at the end of the `effects` property values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Using the Window widget events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Kendo UI Window widget provides a set of events that fire in response to
    various user events. Since there a number of these, I will list them here with
    brief descriptions for each one:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Activate`: This event fires when the Window widget animation completes after
    opening'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Close`: This event fires when the Window widget is closed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Deactivate`: This event fires when the Window widget animation completes after
    closing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Dragend`: This event fires when a user finishes dragging a Window widget with
    a mouse'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Dragstart`: This event fires when a user starts to drag a Window widget with
    the mouse'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Error`: This event fires when a Window widget encounters an error while loading
    remote content through AJAX'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Open`: This event fires when a Window widget opens'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Refresh`: This event fires when the remote content within a Window widget
    is refreshed from the remote source'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Resize`: This event fires when a Window widget is resized by a user with the
    mouse'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Window widget API methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The API methods allow us to execute functionality on the Window widget on demand
    in our JavaScript code. See the following brief description on what sort of options
    we have when calling API methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Center`: Calling this method returns the Window widget to the centre of the
    screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Close`: Calling this method closes the Window widget.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Content`: Calling this method either gets the current content of a Window
    widget when called with no parameters or sets the content of a Window widget when
    provided new content as a parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Maximize`: Calling this method maximizes a Window widget.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Minimize`: Calling this method minimizes a Window widget.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Open`: Calling this method opens a Window widget that is closed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Refresh`: Calling this method refreshes the content of a Window widget from
    its remote source through AJAX. This method only works for Window widget objects
    that have an AJAX content property set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Restore`: Calling this method restores a Window widget from the minimized
    state back into the normal size and position.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SetOptions`: Calling this method sets the configuration options of a Window
    widget.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Title`: Calling this method either gets or sets the title of a Window widget'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ToFront`: Calling this method brings a Window widget to the front of other
    elements on the page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ToggleMaximization`: Calling this method either maximizes a Window widget
    that is not currently maximized or returns a maximized Window widget back to its
    original size and position.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to use the Window and Upload widgets. These
    widgets give you the power to create scalable and interactive web pages that your
    users will appreciate. Most importantly, these widgets provide ready-made solutions
    to very common web development problems so that you can focus on your code instead
    of solving repetitive problems.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we have seen a full array of the different Kendo UI Web tools
    that are available for developing powerful web pages. As you have seen in every
    chapter, these widgets are very friendly to use and offer a wide range of configuration
    options to be tailored to your specific needs and situation. Not only this, but
    Telerik has an active community of developers that can assist with implementation
    details through web forums and blogs and even paid support, if necessary. I hope
    you have enjoyed learning about the powerful tools available from Telerik in the
    Kendo UI Web framework. These tools will lower the overall time investment and
    effort involved in delivering rich web pages, and that is something most of us
    can happily appreciate.
  prefs: []
  type: TYPE_NORMAL
