- en: Chapter 10. The Upload and Window Widgets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。上传和窗口小部件
- en: Modern web applications have advanced to the point that file uploads and dialog
    boxes have matured from simple, unattractive HTML elements into interactive and
    customizable controls. This powerful functionality does not come for free, however;
    it requires well written JavaScript and CSS styling. The Kendo UI Framework for
    the Web provides prebuilt controls that give you this functionality for very little
    effort. This chapter will explore these controls and illustrate their use.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现代网络应用已经发展到文件上传和对话框已经从简单的、不吸引人的HTML元素发展成交互式和可定制的控件。然而，这种强大的功能并非免费提供；它需要编写良好的JavaScript和CSS样式。Kendo
    UI Web框架提供了预构建的控件，让您几乎无需努力就能获得这种功能。本章将探讨这些控件并说明它们的使用。
- en: Uploading files
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上传文件
- en: File uploads have traditionally been a clumsy element within web pages. Uploading
    multiple files was an even worse experience, often requiring multiple HTML upload
    elements which forced users to click on a separate button for every file. The
    Kendo UI Framework provides a specialized Upload widget that helps both users
    and developers in this process. Instead of clicking on buttons for every file,
    users can simply drag and drop as many files as necessary onto a web page and
    have them upload automatically, and asynchronously, in the background. Developers,
    likewise, can program to receive multiple files simultaneously and receive file
    uploads through JavaScript without causing web pages to become slow and unresponsive.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 文件上传在网页中一直是一个笨拙的元素。上传多个文件的经验更糟糕，通常需要多个HTML上传元素，这迫使用户为每个文件点击一个单独的按钮。Kendo UI框架提供了一个专门的Upload小部件，它帮助用户和开发者在这个过程中。用户不再需要为每个文件点击按钮，他们只需将所需数量的文件拖放到网页上，文件就会自动上传，并在后台异步上传。同样，开发者也可以编程以同时接收多个文件，并通过JavaScript接收文件上传，而不会使网页变慢和失去响应。
- en: Learning the Upload widget
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习Upload小部件
- en: 'Since the Upload widget is designed to upload the contents of one or more files
    to a server, even the most basic implementation of this widget requires a server
    that can accept file uploads. You can accomplish this by using your ASP.NET MVC
    project. To receive the file uploads, you need to create an action method that
    accepts `IEnumerable<HttpPostedFileBase>` as an input parameter. The following
    is how the server will receive the files from the Kendo UI Upload widget:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Upload小部件旨在将一个或多个文件的 内容上传到服务器，因此即使是最基本的此小部件实现也需要一个可以接受文件上传的服务器。您可以通过使用您的ASP.NET
    MVC项目来实现这一点。为了接收文件上传，您需要创建一个接受`IEnumerable<HttpPostedFileBase>`作为输入参数的动作方法。以下是如何服务器从Kendo
    UI Upload小部件接收文件的方式：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'With this server code in place to receive the uploaded files, you can now build
    the page that will host the Kendo UI Upload widget from where the user will choose
    the files to upload. The following code sample shows an HTML form that has been
    configured for use as a Kendo UI Upload widget. Take special note that the form
    has two required input elements: a file input and a submit input. These are the
    normal input elements that you should expect for any form that uploads files,
    but in this case, there is also a `script` element that creates a special Kendo
    UI Upload widget on the file upload element.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在此服务器代码到位以接收上传的文件后，您现在可以构建一个页面，该页面将托管Kendo UI Upload小部件，用户将从中选择要上传的文件。以下代码示例显示了一个已配置为Kendo
    UI Upload小部件使用的HTML表单。请注意，该表单有两个必需的输入元素：一个文件输入和一个提交输入。这些是您在任何上传文件的表单中都应该期望的正常输入元素，但在此情况下，还有一个`script`元素，它在文件上传元素上创建了一个特殊的Kendo
    UI Upload小部件。
- en: 'Here is the HTML for the index view:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是index视图的HTML：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The following is how this markup will appear on an actual web page. Take special
    note that the file input element is displayed as a button instead of the normal
    style that you see with default HTML.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何在真实网页上显示此标记。请注意，文件输入元素显示为按钮，而不是您在默认HTML中看到的正常样式。
- en: '![Learning the Upload widget](img/4346OT_10_05.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![学习Upload小部件](img/4346OT_10_05.jpg)'
- en: With all of this in place, you can click on the **Select** button to choose
    a file to upload to the server. Once you have selected that file and clicked **OK**,
    the server will receive the file and will run any processing instructions that
    you have set in the server-side code.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些准备就绪后，您可以点击**选择**按钮来选择要上传到服务器的文件。一旦您选择了该文件并点击**确定**，服务器将接收该文件，并执行您在服务器端代码中设置的任何处理指令。
- en: '![Learning the Upload widget](img/4346OT_10_06.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![学习Upload小部件](img/4346OT_10_06.jpg)'
- en: The preceding screenshot shows the file selection dialog that will appear on
    the user's computer, so that he or she can choose the files to upload.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图显示了将在用户的计算机上出现的文件选择对话框，以便用户可以选择要上传的文件。
- en: 'By adding a breakpoint within the `action` method code that receives the uploaded
    files, you can see how ASP.NET MVC interprets the posted data using Visual Studio
    2012\. The following is a screenshot of an uploaded file and the objects that
    display information about that uploaded file. In this case, I uploaded a small
    text file called `Reflection.linq`. You can see that the web server has received
    the file successfully and is able to process it as you see fit. This screenshot
    is showing Visual Studio in debug mode, which allows us to see the internal state
    of objects. Also, in this screenshot, we can see that the first object in the
    `IEnumerable<HttoPostedFileBase>` is a file with the `FileName` property value
    of `Reflection.linq`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在接收上传文件的 `action` 方法代码中添加断点，您可以看到 ASP.NET MVC 如何使用 Visual Studio 2012 解释已提交的数据。以下是一个已上传文件及其显示上传文件信息的对象的截图。在这种情况下，我上传了一个名为
    `Reflection.linq` 的小文本文件。您可以看到，Web 服务器已成功接收文件，并且能够按您所需的方式处理它。此截图显示了处于调试模式的 Visual
    Studio，它允许我们查看对象内部状态。此外，在此截图中，我们可以看到 `IEnumerable<HttoPostedFileBase>` 中的第一个对象是一个具有
    `FileName` 属性值为 `Reflection.linq` 的文件：
- en: '![Learning the Upload widget](img/4346OT_10_07.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![学习上传小部件](img/4346OT_10_07.jpg)'
- en: Enabling asynchronous uploads
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用异步上传
- en: 'While the upload experience that we just saw is already a superior experience
    to a traditional HTML upload element, the experience can get much better. JavaScript
    is now capable of sending file uploads asynchronously, or in the background, which
    means that the user does not have to submit a form that causes the page to reload.
    In other words, the process can run faster and smoother and requires less involvement.
    To enable this functionality, all you have to do is add the `async` configuration
    property to the Kendo Upload widget instantiation block. The following code sample
    shows how to do it:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们刚才看到的上传体验已经比传统的 HTML 上传元素更优越，但体验可以变得更好。JavaScript 现在能够异步发送文件上传，或在后台发送，这意味着用户不需要提交导致页面重新加载的表单。换句话说，这个过程可以运行得更快、更顺畅，并且需要更少的参与。要启用此功能，您只需将
    `async` 配置属性添加到 Kendo Upload 小部件实例化块中。以下代码示例显示了如何操作：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This functionality also requires some changes to the server. Although the majority
    of this code is the same as in the earlier example, this action method returns
    `ContentResult` instead of an `ActionResult`, because this action method is not
    sending a new web page back to the browser. Instead, it sends back a string result
    that notifies the JavaScript in the web page that the file upload(s) completed
    successfully. If something goes wrong with the file upload(s), the server will
    send an error code, such as a code `500` internal server error.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能还需要对服务器进行一些更改。尽管大多数代码与早期示例相同，但此动作方法返回 `ContentResult` 而不是 `ActionResult`，因为此动作方法不会将新的网页发送回浏览器。相反，它发送回一个字符串结果，通知网页中的
    JavaScript 文件上传（们）已成功完成。如果文件上传（们）出现错误，服务器将发送一个错误代码，例如代码 `500` 内部服务器错误。
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Uploading multiple files simultaneously
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 同时上传多个文件
- en: 'By default, the Kendo UI Upload widget enables uploading multiple files at
    the same time, but you can specify this setting explicitly, as in the following
    code sample:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Kendo UI 上传小部件允许同时上传多个文件，但您可以在以下代码示例中明确指定此设置：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To upload multiple files, use the *Ctrl* key while you click on the files in
    the upload window. See the following screenshot for a display of multiple files
    selected at once. When you click the **OK** button, all of the files will be uploaded
    together to the server and will be processed in a single transaction. No more
    multiple buttons and dialogs required!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要上传多个文件，请在上传窗口中点击文件时按住 *Ctrl* 键。查看以下截图，以显示一次性选中的多个文件。当您点击 **OK** 按钮，所有文件将一起上传到服务器，并作为一个单一事务进行处理。不再需要多个按钮和对话框！
- en: '![Uploading multiple files simultaneously](img/4346OT_10_01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![同时上传多个文件](img/4346OT_10_01.jpg)'
- en: Removing uploaded files
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除已上传的文件
- en: 'As files are uploaded with the Kendo UI Upload widget, you will see a list
    of the filenames appear on the page in the file upload area. If you are using
    the standard upload behavior, not the `async` configuration, the files listed
    on the page have not yet been uploaded to the server. Rather, their filenames
    have been stored in preparation for when you click the **Submit** button on the
    page to submit the HTML with the files attached. You can see a list of files in
    the following screenshot that have been marked for upload; they have not yet been
    sent to the server:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 Kendo UI 上传小部件上传文件时，你会在页面的文件上传区域看到文件名列表。如果你使用的是标准上传行为，而不是`async`配置，页面上列出的文件尚未上传到服务器。相反，它们的文件名已被存储，以备你点击页面的**提交**按钮时附加到
    HTML 上。以下截图显示了已标记为上传的文件列表；它们尚未发送到服务器：
- en: '![Removing uploaded files](img/4346OT_10_08.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![移除已上传文件](img/4346OT_10_08.jpg)'
- en: 'Since these files have not yet been uploaded, you can click the **Remove**
    button beside any of these files to remove them from the list without any side
    effects. If you are using the asynchronous file upload functionality, however,
    the files are uploaded instantly to the server and there is no way to remove them
    until they have already been fully uploaded. As you can see in this next screenshot,
    this file has already been loaded asynchronously to the server and has already
    been saved somewhere by that sever code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些文件尚未上传，你可以点击任何这些文件旁边的**移除**按钮来从列表中移除它们，而不会产生任何副作用。然而，如果你使用的是异步文件上传功能，文件将立即上传到服务器，并且无法在完全上传之前移除它们。正如你在下一个截图中所见，这个文件已经异步加载到服务器，并且已经被服务器代码保存到某个地方：
- en: '![Removing uploaded files](img/4346OT_10_02.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![移除已上传文件](img/4346OT_10_02.jpg)'
- en: There is still a way to remove the file, but it requires some extra code on
    the server to make this work. Specifically, for removing asynchronous automatic
    uploads, another controller action method is required. This action method receives
    a list of one or more file names and deletes them from the server since they have
    already been uploaded and saved. The Kendo UI Upload widget calls this method
    automatically when the **Remove** button is clicked on the page.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然有方法可以移除文件，但这需要在服务器上添加一些额外的代码来实现。具体来说，为了移除异步自动上传的文件，需要另一个控制器动作方法。这个动作方法接收一个包含一个或多个文件名的列表，并将它们从服务器上删除，因为这些文件已经上传并保存。当页面上点击**移除**按钮时，Kendo
    UI 上传小部件会自动调用此方法。
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Tracking upload progress
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跟踪上传进度
- en: 'While a file is being uploaded asynchronously, you can see the progress of
    the upload with a progress bar displayed beneath the filename and a swirling circle
    of dots to indicate that the action is still occurring. The following screenshot
    shows a file upload in progress:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当文件正在异步上传时，你可以通过文件名下方的进度条和一个旋转的点状圈来查看上传进度，这表明操作仍在进行中。以下截图显示了正在进行的文件上传：
- en: '![Tracking upload progress](img/4346OT_10_13.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![跟踪上传进度](img/4346OT_10_13.jpg)'
- en: Cancelling an update in progress
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 取消正在进行的更新
- en: While a file upload is taking place asynchronously, a button will appear beside
    the progress bar for cancelling the upload. If you click this button, it will
    attempt to cancel the asynchronous upload that is in progress. You should note
    that cancelling asynchronous uploads is never a guaranteed success. Most file
    uploads occur very quickly and it is unlikely that you will be able to cancel
    it in time. Also, even if you are able to click the **Cancel** button in time,
    the process will still continue for a short period of time before the background
    threads respond to the cancellation. This is just to say that cancelling a file
    upload may work, but it also may not and it is hard to predict either way.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当文件正在异步上传时，进度条旁边会出现一个按钮，用于取消上传。如果你点击此按钮，它将尝试取消正在进行的异步上传。你应该注意，取消异步上传并不总是成功的。大多数文件上传都非常快，你很可能无法及时取消。此外，即使你能够及时点击**取消**按钮，后台线程在响应取消之前，这个过程仍会持续一段时间。这只是为了说明，取消文件上传可能有效，但也可能无效，并且很难预测结果。
- en: Using file drag and drop
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用文件拖放
- en: If you are using the asynchronous file upload functionality, there is another
    special feature that you can take advantage of. Since the asynchronous file upload
    processes the files immediately through JavaScript, the web page can enable some
    special behavior, such as dragging and dropping files onto the page using your
    mouse. This functionality is also enabled by default, so you can take advantage
    of it without any further configuration. All you have to do is drag a file from
    your computer and drop it on the screen where the Kendo UI Upload widget is present.
    As you drag the file onto the page, you will see the page react by showing some
    text instructing the user where to drop the file. When the file is dropped, the
    upload starts immediately.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用异步文件上传功能，还有一个您可以利用的特殊功能。由于异步文件上传通过JavaScript立即处理文件，因此网页可以启用一些特殊行为，例如使用鼠标将文件拖放到页面上。此功能默认启用，因此您无需进一步配置即可利用它。您只需从您的计算机中拖动一个文件并将其拖放到Kendo
    UI Upload小部件所在的屏幕上。当您将文件拖动到页面上时，您将看到页面通过显示一些文本来响应用户，指示用户将文件放在何处。当文件放下时，上传立即开始。
- en: '![Using file drag and drop](img/4346OT_10_04.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![使用文件拖放](img/4346OT_10_04.jpg)'
- en: The Kendo UI Window widget
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kendo UI Window小部件
- en: JavaScript has long supported pop-up windows that can send messages to a user
    in a web browser. These messages can be simple text for the user to see, they
    can be confirmation boxes to ask permission, or they can even sometimes prompt
    the user to enter some information. Of course, these pop-up messages have two
    big problems. First, they are unattractive and have the appearance of a system
    message instead of a coherent portion of a website. Second, they have been so
    overused and abused in the past that many users disable them entirely or make
    it a habit to avoid sites that use them because they are annoying at best and
    a potential security risk at worst.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript长期以来一直支持可以发送消息到网页用户的弹出窗口。这些消息可以是用户可以看到的简单文本，可以是请求权限的确认框，有时甚至可以提示用户输入一些信息。当然，这些弹出消息有两个大问题。首先，它们不够吸引人，看起来像系统消息而不是网站的一部分。其次，它们在过去被过度使用和滥用，以至于许多用户完全禁用了它们，或者养成避免使用它们的习惯，因为它们最多是令人烦恼的，最坏的情况是潜在的安全风险。
- en: Modern web programmers have found a solution to this problem. JavaScript frameworks
    have been created that can create a different kind of pop-up message. Instead
    of using the actual system prompts that JavaScript did in the past, they have
    found a way to display hovering HTML `div` elements that are not actual pop-up
    messages at all, they are a true portion of the page that can be hidden or displayed
    on demand. The Kendo UI Window widget is a tool to build these nice hovering page
    elements.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现代网络程序员已经找到了这个问题的解决方案。已经创建了可以创建不同类型弹出消息的JavaScript框架。他们没有使用JavaScript过去使用的实际系统提示，而是找到了一种方法来显示悬停的HTML
    `div` 元素，这些元素根本不是弹出消息，而是可以按需隐藏或显示的页面真实部分。Kendo UI Window小部件是构建这些漂亮的悬停页面元素的工具。
- en: 'Since the underlying concept to this technology is hiding and displaying specific
    HTML `div` elements, the basic use of this widget is simply to create a Kendo
    UI Window widget directly on a `div` tag. This will hide it until you are ready
    to show it and, once you are ready to show it, it will animate it onto the screen
    as a hovering element above the rest of your page. See the following code sample
    for a basic example:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这项技术的核心概念是隐藏和显示特定的HTML `div` 元素，因此此小部件的基本用法就是直接在 `div` 标签上创建一个Kendo UI Window小部件。这将使其在准备显示之前隐藏，一旦准备显示，它将以悬停元素的形式动画化显示在页面的其余部分上方。以下代码示例提供了一个基本示例：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can see the Kendo UI Window widget being created over the HTML element with
    an `id` value of `window`. The button with the ID of `windowButton` is wired up
    to open the Window widget and the event handlers hide this button while the Window
    widget is open and then show it again when the Window widget is closed.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到Kendo UI Window小部件是如何在具有 `id` 值为 `window` 的HTML元素上创建的。ID为 `windowButton`
    的按钮被连接到打开Window小部件，事件处理程序在Window小部件打开时隐藏此按钮，并在Window小部件关闭时再次显示它。
- en: 'The markup inside your `div` will be the markup inside the Window widget when
    it appears. This means that all of your styles and layouts are still shown properly
    in the same way as the rest of your page; there is no disconnect. The following
    is how this code looks when rendered on the page. Notice that the content of the
    Kendo UI Window widget is not yet shown, it must first be activated through an
    event; in this case that event is clicking on the **Show Window** button:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您的 `div` 中的标记将是窗口小部件出现时的标记。这意味着您的所有样式和布局都将以与页面其余部分相同的方式正确显示；没有断开连接。以下是代码在页面上呈现的样子。请注意，Kendo
    UI 窗口小部件的内容尚未显示，必须首先通过事件激活；在这种情况下，该事件是点击**显示窗口**按钮：
- en: '![The Kendo UI Window widget](img/4346OT_10_09.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![Kendo UI 窗口小部件](img/4346OT_10_09.jpg)'
- en: 'This is how the Kendo UI Window widget looks when it is activated:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这是激活时的 Kendo UI 窗口小部件的外观：
- en: '![The Kendo UI Window widget](img/4346OT_10_10.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![Kendo UI 窗口小部件](img/4346OT_10_10.jpg)'
- en: Customizing Window actions
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义窗口操作
- en: The Kendo UI Window widget adds some default functionality to all windows that
    it creates. There is a button at the upper-right corner of the window, which is
    used as a close button, there is a title bar to give the purpose of the window
    content clear to the user, and the window is resizable if a user clicks one of
    the edges with a mouse and drags it. The buttons that appear in the upper-right
    corner of the Window widget can be customized for your web page and specific needs.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Kendo UI 窗口小部件为其创建的所有窗口添加了一些默认功能。窗口右上角有一个按钮，用作关闭按钮，有一个标题栏，用于向用户清楚地说明窗口内容的目的，如果用户用鼠标点击其中一个边缘并拖动它，窗口可调整大小。窗口小部件右上角出现的按钮可以针对您的网页和特定需求进行自定义。
- en: 'As you see, the only button that appears by default is the close button. However,
    there are three other buttons that can be added very easily: `Refresh`, `Minimize`,
    and `Maximize`. These buttons already have default functionality attached to them.
    The `Refresh` button will refresh the content inside the Window widget if it has
    been loaded from a remote source. The `Minimize` button will reduce the size of
    the Window widget to just the title bar. The `Maximize` button will enlarge the
    Window widget so that it takes up the entire web browser''s screen size. After
    you click either the `Minimize` or `Maximize` buttons, a new special button appears
    for the sole purpose of restoring the Window widget back to its original position
    and size. Here is the code you need to use in order to enable these actions in
    your Window widget:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，默认情况下唯一出现的按钮是关闭按钮。然而，还有三个其他按钮可以非常容易地添加：`刷新`、`最小化`和`最大化`。这些按钮已经附加了默认功能。`刷新`按钮将在内容从远程源加载到窗口小部件内部时刷新窗口小部件中的内容。`最小化`按钮将窗口小部件的大小缩小到仅标题栏。`最大化`按钮将窗口小部件放大，使其占据整个网页浏览器的屏幕大小。点击`最小化`或`最大化`按钮后，将出现一个新按钮，专门用于将窗口小部件恢复到其原始位置和大小。以下是您需要在窗口小部件中启用这些操作的代码：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here is how the Window widget appears with these actions enabled:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 启用这些操作后，窗口小部件将呈现如下：
- en: '![Customizing Window actions](img/4346OT_10_11.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![自定义窗口操作](img/4346OT_10_11.jpg)'
- en: 'Here is a minimized Window widget, note that the `Minimize` button has been
    changed to the button which will restore the original size and shape of the window:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个最小化的窗口小部件，请注意，`最小化`按钮已更改为将窗口恢复到原始大小和形状的按钮：
- en: '![Customizing Window actions](img/4346OT_10_12.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![自定义窗口操作](img/4346OT_10_12.jpg)'
- en: 'Here is a maximized Window widget in the next screenshot. Note that the `Maximize`
    button has been changed to the button that will restore the original size and
    shape of the window:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个屏幕截图显示了最大化的窗口小部件。请注意，`最大化`按钮已更改为将窗口恢复到原始大小和形状的按钮：
- en: '![Customizing Window actions](img/4346OT_10_13.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![自定义窗口操作](img/4346OT_10_13.jpg)'
- en: Loading content with AJAX
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 AJAX 加载内容
- en: 'All of the examples you have seen so far have displayed local content in the
    Window widget, or content already embedded in the web page. This is only useful
    in limited scenarios. The Window widget is much more flexible when it can load
    content from external sources, such as other web pages in your overall site. To
    make this work, you need to configure the Window widget with a content source.
    You can see an example of this in the following code sample:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你所看到的所有示例都在窗口小部件中显示了本地内容，或者是在网页中已经嵌入的内容。这在有限的场景中才有用。当窗口小部件可以从外部源加载内容时，例如在您的整个站点中的其他网页，窗口小部件就更加灵活了。为了实现这一点，您需要配置窗口小部件的内容源。您可以在以下代码示例中看到一个示例：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'With this enabled, the Window widget will load and display this external content
    as soon as it is activated. This has the added benefit that the loaded content
    is not downloaded until necessary, so the page will load somewhat faster. Here
    is a Window widget that has loaded external content in this way:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 启用此功能后，窗口小部件将立即在激活时加载并显示此外部内容。这还有一个额外的优点，即加载的内容只有在必要时才会下载，因此页面将加载得更快。以下是一个以这种方式加载外部内容的窗口小部件示例：
- en: '![Loading content with AJAX](img/4346OT_10_14.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![使用 AJAX 加载内容](img/4346OT_10_14.jpg)'
- en: Using the animation effects
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用动画效果
- en: 'When the Window widget is activated on the page, it animates onto the screen
    with some pleasant effects. By default, it will use the zoom effect which makes
    the Window widget appear as if it zooms in from a very small object into the full
    size. The other available effects are the toggle effect, the expand effect, and
    a choice of whether or not the Window widget animation should start as semi-transparent.
    The following code sample shows the animation effects as they are configured by
    default:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当窗口小部件在页面上被激活时，它会以一些令人愉快的效果动画显示在屏幕上。默认情况下，它将使用缩放效果，使窗口小部件看起来像是从一个非常小的对象缩放到全尺寸。其他可用的效果是切换效果、展开效果，以及选择窗口小部件动画是否应该以半透明开始。以下代码示例显示了默认配置的动画效果：
- en: Note
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that no special animation configuration is included. The only way to run
    the default animation is to leave the animation configuration element out of the
    setup.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这里没有包含特殊的动画配置。要运行默认的动画，唯一的方法是在设置中省略动画配置元素。
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: To enable the toggle animation, change the code so that it appears like the
    following code sample. The toggle animation is actually the absence of a special
    animation, so that the Window Widget appears or disappears immediately instead
    of going through a graphical transition.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用切换动画，修改代码使其看起来像以下代码示例。切换动画实际上是缺少特殊的动画，因此窗口小部件会立即出现或消失，而不是通过图形过渡。
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: To enable the expand animation, change the code so that it appears like the
    following code sample. The `reverse` configuration property is used to reverse
    the animation for the `close` effect.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用展开动画，修改代码使其看起来像以下代码示例。`reverse`配置属性用于反转`close`效果的动画。
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The transparency effect can be used with any of these animation effects, and
    it is enabled or disabled separately. The following code sample shows how to enable
    or disable the animation. The only difference from the previous example is the
    extra string value `fadeIn` at the end of the `effects` property values.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 透明度效果可以与这些动画效果中的任何一个一起使用，并且可以单独启用或禁用。以下代码示例显示了如何启用或禁用动画。与上一个示例的唯一区别是`effects`属性值末尾的额外字符串值`fadeIn`。
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Using the Window widget events
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用窗口小部件事件
- en: 'The Kendo UI Window widget provides a set of events that fire in response to
    various user events. Since there a number of these, I will list them here with
    brief descriptions for each one:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Kendo UI 窗口小部件提供了一组事件，这些事件在响应各种用户事件时被触发。由于这些事件有很多，我将在这里列出它们，并对每个事件进行简要描述：
- en: '`Activate`: This event fires when the Window widget animation completes after
    opening'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Activate`：当窗口小部件打开后动画完成时，此事件被触发'
- en: '`Close`: This event fires when the Window widget is closed'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Close`：当窗口小部件关闭时，此事件被触发'
- en: '`Deactivate`: This event fires when the Window widget animation completes after
    closing'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Deactivate`：当窗口小部件关闭后动画完成时，此事件被触发'
- en: '`Dragend`: This event fires when a user finishes dragging a Window widget with
    a mouse'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dragend`：当用户使用鼠标完成拖动窗口小部件时，此事件被触发'
- en: '`Dragstart`: This event fires when a user starts to drag a Window widget with
    the mouse'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dragstart`：当用户开始使用鼠标拖动窗口小部件时，此事件被触发'
- en: '`Error`: This event fires when a Window widget encounters an error while loading
    remote content through AJAX'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`错误`: 当一个窗口小部件在通过 AJAX 加载远程内容时遇到错误时，此事件被触发。'
- en: '`Open`: This event fires when a Window widget opens'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`打开`: 当窗口小部件打开时，此事件被触发。'
- en: '`Refresh`: This event fires when the remote content within a Window widget
    is refreshed from the remote source'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`刷新`: 当窗口小部件中的远程内容从远程源刷新时，此事件被触发。'
- en: '`Resize`: This event fires when a Window widget is resized by a user with the
    mouse'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`调整大小`: 当用户使用鼠标调整窗口小部件大小时，此事件被触发。'
- en: Using the Window widget API methods
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用窗口小部件 API 方法
- en: 'The API methods allow us to execute functionality on the Window widget on demand
    in our JavaScript code. See the following brief description on what sort of options
    we have when calling API methods:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: API 方法允许我们在 JavaScript 代码中按需在窗口小部件上执行功能。以下是对调用 API 方法时我们有哪些选项的简要描述：
- en: '`Center`: Calling this method returns the Window widget to the centre of the
    screen.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`居中`: 调用此方法将窗口小部件移动到屏幕中央。'
- en: '`Close`: Calling this method closes the Window widget.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`关闭`: 调用此方法关闭窗口小部件。'
- en: '`Content`: Calling this method either gets the current content of a Window
    widget when called with no parameters or sets the content of a Window widget when
    provided new content as a parameter.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`内容`: 调用此方法要么在没有参数的情况下获取窗口小部件的当前内容，要么在提供新内容作为参数时设置窗口小部件的内容。'
- en: '`Maximize`: Calling this method maximizes a Window widget.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`最大化`: 调用此方法最大化窗口小部件。'
- en: '`Minimize`: Calling this method minimizes a Window widget.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`最小化`: 调用此方法最小化窗口小部件。'
- en: '`Open`: Calling this method opens a Window widget that is closed.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`打开`: 调用此方法将关闭的窗口小部件打开。'
- en: '`Refresh`: Calling this method refreshes the content of a Window widget from
    its remote source through AJAX. This method only works for Window widget objects
    that have an AJAX content property set.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`刷新`: 调用此方法通过 AJAX 从其远程源刷新窗口小部件的内容。此方法仅适用于具有 AJAX 内容属性的窗口小部件对象。'
- en: '`Restore`: Calling this method restores a Window widget from the minimized
    state back into the normal size and position.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`恢复`: 调用此方法将窗口小部件从最小化状态恢复到正常大小和位置。'
- en: '`SetOptions`: Calling this method sets the configuration options of a Window
    widget.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`设置选项`: 调用此方法设置窗口小部件的配置选项。'
- en: '`Title`: Calling this method either gets or sets the title of a Window widget'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`标题`: 调用此方法要么获取或设置窗口小部件的标题。'
- en: '`ToFront`: Calling this method brings a Window widget to the front of other
    elements on the page'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`置前`: 调用此方法将窗口小部件带到页面上的其他元素的前面。'
- en: '`ToggleMaximization`: Calling this method either maximizes a Window widget
    that is not currently maximized or returns a maximized Window widget back to its
    original size and position.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`切换最大化`: 调用此方法要么最大化当前未最大化的窗口小部件，要么将已最大化的窗口小部件返回到其原始大小和位置。'
- en: Summary
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to use the Window and Upload widgets. These
    widgets give you the power to create scalable and interactive web pages that your
    users will appreciate. Most importantly, these widgets provide ready-made solutions
    to very common web development problems so that you can focus on your code instead
    of solving repetitive problems.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用窗口和上传小部件。这些小部件赋予你创建可扩展和交互式网页的能力，你的用户会欣赏这些。最重要的是，这些小部件为非常常见的网络开发问题提供了现成的解决方案，这样你就可以专注于你的代码而不是解决重复性问题。
- en: In this book, we have seen a full array of the different Kendo UI Web tools
    that are available for developing powerful web pages. As you have seen in every
    chapter, these widgets are very friendly to use and offer a wide range of configuration
    options to be tailored to your specific needs and situation. Not only this, but
    Telerik has an active community of developers that can assist with implementation
    details through web forums and blogs and even paid support, if necessary. I hope
    you have enjoyed learning about the powerful tools available from Telerik in the
    Kendo UI Web framework. These tools will lower the overall time investment and
    effort involved in delivering rich web pages, and that is something most of us
    can happily appreciate.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们看到了可用于开发强大网页的完整系列的 Kendo UI Web 工具。正如你在每一章中看到的那样，这些小部件非常易于使用，并提供了一系列配置选项，可以根据你的具体需求和情况进行定制。不仅如此，Telerik
    还有一个活跃的开发者社区，可以通过网络论坛和博客以及必要时提供付费支持来协助实施细节。我希望你喜欢学习关于 Kendo UI Web 框架中可用的强大工具的知识。这些工具将降低交付丰富网页所需的总时间和精力投入，这是我们大多数人都会高兴的事情。
