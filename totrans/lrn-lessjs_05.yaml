- en: Chapter 5. Inheritance, Overriding, and Nesting in Less
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章. Less 中的继承、覆盖和嵌套
- en: So far in our journey with Less, we've seen how you can begin to reduce the
    code you need to write; it's time to take it up a level and begin to look at some
    more advanced concepts within Less.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在我们的 Less 之旅中，我们已经看到了如何开始减少需要编写的代码；现在是时候提升一个层次，开始探讨 Less 中的一些更高级的概念。
- en: 'Let me begin by asking you a question: what is the one thing that irritates
    you about writing styles where the same selector has to be repeated many times,
    such as when designing a menu system using an unordered list element? Hopefully,
    the answer is duplicated styles. In this chapter, we will take a look at how you
    can group styles to avoid the need to duplicate selectors in your code. We will
    also cover how you can inherit styles that can have a dramatic effect on reducing
    duplication; I''ll also provide some hints and tips on using these techniques
    and others to help reduce code bloat.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我先问你一个问题：关于编写样式时必须多次重复相同选择器的事情，有什么让你感到烦恼？比如在设计使用无序列表元素的菜单系统时？希望答案是重复的样式。在本章中，我们将探讨如何分组样式以避免在代码中重复选择器。我们还将介绍如何继承样式，这可以显著减少重复；我还会提供一些使用这些技术和其他技术的提示和技巧，以帮助减少代码膨胀。
- en: 'Enough chat, let''s take a look at what we will cover throughout this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 足够聊天了，让我们看看本章我们将涵盖哪些内容：
- en: Nesting styles within Less
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Less 中嵌套样式
- en: Inheriting styles
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 继承样式
- en: Namespacing in Less
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Less 中的命名空间
- en: Scope of styles in Less
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Less 中样式的范围
- en: Hints and tips on avoiding code bloat
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免代码膨胀的建议和技巧
- en: Importing style sheets into Less
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Less 中导入样式表
- en: Curious? What are you waiting for? Let's get started...
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 好奇吗？你在等什么？让我们开始吧...
- en: Nesting styles in Less
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Less 中嵌套样式
- en: If you spend any time writing styles, I am sure you will frequently have written
    some that are duplicates of existing ones elsewhere in the same style sheet; this
    is particularly true if you are creating styles for elements of a site, such as
    a menu system using `<ul>` or `<li>`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你花时间编写样式，我敢肯定你经常会编写一些在其他地方相同样式表中已经存在的重复样式；如果你正在为网站的元素创建样式，例如使用 `<ul>` 或 `<li>`
    的菜单系统，这种情况尤其如此。
- en: It can add a lot of extra code bloat from duplicated styles. Thankfully, there
    is a way we can reduce this, by using Less' ability to nest styles. Let's take
    a look at how this principle works, by creating the online equivalent of a business
    card.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 它可能会因为重复的样式而增加大量的额外代码膨胀。幸运的是，我们可以通过使用 Less 嵌套样式的功能来减少这一点。让我们通过创建在线名片来查看这个原则是如何工作的。
- en: For this exercise, we will need a few things. As a start, we'll need an image
    on our card; in this instance, we'll use an avatar, as this business card will
    be displayed on websites. There are thousands of icons available for this purpose;
    I will assume you have picked a suitable one and saved it as `avatar.png`. I've
    used the Office Client Male Light Icon, available at [http://www.iconarchive.com/show/vista-people-icons-by-icons-land/Office-Client-Male-Light-icon.html](http://www.iconarchive.com/show/vista-people-icons-by-icons-land/Office-Client-Male-Light-icon.html).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个练习，我们需要一些东西。首先，我们需要在卡片上放置一张图片；在这个例子中，我们将使用头像，因为这个名片将在网站上显示。为此目的有数千个图标可用；我将假设你已经选择了一个合适的图标并将其保存为
    `avatar.png`。我使用了来自 [http://www.iconarchive.com/show/vista-people-icons-by-icons-land/Office-Client-Male-Light-icon.html](http://www.iconarchive.com/show/vista-people-icons-by-icons-land/Office-Client-Male-Light-icon.html)
    的 Office Client Male Light 图标。
- en: Next comes the telephone, e-mail, and figurehead icons; these are from the Modern
    Pictograms font family found at [http://www.fontsquirrel.com/fonts/modern-pictograms](http://www.fontsquirrel.com/fonts/modern-pictograms).
    You will need to convert it into a format that can be embedded into a webpage;
    this can be done using a free service at [http://www.convertfonts.com](http://www.convertfonts.com).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是电话、电子邮件和象征性图标；这些图标来自 [http://www.fontsquirrel.com/fonts/modern-pictograms](http://www.fontsquirrel.com/fonts/modern-pictograms)
    上的 Modern Pictograms 字体家族。您需要将其转换为可以嵌入网页的格式；这可以通过 [http://www.convertfonts.com](http://www.convertfonts.com)
    上的免费服务来完成。
- en: Finally, before we can start work on creating our card, we need some social
    media icons. I've chosen to use the hand-drawn ones by Chris Spooner, which can
    be downloaded from [http://blog.spoongraphics.co.uk/freebies/hand-drawn-sketchy-icons-of-your-favorite-social-sites](http://blog.spoongraphics.co.uk/freebies/hand-drawn-sketchy-icons-of-your-favorite-social-sites);
    alter the code accordingly if you decide to use other icons instead.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在我们开始创建我们的卡片之前，我们需要一些社交媒体图标。我选择了Chris Spooner的手绘图标，可以从[http://blog.spoongraphics.co.uk/freebies/hand-drawn-sketchy-icons-of-your-favorite-social-sites](http://blog.spoongraphics.co.uk/freebies/hand-drawn-sketchy-icons-of-your-favorite-social-sites)下载；如果你决定使用其他图标，请相应地更改代码。
- en: Creating a business card
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建名片
- en: Start by opening a copy of `nesting.html` from the code bundle that accompanies
    this book. This contains the markup we need to create our basic vCard.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开这本书附带的代码包中的`nesting.html`副本。这包含我们创建基本vCard所需的标记。
- en: Next, we need to add some styling to make it look presentable. There are a few
    styles involved, so grab a copy of the code download file that accompanies this
    book and extract a copy of `nesting.less` from within the archive.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加一些样式使其看起来更美观。涉及几种样式，所以请获取这本书附带的代码下载文件的副本，并从存档中提取`nesting.less`的副本。
- en: 'Save the file as `nesting.html`. If you preview the results in a browser, you''ll
    see something similar to the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件保存为`nesting.html`。如果你在浏览器中预览结果，你会看到以下截图类似的内容：
- en: '![Creating a business card](img/00052.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![创建名片](img/00052.jpeg)'
- en: Examining the process in detail
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 详细检查过程
- en: If we take a look through `nesting.less`, you will notice a number of styles
    using a similar format. These examples are all variations on a theme of nesting,
    where instead of adding individual child selectors (and thus duplicating code),
    we can group together similar child selectors and implement one parent selector.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看`nesting.less`，你会注意到许多使用类似格式的样式。这些例子都是嵌套主题的变体，其中我们不是添加单个子选择器（从而重复代码），而是可以将相似的子选择器组合在一起并实现一个父选择器。
- en: 'Our first example uses the standard `a` selector, to which we''ve grouped together
    the style rules for `:focus`, `:hover`, and `:active`:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个例子使用了标准的`a`选择器，我们将`:focus`、`:hover`和`:active`的样式规则组合在一起：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This produces the following code when compiled:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后会产生以下代码：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In this example, we've used `a` only to illustrate how the process works—in
    reality, this is an example of where you wouldn't gain any benefit from such a
    short selector name; the benefit is only seen when longer names are used.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们只使用了`a`来展示这个过程是如何工作的——实际上，这是一个你不会从如此简短的选择器名称中获得任何好处的例子；好处只有在使用较长的名称时才会显现。
- en: 'Our second example is a little more advanced—here, we''ve included some standard
    CSS styles and mixed in style rules for two additional child selectors that go
    several levels deeper:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第二个例子稍微复杂一些——在这里，我们包括了一些标准的CSS样式，并混合了针对两个更深层次的额外子选择器的样式规则：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The key to nesting is careful examination of any classes or selectors, where
    there is duplication; let''s take a look at the CSS styles that will be displayed
    in a browser, for the `.social` code block we''ve just covered:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套的关键在于仔细检查任何类或选择器，如果有重复；让我们看看在浏览器中将要显示的CSS样式，针对我们刚刚讨论的`.social`代码块：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: To work out whether a style can be converted to use nesting, we can take a look
    at similar selectors; nesting will only work where the selectors use common IDs.
    In this example, `.social` is the common selector, hence it's used in our Less
    example.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定一个样式是否可以转换为使用嵌套，我们可以查看类似的选择器；嵌套只有在选择器使用公共ID时才会起作用。在这个例子中，`.social`是公共选择器，因此它在我们的Less示例中被使用。
- en: A key point to note—at first glance, it would appear that `.social ul` could
    have been used instead. This would work, but only for two additional child selectors
    (`.social ul li` and `.social ul li a`). The parent `.social` class cannot be
    included if we go in at this level, as we can only work top-down and not bottom-up
    when considering which styles to nest.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一个需要注意的关键点——乍一看，似乎可以使用`.social ul`代替。这会起作用，但只能针对两个额外的子选择器（`.social ul li`和`.social
    ul li a`）。如果我们从这个级别开始，父`.social`类将不能被包含，因为我们只能自上而下考虑哪些样式要嵌套，而不能自下而上。
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There is a general rule of thumb that the selector or class used as our grouping
    ID, should not be more than two levels deep; any more is considered bad practice
    and should really be revisited!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个一般规则是，用作分组ID的选择器或类不应超过两级深度；任何更多都被认为是坏习惯，并且应该真正重新审视！
- en: Let's change focus and take a look at another functionality of Less, which is
    inheriting and overriding styles, using the `extend` option.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们改变焦点，看看Less的另一个功能，即使用`extend`选项继承和覆盖样式。
- en: Inheriting and overriding styles with extend
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`extend`继承和覆盖样式
- en: Up until now, we've used mixins to help reduce the need to write extra code,
    as we can call these blocks of code from our Less statements easily, to produce
    the desired effect.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们使用mixin来帮助减少编写额外代码的需求，因为我们可以从我们的Less语句中轻松调用这些代码块，以产生期望的效果。
- en: Unfortunately this is still not without its own drawback. Let's say we create
    two rules, that both call the same mixin, and produce identical results (save
    for the rule name), then Less will interpret these as two separate blocks of code,
    even though they both perform the same styling on two different objects. What
    if we could merge these two rules together so that there is only one block of
    code, but which can be called by either rule?
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这仍然有其自身的缺点。假设我们创建了两个规则，这两个规则都调用相同的mixin，并产生相同的结果（除了规则名称），那么Less将它们解释为两个不同的代码块，尽管它们都对两个不同的对象执行相同的样式。如果我们能合并这两个规则，使得只有一个代码块，但可以由任一规则调用，那会怎样呢？
- en: Well, we can, with the use of the `extend` function in Less. This is a really
    powerful function, introduced for this purpose. Let's take a look at the concept
    to see how it works.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，我们可以使用Less中的`extend`函数来实现。这是一个真正强大的函数，为了这个目的而引入的。让我们看看这个概念，看看它是如何工作的。
- en: 'Imagine you have a mixin, such as this simple one:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个mixin，比如这个简单的：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If we compile it using something like Crunch!, then it will display this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用类似Crunch!的工具来编译它，那么它将显示如下：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This works perfectly well, but shows the aforementioned duplicated styles.
    To remove this duplication, we can use the `extend` keyword and rework the code
    as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这工作得非常完美，但显示了上述的重复样式。为了消除这种重复，我们可以使用`extend`关键字并重新编写代码如下：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can immediately see the difference in the output. Instead of splitting
    each rule onto two lines as it did before, we''ve been able to merge the rule
    into one block, but it can be called by either class:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以立即看到输出的差异。我们不再像以前那样将每个规则拆分成两行，而是将规则合并到一个块中，但可以由任一类调用：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is worth reading the documentation on the main Less site on the subject of
    `extend`—there are some interesting features that you will need to be aware of,
    when using the function in your code. You can view the documentation at [http://lesscss.org/features/#extend-feature](http://lesscss.org/features/#extend-feature).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 值得阅读Less主站上关于`extend`主题的文档——在使用代码中的函数时，你需要注意一些有趣的功能。你可以在[http://lesscss.org/features/#extend-feature](http://lesscss.org/features/#extend-feature)查看文档。
- en: The rule of thumb for choosing whether to use `extend` or a mixin is to choose
    the technique that requires the least final output (or that works best for you).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 选择是否使用`extend`或mixin的规则是选择需要最少最终输出（或最适合你的）的技术。
- en: Using extend to create information alerts
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`extend`创建信息提示
- en: To see how `extend` works in practice, let's take a look at a little exercise
    to create some imaginary dialog boxes that contain messages to alert the user
    about the outcome of an operation.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解`extend`在实际中的工作方式，让我们来看一个小练习，创建一些包含消息以提醒用户操作结果的想象中的对话框。
- en: Before we can get to work on our example, we first need to download some icons
    that are suitable for use in dialog boxes. I've chosen to use the free icons created
    by Andy Gongea; it will be assumed that you are using these icons, for the purpose
    of the exercise. Visit [http://www.graphicrating.com/2012/06/14/koloria-free-icons-set/](http://www.graphicrating.com/2012/06/14/koloria-free-icons-set/)
    to download the icons. You will need to extract the `info.png`, `error.png`, `warning.png`,
    `help.png`, and `valid.png` images and drop them into an `img` folder at the root
    of your project folder.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始我们的示例之前，我们首先需要下载一些适合用于对话框的图标。我选择使用Andy Gongea创建的免费图标；为了练习的目的，我们将假设你正在使用这些图标。访问[http://www.graphicrating.com/2012/06/14/koloria-free-icons-set/](http://www.graphicrating.com/2012/06/14/koloria-free-icons-set/)下载图标。你需要提取`info.png`、`error.png`、`warning.png`、`help.png`和`valid.png`图像，并将它们放入项目文件夹根目录下的`img`文件夹中。
- en: 'Let''s start writing the code! Open a copy of `project.html`, which we created
    in [Chapter 3](part0031_split_000.html#page "Chapter 3. Getting Started with Less"),
    *Getting Started with Less*, and then modify the `<head>` section as shown in
    the following code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始编写代码！打开我们在[第3章](part0031_split_000.html#page "第3章。使用Less入门")中创建的`project.html`副本，即*使用Less入门*，然后修改以下代码中的`<head>`部分：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, remove the existing markup in the `<body>` tag and replace it with this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，移除`<body>`标签中的现有标记，并用以下内容替换：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Save this as `extend.html`. On its own, it won''t win any awards for style
    if we were to preview it now, so let''s fix that by adding some! In a new file,
    add the following styles:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 将其保存为`extend.html`。仅就其本身而言，如果我们现在预览它，它不会赢得任何风格奖项，所以让我们通过添加一些来修复它！在一个新文件中，添加以下样式：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Save the file as `extend.less` in the `css` subfolder; if you have configured
    Sublime Text to compile Less files on save, then it will also produce the compiled
    CSS equivalent file. We can use this to compare the results shown in the file,
    with those displayed in the browser, when using a DOM Inspector such as Firebug.
    If we preview the file in a browser, we should see something like the following
    screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件保存为`css`子文件夹中的`extend.less`；如果你已经配置了Sublime Text在保存时编译Less文件，那么它也会生成编译后的CSS等价文件。我们可以使用这个文件来比较文件中显示的结果和浏览器中显示的结果，当我们使用DOM
    Inspector如Firebug时。如果我们现在在浏览器中预览文件，我们应该看到以下截图：
- en: '![Using extend to create information alerts](img/00053.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![使用extend创建信息警报](img/00053.jpeg)'
- en: Although this is a relatively simple example, it is worth taking a moment to
    study the code to see how the `extend` function operates.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这是一个相对简单的例子，但花点时间研究代码，看看`extend`函数是如何工作的，是值得的。
- en: If you use a mixin, you often find that you have to include a base class (`.stuff`
    in our earlier example) as your mixin, which contains the styles that you need
    to inherit within your calling classes (in this instance, `.foo` and `.bar`).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用mixin，你经常会发现你必须在mixin中包含一个基类（在我们之前的例子中是`.stuff`），这个基类包含你需要在调用类中继承的样式（在这个例子中是`.foo`和`.bar`）。
- en: This will work perfectly well, but will duplicate the code as we have already
    seen; instead, we used the `extend` function to apply the existing `.box` class
    to each of the classes we used for the dialogs, namely `.info`, `.success`, `.warning`,
    `.error`, and `.validation`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这将完美地工作，但会像我们之前看到的那样重复代码；相反，我们使用了`extend`函数将现有的`.box`类应用到我们用于对话框的每个类中，即`.info`、`.success`、`.warning`、`.error`和`.validation`。
- en: As `extend` is a Less pseudo-class, all trace of the `extend` function will
    be removed, leaving the resulting compiled styles. The real benefit of using this
    function can be seen when using Firebug; instead of seeing a lot of duplicated
    styles, we will see styles neatly merged together where they perform the same
    function, with the remaining styles left to operate on the remaining elements
    where appropriate.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`extend`是一个Less伪类，`extend`函数的所有痕迹都将被删除，留下的将是编译后的样式。使用此函数的实际好处可以在使用Firebug时看到；我们不会看到很多重复的样式，而会看到样式整洁地合并在一起，它们执行相同的功能，剩余的样式则保留在适当的位置操作剩余的元素。
- en: Extending using the all keyword
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`all`关键字进行扩展
- en: Once you have begun using the `extend` keyword in your Less code, you might
    find that you want to extend styles that are nested.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你开始在Less代码中使用`extend`关键字，你可能会发现你想扩展嵌套的样式。
- en: Unfortunately, extend can only match a selector based on what is given in the
    `extend` request; it is not always able to match child selectors below a parent,
    unless a child selector is specified. Let's take a look at an example to see what
    this means.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，`extend`只能根据`extend`请求中给出的内容匹配选择器；它并不总是能够匹配父选择器下的子选择器，除非指定了子选择器。让我们通过一个例子来看看这意味着什么。
- en: 'Imagine you have this simple bit of nested Less:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你有一段嵌套的Less代码如下：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Using `extend` will produce this:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`extend`将产生以下结果：
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `h3` style will not be extended and will instead be compiled as a separate
    style:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`h3`样式将不会被扩展，而将被编译为单独的样式：'
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To get around this, we can use the `all` keyword as shown in the following
    line of code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们可以使用下面的代码行中的`all`关键字：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `all` keyword will extend everything to produce the desired effect:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`all`关键字将扩展所有内容以产生所需的效果：'
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The key to it is to think of it as performing a nondestructive search and replace
    operation on the original selector, to produce a new one. Let's take a look at
    it in practice, by modifying the previous `extend` demo to use the `all` keyword.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 其关键在于将其视为对原始选择器执行非破坏性的搜索和替换操作，以产生一个新的选择器。让我们通过修改之前的 `extend` 示例来使用 `all` 关键字来实际看看它。
- en: 'Start by opening a copy of `extend.html`, which we created from the previous
    exercise, then encompass each of the dialog text messages in the `<h3>` tags,
    as highlighted:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开我们之前练习中创建的 `extend.html` 的副本，然后使用 `<h3>` 标签包围每个对话框文本消息，如高亮所示：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Save this as `extendall.html`. In a copy of `extend.less`, we need to move
    the rule for `font-size` from body to `<h3>`, so we can then include it as a nested
    rule later in our code. Amend the style rule for body, and then immediately below
    this, add a new rule for `<h3>`, as shown in the following code:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 将其保存为 `extendall.html`。在 `extend.less` 的副本中，我们需要将 `font-size` 规则从 `body` 移动到
    `<h3>`，这样我们就可以稍后在代码中将其包含为一个嵌套规则。修改 `body` 的样式规则，然后立即在此规则下方添加一个新的 `<h3>` 规则，如下面的代码所示：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the validation code block, add the three lines (as highlighted); this will
    style the `<h3>` tags we added earlier to our HTML code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在验证代码块中，添加三条高亮显示的行；这将为我们之前添加到 HTML 代码中的 `<h3>` 标签设置样式：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We can now take advantage of the `all` keyword; immediately below the `.validation`
    style block, add the following code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以利用 `all` 关键字；在 `.validation` 样式块下方立即添加以下代码：
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Save the file as `extendall.less`. If we preview the results in a browser,
    we will see the added dialog box appear below the last dialog box, as shown in
    the following screenshot:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件保存为 `extendall.less`。如果我们在一个浏览器中预览结果，我们会看到新增的对话框出现在最后一个对话框下方，如下面的截图所示：
- en: '![Extending using the all keyword](img/00054.jpeg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![使用 all 关键字扩展](img/00054.jpeg)'
- en: Now that we have seen this in action, let's take a moment to examine how it
    works.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了它的实际应用，让我们花一点时间来考察它是如何工作的。
- en: Using the `all` attribute with `extend` is very easy, as we have seen, but it
    does mean that the styles that need to be replicated should be as close to the
    desired result as possible, to make the use of `extend` worthwhile.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，使用 `all` 属性与 `extend` 非常简单，但这确实意味着需要复制的样式应该尽可能接近期望的结果，以便使 `extend` 的使用变得有价值。
- en: This doesn't mean to say that you can't add additional, or indeed override,
    existing styles as we have done here, but we've kept them to a minimum. Here,
    we've used `extend all` to replicate the `.validation` class and rename it as
    `.rebase`; this includes the additional styling for the `<h3>` tag, which would
    otherwise not have been included if the `all` tag had not been used. We've then
    simply overridden three of the styles to change the image used, `background-color`
    and text `color`, to make it a little more unique.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不意味着你不能添加额外的，或者实际上覆盖现有的样式，就像我们在这里所做的那样，但我们已经将它们保持在最小范围内。在这里，我们使用了 `extend
    all` 来复制 `.validation` 类并将其重命名为 `.rebase`；这包括对 `<h3>` 标签的额外样式，如果没有使用 `all` 标签，这些样式将不会被包含。然后我们简单地覆盖了三种样式来更改使用的图片、`background-color`
    和文本 `color`，使其更加独特。
- en: 'We''ve only scratched the surface with what you can do using `extend`—before
    we change focus and move to looking at namespacing, let''s take a moment to look
    at some of the other highlights of using the `extend` keyword:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是刚刚触及了使用 `extend` 可以做到的事情的表面——在我们改变焦点并转向查看命名空间之前，让我们花一点时间看看使用 `extend` 关键字的一些其他亮点：
- en: Extend can be used with pseudo-class selectors such as `:hover` or `:active`;
    multiple extends can be used, along with spaces. However, if only one extend is
    used, then this must be the last part of the statement.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extend` 可以与伪类选择器一起使用，例如 `:hover` 或 `:active`；可以使用多个 `extend`，并使用空格分隔。然而，如果只使用一个
    `extend`，那么它必须是语句的最后一部分。'
- en: You can use `&:extend` within a ruleset; this is a shortcut to adding `extend`
    to every single selector within the ruleset.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在规则集中使用 `&:extend`；这是一个将 `extend` 添加到规则集中每个选择器的快捷方式。
- en: Extend can be used with nested selectors; as long as the calling extend can
    be matched against a valid Less rule, it will be extended to use the new class
    or selector ID.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extend` 可以与嵌套选择器一起使用；只要调用的 `extend` 可以与一个有效的 Less 规则匹配，它就会被扩展以使用新的类或选择器 ID。'
- en: By default, extend will look for an exact match, for example, `*.class` and
    `.class`, which are equivalent, won't be considered as exact matches by Less,
    when using extend.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，`extend` 将寻找精确匹配，例如，`*.class` 和 `.class`，这两个是等价的，但在使用 `extend` 时不会被 Less
    视为精确匹配。
- en: If you want to match using type identifiers such as `[title="identifier"]`,
    then it doesn't matter whether quotes are used or not; these are effectively ignored.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想要使用类型标识符（如`[title="identifier"]`）进行匹配，那么是否使用引号无关紧要；这些实际上是被忽略的。
- en: The `extend` keyword is a very useful tool within the Less article, but can
    cause issues if not used correctly. It is well worth reading the main documentation
    on the Less site at [http://lesscss.org/features/#extend-feature](http://lesscss.org/features/#extend-feature),
    to get your head around some of the quirks of using the function.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`extend`关键字是Less文章中的一个非常有用的工具，但如果使用不当可能会引起问题。非常值得阅读Less网站上的主要文档[http://lesscss.org/features/#extend-feature](http://lesscss.org/features/#extend-feature)，以了解使用该函数的一些怪癖。'
- en: Namespacing in Less
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Less中的命名空间
- en: 'There is one thing I am sure you will find asking yourself as time goes by
    and your CSS style sheets get larger: *can I group similar styles to make things
    easier to find?*'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移和你的CSS样式表变得越来越大，你可能会发现自己会问自己一个问题：*我能否将相似的样式分组，以便更容易找到？*
- en: Sure, you can always cut and paste similar styles together, but this is a manual
    process, right? What happens if two weeks down the line, you need to add a new
    style, which is similar to the one buried 1500-odd lines down? Surely there has
    to be a better way to do this—there is. Welcome to namespacing in Less!
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你总是可以剪切和粘贴相似的风格，但这是一个手动过程，对吧？如果两周后你需要添加一个新的样式，而这个样式与1500行左右的样式相似，会发生什么？当然，必须有一种更好的方法来做这件事——确实有。欢迎来到Less中的命名空间！
- en: Namespacing in Less takes your need to group similar styles and flips it on
    its head; it groups all of the constituent building blocks of your styles together,
    then allows you to pick and choose which styles to use when adding styling for
    a new element on your site. We can, of course, create multiple namespaces if we
    need to—our only real guide for this is that each namespace should contain styles
    that share common elements; a great example is buttons, as you will see from our
    upcoming exercise.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Less中的命名空间将你分组相似样式的需求颠倒过来；它将你样式的所有构成块组合在一起，然后允许你在为网站上的新元素添加样式时选择和选择要使用的样式。当然，如果我们需要，我们可以创建多个命名空间——我们唯一的实际指南是每个命名空间应包含具有共同元素的样式；一个很好的例子是按钮，你将在我们即将进行的练习中看到。
- en: 'Let''s begin creating these buttons by opening a copy of `project.html` and
    then modifying the `<head>` tag as shown in the following code:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从打开`project.html`的副本并修改如下代码所示的`<head>`标签开始创建这些按钮：
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, remove the existing markup in the `<body>` tag and replace it with the
    following code:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，移除`<body>`标签中现有的标记，并用以下代码替换：
- en: '[PRE21]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Save this as `namespace.html` in the root of our project folder. We need to
    apply some styling, so go ahead and add the following Less styles to a new file;
    we''ll break it down into sections and go through it bit by bit, as there are
    a few important concepts to consider:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 将其保存为项目文件夹根目录下的`namespace.html`。我们需要应用一些样式，所以请继续添加以下Less样式到一个新文件；我们将将其分解为几个部分，一点一点地讲解，因为有几个重要的概念需要考虑：
- en: '[PRE22]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We saw examples similar to this back in [Chapter 4](part0041_split_000.html#page
    "Chapter 4. Working with Variables, Mixins, and Functions"), *Working with Variables,
    Mixins, and Functions*; hopefully, you will recognize this as a parametric mixin.
    In this instance, we''re using it to build up a gradient for each of our buttons;
    we''re feeding it two values that represent the colors used in the gradient fading
    process, as shown in the following code:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第4章](part0041_split_000.html#page "第4章. 使用变量、混合和函数")中看到了类似的例子，*使用变量、混合和函数*；希望你能认出这是一个参数化混合。在这个例子中，我们使用它为每个按钮构建渐变；我们向它提供两个值，这两个值代表了渐变渐变过程中使用的颜色，如下面的代码所示：
- en: '[PRE23]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that namespaces such as `#button()` used here can be made from classes
    or selector IDs; for more details on the recognized behavior, see [https://github.com/less/less.js/issues/1205](https://github.com/less/less.js/issues/1205).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这里使用的命名空间（如`#button()`）可以由类或选择器ID创建；有关已识别行为的更多详细信息，请参阅[https://github.com/less/less.js/issues/1205](https://github.com/less/less.js/issues/1205)。
- en: 'Next comes the most important part of our Less styling: the opening statement
    for a namespaced style. It shows the name under which we will group our styles.
    We''ve used `()`, as we don''t want Less to output the mixin as well as the compiled
    CSS, when compiling our code:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是我们Less样式中最重要的部分：命名空间样式的开头声明。它显示了我们将以哪个名称来分组我们的样式。我们使用了`()`，因为我们不希望Less在编译我们的代码时输出混合以及编译后的CSS：
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'These three blocks of code will call the `.background(...)` mixin to set the
    appropriate gradient, depending on which state is currently set for a specific
    button:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这三段代码将调用`.background(...)`mixin来设置适当的渐变，具体取决于特定按钮当前设置的状态：
- en: '[PRE25]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This is where the real magic happens. Here, we've set the styles to be used
    for three buttons, namely red, purple, and blue. Within each button style, we've
    chosen to call elements from the `#button` namespace; if several similar namespaces
    had been created, we could easily pick and choose our styles from each, as we
    are not limited to just using one namespace. The key thing to note is that when
    calling a namespace style, you must use the format given in our example.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这才是真正的魔法所在。在这里，我们为三个按钮设置了要使用的样式，即红色、紫色和蓝色。在每个按钮样式中，我们选择调用`#button`命名空间中的元素；如果创建了多个类似的命名空间，我们可以轻松地从每个命名空间中选择我们的样式，因为我们不仅限于使用一个命名空间。需要注意的是，当调用命名空间样式时，你必须使用我们示例中给出的格式。
- en: 'Okay, enough of the theory. If we preview the results in a browser, we should
    expect to see something akin to this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，理论就到这里。如果我们预览浏览器中的结果，我们应该期望看到类似以下内容：
- en: '![Namespacing in Less](img/00055.jpeg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![Less中的命名空间](img/00055.jpeg)'
- en: A nice, easy example, huh? Hopefully, it will help show you how you can pick
    and choose your styles from groupings of styles, particularly when a project uses
    a lot of similar elements and styles that could benefit from being namespaced.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单易懂的例子，对吧？希望这能帮助你了解如何从样式分组中选择和选择你的样式，尤其是在项目使用大量类似元素和样式且可以从命名空间中受益时。
- en: Lazy loading of variables in Less
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Less中变量的懒加载
- en: 'So far, we''ve covered a number of techniques to create and control how styles
    are applied. There is one key theme that runs throughout all of this though and
    of which you need to be aware: scope.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经介绍了一些创建和控制样式应用的技术。然而，贯穿所有这些的一个关键主题是你需要注意的：作用域。
- en: 'Yes, there''s that ugly word, scope! No matter how much we try to avoid it,
    we must always allow for it when using Less; if not, it can come back to bite
    us at the most unexpected moments. Let me explain what I mean: as we will see
    in the upcoming exercise, we can always reuse our mixins or variables throughout
    our Less code.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，那个丑陋的词，作用域！无论我们多么努力避免它，在使用Less时，我们都必须允许它；否则，它可能会在最意想不到的时刻回来咬我们。让我解释一下我的意思：正如我们将在即将到来的练习中看到的那样，我们可以在整个Less代码中重复使用我们的mixin或变量。
- en: The downside is that Less must have a means of knowing which instance is the
    most latest; therefore, it always takes the last instance of any variable or mixin
    that is included in our code. If you're not careful, it can lead to some odd effects.
    Let's take a look at what this means in practice, with a quick exercise.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Less必须有一种方式来知道哪个实例是最新的；因此，它总是取我们代码中包含的任何变量或mixin的最后一个实例。如果你不小心，这可能会导致一些奇怪的效果。让我们通过一个快速练习来看看这在实际中意味着什么。
- en: 'Start by opening a copy of `project.html` that we created back in [Chapter
    3](part0031_split_000.html#page "Chapter 3. Getting Started with Less"), *Getting
    Started with Less*, and then, alter the `<head>` tag as shown in the following
    code:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开我们之前在[第3章](part0031_split_000.html#page "第3章. 使用Less入门")中创建的`project.html`副本，即*使用Less入门*，然后，按照以下代码修改`<head>`标签：
- en: '[PRE26]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Next, remove the existing markup and replace it with the following code:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，删除现有的标记并替换为以下代码：
- en: '[PRE27]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Save this as `scope.html`. Finally, even though this is only a simple example,
    we still need to add some styling; go ahead and add the following to a new file,
    saving it as `scope1.less`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 将其保存为`scope.html`。最后，尽管这只是一个简单的例子，我们仍然需要添加一些样式；请将以下内容添加到一个新文件中，并将其保存为`scope1.less`：
- en: '[PRE28]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Before we preview the results in a browser, ask yourself this one question:
    what colors would you expect to see in each box?'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们在浏览器中预览结果之前，问问自己这个问题：你期望在每个框中看到什么颜色？
- en: 'No, I''ve not gone insane; stay with me on this one! If you were expecting
    to see red in boxes **1** and **2** and orange in box **3**, then I''m sorry to
    disappoint you:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 不，我没有发疯；请跟我一起看这个！如果你期望在框**1**和**2**中看到红色，在框**3**中看到橙色，那么我很抱歉让你失望：
- en: '![Lazy loading of variables in Less](img/00056.jpeg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![Less中变量的懒加载](img/00056.jpeg)'
- en: Hold on—all three of them are in orange! This is true; this has to do with the
    concept of scoping within Less.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 等等——它们三个都是橙色！这是真的；这与Less中的作用域概念有关。
- en: 'If you''ve spent any time programming, then you will likely be aware of how
    a variable''s value will be used in a statement if it has just been set before
    the statement. Less uses variables in a similar fashion, but with one important
    difference: it uses the *last known instance* of that variable assignment, to
    determine which value to display.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经花过时间编程，那么你可能会知道，如果一个变量在语句之前刚刚被设置，那么它的值将如何被该语句使用。Less 以类似的方式使用变量，但有一个重要的区别：它使用该变量赋值的最后一个已知实例，以确定要显示的值。
- en: Note
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Variables in Less are merged into code—this is the equivalent of lazy loading,
    as the last defined instance of a variable is the one that is used, overwriting
    any previous instance of that variable.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Less 中的变量被合并到代码中——这相当于懒加载，因为变量的最后一个定义实例是使用的，覆盖了该变量的任何先前实例。
- en: 'If we look through the code, we can clearly see the last instance of `@boxcolor`
    being set a color value, just before `box3`. As the color set was orange, this
    is the value that will be used throughout our code. We can clearly see this from
    a screenshot excerpt of the compiled styles within Crunch!, where `#ffa500` is
    orange:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看代码，我们可以清楚地看到在 `box3` 之前，`@boxcolor` 的最后一个实例被设置为颜色值。由于颜色设置为橙色，这就是我们代码中将使用的值。我们可以从
    Crunch! 中编译后的样式截图的摘录中清楚地看到这一点，其中 `#ffa500` 是橙色：
- en: '![Lazy loading of variables in Less](img/00057.jpeg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![Less 中变量的懒加载](img/00057.jpeg)'
- en: It is worth noting the scope that is set when using variables, as we have done
    here. It is all too easy to be tripped up through the use of an (incorrectly)
    assigned variable, which produces unexpected results!
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，当我们使用变量时设置的范围，就像我们在这里做的那样。很容易因为使用一个（错误地）分配的变量而陷入困境，这会产生意外的结果！
- en: 'The only safe way to ensure that the right values are used is to assign separate
    variables. We can see the results of this if we modify the Less styles from our
    previous example:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 确保使用正确值的唯一安全方法是分配单独的变量。如果我们修改之前示例中的 Less 样式，我们可以看到这个结果：
- en: '[PRE29]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Resave the Less file as `scope2.less`; don''t forget to change the markup in
    `scope.html`! If we preview the results in the browser, we can clearly see the
    difference it has made, where separate variables have been used:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Less 文件重新保存为 `scope2.less`；别忘了更改 `scope.html` 中的标记！如果我们预览浏览器中的结果，我们可以清楚地看到它所带来的差异，其中使用了单独的变量：
- en: '![Lazy loading of variables in Less](img/00058.jpeg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![Less 中变量的懒加载](img/00058.jpeg)'
- en: Note
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Throughout this demo, we've used `box1`, `box2`, and `box3` as selector IDs—it
    is worth nothing that these are not semantic names; for this reason, they should
    not be used in a production environment. As we are working in a demo environment
    only to illustrate a concept, then use of these names is less of an issue.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个演示过程中，我们使用了 `box1`、`box2` 和 `box3` 作为选择器 ID——值得注意的是，这些不是语义名称；因此，它们不应该在生产环境中使用。由于我们只在演示环境中工作，以说明一个概念，因此使用这些名称的问题较小。
- en: 'Now that we''ve seen the results of using separate variables, we can also see
    the difference by looking at the compiled CSS in this screenshot extract from
    Crunch!:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了使用单独变量的结果，我们也可以通过查看 Crunch! 的这个截图中的编译后的 CSS 来看到差异：
- en: '![Lazy loading of variables in Less](img/00059.jpeg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![Less 中变量的懒加载](img/00059.jpeg)'
- en: Notice the difference? Hopefully, you will see how it is crucial to take care
    while using variables, as the scope of their use can produce some odd effects
    if not used carefully! Let's move on, as we need to take a look at some functionality
    we've already used, but haven't explored in any great depth, namely importing
    style sheets into Less.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你注意到了差异吗？希望你能看到在使用变量时多么关键地需要小心，因为它们的使用范围如果不小心使用可能会产生一些奇怪的效果！让我们继续前进，因为我们需要查看一些我们已经使用但尚未深入研究的功能，即导入
    Less 中的样式表。
- en: Tip
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Going overboard with variables**'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**过度使用变量**'
- en: It is all too easy to add lots of variables to cater to values such as colors
    used in your site. This is not always a sensible thing to do; you should consider
    setting up a core number of variables, then using functions to work out the values
    that should be used.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要为网站中使用的颜色等值添加大量变量是非常容易的。这并不总是明智的做法；你应该考虑设置一个核心数量的变量，然后使用函数来计算应该使用的值。
- en: Importing style sheets into Less
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将样式表导入 Less
- en: Phew! We're almost there. We've certainly covered a lot in this chapter! Before
    we finish the chapter with some tips on avoiding code bloat, we should take a
    moment to consider one useful function that we've used, but not explored in any
    detail—this is the use of importing to manage our Less style sheets.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 呼吁！我们几乎完成了。我们确实在本章中涵盖了大量的内容！在我们结束本章并给出一些避免代码膨胀的提示之前，我们应该花点时间考虑一个有用的功能，我们虽然使用了它，但并没有详细探讨——这就是使用导入来管理我们的
    Less 样式表。
- en: Importing in Less is a simple but useful trick to learn, particularly when managing
    large style sheets. We can begin to build up a library of code and then import
    it straight into any future project.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Less 中导入是一个简单但有用的技巧，尤其是在管理大型样式表时。我们可以开始构建代码库，然后直接将其导入到任何未来的项目中。
- en: It makes it much easier to manage smaller files, as we can build a master file
    that imports each of the subfiles into one master; Less will only compile these
    styles that are directly referenced from our main code. So for example, if your
    code library file is more than 2,500 lines long, but a mixin of only 10 lines
    is all that is used, then Less will only include those 10 lines in the final compiled
    results.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得管理较小的文件变得容易得多，因为我们可以构建一个主文件，将每个子文件导入到一个主文件中；Less 只会编译直接从我们的主代码中引用的样式。例如，如果你的代码库文件超过
    2,500 行，但只有 10 行的 mixin 被使用，那么 Less 只会将这 10 行包含在最终的编译结果中。
- en: 'Using the import option is really easy; all you need to do is add in the following
    statement somewhere within your Less code:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 使用导入选项非常简单；你只需要在你的 Less 代码中添加以下语句即可：
- en: '[PRE30]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Here `XXXXXXX` is one of any of the following options:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这里 `XXXXXXX` 是以下任何一种选项之一：
- en: '| Option: | Allows us to: |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| 选项： | 允许我们： |'
- en: '| --- | --- |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `reference` | This uses a Less file but do not output it, unless referenced
    from within the code. |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| `reference` | 这使用 Less 文件，但不会输出它，除非在代码中引用。 |'
- en: '| `inline` | This includes the source file in the output but does not process
    it and is useful if you need to import files that are not Less compatible, but
    still need to be included in the compiled CSS file. |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| `inline` | 这会将源文件包含在输出中，但不会对其进行处理，如果你需要导入不兼容 Less 的文件，但仍然需要将它们包含在编译的 CSS
    文件中，这很有用。 |'
- en: '| `less` | This treats the file as a Less file, no matter what the file extension.
    This is ideal if you have a need for all Less files to have the `.css` extension,
    but where they should be treated as Less files, not plain CSS. |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| `less` | 这会将文件视为 Less 文件，无论文件扩展名是什么。如果你需要所有 Less 文件都具有 `.css` 扩展名，但应该被视为
    Less 文件而不是纯 CSS，那么这是理想的。 |'
- en: '| `css` | This treats the file as a CSS file, no matter what the file extension
    is. |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| `css` | 这会将文件视为 CSS 文件，无论文件扩展名是什么。 |'
- en: '| `once` | This only includes the file once (this is the default behavior);
    any subsequent import requests for this file will be ignored. |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| `once` | 这只会包含该文件一次（这是默认行为）；对于该文件的任何后续导入请求都将被忽略。 |'
- en: '| `multiple` | This includes the same Less file multiple times. This is the
    opposite of the default behavior of Less. |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| `multiple` | 这会将相同的 Less 文件多次包含。这与 Less 的默认行为相反。 |'
- en: You can learn more about the various options from the main Less site, at [http://lesscss.org/features/#import-options](http://lesscss.org/features/#import-options).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从 Less 主站点了解更多关于各种选项的信息，网址是 [http://lesscss.org/features/#import-options](http://lesscss.org/features/#import-options)。
- en: Okay, let's wrap up this chapter by taking a look at some important hints and
    tips on avoiding code bloat. Some of what you will see comes from the functionality
    that we've explored throughout this chapter, but it's useful to take a moment
    to summarize some of the key points we've covered in the book to date.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们通过查看一些避免代码膨胀的重要提示和技巧来结束这一章。你所看到的一些内容来自于我们在本章中探索的功能，但花点时间总结一下到目前为止我们在书中涵盖的一些关键点是有用的。
- en: Avoiding code bloat
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免代码膨胀
- en: When designing websites, one of the key aims that should be dear to every designer
    is to ensure that they avoid code bloat wherever they can so that their finished
    article works well and is engaging to their audience.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计网站时，每个设计师都应该非常重视的一个关键目标是确保他们尽可能避免代码膨胀，以便他们的最终作品能够良好运行并吸引观众。
- en: 'To help with this, there are a number of tips we can use to help reduce code
    bloat. We''ve already used some throughout the book so far, but now seems like
    an opportune moment to revisit and consolidate them into a useful list you can
    use for future projects:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助做到这一点，我们可以使用一些技巧来帮助减少代码膨胀。到目前为止，我们已经在本书中使用了一些，但现在似乎是一个回顾和巩固它们到一个有用的列表的好时机，你可以将其用于未来的项目：
- en: Aim to create a cleaner structure with the use of nesting—this means you can
    avoid having to reenter duplicate selectors (such as using `<ul>` within a list
    or menu) and can keep the code organized as related items are grouped together.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旨在使用嵌套来创建更清晰的结构——这意味着你可以避免重新输入重复的选择器（例如在列表或菜单中使用`<ul>`），并且可以将代码组织得井井有条，因为相关项目被分组在一起。
- en: Create variables for faster maintenance—these work very much like variables
    in other programming languages, such as C#. We can set one instance of a variable
    at the start, then reference this throughout our code; Less will automatically
    update each instance for you. Take care how many you create though, as each requires
    valuable resources; it is better practice to create a core bunch and use operators
    to dynamically work out new values. This has the benefit of allowing these new
    values to continue to work, even if original variables are subsequently changed.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建变量以实现更快的维护——这些变量在其他编程语言（如C#）中工作方式非常相似。我们可以在代码开始时设置一个变量的一个实例，然后在我们的整个代码中引用它；Less会自动为你更新每个实例。但是要注意你创建了多少个变量，因为每个都需要宝贵的资源；更好的做法是创建一个核心组，并使用运算符动态计算出新的值。这样做的好处是，即使原始变量随后被更改，这些新值仍然可以继续工作。
- en: Use mixins to create whole classes that we can reference throughout our code.
    On larger sites, this can have a dramatic effect in reducing the amount of code
    that needs to be written. If you are already using mixins, then check through
    your code to see if they can't be made parametric; this increases their flexibility
    and will allow you to remove redundant mixins, as they can be served by tweaking
    other mixins.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用mixin来创建我们可以在我们整个代码中引用的整个类。在大型网站上，这可以显著减少需要编写的代码量。如果你已经在使用mixin，那么检查你的代码，看看它们是否不能被参数化；这增加了它们的灵活性，并允许你删除冗余的mixin，因为它们可以通过调整其他mixin来提供。
- en: Take an iterative approach to develop your CSS, particularly when using mixins.
    If you use mixins that are similar to mixins being brought in by external Less
    libraries, then try to design out the differences, so you can remove your own...
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 采用迭代方法来开发你的CSS，尤其是在使用mixin时。如果你使用与外部Less库中引入的mixin相似的mixin，那么尝试设计出差异，这样你就可以移除自己的...
- en: 'Use namespaces to pick and choose mixins. This will help you group together
    common styling rules that apply to similar elements, such as buttons; you can
    then pick and choose which elements to use. Try to keep the number of selector
    elements used in each namespace to a minimum too; there is no hard and fast rule,
    but a good rule of thumb is something like the following code:'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命名空间来选择和选择mixin。这有助于将适用于类似元素（如按钮）的常见样式规则分组在一起；然后你可以选择和选择要使用的元素。尽量将每个命名空间中使用的选择器元素数量保持在最低限度；没有硬性规定，但一个好的经验法则是以下代码：
- en: '[PRE31]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: If your code uses more than one selector elements in each namespace it is likely
    that your code isn't as efficient as it should be...!
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的代码在每个命名空间中使用多个选择器元素，那么你的代码可能不像它应该的那样高效...！
- en: If you are using namespacing, then take care of your CSS specificity, otherwise
    clashing results can be a symptom of nesting too deeply, or overuse of the `!important`
    attribute. If you find this happening, then you might need to break your namespacing
    into smaller groups, which uses fewer levels of nesting.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在使用命名空间，那么要注意你的CSS特定性，否则冲突的结果可能是嵌套太深或过度使用`!important`属性的征兆。如果你发现这种情况发生，那么你可能需要将你的命名空间分解成更小的组，这会使用更少的嵌套级别。
- en: 'Consider using class inheritance instead of selector inheritance. If you are
    creating a mixin, which you later reference in your selector classes, you might
    find that you can simply use class inheritance in your HTML instead. So, as an
    example, instead of using this in your Less file:'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑使用类继承而不是选择器继承。如果你正在创建一个mixin，稍后你会在你的选择器类中引用它，你可能发现你可以在HTML中简单地使用类继承。所以，作为一个例子，而不是在你的Less文件中使用以下内容：
- en: '[PRE32]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We can eliminate the repeated use of `.gradientBlack`, by defining it once
    in our style sheet, then referencing it directly in the code:'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以通过在样式表中只定义一次`.gradientBlack`来消除其重复使用，然后在代码中直接引用它：
- en: '[PRE33]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Use extend instead of mixins to reduce code bloat; `extend` is clever enough
    to merge together styles that use the same rules, as we saw earlier in the chapter,
    instead of simply reproducing code blocks for each similar style.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`extend`而不是mixin来减少代码膨胀；`extend`足够聪明，可以合并使用相同规则的样式，正如我们在本章前面所看到的，而不是简单地为每个类似样式复制代码块。
- en: If you have to stay with using mixins, then use parentheses to hide the mixin
    code so that only the calling code is compiled and not the additional mixin as
    well.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您必须继续使用mixin，那么请使用括号来隐藏mixin代码，这样只有调用代码会被编译，而额外的mixin则不会。
- en: 'If you have a number of mixins that require vendor prefixing, you can use this
    mixin to handle them by simply passing the property that needs to be prefixed,
    along with the appropriate value, as shown in the following code:'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您有许多需要供应商前缀的mixin，您可以使用此mixin通过简单地传递需要添加前缀的属性以及相应的值来处理它们，如下面的代码所示：
- en: '[PRE34]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Note that this isn't necessary for all properties that still require vendor
    prefixes; if a CSS3 property only needs one or two vendor prefixes, you might
    find it easier to create a simple mixin to handle this separately.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这并不是所有需要供应商前缀的属性所必需的；如果CSS3属性只需要一个或两个供应商前缀，您可能会发现创建一个简单的mixin来单独处理这些前缀更容易。
- en: Note
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is worth noting that some vendor prefixes use a completely different format
    to the example we've used—the mixin here won't work for all property values, such
    as gradients and will therefore need a separate mixin.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，一些供应商前缀使用与我们所用的示例完全不同的格式——这里的mixin不适用于所有属性值，例如渐变，因此需要单独的mixin。
- en: Hopefully, there are some useful tips in there that you can use in your projects.
    The key to all of this is using the right combination of functions, such as extends
    instead of mixins (or a mix of both), that helps keep your code to a minimum and
    free of bloat.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 希望其中有一些有用的技巧，您可以在项目中使用。所有这一切的关键是使用正确的函数组合，例如使用`extends`而不是mixin（或两者的混合），这有助于将您的代码保持最小并消除膨胀。
- en: Summary
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Throughout this chapter, we've covered a few concepts that will help further
    reduce the amount of code you need to write—let's take a moment to recap, before
    moving onto some more practical areas of using Less in the next chapter.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了一些概念，这些概念可以帮助进一步减少您需要编写的代码量——在进入下一章中Less的更多实际应用领域之前，让我们花点时间回顾一下。
- en: We began with a look at how you can group or nest styles within Less; we saw
    how this can help arrange styles visually, to make it easier to manage, but also
    remove the need to duplicate styles, when referencing child selectors such as
    those used in building menu systems.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从查看如何在Less中分组或嵌套样式开始；我们看到了这如何有助于视觉上排列样式，使其更容易管理，同时消除在引用子选择器（如构建菜单系统时使用的选择器）时重复样式的需要。
- en: We then moved on and looked at the extend function to inherit or override existing
    styles, and covered how it works in a similar fashion to mixins, while at the
    same time, merging together identical styles, to remove the need to have separate
    code blocks for identical styles. We also took a look at the use of the `all`
    keyword to help with inheriting of all of the styles, particularly those otherwise
    not accessible using extend on its own.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们转向extend函数，用于继承或覆盖现有样式，并介绍了它如何以与mixin类似的方式工作，同时合并相同的样式，以消除为相同样式编写单独代码块的需要。我们还探讨了使用`all`关键字来帮助继承所有样式，尤其是那些单独使用extend无法访问的样式。
- en: We then covered how you group styles and reference one or more elements using
    namespacing; this allows us to visually group together common elements, while
    at the same time, picking and choosing which styles to use. Once chosen, we then
    saw how Less will compile these into valid CSS.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们介绍了如何使用命名空间来分组样式和引用一个或多个元素；这允许我们将常见元素视觉上分组，同时挑选和选择要使用的样式。一旦选择，我们就看到了Less如何将它们编译成有效的CSS。
- en: Last but by no means least, we took a quick look at setting the right scope
    in Less, to ensure our variables have the right values. We saw from the example
    how easy it is to get the scope wrong and the importance of using the right scope
    in our code. We then finished with a look at importing Less files into CSS and
    some hints and tips on removing code bloat, based on some of the key areas of
    Less we have seen so far in the book.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们快速浏览了在Less中设置正确的作用域，以确保我们的变量具有正确的值。我们从示例中看到了如何容易地出错以及正确使用代码中的作用域的重要性。然后，我们结束了关于将Less文件导入CSS的查看，并基于我们在书中迄今为止看到的Less的一些关键区域提供了一些关于消除代码膨胀的提示和技巧。
- en: In the next chapter, we'll move on from the theory and take a look at some of
    the practical aspects of moving a CSS-based site over to using Less.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将从理论转向，探讨将基于CSS的网站迁移到使用Less的一些实际方面。
