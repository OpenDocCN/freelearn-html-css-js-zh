- en: Chapter 13. Animation with Less
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How many times have you seen animated sites using Flash? OK, a fair few. I'll
    also bet that you wanted to skip the animation as soon as you could, right?
  prefs: []
  type: TYPE_NORMAL
- en: Yep, I thought so; not many hands going down now…
  prefs: []
  type: TYPE_NORMAL
- en: We cannot forget the bad old days of sites that used Flash, where we frequently
    wanted to skip badly designed animations, which often didn't provide any useful
    content but instead made sites slow. Sounds familiar?
  prefs: []
  type: TYPE_NORMAL
- en: Thankfully, things have moved on; over the next few pages, we'll see how you
    can use CSS3 animations instead to achieve the same effects that otherwise would
    have required Flash. The use of CSS3 animations eliminates the need for a heavy
    Flash plugin (for modern browsers), and provided they are done properly, can make
    a site faster, more enjoyable to browse, and engaging to the end user. We'll delve
    into the use of Less to simplify the process of coding some real-world examples
    in order to make our development workflow much easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How a CSS animation works
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transitions and transformations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animated menus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simplifying the animation markup with Less
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intrigued? Let's make a start…
  prefs: []
  type: TYPE_NORMAL
- en: Introducing animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Back in the early days of the Internet, it was common to see animated GIFs that
    were often liberally plastered over a website—the excuse often being that they
    "look cool," even if they didn't really serve any purpose!
  prefs: []
  type: TYPE_NORMAL
- en: Nowadays, animation is being used more and more on the Internet—this is often
    in the form of SVG images, background videos, sounds, and so on. This increasingly
    used technologies such as Flash, but with the advent of HTML5, designers have
    found ways to recreate many effects natively in the browser without the use of
    Flash.
  prefs: []
  type: TYPE_NORMAL
- en: Today, browser vendors are adding more and more functionalities to each version
    of their product; this means that CSS3 animation is gaining ground to the likes
    of Flash, such that Adobe has stopped developing Flash for the mobile platform,
    preferring to concentrate on HTML5.
  prefs: []
  type: TYPE_NORMAL
- en: Over the next few pages, we'll be taking a tour of CSS3 animations, looking
    at various elements such as transitions and transforms, and how we can use Less
    to help simplify the process of developing animations. You might be surprised
    to learn that there aren't a lot of new techniques to master when using Less to
    produce an animation—in fact, all of the techniques we've covered so far can be
    used to help make development easier.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start though with a quick look at what makes a good animation—after all,
    there is no point in creating them if they aren't successful!
  prefs: []
  type: TYPE_NORMAL
- en: Creating a good animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How often have you looked at a site only to find that it looks like the inside
    of someone's brain in the middle of a migraine? Too many sites fall victim to
    the temptation to animate everything—animation is a secret ingredient that can
    make the most impact when care has been taken over its use.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, what makes a good animation? This will depend on the context of the site,
    but there are some good tips that every designer should follow:'
  prefs: []
  type: TYPE_NORMAL
- en: Don't overdo the attention grabbers—visitors want to feel in control of their
    browsing experience, so plastering a subscription dialog just when they reach
    the information they need is a big no-no! Use it to highlight something they might
    have missed, not to distract them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animation works well when it is used to highlight context and navigation features;
    a good example is an animated sidebar that provides useful local information.
    The contents of the sidebar will change frequently, so the use of animation will
    help to point out new information to users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On some sites, telling a story is one way to use animation. While this might
    be an overkill for some sites, the popular full-page scroll effect works well,
    as it suggests that there is more to be read, which helps to keep the user interested.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If an animation is used, then make it physical and believable. You can use any
    effect on the elements, such as bouncing or shaking, but if they aren't believable,
    then users will find them a distraction and a big turn-off!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s move on now and turn the focus of our attention to something more in-depth:
    how do animations work? This is the key to creating successful animations. As
    we are about to see, the different types of animation appear similar, but they
    have some key differences; this can affect how we use them to develop effects
    on our site.'
  prefs: []
  type: TYPE_NORMAL
- en: How a CSS animation works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've talked about animations in general, but the term covers no fewer than
    four different types that we can use within Less. They are animations, transitions,
    2D transforms, and 3D transforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two out of these four properties where particular attention should
    be paid to how they work: animations and transitions. This doesn''t mean that
    transforms are any less important—that''s not the case. They merely work in a
    different way to transitions and are easier to understand and use.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Animations and transitions can appear to provide the same result but work in
    different ways. The two crucial differences are:'
  prefs: []
  type: TYPE_NORMAL
- en: Transitions work on a two-state basis—they change an element from the starting
    position to the finishing position if we switch CSS states or if a pseudo-class
    has been triggered, such as `:hover` or `:focus`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animations can use multiple `@keyframes` or positions set between the starting
    and finishing state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The remaining two animation properties, 2D and 3D transforms, don't work in
    the same way—they can manipulate the size and appearance of an element, but usually
    in situ (although they can be used while the element is moving).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've seen how animations work, it's an opportune moment to get to
    know each type of animation property in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing animation types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we talk about creating animations, this could be taken to mean that we're
    moving content; while this is perfectly true, we're not limited to simply moving
    elements. We could equally transition elements from one state to another or bend
    and manipulate their appearance on the screen. Let's take a look at each animation
    type in more detail, beginning with animations.
  prefs: []
  type: TYPE_NORMAL
- en: Animating content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Animating content is used to move objects and can be used as an alternative
    to using Flash. They define what happens to a set of element's properties—we can
    control how these properties behave when defining our animation, including their
    frequency.
  prefs: []
  type: TYPE_NORMAL
- en: The key difference between animations and transitions is that animations can
    be fired without any user interaction, as soon as a page loads. Transitions can
    only be fired when an element becomes active, such as a `button` element or a
    `div` element.
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple animation will follow this format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Let's test this by creating a simple animation that changes the color of a box.
    For this, we will need a copy of the code download that accompanies this book;
    from this, extract a copy of `animatebox.html` and `animatebox.css`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run the demo, we can expect to see the box go through several shades
    of purple before reverting to the original color, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Animating content](img/00121.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The key to this is `@keyframes animbox` in our CSS; this contains the changes
    that should be made in each keyframe within our animation. We''ve had to include
    it twice in order to allow support for Chrome, Safari, and Opera:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The animation is a little jittery—this will be due to the large gaps within
    each keyframe; we could use smaller gaps for a smoother experience.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can learn more about the different attributes for CSS3 animations at [http://www.w3schools.com/css/css3_animations.asp](http://www.w3schools.com/css/css3_animations.asp).
  prefs: []
  type: TYPE_NORMAL
- en: Let's continue and take a look at how transitions work.
  prefs: []
  type: TYPE_NORMAL
- en: Transitioning elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Transitions are effectively animations that change the state of an element from
    its original state to a new state; the key difference in animations is that transitions
    can only take place when they are explicitly triggered—for example, if a mouse
    hovers over a DIV or button.
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple transition will follow this format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s test this by creating a simple transition that increases the size of
    a box. For this, we will need a copy of the code download that accompanies this
    book; from this, extract a copy of `transitionbox.html` and `transitionbox.css`.
    If we run the demo, we can expect to see the box increase in size before reverting
    to the original size:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Transitioning elements](img/00122.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The key to this is the transition code for the `#transitionbox` DIV in our
    CSS—this contains the changes that should be made in each keyframe within our
    animation. We''ve had to include it twice to allow support for WebKit browsers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We can always adjust the time taken for the animation to perform, should 2 seconds
    not be sufficient.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can learn more about the different attributes for CSS3 animations at [http://www.w3schools.com/css/css3_transitions.asp](http://www.w3schools.com/css/css3_transitions.asp).
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on now and take a look at the remaining two options, which are 2D
    and 3D transforms.
  prefs: []
  type: TYPE_NORMAL
- en: Transforming elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At first glance, you'd be forgiven for thinking that transforms are identical
    to transitions; after all, you can easily use `translate()` to move an object,
    whereas you can use an animation otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, there are two key differences: transitions can be applied as part
    of animating an element, whereas transforms are completely independent. Transitions
    allow you to apply changes to just about any CSS property, whereas transforms
    will be used to move, scale, turn, spin, or stretch any element on the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Transforming elements](img/00123.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'A simple transform will follow this format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s test this by creating two simple transforms: the first transform performs
    a 2D rotation on a box, and the second performs a 3D rotation along the *x* axis
    of the second box.'
  prefs: []
  type: TYPE_NORMAL
- en: For this, we will need a copy of the code download that accompanies this book;
    from it, extract a copy of `transformbox.html` and `transformbox.css`. If we run
    the demo, we can expect to see both the boxes rotate when hovering over either
    of these; the box on the left-hand side is rotated by 30 degrees, and the box
    on the right-hand side is rotated on its *x* axis by 130 degrees, as shown in
    the screenshot at the start of this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key to this is the transform code in our CSS—for the first box, we''re
    rotating it by 30 degrees; the second is being rotated on its *x* axis by 130
    degrees. Note how the support for 2D transforms is much better than that for 3D
    transforms; we still need to use the `webkit` prefix for most desktop browsers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Once support for browsers has improved on the 3D transform, we can then remove
    the first line in the second demo.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can learn more about the different attributes for CSS3 transforms at [http://www.w3schools.com/css/css3_2dtransforms.asp](http://www.w3schools.com/css/css3_2dtransforms.asp)
    and [http://www.w3schools.com/css/css3_3dtransforms.asp](http://www.w3schools.com/css/css3_3dtransforms.asp).
  prefs: []
  type: TYPE_NORMAL
- en: We've talked a little about support for CSS3 animations as part of exploring
    these mini demos; now is an opportune moment to cover support in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Supporting animations in browsers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One small point that we need to cover before moving on is browser support.
    Here you should have no trouble while working with animations; all the key elements
    of CSS3 animations have been supported by the major browsers for some time:'
  prefs: []
  type: TYPE_NORMAL
- en: '| IE | Firefox | Chrome | Safari | Opera |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 10+ | 5+ | 5+ | 4+ | 12+ |'
  prefs: []
  type: TYPE_TB
- en: Do check out the site **Can I Use** ([http://www.caniuse.com](http://www.caniuse.com)),
    as some of the newer elements of animation might still require vendor prefixes
    at the time of writing.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile support is equally well-supported; the only exception to this is Opera
    Mini, which lacks support for animations. Chrome for Android was a little buggy
    at the start, but this issue has since been resolved, so support will not be an
    issue. It is important to remember though that mobile devices don't have fast
    processors, so complex animations will run slowly and should be kept to a minimum
    on this platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Right, enough of the theory! Let''s move on to what you all have been waiting
    for: writing some code.'
  prefs: []
  type: TYPE_NORMAL
- en: Simplifying the animation markup with Less
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Okay, we''re finally at the point where I am sure you''re itching to get to:
    writing some code! Don''t worry, we''re almost there. I just want to cover a small
    but key point, about how we can use Less to make coding animations simpler. To
    illustrate this, we''re going to rework the critical parts of the animation demo
    we created earlier in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we take a look back at the key parts of the animation demo, we have this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Seems pretty reasonable, right? Well, as always, we can do better! Let''s see
    how:'
  prefs: []
  type: TYPE_NORMAL
- en: The first change that we can make is save `animatebox.css` as `animatebox.less`—we'll
    introduce some mixins, so saving it as a Less file will allow us to compile it
    into valid CSS later in this exercise.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to modify the HTML markup to include a reference to our new Less file
    and the Less library; so, go ahead and add the following in between the `<head>`
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, let''s turn the `@keyframes` code into a generic animation mixin—remove
    the existing two blocks at the end of the code (lines 15-29) and then replace
    it with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we add a new mixin that references the `@keyframes` code we''ve just
    created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If we rerun the demo, we should see no change in the effect. So what's different
    and why have we done what we've done here? Well, there are several benefits of
    what we've done.
  prefs: []
  type: TYPE_NORMAL
- en: We moved the `@keyframes` code into its own mixin—while the code might not seem
    shorter here, the benefits will really show when we create larger, more complex
    animations that have to be repeated to allow vendor prefixing.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `.keyframes` mixin can now go into our own mixin library; this means that
    we can import the library into future projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Reference the mixin in our code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Using Less to simplify our code isn't necessarily about making it shorter; it's
    also about making it reusable and easier to add to future projects!
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There's an updated demo available in the code—extract and run `animatebox-updated.html`
    to view the results.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on and work on a practical use of Less. How many times have you designed
    a menu for a site, only to think that it is becoming very code repetitive and
    needs animating? Okay, probably a little bit of a contrived question, but it could
    be possible…
  prefs: []
  type: TYPE_NORMAL
- en: Creating animated menus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Menus are the doyen of many a site; we all need some form of navigation, but
    styling the navigation menus is very much left to the imagination of the site's
    designer.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can even go further and add some useful effects to menus; we can at least
    animate the drop-down motion so that they glide in a little more gracefully. To
    do this, we''re going to revisit an exercise from an earlier instance in the book—remember,
    back in [Chapter 4](part0041_split_000.html#page "Chapter 4. Working with Variables,
    Mixins, and Functions"), *Working with Variables, Mixins, and Functions*, where
    we created a simple web page using some Less functions? Well, we''re going to
    add a menu to that page and when we''re done, it will look something similar to
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating animated menus](img/00124.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Okay, let''s make a start:'
  prefs: []
  type: TYPE_NORMAL
- en: For this exercise, we need a copy of the code download that accompanies this
    book; from it, extract a copy of `menus.html`. This contains a copy of the code
    from [Chapter 4](part0041_split_000.html#page "Chapter 4. Working with Variables,
    Mixins, and Functions"), *Working with Variables, Mixins, and Functions*, with
    the additional markup for our menus and some cosmetic changes to import Less files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, crack open a text editor of your choice and add the following code to
    a new file—we''ll break it down and go through it section by section, beginning
    with the main container for our menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next come the top-level menu entries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'These entries need to be turned into links; so, go ahead and add in this style
    rule:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Some of our submenus have second-level submenus, so we need to cater to these
    submenus in our styling:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This style caters to our first-level submenus:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Last, but by no means least—this provides the container for our second-level
    submenus:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need an arrow to tell the users of our submenus, so let''s add an arrow
    now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file as `menus.less`. Our `menus.html` file already has a link to it,
    along with a link to `base.less`; the latter contains the original code from [Chapter
    4](part0041_split_000.html#page "Chapter 4. Working with Variables, Mixins, and
    Functions"), *Working with Variables, Mixins, and Functions*, but in a suitably
    renamed file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, if we preview the results, we can see the new menu, as shown
    in the screenshot at the start of this exercise.
  prefs: []
  type: TYPE_NORMAL
- en: So, what have we done here? In this instance, we've kept it very simple; most
    of the styles in `menus.less` are there to provide the basic styles to render
    our menu.
  prefs: []
  type: TYPE_NORMAL
- en: We've added three transition statements in though to add a subtle touch to our
    menu so that they each glide in more smoothly and then suddenly appear. Remember,
    animating elements can provide that extra sense of dynamism to a site; in this
    instance, if the transform styles were not understood, then the menus will still
    work but will not render so gracefully on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Libraries using Less
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the last few pages, we've created some great demos of varying complexity—they
    show off something of what can be done with animations and how we can use Less.
  prefs: []
  type: TYPE_NORMAL
- en: The trouble is, there's one small but crucial problem here. How many of you
    have noticed that we've created each demo from scratch, with all the mixins included?
    I thought so, one of the precepts of Less is DRY or Don't Repeat Yourself.
  prefs: []
  type: TYPE_NORMAL
- en: If we take a look back at [Chapter 4](part0041_split_000.html#page "Chapter 4. Working
    with Variables, Mixins, and Functions"), *Working with Variables, Mixins, and
    Functions*, one of the subjects we covered was the use of external libraries within
    our code. Doing this means that we can avoid the need to write lots of mixins—while
    our examples here might have been a little too simple to warrant the use of an
    external library, we will definitely need to use at least one external library
    in a more complex site.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thankfully, we can continue the same precept of DRY when working with animations;
    there are a number of Less-based libraries available that handle animation properties
    (and this includes both transitions and transforms):'
  prefs: []
  type: TYPE_NORMAL
- en: LESS Prefixer ([http://lessprefixer.com/](http://lessprefixer.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More-or-less ([http://more-or-less.org/](http://more-or-less.org/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animate.less ([https://github.com/machito/animate.less](https://github.com/machito/animate.less))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LESS Hat ([https://github.com/madebysource/lesshat](https://github.com/madebysource/lesshat))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap's LESS ([https://github.com/twbs/bootstrap/](https://github.com/twbs/bootstrap/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LESS Elements ([http://www.lesselements.com/](http://www.lesselements.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can even go one step further—if there isn't a library available in Less that
    is to your liking, then we can always use a plain CSS library.
  prefs: []
  type: TYPE_NORMAL
- en: 'The trick here is to resave it as a Less file and incorporate it in the usual
    manner. Over time, we can then convert it piecemeal as our skills improve. The
    beauty of this is that Less will still compile the original version as normal—don''t
    forget, Less is after all a superset of CSS. With this in mind, let''s take a
    look at a few examples of pure CSS animation libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: Magic CSS ([https://github.com/miniMAC/magic](https://github.com/miniMAC/magic))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animate.css ([https://github.com/daneden/animate.css](https://github.com/daneden/animate.css))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Effeckt.css ([https://github.com/h5bp/Effeckt.css](https://github.com/h5bp/Effeckt.css)))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we've seen the details of some of the libraries we could use, let's
    take a moment to try converting one of them to Less. I hear you ask, "Why should
    I do it?" Simple, while there are some good Less libraries available, you might
    as well find a CSS animation library that is more to your liking but that doesn't
    have a Less version available. If you do, then we need to convert it to use Less!
  prefs: []
  type: TYPE_NORMAL
- en: Converting from other libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The beauty about Less is that it is a superset of CSS—this means that the conversion
    of an existing CSS library to its Less equivalent is easier than it might first
    seem. The trick behind it is all in the planning—to prove this, let's work through
    a simple example using the Magic CSS animation library.
  prefs: []
  type: TYPE_NORMAL
- en: Let's begin by downloading a copy of the library—we can do this by browsing
    to [https://raw.githubusercontent.com/miniMAC/magic/master/magic.css](https://raw.githubusercontent.com/miniMAC/magic/master/magic.css)
    and then saving a copy locally. Open a copy of `magic.css` in the text editor
    of your choice and then resave it as `magic.less`—that's it!
  prefs: []
  type: TYPE_NORMAL
- en: Sorry to disappoint you if you were expecting more; technically though, this
    is the minimum requirement to convert a library to its Less equivalent. We can
    then compile this using Crunch!, or if you have configured Sublime Text as detailed
    in [Chapter 2](part0025_split_000.html#page "Chapter 2. Building a Less Development
    Toolkit"), *Building a Less Development Toolkit*, then the compilation will have
    taken place to the point of saving your work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we could stay with this, but…there''s a fair amount of repetition in our
    code, which isn''t ideal; we can definitely do better. Let''s fix the repetition
    now:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file and save it as `keyframes.less` in the same folder as the
    original `magic.less` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look for `@-moz-keyframes magic {` on or around line 468—select from this line
    down to the end, which will be on or around line 4595.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cut and paste this in the `keyframes.less` file you've just created and then
    save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Revert to `magic.less`. You need to import the new file you''ve just created;
    so, go ahead and add this line at the top:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can also improve the animation classes by adding the following lines immediately
    below the `@import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now comes the tedious part: you need to convert each of your animation classes
    to use the new mixin. Let''s take the first, which is `.magictime`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We can easily convert the animation classes—the trick behind this is to use
    **Search and Replace** within a tool such as Sublime Text. We can update both
    the `animation-duration` and `animation-fill-mode` lines to use the Less mixin
    and then remove the remaining lines.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the search and replace work has been completed, the remaining lines can
    be removed completely. We will end up with this as the first example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We can then use the same process until we've converted all the animation classes
    within `magic.less`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, we will have a half-converted CSS file—this will work perfectly
    well. However, we can use the same principles to convert the `keyframes.less`
    file at the same time—this is something that I will leave for you to work out!
    Hint: there''s an example in the code download, if you really get stuck…'
  prefs: []
  type: TYPE_NORMAL
- en: Using vendor prefixes – a warning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Having said this, there is one important point we must visit: we''ve spent
    all this time converting the files, yet we''re potentially following a bad practice!
    Huh—how does this work, I hear you ask?'
  prefs: []
  type: TYPE_NORMAL
- en: Well, some of you will argue that this process is an antipattern—a practice
    that should not be followed, as it can make the CSS more verbose than it really
    needs to be.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on anti-patterns, you can refer to Mark Daggett's useful
    article that is worth a read and is available at [http://markdaggett.com/blog/2011/12/04/css-anti-patterns/](http://markdaggett.com/blog/2011/12/04/css-anti-patterns/).
  prefs: []
  type: TYPE_NORMAL
- en: We can add to this, as vendor prefixes will come and go; moving them into one
    file may help reduce the amount of code we need to write, but it will assume that
    vendor prefixes remain the same for all the properties. This won't be the case—the
    trouble is, we can't remove any one of them until such time that none of the animation
    properties need it, and that is not likely to be for some time!
  prefs: []
  type: TYPE_NORMAL
- en: I've used the process here purely to illustrate how it can be done—it doesn't
    mean that it should be done. A better process is to use an Autoprefixer, such
    as Alejandro Beltrán's Autoprefixer, which is available at [https://github.com/ai/autoprefixer](https://github.com/ai/autoprefixer).
    There is a plugin available for Autoprefixer to allow it to work in Sublime Text—this
    can be downloaded from [https://github.com/sindresorhus/sublime-autoprefixer](https://github.com/sindresorhus/sublime-autoprefixer).
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, let''s take a break from coding for a moment and move on. We''ve spent
    some time using Less to create our animations and converting some from CSS. There
    is one nagging question though, which I am sure you will be asking too: is using
    CSS really any better than using JavaScript, or is there more to it than what
    it first seems?'
  prefs: []
  type: TYPE_NORMAL
- en: Using CSS or JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you''ve spent time using JavaScript (and more likely, jQuery), then you
    will know that we can use it to produce some complex animations. Achieving the
    same results in CSS might be a little bit of an eye-opener for some, but they
    may ask: which is better? If you thought CSS, then you''d be right…and wrong!
    Let me explain.'
  prefs: []
  type: TYPE_NORMAL
- en: Conventional wisdom has always said that CSS is better—after all, JavaScript
    and jQuery use custom animation handlers that will repeat code between 30 and
    60 times a second. This puts more pressure on a browser than a browser just running
    pure CSS.
  prefs: []
  type: TYPE_NORMAL
- en: However, lots of people have argued in favor of either; there are clear arguments
    for or against using either technology in a site. For example, in a post for the
    CSS-Tricks site, Jack Doyle (the creator of the professional animation library
    GSAP), puts forth a detailed case on why using CSS3 animations isn't always the
    right way forward; CSS3 still has a long way to go to match the likes of Flash.
  prefs: []
  type: TYPE_NORMAL
- en: The developer, David Walsh, has written an equally useful article that also
    explains why there might be cases where we should use CSS or JavaScript and that
    limitations in the former might require use of the latter. However, to really
    turn the tables, head over to [http://css3.bradshawenterprises.com/blog/jquery-vs-css3-transitions/](http://css3.bradshawenterprises.com/blog/jquery-vs-css3-transitions/);
    you can see a great demo that proves JavaScript libraries, such as jQuery, actually
    perform worse than CSS when they are used to animate lots of elements!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: David's article is available at [http://davidwalsh.name/css-js-animation](http://davidwalsh.name/css-js-animation);
    it is definitely worth a read!
  prefs: []
  type: TYPE_NORMAL
- en: There is no right or wrong answer; the only way to be sure is to test your animations
    using tools such as Chrome's Developer toolbar to gauge the impact on the browser.
    A good rule of thumb though is to use vanilla CSS for animations and 2D transformations.
    If, however, your animation involves complicated timeline-based effects or you
    are moving a lot of elements, then JavaScript will be a better choice (animations
    frequently need to use more code than JavaScript to create the same effects).
  prefs: []
  type: TYPE_NORMAL
- en: Only testing will tell whether you've made the right choice; start with seeing
    how much you can achieve in CSS, and fallback to using JavaScript if CSS can't
    handle your requirements or places too much demand on the browser to manage the
    effect efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can read the posting in full at [http://css-tricks.com/myth-busting-css-animations-vs-javascript/](http://css-tricks.com/myth-busting-css-animations-vs-javascript/).
  prefs: []
  type: TYPE_NORMAL
- en: Okay, let's move on; we've seen now why it is important to choose whether we
    need to use jQuery instead of using Less/CSS. Assuming that you are still using
    Less/CSS to provide some form of animation, there are some tips we can use to
    help improve the performance of these animations; so, let's take a look at those
    now.
  prefs: []
  type: TYPE_NORMAL
- en: Improving the animation's performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with CSS animations can be very rewarding, but we must be careful of
    the performance—if not done with care, animations can lead to unnecessary demands
    on the browser or can drain the battery power if you are working on a mobile device!
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, a number of factors exist, which can affect performance and
    over which we may not have any control:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Browser performance**: All browsers behave differently with CSS3 and JavaScript.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GPU performance**: Some browsers now offload animation and transition operations
    to the GPU, in which case, the speed/performance is limited by the GPU. If you''re
    on an integrated Intel GPU, it''s not likely to be very smooth compared with a
    discrete NVIDIA or AMD graphics card.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CPU performance**: The main CPU will be used if the browser doesn''t offload
    to the GPU (and therefore, become the bottleneck).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The number of other tabs/windows opened in a browser**: Browsers often share
    processes across tabs, so other animations or CPU-consuming operations occurring
    in other tabs or browsers could create performance degradation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The use of gradients or box-shadow properties in our CSS code**: This can
    cause big performance hits, so avoid using these when animating elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Currently, the best way to improve performance is to limit the number of things
    that are being animated or transitioned at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: Forcing hardware acceleration for a CSS animation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All is not lost though—we can force browsers to trigger hardware acceleration
    in the desktop or mobile browser by the addition of a simple property, `transform:
    translateZ(0);`, in our code. This will hand over the rendering to the GPU, not
    the CPU.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, if we have a class called `.animate`, it would look similar
    to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Notice how we need to add the vendor prefixes for each browser? The `translateZ(0)`
    property is still experimental, so all the vendor prefixes are required to ensure
    full support. Browser support is good, but care needs to be taken, as overusing
    it can cause performance issues and battery draining.
  prefs: []
  type: TYPE_NORMAL
- en: A good test to see whether performance is being impacted is to use Chrome's
    **Timeline** and **Profiles** option in the **Developer tools** option. Do check
    out the article by Addy Osmani at [http://addyosmani.com/blog/performance-optimisation-with-timeline-profiles/](http://addyosmani.com/blog/performance-optimisation-with-timeline-profiles/),
    where he talks about how to use development tools to gauge performance. It is
    2-3 years old, and there have been some changes in how development tools work,
    but the principles are still valid.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Animating elements on a web page or a site is like crossing a fine line—one
    wrong foot can turn a site that looks stunning into a real dog's dinner of a mess
    that will turn off everyone who visits it! Throughout this chapter, we covered
    the basics of animation and saw how we can use Less to simplify the process. Before
    we move on to the next chapter, let's take a moment to recap what we learned.
  prefs: []
  type: TYPE_NORMAL
- en: We kicked off with a simple introduction to what makes a good animation before
    moving on to examine how a CSS animation works. We then explored the different
    types of animations before covering off the all-important browser support for
    the technology.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we took a look at how we can simplify the creation of animation styles
    by reworking a simple animation demo to use Less. We then moved on to create a
    more real-world example in the form of a simple menu demo, which uses transitions
    to animate the drop-down elements. With the demo completed, we moved on to examine
    how we can use Less libraries to help with our animation styling, and saw that
    the principles from [Chapter 4](part0041_split_000.html#page "Chapter 4. Working
    with Variables, Mixins, and Functions"), *Working with Variables, Mixins, and
    Functions*, could easily be applied when developing animation styles. We covered
    a few examples of CSS animation libraries before taking a look at how we could
    convert one of them to its Less equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: Before continuing, we discussed the importance of monitoring vendor prefixes
    and how some see the use of vendor mixins as an antipractice that should be discouraged.
    We then discussed how performance can be impacted by some factors that are outside
    our control, before taking a look at how we can enable hardware acceleration to
    improve performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Phew! What a tour! However, it''s not over yet: in the final chapter of this
    book, we''ll take a look at how you can contribute to and help extend the Less
    library. After all, it wouldn''t be where it is today without our help…!'
  prefs: []
  type: TYPE_NORMAL
