["```js\nclass Command { \n  environment: Environment; \n\n  print(items: ListItem[]) { \n    let stdout = this.environment.stdout; \n\n    stdout.write('Items:\\n'); \n\n    for (let item of items) { \n      stdout.write(item.text + '\\n'); \n    } \n  } \n\n  render(items: ListItem[]) { \n    let element = <List items={items}></List>; \n    this.environment.render(element); \n  } \n\n  execute() { } \n} \n\n```", "```js\nclass Command { \n  .. \n\n execute() {\n let items = ...; \n if (this.environment.type === 'cli') { \n this.print(items); \n } else { \n this.render(items); \n } \n } \n} \n\n```", "```js\nimport { HttpClient, HttpResponse } from './http-client'; \n\nexport function update(): Promise<HttpResponse> { \n  let client = new HttpClient(); \n\n  return client.get('/api/update'); \n} \n\n```", "```js\nimport Hub from './hub'; \n\nHub \n  .update() \n  .then(response => JSON.stringify(response.text)) \n  .then(result => { \n    console.log(result); \n}); \n\n```", "```js\nlet environment: Environment; \n\nlet command: Command = { \n  environment, \n  print(items) { }, \n  render(items) { }, \n  execute() { } \n}; \n\n```", "```js\nfunction cookNoodles(noodles: Noodles) { \n  if (noodles instanceof InstantNoodles) { \n    cookWithBoiledWaterAndBowl(noodles); \n  } else { \n    cookWithWaterAndBoiler(noodles); \n  } \n} \n\n```", "```js\nclass Rectangle { \n  constructor( \n    private _width: number; \n    private _height: number; \n  ) { } \n\n  set width(value: number) { \n    this._width = value; \n  } \n\n  set height(value: number) { \n    this._height = value; \n  } \n} \n\n```"]