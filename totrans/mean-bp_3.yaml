- en: Chapter 3. Job Board
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will build a job board application. Users will be able to
    create a profile and fill it with different types of information, such as job
    experience, projects they worked on, certifications, or even information related
    to education. Also, companies will be able to post job vacancies, for which users
    can apply.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the base application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In many cases, most developers will have already set up their own boilerplate
    code that they use for Node applications. One reason for this could be that there
    is more than one right way of doing things. Usually, your boilerplate will cover
    the initial functionalities of your application, such as user schema, sign-in,
    and registration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because we already have a solid base from the initial two chapters, we can
    reuse a lot of the code base. I''ve already put together a simple base application
    that we can start with. Just follow these steps to clone the project:'
  prefs: []
  type: TYPE_NORMAL
- en: Clone the project from GitHub at [https://github.com/robert52/express-api-starter](https://github.com/robert52/express-api-starter).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename your boilerplate project to `jobboard`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you want, you can stop pointing to the initial Git repository by running
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Jump to your working directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install all dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a development configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your configuration file, `jobboard/config/environments/development.js`, should
    look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Modifying the user backend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The user backend logic needs to change a little to fit our needs. For example,
    we need roles for our users. We will detail this when we talk about the user model.
    We must add authorization policies. We also need a profile for our users.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the user model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to make a few changes to the user model in order to support multiple
    account types and eventually assign roles to users. This will tell us whether
    the user is registered for a simple account, where they can define a profile with
    work experience, or to create a company that wants to post job opportunities.
  prefs: []
  type: TYPE_NORMAL
- en: The roles are going to define what actions the user can perform. For example,
    for a company we can have a company owner that has full control over the account,
    or we can have a user that is a member of that company and posts available job
    openings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s modify the user schema from `jobboard/app/models/user.js` with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We added an extra field to our user schema, more precisely `roles`, which holds
    what the user can do. You can add any type of role to the list of valid roles
    defined by the enum validation.
  prefs: []
  type: TYPE_NORMAL
- en: An authorization policy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to authorize our users to perform a requested action, we must check
    whether they can do it. For example, only a company owner can change the company
    information or add new members.
  prefs: []
  type: TYPE_NORMAL
- en: In the initial phase of a project, I like to keep my policies as simple and
    as separated as possible. In other words, I don't like to create something that
    manages everything, but instead use simple functions for my policies to check
    different scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at an authorization policy. Create a file called `jobboard/app/middlewares/authorization.js`
    and add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This simple function will check whether the owner of a company is the authenticated
    user. The preceding policy can be used in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code ensures that a user is authenticated, grabs a company by
    ID from MongoDB, and checks whether the policy that we implemented earlier authorizes
    the user to update the company or not.
  prefs: []
  type: TYPE_NORMAL
- en: The company backend module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to implement our first backend module for our application. This
    module will handle everything that is related to a company.
  prefs: []
  type: TYPE_NORMAL
- en: The company model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to add a simple but interesting functionality to the company model,
    which will create a so-called slug from the company name. A `slug`, in our context,
    is generated from the name of the company to be accepted as a valid URL. It will
    be used to reference the company in a meaningful way. For example, if we have
    a company named `Your Awesome Company` in the system, the resulting slug will
    be `your-awesome-company`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To generate the slug, we''ll implement a simple helper function so that we
    can reuse it later if necessary. Create a file called `app/helpers/common.js`
    and add the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have the `helper` function, we can define the `company` model and
    the necessary schema for it. Create a file called `app/models/company.js` and
    add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We defined the company's mongoose schema and added a pre-save hook in order
    to generate the slug. In this pre-save hook, we are using the `createSlug()` method
    from the common helper. The middleware is running in series, so we need to call
    `next()` in order to signal the completion of the execution.
  prefs: []
  type: TYPE_NORMAL
- en: The company controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Through the company controller, we are going to expose all of the business logic
    needed to manage companies. We are going to take the functionalities one by one
    and discuss them all.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a company
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After a user has successfully registered with a company type account, they
    can create a new company and become the owner. We''ll implement a simple create
    functionality and mount it on an Express route. Let''s create the controller file,
    called `jobboard/app/controllers/company.js`, with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Validation was added to the company model when we defined the schema. One thing
    we added is picking the necessary data for the create method. The owner of the
    company will by default be the user who creates it. Also, we add the user to the
    members list. After we have successfully created a new company, we return a JSON
    containing the information related to the freshly created company.
  prefs: []
  type: TYPE_NORMAL
- en: Getting a company by ID
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we can create a company, it''s time to retrieve one by ID. We''ll
    append the following code to the `app/controller/company.js` controller file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding lines of code, we used the `findById` method provided by mongoose
    from the company model. Before we search for a company in MongoDB, we want to
    ensure that the ID is a valid `ObjectId`.
  prefs: []
  type: TYPE_NORMAL
- en: Another interesting thing we added here is a global `resource` object on the
    request. Instead of returning a JSON this time, we add it as a property to an
    object that we'll carry on the callback pipe of an Express route. This will come
    in handy when we want to reuse the same functionality in other situations.
  prefs: []
  type: TYPE_NORMAL
- en: Getting all companies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We also want to get all the companies stored in MongoDB. A simple query should
    be enough for this use case. We can add a simple filter by country and, by default,
    return up to 50 companies. The following code will implement this functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Updating a company
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When updating a company, we only want some of the fields to be updated from
    the company model. We don't want to change the owner or add new members when updating
    a company. The change owner functionality will not be implemented; only add new
    member functionality will be, but it will be handled by a different module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Append the following lines of code to `jobboard/app/controllers/company.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Adding a company member
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A company member will have limited access to the company. They can post vacant
    positions and screen profiles of users who applied for an available position.
    We are going to add this functionality to the same company controller, located
    at `jobboard/app/controllers/company.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Removing a company member
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We also need to handle how we remove members from a company. We''ll append
    this functionality after the add member logic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Company routes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we are going to define all the necessary routes to access the previously
    implemented functionalities from the company controller. Let''s create our router
    file, called `jobboard/app/routes/companies.js`, and add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Follow these steps to define the endpoints:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a company:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We make sure that the user has no company already in the system.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Get all companies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get a company by ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update a company:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Updates to the company can only be made by the owner.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add company members:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Only the owner of the company can add a member.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Remove a company member:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We are also restricting this action to only the company's owner.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Export the router:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The job backend module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This module will implement all of the backend logic related to jobs. We are
    going to define the necessary models and controllers. Only the most important
    parts of the module will be explained.
  prefs: []
  type: TYPE_NORMAL
- en: The job model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The job model will define a single entity from the `Jobs` collection and is
    going to handle the necessary validation when creating a new job. As for the company
    model, we are going to use a custom variable file for job industries and types.
    The two files will be located at `jobboard/config/variables/industries.js` and
    `jobboard/config/variables/jobtypes.js`, respectively. Both export a list of objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to implement the `job` model, we are going to follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the model file, called `jobboard/app/models/job.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the necessary dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Retrieve only a list of validation values from the variable files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the Mongoose schema:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a pre-save hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And finally compile the model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Job controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our controller will integrate all the necessary business logic to handle all
    job CRUD operations. Afterwards, we can mount the exposed methods from the controller
    on specific routes, so that external clients can communicate with our backend.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new job for a company
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When creating a new job, it should be created for a specific company, because
    a job represents a vacant position at a company. Because of this, we are going
    to need the company context when creating a job.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a controller file called `jobboard/app/controllers/job.js` and add the
    following create logic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: As we said earlier, we need the company context to which we add the job. For
    that, we are going to add a get company by ID to our Express router request pipe.
    Don't worry; you 'll see this when we define our routes.
  prefs: []
  type: TYPE_NORMAL
- en: Finding a job by ID
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We should also retrieve a job by ID from Mongo. A similar logic will be used
    here as was used in the company controller. Append the following code to the job
    controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Getting all jobs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When retrieving all available jobs, there should be the possibility to apply
    some filters, such as type of job, to which industry it is assigned, or the country
    where the job is available. Beside these filters, we also need to get all available
    opening positions in a company. All of this logic will be implemented using the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Updating a specific job
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We also want to update a job posted by a company, but only by the company members.
    This restriction will be handled by middleware; for now, we are only going to
    implement the update functionality. Append the following code to `app/controllers/job.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Job routes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For a start, we are going to create the route file, called `app/routes/jobs.js`,
    with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Getting one and all jobs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we have the base, we can start defining our routes. The first pair
    of routes will be available for public access, so no authentication is required
    to retrieve one or all jobs from the system. Append the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Bonus—getting the jobs of a certain company!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Creating a route
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, things get a little tricky when creating and updating a job. To create
    a job, append the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: When creating a job, a user must be signed in and must be a member of the company
    under which he/she is posting the job. For this, we are retrieving a company from
    the database and using an authorization middleware. We compare and check whether
    the authenticated user is present in the members list. If everything goes well,
    the user can create a new job opening.
  prefs: []
  type: TYPE_NORMAL
- en: There are probably other ways to do all of this, but this solution can be beneficial
    because we request resources only when we need them. For example, we could have
    added the company object on the `req.user` object for each request if the user
    is authenticated, but that would have meant extra I/O for each request.
  prefs: []
  type: TYPE_NORMAL
- en: Updating a route
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For the update functionality, append the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the same restriction principles are present here as for the
    create route. The only extra thing that we added is retrieving a job by ID, which
    is needed by the update functionality.
  prefs: []
  type: TYPE_NORMAL
- en: With this, we have finished implementing the backend logic for the `job` module.
  prefs: []
  type: TYPE_NORMAL
- en: Job applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each user can apply for a job, and a company would also like to know who has
    applied to their available job position. To handle such scenarios, we are going
    to store all applications for a job in a separate collection in MongoDB. We are
    going to describe the backend Node.js application logic.
  prefs: []
  type: TYPE_NORMAL
- en: The application model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The application model will be pretty simple and straightforward. We could have
    gone with an embedded data model. In other words, we could have saved all applications
    in the job entity. From my point of view, separate collections gives you more
    flexibility.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a file called `app/models/application.js` and add the following
    code to define the schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Controller logic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The backend controller will handle all of the logic that is necessary to manage
    incoming requests on endpoints related to job applications. We will mount each
    exported method from the controller to a specific route.
  prefs: []
  type: TYPE_NORMAL
- en: Applying for a job
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When a candidate applies for a job, we store a reference of that application
    in MongoDB. We defined the `Application` schema earlier. To persist an application,
    we are going to use the following backend logic in our `app/controllers/application.js`
    controller file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Finding a given application by ID
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will need to find an application by its ID when updating and deleting it
    from the database. It''s good to have a common logic to retrieve data; it can
    be reused in different scenarios. Append this code to the controller file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Once again, we are using the `resource` property on the request object to populate
    it with the result from the query.
  prefs: []
  type: TYPE_NORMAL
- en: Getting all job applications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Each company will want to see all the applications for the jobs they listed.
    In order to provide that functionality, the job controller must return a list
    of applications, with the ability to filter them by status. The following code
    will implement this functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Updating an application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to change the status of an application, we must update it with the
    specific status value. The `update` method from the controller will handle this
    use case. Append the update logic to the controller file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Removing an application from a job
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A candidate should have the ability to remove an application for a vacant job.
    We will not let anybody else remove the application except the candidate. This
    restriction will be handled by middleware. The backend logic for deletion should
    look similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Now, we are not going to talk about how to add the routes. You can find all
    the available routes in the final source code of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new company
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After a successful sign-up, a new company can be created by the user. We have
    already implemented the backend logic using Node.js, and we should be able to
    store the company in the companies collection in MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: The company service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Although we are discussing the create company functionality, we are going to
    add all the endpoints to the service:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's create the service file, called `jobboard/public/src/company/company.service.ts`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the necessary dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `service` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `constructor`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Append the `create` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the `findByid()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Retrieve all companies from the backend:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update a company:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating a company component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have a fully functioning service that communicates with the backend,
    we can start implementing our components. The create company component will be
    the first one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a new file, called `public/src/company/components/company-create.component.ts`,
    and add the component''s class and dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Component` annotation should be similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'To bind the company data properties to each form input control, we used the
    `ngModel` two-way data binding. When submitting the form, the `onSubmit()` method
    is executed. Let''s add the preceding method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'This will try to create a new company through our service. If a company is
    successfully created, we navigate to the company details page. The `goToCompany()`
    method is described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: We use the router to navigate to the company's details. The router will construct
    the desired path needed for the navigation. Error handling is not covered. You
    can also add validation as an improvement.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying companies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have had a good start for the company module from earlier, when we implemented
    the "add new company" functionality. So, we can jump in and create and implement
    the rest of the files to display all companies.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to display a list of companies in our application, we create a new
    component file, called `public/src/company/components/company-list.component.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have a pretty basic component. On initialization, the companies
    are retrieved from the backend using `CompanyService`. We subscribed directly
    to the returned `Observable` to update the component's `companies` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now all that is left is to add the `Component` annotation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Using `ngFor`, we iterate over the companies data and display it accordingly.
    You can display additional data, but for now, the company name should be enough.
    Also, when clicking on the name, we use `RouterLink` to navigate to the desired
    company.
  prefs: []
  type: TYPE_NORMAL
- en: The job module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to continue with the `job` module. The reason for this is that
    the `company` module uses a component from the `job` module in order to display
    a list of available jobs for a company.
  prefs: []
  type: TYPE_NORMAL
- en: The job service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The job service will handle communication with the backend, mostly for CRUD
    operations. We are going to create an Angular factory to accomplish this. Create
    a new file called `public/app/job/job.service.js` and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the base structure and exposed methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement the `create job` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We are using the `AuthHttp` service because creating endpoints requires an authenticated
    user.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the code for finding a job by ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Query all jobs from the backend:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `getAll()` method accepts a criteria as a parameter to filter the jobs.
    On some occasions, we only want to get a list of jobs for a given company. We
    construct our query strings using the `serializeQuery` function, which can be
    found under `public/src/common/query.ts` with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: The job base component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to build a base component for our `job` module. It will hold all
    the necessary `RouteConfig` to display the child components. Create a new file,
    called `public/src/job/components/job-base.component.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: We mounted each child component to a specific path. We are going to use the
    same URL structure for `JobDetail` as for `CompanyDetail`. I think it has a nice,
    clean look and feel with the use of the slug in the URL.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we are going to define the components one by one.
  prefs: []
  type: TYPE_NORMAL
- en: The jobs component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `jobs` component will be reused across the application. Its purpose will
    be to display a list of jobs based on a few factors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `public/src/job/components/jobs.component.ts` with the
    following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `ngOnInit` method to retrieve the necessary data from the Express application,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Our component has a `company` property, which will be used when we want to
    query all jobs related to a company. Also, don''t forget to add the following
    annotation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Our component also has an input data bound property called `company`. This will
    reference a company's ID. Also create a link to the company's page.
  prefs: []
  type: TYPE_NORMAL
- en: The job list component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this component, we can use the previously built `jobs` component in order
    to list all the available openings from the system. As all of the main logic can
    be found in the `jobs` component, we just need to include it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file called `public/src/job/componets/job-list.component.ts` and
    add this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Job details
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The job details page is going to display all the necessary information about
    the required job for the user. We are going to use the same user-friendly route
    as we did in the company details. Luckily, we already have a service to communicate
    with the backend API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `public/src/job/components/job-detail.component.ts` and
    add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: The logic inside the component is pretty much the same as in `CompanyDetailComponent`.
    Using the `id` router parameter, we fetch the desired job from the backend.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Component` annotation should contain the necessary templates and directives
    used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Adding new jobs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we can list all the available jobs, we can implement the add new job
    functionality. This will be similar to the one that we implemented in the company
    module.
  prefs: []
  type: TYPE_NORMAL
- en: It probably feels like you are doing the same thing over and over again, but
    the purpose of the chapter is to create an application focused on CRUD operations.
    Many enterprise-graded apps have tremendous modules implementing those operations.
    So don't worry! We are going to have chapters in which we experiment with different
    technologies and architectures.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s continue and create a file called `public/src/job/components/job-create.component.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Prepend the following annotation to the `Component` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Company details
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Probably, you have already observed that earlier, when we listed all the companies,
    we created some nice URLs. We are going to use that path to display all the details
    of a company together with the available jobs.
  prefs: []
  type: TYPE_NORMAL
- en: The URL also contains the company slug, which is a URL-friendly representation
    of the company name. It has no benefit for the user, it's just URL sugar we added
    to display the name of the company nicely. Only the company ID is used when querying
    the backend for data.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we have all the necessary components and services, we can implement our
    details component by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file, called `public/src/company/components/company-detail.component.ts`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the necessary dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Append the `Component` annotation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the template, we are using the `jobs` component that we implemented earlier
    to list all the available jobs of a company, by sending the company's `id`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Declare the `component` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: User profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our system, we have no account type. We only define roles for users, such
    as a company owner, a member of a company, or a candidate. So, any registered
    user can fill out their profile with different information.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that we defined a `profile` property on the User schema. It will hold
    all the information regarding a user's work experience, education, or any other
    relevant data that the user wants to add.
  prefs: []
  type: TYPE_NORMAL
- en: The user's profile will be constructed using blocks. Each block will group a
    certain domain, such as experience, allowing the user to add new entries to each
    block.
  prefs: []
  type: TYPE_NORMAL
- en: Profile backend
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The backend logic for managing profile data has not been implemented yet. I
    wanted to give a feeling that we are extending our existing backend with new functionalities.
    So, we are going to start by creating a new controller file, `app/controllers/profile.js`.
    Then add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll export three functions to manage profile data. Let''s define them by
    following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the current authenticated user and the whole profile data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new profile block for the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We are using a custom schema for a `ProfileBlock` schema to create a new profile
    block and push it to the user's profile data. We are going to get back to our
    schema and define it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update an existing profile block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When updating a profile block, we need to search for that specific block and
    update it with the new data. After that, the changes will be saved and persisted
    in MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at our `ProfileBlock` schema, which is found under `app/models/profile-block.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: The preceding document schema will be embedded inside the user's document `profile`
    property. The `data` property will hold all the profile blocks, containing their
    own data.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to expose the functionalities we implemented earlier, let''s create
    a profile routes file, called `app/routes/profile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Synchronizing profile data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to store and retrieve profile data related to a user, we are going
    to create an Angular service that will handle the communication with the backend.
  prefs: []
  type: TYPE_NORMAL
- en: 'The frontend `profile` module will be inside the `user` module, as they are
    related, and we can group them by their domain context. Create a file called `public/src/user/profile/profile.service.ts`
    and add the following baseline code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: This time, we are going to use `Observables` and `Subject` for the data flow.
    They are more suitable in this case because there are many moving parts. The profile
    data can be updated from many different sources, and the changes need to travel
    to all subscribers.
  prefs: []
  type: TYPE_NORMAL
- en: 'To have a local copy of the data, we are going to use a data store in the service.
    Now let''s implement each method one by one:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a class constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the profile information about the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new profile block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update an existing profile block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When updating a profile block, we check whether an ID exists for that block.
    If not, it means that we want to create a new block and so we'll use `createProfileBlock()`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update a block from the local store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Editing profile data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To edit the user's profile, we are going to create a separate component. The
    user profile is built using blocks. For this reason, we should create another
    component just for the profile block.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to implement `ProfileEditComponent`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the necessary dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Place the `Component` annotation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the properties and constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Append the `ngOnInit()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define how the user can add new blocks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We'll subscribe to the profile data stream and display all the blocks. To display
    the profile blocks, we use a separate component. This component gets the block
    as a data input.
  prefs: []
  type: TYPE_NORMAL
- en: When the user adds a new block, we push the freshly created block to the profile.
    This is fairly easy to do because we are using a `Subject` from RxJS. In this
    way, we can synchronize our profile data with all our components.
  prefs: []
  type: TYPE_NORMAL
- en: The profile block component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Because the profile is made out of blocks, we can create a separate component
    that is reusable and encapsulates all of the block''s functionality. Let''s create
    our component, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file, called `public/src/user/profile/components/profile-block.component.ts`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the necessary dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure the `Component` annotation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the `ProfileBlockComponent` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using the `addEntry()` method, we can add more entries to our block. It's a
    simple operation that pushes a new entry to the block's data. In order to save
    the changes, we bind to the keydown event, which matches the *Enter* key to call
    the `onEnter()` method. This method will update the profile block using the service
    implemented earlier.
  prefs: []
  type: TYPE_NORMAL
- en: If a block was freshly added and has no `id`, `ProfileService` will handle this
    situation, so we don't need to add different method calls in our component.
  prefs: []
  type: TYPE_NORMAL
- en: Extra models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We used a few extra models—ones that are not found on the backend—in order to
    help us with the Angular part. They come in handy when creating initial values
    or when having default values for properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Entry` model described a single entry from a profile block. The model
    can be found under `public/src/user/profile/entry.model.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'We also used a second helper model in our module—`public/src/user/profile/block.model.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: The preceding model used the `Entry` model to initialize the `data` property
    with an initial value in case no data was present. You can also add validation
    to your models. This depends on the complexity of the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The remaining functionalities can be found in the final project repository
    found at the following link: [https://github.com/robert52/mean-blueprints-jobboard](https://github.com/robert52/mean-blueprints-jobboard)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, we have reached the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we started building an application from a boilerplate, extended
    some of its functionalities, and added our own new functionalities. We created
    a system with multiple user types and added authorization policies. Also, in the
    final steps, we extended our backend API with new functionalities and added an
    extra module to our Angular 2 application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will use real-time communication and see how users can
    interact with each other in an application.
  prefs: []
  type: TYPE_NORMAL
