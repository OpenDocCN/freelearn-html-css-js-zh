- en: Chapter 3. Job Board
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章 职位板
- en: In this chapter, we will build a job board application. Users will be able to
    create a profile and fill it with different types of information, such as job
    experience, projects they worked on, certifications, or even information related
    to education. Also, companies will be able to post job vacancies, for which users
    can apply.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个职位板应用程序。用户将能够创建个人资料并填写不同类型的信息，例如工作经历、他们参与的项目、认证信息，甚至是与教育相关的信息。此外，公司也将能够发布职位空缺，用户可以申请。
- en: Setting up the base application
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置基础应用程序
- en: In many cases, most developers will have already set up their own boilerplate
    code that they use for Node applications. One reason for this could be that there
    is more than one right way of doing things. Usually, your boilerplate will cover
    the initial functionalities of your application, such as user schema, sign-in,
    and registration.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，大多数开发者已经为他们使用的 Node 应用程序设置了他们自己的样板代码。这样做的一个原因可能是存在多种正确的方法来做事情。通常，你的样板代码将涵盖应用程序的初始功能，例如用户架构、登录和注册。
- en: 'Because we already have a solid base from the initial two chapters, we can
    reuse a lot of the code base. I''ve already put together a simple base application
    that we can start with. Just follow these steps to clone the project:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经从最初的两章中建立了一个坚实的基础，我们可以重用大量的代码库。我已经创建了一个简单的基应用程序，我们可以从这里开始。只需按照以下步骤克隆项目：
- en: Clone the project from GitHub at [https://github.com/robert52/express-api-starter](https://github.com/robert52/express-api-starter).
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 GitHub 克隆项目[https://github.com/robert52/express-api-starter](https://github.com/robert52/express-api-starter)。
- en: Rename your boilerplate project to `jobboard`.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的样板项目重命名为`jobboard`。
- en: 'If you want, you can stop pointing to the initial Git repository by running
    the following command:'
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您愿意，可以通过运行以下命令停止指向初始 Git 仓库：
- en: '[PRE0]'
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Jump to your working directory:'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 跳转到您的工作目录：
- en: '[PRE1]'
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Install all dependencies:'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装所有依赖项：
- en: '[PRE2]'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a development configuration file:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个开发配置文件：
- en: '[PRE3]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Your configuration file, `jobboard/config/environments/development.js`, should
    look similar to the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您的配置文件`jobboard/config/environments/development.js`应类似于以下内容：
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Modifying the user backend
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改用户后端
- en: The user backend logic needs to change a little to fit our needs. For example,
    we need roles for our users. We will detail this when we talk about the user model.
    We must add authorization policies. We also need a profile for our users.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 用户后端逻辑需要稍作修改以适应我们的需求。例如，我们需要为我们的用户提供角色。我们将在讨论用户模型时详细说明这一点。我们必须添加授权策略。我们还需要为我们的用户提供一个个人资料。
- en: Modifying the user model
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改用户模型
- en: We need to make a few changes to the user model in order to support multiple
    account types and eventually assign roles to users. This will tell us whether
    the user is registered for a simple account, where they can define a profile with
    work experience, or to create a company that wants to post job opportunities.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持多种账户类型并最终为用户分配角色，我们需要对用户模型进行一些修改。这将告诉我们用户是注册了简单账户，其中他们可以定义带有工作经历的个人资料，还是创建一个想要发布职位机会的公司。
- en: The roles are going to define what actions the user can perform. For example,
    for a company we can have a company owner that has full control over the account,
    or we can have a user that is a member of that company and posts available job
    openings.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 角色将定义用户可以执行的操作。例如，对于一家公司，我们可以有一个拥有完全控制账户的公司所有者，或者我们可以有一个是该公司的成员并发布可用的职位空缺的用户。
- en: 'Let''s modify the user schema from `jobboard/app/models/user.js` with the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用以下内容修改`jobboard/app/models/user.js`中的用户架构：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We added an extra field to our user schema, more precisely `roles`, which holds
    what the user can do. You can add any type of role to the list of valid roles
    defined by the enum validation.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在我们的用户架构中添加了一个额外的字段，更确切地说，是`roles`，它包含用户可以执行的操作。您可以将任何类型的角色添加到由枚举验证定义的有效角色列表中。
- en: An authorization policy
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 授权策略
- en: In order to authorize our users to perform a requested action, we must check
    whether they can do it. For example, only a company owner can change the company
    information or add new members.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了授权我们的用户执行请求的操作，我们必须检查他们是否有权这样做。例如，只有公司所有者才能更改公司信息或添加新成员。
- en: In the initial phase of a project, I like to keep my policies as simple and
    as separated as possible. In other words, I don't like to create something that
    manages everything, but instead use simple functions for my policies to check
    different scenarios.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目的初始阶段，我喜欢将我的策略保持得尽可能简单和分离。换句话说，我不喜欢创建一个管理一切的东西，而是使用简单的函数来检查不同的场景。
- en: 'Let''s take a look at an authorization policy. Create a file called `jobboard/app/middlewares/authorization.js`
    and add the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个授权策略。创建一个名为 `jobboard/app/middlewares/authorization.js` 的文件，并添加以下内容：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This simple function will check whether the owner of a company is the authenticated
    user. The preceding policy can be used in the following way:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的函数将检查公司的所有者是否是认证用户。前面的策略可以用以下方式使用：
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding code ensures that a user is authenticated, grabs a company by
    ID from MongoDB, and checks whether the policy that we implemented earlier authorizes
    the user to update the company or not.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码确保用户已认证，从MongoDB中通过ID获取公司，并检查我们之前实现的策略是否授权用户更新公司。
- en: The company backend module
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 公司后端模块
- en: We are going to implement our first backend module for our application. This
    module will handle everything that is related to a company.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为我们应用程序实现第一个后端模块。这个模块将处理与公司相关的一切。
- en: The company model
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 公司模型
- en: We are going to add a simple but interesting functionality to the company model,
    which will create a so-called slug from the company name. A `slug`, in our context,
    is generated from the name of the company to be accepted as a valid URL. It will
    be used to reference the company in a meaningful way. For example, if we have
    a company named `Your Awesome Company` in the system, the resulting slug will
    be `your-awesome-company`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向公司模型添加一个简单但有趣的功能，它将从公司名称创建一个所谓的缩略名。在我们的语境中，缩略名是从公司名称生成的，以便作为有效的URL接受。它将用于以有意义的方式引用公司。例如，如果我们系统中有一个名为
    `Your Awesome Company` 的公司，生成的缩略名将是 `your-awesome-company`。
- en: 'To generate the slug, we''ll implement a simple helper function so that we
    can reuse it later if necessary. Create a file called `app/helpers/common.js`
    and add the following lines of code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成缩略名，我们将实现一个简单的辅助函数，以便在必要时可以重用它。创建一个名为 `app/helpers/common.js` 的文件，并添加以下代码行：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now that we have the `helper` function, we can define the `company` model and
    the necessary schema for it. Create a file called `app/models/company.js` and
    add the following code to it:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了 `helper` 函数，我们可以定义 `company` 模型和它所需的模式。创建一个名为 `app/models/company.js`
    的文件，并向其中添加以下代码：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We defined the company's mongoose schema and added a pre-save hook in order
    to generate the slug. In this pre-save hook, we are using the `createSlug()` method
    from the common helper. The middleware is running in series, so we need to call
    `next()` in order to signal the completion of the execution.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了公司的mongoose模式，并添加了一个预保存钩子来生成缩略名。在这个预保存钩子中，我们使用了来自通用辅助函数的 `createSlug()`
    方法。中间件是按顺序运行的，因此我们需要调用 `next()` 来表示执行完成。
- en: The company controller
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 公司控制器
- en: Through the company controller, we are going to expose all of the business logic
    needed to manage companies. We are going to take the functionalities one by one
    and discuss them all.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 通过公司控制器，我们将公开管理公司所需的所有业务逻辑。我们将逐一讨论这些功能。
- en: Creating a company
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建公司
- en: 'After a user has successfully registered with a company type account, they
    can create a new company and become the owner. We''ll implement a simple create
    functionality and mount it on an Express route. Let''s create the controller file,
    called `jobboard/app/controllers/company.js`, with the following content:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 用户成功注册公司类型账户后，他们可以创建一个新公司并成为所有者。我们将实现一个简单的创建功能并将其挂载到Express路由上。让我们创建一个名为 `jobboard/app/controllers/company.js`
    的控制器文件，内容如下：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Validation was added to the company model when we defined the schema. One thing
    we added is picking the necessary data for the create method. The owner of the
    company will by default be the user who creates it. Also, we add the user to the
    members list. After we have successfully created a new company, we return a JSON
    containing the information related to the freshly created company.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们定义模式时，我们在公司模型中添加了验证。我们添加的一件事是为创建方法选择必要的数据。公司的所有者默认是创建它的用户。我们还把用户添加到成员列表中。在成功创建了一个新公司后，我们返回一个包含有关新创建公司的信息的JSON。
- en: Getting a company by ID
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过ID获取公司
- en: 'Now that we can create a company, it''s time to retrieve one by ID. We''ll
    append the following code to the `app/controller/company.js` controller file:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们能够创建公司了，是时候通过ID检索一个公司了。我们将追加以下代码到 `app/controller/company.js` 控制器文件：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the preceding lines of code, we used the `findById` method provided by mongoose
    from the company model. Before we search for a company in MongoDB, we want to
    ensure that the ID is a valid `ObjectId`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码行中，我们使用了mongoose从公司模型提供的 `findById` 方法。在我们搜索MongoDB中的公司之前，我们想要确保ID是一个有效的
    `ObjectId`。
- en: Another interesting thing we added here is a global `resource` object on the
    request. Instead of returning a JSON this time, we add it as a property to an
    object that we'll carry on the callback pipe of an Express route. This will come
    in handy when we want to reuse the same functionality in other situations.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里添加的另一个有趣的功能是在请求中添加了一个全局的 `resource` 对象。这次我们不是返回JSON，而是将其作为属性添加到我们将携带在Express路由的回调管道中的对象。这将在我们想要在其他情况下重用相同功能时非常有用。
- en: Getting all companies
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取所有公司
- en: 'We also want to get all the companies stored in MongoDB. A simple query should
    be enough for this use case. We can add a simple filter by country and, by default,
    return up to 50 companies. The following code will implement this functionality:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还希望获取存储在MongoDB中的所有公司。对于这个用例，一个简单的查询应该就足够了。我们可以添加一个简单的按国家过滤，默认返回最多50家公司。以下代码将实现此功能：
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Updating a company
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新公司
- en: When updating a company, we only want some of the fields to be updated from
    the company model. We don't want to change the owner or add new members when updating
    a company. The change owner functionality will not be implemented; only add new
    member functionality will be, but it will be handled by a different module.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在更新公司时，我们只想从公司模型中更新一些字段。我们不想在更新公司时更改所有者或添加新成员。更改所有者功能将不会实现；只有添加新成员功能将实现，但它将由不同的模块处理。
- en: 'Append the following lines of code to `jobboard/app/controllers/company.js`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '将以下代码行追加到 `jobboard/app/controllers/company.js`:'
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Adding a company member
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加公司成员
- en: 'A company member will have limited access to the company. They can post vacant
    positions and screen profiles of users who applied for an available position.
    We are going to add this functionality to the same company controller, located
    at `jobboard/app/controllers/company.js`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 公司成员将只能有限地访问公司。他们可以发布空缺职位并筛选申请空缺职位的用户简历。我们将向位于 `jobboard/app/controllers/company.js`
    的同一公司控制器添加此功能：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Removing a company member
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除公司成员
- en: 'We also need to handle how we remove members from a company. We''ll append
    this functionality after the add member logic:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要处理如何从公司中删除成员。我们将在添加成员逻辑之后追加此功能：
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Company routes
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 公司路由
- en: 'Next, we are going to define all the necessary routes to access the previously
    implemented functionalities from the company controller. Let''s create our router
    file, called `jobboard/app/routes/companies.js`, and add the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将定义所有必要的路由，以便从公司控制器访问之前实现的功能。让我们创建我们的路由器文件，命名为 `jobboard/app/routes/companies.js`，并添加以下内容：
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Follow these steps to define the endpoints:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤定义端点：
- en: 'Create a company:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建公司：
- en: '[PRE17]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We make sure that the user has no company already in the system.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们确保用户在系统中没有其他公司。
- en: 'Get all companies:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取所有公司：
- en: '[PRE18]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Get a company by ID:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过ID获取公司：
- en: '[PRE19]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Update a company:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新公司：
- en: '[PRE20]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Updates to the company can only be made by the owner.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 公司的更新只能由所有者进行。
- en: 'Add company members:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加公司成员：
- en: '[PRE21]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Only the owner of the company can add a member.
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只有公司所有者可以添加成员。
- en: 'Remove a company member:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除公司成员：
- en: '[PRE22]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We are also restricting this action to only the company's owner.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们也将限制这个动作只允许公司所有者执行。
- en: 'Export the router:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导出路由器：
- en: '[PRE23]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The job backend module
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 职位后端模块
- en: This module will implement all of the backend logic related to jobs. We are
    going to define the necessary models and controllers. Only the most important
    parts of the module will be explained.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块将实现所有与职位相关的后端逻辑。我们将定义必要的模型和控制器。模块中最重要的部分将进行解释。
- en: The job model
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 职位模型
- en: The job model will define a single entity from the `Jobs` collection and is
    going to handle the necessary validation when creating a new job. As for the company
    model, we are going to use a custom variable file for job industries and types.
    The two files will be located at `jobboard/config/variables/industries.js` and
    `jobboard/config/variables/jobtypes.js`, respectively. Both export a list of objects.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 职位模型将定义`Jobs`集合中的一个实体，并在创建新职位时处理必要的验证。至于公司模型，我们将使用自定义变量文件来处理职位行业和类型。这两个文件将分别位于`jobboard/config/variables/industries.js`和`jobboard/config/variables/jobtypes.js`。两者都导出一个对象列表。
- en: 'In order to implement the `job` model, we are going to follow these steps:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现`职位`模型，我们将遵循以下步骤：
- en: Create the model file, called `jobboard/app/models/job.js`.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建模型文件，命名为`jobboard/app/models/job.js`。
- en: 'Add the necessary dependencies:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加必要的依赖项：
- en: '[PRE24]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Retrieve only a list of validation values from the variable files:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仅从变量文件中检索验证值列表：
- en: '[PRE25]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Define the Mongoose schema:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义Mongoose模式：
- en: '[PRE26]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Add a pre-save hook:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个预保存钩子：
- en: '[PRE27]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'And finally compile the model:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，编译模型：
- en: '[PRE28]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Job controller
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 职位控制器
- en: Our controller will integrate all the necessary business logic to handle all
    job CRUD operations. Afterwards, we can mount the exposed methods from the controller
    on specific routes, so that external clients can communicate with our backend.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的控制将集成所有必要的业务逻辑来处理所有职位CRUD操作。之后，我们可以将控制器公开的方法挂载到特定的路由上，以便外部客户端可以与我们的后端通信。
- en: Adding a new job for a company
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为公司添加新职位
- en: When creating a new job, it should be created for a specific company, because
    a job represents a vacant position at a company. Because of this, we are going
    to need the company context when creating a job.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建新职位时，它应该为特定公司创建，因为职位代表公司的一个空缺职位。因此，在创建职位时，我们需要公司上下文。
- en: 'Create a controller file called `jobboard/app/controllers/job.js` and add the
    following create logic:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`jobboard/app/controllers/job.js`的控制器文件，并添加以下创建逻辑：
- en: '[PRE29]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: As we said earlier, we need the company context to which we add the job. For
    that, we are going to add a get company by ID to our Express router request pipe.
    Don't worry; you 'll see this when we define our routes.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前所说，我们需要添加职位的公司上下文。为此，我们将向Express路由器请求管道添加一个通过ID获取公司的功能。别担心；当我们定义路由时会看到这一点。
- en: Finding a job by ID
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过ID查找职位
- en: 'We should also retrieve a job by ID from Mongo. A similar logic will be used
    here as was used in the company controller. Append the following code to the job
    controller:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还应该从Mongo中通过ID检索一个职位。这里将使用与公司控制器中相同的逻辑。将以下代码添加到职位控制器中：
- en: '[PRE30]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Getting all jobs
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取所有职位
- en: 'When retrieving all available jobs, there should be the possibility to apply
    some filters, such as type of job, to which industry it is assigned, or the country
    where the job is available. Beside these filters, we also need to get all available
    opening positions in a company. All of this logic will be implemented using the
    following code:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当检索所有可用职位时，应该有应用一些过滤器的可能性，例如职位类型、分配的行业或职位可用的国家。除了这些过滤器外，我们还需要获取公司中所有可用的开放职位。所有这些逻辑都将使用以下代码实现：
- en: '[PRE31]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Updating a specific job
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新特定职位
- en: 'We also want to update a job posted by a company, but only by the company members.
    This restriction will be handled by middleware; for now, we are only going to
    implement the update functionality. Append the following code to `app/controllers/job.js`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还希望更新公司发布的职位，但仅限于公司成员。这种限制将由中间件处理；目前，我们只将实现更新功能。将以下代码添加到`app/controllers/job.js`：
- en: '[PRE32]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Job routes
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 职位路线
- en: 'For a start, we are going to create the route file, called `app/routes/jobs.js`,
    with the following code:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个名为`app/routes/jobs.js`的路由文件，并添加以下代码：
- en: '[PRE33]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Getting one and all jobs
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取一个或所有职位
- en: 'Now that we have the base, we can start defining our routes. The first pair
    of routes will be available for public access, so no authentication is required
    to retrieve one or all jobs from the system. Append the following code:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了基础，我们可以开始定义我们的路由。第一对路由将可供公共访问，因此检索一个或所有职位不需要进行身份验证。请添加以下代码：
- en: '[PRE34]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Bonus—getting the jobs of a certain company!
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 奖励——获取特定公司的职位！
- en: '[PRE35]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Creating a route
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建路由
- en: 'Now, things get a little tricky when creating and updating a job. To create
    a job, append the following code:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在创建和更新职位时，事情会变得有些棘手。要创建一个职位，请添加以下代码：
- en: '[PRE36]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: When creating a job, a user must be signed in and must be a member of the company
    under which he/she is posting the job. For this, we are retrieving a company from
    the database and using an authorization middleware. We compare and check whether
    the authenticated user is present in the members list. If everything goes well,
    the user can create a new job opening.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建一个职位时，用户必须登录并且必须是发布该职位的公司成员。为此，我们从数据库中检索一个公司并使用授权中间件。我们比较并检查认证用户是否在成员列表中。如果一切顺利，用户就可以创建一个新的职位空缺。
- en: There are probably other ways to do all of this, but this solution can be beneficial
    because we request resources only when we need them. For example, we could have
    added the company object on the `req.user` object for each request if the user
    is authenticated, but that would have meant extra I/O for each request.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 可能还有其他完成这些任务的方法，但这个解决方案可以带来好处，因为我们只在需要时请求资源。例如，如果用户已认证，我们可以在每个请求的`req.user`对象上添加公司对象，但这将意味着每个请求都会有额外的I/O操作。
- en: Updating a route
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新路由
- en: 'For the update functionality, append the following code:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更新功能，附加以下代码：
- en: '[PRE37]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: As you can see, the same restriction principles are present here as for the
    create route. The only extra thing that we added is retrieving a job by ID, which
    is needed by the update functionality.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这里与创建路由相同的限制原则也存在。我们唯一额外添加的是检索一个职位ID，这是更新功能所需要的。
- en: With this, we have finished implementing the backend logic for the `job` module.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们已经完成了`job`模块的后端逻辑实现。
- en: Job applications
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 职位申请
- en: Each user can apply for a job, and a company would also like to know who has
    applied to their available job position. To handle such scenarios, we are going
    to store all applications for a job in a separate collection in MongoDB. We are
    going to describe the backend Node.js application logic.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 每个用户都可以申请职位，公司也想知道谁申请了他们可用的职位空缺。为了处理这些场景，我们将把所有职位的申请存储在MongoDB中单独的集合中。我们将描述后端Node.js应用程序逻辑。
- en: The application model
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序模型
- en: The application model will be pretty simple and straightforward. We could have
    gone with an embedded data model. In other words, we could have saved all applications
    in the job entity. From my point of view, separate collections gives you more
    flexibility.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序模型将非常简单和直接。我们本可以使用嵌入式数据模型。换句话说，我们可以在职位实体中保存所有申请。从我的观点来看，分开的集合给你更多的灵活性。
- en: 'Let''s create a file called `app/models/application.js` and add the following
    code to define the schema:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`app/models/application.js`的文件，并将以下代码添加到定义模式中：
- en: '[PRE38]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Controller logic
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器逻辑
- en: The backend controller will handle all of the logic that is necessary to manage
    incoming requests on endpoints related to job applications. We will mount each
    exported method from the controller to a specific route.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 后端控制器将处理所有必要的逻辑，以管理与职位申请相关的端点上的传入请求。我们将把控制器中导出的每个方法挂载到特定的路由上。
- en: Applying for a job
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 申请职位
- en: 'When a candidate applies for a job, we store a reference of that application
    in MongoDB. We defined the `Application` schema earlier. To persist an application,
    we are going to use the following backend logic in our `app/controllers/application.js`
    controller file:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 当候选人申请职位时，我们在MongoDB中存储该申请的引用。我们之前定义了`Application`模式。为了持久化申请，我们将在`app/controllers/application.js`控制器文件中使用以下后端逻辑：
- en: '[PRE39]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Finding a given application by ID
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过ID查找给定应用程序
- en: 'We will need to find an application by its ID when updating and deleting it
    from the database. It''s good to have a common logic to retrieve data; it can
    be reused in different scenarios. Append this code to the controller file:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在更新和从数据库中删除应用程序时，我们需要通过其ID找到应用程序。有一个通用的逻辑来检索数据是很好的；它可以在不同的场景中被重用。将以下代码附加到控制器文件中：
- en: '[PRE40]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Once again, we are using the `resource` property on the request object to populate
    it with the result from the query.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，我们正在使用请求对象上的`resource`属性来填充查询的结果。
- en: Getting all job applications
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取所有职位申请
- en: 'Each company will want to see all the applications for the jobs they listed.
    In order to provide that functionality, the job controller must return a list
    of applications, with the ability to filter them by status. The following code
    will implement this functionality:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 每家公司都想看到他们列出的职位的所有申请。为了提供这个功能，职位控制器必须返回一个应用程序列表，并能够通过状态进行过滤。以下代码将实现这个功能：
- en: '[PRE41]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Updating an application
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新应用程序
- en: 'In order to change the status of an application, we must update it with the
    specific status value. The `update` method from the controller will handle this
    use case. Append the update logic to the controller file:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更改申请的状态，我们必须使用特定的状态值更新它。控制器中的 `update` 方法将处理此用例。将更新逻辑附加到控制器文件：
- en: '[PRE42]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Removing an application from a job
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从职位中删除申请
- en: 'A candidate should have the ability to remove an application for a vacant job.
    We will not let anybody else remove the application except the candidate. This
    restriction will be handled by middleware. The backend logic for deletion should
    look similar to this:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 应聘者应该有能力删除空缺职位的申请。我们将不允许任何人除应聘者外删除申请。这种限制将由中间件处理。删除的后端逻辑应类似于以下内容：
- en: '[PRE43]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Now, we are not going to talk about how to add the routes. You can find all
    the available routes in the final source code of the application.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们不会讨论如何添加路由。您可以在应用程序的最终源代码中找到所有可用的路由。
- en: Creating a new company
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新公司
- en: After a successful sign-up, a new company can be created by the user. We have
    already implemented the backend logic using Node.js, and we should be able to
    store the company in the companies collection in MongoDB.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功注册后，用户可以创建新的公司。我们已经使用 Node.js 实现了后端逻辑，并且应该能够将公司存储在 MongoDB 的 companies 集合中。
- en: The company service
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 公司服务
- en: 'Although we are discussing the create company functionality, we are going to
    add all the endpoints to the service:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们正在讨论创建公司的功能，但我们将添加所有端点到服务中：
- en: Let's create the service file, called `jobboard/public/src/company/company.service.ts`.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建服务文件，命名为 `jobboard/public/src/company/company.service.ts`。
- en: 'Import the necessary dependencies:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入必要的依赖项：
- en: '[PRE44]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Create the `service` class:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `service` 类：
- en: '[PRE45]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Add the `constructor`:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `constructor`：
- en: '[PRE46]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Append the `create` method:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 附加 `create` 方法：
- en: '[PRE47]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Define the `findByid()` function:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义 `findByid()` 函数：
- en: '[PRE48]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Retrieve all companies from the backend:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从后端检索所有公司：
- en: '[PRE49]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Update a company:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新公司：
- en: '[PRE50]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Creating a company component
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建公司组件
- en: Now that we have a fully functioning service that communicates with the backend,
    we can start implementing our components. The create company component will be
    the first one.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有一个完全功能化的服务，它与后端进行通信，我们可以开始实现我们的组件。创建公司组件将是第一个。
- en: 'Let''s create a new file, called `public/src/company/components/company-create.component.ts`,
    and add the component''s class and dependencies:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个新文件，命名为 `public/src/company/components/company-create.component.ts`，并添加组件的类和依赖项：
- en: '[PRE51]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The `Component` annotation should be similar to this:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`Component` 注解应类似于以下内容：'
- en: '[PRE52]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'To bind the company data properties to each form input control, we used the
    `ngModel` two-way data binding. When submitting the form, the `onSubmit()` method
    is executed. Let''s add the preceding method:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将公司数据属性绑定到每个表单输入控件，我们使用了 `ngModel` 双向数据绑定。在提交表单时，执行 `onSubmit()` 方法。让我们添加前面的方法：
- en: '[PRE53]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'This will try to create a new company through our service. If a company is
    successfully created, we navigate to the company details page. The `goToCompany()`
    method is described as follows:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这将通过我们的服务尝试创建新公司。如果公司成功创建，我们将导航到公司详情页面。`goToCompany()` 方法描述如下：
- en: '[PRE54]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: We use the router to navigate to the company's details. The router will construct
    the desired path needed for the navigation. Error handling is not covered. You
    can also add validation as an improvement.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用路由器导航到公司的详细信息。路由器将构建所需的路径以进行导航。错误处理未涵盖。您还可以添加验证作为改进。
- en: Displaying companies
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示公司
- en: We have had a good start for the company module from earlier, when we implemented
    the "add new company" functionality. So, we can jump in and create and implement
    the rest of the files to display all companies.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从早期实现“添加新公司”功能时，对公司模块有一个良好的开端。因此，我们可以跳入并创建和实现其余的文件以显示所有公司。
- en: 'In order to display a list of companies in our application, we create a new
    component file, called `public/src/company/components/company-list.component.ts`:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在我们的应用程序中显示公司列表，我们创建了一个新的组件文件，命名为 `public/src/company/components/company-list.component.ts`：
- en: '[PRE55]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: As you can see, we have a pretty basic component. On initialization, the companies
    are retrieved from the backend using `CompanyService`. We subscribed directly
    to the returned `Observable` to update the component's `companies` property.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们有一个相当基本的组件。在初始化时，使用 `CompanyService` 从后端检索公司。我们直接订阅返回的 `Observable` 以更新组件的
    `companies` 属性。
- en: 'Now all that is left is to add the `Component` annotation:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在只剩下添加 `Component` 注解：
- en: '[PRE56]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Using `ngFor`, we iterate over the companies data and display it accordingly.
    You can display additional data, but for now, the company name should be enough.
    Also, when clicking on the name, we use `RouterLink` to navigate to the desired
    company.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `ngFor`，我们遍历公司数据并相应地显示。你可以显示其他数据，但现阶段，公司名称应该足够了。另外，当点击名称时，我们使用 `RouterLink`
    导航到目标公司。
- en: The job module
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 求职模块
- en: We are going to continue with the `job` module. The reason for this is that
    the `company` module uses a component from the `job` module in order to display
    a list of available jobs for a company.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续构建 `job` 模块。这样做的原因是 `company` 模块使用 `job` 模块中的一个组件来显示公司的可用职位列表。
- en: The job service
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 求职服务
- en: 'The job service will handle communication with the backend, mostly for CRUD
    operations. We are going to create an Angular factory to accomplish this. Create
    a new file called `public/app/job/job.service.js` and follow these steps:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 求职服务将处理与后端的通信，主要是 CRUD 操作。我们将创建一个 Angular 工厂来完成这个任务。创建一个名为 `public/app/job/job.service.js`
    的新文件，并按照以下步骤操作：
- en: 'Define the base structure and exposed methods:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义基础结构和公开方法：
- en: '[PRE57]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Implement the `create job` method:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现 `创建职位` 方法：
- en: '[PRE58]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: We are using the `AuthHttp` service because creating endpoints requires an authenticated
    user.
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们使用 `AuthHttp` 服务，因为创建端点需要认证用户。
- en: 'Add the code for finding a job by ID:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加按 ID 查找职位的代码：
- en: '[PRE59]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Query all jobs from the backend:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从后端查询所有职位：
- en: '[PRE60]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The `getAll()` method accepts a criteria as a parameter to filter the jobs.
    On some occasions, we only want to get a list of jobs for a given company. We
    construct our query strings using the `serializeQuery` function, which can be
    found under `public/src/common/query.ts` with the following content:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`getAll()` 方法接受一个标准作为参数以过滤职位。在某些情况下，我们只想获取给定公司的职位列表。我们使用 `serializeQuery` 函数构建查询字符串，该函数位于
    `public/src/common/query.ts` 下，内容如下：'
- en: '[PRE61]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: The job base component
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 求职基础组件
- en: 'We are going to build a base component for our `job` module. It will hold all
    the necessary `RouteConfig` to display the child components. Create a new file,
    called `public/src/job/components/job-base.component.ts`:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为我们 的 `job` 模块构建一个基础组件。它将包含显示子组件所需的全部 `RouteConfig`。创建一个名为 `public/src/job/components/job-base.component.ts`
    的新文件：
- en: '[PRE62]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: We mounted each child component to a specific path. We are going to use the
    same URL structure for `JobDetail` as for `CompanyDetail`. I think it has a nice,
    clean look and feel with the use of the slug in the URL.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将每个子组件挂载到特定的路径上。我们将使用与 `JobDetail` 相同的 URL 结构来处理 `CompanyDetail`。我认为使用 URL
    中的 slug 可以使其看起来既美观又简洁。
- en: Next, we are going to define the components one by one.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将逐一定义组件。
- en: The jobs component
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 求职组件
- en: The `jobs` component will be reused across the application. Its purpose will
    be to display a list of jobs based on a few factors.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`jobs` 组件将在整个应用程序中重用。它的目的是根据几个因素显示职位列表。'
- en: 'Create a file called `public/src/job/components/jobs.component.ts` with the
    following content:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `public/src/job/components/jobs.component.ts` 的文件，并包含以下内容：
- en: '[PRE63]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Add the `ngOnInit` method to retrieve the necessary data from the Express application,
    as follows:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 添加 `ngOnInit` 方法以从 Express 应用程序中检索必要的数据，如下所示：
- en: '[PRE64]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Our component has a `company` property, which will be used when we want to
    query all jobs related to a company. Also, don''t forget to add the following
    annotation:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的组件有一个 `company` 属性，当我们要查询与某个公司相关的所有职位时将使用它。同时，别忘了添加以下注解：
- en: '[PRE65]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Our component also has an input data bound property called `company`. This will
    reference a company's ID. Also create a link to the company's page.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的组件还有一个名为 `company` 的输入数据绑定属性。这将引用一个公司的 ID。同时创建一个链接到公司页面的链接。
- en: The job list component
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 求职列表组件
- en: In this component, we can use the previously built `jobs` component in order
    to list all the available openings from the system. As all of the main logic can
    be found in the `jobs` component, we just need to include it.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在此组件中，我们可以使用之前构建的 `jobs` 组件来列出系统中的所有可用职位。由于所有主要逻辑都位于 `jobs` 组件中，我们只需包含它。
- en: 'Create a new file called `public/src/job/componets/job-list.component.ts` and
    add this code:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `public/src/job/componets/job-list.component.ts` 的新文件，并添加以下代码：
- en: '[PRE66]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Job details
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 求职详情
- en: The job details page is going to display all the necessary information about
    the required job for the user. We are going to use the same user-friendly route
    as we did in the company details. Luckily, we already have a service to communicate
    with the backend API.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 职位详情页面将显示用户所需职位的所有必要信息。我们将使用与公司详情中相同的用户友好路由。幸运的是，我们已经有了一个与后端API通信的服务。
- en: 'Create a file called `public/src/job/components/job-detail.component.ts` and
    add the following code:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`public/src/job/components/job-detail.component.ts`的文件，并添加以下代码：
- en: '[PRE67]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: The logic inside the component is pretty much the same as in `CompanyDetailComponent`.
    Using the `id` router parameter, we fetch the desired job from the backend.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 组件内的逻辑与`CompanyDetailComponent`中的几乎相同。使用`id`路由参数，我们从后端获取所需的职位。
- en: 'The `Component` annotation should contain the necessary templates and directives
    used:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`Component`注解应包含必要的模板和指令：'
- en: '[PRE68]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Adding new jobs
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加新职位
- en: Now that we can list all the available jobs, we can implement the add new job
    functionality. This will be similar to the one that we implemented in the company
    module.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们能够列出所有可用的职位，我们可以实现添加新职位的功能。这将会与我们在公司模块中实现的功能相似。
- en: It probably feels like you are doing the same thing over and over again, but
    the purpose of the chapter is to create an application focused on CRUD operations.
    Many enterprise-graded apps have tremendous modules implementing those operations.
    So don't worry! We are going to have chapters in which we experiment with different
    technologies and architectures.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 可能感觉你一直在重复做同样的事情，但本章的目的是创建一个专注于CRUD操作的应用程序。许多企业级应用程序都有实现这些操作的庞大模块。所以不用担心！我们将有章节来实验不同的技术和架构。
- en: 'Let''s continue and create a file called `public/src/job/components/job-create.component.ts`:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续并创建一个名为`public/src/job/components/job-create.component.ts`的文件：
- en: '[PRE69]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Prepend the following annotation to the `Component` class:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Component`类前添加以下注解：
- en: '[PRE70]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Company details
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 公司详情
- en: Probably, you have already observed that earlier, when we listed all the companies,
    we created some nice URLs. We are going to use that path to display all the details
    of a company together with the available jobs.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 可能你已经注意到，在我们之前列出所有公司时，我们创建了一些漂亮的URL。我们将使用该路径来显示公司的所有详情以及可用的职位。
- en: The URL also contains the company slug, which is a URL-friendly representation
    of the company name. It has no benefit for the user, it's just URL sugar we added
    to display the name of the company nicely. Only the company ID is used when querying
    the backend for data.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: URL还包含公司别名，这是公司名称的URL友好表示。它对用户没有好处，这只是我们添加的URL糖，以便更好地显示公司名称。查询后端数据时仅使用公司ID。
- en: 'As we have all the necessary components and services, we can implement our
    details component by following these steps:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经有了所有必要的组件和服务，我们可以通过以下步骤实现我们的详情组件：
- en: Create a new file, called `public/src/company/components/company-detail.component.ts`.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`public/src/company/components/company-detail.component.ts`的新文件。
- en: 'Add the necessary dependencies:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加必要的依赖项：
- en: '[PRE71]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Append the `Component` annotation:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`Component`注解：
- en: '[PRE72]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: In the template, we are using the `jobs` component that we implemented earlier
    to list all the available jobs of a company, by sending the company's `id`.
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在模板中，我们使用我们之前实现的`jobs`组件，通过发送公司的`id`来列出公司的所有可用职位。
- en: 'Declare the `component` class:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明`component`类：
- en: '[PRE73]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: User profile
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户个人资料
- en: In our system, we have no account type. We only define roles for users, such
    as a company owner, a member of a company, or a candidate. So, any registered
    user can fill out their profile with different information.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的系统中，我们没有账户类型。我们只为用户定义角色，例如公司所有者、公司成员或候选人。因此，任何注册用户都可以用不同的信息填写他们的个人资料。
- en: Remember that we defined a `profile` property on the User schema. It will hold
    all the information regarding a user's work experience, education, or any other
    relevant data that the user wants to add.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 记住我们在用户模式中定义了一个`profile`属性。它将保存有关用户工作经验、教育或用户想要添加的任何其他相关数据的所有信息。
- en: The user's profile will be constructed using blocks. Each block will group a
    certain domain, such as experience, allowing the user to add new entries to each
    block.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 用户的个人资料将通过块来构建。每个块将分组一个特定领域，例如经验，允许用户为每个块添加新的条目。
- en: Profile backend
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 个人资料后端
- en: 'The backend logic for managing profile data has not been implemented yet. I
    wanted to give a feeling that we are extending our existing backend with new functionalities.
    So, we are going to start by creating a new controller file, `app/controllers/profile.js`.
    Then add the following code:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 管理配置数据的后端逻辑尚未实现。我想传达一种我们在扩展现有后端的同时添加新功能的感觉。因此，我们将首先创建一个新的控制器文件，`app/controllers/profile.js`。然后添加以下代码：
- en: '[PRE74]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'We''ll export three functions to manage profile data. Let''s define them by
    following these steps:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将导出三个函数来管理配置数据。让我们按照以下步骤定义它们：
- en: 'Get the current authenticated user and the whole profile data:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取当前认证用户和整个配置数据：
- en: '[PRE75]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Create a new profile block for the user:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为用户创建新的配置文件块：
- en: '[PRE76]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: We are using a custom schema for a `ProfileBlock` schema to create a new profile
    block and push it to the user's profile data. We are going to get back to our
    schema and define it.
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们为 `ProfileBlock` 模式使用自定义模式来创建新的配置文件块并将其推送到用户的配置数据中。我们将回到我们的模式并定义它。
- en: 'Update an existing profile block:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新现有配置文件块：
- en: '[PRE77]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: When updating a profile block, we need to search for that specific block and
    update it with the new data. After that, the changes will be saved and persisted
    in MongoDB.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 当更新配置文件块时，我们需要搜索该特定块并使用新数据更新它。之后，更改将被保存并持久化到 MongoDB。
- en: 'Let''s take a look at our `ProfileBlock` schema, which is found under `app/models/profile-block.js`:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们的 `ProfileBlock` 模式，它位于 `app/models/profile-block.js` 下：
- en: '[PRE78]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: The preceding document schema will be embedded inside the user's document `profile`
    property. The `data` property will hold all the profile blocks, containing their
    own data.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 上述文档模式将被嵌入到用户的文档 `profile` 属性中。`data` 属性将包含所有配置文件块，以及它们自己的数据。
- en: 'In order to expose the functionalities we implemented earlier, let''s create
    a profile routes file, called `app/routes/profile.js`:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 为了公开我们之前实现的功能，让我们创建一个配置路由文件，称为 `app/routes/profile.js`：
- en: '[PRE79]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Synchronizing profile data
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 同步配置数据
- en: In order to store and retrieve profile data related to a user, we are going
    to create an Angular service that will handle the communication with the backend.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 为了存储和检索与用户相关的配置数据，我们将创建一个 Angular 服务，该服务将处理与后端的通信。
- en: 'The frontend `profile` module will be inside the `user` module, as they are
    related, and we can group them by their domain context. Create a file called `public/src/user/profile/profile.service.ts`
    and add the following baseline code:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 前端 `profile` 模块将位于 `user` 模块中，因为它们相关，并且我们可以根据它们的领域上下文进行分组。创建一个名为 `public/src/user/profile/profile.service.ts`
    的文件，并添加以下基线代码：
- en: '[PRE80]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: This time, we are going to use `Observables` and `Subject` for the data flow.
    They are more suitable in this case because there are many moving parts. The profile
    data can be updated from many different sources, and the changes need to travel
    to all subscribers.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们将使用 `Observables` 和 `Subject` 来处理数据流。在这种情况下，它们更合适，因为有很多动态部分。配置数据可以从许多不同的来源更新，并且更改需要传递给所有订阅者。
- en: 'To have a local copy of the data, we are going to use a data store in the service.
    Now let''s implement each method one by one:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有一个本地数据副本，我们将在服务中使用数据存储。现在让我们逐一实现每个方法：
- en: 'Add a class constructor:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加类构造函数：
- en: '[PRE81]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Get the profile information about the user:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取用户的配置信息：
- en: '[PRE82]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Create a new profile block:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建新的配置文件块：
- en: '[PRE83]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Update an existing profile block:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新现有配置文件块：
- en: '[PRE84]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: When updating a profile block, we check whether an ID exists for that block.
    If not, it means that we want to create a new block and so we'll use `createProfileBlock()`.
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当更新配置文件块时，我们检查该块是否存在 ID。如果没有，这意味着我们想要创建一个新的块，因此我们将使用 `createProfileBlock()`。
- en: 'Update a block from the local store:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从本地存储更新块：
- en: '[PRE85]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Editing profile data
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编辑配置数据
- en: To edit the user's profile, we are going to create a separate component. The
    user profile is built using blocks. For this reason, we should create another
    component just for the profile block.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 要编辑用户的配置文件，我们将创建一个单独的组件。用户配置文件是使用块构建的。因此，我们应该为配置文件块创建另一个组件。
- en: 'Follow these steps to implement `ProfileEditComponent`:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤实现 `ProfileEditComponent`：
- en: 'Add the necessary dependencies:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加必要的依赖项：
- en: '[PRE86]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Place the `Component` annotation:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 放置 `Component` 注解：
- en: '[PRE87]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Add the properties and constructor:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加属性和构造函数：
- en: '[PRE88]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Append the `ngOnInit()` method:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `ngOnInit()` 方法：
- en: '[PRE89]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Define how the user can add new blocks:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义用户如何添加新块：
- en: '[PRE90]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: We'll subscribe to the profile data stream and display all the blocks. To display
    the profile blocks, we use a separate component. This component gets the block
    as a data input.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将订阅配置文件数据流并显示所有块。为了显示配置文件块，我们使用了一个单独的组件。该组件将块作为数据输入获取。
- en: When the user adds a new block, we push the freshly created block to the profile.
    This is fairly easy to do because we are using a `Subject` from RxJS. In this
    way, we can synchronize our profile data with all our components.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户添加一个新块时，我们将新创建的块推送到配置文件中。这相当简单，因为我们使用了RxJS中的`Subject`。通过这种方式，我们可以将我们的配置文件数据与所有组件同步。
- en: The profile block component
  id: totrans-313
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置文件块组件
- en: 'Because the profile is made out of blocks, we can create a separate component
    that is reusable and encapsulates all of the block''s functionality. Let''s create
    our component, as follows:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 因为配置文件是由块组成的，我们可以创建一个可重用且封装了所有块功能的单独组件。让我们按照以下步骤创建我们的组件：
- en: Create a new file, called `public/src/user/profile/components/profile-block.component.ts`.
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`public/src/user/profile/components/profile-block.component.ts`的新文件。
- en: 'Add the necessary dependencies:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加必要的依赖项：
- en: '[PRE91]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Configure the `Component` annotation:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置`Component`注解：
- en: '[PRE92]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Define the `ProfileBlockComponent` class:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`ProfileBlockComponent`类：
- en: '[PRE93]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Using the `addEntry()` method, we can add more entries to our block. It's a
    simple operation that pushes a new entry to the block's data. In order to save
    the changes, we bind to the keydown event, which matches the *Enter* key to call
    the `onEnter()` method. This method will update the profile block using the service
    implemented earlier.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`addEntry()`方法，我们可以向我们的块添加更多条目。这是一个简单的操作，它将新条目推送到块的数据库中。为了保存更改，我们绑定到keydown事件，该事件将*Enter*键与`onEnter()`方法关联。此方法将使用之前实现的服务更新配置文件块。
- en: If a block was freshly added and has no `id`, `ProfileService` will handle this
    situation, so we don't need to add different method calls in our component.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个块是新添加的并且没有`id`，`ProfileService`将处理这种情况，因此我们不需要在我们的组件中添加不同的方法调用。
- en: Extra models
  id: totrans-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 额外模型
- en: We used a few extra models—ones that are not found on the backend—in order to
    help us with the Angular part. They come in handy when creating initial values
    or when having default values for properties.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了一些额外的模型——这些模型在后端找不到——以帮助我们处理Angular部分。当创建初始值或为属性设置默认值时，它们非常有用。
- en: 'The `Entry` model described a single entry from a profile block. The model
    can be found under `public/src/user/profile/entry.model.ts`:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '`Entry`模型描述了配置文件块的单个条目。该模型可以在`public/src/user/profile/entry.model.ts`下找到：'
- en: '[PRE94]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'We also used a second helper model in our module—`public/src/user/profile/block.model.ts`:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在我们的模块中使用了第二个辅助模型——`public/src/user/profile/block.model.ts`：
- en: '[PRE95]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: The preceding model used the `Entry` model to initialize the `data` property
    with an initial value in case no data was present. You can also add validation
    to your models. This depends on the complexity of the application.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 之前使用的模型使用了`Entry`模型来初始化`data`属性，以防没有数据。您也可以为您的模型添加验证。这取决于应用程序的复杂性。
- en: 'The remaining functionalities can be found in the final project repository
    found at the following link: [https://github.com/robert52/mean-blueprints-jobboard](https://github.com/robert52/mean-blueprints-jobboard)'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 剩余的功能可以在以下链接的最终项目仓库中找到：[https://github.com/robert52/mean-blueprints-jobboard](https://github.com/robert52/mean-blueprints-jobboard)
- en: Summary
  id: totrans-332
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Finally, we have reached the end of this chapter.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们到达了本章的结尾。
- en: In this chapter, we started building an application from a boilerplate, extended
    some of its functionalities, and added our own new functionalities. We created
    a system with multiple user types and added authorization policies. Also, in the
    final steps, we extended our backend API with new functionalities and added an
    extra module to our Angular 2 application.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们从模板开始构建应用程序，扩展了一些功能，并添加了我们自己的新功能。我们创建了一个具有多种用户类型的系统，并添加了授权策略。此外，在最后几步中，我们扩展了我们的后端API以添加新功能，并为我们Angular
    2应用程序添加了一个额外的模块。
- en: In the next chapter, we will use real-time communication and see how users can
    interact with each other in an application.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用实时通信，看看用户如何在应用程序中相互交互。
