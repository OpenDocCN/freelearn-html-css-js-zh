["```js\n// primitive type assignment\ntype One = number;\n```", "```js\n// complex (object assignment)\ntype Admin = {\n    username: string,\n    email: string,\n    userId: string,\n    AllowedPages: string   \n};\n```", "```js\ntype OnlyNumbers = number;\n```", "```js\n// instance of numbers only class\nclass NumbersOnly {\n    count: number\n    SetNumber(someNumber: OnlyNumbers) {\n        this.count = someNumber\n    }\n}\n```", "```js\n// class instance\nconst onlyNumbers = new NumbersOnly;\n// method with incorrect arguments\nonlyNumbers.SetNumber(\"15\");\n```", "```js\n// method with correct arguments\nonlyNumbers.SetNumber(15);\n```", "```js\n// function and type definition  \nfunction badCode(user: {\n    email: string,\n    userName: string,\n    token: string, \n    lastLogin: number\n}) {}\n```", "```js\n// object / complex type User\ntype User = {\n    email: string,\n    userName: string,\n    token: string, \n    lastLogin: number\n};\n```", "```js\n// function with type alias\nfunction goodCode(user: User){}\n```", "```js\n    //primitive type\n    type Count = number;\n    ```", "```js\n    // object type \n    type Product = {\n        name: string,\n        count: Count, //reuse Count\n        price: number,\n        amount:number,\n    }\n    ```", "```js\n    // product array\n    const products_list: Product[] = [];\n    ```", "```js\n    // add products to product array function\n    function makeProduct(p : Product ) {\n        products_list.push(p); // add product to end of array\n    }\n    ```", "```js\n    // use a for loop to create 5 products\n    for (let index = 0; index < 5; index++) {\n        let p : Product = {\n            name: \"Product\"+\"_\"+`${index}`,\n            count: index,\n            price: 100,\n            amount: 15\n        }//make product\n        makeProduct(p);\n    }\n    console.log(products_list);\n    ```", "```js\n     [\n      { name: 'Product_0', count: 0, price: 100, amount: 15 },\n      { name: 'Product_1', count: 1, price: 100, amount: 15 },\n      { name: 'Product_2', count: 2, price: 100, amount: 15 },\n      { name: 'Product_3', count: 3, price: 100, amount: 15 },\n      { name: 'Product_4', count: 4, price: 100, amount: 15 }\n    ]\n    ```", "```js\n1 // string literal  \n2 type Yes = \"yes\";\nLink to the preceding example: https://packt.link/96IlD. \n```", "```js\n3 // number literal\n4 type One = 1;\n```", "```js\n5 // process my literal \n6 function yesOne(yes: Yes, one: One ) {\n7     console.log(yes, one);\n8 }\n```", "```js\n9 // function with the correct arguments \n10 yesOne(\"yes\", 1);\n```", "```js\nyes 1\n```", "```js\n    type No = \"no\"\n    type Zero = 0\n    ```", "```js\n    function onlyNo(no: No):Zero {\n        return 0;\n    }\n    ```", "```js\n    console.log(\n        onlyNo(\"no\")\n    )\n    ```", "```js\n    0\n    ```", "```js\nExample02.ts\n1 // product type\n2 type Product = {\n3     name: string, \n4     price: number,\n5     description: string\n6 } \n7 \n8 // order type\n9 type Order = {\n10     orderId: string,\n11     amount: number,\n12     discount?: number \n13 }\nLink to the preceding example: https://packt.link/DZ7Iz\n```", "```js\n14 // Alias Cart of Product intersect Order\n15 type Cart = Product & Order;\n```", "```js\n16 // cart of type Cart\n17 const cart: Cart = {\n18     name: \"Mango\",\n19     price: 400,\n20     orderId: \"x123456\",\n21     amount: 4,\n22     description: \"big sweet, full of sugar !!!\" \n23 }\n```", "```js\n{\n  name: 'Mango',\n  price: 400,\n  orderId: 'x123456',\n  amount: 4,\n  description: 'big, sweet, and full of sugar !!!'\n}\n```", "```js\n    // create user object type\n    type User = {\n        _id: number;\n        email: string;\n        token: string;\n    }\n    ```", "```js\n    // create an admin object type\n    type Admin = {\n        accessPages: string[],\n        lastLogin: Date\n    }\n    ```", "```js\n    // create backupUser object type\n    type Backup = {\n        lastBackUp: Date,\n        backUpLocation: string\n    }\n    ```", "```js\n    // combine user and admin to create the user object\n    const superUser: User & Admin = {\n        _id: 1,\n        email: 'rayon.hunte@gmail.com',\n        token: '12345',\n        accessPages: [\n            'profile', 'adminConsole', 'userReset'\n        ],\n        lastLogin: new Date() \n    }; \n    ```", "```js\n    // create BackUpUser type\n    type BackUpUser = User & Backup\n    ```", "```js\n    // create backup user\n    const backUpUser: BackUpUser = {\n        _id: 2,\n        email: 'rayon.backup@gmail.com',\n        token: '123456',\n        lastBackUp: new Date(),\n        backUpLocation: '~/backup'\n    };\n    ```", "```js\n    // console out superUser props\n    console.log(superUser);\n    // console out backup user props\n    console.log(backUpUser);\n    ```", "```js\n    {\n      _id: 1,\n      email: 'rayon.hunte@gmail.com',\n      token: '12345',\n      accessPages: [ 'profile', 'adminConsole', 'userReset' ],\n      lastLogin: 2021-02-25T07:27:57.009Z\n    }\n    {\n      _id: 2,\n      email: 'rayon.backup@gmail.com',\n      token: '123456',\n      lastBackUp: 2021-02-25T07:27:57.009Z,\n      backUpLocation: '~/backup'\n    }\n    ```", "```js\nExample03.ts\n1 // basic union type\n2 type Age =  number | string;\nLink to the preceding example: https://packt.link/EHziL.\n```", "```js\n3  function myAge(age: Age): Age {\n4      if (typeof age === \"number\") {\n5          return `my age is ${age} and this a number`;\n6      } else if (typeof age === \"string\"){\n7          return `my age is ${age} and this a string`;\n8      } else {\n9          return `incorrect type\" ${typeof(age)}`;\n10     }\n11 }\n```", "```js\nconsole.log(myAge(45));\nconsole.log(myAge(\"45\"));\n```", "```js\nmy age is 45 and this a number\nmy age is 45 and this a string\n```", "```js\nconsole.log(myAge(false));\n```", "```js\nerror TS2345: Argument of type 'boolean' is not assignable to parameter of type 'Age'.\n```", "```js\n    type Product = {\n        name: string,\n        price: number,\n        amount: number,\n    }\n    type Post = {\n        header: string,\n        method: string,\n        product: Product\n    }\n    type Put = {\n        header: string,\n        method: string,\n        product: Product,\n        productId: number\n    }\n    ```", "```js\n    type SomeRequest =  Post | Put\n    ```", "```js\n    const products: Product[] = [];\n    ```", "```js\n    function ProcessRequest(request: SomeRequest ) {\n        if (\"productId\" in request) { products.forEach(\n                (p: Product, i: number) => {\n                   products[request.productId] = {\n                       ...request.product\n                   };});        \n        } else {\n            products.push(request.product);\n        }}\n    ```", "```js\n    const apple: Product = {\n        name: \"apple\",\n        price: 12345,\n        amount: 10\n    }; \n    const mango: Product = {\n        name: \"mango\",\n        price: 66666,\n        amount: 15\n    };\n    ```", "```js\n    const postAppleRequest : Post = {\n        header: \"zzzzz\",\n        method: 'new',\n        product: apple,\n    };\n    const putMangoRequest : Put = {\n        header:\"ggggg\",\n        method: 'update',\n        product: mango,\n        productId: 2\n    };\n    ```", "```js\n    ProcessRequest(postAppleRequest);\n    ProcessRequest(putMangoRequest);\n    ```", "```js\n    console.log(products)\n    ```", "```js\n    [\n      { name: 'apple', price: 12345, amount: 10 },\n      <1 empty item>,\n      { name: 'mango', price: 66666, amount: 15 }\n    ]\n    ```", "```js\nExample04.ts\n1 interface ErrorMessage  {\n2    // can only be string | number | symbol\n3    [msg: number ]: string;\n4     // you can add other properties once they are of the same type\n5     apiId: number\n6 }\nLink to the preceding example: https://packt.link/IqpWH\n```", "```js\n7  // message object of Index type ErrorMessage\n8  const errorMessage: ErrorMessage  = {\n9       0: \"system error\",\n10      1: \"overload\",\n11      apiId: 12345\n12 };\n```", "```js\n// console out object\nconsole.log(\n    errorMessage\n);\n```", "```js\n{ '0': 'system error', '1': 'overload', apiId: 12345 }\n```", "```js\n14 // message object of Index type ErrorMessage\n15 const errorMessage: ErrorMessage  = {\n16    '0': \"system error\",\n17     1: \"overload\",\n18    apiId: 12345 };\n```", "```js\n    interface ErrorMessage  {\n        // can only be string | number | symbol\n        [msg: number ]: string;\n        // you can add other properties once they are of the same type\n        apiId: number\n    }\n    ```", "```js\n    const errorMessage : ErrorMessage = {\n        400:\"bad request\",\n        401:\"unauthorized\",\n        403:\"forbidden\",  apiId: 123456,\n     };\n    ```", "```js\n    const errorCodes: number [] = [\n        400,401,403\n     ];\n    ```", "```js\n    errorCodes.forEach(\n        (code: number) =>  {\n            console.log(\n                errorMessage[code]\n            );\n        }\n    );\n    ```", "```js\n    bad request\n    unauthorized\n    forbidden\n    ```", "```js\n    {\n      color: 'red',\n      doors: 4,\n      doubleCab: true,\n      wheels: 4,\n      fourWheelDrive: true,\n      winch: true\n    }\n    ```", "```js\n    { shipped: false, packed: true, delivered: true }\n    { shipped: true, packed: true, delivered: true }\n    ```"]