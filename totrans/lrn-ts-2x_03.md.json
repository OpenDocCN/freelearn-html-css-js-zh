["```js\nconsole.log(greetNamed(\"John\")); // OK \nconsole.log(greetUnnamed(\"John\")); // Error \n\nfunction greetNamed(name: string): string { \n    return `Hi! ${name}`; \n} \n\nlet greetUnnamed = function(name: string): string { \n    return `Hi! ${name}`; \n}; \n```", "```js\nfunction greetNamed(name: string): string { \n    return `Hi! ${name}`; \n} \n```", "```js\nlet greetUnnamed: (name: string) => string; \n\ngreetUnnamed = function(name: string): string { \n    return `Hi! ${name}`; \n}; \n```", "```js\nlet greetUnnamed: (name: string) => string = function(name: string): string { \n    return `Hi! ${name}`; \n}; \n```", "```js\nfunction greetWithoutTralingCommas( \n    name: string \n): string { \n    return `Hi! ${name}`; \n} \n```", "```js\nfunction updatedGreetWithoutTralingCommas( \n    name: string \n    surname: string, // Error \n): string { \n    return `Hi! ${name} ${surname}`; \n} \n```", "```js\nfunction greetWithTralingCommas( \n    name: string, \n): string { \n    return `Hi! ${name}`; \n} \n```", "```js\nfunction updatedGreetWithTralingCommas( \n    name: string, \n    surname: string, \n): string { \n    return `Hi! ${name} ${surname}`; \n} \n```", "```js\nfunction add(foo: number, bar: number, foobar: number): number { \n    return foo + bar + foobar; \n} \n```", "```js\nadd(); // Error, expected 3 arguments, but got 0\\. \nadd(2, 2); // Error, expected 3 arguments, but got 2\\. \nadd(2, 2, 2); // OK, returns 6 \n```", "```js\nfunction add(foo: number, bar: number, foobar?: number): number { \n    let result = foo + bar; \n    if (foobar !== undefined) { \n        result += foobar; \n    } \n    return result; \n} \n```", "```js\nadd(); // Error, expected 2-3 arguments, but got 0\\. \nadd(2, 2); // OK, returns 4 \nadd(2, 2, 2); // OK, returns 6 \n```", "```js\nfunction add(foo: number, bar: number, foobar?: number): number { \n    return foo + bar + (foobar !== undefined ? foobar : 0); \n} \n```", "```js\nfunction add(foo: number, bar: number, foobar: number = 0): number { \n    return foo + bar + foobar; \n} \n```", "```js\nfunction add(foo, bar, foobar) { \n    if (foobar === void 0) { foobar = 0; } \n    return foo + bar + foobar; \n} \n```", "```js\nfunction add(foo: number, bar: number, foobar: number = 0): number { \n    return foo + bar + foobar; \n} \n```", "```js\nfunction add(...foo: number[]): number { \n    let result = 0; \n    for (let i = 0; i < foo.length; i++) { \n        result += foo[i]; \n    } \n    return result; \n} \n```", "```js\nadd(); // 0 \nadd(2); // 2 \nadd(2, 2); // 4 \nadd(2, 2, 2); // 6 \nadd(2, 2, 2, 2); // 8 \nadd(2, 2, 2, 2, 2); // 10 \nadd(2, 2, 2, 2, 2, 2); // 12 \n```", "```js\nfunction add() { \n    var foo = []; \n    for (var _i = 0; _i < arguments.length; _i++) { \n        foo[_i - 0] = arguments[_i]; \n    } \n    var result = 0; \n    for (var i = 0; i < foo.length; i++) { \n        result += foo[i]; \n    } \n    return result; \n} \n```", "```js\nfunction add(foo: number[]): number { \n    let result = 0; \n    for (let i = 0; i < foo.length; i++) { \n        result += foo[i]; \n    } \n    return result; \n} \n```", "```js\nadd(); // Error, expected 1 arguments, but got 0\\. \nadd(2); // Error, '2' is not assignable to parameter of type 'number[]'. \nadd(2, 2); // Error, expected 1 arguments, but got 2\\. \nadd(2, 2, 2); // Error, expected 1 arguments, but got 3\\. \n\nadd([]); // returns 0 \nadd([2]); // returns 2 \nadd([2, 2]); // returns 4 \nadd([2, 2, 2]); // returns 6 \n```", "```js\nfunction test(name: string): string; // overloaded signature \nfunction test(age: number): string; // overloaded signature \nfunction test(single: boolean): string; // overloaded signature \nfunction test(value: (string|number|boolean)): string { // implementation signature \n    switch (typeof value) { \n        case \"string\": \n            return `My name is ${value}.`; \n        case \"number\": \n            return `I'm ${value} years old.`; \n        case \"boolean\": \n            return value ? \"I'm single.\" : \"I'm not single.\"; \n        default: \n            throw new Error(\"Invalid Operation!\"); \n    } \n} \n```", "```js\nfunction test(name: string): string; \nfunction test(age: number): number; // Error \nfunction test(single: boolean): string; \nfunction test(value: (string|number|boolean)): string { \n    switch (typeof value) { \n        case \"string\": \n            return `My name is ${value}.`; \n        case \"number\": \n            return `I'm ${value} years old.`; \n        case \"boolean\": \n            return value ? \"I'm single.\" : \"I'm not single.\"; \n        default: \n            throw new Error(\"Invalid Operation!\"); \n    } \n} \n```", "```js\ntest(\"Remo\"); // returns \"My name is Remo.\" \ntest(26); // returns \"I'm 26 years old.\"; \ntest(false); // returns \"I'm not single.\"; \ntest({ custom: \"custom\" }); // Error \n```", "```js\ninterface Document { \n    createElement(tagName: \"div\"): HTMLDivElement; // specialized \n    createElement(tagName: \"span\"): HTMLSpanElement; // specialized \n    createElement(tagName: \"canvas\"): HTMLCanvasElement; // specialized \n    createElement(tagName: string): HTMLElement; // non-specialized \n} \n```", "```js\nfunction foo(): void { \n    if (true) { \n        var bar: number = 0; \n    } \n    console.log(bar); \n} \n\nfoo(); // 0 \n```", "```js\nfunction foo() { \n    var bar; \n    if (true) { \n        bar = 0; \n    } \n    console.log(bar); \n} \n\nfoo(); // 0 \n```", "```js\nfunction foo(): void { \n    bar = 0; \n    var bar: number; \n    console.log(bar); \n} \n\nfoo(); // 0 \n```", "```js\nfunction foo(): void { \n    var bar: number; \n    bar = 0; \n    console.log(bar); \n} \n\nfoo(); // 0 \n```", "```js\nfunction foo(): void { \n    if (true) { \n        let bar: number = 0; \n        bar = 1; \n    } \n    console.log(bar); // Error \n} \n```", "```js\nfunction foo(): void { \n    if (true) { \n        const bar: number = 0; \n        bar = 1; // Error \n    } \n    alert(bar); // Error \n} \n```", "```js\nlet bar = 0; // global \n\n(function() { \n    let foo: number = 0; // In scope of this function \n    bar = 1; // Access global scope \n    console.log(bar); // 1 \n    console.log(foo); // 0 \n})(); \n\nconsole.log(bar); // 1 \nconsole.log(foo); // Error \n```", "```js\nlet bar = 0; // global \nlet topScope = window; \n\n(function(global: any) { \n    let foo: number = 0; // In scope of this function \n    console.log(global.bar); // 0 \n    global.bar = 1; // Access global scope \n    console.log(global.bar); // 1 \n    console.log(foo); // 0 \n})(topScope); \n\nconsole.log(bar); // 1 \nconsole.log(foo); // Error \n```", "```js\nclass Counter { \n    private _i: number; \n    public constructor() { \n        this._i = 0; \n    } \n    public get(): number { \n        return this._i; \n    } \n    public set(val: number): void { \n        this._i = val; \n    } \n    public increment(): void { \n        this._i++; \n    } \n} \n\nlet counter = new Counter(); \nconsole.log(counter.get()); // 0 \ncounter.set(2); \nconsole.log(counter.get()); // 2 \ncounter.increment(); \nconsole.log(counter.get()); // 3 \nconsole.log(counter._i); // Error: Property '_i' is private \n```", "```js\nvar Counter = (function() { \n    function Counter() { \n        this._i = 0; \n    } \n    Counter.prototype.get = function() { \n        return this._i; \n    }; \n    Counter.prototype.set = function(val) { \n        this._i = val; \n    }; \n    Counter.prototype.increment = function() { \n        this._i++; \n    }; \n    return Counter; \n})(); \n```", "```js\nvar Counter = (function() { \n    var _i: number = 0; \n    function Counter() { \n        // \n    } \n    Counter.prototype.get = function() { \n        return _i; \n    }; \n    Counter.prototype.set = function(val: number) { \n        _i = val; \n    }; \n    Counter.prototype.increment = function() { \n        _i++; \n    }; \n    return Counter; \n})(); \n```", "```js\nlet counter = new Counter(); \nconsole.log(counter.get()); // 0 \ncounter.set(2); \nconsole.log(counter.get()); // 2 \ncounter.increment(); \nconsole.log(counter.get()); // 3 \nconsole.log(counter._i); // undefined \n```", "```js\nlet name = \"remo\"; \nlet surname = \"jansen\"; \nlet html = `<h1>${name} ${surname}</h1>`; \n```", "```js\n\n    let html = htmlEscape `<h1>${name} ${surname}</h1>`;\n\n```", "```js\ntag(literals: TemplateStringsArray, ...placeholders: any[]): string; \n```", "```js\nfunction htmlEscape(literals: TemplateStringsArray, ...placeholders: any[]) { \n    let result = \"\"; \n    for (let i = 0; i < placeholders.length; i++) { \n        result += literals[i]; \n        result += placeholders[i] \n            .replace(/&/g, \"&amp;\") \n            .replace(/\"/g, \"&quot;\") \n            .replace(/\"/g, \"'\") \n            .replace(/</g, \"&lt;\") \n            .replace(/>/g, \"&gt;\"); \n    } \n    result += literals[literals.length - 1]; \n    return result; \n} \n```", "```js\nlet html = htmlEscape `<h1>${name} ${surname}</h1>`; \n```", "```js\nvar foo = function() { // callback \n  console.log(\"foo\"); \n} \n\nfunction bar(cb: () => void) { // higher order function \n  console.log(\"bar\"); \n  cb(); \n} \n\nbar(foo); // prints \"bar\" then prints \"foo\" \n```", "```js\nbar(() => { \n  console.log(\"foo\"); \n}); // prints \"bar\" then prints \"foo\" \n```", "```js\nclass Person { \n    private _name: string; \n    constructor(name: string) { \n        this._name = name; \n    } \n    public greet() { \n        console.log(`Hi! My name is ${this._name}`); \n    } \n} \n\nlet person = new Person(\"Remo\"); \nperson.greet(); // \"Hi! My name is Remo\" \n```", "```js\nclass Person { \n    private _name: string; \n    constructor(name: string) { \n        this._name = name; \n    } \n    public greet() { \n        alert(`Hi! My name is ${this._name}`); \n    } \n    public greetDelay(time: number) { \n        setTimeout(function() { \n            alert(`Hi! My name is ${this._name}`); // Error \n        }, time); \n    } \n} \n```", "```js\nclass Person { \n    private _name: string; \n    constructor(name: string) { \n        this._name = name; \n    } \n    public greet() { \n        alert(`Hi! My name is ${this._name}`); \n    } \n    public greetDelay(time: number) { \n        setTimeout(() => { \n            alert(`Hi! My name is ${this._name}`); // OK \n        }, time); \n    } \n} \n\nlet person = new Person(\"Remo\"); \nperson.greet(); // \"Hi! My name is Remo\" \nperson.greetDelay(1000); // \"Hi! My name is Remo\" \n```", "```js\nPerson.prototype.greetDelay = function (time) { \n  var _this = this; \n  setTimeout(function () { \n    alert(\"Hi! My name is \" + _this._name); \n  }, time); \n}; \n```", "```js\nfunction doSomethingAsync( \n    arr: number[], \n    success: (arr: number[]) => void, \n    error: (e: Error) => void \n) { \n    setTimeout(() => { \n        try { \n            let n = Math.ceil(Math.random() * 100 + 1); \n            if (n < 25) { \n                throw new Error(\"n is < 25\"); \n            } \n            success([...arr, n]); \n        } catch (e) { \n            error(e); \n        } \n    }, 1000); \n} \n\nfunction doSomethingElseAsync( \n    arr: number[], \n    success: (arr: number[]) => void, \n    error: (e: Error) => void \n) { \n    setTimeout(() => { \n        try { \n            let n = Math.ceil(Math.random() * 100 + 1); \n            if (n < 25) { \n                throw new Error(\"n is < 25\"); \n            } \n            success([...arr, n]); \n        } catch (e) { \n            error(e); \n        } \n    }, 1000); \n} \n\nfunction doSomethingMoreAsync( \n    arr: number[], \n    success: (arr: number[]) => void, \n    error: (e: Error) => void \n) { \n    setTimeout(() => { \n        try { \n            let n = Math.ceil(Math.random() * 100 + 1); \n            if (n < 25) { \n                throw new Error(\"n is < 25\"); \n            } \n            success([...arr, n]); \n        } catch (e) { \n            error(e); \n        } \n    }, 1000); \n} \n```", "```js\ndoSomethingAsync([], (arr1) => { \n    doSomethingElseAsync(arr1, (arr2) => { \n        doSomethingMoreAsync(arr2, (arr3) => { \n            console.log( \n                ` \n                doSomethingAsync: ${arr3[0]} \n                doSomethingElseAsync: ${arr3[1]} \n                doSomethingMoreAsync: ${arr3[2]} \n                ` \n            ); \n        }, (e) => console.log(e)); \n    }, (e) => console.log(e)); \n}, (e) => console.log(e)); \n```", "```js\nfunction foo() { \n    return new Promise<string>((fulfill, reject) => { \n        try { \n            // do something \n            fulfill(\"SomeValue\"); \n        } catch (e) { \n            reject(e); \n        } \n    }); \n} \n\nfoo().then((value) => { \n    console.log(value); \n}).catch((e) => { \n    console.log(e); \n}); \n```", "```js\nfunction doSomethingAsync(arr: number[]) { \n    return new Promise<number[]>((resolve, reject) => { \n        setTimeout(() => { \n            try { \n                let n = Math.ceil(Math.random() * 100 + 1); \n                if (n < 25) { \n                    throw new Error(\"n is < 25\"); \n                } \n                resolve([...arr, n]); \n            } catch (e) { \n                reject(e); \n            } \n        }, 1000); \n    }); \n} \n\nfunction doSomethingElseAsync(arr: number[]) { \n    return new Promise<number[]>((resolve, reject) => { \n        setTimeout(() => { \n            try { \n                let n = Math.ceil(Math.random() * 100 + 1); \n                if (n < 25) { \n                    throw new Error(\"n is < 25\"); \n                } \n                resolve([...arr, n]); \n            } catch (e) { \n                reject(e); \n            } \n        }, 1000); \n    }); \n} \n\nfunction doSomethingMoreAsync(arr: number[]) { \n    return new Promise<number[]>((resolve, reject) => { \n        setTimeout(() => { \n            try { \n                let n = Math.ceil(Math.random() * 100 + 1); \n                if (n < 25) { \n                    throw new Error(\"n is < 25\"); \n                } \n                resolve([...arr, n]); \n            } catch (e) { \n                reject(e); \n            } \n        }, 1000); \n    }); \n} \n\n```", "```js\ndoSomethingAsync([]).then((arr1) => { \n    doSomethingElseAsync(arr1).then((arr2) => { \n        doSomethingMoreAsync(arr2).then((arr3) => { \n            console.log( \n                ` \n                doSomethingAsync: ${arr3[0]} \n                doSomethingElseAsync: ${arr3[1]} \n                doSomethingMoreAsync: ${arr3[2]} \n                ` \n            ); \n        }); \n    }); \n}).catch((e) => console.log(e)); \n```", "```js\ndoSomethingAsync([]) \n    .then(doSomethingElseAsync) \n    .then(doSomethingMoreAsync) \n    .then((arr3) => { \n        console.log( \n            ` \n            doSomethingAsync: ${arr3[0]} \n            doSomethingElseAsync: ${arr3[1]} \n            doSomethingMoreAsync: ${arr3[2]} \n            ` \n        ); \n    }).catch((e) => console.log(e)); \n```", "```js\nPromise.all([ \n    new Promise<number>((resolve) => { \n        setTimeout(() => resolve(1), 1000); \n    }), \n    new Promise<number>((resolve) => { \n        setTimeout(() => resolve(2), 1000); \n    }), \n    new Promise<number>((resolve) => { \n        setTimeout(() => resolve(3), 1000); \n    }) \n]).then((values) => { \n    console.log(values); // [ 1 ,2, 3] \n}); \n```", "```js\nPromise.race([ \n    new Promise<number>((resolve) => { \n        setTimeout(() => resolve(1), 3000); \n    }), \n    new Promise<number>((resolve) => { \n        setTimeout(() => resolve(2), 2000); \n    }), \n    new Promise<number>((resolve) => { \n        setTimeout(() => resolve(3), 1000); \n    }) \n]).then((fastest) => { \n    console.log(fastest); // 3 \n});\n```", "```js\ndeclare function someFunc( \n    callback: ( \n    nestedCallback: (error: number, result: any) => void \n    ) => void \n): void; \n\nsomeFunc( \n    ( \n        nestedCallback: (e: number) => void // Error \n    ) => { \n        nestedCallback(1); \n    } \n); \n```", "```js\nsomeFunc( \n    ( \n        nestedCallback: (e: number, result: any) => void // OK \n    ) => { \n        nestedCallback(1, 1); \n    } \n); \n```", "```js\nlet p: Promise<number> = new Promise((res, rej) => { \n    res(\"error\"); // Error \n}); \n```", "```js\ninterface Iterator<T> { \n  next(value?: any): IteratorResult<T>; \n  return?(value?: any): IteratorResult<T>; \n  throw?(e?: any): IteratorResult<T>; \n} \n```", "```js\nfunction *foo() { \n    yield 1; \n    yield 2; \n    yield 3; \n    yield 4; \n    return 5; \n} \n\nlet bar = foo(); \nbar.next(); // Object {value: 1, done: false} \nbar.next(); // Object {value: 2, done: false} \nbar.next(); // Object {value: 3, done: false} \nbar.next(); // Object {value: 4, done: false} \nbar.next(); // Object {value: 5, done: true} \nbar.next(); // Object { done: true } \n```", "```js\n\"lib\": [ \n      \"es2015.promise\", \n      \"dom\",  \n      \"es5\", \n      \"es2015.generator\", // new \n      \"es2015.iterable\" // new \n] \n```", "```js\nfunction* foo() { \nlet i = 1; \n    while (true) { \n        yield i++; \n    } \n} \n\nlet bar = foo(); \nbar.next(); // Object {value: 1, done: false} \nbar.next(); // Object {value: 2, done: false} \nbar.next(); // Object {value: 3, done: false} \nbar.next(); // Object {value: 4, done: false} \nbar.next(); // Object {value: 5, done: false} \nbar.next(); // Object {value: 6, done: false} \nbar.next(); // Object {value: 7, done: false} \n```", "```js\nlet p = Promise.resolve(3); \n\nasync function fn(): Promise<number> { \n    let i = await p; // 3 \n    return 1 + i; // 4 \n} \n\nfn().then((r) => console.log(r)); // 4 \n```", "```js\nasync function invokeTaskAsync() { \n    let arr1 = await doSomethingAsync([]); \n    let arr2 = await doSomethingElseAsync(arr1); \n    return await doSomethingMoreAsync(arr2); \n} \n```", "```js\ninvokeTaskAsync().then((result) => { \n    console.log( \n        ` \n        doSomethingAsync: ${result[0]} \n        doSomethingElseAsync: ${result[1]} \n        doSomethingMoreAsync: ${result[2]} \n        ` \n    ); \n}).catch((e) => { \n    console.log(e); \n}); \n```", "```js\n(async () => { \n    try { \n        let arr1 = await doSomethingAsync([]); \n        let arr2 = await doSomethingElseAsync(arr1); \n        let arr3 = await doSomethingMoreAsync(arr2); \n        console.log( \n            ` \n            doSomethingAsync: ${arr3[0]} \n            doSomethingElseAsync: ${arr3[1]} \n            doSomethingMoreAsync: ${arr3[2]} \n            ` \n        ); \n    } catch (e) { \n        console.log(e); \n    } \n})(); \n```", "```js\n(async () => { \n    await main(); \n})(); \n```", "```js\ninterface Iterator<T> { \n  next(value?: any): IteratorResult<T>; \n  return?(value?: any): IteratorResult<T>; \n  throw?(e?: any): IteratorResult<T>; \n} \n```", "```js\ninterface AsyncIterator<T> { \n  next(value?: any): Promise<IteratorResult<T>>; \n  return?(value?: any): Promise<IteratorResult<T>>; \n  throw?(e?: any): Promise<IteratorResult<T>>; \n} \n```", "```js\nlet counter = 0; \n\nfunction doSomethingAsync() { \n    return new Promise<number>((r) => { \n        setTimeout(() => { \n            counter += 1; \n            r(counter); \n        }, 1000); \n    }); \n} \n\nasync function* g1() { \n    yield await doSomethingAsync(); \n    yield await doSomethingAsync(); \n    yield await doSomethingAsync(); \n} \n\nlet i = g1(); \ni.next().then((n) => console.log(n)); // 1 \ni.next().then((n) => console.log(n)); // 2 \ni.next().then((n) => console.log(n)); // 3 \n```", "```js\nasync function func() { \n    for await (const x of g1()) { \n        console.log(x); \n    } \n} \n```", "```js\nfunction* g1() { \n    yield 2; \n    yield 3; \n    yield 4; \n} \n\nfunction* g2() { \n    yield 1; \n    yield* g1(); \n    yield 5; \n} \n\nvar iterator1 = g2(); \n\nconsole.log(iterator1.next()); // {value: 1, done: false} \nconsole.log(iterator1.next()); // {value: 2, done: false} \nconsole.log(iterator1.next()); // {value: 3, done: false} \nconsole.log(iterator1.next()); // {value: 4, done: false} \nconsole.log(iterator1.next()); // {value: 5, done: false} \nconsole.log(iterator1.next()); // {value: undefined, done: true} \n```", "```js\nfunction* g2() { \n    yield 1; \n    yield* [2, 3, 4]; \n    yield 5; \n} \n\nvar iterator = g2(); \n\nconsole.log(iterator.next()); // {value: 1, done: false} \nconsole.log(iterator.next()); // {value: 2, done: false} \nconsole.log(iterator.next()); // {value: 3, done: false} \nconsole.log(iterator.next()); // {value: 4, done: false} \nconsole.log(iterator.next()); // {value: 5, done: false} \nconsole.log(iterator.next()); // {value: undefined, done: true} \n```"]