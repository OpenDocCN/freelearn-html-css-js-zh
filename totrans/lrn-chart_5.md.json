["```js\noptions: {\n     scales: {\n         xAxes: [{…}, ..., {…}], // array of x-axis objects\n        yAxes: [{…}, ..., {…}]  // array of y-axis objects\n    }\n }\n```", "```js\noptions: {\n     scale: {\n         {…} // axis object containing configuration for the radial axis\n     }\n }\n```", "```js\noptions: { // configuration for a Cartesian chart\n     scales: { xAxes: [{display: false}], yAxes: [{display: false}] }\n }\noptions: { // configuration for a radial chart\n     scale: { display: false }\n }\n```", "```js\noptions: {\n     scales: {\n         xAxes: [{\n             ticks: {…},\n             scaleLabel: {…},\n             gridLines: {…}\n         }],\n         yAxes: [{\n             type: 'logarithmic', \n             position: 'left',\n             scaleLabel: {…},\n         ]\n     }\n }\n```", "```js\nscales: {\n     xAxes: [{\n         scaleLabel: {\n             display: true,\n             labelString: \"Oceans\",\n             fontSize: 16\n         }\n     }],\n     yAxes: [{\n         scaleLabel: {\n             display: true,\n             labelString: \"Volume in cubic km\",\n             fontSize: 16\n         }\n     }]\n }\n```", "```js\nscales: {\n     xAxes: [{\n         ticks: {\n             callback: d => d + ' ocean'\n         }\n     }],\n     yAxes: [{\n         ticks: {\n             reverse: true,\n         }\n     }]\n }\n```", "```js\nscales: {\n     xAxes: [{\n         ticks: {\n             padding: 10,\n             stepSize: 20,\n         }\n     }],\n     yAxes: [{\n         ticks: {\n             padding: 10,\n             min: -0.6,\n             suggestedMax: 0.6, // ignored, because data is larger\n\n         }\n     }]\n }\n```", "```js\nscales: {\n     xAxes: [{\n         gridLines: {\n             color: ['#fff','#d30','#b33',...,'#09b','#09e'],\n             lineWidth: 2,\n             zeroLineColor: 'black',\n             zeroLineWidth: 5,\n             drawBorder: false\n         },\n         ticks: {\n             padding: 10,\n             callback: function(d) {return d != 200 ? d : undefined;}\n         }\n     }],\n     yAxes: [{\n         gridLines: {\n             zeroLineColor: 'black',\n             zeroLineWidth: 5,\n             lineWidth: 2,\n             borderDash: [5, 5],\n             drawBorder: false\n         },\n         ticks: { padding: 10 }\n     }]\n }\n```", "```js\noptions: {\n     scales: {\n         xAxes: [{\n                ticks: { display: false },\n             gridLines: { display: false }\n         }],\n         yAxes: [{\n                ticks: {\n                 mirror: true,\n                 padding: -(canvas.width/2)\n             },\n             gridLines: {\n                 drawBorder: false,\n                 drawOnChartArea: false,\n                 drawTicks: false,\n                 offsetGridLines: true\n             }\n         }]\n     }\n }\n```", "```js\nnew Chart(\"my-chart\",\n    type: ...,\n    data: {\n        labels: ['One', 'Two', 'Three'], // used if others are not present\n        xLabels: ['ONE', 'TWO', 'THREE'],   // overrides ‘labels’     \n        datasets: […]\n    },\n    options: {\n        scales: {\n            xAxes: [{\n                type: 'category',\n                labels: ['Label 1', 'Label 2', 'Label 3'] // overrides \n                xLabels\n            }]\n        }\n    }\n});\n```", "```js\nconst yLabels = [\"Water\", \"Land\", \"Air\"]; // groups: multiple points\nconst xLabels = [\"Ship\", \"Train\", \"Bike\", \"Cruiser\",\n                 \"Jet\", \"Bus\", \"Rocket\", \"Car\"]; // items: single point\nconst data = [\"Water\", \"Land\", \"Land\", \"Water\", \"Air\", \"Land\", \"Air\",           \n              \"Land\"];\n\nconst dataObj = {\n    xLabels: xLabels, // used by x-axis category scale\n    yLabels: yLabels, // used by y-axis category scale\n    datasets: [\n        {\n            data: data,\n            pointRadius: 50, pointHoverRadius: 50,\n            pointStyle: 'rectRot',\n            showLine: false,\n            backgroundColor: \"hsla(20,100%,80%,0.8)\",\n            borderColor: \"hsla(0,100%,50%,1)\"\n        }\n    ]\n}\n\n Chart.defaults.scale.gridLines.drawBorder = false;\n Chart.defaults.scale.gridLines.lineWidth = 10;\n Chart.defaults.scale.gridLines.drawBorder = false;\n Chart.defaults.scale.offset = true;\n Chart.defaults.scale.ticks.padding = 20;\n\n new Chart(\"correlation\",\n         {\n             type: \"line\",\n             data: dataObj,\n             options: {\n                 legend: {display: false},\n                 scales: {\n                     xAxes: [{type: 'category'}],\n                     yAxes: [{type: 'category'}]\n                 },\n                 animation: {duration: 0},\n                 tooltips: {displayColors: false}\n             }\n         });\n```", "```js\nconst xLabels = [\"Lake\",\"River\",\"Road\",\"Railroad\",\"Ocean\",\"Air\"];\n const yLabels = [\"Car\",\"Bus\",\"Airplane\",\"Sailboat\",\"Cruiser\",\"Train\",\n                  \"Bike\"]\n const data = [\n     {x: 1, y: 4}, {x: 1, y: 5}, {x: 2, y: 4}, {x: 3, y: 1}, {x: 3, y: 2},\n     {x: 3, y: 7}, {x: 4, y: 6}, {x: 5, y: 5}, {x: 6, y: 3}\n ];\n\n const dataObj = {\n     datasets: [\n         {\n             data: data,\n             pointRadius: 20, pointHoverRadius: 20,\n             pointStyle: 'rectRot',\n             backgroundColor: \"hsla(20,100%,80%,0.8)\",\n             borderColor: \"hsla(0,100%,50%,1)\"\n         }\n     ]\n }\n\n Chart.defaults.scale.gridLines.drawBorder = false;\n Chart.defaults.scale.gridLines.lineWidth = 2;\n Chart.defaults.scale.gridLines.color = 'red';\n Chart.defaults.scale.offset = true;\n Chart.defaults.scale.ticks.padding = 10;\n Chart.defaults.scale.ticks.min = 0;\n\n new Chart(\"correlation\",\n         {\n             type: \"scatter\",\n             data: dataObj,\n             options: {\n                 legend: {display: false},\n                 animation: { duration: 0 },\n                 scales: {\n                     xAxes: [{\n                         ticks: {\n                             max: 7,\n                             callback: function(value) {\n                                 return xLabels[value-1];\n                             }\n                         }\n                     }],\n                     yAxes: [{\n                         ticks: {\n                             max: 8,\n                             callback: function(value) {\n                                 return yLabels[value-1];\n                             }\n                         }\n                     }]\n                 }\n             }\n         });\n```", "```js\nscales: {\n     xAxes: [{ // category axis\n         display: true,\n         ticks: {\n             labels: labels.reverse(), // overrides labels array\n             min: 'South Pacific',\n             max: 'North Atlantic'\n         }\n     }]\n }\n```", "```js\n<script src=\"img/moment.js\">\n </script>\n```", "```js\n{x: new Date(), y: 1} // now\n{t: ‘20190224’, y: 2} // 2019-02-24\n```", "```js\nnew Chart(\"my-chart\", {\n     type: \"bar\",\n     data: {\n         labels: [‘20190224’, ‘20190227’, ‘20190305’],\n         datasets: [...],\n     }\n });\n```", "```js\nconst dataset = [];\n let date = moment('20181120');\n for(let i = 1; i <= 10; i+= 1) {\n     dataset.push({t: date, y: Math.random() * 10});\n     date = moment(date)\n            .add( Math.floor(Math.random() * 10)+1, 'days').calendar();\n }\n const dataObj = {\n     datasets: [{data: dataset, backgroundColor: 'hsla(290,100%,45%,.5)'}]\n }\n new Chart(\"my-chart\", {\n     type: \"bar\",\n     data: dataObj,\n     options: {\n         legend: {display: false},\n         scales: {\n             xAxes: [{\n                 type: 'time',\n                 offset: true,\n                 gridLines: { offsetGridLines: true },\n                 time: {unit: 'day'}\n             }]\n         }\n     }\n });\n```", "```js\ntime: {\n     unit: 'month',\n     displayFormats: {\n         month: 'MMMM',   // will print January, February,… for month units\n     }\n }\n```", "```js\nxAxes: [{\n     type: 'time',\n     offset: true,\n     gridLines: { offsetGridLines: true },\n     distribution: 'series',\n     bounds: 'ticks',\n     time: {\n         unit: 'day',\n         displayFormats: {\n             day: 'MMM D Y',\n         }\n     }\n }]\n```", "```js\nconst dataset = [], labels = [];\n let date = moment('20181120');\n for(let i = 1; i <= 10; i+= 1) {\n     labels.push(date);\n     dataset.push(Math.random() * 10);\n     date = moment(date)\n            .add( Math.floor(Math.random() * 10)+1, 'days').calendar();\n }\n\n const dataObj = {\n     labels: labels,\n     datasets: [{\n         data: dataset,\n         backgroundColor: 'hsla(290,100%,45%,.5)'\n     }]\n }\n\n new Chart(\"my-chart\", { type: \"bar\", data: dataObj,\n     options: {\n         scales: {\n             xAxes: [{\n                 // ... other configuration not shown\n                 ticks: { source: 'labels' }\n             }]\n         }\n     }\n });\n```", "```js\noptions: {\n     scale: {\n         ticks: {…},\n         angleLines: {…},\n         gridLines: {…},\n         pointLabels: {…}\n     }\n }\n```", "```js\nscale: {\n     pointLabels: { callback: (d) => 'Step ' + d, fontColor: 'red'}\n }\n```", "```js\nscale: {\n     ticks: {\n         fontColor: 'blue',\n         callback: (d) => d + ' m',\n         reverse: true,\n         min: 0,\n     }\n }\n```", "```js\nscale: {\n     gridLines: {\n         circular: true,\n         lineWidth: 2,\n         color: 'hsla(240,100%,50%,.2)'\n     },\n     angleLines: {\n         display: true,\n         lineWidth: 2,\n         color: 'hsla(120,100%,25%,.2)'\n     }\n }\n```", "```js\nscales: {\n     yAxes: [{\n         id: 'y-axis-1',\n         ticks: {min: -2,max: 2},\n         scaleLabel: {display: true, labelString: \"Left Axis\"},\n         position: 'left'\n     },{\n         id: 'y-axis-2',\n         ticks: {min: -2, max: 2},\n         scaleLabel: {display: true,labelString: \"Right Axis\"},\n         gridLines: {display: false},\n         position: 'right'\n     }],\n     xAxes: [{\n         ticks: {min: -4, max: 4},\n         scaleLabel: {display: true,labelString: \"Top Axis\"},\n         position: 'top'\n     }],\n }\n```", "```js\nconst labels = [\"Arctic\", \"North Atlantic\", \"South Atlantic\", \"Indian\",\n                 \"North Pacific\", \"South Pacific\", \"Southern\"];\n const labels2 = [\"\",\"Atlantic\", \"\", \"Pacific\",\"\"];\n// ...\nxAxes: [\n     {\n         weight: 10,\n         labels: labels,\n         ticks: {\n             fontColor: 'black'\n         }\n     },{\n         weight: 20,\n         labels: labels2,\n         ticks: {\n             fontColor: 'purple'\n         },\n         offset: true\n     },\n ]\n```", "```js\nyAxes: [\n     {\n         afterBuildTicks: function(axis) {\n             log('afterBuildTicks')\n             axis.ticks = axis.ticks.filter((d,i) => d % 100000 == 0);\n\n         },\n         afterTickToLabelConversion: function(axis) {\n             log('afterTickToLabelConversion')\n             axis.ticks.forEach((d,i) => axis.ticks[i] = +d/1000);\n         }\n     }\n ]\n```", "```js\nChart.scaleService.updateScaleDefaults('linear', {\n     ticks: {\n         min: -100000\n     },\n     afterTickToLabelConversion: function(axis) {\n         axis.ticks.forEach((d,i) => axis.ticks[i] = +d/1000);\n     }\n });\n\n Chart.scaleService.updateScaleDefaults('category', {\n     afterTickToLabelConversion: function(axis) {\n         axis.ticks.forEach((d,i) => axis.ticks[i] = d + \" Ocean\")\n     }\n });\n```"]