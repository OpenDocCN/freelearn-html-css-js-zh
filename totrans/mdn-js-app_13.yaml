- en: Chapter 13. Building a Search Engine Template Using AngularJS 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To build **single page applications** (**SPAs**) using Angular 2, we need to
    learn how to implement routing in Angular 2\. Angular 2 comes with built-in routing
    APIs, which are very powerful, feature rich, and easy to use. In this chapter,
    we will build a basic search engine template to demonstrate routing in Angular
    2\. We won't be building a complete search engine because that's out of the scope
    of this book. We will use Bootstrap 4 to design the search engine template. At
    the end of this chapter, you will be comfortable with building SPAs using Angular
    2.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Routing in Angular 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The built-in HTTP client provided by Angular 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating random textual data using the `Chance.js` library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to set up your project:'
  prefs: []
  type: TYPE_NORMAL
- en: In the exercise files of this chapter, you will find two directories, `initial`
    and `final`. The `final` directory contains the final search engine template whereas
    the `initial` directory contains the files to quickly get started with building
    the search engine template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `initial` directory, you will find `app.js` and `package.json`. In the
    `package.json` file, place this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we are listing `Express.js` and `Chance.js` as dependencies. Express will
    be used to build the web server whereas `Chance.js` will be used to generate random
    textual data to populate the template's search results.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, run `npm install` inside the `initial` directory to download the packages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `initial` directory, you will find a directory named `public`, inside
    which all the static assets will be placed. Inside the `public` directory, you
    will find the `componentTemplates`, `css`, `html`, and `js` directories.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Inside the `css` directory, you will find `bootstrap.min.css`; `index.html`
    inside the `html` directory; and finally, `index.js`, `angular2-all.umd.js`, `angular2-polyfills.js`,
    and `Rx.umd.js` inside the `js` directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In `index.html`, place this starting code to load Angular, Bootstrap, and the
    `index.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code is self-explanatory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, in the `app.js` file, place this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here as well, most of the code is self-explanatory. We are simply serving `index.html`
    regardless of what the HTTP request path is.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Configuring routes and bootstrapping the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In SPA, the routes for our app are defined in the frontend. In Angular 2, we
    need to define the paths and a component associated with the path that will be
    rendered for that path.
  prefs: []
  type: TYPE_NORMAL
- en: We provide the routes to the root component, and the root component displays
    the component bound to the route.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the root component and routes for our search engine template:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Place this code in the `index.js` file to to create the root components and
    routes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create a file named `app.html` in the `componentTemplates` directory and
    place this code in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is how this code works:'
  prefs: []
  type: TYPE_NORMAL
- en: At first, we create the root component, called `AppComponent`. While creating
    the root component, we add the `ng.router.ROUTER_DIRECTIVES` directive to it,
    which lets us use the `routerLink` directive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we use `ng.router.RouteConfig` to configure the routes for our application.
    We are providing an array of routes as an argument to the `ng.router.RouteConfig`
    method. A route consists of a path, component, and the name of the route. The
    paths can be static, parameterized, or wildcard, just like Express route paths.
    Here, the first route is for the home page, second for displaying the search result,
    and finally, the third for handling invalid URLs, that is, URLs for which routes
    are not defined. The `ng.router.RouteConfig` method returns a function that takes
    the root component and attaches the routes to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We then initialize the application. While initializing the app, we're passing
    the `ng.router.ROUTER_PROVIDERS` provider, which will be used to create instances
    of various services related to routing. Also, we are providing a custom provider,
    which returns the `/` character when an instance of the `ng.router.APP_BASE_HREF`
    service is requested. `ng.router.APP_BASE_HREF` is used to find the base URL of
    the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `AppComponent` template, we are displaying a navigation bar. The navigation
    bar has an `anchor` tag that doesn't have an `href` attribute; instead, we are
    using the `routerLink` directive to assign the redirect link so that when clicked
    on, instead of a complete page reload, it only changes the URL and component.
    And finally, `<router-outlet>` is what displays the component based on the current
    URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generating random search results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To populate our template, we need to generate some random search result data.
    For this, we can use the `Chance.js` library. We will generate random data on
    the server side, not on client side, so that we can later demonstrate how to make
    an HTTP request using Angular 2.
  prefs: []
  type: TYPE_NORMAL
- en: '`Chance.js` is available for both client-side and server-side JavaScript. We
    earlier downloaded the `Chance.js` package to use with `Node.js`. Here is the
    code to generate random data. Place it in the `app.js` file above the `/*` route
    so that `/*` doesn''t override the random data route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here, we first create a route for the `/getData` path, which sends an array
    of search results as a response. The route callback uses `chance.sentence()` to
    generate random titles for the search result and `chance.paragraph()` to generate
    a description.
  prefs: []
  type: TYPE_NORMAL
- en: Creating route components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create `HomeComponent`, `SearchResultComponent`, and `NotFoundComponent`.
    Before that, let''s create a component to display the search form. The search
    form will have a textbox and a search button. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Place this code in the `index.js` file, above the `AppComponent` code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create a file named `search-form.html` in the `componentTemplates` directory,
    and place this code in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is how the code works:'
  prefs: []
  type: TYPE_NORMAL
- en: At first, we create a component called `FormComponent`. It uses the `ng.router.ROUTER_DIRECTIVES`
    directive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the template of the component, we display an HTML form. The form has a textbox
    and button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We handle the `keyup` event of the text input box and store the value in the
    `searchParams.query` property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The button redirects to the `SearchResult` component. Note that here we are
    passing `searchParams` object to `routerLink`, which becomes the query parameter
    when redirecting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's create the `HomeComponent` component. This component is displayed
    on the home page. It displays the search form.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how to create `HomeComponent`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Place this code in the `index.js` file, above the `AppComponent` code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create a file named `search-form.html`, and place it in the `componentTemplates`
    directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, the `HomeComponent` code is self-explanatory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, let''s create the `SearchResultComponent` component. This component should
    display the search form and the search result below it. It should fetch the result
    by making an HTTP request to the server. Here is the code for the `SearchResultComponent`.
    Place it in the `index.js` file, above the `AppComponent` code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create a file named `searchResult.html` and place it in `componentTemplates`.
    Place this code in the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is how the code works:'
  prefs: []
  type: TYPE_NORMAL
- en: Here, we are providing the `ng,http.HTTP_PROVIDERS` provider, which is used
    when using the HTTP client service provided by Angular 2\. Using the HTTP client
    service, we can make HTTP requests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the constructor property, we are injecting the HTTP service along with the
    `ng.router.RouteParams` service, which is used to obtain the query parameters
    of the current URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `ngOnInit` method, you can see how to make a `GET` request using the
    HTTP service and also how to get the query parameters using the `ng.router.RouteParams`
    service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the template of the component, we are displaying the fetched search result
    using the `ngFor` directive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can learn about the HTTP service provided by Angular 2 at [https://angular.io/docs/ts/latest/guide/server-communication.html](https://angular.io/docs/ts/latest/guide/server-communication.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s create `NotFoundComponent`. Here is the code for that:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Place this code in the `index.js` file, above the `AppComponent` code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create a file named `notFound.html` and place it in the `componentTemplates`
    directory. Place this code inside the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The code is self-explanatory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Testing the template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To test the template, we will follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `initial` directory, run the `node app.js` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, in a browser, open the `http://localhost:8080/` URL. You should see this
    output:![Testing the template](img/B05154_13_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, type something in the search box and click on the **Search** button. You
    should then see this output:![Testing the template](img/B05154_13_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, enter an invalid path in the address bar. You should be able to see this
    output:![Testing the template](img/B05154_13_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Routing life cycle methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a path matches a component, Angular 2 activates the component, and when
    the path changes, Angular 2 deactivates it. When we say that a component has been
    activated, it means that Angular 2 has created an instance of the component, that
    is, called the constructor method of the component, whereas when we say a component
    has been deactivated, it means the component has been removed from the DOM and
    instance is deleted.
  prefs: []
  type: TYPE_NORMAL
- en: The methods of a component that are called while activating or deactivating
    it are called routing lifecycle methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the list of routing lifecycle methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CanActivate`: This hook is invoked before activating the component. It should
    return a boolean value or a promise indicating whether to activate the component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`routerOnActivate`: This method is invoked after the component has been activated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`routerCanReuse`: This method is invoked to find out whether to reuse the previous
    instance of the component when the next URL change is the same URL again. It should
    return a boolean value or a promise indicating whether to reuse. It''s invoked
    only if an instance had been created earlier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`routerOnReuse`: This method is invoked if the component is being reused. It''s
    called after `routerCanReuse`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`routerCanDeactivate`: This method is invoked before deactivating the component.
    It should return a boolean value or a promise indicating whether to deactivate
    the component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`routerOnDeactivate`: This method is invoked after the component has been deactivated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s look at a code example of the routing lifecycle methods. Replace the
    `HomeComponent` code with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, visit the home page. There, click on the home button again. Now, type
    something in the search box and click on the **Search** button. This is the console
    output you will see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Production mode versus development mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now, we have been running Angular 2 in development mode. The difference
    between development and production mode is that in development mode, Angular 2
    starts change detection immediately after the first run and logs a **value has
    changed after it was checked** error if anything changes between the first and
    second run. This helps locate bugs.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable production mode, place this code above the `ng.platform.browser.bootstrap()`
    method call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned routing in Angular 2 by building a basic search
    engine template. Along with learning routing in depth, we also learned about the
    Angular 2 HTTP client service as well as how to switch to production mode in Angular
    2.
  prefs: []
  type: TYPE_NORMAL
- en: You should now be comfortable with building the frontend of any kind of web
    application using Angular 2.
  prefs: []
  type: TYPE_NORMAL
