["```js\nvar positionX = 10;\nfunction moveRight(numSlots) {\n    positionX += numSlots;\n}\nmoveRight(5);\n```", "```js\nvar positionX = 10;\nfunction moveRight(numSlots) {\n    return positionX + numSlots;\n}\npositionX = moveRight(5);\n```", "```js\nvar positionX = 10;\nfunction moveRight(x, numSlots) {\n    return x + numSlots;\n}\npositionX = moveRight(positionX, 5);\n```", "```js\n    const string1 = \"Hello, World!\";\n    const string2 = string1.substring(7, 12);\n    ```", "```js\n    console.log(`string1: ${string1}`);\n    console.log(`string2: ${string2}`);\n    ```", "```js\n    const number1 = 500;\n    const number2 = number1 / 2;\n    ```", "```js\n    console.log(`number1: ${number1}`);\n    console.log(`number2: ${number2}`);\n    ```", "```js\n    const array1 = ['one', 'two', 'three'];\n    ```", "```js\n    const array2 = array1;\n    ```", "```js\n    array2.push('four');\n    ```", "```js\n    console.log(`array1: ${array1}`);\n    console.log(`array2: ${array2}`);\n    ```", "```js\n    const actor1 = {\n        name: 'Sheldon',\n        show: 'BB Theory'\n    };\n    ```", "```js\n    const actor2 = actor1;\n    actor2.name = 'Leonard';\n    ```", "```js\n    console.log(\"actor1:\", actor1);\n    console.log(\"actor2:\", actor2);\n    ```", "```js\nconst array1 = ['one', 'two', 'three'];\nconst array2 = array1.concat('four');\nconsole.log(`array1: ${array1}`);   // output: array1: one,two,three\nconsole.log(`array2: ${array2}`);   // output: array2: one,two,three,four\n```", "```js\narray1: one,two,three\nand\narray2: one,two,three,four\n```", "```js\n// Arrays\nconst array1 = ['one', 'two', 'three'];\nconst array2 = [...array1];\narray2[0] = 'four';\nconsole.log(`array1: ${array1}`);   // output: array1: one,two,three\nconsole.log(`array2: ${array2}`);   // output: array2: four,two,three\n// Objects\nconst actor1 = {\n    name: 'Sheldon',\n    show: 'BB Theory'\n};\n\nconst actor2 = {...actor1};\nactor2.name = 'Leonard';\n//the output for variable actor1 will be displayed.       \nconsole.log(\"actor1:\", actor1);   \n```", "```js\n    // output: actor1: { name: \"Sheldon\", show: \"BB Theory\" }\n//the output for variable actor2 will be displayed.\nconsole.log(\"actor2:\", actor2);\n```", "```js\n    // output: actor2: { name: \"Leonard\", show: \"BB Theory\" }\n```", "```js\nlet object2 = JSON.parse(JSON.stringify(object1));\n```", "```js\nconst runners = [\n    {name: \"Courtney\", gender: \"F\", age: 21, timeSeconds: 1505},\n    {name: \"Lelisa\",   gender: \"M\", age: 24, timeSeconds: 1370},\n    {name: \"Anthony\",  gender: \"M\", age: 32, timeSeconds: 1538},\n    {name: \"Halina\",   gender: \"F\", age: 33, timeSeconds: 1576},\n    {name: \"Nilani \",  gender: \"F\", age: 27, timeSeconds: 1601},\n    {name: \"Laferne\",  gender: \"F\", age: 35, timeSeconds: 1572},\n    {name: \"Jerome\",   gender: \"M\", age: 22, timeSeconds: 1384},\n    {name: \"Yipeng\",   gender: \"M\", age: 29, timeSeconds: 1347},\n    {name: \"Jyothi\",   gender: \"F\", age: 39, timeSeconds: 1462},\n    {name: \"Chetan\",   gender: \"M\", age: 36, timeSeconds: 1597},\n    {name: \"Giuseppe\", gender: \"M\", age: 38, timeSeconds: 1570},\n    {name: \"Oksana\",   gender: \"F\", age: 23, timeSeconds: 1617}\n];\n```", "```js\n   const minsSecs = timeSeconds =>\n       Math.floor(timeSeconds / 60) + \":\" +\n       Math.round(timeSeconds % 60).toString().padStart(2, '0');\n```", "```js\n        const printRunner = runner =>\n            [`Name: ${runner.name}`,\n             `gender: ${runner.gender}`,\n             `age: ${runner.age}`,\n             `time: ${minsSecs(runner.timeSeconds)}`\n            ].join('\\t');\n```", "```js\n        const printRunners = (runners, listType) =>\n            `List of ${listType} (total ${runners.length}):\\n` +\n                runners.map(printRunner).join('\\n');\n```", "```js\n    console.log(printRunners(runners, \"all runners\"));\n```", "```js\nvar newArray = array.filter(function(item) {\n  return condition;\n});\n```", "```js\nfunction femaleFilter(runner) {\n    if (runner.gender === \"F\") {\n        return true;\n    }\n    return false;\n}\n```", "```js\nconst getFemaleRunners = runners => runners.filter(femaleFilter);\n```", "```js\nconsole.log(\n    printRunners(getFemaleRunners(runners), \"female runners\"));\n// output:\n// → List of female runners (total 6):\n// → Name: Courtney  gender: F     age: 21   time: 25:05\n// → Name: Halina    gender: F     age: 33   time: 26:16\n// → Name: Nilani    gender: F     age: 27   time: 26:41\n// → Name: Laferne   gender: F     age: 35   time: 26:12\n// → Name: Jyothi    gender: F     age: 38   time: 24:22\n// → Name: Oksana    gender: F     age: 23   time: 26:57\n```", "```js\nconst getFemaleRunners = runners => runners.filter(\n    function(runner) {\n        if (runner.gender === \"F\") {\n            return true;\n        }\n        return false;\n    }\n);\n```", "```js\nconst getFemaleRunners = runners => runners.filter(\n    function(runner) {\n        return runner.gender === \"F\";\n    }\n);\n```", "```js\nconst getFemaleRunners = runners => runners.filter(runner => {\n    return runner.gender === \"F\";\n});\n```", "```js\nconst getFemaleRunners = runners =>\n    runners.filter(runner => runner.gender === \"F\");\n```", "```js\nconst femaleFilter = runner => runner.gender === \"F\";\nconst getFemaleRunners = runners => runners.filter(femaleFilter);\n```", "```js\nvar femaleRunners = [];\nfor (var i = 0; i < runners.length; i++) {\n    if (runners[i].gender == \"F\") {\n        femaleRunners.push(runners[i]);\n    }\n}\n```", "```js\nconst femaleRunners = runners.filter(runner => runner.gender === \"F\");\n```", "```js\nconst getPaces = runners => runners.map(runner => runner.timeSeconds / 3.1);\nconst paces = getPaces(runners);\n```", "```js\npaces.forEach(pace => console.log(minsSecs(pace)));\n// output:\n// → 8:05\n// → 7:22\n// → 8:16\n// → 8:27\n// ...\n```", "```js\n    const runners = [\n        {name: \"Courtney\", gender: \"F\", age: 21, timeSeconds: 1505},\n        {name: \"Lelisa\",   gender: \"M\", age: 24, timeSeconds: 1370},\n        {name: \"Anthony\",  gender: \"M\", age: 32, timeSeconds: 1538},\n        {name: \"Halina\",   gender: \"F\", age: 33, timeSeconds: 1576},\n        {name: \"Nilani \",  gender: \"F\", age: 27, timeSeconds: 1601},\n        {name: \"Laferne\",  gender: \"F\", age: 35, timeSeconds: 1572},\n        {name: \"Jerome\",   gender: \"M\", age: 22, timeSeconds: 1384},\n        {name: \"Yipeng\",   gender: \"M\", age: 29, timeSeconds: 1347},\n        {name: \"Jyothi\",   gender: \"F\", age: 39, timeSeconds: 1462},\n        {name: \"Chetan\",   gender: \"M\", age: 36, timeSeconds: 1597},\n        {name: \"Giuseppe\", gender: \"M\", age: 38, timeSeconds: 1570},\n        {name: \"Oksana\",   gender: \"F\", age: 23, timeSeconds: 1617}\n    ];\n    ```", "```js\n    const minsSecs = timeSeconds =>\n                Math.floor(timeSeconds / 60) + \":\" + \n                Math.round(timeSeconds % 60).toString().padStart(2, '0');\n    ```", "```js\n    const getPacesWithNames = runners => runners.map(runner =>\n        ({name: runner.name, pace: runner.timeSeconds / 3.1}));\n    const pacesWithNames = getPacesWithNames(runners);\n    ```", "```js\n    // print each value\n    pacesWithNames.forEach(paceObj =>\n        console.log(`name: ${paceObj.name}\\tpace: ${minsSecs(paceObj.pace)}`));\n    ```", "```js\n    const addPacesToRunners = runners => runners.map(runner =>\n        ({...runner, pace: runner.timeSeconds / 3.1}));\n    ```", "```js\n    const pacesWithAllFields = addPacesToRunners(runners);\n    pacesWithAllFields.forEach(paceObj => console.log(paceObj));\n    ```", "```js\nconst sum = [2, 4, 6, 8, 10].reduce((total, current) => total + current, 0);\nconsole.log(sum);\n```", "```js\n// output:\n// → 10\n```", "```js\nconst getPaces = runners => runners.map(runner => runner.timeSeconds / 3.1);\nconst paces = getPaces(runners);\n```", "```js\nconst getAvgPace = paces => paces.reduce(\n    (total, currentPace) => total + currentPace, 0) / paces.length;\nconsole.log(minsSecs(getAvgPace(paces)));\n```", "```js\n// output:\n// → 8:08\n```", "```js\n    const addPacesToRunners = runners => runners.map(runner =>\n        ({...runner, pace: runner.timeSeconds / 3.1}));\n    const pacesWithAllFields = addPacesToRunners(runners);\n    ```", "```js\n    const groupSumPaceByGender = runners => runners.reduce((groups, runner) => {\n        const gender = runner.gender;\n        groups[gender] = groups[gender] || {pace: 0, count: 0};\n        groups[gender].pace += runner.pace;\n        groups[gender].count += 1;\n        return groups;\n    }, {});\n    const sumPacesByGender = groupSumPaceByGender(pacesWithAllFields);\n    ```", "```js\n    console.log(JSON.stringify(sumPacesByGender,null,4));\n    ```", "```js\n    // output:\n    // → { \n    // →     \"F\": { \n    // →         \"pace\": 3010.645161290322, \n    // →         \"count\": 6 \n    // →     },\n    // →     \"M\": { \n    // →         \"pace\": 2840.6451612903224, \n    // →         \"count\": 6 \n    // →     }\n    // → }\n    ```", "```js\n    const calcAvgPaceByGender = sumPacesByGender =>\n        Object.keys(sumPacesByGender).map(gender => {\n            const group = sumPacesByGender[gender];\n            return {gender: gender, avgPace: group.pace / group.count};\n        }\n    );\n    const avgPaceByGender = calcAvgPaceByGender(sumPacesByGender);\n    ```", "```js\n    console.log(\"Average pace by gender:\");\n    avgPaceByGender.forEach(entry => console.log(\n        `gender: ${entry.gender}  average pace: ${minsSecs(entry.avgPace)}`));\n    ```", "```js\nconst result1 = addPacesToRunners(runners);\nconst result2 = groupSumPaceByGender(result1);\nconst avg = calcAvgPaceByGender(result2);\n```", "```js\nconst avg =\n    calcAvgPaceByGender(groupSumPaceByGender(addPacesToRunners(runners)));\n```", "```js\nconst avgWithComposition =\n    compose(calcAvgPaceByGender, groupSumPaceByGender, addPacesToRunners);\n```", "```js\nconst avgResult = avgWithComposition(runners);\navgResult.forEach(entry => console.log(\n    `gender: ${entry.gender}  average pace: ${minsSecs(entry.avgPace)}`));\n```", "```js\n// output:\n// → gender: F average pace: 8:22\n// → gender: M average pace: 7:53\n```", "```js\nconst avgWithPipe = \n    pipe(addPacesToRunners, groupSumPaceByGender, calcAvgPaceByGender);\nconst resultPipe = avgWithPipe(runners);\nresultPipe.forEach(entry => console.log(\n    `gender: ${entry.gender}  average pace: ${minsSecs(entry.avgPace)}`));\n// output:\n// → gender: F average pace: 8:22\n// → gender: M average pace: 7:53\n```", "```js\nfunction pipe(...fns) {\n    return input => fns.reduce((prev, fn) => fn(prev), input);\n}\n```", "```js\nconst pipe = (...fns) => input => fns.reduce((prev, fn) => fn(prev), input);\n```", "```js\nconst compose = (...fns) => input =>\n    fns.reduceRight((prev, fn) => fn(prev), input);\n```", "```js\nfunction sum(a, b) {\n    return a + b;\n}\n```", "```js\nconst sum = a => b => a + b;\n```", "```js\nconst sum = a => function(b) {\n    return a + b;\n};\n```", "```js\nlet result = sum(3)(5);    // 8\n```", "```js\nconst incrementByOne = sum(1);\nconst addThree = sum(3);\nlet result1 = incrementByOne(3); // result1 = 4, equivalent to calling sum(1)(3)\nlet result2 = addThree(5);       // result2 = 8, equivalent to calling sum(3)(5)\n```", "```js\n    const filter = fx => arr => arr.filter(fx);\n    ```", "```js\n    const map = fx => arr => arr.map(fx);\n    ```", "```js\n    const max = arr => Math.max(...arr);\n    ```", "```js\n    const compose = (...fns) => input => \n        fns.reduceRight((prev, fn) => fn(prev), input);\n    ```", "```js\n    const oldestFemaleRunner1 = compose(\n        max,\n        map(runner => runner.age),\n        filter(runner => runner.gender === \"F\")\n    );\n    ```", "```js\n    const result1 = oldestFemaleRunner1(runners);\n    ```", "```js\n    console.log(\"Result of oldestFemaleRunner1 is \", result1);\n    ```", "```js\n    // → output: Result of oldestFemaleRunner1 is 39\n    ```", "```js\n    const femaleFilter = filter(runner => runner.gender === \"F\");\n    ```", "```js\n    const oldestFemaleRunner2 = compose(\n        max,\n        map(runner => runner.age),\n        femaleFilter\n    );\n    const result2 = oldestFemaleRunner2(runners);\n    console.log(\"Result of oldestFemaleRunner2 is \", result2);\n    ```", "```js\n    // → output: Result of oldestFemaleRunner2 is 39\n    ```", "```js\n    const pipe = (...fns) => input => fns.reduce((prev, fn) => fn(prev), input);\n    ```", "```js\n    const oldestFemaleRunner3 = pipe(\n        femaleFilter,\n        map(runner => runner.age),\n        max\n    );\n    const result3 = oldestFemaleRunner3(runners);\n    console.log(\"Result of oldestFemaleRunner3 is \", result3);\n    ```", "```js\n    // → output: Result of oldestFemaleRunner3 is 39\n    ```", "```js\nreverse(\"bcd\") + \"a\"\n```", "```js\nfunction reverse(str) {\n    if (str.length == 1) return str;\n    return reverse(str.slice(1)) + str[0];\n}\nreverse(\"abcd\");   // => output: \"dcba\"\n```", "```js\nreverse(\"abcd\")  =>  reverse(\"bcd\") + \"a\"\nreverse(\"bcd\")   =>  reverse(\"cd\") + \"b\"\nreverse(\"cd\")    =>  reverse(\"d\") + \"c\"\nreverse(\"d\")     =>  \"d\"\n```", "```js\n    const suits =\n        () => [\n            { suit: \"hearts\", symbol: '&#9829;' },    // symbol: '♥'\n            { suit: 'diamonds', symbol: '&#9830;' },  // symbol: '♦'\n            { suit: 'spades', symbol: '&#9824;' },    // symbol: '♠'\n            { suit: 'clubs', symbol: '&#9827;' }      // symbol: '♣'\n        ];\n    const rankNames =\n        () => ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q','K'];\n    ```", "```js\n    const ranks =\n        rankNames => rankNames.map(rankName => ({ rank: rankName }));\n    ```", "```js\n    const createOrderedDeck =\n        (suits, ranks) => suits.reduce(\n            (deck, suit) => {\n                const cards = ranks.map(rank => ({ ...rank, ...suit }));\n                return deck.concat(cards);\n            }, []);\n    ```", "```js\n    const orderedDeck = createOrderedDeck(suits(), ranks(rankNames()));\n    ```", "```js\n    const compose =\n        (...fns) => input => fns.reduceRight((prev, fn) => fn(prev), input);\n    const pipe =\n        (...fns) => input => fns.reduce((prev, fn) => fn(prev), input);\n    const map = fx => arr => arr.map(fx);\n    ```", "```js\n    const randomizer =\n        Math.random;\n    const addRandom =\n        randomizer => deck => deck.map(card => ({\n            random: randomizer(),\n            card\n        }));\n    ```", "```js\n    const sortByRandom =\n        deck => [...deck].sort((a, b) => a.random - b.random);\n    ```", "```js\n    const shuffle =\n        (deck, randomizer) => {\n            const doShuffle = pipe(\n                addRandom(randomizer),\n                sortByRandom,\n                map(card => card.card)\n            );\n            return doShuffle(deck);\n        };\n    ```", "```js\nconst ranks =\n    rankNames => rankNames.map(\n        (rank, index) => ({ rank, value: Math.min(10, index + 1) }));\n```", "```js\nconst createState = (dom) => {\n    let _state;\n    const getState = () => [..._state];\n    const setState =\n        (hand, gameDeck, stay = false) => {\n            _state = [hand, gameDeck];\n            updateCardDisplay(dom, hand);\n            updateStatusDisplay(dom, hand, stay);\n        };\n    return { getState, setState };\n}\n```", "```js\nstartGame(createState(dom));\n```", "```js\nconst startGame = (state) => {\n    byId(\"playBtn\").addEventListener(\"click\", playHandler(randomizer, state));\n    byId(\"hitBtn\").addEventListener(\"click\", hitHandler(state));\n    byId(\"stayBtn\").addEventListener(\"click\", stayHandler(state));\n}\n```", "```js\nconst playHandler = (randomizer, { getState, setState }) => () => {\n    const orderedDeck = createOrderedDeck(suits(), ranks(rankNames()));\n    let gameDeck = shuffle(orderedDeck, randomizer);\n    [hand, gameDeck] = draw(gameDeck, 2);\n    setState(hand, gameDeck);\n};\n```", "```js\nconst hitHandler = ({ getState, setState }) => () => {\n    [hand, gameDeck] = getState();\n    [card, gameDeck] = draw(gameDeck, 1);\n    setState(hand.concat(card), gameDeck);\n};\n```", "```js\nconst stayHandler = ({ getState, setState }) => () => {\n    [hand, gameDeck] = getState();\n    setState(hand, gameDeck, true);\n};\n```", "```js\nconst updateCardDisplay =\n    ({ updateHTML }, hand) => {\n        const cardHtml = hand.map((card, index) =>\n            `<div class=\"card ${card.suit}\"\n                style=\"top: -${index * 120}px;\n                       left: ${index * 100}px;\">\n                <div class=\"top rank\">${card.rank}</div>\n                <div class=\"bigsuit\">${card.symbol}</div>\n                <div class=\"bottom rank\">${card.rank}</div>\n             </div>`);\n        updateHTML(\"cards\", cardHtml.join(\"\"));\n    };\n```", "```js\nconst updateStatusDisplay =\n    ({ updateStyle, updateHTML }, hand, stay) => {\n        const total = sumCards(hand);\n        updateHTML(\"totalSpan\", total);\n        const bust = isBust(total);\n        const gameover = isGameOver(bust, stay);\n        showOrHide(updateStyle, \"playBtn\", !gameover);\n        showOrHide(updateStyle, \"hitBtn\", gameover);\n        showOrHide(updateStyle, \"stayBtn\", gameover);\n        let statusMsg = gameover ?\n            \"Game over.  Press New Game button to start again.\" :\n            \"Select Hit or Stay\";\n        statusMsg = bust ? \"You went bust!!! \" + statusMsg : statusMsg;\n        updateHTML(\"statusMsg\", statusMsg);\n    };\n```"]