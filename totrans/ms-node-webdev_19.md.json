["```js\nnpm start \n```", "```js\nexport interface  Product {\n    id?: number;\n    name: string;\n    description: string;\n    price: number;\n\n    category?: Category;\n    supplier?: Supplier;\n}\nexport interface Category {\n    id?: number;\n    name: string;\n    products?: Product[];\n}\nexport interface Supplier {\n    id?: number;\n    name: string;\n\n    products?: Product[];\n}\n**export interface ProductQueryParameters {**\n **pageSize?: number;**\n **page?: number;**\n**}**\n**export interface ProductQueryResult {**\n **products: Product[];**\n **totalCount: number;**\n**}** \n```", "```js\n**import** **{ Category, Product, Supplier, ProductQueryParameters,**\n **ProductQueryResult } from \"./catalog_models\";**\nexport interface CatalogRepository {\n    **getProducts(params?: ProductQueryParameters): Promise<ProductQueryResult>;**\n    storeProduct(p: Product): Promise<Product>;\n    getCategories() : Promise<Category[]>;\n    storeCategory(c: Category): Promise<Category>;\n    getSuppliers(): Promise<Supplier[]>;\n    storeSupplier(s: Supplier): Promise<Supplier>;\n} \n```", "```js\nimport { CategoryModel, ProductModel, SupplierModel } from \"./models\";\nimport { BaseRepo, Constructor } from \"./core\"\n**import { ProductQueryParameters } from \"../catalog_models\";**\nexport function AddQueries<TBase extends Constructor<BaseRepo>>(Base: TBase) {\n    return class extends Base {\n\n       ** async** **getProducts(params?: ProductQueryParameters) {**\n **const opts: any = {};**\n **if (params?.page && params.pageSize) {**\n **opts.limit = params?.pageSize,**\n **opts.offset** **= (params.page -1) * params.pageSize** \n **}**\n **const result = await ProductModel.findAndCountAll({** \n                include: [\n                    {model: SupplierModel, as: \"supplier\" },\n                    {model: CategoryModel, as: \"category\"}],\n                raw: true, nest: true,\n                ..**.opts**\n **});** \n **return { products: result.rows, totalCount: result.count };**\n        }\n        getCategories() {\n            return CategoryModel.findAll({raw: true, nest: true})\n        }\n\n        getSuppliers() {\n            return SupplierModel.findAll({raw: true, nest: true});\n        }       \n    }\n} \n```", "```js\nimport { Express } from \"express\";\nimport { catalog_repository } from \"../data\";\nexport const createCatalogRoutes = (app: Express) => {\n    app.get(\"/\", async (req, resp) => {\n        const page = Number.parseInt(req.query.page?.toString() ?? \"1\");\n       ** const pageSize =Number.parseInt(req.query.pageSize?.toString() ?? \"3\");**\n **const res = await catalog_repository.****getProducts({ page, pageSize});**\n **resp.render(\"index\", { ...res, page, pageSize,**\n **pageCount: Math.ceil(res.totalCount / (pageSize ?? 1))});**\n    });\n} \n```", "```js\n<div class=\"col\">\n    {{#pageButtons }}\n        {{#if selected}}\n            <button class=\"btn btn-sm btn-light active mr-1 p-2\">\n                {{index}}\n            </button>\n        {{else}}\n        <a class=\"btn btn-sm btn-light mr-1 p-2\"\n            href=\"{{navigationUrl page=index }}\">{{index}}</a>\n        {{/if}}\n    {{/pageButtons}}\n</div> \n```", "```js\n...\n{{#pageButtons }}\n   // ...template content omitted for brevity...\n{{/pageButtons}}\n... \n```", "```js\nimport { HelperOptions }  from \"handlebars\";\nimport { stringify } from \"querystring\";\nimport { escape } from \"querystring\";\nconst getData = (options:HelperOptions) => {\n     return {...options.data.root, ...options.hash}\n};\nexport const navigationUrl = (options: HelperOptions) => {\n    const { page, pageSize } = getData(options);\n    return \"/?\" + stringify({ page, pageSize });\n}\nexport const escapeUrl = (url: string) => escape(url);\nexport const pageButtons = (options: HelperOptions) => {\n    const { page, pageCount } = getData(options);\n    let output = \"\";\n    for (let i = 1; i <= pageCount; i++) {\n        output += options.fn({\n            page, pageCount, index: i, selected: i === page\n        });\n    }\n    return output;\n} \n```", "```js\n...\nhref=\"{{navigationUrl page=index }}\">{{index}}</a>\n... \n```", "```js\n...\nreturn \"/?\" + **stringify**({ page, pageSize });\n... \n```", "```js\nimport { Express } from \"express\";\nimport { getConfig } from \"../config\";\nimport { engine } from \"express-handlebars\";\nimport * as env_helpers from \"./env\";\n**import** *** as catalog_helpers from \"./catalog_helpers\";**\nconst location = getConfig(\"templates:location\");\nconst config = getConfig(\"templates:config\");\nexport const createTemplates = (app: Express) => {\n    app.set(\"views\", location);\n    app.engine(\"handlebars\", engine({\n        ...**config, helpers****: {...env_helpers, ...catalog_helpers}**\n    }));\n    app.set(\"view engine\", \"handlebars\");\n} \n```", "```js\n<table class=\"table table-sm table-striped\">\n    <thead>\n        <tr>\n            <th>ID</th><th>Name</th><th>Description</th>\n            <th>Price</th><th>Category</th><th>Supplier</th>\n        </tr>\n    </thead>\n    <tbody>\n        {{#each products }}\n            <tr>\n                <td>{{id}}</td><td>{{name}}</td>\n                <td>{{description}}</td><td>{{price}}</td>\n                <td>{{category.name}}</td><td>{{supplier.name}}</td>\n            </tr>\n        {{/each}}\n    </tbody>\n</table>\n**{{> page_controls }}** \n```", "```js\n**<div** **class=\"container-fluid\">**\n **<div class=\"row\">**\n        <div class=\"col\">\n            {{#pageButtons }}\n                {{#if selected}}\n                    <button class=\"btn btn-sm btn-light active mr-1 p-2\">\n                        {{index}}\n                    </button>\n                {{else}}\n                <a class=\"btn btn-sm btn-light mr-1 p-2\"\n                    href=\"{{navigationUrl page=index }}\">{{index}}</a>\n                {{/if}}\n            {{/pageButtons}}\n        </div>\n        <div class=\"col-auto text-end\">        \n        **    <form id=\"pageSizeForm\" method=\"get\">**\n **<select class=\"form-select\"** **name=\"pageSize\">**\n **{{#pageSizeOptions }}**\n **<option value=\"{{size}}\" {{selected}}>**\n **{{size}} per page**\n **</option>**\n **{{/pageSizeOptions }}**\n**</select>**\n **</form>** \n **</div>**\n **<div class=\"col-auto\">**\n**<button class=\"btn btn-light mr-2\" type=\"submit\"**\n **form=\"pageSizeForm\">Go</button>**\n**</div>**\n **</div>**\n**</div>** \n```", "```js\nimport { HelperOptions }  from \"handlebars\";\nimport { stringify } from \"querystring\";\nimport { escape } from \"querystring\";\n// ...other helpers omitted for brevity...\n**export const pageSizeOptions = (options: HelperOptions) => {**\n **const { pageSize } = getData(options);**\n **let output = \"\"****;**\n **[3, 6, 9].forEach(size => {**\n **output += options.fn({ size,**\n **selected: pageSize === size ? \"selected\": \"\"})**\n **})**\n**return output;**\n**}** \n```", "```js\n...\nexport interface ProductQueryParameters {\n    pageSize?: number;\n    page?: number;\n  **  category?: number;**\n **searchTerm?: string;**\n}\nexport interface ProductQueryResult {\n    products: Product[];\n    totalCount: number;\n  **  categories: Category[];**\n}\n... \n```", "```js\nimport { CategoryModel, ProductModel, SupplierModel } from \"./models\";\nimport { BaseRepo, Constructor } from \"./core\"\nimport { ProductQueryParameters } from \"../catalog_models\";\n**import { Op } from \"sequelize\";**\nexport function AddQueries<TBase extends Constructor<BaseRepo>>(Base: TBase) {\n    return class extends Base {\n\n        async getProducts(params?: ProductQueryParameters) {\n            const opts: any = {};\n            if (params?.page && params.pageSize) {\n                opts.limit = params?.pageSize,\n                opts.offset = (params.page -1) * params.pageSize               \n            }\n            **if(params?.searchTerm) {**\n **const** **searchOp = { [Op.like]: \"%\" + params.searchTerm + \"%\"};**\n **opts.where = {**\n **[Op.or]: { name: searchOp, description****: searchOp }**\n **}**\n **}**\n **if (params?.category) {**\n **opts.where = {**\n **...opts.where,  categoryId: params.category**\n **}**\n **}**\n            const result = await ProductModel.findAndCountAll({               \n                include: [\n                    {model: SupplierModel, as: \"supplier\" },\n                    {model: CategoryModel, as: \"category\"}],\n                raw: true, nest: true,\n                ...opts\n            });              \n          **  const categories = await this.getCategories();**\n **return { products: result.rows****, totalCount: result.count, categories };**\n        }\n        getCategories() {\n            return CategoryModel.findAll({raw: true, nest: true})\n        }\n\n        getSuppliers() {\n            return SupplierModel.findAll({raw: true, nest: true});\n        }       \n    }\n} \n```", "```js\nimport { Express } from \"express\";\nimport { catalog_repository } from \"../data\";\nexport const createCatalogRoutes = (app: Express) => {\n    app.get(\"/\", async (req, resp) => {\n        const page = Number.parseInt(req.query.page?.toString() ?? \"1\");\n        const pageSize =Number.parseInt(req.query.pageSize?.toString() ?? \"3\")\n       ** const searchTerm = req.query.searchTerm?.toString();**\n**const category = Number.parseInt(req.query.category?.toString() ?? \"\")**\n **const res = await catalog_repository.getProducts({ page, pageSize,**\n **searchTerm, category});**\n **resp.****render(\"index\", { ...res, page, pageSize,**\n **pageCount: Math.ceil(res.totalCount / (pageSize ?? 1)),**\n **searchTerm, category**\n **});**\n    });\n} \n```", "```js\n<div class=\"d-grid gap-2 py-2\">\n    <a class=\"btn btn-outline-secondary\"\n        href=\"{{navigationUrl category=\"\" page=1 searchTerm=\"\" }}\">\n            Home\n    </a>\n    {{#categoryButtons  }}\n        {{#if selected }}\n            <a class=\"btn btn-secondary\">{{ name }}</a>\n        {{else }}\n            <a class=\"btn btn-outline-secondary\"\n                href=\"{{navigationUrl category=id page=1}}\">\n                {{ name }}\n            </a>\n        {{/if }}\n    {{/categoryButtons }}\n</div> \n```", "```js\n...\n<a class=\"btn btn-outline-secondary\"\n    href=\"{{navigationUrl category=\"\" page=1 searchTerm=\"\" }}\">\n... \n```", "```js\n...\n<a class=\"btn btn-outline-secondary\"\n    href=\"{{navigationUrl category=id page=1}}\">\n... \n```", "```js\nimport { HelperOptions }  from \"handlebars\";\nimport { stringify } from \"querystring\";\nimport { escape } from \"querystring\";\nconst getData = (options:HelperOptions) => {\n     return {...options.data.root, ...options.hash}\n};\nexport const navigationUrl = (options: HelperOptions) => {\n    **const { page, pageSize, category, searchTerm } = getData(options);**\n **return \"/?\" + stringify({ page, pageSize, category, searchTerm  });**\n}\nexport const escapeUrl = (url: string) => escape(url);\nexport const pageButtons = (options: HelperOptions) => {\n    const { page, pageCount } = getData(options);\n    let output = \"\";\n    for (let i = 1; i <= pageCount; i++) {\n        output += options.fn({\n            page, pageCount, index: i, selected: i === page\n        });\n    }\n    return output;\n}\nexport const pageSizeOptions = (options: HelperOptions) => {\n    const { pageSize } = getData(options);\n    let output = \"\";\n    [3, 6, 9].forEach(size => {\n        output += options.fn({ size,\n            selected: pageSize === size ? \"selected\": \"\"})\n    })\n    return output;\n}\n**export const categoryButtons = (options: HelperOptions) => {**\n **const { category, categories } = getData****(options);**\n **let output = \"\";**\n **for (let i = 0; i < categories.length; i++) {**\n **output += options.fn({**\n **id: categories[i].id****,**\n **name: categories[i].name,**\n **selected: category === categories[i].id**\n **})**\n **}**\n **return output;**\n} \n```", "```js\n<form class=\"row row-cols my-2\" method=\"get\">\n    <div class=\"col\">\n        <input type=\"hidden\" name=\"pageSize\" value=\"{{pageSize}}\">\n        <input type=\"hidden\" name=\"category\" value=\"{{category}}\">\n        <input class=\"form-control\" name=\"searchTerm\"\n            placeholder=\"Product Search\" value=\"{{searchTerm}}\">\n    </div>\n    <div class=\"col-auto\">\n        <button class=\"btn btn-small btn-secondary\" type=\"submit\">\n            Search\n        </button>\n    </div>\n</form> \n```", "```js\n**<div** **class=\"container-fluid\">**\n **<div class=\"row\">**\n **<div class=\"col-2\"****>**\n **{{> category_controls }}**\n **</div>**\n **<div class=\"col\">**\n **{{> search_controls }}**\n            <table class=\"table table-sm table-striped\">\n                <thead>\n                    <tr>\n                        <th>ID</th><th>Name</th><th>Description</th>\n                        <th>Price</th><th>Category</th><th>Supplier</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {{#each products }}\n                        <tr>\n                            <td>{{id}}</td><td>{{name}}</td>\n                            <td>{{description}}</td><td>{{price}}</td>\n                            <td>{{category.name}}</td>\n                            <td>{{supplier.name}}</td>\n                        </tr>\n                    {{/each}}\n                </tbody>\n            </table>\n            {{> page_controls }}\n        </div>\n    </div>\n</div> \n```", "```js\n<div class=\"card card-outline-primary m-1 p-1\">\n    <div class=\"bg-faded p-1\">\n        <h4>\n            {{ highlight name }}\n            <span class=\"badge rounded-pill bg-primary text-white\"\n                   style=\"float:right\">\n                <small>{{ currency price }}</small>\n            </span>\n        </h4>\n    </div>\n    <div class=\"card-text p-1\">{{ highlight description }}</div>\n</div> \n```", "```js\n**import Handlebars, { HelperOptions }  from \"handlebars\";**\nimport { stringify } from \"querystring\";\nimport { escape } from \"querystring\";\n// ...other helpers omitted for brevity...\n**export const highlight = (value: string, options: HelperOptions****) => {**\n **const { searchTerm } = getData(options);**\n **if (searchTerm && searchTerm !== \"\") {**\n **const regexp = new RegExp(searchTerm, \"ig\");**\n **const mod = value.replaceAll****(regexp, \"<strong>$&</strong>\");**\n **return new Handlebars.SafeString(mod);** \n **}**\n **return value;**\n**}**\n**const formatter = new Intl.****NumberFormat(\"en-us\", {**\n **style: \"currency\", currency: \"USD\"**\n**})**\n**export const currency = (value: number****) => {**\n **return formatter.format(value);**\n**}** \n```", "```js\n<div class=\"container-fluid\">\n    <div class=\"row\">\n        <div class=\"col-2\">\n            {{> category_controls }}\n        </div>\n        <div class=\"col\">\n            {{> search_controls }}   \n            **{{#unless products}}<h4>****No products</h4>{{/unless}}**\n **{{#each products }}**\n **{{> product this }}**\n **{{/each}}**\n            {{> page_controls }}\n        </div>\n    </div>\n</div> \n```", "```js\nnpm install dotenv@16.4.4 \n```", "```js\n`dotenv` \n```", "```js\n# secret used to sign session cookies\nCOOKIE_SECRET=\"sportsstoresecret\" \n```", "```js\nimport { readFileSync } from \"fs\";\nimport { getEnvironment, Env } from \"./environment\";\nimport { merge } from \"./merge\";\nimport { config as dotenvconfig } from \"dotenv\";\nconst file = process.env.SERVER_CONFIG ?? \"server.config.json\"\nconst data = JSON.parse(readFileSync(file).toString());\n**dotenvconfig({**\n **path: getEnvironment().toString() + \".env\"**\n**})**\ntry {\n    const envFile = getEnvironment().toString() + \".\" + file;\n    const envData = JSON.parse(readFileSync(envFile).toString());\n    merge(data, envData);\n} catch {\n    // do nothing - file doesn't exist or isn't readable\n}\nexport const getConfig = (path: string, defaultVal: any = undefined) => {\n    const paths = path.split(\":\");\n    let val = data;\n    paths.forEach(p => val = val[p]);\n    return val ?? defaultVal;\n}\n**export const getSecret = (name: string) => {**\n **const secret = process.env[name];**\n **if (secret === undefined) {**\n**throw new Error(`Undefined secret: ${name}`);**\n **}**\n **return secret;**\n**}**\nexport { getEnvironment, Env }; \n```", "```js\nnpm install express-session@1.17.3\nnpm install connect-session-sequelize@7.1.7\nnpm install --save-dev @types/cookie-parser@1.4.6\nnpm install --save-dev @types/express-session@1.17.10 \n```", "```js\n`express-session` \n```", "```js\n`connect-session-sequelize` \n```", "```js\n`@types/cookie-parser` \n```", "```js\n`@types/express-session` \n```", "```js\nimport { Express } from \"express\";\nimport { Sequelize } from \"sequelize\";\nimport { getConfig, getSecret } from \"./config\";\nimport session from \"express-session\";\nimport sessionStore from \"connect-session-sequelize\";\nconst config = getConfig(\"sessions\");\nconst secret = getSecret(\"COOKIE_SECRET\");\nconst logging = config.orm.logging\n        ? { logging: console.log, logQueryParameters: true}\n        : { logging: false };\nexport const createSessions = (app: Express) => {\n    const sequelize = new Sequelize({\n        ...config.orm.settings, ...logging\n    });\n    const store = new (sessionStore(session.Store))({\n        db: sequelize\n    });\n    if (config.reset_db === true) {\n        sequelize.drop().then(() => store.sync());\n    } else {\n        store.sync();\n    }\n    app.use(session({\n        secret, store,\n        resave: true, saveUninitialized: false,\n        cookie: { maxAge: config.maxAgeHrs * 60 * 60 * 1000,\n            sameSite: \"strict\" }\n    }));\n} \n```", "```js\n{\n    \"http\": {\n        \"port\": 5000\n    },\n    \"templates\": {\n        // ...settings omitted for brevity...\n    },\n    \"errors\": {\n        \"400\": \"not_found\",\n        \"500\": \"error\"\n    },\n    \"catalog\": {\n        // ...settings omitted for brevity...\n    },\n   ** \"sessions\": {**\n **\"****maxAgeHrs\": 2,**\n **\"reset_db\": true,**\n **\"orm\": {**\n **\"settings\": {**\n **\"dialect\": \"sqlite\",**\n **\"storage\": \"sessions.db\"**\n **},**\n **\"logging\":** **true**\n **}**\n **}**\n} \n```", "```js\nimport { createServer } from \"http\";\nimport express, { Express } from \"express\";\nimport helmet from \"helmet\";\nimport { getConfig } from \"./config\";\nimport { createRoutes } from \"./routes\";\nimport { createTemplates } from \"./helpers\";\nimport { createErrorHandlers } from \"./errors\";\n**import { createSessions } from \"./sessions\";**\nconst port = getConfig(\"http:port\", 5000);\nconst expressApp: Express = express();\nexpressApp.use(helmet());\nexpressApp.use(express.json());\nexpressApp.use(express.urlencoded({extended: true}))\nexpressApp.use(express.static(\"node_modules/bootstrap/dist\"));\ncreateTemplates(expressApp);\n**createSessions(expressApp);**\ncreateRoutes(expressApp);\ncreateErrorHandlers(expressApp);\nconst server = createServer(expressApp);\nserver.listen(port,\n    () => console.log(`HTTP Server listening on port ${port}`)); \n```", "```js\nexport interface CartLine {\n    productId: number;\n    quantity: number;\n}\nexport interface Cart {\n    lines: CartLine[];\n}\nexport const createCart = () : Cart => ({ lines: [] });\nexport const addLine = (cart: Cart, productId: number, quantity: number) => {\n    const line = cart.lines.find(l => l.productId == productId);\n    if (line !== undefined) {\n        line.quantity += quantity;\n    } else {\n        cart.lines.push({ productId, quantity })\n    }\n}\nexport const removeLine = (cart: Cart, productId: number) => {\n    cart.lines = cart.lines.filter(l => l.productId !== productId);\n} \n```", "```js\nimport { Category, Product, Supplier, ProductQueryParameters,\n    ProductQueryResult } from \"./catalog_models\";\nexport interface CatalogRepository {\n    getProducts(params?: ProductQueryParameters): Promise<ProductQueryResult>;\n  **  getProductDetails(ids: number[]): Promise<Product[]>;**\n    storeProduct(p: Product): Promise<Product>;\n    getCategories() : Promise<Category[]>;\n    storeCategory(c: Category): Promise<Category>;\n    getSuppliers(): Promise<Supplier[]>;\n    storeSupplier(s: Supplier): Promise<Supplier>;\n} \n```", "```js\nimport { CategoryModel, ProductModel, SupplierModel } from \"./models\";\nimport { BaseRepo, Constructor } from \"./core\"\nimport { ProductQueryParameters } from \"../catalog_models\";\nimport { Op } from \"sequelize\";\nexport function AddQueries<TBase extends Constructor<BaseRepo>>(Base: TBase) {\n    return class extends Base {\n\n        // ...methods omitted for brevity...\n\n        getSuppliers() {\n            return SupplierModel.findAll({raw: true, nest: true});\n        }       \n       ** getProductDetails(ids: number[]) {**\n **return ProductModel.findAll****({**\n **where: { id: { [Op.in]: ids }}, raw: true, nest: true,**\n **});**\n **}**\n    }\n} \n```", "```js\nimport { catalog_repository } from \".\";\nimport { Cart } from \"./cart_models\";\nimport { Product } from \"./catalog_models\"\nexport interface CartDetail {\n    lines: {\n        product: Product,\n        quantity: number,\n        subtotal: number\n    }[],\n    total: number;\n}\nexport const getCartDetail = async (cart: Cart) : Promise<CartDetail> => {\n    const ids = cart.lines.map(l => l.productId);\n    const db_data = await catalog_repository.getProductDetails(ids);\n    const products = Object.fromEntries(db_data.map(p => [p.id, p]));\n    const lines = cart.lines.map(line => ({\n        product: products[line.productId],\n        quantity: line.quantity,\n        subtotal: products[line.productId].price * line.quantity\n    }));\n    const total = lines.reduce((total, line) => total + line.subtotal, 0);\n    return { lines, total }\n} \n```", "```js\nimport { Express } from \"express\";\nimport { escape, unescape } from \"querystring\";\nimport { Cart, addLine, createCart, removeLine } from \"../data/cart_models\";\nimport * as cart_helpers from \"../data/cart_helpers\";\ndeclare module \"express-session\" {\n    interface SessionData {\n       cart?: Cart;\n    }\n}\nexport const createCartMiddleware = (app: Express) => {\n    app.use((req, resp, next) => {\n        resp.locals.cart = req.session.cart = req.session.cart ?? createCart()\n        next();\n    })\n}\nexport const createCartRoutes = (app: Express) => {\n\n    app.post(\"/cart\", (req, resp) => {\n        const productId = Number.parseInt(req.body.productId);\n        if (isNaN(productId)) {\n            throw new Error(\"ID  must be an integer\");\n        }\n        addLine(req.session.cart as Cart, productId, 1);\n        resp.redirect(`/cart?returnUrl=${escape(req.body.returnUrl ?? \"/\")}`);\n    });\n    app.get(\"/cart\", async (req, resp) => {\n        const cart = req.session.cart as Cart;\n        resp.render(\"cart\", {\n            cart: await cart_helpers.getCartDetail(cart),\n            returnUrl: unescape(req.query.returnUrl?.toString() ?? \"/\")\n        });\n    });\n    app.post(\"/cart/remove\", (req, resp) => {\n        const id = Number.parseInt(req.body.id);\n        if (!isNaN(id)) {\n            removeLine(req.session.cart as Cart, id);\n        }\n        resp.redirect(`/cart?returnUrl=${escape(req.body.returnUrl ?? \"/\")}`);\n    });\n} \n```", "```js\nimport { Express } from \"express\";\nimport { createCatalogRoutes } from \"./catalog\";\nimport { createCartMiddleware, createCartRoutes } from \"./cart\";\nexport const createRoutes = (app: Express) => {\n **createCartMiddleware(app);**\n    createCatalogRoutes(app);\n   ** createCartRoutes(app);**\n} \n```", "```js\n<tr>\n    <td class=\"text-end\">{{ quantity }} </td>   \n    <td class=\"text-left\">{{ product.name }}</td>\n    <td class=\"text-end\">{{ currency product.price }}</td>\n    <td class=\"text-end\">{{ currency subtotal }}</td>\n    <td class=\"text-center\">\n        <form method=\"post\" action=\"/cart/remove\">\n            <input type=\"hidden\" name=\"id\" value=\"{{ product.id }}\">\n            <input type=\"hidden\" name=\"returnUrl\" value=\"{{ returnUrl }}\">\n            <button type=\"submit\" class=\"btn btn-sm btn-danger\">\n                Remove\n            </button>\n        </form>\n    </td>\n</tr> \n```", "```js\n<h2>Your cart</h2>\n<table class=\"table table-bordered table-striped\">\n    <thead>\n        <tr>\n            <th class=\"text-end\">Quantity</th><th>Item</th>\n            <th class=\"text-end\">Price</th><th class=\"text-end\">Subtotal</th>\n            <th></th>\n        </tr>\n    </thead>\n    <tbody>\n        {{#unless cart.lines}}\n            <tr><td colspan=\"5\" class=\"text-center\">Cart is empty</td></tr>\n        {{/unless}}\n        {{#each cart.lines}}\n            {{> cart_line returnUrl=../returnUrl }}       \n        {{/each }}\n    </tbody>\n    <tfoot>\n        <tr>\n            <td colspan=\"3\" class=\"text-end\">Total:</td>\n            <td class=\"text-end\">{{ currency cart.total }}</td>\n        </tr>\n    </tfoot>\n</table>\n<div class=\"text-center\">\n    <a class=\"btn btn-primary\" href=\"{{ returnUrl }}\">Continue Shopping</a>\n    {{#if cart.lines}}\n        <a class=\"btn btn-primary\" href=\"/checkout\">Checkout</a>\n    {{else}}\n        <button class=\"btn btn-primary\" disabled>Checkout</button>\n    {{/if}}\n</div> \n```", "```js\n...\n{{#each cart.lines}}\n    {{> cart_line **returnUrl**=../returnUrl }}       \n{{/each }}    \n... \n```", "```js\n<div class=\"card card-outline-primary m-1 p-1\">\n    <div class=\"bg-faded p-1\">\n        <h4>\n            {{ highlight name }}\n            <span class=\"badge rounded-pill bg-primary text-white\"\n                   style=\"float:right\">\n                <small>{{ currency price }}</small>\n            </span>\n        </h4>\n    </div>\n    <div class=\"card-text p-1\">\n        **<span class=\"float-start\">{{ highlight description }}</span>**\n **<****form method=\"post\" action=\"/cart\">**\n **<input type=\"hidden\" name=\"****returnUrl\" value=\"{{navigationUrl}}\">**\n **<input type=\"hidden\" name=\"productId\" value=\"****{{id}}\">**\n **<button type=\"submit\" class=\"btn btn-sm btn-success float-end\">**\n **Add To Cart**\n **</button>**\n **</****form>**\n    </div>\n</div> \n```", "```js\nnpm install bootstrap-icons@1.11.3 \n```", "```js\n`bootstrap-icons` \n```", "```js\nimport { Cart } from \"../data/cart_models\";\nexport const countCartItems = (cart: Cart) : number =>\n    cart.lines.reduce((total, line) => total + line.quantity, 0); \n```", "```js\nimport { Express } from \"express\";\nimport { getConfig } from \"../config\";\nimport { engine } from \"express-handlebars\";\nimport * as env_helpers from \"./env\";\nimport * as catalog_helpers from \"./catalog_helpers\";\n**import** *** as cart_helpers from \"./cart_helpers\";**\nconst location = getConfig(\"templates:location\");\nconst config = getConfig(\"templates:config\");\nexport const createTemplates = (app: Express) => {\n    app.set(\"views\", location);\n    app.engine(\"handlebars\", engine({\n        ...config,\n        **helpers****: {...env_helpers, ...catalog_helpers, ...cart_helpers}**\n    }));\n    app.set(\"view engine\", \"handlebars\");\n} \n```", "```js\n{{#if cart.lines}}\n    <small class=\"navbar-text\">{{ countCartItems cart }} item(s)</small>\n{{else}}\n    <small class=\"navbar-text\">(Empty)</small>\n{{/if}}\n<a class=\"btn btn-sm btn-secondary navbar-btn\" \n    href=\"/cart?returnUrl={{ escapeUrl ( navigationUrl ) }}\">\n    <i class=\"bi-cart\"></i>\n</a> \n```", "```js\n...\n<a class=\"btn btn-sm btn-secondary navbar-btn\"  href=\"/cart{{returnUrl}}\">\n   ** <i class=\"bi-cart\"></i>**\n</a>\n... \n```", "```js\n<!DOCTYPE html>\n<html>\n    <head>\n        <link href=\"/css/bootstrap.min.css\" rel=\"stylesheet\" />\n        **<link href=\"/font/bootstrap-icons.min.css\" rel=\"stylesheet\">**\n    </head>\n    <body>\n        **<div class=\"bg-dark text-white py-2 px-1\">**\n **<div class=\"container-fluid\"****>**\n **<div class=\"row\">**\n **<div class=\"col align-baseline pt-1\">SPORTS STORE</div****>**\n **<div class=\"col-auto text-end\">**\n **{{#if show_cart}}**\n **{{> cart_summary }}**\n **{{/if}}**\n **</div>**\n **</div>**\n **</div****>**\n **</div>**\n        {{{ body }}}\n    </body>\n</html> \n```", "```js\nimport { Express } from \"express\";\nimport { catalog_repository } from \"../data\";\nexport const createCatalogRoutes = (app: Express) => {\n    app.get(\"/\", async (req, resp) => {\n        const page = Number.parseInt(req.query.page?.toString() ?? \"1\");\n        const pageSize =Number.parseInt(req.query.pageSize?.toString() ?? \"3\")\n        const searchTerm = req.query.searchTerm?.toString();\n        const category = Number.parseInt(req.query.category?.toString() ?? \"\")\n        const res = await catalog_repository.getProducts({ page, pageSize,\n            searchTerm, category});\n        resp.render(\"index\", { ...res, page, pageSize,\n            pageCount: Math.ceil(res.totalCount / (pageSize ?? 1)),\n            searchTerm, category, show_cart: true\n        });\n    });\n} \n```", "```js\nimport { createServer } from \"http\";\nimport express, { Express } from \"express\";\nimport helmet from \"helmet\";\nimport { getConfig } from \"./config\";\nimport { createRoutes } from \"./routes\";\nimport { createTemplates } from \"./helpers\";\nimport { createErrorHandlers } from \"./errors\";\nimport { createSessions } from \"./sessions\";\nconst port = getConfig(\"http:port\", 5000);\nconst expressApp: Express = express();\nexpressApp.use(helmet());\nexpressApp.use(express.json());\nexpressApp.use(express.urlencoded({extended: true}))\nexpressApp.use(express.static(\"node_modules/bootstrap/dist\"));\n**expressApp.use(express.static(\"node_modules/bootstrap-icons\"));**\ncreateTemplates(expressApp);\ncreateSessions(expressApp);\ncreateRoutes(expressApp);\ncreateErrorHandlers(expressApp);\nconst server = createServer(expressApp);\nserver.listen(port,\n    () => console.log(`HTTP Server listening on port ${port}`)); \n```"]