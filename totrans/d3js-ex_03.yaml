- en: Chapter 3. Creating Visuals with SVG
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章：使用SVG创建可视化
- en: In this chapter, we will learn about **Scalable Vector Graphics**, commonly
    referred to as **SVG**. SVG is a web standard for creating vector-based graphics
    within the browser. We will begin the chapter with several basic examples of directly
    coding SVG within the browser, and in the end, examine how to use D3 to create
    SVG elements based on data.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习关于**可缩放矢量图形**（Scalable Vector Graphics），通常简称为**SVG**。SVG是一种网络标准，用于在浏览器中创建基于矢量的图形。我们将从几个直接在浏览器中编码SVG的基本示例开始本章，最后检查如何使用D3根据数据创建SVG元素。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: A brief introduction to SVG, coordinates, and attributes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SVG、坐标和属性的简要介绍
- en: A simple example of SVG that draws circles
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个简单的SVG示例，绘制圆形
- en: 'Working with fundamental shapes: ellipses, rectangles, lines, and paths'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基本形状：椭圆、矩形、线条和路径
- en: The relationship of CSS with SVG and D3.js
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS与SVG和D3.js的关系
- en: Using strokes, line caps, and dashes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用描边、线帽和虚线
- en: 'Fundamental transformations: rotate, translate, and scale'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本变换：旋转、平移和缩放
- en: Grouping SVG elements and uniformly applying transforms
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对SVG元素进行分组并统一应用变换
- en: Transparency and layering of SVG elements
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SVG元素的透明度和分层
- en: Introducing SVG
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍SVG
- en: Up to this point, we have used D3 to create new DIV elements in the DOM. While
    many great visualizations can be created using D3 and DIVs, the true expressive
    power of D3 lies in using it to create and manipulate SVG elements.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们使用D3在DOM中创建新的DIV元素。虽然可以使用D3和DIV创建许多优秀的可视化，但D3真正的表现力在于用它来创建和操作SVG元素。
- en: SVG is an XML markup language that has been designed to express very rich 2D
    visualizations. SVG can take advantage of the computer's graphics processor to
    accelerate rendering, and is also optimized for user interaction and animation.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: SVG是一种XML标记语言，它被设计用来表达非常丰富的2D可视化。SVG可以利用计算机的图形处理器来加速渲染，并且也针对用户交互和动画进行了优化。
- en: Instead of directly manipulating the pixels on the screen, SVG uses vectors
    for building a model of the presentation, and then transforms this representation
    into pixels on your behalf. This makes coding of visualizations much simpler as
    compared to other web technologies such as HTML5 Canvas.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: SVG不是直接操作屏幕上的像素，而是使用矢量来构建展示模型，然后代表你将其转换为像素。这使得与HTML5 Canvas等其他网络技术相比，可视化编码变得更加简单。
- en: Since the image is stored as a vector-based representation, the visualization
    of the model can be scalable. This is because all the visual elements can be easily
    scaled (both larger and smaller) without resulting in visual artifacts as a result
    of the scaling.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 由于图像以矢量表示形式存储，因此模型的可视化可以缩放。这是因为所有视觉元素都可以轻松地缩放（无论是放大还是缩小），而不会因为缩放而产生视觉伪影。
- en: SVG has a convenience in that its language can be used directly within HTML
    on browsers that support SVG. D3 provides direct support and manipulation of SVG
    with D3, which feels exactly like manipulating the DOM with D3.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: SVG有一个便利之处，即其语言可以直接在支持SVG的浏览器中的HTML中使用。D3提供了对SVG的直接支持和操作，这感觉就像使用D3操作DOM一样。
- en: The SVG coordinate system
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SVG坐标系
- en: The coordinate system of SVG has an origin in the upper-left corner of the SVG
    element, which is (**0,0**); the value of *x* increases towards the right, while
    those of *y* increase towards the bottom. This is common in computer graphics
    systems, but can occasionally be confusing for those used to mathematical graphs
    where the origin is in the lower-left or dead center.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: SVG的坐标系以SVG元素的左上角为原点，即(**0,0**)；*x*的值向右增加，而*y*的值向下增加。这在计算机图形系统中很常见，但对于习惯于以原点在左下或正中心的数学图形的人来说，有时可能会感到困惑。
- en: '![The SVG coordinate system](img/B04230_03_01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![SVG坐标系](img/B04230_03_01.jpg)'
- en: SVG attributes
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SVG属性
- en: SVG, while being able to seamlessly integrate with HTML, is not HTML. Specifically,
    properties and styles may operate differently. An example of this is that where
    most HTML elements have width and height elements, but not all SVG elements use
    these properties.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: SVG虽然能够与HTML无缝集成，但它并不是HTML。具体来说，属性和样式可能以不同的方式运作。一个例子是，大多数HTML元素都有宽度和高度元素，但并非所有SVG元素都使用这些属性。
- en: A second important point about SVG is that the position of an element is set
    through attributes. Due to this, it is not possible to set the position of the
    SVG elements using a style. Additionally, to change the position of an SVG element,
    such as within an animation, it is necessary to have code which sets the properties
    for positioning the element.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 SVG 的第二个重要点是，元素的位置是通过属性设置的。因此，无法使用样式设置 SVG 元素的位置。此外，要更改 SVG 元素的位置，例如在动画中，需要编写设置元素定位属性的代码。
- en: Drawing circles with SVG
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 SVG 绘制圆
- en: 'We work with SVG within HTML by using an SVG tag, and placing the SVG elements
    within that tag. A very simple example is the following, which creates three circles:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过使用 SVG 标签并在该标签内放置 SVG 元素，在 HTML 中使用 SVG。以下是一个非常简单的例子，它创建了三个圆：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This results in the following image within the browser:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在浏览器中产生以下图像：
- en: '![Drawing circles with SVG](img/B04230_03_02.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![使用 SVG 绘制圆](img/B04230_03_02.jpg)'
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (3.1): [http://goo.gl/UMCLtl](http://goo.gl/UMCLtl)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (3.1): [http://goo.gl/UMCLtl](http://goo.gl/UMCLtl)'
- en: The SVG element itself is not visible on the page, and only provides a holder
    for the child tags. In this book, we will always explicitly set the width and
    heights of the SVG tag. In this example, it is set to be `720` pixels wide by
    `120` pixels tall.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: SVG 元素本身在页面上不可见，仅提供子标签的容器。在这本书中，我们将始终明确设置 SVG 标签的宽度和高度。在这个例子中，它被设置为宽度 `720`
    像素，高度 `120` 像素。
- en: The positioning of a circle within an SVG element is performed by specifying
    the center `x` and `y` values of the circle. This location is relative to the
    upper-left corner of the SVG element, with positive `x` values moving to the right
    from the origin, and positive `y` values moving downwards. The size of the circle
    is specified by the `r` attribute, which indicates the radius of the circle.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SVG 元素内定位圆是通过指定圆的中心 `x` 和 `y` 值来完成的。此位置相对于 SVG 元素的左上角，正 `x` 值从原点向右移动，正 `y`
    值向下移动。圆的大小由 `r` 属性指定，该属性表示圆的半径。
- en: The example did not specify a color for these circles, so the default color
    of the circles is black. Most SVG elements specify the color by using the CSS
    style attribute, and then by setting the `fill` attribute of the style.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子没有指定这些圆的颜色，因此圆的默认颜色是黑色。大多数 SVG 元素通过使用 CSS 样式属性来指定颜色，然后设置样式的 `fill` 属性。
- en: 'For example, the following code gives different colors (red, green and blue)
    to the three circles:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下代码给三个圆赋予了不同的颜色（红色、绿色和蓝色）：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This results in the following output:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![Drawing circles with SVG](img/B04230_03_03.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![使用 SVG 绘制圆](img/B04230_03_03.jpg)'
- en: Note
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (3.2): [http://goo.gl/2k1ZIm](http://goo.gl/2k1ZIm)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (3.2): [http://goo.gl/2k1ZIm](http://goo.gl/2k1ZIm)'
- en: D3 selections work identically with SVG elements as they do with the DOM elements.
    As a quick example, the following selects all the circles within the selected
    `svg` tag, and sets their colors to a uniform `teal` color.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: D3 选择与 SVG 元素的工作方式与 DOM 元素相同。作为一个快速示例，以下代码选择所选 `svg` 标签内的所有圆，并将它们的颜色设置为统一的 `teal`
    颜色。
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This results in the following output within the browser:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在浏览器中产生以下输出：
- en: '![Drawing circles with SVG](img/B04230_03_04.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![使用 SVG 绘制圆](img/B04230_03_04.jpg)'
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (3.3): [http://goo.gl/bszmEf](http://goo.gl/bszmEf)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (3.3): [http://goo.gl/bszmEf](http://goo.gl/bszmEf)'
- en: The basic shapes provided by SVG
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SVG 提供的基本形状
- en: Having some preliminaries out of the way, let's now examine the various SVG
    shapes that we will commonly use through the book. We have already seen how to
    create a circle; now let's look at some other shapes.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成了一些初步介绍之后，现在让我们来探讨本书中我们将经常使用的各种 SVG 形状。我们已经看到了如何创建一个圆；现在让我们看看其他一些形状。
- en: Ellipse
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 椭圆
- en: 'A circle is a special case of an ellipse that has an identical *x* and *y*
    radii. Ellipses can and often have different size radii. An ellipse is specified
    in SVG using the `<ellipse>` tag. We still use `cx` and `cy` attributes to position
    the ellipse, but instead of using `r` for radius, we use two attributes `rx` and
    `ry` to specify the radius in the x and y directions:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 圆是椭圆的一种特殊情况，其 *x* 和 *y* 半径相同。椭圆可以有不同大小的半径，并且通常有不同的半径大小。椭圆在 SVG 中使用 `<ellipse>`
    标签指定。我们仍然使用 `cx` 和 `cy` 属性来定位椭圆，但不是使用 `r` 作为半径，而是使用两个属性 `rx` 和 `ry` 来指定 x 和 y
    方向上的半径：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Ellipse](img/B04230_03_05.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![椭圆](img/B04230_03_05.jpg)'
- en: Note
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (3.4): [http://goo.gl/05QCnG](http://goo.gl/05QCnG)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (3.4): [http://goo.gl/05QCnG](http://goo.gl/05QCnG)'
- en: Rectangle
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 矩形
- en: 'Rectangles are specified using the `<rect>` tag. The upper-left corner is specified
    using the `x` and `y` attributes. The `width` and `height` attributes specify
    those respective sizes for the rectangle:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 矩形使用 `<rect>` 标签指定。左上角使用 `x` 和 `y` 属性指定。`width` 和 `height` 属性分别指定矩形的相应大小：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Rectangle](img/B04230_03_06.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![矩形](img/B04230_03_06.jpg)'
- en: Note
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (3.5): [http://goo.gl/b3w1Rq](http://goo.gl/b3w1Rq)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (3.5): [http://goo.gl/b3w1Rq](http://goo.gl/b3w1Rq)'
- en: Lines
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行
- en: It is possible to draw lines with SVG using the `<line>` tag. A line requires
    at least four attributes to be specified, and normally uses five. The first two,
    `x1` and `y1`, specify the starting position of the line. Two more attributes,
    `x2` and `y2`, specify the end point for the line. The last property, albeit not
    required, is `stroke`, which specifies the color to be used to draw the line.
    Usually, we must specify the stroke to actually see the line. Here we set it to
    `black`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 SVG 可以通过 `<line>` 标签绘制线条。一条线至少需要指定四个属性，通常使用五个。前两个属性 `x1` 和 `y1` 指定线的起始位置。另外两个属性
    `x2` 和 `y2` 指定线的终点。最后一个属性，尽管不是必需的，是 `stroke`，它指定用于绘制线的颜色。通常，我们必须指定描边才能看到线。这里我们将其设置为
    `black`。
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Lines](img/B04230_03_07.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![线条](img/B04230_03_07.jpg)'
- en: Note
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (3.6): [http://goo.gl/4qZejC](http://goo.gl/4qZejC)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (3.6): [http://goo.gl/4qZejC](http://goo.gl/4qZejC)'
- en: Paths
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 路径
- en: Paths are one of the most powerful drawing constructs in SVG. They provide a
    symbolic notion that can be used to create many geometries. A path can be shapes
    such as circles and rectangles. Paths also provide the user the ability to create
    curves using control points.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 路径是 SVG 中最强大的绘图结构之一。它们提供了一个符号概念，可以用来创建许多几何形状。路径可以是圆形和矩形等形状。路径还允许用户使用控制点创建曲线。
- en: The drawing of the path is controlled by specifying one attribute, `d`, which
    is passed a string that specifies drawing commands that will be executed.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 路径的绘制是通过指定一个属性 `d` 来控制的，该属性传递一个字符串，该字符串指定了将要执行的绘制命令。
- en: 'The basic concept of a path is that you can draw a series of either straight
    or curved lines, and then have the option of filling the space inside if the shape
    is closed. For example, the following command creates a triangle filled with black
    color:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 路径的基本概念是你可以绘制一系列直线或曲线，然后可以选择填充形状内部的空隙。例如，以下命令创建了一个用黑色填充的三角形：
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Paths](img/B04230_03_08.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![路径](img/B04230_03_08.jpg)'
- en: Note
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (3.7): [http://goo.gl/kCTbv7](http://goo.gl/kCTbv7)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (3.7): [http://goo.gl/kCTbv7](http://goo.gl/kCTbv7)'
- en: A path usually starts with an `M` command, which starts drawing at that specific
    location, in this case (`10, 10`). The next command, `L 310 10`, draws a from
    the previous point to (`310, 10`). The next command, `L 160 10`, then draws a
    line from (`310, 10`) to (`160, 10`). The final command is `Z`, which tells SVG
    that the shape is closed. Essentially, this informs SVG that there is an implicit
    line to the first position in the string of commands, in this case (`10, 10`).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一个路径通常从一个 `M` 命令开始，该命令从指定位置开始绘制，在这个例子中是 (`10, 10`)。下一个命令 `L 310 10` 从上一个点绘制到
    (`310, 10`)。下一个命令 `L 160 10` 然后从 (`310, 10`) 绘制到 (`160, 10`)。最后的命令是 `Z`，它告诉 SVG
    形状是封闭的。本质上，这通知 SVG 在命令字符串中存在一个到第一个位置的隐式线，在这个例子中是 (`10, 10`)。
- en: Note
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that we did not specify a fill or stroke color. These default to black
    in a path.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们没有指定填充或描边颜色。在路径中，这些默认为黑色。
- en: 'The mini-language for paths is quite robust, and therefore, also complex. The
    following table lists several other common path commands:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 路径的迷你语言相当强大，因此也相当复杂。以下表格列出了其他一些常见的路径命令：
- en: '| Command | Purpose |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 命令 | 目的 |'
- en: '| --- | --- |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `M` | Move-to |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `M` | 移动到 |'
- en: '| `L` | Line-to |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `L` | 线到 |'
- en: '| `H` | Horizontal line-to |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `H` | 水平线到 |'
- en: '| `V` | Veritcal line-to |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `V` | 垂直线到 |'
- en: '| `C` | Curve-to |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `C` | 曲线到 |'
- en: '| `Q` | Quadractic Bezier curve-to |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `Q` | 二次贝塞尔曲线到 |'
- en: '| `T` | Smooth quadratic Bezier curve-to |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `T` | 平滑二次贝塞尔曲线到 |'
- en: '| `A` | Elliptical arc |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `A` | 椭圆弧 |'
- en: '| `Z` | Close path |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `Z` | 关闭路径 |'
- en: D3 provides a number of tools to facilitate the use of paths that make them
    much simpler to use compared to manually specifying them with string literals.
    We will examine a few of those later in the chapter.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: D3 提供了多个工具来简化路径的使用，与手动使用字符串字面量指定相比，这些工具使得路径的使用更加简单。我们将在本章后面详细探讨这些工具。
- en: Text
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文本
- en: The `<text>` SVG tag allows us to place text within the SVG element. The placing
    of text within an SVG is different than the way it is done in HTML. The SVG text
    items are drawn with vector graphics instead of being rasterized. Hence, text
    rendered in SVG is more flexible than the rasterized text rendered with HTML.
    Curves in letters rendered with SVG remain smooth instead of becoming pixelated
    when zoom levels are applied to the entire graphic.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`<text>` SVG 标签允许我们在 SVG 元素内放置文本。在 SVG 中放置文本的方式与 HTML 中的方式不同。SVG 文本项使用矢量图形绘制，而不是进行光栅化。因此，SVG
    中渲染的文本比使用 HTML 渲染的光栅化文本更灵活。使用 SVG 渲染的字母曲线保持平滑，而不是在应用整个图形的缩放级别时变得像素化。'
- en: Text is positioned using the `x` and `y` attributes, which specify the **baseline**
    of the text be located at `y` and the text to be left-justified to `x`, the bottom
    baseline of the text (the portion at the bottom of the main part of the letters,
    excluding the descenders) left of the text being the anchor of the positioning.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 文本使用 `x` 和 `y` 属性进行定位，这些属性指定文本的基线位于 `y`，文本左对齐到 `x`，文本的底部基线（字母主要部分的底部部分，不包括下划线）位于文本左侧是定位的锚点。
- en: 'This is demonstrated by the following, which also sets the font family, size
    and fill color. The actual text to be displayed is set with the inner text content
    of the tag:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示，它还设置了字体家族、大小和填充颜色。实际要显示的文本设置为标签的内文本内容：
- en: '[PRE7]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Which renders the following in the upper-left side of the SVG element:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在 SVG 元素的左上角渲染以下内容：
- en: '![Text](img/B04230_03_09.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![文本](img/B04230_03_09.jpg)'
- en: Note
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (3.8): [http://goo.gl/f89tZX](http://goo.gl/f89tZX)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (3.8): [http://goo.gl/f89tZX](http://goo.gl/f89tZX)'
- en: Applying CSS styles to SVG elements
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 CSS 样式应用于 SVG 元素
- en: SVG elements can be styled identically to the way HTML elements are styled.
    The same CSS with ID and class attributes can be used to direct styles to the
    SVG elements, or you can just use the style attribute directly and specify CSS
    as its content. However, many of the actual styles in HTML differ in SVG. For
    example, SVG uses `fill` for a rectangle, whereas HTML would use background for
    a `div` tag that represents a rectangle.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: SVG 元素可以像 HTML 元素一样进行样式化。可以使用具有 ID 和类属性的相同 CSS 来将样式应用于 SVG 元素，或者您可以直接使用 style
    属性并指定 CSS 作为其内容。然而，HTML 中许多实际的样式在 SVG 中是不同的。例如，SVG 使用 `fill` 来填充矩形，而 HTML 会使用背景来填充代表矩形的
    `div` 标签。
- en: In this book, we will generally try to avoid using CSS, and explicitly code
    the style attributes using the functions provided by D3.js. But many examples
    on the web do use CSS combined with SVG, so it is worth a quick mention.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将尽量避免使用 CSS，并使用 D3.js 提供的函数显式地编写样式属性。但是，网络上的许多示例确实使用了 CSS 与 SVG 的组合，因此简要提及是有价值的。
- en: 'The following example demonstrates styling SVG with CSS. The example uses two
    styles to set the fills of several rectangles. The first style will make all the
    rectangles red by default. The second one defines a style that makes all the rectangles
    with ID `willBeGreen` filled with green color. The example then creates three
    rectangles: the first two using the CSS styles, and the third using CSS within
    the style `attributeset` as fill to `blue`.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了如何使用 CSS 样式化 SVG。该示例使用两种样式来设置几个矩形的填充。第一种样式将使所有矩形默认为红色。第二种样式定义了一个样式，使所有具有
    ID `willBeGreen` 的矩形填充为绿色。然后示例创建了三个矩形：前两个使用 CSS 样式，第三个使用在 `attributeset` 样式属性中作为填充的
    CSS 将其设置为蓝色。
- en: Note
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (3.9): [http://goo.gl/KAnc6j](http://goo.gl/KAnc6j)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (3.9): [http://goo.gl/KAnc6j](http://goo.gl/KAnc6j)'
- en: 'The styles defined in the sample are the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 样本中定义的样式如下：
- en: '[PRE8]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And the rectangles are created as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 矩形的创建方式如下：
- en: '[PRE9]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The resulting output will be as shown in the following image:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 结果输出将如图所示：
- en: '![Applying CSS styles to SVG elements](img/B04230_03_10.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![将 CSS 样式应用于 SVG 元素](img/B04230_03_10.jpg)'
- en: Strokes, caps, and dashes
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 描边、端点和虚线
- en: SVG shapes have an attribute known as `stroke`. The attribute `stroke` specifies
    the color of a line that outlines an SVG shape. We saw the use of stroke with
    a line, but it can be used with most of the SVG elements.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: SVG 形状有一个名为 `stroke` 的属性。`stroke` 属性指定了勾勒 SVG 形状的线条的颜色。我们看到了线条中使用 stroke 的用法，但它可以与大多数
    SVG 元素一起使用。
- en: Whenever we specify `stroke`, we usually also specify a stroke width using the
    `stroke-width` attribute. This informs SVG about the thickness (in pixels) of
    the outline that will be rendered.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们指定 `stroke` 时，我们通常也会使用 `stroke-width` 属性指定一个描边宽度。这会告知 SVG 关于将要渲染的轮廓的厚度（以像素为单位）。
- en: 'To demonstrate `stroke` and `stroke-width` attributes, the following example
    recreates the path from the path example, and sets a stroke to be `10` pixels
    thick, using `red` as its color. Additionally, we set the `fill` of the path to
    `blue`. We set all the attributes using the `style` property of `stroke`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示`stroke`和`stroke-width`属性，以下示例重新创建了路径示例中的路径，并将笔触设置为`10`像素粗，使用`red`作为其颜色。此外，我们还设置了路径的`fill`为`blue`。我们使用`stroke`的`style`属性设置了所有这些属性：
- en: '[PRE10]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The preceding example results in the following rendering:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例的结果如下所示：
- en: '![Strokes, caps, and dashes](img/B04230_03_11.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![笔触、帽子和虚线](img/B04230_03_11.jpg)'
- en: Note
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (3.10): [http://goo.gl/dMjdUX](http://goo.gl/dMjdUX)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (3.10): [http://goo.gl/dMjdUX](http://goo.gl/dMjdUX)'
- en: 'As we saw earlier, we can set stroke on a line. It can also have its `stroke-width`
    set. Let''s examine this by changing our line example to set the thickness of
    the line to `20` and the color to `green`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前看到的，我们可以在线条上设置笔触。它也可以设置其`stroke-width`。让我们通过将我们的线条示例的线条厚度设置为`20`并将颜色设置为`green`来检查这一点：
- en: '[PRE11]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![Strokes, caps, and dashes](img/B04230_03_12.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![笔触、帽子和虚线](img/B04230_03_12.jpg)'
- en: Note
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (3.11): [http://goo.gl/p880dC](http://goo.gl/p880dC)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (3.11): [http://goo.gl/p880dC](http://goo.gl/p880dC)'
- en: Notice how this line actually looks like a rectangle. This is because lines
    have an attribute named `stroke-linecap` which describes the shape of the end
    of the line, known as the line cap.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这条线实际上看起来像一个矩形。这是因为线条有一个名为`stroke-linecap`的属性，它描述了线条末端的形状，称为线帽。
- en: 'The default for this value is `butt`, which gives us the 90 degree sharp corners.
    The other values that can be used are `square` or `round`. The following example
    demonstrates the same line with all these different `stroke-linecap` values:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 此值的默认值为`butt`，它给我们提供了90度锐利的角落。其他可以使用的值还有`square`或`round`。以下示例演示了具有所有这些不同的`stroke-linecap`值的相同线条：
- en: '[PRE12]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![Strokes, caps, and dashes](img/B04230_03_13.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![笔触、帽子和虚线](img/B04230_03_13.jpg)'
- en: Note
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (3.12): [http://goo.gl/Xcaz41](http://goo.gl/Xcaz41)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (3.12): [http://goo.gl/Xcaz41](http://goo.gl/Xcaz41)'
- en: Note that for each of the three lines, we drew a line with a `stroke-width`
    of `20`, and then within each line, we drew a white line using a single path with
    three move and line commands. The white line helps in distinguishing the effect
    of the end caps on the lines.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到对于这三条线中的每一条，我们都画了一条`stroke-width`为`20`的线，然后在每条线内，我们使用单个路径和三个移动和线条命令画了一条白色线。白色线有助于区分线端帽对线条的影响。
- en: First examine the red line. The ends are flush with the end of the white line.
    Contrast it with the green line. In this line, the line-cap, still square, extends
    past the white line by the width of the stroke. The blue line, with a round line-cap,
    is drawn using a half circle of radius of one half of the `stroke-width`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 首先检查红色线。其末端与白色线的末端齐平。将其与绿色线进行对比。在这条线中，线帽，尽管仍然是方形的，但延伸到白色线之外，宽度与笔触相同。蓝色线，具有圆形线帽，使用半径为`stroke-width`一半的半圆绘制。
- en: 'By default, the SVG lines are solid, but they can also be created with dashes,
    specified by using the `stroke-dasharray` attribute. This attribute is given a
    list of integer values which specify a repeating pattern of line segment widths,
    the first starting with the `stroke` color and alternating with empty space:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，SVG线条是实心的，但也可以使用虚线创建，通过使用`stroke-dasharray`属性来指定。此属性给出一个整数值的列表，该列表指定了线段宽度的重复模式，第一个从`stroke`颜色开始，并交替与空空间：
- en: '[PRE13]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![Strokes, caps, and dashes](img/B04230_03_14.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![笔触、帽子和虚线](img/B04230_03_14.jpg)'
- en: Note
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (3.13): [http://goo.gl/VyBBwy](http://goo.gl/VyBBwy)'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (3.13): [http://goo.gl/VyBBwy](http://goo.gl/VyBBwy)'
- en: Applying SVG transforms
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用SVG变换
- en: The **S** in SVG stands for **Scalable**, while **V** stands for **Vector**.
    These are the two important parts of the name. This allows us to be able to apply
    a variety of transforms prior to the rendering of SVG shapes.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: SVG中的**S**代表**可缩放**，而**V**代表**矢量**。这两个是名称中的两个重要部分。这使得我们能够在渲染SVG形状之前应用各种变换。
- en: Each SVG shape is represented by one or more vectors, where a vector in SVG
    is a tuple (*x, y*) distance from an origin in the coordinate system. As an example,
    a rectangle will be represented by four 2D vectors, one for each corner of the
    rectangle.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 每个SVG形状都由一个或多个矢量表示，其中SVG中的矢量是坐标系中从原点到(*x, y*)距离的元组。例如，矩形将由四个二维矢量表示，每个角一个。
- en: When creating graphical visualizations, this modeling of data with vectors has
    several benefits. One of those is that we can define a shape around a coordinate
    system for just that shape. Modeling this way allows us to make copies of the
    shape, but position them in different places in a larger image, rotate them, scale
    them, and perform many other operations beyond the scope of this text.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建图形可视化时，这种使用向量对数据进行建模的方法有几个优点。其中之一是我们可以为该形状定义一个围绕坐标系统的形状。以这种方式建模允许我们复制该形状，但可以在更大的图像中的不同位置放置它们，旋转它们，缩放它们，并执行许多其他操作，这些操作超出了本文的范围。
- en: Secondly, these transformations are applied on the model before being rendered
    into pixels on the screen. Because of this, SVG can ensure that irrespective of
    the level of scale applied to the image, it does not get pixelated.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，这些变换是在渲染到屏幕上的像素之前应用于模型的。正因为如此，SVG 可以确保无论对图像应用何种缩放级别，它都不会出现像素化。
- en: Another important concept in transformations is that they can be applied in
    a chain and in any sequence. This is an extremely powerful concept in linear algebra
    for creating composite models of visuals.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 变换中的另一个重要概念是它们可以按链式和任何顺序应用。这在线性代数中是一个极其强大的概念，可以创建视觉的复合模型。
- en: Note
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There are many ramifications of the transformations and their sequencing that
    can take effect on the result of the rendering in SVG. Unfortunately, an explanation
    of these is beyond the scope of the book, but when they have an effect on examples,
    we will examine them in light of that particular example.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 变换及其顺序对 SVG 渲染结果的影响有很多。不幸的是，对这些的解释超出了本书的范围，但当我们对示例产生影响时，我们将根据特定示例来检查它们。
- en: 'In this section, and in other examples in this book, we will use three general
    types of transformations provided by SVG: `translate`, `rotate`, and `scale`.
    Transformations can be applied to an SVG element by using the `transform` attribute.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，以及本书中的其他示例中，我们将使用 SVG 提供的三个通用类型的变换：`translate`、`rotate` 和 `scale`。可以通过使用
    `transform` 属性将变换应用于 SVG 元素。
- en: To demonstrate transforms, we will look at several examples that apply each
    transform to a rectangle to see how they affect the resulting rendering of the
    rectangle.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示变换，我们将查看几个示例，将每个变换应用于矩形，以了解它们如何影响矩形的最终渲染效果。
- en: Rotate
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Rotate
- en: The first transformation that we will examine is rotation. We can rotate an
    SVG object by a specified number of degrees using `.rotate(x)`, where `x` specifies
    the number of degrees to rotate the element.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要考察的第一个变换是旋转。我们可以使用 `.rotate(x)` 通过指定度数来旋转 SVG 对象，其中 `x` 指定了旋转元素的角度。
- en: 'To demonstrate this, the following example rotates our rectangle by 45 degrees.
    A simple axis with two lines is rendered to give a frame of reference for the
    translation. This will be included in this code snippet, but excluded in the rest
    for brevity:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这一点，以下示例将我们的矩形旋转 45 度。一个简单的由两条线组成的轴被渲染出来，作为平移的参考框架。这将被包含在这个代码片段中，但为了简洁起见，不包括在其他示例中：
- en: '[PRE14]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The preceding snippet gives us the folllowing result:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码片段给出了以下结果：
- en: '![Rotate](img/B04230_03_15.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![Rotate](img/B04230_03_15.jpg)'
- en: Note
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (3.14): [http://goo.gl/vLCeHD](http://goo.gl/vLCeHD)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (3.14): [http://goo.gl/vLCeHD](http://goo.gl/vLCeHD)'
- en: 'This is not quite the effect that we may have wanted. This is because the rotation
    of a rectangle is performed around its upper-left corner. To make this appear
    to have rotated around its center, we need to use an alternate form of `rotate()`
    which takes three parameters: the angle to rotate followed by an offset from the
    upper-left corner of the rectangle to a point that represents the center of the
    rectangle:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是我们可能期望的效果。这是因为矩形的旋转是围绕其左上角进行的。为了使其看起来是围绕中心旋转的，我们需要使用一个接受三个参数的 `rotate()`
    的替代形式：旋转角度，然后是矩形左上角到一个代表矩形中心的点的偏移量：
- en: '[PRE15]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![Rotate](img/B04230_03_16.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![Rotate](img/B04230_03_16.jpg)'
- en: Note
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (3.15): [http://goo.gl/ujF3iY](http://goo.gl/ujF3iY)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (3.15): [http://goo.gl/ujF3iY](http://goo.gl/ujF3iY)'
- en: The rectangle has now been rotated about its center, but there is an issue of
    several of the corners being clipped outside the bounds of the containing SVG
    element. We will fix this when we look at translations in the next section.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 矩形现在已经围绕其中心旋转，但有几个角落被裁剪到包含 SVG 元素的边界之外。我们将在下一节讨论平移时修复这个问题。
- en: Translate
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Translate
- en: 'An SVG element can be repositioned within its containing element by using a
    **transformation**. A transform is performed using the `translate()` function.
    `translate()` takes two values: the distance in `x` and `y` and the distance to
    reposition the element within its parent.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: SVG元素可以通过使用**变换**在其包含元素内重新定位。变换是通过`translate()`函数执行的。`translate()`接受两个值：`x`和`y`方向上的距离以及重新定位元素在父元素内的距离。
- en: 'The following example will draw our rectangle, and translate it 30 pixels to
    the right and 30 pixels down:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将绘制我们的矩形，并将其向右和向下平移30像素：
- en: '[PRE16]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![Translate](img/B04230_03_17.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![Translate](img/B04230_03_17.jpg)'
- en: Note
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (3.16): [http://goo.gl/jANiXU](http://goo.gl/jANiXU)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (3.16): [http://goo.gl/jANiXU](http://goo.gl/jANiXU)'
- en: 'Now let''s look back at the last rotation example, where two of the corners
    of the rectangle were clipped. We can fix this to see those corners by specifying
    a translation on the rectangle to move it right and down 30 pixels prior to the
    rotation:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回顾一下最后一个旋转示例，其中矩形的两个角被裁剪了。我们可以通过在旋转之前指定矩形的平移来修复这个问题，将其向右和向下移动30像素：
- en: '[PRE17]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![Translate](img/B04230_03_18.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![Translate](img/B04230_03_18.jpg)'
- en: Note
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (3.17): [http://goo.gl/W6MeSc](http://goo.gl/W6MeSc)'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (3.17): [http://goo.gl/W6MeSc](http://goo.gl/W6MeSc)'
- en: This also demonstrates applying multiple transformations within a single string
    supplied to transform. You can sequentially apply many transforms in this manner
    to handle complex modeling scenarios.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这也演示了在单个字符串中应用多个变换。你可以以这种方式连续应用多个变换来处理复杂建模场景。
- en: Note
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A common question about translate transform is why not just change the *x* and
    *y* attributes to position the elements instead of using the transform?
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 关于平移变换的一个常见问题是为什么不直接更改*x*和*y*属性来定位元素，而不是使用变换？
- en: The answer to this can be very complicated and has many reasons. The first is
    that not all SVG elements are positioned with *x* and *y* attributes, for example,
    a circle, which is positioned using its *cx* and *cy* attributes. Hence, there
    is no consistent set of attributes for positioning. Using a translate transform
    therefore allows us to have a uniform means of positioning the SVG elements no
    matter what type they are.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题的答案可能非常复杂，并且有多个原因。首先，并不是所有的SVG元素都是通过*x*和*y*属性定位的，例如，一个圆，它是通过其*cx*和*cy*属性定位的。因此，没有一组一致的属性用于定位。因此，使用平移变换可以让我们无论元素类型如何，都能有一个统一的定位方式。
- en: Another reason is that when applying multiple transforms, it is not easy (or
    possible) to access the *x* and *y* attributes. Moreover, through various transforms,
    the actual location of an SVG element may not match directly with the pixels or
    points specified in another coordinate system which using *x* and *y* attributes
    be included.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个原因是，在应用多个变换时，不容易（或不可能）访问*x*和*y*属性。此外，通过各种变换，SVG元素的实际位置可能不会直接与另一个坐标系中指定的像素或点匹配，该坐标系使用*x*和*y*属性。
- en: Scale
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缩放
- en: Scaling an object changes its apparent visual size by a given percentage along
    both the *x* and *y* axes. Scaling is performed using the `scale()` function.
    It can be uniformly applied to each axis, or you can also specify a different
    scale value for each.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 缩放对象会根据给定的百分比在*x*和*y*轴上改变其视觉大小。缩放是通过`scale()`函数实现的。它可以均匀地应用到每个轴上，或者你也可以为每个轴指定不同的缩放值。
- en: 'The following example demonstrates scaling. We will draw two rectangles, one
    atop the other. The rectangle at the bottom will be blue, and the one on top,
    red. The red will then be scaled to 50 percent of its size:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了缩放。我们将绘制两个矩形，一个叠在另一个上面。底部的矩形将是蓝色，上面的矩形是红色。然后红色将被缩放到其大小的50%：
- en: '[PRE18]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![Scale](img/B04230_03_19.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![Scale](img/B04230_03_19.jpg)'
- en: Note
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (3.18): [http://goo.gl/fCAhg7](http://goo.gl/fCAhg7)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (3.18): [http://goo.gl/fCAhg7](http://goo.gl/fCAhg7)'
- en: Groups
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分组
- en: SVG elements can be grouped together using the `<g>` tag. Any transformations
    applied to the group will be applied to each of the elements in the group. This
    is convenient for applying an overall transform to a particular group of items
    only.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: SVG元素可以使用`<g>`标签进行分组。对组应用任何变换都会应用到组中的每个元素。这对于仅对特定组的项目应用整体变换来说很方便。
- en: 'The following example demonstrates both the translation of a group of items
    (the blue rectangle with text) and the way the transform on the group affects
    both the items. Note that the `green` rectangle is not affected because it is
    not part of the transform:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了将一组项目（带文本的蓝色矩形）的转换以及组变换如何影响这些项目。请注意，`绿色`矩形不受影响，因为它不是转换的一部分：
- en: '[PRE19]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![Groups](img/B04230_03_20.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![组](img/B04230_03_20.jpg)'
- en: Note
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (3.19): [http://goo.gl/FY6q4D](http://goo.gl/FY6q4D)'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (3.19): [http://goo.gl/FY6q4D](http://goo.gl/FY6q4D)'
- en: Also notice that the placement of the text on top of the rectangle is relative
    to the top-left corner of the group, not the SVG element. This is important for
    ensuring that the text rotates properly relative to the blue rectangle.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，文本在矩形顶部的位置相对于组的左上角，而不是 SVG 元素。这对于确保文本相对于蓝色矩形正确旋转非常重要。
- en: Transparency
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 透明度
- en: SVG supports drawing of transparent elements. This can be done by either setting
    the `opacity` attribute or by using the `rgba (red-green-blue-alpha)` value when
    specifying a color.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: SVG 支持绘制透明元素。这可以通过设置 `opacity` 属性或在使用 `rgba (红-绿-蓝-透明度)` 值来指定颜色时完成。
- en: The following example renders three circles of different colors, all of which
    are 50 percent transparent. The first two use the opacity attribute, and the third
    uses a transparent color specification for the fill.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例渲染了三种不同颜色的圆圈，它们的透明度都是 50%。前两个使用不透明度属性，第三个使用透明颜色规范进行填充。
- en: '[PRE20]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '![Transparency](img/B04230_03_21.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![透明度](img/B04230_03_21.jpg)'
- en: Note
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (3.20): [http://goo.gl/xRzArg](http://goo.gl/xRzArg)'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (3.20): [http://goo.gl/xRzArg](http://goo.gl/xRzArg)'
- en: Layers
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 层
- en: 'You may have noticed that the SVG elements overlay each other in a particular
    order, with certain elements appearing to be closer and obscuring those that are
    behind. Let''s examine this using an example that overlays three circles on top
    of each other:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到 SVG 元素以特定的顺序重叠，某些元素看起来更接近并遮挡了后面的元素。让我们通过一个将三个圆圈重叠在一起的示例来检查这一点：
- en: '[PRE21]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![Layers](img/B04230_03_22.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![层](img/B04230_03_22.jpg)'
- en: Note
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (3.21): [http://goo.gl/hO4xmc](http://goo.gl/hO4xmc)'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (3.21): [http://goo.gl/hO4xmc](http://goo.gl/hO4xmc)'
- en: The blue circle is drawn in front of the green circle, which is drawn in front
    of the red circle. This order is defined by the sequence that is specified in
    the SVG markup, with each successive element being rendered atop the previous
    elements.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝色圆圈绘制在绿色圆圈之前，绿色圆圈绘制在红色圆圈之前。这个顺序是由 SVG 标记中指定的顺序定义的，每个后续元素都是在上一个元素之上渲染的。
- en: Note
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you have used other graphics packages or UI tools, you would know that they
    often provide a concept known as a Z-order, with *Z* being a pseudo-dimension
    where the drawing order of the elements is from the lowest to the highest Z-order.
    SVG does not offer this ability, but we will see in later chapters that we can
    address this by sorting the selections before laying them out.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用过其他图形包或 UI 工具，你会知道它们通常提供了一个称为 Z-顺序的概念，其中 *Z* 是一个伪维度，元素的绘制顺序是从最低到最高的 Z-顺序。SVG
    不提供这种功能，但我们在后面的章节中将会看到，我们可以在布局之前对选择进行排序来解决这个问题。
- en: Summary
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to use SVG to create various shapes, how to
    lay out the SVG elements using the SVG coordinates, and how layers affect the
    rendering. You also learned to perform transformation on SVG elements, which will
    be used frequently in examples throughout this book and form an essential part
    of creating visuals using D3.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何使用 SVG 创建各种形状，如何使用 SVG 坐标来布局 SVG 元素，以及层如何影响渲染。你还学习了在 SVG 元素上执行变换，这在本书的示例中将被频繁使用，并成为使用
    D3 创建视觉元素的基本部分。
- en: In the next chapter, we move back to a focus on D3.js, and in particular we
    will take what we have learned in this chapter with SVG and use D3 to create a
    data-driven bar graph using D3.js selections and SVG elements.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将回到 D3.js 的焦点，特别是我们将利用本章学到的 SVG 知识，使用 D3 和 SVG 元素创建数据驱动的条形图。
