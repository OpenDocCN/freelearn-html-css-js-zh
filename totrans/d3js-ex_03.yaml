- en: Chapter 3. Creating Visuals with SVG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn about **Scalable Vector Graphics**, commonly
    referred to as **SVG**. SVG is a web standard for creating vector-based graphics
    within the browser. We will begin the chapter with several basic examples of directly
    coding SVG within the browser, and in the end, examine how to use D3 to create
    SVG elements based on data.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: A brief introduction to SVG, coordinates, and attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A simple example of SVG that draws circles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Working with fundamental shapes: ellipses, rectangles, lines, and paths'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The relationship of CSS with SVG and D3.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using strokes, line caps, and dashes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fundamental transformations: rotate, translate, and scale'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grouping SVG elements and uniformly applying transforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transparency and layering of SVG elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing SVG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up to this point, we have used D3 to create new DIV elements in the DOM. While
    many great visualizations can be created using D3 and DIVs, the true expressive
    power of D3 lies in using it to create and manipulate SVG elements.
  prefs: []
  type: TYPE_NORMAL
- en: SVG is an XML markup language that has been designed to express very rich 2D
    visualizations. SVG can take advantage of the computer's graphics processor to
    accelerate rendering, and is also optimized for user interaction and animation.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of directly manipulating the pixels on the screen, SVG uses vectors
    for building a model of the presentation, and then transforms this representation
    into pixels on your behalf. This makes coding of visualizations much simpler as
    compared to other web technologies such as HTML5 Canvas.
  prefs: []
  type: TYPE_NORMAL
- en: Since the image is stored as a vector-based representation, the visualization
    of the model can be scalable. This is because all the visual elements can be easily
    scaled (both larger and smaller) without resulting in visual artifacts as a result
    of the scaling.
  prefs: []
  type: TYPE_NORMAL
- en: SVG has a convenience in that its language can be used directly within HTML
    on browsers that support SVG. D3 provides direct support and manipulation of SVG
    with D3, which feels exactly like manipulating the DOM with D3.
  prefs: []
  type: TYPE_NORMAL
- en: The SVG coordinate system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The coordinate system of SVG has an origin in the upper-left corner of the SVG
    element, which is (**0,0**); the value of *x* increases towards the right, while
    those of *y* increase towards the bottom. This is common in computer graphics
    systems, but can occasionally be confusing for those used to mathematical graphs
    where the origin is in the lower-left or dead center.
  prefs: []
  type: TYPE_NORMAL
- en: '![The SVG coordinate system](img/B04230_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: SVG attributes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SVG, while being able to seamlessly integrate with HTML, is not HTML. Specifically,
    properties and styles may operate differently. An example of this is that where
    most HTML elements have width and height elements, but not all SVG elements use
    these properties.
  prefs: []
  type: TYPE_NORMAL
- en: A second important point about SVG is that the position of an element is set
    through attributes. Due to this, it is not possible to set the position of the
    SVG elements using a style. Additionally, to change the position of an SVG element,
    such as within an animation, it is necessary to have code which sets the properties
    for positioning the element.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing circles with SVG
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We work with SVG within HTML by using an SVG tag, and placing the SVG elements
    within that tag. A very simple example is the following, which creates three circles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following image within the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Drawing circles with SVG](img/B04230_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (3.1): [http://goo.gl/UMCLtl](http://goo.gl/UMCLtl)'
  prefs: []
  type: TYPE_NORMAL
- en: The SVG element itself is not visible on the page, and only provides a holder
    for the child tags. In this book, we will always explicitly set the width and
    heights of the SVG tag. In this example, it is set to be `720` pixels wide by
    `120` pixels tall.
  prefs: []
  type: TYPE_NORMAL
- en: The positioning of a circle within an SVG element is performed by specifying
    the center `x` and `y` values of the circle. This location is relative to the
    upper-left corner of the SVG element, with positive `x` values moving to the right
    from the origin, and positive `y` values moving downwards. The size of the circle
    is specified by the `r` attribute, which indicates the radius of the circle.
  prefs: []
  type: TYPE_NORMAL
- en: The example did not specify a color for these circles, so the default color
    of the circles is black. Most SVG elements specify the color by using the CSS
    style attribute, and then by setting the `fill` attribute of the style.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following code gives different colors (red, green and blue)
    to the three circles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Drawing circles with SVG](img/B04230_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (3.2): [http://goo.gl/2k1ZIm](http://goo.gl/2k1ZIm)'
  prefs: []
  type: TYPE_NORMAL
- en: D3 selections work identically with SVG elements as they do with the DOM elements.
    As a quick example, the following selects all the circles within the selected
    `svg` tag, and sets their colors to a uniform `teal` color.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following output within the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Drawing circles with SVG](img/B04230_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (3.3): [http://goo.gl/bszmEf](http://goo.gl/bszmEf)'
  prefs: []
  type: TYPE_NORMAL
- en: The basic shapes provided by SVG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having some preliminaries out of the way, let's now examine the various SVG
    shapes that we will commonly use through the book. We have already seen how to
    create a circle; now let's look at some other shapes.
  prefs: []
  type: TYPE_NORMAL
- en: Ellipse
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A circle is a special case of an ellipse that has an identical *x* and *y*
    radii. Ellipses can and often have different size radii. An ellipse is specified
    in SVG using the `<ellipse>` tag. We still use `cx` and `cy` attributes to position
    the ellipse, but instead of using `r` for radius, we use two attributes `rx` and
    `ry` to specify the radius in the x and y directions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![Ellipse](img/B04230_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (3.4): [http://goo.gl/05QCnG](http://goo.gl/05QCnG)'
  prefs: []
  type: TYPE_NORMAL
- en: Rectangle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Rectangles are specified using the `<rect>` tag. The upper-left corner is specified
    using the `x` and `y` attributes. The `width` and `height` attributes specify
    those respective sizes for the rectangle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![Rectangle](img/B04230_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (3.5): [http://goo.gl/b3w1Rq](http://goo.gl/b3w1Rq)'
  prefs: []
  type: TYPE_NORMAL
- en: Lines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is possible to draw lines with SVG using the `<line>` tag. A line requires
    at least four attributes to be specified, and normally uses five. The first two,
    `x1` and `y1`, specify the starting position of the line. Two more attributes,
    `x2` and `y2`, specify the end point for the line. The last property, albeit not
    required, is `stroke`, which specifies the color to be used to draw the line.
    Usually, we must specify the stroke to actually see the line. Here we set it to
    `black`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Lines](img/B04230_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (3.6): [http://goo.gl/4qZejC](http://goo.gl/4qZejC)'
  prefs: []
  type: TYPE_NORMAL
- en: Paths
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Paths are one of the most powerful drawing constructs in SVG. They provide a
    symbolic notion that can be used to create many geometries. A path can be shapes
    such as circles and rectangles. Paths also provide the user the ability to create
    curves using control points.
  prefs: []
  type: TYPE_NORMAL
- en: The drawing of the path is controlled by specifying one attribute, `d`, which
    is passed a string that specifies drawing commands that will be executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic concept of a path is that you can draw a series of either straight
    or curved lines, and then have the option of filling the space inside if the shape
    is closed. For example, the following command creates a triangle filled with black
    color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Paths](img/B04230_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (3.7): [http://goo.gl/kCTbv7](http://goo.gl/kCTbv7)'
  prefs: []
  type: TYPE_NORMAL
- en: A path usually starts with an `M` command, which starts drawing at that specific
    location, in this case (`10, 10`). The next command, `L 310 10`, draws a from
    the previous point to (`310, 10`). The next command, `L 160 10`, then draws a
    line from (`310, 10`) to (`160, 10`). The final command is `Z`, which tells SVG
    that the shape is closed. Essentially, this informs SVG that there is an implicit
    line to the first position in the string of commands, in this case (`10, 10`).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that we did not specify a fill or stroke color. These default to black
    in a path.
  prefs: []
  type: TYPE_NORMAL
- en: 'The mini-language for paths is quite robust, and therefore, also complex. The
    following table lists several other common path commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Command | Purpose |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `M` | Move-to |'
  prefs: []
  type: TYPE_TB
- en: '| `L` | Line-to |'
  prefs: []
  type: TYPE_TB
- en: '| `H` | Horizontal line-to |'
  prefs: []
  type: TYPE_TB
- en: '| `V` | Veritcal line-to |'
  prefs: []
  type: TYPE_TB
- en: '| `C` | Curve-to |'
  prefs: []
  type: TYPE_TB
- en: '| `Q` | Quadractic Bezier curve-to |'
  prefs: []
  type: TYPE_TB
- en: '| `T` | Smooth quadratic Bezier curve-to |'
  prefs: []
  type: TYPE_TB
- en: '| `A` | Elliptical arc |'
  prefs: []
  type: TYPE_TB
- en: '| `Z` | Close path |'
  prefs: []
  type: TYPE_TB
- en: D3 provides a number of tools to facilitate the use of paths that make them
    much simpler to use compared to manually specifying them with string literals.
    We will examine a few of those later in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Text
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `<text>` SVG tag allows us to place text within the SVG element. The placing
    of text within an SVG is different than the way it is done in HTML. The SVG text
    items are drawn with vector graphics instead of being rasterized. Hence, text
    rendered in SVG is more flexible than the rasterized text rendered with HTML.
    Curves in letters rendered with SVG remain smooth instead of becoming pixelated
    when zoom levels are applied to the entire graphic.
  prefs: []
  type: TYPE_NORMAL
- en: Text is positioned using the `x` and `y` attributes, which specify the **baseline**
    of the text be located at `y` and the text to be left-justified to `x`, the bottom
    baseline of the text (the portion at the bottom of the main part of the letters,
    excluding the descenders) left of the text being the anchor of the positioning.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is demonstrated by the following, which also sets the font family, size
    and fill color. The actual text to be displayed is set with the inner text content
    of the tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Which renders the following in the upper-left side of the SVG element:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Text](img/B04230_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (3.8): [http://goo.gl/f89tZX](http://goo.gl/f89tZX)'
  prefs: []
  type: TYPE_NORMAL
- en: Applying CSS styles to SVG elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SVG elements can be styled identically to the way HTML elements are styled.
    The same CSS with ID and class attributes can be used to direct styles to the
    SVG elements, or you can just use the style attribute directly and specify CSS
    as its content. However, many of the actual styles in HTML differ in SVG. For
    example, SVG uses `fill` for a rectangle, whereas HTML would use background for
    a `div` tag that represents a rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we will generally try to avoid using CSS, and explicitly code
    the style attributes using the functions provided by D3.js. But many examples
    on the web do use CSS combined with SVG, so it is worth a quick mention.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example demonstrates styling SVG with CSS. The example uses two
    styles to set the fills of several rectangles. The first style will make all the
    rectangles red by default. The second one defines a style that makes all the rectangles
    with ID `willBeGreen` filled with green color. The example then creates three
    rectangles: the first two using the CSS styles, and the third using CSS within
    the style `attributeset` as fill to `blue`.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (3.9): [http://goo.gl/KAnc6j](http://goo.gl/KAnc6j)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The styles defined in the sample are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'And the rectangles are created as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting output will be as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Applying CSS styles to SVG elements](img/B04230_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Strokes, caps, and dashes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SVG shapes have an attribute known as `stroke`. The attribute `stroke` specifies
    the color of a line that outlines an SVG shape. We saw the use of stroke with
    a line, but it can be used with most of the SVG elements.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever we specify `stroke`, we usually also specify a stroke width using the
    `stroke-width` attribute. This informs SVG about the thickness (in pixels) of
    the outline that will be rendered.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate `stroke` and `stroke-width` attributes, the following example
    recreates the path from the path example, and sets a stroke to be `10` pixels
    thick, using `red` as its color. Additionally, we set the `fill` of the path to
    `blue`. We set all the attributes using the `style` property of `stroke`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding example results in the following rendering:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Strokes, caps, and dashes](img/B04230_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (3.10): [http://goo.gl/dMjdUX](http://goo.gl/dMjdUX)'
  prefs: []
  type: TYPE_NORMAL
- en: 'As we saw earlier, we can set stroke on a line. It can also have its `stroke-width`
    set. Let''s examine this by changing our line example to set the thickness of
    the line to `20` and the color to `green`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![Strokes, caps, and dashes](img/B04230_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (3.11): [http://goo.gl/p880dC](http://goo.gl/p880dC)'
  prefs: []
  type: TYPE_NORMAL
- en: Notice how this line actually looks like a rectangle. This is because lines
    have an attribute named `stroke-linecap` which describes the shape of the end
    of the line, known as the line cap.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default for this value is `butt`, which gives us the 90 degree sharp corners.
    The other values that can be used are `square` or `round`. The following example
    demonstrates the same line with all these different `stroke-linecap` values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![Strokes, caps, and dashes](img/B04230_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (3.12): [http://goo.gl/Xcaz41](http://goo.gl/Xcaz41)'
  prefs: []
  type: TYPE_NORMAL
- en: Note that for each of the three lines, we drew a line with a `stroke-width`
    of `20`, and then within each line, we drew a white line using a single path with
    three move and line commands. The white line helps in distinguishing the effect
    of the end caps on the lines.
  prefs: []
  type: TYPE_NORMAL
- en: First examine the red line. The ends are flush with the end of the white line.
    Contrast it with the green line. In this line, the line-cap, still square, extends
    past the white line by the width of the stroke. The blue line, with a round line-cap,
    is drawn using a half circle of radius of one half of the `stroke-width`.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the SVG lines are solid, but they can also be created with dashes,
    specified by using the `stroke-dasharray` attribute. This attribute is given a
    list of integer values which specify a repeating pattern of line segment widths,
    the first starting with the `stroke` color and alternating with empty space:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![Strokes, caps, and dashes](img/B04230_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (3.13): [http://goo.gl/VyBBwy](http://goo.gl/VyBBwy)'
  prefs: []
  type: TYPE_NORMAL
- en: Applying SVG transforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **S** in SVG stands for **Scalable**, while **V** stands for **Vector**.
    These are the two important parts of the name. This allows us to be able to apply
    a variety of transforms prior to the rendering of SVG shapes.
  prefs: []
  type: TYPE_NORMAL
- en: Each SVG shape is represented by one or more vectors, where a vector in SVG
    is a tuple (*x, y*) distance from an origin in the coordinate system. As an example,
    a rectangle will be represented by four 2D vectors, one for each corner of the
    rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: When creating graphical visualizations, this modeling of data with vectors has
    several benefits. One of those is that we can define a shape around a coordinate
    system for just that shape. Modeling this way allows us to make copies of the
    shape, but position them in different places in a larger image, rotate them, scale
    them, and perform many other operations beyond the scope of this text.
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, these transformations are applied on the model before being rendered
    into pixels on the screen. Because of this, SVG can ensure that irrespective of
    the level of scale applied to the image, it does not get pixelated.
  prefs: []
  type: TYPE_NORMAL
- en: Another important concept in transformations is that they can be applied in
    a chain and in any sequence. This is an extremely powerful concept in linear algebra
    for creating composite models of visuals.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are many ramifications of the transformations and their sequencing that
    can take effect on the result of the rendering in SVG. Unfortunately, an explanation
    of these is beyond the scope of the book, but when they have an effect on examples,
    we will examine them in light of that particular example.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, and in other examples in this book, we will use three general
    types of transformations provided by SVG: `translate`, `rotate`, and `scale`.
    Transformations can be applied to an SVG element by using the `transform` attribute.'
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate transforms, we will look at several examples that apply each
    transform to a rectangle to see how they affect the resulting rendering of the
    rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: Rotate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first transformation that we will examine is rotation. We can rotate an
    SVG object by a specified number of degrees using `.rotate(x)`, where `x` specifies
    the number of degrees to rotate the element.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate this, the following example rotates our rectangle by 45 degrees.
    A simple axis with two lines is rendered to give a frame of reference for the
    translation. This will be included in this code snippet, but excluded in the rest
    for brevity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding snippet gives us the folllowing result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Rotate](img/B04230_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (3.14): [http://goo.gl/vLCeHD](http://goo.gl/vLCeHD)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is not quite the effect that we may have wanted. This is because the rotation
    of a rectangle is performed around its upper-left corner. To make this appear
    to have rotated around its center, we need to use an alternate form of `rotate()`
    which takes three parameters: the angle to rotate followed by an offset from the
    upper-left corner of the rectangle to a point that represents the center of the
    rectangle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![Rotate](img/B04230_03_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (3.15): [http://goo.gl/ujF3iY](http://goo.gl/ujF3iY)'
  prefs: []
  type: TYPE_NORMAL
- en: The rectangle has now been rotated about its center, but there is an issue of
    several of the corners being clipped outside the bounds of the containing SVG
    element. We will fix this when we look at translations in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Translate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An SVG element can be repositioned within its containing element by using a
    **transformation**. A transform is performed using the `translate()` function.
    `translate()` takes two values: the distance in `x` and `y` and the distance to
    reposition the element within its parent.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example will draw our rectangle, and translate it 30 pixels to
    the right and 30 pixels down:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![Translate](img/B04230_03_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (3.16): [http://goo.gl/jANiXU](http://goo.gl/jANiXU)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s look back at the last rotation example, where two of the corners
    of the rectangle were clipped. We can fix this to see those corners by specifying
    a translation on the rectangle to move it right and down 30 pixels prior to the
    rotation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![Translate](img/B04230_03_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (3.17): [http://goo.gl/W6MeSc](http://goo.gl/W6MeSc)'
  prefs: []
  type: TYPE_NORMAL
- en: This also demonstrates applying multiple transformations within a single string
    supplied to transform. You can sequentially apply many transforms in this manner
    to handle complex modeling scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A common question about translate transform is why not just change the *x* and
    *y* attributes to position the elements instead of using the transform?
  prefs: []
  type: TYPE_NORMAL
- en: The answer to this can be very complicated and has many reasons. The first is
    that not all SVG elements are positioned with *x* and *y* attributes, for example,
    a circle, which is positioned using its *cx* and *cy* attributes. Hence, there
    is no consistent set of attributes for positioning. Using a translate transform
    therefore allows us to have a uniform means of positioning the SVG elements no
    matter what type they are.
  prefs: []
  type: TYPE_NORMAL
- en: Another reason is that when applying multiple transforms, it is not easy (or
    possible) to access the *x* and *y* attributes. Moreover, through various transforms,
    the actual location of an SVG element may not match directly with the pixels or
    points specified in another coordinate system which using *x* and *y* attributes
    be included.
  prefs: []
  type: TYPE_NORMAL
- en: Scale
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Scaling an object changes its apparent visual size by a given percentage along
    both the *x* and *y* axes. Scaling is performed using the `scale()` function.
    It can be uniformly applied to each axis, or you can also specify a different
    scale value for each.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example demonstrates scaling. We will draw two rectangles, one
    atop the other. The rectangle at the bottom will be blue, and the one on top,
    red. The red will then be scaled to 50 percent of its size:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![Scale](img/B04230_03_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (3.18): [http://goo.gl/fCAhg7](http://goo.gl/fCAhg7)'
  prefs: []
  type: TYPE_NORMAL
- en: Groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SVG elements can be grouped together using the `<g>` tag. Any transformations
    applied to the group will be applied to each of the elements in the group. This
    is convenient for applying an overall transform to a particular group of items
    only.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example demonstrates both the translation of a group of items
    (the blue rectangle with text) and the way the transform on the group affects
    both the items. Note that the `green` rectangle is not affected because it is
    not part of the transform:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![Groups](img/B04230_03_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (3.19): [http://goo.gl/FY6q4D](http://goo.gl/FY6q4D)'
  prefs: []
  type: TYPE_NORMAL
- en: Also notice that the placement of the text on top of the rectangle is relative
    to the top-left corner of the group, not the SVG element. This is important for
    ensuring that the text rotates properly relative to the blue rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: Transparency
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SVG supports drawing of transparent elements. This can be done by either setting
    the `opacity` attribute or by using the `rgba (red-green-blue-alpha)` value when
    specifying a color.
  prefs: []
  type: TYPE_NORMAL
- en: The following example renders three circles of different colors, all of which
    are 50 percent transparent. The first two use the opacity attribute, and the third
    uses a transparent color specification for the fill.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '![Transparency](img/B04230_03_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (3.20): [http://goo.gl/xRzArg](http://goo.gl/xRzArg)'
  prefs: []
  type: TYPE_NORMAL
- en: Layers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You may have noticed that the SVG elements overlay each other in a particular
    order, with certain elements appearing to be closer and obscuring those that are
    behind. Let''s examine this using an example that overlays three circles on top
    of each other:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '![Layers](img/B04230_03_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (3.21): [http://goo.gl/hO4xmc](http://goo.gl/hO4xmc)'
  prefs: []
  type: TYPE_NORMAL
- en: The blue circle is drawn in front of the green circle, which is drawn in front
    of the red circle. This order is defined by the sequence that is specified in
    the SVG markup, with each successive element being rendered atop the previous
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have used other graphics packages or UI tools, you would know that they
    often provide a concept known as a Z-order, with *Z* being a pseudo-dimension
    where the drawing order of the elements is from the lowest to the highest Z-order.
    SVG does not offer this ability, but we will see in later chapters that we can
    address this by sorting the selections before laying them out.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to use SVG to create various shapes, how to
    lay out the SVG elements using the SVG coordinates, and how layers affect the
    rendering. You also learned to perform transformation on SVG elements, which will
    be used frequently in examples throughout this book and form an essential part
    of creating visuals using D3.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we move back to a focus on D3.js, and in particular we
    will take what we have learned in this chapter with SVG and use D3 to create a
    data-driven bar graph using D3.js selections and SVG elements.
  prefs: []
  type: TYPE_NORMAL
