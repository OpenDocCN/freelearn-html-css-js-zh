["```js\nExt.onReady(function() {\n    Ext.create('MyApp.store.Customer');\n    Ext.create('MyApp.store.QuotationItem');\n    Ext.create('MyApp.store.Quotation');\n    Ext.create('MyApp.view.quotation.Quotation', {\n        activeItem: 0,\n     ...\n```", "```js\nExt.define('MyApp.store.Quotation', {\n    extend: 'Ext.data.Store',\n    storeId: 'QuotationList',\n    model: 'MyApp.model.Quotation',\n    remoteSort: true,\n    pageSize: 100,\n    proxy: {\n        type: 'direct',\n        directFn: 'MyAppQuotation.getGrid',\n        reader: {\n            type: 'json',\n            root: 'items',\n            totalProperty: 'total'\n        }\n    }\n});\n```", "```js\n<?php\n$API = array(\n    ....\n    'MyAppQuotation'=>array(\n        'methods'=>array(\n            ....\n            'getGrid'=>array(\n                'len'=>1\n            )\n        )\n    ),\n    ....\n);\n```", "```js\nExt.define('MyApp.view.quotation.List', {\n  ...\n    initComponent: function() {\n        var me = this;\n        Ext.apply(me, {\n            columns: [{\n                text: 'Customer',\n                dataIndex: 'customer',\n                flex: 1\n            }, {\n                text: 'Modified',\n                dataIndex: 'modified',\n                width: 120\n            }, {\n                text: 'Created',\n                dataIndex: 'created',\n                width: 120\n            }]\n        });\n        me.callParent(arguments);\n    }\n});\n```", "```js\nExt.define('MyApp.view.quotation.List', {\n    ....\n    initComponent: function() {\n        var me = this;\n        Ext.apply(me, {\n            tbar: [{\n                text: 'Add',\n                disabled: true,\n                action: 'add'\n            }, {\n                text     : 'Edit',\n                disabled : true,\n                action   : 'edit'\n            }, {\n                text     : 'Remove',\n                disabled : true,\n                action   : 'remove'\n            }, '-', {\n                text     : 'Refresh',\n                disabled : true,\n                action   : 'refresh'\n            }]\n        });\n    ....\n```", "```js\nExt.define('MyApp.form.SearchField', {\n    extend: 'Ext.form.field.Trigger',\n    alias: 'widget.myapp-searchfield',\n    trigger1Cls: Ext.baseCSSPrefix + 'form-clear-trigger',\n    trigger2Cls: Ext.baseCSSPrefix + 'form-search-trigger',\n    hasSearch : false,\n    paramName : 'query',\n    initComponent: function() {\n        var me = this;\n        me.callParent(arguments);\n        me.on('specialkey', function(f, e){\n            if(e.getKey() == e.ENTER) {\n                me.onTrigger2Click();\n            }\n        });\n    },\n    afterRender: function() {\n        this.callParent();\n        this.triggerCell.item(0).setDisplayed(false);\n    },\n    onTrigger1Click : function() {\n        var me = this;\n        if(me.hasSearch) {\n            me.setValue('');\n            me.hasSearch = false;\n            me.triggerCell.item(0).setDisplayed(false);\n            location.href = me.urlRoot;\n        }\n    },\n    onTrigger2Click : function() {\n        var me = this,\n            value = me.getValue();\n        if(value.length > 0) {\n            me.triggerCell.item(0).setDisplayed(true);\n            location.href = Ext.String.format('{0}q={1}', me.urlRoot, \n            value);\n        }\n    }\n});\n```", "```js\n       ....\n    initComponent: function() {\n        var me = this;\n        Ext.apply(me, {\n            tbar: [{\n                ....\n            }, '->', {\n                xtype    : 'myapp-searchfield',\n                disabled : true,\n                width    : 150\n            }],\n            bbar: {\n                xtype       : 'pagingtoolbar',\n                displayInfo : true \n            }\n    ....\n```", "```js\nExt.define('MyApp.view.quotation.List', {\n    ....\n    requires: [\n        'MyApp.form.SearchField',\n        'Ext.selection.CheckboxModel'\n    ],\n    initComponent: function() {\n        var me = this;\n        Ext.apply(me, {\n            selModel: Ext.create('Ext.selection.CheckboxModel')\n        });\n        Ext.apply(me, {\n            tbar: [{\n                text: 'Add',\n                ....\n```", "```js\n...\nExt.application({\n  ...\n    controllers: [\n        'quotation.Quotation',\n        'quotation.Edit',\n        'quotation.List'\n    ],\n    launch: function() {\n        var panel = Ext.create('MyApp.view.quotation.Quotation', {\n           width: 800,\n           height: 600,\n           activeItem: 0,\n           renderTo: Ext.getBody()\n        });\n        Ext.util.Observable.capture(panel, function() {\n            console.log(arguments);\n        });\n        Ext.widget('button', {\n            text: 'fire myapp-show',\n            renderTo: Ext.getBody(),\n            scope: this,\n            handler: function() {\n                this.getController('quotation.Quotation').loadIndex('#!/quotation');\n            }\n        });\n    }\n});\n```", "```js\nExt.define('MyApp.controller.quotation.List', {\n    extend: 'MyApp.controller.Abstract',\n    stores: [\n        'Quotation'\n    ],\n    refs: [{\n        ref: 'listView', selector: 'myapp-quotation-list' \n    }],\n    init: function() {\n        var me = this;\n        me.control({\n            'myapp-quotation-list': {\n                'myapp-show': me.onShow\n            },\n    ...\n    },\n    onShow: function(p, owner, params) {\n        var me          = this,\n            listView    = me.getListView(),\n            btnAdd      = listView.down('button[action=add]'),\n            btnEdit     = listView.down('button[action=edit]'),\n            btnRemove   = listView.down('button[action=remove]'),\n            btnRefresh  = listView.down('button[action=refresh]'),\n            fieldSearch = listView.down('myapp-searchfield'),\n            query       = params.q;\n        btnAdd.disable();\n        btnEdit.disable();\n        btnRemove.disable();\n        btnRefresh.disable();\n        if(query) {\n            fieldSearch.setValue(query);\n            fieldSearch.triggerCell.item(0).setDisplayed(true);\n            fieldSearch.hasSearch = true;\n        }\n        fieldSearch.urlRoot = '#!/quotation/';\n        fieldSearch.disable();\n        listView.getStore().load({\n            params: {\n                query: query\n            },\n            callback: function(records, operation, success) {\n                btnAdd.enable();\n                btnRefresh.enable();\n                fieldSearch.enable();\n            }\n        });\n    },\n  ...\n});\n```", "```js\nExt.define('MyApp.view.quotation.List', {\n    ....\n    initComponent: function() {\n        var me = this,\n            store = me.getStore();\n        if(!store) {\n            store = Ext.create('MyApp.store.Quotation');\n            me.store = store;\n        }\n        Ext.apply(me, {\n        ....\n```", "```js\n  ...\n            }, {\n                text: 'Address',\n                dataIndex: 'addr',\n                flex: 1\n            }, {\n                text: 'Note',\n                dataIndex: 'note',\n                flex: 1\n            }, {\n    ...\n```", "```js\nExt.define('MyApp.controller.quotation.List', {\n    ....\n    onItemAdd: function() {\n        var me          = this,\n            listView    = me.getListView();\n        listView.fireEvent('myapp-add');\n    },\n```", "```js\nExt.define('MyApp.controller.quotation.Quotation', {\n    ....\n    init: function() {\n        var me = this,\n            format = Ext.String.format;\n        me.control({\n            'myapp-quotation-list': {\n                'myapp-add': function() {\n                    location.href = format('#!/{0}/new', \n                    me.screenName);\n                }\n            },\n    ....\n```", "```js\n        me.control({\n            ....\n            'myapp-quotation-edit button[action=save]': {\n                'click': me.onSave\n            }\n        });\n```", "```js\n    ...\n onSave: function() {\n        var me      = this,\n            p       = me.getEditView(),\n            form    = p.getForm(),\n            format  = Ext.String.format,\n            id;\n        p.setLoading();\n        form.submit({\n            success: function(form, action) {\n                if(action.result.newid) {\n                    p.fireEvent('myapp-list-reload');\n                    location.href = format('#!/quotation/id={0}', \n                    action.result.newid);\n                    return;\n                }\n                p.setLoading(false);\n                form.load({\n                    params: {\n                        id: form.getValues()['id']\n                    },\n                    success: function(form, ret) {\n                        p.fireEvent('myapp-loadform', p, ret);\n                        p.fireEvent('myapp-undirty');\n                        p.setLoading(false);\n                    },\n                    failure: function() {\n                        p.setLoading(false);\n                    }\n                });\n            },\n            failure: function(form, action) {\n                p.setLoading(false);\n            }\n        });\n    },\n```", "```js\n<?php\nclass MyAppQuotation {\n  public function readForm($id) {\n```", "```js\nExt.define('MyApp.view.quotation.Edit', {\n    ....\n    paramOrder: ['id'],\n    ....\n```", "```js\n            ....\n            'myapp-quotation-list': {\n                'myapp-show': me.onShow,\n                'select': me.onSelect,\n                'itemdblclick': me.onItemDblClick,\n                'deselect': me.onDeselect\n            },\n            ....\n```", "```js\nonSelect\nonSelect: function() {\n    var me = this,\n        listView = me.getListView(),\n        btnEdit = listView.down('button[action=edit]'),\n        btnRemove = listView.down('button[action=remove]'),\n        sm = listView.getSelectionModel(),\n        cnt = sm.getCount();\n    if(cnt === 1) {\n        btnEdit.enable();\n    } else {\n        btnEdit.disable();\n    }\n    if(cnt > 0) {\n        btnRemove.enable();\n    } else {\n        btnRemove.disable();\n    }\n},\n\nonDeselect\nonDeselect: function() {\n    var me = this,\n        listView = me.getListView(),\n        btnEdit = listView.down('button[action=edit]'),\n        btnRemove = listView.down('button[action=remove]'),\n        sm = listView.getSelectionModel(),\n        cnt = sm.getCount();\n    if(cnt === 1) {\n        btnEdit.enable();\n    } else {\n        btnEdit.disable();\n    }\n    if(cnt > 0) {\n        btnRemove.enable();\n    } else {\n        btnRemove.disable();\n    }\n}\n```", "```js\nonItemDblClick\nonItemDblClick: function(p, record, item, index, e, eOpts) {\n    var me          = this,\n        listView    = me.getListView();\n    listView.fireEvent('myapp-edit', record.data.id);\n},\n```", "```js\nonItemEdit\nonItemEdit: function() {\n    var me = this,\n        listView = me.getListView(),\n        sm = listView.getSelectionModel(),\n        record = sm.getLastSelected();\n    listView.fireEvent('myapp-edit', record.data.id);\n},\n```", "```js\nExt.define('MyApp.controller.quotation.Quotation', {\n    ....\n    init: function() {\n        var me = this,\n            format = Ext.String.format;\n        me.control({\n            'myapp-quotation-list': {\n                'myapp-add': function() {\n                    location.href = format('#!/{0}/new', \n                    me.screenName);\n                },\n                'myapp-edit': function(itemid) {\n                    var query = this.requestParams.q;\n                    if(query) {\n                        location.href = format('#!/{0}/id={1}/q={2}', \n                        me.screenName, itemid, query);\n                    } else {\n                        location.href = format('#!/{0}/id={1}', \n                        me.screenName, itemid);\n                    }\n                }\n            }\n        });\n```", "```js\nme.requestParams = params = o;\n```", "```js\nonItemRemove: function() {\n    var me          = this,\n        listView    = me.getListView(),\n        sm          = listView.getSelectionModel(),\n        records     = sm.getSelection();\n    Ext.MessageBox.confirm(\n        'Remove Confirm',\n        'May I delete that?',\n        function(ret) {\n            if(ret === 'yes') {\n                listView.fireEvent('myapp-remove', records);\n            }\n        }\n    );\n},\n```", "```js\nonRemove: function(records) {\n    var me = this,\n        format = Ext.String.format,\n        listView = me.getListView(),\n        ids = [];\n    if(!Ext.isArray(records)) {\n        records = [records];\n    }\n    Ext.iterate(records, function(r) {\n        if(r.get) {\n            ids.push(r.get('id'));\n        } else {\n            ids.push(r);\n        }\n    });\n    listView.mask();\n    MyAppQuotation.removeItems(ids, function() {\n        me.getController(\n            format(\n                '{0}.List',\n                me.screenName.split('-').join('.')\n            )\n        ).onStoreRefresh();\n    listView.unmask();\n    });\n}\n```", "```js\nExt.define('MyApp.controller.quotation.List', {\n    ....\n    onStoreRefresh: function() {    },\n    ....\n```", "```js\nExt.define('MyApp.view.quotation.List', {\n    ....\n    initComponent: function() {\n        ....\n        Ext.apply(me, {\n            ....\n            bbar: {\n                xtype       : 'pagingtoolbar',\n                store       : store,\n                displayInfo : true \n            }\n        ....\n```", "```js\n        ....\n            'ON',\n            '    customers.id = quotation.customer',\n            'WHERE',\n            '    quotation.status = 1'\n        ));\n        $query = explode(' ', @$cond->query);\n        foreach($query as $q) {\n            if($q != '') {\n                $sql .= ' ' . implode(\" \\n \", array(\n                    'AND (',\n                    '    customers.name like \\'%' . $q . '%\\'',\n                    '    OR',\n                    '    customers.addr1 like \\'%' . $q . '%\\'',\n                    '    OR',\n                    '    customers.`addr2` like \\'%' . $q . '%\\'',\n                    '    OR',\n                    '    quotation.`note` like \\'%' . $q . '%\\'',\n                    ')'\n                ));\n            }\n        }\n        ....\n```"]