["```js\nWhen I navigate to the \"/birthdays\" page\n```", "```js\nWhen(\n  'I navigate to the {string} page',\n  async function (url) { ... }\n);\n```", "```js\n    Feature: Editing a birthday\n      Scenario: Correcting the year of birth\n        Given An existing birthday for \"Hercules\" on\n          \"1992-03-04\"\n        When I navigate to the \"/birthdays\" page\n        And I edit the birthday for \"Hercules\" to be\n          \"1994-04-06\"\n        Then the birthday for \"Hercules\" should show\n          \"1994-04-06\"\n        And the text \"1992-03-04\" should not appear on the\n          page\n    ```", "```js\n    npm install --save-dev @cucumber/cucumber\n    ```", "```js\n    Failures:\n    1) Scenario: Correcting the year of birth #\n         features/birthdays.feature:2\n       ? Given An existing birthday for \"Hercules\" on\n         \"1992-03-04\"\n       Undefined. Implement with the following snippet:\n         Given('An existing birthday for {string} on\n         {string}', function (string, string2) {\n            // Write code here that turns the phrase above\n                 into concrete actions\n               return 'pending';\n         });\n    ```", "```js\n    import * as childProcess from 'child_process';\n    import {\n      setWorldConstructor\n    } from '@cucumber/cucumber';\n    ```", "```js\n    const removeAnsiColorCodes = (string) =>\n      string.replace(/\\x1b\\[[0-9;]+m/g, '');\n    ```", "```js\n    class PlaywrightWorld {\n      async launchServer() {\n        console.log('launching server');\n        this.serverProcess = childProcess.spawn(\n          config.webServer.command,\n          [],\n          { shell: true, env: config.webServer.env }\n        );\n        this.baseUrl = await new Promise((resolve) => {\n          this.serverProcess.stdout.on('data', (data) => {\n          let text = removeAnsiColorCodes(String(data));\n          let match = text.match(\n            /http[s]?:\\/\\/[a-z]+:[0-9]+\\//\n          );\n          if (match) {\n            resolve(match[0]);\n          }\n        });\n        console.log(`started at ${this.baseUrl}`);\n      }\n    }\n    setWorldConstructor(PlaywrightWorld);\n    ```", "```js\nnpm run build && npm run preview\n```", "```js\n    class PlaywrightWorld {\n      async launchServer() {\n        console.log('launching server');\n        this.serverProcess = childProcess.spawn(...);\n        this.serverProcess.stderr.on('data', (data) => {\n          const trimmed = String(data).trim();\n          if (trimmed !== '') {\n            console.log(trimmed);\n          }\n        });\n        ...\n        console.log(`started at ${this.baseUrl}`);\n      }\n    ```", "```js\n    npm install --save-dev tree-kill-promise\n    ```", "```js\n    import kill from 'tree-kill-promise';\n    ```", "```js\n    class PlaywrightWorld {\n      ...\n      killServer() {\n        await kill(this.serverProcess.pid);\n      }\n    }\n    ```", "```js\n    import { chromium, request } from '@playwright/test';\n    ```", "```js\n    class PlaywrightWorld {\n      ...\n      async launchBrowser() {\n        this.browser = await chromium.launch();\n        this.context = await this.browser.newContext({\n          baseURL: this.baseUrl\n        });\n        this.request = await request.newContext({\n          baseURL: `${this.baseUrl}api/`\n        });\n        this.page = await this.context.newPage();\n      }\n      async closeBrowser() {\n        await this.browser.close();\n      }\n    }\n    ```", "```js\n    import { Before, After } from '@cucumber/cucumber';\n    Before(async function () {\n      await this.launchServer();\n      await this.launchBrowser();\n    });\n    After(async function () {\n      await this.killServer();\n      this.closeBrowser();\n    });\n    ```", "```js\n    import {\n      Given,\n      When,\n      Then\n    } from '@cucumber/cucumber';\n    ```", "```js\n    Given(\n      'An existing birthday for {string} on {string}',\n      async function (name, dob) {\n        await this.request.post('birthdays', {\n          data: { name, dob },\n          failOnStatusCode: true\n        });\n      }\n    );\n    ```", "```js\n    When(\n      'I navigate to the {string} page',\n      async function (url) {\n        await this.page.goto(url);\n      }\n    );\n    ```", "```js\n    import {\n      BirthdayListPage\n    } from '../../tests/BirthdayListPage.js';\n    ```", "```js\n    When(\n      'I edit the birthday for {string} to be {string}',\n      async function (name, dob) {\n        const birthdayListPage = new BirthdayListPage(\n          this.page\n        );\n        await birthdayListPage.beginEditingFor(name);\n        await birthdayListPage\n          .dateOfBirthField()\n          .fill(dob);\n        await birthdayListPage.saveButton().click();\n      }\n    );\n    ```", "```js\n    import { expect } from '@playwright/test';\n    ```", "```js\n    Then(\n      'the birthday for {string} should show {string}',\n      async function (name, dob) {\n        const birthdayListPage = new BirthdayListPage(\n          this.page\n        );\n        await expect(\n          birthdayListPage.entryFor(name)\n        ).toContainText(dob);\n      }\n    );\n    ```", "```js\n    Then(\n      'the text {string} should not appear on the page',\n      async function (text) {\n        await expect(\n          this.page.getByText(text)\n        ).not.toBeVisible();\n      }\n    );\n    ```", "```js\n    work/birthdays % npx @cucumber/cucumber\n    launching server\n    started at http://localhost:4173/\n    .......\n    1 scenario (1 passed)\n    5 steps (5 passed)\n    ```"]