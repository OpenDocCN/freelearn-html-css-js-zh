- en: Building a RESTful API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: CRUD operations using ExpressJS' route methods
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CRUD operations with Mongoose
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Mongoose query builders
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining document instance methods
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining static model methods
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing middleware functions for Mongoose
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing custom validators for Mongoose's schemas
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a RESTful API to manage users with ExpressJS and Mongoose
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will be required to have an IDE, Visual Studio Code, Node.js and MongoDB.
    You will also need to install Git, in order use the Git repository of this book.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 'The code files of this chapter can be found on GitHub:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/MERN-Quick-Start-Guide/tree/master/Chapter03](https://github.com/PacktPublishing/MERN-Quick-Start-Guide/tree/master/Chapter03)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[https://goo.gl/73dE6u](https://goo.gl/73dE6u)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Representation State Transfer** (**REST**) is an architectural style that
    the web was built on. More specifically, the HTTP 1.1 protocol standards were
    built using the REST principles. REST provides a representation of a resource.
    **URLs** (**Uniform Resource Locator**) are used to define the location of a resource
    and tell the browser where it is located.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: A RESTful API is a web service API that adheres to this architectural style.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'The most commonly used HTTP verbs or methods are: `POST, GET, PUT,` and `DELETE`.
    These methods are the basis for persistent storage and are known as **CRUD** operations
    (**Create, Read, Update, and Delete**).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, the recipes will be focused on building a RESTful API using
    the REST architectural style with ExpressJS and Mongoose.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: CRUD operations using ExpressJS' route methods
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'ExpressJS'' router has equivalent methods to handle HTTP methods. In other
    words, the HTTP methods `POST`, `GET`, `PUT`, and `DELETE` can be handled by this
    code:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It''s good to think of every URL as a noun and because of that a verb can act
    on it. In fact, HTTP methods are also known as HTTP verbs. If we think about them
    as verbs, when a request is made to our RESTful API, they can be understood as:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Post a user
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get a user
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update a user
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete a user.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the **MVC** (**model-view-controller**) architectural pattern, controllers
    are in charge of transforming input to something a model or view can understand.
    In other words, they transform input into actions or commands and sends them to
    the model or view to update accordingly.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: ExpressJS' route methods usually act as controllers. They just get input from
    a client such as a request from the browser, and then converts the input to actions.
    These actions are then sent to the model, which is the business logic of your
    application, such as a mongoose model, or to a view (a ReactJS client application)
    to update.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Keeping in mind that we can invoke an action over a resource using HTTP methods,
    we will see how to build a RESTful API web service based on those concepts. Before
    you start, create a new `package.json` file with the following code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, install the dependencies by opening a terminal and running this line
    of code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How to do it...
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Build a RESTful API with an in-memory database or an array of objects that
    will contain a list of users. We will allow CRUD operations using HTTP methods
    to add a new user, get a user or list of users, update a user''s data, and delete
    a user:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `restfulapi.js`
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the packages that we need and create an ExpressJS application:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Define an in-memory database:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a model which will contain functions for making CRUD operations:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add a request handler for the `post` method that will be used as a `Create`
    operation. A new user will be added to the `data` array:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add a request handler for the `get` method that will be used as a `Read` or
    `Retrieve` operation. If an `id` is given, look for the user in the `data` array.
    However, If the given `id` is `"all"`, it will return the whole list of users:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add a request handler for the `put` method that will be used as an `Update`
    operation. An `id` needs to be provided in order to update a specific user in
    the `data` array:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add a request handler for the `delete` method that will be used as a `Delete`
    operation. It will look for the user in the `data` array and remove it:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Start your application listening on port `1337` for new connections:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Save the file.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a Terminal and run this code:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Let's test it...
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To make it simple, create a script that will request and make CRUD operations
    on our RESTful API server:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `test-restfulapi.js`.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Save the file.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a new Terminal and run this code:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works...
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our RESTful API application will be running locally on port `1337`. When running
    the test code, it will connect to it and make several requests using different
    HTTP methods to create a user, retrieve a user, update a user, and delete a user.
    All the operations will be logged in the Terminal.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: 'If you prefer to test it yourself, you can replace all the code inside the
    `test` function, and use the `r` function to make custom requests. For instance,
    to create a new user called `Smith`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: CRUD operations with Mongoose
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of many reasons why developers opt to use Mongoose instead of the official
    MongoDB driver for Node.js is that it allows you to create data structures with
    ease by using schemas and also because of the built-in validation. MongoDB is
    a document-oriented database, meaning that the structure of the documents varies.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: In the MVC architectural pattern, Mongoose is often used for creating models
    that shape or define data structures.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how a typical Mongoose schema would be defined and then compiled into
    a model:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Model names should be in singular since Mongoose will make them plural and lowercase
    them when saving the collection to the database. For instance, if the model is
    named "User", it will be saved as a collection named "users" in MongoDB. Mongoose
    includes an internal dictionary to pluralize common names. That means if your
    model's name is a common name, such as "Person", it will be saved in MongoDB as
    a collection named "people".
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'Mongoose allows the following types to define a schema''s path or document
    structure:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: String
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boolean
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Array
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Date
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buffer
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mixed
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Objectid
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decimal128
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A schema type can be declared by using directly the global constructor function
    for `String`, `Number`, `Boolean`, `Buffer`, and `Date`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'These schema types are also available under an object called `SchemaTypes`
    in the exported `mongoose` object:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Schema types can be declared using an object as a property that gives you more
    control over the specific schema type. Take the following code, for example:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Schema types can also be arrays. For instance, if we want a field to define
    what are the things the user likes in an array of strings, you could use this
    code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: To learn more about schema types, visit the official Mongoose documentation
    website: [http://mongoosejs.com/docs/schematypes.html](http://mongoosejs.com/docs/schematypes.html).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will see how to define a schema and perform CRUD operation
    on the database collection. First, ensure that you have MongoDB installed and
    it''s running. As an alternative, if you prefer, a MongoDB **DBaaS** (**Database
    as a Service**) instance in the cloud will also do. Before you start, create a
    new `package.json` file with the following code:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then, install the dependencies by opening a Terminal and running this code:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How to do it...
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Define a user schema that will contain user''s first name, last name, and an
    array of strings that define the things the user likes:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `mongoose-models.js`
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the Mongoose NPM module. Then, create a connection to MongoDB:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Define a schema:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Compile the schema into a model:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Define a function that will be used for adding new users:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Define a function that will be used for retrieving a user from the collection
    of users by its `id`:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Define a function that will remove the user from the collection of users by
    its `id`:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Define an event listener that will perform CRUD operations once the there is
    a connection to the database. First, add a new user and save it. Then, retrieve
    the same user using its `id`. Next, modify the user''s properties and save it.
    Finally, remove the user from the collection by its `id`:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Save the file.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a Terminal and run this code:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Executing the previous command in the Terminal, if successful, would display
    something similar to the following, for instance, a code such as this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: See also
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing NPM Packages*'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing MongoDB*'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Mongoose query builders
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every Mongoose model has static helper methods to do several kinds of operations,
    such as retrieving a document. When a callback is passed to these helper methods,
    the operation is executed immediately:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Otherwise, if there is no defined callback, a *query builder interface* is
    returned, which can be later executed:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Queries also have a `.then` function which can be used as a `Promise`. When
    `.then` is called, it first executes the query internally with `.exec` which then
    returns a `Promise`. This allows us to use `async/await` as well. Inside a `async`
    function, for instance:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'There are two ways that we can make a query. One is by providing a JSON object
    that is used as a condition and the other way allows you to create a query using
    chaining syntax. The chaining syntax will feel more comfortable to developers
    who are more familiar with SQL databases. For example:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Getting ready
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will build up queries using chaining syntax and using `async/await`
    functions. First, ensure that you have MongoDB installed and it''s running. As
    an alternative, if you prefer, a MongoDB DBaaS instance in the cloud will also
    do. Before you start, create a new `package.json` file with the following code:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Then, install the dependencies by opening a Terminal and running:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How to do it...
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new file named `chaining-queries.js`
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the Mongoose NPM module. Then, create a new connection:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Define a schema:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Compile the schema into a model:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Once connected to the database, add a new document to the collection of users.
    Then, using chaining syntax, query for the recently created user. Additionally,
    use the `select` method to restrict which fields are retrieved from the document:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Save the file
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a Terminal and run:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: See also
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing NPM Packages*'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing MongoDB*'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining document instance methods
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Documents have their own built-in instance methods such as `save` and `remove`.
    However, we can write our own instance methods as well.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: 'Documents are instances of models. They can be explicitly created:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Or they can be the result of a query:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Document instance methods are defined in the schema. All schemas have a method
    called `method` which allows you to define custom instance methods.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will define a schema and custom document instance methods
    for modifying and reading document properties. First, ensure that you have MongoDB
    installed and it''s running. As an alternative, if you prefer, a MongoDB DBaaS
    instance in the cloud will also do. Before you start, create a new `package.json`
    file with the following code:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Then, install the dependencies by opening a Terminal and running this code:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: How to do it...
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new file named `document-methods.js`
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the Mongoose NPM module. Then, create a new connection to MongoDB:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Define a schema:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Define a document instance method for setting a user''s first name and last
    name from a string containing their full name:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Define a document instance method for getting a user''s full name concatenating
    the `firstName` and `lastName` properties:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Define a document instance method named `loves` that will expect one argument
    that will add to the `likes` array of strings:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Define a document instance method named `dislikes` which will remove one thing
    previous liked by the user from the `likes` array:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Compile the schema into a model:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Once Mongoose is connected to the database, create a new user and use `setFullName`
    method to populate the fields `firstName` and `lastName`, then use the `loves`
    method to populate the `likes` array. Next, use chaining syntax to query for the
    user in the collection and use the `dislikes` method to remove `"snakes"` from
    the `likes` array:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Save the file.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a Terminal and run this code:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: There's more...
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Document instance methods can also be defined using the `methods`, schema property.
    For instance:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: See also
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing NPM Packages*'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing MongoDB*'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining static model methods
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Models have built-in static methods such as `find`, `findOne`, and `findOneAndRemove`.
    Mongoose allow us to define custom static model methods as well. Static model
    methods are defined in the schema in the same way as document instance methods
    are.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Schemas have a property called `statics` which is an object. All the methods
    defined inside the `statics` object are passed to the model. Static model methods
    can also be defined by calling the `static` schema method.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will define a schema and custom static model method for
    expanding your model''s capabilities. First, ensure that you have MongoDB installed
    and it''s running. As an alternative, if you prefer, a MongoDB DBaaS instance
    in the cloud will also do. Before you start, create a new `package.json` file
    with the following code:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Then, install the dependencies by opening a Terminal and running:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: How to do it...
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Define a static model method called `getByFullName` that will allow you to
    search for a specific user using their full name:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `static-methods.js`
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the Mongoose NPM module and create a new connection to your MongoDB:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Define a schema:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Define `getByFullName` static model method:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Compile the schema into a model:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Once connected, create a new user and save it. Then, use the `getByFullName`
    static model method to look for the user in the collection of users using their
    full name:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Save the file
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a Terminal and run this code:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: There's more...
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Static model methods can also be defined using the `statics` schema property.
    For instance:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: See also
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing NPM Packages*'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing MongoDB*'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing middleware functions for Mongoose
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Middleware functions in Mongoose are also called `hooks`. There are two types
    of hooks `pre hooks` and `post hooks`.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: 'The difference, between `pre hooks` and post hooks, is pretty simple. `pre
    hooks` are called before a method is called, and `post hooks` are called after.
    For example:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'And later on, once the connection is made to the database, within an `async`
    function:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Once the `save` method is called, the `pre hook` is executed first. After the
    document is saved, the `post hook` is then executed. In the previous example,
    it will display in the Terminal output the following text:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'There are four different types of middleware functions in Mongoose: document
    middleware, model middleware, aggregate middleware, and query middleware. All
    of them are defined on the schema level. The difference is, when the hooks are
    executed, the context of`this` refers to the document, model, the aggregation
    object, or the query object.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: All types of middleware support pre and post hooks
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we will see how three of these types of middleware functions
    work in Mongoose:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: Document middleware
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Model middleware
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query middleware
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'First, ensure that you have MongoDB installed and it''s running. As an alternative,
    if you prefer, a MongoDB DBaaS instance in the cloud will also do. Before you
    start, create a new `package.json` file with the following code:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Then, install the dependencies by opening a Terminal and running:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: How to do it...
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In document middleware functions, the context of `this` refers to the document.
    A document has the following built-in methods and you can define `hooks` for them:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '`init`: This is called internally, immediately after a document is returned
    from MongoDB. Mongoose uses setters for marking the document as modified or which
    fields of the document were modified. `init` initializes the document without
    setters.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`validate`: This executes built-in and custom set validation rules for the
    document.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`save`: This saves the document in the database.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`remove`: This removes the document from the database.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Document middleware functions
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create `pre` and `post` hooks for the document built-in methods:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `1-document-middleware.js`
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the Mongoose NPM module and create a new connection to your MongoDB:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Define a schema:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Add a `pre` and `post` hook for the `init` document method:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Add a `pre` and `post` hook for the `validate` document method:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Add a `pre` and `post` hook for the `save` document method:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Add a `pre` and `post` hook for the `remove` document method:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Compile the schema into a model:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Once a new connection is established, create a document and perform some basic
    operations such as saving, retrieving, and deleting the document:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Save the file
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a Terminal and run:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'On the terminal, the output should display:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: When you save a document, it first triggers the `validation` hooks that ensure
    that the fields pass the rules set by built-in validation rules or custom rules.
    In your code, the fields are marked as required. Then it will trigger the `save`
    hooks. After, using a model method to retrieve the recently created user from
    the database, once the document is retrieved, it triggers the `init` hooks. Finally,
    removing the document from the database triggers the `remove` hooks.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the hooks, you can interact with the document. For instance, the following
    `save` pre hook will modify the fields `firstName` and `lastName` to make them
    upper-cased strings:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'The same way, we can throw an error within the hook to prevent the next ones
    from being executed. For instance:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Query middleware functions are defined exactly as document middleware functions
    are. However, the context of `this` doesn''t not refer to the document but instead
    to the query object. Query middleware functions are only supported in the following
    model and query functions:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: '`count`: Counts the number of document that match a specific query condition'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`find`: Returns an array of documents that match a specific query condition'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`findOne`: Return a document that matches a specific query condition'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`findOneAndRemove`: Similar to `findOne`. However, after a document is found,
    it is removed'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`findOneAndUpdate`: Similar to `findOne` but once a document matching a specific
    query condition is found, the document can also be updated'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`update`: Update one or more documents that match a certain query condition'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query middleware functions
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create pre and post hooks for query built-in methods:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `2-query-middleware.js`
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the Mongoose NPM module and create a new connection to your MongoDB:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Define a schema:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Define pre and post hooks for the `count`, `find`, `findOne`, and `update`
    methods:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Compile the schema into a model:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Once the connection to the database is successfully made, create a document,
    save it, and use the methods for which we defined hooks for:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Save the file
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a Terminal and run:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'On the terminal, the output should display something similar to:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Finally, there is only one model instance method that supports hooks:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: '`insertMany`: This validates an array of documents and saves them in the database
    only if all the documents in the array passed validation'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you probably guessed, a model middleware function is also defined in the
    same way as query middleware methods and document middleware methods are.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: Model middleware functions
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a `pre` and `post` hook for the `insertMany` model instance method:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `3-model-middleware.js`
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the Mongoose NPM module and create a new connection to your MongoDB:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Define a schema:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Define `pre` and `post` hooks for the `insertMany` model method:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Compile the schema into a model:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Once a connection to the database was established, use the `insertMany` method
    to insert two documents at once:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Save the file
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a Terminal and run:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'On the Terminal, the output should display:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: There's more...
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s useful to mark the fields as required to avoid having "null" values being
    saved in the database. An alternative is to set default values for the fields
    that are not explicitly defined in the creation time of the document. For instance:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: When a new document is created, if no path or property `name` is assigned, then
    it will assign the default value defined in the schema type option `default`.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: The schema type `default` option can also be a function. The value returned
    by calling this function is assigned as the default value.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: 'Sub-documents or arrays can also be created by just adding brackets when defining
    the schema type. For instance:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: When a new document is created, it will expect an array of strings in the `wishes`
    property or path. If no array is provided, then the default values will be used
    to create the document.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-332
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing NPM Packages*'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing MongoDB*'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing custom validators for Mongoose's schemas
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mongoose has several built-in validation rules. For instance, if you define
    a property with a schema type of `string` and set it as `required`, two validation
    rules will be executed, one that checks for the property to be a valid `string`
    and another one for checking that the property is not `null` or `undefined`.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: Custom validation rules and custom error validation messages can also be defined
    in Mongoose for having more control on how and when certain properties are accepted
    before they can be saved in the database.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: 'Validation rules are defined in the schema. All schema types have a built-in
    validator `required` which means it cannot contain `undefined` or `null` values.
    The `required` validator can be of type `boolean`, a `function`, or an `array`.
    For example:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'String schema types have the following built-in validators:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: '`enum`: This states that the string can only have the value specified in the
    `enum` array. For instance:'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE99]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '`match`: This uses `RegExp` to test the value. For instance, to allow values
    that start with `www`:'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE100]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '`maxlength`: This defines the maximum length that a string can have.'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`minlength`: This defines the minimum length that a string can have. For instance,
    to allow only strings between `5` and `20` characters:'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE101]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Number schema types have two built-in validators:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: '`min`: This defines the minimum value that a number can have.'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max`: This defines the maximum value that a number can have. For instance,
    to allow only numbers between `18` and `100`:'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE102]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Undefined values pass all validators without error. If you want to throw an
    error if a value is `undefined`, do not forget to use the `required` validator
    to `true`
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: 'When built-in validators sometimes do not satisfy your requirements or you
    wish to perform complex validation rules, you have an option or property called
    `validate.` This accepts an object that has two properties, `validator` and `message,`
    that allow us to write custom validators:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Getting ready
  id: totrans-355
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will see how to use custom validation rules to ensure that
    a certain field matches or fulfils a defined rule. First, ensure that you have
    MongoDB installed and it''s running. As an alternative, if you prefer, a MongoDB
    DBaaS instance in the cloud will also do. Before you start, create a new `package.json`
    file with the following code:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'Then, install the dependencies by opening a Terminal and running:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: How to do it...
  id: totrans-360
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a user schema and ensure that all user names are of type string, have
    a minimum length of six characters, have a maximum length of 20 characters, match
    a regular expression, and are required:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `custom-validation.js`
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the Mongoose NPM module and create a new connection to the database:'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Define a schema including validation rules for the `username` field:'
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'Compile the schema into a model:'
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Once a connection with the database is established, create a new document with
    invalid fields and use the `validateSync` document method to trigger the validation
    built-in and custom methods:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: Save the file
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a Terminal and run:'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'On the Terminal, the output should display:'
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: See also
  id: totrans-376
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing NPM Packages*'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section **Installing MongoDB**'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a RESTful API to manage users with ExpressJS and Mongoose
  id: totrans-379
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will build a RESTful API that will allow the creation of
    new users, log in, display user information, and delete a user's profile. Furthermore,
    you will learn how to build a NodeJS REPL with a client API that you can use to
    interact with your server's RESTful API.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: 'A **REPL** (**Read-Eval-Print Loop**) is like an interactive shell where you
    can execute commands one after another. For instance, the Node.js REPL can be
    opened by running this command in your terminal:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Here, the `-i` flag stands for interactive. Now, you can execute the JavaScript
    code that gets evaluated piece by piece in a new context.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-384
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This recipe will be focused on showing the integration of Mongoose with ExpressJS
    using what was seen in previous recipes. First, ensure that you have MongoDB installed
    and it''s running. As an alternative, if you prefer, a MongoDB DBaaS instance
    in the cloud will also do. Before you start, create a new `package.json` file
    with the following code:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'Then, install the dependencies by opening a Terminal and running this code:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: How to do it...
  id: totrans-389
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Firstly, create a file named `server.js` that will include two middleware functions.
    One that configures a session and the other that makes sure that there is a connection
    to the MongoDB before allowing any route to be called. Then, we mount our API
    routes to a specific path:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `server.js`
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the required libraries. Then, initialize a new ExpressJS application
    and create a connection to MongoDB:'
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'Use the `body-parser` middleware to parse the request body as JSON:'
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'Define an ExpressJS middleware function that will ensure your web application
    is connected to MongoDB first before allowing next route handlers to be executed:'
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'Configure `express-session` middleware to store sessions in the Mongo database
    instead of storing in memory:'
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'Mount the API controller to the `"/api"` route:'
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'Listen on port 1773 for new connections:'
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: Save the file
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, create a new directory named `api`. Next, create the model or business
    logic of your application. Define a schema for users with static and instance
    methods that will allow a user to signup, login, logout, get profile data, change
    their password, and remove their profile:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `model.js` in the `api` directory
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the Mongoose NPM module and also the `crypto` NodeJS module that will
    be used to generate a hash for the user passwords:'
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE121]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'Define the schema:'
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'Define a static model method for `login`:'
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE123]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'Define a static model method for `signup`:'
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE124]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'Define a document instance method for `changePass`:'
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE125]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'Compile the Mongoose schema into a model and export it:'
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE126]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: Save the file
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, define a controller that will transform the request body to actions
    that our model can understand. Then export it as an ExpressJS router that contains
    all API paths:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `controller.js` in the `api` folder
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import `model.js` and initialize a new ExpressJS Route:'
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE127]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'Define a request handler to check if a user is logged in and another request
    handler to check if the user is not logged in:'
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE128]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'Define a `post` request method to handle requests to `"/login"` endpoint:'
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE129]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'Define a `post` request method to handle requests to `"/logout"` endpoint:'
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE130]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'Define a `post` request method to handle requests to `"/signup"` endpoint:'
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE131]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'Define a `get` request method to handle requests to `"/profile"` endpoint:'
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE132]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'Define a `put` request method to handle requests to `"/changepass"` endpoint:'
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE133]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'Define a delete request method to handle requests to `"/delete"` endpoint:'
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE134]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: 'Export the route:'
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE135]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: Save the file
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's test it...
  id: totrans-441
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You have built a RESTful API that allows users to subscribe or sign up, log
    in, log out, get their profile, and delete their profile. These actions can be
    performed by making HTTP requests to the server. We will build now a small NodeJS
    REPL and client API that could allow you to interact with your RESTful API server
    with plain JavaScript functions:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: Move to the root of your project directory and create a new file named `client-repl.js`.
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the `node-fetch` NPM module that will allow making HTTP request to
    the server. Include as well, the `repl` and `vm` Node.js modules that will allow
    you to create an interactive Node.js REPL:'
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含`node-fetch` NPM模块，该模块允许向服务器发送HTTP请求。同时，包含`repl`和`vm` Node.js模块，这些模块允许您创建一个交互式的Node.js
    REPL：
- en: '[PRE136]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'Define a variable that will later contain the session ID from the cookie once
    the user is logged-in. The cookie will be used to allow the server recognize the
    logged in user for actions such as getting information about your profile or changing
    password:'
  id: totrans-446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个变量，该变量将在用户登录后包含来自cookie的会话ID。cookie将用于让服务器识别已登录用户，以便执行诸如获取个人资料信息或更改密码等操作：
- en: '[PRE137]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'Define a helper function named `query` that will allow to make HTTP requests
    to the server. The `credentials` options, allows to send and receive cookies from
    and to the server. We define the `headers` that will tell the server the content
    type of the request body that will be sent as JSON content:'
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为`query`的辅助函数，该函数将允许向服务器发送HTTP请求。`credentials`选项允许从服务器发送和接收cookie。我们定义`headers`，这将告诉服务器要发送的请求体的内容类型为JSON内容：
- en: '[PRE138]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'Define a method that will allow users to sign up:'
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个方法，允许用户注册：
- en: '[PRE139]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'Define a method that will allow users to log in:'
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个方法，允许用户登录：
- en: '[PRE140]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: 'Define a method that will allow users to log out:'
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个方法，允许用户注销：
- en: '[PRE141]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'Define a method that will allow users to get their profile:'
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个方法，允许用户获取其个人资料：
- en: '[PRE142]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: 'Define a method that will allow users to change their password:'
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个方法，允许用户更改他们的密码：
- en: '[PRE143]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: 'Define a method that will allow users to delete their profile:'
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个方法，允许用户删除其个人资料：
- en: '[PRE144]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'Use the start method from the REPL exported object to start a new REPL server.
    We will specify the eval method to execute JavaScript code using the VM module,
    then, if a Promise is returned, it will wait for the Promise to be resolved before
    allowing the user to input more commands or type more JavaScript code in the REPL.
    We will also specify also the writer method that will pretty-print the result
    of calling the previously defined methods:'
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用REPL导出的对象的start方法启动一个新的REPL服务器。我们将指定eval方法使用VM模块执行JavaScript代码，然后，如果返回Promise，它将等待Promise解决后再允许用户输入更多命令或更多JavaScript代码到REPL中。我们还将指定writer方法，该方法将格式化打印之前定义的方法的调用结果：
- en: '[PRE145]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: 'Add the previously defined methods to the context of the REPL server where
    the JavaScript code will be executed:'
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将之前定义的方法添加到执行JavaScript代码的REPL服务器上下文中：
- en: '[PRE146]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: Save the file
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件
- en: 'Now you can run on a terminal your RESTful API server:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以在终端上运行您的RESTful API服务器：
- en: '[PRE147]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: 'And in a different terminal, run the NodeJS REPL application that you just
    created:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同的终端中，运行您刚刚创建的NodeJS REPL应用程序：
- en: '[PRE148]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: 'In the REPL, you can execute JavaScript code and you have also access to the
    exported methods. For instance, you can execute the following JavaScript code
    line by line in your REPL:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 在REPL中，您可以执行JavaScript代码，并且您还可以访问导出的方法。例如，您可以在您的REPL中逐行执行以下JavaScript代码：
- en: '[PRE149]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: How it works...
  id: totrans-473
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Your RESTful API server will accept requests for the following paths:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 您的RESTful API服务器将接受以下路径的请求：
- en: '`POST/users/login`: If a username does not exist in the `users` collection
    in MongoDB, an error message is sent to the client. Otherwise, it returns a welcome
    message.'
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POST/users/login`: 如果MongoDB中的`users`集合中不存在该用户名，将向客户端发送错误消息。否则，它返回一个欢迎消息。'
- en: '`POST/users/logout`: This destroys the session ID.'
  id: totrans-476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POST/users/logout`: 这将销毁会话ID。'
- en: '`POST/users/signup`: This creates a new username with the defined password.
    However, an error will be sent to the client if the username or password does
    not pass the validation. It will also send an error message to the client when
    the username already exists.'
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POST/users/signup`: 这将使用定义的密码创建一个新的用户名。然而，如果用户名或密码未通过验证，将向客户端发送错误。如果用户名已存在，也会向客户端发送错误消息。'
- en: '`GET/users/profile`: If the user is logged in, the user information is sent
    to the client. Otherwise, an error message is sent to the client.'
  id: totrans-478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET/users/profile`: 如果用户已登录，将用户信息发送到客户端。否则，向客户端发送错误消息。'
- en: '`PUT/users/changepass/`: This will change the current logged-in user''s password.
    However, if the user is not logged-in, an error message is sent to the client.'
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PUT/users/changepass/`: 这将更改当前登录用户的密码。然而，如果用户未登录，将向客户端发送错误消息。'
- en: '`DELETE/users/delete`: This will remove a logged-in user''s profile from the
    collection `users` in MongoDB. The session will be destroyed and a confirmation
    message is sent to the client. If the user is not logged-in, an error message
    is sent to the client'
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE/users/delete`：这将从 MongoDB 的 `users` 集合中删除已登录用户的个人资料。会话将被销毁，并向客户端发送确认消息。如果用户未登录，将向客户端发送错误消息'
- en: See also
  id: totrans-481
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to MERN
    Stack,* section *Installing NPM Packages*'
  id: totrans-482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第一章](7f71253e-4f39-4126-8428-986edb06f47c.xhtml)，*MERN Stack 简介*，部分 *安装 NPM
    包*'
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to MERN
    Stack*, section *Installing MongoDB*'
  id: totrans-483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第一章](7f71253e-4f39-4126-8428-986edb06f47c.xhtml)，*MERN Stack 简介*，部分 *安装 MongoDB*'
