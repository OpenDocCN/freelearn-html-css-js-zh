- en: Building a RESTful API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: CRUD operations using ExpressJS' route methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CRUD operations with Mongoose
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Mongoose query builders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining document instance methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining static model methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing middleware functions for Mongoose
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing custom validators for Mongoose's schemas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a RESTful API to manage users with ExpressJS and Mongoose
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will be required to have an IDE, Visual Studio Code, Node.js and MongoDB.
    You will also need to install Git, in order use the Git repository of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code files of this chapter can be found on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/MERN-Quick-Start-Guide/tree/master/Chapter03](https://github.com/PacktPublishing/MERN-Quick-Start-Guide/tree/master/Chapter03)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://goo.gl/73dE6u](https://goo.gl/73dE6u)'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Representation State Transfer** (**REST**) is an architectural style that
    the web was built on. More specifically, the HTTP 1.1 protocol standards were
    built using the REST principles. REST provides a representation of a resource.
    **URLs** (**Uniform Resource Locator**) are used to define the location of a resource
    and tell the browser where it is located.'
  prefs: []
  type: TYPE_NORMAL
- en: A RESTful API is a web service API that adheres to this architectural style.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most commonly used HTTP verbs or methods are: `POST, GET, PUT,` and `DELETE`.
    These methods are the basis for persistent storage and are known as **CRUD** operations
    (**Create, Read, Update, and Delete**).'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, the recipes will be focused on building a RESTful API using
    the REST architectural style with ExpressJS and Mongoose.
  prefs: []
  type: TYPE_NORMAL
- en: CRUD operations using ExpressJS' route methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'ExpressJS'' router has equivalent methods to handle HTTP methods. In other
    words, the HTTP methods `POST`, `GET`, `PUT`, and `DELETE` can be handled by this
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s good to think of every URL as a noun and because of that a verb can act
    on it. In fact, HTTP methods are also known as HTTP verbs. If we think about them
    as verbs, when a request is made to our RESTful API, they can be understood as:'
  prefs: []
  type: TYPE_NORMAL
- en: Post a user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get a user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update a user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete a user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the **MVC** (**model-view-controller**) architectural pattern, controllers
    are in charge of transforming input to something a model or view can understand.
    In other words, they transform input into actions or commands and sends them to
    the model or view to update accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: ExpressJS' route methods usually act as controllers. They just get input from
    a client such as a request from the browser, and then converts the input to actions.
    These actions are then sent to the model, which is the business logic of your
    application, such as a mongoose model, or to a view (a ReactJS client application)
    to update.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Keeping in mind that we can invoke an action over a resource using HTTP methods,
    we will see how to build a RESTful API web service based on those concepts. Before
    you start, create a new `package.json` file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a terminal and running this line
    of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Build a RESTful API with an in-memory database or an array of objects that
    will contain a list of users. We will allow CRUD operations using HTTP methods
    to add a new user, get a user or list of users, update a user''s data, and delete
    a user:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `restfulapi.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the packages that we need and create an ExpressJS application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Define an in-memory database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a model which will contain functions for making CRUD operations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a request handler for the `post` method that will be used as a `Create`
    operation. A new user will be added to the `data` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a request handler for the `get` method that will be used as a `Read` or
    `Retrieve` operation. If an `id` is given, look for the user in the `data` array.
    However, If the given `id` is `"all"`, it will return the whole list of users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a request handler for the `put` method that will be used as an `Update`
    operation. An `id` needs to be provided in order to update a specific user in
    the `data` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a request handler for the `delete` method that will be used as a `Delete`
    operation. It will look for the user in the `data` array and remove it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your application listening on port `1337` for new connections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a Terminal and run this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Let's test it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To make it simple, create a script that will request and make CRUD operations
    on our RESTful API server:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `test-restfulapi.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a new Terminal and run this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our RESTful API application will be running locally on port `1337`. When running
    the test code, it will connect to it and make several requests using different
    HTTP methods to create a user, retrieve a user, update a user, and delete a user.
    All the operations will be logged in the Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you prefer to test it yourself, you can replace all the code inside the
    `test` function, and use the `r` function to make custom requests. For instance,
    to create a new user called `Smith`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: CRUD operations with Mongoose
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of many reasons why developers opt to use Mongoose instead of the official
    MongoDB driver for Node.js is that it allows you to create data structures with
    ease by using schemas and also because of the built-in validation. MongoDB is
    a document-oriented database, meaning that the structure of the documents varies.
  prefs: []
  type: TYPE_NORMAL
- en: In the MVC architectural pattern, Mongoose is often used for creating models
    that shape or define data structures.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how a typical Mongoose schema would be defined and then compiled into
    a model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Model names should be in singular since Mongoose will make them plural and lowercase
    them when saving the collection to the database. For instance, if the model is
    named "User", it will be saved as a collection named "users" in MongoDB. Mongoose
    includes an internal dictionary to pluralize common names. That means if your
    model's name is a common name, such as "Person", it will be saved in MongoDB as
    a collection named "people".
  prefs: []
  type: TYPE_NORMAL
- en: 'Mongoose allows the following types to define a schema''s path or document
    structure:'
  prefs: []
  type: TYPE_NORMAL
- en: String
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boolean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Array
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Date
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buffer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mixed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Objectid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decimal128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A schema type can be declared by using directly the global constructor function
    for `String`, `Number`, `Boolean`, `Buffer`, and `Date`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'These schema types are also available under an object called `SchemaTypes`
    in the exported `mongoose` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Schema types can be declared using an object as a property that gives you more
    control over the specific schema type. Take the following code, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Schema types can also be arrays. For instance, if we want a field to define
    what are the things the user likes in an array of strings, you could use this
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: To learn more about schema types, visit the official Mongoose documentation
    website: [http://mongoosejs.com/docs/schematypes.html](http://mongoosejs.com/docs/schematypes.html).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will see how to define a schema and perform CRUD operation
    on the database collection. First, ensure that you have MongoDB installed and
    it''s running. As an alternative, if you prefer, a MongoDB **DBaaS** (**Database
    as a Service**) instance in the cloud will also do. Before you start, create a
    new `package.json` file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a Terminal and running this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Define a user schema that will contain user''s first name, last name, and an
    array of strings that define the things the user likes:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `mongoose-models.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the Mongoose NPM module. Then, create a connection to MongoDB:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a schema:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Compile the schema into a model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a function that will be used for adding new users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a function that will be used for retrieving a user from the collection
    of users by its `id`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a function that will remove the user from the collection of users by
    its `id`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Define an event listener that will perform CRUD operations once the there is
    a connection to the database. First, add a new user and save it. Then, retrieve
    the same user using its `id`. Next, modify the user''s properties and save it.
    Finally, remove the user from the collection by its `id`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a Terminal and run this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Executing the previous command in the Terminal, if successful, would display
    something similar to the following, for instance, a code such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing NPM Packages*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing MongoDB*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Mongoose query builders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every Mongoose model has static helper methods to do several kinds of operations,
    such as retrieving a document. When a callback is passed to these helper methods,
    the operation is executed immediately:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Otherwise, if there is no defined callback, a *query builder interface* is
    returned, which can be later executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Queries also have a `.then` function which can be used as a `Promise`. When
    `.then` is called, it first executes the query internally with `.exec` which then
    returns a `Promise`. This allows us to use `async/await` as well. Inside a `async`
    function, for instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'There are two ways that we can make a query. One is by providing a JSON object
    that is used as a condition and the other way allows you to create a query using
    chaining syntax. The chaining syntax will feel more comfortable to developers
    who are more familiar with SQL databases. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will build up queries using chaining syntax and using `async/await`
    functions. First, ensure that you have MongoDB installed and it''s running. As
    an alternative, if you prefer, a MongoDB DBaaS instance in the cloud will also
    do. Before you start, create a new `package.json` file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a Terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new file named `chaining-queries.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the Mongoose NPM module. Then, create a new connection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a schema:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Compile the schema into a model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Once connected to the database, add a new document to the collection of users.
    Then, using chaining syntax, query for the recently created user. Additionally,
    use the `select` method to restrict which fields are retrieved from the document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a Terminal and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing NPM Packages*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing MongoDB*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining document instance methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Documents have their own built-in instance methods such as `save` and `remove`.
    However, we can write our own instance methods as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Documents are instances of models. They can be explicitly created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Or they can be the result of a query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Document instance methods are defined in the schema. All schemas have a method
    called `method` which allows you to define custom instance methods.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will define a schema and custom document instance methods
    for modifying and reading document properties. First, ensure that you have MongoDB
    installed and it''s running. As an alternative, if you prefer, a MongoDB DBaaS
    instance in the cloud will also do. Before you start, create a new `package.json`
    file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a Terminal and running this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new file named `document-methods.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the Mongoose NPM module. Then, create a new connection to MongoDB:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a schema:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a document instance method for setting a user''s first name and last
    name from a string containing their full name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a document instance method for getting a user''s full name concatenating
    the `firstName` and `lastName` properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a document instance method named `loves` that will expect one argument
    that will add to the `likes` array of strings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a document instance method named `dislikes` which will remove one thing
    previous liked by the user from the `likes` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Compile the schema into a model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Once Mongoose is connected to the database, create a new user and use `setFullName`
    method to populate the fields `firstName` and `lastName`, then use the `loves`
    method to populate the `likes` array. Next, use chaining syntax to query for the
    user in the collection and use the `dislikes` method to remove `"snakes"` from
    the `likes` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a Terminal and run this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Document instance methods can also be defined using the `methods`, schema property.
    For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing NPM Packages*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing MongoDB*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining static model methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Models have built-in static methods such as `find`, `findOne`, and `findOneAndRemove`.
    Mongoose allow us to define custom static model methods as well. Static model
    methods are defined in the schema in the same way as document instance methods
    are.
  prefs: []
  type: TYPE_NORMAL
- en: Schemas have a property called `statics` which is an object. All the methods
    defined inside the `statics` object are passed to the model. Static model methods
    can also be defined by calling the `static` schema method.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will define a schema and custom static model method for
    expanding your model''s capabilities. First, ensure that you have MongoDB installed
    and it''s running. As an alternative, if you prefer, a MongoDB DBaaS instance
    in the cloud will also do. Before you start, create a new `package.json` file
    with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a Terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Define a static model method called `getByFullName` that will allow you to
    search for a specific user using their full name:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `static-methods.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the Mongoose NPM module and create a new connection to your MongoDB:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a schema:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Define `getByFullName` static model method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Compile the schema into a model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Once connected, create a new user and save it. Then, use the `getByFullName`
    static model method to look for the user in the collection of users using their
    full name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a Terminal and run this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Static model methods can also be defined using the `statics` schema property.
    For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing NPM Packages*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing MongoDB*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing middleware functions for Mongoose
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Middleware functions in Mongoose are also called `hooks`. There are two types
    of hooks `pre hooks` and `post hooks`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The difference, between `pre hooks` and post hooks, is pretty simple. `pre
    hooks` are called before a method is called, and `post hooks` are called after.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'And later on, once the connection is made to the database, within an `async`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the `save` method is called, the `pre hook` is executed first. After the
    document is saved, the `post hook` is then executed. In the previous example,
    it will display in the Terminal output the following text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'There are four different types of middleware functions in Mongoose: document
    middleware, model middleware, aggregate middleware, and query middleware. All
    of them are defined on the schema level. The difference is, when the hooks are
    executed, the context of`this` refers to the document, model, the aggregation
    object, or the query object.'
  prefs: []
  type: TYPE_NORMAL
- en: All types of middleware support pre and post hooks
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we will see how three of these types of middleware functions
    work in Mongoose:'
  prefs: []
  type: TYPE_NORMAL
- en: Document middleware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Model middleware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query middleware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'First, ensure that you have MongoDB installed and it''s running. As an alternative,
    if you prefer, a MongoDB DBaaS instance in the cloud will also do. Before you
    start, create a new `package.json` file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a Terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In document middleware functions, the context of `this` refers to the document.
    A document has the following built-in methods and you can define `hooks` for them:'
  prefs: []
  type: TYPE_NORMAL
- en: '`init`: This is called internally, immediately after a document is returned
    from MongoDB. Mongoose uses setters for marking the document as modified or which
    fields of the document were modified. `init` initializes the document without
    setters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`validate`: This executes built-in and custom set validation rules for the
    document.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`save`: This saves the document in the database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`remove`: This removes the document from the database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Document middleware functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create `pre` and `post` hooks for the document built-in methods:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `1-document-middleware.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the Mongoose NPM module and create a new connection to your MongoDB:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a schema:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a `pre` and `post` hook for the `init` document method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a `pre` and `post` hook for the `validate` document method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a `pre` and `post` hook for the `save` document method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a `pre` and `post` hook for the `remove` document method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Compile the schema into a model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Once a new connection is established, create a document and perform some basic
    operations such as saving, retrieving, and deleting the document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a Terminal and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'On the terminal, the output should display:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: When you save a document, it first triggers the `validation` hooks that ensure
    that the fields pass the rules set by built-in validation rules or custom rules.
    In your code, the fields are marked as required. Then it will trigger the `save`
    hooks. After, using a model method to retrieve the recently created user from
    the database, once the document is retrieved, it triggers the `init` hooks. Finally,
    removing the document from the database triggers the `remove` hooks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the hooks, you can interact with the document. For instance, the following
    `save` pre hook will modify the fields `firstName` and `lastName` to make them
    upper-cased strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'The same way, we can throw an error within the hook to prevent the next ones
    from being executed. For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Query middleware functions are defined exactly as document middleware functions
    are. However, the context of `this` doesn''t not refer to the document but instead
    to the query object. Query middleware functions are only supported in the following
    model and query functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`count`: Counts the number of document that match a specific query condition'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`find`: Returns an array of documents that match a specific query condition'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`findOne`: Return a document that matches a specific query condition'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`findOneAndRemove`: Similar to `findOne`. However, after a document is found,
    it is removed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`findOneAndUpdate`: Similar to `findOne` but once a document matching a specific
    query condition is found, the document can also be updated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`update`: Update one or more documents that match a certain query condition'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query middleware functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create pre and post hooks for query built-in methods:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `2-query-middleware.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the Mongoose NPM module and create a new connection to your MongoDB:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a schema:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Define pre and post hooks for the `count`, `find`, `findOne`, and `update`
    methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Compile the schema into a model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the connection to the database is successfully made, create a document,
    save it, and use the methods for which we defined hooks for:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a Terminal and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'On the terminal, the output should display something similar to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, there is only one model instance method that supports hooks:'
  prefs: []
  type: TYPE_NORMAL
- en: '`insertMany`: This validates an array of documents and saves them in the database
    only if all the documents in the array passed validation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you probably guessed, a model middleware function is also defined in the
    same way as query middleware methods and document middleware methods are.
  prefs: []
  type: TYPE_NORMAL
- en: Model middleware functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a `pre` and `post` hook for the `insertMany` model instance method:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `3-model-middleware.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the Mongoose NPM module and create a new connection to your MongoDB:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a schema:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'Define `pre` and `post` hooks for the `insertMany` model method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'Compile the schema into a model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Once a connection to the database was established, use the `insertMany` method
    to insert two documents at once:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a Terminal and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'On the Terminal, the output should display:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s useful to mark the fields as required to avoid having "null" values being
    saved in the database. An alternative is to set default values for the fields
    that are not explicitly defined in the creation time of the document. For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: When a new document is created, if no path or property `name` is assigned, then
    it will assign the default value defined in the schema type option `default`.
  prefs: []
  type: TYPE_NORMAL
- en: The schema type `default` option can also be a function. The value returned
    by calling this function is assigned as the default value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sub-documents or arrays can also be created by just adding brackets when defining
    the schema type. For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: When a new document is created, it will expect an array of strings in the `wishes`
    property or path. If no array is provided, then the default values will be used
    to create the document.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing NPM Packages*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing MongoDB*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing custom validators for Mongoose's schemas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mongoose has several built-in validation rules. For instance, if you define
    a property with a schema type of `string` and set it as `required`, two validation
    rules will be executed, one that checks for the property to be a valid `string`
    and another one for checking that the property is not `null` or `undefined`.
  prefs: []
  type: TYPE_NORMAL
- en: Custom validation rules and custom error validation messages can also be defined
    in Mongoose for having more control on how and when certain properties are accepted
    before they can be saved in the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Validation rules are defined in the schema. All schema types have a built-in
    validator `required` which means it cannot contain `undefined` or `null` values.
    The `required` validator can be of type `boolean`, a `function`, or an `array`.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'String schema types have the following built-in validators:'
  prefs: []
  type: TYPE_NORMAL
- en: '`enum`: This states that the string can only have the value specified in the
    `enum` array. For instance:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '`match`: This uses `RegExp` to test the value. For instance, to allow values
    that start with `www`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '`maxlength`: This defines the maximum length that a string can have.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`minlength`: This defines the minimum length that a string can have. For instance,
    to allow only strings between `5` and `20` characters:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'Number schema types have two built-in validators:'
  prefs: []
  type: TYPE_NORMAL
- en: '`min`: This defines the minimum value that a number can have.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max`: This defines the maximum value that a number can have. For instance,
    to allow only numbers between `18` and `100`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Undefined values pass all validators without error. If you want to throw an
    error if a value is `undefined`, do not forget to use the `required` validator
    to `true`
  prefs: []
  type: TYPE_NORMAL
- en: 'When built-in validators sometimes do not satisfy your requirements or you
    wish to perform complex validation rules, you have an option or property called
    `validate.` This accepts an object that has two properties, `validator` and `message,`
    that allow us to write custom validators:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will see how to use custom validation rules to ensure that
    a certain field matches or fulfils a defined rule. First, ensure that you have
    MongoDB installed and it''s running. As an alternative, if you prefer, a MongoDB
    DBaaS instance in the cloud will also do. Before you start, create a new `package.json`
    file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a Terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a user schema and ensure that all user names are of type string, have
    a minimum length of six characters, have a maximum length of 20 characters, match
    a regular expression, and are required:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `custom-validation.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the Mongoose NPM module and create a new connection to the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a schema including validation rules for the `username` field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'Compile the schema into a model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: 'Once a connection with the database is established, create a new document with
    invalid fields and use the `validateSync` document method to trigger the validation
    built-in and custom methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a Terminal and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'On the Terminal, the output should display:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section *Installing NPM Packages*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to the
    MERN Stack*, section **Installing MongoDB**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a RESTful API to manage users with ExpressJS and Mongoose
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will build a RESTful API that will allow the creation of
    new users, log in, display user information, and delete a user's profile. Furthermore,
    you will learn how to build a NodeJS REPL with a client API that you can use to
    interact with your server's RESTful API.
  prefs: []
  type: TYPE_NORMAL
- en: 'A **REPL** (**Read-Eval-Print Loop**) is like an interactive shell where you
    can execute commands one after another. For instance, the Node.js REPL can be
    opened by running this command in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `-i` flag stands for interactive. Now, you can execute the JavaScript
    code that gets evaluated piece by piece in a new context.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This recipe will be focused on showing the integration of Mongoose with ExpressJS
    using what was seen in previous recipes. First, ensure that you have MongoDB installed
    and it''s running. As an alternative, if you prefer, a MongoDB DBaaS instance
    in the cloud will also do. Before you start, create a new `package.json` file
    with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a Terminal and running this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Firstly, create a file named `server.js` that will include two middleware functions.
    One that configures a session and the other that makes sure that there is a connection
    to the MongoDB before allowing any route to be called. Then, we mount our API
    routes to a specific path:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `server.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the required libraries. Then, initialize a new ExpressJS application
    and create a connection to MongoDB:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `body-parser` middleware to parse the request body as JSON:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: 'Define an ExpressJS middleware function that will ensure your web application
    is connected to MongoDB first before allowing next route handlers to be executed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure `express-session` middleware to store sessions in the Mongo database
    instead of storing in memory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: 'Mount the API controller to the `"/api"` route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: 'Listen on port 1773 for new connections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, create a new directory named `api`. Next, create the model or business
    logic of your application. Define a schema for users with static and instance
    methods that will allow a user to signup, login, logout, get profile data, change
    their password, and remove their profile:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `model.js` in the `api` directory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the Mongoose NPM module and also the `crypto` NodeJS module that will
    be used to generate a hash for the user passwords:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the schema:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a static model method for `login`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a static model method for `signup`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a document instance method for `changePass`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: 'Compile the Mongoose schema into a model and export it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, define a controller that will transform the request body to actions
    that our model can understand. Then export it as an ExpressJS router that contains
    all API paths:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `controller.js` in the `api` folder
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import `model.js` and initialize a new ExpressJS Route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a request handler to check if a user is logged in and another request
    handler to check if the user is not logged in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a `post` request method to handle requests to `"/login"` endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a `post` request method to handle requests to `"/logout"` endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a `post` request method to handle requests to `"/signup"` endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a `get` request method to handle requests to `"/profile"` endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a `put` request method to handle requests to `"/changepass"` endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a delete request method to handle requests to `"/delete"` endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: 'Export the route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's test it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You have built a RESTful API that allows users to subscribe or sign up, log
    in, log out, get their profile, and delete their profile. These actions can be
    performed by making HTTP requests to the server. We will build now a small NodeJS
    REPL and client API that could allow you to interact with your RESTful API server
    with plain JavaScript functions:'
  prefs: []
  type: TYPE_NORMAL
- en: Move to the root of your project directory and create a new file named `client-repl.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the `node-fetch` NPM module that will allow making HTTP request to
    the server. Include as well, the `repl` and `vm` Node.js modules that will allow
    you to create an interactive Node.js REPL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a variable that will later contain the session ID from the cookie once
    the user is logged-in. The cookie will be used to allow the server recognize the
    logged in user for actions such as getting information about your profile or changing
    password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a helper function named `query` that will allow to make HTTP requests
    to the server. The `credentials` options, allows to send and receive cookies from
    and to the server. We define the `headers` that will tell the server the content
    type of the request body that will be sent as JSON content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a method that will allow users to sign up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a method that will allow users to log in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a method that will allow users to log out:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a method that will allow users to get their profile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a method that will allow users to change their password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a method that will allow users to delete their profile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the start method from the REPL exported object to start a new REPL server.
    We will specify the eval method to execute JavaScript code using the VM module,
    then, if a Promise is returned, it will wait for the Promise to be resolved before
    allowing the user to input more commands or type more JavaScript code in the REPL.
    We will also specify also the writer method that will pretty-print the result
    of calling the previously defined methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the previously defined methods to the context of the REPL server where
    the JavaScript code will be executed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now you can run on a terminal your RESTful API server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: 'And in a different terminal, run the NodeJS REPL application that you just
    created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: 'In the REPL, you can execute JavaScript code and you have also access to the
    exported methods. For instance, you can execute the following JavaScript code
    line by line in your REPL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Your RESTful API server will accept requests for the following paths:'
  prefs: []
  type: TYPE_NORMAL
- en: '`POST/users/login`: If a username does not exist in the `users` collection
    in MongoDB, an error message is sent to the client. Otherwise, it returns a welcome
    message.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POST/users/logout`: This destroys the session ID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POST/users/signup`: This creates a new username with the defined password.
    However, an error will be sent to the client if the username or password does
    not pass the validation. It will also send an error message to the client when
    the username already exists.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GET/users/profile`: If the user is logged in, the user information is sent
    to the client. Otherwise, an error message is sent to the client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PUT/users/changepass/`: This will change the current logged-in user''s password.
    However, if the user is not logged-in, an error message is sent to the client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELETE/users/delete`: This will remove a logged-in user''s profile from the
    collection `users` in MongoDB. The session will be destroyed and a confirmation
    message is sent to the client. If the user is not logged-in, an error message
    is sent to the client'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to MERN
    Stack,* section *Installing NPM Packages*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 1](7f71253e-4f39-4126-8428-986edb06f47c.xhtml), *Introduction to MERN
    Stack*, section *Installing MongoDB*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
