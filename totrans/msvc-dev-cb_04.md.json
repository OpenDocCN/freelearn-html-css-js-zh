["```js\n{\n  \"username\": \"paulosman\",\n  \"followings\": [\n    \"johnsmith\",\n    \"janesmith\",\n    \"petersmith\"\n  ]\n}\n```", "```js\n{\n  \"username\": \"paulosman\",\n  \"full_name\": \"Paul Osman\",\n  \"avatar_url\": \"http://foo.com/pic.jpg\"\n}\n```", "```js\ngroup 'com.packtpub.microservices'\nversion '1.0-SNAPSHOT'\n\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath group: 'org.springframework.boot', name: 'spring-boot-gradle\n        -plugin', version: '1.5.9.RELEASE'\n    }\n}\n\napply plugin: 'java'\napply plugin: 'org.springframework.boot'\n\nsourceCompatibility = 1.8\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n    compile group: 'org.springframework.boot', \n    name: 'spring-boot-starter-web'\n}\n```", "```js\npackage com.packtpub.microservices.ch04.user.models;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\npublic class UserDetails {\n    private String username;\n\n    @JsonProperty(\"display_name\")\n    private String displayName;\n\n    @JsonProperty(\"avatar_url\")\n    private String avatarUrl;\n\n    public UserDetails() {}\n\n    public UserDetails(String username, String displayName, \n    String avatarUrl) {\n        this.username = username;\n        this.displayName = displayName;\n        this.avatarUrl = avatarUrl;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getDisplayName() {\n        return displayName;\n    }\n\n    public void setDisplayName(String displayName) {\n        this.displayName = displayName;\n    }\n\n    public String getAvatarUrl() {\n        return avatarUrl;\n    }\n\n    public void setAvatarUrl(String avatarUrl) {\n        this.avatarUrl = avatarUrl;\n    }\n\n    public String toString() {\n        return String.format(\"[UserDetails: %s, %s, %s]\", username, \n        displayName, avatarUrl);\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch04.user.models;\n\nimport java.util.List;\n\npublic class Followings {\n    private String username;\n    private List<String> followings;\n\n    public Followings() {}\n\n    public Followings(String username, List<String> followings) {\n        this.username = username;\n        this.followings = followings;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public List<String> getFollowings() {\n        return followings;\n    }\n\n    public void setFollowings(List<String> followings) {\n        this.followings = followings;\n    }\n\n    public String toString() {\n        return String.format(\"[Followings for username: %s - %s]\", \n        username, followings);\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch04.user.services;\n\nimport com.packtpub.microservices.models.Followings;\nimport org.springframework.boot.web.client.RestTemplateBuilder;\nimport org.springframework.scheduling.annotation.Async;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.client.RestTemplate;\n\nimport java.util.concurrent.CompletableFuture;\n\n@Service\npublic class SocialService {\n\n    private final RestTemplate restTemplate;\n\n    public SocialService(RestTemplateBuilder restTemplateBuilder) {\n        this.restTemplate = restTemplateBuilder.build();\n    }\n\n    @Async\n    public CompletableFuture<Followings> \n    getFollowings(String username) {\n        String url = String.format(\"http://localhost:8000/followings/\n        %s\", username);\n        Followings followings = restTemplate.getForObject(url, \n        Followings.class);\n        return CompletableFuture.completedFuture(followings);\n    }\n}\n```", "```js\npackage com.packtpub.microservices.services;\n\nimport com.packtpub.microservices.models.Followings;\nimport com.packtpub.microservices.models.UserDetails;\nimport org.springframework.boot.web.client.RestTemplateBuilder;\nimport org.springframework.scheduling.annotation.Async;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.client.RestTemplate;\n\nimport java.util.concurrent.CompletableFuture;\n\n@Service\npublic class UserService {\n    private final RestTemplate restTemplate;\n\n    public UserService(RestTemplateBuilder restTemplateBuilder) {\n        this.restTemplate = restTemplateBuilder.build();\n    }\n\n    @Async\n    public CompletableFuture<UserDetails> \n    getUserDetails(String username) {\n        String url = String.format(\"http://localhost:8001/users/\n        %s\", username);\n        UserDetails userDetails = restTemplate.getForObject(url, \n        UserDetails.class);\n        return CompletableFuture.completedFuture(userDetails);\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch04.user;\n\nimport com.packtpub.microservices.models.Followings;\nimport com.packtpub.microservices.models.UserDetails;\nimport com.packtpub.microservices.services.SocialService;\nimport com.packtpub.microservices.services.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.Future;\nimport java.util.stream.Collectors;\n\n@SpringBootApplication\npublic class UserDetailsClient implements CommandLineRunner {\n\n    public UserDetailsClient() {}\n\n    @Autowired\n    private SocialService socialService;\n\n    @Autowired\n    private UserService userService;\n\n    public CompletableFuture<List<UserDetails>> \n    getFollowingDetails(String username) {\n        return socialService.getFollowings(username).thenApply(f ->\n                f.getFollowings().stream().map(u ->userService.\n                getUserDetails(u)).map(CompletableFuture::join).\n                collect(Collectors.toList()));\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(UserDetailsClient.class, args);\n    }\n\n    @Override\n    public void run(String... args) throws Exception {\n        Future<List<UserDetails>> users = getFollowingDetails\n        (\"paulosman\");\n        System.out.println(users.get());\n        System.out.println(\"Heyo\");\n        System.exit(0);\n    }\n}\n```", "```js\nCompletableFuture<List<UserDetails>> getFollowingDetails(String username) \n{\n  return socialService.getFollowings(username).thenApply(\n    f -> f.getFollowings().stream().map(u ->\n      userService.getUserDetails(u)).map(\n        CompletableFuture::join).collect(Collectors.toList()));\n}\n```", "```js\nGET /users/:user_id/following\n```", "```js\n{\n  \"username\": \"paulosman\",\n  \"followings\": [\n    {\n      \"username\": \"friendlyuser\",\n      \"display_name\": \"Friendly User\",\n      \"avatar_url\": \"http://example.com/pic.jpg\"\n    },\n    {\n      ...\n    }\n  ]\n}\n```", "```js\ngroup 'com.packtpub.microservices'\nversion '1.0-SNAPSHOT'\n\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath group: 'org.springframework.boot', \n        name: 'spring-boot-gradle-plugin', \n        version: '1.5.9.RELEASE'\n    }\n}\n\napply plugin: 'java'\napply plugin: 'org.springframework.boot'\n\nsourceCompatibility = 1.8\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n    compile group: 'org.springframework.boot', \n    name: 'spring-boot-starter-web'\n}\n```", "```js\npackage com.packtpub.microservices.ch04.mobilebff;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class Main {\n    public static void main(String[] args) {\n        SpringApplication.run(Main.class, args);\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch04.mobilebff.models;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\npublic class User {\n    private String username;\n\n    @JsonProperty(\"display_name\")\n    private String displayName;\n\n    @JsonProperty(\"avatar_url\")\n    private String avatarUrl;\n\n    public User() {}\n\n    public User(String username, String displayName, \n    String avatarUrl) {\n        this.username = username;\n        this.displayName = displayName;\n        this.avatarUrl = avatarUrl;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getDisplayName() {\n        return displayName;\n    }\n\n    public void setDisplayName(String displayName) {\n        this.displayName = displayName;\n    }\n\n    public String getAvatarUrl() {\n        return avatarUrl;\n    }\n\n    public void setAvatarUrl(String avatarUrl) {\n        this.avatarUrl = avatarUrl;\n    }\n\n    public String toString() {\n        return String.format(\n                \"[User username:%s, displayName:%s, avatarUrl:%s]\",\n                username, displayName, avatarUrl);\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch04.mobilebff.models;\n\nimport java.util.List;\n\npublic class Followings {\n    private String username;\n\n    private List<String> followings;\n\n    public Followings() {}\n\n    public Followings(String username, List<String> followings) {\n        this.username = username;\n        this.followings = followings;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public List<String> getFollowings() {\n        return followings;\n    }\n\n    public void setFollowings(List<String> followings) {\n        this.followings = followings;\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch04.mobilebff.models;\n\nimport java.util.List;\n\npublic class HydratedFollowings {\n    private String username;\n\n    private List<User> followings;\n\n    public HydratedFollowings() {}\n\n    public HydratedFollowings(String username, List<User> \n    followings) {\n        this.username = username;\n        this.followings = followings;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public List<User> getFollowings() {\n        return followings;\n    }\n\n    public void setFollowings(List<User> followings) {\n        this.followings = followings;\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch04.mobilebff.services;\n\nimport com.packtpub.microservices.ch04.mobilebff.models.Followings;\nimport org.springframework.boot.web.client.RestTemplateBuilder;\nimport org.springframework.scheduling.annotation.Async;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.client.RestTemplate;\n\nimport java.util.concurrent.CompletableFuture;\n\n@Service\npublic class SocialGraphService {\n\n    private final RestTemplate restTemplate;\n\n    public SocialGraphService(RestTemplateBuilder \n    restTemplateBuilder) {\n        this.restTemplate = restTemplateBuilder.build();\n    }\n\n    @Async\n    public CompletableFuture<Followings> \n    getFollowing(String username) {\n        String url = String.format(\"http://localhost:4567/followings/\n        %s\", username);\n        Followings followings = restTemplate.getForObject(url, \n        Followings.class);\n        return CompletableFuture.completedFuture(followings);\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch04.mobilebff.services;\n\nimport com.packtpub.microservices.ch04.mobilebff.models.User;\nimport org.springframework.boot.web.client.RestTemplateBuilder;\nimport org.springframework.scheduling.annotation.Async;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.client.RestTemplate;\n\nimport java.util.concurrent.CompletableFuture;\n\n@Service\npublic class UsersService {\n\n    private final RestTemplate restTemplate;\n\n    public UsersService(RestTemplateBuilder restTemplateBuilder) {\n        this.restTemplate = restTemplateBuilder.build();\n    }\n\n    @Async\n    public CompletableFuture<User> getUserDetails(String username) {\n        String url = String.format(\"http://localhost:4568/users/\n        %s\", username);\n        User user = restTemplate.getForObject(url, User.class);\n        return CompletableFuture.completedFuture(user);\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch04.mobilebff.controllers;\n\nimport com.packtpub.microservices.ch04.mobilebff.models.HydratedFollowings;\nimport com.packtpub.microservices.ch04.mobilebff.models.User;\nimport com.packtpub.microservices.ch04.mobilebff.services.SocialGraphService;\nimport com.packtpub.microservices.ch04.mobilebff.services.UsersService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\nimport java.util.stream.Collectors;\n\n@RestController\npublic class UsersController {\n\n    @Autowired\n    private SocialGraphService socialGraphService;\n\n    @Autowired\n    private UsersService userService;\n\n    @RequestMapping(path = \"/users/{username}/followings\", \n    method = RequestMethod.GET)\n    public HydratedFollowings getFollowings(@PathVariable String username) \n    throws ExecutionException, InterruptedException {\n        CompletableFuture<List<User>> users = socialGraphService.getFollowing\n        (username).thenApply(f -> f.getFollowings().stream().map(\n                        u -> userService.getUserDetails(u)).map(\n                                CompletableFuture::join).collect(Collectors.toList()));\n        return new HydratedFollowings(username, users.get());\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch04.message.models;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.JsonRootName;\n\nimport java.util.List;\n\n@JsonRootName(\"result\")\npublic class ResourceCollection<T> {\n\n    private int page;\n\n    @JsonProperty(\"next_url\")\n    private String nextUrl;\n\n    private List<T> items;\n\n    public ResourceCollection(List<T> items, int page, String nextUrl) {\n        this.items = items;\n        this.page = page;\n        this.nextUrl = nextUrl;\n    }\n\n    public int getPage() {\n        return page;\n    }\n\n    public void setPage(int pageNumber) {\n        this.page = page;\n    }\n\n    public String getNextUrl() {\n        return nextUrl;\n    }\n\n    public void setNextUrl(String nextUrl) {\n        this.nextUrl = nextUrl;\n    }\n\n    public List<T> getItems() {\n        return items;\n    }\n\n    public void setItems(List<T> items) {\n        this.items = items;\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch04.message.models;\n\nimport com.fasterxml.jackson.annotation.JsonRootName;\n\n@JsonRootName(\"item\")\npublic class Message {\n    private String id;\n    private String toUser;\n    private String fromUser;\n    private String body;\n\n    public Message(String id, String toUser, String fromUser, String body) {\n        this.id = id;\n        this.toUser = toUser;\n        this.fromUser = fromUser;\n        this.body = body;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getToUser() {\n        return toUser;\n    }\n\n    public void setToUser(String toUser) {\n        this.toUser = toUser;\n    }\n\n    public String getFromUser() {\n        return fromUser;\n    }\n\n    public void setFromUser(String fromUser) {\n        this.fromUser = fromUser;\n    }\n\n    public String getBody() {\n        return body;\n    }\n\n    public void setBody(String body) {\n        this.body = body;\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch04.message.controllers;\n\nimport com.packtpub.microservices.ch04.message.models.Message;\nimport com.packtpub.microservices.ch04.message.models.ResourceCollection;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\n@RestController\npublic class MessageController {\n\n    @RequestMapping(value = \"/messages\", method = RequestMethod.GET)\n    public ResourceCollection<Message> messages(@RequestParam(name=\"page\", required=false, defaultValue=\"1\") int page,\n                                       HttpServletRequest request) {\n        List<Message> messages = Stream.of(\n                new Message(\"1234\",\"paul\", \"veronica\", \"hello!\"),\n                new Message(\"5678\",\"meghann\", \"paul\", \"hello!\")\n        ).collect(Collectors.toList());\n\n        String nextUrl = String.format(\"%s?page=%d\", request.getRequestURI(), page + 1);\n\n        return new ResourceCollection<>(messages, page, nextUrl);\n    }\n\n    @RequestMapping(value = \"/messages/{id}\", method = RequestMethod.GET)\n    public Message message(@PathVariable(\"id\") String id) {\n        return new Message(id, \"paul\", \"veronica\", \"hi dad\");\n    }\n}\n```", "```js\n{\n    \"result\": {\n        \"page\": 1,\n        \"items\": [\n            {\n                \"id\": \"1234\",\n                \"toUser\": \"paul\",\n                \"fromUser\": \"veronica\",\n                \"body\": \"hello!\"\n            },\n            {\n                \"id\": \"5678\",\n                \"toUser\": \"meghann\",\n                \"fromUser\": \"paul\",\n                \"body\": \"hello!\"\n            }\n        ],\n        \"next_url\": \"/messages?page=2\"\n    }\n}\n```", "```js\n{\n    \"item\": {\n        \"id\": \"123\",\n        \"toUser\": \"paul\",\n        \"fromUser\": \"veronica\",\n        \"body\": \"hi dad\"\n    }\n}\n```", "```js\ngroup 'com.packtpub.microservices'\nversion '1.0-SNAPSHOT'\n\nbuildscript {\n    repositories {\n        maven {\n            url \"https://plugins.gradle.org/m2/\"\n        }\n    }\n    dependencies {\n        classpath \"gradle.plugin.org.jruyi.gradle:thrift-gradle-plugin:0.4.0\"\n    }\n}\n\napply plugin: 'java'\napply plugin: 'org.jruyi.thrift'\napply plugin: 'application'\n\nmainClassName = 'com.packtpub.microservices.ch04.MessageServiceServer'\n\ncompileThrift {\n    recurse true\n\n    generator 'html'\n    generator 'java', 'private-members'\n}\n\nsourceCompatibility = 1.8\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile group: 'org.apache.thrift', name: 'libthrift', version: '0.11.0'\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n}\n```", "```js\nnamespace java com.packtpub.microservices.ch04.thrift\n\nexception MessageException {\n    1: i32 code,\n    2: string description\n}\n\nstruct Message {\n    1: i32 id,\n    2: string from_user,\n    3: string to_user,\n    4: string body\n}\n\nservice MessageService {\n    list<Message> inbox(1: string username) throws (1:MessageException e)\n}\n```", "```js\npackage com.packtpub.microservices.ch04.thrift;\n\nimport com.packtpub.microservices.ch04.thrift.Message;\nimport com.packtpub.microservices.ch04.thrift.MessageException;\nimport com.packtpub.microservices.ch04.thrift.MessageService;\nimport org.apache.thrift.TException;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class MessageServiceImpl implements MessageService.Iface {\n\n    private Map<String, List<Message>> messagesRepository;\n\n    MessageServiceImpl() {\n        // populate our mock repository with some sample messages\n        messagesRepository = new HashMap<>();\n        messagesRepository.put(\"usertwo\", Stream.of(\n            new Message(1234, \"userone\", \"usertwo\", \"hi\"),\n            new Message(5678, \"userthree\", \"usertwo\", \"hi\")\n        ).collect(Collectors.toList()));\n        messagesRepository.put(\"userone\", Stream.of(\n            new Message(1122, \"usertwo\", \"userone\", \"hi\"),\n            new Message(2233, \"userthree\", \"userone\", \"hi\")\n        ).collect(Collectors.toList()));\n    }\n\n    @Override\n    public List<Message> inbox(String username) throws TException {\n        if (!messagesRepository.containsKey(username))\n            throw new MessageException(100, \"Inbox is empty\");\n        return messagesRepository.get(username);\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch04.thrift;\n\nimport com.packtpub.microservices.ch04.thrift.MessageService;\nimport org.apache.thrift.server.TServer;\nimport org.apache.thrift.server.TSimpleServer;\nimport org.apache.thrift.transport.TServerSocket;\nimport org.apache.thrift.transport.TServerTransport;\nimport org.apache.thrift.transport.TTransportException;\n\npublic class MessageServiceServer {\n\n    private TSimpleServer server;\n\n    private void start() throws TTransportException {\n\n        TServerTransport serverTransport = new TServerSocket(9999);\n        server = new TSimpleServer(new TServer.Args(serverTransport)\n                .processor(new MessageService.Processor<>(new MessageServiceImpl())));\n        server.serve();\n    }\n\n    private void stop() {\n        if (server != null && server.isServing())\n            server.stop();\n    }\n\n    public static void main(String[] args) {\n        MessageServiceServer service = new MessageServiceServer();\n        try {\n            if (args[1].equals(\"start\"))\n                service.start();\n            else if (args[2].equals(\"stop\"))\n                service.stop();\n        } catch (TTransportException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```", "```js\ngroup 'com.packtpub.microservices'\nversion '1.0-SNAPSHOT'\n\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.3'\n    }\n}\n\napply plugin: 'java'\napply plugin: 'com.google.protobuf'\napply plugin: 'application'\n\nmainClassName = 'com.packtpub.microservices.ch04.grpc.MessageServer'\n\nsourceCompatibility = 1.8\n\nrepositories {\n    mavenCentral()\n}\n\ndef grpcVersion = '1.10.0'\n\ndependencies {\n    compile group: 'com.google.api.grpc', name: 'proto-google-common-protos', version: '1.0.0'\n    compile group: 'io.grpc', name: 'grpc-netty', version: grpcVersion\n    compile group: 'io.grpc', name: 'grpc-protobuf', version: grpcVersion\n    compile group: 'io.grpc', name: 'grpc-stub', version: grpcVersion\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n}\n\nprotobuf {\n    protoc {\n        artifact = 'com.google.protobuf:protoc:3.5.1-1'\n    }\n    plugins {\n        grpc {\n            artifact = \"io.grpc:protoc-gen-grpc-java:${grpcVersion}\"\n        }\n    }\n    generateProtoTasks {\n        all()*.plugins {\n            grpc {}\n        }\n    }\n}\n\n// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.\nsourceSets {\n    main {\n        java {\n            srcDirs 'build/generated/source/proto/main/grpc'\n            srcDirs 'build/generated/source/proto/main/java'\n        }\n    }\n}\n```", "```js\noption java_package = \"com.packtpub.microservices.ch04.grpc\";\n\nmessage Username {\n    required string username = 1;\n}\n\nmessage Message {\n    required string id = 1;\n    required string from_user = 2;\n    required string to_user = 3;\n    required string body = 4;\n}\n\nmessage InboxReply {\n    repeated Message messages = 1;\n}\n\nservice MessageService {\n    rpc inbox(Username) returns (InboxReply) {}\n}\n```", "```js\npackage com.packtpub.microservices.ch04.grpc;\n\nimport io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport io.grpc.stub.StreamObserver;\n\nimport java.io.IOException;\n\npublic class MessageServer {\n\n    private final int port;\n    private final Server server;\n\n    private MessageServer(int port) throws IOException {\n        this(ServerBuilder.forPort(port), port);\n    }\n\n    private MessageServer(ServerBuilder<?> serverBuilder, int port) {\n        this.port = port;\n        this.server = serverBuilder.addService(new MessageService()).build();\n    }\n\n    public void start() throws IOException {\n        server.start();\n        Runtime.getRuntime().addShutdownHook(new Thread() {\n            @Override\n            public void run() {\n                // Use stderr here since the logger may has been reset by its JVM shutdown hook.\n                System.err.println(\"*** shutting down gRPC server since JVM is shutting down\");\n                MessageServer.this.stop();\n                System.err.println(\"*** server shut down\");\n            }\n        });\n    }\n\n    public void stop() {\n        if (server != null) {\n            server.shutdown();\n        }\n    }\n\n    private void blockUntilShutdown() throws InterruptedException {\n        if (server != null) {\n            server.awaitTermination();\n        }\n    }\n\n    private static class MessageService extends MessageServiceGrpc.MessageServiceImplBase {\n        public void inbox(MessageServiceOuterClass.Username request,\n                          StreamObserver<MessageServiceOuterClass.InboxReply> responseObserver) {\n            MessageServiceOuterClass.InboxReply reply = MessageServiceOuterClass.InboxReply.newBuilder().addMessages(\n                MessageServiceOuterClass.Message.newBuilder()\n                    .setId(\"1234\")\n                    .setFromUser(\"Paul\")\n                    .setToUser(\"Veronica\")\n                    .setBody(\"hi\")\n            ).addMessages(\n                MessageServiceOuterClass.Message.newBuilder()\n                    .setId(\"5678\")\n                    .setFromUser(\"FooBarUser\")\n                    .setToUser(\"Veronica\")\n                    .setBody(\"Hello again\")\n            ).build();\n            responseObserver.onNext(reply);\n            responseObserver.onCompleted();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        MessageServer server = new MessageServer(8989);\n        server.start();\n        server.blockUntilShutdown();\n    }\n}\n```"]