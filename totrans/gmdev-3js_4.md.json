["```js\nvar map = \"XXXXXXX   \\n\" +\n          \"X  S  X   \\n\" +\n          \"X  R  X   \\n\" +\n          \"X     XX  \\n\" +\n          \"X      XXX\\n\" +\n          \"XXX      X\\n\" +\n          \"  XX     X\\n\" +\n          \"   X  B  X\\n\" +\n          \"   X  S  X\\n\" +\n          \"   XXXXXXX\";\n```", "```js\n<script src=\"img/ColladaLoader.js\"></script>\n```", "```js\nvar loader = new THREE.ColladaLoader();\nloader.load('flag.dae', function(result) {\n  scene.add(result.scene);\n});\n```", "```js\nresult.scene.children[1].material = new THREE.MeshLambertMaterial({\n  color: type === 'R' ? 0xee1100 : 0x0066ee,\n  side: THREE.DoubleSide,\n});\n```", "```js\nvar loader = new THREE.JSONLoader();\nloader.load('model.js', function(geometry, materials) {\n  var material = materials && materials.length ?\n    new THREE.MeshFaceMaterial(materials) :\n    new THREE.MeshBasicMaterial({ color: 0x000000 });\n  var mesh = new THREE.Mesh(geometry, material);\n  scene.add(mesh);\n});\n```", "```js\nvar loader = new THREE.SceneLoader();\nloader.addGeometryHandler('ctm', THREE.CTMLoader);\nloader.addHierarchyHandler('dae', THREE.ColladaLoader);\nloader.load('scene.js', function(result) {\nscene.add(result.scene);\n});\n```", "```js\nvar exporter = new THREE.SceneExporter();\nvar output = JSON.stringify(exporter.parse(scene), null, \"\\t\");\n```", "```js\n<div id=\"bar\"><div id=\"progress\"></div></div>\n```", "```js\nvar total = progress.totalModels + progress.totalTextures,\n    loaded = progress.loadedModels + progress.loadedTextures,\n    progressBar = document.getElementById('progress');\nprogressBar.style.width = Math.round(100 * loaded / total) + '%';\n```", "```js\nvar loader = new THREE.JSONLoader();\nloader.load('model.js', function(geometry) {\n  var material = new THREE.MeshLambertMaterial({\n    color: 0x000000,\n    morphTargets: true,\n morphNormals: true,\n  });\n  if (geometry.morphColors && geometry.morphColors.length) {\n    var colorMap = geometry.morphColors[0];\n    for (var i = 0; i < colorMap.colors.length; i++) {\n      geometry.faces[i].color = colorMap.colors[i];\n    }\n    material.vertexColors = THREE.FaceColors;\n  }\n geometry.computeMorphNormals();\n  var mesh = new THREE.MorphAnimMesh(geometry, material);\n  mesh.duration = 5000; // in milliseconds\n  scene.add(mesh);\n  morphs.push(mesh);\n});\n```", "```js\nfor (var i = 0; i < morphs.length; i++) {\n  morphs[i].updateAnimation(delta);\n}\n```", "```js\nvar loader = new THREE.JSONLoader();\nloader.load('model.js', function(geometry, materials) {\n  for (var i = 0; i < materials.length; i++) {\n    materials[i].skinning = true;\n  }\n  var material = new THREE.MeshFaceMaterial(materials);\n  THREE.AnimationHandler.add(geometry.animation);\n  var mesh = new THREE.SkinnedMesh(geometry, material, false);\n  scene.add(mesh);\n  var animation = new THREE.Animation(mesh, geometry.animation.name);\n  animation.interpolationType = THREE.AnimationHandler.LINEAR; // or CATMULLROM for cubic splines (ease-in-out)\n  animation.play();\n});\n```", "```js\nTHREE.AnimationHandler.update(delta);\n```", "```js\nfunction checkHasFlag(unit) {\n  var otherFlag = unit.team === TEAMS.R ? TEAMS.B.flag : TEAMS.R.flag;\n  if (unit.hasFlag) {\n    var flag = unit.team === TEAMS.R ? TEAMS.R.flag : TEAMS.B.flag;\n    if (flag.mesh.visible && isPlayerInCell(flag.row, flag.col)) {\n      otherFlag.mesh.traverse(function(node) {\n        node.visible = true;\n      });\n      unit.hasFlag = false;\n    }\n  }\n  else if (otherFlag.mesh.visible && isPlayerInCell(otherFlag.row, otherFlag.col)) {\n    otherFlag.mesh.traverse(function(node) {\n      node.visible = false;\n    });\n    unit.hasFlag = true;\n  }\n}\n```", "```js\nobject.traverse(function(node) {\n  node.visible = false;\n});\n```", "```js\nvar material = new THREE.ParticleBasicMaterial({\n  color: 0x660000,\n  map: null, // or an image texture\n});\nvar particle = new THREE.Particle(material);\n```", "```js\nvar material = new THREE.SpriteMaterial({\n  color: 0x660000,\n  map: null, // or an image texture\n  opacity: 1.0,\n  blending: THREE.AdditiveBlending,\n});\nvar sprite = new THREE.Sprite(material);\n```", "```js\nvar geometry = new THREE.IcosahedronGeometry(200, 2);\nvar mat = new THREE.ParticleBasicMaterial({\n  color: type === 'R' ? TEAMS.R.color : TEAMS.B.color,\n  size: 10,\n});\nvar system = new THREE.ParticleSystem(geometry, mat);\nsystem.sortParticles = true;\nsystem.position.set(x, VERTICAL_UNIT * 0.5, z);\nscene.add(system);\n```", "```js\nsystem.rotation.y += delta * 1.5;\n```", "```js\nvar cheering = new THREE.AudioObject('cheering.ogg', 0, 1, false);\nscene.add(cheering);\n```", "```js\nTHREE.AudioObject.call(cheering, 'cheering.ogg', 1, 1, false);\n```", "```js\neffect = new THREE.AnaglyphEffect(renderer);\neffect.setSize(renderer.domElement.width, renderer.domElement.height);\n```", "```js\n<script src=\"img/EdgeShader.js\"></script>\n<script src=\"img/CopyShader.js\"></script>\n<script src=\"img/ShaderPass.js\"></script>\n<script src=\"img/RenderPass.js\"></script>\n<script src=\"img/MaskPass.js\"></script>\n<script src=\"img/EffectComposer.js\"></script>\n```", "```js\ncomposer = new THREE.EffectComposer(renderer);\ncomposer.addPass(new THREE.RenderPass(scene, camera));\nvar effect = new THREE.ShaderPass(THREE.EdgeShader);\neffect.uniforms['aspect'].value.x = renderer.domElement.width;\neffect.uniforms['aspect'].value.y = renderer.domElement.height;\ncomposer.addPass(effect);\neffect = new THREE.ShaderPass(THREE.CopyShader);\neffect.renderToScreen = true;\ncomposer.addPass(effect);\n```"]