- en: Animating SVG Elements to Create an Interactive Pie Chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll be use animation to make our graphs move. This can give
    your visualizations a more polished and professional feel.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an ordinal scale
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a color scale
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding paths for each pie segment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating an arc creating function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Formatting the data for the arc
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjusting the position of the pie
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a donut graph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing parts of the pie
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The complete code for this section can be found at [https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter06](https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter06).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As always, we''ll need an `index.html` file to house our SVG code. Let''s create
    the file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Create data/configuration variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the bottom of the `<body>` tag, we''re referencing an `app.js` file. Let''s
    create that file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To be sure that it''s working and linked up properly, we''ve added `console.log(dataset)`
    to the bottom. Let''s open `index.html` in Chrome and view the developer console,
    to make sure that everything is hooked up the way it should be:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/614496bf-68b5-46c3-a3f7-8987be6399ac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we''re sure that it''s working, we can remove `console.log(dataset)`;,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Creating an ordinal scale
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An ordinal scale maps a discrete value to some other value. A discrete value
    is something that can't be divided. Previously, we've used values such as numbers
    that can be divided up and interpolated. Interpolated just means that for any
    two numbers, we can find other numbers in between them. For instance, given 10
    and 5, we can find values between them (6, 8.2, 7, 9.9, and so on). Now, we want
    to map values that can't be interpolatedâ€”the label properties in our dataset (Bob,
    Sally, Matt, and Jane). What values lie between Bob and Sally? What about between
    Bob and Matt? There are none. These are just strings, not numerical values that
    can be divided up and interpolated.
  prefs: []
  type: TYPE_NORMAL
- en: 'What we want to do is map these discrete values to other values. The following
    is an example of how to do this with an ordinal scale. Add the following to the
    bottom of `app.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code should produce the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6119e550-d852-4c66-b6d4-0826bb07ea53.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that when you are working with ordinal scales, you'll need to list all
    of the values for both the domain and range. Even if one set is numerical (in
    the previous case, the range), you'll still have to list each value. If we just
    listed the min/max for the range, omitting63, D3 would have no idea what value
    to map Sally to. After all, how close is Sally to Bob,as a value? How close is
    Sally to Zagth or, as a value? There's no way to calculate that distance, since
    they're all strings of text, not numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'One thing that''s surprising is that you can''t invert ordinal scales. Remove
    the previous three `console.log()` statements and temporarily add the following
    to the bottom of `app.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3dcec0f1-1823-421c-a200-03442ae29824.png)'
  prefs: []
  type: TYPE_IMG
- en: 'D3 can only go in one direction: from domain to range. You can now remove the
    `console.log()` statement.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the color scale to map labels to colors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we want to map the label properties of our dataset to colors, instead of
    random numbers, like in the previous section. We can come up with our own color
    scheme, or we choose one of D3's sets of colors from [https://github.com/d3/d3-scale-chromatic#categorical](https://github.com/d3/d3-scale-chromatic#categorical).
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to, we can see that these color schemes are just arrays. Temporarily,
    add the following to the bottom of `app.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following content will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7408b48d-b675-4f6f-8ef1-6ad550d96e00.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Consequently, we can use a color scheme when setting a range. Replace the previous
    `console.log()` statement with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We can generate an array of labels for the domain by using JavaScript''s native
    `map` function. Add the following to the bottom of `app.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is our code, so far:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Setting up the SVG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next code block is pretty standard. Add the following code to the bottom
    of `app.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Adding paths for each pie segment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s add path elements for each element in our dataset. Add the following
    code to the bottom of `app.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If we examine our elements in the developer tools, we''ll see that the paths
    were added, and each path has a fill value, as determined by `colorScale(d.label)`,
    which is mapping the label of each data object to a color:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/44c97e7f-30fd-4b1e-9c1d-3382e11fbc2d.png)'
  prefs: []
  type: TYPE_IMG
- en: Generating an arc creating function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The paths have fill colors, but no shapes. If you''ll recall, the `<path>`
    elements take a `d=` attribute, which determines how they''re drawn. We want to
    set up something that will somehow map data to a `d=` string, such as the following
    code (you don''t have to add the next code snippet; it''s only there for reference):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Fortunately, D3 can generate the anonymous function that we need for the second
    parameter of `.attr()` in the previous code snippet. Add the following to `app.js`,
    just before our previous code for `var path = d3.select(''g'').selectAll(''path'')...`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s plug this function into its correct place in our previous `var path
    = d3.select(''g'').selectAll(''path'')...` code (it won''t work yet, though):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Formatting the data for the arc
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The reason that our `arc()` function won''t work is the data isn''t formatted
    properly for the function. The arc function that we generated expects the data
    object to have things like a start angle, an end angle, and so on. Fortunately,
    D3 can reformat our data so that it will work with our generated `arc()` function.
    To do this, we''ll generate a `pie` function that will take a dataset and add
    the necessary attributes to it for the start angle, end angle, and so on. Add
    the following just before the code for `var path =d3.select(''g'').selectAll(''path'')...`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Our `pie` variable is a function that takes an array of values as a parameter
    and returns an array of objects that are formatted for our `arc` function. Temporarily
    add the following code to the bottom of `app.js`, and take a look at the console
    in Chrome''s Developer tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The following content will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ce1dd5be-eba8-4b98-b307-a240815fa091.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can now remove the `console.log(pie(dataset))` call. We can use this `pie()`
    function when attaching data to our paths. Adjust the previous `var path = d3.select(''g'').selectAll(''path'')`
    code, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Unfortunately, now, each object from the data array that''s been attached to
    our path elements doesn''t have a `.label` property, so our code for `.attr(''fill'',
    function(d) {})`is broken. Fortunately, our data does have a `.data` attribute
    that mirrors what the data looked like before we passed it to the `pie()` function.
    Let''s adjust our `var path = d3.select(''g'').selectAll(''path'')` code to use
    that code, instead, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'So far, our code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code produces the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/817b382e-5517-4c82-88e1-63ef00034860.png)'
  prefs: []
  type: TYPE_IMG
- en: Adjusting the position of the pie
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Currently, we can only see the lower-right quarter of the pie graph. This is
    because the pie starts at (`0,0`), but we can move the `group` element containing
    the pie by adjusting our `d3.select(''svg'')` code, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The pie graph now looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/39092768-e765-496e-a7b7-a452e7c3700b.png)'
  prefs: []
  type: TYPE_IMG
- en: Making a donut graph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want the pie to have a hole in the center, just adjust the inner radius
    of the `arc()` function, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The graph will now look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c024f1ea-ae2a-4f3a-b0ab-1286566a5108.png)'
  prefs: []
  type: TYPE_IMG
- en: Removing parts of the pie
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We want to make it possible to click on a section of the pie to remove it.
    First, let''s add IDs to our data, to make the removal easier. Adjust the `var
    dataset` code at the top of `app.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s use those IDs when we map data to paths. Adjust the `.data()` portion
    of our `var path =d3.select(''g'').selectAll(''path'')`code at the bottom of `app.js`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s save a record of the current data for each element by adding a `_current`
    property to each element (we''ll use this later). Add `.each(function(d) { this._current
    = d; });`to the end of our `var path =d3.select(''g'')` code, at the bottom of
    `app.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the click handler by adding the following code to the bottom of `app.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove the selected data from the dataset array, using JavaScript''s native
    `filter` function. Adjust the code that we just added, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove the `path` elements from the SVG by adding the following to our click
    handler function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we click on the orange segment, we should get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/86789fa3-405b-4ffb-9a98-89f744dd1b2c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s close the donut and add a transition. Add the following to the bottom
    of our click handler. Check out the comments in the following code to see what
    each line does:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when we click on the orange segment, the donut closes smoothly, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/acd510e8-3252-44b5-bd20-2cdddca0ecce.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we created a pie chart that animates when you remove sections
    from it. You learned how to generate paths from data, so that you can get different
    parts of the pie without having to specify the drawing commands directly in the
    path elements. You also learned how to use animation to make visualizations look
    more professional. Finally, you learned how to remove sections of the pie and
    have the other path elements redraw themselves, so that the result will be a full
    pie.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will use D3 to create a graph that visualizes the relationships
    between various nodes of data.
  prefs: []
  type: TYPE_NORMAL
