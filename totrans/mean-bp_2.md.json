["```js\n{\n  \"name\": \"mean-blueprints-expensetracker\",\n  \"version\": \"0.0.1\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/robert52/mean-blueprints-expensetracker.git\"\n  },\n  \"engines\": {\n    \"node\": \">=0.12.0\"\n  },\n  \"scripts\": {\n    \"start\": \"node app.js\",\n    \"unit\": \"mocha tests/unit/ --ui bdd --recursive --reporter spec --timeout 10000 --slow 900\",\n    \"integration\": \"mocha tests/integration/ --ui bdd --recursive --reporter spec --timeout 10000 --slow 900\"\n  },\n  \"dependencies\": {\n    \"async\": \"^0.9.0\",\n    \"body-parser\": \"^1.12.3\",\n    \"express\": \"^4.12.4\",\n    \"express-session\": \"^1.11.2\",\n    \"lodash\": \"^3.7.0\",\n    \"method-override\": \"^2.3.2\",\n    \"mongoose\": \"^4.0.2\",\n    \"passport\": \"^0.2.1\",\n    \"passport-local\": \"^1.0.0\",\n    \"serve-static\": \"^1.9.2\"\n  },\n  \"devDependencies\": {\n    \"chai\": \"^2.3.0\",\n    \"chai-things\": \"^0.2.0\",\n    \"mocha\": \"^2.2.4\",\n    \"request\": \"^2.55.0\"\n  }\n}\n```", "```js\nnpm install\n\n```", "```js\n'use strict';\n\nmodule.exports = {\n  port: 3000,\n  hostname: 'localhost',\n  baseUrl: 'http://localhost:3000',\n  mongodb: {\n    uri: 'mongodb://localhost/expense_dev_db'\n  },\n  app: {\n    name: 'Expense tracker'\n  },\n  serveStatic: true,\n  session: {\n    session: {\n      type: 'mongo',\n      secret: 'someVeRyN1c3S#cr3tHer34U',\n      resave: false,\n      saveUninitialized: true\n    }\n  }\n};\n```", "```js\n'use strict';\n\nconst path = require('path');\nconst bodyParser = require('body-parser');\nconst methodOverride = require('method-override');\nconst serveStatic = require('serve-static');\nconst session = require('express-session');\nconst MongoStore = require('connect-mongo')(session);\nconst passport = require('passport');\nconst config = require('./index');\n\nmodule.exports.init = initExpress\n\nfunction initExpress(app) {\n  const env = app.get('env');\n  const root = app.get('root');\n  const sessionOpts = {\n    secret: config.session.secret,\n    key: 'skey.sid',\n    resave: config.session.resave,\n    saveUninitialized: config.session.saveUninitialized\n  };\n\n  app.use(bodyParser.urlencoded({ extended: true }));\n  app.use(bodyParser.json());\n  app.use(methodOverride());\n  app.disable('x-powered-by');\n\n  if (config.session.type === 'mongo') {\n    sessionOpts.store = new MongoStore({\n      url: config.mongodb.uri\n    });\n  }\n\n  app.use(session(sessionOpts));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  if (config.serveStatic) {\n    app.use(serveStatic(path.join(root, 'public')));\n  }\n}\n```", "```js\n'use strict';\n\nconst mongoose = require('mongoose');\nconst config = require('./index');\n\nmodule.exports.init = initMongoose;\n\nfunction initMongoose(app) {\n  mongoose.connect(config.mongodb.uri);\n\n  // If the Node process ends, cleanup existing connections\n  process.on('SIGINT', cleanup);\n  process.on('SIGTERM', cleanup);\n  process.on('SIGHUP', cleanup);\n\n  if (app) {\n    app.set('mongoose', mongoose);\n  }\n\n  return mongoose;\n}\n\nfunction cleanup() {\n  mongoose.connection.close(function () {\n    console.log('Closing DB connections and stopping the app. Bye bye.');\n    process.exit(0);\n  });\n}\n```", "```js\n'use strict';\n\n// Get process environment or set default environment to development\nconst ENV = process.env.NODE_ENV || 'development';\nconst DEFAULT_PORT = 3000;\nconst DEFAULT_HOSTNAME = 'localhost';\n\nconst http = require('http');\nconst express = require('express');\nconst config = require('./config');\nconst app = express();\nlet server;\n\n/**\n * Set express (app) variables\n */\napp.set('config', config);\napp.set('root', __dirname);\napp.set('env', ENV);\n\nrequire('./config/mongoose').init(app);\nrequire('./config/models').init(app);\nrequire('./config/passport').init(app);\nrequire('./config/express').init(app);\nrequire('./config/routes').init(app);\n\napp.use((err, req, res, next) => {\n  res.status(500).json(err);\n});\n\n/**\n * Start the app if not loaded by another module\n */\n if (!module.parent) {\n   server = http.createServer(app);\n   server.listen(\n     config.port || DEFAULT_PORT,\n     config.hostname || DEFAULT_HOSTNAME,\n     () => {\n       console.log(`${config.app.name} is running`);\n       console.log(`   listening on port: ${config.port}`);\n       console.log(`   environment: ${ENV.toLowerCase()}`);\n     }\n   );\n }\n\nmodule.exports = app;\n```", "```js\n'use strict';\n\n/**\n * Important! Set the environment to test\n */\nprocess.env.NODE_ENV = 'test';\n\nconst chai = require('chai');\nconst should = chai.should();\nconsst config = require('../../config/environments/test');\n\ndescribe('User model', function() {\n  const mongoose;\n  const User;\n  const _user;\n  const newUserData = {\n    email: 'jane.doe@test.com',\n    password: 'user_password',\n    name: 'Jane Doe'\n  };\n\n  before(function(done) {\n    mongoose = require('../../config/mongoose').init();\n    User = require('../../app/models/user');\n    done();\n  });\n\n  after(function(done) {\n    User.remove({}).exec(function(err) {\n      if (err) throw err;\n\n      mongoose.connection.close(function() {\n        setTimeout(function() { done(); }, 1000);\n      });\n    });\n  });\n});\n```", "```js\n      it('should register a user', function(done) {\n        User.register(newUserData, function(err, user) {\n          if (err) throw err;\n\n          should.exist(user);\n          user.email.should.equal(newUserData.email);\n          should.not.exist(user.password);\n          should.not.exist(user.passwordSalt);\n          should.exist(user.createdAt);\n          user.active.should.equal(true);\n\n          _user = user;\n          done();\n        });\n      });\n    ```", "```js\n      it('should not register a user if already exists', function(done) {\n        User.register(newUserData, function(err, user) {\n          should.exist(err);\n          err.code.should.equal(11000); // duplicate key error\n          should.not.exist(user);\n          done();\n        });\n      });\n    ```", "```js\n      it('should authenticate a user with valid credentials', function(done) {\n        User.authenticate(newUserData.email, 'user_password', function(err, user) {\n          if (err) throw err;\n\n          should.exist(user);\n          should.not.exist(user.password);\n          should.not.exist(user.passwordSalt);\n          user.email.should.equal(newUserData.email);\n          done();\n        });\n      });\n    ```", "```js\n      it('should not authenticate user with invalid credentials', function(done) {\n        User.authenticate(newUserData.email, 'notuserpassowrd', function(err, user) {\n          if (err) throw err;\n\n          should.not.exist(user);\n          done();\n        });\n      });\n    ```", "```js\n      it('should change the password of a user', function(done) {\n        _user.changePassword('user_password', 'new_user_password', function(err, result) {\n          if (err) throw err;\n\n          should.exist(result);\n          result.success.should.equal(true);\n          result.message.should.equal('Password changed successfully.');\n          result.type.should.equal('password_change_success');\n\n          // run a check credential with the new password\n          User.authenticate(_user.email, 'new_user_password', function(err, user) {\n            if (err) throw err;\n\n            should.exist(user);\n            user.email.should.equal(_user.email);\n            done();\n          });\n        });\n      });\n    ```", "```js\n      it('should not change password if old password does not match', function(done) {\n        _user.changePassword('not_good', 'new_user_password', function(err, result) {\n          should.not.exist(result);\n          should.exist(err);\n          err.type.should.equal('old_password_does_not_match');\n\n          // run a check credential with the old password\n          User.authenticate(_user.email, 'new_user_password', function(err, user) {\n            if (err) throw err;\n\n            should.exist(user);\n            user.email.should.equal(_user.email);\n            done();\n          });\n        });\n      });\n    ```", "```js\n'use strict';\n\nconst LEN = 256;\nconst SALT_LEN = 64;\nconst ITERATIONS = 10000;\nconst DIGEST = 'sha256';\nconst crypto = require('crypto');\n\nmodule.exports.hash = hashPassword;\nmodule.exports.verify = verify;\n```", "```js\nfunction hashPassword(password, salt, callback) {\n  let len = LEN / 2;\n\n  if (3 === arguments.length) {\n    generateDerivedKey(password, salt, ITERATIONS, len, DIGEST, callback);\n  } else {\n    callback = salt;\n    crypto.randomBytes(SALT_LEN / 2, (err, salt) => {\n      if (err) {\n        return callback(err);\n      }\n\n      salt = salt.toString('hex');\n      generateDerivedKey(password, salt, ITERATIONS, len, DIGEST, callback);\n    });\n  }\n}\n```", "```js\nfunction generateDerivedKey(password, salt, iterations, len, digest, callback) {\n  crypto.pbkdf2(password, salt, ITERATIONS, len, DIGEST, (err, derivedKey) => {\n    if (err) {\n      return callback(err);\n    }\n\n    return callback(null, derivedKey.toString('hex'), salt);\n  });\n}\n```", "```js\nfunction verify(password, hash, salt, callback) {\n  hashPassword(password, salt, (err, hashedPassword) => {\n    if (err) {\n      return callback(err);\n    }\n\n    if (hashedPassword === hash) {\n      callback(null, true);\n    } else {\n      callback(null, false);\n    }\n  });\n}\n```", "```js\n'use strict';\n\nconst _ = require('lodash');\nconst mongoose = require('mongoose');\nconst passwordHelper = require('../helpers/password');\nconst Schema = mongoose.Schema;\n\nconst UserSchema = new Schema({\n  email:  {\n    type: String,\n    required: true,\n    unique: true\n  },\n  name: {\n    type: String\n  },\n  password: {\n    type: String,\n    required: true,\n    select: false\n  },\n  passwordSalt: {\n    type: String,\n    required: true,\n    select: false\n  },\n  phoneNumber: {\n    type: String\n  },\n  active: {\n    type: Boolean,\n    default: true\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  }\n});\n\nUserSchema.statics.register = registerUser;\nUserSchema.statics.authenticate = authenticateUser;\nUserSchema.methods.changePassword = changeUserPassword;\n```", "```js\nfunction registerUser(opts, callback) {\n  let data = _.cloneDeep(opts);\n\n  //hash the password\n  passwordHelper.hash(opts.password, (err, hashedPassword, salt) => {\n    if (err) {\n      return callback(err);\n    }\n\n    data.password = hashedPassword;\n    data.passwordSalt = salt;\n\n    //create the user\n    this.model('User').create(data, (err, user) => {\n      if (err) {\n        return callback(err, null);\n      }\n\n      // remove password and salt from the result\n      user.password = undefined;\n      user.passwordSalt = undefined;\n      // return user if everything is ok\n      callback(err, user);\n    });\n  });\n}\n```", "```js\nfunction authenticateUser(email, password, callback) {\n  this\n  .findOne({ email: email })\n  .select('+password +passwordSalt')\n  .exec((err, user) => {\n    if (err) {\n      return callback(err, null);\n    }\n\n    // no user found just return the empty user\n    if (!user) {\n      return callback(err, user);\n    }\n\n    // verify the password with the existing hash from the user\n    passwordHelper.verify(\n      password,\n      user.password,\n      user.passwordSalt,\n      (err, result) => {\n        if (err) {\n          return callback(err, null);\n        }\n\n        // if password does not match don't return user\n        if (result === false) {\n          return callback(err, null);\n        }\n\n        // remove password and salt from the result\n        user.password = undefined;\n        user.passwordSalt = undefined;\n        // return user if everything is ok\n        callback(err, user);\n      }\n    );\n  });\n}\n```", "```js\nfunction changeUserPassword(oldPassword, newPassword, callback) {\n  this\n  .model('User')\n  .findById(this.id)\n  .select('+password +passwordSalt')\n  .exec((err, user) => {\n    if (err) {\n      return callback(err, null);\n    }\n\n    // no user found just return the empty user\n    if (!user) {\n      return callback(err, user);\n    }\n\n    passwordHelper.verify(\n      oldPassword,\n      user.password,\n      user.passwordSalt,\n      (err, result) => {\n        if (err) {\n          return callback(err, null);\n        }\n\n        // if password does not match don't return user\n        if (result === false) {\n          let PassNoMatchError = new Error('Old password does not match.');\n          PassNoMatchError.type = 'old_password_does_not_match';\n          return callback(PassNoMatchError, null);\n        }\n\n        // generate the new password and save the user\n        passwordHelper.hash(newPassword, (err, hashedPassword, salt) => {\n          this.password = hashedPassword;\n          this.passwordSalt = salt;\n\n          this.save((err, saved) => {\n            if (err) {\n              return callback(err, null);\n            }\n\n            if (callback) {\n              return callback(null, {\n                success: true,\n                message: 'Password changed successfully.',\n                type: 'password_change_success'\n              });\n            }\n          });\n        });\n      }\n    );\n  });\n}\n```", "```js\nmodule.exports = mongoose.model('User', UserSchema);\n```", "```js\nmocha tests/integration/user.mode.test.js\n\n```", "```js\n User Model Integration\n #register()\n √ should create a new user (124ms)\n √ should not create a new user if email already exists (100ms)\n #authenticate()\n √ should return the user if the credentials are valid (63ms)\n √ should return nothing if the credential of the user are invalid (62ms)\n #changePassword()\n √ should change the password of a user (223ms)\n √ should not change password if old password does not match (146ms)\n\n 6 passing (1s)\n\n```", "```js\n        it('should authenticate a user and return a new token', function(done) {\n          request({\n            method: 'POST',\n            url: baseUrl + '/auth/basic',\n            auth: {\n              username: userFixture.email,\n              password: 'P@ssw0rd!'\n            },\n            json:true\n          }, function(err, res, body) {\n            if (err) throw err;\n\n            res.statusCode.should.equal(200);\n            body.email.should.equal(userFixture.email);\n            should.not.exist(body.password);\n            should.not.exist(body.passwordSalt);\n            should.exist(body.token);\n            should.exist(body.token.hash);\n            should.exist(body.token.expiresAt);\n            done();\n          });\n        });\n    ```", "```js\n        it('should not authenticate a user with invalid credentials', function(done) {\n          request({\n            method: 'POST',\n            url: baseUrl + '/auth/basic',\n            auth: {\n              username: userFixture.email,\n              password: 'incorrectpassword'\n            },\n            json:true\n          }, function(err, res, body) {\n            if (err) throw err;\n\n            res.statusCode.should.equal(400);\n            body.message.should.equal('Invalid email or password.');\n            done();\n          });\n        });\n    ```", "```js\n'use strict';\n\nconst LEN = 16;\nconst crypto = require('crypto');\n\nmodule.exports.generate = generateToken;\n\nfunction generateToken(size, callback) {\n  if (typeof size === 'function') {\n    callback = size;\n    size = LEN;\n  }\n\n  // we will return the token in `hex`\n  size = size / 2;\n\n  crypto.randomBytes(size, (err, buf) => {\n    if (err) {\n      return callback(err);\n    }\n\n    const token = buf.toString('hex');\n\n    callback(null, token);\n  });\n} \n```", "```js\nprocess.env.NODE_ENV = 'test';\n\nconst chai = require('chai');\nconst should = chai.should();\nconst mongoose = require('../../config/mongoose').init();\nconst Token = require('../../app/models/token');\n\ndescribe('Token Model Integration', function() {\n  after(function(done) {\n    mongoose.connection.db.dropDatabase(function(err) {\n      if (err) throw err;\n\n      setTimeout(done, 200);\n    });\n  });\n\n  describe('#generate() - Token class method', function() {\n    var _userId = new mongoose.Types.ObjectId();\n\n    it('should generate a new token for a user', function(done) {\n      Token.generate({\n        user: _userId\n      }, function(err, token) {\n        if (err) throw err;\n\n        should.exist(token);\n        should.exist(token.id);\n        token.hash.length.should.equal(32);\n        token.user.toString().should.equal(_userId.toString());\n        done();\n      });\n    });\n  });\n\n});\n```", "```js\n'use strict';\n\nconst EXPIRATION = 30; // in days\nconst LEN = 32;\n\nconst mongoose = require('mongoose');\nconst tokenHelper = require('../helpers/token');\nconst Schema = mongoose.Schema;\nconst ObjectId = Schema.ObjectId;\n\nconst TokenSchema = new Schema({\n  user: {\n    type: ObjectId,\n    ref: 'User',\n    required: true\n  },\n  hash: {\n    type: String,\n  },\n  expiresAt: {\n    type: Date,\n    default: function() {\n      var now = new Date();\n      now.setDate(now.getDate() + EXPIRATION);\n\n      return now;\n    }\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  }\n});\n\nTokenSchema.statics.generate = generateToken\n\nfunction generateToken(opts, callback) {\n  tokenHelper.generate(opts.tokenLength || LEN, (err, tokenString) => {\n    if (err) {\n      return callback(err);\n    }\n\n    opts.hash = tokenString;\n\n    this.model('Token').create(opts, callback);\n  });\n};\n\n// compile Token model\nmodule.exports = mongoose.model('Token', TokenSchema); \n```", "```js\n'use strict';\n\nconst passport = require('passport');\nconst BasicStrategy = require('passport-http').BasicStrategy;\nconst mongoose = require('mongoose');\nconst User = mongoose.model('User');\n\nmodule.exports.init = initBasicStrategy;\n\nfunction initBasicStrategy() {\n  passport.use('basic', new BasicStrategy((username, password, done) => {\n    User.authenticate(username, password, (err, user) => {\n      if (err) {\n        return done(err);\n      }\n\n      if (!user) {\n        return done(null, false);\n      }\n\n      return done(null, user);\n    });\n  }));\n} \n```", "```js\n'use strict';\n\nconst _ = require('lodash');\nconst passport = require('passport');\nconst mongoose = require('mongoose');\nconst Token = mongoose.model('Token');\n\nmodule.exports.basic = basicAuthentication;\n\nfunction basicAuthentication(req, res, next) {\n  passport.authenticate('basic', (err, user, info) => {\n    if (err || !user) {\n      return res.status(400).send({ message: 'Invalid email or password.' });\n    }\n\n    Token.generate({\n      user: user.id\n    }, (err, token) => {\n      if (err || !token) {\n        return res.status(400).send({ message: 'Invalid email or password.' });\n      }\n\n      var result = user.toJSON();\n      result.token = _.pick(token, ['hash', 'expiresAt']);\n\n      res.json(result);\n    });\n\n  })(req, res, next);\n} \n```", "```js\n'use strict';\n\nconst express = require('express');\nconst router = express.Router();\nconst authCtrl = require('../controllers/authentication');\n\nrouter.post('/basic, authCtrl.basic);\n\nmodule.exports = router;\n```", "```js\n'use strict';\n\nmodule.exports.init = function(app) {\n  var routesPath = app.get('root') + '/app/routes';\n\n  app.use('/auth, require(routesPath + '/auth));\n};\n```", "```js\nrequire('./config/express').init(app);\nrequire('./config/routes').init(app);\n\n```", "```js\nmocha tests/integration/authentication.test.js\n\n```", "```js\n Authentication\n Basic authentication\n √ should authenticate a user and return a new token\n √ should not authenticate a user with invalid credentials\n 2 passing\n\n```", "```js\n  describe('Bearer authentication', function() {\n    var _token;\n\n    before(function() {\n      Token.generate({\n        user: _user.id\n      }, function(err, token) {\n        if (err) throw err;\n\n        _token = token;\n        done();\n      });\n    });\n\n    it('should authenticate a user using an access token', function(done) {\n      request({\n        method: 'GET',\n        url: baseUrl + '/auth/info',\n        auth: {\n          bearer: _token.value\n        },\n        json:true\n      }, function(err, res, body) {\n        if (err) throw err;\n\n        res.statusCode.should.equal(200);\n        body.email.should.equal(userFixture.email);\n        should.not.exist(body.password);\n        should.not.exist(body.passwordSalt);\n        done();\n      });\n    });\n\n    it('should not authenticate a user with an invalid access token', function(done) {\n      request({\n        method: 'GET',\n        url: baseUrl + '/auth/info',\n        auth: {\n          bearer: _token.value + 'a1e'\n        },\n        json:true\n      }, function(err, res, body) {\n        if (err) throw err;\n\n        res.statusCode.should.equal(401);\n        body.should.equal('Unauthorized');\n        done();\n      });\n    });\n  });\n```", "```js\n'use strict';\n\nconst passport = require('passport');\nconst BearerStrategy = require('passport-http-bearer').Strategy;\nconst mongoose = require('mongoose');\nconst Token = mongoose.model('Token');\n\nmodule.exports.init = initBearerStrategy;\n\nfunction initBearerStrategy() {\n  passport.use('bearer', new BearerStrategy((token, done) => {\n    Token\n    .findOne({ hash: token })\n    .populate('user')\n    .exec((err, result) => {\n      if (err) {\n        return done(err);\n      }\n\n      if (!result) {\n        return done(null, false, { message: 'Unauthorized.' });\n      }\n\n      if (!result.user) {\n        return done(null, false, { message: 'Unauthorized.' });\n      }\n\n      done(null, result.user);\n    });\n  }));\n} \n```", "```js\n'use strict';\n\nconst passport = require('passport');\n\nmodule.exports.bearer = function bearerAuthentication(req, res, next) {\n  return passport.authenticate('bearer', { session: false });\n};\n```", "```js\nmodule.exports.getAuthUser = getAuthUser;\n\nfunction getAuthUser(req, res, next) {\n  if (!req.user) {\n    res.status(401).json({ message: 'Unauthorized.' });\n  }\n\n  res.json(req.user);\n} \n```", "```js\n'use strict';\n\nvar express = require('express');\nvar router = express.Router();\nvar authCtrl = require('../controllers/authentication');\nvar auth = require('../middlewares/authentication');\n\nrouter.post('/basic', authCtrl.basic);\nrouter.get('/info', auth.bearer(), authCtrl.getAuthUser);\n\nmodule.exports = router;\n```", "```js\nmocha tests/integration/authentication.test.js\n\n```", "```js\n Authentication\n Basic authentication\n √ should authenticate a user and return a new token\n √ should not authenticate a user with invalid credentials \n Bearer authentication\n √ should authenticate a user using an access token\n √ should not authenticate a user with an invalid access token\n\n 4 passing\n\n```", "```js\n+ 0.2 = 0.30000000000000004\n```", "```js\n'use strict';\n\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\nconst ObjectId = Schema.ObjectId;\n\nconst CategorySchema = new Schema({\n  name: {\n    type: String,\n    required: true\n  },\n  description: {\n    type: String\n  },\n  owner: {\n    type: ObjectId,\n    ref: 'User',\n    required: true\n  },\n  collaborators: {\n    type: [\n      {\n        type: ObjectId,\n        ref: 'User'\n      }\n    ]\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  }\n});\n\n// compile Category model\nmodule.exports = mongoose.model('Category', CategorySchema);\n```", "```js\n['user', 'token', 'category', 'expense'].forEach(function(model) {\n    require(modelsPath + model);\n});\n```", "```js\n'use strict';\n\nconst express = require('express');\nconst router = express.Router();\nconst categoryCtrl = require('../controllers/category');\nconst auth = require('../middlewares/authentication');\n\nrouter.param('categoryId', expenseCtrl.findById);\n\nrouter.get('/categories', auth.bearer(), categoryCtrl.getAll);\nrouter.get('/categories/:categoryId', auth.bearer(), categoryCtrl.getOne);\nrouter.post('/categories', auth.bearer(), categoryCtrl.create);\nrouter.put('/categories/:categoryId', auth.bearer(), categoryCtrl.update);\nrouter.delete('/categories/:categoryId', auth.bearer(), categoryCtrl.delete);\n\nmodule.exports = router;\n```", "```js\n'use strict';\n\nconst _ = require('lodash');\nconst mongoose = require('mongoose');\nconst Category = mongoose.model('Category');\nconst ObjectId = mongoose.Types.ObjectId;\n\nmodule.exports.findById = findCategoryById;\nmodule.exports.create = createCategory;\nmodule.exports.getOne = getOneCategory;\nmodule.exports.getAll = getAllCategories;\nmodule.exports.update = updateCategory;\nmodule.exports.delete = deleteCategory;\n\nfunction findCategoryById(req, res, next, id) {\n  if (!ObjectId.isValid(id)) {\n    return res.status(404).json({ message: 'Not found.'});\n  }\n\n  Category.findById(id, (err, category) => {\n    if (err) {\n      return next(err);\n    }\n\n    if (!category) {\n      return res.status(404).json({ message: 'Not found.'});\n    }\n\n    req.category = category;\n    next();\n  });\n} \n```", "```js\nfunction createCategory(req, res, next) {\n  const data = req.body;\n  data.owner = req.user.id;\n\n  Category.create(data, (err, category) => {\n    if (err) {\n      return next(err);\n    }\n\n    res.status(201).json(category);\n  });\n} \n```", "```js\nfunction getOneCategory(req, res, next) {\n  res.json(req.category);\n}\n\nfunction getAllCategories(req, res, next) {\n  Category.find((err, categories) => {\n    if (err) {\n      return next(err);\n    }\n\n    res.json(categories);\n  });\n} \n```", "```js\nfunction updateCategory(req, res, next) {\n  const category = req.category;\n  const data = _.pick(req.body, ['description', 'name']);\n  _.assign(category, data);\n\n  category.save((err, updatedCategory) => {\n    if (err) {\n      return next(err);\n    }\n\n    res.json(updatedCategory);\n  });\n}\n```", "```js\nfunction deleteCategory(req, res, next) {\n  req.category.remove((err) => {\n    if (err) {\n      return next(err);\n    }\n\n    res.status(204).json();\n  });\n} \n```", "```js\n'use strict';\n\nconst CURRENCY = 'USD';\nconst SCALE_FACTOR = 1000;\n\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\nconst ObjectId = Schema.ObjectId;\n\nconst ExpenseSchema = new Schema({\n  name: {\n    type: String\n  },\n  amount: {\n    type: Number,\n    default: 0\n  },\n  currency: {\n    type: String,\n    default: CURRENCY\n  },\n  scaleFactor: {\n    type: Number,\n    default: SCALE_FACTOR\n  },\n  user: {\n    type: ObjectId,\n    ref: 'User',\n    required: true\n  },\n  category: {\n    type: ObjectId,\n    ref: 'Category',\n    required: true\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  }\n}, {\n  toObject: {\n    virtuals: true\n  },\n  toJSON: {\n    virtuals: true\n  }\n});\n\nmodule.exports = mongoose.model('Expense', ExpenseSchema); \n```", "```js\nExpenseSchema.virtual('value')\n.set(function(value) {\n  if (value) {\n    this.set('amount', value * this.scaleFactor);\n  }\n})\n.get(function() {\n  return this.amount / this.scaleFactor;\n});\n```", "```js\n        it('should save an expense', function(done) {\n          request({\n            method: 'POST',\n            url: baseUrl + '/expenses',\n            auth: {\n              bearer: _token.value\n            },\n            form: {\n              value: 14.99,\n              category: _category.toString()\n            },\n            json:true\n          }, function(err, res, body) {\n            if (err) throw err;\n\n            res.statusCode.should.equal(201);\n            body.amount.should.equal(14990);\n            body.scaleFactor.should.equal(1000);\n            body.value.should.equal(14.99);\n            body.category.should.equal(_category.toString());\n            done();\n          });\n        });\n    ```", "```js\n        it('should get balance for all expenses', function(done) {\n          request({\n            method: 'GET',\n            url: baseUrl + '/expenses/balance',\n            auth: {\n              bearer: _token.value\n            },\n            json:true\n          }, function(err, res, body) {\n            if (err) throw err;\n\n            res.statusCode.should.equal(200);\n            should.exist(body);\n            body.balance.should.equal(33.33);\n            body.count.should.equal(3);\n            done();\n          });\n        });\n    ```", "```js\n        it('should get expenses balance only for a category', function(done) {\n          request({\n            method: 'GET',\n            url: baseUrl + '/expenses/balance?category=' + _categoryOne.toString(),\n            auth: {\n              bearer: _token.value\n            },\n            json:true\n          }, function(err, res, body) {\n            if (err) throw err;\n\n            res.statusCode.should.equal(200);\n            should.exist(body);\n            body.balance.should.equal(21.21);\n            body.count.should.equal(2);\n            done();\n          });\n        });\n    ```", "```js\n'use strict';\n\nconst express = require('express');\nconst router = express.Router();\nconst expenseCtrl = require('../controllers/expense');\nconst auth = require('../middlewares/authentication');\n\nrouter.param('expenseId', expenseCtrl.findById);\n\nrouter.get('/expenses', auth.bearer(), expenseCtrl.getAll);\nrouter.get('/expenses/:expenseId', auth.bearer(), expenseCtrl.getOne);\nrouter.post('/expenses', auth.bearer(), expenseCtrl.create);\nrouter.put('/expenses/:expenseId', auth.bearer(), expenseCtrl.update);\nrouter.delete('/expenses/:expenseId', auth.bearer(), expenseCtrl.delete);\n\nmodule.exports = router;\n```", "```js\n'use strict';\n\nconst _ = require('lodash');\nconst mongoose = require('mongoose');\nconst Expense = mongoose.model('Expense');\nconst ObjectId = mongoose.Types.ObjectId;\n\nmodule.exports.create = createExpense;\nmodule.exports.findById = findExpenseById\nmodule.exports.getOne = getOneExpense;\nmodule.exports.getAll = getAllExpenses;\nmodule.exports.update = updateExpense;\nmodule.exports.delete = deleteExpense;\nmodule.exports.getBalance = getExpensesBalance;\n\nfunction createExpense(req, res, next) {\n  const data = _.pick(req.body, ['name', 'value', 'category', 'createdAt']);\n  data.user = req.user.id;\n\n  if (data.createdAt === null) {\n    delete data.createdAt;\n  }\n\n  Expense.create(data, (err, expense) => {\n    if (err) {\n      return next(err);\n    }\n\n    res.status(201).json(expense);\n  });\n} \n```", "```js\nfunction findExpenseById(req, res, next, id) {\n  if (!ObjectId.isValid(id)) {\n    return res.status(404).json({ message: 'Not found.'});\n  }\n\n  Expense.findById(id, (err, expense) => {\n    if (err) {\n      return next(err);\n    }\n\n    if (!expense) {\n      return res.status(404).json({ message: 'Not found.'});\n    }\n\n    req.expense = expense;\n    next();\n  });\n} \n```", "```js\nfunction getOneExpense(req, res, next) {\n  if (!req.expense) {\n    return res.status(404).json({ message: 'Not found.'});\n  }\n\n  res.json(req.expense);\n}\n```", "```js\nfunction getAllExpenses(req, res, next) {\n  const limit = +req.query.limit || 30;\n  const skip = +req.query.skip || 0;\n  const query = {};\n\n  if (req.category) {\n    query.category = req.category.id;\n  } else {\n    query.user = req.user.id;\n  }\n\n  if (req.query.startDate) {\n    query.createdAt = query.createdAt || {};\n    query.createdAt.$gte = new Date(req.query.startDate);\n  }\n\n  if (req.query.endDate) {\n    query.createdAt = query.createdAt || {};\n    query.createdAt.$lte = new Date(req.query.endDate);\n  }\n\n  if (req.query.category) {\n    query.category = req.query.category;\n  }\n\n  Expense\n  .find(query)\n  .limit(limit)\n  .skip(skip)\n  .sort({ createdAt: 'desc' })\n  .populate('category')\n  .exec((err, expenses) => {\n    if (err) {\n      return next(err);\n    }\n\n    res.json(expenses);\n  });\n}  \n```", "```js\nfunction updateExpense(req, res, next) {\n  const data = _.pick(req.body, ['name', 'value', 'category', 'createdAt']);\n  const expense = req.expense;\n\n  if (data.createdAt === null) {\n    delete data.createdAt;\n  }\n\n  _.assign(expense, data);\n\n  expense.save((err, updatedExpense) => {\n    if (err) {\n      return next(err);\n    }\n\n    res.json(updatedExpense);\n  });\n} \n```", "```js\nfunction deleteExpense(req, res, next) {\n  req.expense.remove((err) => {\n    if (err) {\n      return next(err);\n    }\n\n    res.status(204).json();\n  });\n}\n```", "```js\nExpenseSchema.statics.getBalance = getExpensesBalance;\n\nfunction getExpensesBalance(opts, callback) {\n  const query = {};\n\n  // set the current user\n  query.user = opts.user;\n\n  if (opts.category || opts.category === null) {\n    query.category = new mongoose.Types.ObjectId(opts.category);\n  }\n\n  if (opts.startDate && opts.endDate) {\n    query.createdAt = {\n      $gte: new Date(opts.startDate),\n      $lte: new Date(opts.endDate)\n    };\n  }\n\n  this.model('Expense').aggregate([\n    { $match: query },\n    { $group: { _id: null, balance: { $sum: '$amount' }, count: { $sum: 1 } } }\n  ], (err, result) => {\n\n    // result is an array with a single item, we can just return that\n    const final = result[0];\n    final.balance = final.balance / SCALE_FACTOR;\n\n    callback(err, final);\n  });\n}\n```", "```js\nfunction getExpensesBalance(req, res, next) {\n  Expense.getBalance({\n    user: req.user._id,\n    category: req.query.category,\n    startDate: req.query.start,\n    endDate: req.query.end\n  }, (err, result) => {\n    if (err) {\n      return next(err);\n    }\n\n    res.json(result);\n  });\n}\n```", "```js\n{\n  \"private\": true,\n  \"name\": \"mean-blueprints-expensetracker-client\",\n  \"dependencies\": {\n    \"systemjs\": \"^0.19.25\",\n    \"es6-shim\": \"^0.35.0\",\n    \"es6-promise\": \"^3.0.2\",\n    \"rxjs\": \"^5.0.0-beta.2\",\n    \"reflect-metadata\": \"^0.1.2\",\n    \"zone.js\": \"^0.6.6\",\n    \"angular2\": \"^2.0.0-beta.14\"\n  },\n  \"devDependencies\": {\n    \"typings\": \"^0.7.12\",\n    \"typescript\": \"^1.8.9\"\n  }\n} \n```", "```js\nnpm install\n\n```", "```js\n    import { Component, OnInit } from 'angular2/core';\n    import { RouteConfig, RouterOutlet, RouterLink } from 'angular2/router';\n    import { Router } from 'angular2/router';\n    import { AuthHttp, AuthService, SigninComponent, RegisterComponent } from './auth/index';\n    import { ExpensesComponent } from './expense/index';\n    import { CategoriesComponent } from './expense/index';\n    ```", "```js\n    @RouteConfig([\n      { path: '/', redirectTo: ['/Expenses'], useAsDefault: true },\n      { path: '/expenses', as: 'Expenses', component: ExpensesComponent },\n      { path: '/categories', as: 'Categories', component: CategoriesComponent },\n      { path: '/signin', as: 'Signin', component: SigninComponent },\n      { path: '/register', as: 'Register', component: RegisterComponent }\n    ])\n    ```", "```js\n    @Component({\n        selector: 'expense-tracker',\n        directives: [\n          RouterOutlet,\n          RouterLink\n        ],\n        template: `\n          <div class=\"app-wrapper card whiteframe-z2\">\n            <div class=\"row\">\n              <div class=\"col\">\n                <a href=\"#\">Expense tracker</a>\n                <a href=\"#\" [routerLink]=\"['Expenses']\">Expenses</a>\n              </div>\n            </div>\n            <div class=\"row\">\n              <router-outlet></router-outlet>\n            </div>\n          </div>\n        `\n    })\n    ```", "```js\n    export class AppComponent implements OnInit {\n      public currentUser: any;\n      private _authHttp: AuthHttp;\n      private _authSerivce: AuthService;\n      private _router: Router;\n\n      constructor(authHttp: AuthHttp, authSerice: AuthService, router: Router) {\n        this._router = router;\n        this._authSerivce = authSerice;\n        this._authHttp = authHttp;\n      }\n\n      ngOnInit() {\n        this.currentUser = {};\n        this._authHttp.unauthorized.subscribe((res) => {\n          if (res) {\n            this._router.navigate(['./Signin']);\n          }\n        });\n        this._authSerivce.currentUser.subscribe((user) => {\n          this.currentUser = user;\n        });\n      }\n    }\n    ```", "```js\n    import { Injectable } from 'angular2/core';\n    import { Http, Response, Headers } from 'angular2/http';\n    import { Subject } from 'rxjs/Subject';\n    import { BehaviorSubject } from 'rxjs/Subject/BehaviorSubject';\n    import { contentHeaders } from '../../common/index';\n    ```", "```js\n    @Injectable()\n    export class AuthService {\n      public currentUser: Subject<any>;\n      private _http: Http;\n\n      constructor(http: Http) {\n        this._http = http;\n        this._initSession();\n      }\n    }\n    ```", "```js\n      public signin(user: any) {\n        let body = this._serialize(user);\n        let basic = btoa(`${user.email}:${user.password}`);\n        let headers = new Headers(contentHeaders);\n        headers.append('Authorization', `Basic ${basic}`)\n\n        return this._http\n        .post('/auth/basic', '', { headers: headers })\n        .map((res: Response) => res.json());\n      }\n    Append the register() method:\n      public register(user: any) {\n        let body = this._serialize(user);\n\n        return this._http\n        .post('/api/users', body, { headers: contentHeaders })\n        .map((res: Response) => res.json());\n      }\n    ```", "```js\n      public setCurrentUser(user: any) {\n        this.currentUser.next(user);\n      }\n    ```", "```js\n      private _initSession() {\n        let user = this._deserialize(localStorage.getItem('currentUser'));\n        this.currentUser = new BehaviorSubject<Response>(user);\n        // persist the user to the local storage\n        this.currentUser.subscribe((user) => {\n          localStorage.setItem('currentUser', this._serialize(user));\n          localStorage.setItem('token', user.token.hash || '');\n        });\n      }\n    ```", "```js\n      private _serialize(data) {\n        return JSON.stringify(data);\n      }\n\n      private _deserialize(str) {\n        try {\n          return JSON.parse(str);\n        } catch(err) {\n          console.error(err);\n          return null;\n        }\n      }\n    ```", "```js\nimport { Component } from 'angular2/core';\nimport { Router, RouterLink } from 'angular2/router';\nimport { AuthService } from '../services/auth.service';\n\nexport class RegisterComponent {\n  private _authService: AuthService;\n  private _router: Router;\n\n  constructor(authService: AuthService, router: Router) {\n    this._router = router;\n    this._authService = authService;\n  }\n\n  register(event, name, email, password) {\n    event.preventDefault();\n\n    let data = { name, email, password };\n\n    this._authService\n    .register(data)\n    .subscribe((user) => {\n      this._router.navigateByUrl('/');\n    }, err => console.error(err));\n  }\n}\n```", "```js\n@Component({\n    selector: 'register',\n    directives: [\n      RouterLink\n    ],\n    template: `\n      <div class=\"login jumbotron center-block\">\n        <h1>Register</h1>\n        <form role=\"form\" (submit)=\"register($event, name.value, email.value, password.value)\">\n          <div class=\"form-group\">\n            <label for=\"name\">Full name</label>\n            <input type=\"text\" #name class=\"form-control\" id=\"email\" placeholder=\"please enter your name\">\n          </div>\n          <div class=\"form-group\">\n            <label for=\"email\">E-mail</label>\n            <input type=\"text\" #email class=\"form-control\" id=\"email\" placeholder=\"enter valid e-mail\">\n          </div>\n          <div class=\"form-group\">\n            <label for=\"password\">Password</label>\n            <input type=\"password\" #password class=\"form-control\" id=\"password\" placeholder=\"now your password\">\n          </div>\n          <button type=\"submit\" class=\"button\">Submit</button>\n        </form>\n      </div>\n    `\n})\n```", "```js\nimport { Component } from 'angular2/core';\nimport { Router, RouterLink } from 'angular2/router';\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n    selector: 'signin',\n    directives: [\n      RouterLink\n    ],\n    template: `\n      <div class=\"login jumbotron center-block\">\n        <h1>Login</h1>\n        <form role=\"form\" (submit)=\"signin($event, email.value, password.value)\">\n          <div class=\"form-group\">\n            <label for=\"email\">E-mail</label>\n            <input type=\"text\" #email class=\"form-control\" id=\"email\" placeholder=\"enter your e-mail\">\n          </div>\n          <div class=\"form-group\">\n            <label for=\"password\">Password</label>\n            <input type=\"password\" #password class=\"form-control\" id=\"password\" placeholder=\"now your password\">\n          </div>\n          <button type=\"submit\" class=\"button\">Submit</button>\n        </form>\n      </div>\n    `\n})\nexport class SigninComponent {\n  private _authService: AuthService;\n  private _router: Router;\n\n  constructor(authService: AuthService, router: Router) {\n    this._authService = authService;\n    this._router = router;\n  }\n\n  signin(event, email, password) {\n    event.preventDefault();\n\n    let data = { email, password };\n\n    this._authService\n    .signin(data)\n    .subscribe((user) => {\n      this._authService.setCurrentUser(user);\n      this._router.navigateByUrl('/');\n    }, err => console.error(err));\n  }\n}\n```", "```js\nimport { Headers } from 'angular2/http';\n\nconst HEADERS = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\n\nexport const contentHeaders = new Headers(HEADERS);\n```", "```js\ncontentHeaders.append('Authorization', 'Bearer <token_value>');\n```", "```js\nimport { Injectable } from 'angular2/core';\nimport { Http, Response, Headers, BaseRequestOptions, Request, RequestOptions, RequestOptionsArgs, RequestMethod } from 'angular2/http';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/Subject/BehaviorSubject';\n\n@Injectable()\nexport class AuthHttp {\n  public unauthorized: Subject<Response>;\n  private _http: Http;\n\n  constructor(http: Http) {\n    this._http = http;\n    this.unauthorized = new BehaviorSubject<Response>(null);\n  }\n\n  public get(url: string, opts?: RequestOptionsArgs) {\n    return this.request({ url: url, method: RequestMethod.Get}, opts);\n  }\n\n  public post(url: string, body?: string, opts?: RequestOptionsArgs) {\n    return this.request({ url: url, method: RequestMethod.Post, body: body}, opts);\n  }\n\n  public put(url: string, body?: string, opts?: RequestOptionsArgs) {\n    return this.request({ url: url, method: RequestMethod.Put, body: body}, opts);\n  }\n\n  public delete(url: string, body?: string, opts?: RequestOptionsArgs) {\n    return this.request({ url: url, method: RequestMethod.Delete, body: body}, opts);\n  }\n\n  // rest of the HTTP methods ...\n}\n```", "```js\n  private request(requestArgs: RequestOptionsArgs, additionalArgs?: RequestOptionsArgs) {\n    let opts = new RequestOptions(requestArgs);\n\n    if (additionalArgs) {\n      opts = opts.merge(additionalArgs);\n    }\n\n    let req:Request = new Request(opts);\n\n    if (!req.headers) {\n      req.headers = new Headers();\n    }\n\n    if (!req.headers.has('Authorization')) {\n      req.headers.append('Authorization', `Bearer ${this.getToken()}`);\n    }\n\n    return this._http.request(req).catch((err: any) => {\n      if (err.status === 401) {\n        this.unauthorized.next(err);\n      }\n\n      return Observable.throw(err);\n    });\n  }\n```", "```js\n  private getToken() {\n    return localStorage.getItem('token');\n  }\n```", "```js\nexport * from './components/register.component';\nexport * from './components/signin.component';\nexport * from './services/auth.service';\nexport * from './services/auth-http';\n```", "```js\n    import { Injectable } from 'angular2/core';\n    import { Http, Response, Headers } from 'angular2/http';\n    import { Observable } from 'rxjs/Observable';\n    import { Subject } from 'rxjs/Subject';\n    import { BehaviorSubject } from 'rxjs/Subject/BehaviorSubject';\n    import { AuthHttp } from '../auth/index';\n    import { contentHeaders } from '../common/index';\n    import { Category } from './category.model';\n\n    @Injectable()\n    export class CategoryService {\n      public category: Subject<Category>;\n      public categories: Observable<Array<Category>>;\n\n      private _authHttp: AuthHttp;\n      private _categoriesObserver: any;\n\n      constructor(authHttp: AuthHttp) {\n        this._authHttp = authHttp;\n        this.categories = new Observable(\n          observer => {\n            this._categoriesObserver = observer\n          }\n        ).share();\n        this.category = new BehaviorSubject<Category>(null);\n      }\n\n      getAll() {\n        return this._authHttp\n        .get('/api/categories', { headers: contentHeaders })\n        .map((res: Response) => res.json())\n        .map((data) => {\n          let categories = data.map((category) => {\n            return new Category(\n              category._id,\n              category.name,\n              category.description,\n              category.owner,\n              category.collaborators\n            );\n          });\n\n          this._categoriesObserver.next(categories);\n\n          return categories;\n        });\n      }\n\n      findById(id) {\n        return this._authHttp\n        .get(`/api/categories/${id}`, { headers: contentHeaders })\n        .map((res: Response) => res.json())\n      }\n\n      create(category) {\n        let body = JSON.stringify(category);\n\n        return this._authHttp\n        .post('/api/categories', body, { headers: contentHeaders })\n        .map((res: Response) => res.json())\n      }\n\n      update(category) {\n        let body = JSON.stringify(category);\n\n        return this._authHttp\n        .put(`/api/categories/${category._id}`, body, { headers: contentHeaders })\n        .map((res: Response) => res.json())\n      }\n\n      delete(category) {\n        return this._authHttp\n        .put(`/api/categories/${category._id}`, '', { headers: contentHeaders })\n        .map((res: Response) => res.json())\n      }\n    } \n    ```", "```js\nimport { Component } from 'angular2/core';\nimport { CategoryListComponent } from './category-list.component';\nimport { CategoryCreateComponent } from './category-create.component';\n\n@Component({\n    selector: 'categories',\n    directives: [\n      CategoryCreateComponent,\n      CategoryListComponent\n    ],\n    template: `\n      <category-create></category-create>\n      <category-list></category-list>\n    `\n})\nexport class CategoryComponent {\n  constructor() {}\n}\n```", "```js\n    import { Component, OnInit } from 'angular2/core';\n    import { CategoryService } from '../category.service';\n    import { Category } from '../category.model';\n    ```", "```js\n    @Component({\n        selector: 'category-create',\n        template: `\n          <div>\n            <form role=\"form\" (submit)=\"onSubmit($event)\">\n              <div class=\"form-group\">\n                <label for=\"name\">Name</label>\n                <input type=\"text\" [(ngModel)]=\"category.name\" class=\"form-control\" id=\"name\">\n              </div>\n              <div class=\"form-group\">\n                <label for=\"description\">Description</label>\n                <textarea class=\"form-control\" id=\"description\"\n                  name=\"description\" [(ngModel)]=\"category.description\">\n                </textarea>\n              </div>\n              <button type=\"submit\" class=\"button\">Add</button>\n            </form>\n          </div>\n        `\n    })\n    ```", "```js\n    export class CategoryCreateComponent implements OnInit {\n      public category: Category;\n      public categories: Array<Category>;\n      private _categoryService: CategoryService;\n\n      constructor(categoryService: CategoryService) {\n        this._categoryService = categoryService;\n      }\n\n      ngOnInit() {\n        this.category = new Category();\n      }\n\n      onSubmit(event) {\n        event.preventDefault();\n\n        this._categoryService\n        .create(this.category)\n        .subscribe((category) => {\n          this._categoryService.category.next(category);\n          this.category = new Category();\n        }, err => console.error(err));\n      }\n    }\n    ```", "```js\n    import { Component, OnInit, OnDestroy } from 'angular2/core';\n    import { CategoryService } from '../category.service';\n    import { CategoryComponent } from './category.component';\n    import { Category } from '../category.model';\n    ```", "```js\n    @Component({\n        selector: 'category-list',\n        directives: [CategoryComponent],\n        template: `\n          <div class=\"jumbotron center-block\">\n            <h2>List of all your categories</h2>\n          </div>\n          <div>\n            <category *ngFor=\"#category of categories\" [category]=\"category\"></category>\n          </div>\n        `\n    })\n    ```", "```js\n    export class CategoryListComponent implements OnInit, OnDestroy {\n      public categories: Array<Category>;\n      private _categoryService: CategoryService;\n      private _categorySubscription: any;\n\n      constructor(categoryService: CategoryService) {\n        this._categoryService = categoryService;\n      }\n\n      ngOnInit() {\n        this._categorySubscription = this._categoryService.category\n        .subscribe((category) => {\n          if (category) {\n            this.categories.push(category);\n          }\n        });\n        this._categoryService.getAll()\n        .subscribe((categories) => {\n          this.categories = categories;\n        });\n      }\n\n      ngOnDestroy() {\n        this._categorySubscription.unsubscribe();\n      }\n    }\n    ```", "```js\nimport { Component } from 'angular2/core';\nimport { CategoryService } from '../category.service';\nimport { Category } from '../category.model';\n\n@Component({\n    inputs: ['category'],\n    selector: 'category',\n    template: `\n    <div>\n      <form role=\"form\" (submit)=\"onSubmit($event)\">\n        <div class=\"form-group\">\n          <label for=\"name\">Name</label>\n          <input type=\"text\" [(ngModel)]=\"category.name\" class=\"form-control\" id=\"name\">\n        </div>\n        <div class=\"form-group\">\n          <label for=\"description\">Description</label>\n          <textarea class=\"form-control\" id=\"description\"\n            name=\"description\" [(ngModel)]=\"category.description\">\n          </textarea>\n        </div>\n        <button type=\"submit\" class=\"button\">save</button>\n      </form>\n    </div>\n    `\n})\nexport class CategoryComponent {\n  public category: Category;\n  private _categoryService: CategoryService;\n\n  constructor(categoryService: CategoryService) {\n    this._categoryService = categoryService;\n  }\n\n  onSubmit(event) {\n    event.preventDefault();\n    this._categoryService.update(this.category)\n    .subscribe((category) => {\n      this.category = category;\n    }, err => console.error(err));\n  }\n}\n```", "```js\n    import { Injectable } from 'angular2/core';\n    import { Http, Response, Headers } from 'angular2/http';\n    import { Observable } from 'rxjs/Observable';\n    import { Subject } from 'rxjs/Subject';\n    import { BehaviorSubject } from 'rxjs/Subject/BehaviorSubject';\n    import { AuthHttp } from '../auth/index';\n    import { contentHeaders, serializeQuery } from '../common/index';\n    import { Expense } from './expense.model';\n\n    @Injectable()\n    export class ExpenseService {\n      public expense: Subject<Expense>;\n      public expenses: Observable<Array<Expense>>;\n      public filter: Subject<any>;\n      private _authHttp: AuthHttp;\n      private _expensesObserver: any;\n\n      constructor(authHttp: AuthHttp) {\n        this._authHttp = authHttp;\n        this.expenses = new Observable(\n          observer => {\n            this._expensesObserver = observer\n          }\n        );\n        this.filter = new BehaviorSubject<any>(null);\n        this.expense = new BehaviorSubject<Expense>(null);\n      }\n      create(expense) {\n      }\n      findById(id) {\n      }\n      getAll() { \n      }\n      update(expense) {\n      }\n      delete(expense) {\n      }\n    }\n    ```", "```js\n      create(expense) {\n        let body = JSON.stringify(expense);\n\n        return this._authHttp\n        .post('/api/expenses', body, { headers: contentHeaders })\n        .map((res: Response) => res.json())\n        .map((expense) => {\n          return new Expense(\n            expense._id,\n            expense.name,\n            expense.currency,\n            expense.amoun,\n            expense.scaleFactor,\n            expense.value,\n            expense.user,\n            expense.category,\n            expense.createdAt\n          );\n        });\n      }\n    Getting one expense by ID:\n      findById(id) {\n        return this._authHttp\n        .get(`/api/expenses/${id}`, { headers: contentHeaders })\n        .map((res: Response) => res.json())\n        .map((expense) => {\n          return new Expense(\n            expense._id,\n            expense.name,\n            expense.currency,\n            expense.amoun,\n            expense.scaleFactor,\n            expense.value,\n            expense.user,\n            expense.category,\n            expense.createdAt\n          );\n        });\n      }\n    ```", "```js\n      getAll(criteria?: any) {\n        let query = '';\n\n        if (criteria) {\n          query = `?${serializeQuery(criteria)}`\n        }\n\n        this._authHttp\n        .get(`/api/expenses${query}`, { headers: contentHeaders })\n        .map((res: Response) => res.json())\n        .map((data) => {\n          return data.map((expense) => {\n            return new Expense(\n              expense._id,\n              expense.name,\n              expense.currency,\n              expense.amoun,\n              expense.scaleFactor,\n              expense.value,\n              expense.user,\n              expense.category,\n              expense.createdAt\n            );\n          });\n        }).subscribe((expenses: Array<Expense>) => {\n          this._expensesObserver.next(expenses);\n        }, err => console.error(err));\n      }\n    ```", "```js\n      getExpensesBalance(criteria?: any) {\n        let query = '';\n\n        if (criteria) {\n          query = `?${serializeQuery(criteria)}`\n        }\n\n        return this._authHttp\n        .get(`/api/expenses/balance${query}`, { headers: contentHeaders })\n        .map((res: Response) => res.json())\n      }\n    ```", "```js\n      update(expense) {\n        let body = JSON.stringify(expense);\n\n        return this._authHttp\n        .put(`/api/expenses/${expense._id}`, body, { headers: contentHeaders })\n        .map((res: Response) => res.json())\n      }\n    Removing an existing expense by ID:\n      delete(expense) {\n        return this._authHttp\n        .put(`/api/expenses/${expense._id}`, '', { headers: contentHeaders })\n        .map((res: Response) => res.json())\n      }\n    ```", "```js\n    import { Component, OnInit, OnDestroy } from 'angular2/core';\n    import { CategoryService, Category } from '../../category/index';\n    import { ExpenseService } from '../expense.service';\n    import { Expense } from '../expense.model';\n    ```", "```js\n    @Component({\n        selector: 'expense-filter',\n        template: `\n          <div>\n            <form role=\"form\">\n              <div class=\"form-group\">\n                <label for=\"startDate\">Start</label>\n                <input type=\"date\" [(ngModel)]=\"filter.startDate\" class=\"form-control\" id=\"startDate\">\n              </div>\n              <div class=\"form-group\">\n                <label for=\"endDate\">End</label>\n                <input type=\"date\" [(ngModel)]=\"filter.endDate\" class=\"form-control\" id=\"endDate\">\n              </div>\n              <div class=\"form-group\">\n                <label for=\"category\">Category</label>\n                <select name=\"category\" [(ngModel)]=\"filter.category\">\n                  <option *ngFor=\"#category of categories\" [value]=\"category._id\">\n                    {{ category.name }}\n                  </option>\n                </select>\n              </div>\n              <button type=\"submit\" class=\"button\" (click)=\"onFilter($event)\">Filter</button>\n              <button type=\"button\" class=\"button\" (click)=\"onReset($event)\">Reset</button>\n            </form>\n          </div>\n        `\n    })\n    ```", "```js\n    export class ExpenseFilterComponent implements OnInit, OnDestroy {\n      public filter: any;\n      public categories: Array<Category>;\n      private _expenseService: ExpenseService;\n      private _categoryService: CategoryService;\n\n      constructor(\n        expenseService: ExpenseService,\n        categoryService: CategoryService\n      ) {\n        this._expenseService = expenseService;\n        this._categoryService = categoryService;\n      }\n    }\n    ```", "```js\n      ngOnInit() {\n        this.filter = {};\n        this.categories = [];\n        this._subscriptions = [];\n        this._subscriptions.push(\n          this._categoryService\n          .categories\n          .subscribe((categories) => {\n            this.categories = categories;\n          })\n        );\n      }\n    ```", "```js\n      ngOnDestroy() {\n        this._subscriptions.forEach((subscription) => {\n          subscription.unsubscribe();\n        })\n      }\n    ```", "```js\n      onFilter(event) {\n        event.preventDefault();\n        this._expenseService.filter.next(this.filter);\n      }\n    ```", "```js\n      onReset(event) {\n        event.preventDefault();\n        this.filter = {};\n        this._expenseService.filter.next(this.filter);\n      }\n    ```", "```js\n    import { Component, OnInit, OnDestroy } from 'angular2/core';\n    import { Router, RouterLink } from 'angular2/router';\n    import { CategoryService, Category } from '../../category/index';\n    import { ExpenseService } from '../expense.service';\n    import { Expense } from '../expense.model';\n    ```", "```js\n    @Component({\n        selector: 'expense-create',\n        directives: [\n          RouterLink\n        ],\n        template: `\n          <div>\n            <form role=\"form\" (submit)=\"onSubmit($event)\">\n              <div class=\"form-group\">\n                <label for=\"name\">Name</label>\n                <input type=\"text\" [(ngModel)]=\"expense.name\" class=\"form-control\" id=\"name\">\n              </div>\n              <div class=\"form-group\">\n                <label for=\"category\">Category</label>\n                <select name=\"category\" [(ngModel)]=\"expense.category\">\n                  <option *ngFor=\"#category of categories\" [value]=\"category._id\">\n                    {{ category.name }}\n                  </option>\n                </select>\n              </div>\n              <div class=\"form-group\">\n                <label for=\"value\">Amount</label>\n                <input type=\"text\" [(ngModel)]=\"expense.value\" class=\"form-control\" id=\"value\">\n              </div>\n              <button type=\"submit\" class=\"button\">Add</button>\n            </form>\n          </div>\n        `\n    })\n    ```", "```js\n    export class ExpenseCreateComponent implements OnInit, OnDestroy {\n      public expense: Expense;\n      public categories: Array<Category>;\n      private _expenseService: ExpenseService;\n      private _categoryService: CategoryService;\n      private _subscriptions: Array<any>;\n\n      constructor(\n        expenseService: ExpenseService,\n        categoryService: CategoryService\n      ) {\n        this._expenseService = expenseService;\n        this._categoryService = categoryService;\n      }\n    ```", "```js\n      ngOnInit() {\n        this.expense = new Expense();\n        this.categories = [];\n        this._subscriptions = [];\n        this._subscriptions.push(\n          this._categoryService\n          .categories\n          .subscribe((categories) => {\n            this.categories = categories;\n          })\n        );\n      }\n    ```", "```js\n      ngOnDestroy() {\n        this._subscriptions.forEach((subscription) => {\n          subscription.unsubscribe();\n        })\n      }\n    Create a new expense event:\n      onSubmit(event) {\n        event.preventDefault();\n\n        this._expenseService\n        .create(this.expense)\n        .subscribe((expense) => {\n          this._expenseService.expense.next(expense);\n        }, err => console.error(err));\n      }\n    ```", "```js\n    import { Component, OnInit, OnDestroy } from 'angular2/core';\n    import { ExpenseService } from '../expense.service';\n    import { Expense } from '../expense.model'; \n    ```", "```js\n    @Component({\n        selector: 'expense-list',\n        directives: [],\n        template: `\n          <div class=\"jumbotron center-block\">\n            <h2>List of all your expenses</h2>\n          </div>\n          <div>\n            <table>\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Category</th>\n                  <th>Amount</th>\n                  <th>Date</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"#expense of expenses\">\n                  <td>{{ expense.name }}</td>\n                  <td>{{ expense.category.name }}</td>\n                  <td>{{ expense.value }}</td>\n                  <td>{{ expense.createdAt | date }}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        `\n    })\n    ```", "```js\n    export class ExpenseListComponent implements OnInit, OnDestroy {\n      public expenses: Array<Expense>;\n      private _expenseService: ExpenseService;\n      private _subscriptions: Array<any>;\n\n      constructor(expenseService: ExpenseService) {\n        this._expenseService = expenseService;\n      }\n    }\n    ```", "```js\n      ngOnInit() {\n        this.expenses = [];\n        this._subscriptions = [];\n\n        this._subscriptions.push(\n          this._expenseService\n          .expenses\n          .subscribe((expenses) => {\n            this.expenses = expenses;\n          })\n        );\n        this._subscriptions.push(\n          this._expenseService\n          .expense\n          .subscribe((expense) => {\n            if (expense) {\n              this.expenses.push(expense);\n            }\n          })\n        );\n        this._subscriptions.push(\n          this._expenseService\n          .filter\n          .subscribe((filter) => {\n            if (filter) {\n              this._expenseService.getAll(filter);\n            }\n          })\n        );\n      }\n    ```", "```js\n      ngOnDestroy() {\n        this._subscriptions.forEach(subscription => {\n          subscription.unsubscribe();\n        });\n      }\n    ```", "```js\n    import { Component, OnInit, OnDestroy } from 'angular2/core';\n    import { ExpenseService } from '../expense.service';\n\n    @Component({\n        selector: 'expense-balance',\n        directives: [],\n        template: `\n          <h2>\n            Total balance: {{ info.balance }}\n            <span>from {{ info.count }}</span>\n          </h2>\n        `\n    })\n    export class ExpenseBalanceComponent implements OnInit, OnDestroy {\n      public info: any;\n      private _expenseService: ExpenseService;\n      private _subscriptions: Array<any>;\n\n      constructor(expenseService: ExpenseService) {\n        this._expenseService = expenseService;\n      }\n\n      ngOnInit() {\n\n      }\n\n      ngOnDestroy() {\n\n      }\n\n    }\n    Subscribe to the change of filter on init:\n      ngOnInit() {\n        this.info = {};\n        this._subscriptions = [];\n\n        this._subscriptions.push(\n          this._expenseService\n          .filter\n          .subscribe((filter) => {\n            if (filter) {\n              this._getBalance(filter);\n            }\n          })\n        );\n      }\n    ```", "```js\n      ngOnDestroy() {\n        this._subscriptions.forEach((subscription) => {\n          subscription.unsubscribe();\n        })\n      }\n    ```", "```js\n      ngOnDestroy() {\n        this._subscriptions.forEach((subscription) => {\n          subscription.unsubscribe();\n        })\n      }\n    ```", "```js\nimport { Component, OnInit } from 'angular2/core';\nimport { Router, RouterLink } from 'angular2/router';\nimport { ExpenseService } from '../expense.service';\nimport { CategoryService } from '../../category/index';\nimport { ExpenseCreateComponent } from './expense-create.component';\nimport { ExpenseListComponent } from './expense-list.component';\nimport { ExpenseBalanceComponent } from './expense-balance.component';\nimport { ExpenseFilterComponent } from './expense-filter.component';\n@Component({\n    selector: 'expenses',\n    directives: [\n      ExpenseCreateComponent,\n      ExpenseListComponent,\n      ExpenseBalanceComponent,\n      ExpenseFilterComponent\n    ],\n    template: `\n      <expense-balance></expense-balance>\n      <expense-filter></expense-filter>\n      <expense-create></expense-create>\n      <expense-list></expense-list>\n    `\n})\nexport class ExpensesComponent implements OnInit {\n  private _expenseService: ExpenseService;\n  private _categoryService: CategoryService;\n\n  constructor(\n    expenseService: ExpenseService,\n    categoryService: CategoryService\n  ) {\n    this._expenseService = expenseService;\n    this._categoryService = categoryService;\n  }\n\n  ngOnInit() {\n    this._categoryService.getAll().subscribe();\n    this._expenseService.filter.next({});\n  }\n}\n```"]