- en: '17'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '17'
- en: 'SportsStore: Navigation and Cart'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SportsStore：导航和购物车
- en: In this chapter, we will continue to build the SportsStore application by completing
    the catalog and adding a cart with which the user can make product selections.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将继续构建 SportsStore 应用程序，通过完成目录并添加一个购物车来实现，用户可以通过购物车进行产品选择。
- en: Preparing for this chapter
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备本章内容
- en: This chapter uses the `sportsstore` project created in *Chapter 16*. No changes
    are required for this chapter. Open a new command prompt, navigate to the `sportsstore`
    folder, and run the command shown in *Listing 17.1* to start the development tools.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章使用在*第 16 章*中创建的 `sportsstore` 项目。本章不需要进行任何更改。打开一个新的命令提示符，导航到 `sportsstore`
    文件夹，并运行*列表 17.1*中显示的命令以启动开发工具。
- en: '**Tip**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: You can download the example project for this chapter – and for all the other
    chapters in this book – from [https://github.com/PacktPublishing/Mastering-Node.js-Web-Development](https://github.com/PacktPublishing/Mastering-Node.js-Web-Development).
    See *Chapter 1* to get help if you have problems running the examples.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[https://github.com/PacktPublishing/Mastering-Node.js-Web-Development](https://github.com/PacktPublishing/Mastering-Node.js-Web-Development)下载本章的示例项目——以及本书所有其他章节的示例项目。如果您在运行示例时遇到问题，请参阅*第
    1 章*以获取帮助。
- en: 'Listing 17.1: Starting the development fools'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.1：启动开发工具
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Open a new browser window, navigate to `http://localhost:5000`, and you will
    see the data read from the database presented in a simple table format, as shown
    in *Figure 17.1*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个新的浏览器窗口，导航到 `http://localhost:5000`，您将看到以简单表格格式从数据库中读取的数据，如图*图 17.1*所示。
- en: '![](img/B21959_17_01.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_17_01.png)'
- en: 'Figure 17.1: Running the application'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.1：运行应用程序
- en: Navigating the catalog
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航目录
- en: Real online stores have too many products to sensibly display them all to the
    user at the same time and typically provide tools to help the user find and select
    what they want. In the sections that follow, I will add features to SportsStore
    that will allow the user to navigate through the catalog by choosing the data
    that is displayed.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 真正的在线商店有太多的产品，无法同时合理地展示给用户，通常提供工具来帮助用户找到并选择他们想要的产品。在接下来的部分中，我将向 SportsStore
    添加功能，使用户能够通过选择显示的数据在目录中进行导航。
- en: Paginating catalog data
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分页目录数据
- en: Pagination presents the user with manageable blocks of data, along with controls
    to move from one page to the next. The pagination controls give the user a sense
    of how much data is available, and individual pages require the server to send
    smaller amounts of data in each response, which can reduce the amount of time
    the user has to wait for data to be displayed. The drawback of pagination is that
    it requires the server to handle a lot of HTTP requests and make a lot of database
    queries as the user navigates through the data.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 分页向用户展示可管理的数据块，并提供控制按钮以从一页跳转到下一页。分页控件给用户一种数据量多少的感觉，并且每个页面需要服务器在每次响应中发送更少的数据，这可以减少用户等待数据显示的时间。分页的缺点是它需要服务器在用户导航数据时处理大量的
    HTTP 请求和执行大量的数据库查询。
- en: When processing a request for a page of data, the server needs to know how many
    items are displayed on a page, and which page the user wants to get the right
    data. To generate pagination controls, the server also needs to know how many
    items there are in total. *Listing 17.2* defines new types that describe the query
    details and the response.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理数据页面的请求时，服务器需要知道每页显示多少项，以及用户想要获取哪一页的数据。为了生成分页控件，服务器还需要知道总共有多少项。*列表 17.2*
    定义了描述查询细节和响应的新类型。
- en: 'Listing 17.2: Adding pagination types in the catalog_models.ts file in the
    src/data folder'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.2：在 src/data 文件夹中的 catalog_models.ts 文件中添加分页类型
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `ProductQueryParameters` interface allows the pagination requirements associated
    with a query to be provided to the repository. The `ProductQueryResult` interface
    describes the response the repository will produce, which contains the page of
    data and the total number of stored items. These types will be expanded as other
    data navigation features are added. *Listing 17.3* revises the product query method
    in the repository interface to support the new types.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`ProductQueryParameters` 接口允许将查询相关的分页要求提供给存储库。`ProductQueryResult` 接口描述了存储库将生成的响应，其中包含数据页和存储项的总数。这些类型将在添加其他数据导航功能时进行扩展。*列表
    17.3* 修改了存储库接口中的产品查询方法以支持新类型。'
- en: 'Listing 17.3: Changing a method in the catalog_repository.ts file in the src/data
    folder'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.3：在 src/data 文件夹中的 catalog_repository.ts 文件中更改方法
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `getProducts` method now accepts an optional `ProductQueryParameters` parameter
    and returns a `ProductQueryResult` result. *Listing 17.4* updates the implementation
    of the repository to reflect the change in the interface.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`getProducts` 方法现在接受一个可选的 `ProductQueryParameters` 参数，并返回一个 `ProductQueryResult`
    结果。*列表 17.4* 更新了存储库的实现，以反映接口的变化。'
- en: 'Listing 17.4: Using new types in the queries.ts file in the src/data/orm folder'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.4：在 src/data/orm 文件夹中的 queries.ts 文件中使用新类型
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If a `ProductQueryParameters` parameter is received by the `getProducts` method,
    then the Sequelize query is configured with the `limit` and `offset` properties,
    which specify the maximum number of results that should be read from the database,
    and the number of results that should be skipped before starting to read the results.
    This combination of properties will read a specified page of data.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `getProducts` 方法接收到 `ProductQueryParameters` 参数，那么 Sequelize 查询将配置 `limit`
    和 `offset` 属性，这些属性指定了应从数据库中读取的最大结果数量，以及开始读取结果之前应跳过的结果数量。这种属性组合将读取指定页面的数据。
- en: The query is performed using the `findAndCountAll` method, which finds data
    and includes the total number of items in the database that match the query, regardless
    of how many of those items are included in the results. The combination of the
    data returned by the query and the total number of matching items is used to create
    the `ProductQueryParameters` result. *Listing 17.5* updates the HTTP handler so
    that pagination details are read from the query string and included in the call
    to the repository. If the query string doesn’t include pagination information,
    then defaults are used to select page 1 with four items per page.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 查询是通过 `findAndCountAll` 方法执行的，该方法查找数据并包括数据库中与查询匹配的总项目数，无论这些项目中有多少包含在结果中。查询返回的数据和匹配项的总数组合用于创建
    `ProductQueryParameters` 结果。*列表 17.5* 更新了 HTTP 处理程序，以便从查询字符串中读取分页详细信息并将其包含在调用存储库中。如果查询字符串不包含分页信息，则使用默认值选择每页四项的第
    1 页。
- en: 'Listing 17.5: Using page data in the catalog.ts file in the src/routes folder'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.5：在 src/routes 文件夹中的 catalog.ts 文件中使用页面数据
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can check that data is being paged by using a browser to request `http://localhost:5000/?pageSize=3&page=2`.
    The URL specifies a page size of three items and asks for page 2, producing the
    result shown in *Figure 17.2*.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用浏览器请求 `http://localhost:5000/?pageSize=3&page=2` 来检查数据是否已分页。URL 指定了每页三个项目的大小，并请求第
    2 页，生成如 *图 17.2* 所示的结果。
- en: '![](img/B21959_17_02.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_17_02.png)'
- en: 'Figure 17.2: Displaying a page of data'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.2：显示数据页面
- en: Adding pagination controls
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加分页控件
- en: Now that the data can be paged, the next step is to provide the user with the
    ability to select the page they want. Add a file named `page_controls.handlebars`
    to the `templates` folder with the content shown in *Listing 17.6*.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在数据可以分页后，下一步是为用户提供选择他们想要页面的能力。将一个名为 `page_controls.handlebars` 的文件添加到 `templates`
    文件夹中，其内容如 *列表 17.6* 所示。
- en: 'Listing 17.6: The contents of the page_controls.handlebars file in the templates
    folder'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.6：在 templates 文件夹中的 page_controls.handlebars 文件的内容
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This template relies on two helpers, which will be defined shortly. The `pageButtons`
    helper will repeatedly generate a section of content for each page of content,
    using the pagination data provided to the template:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板依赖于两个辅助器，将在稍后定义。`pageButtons` 辅助器将重复生成每个页面内容的一个内容部分，使用模板提供的分页数据：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The content contained between the helper tags will be duplicated for each available
    page of data. Each block of content is provided with an `index` value that indicates
    the page for which a control is being generated and a `selected` value that indicates
    whether the current page is the one the user is viewing. When the selected value
    is `true`, a button that does nothing is displayed, formatted in an active state
    to indicate the current page. For the other pages, an anchor element (with the
    `a` tag) is displayed, formatted as an inactive button. The `href` attribute of
    the anchor element is defined using a helper named `navigationUrl` that generates
    a URL that will navigate to the selected page. To define template helpers for
    the catalog, add a file named `catalog_helpers.ts` to the `src/helpers` folder
    with the content shown in *Listing 17.7*.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在助手标签之间包含的内容将为每个可用的数据页面重复。每个内容块都提供了一个 `index` 值，该值指示正在生成控件的页面，以及一个 `selected`
    值，该值指示当前页面是否是用户正在查看的页面。当 `selected` 值为 `true` 时，将显示一个不执行任何操作的按钮，格式化为活动状态以指示当前页面。对于其他页面，将显示一个锚点元素（带有
    `a` 标签），格式化为非活动按钮。锚点元素的 `href` 属性使用名为 `navigationUrl` 的助手定义，该助手生成一个将导航到所选页面的 URL。要为目录定义模板助手，请将名为
    `catalog_helpers.ts` 的文件添加到 `src/helpers` 文件夹中，其内容如 *列表 17.7* 所示。
- en: 'Listing 17.7: The contents of the catalog_helpers.ts file in the src/helpers
    folder'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.7：`src/helpers` 文件夹中 catalog_helpers.ts 文件的内容
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Helper functions receive a `HelperOptions` parameter that provides useful context
    features. The `HelperOptions.hash` property is used to receive data in name/value
    pairs and is a useful way to provide structured data to a helper, like this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 助手函数接收一个 `HelperOptions` 参数，该参数提供了有用的上下文功能。`HelperOptions.hash` 属性用于以名称/值对的形式接收数据，并且是向助手提供结构化数据的有用方式，如下所示：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `HelperOptions.data` property provides access to context data, and its `root`
    property contains the data from the template that invoked the helper. The `getData`
    method merges the values from the hash data with the root data.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`HelperOptions.data` 属性提供对上下文数据的访问，其 `root` 属性包含调用助手的模板中的数据。`getData` 方法将哈希数据中的值与根数据合并。'
- en: '**Caution**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: The Handlebars package is excellent but not all of the features provided by
    the `HelperOptions` interface are documented, including the use of the `data.root`
    property. Future versions of the package may change the way this property is defined,
    so you must either take care to use the version specified in *Chapter 16* or check
    the documentation and source code to see what’s changed.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Handlebars 包非常出色，但 `HelperOptions` 接口提供的并非所有功能都有文档说明，包括对 `data.root` 属性的使用。该包的将来版本可能会更改此属性的定义方式，因此您必须注意使用
    *第 16 章* 中指定的版本，或者检查文档和源代码以查看有哪些更改。
- en: 'The `navigationUrl` helper function accepts a `HelperOptions` argument and
    uses it to generate a relative URL path that will select a specific page, which
    is done using the `stringify` function from the `querystring` module that Node.js
    provides for creating and parsing query strings:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`navigationUrl` 助手函数接受一个 `HelperOptions` 参数，并使用它来生成一个相对 URL 路径，该路径将选择特定的页面，这是通过使用
    Node.js 提供的 `querystring` 模块中的 `stringify` 函数来完成的，该函数用于创建和解析查询字符串：'
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `pageButtons` function is more complex because it needs to generate blocks
    of content, which is done using the function assigned to the `HelperOptions.fn`
    property, which generates content using the elements contained between the helper
    tags. The `escapeUrl` helper encodes a value so that it can be included in a query
    string.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`pageButtons` 函数更为复杂，因为它需要生成内容块，这通过分配给 `HelperOptions.fn` 属性的函数来完成，该函数使用助手标签之间的元素生成内容。`escapeUrl`
    助手对值进行编码，以便它可以包含在查询字符串中。'
- en: The `pageButtons` helper uses a `for` loop and the `fn` function to create content
    for each data page, supplementing the shared pagination data with `index` and
    `selected` values that are specific to each page. *Listing 17.8* adds the new
    helpers to the template engine configuration.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`pageButtons` 助手使用 `for` 循环和 `fn` 函数为每个数据页面创建内容，通过 `index` 和 `selected` 值补充共享的分页数据，这些值对每个页面是特定的。*列表
    17.8* 将新的助手添加到模板引擎配置中。'
- en: 'Listing 17.8: Adding helpers to the index.ts file in the src/helpers folder'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.8：将助手添加到 `src/helpers` 文件夹中的 index.ts 文件
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The final step is to include the partial template defined in *Listing 17.7*
    into the content generated by the application, as shown in *Listing 17.9*.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 *列表 17.7* 中定义的局部模板包含到应用程序生成的内容中，如 *列表 17.9* 所示。
- en: 'Listing 17.9: Using the pagination partial view in the index.handlebars file
    in the templates folder'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.9：在 templates 文件夹中的 index.handlebars 文件中使用分页部分视图
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Use a browser to request `http://localhost:5000/?pageSize=3`. The `pageSize`
    value specifies three data items to a page, and omitting the `page` value from
    the query string will default to the first page of data, as shown in *Figure 17.3*.
    A button will be displayed for each available page, and clicking an inactive button
    will select a different page.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用浏览器请求 `http://localhost:5000/?pageSize=3`。`pageSize` 值指定每页三个数据项，并且从查询字符串中省略
    `page` 值将默认为数据的第一页，如图 *图 17.3* 所示。将为每个可用的页面显示一个按钮，点击非活动按钮将选择不同的页面。
- en: '![](img/B21959_17_03.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21959_17_03.png)'
- en: 'Figure 17.3: Paging through data'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.3：通过数据分页
- en: Changing the page size
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改变页面大小
- en: To allow the user to change the number of items per page, *Listing 17.10* creates
    a grid that contains the existing page buttons, plus a **select** button that
    is populated with different page sizes.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了允许用户更改每页的项目数量，*列表 17.10* 创建了一个包含现有页面按钮以及一个填充了不同页面大小的**选择**按钮的网格。
- en: 'Listing 17.10: Adding a select button to the page_controls.handlebars file
    in the templates folder'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.10：在 templates 文件夹中的 page_controls.handlebars 文件中添加一个选择按钮
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The form is submitted by a `button` element, which is configured with the `form`
    attribute, allowing it to be positioned in the grid without needing to be a descendant
    of the `form` element. The option elements are created by a template helper named
    `pageSizeOptions`, which is defined in *Listing 17.11*.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 表单通过一个配置了 `form` 属性的 `button` 元素提交，这允许它位于网格中，而无需成为 `form` 元素的子元素。选项元素由一个名为 `pageSizeOptions`
    的模板辅助工具创建，该工具在 *列表 17.11* 中定义。
- en: 'Listing 17.11: Defining a helper in the catalog_helpers.ts file in the src/helpers
    folder'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.11：在 src/helpers 文件夹中的 catalog_helpers.ts 文件中定义一个辅助工具
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The helper generates options that allow the user to choose **3**, **6**, or
    **9** items per page, and the `selected` attribute is applied to the `option`
    element that matches the current page size. Use a browser to request `http://localhost:5000`,
    select **6 per page** from the select options, and click the **Go** button. The
    form will submit a GET request that specifies the new page size, as shown in *Figure
    17.4*.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 辅助工具生成选项，允许用户选择每页**3**、**6**或**9**个项目，并将 `selected` 属性应用于匹配当前页面大小的 `option`
    元素。使用浏览器请求 `http://localhost:5000`，从选择选项中选择**每页6项**，然后点击**前往**按钮。表单将提交一个指定新页面大小的
    GET 请求，如图 *图 17.4* 所示。
- en: '![](img/B21959_17_04.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21959_17_04.png)'
- en: 'Figure 17.4: Changing the page size'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.4：改变页面大小
- en: Filtering catalog data
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过滤目录数据
- en: The next navigation feature will allow the user to filter the catalog by selecting
    a category or providing a search term. *Listing 17.12* adds new properties to
    the `ProductQueryParameters` interface to support filtering, and adds a `categories`
    property to the `ProductQueryResult` interface so that the user can be presented
    with a list of categories.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个导航特性将允许用户通过选择一个类别或提供搜索词来过滤目录。*列表 17.12* 向 `ProductQueryParameters` 接口添加了新的属性以支持过滤，并向
    `ProductQueryResult` 接口添加了一个 `categories` 属性，以便用户可以看到一个类别列表。
- en: 'Listing 17.12: Adding support for filtering to the catalog_models.ts file in
    the src/data folder'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.12：在 src/data 文件夹中的 catalog_models.ts 文件中添加对过滤的支持
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '*Listing 17.13* uses the new properties to query the database, filtering the
    data based on the search term and selected category.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 17.13* 使用新属性查询数据库，根据搜索词和选定的类别过滤数据。'
- en: 'Listing 17.13: Filtering data in the queries.ts file in the src/data/orm folder'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.13：在 src/data/orm 文件夹中的 queries.ts 文件中过滤数据
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The changes in *Listing 17.13* inspect the `ProductQueryParameters` object and
    introduce a `where` clause to restrict the database query. Filtering for a category
    is done by requiring a specific `categoryId` value. Searches are more complex.
    Some database servers have support for performing full-text searches on data,
    but this isn’t supported by Sequelize, which is why the `like` operation is used.
    When the user provides a search term, the `where` clause is used to match data
    using either the name or description values. Like most ORMs, Sequelize concentrates
    on features that are widely and consistently supported, which means that not every
    capability of a database server is available. That said, you can execute raw SQL
    queries to access any feature, as demonstrated in *Chapter 12*.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 17.13*中的更改检查`ProductQueryParameters`对象，并引入一个`where`子句来限制数据库查询。通过要求特定的`categoryId`值来进行类别过滤。搜索更为复杂。一些数据库服务器支持在数据上执行全文搜索，但
    Sequelize 不支持这一点，这就是为什么使用`like`操作的原因。当用户提供搜索词时，`where`子句用于匹配使用名称或描述值的数据。像大多数 ORM
    一样，Sequelize 专注于广泛且一致支持的功能，这意味着并非数据库服务器的每个功能都可用。尽管如此，你可以执行原始 SQL 查询来访问任何功能，如*第
    12 章*中所示。'
- en: '*Listing 17.14* updates the HTTP request handler so that the category and search
    term are read from the query string passed on to the repository and included in
    the data passed to the template engine.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 17.14* 更新了 HTTP 请求处理器，以便从传递给存储库的查询字符串中读取类别和搜索词，并将它们包含在传递给模板引擎的数据中。'
- en: 'Listing 17.14: Supporting filtering in the catalog.ts file in the src/routes
    folder'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.14：在`src/routes`文件夹中的`catalog.ts`文件中支持过滤
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: To confirm that the filtering features work, use a browser to request `http://localhost:5000/?searchTerm=pro`,
    which should filter the data to products whose name or description contains the
    term `pro`. To include a category filter, request `http://localhost:5000/?searchTerm=pro&category=2`,
    which will further restrict the data to products in the `Soccer` category. Both
    sets of results are shown in *Figure 17.5*.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要确认过滤功能是否正常工作，请使用浏览器请求`http://localhost:5000/?searchTerm=pro`，这将过滤包含术语`pro`的产品名称或描述的数据。要包含类别过滤器，请请求`http://localhost:5000/?searchTerm=pro&category=2`，这将进一步限制数据到`Soccer`类别中的产品。这两组结果都显示在*图
    17.5*中。
- en: '![](img/B21959_17_05.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_17_05.png)'
- en: 'Figure 17.5: Filtering data using the query string parameters'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.5：使用查询字符串参数过滤数据
- en: Adding filtering controls
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加过滤控件
- en: Providing the user with the controls for filtering means presenting a list of
    category buttons and an input element for entering a search term. Add a file named
    `category_controls.handlebars` to the `templates` folder with the content shown
    in *Listing 17.15*.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 提供用户过滤控件意味着展示一个类别按钮列表和一个用于输入搜索词的输入元素。将一个名为`category_controls.handlebars`的文件添加到`templates`文件夹中，其内容如*列表
    17.15*所示。
- en: 'Listing 17.15: The contents of the category_controls.handlebars file in the
    templates folder'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.15：`templates`文件夹中`category_controls.handlebars`文件的内容
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This template relies on a helper named `categoryButtons` to generate buttons
    for category navigation. The helper will provide a `selected` value, which is
    used to decide whether to generate an inactive placeholder (for the selected category)
    or an anchor element that will select a category, using an `href` attribute created
    by the `navigationUrl`. There is also a `Home` button that is always present,
    and which selects all categories.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板依赖于一个名为`categoryButtons`的辅助器来生成用于类别导航的按钮。辅助器将提供一个`selected`值，该值用于决定是否生成一个不活动的占位符（用于所选类别）或一个使用`navigationUrl`创建的`href`属性来选择类别的锚元素。还有一个始终存在的`Home`按钮，它选择所有类别。
- en: 'When generating the URLs for the `href` attribute, this template sets navigation
    values other than `category` to ensure the user is presented with useful content.
    For the `Home` button, this means clearing the `searchTerm` value and selecting
    the first page of content:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成`href`属性的 URL 时，此模板将除`category`之外的其他导航值设置为默认值，以确保用户看到有用的内容。对于`Home`按钮，这意味着清除`searchTerm`值并选择内容的第一页：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Setting these values gives the user a reset option, leaving only the `pageSize`
    option unchanged. For the buttons that select a category, the `page` value is
    reset:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 设置这些值给用户一个重置选项，只保留`pageSize`选项不变。对于选择类别的按钮，`page`值将被重置：
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This ensures that the user is always presented with products when moving from
    a category with many products to one with fewer and prevents presenting an empty
    page. *Listing 17.16* defines the `categoryButtons` helper and updates the `navigationUrl`
    helper so that it includes the category and search term selections in the URLs
    it creates.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这确保了当用户从一个产品众多的类别移动到一个产品较少的类别时，始终会看到产品，并防止显示空页面。*列表 17.16* 定义了 `categoryButtons`
    辅助函数并更新了 `navigationUrl` 辅助函数，以便它在其创建的 URL 中包含类别和搜索词选择。
- en: 'Listing 17.16: Supporting filtering in the catalog_helpers.ts file in the src/helpers
    folder'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.16：在 src/helpers 文件夹中的 catalog_helpers.ts 文件中支持过滤
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: To add support for entering a search term, add a file named `search_controls.handlebars`
    to the `templates` folder with the content shown in *Listing 17.17*.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加输入搜索词的支持，请将一个名为 `search_controls.handlebars` 的文件添加到 `templates` 文件夹中，其内容如
    *列表 17.17* 所示。
- en: 'Listing 17.17: The contents of the search_controls.handlebars file in the templates
    folder'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.17：模板文件夹中的 search_controls.handlebars 文件的内容
- en: '[PRE21]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This template contains a form with an `input` element into which a search term
    is entered and a button that submits the form. The form is submitted using a `GET`
    request, and there are hidden `input` elements to ensure that the `pageSize` and
    `category` values are included alongside the search term in the query string sent
    to the server. *Listing 17.18* integrates the new templates into the content presented
    to the user.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板包含一个表单，其中包含一个 `input` 元素，用于输入搜索词，以及一个提交表单的按钮。表单通过 `GET` 请求提交，并且有隐藏的 `input`
    元素以确保 `pageSize` 和 `category` 值与搜索词一起包含在发送到服务器的查询字符串中。*列表 17.18* 将新模板集成到用户看到的内容中。
- en: 'Listing 17.18: Integrating filtering in the index.handlebars file in the templates
    folder'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.18：在模板文件夹中的 index.handlebars 文件中集成过滤
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Use a browser to request `http://localhost:5000`, enter `pro` into the search
    field and click the **Search** button to filter for matches. Click the **Soccer**
    button to further filter to one category. Both results are shown in *Figure 17.6*.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用浏览器请求 `http://localhost:5000`，在搜索字段中输入 `pro` 并点击 **搜索** 按钮以过滤匹配项。点击 **足球**
    按钮进一步过滤到一个类别。两个结果都显示在 *图 17.6* 中。
- en: '![](img/B21959_17_06.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图 17.6](img/B21959_17_06.png)'
- en: 'Figure 17.6: Using the data filtering controls'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.6：使用数据过滤控件
- en: Updating the product display
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新产品显示
- en: The final step to complete the catalog is to improve the way that products are
    displayed to lay the foundation for subsequent features. Create a file named `product.handlebars`
    in the `templates` folder with the content shown in *Listing 17.19*.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 完成目录的最后一步是改进产品显示方式，为后续功能奠定基础。在 `templates` 文件夹中创建一个名为 `product.handlebars` 的文件，其内容如
    *列表 17.19* 所示。
- en: 'Listing 17.19: The contents of the product.handlebars file in the templates
    folder'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.19：模板文件夹中的 product.handlebars 文件的内容
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This template displays a card for a single product, laid out using styles from
    the Bootstrap CSS package. The template depends on two helpers: the `highlight`
    helper will emphasize the search term, and the `currency` helper will format the
    price, as shown in *Listing 17.20*.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板显示单个产品的卡片，使用 Bootstrap CSS 包中的样式进行布局。模板依赖于两个辅助函数：`highlight` 辅助函数将强调搜索词，而
    `currency` 辅助函数将格式化价格，如 *列表 17.20* 所示。
- en: 'Listing 17.20: Adding helpers in the catalog_helpers.ts file in the src/helpers
    folder'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.20：在 src/helpers 文件夹中的 catalog_helpers.ts 文件中添加辅助函数
- en: '[PRE24]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `highlight` helper uses JavaScript regular expressions to wrap the search
    term with `strong` elements, which tell the browser to use a bold font. The template
    engine automatically sanitizes the results from helpers, and so the `HandleBars.SafeString`
    function must be used so that the HTML elements generated by the helper are left
    untouched. The `currency` helper formats number values as US dollar amounts, using
    the built-in internationalization API.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`highlight` 辅助函数使用 JavaScript 正则表达式将搜索词用 `strong` 元素包裹，这告诉浏览器使用粗体字体。模板引擎会自动清理辅助函数的结果，因此必须使用
    `HandleBars.SafeString` 函数，以确保辅助函数生成的 HTML 元素保持不变。`currency` 辅助函数将数值格式化为美元金额，使用内置的国际化
    API。'
- en: '**Understanding the impact of lazy localization**'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**理解延迟本地化的影响**'
- en: Localizing a product takes time, effort, and resources, and it needs to be done
    by someone who understands the linguistic, cultural, and monetary conventions
    of the target country or region. If you don’t localize properly, then the result
    can be worse than not localizing at all.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 本地化一个产品需要时间、精力和资源，并且需要由了解目标国家或地区语言、文化和货币惯例的人来完成。如果你没有正确本地化，那么结果可能比没有本地化还要糟糕。
- en: It is for this reason that I don’t describe localization features in detail
    in this book – or any of my books – and why the currency values in the SportsStore
    application are hardcoded to `USD`. At least if a product isn’t localized, the
    user knows where they stand and doesn’t have to try to figure out whether you
    just forgot to change the currency code or whether those prices are really in
    US dollars. (This is an issue that I see all the time living in the United Kingdom.)
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 正是因为这个原因，我在这本书中（或我的任何一本书中）没有详细描述本地化功能，以及为什么 SportsStore 应用程序中的货币值被硬编码为 `USD`。至少，如果一个产品没有本地化，用户就知道自己的位置，不必试图弄清楚你是否只是忘记更改货币代码，或者这些价格是否真的是美元。
    (这是我在居住在英国时经常看到的问题。)
- en: You should localize your products. Your users should be able to do business
    or perform other operations in a way that makes sense to them. But you must take
    it seriously and allocate the time and effort required to do it properly. And
    if you can’t commit the resources, then the next best thing is to do nothing at
    all.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该本地化你的产品。你的用户应该能够以对他们有意义的方式进行业务或其他操作。但是，你必须认真对待，并分配完成它所需的时间和精力。如果你无法投入资源，那么最好的选择就是什么都不做。
- en: '*Listing 17.21* replaces the placeholder table with which we started the chapter
    with the new template.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表17.21* 用新的模板替换了我们本章开始时使用的占位符表。'
- en: 'Listing 17.21: Using the product template in the index.handlebars file in the
    templates folder'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 列表17.21：在模板文件夹中的 index.handlebars 文件中使用产品模板
- en: '[PRE25]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Use a browser to request `http://localhost:5000` and you will see the new product
    layout. Perform a search and you will see the matches highlighted in the product
    list, as shown in *Figure 17.7*.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用浏览器请求 `http://localhost:5000`，你将看到新的产品布局。执行搜索后，你将在产品列表中看到高亮显示的匹配项，如图 *图17.7*
    所示。
- en: '![](img/B21959_17_07.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21959_17_07.png)'
- en: 'Figure 17.7: Updating the product display'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.7：更新产品显示
- en: Creating the shopping cart
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建购物车
- en: Now that the user can see and navigate the products for sale, the next step
    is to add a cart that allows them to make selections before checking out. For
    the SportsStore application, cart data will be handled using sessions, so that
    product selections are discarded when the session expires.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在用户可以看到并导航销售的产品，下一步是添加一个购物车，允许他们在结账前进行选择。对于 SportsStore 应用程序，购物车数据将使用会话处理，这样当会话过期时，产品选择就会被丢弃。
- en: Adding configuration support for secrets
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加秘密的配置支持
- en: The `SportsStore` application will use cookies to associate requests with a
    session, and those cookies will be signed to prevent them from being altered.
    The signing and validation process requires a secret key, known only to the application.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`SportsStore` 应用程序将使用 cookies 将请求与一个会话关联起来，并且这些 cookies 将被签名以防止它们被篡改。签名和验证过程需要一个只有应用程序知道的秘密密钥。'
- en: Secret keys and, more broadly, any secret information, can be difficult to manage.
    The basic rule is that secrets should not be hard-coded into the application because
    that makes them impossible to change without releasing a new version of the application
    into production.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 秘密密钥以及更广泛地说，任何秘密信息，可能难以管理。基本规则是，秘密不应该被硬编码到应用程序中，因为这会使它们在没有发布新版本到生产中时无法更改。
- en: But, aside from not hard-coding, the details of how secrets are managed depend
    on the application, the development organization, and the production platform.
    Most cloud hosting platforms, for example, provide a vault for storing secrets.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，除了不硬编码之外，如何管理秘密的细节取决于应用程序、开发组织和生产平台。例如，大多数云托管平台都提供用于存储秘密的保险库。
- en: The vault is populated with secrets, which the application requests when they
    are needed, which means that the developers, testers, and operations staff can
    do their jobs without needing access to the secrets.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 保险库中填充了秘密，当需要时应用程序会请求这些秘密，这意味着开发人员、测试人员和运维人员可以在不需要访问秘密的情况下完成他们的工作。
- en: Vaults work well in large organizations where secrets are managed by security
    staff outside of the development organization, but they can be complicated to
    use and must be replicated in the development environment.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在大型组织中，当密钥由开发组织外的安全人员管理时，保险库工作得很好，但它们可能难以使用，并且必须在开发环境中复制。
- en: Secrets can be stored in a configuration file, along with the rest of the application’s
    settings. This works, but it does mean that the secrets will be visible to the
    developers, and it requires that care is taken not to publish the secrets by committing
    the configuration file to a publicly accessible source code repository or to store
    private repositories on cloud storage that can be accessed outside the organization.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥可以存储在配置文件中，与应用程序的其余设置一起。这样做是可行的，但这也意味着密钥将对开发者可见，并且需要小心处理，以免在将配置文件提交到公开可访问的源代码仓库或将私有仓库存储在组织外部可以访问的云存储上时泄露密钥。
- en: Secrets are often defined using environment variables. The idea is that environment
    variables are not persistent and so cannot be accidentally included in a source
    code commit. The reality is that setting up environment variables can be fiddly,
    especially when dealing with secrets that are long sequences of random characters,
    and so they are often defined using script files, which present the same problems
    as a regular configuration file.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥通常使用环境变量定义。想法是环境变量不是持久的，因此不可能意外地包含在源代码提交中。现实是设置环境变量可能很麻烦，尤其是处理长序列的随机字符的密钥时，因此它们通常使用脚本文件定义，这会带来与常规配置文件相同的问题。
- en: Every approach has its drawbacks, and there is no single best solution. My preferred
    approach is to isolate the provision of secrets from the rest of the application
    by extending the configuration system. This makes it easy to change the way secrets
    are stored, which can happen as the project evolves. Behind the scenes, I am going
    to use environment variables to store secrets, but this won’t be apparent to the
    rest of the application. The easiest and most consistent way to define environment
    variables is to use an *env file*, which is a simple text file containing key/value
    pairs. To add support for reading env files, run the command shown in *Listing
    17.22* in the `sportsstore` folder to install a new package.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 每种方法都有其缺点，没有一种单一的最好解决方案。我首选的方法是通过扩展配置系统来将密钥的提供与其他应用程序部分隔离开来。这使得更改存储密钥的方式变得容易，这可能会随着项目的演变而发生变化。幕后，我将使用环境变量来存储密钥，但这对应用程序的其他部分来说并不明显。定义环境变量的最简单和最一致的方式是使用一个
    *env 文件*，它是一个包含键/值对的简单文本文件。为了添加对读取 env 文件的支持，请在 `sportsstore` 文件夹中运行 *列表 17.22*
    中显示的命令来安装一个新的包。
- en: '**Tip**'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: Node.js does have built-in support for reading env files (with the `--env-file`
    argument, but the package offers more control over when the files are read and
    how the contents are processed).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 确实内置了对读取 env 文件的支持（使用 `--env-file` 参数，但该包提供了更多控制文件何时读取以及如何处理内容的方式）。
- en: 'Listing 17.22: Installing a package'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.22：安装包
- en: '[PRE26]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '*Table 17.1* describes this package for quick reference.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '*表 17.1* 描述了此包以供快速参考。'
- en: 'Table 17.1: The env file package'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 表 17.1：env 文件包
- en: '| Name | Description |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '|'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE27]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '| This package reads `.env` files and presents their contents as environment
    variables. |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| 此包读取 `.env` 文件，并将它们的内 容作为环境变量呈现。 |'
- en: Add a file named `development.env` (a period followed by `env`) to the `sportstore`
    folder, with the content shown in *Listing 17.23*.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `sportstore` 文件夹中添加一个名为 `development.env`（点后跟 `env`）的文件，其内容如 *列表 17.23* 所示。
- en: 'Listing 17.23: The contents of the development.env file in the sportsstore
    folder'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.23：sportsstore 文件夹中 development.env 文件的内容
- en: '[PRE28]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The env file contains a single entry, named `COOKIE_SECRET`. *Listing 17.24*
    uses the `dotenv` package to read the env file and adds a function for obtaining
    a secret.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: env 文件包含一个条目，名为 `COOKIE_SECRET`。*列表 17.24* 使用 `dotenv` 包读取 env 文件并添加了一个获取密钥的函数。
- en: 'Listing 17.24: Supporting secrets in the index.ts file in the src/config folder'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.24：在 src/config 文件夹中的 index.ts 文件中支持密钥
- en: '[PRE29]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `config` function defined by the `dotenv` module is imported using the name
    `dotenvconfig` and is used to load an env file. To support env files for different
    parts of the process, the `getEnvirionment` method is used to formulate the name
    of the file that will be read, so that the `development.env` file is read during
    development and `production.env` will be read when the application is deployed.
    This means that a “real” environment variable is used to decide which file containing
    additional environment variables is loaded. This can be slightly confusing, but
    it works well in practice.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `dotenv` 模块定义的 `config` 函数通过名称 `dotenvconfig` 导入，并用于加载环境文件。为了支持不同部分的过程环境文件，使用
    `getEnvironment` 方法来制定将要读取的文件名，因此在开发期间读取 `development.env` 文件，当应用程序部署时读取 `production.env`
    文件。这意味着使用“真实”的环境变量来决定加载包含额外环境变量的文件。这可能会有些令人困惑，但在实践中效果很好。
- en: The `getSecret` function is exported for use by the rest of the application
    and allows secrets to be requested without needing to know how they are provisioned.
    There are no sensible fallback values to use for undefined secrets, so the `getSecret`
    function throws an error if it cannot provide a value.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`getSecret` 函数被导出以供应用程序的其他部分使用，允许请求密钥而无需知道它们是如何配置的。对于未定义的密钥没有合理的回退值可以使用，因此如果
    `getSecret` 函数无法提供值，它会抛出一个错误。'
- en: Creating session middleware
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建会话中间件
- en: The next step is to enable sessions, which will allow product selections to
    be persisted between HTTP requests. Run the commands shown in *Listing 17.25*
    in the `sportsstore` folder to install packages to support sessions.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是启用会话，这将允许在HTTP请求之间持久化产品选择。在 `sportsstore` 文件夹中运行 *列表 17.25* 中显示的命令以安装支持会话的包。
- en: 'Listing 17.25: Installing the session packages'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.25：安装会话包
- en: '[PRE30]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The packages add support for processing cookies, managing sessions, and storing
    session data in a SQL database using the Sequelize ORM package. *Table 17.2* describes
    these packages for quick reference.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这些包通过 Sequelize ORM 包支持处理cookie、管理会话以及在SQL数据库中存储会话数据。*表 17.2* 描述了这些包以供快速参考。
- en: 'Table 17.2: The cookie and session packages'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 表 17.2：cookie 和会话包
- en: '| Name | Description |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '|'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE31]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '| This package adds cookie-based sessions to Express. |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| 此包为 Express 添加基于cookie的会话。|'
- en: '|'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE32]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '| This package stores session data using `Sequelize`. |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| 此包使用 `Sequelize` 存储会话数据。|'
- en: '|'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE33]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '| This package contains type descriptions. |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| 此包包含类型描述。|'
- en: '|'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE34]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '| This package contains type descriptions. |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| 此包包含类型描述。|'
- en: To enable sessions, add a file named `sessions.ts` to the `src` folder with
    the content shown in *Listing 17.26*.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用会话，请将名为 `sessions.ts` 的文件添加到 `src` 文件夹中，其内容如 *列表 17.26* 所示。
- en: 'Listing 17.26: The contents of the sessions.ts file in the src folder'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.26：src 文件夹中 sessions.ts 文件的内容
- en: '[PRE35]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The `createSessions` function reads configuration data and uses it to configure
    `Sequelize` and set up session middleware using signed cookies. Add the configuration
    settings shown in *Listing 17.27* to define the values used to specify the database
    and session age.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`createSessions` 函数读取配置数据，并使用它来配置 `Sequelize` 并通过签名cookie设置会话中间件。将 *列表 17.27*
    中显示的配置设置添加到定义数据库和会话年龄的值。'
- en: '**Note**'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: The sessions database is reset every time the application starts. The development
    tools restart the application when a file change is detected, which means that
    any code or configuration change will drop all of the stored sessions.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 每次应用程序启动时都会重置会话数据库。当检测到文件更改时，开发工具会重新启动应用程序，这意味着任何代码或配置更改都会删除所有存储的会话。
- en: 'Listing 17.27: Adding settings to the server.config.json file in the sportsstore
    folder'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.27：在 sportsstore 文件夹中的 server.config.json 文件中添加设置
- en: '[PRE36]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '*Listing 17.28* enables the session middleware when the application starts.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 17.28* 在应用程序启动时启用会话中间件。'
- en: 'Listing 17.28: Enabling middleware in the server.ts file in the sportsstore
    folder'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.28：在 sportsstore 文件夹中的 server.ts 文件中启用中间件
- en: '[PRE37]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Enabling sessions doesn’t change the way the application behaves but does set
    the foundation for the shopping cart, which is defined in the next section.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 启用会话不会改变应用程序的行为方式，但为下一节中定义的购物车奠定了基础。
- en: Defining the cart data model
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义购物车数据模型
- en: To describe a shopping cart, add a file named `cart_models.ts` to the `src/data`
    folder with the content shown in *Listing 17.29*.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 要描述购物车，请将名为 `cart_models.ts` 的文件添加到 `src/data` 文件夹中，其内容如 *列表 17.29* 所示。
- en: 'Listing 17.29: The contents of the cart_models.ts file in the src/data folder'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 列表17.29：src/data文件夹中cart_models.ts文件的内容
- en: '[PRE38]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The `Cart` interface represents a shopping cart, with each product selection
    represented by a `CartLine` object, identifying the selected product and the quantity
    the customer requires. Cart data will be stored in the session database as JSON
    data, which is why the `createCart`, `addLine`, and `removeLine` functions are
    not defined in a class since JSON data is deserialized into a plain JavaScript
    object.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`Cart`接口表示一个购物车，每个产品选择由一个`CartLine`对象表示，标识选定的产品和客户所需的数量。购物车数据将作为JSON数据存储在会话数据库中，这就是为什么`createCart`、`addLine`和`removeLine`函数没有在类中定义，因为JSON数据被反序列化为一个普通的JavaScript对象。'
- en: Extending the catalog repository
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展目录仓库
- en: A new query is required to be able to display a summary of the user’s cart,
    as shown in *Listing 17.30*.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 需要一个新的查询来显示用户购物车的摘要，如*列表17.30*所示。
- en: 'Listing 17.30: Adding a method to the catalog_repository.ts file in the src/data
    folder'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 列表17.30：在src/data文件夹中的catalog_repository.ts文件中添加一个方法
- en: '[PRE39]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The `CartLine` objects that represent a selection contain just a product ID
    and a quantity. The `getProductDetails` method accepts an array of IDs and returns
    the corresponding `Product` objects from the catalog. *Listing 17.31* implements
    the new repository method using Sequelize.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 代表选择的`CartLine`对象仅包含产品ID和数量。`getProductDetails`方法接受一个ID数组，并从目录中返回相应的`Product`对象。*列表17.31*实现了使用Sequelize的新仓库方法。
- en: 'Listing 17.31: Implementing a method in the queries.ts file in the src/data/orm
    folder'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 列表17.31：在src/data/orm文件夹中的queries.ts文件中实现一个方法
- en: '[PRE40]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The implementation of the `getProductDetails` method uses the Sequelize `in`
    operation to select products whose `id` property is contained in the array received
    as the method parameter. The result is a `Promise` that resolves to produce an
    array of `ProductModel` objects.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`getProductDetails`方法的实现使用Sequelize的`in`操作来选择其`id`属性包含在方法参数接收到的数组中的产品。结果是解析为产生`ProductModel`对象数组的`Promise`。'
- en: I kept the `Cart` type simple because that’s the data that will be stored in
    the session, which will be read for most of the requests received from the user
    because the responses will contain a summary of the cart (which is created in
    the *Creating the cart summary* section). To fully populate the cart with product
    details, which will be required to show the cart to the user, add a file named
    `cart_helpers.ts` to the `src/data` folder with the content shown in *Listing
    17.32*.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我保持了`Cart`类型简单，因为这将是在会话中存储的数据，因为大多数从用户接收到的请求都将读取这些数据（因为响应将包含购物车的摘要，该摘要在*创建购物车摘要*部分中创建）。要完全填充购物车以包含产品详情，这些详情将用于向用户显示购物车，请将一个名为`cart_helpers.ts`的文件添加到`src/data`文件夹中，其内容如*列表17.32*所示。
- en: 'Listing 17.32: The contents of the cart_helpers.ts file in the src/data folder'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 列表17.32：src/data文件夹中cart_helpers.ts文件的内容
- en: '[PRE41]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The `getCartDetail` function accepts a `Cart` object and returns a `CartDetail`,
    which contains all the additional information required to provide a detailed view
    of the cart, including subtotals for each product selection, and an overall total.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`getCartDetail`函数接受一个`Cart`对象，并返回一个`CartDetail`，其中包含提供购物车详细视图所需的所有附加信息，包括每个产品选择的子总金额，以及总金额。'
- en: '**Note**'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: Some of the operations required to gather the detailed data are asynchronous,
    which means they cannot be performed by a template helper, which must be synchronous.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 一些收集详细数据所需的操作是异步的，这意味着它们不能由模板助手执行，因为模板助手必须是同步的。
- en: Creating the HTTP routes and middleware
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建HTTP路由和中间件
- en: The next step is to define the routes and handlers for the HTTP requests so
    that products can be added and removed from a cart, and the contents of a cart
    can be displayed. Add a file named `cart.ts` to the `src/routes` folder, with
    the content shown in *Listing 17.33*.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是定义HTTP请求的路由和处理程序，以便可以将产品添加到购物车中，并从购物车中删除产品，以及显示购物车的内容。将一个名为`cart.ts`的文件添加到`src/routes`文件夹中，其内容如*列表17.33*所示。
- en: 'Listing 17.33: The contents of the cart.ts file in the src/routes folder'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 列表17.33：src/routes文件夹中cart.ts文件的内容
- en: '[PRE42]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The `declare` statement is used to define a `cart` property on the `SessionData`
    interface so that the TypeScript compiler will understand that the cart is part
    of the session data.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`declare`语句在`SessionData`接口上定义一个`cart`属性，以便TypeScript编译器理解购物车是会话数据的一部分。
- en: The `createCartMiddleware` function creates a middleware component that gets
    the cart from the session, creates a cart if there isn’t one, and sets the cart
    as local data for use by the template engine. The `createCartRoutes` function
    defines three routes. `HTTP` `POST` requests sent to the `/cart` URL will add
    a product to the user’s cart, and a `POST` request to the `/cart/remove` URL will
    remove a product.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`createCartMiddleware` 函数创建一个中间件组件，从会话中获取购物车，如果没有购物车则创建一个，并将购物车设置为模板引擎使用的本地数据。`createCartRoutes`
    函数定义了三个路由。发送到 `/cart` URL 的 `HTTP` `POST` 请求将向用户的购物车添加一个产品，而发送到 `/cart/remove`
    URL 的 `POST` 请求将移除一个产品。'
- en: (Most browsers allow HTML forms to send only `GET` and `POST` requests, which
    is why both adding and removing products are done with `POST` requests). Requests
    to these handlers can include a `returnUrl` value, to which the browser is redirected
    after the cart has been modified. The value is processed using the `encode` and
    `decode` functions provided by Node.js in the `querystring` module, which allows
    the value to be passed around safely until it is needed to perform a redirection.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '（大多数浏览器允许 HTML 表单只发送 `GET` 和 `POST` 请求，这就是为什么添加和移除产品都使用 `POST` 请求）。对这些处理程序发出的请求可以包括一个
    `returnUrl` 值，在修改购物车后，浏览器将重定向到该值。该值使用 Node.js 在 `querystring` 模块中提供的 `encode`
    和 `decode` 函数进行处理，这使得该值可以在需要执行重定向之前安全地传递。 '
- en: The third route handles `GET` requests sent to the `/cart` URL and displays
    the contents of the cart. The data contained in the `Cart` object has to be supplemented
    with data obtained using the `getProductDetails` repository method. *Listing 17.34*
    enables the new middleware and routes.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 第三条路由处理发送到 `/cart` URL 的 `GET` 请求，并显示购物车的商品内容。`Cart` 对象中包含的数据必须通过使用 `getProductDetails`
    存储库方法获得的数据进行补充。*列表 17.34* 启用了新的中间件和路由。
- en: 'Listing 17.34: Enabling routes in the index.ts file in the src/routes folder'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.34：在 src/routes 文件夹中的 index.ts 文件中启用路由
- en: '[PRE43]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: These routes are enabled after those that handle the requests for the catalog
    and the middleware is configured before all of the routes.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这些路由是在处理目录请求的路由之后启用的，中间件配置是在所有路由之前完成的。
- en: Creating the templates
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建模板
- en: The cart display will be a table that shows the selected products and buttons
    that allow items to be removed from the cart. To define a template for the table
    rows, add a file named `cart_line.handlebars` to the `templates` folder with the
    content shown in *Listing 17.35*.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 购物车显示将是一个表格，显示所选产品以及允许从购物车中移除项目的按钮。要定义表格行的模板，请将名为 `cart_line.handlebars` 的文件添加到
    `templates` 文件夹中，其内容如 *列表 17.35* 所示。
- en: 'Listing 17.35: The contents of the cart_line.handlebars file in the templates
    folder'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.35：模板文件夹中 cart_line.handlebars 文件的内容
- en: '[PRE44]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'This template defines table cells that contain details for a single product:
    the quantity chosen, the product name, the price per unit, and the subtotal. The
    price and subtotal are formatted using the `currency` helper. The final table
    cell contains an HTML form that presents a **Remove** button that sends an HTTP
    POST request to the `/cart/remove` URL, which will remove a product from the cart.
    To define the template for the overall table, add a file named `cart.handlebars`
    to the `templates` folder with the content shown in *Listing 17.36*.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 此模板定义了包含单个产品详细信息的表格单元格：所选数量、产品名称、单价和总计。价格和总计使用 `currency` 辅助函数进行格式化。最后的表格单元格包含一个
    HTML 表单，该表单呈现一个**移除**按钮，该按钮发送一个 HTTP POST 请求到 `/cart/remove` URL，这将从购物车中移除一个产品。要定义整个表格的模板，请将名为
    `cart.handlebars` 的文件添加到 `templates` 文件夹中，其内容如 *列表 17.36* 所示。
- en: 'Listing 17.36: The contents of the cart.handlebars file in the templates folder'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.36：模板文件夹中 cart.handlebars 文件的内容
- en: '[PRE45]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'A useful feature provided by the Handlebars template engine is providing partials
    with parameters. In this case, the `cart_line` partial is provided with a `returnUrl`
    parameter:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: Handlebars 模板引擎提供的一个有用功能是提供带有参数的局部模板。在这种情况下，`cart_line` 局部模板提供了一个 `returnUrl`
    参数：
- en: '[PRE46]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: This parameter can be referred to by name and is combined with the data that
    would normally be available to the partial. The `each` helper changes the context
    used to resolve template expressions, which makes it easy to generate content
    for each item in a sequence, and within the `each` block, expressions are evaluated
    against the current item. The `../` prefix allows a template expression to access
    the original context from which the `each` helper is obtaining its values, and
    is used to provide the partial template with the value for the `returnUrl` parameter.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 此参数可以通过名称引用，并与通常可用于部分的数据结合。`each` 助手更改用于解析模板表达式的上下文，这使得为序列中的每个项目生成内容变得容易，并且在
    `each` 块内，表达式是对当前项目进行评估的。`../` 前缀允许模板表达式访问 `each` 助手获取其值的原始上下文，并用于向部分模板提供 `returnUrl`
    参数的值。
- en: The final step is to add a button to the product template so the user can select
    a product, as shown in *Listing 17.37*.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是在产品模板中添加一个按钮，以便用户可以选择产品，如 *清单 17.37* 所示。
- en: 'Listing 17.37: Adding product selection in the product.handlebars file in the
    templates folder'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 17.37：在模板文件夹中的 product.handlebars 文件中添加产品选择
- en: '[PRE47]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Use a browser to request `http://localhost:5000` and click the **Add To Cart**
    button for one of the products. The product will be added to the cart, and the
    cart details will be displayed, as shown in *Figure 17.8*. Clicking the **Remove**
    button will remove the product from the cart and clicking the **Continue Shopping**
    button will return to the catalog. (Clicking the **Checkout** button will produce
    an error until the checkout process is implemented.)
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 使用浏览器请求 `http://localhost:5000` 并点击其中一个产品的 **添加到购物车** 按钮。该产品将被添加到购物车中，并显示购物车详情，如图
    *图 17.8* 所示。点击 **移除** 按钮将从购物车中移除产品，点击 **继续购物** 按钮将返回目录。 （在实现结账过程之前，点击 **结账** 按钮将产生错误。）
- en: '![](img/B21959_17_08.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_17_08.png)'
- en: 'Figure 17.8: Using the cart'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.8：使用购物车
- en: Creating the cart summary
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建购物车摘要
- en: To finish this chapter, I am going to add a summary of the cart to the catalog
    page, so the user can see how many products they have selected and easily navigate
    to the cart details. Run the command shown in *Listing 17.38* in the `sportsstore`
    folder to add a package to the project that will be used by the cart summary.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成本章内容，我将在目录页面上添加购物车摘要，以便用户可以看到他们选择了多少产品，并轻松地导航到购物车详情。在 `sportsstore` 文件夹中运行
    *清单 17.38* 中显示的命令，以向项目中添加用于购物车摘要的包。
- en: 'Listing 17.38: Adding a package'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 17.38：添加包
- en: '[PRE48]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The Bootstrap Icons package is a set of icons that can be easily used in HTML
    content. *Table 17.3* describes this package for quick reference.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap Icons 包是一组可以轻松用于 HTML 内容的图标。*表 17.3* 描述了此包，以便快速参考。
- en: 'Table 17.3: The Bootstrap Icons package'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 表 17.3：Bootstrap Icons 包
- en: '| Name | Description |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '|'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE49]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '| This package contains a library of icons that can be applied to HTML content.
    |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| 此包包含一个可以应用于 HTML 内容的图标库。|'
- en: The cart summary will display the total number of products in the cart, which
    will require a template helper. Add a file named `cart_helpers.ts` to the `src/helpers`
    folder with the content shown in *Listing 17.39*.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 购物车摘要将显示购物车中的产品总数，这需要模板助手。将名为 `cart_helpers.ts` 的文件添加到 `src/helpers` 文件夹中，其内容如
    *清单 17.39* 所示。
- en: 'Listing 17.39: The contents of the cart_helpers.ts file in the src/helpers
    folder'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 17.39：src/helpers 文件夹中 cart_helpers.ts 文件的内容
- en: '[PRE50]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '*Listing 17.40* adds the new helper to the template engine configuration.'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 17.40* 将新助手添加到模板引擎配置中。'
- en: 'Listing 17.40: Adding helpers to the index.ts file in the src/helpers folder'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 17.40：在 src/helpers 文件夹中的 index.ts 文件中添加助手
- en: '[PRE51]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Add a file named `cart_summary.handlebars` to the `templates` folder, with the
    content shown in *Listing 17.41*.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `templates` 文件夹中添加一个名为 `cart_summary.handlebars` 的文件，其内容如 *清单 17.41* 所示。
- en: 'Listing 17.41: The contents of the cart_summary.handlebars file in the templates
    folder'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 17.41：src/templates 文件夹中 cart_summary.handlebars 文件的内容
- en: '[PRE52]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The new template displays a small message that indicates the contents of the
    cart, along with a button that allows navigation to see the contents of the cart.
    The button is an anchor element whose content is an `i` element, which is how
    icons from the Bootstrap Icons package are displayed:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 新模板显示一条小消息，指示购物车的内容，以及一个允许导航查看购物车内容的按钮。该按钮是一个锚元素，其内容是一个 `i` 元素，这是显示 Bootstrap
    Icons 包中图标的方式：
- en: '[PRE53]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: This element displays the cart icon, and you can look up the class required
    for each icon at [https://icons.getbootstrap.com](https://icons.getbootstrap.com).
    *Listing 17.42* integrates the new partial template into the main layout.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 此元素显示购物车图标，您可以在[https://icons.getbootstrap.com](https://icons.getbootstrap.com)查找每个图标所需的类。*列表
    17.42*将新的部分模板集成到主布局中。
- en: 'Listing 17.42: Adding the summary to the main_layout.handlebars file in the
    templates folder'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.42：在`templates`文件夹中的`main_layout.handlebars`文件中添加摘要
- en: '[PRE54]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The cart summary will only be shown when there is a `show_cart` value, which
    will allow route handlers to opt into displaying the cart summary in the header,
    such as in *Listing 17.43*.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当存在`show_cart`值时，才会显示购物车摘要，这将允许路由处理程序选择在标题中显示购物车摘要，例如在*列表 17.43*中。
- en: 'Listing 17.43: Enabling the cart summary in the catalog.ts file in the src/routes
    folder'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.43：在`src/routes`文件夹中的`catalog.ts`文件中启用购物车摘要
- en: '[PRE55]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: The changes in *Listing 17.42* include a `link` element for the CSS stylesheet
    that contains the icons. *Listing 17.44* uses the Express `static` middleware
    to provide access to the contents of this package.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 17.42*中的更改包括一个指向包含图标的CSS样式的`link`元素。*列表 17.44*使用Express的`static`中间件提供对包内容的访问。'
- en: 'Listing 17.44: Adding static content to the server.ts file in the src folder'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 17.44：在`src`文件夹中的`server.ts`文件中添加静态内容
- en: '[PRE56]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Use a browser to request `http://localhost:5000` and you will see the cart summary,
    which will reflect any earlier product selections. As the contents of the cart
    change, the summary will be updated to show the number of products that have been
    chosen, as shown in *Figure 17.9*.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 使用浏览器请求`http://localhost:5000`，您将看到购物车摘要，它将反映任何之前的产品选择。随着购物车内容的改变，摘要将更新以显示已选择的产品数量，如图*17.9*所示。
- en: '![](img/B21959_17_09.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21959_17_09.png)'
- en: 'Figure 17.9: Displaying a cart summary'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.9：显示购物车摘要
- en: Summary
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, I continued working on the `SportsStore` project to complete
    the product catalog and add a shopping cart:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我继续在`SportsStore`项目中工作，以完成产品目录并添加购物车功能：
- en: Requests for products can include query string parameters that paginate data,
    specify page size, and filter the product data.
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品请求可以包括查询字符串参数，用于分页数据、指定页面大小以及过滤产品数据。
- en: The query string values are preserved in the URLs contained in the HTML responses
    so that the user has a consistent experience.
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询字符串值被保留在HTML响应中包含的URL中，以便用户获得一致的使用体验。
- en: The shopping cart uses sessions to store product selections. The session data
    is stored in a database and sessions are identified using HTTP cookies.
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 购物车使用会话来存储产品选择。会话数据存储在数据库中，会话使用HTTP cookie进行标识。
- en: The session cookies are signed to prevent tampering, and the signing secret
    is stored in an env file, which is read by the configuration system.
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 会话cookie被签名以防止篡改，签名密钥存储在env文件中，该文件由配置系统读取。
- en: A summary of the shopping cart is displayed as part of the catalog, styled using
    an icon package.
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 购物车摘要作为目录的一部分显示，使用图标包进行样式设计。
- en: I will continue working on `SportsStore` in the next chapter, adding support
    for accepting and validating orders.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在下一章继续工作在`SportsStore`中，添加接受和验证订单的支持。
