- en: '17'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SportsStore: Navigation and Cart'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will continue to build the SportsStore application by completing
    the catalog and adding a cart with which the user can make product selections.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing for this chapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter uses the `sportsstore` project created in *Chapter 16*. No changes
    are required for this chapter. Open a new command prompt, navigate to the `sportsstore`
    folder, and run the command shown in *Listing 17.1* to start the development tools.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tip**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example project for this chapter – and for all the other
    chapters in this book – from [https://github.com/PacktPublishing/Mastering-Node.js-Web-Development](https://github.com/PacktPublishing/Mastering-Node.js-Web-Development).
    See *Chapter 1* to get help if you have problems running the examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.1: Starting the development fools'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Open a new browser window, navigate to `http://localhost:5000`, and you will
    see the data read from the database presented in a simple table format, as shown
    in *Figure 17.1*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21959_17_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.1: Running the application'
  prefs: []
  type: TYPE_NORMAL
- en: Navigating the catalog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Real online stores have too many products to sensibly display them all to the
    user at the same time and typically provide tools to help the user find and select
    what they want. In the sections that follow, I will add features to SportsStore
    that will allow the user to navigate through the catalog by choosing the data
    that is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Paginating catalog data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pagination presents the user with manageable blocks of data, along with controls
    to move from one page to the next. The pagination controls give the user a sense
    of how much data is available, and individual pages require the server to send
    smaller amounts of data in each response, which can reduce the amount of time
    the user has to wait for data to be displayed. The drawback of pagination is that
    it requires the server to handle a lot of HTTP requests and make a lot of database
    queries as the user navigates through the data.
  prefs: []
  type: TYPE_NORMAL
- en: When processing a request for a page of data, the server needs to know how many
    items are displayed on a page, and which page the user wants to get the right
    data. To generate pagination controls, the server also needs to know how many
    items there are in total. *Listing 17.2* defines new types that describe the query
    details and the response.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.2: Adding pagination types in the catalog_models.ts file in the
    src/data folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `ProductQueryParameters` interface allows the pagination requirements associated
    with a query to be provided to the repository. The `ProductQueryResult` interface
    describes the response the repository will produce, which contains the page of
    data and the total number of stored items. These types will be expanded as other
    data navigation features are added. *Listing 17.3* revises the product query method
    in the repository interface to support the new types.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.3: Changing a method in the catalog_repository.ts file in the src/data
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `getProducts` method now accepts an optional `ProductQueryParameters` parameter
    and returns a `ProductQueryResult` result. *Listing 17.4* updates the implementation
    of the repository to reflect the change in the interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.4: Using new types in the queries.ts file in the src/data/orm folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If a `ProductQueryParameters` parameter is received by the `getProducts` method,
    then the Sequelize query is configured with the `limit` and `offset` properties,
    which specify the maximum number of results that should be read from the database,
    and the number of results that should be skipped before starting to read the results.
    This combination of properties will read a specified page of data.
  prefs: []
  type: TYPE_NORMAL
- en: The query is performed using the `findAndCountAll` method, which finds data
    and includes the total number of items in the database that match the query, regardless
    of how many of those items are included in the results. The combination of the
    data returned by the query and the total number of matching items is used to create
    the `ProductQueryParameters` result. *Listing 17.5* updates the HTTP handler so
    that pagination details are read from the query string and included in the call
    to the repository. If the query string doesn’t include pagination information,
    then defaults are used to select page 1 with four items per page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.5: Using page data in the catalog.ts file in the src/routes folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can check that data is being paged by using a browser to request `http://localhost:5000/?pageSize=3&page=2`.
    The URL specifies a page size of three items and asks for page 2, producing the
    result shown in *Figure 17.2*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21959_17_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.2: Displaying a page of data'
  prefs: []
  type: TYPE_NORMAL
- en: Adding pagination controls
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that the data can be paged, the next step is to provide the user with the
    ability to select the page they want. Add a file named `page_controls.handlebars`
    to the `templates` folder with the content shown in *Listing 17.6*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.6: The contents of the page_controls.handlebars file in the templates
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This template relies on two helpers, which will be defined shortly. The `pageButtons`
    helper will repeatedly generate a section of content for each page of content,
    using the pagination data provided to the template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The content contained between the helper tags will be duplicated for each available
    page of data. Each block of content is provided with an `index` value that indicates
    the page for which a control is being generated and a `selected` value that indicates
    whether the current page is the one the user is viewing. When the selected value
    is `true`, a button that does nothing is displayed, formatted in an active state
    to indicate the current page. For the other pages, an anchor element (with the
    `a` tag) is displayed, formatted as an inactive button. The `href` attribute of
    the anchor element is defined using a helper named `navigationUrl` that generates
    a URL that will navigate to the selected page. To define template helpers for
    the catalog, add a file named `catalog_helpers.ts` to the `src/helpers` folder
    with the content shown in *Listing 17.7*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.7: The contents of the catalog_helpers.ts file in the src/helpers
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Helper functions receive a `HelperOptions` parameter that provides useful context
    features. The `HelperOptions.hash` property is used to receive data in name/value
    pairs and is a useful way to provide structured data to a helper, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `HelperOptions.data` property provides access to context data, and its `root`
    property contains the data from the template that invoked the helper. The `getData`
    method merges the values from the hash data with the root data.
  prefs: []
  type: TYPE_NORMAL
- en: '**Caution**'
  prefs: []
  type: TYPE_NORMAL
- en: The Handlebars package is excellent but not all of the features provided by
    the `HelperOptions` interface are documented, including the use of the `data.root`
    property. Future versions of the package may change the way this property is defined,
    so you must either take care to use the version specified in *Chapter 16* or check
    the documentation and source code to see what’s changed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `navigationUrl` helper function accepts a `HelperOptions` argument and
    uses it to generate a relative URL path that will select a specific page, which
    is done using the `stringify` function from the `querystring` module that Node.js
    provides for creating and parsing query strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `pageButtons` function is more complex because it needs to generate blocks
    of content, which is done using the function assigned to the `HelperOptions.fn`
    property, which generates content using the elements contained between the helper
    tags. The `escapeUrl` helper encodes a value so that it can be included in a query
    string.
  prefs: []
  type: TYPE_NORMAL
- en: The `pageButtons` helper uses a `for` loop and the `fn` function to create content
    for each data page, supplementing the shared pagination data with `index` and
    `selected` values that are specific to each page. *Listing 17.8* adds the new
    helpers to the template engine configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.8: Adding helpers to the index.ts file in the src/helpers folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The final step is to include the partial template defined in *Listing 17.7*
    into the content generated by the application, as shown in *Listing 17.9*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.9: Using the pagination partial view in the index.handlebars file
    in the templates folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Use a browser to request `http://localhost:5000/?pageSize=3`. The `pageSize`
    value specifies three data items to a page, and omitting the `page` value from
    the query string will default to the first page of data, as shown in *Figure 17.3*.
    A button will be displayed for each available page, and clicking an inactive button
    will select a different page.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21959_17_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.3: Paging through data'
  prefs: []
  type: TYPE_NORMAL
- en: Changing the page size
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To allow the user to change the number of items per page, *Listing 17.10* creates
    a grid that contains the existing page buttons, plus a **select** button that
    is populated with different page sizes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.10: Adding a select button to the page_controls.handlebars file
    in the templates folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The form is submitted by a `button` element, which is configured with the `form`
    attribute, allowing it to be positioned in the grid without needing to be a descendant
    of the `form` element. The option elements are created by a template helper named
    `pageSizeOptions`, which is defined in *Listing 17.11*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.11: Defining a helper in the catalog_helpers.ts file in the src/helpers
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The helper generates options that allow the user to choose **3**, **6**, or
    **9** items per page, and the `selected` attribute is applied to the `option`
    element that matches the current page size. Use a browser to request `http://localhost:5000`,
    select **6 per page** from the select options, and click the **Go** button. The
    form will submit a GET request that specifies the new page size, as shown in *Figure
    17.4*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21959_17_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.4: Changing the page size'
  prefs: []
  type: TYPE_NORMAL
- en: Filtering catalog data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next navigation feature will allow the user to filter the catalog by selecting
    a category or providing a search term. *Listing 17.12* adds new properties to
    the `ProductQueryParameters` interface to support filtering, and adds a `categories`
    property to the `ProductQueryResult` interface so that the user can be presented
    with a list of categories.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.12: Adding support for filtering to the catalog_models.ts file in
    the src/data folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 17.13* uses the new properties to query the database, filtering the
    data based on the search term and selected category.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.13: Filtering data in the queries.ts file in the src/data/orm folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The changes in *Listing 17.13* inspect the `ProductQueryParameters` object and
    introduce a `where` clause to restrict the database query. Filtering for a category
    is done by requiring a specific `categoryId` value. Searches are more complex.
    Some database servers have support for performing full-text searches on data,
    but this isn’t supported by Sequelize, which is why the `like` operation is used.
    When the user provides a search term, the `where` clause is used to match data
    using either the name or description values. Like most ORMs, Sequelize concentrates
    on features that are widely and consistently supported, which means that not every
    capability of a database server is available. That said, you can execute raw SQL
    queries to access any feature, as demonstrated in *Chapter 12*.
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 17.14* updates the HTTP request handler so that the category and search
    term are read from the query string passed on to the repository and included in
    the data passed to the template engine.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.14: Supporting filtering in the catalog.ts file in the src/routes
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: To confirm that the filtering features work, use a browser to request `http://localhost:5000/?searchTerm=pro`,
    which should filter the data to products whose name or description contains the
    term `pro`. To include a category filter, request `http://localhost:5000/?searchTerm=pro&category=2`,
    which will further restrict the data to products in the `Soccer` category. Both
    sets of results are shown in *Figure 17.5*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21959_17_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.5: Filtering data using the query string parameters'
  prefs: []
  type: TYPE_NORMAL
- en: Adding filtering controls
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Providing the user with the controls for filtering means presenting a list of
    category buttons and an input element for entering a search term. Add a file named
    `category_controls.handlebars` to the `templates` folder with the content shown
    in *Listing 17.15*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.15: The contents of the category_controls.handlebars file in the
    templates folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This template relies on a helper named `categoryButtons` to generate buttons
    for category navigation. The helper will provide a `selected` value, which is
    used to decide whether to generate an inactive placeholder (for the selected category)
    or an anchor element that will select a category, using an `href` attribute created
    by the `navigationUrl`. There is also a `Home` button that is always present,
    and which selects all categories.
  prefs: []
  type: TYPE_NORMAL
- en: 'When generating the URLs for the `href` attribute, this template sets navigation
    values other than `category` to ensure the user is presented with useful content.
    For the `Home` button, this means clearing the `searchTerm` value and selecting
    the first page of content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Setting these values gives the user a reset option, leaving only the `pageSize`
    option unchanged. For the buttons that select a category, the `page` value is
    reset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This ensures that the user is always presented with products when moving from
    a category with many products to one with fewer and prevents presenting an empty
    page. *Listing 17.16* defines the `categoryButtons` helper and updates the `navigationUrl`
    helper so that it includes the category and search term selections in the URLs
    it creates.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.16: Supporting filtering in the catalog_helpers.ts file in the src/helpers
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: To add support for entering a search term, add a file named `search_controls.handlebars`
    to the `templates` folder with the content shown in *Listing 17.17*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.17: The contents of the search_controls.handlebars file in the templates
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This template contains a form with an `input` element into which a search term
    is entered and a button that submits the form. The form is submitted using a `GET`
    request, and there are hidden `input` elements to ensure that the `pageSize` and
    `category` values are included alongside the search term in the query string sent
    to the server. *Listing 17.18* integrates the new templates into the content presented
    to the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.18: Integrating filtering in the index.handlebars file in the templates
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Use a browser to request `http://localhost:5000`, enter `pro` into the search
    field and click the **Search** button to filter for matches. Click the **Soccer**
    button to further filter to one category. Both results are shown in *Figure 17.6*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21959_17_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.6: Using the data filtering controls'
  prefs: []
  type: TYPE_NORMAL
- en: Updating the product display
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The final step to complete the catalog is to improve the way that products are
    displayed to lay the foundation for subsequent features. Create a file named `product.handlebars`
    in the `templates` folder with the content shown in *Listing 17.19*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.19: The contents of the product.handlebars file in the templates
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This template displays a card for a single product, laid out using styles from
    the Bootstrap CSS package. The template depends on two helpers: the `highlight`
    helper will emphasize the search term, and the `currency` helper will format the
    price, as shown in *Listing 17.20*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.20: Adding helpers in the catalog_helpers.ts file in the src/helpers
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The `highlight` helper uses JavaScript regular expressions to wrap the search
    term with `strong` elements, which tell the browser to use a bold font. The template
    engine automatically sanitizes the results from helpers, and so the `HandleBars.SafeString`
    function must be used so that the HTML elements generated by the helper are left
    untouched. The `currency` helper formats number values as US dollar amounts, using
    the built-in internationalization API.
  prefs: []
  type: TYPE_NORMAL
- en: '**Understanding the impact of lazy localization**'
  prefs: []
  type: TYPE_NORMAL
- en: Localizing a product takes time, effort, and resources, and it needs to be done
    by someone who understands the linguistic, cultural, and monetary conventions
    of the target country or region. If you don’t localize properly, then the result
    can be worse than not localizing at all.
  prefs: []
  type: TYPE_NORMAL
- en: It is for this reason that I don’t describe localization features in detail
    in this book – or any of my books – and why the currency values in the SportsStore
    application are hardcoded to `USD`. At least if a product isn’t localized, the
    user knows where they stand and doesn’t have to try to figure out whether you
    just forgot to change the currency code or whether those prices are really in
    US dollars. (This is an issue that I see all the time living in the United Kingdom.)
  prefs: []
  type: TYPE_NORMAL
- en: You should localize your products. Your users should be able to do business
    or perform other operations in a way that makes sense to them. But you must take
    it seriously and allocate the time and effort required to do it properly. And
    if you can’t commit the resources, then the next best thing is to do nothing at
    all.
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 17.21* replaces the placeholder table with which we started the chapter
    with the new template.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.21: Using the product template in the index.handlebars file in the
    templates folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Use a browser to request `http://localhost:5000` and you will see the new product
    layout. Perform a search and you will see the matches highlighted in the product
    list, as shown in *Figure 17.7*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21959_17_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.7: Updating the product display'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the shopping cart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that the user can see and navigate the products for sale, the next step
    is to add a cart that allows them to make selections before checking out. For
    the SportsStore application, cart data will be handled using sessions, so that
    product selections are discarded when the session expires.
  prefs: []
  type: TYPE_NORMAL
- en: Adding configuration support for secrets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `SportsStore` application will use cookies to associate requests with a
    session, and those cookies will be signed to prevent them from being altered.
    The signing and validation process requires a secret key, known only to the application.
  prefs: []
  type: TYPE_NORMAL
- en: Secret keys and, more broadly, any secret information, can be difficult to manage.
    The basic rule is that secrets should not be hard-coded into the application because
    that makes them impossible to change without releasing a new version of the application
    into production.
  prefs: []
  type: TYPE_NORMAL
- en: But, aside from not hard-coding, the details of how secrets are managed depend
    on the application, the development organization, and the production platform.
    Most cloud hosting platforms, for example, provide a vault for storing secrets.
  prefs: []
  type: TYPE_NORMAL
- en: The vault is populated with secrets, which the application requests when they
    are needed, which means that the developers, testers, and operations staff can
    do their jobs without needing access to the secrets.
  prefs: []
  type: TYPE_NORMAL
- en: Vaults work well in large organizations where secrets are managed by security
    staff outside of the development organization, but they can be complicated to
    use and must be replicated in the development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Secrets can be stored in a configuration file, along with the rest of the application’s
    settings. This works, but it does mean that the secrets will be visible to the
    developers, and it requires that care is taken not to publish the secrets by committing
    the configuration file to a publicly accessible source code repository or to store
    private repositories on cloud storage that can be accessed outside the organization.
  prefs: []
  type: TYPE_NORMAL
- en: Secrets are often defined using environment variables. The idea is that environment
    variables are not persistent and so cannot be accidentally included in a source
    code commit. The reality is that setting up environment variables can be fiddly,
    especially when dealing with secrets that are long sequences of random characters,
    and so they are often defined using script files, which present the same problems
    as a regular configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: Every approach has its drawbacks, and there is no single best solution. My preferred
    approach is to isolate the provision of secrets from the rest of the application
    by extending the configuration system. This makes it easy to change the way secrets
    are stored, which can happen as the project evolves. Behind the scenes, I am going
    to use environment variables to store secrets, but this won’t be apparent to the
    rest of the application. The easiest and most consistent way to define environment
    variables is to use an *env file*, which is a simple text file containing key/value
    pairs. To add support for reading env files, run the command shown in *Listing
    17.22* in the `sportsstore` folder to install a new package.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tip**'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js does have built-in support for reading env files (with the `--env-file`
    argument, but the package offers more control over when the files are read and
    how the contents are processed).
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.22: Installing a package'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '*Table 17.1* describes this package for quick reference.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 17.1: The env file package'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '| This package reads `.env` files and presents their contents as environment
    variables. |'
  prefs: []
  type: TYPE_TB
- en: Add a file named `development.env` (a period followed by `env`) to the `sportstore`
    folder, with the content shown in *Listing 17.23*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.23: The contents of the development.env file in the sportsstore
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The env file contains a single entry, named `COOKIE_SECRET`. *Listing 17.24*
    uses the `dotenv` package to read the env file and adds a function for obtaining
    a secret.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.24: Supporting secrets in the index.ts file in the src/config folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The `config` function defined by the `dotenv` module is imported using the name
    `dotenvconfig` and is used to load an env file. To support env files for different
    parts of the process, the `getEnvirionment` method is used to formulate the name
    of the file that will be read, so that the `development.env` file is read during
    development and `production.env` will be read when the application is deployed.
    This means that a “real” environment variable is used to decide which file containing
    additional environment variables is loaded. This can be slightly confusing, but
    it works well in practice.
  prefs: []
  type: TYPE_NORMAL
- en: The `getSecret` function is exported for use by the rest of the application
    and allows secrets to be requested without needing to know how they are provisioned.
    There are no sensible fallback values to use for undefined secrets, so the `getSecret`
    function throws an error if it cannot provide a value.
  prefs: []
  type: TYPE_NORMAL
- en: Creating session middleware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next step is to enable sessions, which will allow product selections to
    be persisted between HTTP requests. Run the commands shown in *Listing 17.25*
    in the `sportsstore` folder to install packages to support sessions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.25: Installing the session packages'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The packages add support for processing cookies, managing sessions, and storing
    session data in a SQL database using the Sequelize ORM package. *Table 17.2* describes
    these packages for quick reference.
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 17.2: The cookie and session packages'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '| This package adds cookie-based sessions to Express. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '| This package stores session data using `Sequelize`. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '| This package contains type descriptions. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '| This package contains type descriptions. |'
  prefs: []
  type: TYPE_TB
- en: To enable sessions, add a file named `sessions.ts` to the `src` folder with
    the content shown in *Listing 17.26*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.26: The contents of the sessions.ts file in the src folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The `createSessions` function reads configuration data and uses it to configure
    `Sequelize` and set up session middleware using signed cookies. Add the configuration
    settings shown in *Listing 17.27* to define the values used to specify the database
    and session age.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**'
  prefs: []
  type: TYPE_NORMAL
- en: The sessions database is reset every time the application starts. The development
    tools restart the application when a file change is detected, which means that
    any code or configuration change will drop all of the stored sessions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.27: Adding settings to the server.config.json file in the sportsstore
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 17.28* enables the session middleware when the application starts.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.28: Enabling middleware in the server.ts file in the sportsstore
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Enabling sessions doesn’t change the way the application behaves but does set
    the foundation for the shopping cart, which is defined in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the cart data model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To describe a shopping cart, add a file named `cart_models.ts` to the `src/data`
    folder with the content shown in *Listing 17.29*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.29: The contents of the cart_models.ts file in the src/data folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The `Cart` interface represents a shopping cart, with each product selection
    represented by a `CartLine` object, identifying the selected product and the quantity
    the customer requires. Cart data will be stored in the session database as JSON
    data, which is why the `createCart`, `addLine`, and `removeLine` functions are
    not defined in a class since JSON data is deserialized into a plain JavaScript
    object.
  prefs: []
  type: TYPE_NORMAL
- en: Extending the catalog repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A new query is required to be able to display a summary of the user’s cart,
    as shown in *Listing 17.30*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.30: Adding a method to the catalog_repository.ts file in the src/data
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The `CartLine` objects that represent a selection contain just a product ID
    and a quantity. The `getProductDetails` method accepts an array of IDs and returns
    the corresponding `Product` objects from the catalog. *Listing 17.31* implements
    the new repository method using Sequelize.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.31: Implementing a method in the queries.ts file in the src/data/orm
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The implementation of the `getProductDetails` method uses the Sequelize `in`
    operation to select products whose `id` property is contained in the array received
    as the method parameter. The result is a `Promise` that resolves to produce an
    array of `ProductModel` objects.
  prefs: []
  type: TYPE_NORMAL
- en: I kept the `Cart` type simple because that’s the data that will be stored in
    the session, which will be read for most of the requests received from the user
    because the responses will contain a summary of the cart (which is created in
    the *Creating the cart summary* section). To fully populate the cart with product
    details, which will be required to show the cart to the user, add a file named
    `cart_helpers.ts` to the `src/data` folder with the content shown in *Listing
    17.32*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.32: The contents of the cart_helpers.ts file in the src/data folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The `getCartDetail` function accepts a `Cart` object and returns a `CartDetail`,
    which contains all the additional information required to provide a detailed view
    of the cart, including subtotals for each product selection, and an overall total.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**'
  prefs: []
  type: TYPE_NORMAL
- en: Some of the operations required to gather the detailed data are asynchronous,
    which means they cannot be performed by a template helper, which must be synchronous.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the HTTP routes and middleware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next step is to define the routes and handlers for the HTTP requests so
    that products can be added and removed from a cart, and the contents of a cart
    can be displayed. Add a file named `cart.ts` to the `src/routes` folder, with
    the content shown in *Listing 17.33*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.33: The contents of the cart.ts file in the src/routes folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The `declare` statement is used to define a `cart` property on the `SessionData`
    interface so that the TypeScript compiler will understand that the cart is part
    of the session data.
  prefs: []
  type: TYPE_NORMAL
- en: The `createCartMiddleware` function creates a middleware component that gets
    the cart from the session, creates a cart if there isn’t one, and sets the cart
    as local data for use by the template engine. The `createCartRoutes` function
    defines three routes. `HTTP` `POST` requests sent to the `/cart` URL will add
    a product to the user’s cart, and a `POST` request to the `/cart/remove` URL will
    remove a product.
  prefs: []
  type: TYPE_NORMAL
- en: (Most browsers allow HTML forms to send only `GET` and `POST` requests, which
    is why both adding and removing products are done with `POST` requests). Requests
    to these handlers can include a `returnUrl` value, to which the browser is redirected
    after the cart has been modified. The value is processed using the `encode` and
    `decode` functions provided by Node.js in the `querystring` module, which allows
    the value to be passed around safely until it is needed to perform a redirection.
  prefs: []
  type: TYPE_NORMAL
- en: The third route handles `GET` requests sent to the `/cart` URL and displays
    the contents of the cart. The data contained in the `Cart` object has to be supplemented
    with data obtained using the `getProductDetails` repository method. *Listing 17.34*
    enables the new middleware and routes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.34: Enabling routes in the index.ts file in the src/routes folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: These routes are enabled after those that handle the requests for the catalog
    and the middleware is configured before all of the routes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The cart display will be a table that shows the selected products and buttons
    that allow items to be removed from the cart. To define a template for the table
    rows, add a file named `cart_line.handlebars` to the `templates` folder with the
    content shown in *Listing 17.35*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.35: The contents of the cart_line.handlebars file in the templates
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'This template defines table cells that contain details for a single product:
    the quantity chosen, the product name, the price per unit, and the subtotal. The
    price and subtotal are formatted using the `currency` helper. The final table
    cell contains an HTML form that presents a **Remove** button that sends an HTTP
    POST request to the `/cart/remove` URL, which will remove a product from the cart.
    To define the template for the overall table, add a file named `cart.handlebars`
    to the `templates` folder with the content shown in *Listing 17.36*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.36: The contents of the cart.handlebars file in the templates folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'A useful feature provided by the Handlebars template engine is providing partials
    with parameters. In this case, the `cart_line` partial is provided with a `returnUrl`
    parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: This parameter can be referred to by name and is combined with the data that
    would normally be available to the partial. The `each` helper changes the context
    used to resolve template expressions, which makes it easy to generate content
    for each item in a sequence, and within the `each` block, expressions are evaluated
    against the current item. The `../` prefix allows a template expression to access
    the original context from which the `each` helper is obtaining its values, and
    is used to provide the partial template with the value for the `returnUrl` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: The final step is to add a button to the product template so the user can select
    a product, as shown in *Listing 17.37*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.37: Adding product selection in the product.handlebars file in the
    templates folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Use a browser to request `http://localhost:5000` and click the **Add To Cart**
    button for one of the products. The product will be added to the cart, and the
    cart details will be displayed, as shown in *Figure 17.8*. Clicking the **Remove**
    button will remove the product from the cart and clicking the **Continue Shopping**
    button will return to the catalog. (Clicking the **Checkout** button will produce
    an error until the checkout process is implemented.)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21959_17_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.8: Using the cart'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the cart summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To finish this chapter, I am going to add a summary of the cart to the catalog
    page, so the user can see how many products they have selected and easily navigate
    to the cart details. Run the command shown in *Listing 17.38* in the `sportsstore`
    folder to add a package to the project that will be used by the cart summary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.38: Adding a package'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: The Bootstrap Icons package is a set of icons that can be easily used in HTML
    content. *Table 17.3* describes this package for quick reference.
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 17.3: The Bootstrap Icons package'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '| This package contains a library of icons that can be applied to HTML content.
    |'
  prefs: []
  type: TYPE_TB
- en: The cart summary will display the total number of products in the cart, which
    will require a template helper. Add a file named `cart_helpers.ts` to the `src/helpers`
    folder with the content shown in *Listing 17.39*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.39: The contents of the cart_helpers.ts file in the src/helpers
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 17.40* adds the new helper to the template engine configuration.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.40: Adding helpers to the index.ts file in the src/helpers folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Add a file named `cart_summary.handlebars` to the `templates` folder, with the
    content shown in *Listing 17.41*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.41: The contents of the cart_summary.handlebars file in the templates
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The new template displays a small message that indicates the contents of the
    cart, along with a button that allows navigation to see the contents of the cart.
    The button is an anchor element whose content is an `i` element, which is how
    icons from the Bootstrap Icons package are displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: This element displays the cart icon, and you can look up the class required
    for each icon at [https://icons.getbootstrap.com](https://icons.getbootstrap.com).
    *Listing 17.42* integrates the new partial template into the main layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.42: Adding the summary to the main_layout.handlebars file in the
    templates folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: The cart summary will only be shown when there is a `show_cart` value, which
    will allow route handlers to opt into displaying the cart summary in the header,
    such as in *Listing 17.43*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.43: Enabling the cart summary in the catalog.ts file in the src/routes
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: The changes in *Listing 17.42* include a `link` element for the CSS stylesheet
    that contains the icons. *Listing 17.44* uses the Express `static` middleware
    to provide access to the contents of this package.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 17.44: Adding static content to the server.ts file in the src folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Use a browser to request `http://localhost:5000` and you will see the cart summary,
    which will reflect any earlier product selections. As the contents of the cart
    change, the summary will be updated to show the number of products that have been
    chosen, as shown in *Figure 17.9*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21959_17_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.9: Displaying a cart summary'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, I continued working on the `SportsStore` project to complete
    the product catalog and add a shopping cart:'
  prefs: []
  type: TYPE_NORMAL
- en: Requests for products can include query string parameters that paginate data,
    specify page size, and filter the product data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The query string values are preserved in the URLs contained in the HTML responses
    so that the user has a consistent experience.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The shopping cart uses sessions to store product selections. The session data
    is stored in a database and sessions are identified using HTTP cookies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The session cookies are signed to prevent tampering, and the signing secret
    is stored in an env file, which is read by the configuration system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A summary of the shopping cart is displayed as part of the catalog, styled using
    an icon package.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I will continue working on `SportsStore` in the next chapter, adding support
    for accepting and validating orders.
  prefs: []
  type: TYPE_NORMAL
