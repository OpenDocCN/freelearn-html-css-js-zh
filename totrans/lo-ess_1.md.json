["```js\nvar collection = [\n    'Lois',\n    'Kathryn',\n    'Craig',\n    'Ryan'\n];\n\n_.forEach(collection, function(name) {\n    console.log(name);\n});\n// → \n// Lois\n// Kathryn\n// Craig\n// Ryan\n```", "```js\nvar collection = [\n    'Timothy',\n    'Kelly',\n    'Julia',\n    'Leon'\n];\n\n_.forEach(collection, function(name, index) {\n    if (name === 'Kelly') {\n        console.log('Kelly Index: ' + index);\n        return false;\n    }\n});\n// → Kelly Index: 1\n```", "```js\nvar collection = [\n    'Carl',\n    'Lisa',\n    'Raymond',\n    'Rita'\n];\n\nvar result = [];\n\n_.forEachRight(collection, function(name) {\n    result.push(name);\n});\n// →\n// [\n//   \"Rita\",\n//   \"Raymond\",\n//   \"Lisa\",\n//   \"Carl\"\n// ]\n```", "```js\n_.sortBy('cba').join('');\n```", "```js\nvar collection = [\n    { name: 'Moe' },\n    { name: 'Seymour' },\n    { name: 'Harold' }, \n    { name: 'Willie' }\n];\n\n_.sortBy(collection, function(item) {\n    return item.name;\n});\n```", "```js\n_.sortBy(collection, 'name');\n```", "```js\nvar collection = [\n    { name: 'Clancy', age: 43 },\n    { name: 'Edna', age: 32 },\n    { name: 'Lisa', age: 10 },\n    { name: 'Philip', age: 10 }\n];\n\n_.sortBy(collection, [ 'age', 'name' ]);\n// →\n// [\n//   { name: \"Lisa\", age: 10 },\n//   { name: \"Philip\", age: 10 },\n//   { name: \"Edna\", age: 32 },\n//   { name: \"Clancy\", age: 43 }\n// ]\n```", "```js\nvar collection = [ \n    'Carl',\n    'Gary',\n    'Luigi',\n    'Otto'\n];\n\nvar name = 'Luke';\n\ncollection.splice(_.sortedIndex(collection, name), 0, name);\n// → \n// [\n//   \"Carl\",\n//   \"Gary\",\n//   \"Luigi\",\n//   \"Luke\",\n//   \"Otto\"\n// ]\n```", "```js\nvar collection = [ \n    { name: 'Moe', age: 47, gender: 'm' },\n    { name: 'Sarah', age: 32, gender: 'f' },\n    { name: 'Melissa', age: 32, gender: 'f' },\n    { name: 'Dave', age: 32, gender: 'm' }\n];\n\n_.where(collection, { age: 32, gender: 'f' });\n// →\n// [\n//   { name: \"Sarah\", age: 32, gender: \"f\" },\n//   { name: \"Melissa\", age: 32, gender: \"f\" }\n// ]\n```", "```js\nvar collection = [ \n    { name: 'Sean', enabled: false },\n    { name: 'Joel', enabled: true },\n    { name: 'Sue', enabled: false },\n    { name: 'Jackie', enabled: true }\n];\n\n_.filter(collection, 'enabled');\n// →\n// [\n//   { name: \"Joel\", enabled: true },\n//   { name: \"Jackie\", enabled: true }\n// ]\n```", "```js\nvar collection = [ \n    { type: 'shirt', size: 'L' },\n    { type: 'pants', size: 'S' },\n    { type: 'shirt', size: 'XL' },\n    { type: 'pants', size: 'M' }  \n];\n\n_.filter(collection, function(item) {\n    return item.size === 'L' || item.size === 'M';\n});\n// →\n// [\n//   { type: \"shirt\", size: \"L\" },\n//   { type: \"pants\", size: \"M\" }\n// ]\n```", "```js\nvar collection = [\n    { name: 'Ryan', enabled: true },\n    { name: 'Megan', enabled: false },\n    { name: 'Trevor', enabled: false },\n    { name: 'Patricia', enabled: true }\n];\n\n_.reject(collection, { enabled: false });\n// →\n// [\n//   { name: \"Ryan\", enabled: true },\n//   { name: \"Patricia\", enabled: true }\n// ]\n```", "```js\nvar collection = [ \n    { name: 'Derek', age: 37 },\n    { name: 'Caroline', age: 35 },\n    { name: 'Malcolm', age: 37 },\n    { name: 'Hazel', age: 62 } \n];\n\n_.find(collection, { age:37 });\n// → { name: \"Derek\", age: 37 }\n```", "```js\n_.findLast(collection, { age:37 });\n// → { name: \"Malcolm\", age: 37 }\n```", "```js\nvar array = [ \n    'Steve',\n    'Michelle',\n    'Rebecca',\n    'Alan'\n];\n\n_.take(array, 2);\n// → [ \"Steve\", \"Michelle\" ]\n\n_.take('lodash', 2).join('');\n// → \"lo\"\n```", "```js\n_.takeRight(array, 2);\n_.takeRight(string, 4).join('');\n```", "```js\nfunction process(chunks, index) {\n    var chunk = chunks[index];\n    if (_.isUndefined(chunk)) {\n        return;\n    };  \n    console.log('doing expensive work ' + _.last(chunk));\n    _.defer(_.partial(process, chunks, ++index));\n}\n\nvar collection = _.range(10000),\n    chunks = _.chunk(collection, 50);\n\nprocess(chunks, 0);\n// → \n// doing expensive work 49\n// doing expensive work 99\n// doing expensive work 149\n```", "```js\nvar collection = _.range(10),\n    size = Math.ceil(0.25 * collection.length);\n_.chunk(collection, size);\n// → \n// [\n//   [ 0, 1, 2 ],\n//   [ 3, 4, 5 ],\n//   [ 6, 7, 8 ],\n//   [ 9 ]\n// ]\n```", "```js\nvar collection = [ \n    'Walter',\n    'Brenda',\n    'Arthur',\n    'Walter'\n];\n\n_.uniq(collection);\n// → [ \"Walter\", \"Brenda\", \"Arthur\" ]\n```", "```js\nvar collection = [ \n    { first: 'Julie', last: 'Sanders' },\n    { first: 'Craig', last: 'Scott' },\n    { first: 'Catherine', last: 'Stewart' },\n    { first: 'Julie', last: 'Sanders' },\n    { first: 'Craig', last: 'Scott' },\n    { first: 'Janet', last: 'Jenkins' }\n];\n\n_.uniq(collection, function(item) {\n    return item.first + item.last;\n});\n// →\n// [\n//   { first: \"Julie\", last: \"Sanders\" },\n//   { first: \"Craig\", last: \"Scott\" },\n//   { first: \"Catherine\", last: \"Stewart\" },\n//   { first: \"Janet\", last: \"Jenkins\" }\n// ]\n```", "```js\nvar collection = [ \n    { name: 'Lori', size: 'S' },\n    { name: 'Johnny', size: 'M' },\n    { name: 'Theresa', size: 'S' },\n    { name: 'Christine', size: 'S' }\n];\n\n_.groupBy(collection, 'size');\n// →\n// {\n//   S: [\n//     { name: \"Lori\", size: \"S\" },\n//     { name: \"Theresa\", size: \"S\" },\n//     { name: \"Christine\", size: \"S\" }\n//   ],\n//   M: [\n//     { name: \"Johnny\", size: \"M\" }\n//   ]\n// }\n```", "```js\nvar collection = [ \n    { name: 'Andrea', age: 20 },    \n    { name: 'Larry', age: 50 },  \n    { name: 'Beverly', age: 67 },\n    { name: 'Diana', age: 39 }\n];\n\n_.groupBy(collection, function(item) {\n    return item.age > 65 ? 'retired' : 'working';\n});\n// →\n// {\n//   working: [\n//     { name: \"Andrea\", age: 20 },\n//     { name: \"Larry\", age: 50 },\n//     { name: \"Diana\", age: 39 }\n//   ],\n//   retired: [\n//     { name: \"Beverly\", age: 67 }\n//   ]\n// }\n```", "```js\nvar collection = [ \n    { name: 'Douglas', age: 52, experience: 5 }, \n    { name: 'Karen', age: 36, experience: 22 },\n    { name: 'Mark', age: 28, experience: 6 }, \n    { name: 'Richard', : age: 30, experience: 16 }\n];\n\n_.min(collection, 'age'),\n// → { name: \"Mark\", age: 28, experience: 6 }\n\n_.max(collection, function(item) {\n    return item.age + item.experience;\n});\n// → { name: \"Karen\", age: 36, experience: 22 }\n```", "```js\nvar collection = [ \n    { name: 'Gloria' },\n    { name: 'Janice' },\n    { name: 'Kathryn' },\n    { name: 'Roger' }\n];  \n\nvar first = _.first(collection);\n_.size(collection); // → 4\n_.size(first); // → 1\n_.size(first.name); // → 6\n```", "```js\nvar collection = [ \n    { employer: 'Lodash', employees: [\n        { name: 'Barbara' },\n        { name: 'Patrick' },\n        { name: 'Eugene' }\n    ]}, \n    { employer: 'Backbone', employees: [\n        { name: 'Patricia' },\n        { name: 'Lillian' },\n        { name: 'Jeremy' }\n    ]}, \n    { employer: 'Underscore', employees: [\n        { name: 'Timothy' },\n        { name: 'Bruce' },\n        { name: 'Fred' }\n    ]}  \n];  \nvar employees = _.flatten(_.pluck(collection, 'employees'));\n\n_.filter(employees, function(employee) {\n    return (/^[bp]/i).test(employee.name);\n});\n// → \n// [\n//   { name: \"Barbara\" },\n//   { name: \"Patrick\" },\n//   { name: \"Patricia\" },\n//   { name: \"Bruce\" }\n// ]\n```", "```js\nvar collection = [ \n    { name: 'Sandra' },\n    0,  \n    { name: 'Brandon' },\n    null,\n    { name: 'Denise' },\n    undefined,\n    { name: 'Jack' }\n    ];\nvar letters = [ 's', 'd' ],\n    compact = _.compact(collection),\n    result = [];\n\n_.each(letters, function(letter) {\n    result = result.concat(\n        _.filter(compact, function(item) {\n            return _.startsWith(item.name.toLowerCase(), letter);\n        })\n    );  \n});\n// → \n// [\n//   { name: \"Sandra\" },\n//   { name: \"Denise\" }\n// ]\n```", "```js\nvar collection = [ \n    { name: 'Sandra' },\n    {}, \n    { name: 'Brandon' },\n    true,\n    { name: 'Denise' },\n    1,  \n    { name: 'Jack' }\n    ];\nvar letters = [ 's', 'd' ],\n    names = _.compact(_.pluck(collection, 'name')),\n    result = [];\n\n_.each(letters, function(letter) {\n    result = result.concat(\n        _.filter(names, function(name) {\n            return _.startsWith(name.toLowerCase(),\n                                letter);\n        })  \n    );  \n});\n```", "```js\nvar collection = [ \n    { name: 'Jonathan' },\n    { first: 'Janet' },\n    { name: 'Kevin' },\n    { name: 'Ruby' }\n];\n\nif (!_.every(collection, 'name')) {\n    return 'Missing name property';\n}\n// → \"Missing name property\"\n```", "```js\nvar collection = [ \n    { name: 'Sean' },\n    { name: 'Aaron' },\n    { name: 'Jason' },\n    { name: 'Lisa' }\n];\nif (_.some(collection, 'name')) {\n    // Perform expensive processing...\n}\n```", "```js\nvar css = [ \n    'Philip',\n    'Donald',\n    'Mark'\n];  \nvar sass = [ \n    'Gary',\n    'Michelle',\n    'Philip'\n];  \nvar less = [ \n    'Wayne',\n    'Ruth',\n    'Michelle'\n];\n\n_.union(css, sass, less);\n// →\n// [\n//   \"Philip\",\n//   \"Donald\",\n//   \"Mark\",\n//   \"Gary\",\n//   \"Michelle\",\n//   \"Wayne\",\n//   \"Ruth\"\n// ]\n```", "```js\nvar css = [ \n    'Rachel',\n    'Denise',\n    'Ernest'\n];  \n\nvar sass = [ \n    'Lisa',\n    'Ernest',\n    'Rachel'\n];  \n\nvar less = [ \n    'Ernest',\n    'Rachel',\n    'William'\n];\n\n_.intersection(css, sass, less);\n// → [ \"Rachel\", \"Ernest\" ]\n```", "```js\nvar sass = [ \n    'Lisa',\n    'Ernest',\n    'Rachel'\n];\nvar less = [ \n    'Ernest',\n    'Rachel',\n    'William'\n];\n\nreturn _.xor(sass, less);\n// → [ \"Lisa\", \"William\" ]\n```"]