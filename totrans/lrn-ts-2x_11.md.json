["```js\nconst { CheckerPlugin } = require(\"awesome-typescript-loader\"); \nconst webpack = require(\"webpack\"); \nconst ExtractTextPlugin = require(\"extract-text-webpack-plugin\"); \nconst CopyWebpackPlugin = require(\"copy-webpack-plugin\"); \n\nconst corePlugins = [ \n    new CheckerPlugin(), \n    new webpack.DefinePlugin({ \n        \"process.env.NODE_ENV\": JSON.stringify(process.env.NODE_ENV || \"development\") \n    }), \n    new ExtractTextPlugin({ \n        filename: \"main.css\", \n        allChunks: true \n    }), \n    new CopyWebpackPlugin([ \n        { from: \"./web/frontend/index.html\", to: \"index.html\" } \n    ]) \n]; \n\nconst devPlugins = []; \n\nconst prodPlugins = [ \n    new webpack.optimize.UglifyJsPlugin({ output: { comments: false } }) \n]; \n\nconst isProduction = process.env.NODE_ENV === \"production\"; \nconst plugins = isProduction ? corePlugins.concat(prodPlugins) : corePlugins.concat(devPlugins); \n\nmodule.exports = { \n    entry: \"./web/frontend/index.tsx\", \n    devServer: { \n        inline: true \n    }, \n    output: { \n        filename: \"bundle.js\", \n        path: __dirname + \"/public\", \n        publicPath: \"/public\" \n    }, \n    devtool: isProduction ? \"source-map\" : \"eval-source-map\", \n    resolve: { \n        extensions: [\".webpack.js\", \".ts\", \".tsx\", \".js\"] \n    }, \n    module: { \n        rules: [ \n            { \n                enforce: \"pre\", \n                test: /.js$/, \n                loader: \"source-map-loader\", \n                exclude: [/node_modules/] \n            }, \n            { \n                test: /.(ts|tsx)$/, \n                loader: \"awesome-typescript-loader\", \n                exclude: [/node_modules/] \n            }, \n            { \n                test: /.scss$/, \n                use: ExtractTextPlugin.extract({ \n                    fallback: \"style-loader\", \n                    use: [\"css-loader\", \"resolve-url-loader\", \"sass-loader\"] \n                }) \n            } \n        ] \n    }, \n    plugins: plugins \n}; \n```", "```js\n\"dependencies\": {\n    \"body-parser\": \"1.18.2\",\n    \"bootstrap\": \"4.0.0\",\n    \"express\": \"4.16.2\",\n    \"inversify\": \"4.11.1\",\n    \"inversify-binding-decorators\": \"3.2.0\",\n    \"inversify-express-utils\": \"5.2.1\",\n    \"inversify-inject-decorators\": \"3.1.0\",\n    \"mobx\": \"4.1.0\",\n    \"mobx-react\": \"5.0.0\",\n    \"pg\": \"7.4.1\",\n    \"react\": \"16.2.0\",\n    \"react-dom\": \"16.2.0\",\n    \"react-router-dom\": \"4.2.2\",\n    \"reflect-metadata\": \"0.1.12\",\n    \"typeorm\": \"0.1.14\"\n  },\n  \"devDependencies\": {\n    \"@types/body-parser\": \"1.16.8\",\n    \"@types/express\": \"4.11.1\",\n    \"@types/node\": \"9.4.6\",\n    \"@types/react\": \"16.0.40\",\n    \"@types/react-dom\": \"16.0.4\",\n    \"@types/react-router-dom\": \"4.2.5\",\n    \"awesome-typescript-loader\": \"3.4.1\",\n    \"copy-webpack-plugin\": \"4.5.1\",\n    \"css-loader\": \"0.28.8\",\n    \"extract-text-webpack-plugin\": \"3.0.2\",\n    \"node-sass\": \"4.7.2\",\n    \"resolve-url-loader\": \"2.2.1\",\n    \"sass-loader\": \"6.0.6\",\n    \"style-loader\": \"0.19.1\",\n    \"ts-node\": \"5.0.1\",\n    \"tslint\": \"5.9.1\",\n    \"typescript\": \"2.8.1\",\n    \"webpack\": \"3.10.0\",\n    \"webpack-dev-server\": \"2.11.0\"\n  } \n```", "```js\n\"scripts\": { \n    \"start\": \"ts-node ./web/backend/index.ts\", \n    \"build\": \"webpack\", \n    \"lint\": \"tslint --project tsconfig.json -c tslint.json ./web/**/*.ts ./web/**/*.tsx\" \n  }, \n```", "```js\n    npm run start\n    npm run build\n    npm run lint\n```", "```js\nimport \"reflect-metadata\"; \nimport * as express from \"express\"; \nimport { Container } from \"inversify\"; \nimport * as bodyParser from \"body-parser\"; \nimport * as path from \"path\"; \nimport { InversifyExpressServer } from \"inversify-express-utils\"; \nimport { bindings } from \"./inversify.config\"; \n\n(async () => { \n\n    try { \n\n        const port = 3000; \n        const container = new Container(); \n        await container.loadAsync(bindings); \n        const app = new InversifyExpressServer(container); \n\n        app.setConfig((a) => { \n            a.use(bodyParser.json()); \n            a.use(bodyParser.urlencoded({ extended: true })); \n            const appPath = path.join(__dirname, \"../../public\"); \n            a.use(\"/\", express.static(appPath)); \n        }); \n\n        const server = app.build(); \n\n        server.listen(port, () => { \n            console.log(`Server running at http://127.0.0.1:${port}/`); // tslint:disable-line \n        }); \n\n    } catch (e) { \n        console.log(e); // tslint:disable-line \n    } \n\n})(); \n```", "```js\n\"jsx\": \"react\" \n```", "```js\nimport \"reflect-metadata\"; \nimport * as React from \"react\"; \nimport * as ReacDOM from \"react-dom\"; \nimport \"../../node_modules/bootstrap/scss/bootstrap.scss\"; \nimport { Layout } from \"./config/layout\"; \n\nconst selector = \"#root\"; \nconst $element = document.querySelector(selector); \n\nif (!$element) { \n    throw new Error(`Node ${selector} not found!`); \n} else { \n    ReacDOM.render( \n        <Layout/>, \n        $element \n    ); \n} \n```", "```js\nimport { Route, Switch, BrowserRouter } from \"react-router-dom\"; \nimport * as React from \"react\"; \nimport { Header } from \"../components/header_component\"; \nimport { HomePage } from \"../pages/home_page\"; \nimport { MoviePage } from \"../pages/movies_page\"; \nimport { ActorPage } from \"../pages/actors_page\"; \nimport \"../stores/movie_store\"; \nimport \"../stores/actor_store\"; \n\nexport const Layout = () => ( \n    <BrowserRouter> \n        <div> \n            <Header \n                bg=\"primary\" \n                title=\"TsMovies\" \n                rootPath=\"/\" \n                links={[ \n                    { path: \"/movies\", text: \"Movies\"}, \n                    { path: \"/actors\", text: \"Actors\"} \n                ]} \n            /> \n            <main style={{ paddingTop: \"60px\" }}> \n                <Switch> \n                    <Route exact path=\"/\" component={HomePage}/> \n                    <Route path=\"/movies\" component={MoviePage}/> \n                    <Route path=\"/actors\" component={ActorPage}/> \n                </Switch> \n            </main> \n        </div> \n    </BrowserRouter> \n); \n```", "```js\n<Link className=\"btn btn-primary\" to={props.linkPath} > \n    {props.linkText} \n</Link> \n```", "```js\nimport * as React from \"react\"; \n\nexport class Container extends React.Component { \n    public render() { \n        return ( \n            <div className=\"container\"> \n                {this.props.children} \n            </div> \n        ); \n    } \n} \n\nexport class Row extends React.Component { \n    public render() { \n        return ( \n            <div className=\"row\"> \n                {this.props.children} \n            </div> \n        ); \n    } \n} \n\ntype ColumnWidth = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12; \ntype DeviceSize = \"s\" | \"m\" | \"l\" | \"xl\"; \n\ninterface ColumnProps { \n    width: ColumnWidth; \n    size?: DeviceSize; \n    style?: React.CSSProperties; \n} \n\nexport class Column extends React.Component<ColumnProps> { \n    public render() { \n        return ( \n            <div className={this._getClass()} style={this.props.style ? this.props.style : {}}> \n                {this.props.children} \n            </div> \n        ); \n    } \n    private _getClass() { \n        if (this.props.size !== undefined) { \n            return `col-${this.props.size}-${this.props.width}`; \n        } else { \n            return `col-${this.props.width}`; \n        } \n    } \n} \n```", "```js\nimport * as React from \"react\"; \nimport { Card } from \"../components/card_component\"; \nimport { Container, Row, Column } from \"../components/grid_component\"; \n\nexport const HomePage = () => ( \n    <Container> \n        <Row> \n            <Column width={6}> \n                <Card \n                    title=\"Movies\" \n                    description=\"Explore our database of movies\" \n                    linkPath=\"/movies\" \n                    linkText=\"Movies\" \n                    img={null} \n                /> \n            </Column> \n            <Column width={6}> \n                <Card \n                    title=\"Actors\" \n                    description=\"Explore our actors of movies\" \n                    linkPath=\"/actors\" \n                    linkText=\"Actors\" \n                    img={null} \n                /> \n            </Column> \n        </Row> \n    </Container> \n); \n```", "```js\nimport * as React from \"react\"; \nimport { Button } from \"./button_component\"; \n\ninterface CounterProps { \n    initialValue: number; \n} \n\ninterface CounterState { \n    value: number; \n} \n\nexport class Component extends React.Component<CounterProps, CounterState> { \n    public constructor(props: CounterProps) { \n        super(props); \n        this.state = { value: this.props.initialValue }; \n    } \n    public render() { \n        return ( \n            <div> \n                The value is: {this.state.value} \n                <Button onClick={() => this._increment()}> \n                    Increment \n                </Button> \n            </div> \n        ); \n    } \n    private _increment() { \n        this.setState({ value: this.state.value + 1 }) \n    } \n} \n```", "```js\n<Counter initialValue={1} /> \n```", "```js\nimport { Link } from \"react-router-dom\"; \nimport * as React from \"react\"; \n\ntype BgColor = \"primary\" | \"secondary\" | \"success\" | \n               \"danger\" | \"warning\" | \"info\" | \"light\" | \n               \"dark\" | \"white\"; \n\ninterface HeaderProps { \n    bg: BgColor; \n    title: string; \n    rootPath: string; \n    links: { path: string; text: string }[]; \n} \n\nexport const Header = (props: HeaderProps) => ( \n    <nav className={`navbar navbar-expand-lg navbar-light bg-${props.bg}`}> \n        <Link className=\"navbar-brand\" to={props.rootPath}> \n            {props.title} \n        </Link> \n        <ul className=\"navbar-nav\"> \n            { \n                props.links.map((link, linkIndex) => ( \n                    <Link \n                        className=\"navbar-brand\" \n                        to={link.path} \n                        key={linkIndex} \n                    > \n                        {link.text} \n                    </Link> \n                )) \n            } \n        </ul> \n    </nav> \n); \n```", "```js\nclass MoviePage extends React.Component { \n    // ... \n    public componentWillMount() { \n        this.movieStore.getAll(); \n    } \n    public render() { \n        // ... \n```", "```js\nimport { ActorInterface } from \"../../universal/entities/actor\"; \nimport * as mobx from \"mobx\"; \nimport { provide } from \"../config/ioc\"; \nimport { TYPE } from \"../contants/types\"; \nimport * as interfaces from \"../interfaces\"; \n\nconst { observable, action, runInAction, configure } = mobx; \nconfigure({ enforceActions: true }); \n\n@provide(TYPE.ActorStore) \nexport class ActorStore implements interfaces.ActorStore { \n```", "```js\n    // Contains the actors that have been already loaded from the server \n    @observable public actors: ActorInterface[] = []; \n\n    // Used to represent the status of the HTTP GET calls \n    @observable public loadStatus: interfaces.Status = \"pending\"; \n\n    // Used to represent the status of the HTTP DELETE call \n    @observable public deleteStatus: interfaces.Status = \"idle\"; \n\n    // Used to represent the status of the HTTP POST and HTTP PUT calls \n    @observable public saveStatus: interfaces.Status = \"idle\"; \n\n    // Used to display the confirmation dialog before deleting an actor \n    // null hides the modal and number display the modal \n    @observable public deleteActorId: null | number = null; \n\n    // Used to hold the values of the actor editor or null \n    // when nothing is being edited \n    @observable public editorValue: null | Partial<ActorInterface> = null; \n```", "```js\n    @action \n    public focusEditor() { \n        runInAction(() => { \n            this.editorValue = {}; \n        }); \n    } \n\n    @action \n    public focusOutEditor() { \n        runInAction(() => { \n            this.editorValue = null; \n        }); \n    } \n\n    @action \n    public focusDeleteDialog(id: number) { \n        runInAction(() => { \n            this.deleteActorId = id; \n        }); \n    } \n\n    @action \n    public focusOutDeleteDialog() { \n        runInAction(() => { \n            this.deleteActorId = null; \n        }); \n    } \n\n    @action \n    public edit<T extends ActorInterface, K extends keyof T>( \n        key: K, val: T[K] \n    ) { \n        runInAction(() => { \n            const actor = {...(this.editorValue || {}), ...{[key]: val}}; \n            this.editorValue = actor; \n        }); \n    } \n```", "```js\n    @action \n    public async getAll() { \n        try { \n            const response = await fetch( \n                \"/api/v1/actors/\", \n                { method: \"GET\" } \n            ); \n            const actors: ActorInterface[] = await response.json(); \n            // We use setTimeout to simulate a slow request \n            // this should allow us to see the loading component \n            setTimeout( \n                () => { \n                    runInAction(() => { \n                        this.loadStatus = \"done\"; \n                        this.actors = actors; \n                    }); \n                }, \n                1500 \n            ); \n        } catch (error) { \n            runInAction(() => { \n                this.loadStatus = \"error\"; \n            }); \n        } \n    } \n```", "```js\n    @action \n    public async create(actor: Partial<ActorInterface>) { \n        try { \n            const response = await fetch( \n                \"/api/v1/actors/\", \n                { \n                    body: JSON.stringify(actor), \n                    headers: { \n                        \"Accept\": \"application/json, text/plain, */*\", \n                        \"Content-Type\": \"application/json\" \n                    }, \n                    method: \"POST\" \n                } \n            ); \n            const newActor: ActorInterface = await response.json(); \n            runInAction(() => { \n                this.loadStatus = \"done\"; \n                this.actors.push(newActor); \n                this.editorValue = null; \n            }); \n        } catch (error) { \n            runInAction(() => { \n                this.loadStatus = \"error\"; \n            }); \n        } \n    } \n```", "```js\n    @action \n    public async delete(id: number) { \n        try { \n            const response = await fetch( \n                `/api/v1/actors/${id}`, \n                { method: \"DELETE\" } \n            ); \n            await response.json(); \n            runInAction(() => { \n                this.deleteStatus = \"done\"; \n                this.actors = this.actors.filter((m) => m.id !== id); \n                this.deleteActorId = null; \n            }); \n        } catch (error) { \n            runInAction(() => { \n                this.deleteStatus = \"error\"; \n            }); \n        } \n    } \n\n} \n```", "```js\nconfigure({ enforceActions: true }); \n```", "```js\nimport * as React from \"react\"; \nimport { observer } from \"mobx-react\"; \nimport { MovieInterface } from \"../../universal/entities/movie\"; \nimport { Container, Row, Column } from \"../components/grid_component\"; \nimport { ListGroup } from \"../components/list_group_component\"; \nimport { Modal } from \"../components/modal_component\"; \nimport { TextField } from \"../components/textfield_component\"; \nimport { Button } from \"../components/button_component\"; \nimport { lazyInject } from \"../config/ioc\"; \nimport { TYPE } from \"../contants/types\"; \nimport * as interfaces from \"../interfaces\"; \n\nfunction isValidNewMovie(o: any) { \n    if ( \n        o === null || \n        o === undefined || \n        // new movies don't have ID \n        o.id !== undefined || \n        typeof o.title !== \"string\" || \n        isNaN(o.year) \n    ) { \n        return false; \n    } \n    return true; \n} \n```", "```js\n@observer \nexport class MoviePage extends React.Component { \n```", "```js\n    @lazyInject(TYPE.MovieStore) public movieStore!: interfaces.MovieStore; \n```", "```js\n    public componentWillMount() { \n        this.movieStore.getAll(); \n    } \n```", "```js\n    public render() { \n        const error = this.movieStore.loadStatus === \"error\" ? new Error(\"Movies could not be loaded!\") : null; \n        const movies = this.movieStore.loadStatus === \"pending\" ? null : this.movieStore.movies; \n        return ( \n            <Container> \n                <Row> \n                    <Column width={12} style={{ textAlign: \"right\", marginBottom: \"10px\" }}> \n                        <Button \n                            onClick={() => { \n                                this.movieStore.focusEditor(); \n                            }} \n                        > \n                            Add Movie \n                        </Button> \n                    </Column> \n                </Row> \n                <Row> \n                    <Column width={12}> \n                        <ListGroup \n                            error={error} \n                            items={movies} \n                            itemComponent={(movie: MovieInterface) => ( \n                                <Row> \n                                    <Column width={8}> \n                                        <h5>{movie.title}</h5> \n                                        <p>{movie.year}</p> \n                                    </Column> \n                                    <Column width={4} style={{ textAlign: \"right\" }}> \n                                        <Button \n                                            kind=\"danger\" \n                                            onClick={() => { \n                                                this.movieStore.focusDeleteDialog(movie.id); \n                                            }} \n                                        > \n                                            Delete \n                                        </Button> \n                                    </Column> \n                                </Row> \n                            )} \n                        /> \n                    </Column> \n                </Row> \n```", "```js\n                <Modal \n                    title=\"Movie Editor\" \n                    isVisible={this.movieStore.editorValue !== null} \n                    onAcceptLabel=\"Save\" \n                    onAccept={() => { \n                        if (isValidNewMovie(this.movieStore.editorValue)) { \n                            const movie: any = this.movieStore.editorValue; \n                            this.movieStore.create(movie); \n                        } \n                    }} \n                    onCancelLabel=\"Cancel\" \n                    onCancel={() => { \n                        this.movieStore.focusOutEditor(); \n                    }} \n                    error={this.movieStore.saveStatus === \"error\" ? new Error(\"Something went wrong\") : undefined} \n                > \n\n                    <form> \n                        <TextField \n                            id=\"movie_title\" \n                            value={this.movieStore.editorValue ? this.movieStore.editorValue.title : \"\"} \n                            title=\"Title\" \n                            placeholder=\"Title\" \n                            isValid={(val) => val !== undefined && val !== \"\"} \n                            onChange={(val) => { \n                                this.movieStore.edit(\"title\", val); \n                            }} \n                        /> \n                        <TextField \n                            id=\"movie_year\" \n                            value={this.movieStore.editorValue ? this.movieStore.editorValue.year : 2018} \n                            title=\"Year\" \n                            placeholder=\"Year\" \n                            isValid={(val) => !isNaN(val as any)} \n                            onChange={(val) => { \n                                const n = parseInt(val); \n                                if (!isNaN(n)) { \n                                    this.movieStore.edit(\"year\", n); \n                                } \n                            }} \n                        /> \n                    </form> \n                </Modal> \n```", "```js\n                <Modal \n                    title=\"Are you sure?\" \n                    isVisible={this.movieStore.deleteMovieId !== null} \n                    onAcceptLabel=\"Delete\" \n                    onAccept={() => { \n                        if (this.movieStore.deleteMovieId) { \n                            this.movieStore.delete(this.movieStore.deleteMovieId); \n                        } \n                    }} \n                    onCancelLabel=\"Cancel\" \n                    onCancel={() => { \n                        this.movieStore.focusOutDeleteDialog(); \n                    }} \n                    error={this.movieStore.deleteStatus === \"error\" ? new Error(\"Something went wrong\") : undefined} \n                > \n                    The movie will be deleted permanently! \n                </Modal> \n            </Container> \n        ); \n    } \n} \n```", "```js\n@provide(TYPE.ActorStore) \nexport class ActorStore implements interfaces.ActorStore { \n```", "```js\ncontainer.bind<ActorStore>(TYPE.ActorStore).to(ActorStore); \n```", "```js\nimport { Container } from \"inversify\"; \nimport { makeProvideDecorator } from \"inversify-binding-decorators\"; \n\nconst container = new Container(); \nconst provide = makeProvideDecorator(container); \n\nexport { provide }; \n```", "```js\nimport \"../stores/movie_store\"; \nimport \"../stores/actor_store\"; \n```", "```js\n@lazyInject(TYPE.MovieStore) public movieStore!: interfaces.MovieStore; \n```", "```js\nimport { Container } from \"inversify\"; \nimport getDecorators from \"inversify-inject-decorators\"; \n\nconst container = new Container(); \nconst { lazyInject } = getDecorators(container); \n\nexport { lazyInject }; \n```"]