- en: Welcoming Polycloud
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 欢迎多云
- en: 'In this chapter, the following recipes will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将介绍以下食谱：
- en: Creating a service in Google Cloud Functions
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Google Cloud Functions中创建服务
- en: Creating a service in Azure Functions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Azure Functions中创建服务
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Vendor lock-in is a common concern with serverless, cloud-native development.
    However, this concern is a relic of the monolithic thinking that stems from monolithic
    systems that must be changed in whole from one vendor to another. Autonomous services,
    on the other hand, can be changed one by one. Nevertheless, the elusive promise
    of *write once; run anywhere* is still the battle cry of the *multi-cloud* approach.
    Yet, this approach ignores the fact that the part that is written once is only
    the tip of a very big iceberg, and what lies below the waterline embodies the
    most risk and does not translate directly between cloud providers. This inevitably
    leads to the use of a least-common denominator set of tools and techniques that
    can more easily be lifted and shifted from one provider to another.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 供应商锁定是服务器无服务器、云原生开发中一个常见的担忧。然而，这种担忧是源于必须从一家供应商整体改变到另一家供应商的单一思维模式的遗物。另一方面，自主服务可以逐个改变。尽管如此，*一次编写；到处运行*的诱人承诺仍然是*多云*方法的战斗口号。然而，这种方法忽略了只编写一次的部分只是一个非常大的冰山的一角，而水下部分则蕴含着最大的风险，并且不能直接在云服务提供商之间转换。这不可避免地导致使用一套最少共同分母的工具和技术，这些工具和技术可以更容易地从一家提供商转移到另一家提供商。
- en: We chose instead to embrace the *disposable architecture* of fully managed,
    value-added cloud services. This *serverless-first* approach empowers self-sufficient,
    full-stack teams to be lean and experiment with new ideas, fail-fast, learn, and
    adjust course quickly. This leads naturally to a *polyglot-cloud* or *polycloud*
    approach, where teams select the best cloud provider service by service. Ultimately,
    companies do have a preferred cloud provider. But there is an argument to be made
    for diversification, where some percentage of services are implemented on different
    cloud providers to gain experience and leverage. The goal then is to have a consistent
    pipeline experience across services with similar, if not the same, tools, techniques,
    and patterns for development, testing, deployment, and monitoring. The recipes
    in many of the previous chapters focused on AWS fully managed, value-added cloud
    services. The recipes in this chapter demonstrate how a consistent cloud-native
    development pipeline experience is possible with additional cloud providers, such
    as Google and Azure.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择拥抱完全托管、增值云服务的**可丢弃架构**。这种**无服务器优先**的方法赋予自给自足的全栈团队以精益和实验新想法的能力，快速失败，学习，并快速调整方向。这自然地导致了一种**多语言云**或**多云**的方法，其中团队根据每个服务选择最佳的云服务提供商。最终，公司确实有一个首选的云服务提供商。但是，对于多元化，其中一部分服务是在不同的云服务提供商上实施的，以获得经验和利用，这是一个有争议的观点。目标是在具有类似甚至相同的工具、技术和模式进行开发、测试、部署和监控的服务之间实现一致的管道体验。许多前几章中的食谱专注于AWS完全托管、增值云服务。本章中的食谱展示了如何通过添加额外的云服务提供商，如Google和Azure，实现一致的云原生开发管道体验。
- en: Creating a service with Google Cloud Functions
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Google Cloud Functions创建服务
- en: The **Serverless Framework** provides an abstraction layer above many different
    cloud providers that facilitates a consistent development and deployment experience.
    This recipe demonstrates how to create a service with Google Cloud Functions.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**无服务器框架**在许多不同的云服务提供商之上提供了一个抽象层，这有助于实现一致的开发和部署体验。本食谱演示了如何使用Google Cloud Functions创建服务。'
- en: Getting ready
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Before starting this recipe, you will need a Google Cloud Billing Account, project,
    and credentials that are configured for the Serverless Framework ([https://serverless.com/framework/docs/providers/google/guide/credentials](https://serverless.com/framework/docs/providers/google/guide/credentials)).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始此食谱之前，您需要一个配置了Serverless Framework（[https://serverless.com/framework/docs/providers/google/guide/credentials](https://serverless.com/framework/docs/providers/google/guide/credentials)）的Google
    Cloud Billing Account、项目和凭证。
- en: How to do it...
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the project from the following template:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下模板创建项目：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Navigate to the `cncb-gcp` directory with `cd cncb-gcp`.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `cd cncb-gcp` 命令导航到 `cncb-gcp` 目录。
- en: 'Review the file named `serverless.yml` with the following content:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看名为 `serverless.yml` 的文件，内容如下：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Review the file named `index.js` with the following content:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看名为 `index.js` 的文件，内容如下：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Install the dependencies with `npm install`.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm install` 安装依赖项。
- en: Run the tests with `npm test`.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm test` 运行测试。
- en: Review the contents generated in the `.serverless` directory.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看在 `.serverless` 目录中生成的内容。
- en: 'Deploy the stack:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署堆栈：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Review the deployment and resources in the Google Cloud console.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Google Cloud 控制台中查看部署和资源。
- en: 'Invoke the endpoint shown in the stack output in the following commands:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下命令中调用堆栈输出中显示的端点：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Take a look at the logs:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看日志：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Remove the stack once you are finished with `npm run rm:lcl -- -s $MY_STAGE`.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后使用 `npm run rm:lcl -- -s $MY_STAGE` 删除堆栈。
- en: How it works...
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The first thing to note is that the steps of the *How to do it…* section are
    virtually the same as all the previous recipes. This is because the Serverless
    Framework abstracts away the deployment details, and we further wrap all the commands
    with *NPM* scripts to encapsulate dependency management. From here, we can use
    all the same tools and techniques for development and testing as outlined in [Chapter
    6](390bdaaf-5f53-4d65-8a6c-2e47c815f2b3.xhtml), *Building a Continuous Deployment
    Pipeline*. This enables team members to transition smoothly when working across
    services that are implemented on different cloud providers.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要注意的是，*如何操作…* 部分的步骤几乎与所有之前的菜谱相同。这是因为 Serverless Framework 抽象了部署细节，我们进一步将所有命令包装在
    *NPM* 脚本中，以封装依赖项管理。从这里，我们可以使用所有相同的工具和技术进行开发和测试，如第 6 章[构建持续部署管道](390bdaaf-5f53-4d65-8a6c-2e47c815f2b3.xhtml)中概述的。这使得团队成员在跨不同云服务提供商实现的服务工作时可以顺利过渡。
- en: The `serverless-google-cloudfunctions` plugin handles the details of interacting
    with the Google Cloud APIs, such as Cloud Functions and Deployment Manager, to
    provision the service. The `serverless.yml` file should look very familiar. We
    specify the `provider.name` as `google` and set up the `plugins`, and then we
    focus on defining the `functions` and `resources`. The details are cloud provider-specific,
    but the details of cloud provider-specific, value-added services are usually why
    we choose a specific provider for a specific service. The Node.js code in the
    `index.js` file is familiar as well, though the function signature is different.
    Ultimately, there is a clear mapping of Google Cloud services for implementing
    the cloud-native patterns and techniques enumerated in the recipes throughout
    this cookbook.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`serverless-google-cloudfunctions` 插件处理与 Google Cloud APIs（如 Cloud Functions
    和 Deployment Manager）交互的细节，以提供服务。`serverless.yml` 文件看起来应该非常熟悉。我们指定 `provider.name`
    为 `google` 并设置 `plugins`，然后我们专注于定义 `functions` 和 `resources`。具体细节取决于云服务提供商，但通常我们选择特定提供商的原因是特定服务增值服务的细节。`index.js`
    文件中的 Node.js 代码也很熟悉，尽管函数签名不同。最终，对于实现本烹饪书各菜谱中列举的云原生模式和技术的 Google Cloud 服务有一个清晰的映射。'
- en: Creating a service with Azure Functions
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Azure Functions 创建服务
- en: The Serverless Framework provides an abstraction layer above many different
    cloud providers that facilitates a consistent development and deployment experience.
    This recipe demonstrates how to create a service with Azure Functions.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Serverless Framework 在许多不同的云服务提供商之上提供了一个抽象层，这有助于实现一致的开发和部署体验。本菜谱演示了如何使用 Azure
    Functions 创建服务。
- en: Getting ready
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Before starting this recipe, you will need an Azure account and credentials
    configured for the Serverless Framework ([https://serverless.com/framework/docs/providers/azure/guide/credentials](https://serverless.com/framework/docs/providers/azure/guide/credentials)).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始此菜谱之前，您需要一个配置了 Serverless Framework 凭据的 Azure 账户（[https://serverless.com/framework/docs/providers/azure/guide/credentials](https://serverless.com/framework/docs/providers/azure/guide/credentials)）。
- en: How to do it...
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the project from the following template:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据以下模板创建项目：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Navigate to the `cncb-azure` directory with `cd cncb-azure`.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `cd cncb-azure` 命令进入 `cncb-azure` 目录。
- en: 'Review the file named `serverless.yml` with the following content:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看以下内容的 `serverless.yml` 文件：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Review the file named `handler.js` with the following content:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看名为 `handler.js` 的文件，其内容如下：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Install the dependencies with `npm install`.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm install` 安装依赖项。
- en: Run the tests with `npm test`.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm test` 运行测试。
- en: Review the contents generated in the `.serverless` directory.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看在 `.serverless` 目录中生成的内容。
- en: 'Deploy the stack:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署堆栈：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Review the deployment and resources in the Azure console.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Azure 控制台中查看部署和资源。
- en: 'Tail the logs from another terminal:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个终端中跟踪日志：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Invoke the endpoint shown in the stack output in the following commands:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下命令中调用堆栈输出中显示的端点：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Remove the stack once you are finished with `npm run rm:lcl -- -s $MY_STAGE`.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后使用 `npm run rm:lcl -- -s $MY_STAGE` 删除堆栈。
- en: How it works...
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The first thing to note is that the steps of the *How to do it…* section are
    virtually the same as in all the previous recipes. This is because the Serverless
    Framework abstracts away the deployment details, and we further wrap all the commands
    with *NPM scripts* to encapsulate dependency management. From here we can use
    all the same tools and techniques for development and testing as outlined in [Chapter
    6](390bdaaf-5f53-4d65-8a6c-2e47c815f2b3.xhtml), *Building a Continuous Deployment
    Pipeline*. This enables team members to transition smoothly when working across
    services that are implemented on different cloud providers.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要注意的是，“如何做…”（*How to do it…*）部分的步骤几乎与所有之前的食谱完全相同。这是因为Serverless Framework抽象化了部署细节，我们进一步使用*NPM
    scripts*将所有命令封装起来以实现依赖管理。从这里开始，我们可以使用与[第6章](390bdaaf-5f53-4d65-8a6c-2e47c815f2b3.xhtml)，“构建持续部署管道”中概述的相同工具和技术进行开发和测试。这使得团队成员在跨不同云提供商实现的服务工作时能够顺利过渡。
- en: The `serverless-azure-cloudfunctions` plugin handles the details of interacting
    with the Azure APIs, such as Azure Functions and Resource Manager, to provision
    the service. The `serverless.yml` file should look very familiar. We specify the
    `provider.name` as `azure` and set up the `plugins`, and then we focus on defining
    the `functions`. The details are cloud provider-specific, but the details of the
    cloud provider-specific, value-added services are usually why we choose a specific
    provider for a specific service. The Node.js code in the `handler.js` file is
    familiar as well, though the function signature is different. Ultimately, there
    is a clear mapping of Azure services for implementing the cloud-native patterns
    and techniques enumerated in the recipes throughout this cookbook.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`serverless-azure-cloudfunctions`插件处理与Azure API交互的细节，例如Azure Functions和资源管理器，以提供该服务。`serverless.yml`文件看起来应该非常熟悉。我们指定`provider.name`为`azure`并设置`plugins`，然后我们专注于定义`functions`。具体细节是云提供商特定的，但云提供商特定的增值服务细节通常是我们选择特定提供商以提供特定服务的原因。`handler.js`文件中的Node.js代码也很熟悉，尽管函数签名不同。最终，有一个清晰的Azure服务映射，用于实现本烹饪书食谱中列举的云原生模式和技术的实现。'
