- en: Welcoming Polycloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, the following recipes will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a service in Google Cloud Functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a service in Azure Functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vendor lock-in is a common concern with serverless, cloud-native development.
    However, this concern is a relic of the monolithic thinking that stems from monolithic
    systems that must be changed in whole from one vendor to another. Autonomous services,
    on the other hand, can be changed one by one. Nevertheless, the elusive promise
    of *write once; run anywhere* is still the battle cry of the *multi-cloud* approach.
    Yet, this approach ignores the fact that the part that is written once is only
    the tip of a very big iceberg, and what lies below the waterline embodies the
    most risk and does not translate directly between cloud providers. This inevitably
    leads to the use of a least-common denominator set of tools and techniques that
    can more easily be lifted and shifted from one provider to another.
  prefs: []
  type: TYPE_NORMAL
- en: We chose instead to embrace the *disposable architecture* of fully managed,
    value-added cloud services. This *serverless-first* approach empowers self-sufficient,
    full-stack teams to be lean and experiment with new ideas, fail-fast, learn, and
    adjust course quickly. This leads naturally to a *polyglot-cloud* or *polycloud*
    approach, where teams select the best cloud provider service by service. Ultimately,
    companies do have a preferred cloud provider. But there is an argument to be made
    for diversification, where some percentage of services are implemented on different
    cloud providers to gain experience and leverage. The goal then is to have a consistent
    pipeline experience across services with similar, if not the same, tools, techniques,
    and patterns for development, testing, deployment, and monitoring. The recipes
    in many of the previous chapters focused on AWS fully managed, value-added cloud
    services. The recipes in this chapter demonstrate how a consistent cloud-native
    development pipeline experience is possible with additional cloud providers, such
    as Google and Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a service with Google Cloud Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Serverless Framework** provides an abstraction layer above many different
    cloud providers that facilitates a consistent development and deployment experience.
    This recipe demonstrates how to create a service with Google Cloud Functions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before starting this recipe, you will need a Google Cloud Billing Account, project,
    and credentials that are configured for the Serverless Framework ([https://serverless.com/framework/docs/providers/google/guide/credentials](https://serverless.com/framework/docs/providers/google/guide/credentials)).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create the project from the following template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to the `cncb-gcp` directory with `cd cncb-gcp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Review the file named `serverless.yml` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Review the file named `index.js` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Install the dependencies with `npm install`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the tests with `npm test`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review the contents generated in the `.serverless` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Deploy the stack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Review the deployment and resources in the Google Cloud console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Invoke the endpoint shown in the stack output in the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a look at the logs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Remove the stack once you are finished with `npm run rm:lcl -- -s $MY_STAGE`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing to note is that the steps of the *How to do it…* section are
    virtually the same as all the previous recipes. This is because the Serverless
    Framework abstracts away the deployment details, and we further wrap all the commands
    with *NPM* scripts to encapsulate dependency management. From here, we can use
    all the same tools and techniques for development and testing as outlined in [Chapter
    6](390bdaaf-5f53-4d65-8a6c-2e47c815f2b3.xhtml), *Building a Continuous Deployment
    Pipeline*. This enables team members to transition smoothly when working across
    services that are implemented on different cloud providers.
  prefs: []
  type: TYPE_NORMAL
- en: The `serverless-google-cloudfunctions` plugin handles the details of interacting
    with the Google Cloud APIs, such as Cloud Functions and Deployment Manager, to
    provision the service. The `serverless.yml` file should look very familiar. We
    specify the `provider.name` as `google` and set up the `plugins`, and then we
    focus on defining the `functions` and `resources`. The details are cloud provider-specific,
    but the details of cloud provider-specific, value-added services are usually why
    we choose a specific provider for a specific service. The Node.js code in the
    `index.js` file is familiar as well, though the function signature is different.
    Ultimately, there is a clear mapping of Google Cloud services for implementing
    the cloud-native patterns and techniques enumerated in the recipes throughout
    this cookbook.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a service with Azure Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Serverless Framework provides an abstraction layer above many different
    cloud providers that facilitates a consistent development and deployment experience.
    This recipe demonstrates how to create a service with Azure Functions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before starting this recipe, you will need an Azure account and credentials
    configured for the Serverless Framework ([https://serverless.com/framework/docs/providers/azure/guide/credentials](https://serverless.com/framework/docs/providers/azure/guide/credentials)).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create the project from the following template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to the `cncb-azure` directory with `cd cncb-azure`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Review the file named `serverless.yml` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Review the file named `handler.js` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Install the dependencies with `npm install`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the tests with `npm test`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review the contents generated in the `.serverless` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Deploy the stack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Review the deployment and resources in the Azure console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Tail the logs from another terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Invoke the endpoint shown in the stack output in the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Remove the stack once you are finished with `npm run rm:lcl -- -s $MY_STAGE`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing to note is that the steps of the *How to do it…* section are
    virtually the same as in all the previous recipes. This is because the Serverless
    Framework abstracts away the deployment details, and we further wrap all the commands
    with *NPM scripts* to encapsulate dependency management. From here we can use
    all the same tools and techniques for development and testing as outlined in [Chapter
    6](390bdaaf-5f53-4d65-8a6c-2e47c815f2b3.xhtml), *Building a Continuous Deployment
    Pipeline*. This enables team members to transition smoothly when working across
    services that are implemented on different cloud providers.
  prefs: []
  type: TYPE_NORMAL
- en: The `serverless-azure-cloudfunctions` plugin handles the details of interacting
    with the Azure APIs, such as Azure Functions and Resource Manager, to provision
    the service. The `serverless.yml` file should look very familiar. We specify the
    `provider.name` as `azure` and set up the `plugins`, and then we focus on defining
    the `functions`. The details are cloud provider-specific, but the details of the
    cloud provider-specific, value-added services are usually why we choose a specific
    provider for a specific service. The Node.js code in the `handler.js` file is
    familiar as well, though the function signature is different. Ultimately, there
    is a clear mapping of Azure services for implementing the cloud-native patterns
    and techniques enumerated in the recipes throughout this cookbook.
  prefs: []
  type: TYPE_NORMAL
