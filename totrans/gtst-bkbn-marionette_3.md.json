["```js\nfunction : onBeforeClose () {\n  //  code to be run before closing the view\n}\n```", "```js\n function : onClose () {\n  //  code to be run after closing the view\n }\n```", "```js\nrender : function () {\n  var template = $( '#mytemplate' ).html(); \n  var templateFunction = _.template( template ); \n  var modelToJSON = this.model.toJSON();\n  var result = templateFunction(modelToJSON); \n  var myElement = $( '#MyElement' ); \n  myElement.html( result );\n}\n```", "```js\nvar SampleView = Backbone.Marionette.ItemView.extend({\n  template : '#sample-template'\n});\n```", "```js\nvar SampleModel = Backbone.Model.extend({\n  defaults : {\n    value1 : \"A random Value\",\n    value2 : \"Another Random Value\"\n  }\n})\nvar sampleModel = new SampleModel();\nvar sampleView = new SampleView({model:sampleModel);\n```", "```js\nsampleView.render();\n```", "```js\nvar BookModel = Backbone.Model.extend({\n  defaults : {\n    id : \"1\",\n    name : \"First\",\n  }\n});\n\nvar BookCollection = Backbone.Collection.extend({\n  model : BookModel\n});\n```", "```js\nvar bookModel = new BookModel();\nvar bookModel2 = new BookModel({id:\"2\",name:\"second\"});\nvar bookModel3 = new BookModel({id:\"3\",name:\"third\"});\nvar bookCollection = new BookCollection();\nbookCollection.add(bookModel);\nbookCollection.add(bookModel2);\nbookCollection.add(bookModel3);\n```", "```js\n<script id=\"books-template\" type=\"text/html\">\n  <ul>\n    <% _.each(items, function(item){ %>\n    <li><a href=\"book/'+<%= item.id %> +\"><%= item.name %> </li>\n    <% }); %>\n  </ul>\n</script>\n```", "```js\nvar BookListView = Marionette.ItemView.extend({\n  template: \"#books-template\"\n});\n\nvar view = new BookListView ({\n  collection: bookCollection\n});\nview.Render();\n```", "```js\nthis.listenTo(this.model, \"change:title\", this.titleChanged);\nthis.listenTo(this.collection, \"add\", this.collectionChanged);\n```", "```js\ntitleChanged: function(model, value){alert(\"changed\");},\ncollectionChanged: function(model, value){alert(\"added\");},\n```", "```js\nmodelEvents: {\n  \"change:title\": \"titleChanged\" \n},\ncollectionEvents: {\n  \"add\": \"collectionChanged\" \n},\n```", "```js\nevents : { \n  \"click #button2\" : \"updateValue\" \n},\n```", "```js\ntriggers : { \"click #button1\": \"trigger:alert\"},\n```", "```js\nsampleView.on(\"trigger:alert\", function(args){\n  alert(args.model.get(\"value2\"));\n});\n```", "```js\nui: {\n  quantity: \"#quantity\"\n  saveButton : \"#Save\"\n},\n```", "```js\nvalidateQuantity: function() {\n  if (this.ui.quantity.val() > 0 {\n    this.ui.saveButton.addClass('active');\n  }\n}\n```", "```js\ngetTemplate: function(){\n  if (this.model.get(\"foo\"){\n    return \"#sample-template\";\n  }else {     \n    return \"#a-different-template\";\n  }\n},\n```", "```js\nvar PriceView = Backbone.Marionette.ItemView.extend({\n  template: \"#price-template\",\n\n  templateHelpers: {\n    calculatePrice: function(){\n    // logic to calculate the price goes here\n      return price; \n    }\n  }\n});\n```", "```js\n<script id=\"my-template\" type=\"text/html\">\n  Take this book with you for just : <%= calculatePrice () %>\n</script>\n```", "```js\nvar CategoryView = Backbone.Marionette.ItemView.extend({\n        tagName : 'li',\n        template: \"#categoryTemplate\",\n});\n```", "```js\nvar CategoriesView = Backbone.Marionette.CollectionView.extend({\n        tagName : 'ul',\n        className : 'unstyled',\n        itemView: CategoryView\n}); \n```", "```js\nvar categoriesView = new CategoriesView({collection:categories);\ncategoriesView.render();\n```", "```js\nvar OrderListView = Backbone.Marionette.CompositeView.extend({\n        tagName: \"table\",\n        template: \"#orderGrid\",\n        itemView: CartApp.OrderItemView,\n        emptyView: CartApp.EmptyOrderView,\n        className: \"table table-hover table-condensed\",\n\n        appendHtml: function (collectionView, itemView) {\n            collectionView.$(\"tbody\").append(itemView.el);\n        },\n```", "```js\n        onBeforeRender: function () {\n            var subtotal = this.collection.getTotal();\n            var tax = subtotal * .08;\n            var total = subtotal + tax;\n            this.model.set({ subtotal: subtotal });\n            this.model.set({ tax: tax });\n            this.model.set({ total: total });\n        },\n```", "```js\n        onRender: function () {\n            if (this.collection.length > 0) {\n                this.$('thead').removeClass('hide');\n                this.$('tfoot').removeClass('hide');\n            }\n        },\n```", "```js\nvarCatalogLayout = Backbone.Marionette.Layout.extend({\n        template: \"#CatalogLayout\",\n        regions: {\n            categories : '#categories',\n            products : '#products',\n            order : '#order',\n            book: '#book'\n        }\n    });\n```", "```js\nvar catalogLayout = new CatalogLayout();\ncatalogLaout.render();\n```", "```js\nlayout.addRegion(\"footer\", \"#footer\");\nlayout.removeRegion(\"footer \");\n```", "```js\nlayout.addRegions({\n  favoriteBooks: \"#favoritebooks\",\n  bestRated: \"#best\"\n});\n```", "```js\nvar HandyView = Backbone.Marionette.ItemView.extend({\n  initialize:function(){\n  Backbone.Marionette.ItemView.prototype.initialize.apply(this,arguments);\n  },\n  logMessage : function (message){\n    console.log(message);\n  }\n});\n```", "```js\n  var BookView = HandyView.extend({\n  alertMessage : function () {\n    alert(message);\n  }\n  });\n\n  var bookView = new BookView();\n  bookView.logMessage(\"Hi\");\n  bookView.alertMessage(\"Bye\");\n```"]