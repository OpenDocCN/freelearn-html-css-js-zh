- en: Creating Your First Johnny-Five Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we''ve set up our development environment, it''s time to start writing
    code and making LEDs light up! We''ll start by running the *Hello World!* of Johnny-Five
    robotics: making an LED blink. In the process, we''ll look at how to navigate
    the Johnny-Five and Raspi-IO API documents, and examine the event system in Johnny-Five.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a project folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Johnny-Five and Raspi-IO
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wiring up an LED
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making an LED blink
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You'll need the Raspberry Pi that you set up in [Chapter 1](bab2feb9-9667-4f8b-bb2e-1702009b87b4.xhtml),* Setting
    Up Your Development Environment*, a breadboard, and a Pi Cobbler for easier pin
    access. You can get a Pi Cobbler (also sometimes called a Pi Wedge) from Adafruit,
    SparkFun, or Amazon. A Pi Cobbler also comes in the kits recommended in [Chapter
    1](bab2feb9-9667-4f8b-bb2e-1702009b87b4.xhtml), *Setting Up Your Development Environment*.
  prefs: []
  type: TYPE_NORMAL
- en: The example code for this chapter is here: [https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter02](https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter02).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows two different Raspberry Pi Cobblers, both from
    Adafruit. The one on the right has the ribbon cable attached:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f4f36773-2aef-4571-bb61-18ec2e4a1813.png)'
  prefs: []
  type: TYPE_IMG
- en: We'll talk about how to set up the cobbler later in this chapter. You'll also
    need an LED, some jumper or breadboard wires, and a 330-ohm resistor.
  prefs: []
  type: TYPE_NORMAL
- en: 'In case you''re asking yourself *what''s a resistor, and what does it do?*,
    the short explanation is that a resistor will prevent the 5V electricity from
    the pin from burning out your LED, which needs closer to 3.3V of electricity.
    For a better primer on electricity, voltage, and resistors, there is some great,
    free material on SparkFun''s website. You can access this material via the following
    links:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Electricity**: [https://learn.sparkfun.com/tutorials/what-is-electricity](https://learn.sparkfun.com/tutorials/what-is-electricity)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Resistors**: [https://learn.sparkfun.com/tutorials/resistors](https://learn.sparkfun.com/tutorials/resistors)'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a project folder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I find the best way to organize your Raspberry Pi is to put each project in
    its own folder. In the source code that accompanies this book, I''ve done just
    that. But let''s walk through how to set up your own project folders. First, you''ll
    want to create the folder itself. For the project in this chapter, which we''ll
    call `led-blink`, you''ll want to run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Make sure that you're running this in your SSH session to the Raspberry Pi,
    and not on your desktop.
  prefs: []
  type: TYPE_NORMAL
- en: From here on out, unless the text directly says to run something on your desktop, you
    should run all of your commands in the SSH session to your Raspberry Pi that we
    set up in [Chapter 1](bab2feb9-9667-4f8b-bb2e-1702009b87b4.xhtml), *Setting Up
    Your Development Environment*.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up npm to manage our modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re going to be using more than just Johnny-Five and Raspi-IO to create
    our projects, and you want to be able to move your code around via your favorite
    Git hosting service, perhaps to move it to a new Raspberry Pi, for example. In
    order to make this as smooth as possible, we''re going to make sure that `npm`
    knows how to accurately recreate your projects. For this, we want a preprepared
    `package.json` file. To do this, navigate into your `project` folder and tell
    it to initialize:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `-y` in the `npm init` command tells `npm` to *use the default answer to
    all initialization questions*. This is fine for projects that only you will use,
    but if you plan to deploy your work for others to use, or create your own `npm`
    modules, be sure to edit your `package.json` accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: These commands create our `package.json` so that when we install `npm` modules
    with `--save`, the manifest will update so that when you move your project, there's
    a complete record of our dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Johnny-Five and Raspi-IO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that our project folder is ready for dependencies, we'll start exploring
    the Johnny-Five and Raspi-IO documentation that'll help us create the projects
    in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Gathering resources and documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two main sources of documentation that we''ll be using for the projects
    in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Johnny-Five website**: [http://johnny-five.io/](http://johnny-five.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Raspi-IO GitHub README and wiki**: [https://github.com/nebrius/raspi-io](https://github.com/nebrius/raspi-io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the Raspi-IO README on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a15679d1-c7c8-412b-8507-db2a1aa24ee0.png)'
  prefs: []
  type: TYPE_IMG
- en: We will be using the Johnny-Five documentation at `johnny-five.io` to look up
    API calls and other information about the Johnny-Five library, and the Raspi-IO
    README for Raspberry Pi-specific information, including pin numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Taking a look at the LED-blink project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing we''ll need is from the Raspi-IO README: we''re going to read
    and run their `led-blink` code as our *Hello World!* Let''s take a look at the
    code as a block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This doesn't look like much, but there's a lot going on here! The first two
    lines use `require` to pull in the `johnny-five` and `raspi-io` modules. Then,
    we begin constructing a `board` object, and we pass a new instance of the `raspi-io`
    module in as its I/O. This is how we tell the Johnny-Five library we're running
    this code on a Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll set up an event listener on our board object on the `ready` event.
    According to the Johnny-Five documentation, this event fires *when the board** instance
    object has completed any hardware initialization that must take place before the
    program can operate*. This means you shouldn't run any robotics-related code outside
    of this event handler, because you cannot be sure your board is ready to receive
    hardware commands.
  prefs: []
  type: TYPE_NORMAL
- en: The comments starting on line 10 are very helpful, as they tell us where to
    hook up our LED. We'll be using pin 7 (GPIO 4)—that means the seventh physical
    pin from the top, which is designated as GPIO 4.
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi pin numbers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Pin 7... is labeled GPIO 4? That''s confusing! Luckily, there are many pin
    diagrams freely available to help us translate, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/92437148-d3d8-4694-ab4a-55750cb5f4a1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A GPIO/pin map (source: raspberrypi.org)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, the Raspi-IO library will accept many names for the same pin, as shown
    in the handy conversion table in the wiki:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9fa8d0dd-b9a9-4dd2-893a-cacc88a32ea6.png)'
  prefs: []
  type: TYPE_IMG
- en: The pin table from the Raspi-IO wiki
  prefs: []
  type: TYPE_NORMAL
- en: Keeping one of these pin guides handy is helpful when wiring up any Johnny-Five
    project on the Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Wiring up an LED
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've gone through the documentation and figured out what goes where,
    we can start assembling our Raspberry Pi project. You'll need your Raspberry Pi,
    Pi Cobbler, two breadboard wires, an LED (doesn't matter what color), and a 300-ohm
    resistor.
  prefs: []
  type: TYPE_NORMAL
- en: Putting together and attaching the cobbler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to make sure the cobbler is seated correctly, you'll want to make sure
    that the ribbon cable points outward from the Raspberry Pi when placed on the
    GPIO pins, and that the little tab on the side of the connector faces the right
    way in the cobbler itself (this is usually ensured by a plastic wall around the
    pins that the ribbon cable plugs into; make sure that you check that it's lined
    up before applying too much pressure!).
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll want to seat the cobbler on a breadboard that''s at least half sized,
    though I tend to prefer full size for Raspberry Pi projects. Make sure the two
    rows of pins on the cobbler are on opposite sides of the groove down the center
    of the breadboard, as shown in the following photograph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/38dc80d7-bb23-48a6-beb6-55c3771eb298.png)'
  prefs: []
  type: TYPE_IMG
- en: Cobblers on a full-size (top) and half-size (bottom) breadboard
  prefs: []
  type: TYPE_NORMAL
- en: New to breadboards? There's a great explanation of how they work (as well as
    some neat trivia) on the SparkFun website ([https://learn.sparkfun.com/tutorials/how-to-use-a-breadboard](https://learn.sparkfun.com/tutorials/how-to-use-a-breadboard)).
  prefs: []
  type: TYPE_NORMAL
- en: Attaching the resistor and LED
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You''ll want to use a wire to connect GPIO 4 (pin 7) to a 330-ohm resistor
    and the resistor to the positive (long) leg of the LED. Then, you''ll want to
    connect the negative (short) leg to ground, or any pin marked GND. Your finished
    project will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/212be3a4-ccb0-4b68-b940-ea254c6bed5a.png)'
  prefs: []
  type: TYPE_IMG
- en: Your LED project
  prefs: []
  type: TYPE_NORMAL
- en: Now that your LED is wired up, it's time to make it blink!
  prefs: []
  type: TYPE_NORMAL
- en: Making the LED blink
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to make the LED blink, we'll need to install the code on the Raspberry
    Pi, and then run it!
  prefs: []
  type: TYPE_NORMAL
- en: Putting your code on the Raspberry Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you wrote your code on your desktop and need to transfer it to your Raspberry
    Pi, there are a couple of ways to go about it: you can use `rsync` on an macOS
    X or Linux machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Replace `<project folder>` with the folder you want to transfer into (for example,
    the book folder would be `hands-on-robotics-with-javascript/ch2/blink-led`).
  prefs: []
  type: TYPE_NORMAL
- en: For Windows, follow the guide for installing and using WinSCP at [https://winscp.net/eng/docs/ui_commander](https://winscp.net/eng/docs/ui_commander).
  prefs: []
  type: TYPE_NORMAL
- en: Running your code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once your code is on your Raspberry Pi, you''ll want to switch to your SSH
    session and run the following, if you''re using the source code from this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Otherwise, use `cd` to enter the folder where you stored your `blink-led.js`
    file on the Raspberry Pi. Then, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the Raspi-IO plugin requires you to run the command as `sudo`. If
    all has gone well, you should see a quickly blinking LED on your breadboard. If
    not, here are some troubleshooting steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Check the wiring
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-check the wiring (seriously, 95% of the time it's a wiring issue)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that the Node.js script did not experience an error on the Raspberry
    Pi
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! You've made a Johnny-Five bot! In this chapter, you've learned
    how to wire up an LED, navigate the documentation for Johnny-Five and Raspi-IO,
    and run your code on the Raspberry Pi!
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Look in the Johnny-Five documentation, under the LED heading in the section
    on the API. Look for the `strobe` function. What does the first argument do? What
    would happen if you passed 500 as that first argument?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the second argument in the `LED.strobe()` function? How would this come
    in handy for applications waiting for the LED to be off?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Does the Johnny-Five LED object emit any events? Why, or why not?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using the Raspi-IO documentation, what does the Raspberry Pi pin P1-29 translate
    to in terms of GPIO #?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the Johnny-Five documentation, name a function that is an alias for the
    `LED.strobe()` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What happens before the board's `ready` event fires in a Johnny-Five application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can consult the following sources for further reading related to the topics
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Johnny-Five documentation**: [johnny-five.io](http://johnny-five.io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**T****he Johnny-Five GitHub repository**: [https://github.com/rwaldron/johnny-five](https://github.com/rwaldron/johnny-five)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Raspi-IO library**: [https://github.com/nebrius/raspi-io](https://github.com/nebrius/raspi-io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
