- en: Creating Your First Johnny-Five Project
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的第一个Johnny-Five项目
- en: 'Now that we''ve set up our development environment, it''s time to start writing
    code and making LEDs light up! We''ll start by running the *Hello World!* of Johnny-Five
    robotics: making an LED blink. In the process, we''ll look at how to navigate
    the Johnny-Five and Raspi-IO API documents, and examine the event system in Johnny-Five.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了开发环境，是时候开始编写代码并让LED发光了！我们将从运行Johnny-Five机器人的“Hello World！”开始：让LED闪烁。在这个过程中，我们将了解如何导航Johnny-Five和Raspi-IO
    API文档，并检查Johnny-Five的事件系统。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Creating a project folder
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建项目文件夹
- en: Installing Johnny-Five and Raspi-IO
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Johnny-Five和Raspi-IO
- en: Wiring up an LED
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接LED
- en: Making an LED blink
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让LED闪烁
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You'll need the Raspberry Pi that you set up in [Chapter 1](bab2feb9-9667-4f8b-bb2e-1702009b87b4.xhtml),* Setting
    Up Your Development Environment*, a breadboard, and a Pi Cobbler for easier pin
    access. You can get a Pi Cobbler (also sometimes called a Pi Wedge) from Adafruit,
    SparkFun, or Amazon. A Pi Cobbler also comes in the kits recommended in [Chapter
    1](bab2feb9-9667-4f8b-bb2e-1702009b87b4.xhtml), *Setting Up Your Development Environment*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要第1章[“设置开发环境”](bab2feb9-9667-4f8b-bb2e-1702009b87b4.xhtml)中设置的Raspberry Pi，一个面包板，以及一个Pi
    Cobbler以方便引脚访问。您可以从Adafruit、SparkFun或Amazon购买Pi Cobbler（有时也称为Pi Wedge）。Pi Cobbler也包含在第1章[“设置开发环境”](bab2feb9-9667-4f8b-bb2e-1702009b87b4.xhtml)中推荐的套件中。
- en: The example code for this chapter is here: [https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter02](https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter02).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的示例代码在此：[https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter02](https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter02)。
- en: 'The following diagram shows two different Raspberry Pi Cobblers, both from
    Adafruit. The one on the right has the ribbon cable attached:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了两种不同的Raspberry Pi Cobbler，都来自Adafruit。右侧的Cobbler连接了扁平电缆：
- en: '![](img/f4f36773-2aef-4571-bb61-18ec2e4a1813.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f4f36773-2aef-4571-bb61-18ec2e4a1813.png)'
- en: We'll talk about how to set up the cobbler later in this chapter. You'll also
    need an LED, some jumper or breadboard wires, and a 330-ohm resistor.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章后面讨论如何设置Cobbler。您还需要一个LED、一些跳线或面包板电线，以及一个330欧姆的电阻。
- en: 'In case you''re asking yourself *what''s a resistor, and what does it do?*,
    the short explanation is that a resistor will prevent the 5V electricity from
    the pin from burning out your LED, which needs closer to 3.3V of electricity.
    For a better primer on electricity, voltage, and resistors, there is some great,
    free material on SparkFun''s website. You can access this material via the following
    links:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在问自己“电阻器是什么，它有什么作用？”，简短的解释是电阻器将阻止来自引脚的5V电流烧毁需要接近3.3V电流的LED。有关电流、电压和电阻的更深入介绍，SparkFun网站上有一些优秀的免费材料。您可以通过以下链接访问这些材料：
- en: '**Electricity**: [https://learn.sparkfun.com/tutorials/what-is-electricity](https://learn.sparkfun.com/tutorials/what-is-electricity)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**电流**：[https://learn.sparkfun.com/tutorials/what-is-electricity](https://learn.sparkfun.com/tutorials/what-is-electricity)'
- en: '**Resistors**: [https://learn.sparkfun.com/tutorials/resistors](https://learn.sparkfun.com/tutorials/resistors)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**电阻器**：[https://learn.sparkfun.com/tutorials/resistors](https://learn.sparkfun.com/tutorials/resistors)'
- en: Creating a project folder
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建项目文件夹
- en: 'I find the best way to organize your Raspberry Pi is to put each project in
    its own folder. In the source code that accompanies this book, I''ve done just
    that. But let''s walk through how to set up your own project folders. First, you''ll
    want to create the folder itself. For the project in this chapter, which we''ll
    call `led-blink`, you''ll want to run the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为组织Raspberry Pi的最佳方式是将每个项目放在自己的文件夹中。在这本书的源代码中，我已经这样做了。但让我们一步一步地了解如何设置您自己的项目文件夹。首先，您需要创建文件夹本身。对于本章的项目，我们将称之为`led-blink`，您需要运行以下命令：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Make sure that you're running this in your SSH session to the Raspberry Pi,
    and not on your desktop.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您在Raspberry Pi的SSH会话中运行此命令，而不是在您的桌面上。
- en: From here on out, unless the text directly says to run something on your desktop, you
    should run all of your commands in the SSH session to your Raspberry Pi that we
    set up in [Chapter 1](bab2feb9-9667-4f8b-bb2e-1702009b87b4.xhtml), *Setting Up
    Your Development Environment*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，除非文本中直接说明要在您的桌面上运行某些内容，否则您应该在我们在[第1章](bab2feb9-9667-4f8b-bb2e-1702009b87b4.xhtml)，“设置开发环境”中设置的Raspberry
    Pi的SSH会话中运行所有命令。
- en: Setting up npm to manage our modules
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 npm 来管理我们的模块
- en: 'We''re going to be using more than just Johnny-Five and Raspi-IO to create
    our projects, and you want to be able to move your code around via your favorite
    Git hosting service, perhaps to move it to a new Raspberry Pi, for example. In
    order to make this as smooth as possible, we''re going to make sure that `npm`
    knows how to accurately recreate your projects. For this, we want a preprepared
    `package.json` file. To do this, navigate into your `project` folder and tell
    it to initialize:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用不仅仅是 Johnny-Five 和 Raspi-IO 来创建我们的项目，并且你希望能够通过你喜欢的 Git 托管服务移动你的代码，例如将其移动到新的
    Raspberry Pi。为了使这个过程尽可能顺利，我们将确保 `npm` 能够准确地重新创建你的项目。为此，我们想要一个预先准备好的 `package.json`
    文件。为此，导航到你的 `project` 文件夹并初始化它：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `-y` in the `npm init` command tells `npm` to *use the default answer to
    all initialization questions*. This is fine for projects that only you will use,
    but if you plan to deploy your work for others to use, or create your own `npm`
    modules, be sure to edit your `package.json` accordingly.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm init` 命令中的 `-y` 选项告诉 `npm` 使用默认答案回答所有初始化问题。这对于只有你将使用的项目来说是可以的，但如果你打算将你的工作部署供他人使用，或者创建自己的
    `npm` 模块，请确保相应地编辑你的 `package.json` 文件。'
- en: These commands create our `package.json` so that when we install `npm` modules
    with `--save`, the manifest will update so that when you move your project, there's
    a complete record of our dependencies.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令创建我们的 `package.json`，这样当我们使用 `--save` 选项安装 `npm` 模块时，清单将更新，以便当你移动你的项目时，有一个完整的依赖项记录。
- en: Getting started with Johnny-Five and Raspi-IO
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 Johnny-Five 和 Raspi-IO
- en: Now that our project folder is ready for dependencies, we'll start exploring
    the Johnny-Five and Raspi-IO documentation that'll help us create the projects
    in this book.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们项目文件夹已经准备好依赖项，我们将开始探索 Johnny-Five 和 Raspi-IO 文档，这些文档将帮助我们创建本书中的项目。
- en: Gathering resources and documentation
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收集资源和文档
- en: 'There are two main sources of documentation that we''ll be using for the projects
    in this book:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下两个主要来源的文档来为本书中的项目：
- en: '**The Johnny-Five website**: [http://johnny-five.io/](http://johnny-five.io/)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Johnny-Five 网站**：[http://johnny-five.io/](http://johnny-five.io/)'
- en: '**The Raspi-IO GitHub README and wiki**: [https://github.com/nebrius/raspi-io](https://github.com/nebrius/raspi-io)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Raspi-IO GitHub README 和 wiki**：[https://github.com/nebrius/raspi-io](https://github.com/nebrius/raspi-io)'
- en: 'The following screenshot shows the Raspi-IO README on GitHub:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了 GitHub 上的 Raspi-IO README：
- en: '![](img/a15679d1-c7c8-412b-8507-db2a1aa24ee0.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a15679d1-c7c8-412b-8507-db2a1aa24ee0.png)'
- en: We will be using the Johnny-Five documentation at `johnny-five.io` to look up
    API calls and other information about the Johnny-Five library, and the Raspi-IO
    README for Raspberry Pi-specific information, including pin numbers.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `johnny-five.io` 上的 Johnny-Five 文档来查找 API 调用和其他关于 Johnny-Five 库的信息，以及用于
    Raspberry Pi 特定信息的 Raspi-IO README，包括引脚编号。
- en: Taking a look at the LED-blink project
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看LED闪烁项目
- en: 'The first thing we''ll need is from the Raspi-IO README: we''re going to read
    and run their `led-blink` code as our *Hello World!* Let''s take a look at the
    code as a block:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要的是来自 Raspi-IO README 的内容：我们将阅读并运行他们的 `led-blink` 代码作为我们的 *Hello World!*
    让我们看看代码块：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This doesn't look like much, but there's a lot going on here! The first two
    lines use `require` to pull in the `johnny-five` and `raspi-io` modules. Then,
    we begin constructing a `board` object, and we pass a new instance of the `raspi-io`
    module in as its I/O. This is how we tell the Johnny-Five library we're running
    this code on a Raspberry Pi.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来不多，但这里发生了很多事情！前两行使用 `require` 引入 `johnny-five` 和 `raspi-io` 模块。然后，我们开始构建一个
    `board` 对象，并将一个新的 `raspi-io` 模块实例作为其 I/O 传递。这是我们告诉 Johnny-Five 库我们在 Raspberry
    Pi 上运行代码的方式。
- en: Next, we'll set up an event listener on our board object on the `ready` event.
    According to the Johnny-Five documentation, this event fires *when the board** instance
    object has completed any hardware initialization that must take place before the
    program can operate*. This means you shouldn't run any robotics-related code outside
    of this event handler, because you cannot be sure your board is ready to receive
    hardware commands.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在 `ready` 事件上设置我们的板对象的事件监听器。根据 Johnny-Five 文档，此事件在 *板实例对象完成任何必须在程序运行之前进行的硬件初始化后触发*。这意味着你不应该在事件处理器之外运行任何与机器人相关的代码，因为你不能确定你的板是否已准备好接收硬件命令。
- en: The comments starting on line 10 are very helpful, as they tell us where to
    hook up our LED. We'll be using pin 7 (GPIO 4)—that means the seventh physical
    pin from the top, which is designated as GPIO 4.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 从第10行开始的注释非常有帮助，因为它们告诉我们如何连接我们的LED。我们将使用引脚7（GPIO 4）——这意味着从顶部起的第七个物理引脚，被指定为GPIO
    4。
- en: Raspberry Pi pin numbers
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Raspberry Pi引脚编号
- en: 'Pin 7... is labeled GPIO 4? That''s confusing! Luckily, there are many pin
    diagrams freely available to help us translate, as shown in the following diagram:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 引脚7...标记为GPIO 4？这很令人困惑！幸运的是，有许多免费的引脚图可以帮助我们翻译，如下面的图所示：
- en: '![](img/92437148-d3d8-4694-ab4a-55750cb5f4a1.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/92437148-d3d8-4694-ab4a-55750cb5f4a1.png)'
- en: 'A GPIO/pin map (source: raspberrypi.org)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一个GPIO/引脚图（来源：raspberrypi.org）
- en: 'Also, the Raspi-IO library will accept many names for the same pin, as shown
    in the handy conversion table in the wiki:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Raspi-IO库将接受许多相同的引脚名称，如wiki中方便的转换表所示：
- en: '![](img/9fa8d0dd-b9a9-4dd2-893a-cacc88a32ea6.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9fa8d0dd-b9a9-4dd2-893a-cacc88a32ea6.png)'
- en: The pin table from the Raspi-IO wiki
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 来自Raspi-IO wiki的引脚表
- en: Keeping one of these pin guides handy is helpful when wiring up any Johnny-Five
    project on the Raspberry Pi.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当在Raspberry Pi上连接任何Johnny-Five项目时，保留这些引脚指南是很有帮助的。
- en: Wiring up an LED
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接LED
- en: Now that we've gone through the documentation and figured out what goes where,
    we can start assembling our Raspberry Pi project. You'll need your Raspberry Pi,
    Pi Cobbler, two breadboard wires, an LED (doesn't matter what color), and a 300-ohm
    resistor.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经通过了文档，并弄清楚哪里放什么，我们可以开始组装我们的Raspberry Pi项目。你需要你的Raspberry Pi、Pi Cobbler、两根面包板电线、一个LED（颜色不重要）和一个300欧姆电阻。
- en: Putting together and attaching the cobbler
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组装并连接cobbler
- en: In order to make sure the cobbler is seated correctly, you'll want to make sure
    that the ribbon cable points outward from the Raspberry Pi when placed on the
    GPIO pins, and that the little tab on the side of the connector faces the right
    way in the cobbler itself (this is usually ensured by a plastic wall around the
    pins that the ribbon cable plugs into; make sure that you check that it's lined
    up before applying too much pressure!).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保cobbler放置正确，你需要确保当放置在GPIO引脚上时，扁平电缆从Raspberry Pi向外延伸，并且连接器侧面的小卡子面向cobbler的正确方向（这通常由扁平电缆插入的引脚周围的塑料墙确保；在施加过多压力之前，请确保它已对齐！）。
- en: 'You''ll want to seat the cobbler on a breadboard that''s at least half sized,
    though I tend to prefer full size for Raspberry Pi projects. Make sure the two
    rows of pins on the cobbler are on opposite sides of the groove down the center
    of the breadboard, as shown in the following photograph:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你希望将cobbler放置在至少半尺寸的面包板上，尽管我倾向于使用全尺寸的Raspberry Pi项目。确保cobbler上的两排引脚位于面包板中心凹槽的两侧，如下面的照片所示：
- en: '![](img/38dc80d7-bb23-48a6-beb6-55c3771eb298.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/38dc80d7-bb23-48a6-beb6-55c3771eb298.png)'
- en: Cobblers on a full-size (top) and half-size (bottom) breadboard
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 全尺寸（顶部）和半尺寸（底部）面包板上的cobbler
- en: New to breadboards? There's a great explanation of how they work (as well as
    some neat trivia) on the SparkFun website ([https://learn.sparkfun.com/tutorials/how-to-use-a-breadboard](https://learn.sparkfun.com/tutorials/how-to-use-a-breadboard)).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 新手使用面包板？SparkFun网站上有一个关于它们如何工作的出色解释（以及一些有趣的趣闻），[https://learn.sparkfun.com/tutorials/how-to-use-a-breadboard](https://learn.sparkfun.com/tutorials/how-to-use-a-breadboard)。
- en: Attaching the resistor and LED
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接电阻和LED
- en: 'You''ll want to use a wire to connect GPIO 4 (pin 7) to a 330-ohm resistor
    and the resistor to the positive (long) leg of the LED. Then, you''ll want to
    connect the negative (short) leg to ground, or any pin marked GND. Your finished
    project will look something like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要使用一根电线将GPIO 4（引脚7）连接到330欧姆电阻，并将电阻连接到LED的正极（长腿）。然后，你需要将负极（短腿）连接到地，或任何标记为GND的引脚。你的完成项目将看起来像这样：
- en: '![](img/212be3a4-ccb0-4b68-b940-ea254c6bed5a.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/212be3a4-ccb0-4b68-b940-ea254c6bed5a.png)'
- en: Your LED project
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你的LED项目
- en: Now that your LED is wired up, it's time to make it blink!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在LED已经连接好了，是时候让它闪烁了！
- en: Making the LED blink
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让LED闪烁
- en: In order to make the LED blink, we'll need to install the code on the Raspberry
    Pi, and then run it!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让LED闪烁，我们需要在Raspberry Pi上安装代码，然后运行它！
- en: Putting your code on the Raspberry Pi
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将代码放置在Raspberry Pi上
- en: 'If you wrote your code on your desktop and need to transfer it to your Raspberry
    Pi, there are a couple of ways to go about it: you can use `rsync` on an macOS
    X or Linux machine:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经在你的桌面上编写了代码，需要将其传输到你的Raspberry Pi，有几种方法可以做到：你可以在macOS X或Linux机器上使用`rsync`：
- en: '[PRE3]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Replace `<project folder>` with the folder you want to transfer into (for example,
    the book folder would be `hands-on-robotics-with-javascript/ch2/blink-led`).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `<项目文件夹>` 替换为你想要转移到的文件夹（例如，书籍文件夹将是 `hands-on-robotics-with-javascript/ch2/blink-led`）。
- en: For Windows, follow the guide for installing and using WinSCP at [https://winscp.net/eng/docs/ui_commander](https://winscp.net/eng/docs/ui_commander).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows，请遵循在 [https://winscp.net/eng/docs/ui_commander](https://winscp.net/eng/docs/ui_commander)
    安装和使用 WinSCP 的指南。
- en: Running your code
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行你的代码
- en: 'Once your code is on your Raspberry Pi, you''ll want to switch to your SSH
    session and run the following, if you''re using the source code from this book:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的代码在 Raspberry Pi 上，你将想要切换到你的 SSH 会话并运行以下命令，如果你使用的是本书的源代码：
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Otherwise, use `cd` to enter the folder where you stored your `blink-led.js`
    file on the Raspberry Pi. Then, run the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，使用 `cd` 命令进入你在 Raspberry Pi 上存储 `blink-led.js` 文件的文件夹。然后，运行以下命令：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Note that the Raspi-IO plugin requires you to run the command as `sudo`. If
    all has gone well, you should see a quickly blinking LED on your breadboard. If
    not, here are some troubleshooting steps:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Raspi-IO 插件要求你以 `sudo` 命令运行。如果一切顺利，你应该在你的面包板上看到一个快速闪烁的 LED。如果不这样，这里有一些故障排除步骤：
- en: Check the wiring
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查线路
- en: Double-check the wiring (seriously, 95% of the time it's a wiring issue)
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仔细检查线路（真的，95% 的时间问题是线路问题）
- en: Make sure that the Node.js script did not experience an error on the Raspberry
    Pi
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在 Raspberry Pi 上 Node.js 脚本没有出现错误
- en: Summary
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Congratulations! You've made a Johnny-Five bot! In this chapter, you've learned
    how to wire up an LED, navigate the documentation for Johnny-Five and Raspi-IO,
    and run your code on the Raspberry Pi!
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经制作了一个 Johnny-Five 机器人！在本章中，你学习了如何连接 LED，浏览 Johnny-Five 和 Raspi-IO 的文档，并在
    Raspberry Pi 上运行你的代码！
- en: Questions
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Look in the Johnny-Five documentation, under the LED heading in the section
    on the API. Look for the `strobe` function. What does the first argument do? What
    would happen if you passed 500 as that first argument?
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Johnny-Five 文档中查看，在 API 部分的 LED 节下查找 `strobe` 函数。第一个参数做什么？如果你将 500 作为第一个参数传递会发生什么？
- en: What is the second argument in the `LED.strobe()` function? How would this come
    in handy for applications waiting for the LED to be off?
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LED.strobe()` 函数的第二个参数是什么？这对于等待 LED 关闭的应用程序有什么帮助？'
- en: Does the Johnny-Five LED object emit any events? Why, or why not?
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Johnny-Five 的 LED 对象是否发出任何事件？为什么，或者为什么不？
- en: 'Using the Raspi-IO documentation, what does the Raspberry Pi pin P1-29 translate
    to in terms of GPIO #?'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '使用 Raspi-IO 文档，Raspberry Pi 的 P1-29 引脚在 GPIO #方面是如何翻译的？'
- en: Using the Johnny-Five documentation, name a function that is an alias for the
    `LED.strobe()` function.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Johnny-Five 文档，命名一个与 `LED.strobe()` 函数同义的函数。
- en: What happens before the board's `ready` event fires in a Johnny-Five application?
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Johnny-Five 应用程序中，`ready` 事件触发之前会发生什么？
- en: Further reading
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can consult the following sources for further reading related to the topics
    covered in this chapter:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以查阅以下资源，以获取与本章节主题相关的进一步阅读材料：
- en: '**The Johnny-Five documentation**: [johnny-five.io](http://johnny-five.io)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Johnny-Five 文档**：[johnny-five.io](http://johnny-five.io)'
- en: '**T****he Johnny-Five GitHub repository**: [https://github.com/rwaldron/johnny-five](https://github.com/rwaldron/johnny-five)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Johnny-Five GitHub 仓库**：[https://github.com/rwaldron/johnny-five](https://github.com/rwaldron/johnny-five)'
- en: '**The Raspi-IO library**: [https://github.com/nebrius/raspi-io](https://github.com/nebrius/raspi-io)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Raspi-IO 库**：[https://github.com/nebrius/raspi-io](https://github.com/nebrius/raspi-io)'
