- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Validating Form Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that our system is accepting new birthdays, we need to validate the data
    coming in. In this chapter, we’ll see how we can test-drive the SvelteKit `fail`
    function to return useful information to the user so that they can correct any
    errors.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 5**.1* shows what is displayed to the user after the server has deemed
    their date of birth invalid. Notice how the invalid form data is maintained so
    that the user has a chance to correct it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – A validation error is shown when entering an invalid date](img/Figure_5.1_B19611.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – A validation error is shown when entering an invalid date
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following key topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Playwright test for validating form errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying SvelteKit form errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating data in the form action
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clearing the data store between tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of the chapter, you’ll have a good understanding of how to implement
    form validation using a test-driven approach.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code for the chapter can be found online at [https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter05/Start](https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter05/Start).
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Playwright test for validating form errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we’ll write another Playwright test and then do some up-front
    planning for the Vitest unit tests we’ll need.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the next end-to-end test, which you can now add to `tests/birthdays.test.js`.
    It fills in the birthday form, just as in the previous chapter, but this time,
    the `invalid`: it is, literally, the word `invalid`, which is not a valid date
    of birth:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s think about the error message for a second: `Please provide a date of
    birth in the YYYY-MM-DD format`. In the interest of brevity, we’re not going fully
    test-drive this; rather, we’ll just accept anything that can be parsed by the
    in-built `Date.parse` function. It turns out that a lot of strings can be parsed
    by this function.'
  prefs: []
  type: TYPE_NORMAL
- en: Beyond that, what else will be needed to make this work? Our form action should
    use SvelteKit’s `fail` function to signal to SvelteKit that the form needs to
    be re-evaluated. We call it with an `422` – the *Unprocessable entity* error code
    – meaning the request data was invalid.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `fail` function can also return an object that is passed back to the client.
    It is given to our page component as a `form` prop. The object is a plain JavaScript
    object that we control. We can return whatever we want in it: all we have to do
    is call SvelteKit’s `fail` function with the object, and it will return that to
    the client.'
  prefs: []
  type: TYPE_NORMAL
- en: Valid return objects
  prefs: []
  type: TYPE_NORMAL
- en: The return object is only valid if it can be serialized into a string and reconstructed
    in the browser. Functions can’t be serialized, so they can’t be passed back.
  prefs: []
  type: TYPE_NORMAL
- en: We can include an `error` property that returns an error message. We can also
    return the `name` and `dob` properties so that they can be presented to the user
    again.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example object looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the remaining sections, we’ll start by updating the `BirthdayForm` component
    to make use of this new `form` prop. Then, we’ll update the form action to return
    the validation errors for two different validation errors: an empty name and an
    invalid date of birth.'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying SvelteKit form errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we’ll add tests and functionality to support passing in a new
    `form` prop into the `BirthayForm` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start with a new test:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `src/routes/birthdays/BirthdayForm.test.js` file, add a new nested `describe`
    block with a single test, as shown in the following code snippet. It checks that
    if the `error` property is set on the `form` prop, then that error must be displayed
    somewhere on the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make that pass in `src/routes/birthdays/BirthdayForm.svelte`, first by adding
    an `export` statement for the new `form` prop and then by adding a new `p` element
    with the error text. You can also add the `<style>` element at the bottom, although
    this isn’t necessary for the test to pass:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you run tests now, you’ll see we’ve broken a bunch of other tests by requiring
    the `form` prop to have an object value. But for the *create* mode of this component,
    the `form` prop should remain undefined. Update the `BirthdayForm` component as
    shown in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s add the next test in the same `describe` block. This test checks that
    if an error occurs, we re-populate the `name` text field with the same value as
    was passed in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To make that pass, simply add a `value` attribute value to the `input` field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now repeat that for the `dob` field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make that pass by adding the `value` attribute on the `dob` field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you run the app now, you’ll see that in *create* mode, the `undefined` string
    value now appears for the `form` is `undefined` in *create* mode, and therefore
    `value` is `undefined`. And the browser converts that to a string, giving `undefined`
    in the text box. To fix that, we need to specify an initial value for the fields.
    In the `BirthdayForm` test suite, find the `describe` block for the `name` field
    and add a second test into it, as shown in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To make that pass, update the `value` attribute, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, repeat that for `date of birth field`, starting with the test shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, make that test pass by setting the `value` attribute on the `dob`
    field in the same way:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That completes the `BirthdayForm` component changes. Next, we need to get the
    `form` prop into `BirthdayForm` from the page component.
  prefs: []
  type: TYPE_NORMAL
- en: Passing the form data through the page component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `BirthdayForm` component is not the *root* route component: it is instantiated
    as a child component from the component in `+page.svelte`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to ensure that the `form` prop is received by the `page`
    component and passed into the `BirthdayForm` component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `src/routes/birthdays/page.test.js`, add a new test at the bottom of the
    test suite, as shown in the following code snippet. It checks that if the `form`
    prop is sent with the `error` prop, the `error` text appears onscreen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Because the page component is already rendering `BirthdayForm`, it turns out
    the simplest way to make this test pass is to pass the `form` prop into `BirthdayForm`.
    In [*Chapter 12*](B19611_12.xhtml#_idTextAnchor134)*, Using Component Mocks* *to*
    *Clarify Tests*, we’ll see how this test can be rewritten using component mocks.
    For now, though, in `src/routes/birthdays/+page.svelte`, update the component
    to declare the `form` prop, and then pass it directly into `BirthdayForm`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You’ve now learned how to use automated tests to drive the display of form errors.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we’ll write tests for the form action that occurs on the
    server side.
  prefs: []
  type: TYPE_NORMAL
- en: Validating data in the form action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we’re all set up for errors on the client, but we need the server code
    to actually do the validation checks. We’ll add two checks: one to check that
    the name is not empty, and one to check that the date can be parsed into a valid
    `Date` object.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Each of these checks needs four unit tests: the first to ensure we break early
    without adding the birthday; the next to check the `422` error code; then one
    to check the error message text; and finally, one to check that the original data
    is passed back. (In [*Chapter 8*](B19611_08.xhtml#_idTextAnchor100), *Creating
    Matchers to Simplify Tests*, you’ll see how to build a matcher that will roll
    up three of these tests into one single test.)'
  prefs: []
  type: TYPE_NORMAL
- en: The beforeEach function
  prefs: []
  type: TYPE_NORMAL
- en: This section introduces the `beforeEach` function, which is used to run setup
    code before each of the tests within the `describe` block. It is a useful tool
    for reducing duplication within your test suites. You can consider it as part
    of the **Arrange** phase of your tests.
  prefs: []
  type: TYPE_NORMAL
- en: The `beforeAll`, `afterEach`, and `afterAll` functions do similar jobs but are
    used less frequently. We used the `afterEach` function for initialization in [*Chapter
    1*](B19611_01.xhtml#_idTextAnchor015),*Setting up for Testing*, and we’ll use
    `beforeAll` in [*Chapter 8*](B19611_08.xhtml#_idTextAnchor100), *Creating Matchers
    to* *Simplify Tests*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `src/routes/birthdays/page.server.test.js`, add a new import for the `beforeEach`
    function. We’ll use this to perform the setup for an entire set of tests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then add a nested `''validation errors''` describe block, together with another
    nested describe block entitled `''when the name is not provided''`, as shown here.
    This includes the first test, too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The when… context
  prefs: []
  type: TYPE_NORMAL
- en: The `when` style of naming the `describe` contexts is common when a group of
    tests belongs to a specific starting scenario, such as the one shown in the preceding
    scenario. They often have a `beforeEach` block that contains a setup that is common
    to all the tests.
  prefs: []
  type: TYPE_NORMAL
- en: It can sometimes be tempting to have multiple levels of nesting, but for simplicity,
    it’s best to keep a single level of the `when...` context blocks. The preceding
    example shows an outer block named `'validation errors'`, but that is for organization
    only and contains none of its own setup.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, in the `src/routes/birthdays/+page.server.js` file, update `actions`
    with a new `name` field is empty:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For that to work, you’ll need a definition of the `empty` function, which you
    can define as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Taking shortcuts
  prefs: []
  type: TYPE_NORMAL
- en: You might observe that we haven’t fully tested the `empty` function, such as
    what happens if a line of spaces is sent in. To avoid having to write even more
    tests within this chapter, I’ve not written out those tests. If this were a real
    application, I’d move `empty` to a file of its own and then provide a whole bunch
    of unit tests that run directly against it.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the next test, we’ll write a test that ensures the form returns a `422`
    response. Add this test into the same nested `describe` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To make that pass, first add the following `import` statement in the `src/routes/birthdays/+page.server.js`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then update the guard clause to return a value using `fail`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, still in the same nested `describe` block, add a test for the error message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make that pass by adding a `return` object as the second parameter to the `fail`
    call:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then add the final test for this name check, which is that we continue to pass
    the `dob` field value back, too:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Complete the guard clause, as shown in the following code snippet. For this,
    you’ll need to pull out the `dob` field in the same way you did with `name`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now let’s start on the second check for a `date` value that can’t be parsed.
    This behaves exactly the same as the previous check, just with different values
    for the form data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To make that pass, first define an `invalidDob` helper next to the `empty`
    helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, update the form action with a new guard clause:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, repeating the motions from *step 4* onwards, add a test to ensure that
    a `422` response is returned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To make that pass, update the `return` statement like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add a test for a useful message to be returned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the guard clause to display that message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the final test, we check that *all* the data is returned, including the
    invalid date. This is so that the user has the opportunity to correct the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And make that pass by passing in the `name` and `dob` properties to the failure
    object. At this point, all your tests should be passing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, as a final, tiny *refactor* step, you can update the call to `addNew`
    so that it uses the form data values that you’ve already pulled out from previous
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That completes test-driving the server-side validation. Your Vitest tests and
    the Playwright test will now pass. You can also try out the app by running the
    dev server (with the `npm run dev` command) and opening your browser.
  prefs: []
  type: TYPE_NORMAL
- en: In the final section of this chapter, we’ll fix a bug that’s crept into our
    test suites.
  prefs: []
  type: TYPE_NORMAL
- en: Clearing the data store between tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It turns out our tests are not independent: changes to the `db` object in one
    test affect the other tests, too. We have to clear down our test database between
    each run. We can solve that by creating a `clear` function that will clear the
    database object, and we’ll use a `beforeEach` block to call it before every test.'
  prefs: []
  type: TYPE_NORMAL
- en: 'What we need is the `clear` function that we can call directly in our tests.
    However, if you try to add this function to the `+page.server.js` file, you’ll
    get a warning from SvelteKit when you run your Playwright tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Why does this error appear only in the Playwright tests and not the Vitest tests?
    Your Vitest tests do not run through the SvelteKit server code, so the framework
    has no opportunity to check for invalid exports. It’s only when you run tests
    via Playwright that you’ll see runtime issues such as this.
  prefs: []
  type: TYPE_NORMAL
- en: 'SvelteKit only wants a `load` export and an `actions` export and absolutely
    nothing else. So, we need to move things out of the action and into their own
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file, `src/lib/server/birthdayRepository.js`, with the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `src/routes/birthdays/+page.server.js`, you can now import those, as shown
    in the following code block. Note the use of the `$` symbol in front of the file
    path, which is used to make a location that is relative to the `src` folder, which
    avoids us having to write `../../` before the filename:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then delete the `db` and `addNew` functions and update the `load` function
    to read as follows. At this point, all your tests (except for the skipped one)
    should still be passing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now you can add this new `import` statement in `src/routes/birthdays/page.server.test.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add in the `beforeEach` statement, as shown in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, in the action `describe` block, you can now also replace the use of
    `load` with `birthdayRepository.getAll`, which makes the test a little clearer
    as to what’s actually being tested: that the form action causes a new birthday
    to be inserted into the `birthdayRepository` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the last step, take care not to replace *all* the occurrences of `load`.
    In the second `describe` block, it’s the `load` function that is the function
    under test. Therefore, we keep those tests exactly as they are.
  prefs: []
  type: TYPE_NORMAL
- en: That completes all the work involved in extracting the repository module. Doing
    so has enabled us to introduce a `clear` function that can be used to keep our
    tests independent of each other. The `beforeEach` block ensures that each test
    starts from a clean slate.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has involved writing many more unit tests than previous chapters.
    Sometimes, unit tests need to be very detailed, particularly when it comes to
    testing very specific return values. In [*Chapter 8*](B19611_08.xhtml#_idTextAnchor100),
    *Creating Matchers to Simplify Tests*, we’ll look at ways of reducing the number
    of tests required.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve also seen why it’s important for unit tests to run independently and
    how to ensure your SvelteKit route tests clear their data between each test using
    the `beforeEach` function.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll learn how to extend the current `BirthdayForm` component
    to handle editing existing birthdays in addition to adding new birthdays.
  prefs: []
  type: TYPE_NORMAL
