- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Validating Form Data
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证表单数据
- en: Now that our system is accepting new birthdays, we need to validate the data
    coming in. In this chapter, we’ll see how we can test-drive the SvelteKit `fail`
    function to return useful information to the user so that they can correct any
    errors.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们系统正在接受新的生日，我们需要验证传入的数据。在本章中，我们将看到如何测试驱动SvelteKit的`fail`函数，以便向用户返回有用的信息，使他们能够纠正任何错误。
- en: '*Figure 5**.1* shows what is displayed to the user after the server has deemed
    their date of birth invalid. Notice how the invalid form data is maintained so
    that the user has a chance to correct it:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5.1*显示了服务器认为用户的出生日期无效后显示给用户的内容。注意无效的表单数据是如何被保留的，以便用户有机会进行更正：'
- en: '![Figure 5.1 – A validation error is shown when entering an invalid date](img/Figure_5.1_B19611.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![图5.1 – 输入无效日期时显示验证错误](img/Figure_5.1_B19611.jpg)'
- en: Figure 5.1 – A validation error is shown when entering an invalid date
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1 – 输入无效日期时显示验证错误
- en: 'This chapter covers the following key topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下关键主题：
- en: Adding a Playwright test for validating form errors
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个Playwright测试来验证表单错误
- en: Displaying SvelteKit form errors
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示SvelteKit表单错误
- en: Validating data in the form action
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在表单操作中验证数据
- en: Clearing the data store between tests
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在测试之间清除数据存储
- en: By the end of the chapter, you’ll have a good understanding of how to implement
    form validation using a test-driven approach.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将很好地理解如何使用测试驱动的方法实现表单验证。
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code for the chapter can be found online at [https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter05/Start](https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter05/Start).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在网上找到，地址为[https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter05/Start](https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter05/Start)。
- en: Adding a Playwright test for validating form errors
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个Playwright测试来验证表单错误
- en: In this section we’ll write another Playwright test and then do some up-front
    planning for the Vitest unit tests we’ll need.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将编写另一个Playwright测试，并为所需的Vitest单元测试做一些前期规划。
- en: 'Here’s the next end-to-end test, which you can now add to `tests/birthdays.test.js`.
    It fills in the birthday form, just as in the previous chapter, but this time,
    the `invalid`: it is, literally, the word `invalid`, which is not a valid date
    of birth:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是下一个端到端测试，你现在可以将其添加到`tests/birthdays.test.js`中。它填写生日表单，就像上一章一样，但这次，`invalid`实际上就是单词`invalid`，它不是一个有效的出生日期：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let’s think about the error message for a second: `Please provide a date of
    birth in the YYYY-MM-DD format`. In the interest of brevity, we’re not going fully
    test-drive this; rather, we’ll just accept anything that can be parsed by the
    in-built `Date.parse` function. It turns out that a lot of strings can be parsed
    by this function.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们思考一下错误信息：`请提供YYYY-MM-DD格式的出生日期`。为了简洁起见，我们不会完全进行测试驱动；相反，我们只会接受可以被内置的`Date.parse`函数解析的任何内容。结果证明，许多字符串都可以被这个函数解析。
- en: Beyond that, what else will be needed to make this work? Our form action should
    use SvelteKit’s `fail` function to signal to SvelteKit that the form needs to
    be re-evaluated. We call it with an `422` – the *Unprocessable entity* error code
    – meaning the request data was invalid.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些，还需要什么才能使这个功能正常工作？我们的表单操作应该使用SvelteKit的`fail`函数来通知SvelteKit表单需要重新评估。我们使用`422`
    – *不可处理的实体*错误代码，这意味着请求数据无效。
- en: 'The `fail` function can also return an object that is passed back to the client.
    It is given to our page component as a `form` prop. The object is a plain JavaScript
    object that we control. We can return whatever we want in it: all we have to do
    is call SvelteKit’s `fail` function with the object, and it will return that to
    the client.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`fail`函数还可以返回一个对象，该对象将传递回客户端。它作为`form`属性传递给我们的页面组件。该对象是一个我们控制的普通JavaScript对象。我们可以返回我们想要的任何内容：我们只需要调用SvelteKit的`fail`函数并传递该对象，它就会将其返回给客户端。'
- en: Valid return objects
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的返回对象
- en: The return object is only valid if it can be serialized into a string and reconstructed
    in the browser. Functions can’t be serialized, so they can’t be passed back.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的对象只有在可以被序列化为字符串并在浏览器中重建时才是有效的。函数不能序列化，因此不能传递回。
- en: We can include an `error` property that returns an error message. We can also
    return the `name` and `dob` properties so that they can be presented to the user
    again.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以包含一个返回错误信息的`error`属性。我们还可以返回`name`和`dob`属性，以便它们可以再次呈现给用户。
- en: 'An example object looks like this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例对象看起来像这样：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the remaining sections, we’ll start by updating the `BirthdayForm` component
    to make use of this new `form` prop. Then, we’ll update the form action to return
    the validation errors for two different validation errors: an empty name and an
    invalid date of birth.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在剩余的部分，我们将首先更新 `BirthdayForm` 组件以使用这个新的 `form` 属性。然后，我们将更新表单操作以返回两个不同的验证错误：一个空的名字和一个无效的出生日期。
- en: Displaying SvelteKit form errors
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示 SvelteKit 表单错误
- en: In this section, we’ll add tests and functionality to support passing in a new
    `form` prop into the `BirthayForm` component.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将添加测试和功能以支持将新的 `form` 属性传递给 `BirthayForm` 组件。
- en: 'Let’s start with a new test:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个新的测试开始：
- en: 'In the `src/routes/birthdays/BirthdayForm.test.js` file, add a new nested `describe`
    block with a single test, as shown in the following code snippet. It checks that
    if the `error` property is set on the `form` prop, then that error must be displayed
    somewhere on the page:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/routes/birthdays/BirthdayForm.test.js` 文件中，添加一个新的嵌套 `describe` 块，其中包含一个测试，如下面的代码片段所示。它检查如果
    `error` 属性设置在 `form` 属性上，那么那个错误必须在页面上某处显示：
- en: '[PRE2]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Make that pass in `src/routes/birthdays/BirthdayForm.svelte`, first by adding
    an `export` statement for the new `form` prop and then by adding a new `p` element
    with the error text. You can also add the `<style>` element at the bottom, although
    this isn’t necessary for the test to pass:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/routes/birthdays/BirthdayForm.svelte` 中使那通过，首先添加一个用于新 `form` 属性的 `export`
    语句，然后添加一个包含错误文本的新 `p` 元素。你还可以在底部添加 `<style>` 元素，尽管这对于测试通过不是必需的：
- en: '[PRE3]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you run tests now, you’ll see we’ve broken a bunch of other tests by requiring
    the `form` prop to have an object value. But for the *create* mode of this component,
    the `form` prop should remain undefined. Update the `BirthdayForm` component as
    shown in the following code block:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你现在运行测试，你会看到我们通过要求 `form` 属性具有对象值而破坏了其他一些测试。但在这个组件的 *创建* 模式下，`form` 属性应该保持未定义。按照以下代码块更新
    `BirthdayForm` 组件：
- en: '[PRE4]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let’s add the next test in the same `describe` block. This test checks that
    if an error occurs, we re-populate the `name` text field with the same value as
    was passed in:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在同一个 `describe` 块中添加下一个测试。这个测试检查如果发生错误，我们将使用与传递的相同值重新填充 `name` 文本字段：
- en: '[PRE5]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To make that pass, simply add a `value` attribute value to the `input` field:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使那通过，只需向 `input` 字段添加一个 `value` 属性值：
- en: '[PRE6]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now repeat that for the `dob` field:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在为 `dob` 字段重复那个操作：
- en: '[PRE7]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Make that pass by adding the `value` attribute on the `dob` field:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在 `dob` 字段上添加 `value` 属性使那通过：
- en: '[PRE8]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you run the app now, you’ll see that in *create* mode, the `undefined` string
    value now appears for the `form` is `undefined` in *create* mode, and therefore
    `value` is `undefined`. And the browser converts that to a string, giving `undefined`
    in the text box. To fix that, we need to specify an initial value for the fields.
    In the `BirthdayForm` test suite, find the `describe` block for the `name` field
    and add a second test into it, as shown in the following code block:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你现在运行应用程序，你会看到在 *创建* 模式下，当 `form` 是 `undefined` 时，`undefined` 字符串值现在出现在 `form`
    上，因此 `value` 是 `undefined`。浏览器将其转换为字符串，在文本框中给出 `undefined`。为了修复这个问题，我们需要为字段指定一个初始值。在
    `BirthdayForm` 测试套件中，找到 `name` 字段的 `describe` 块，并在其中添加一个第二个测试，如下面的代码块所示：
- en: '[PRE9]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To make that pass, update the `value` attribute, like this:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使那通过，更新 `value` 属性，如下所示：
- en: '[PRE10]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, repeat that for `date of birth field`, starting with the test shown here:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，从下面的测试开始，对 `date of birth field` 重复那个操作：
- en: '[PRE11]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, make that test pass by setting the `value` attribute on the `dob`
    field in the same way:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，通过在 `dob` 字段上设置 `value` 属性以同样的方式使那个测试通过：
- en: '[PRE12]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: That completes the `BirthdayForm` component changes. Next, we need to get the
    `form` prop into `BirthdayForm` from the page component.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了 `BirthdayForm` 组件的更改。接下来，我们需要从页面组件获取 `form` 属性到 `BirthdayForm`。
- en: Passing the form data through the page component
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过页面组件传递表单数据
- en: 'The `BirthdayForm` component is not the *root* route component: it is instantiated
    as a child component from the component in `+page.svelte`.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`BirthdayForm` 组件不是 *根* 路由组件：它作为 `+page.svelte` 中的组件的子组件实例化。'
- en: 'Follow these steps to ensure that the `form` prop is received by the `page`
    component and passed into the `BirthdayForm` component:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤确保 `form` 属性被 `page` 组件接收并传递给 `BirthdayForm` 组件：
- en: 'In `src/routes/birthdays/page.test.js`, add a new test at the bottom of the
    test suite, as shown in the following code snippet. It checks that if the `form`
    prop is sent with the `error` prop, the `error` text appears onscreen:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/routes/birthdays/page.test.js` 文件中，在测试套件的底部添加一个新的测试，如下面的代码片段所示。它检查如果发送了带有
    `error` 属性的 `form` 属性，错误文本将显示在屏幕上：
- en: '[PRE13]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Because the page component is already rendering `BirthdayForm`, it turns out
    the simplest way to make this test pass is to pass the `form` prop into `BirthdayForm`.
    In [*Chapter 12*](B19611_12.xhtml#_idTextAnchor134)*, Using Component Mocks* *to*
    *Clarify Tests*, we’ll see how this test can be rewritten using component mocks.
    For now, though, in `src/routes/birthdays/+page.svelte`, update the component
    to declare the `form` prop, and then pass it directly into `BirthdayForm`:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于页面组件已经渲染了 `BirthdayForm`，因此使这个测试通过的最简单方法是传递 `form` 属性到 `BirthdayForm`。在 [*第12章*](B19611_12.xhtml#_idTextAnchor134)，*使用组件模拟来澄清测试*，我们将看到如何使用组件模拟重写这个测试。不过，现在，在
    `src/routes/birthdays/+page.svelte` 文件中，更新组件以声明 `form` 属性，然后直接将其传递给 `BirthdayForm`：
- en: '[PRE14]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You’ve now learned how to use automated tests to drive the display of form errors.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经学会了如何使用自动化测试来驱动表单错误的显示。
- en: In the next section, we’ll write tests for the form action that occurs on the
    server side.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将编写针对服务器端发生的表单操作的测试。
- en: Validating data in the form action
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在表单操作中验证数据
- en: 'Now we’re all set up for errors on the client, but we need the server code
    to actually do the validation checks. We’ll add two checks: one to check that
    the name is not empty, and one to check that the date can be parsed into a valid
    `Date` object.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为客户端的错误做好了准备，但我们还需要服务器代码实际执行验证检查。我们将添加两个检查：一个检查名称是否不为空，另一个检查日期是否可以解析为有效的
    `Date` 对象。
- en: 'Each of these checks needs four unit tests: the first to ensure we break early
    without adding the birthday; the next to check the `422` error code; then one
    to check the error message text; and finally, one to check that the original data
    is passed back. (In [*Chapter 8*](B19611_08.xhtml#_idTextAnchor100), *Creating
    Matchers to Simplify Tests*, you’ll see how to build a matcher that will roll
    up three of these tests into one single test.)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这些检查需要四个单元测试：第一个测试确保我们在不添加生日的情况下提前退出；下一个测试检查 `422` 错误代码；然后一个测试检查错误信息文本；最后，一个测试检查原始数据是否被返回。（在
    [*第8章*](B19611_08.xhtml#_idTextAnchor100)，*创建匹配器以简化测试*，你将看到如何构建一个可以将这三个测试合并为一个单一测试的匹配器。）
- en: The beforeEach function
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`beforeEach` 函数'
- en: This section introduces the `beforeEach` function, which is used to run setup
    code before each of the tests within the `describe` block. It is a useful tool
    for reducing duplication within your test suites. You can consider it as part
    of the **Arrange** phase of your tests.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍了 `beforeEach` 函数，该函数用于在 `describe` 块内的每个测试之前运行设置代码。它是减少测试套件中重复的有用工具。你可以将其视为测试的
    **安排** 阶段的一部分。
- en: The `beforeAll`, `afterEach`, and `afterAll` functions do similar jobs but are
    used less frequently. We used the `afterEach` function for initialization in [*Chapter
    1*](B19611_01.xhtml#_idTextAnchor015),*Setting up for Testing*, and we’ll use
    `beforeAll` in [*Chapter 8*](B19611_08.xhtml#_idTextAnchor100), *Creating Matchers
    to* *Simplify Tests*.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`beforeAll`、`afterEach` 和 `afterAll` 函数执行类似的工作，但使用频率较低。我们在 [*第1章*](B19611_01.xhtml#_idTextAnchor015)，*为测试做准备*
    中使用了 `afterEach` 函数进行初始化，我们将在 [*第8章*](B19611_08.xhtml#_idTextAnchor100)，*创建匹配器以简化测试*
    中使用 `beforeAll`。'
- en: 'Let’s get started:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧：
- en: 'In `src/routes/birthdays/page.server.test.js`, add a new import for the `beforeEach`
    function. We’ll use this to perform the setup for an entire set of tests:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src/routes/birthdays/page.server.test.js` 文件中，为 `beforeEach` 函数添加一个新的导入。我们将使用这个函数来为整个测试集进行设置：
- en: '[PRE15]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then add a nested `''validation errors''` describe block, together with another
    nested describe block entitled `''when the name is not provided''`, as shown here.
    This includes the first test, too:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然后添加一个嵌套的 `'validation errors'` `describe` 块，以及另一个嵌套的标题为 `'when the name is
    not provided'` 的 `describe` 块，如下所示。这包括第一个测试：
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The when… context
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`when…` 上下文'
- en: The `when` style of naming the `describe` contexts is common when a group of
    tests belongs to a specific starting scenario, such as the one shown in the preceding
    scenario. They often have a `beforeEach` block that contains a setup that is common
    to all the tests.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当一组测试属于特定的起始场景时，例如前面场景所示，使用 `when` 风格命名 `describe` 上下文是常见的。它们通常包含一个包含所有测试的共同设置的
    `beforeEach` 块。
- en: It can sometimes be tempting to have multiple levels of nesting, but for simplicity,
    it’s best to keep a single level of the `when...` context blocks. The preceding
    example shows an outer block named `'validation errors'`, but that is for organization
    only and contains none of its own setup.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候可能会有多个嵌套层级，但为了简单起见，最好只保留一个层级的`when...`上下文块。前面的例子显示了一个名为`'validation errors'`的外部块，但这只是为了组织，并不包含任何自己的设置。
- en: 'Then, in the `src/routes/birthdays/+page.server.js` file, update `actions`
    with a new `name` field is empty:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`src/routes/birthdays/+page.server.js`文件中，更新`actions`中的新`name`字段为空：
- en: '[PRE17]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'For that to work, you’ll need a definition of the `empty` function, which you
    can define as shown:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使其工作，您需要一个`empty`函数的定义，您可以像下面这样定义：
- en: '[PRE18]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Taking shortcuts
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 简化操作
- en: You might observe that we haven’t fully tested the `empty` function, such as
    what happens if a line of spaces is sent in. To avoid having to write even more
    tests within this chapter, I’ve not written out those tests. If this were a real
    application, I’d move `empty` to a file of its own and then provide a whole bunch
    of unit tests that run directly against it.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会观察到我们没有完全测试`empty`函数，例如，如果发送了一行空格会发生什么。为了避免在本章中编写更多的测试，我没有列出那些测试。如果这是一个真实的应用程序，我会将`empty`移动到自己的文件中，然后提供一大堆直接针对它的单元测试。
- en: 'For the next test, we’ll write a test that ensures the form returns a `422`
    response. Add this test into the same nested `describe` block:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于下一个测试，我们将编写一个测试来确保表单返回`422`响应。将此测试添加到同一嵌套的`describe`块中：
- en: '[PRE19]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To make that pass, first add the following `import` statement in the `src/routes/birthdays/+page.server.js`
    file:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使它通过，首先在`src/routes/birthdays/+page.server.js`文件中添加以下`import`语句：
- en: '[PRE20]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then update the guard clause to return a value using `fail`:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后更新保护子句以使用`fail`返回一个值：
- en: '[PRE21]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, still in the same nested `describe` block, add a test for the error message:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，仍然在同一嵌套的`describe`块中，添加一个测试来检查错误消息：
- en: '[PRE22]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Make that pass by adding a `return` object as the second parameter to the `fail`
    call:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将`return`对象作为`fail`调用的第二个参数添加来使它通过：
- en: '[PRE23]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then add the final test for this name check, which is that we continue to pass
    the `dob` field value back, too:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后添加此名称检查的最后一个测试，即我们继续传递`dob`字段值：
- en: '[PRE24]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Complete the guard clause, as shown in the following code snippet. For this,
    you’ll need to pull out the `dob` field in the same way you did with `name`:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成保护子句，如下面的代码片段所示。为此，您需要以与`name`相同的方式提取`dob`字段：
- en: '[PRE25]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now let’s start on the second check for a `date` value that can’t be parsed.
    This behaves exactly the same as the previous check, just with different values
    for the form data:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们开始对无法解析的`date`值进行第二个检查。这的行为与之前的检查完全相同，只是表单数据有不同的值：
- en: '[PRE26]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To make that pass, first define an `invalidDob` helper next to the `empty`
    helper:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使它通过，首先在`empty`辅助函数旁边定义一个`invalidDob`辅助函数：
- en: '[PRE27]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Then, update the form action with a new guard clause:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，更新表单操作以包含一个新的保护子句：
- en: '[PRE28]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then, repeating the motions from *step 4* onwards, add a test to ensure that
    a `422` response is returned:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，从*步骤4*开始重复动作，添加一个测试以确保返回`422`响应：
- en: '[PRE29]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'To make that pass, update the `return` statement like this:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使它通过，更新`return`语句如下：
- en: '[PRE30]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Next, add a test for a useful message to be returned:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加一个测试来确保返回一个有用的消息：
- en: '[PRE31]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Update the guard clause to display that message:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新保护子句以显示该消息：
- en: '[PRE32]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'For the final test, we check that *all* the data is returned, including the
    invalid date. This is so that the user has the opportunity to correct the data:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于最终测试，我们检查是否返回了所有数据，包括无效日期。这样用户就有机会更正数据：
- en: '[PRE33]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'And make that pass by passing in the `name` and `dob` properties to the failure
    object. At this point, all your tests should be passing:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将`name`和`dob`属性传递给失败对象来使它通过。此时，所有测试都应通过：
- en: '[PRE34]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now, as a final, tiny *refactor* step, you can update the call to `addNew`
    so that it uses the form data values that you’ve already pulled out from previous
    steps:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，作为最后的微小*重构*步骤，您可以更新对`addNew`的调用，使其使用您在前面步骤中已经提取的表单数据值：
- en: '[PRE35]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: That completes test-driving the server-side validation. Your Vitest tests and
    the Playwright test will now pass. You can also try out the app by running the
    dev server (with the `npm run dev` command) and opening your browser.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就完成了服务器端验证的测试驱动。您的Vitest测试和Playwright测试现在应该通过。您也可以通过运行开发服务器（使用`npm run dev`命令）并在浏览器中打开应用程序来尝试应用程序。
- en: In the final section of this chapter, we’ll fix a bug that’s crept into our
    test suites.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后部分，我们将修复测试套件中悄悄出现的错误。
- en: Clearing the data store between tests
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在测试之间清除数据存储
- en: 'It turns out our tests are not independent: changes to the `db` object in one
    test affect the other tests, too. We have to clear down our test database between
    each run. We can solve that by creating a `clear` function that will clear the
    database object, and we’ll use a `beforeEach` block to call it before every test.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 结果表明，我们的测试并不是独立的：一个测试中对`db`对象的更改也会影响其他测试。我们不得不在每次运行之间清除我们的测试数据库。我们可以通过创建一个清除数据库对象的`clear`函数来解决，我们将在每个测试之前使用`beforeEach`块来调用它。
- en: 'What we need is the `clear` function that we can call directly in our tests.
    However, if you try to add this function to the `+page.server.js` file, you’ll
    get a warning from SvelteKit when you run your Playwright tests:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要的是一个可以直接在我们的测试中调用的`clear`函数。然而，如果你尝试将这个函数添加到`+page.server.js`文件中，当你运行Playwright测试时，SvelteKit会发出警告：
- en: '[PRE36]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Why does this error appear only in the Playwright tests and not the Vitest tests?
    Your Vitest tests do not run through the SvelteKit server code, so the framework
    has no opportunity to check for invalid exports. It’s only when you run tests
    via Playwright that you’ll see runtime issues such as this.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这个错误只在Playwright测试中出现，而不是在Vitest测试中出现？你的Vitest测试不会运行通过SvelteKit服务器代码，因此框架没有机会检查无效的导出。只有当你通过Playwright运行测试时，你才会看到这样的运行时问题。
- en: 'SvelteKit only wants a `load` export and an `actions` export and absolutely
    nothing else. So, we need to move things out of the action and into their own
    file:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: SvelteKit只需要一个`load`导出和一个`actions`导出，绝对不需要其他任何东西。因此，我们需要将东西从动作中移出，放入它们自己的文件中：
- en: 'Create a new file, `src/lib/server/birthdayRepository.js`, with the following
    content:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新文件，`src/lib/server/birthdayRepository.js`，内容如下：
- en: '[PRE37]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In `src/routes/birthdays/+page.server.js`, you can now import those, as shown
    in the following code block. Note the use of the `$` symbol in front of the file
    path, which is used to make a location that is relative to the `src` folder, which
    avoids us having to write `../../` before the filename:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/routes/birthdays/+page.server.js`中，你现在可以像以下代码块所示导入它们。注意文件路径前使用`$`符号，这是用来创建一个相对于`src`文件夹的位置，这样我们就不需要在文件名前写`../../`：
- en: '[PRE38]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Then delete the `db` and `addNew` functions and update the `load` function
    to read as follows. At this point, all your tests (except for the skipped one)
    should still be passing:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后删除`db`和`addNew`函数，并将`load`函数更新如下。此时，除了跳过的测试外，所有测试都应该仍然通过：
- en: '[PRE39]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now you can add this new `import` statement in `src/routes/birthdays/page.server.test.js`:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以在`src/routes/birthdays/page.server.test.js`中添加这个新的`import`语句：
- en: '[PRE40]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Add in the `beforeEach` statement, as shown in the following code block:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`beforeEach`语句，如下面的代码块所示：
- en: '[PRE41]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Finally, in the action `describe` block, you can now also replace the use of
    `load` with `birthdayRepository.getAll`, which makes the test a little clearer
    as to what’s actually being tested: that the form action causes a new birthday
    to be inserted into the `birthdayRepository` object:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`describe`动作块中，你现在也可以用`birthdayRepository.getAll`替换`load`的使用，这使得测试更清晰地表明实际测试的内容：表单动作会将一个新的生日插入到`birthdayRepository`对象中：
- en: '[PRE42]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: In the last step, take care not to replace *all* the occurrences of `load`.
    In the second `describe` block, it’s the `load` function that is the function
    under test. Therefore, we keep those tests exactly as they are.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一步，请注意不要替换`load`的所有出现。在第二个`describe`块中，`load`函数是受测试的函数。因此，我们保留那些测试保持原样。
- en: That completes all the work involved in extracting the repository module. Doing
    so has enabled us to introduce a `clear` function that can be used to keep our
    tests independent of each other. The `beforeEach` block ensures that each test
    starts from a clean slate.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就完成了提取仓库模块所需的所有工作。这样做使我们能够引入一个`clear`函数，可以用来保持我们的测试相互独立。`beforeEach`块确保每个测试都是从一张白纸开始的。
- en: Summary
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter has involved writing many more unit tests than previous chapters.
    Sometimes, unit tests need to be very detailed, particularly when it comes to
    testing very specific return values. In [*Chapter 8*](B19611_08.xhtml#_idTextAnchor100),
    *Creating Matchers to Simplify Tests*, we’ll look at ways of reducing the number
    of tests required.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涉及编写的单元测试比之前的章节要多得多。有时，单元测试需要非常详细，尤其是在测试非常具体的返回值时。在第8章[*创建匹配器以简化测试*](B19611_08.xhtml#_idTextAnchor100)中，我们将探讨减少所需测试数量的方法。
- en: You’ve also seen why it’s important for unit tests to run independently and
    how to ensure your SvelteKit route tests clear their data between each test using
    the `beforeEach` function.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 你也看到了为什么单元测试需要独立运行的重要性，以及如何使用`beforeEach`函数确保你的SvelteKit路由测试在每次测试之间清除数据。
- en: In the next chapter, you’ll learn how to extend the current `BirthdayForm` component
    to handle editing existing birthdays in addition to adding new birthdays.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何扩展当前的`BirthdayForm`组件，使其能够处理编辑现有生日，除了添加新生日。
