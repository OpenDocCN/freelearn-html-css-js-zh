["```js\nconst textureLoader = new THREE.TextureLoader(); \nconst texture = textureLoader.load\n  ('/assets/textures/ground/ground_0036_color_1k.jpg')\n```", "```js\nConst textureLoader = new THREE.TextureLoader(); \nconst texture = textureLoader.load\n  ('/assets/textures/ground/ground_0036_color_1k.jpg',\n            onLoadFunction, \n            onProgressFunction,\n            onErrorFunction)\n```", "```js\nconst material = new THREE.MeshPhongMaterial({ color: \n  0xffffff })\nmaterial.map = texture\n```", "```js\nconst loader = new THREE.EXRLoader(); \nexrTextureLoader.load('/assets/textures/exr/Rec709.exr')\n...\nconst hdrTextureLoader = new THREE.RGBELoader(); \nhdrTextureLoader.load('/assets/textures/hdr/\n  dani_cathedral_oBBC.hdr')\n```", "```js\nconst exrLoader = new EXRLoader()\nconst colorMap = exrLoader.load('/assets/textures/brick-wall/brick_wall_001_diffuse_2k.exr', (texture) => {\n  texture.wrapS = THREE.RepeatWrapping\n  texture.wrapT = THREE.RepeatWrapping\n  texture.repeat.set(4, 4)\n})\nconst bumpMap = new THREE.TextureLoader().load(\n  '/assets/textures/brick-wall/brick_wall_001_displacement_2k.png',\n  (texture) => {\n    texture.wrapS = THREE.RepeatWrapping\n    texture.wrapT = THREE.RepeatWrapping\n    texture.repeat.set(4, 4)\n  }\n)\nconst material = new THREE.MeshPhongMaterial({ color: \n  0xffffff })\nmaterial.map = colorMap\nmaterial.bumpMap = bumpMap\n```", "```js\nconst colorMap = new THREE.TextureLoader().load('/assets/textures/red-bricks/red_bricks_04_diff_1k.jpg', (texture) => {\n  texture.wrapS = THREE.RepeatWrapping\n  texture.wrapT = THREE.RepeatWrapping\n  texture.repeat.set(4, 4)\n})\nconst normalMap = new THREE.TextureLoader().load(\n  '/assets/textures/red-bricks/red_bricks_04_nor_gl_1k.jpg',\n  (texture) => {\n    texture.wrapS = THREE.RepeatWrapping\n    texture.wrapT = THREE.RepeatWrapping\n    texture.repeat.set(4, 4)\n  }\n)\nconst material = new THREE.MeshPhongMaterial({ color: \n  0xffffff })\nmaterial.map = colorMap\nmaterial.normalMap = normalMap\n```", "```js\nconst colorMap = new THREE.TextureLoader().load('/assets/textures/displacement\n  /w_c.jpg', (texture) => {\n  texture.wrapS = THREE.RepeatWrapping\n  texture.wrapT = THREE.RepeatWrapping\n})\nconst displacementMap = new THREE.TextureLoader().load('/assets/textures/displacement\n  /w_d.png', (texture) => {\n  texture.wrapS = THREE.RepeatWrapping\n  texture.wrapT = THREE.RepeatWrapping\n})\nconst material = new THREE.MeshPhongMaterial({ color: \n  0xffffff })\nmaterial.map = colorMap\nmaterial.displacementMap = displacementMap\n```", "```js\nconst aoMap = new THREE.TextureLoader().load('/assets/gltf/material_\n  ball_in_3d-coat/aoMap.png')\nconst material = new THREE.MeshPhongMaterial({ color: \n  0xffffff })\nmaterial.aoMap = aoMap\nmaterial.aoMap.flipY = false\n```", "```js\nconst k = mesh.geometry\nconst uv1 = k.getAttribute('uv')\nconst uv2 = uv1.clone()\nk.setAttribute('uv2', uv2)\n```", "```js\nConst textureLoader = new THREE.TextureLoader()\nconst colorMap = textureLoader.load('/assets/textures/wood/\n  abstract-antique-backdrop-164005.jpg')\nconst lightMap = textureLoader.load('/assets/gltf/\n  material_ball_in_3d-coat/lightMap.png')\nconst material = new THREE.MeshBasicMaterial({ color: \n  0xffffff })\nmaterial.map = colorMap\nmaterial.lightMap = lightMap\nmaterial.lightMap.flipY = false\n```", "```js\nconst metalnessTexture = new THREE.TextureLoader().load(\n  '/assets/textures/engraved/Engraved_Metal_003_ROUGH.jpg',\n  (texture) => {\n    texture.wrapS = THREE.RepeatWrapping\n    texture.wrapT = THREE.RepeatWrapping\n    texture.repeat.set(4, 4)\n  }\n)\nconst material = new THREE.MeshStandardMaterial({ color: \n  0xffffff })\nmaterial.metalnessMap = metalnessTexture\n...\nconst roughnessTexture = new THREE.TextureLoader().load(\n  '/assets/textures/marble/marble_0008_roughness_2k.jpg',\n  (texture) => {\n    texture.wrapS = THREE.RepeatWrapping\n    texture.wrapT = THREE.RepeatWrapping\n    texture.repeat.set(2, 2)\n  }\n)\nconst material = new THREE.MeshStandardMaterial({ color: \n  0xffffff })\nmaterial.roughnessMap = roughnessTexture\n```", "```js\nconst alphaMap = new THREE.TextureLoader().load('/assets/\n  textures/alpha/partial-transparency.png', (texture) => {\n  texture.wrapS = THREE.RepeatWrapping\n  texture.wrapT = THREE.RepeatWrapping\n  texture.repeat.set(4, 4)\n})\nconst material = new THREE.MeshPhongMaterial({ color: \n  0xffffff })\nmaterial.alphaMap = alphaMap\nmaterial.transparent = true\n```", "```js\nconst emissiveMap = new   THREE.TextureLoader().load\n  ('/assets/textures/lava/lava.png', (texture) => {\n  texture.wrapS = THREE.RepeatWrapping\n  texture.wrapT = THREE.RepeatWrapping\n  texture.repeat.set(4, 4)\n})\nconst roughnessMap = new THREE.TextureLoader().load\n  ('/assets/textures/lava/lava-smoothness.png', (texture) => {\n  texture.wrapS = THREE.RepeatWrapping\n  texture.wrapT = THREE.RepeatWrapping\n  texture.repeat.set(4, 4)\n})\nconst normalMap = new THREE.TextureLoader().load\n  ('/assets/textures/lava/lava-normals.png', (texture) => {\n  texture.wrapS = THREE.RepeatWrapping\n  texture.wrapT = THREE.RepeatWrapping\n  texture.repeat.set(4, 4)\n})\nconst material = new THREE.MeshPhongMaterial({ color: \n  0xffffff })\nmaterial.normalMap = normalMap\nmaterial.roughnessMap = roughnessMap\nmaterial.emissiveMap = emissiveMap\nmaterial.emissive = new THREE.Color(0xffffff)\nmaterial.color = new THREE.Color(0x000000)\n```", "```js\nconst colorMap = new THREE.TextureLoader().load\n  ('/assets/textures/specular/Earth.png')\nconst specularMap = new THREE.TextureLoader().load\n  ('/assets/textures/specular/EarthSpec.png')\nconst normalMap = new THREE.TextureLoader().load\n  ('/assets/textures/specular/EarthNormal.png')\nconst material = new THREE.MeshPhongMaterial({ color: \n  0xffffff })\nmaterial.map = colorMap\nmaterial.specularMap = specularMap\nmaterial.normalMap = normalMap\n```", "```js\nconst cubeMapFlowers = new THREE.CubeTextureLoader().load([\n  '/assets/textures/cubemap/flowers/right.png',\n  '/assets/textures/cubemap/flowers/left.png',\n  '/assets/textures/cubemap/flowers/top.png',\n  '/assets/textures/cubemap/flowers/bottom.png',\n  '/assets/textures/cubemap/flowers/front.png',\n  '/assets/textures/cubemap/flowers/back.png'\n])\nconst material = new THREE.MeshPhongMaterial({ color: \n  0x777777 }\nmaterial.envMap = cubeMapFlowers\nmaterial.mapping = THREE.CubeReflectionMapping\n```", "```js\nscene.background = cubeMapFlowers\n```", "```js\nconst cubeMapEqui = new THREE.TextureLoader().load\n  ('/assets/equi.jpeg')\nconst material = new THREE.MeshPhongMaterial({ color: \n  0x777777 }\nmaterial.envMap = cubeMapEqui\nmaterial.mapping = THREE.EquirectangularReflectionMapping\nscene.background = cubeMapFlowers\n```", "```js\n cubeMap.mapping = THREE.CubeRefractionMapping\n```", "```js\nconst cubeRenderTarget = new THREE.WebGLCubeRenderTarget\n  (128, {\n  generateMipmaps: true,\n  minFilter: THREE.LinearMipmapLinearFilter\n})\nconst cubeCamera = new THREE.CubeCamera(0.1, 10, cubeRenderTarget)\ncubeCamera.position.copy(mesh.position); \nscene.add(cubeCamera);\n```", "```js\ncubeMaterial.envMap = cubeRenderTarget.texture;\n```", "```js\nconst render = () => {\n...\nmesh.visible = false; \ncubeCamera.update(renderer, scene); \nmesh.visible = true;\nrequestAnimationFrame(render); \nrenderer.render(scene, camera);\n....\n}\n```", "```js\nmesh.material.map.wrapS = THREE.RepeatWrapping; \nmesh.material.map.wrapT = THREE.RepeatWrapping;\n```", "```js\nmesh.material.map.repeat.set(repeatX, repeatY);\n```", "```js\nimport Mandelbrot from 'mandelbrot-canvas'\n...\nconst div = document.createElement('div')\ndiv.id = 'mandelbrot'\ndiv.style = 'position: absolute'\ndocument.body.append(div)\nconst mandelbrot = new Mandelbrot(document.getElementById('mandelbrot'), {\n  height: 300,\n  width: 300,\n  magnification: 100\n})\nmandelbrot.render()\n```", "```js\nconst material = new THREE.MeshPhongMaterial({\n  color: 0xffffff,\n  map: new THREE.Texture(document.querySelector\n    ('#mandelbrot canvas'))\n})\nmaterial.map.needsUpdate = true\n```", "```js\nimport generator from 'perlin'\nvar canvas = document.createElement('canvas')\ncanvas.className = 'myClass'\nconst size = 512\ncanvas.style = 'position:absolute;'\ncanvas.width = size\ncanvas.height = size\ndocument.body.append(canvas)\nconst ctx = canvas.getContext('2d')\nfor (var x = 0; x < size; x++) {\n  for (var y = 0; y < size; y++) {\n    var base = new THREE.Color(0xffffff)\n    var value = (generator.noise.perlin2(x / 8, y / 8) + 1) / 2\n    base.multiplyScalar(value)\n    ctx.fillStyle = '#' + base.getHexString()\n    ctx.fillRect(x, y, 1, 1)\n  }\n}\n```", "```js\nconst material = new THREE.MeshPhongMaterial({\n  color: 0xffffff,\n  bumpMap: new THREE.Texture(canvas)\n})\nmaterial.bumpMap.needsUpdate = true\n```", "```js\nconst videoString = `\n<video\n  id=\"video\"\n  src=\"img/Big_Buck_Bunny_small.ogv\"\n  controls=\"true\"\n</video>\n`\nconst div = document.createElement('div')\ndiv.style = 'position: absolute'\ndocument.body.append(div)\ndiv.innerHTML = videoString\n```", "```js\nconst video = document.getElementById('video')\nconst texture = new THREE.VideoTexture(video)\nconst material = new THREE.MeshStandardMaterial({\n  color: 0xffffff,\n  map: texture\n})\n```"]