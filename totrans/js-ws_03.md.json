["```js\n\"Blue\" + \"Moon\"\n\"Blue\" + \" \" + \"Moon\"\n\"$\" + 100 * .10 + \" discount\"\n```", "```js\n\"BlueMoon\"\n\"Blue Moon\"\n\"$10 discount\"\n```", "```js\n1 + 2 * 3\n(1 + 2) * 3\n10 + 10 * 5 + 5\n(10 + 10) * (5 + 5)\n```", "```js\n7 \n9\n65\n100\n```", "```js\ntypeof 100\nTypeOf 100\ntypeof \"100\"\ntypeof true\ntypeof (1 > 2)\ntypeof (2 + \" dozen eggs\")\n```", "```js\nnumber\nUncaught SyntaxError: …\nboolean\nboolean\nstring\nstring\n```", "```js\n    > 200 + 200\n    \\\\output\n    < 400\n    ```", "```js\n    > 1000 / 4\n    \\\\Output\n    < 250\n    ```", "```js\n    > 150.75 / 3\n    \\\\Output\n    < 50.25\n    ```", "```js\n    > 100 + 100 * 2\n    \\\\Output\n    < 300\n    ```", "```js\n    > (100 + 100) * 2\n    \\\\Output\n    < 400\n    ```", "```js\n    >typeof 987.123\n    \\\\Output\n    < \"number\"\n    ```", "```js\n    > 123 456 789\n    \\\\Output\n    < Uncaught SyntaxError: Unexpected number\n    ```", "```js\n    > 100 > 200\n    \\\\Output\n    < false\n    ```", "```js\n    > 100 < 200\n    \\\\Output\n    < true\n    ```", "```js\n    > \"Albert Einstein\"\n    \\\\Output\n    < \"Albert Einstein\"\n    ```", "```js\n    > Albert Einstein\n    \\\\Output\n    < Uncaught SyntaxError: Unexpected identifier\n    ```", "```js\n    > 'The quote \"The only source of knowledge is experience\" is attributed to Albert Einstein'\n    \\\\Output\n    < The quote \"The only source of knowledge is experience\" is attributed to Albert Einstein\n    ```", "```js\n    > \"The quote \\\"The only source of knowledge is experience\\\" is attributed to Albert Einstein\"\n    \\\\Output. Notice the escape character is removed.\n    < The quote \"The only source of knowledge is experience\" is attributed to Albert Einstein\n    ```", "```js\n    > 123-456-7890\n    \\\\Output. Expression converted to number\n    < -8223\n    ```", "```js\n    > \"123-456-7890\"\n    \\\\Output\n    < \"123-456-7890\"\n    ```", "```js\n    > 100 - 10 + \" Main Street\"\n    \\\\Output. \n    < \"90 Main Street\" \n    When string is in expression JavaScript attempts to convert all other elements to a string.\n    ```", "```js\n    > \"Albert Einstein\" == \"Albert Einstein\"\n    \\\\Output\n    < true\n    ```", "```js\n    > \"Albert Einstein\" == \"ALBERT EINSTEIN\"\n    \\\\Output\n    < false\n    ```", "```js\n    > 100 == \"100\"\n    \\\\Output. Data type conversion takes place\n    < true\n    ```", "```js\n    > 100 === \"100\"\n    \\\\Output. No data type conversion\n    < false\n    ```", "```js\nvar firstName\nvar totalLikes\nvar errorMessage\nvar isSold\n```", "```js\nvar firstName = \"Albert\"\nvar totalLikes = 50\nvar errorMessage = \"Something terrible happened\"\nvar isSold = false\n```", "```js\nfirstName = \"Marie\"                         \ntotalLikes = 50\nerrorMessage = \"Something terrible happened\"\nisSold = false\n```", "```js\n    > var firstName\n    \\\\Value is expressed as undefined\n    < undefined\n    ```", "```js\n    >typeoffirstName\n    \\\\Output\n    < \"undefined\"\n    This is expected as we have not defined our variable with any value.\n    ```", "```js\n    >firstName = \"Albert\"\n    \\\\Output\n    < \"Albert\"\n    ```", "```js\n    >typeoffirstName\n    \\\\Output\n    < \"string\"\n    As expected, our input is correctly identified as beginning a string.\n    ```", "```js\n    >firstName\n    \\\\Output\n    < \"Albert\"\n    Until now, we have used strings. In the next step, we will define a new variable and store a number value in it.\n    ```", "```js\n    > var totalLikes = 50\n    \\\\Output. Console may express value when declared but before assigned\n    < undefined\n    ```", "```js\n    >totalLikes\n    \\\\Output\n    < 50\n    ```", "```js\n    >typeoftotalLikes\n    < \"number\"\n    ```", "```js\n    >totalLikes = totalLikes + 1\n    \\\\Output. New value is expressed\n    < 51\n    ```", "```js\n    >totalLikes> 100\n    < false\n    ```", "```js\n    > var isSold = false\n    \\\\Output. Console may express undefined data type when declared but before assigned.\n    < undefined\n    ```", "```js\n    >typeofisSold\n    < \"boolean\"\n    ```", "```js\ngetTotal() \nisLoggedIn()\n```", "```js\ngetCelsiusFromFahrenheit(32)\n```", "```js\ngetSearchResults(\"Pet Names\", 25)\n```", "```js\nvar amount = 100000\nvar decimals = 2\nvar decimalSeparator = \".\"\nvar thousandsSeparator = \",\"\nformatCurrency(amount, decimals, decimalSeparator, thousandsSeparator)\n```", "```js\n    >typeofgetDiceRoll\n    \\\\Expressed as a function type. It also assures us that there is a function.\n    <·function\n    ```", "```js\n    >typeofgetDiceRoll()\n    \\\\Function return value is a number. We do not see the actual value.\n    <·\"number\"\n    ```", "```js\n    >getDiceRoll()\n    \\\\Your value will be 1 to 6\\. Repeat a few times.\n    <·3\n    ```", "```js\n    > 100 * getDiceRoll()\n    \\\\Your value will be 100 to 600 Repeat a few times.\n    <·300\n    ```", "```js\n    >getDiceRoll() == 4\n    \\\\You may need to repeat a few times to get a true result.\n    <·true\n    ```", "```js\n    >getDiceRoll(2)\n    \\\\You will receive values from 2 to 12.\n    <·11\n    ```", "```js\n    >document.title\n    \\\\Output\n    << \"JavaScript Data and Expression Practice | Packt Publishing\"\n    ```", "```js\n    >document.doctype\n    \\\\Output\n    <<!doctype html>\n    ```", "```js\n    >document.lastModified\n    \\\\Your output may have a different time and date value.\n    < \"09/09/2019 21:58:25\"\n    ```", "```js\n    > var pageHeadEle = document.getElementById('page-heading')\n    \\\\Console may express undefined data type when declared but before assigned. \n    <·undefined\n    ```", "```js\n    >pageHeadEle\n    \\\\Output\n    <<div id=\"page-heading\" class=\"heading-section\">\n    <h1 class=\"center-text\">JavaScript Data and Expression Practice</h1>\n    </div>\n    ```", "```js\n    >pageHeadEle.innerHTML\n    \\\\Output\n    <·\"\n    <h1 class=\"center-text\">JavaScript Data and Expression Practice</h1>\n      \"\n    ```", "```js\n    >Math.PI\n    \\\\Output\n    < 3.141592653589793\n    ```", "```js\n    >Math.random()\n    < 0.9857480203668554\n    ```", "```js\n    >Math.random()\n    <·0.3588305599787365\n    ```", "```js\n    >Math.random()\n    <·0.45663802022566413\n    ```", "```js\n    >Math.round(10.5)\n    <·11\n    ```", "```js\n    >Math.round(10.4)\n    <·10\n    ```", "```js\n    >Math.ceil(10.5)\n    <·11\n    ```", "```js\n    >Math.ceil(10.4)\n    <·11\n    ```", "```js\n    >Math.floor(10.4)\n    <·10\n    ```", "```js\n    >Math.floor(10.6)\n    <·10\n    ```", "```js\n    >Math.floor(Math.random() * 6) + 1\n    \\\\Output\n    < 1\n    ```", "```js\nstopWatch.elapsedTime\nstopWatch.start()\nstopWatch.start()\nstopWatch.stop()\n```", "```js\n[\"Saab\", \"Ford\", \"BMW\", \"GM\"]\n```", "```js\n[\"Milk\", false, 123, document, \"Gold\", -.9876]\n```", "```js\n[price - cost, Math.random(), document.title, someVariable / 2]\n```", "```js\nlet todoList = [\n \"Wash Laundry\",\n \"Clean Silver\",\n \"Write Letters\",\n \"Purchase Groceries\",\n \"Retrieve Mail\",\n \"Prepare Dinner\"\n]\ngame.scores = [120, 175, 145, 200]\n```", "```js\nnotes = [\n [\n  \"Wash Laundry\",\n  \"Clean Silver\",\n  \"Write Letters\"\n ], 123, \"999-999-9999\"\n]\n```", "```js\nconsole.log(expression 1[, expression 2][, expression n])\n```", "```js\nconsole.log(\"Odd number count started!\");\nconsole.log(\"Iteration:\", i);\nconsole.log(\"Number:\", number);\nconsole.log(oddsCount + \" odd numbers found!\");\nconsole.log(document);\n```", "```js\nlet todoList = [\"Laundry\", \"Letters\", \"Groceries\", \"Mail\", \"Dinner\"]\n```", "```js\nlet todoList = [\n \"Laundry\",\n \"Letters\",\n \"Groceries\",\n \"Mail\",\n \"Dinner\"\n]\n```", "```js\nvar bid = 10; checkBid(bid)l\n```", "```js\n// Hide all result message elements\nmatchedMsgEle.style.display = 'none';\n```", "```js\nlet numberGuessed = parseInt(guessInputEle.value); // NaN or integer\n```", "```js\n/* This is a block comment.\nIt can span multiple lines in the file.\nCode in a comment is ignored such as the next line.\nvar profit = revenue - cost;\n */\n```", "```js\n/* This is a block comment. */\n```", "```js\n/**\n * Shuffles array elements\n * @param {array} sourceArray - Array to be shuffled.\n * @returns {array} - New array with shuffled items \n*/\nfunction getNewShuffledArray(sourceArray){\n   // Statements for function\n}\n```", "```js\n//Code block     \n{                \n   //Statement   \n   //Statement   \n   //Statement   \n}\n```", "```js\nif(boolean expression){\n   //Statement\n   //Statement\n   //Statement\n}\nif(boolean expression)\n   //Single statement\n```", "```js\n    var diceValue = Math.floor(Math.random() * 6) + 1;\n    console.log(\"Dice value:\", diceValue);\n    if(diceValue % 2 != 0){\n    console.log(\"Is an odd number.\");\n    }\n    ```", "```js\n    // Example of output if the number is odd.\n      Dice value: 3\n      Is an odd number.\n    // Example of output if the number is even.\n      Dice value: 4\n    ```", "```js\n    var diceValue = Math.floor(Math.random() * 10) + 1;\n    console.log(\"Dice value:\", diceValue);\n    console.log(\"Is an odd number.\");\n    }\n    ```", "```js\n    var diceValue = Math.floor(Math.random() * 6) + 1;\n    console.log(\"Dice value:\", diceValue);\n    if(diceValue % 2 != 0)\n    console.log(\"Is an odd number.\");\n    console.log('\"You have to be odd to be number one\", Dr. Seuss');\n    ```", "```js\n    // Example of output if the number is odd.\n      Dice value: 3\n      Is an odd number.\n      \"You have to be odd to be number one\", Dr. Seuss\n    // Example of output if the number is even.\n      Dice value: 2\n    \"You have to be odd to be number one\", Dr. Seuss\n    ```", "```js\n    console.log(\"Is an odd number.\");\n    console.log('\"You have to be odd to be number one\", Dr. Seuss');\n    }\n    ```", "```js\n    // Example of output if the number is odd. The Dr. Seuss quote is included when the value is an odd number.\n      Dice value: 3\n    Is an odd number.\n    \"You have to be odd to be number one\", Dr. Seuss\n    // Example of output if the number is even. The Dr. Seuss quote is skipped when the value is an even number.\n      Dice value: 2\n    ```", "```js\nif(boolean expression){\n   //Statement\n   //Statement\n   //Statement\n}else{\n   //Statement\n   //Statement\n   //Statement\n}\nif(boolean expression)\n   //Single statement\nelse\n   //Single statement\n```", "```js\n      var tossValue = Math.random();\n    console.log(\"Random toss value:\", tossValue);\n    if(tossValue>= .5){\n      console.log(\"Heads\");\n    }\n    ```", "```js\n    // Example of output if the number is .5 or greater.\n    Random toss value: 0.8210720135035767\n    Heads\n    // Example of output if the number is less than .5\\. \n    Random toss value: 0.4565522878478414\n    //random()gives out a different value each time\n    ```", "```js\n    if(tossValue>= .5){\n      console.log(\"Heads\");\n    }else{\n      console.log(\"Tails\");\n    }\n    ```", "```js\n    // Example of output if the number is .5 or greater.\n    Random toss value: 0.9519471939452648\n    Heads\n    // Example of output if the number is less than .5\\. \n    Random toss value: 0.07600044264786021\n    Tails\n    ```", "```js\nif(boolean expression){\n   //Statement\n   //Statement\n   //Statement\n}else if(boolean expression){\n   //Statement\n   //Statement\n   //Statement\n}else if(boolean expression){\n   //Statement\n   //Statement\n   //Statement\n}\nif(boolean expression)\n   //Single statement\nelse if(boolean expression)\n   //Single statement \nelse if(boolean expression)\n   //Single statement\n```", "```js\nif(boolean expression){      \n   //Statement\n   //Statement\n   //Statement\n}else if(boolean expression){\n   //Statement\n   //Statement\n   //Statement\n}else if(boolean expression){\n   //Statement\n   //Statement\n   //Statement\n}else{\n   //Statement\n}\nif(boolean expression)\n   //Single statement\nelse if(boolean expression)\n   //Single statement \nelse if(boolean expression)\n   //Single statement\nelse\n   //Single statement\n```", "```js\n    var target = Math.floor(Math.random() * 21) + 1;\n    var player = Math.floor(Math.random() * 21) + 1;\n    console.log(\"Target score:\", target);\n    console.log(\"Player score:\", player);\n    if (player >= target){\n     console.log(\"Player wins: beats target by \" + (player - target));\n    }else{\n     console.log(\"Player loses: misses target by \" + (target - player));\n    }\n    ```", "```js\n    Target score: 5\n    Player score: 13\n    Player wins: beats target by 8\n    ```", "```js\n    Target score: 14\n    Player score: 14\n    Player wins: beats target by 0\n    ```", "```js\n    Target score: 19\n    Player score: 1\n    Player loses: misses target by 18\n    ```", "```js\n    console.log(\"Player score:\", player);\n    if (player == target){\n     console.log(\"Player wins: ties target \" + target);\n    }else if (player > target){\n     console.log(\"Player wins: beats target by \" + (player - target);\n    }else{\n    ```", "```js\n    Target score: 7\n    Player score: 14\n    Player wins: beats target by 7\n    ```", "```js\n    Target score: 3\n    Player score: 3\n    Player wins: ties target 3\n    ```", "```js\n    Target score: 10\n    Player score: 5\n    Player loses: misses target by 5\n    ```", "```js\n    var target = Math.floor(Math.random() * 21) + 1;\n    var player = Math.floor(Math.random() * 21) + 1;\n    var lucky = Math.floor(Math.random() * 21) + 1;\n    var unlucky = Math.floor(Math.random() * 21) + 1;\n    console.log(\"Target score:\", target);\n    console.log(\"Player score:\", player);\n    console.log(\"Lucky score:\", lucky);\n    console.log(\"Unlucky score:\", unlucky);\n    ```", "```js\n    if (lucky != unlucky && player == lucky){\n     console.log(\"Player wins: matches lucky score.\");\n    }else if (player == target){\n     console.log(\"Player wins: ties target \" + target);\n    }\n    ```", "```js\n    if (lucky != unlucky && player == lucky){\n     console.log(\"Player wins: matches lucky score.\");\n    }else if (lucky != unlucky && player == unlucky){\n     console.log(\"Player loses: matches unlucky score.\");\n    }else if (player == target){\n    ```", "```js\n    Target score: 7\n    Player score: 14\n    Lucky score: 16\n    Unlucky score: 20\n    Player wins: matches lucky score\n    ```", "```js\n    Target score: 4\n    Player score: 9\n    Lucky score: 3\n    Unlucky score: 9\n    Player loses: matches unlucky score.\n    ```", "```js\n    var unlucky = Math.floor(Math.random() * 21) + 1;\n    var wallet = player * 20;\n    console.log(\"Target score:\", target);\n    console.log(\"Unlucky score:\", unlucky);\n    console.log(\"Player initial wallet:\", wallet);\n    ```", "```js\n    if (lucky != unlucky && player == lucky){\n     console.log(\"Player wins: matches lucky score.\");\n     wallet += (lucky + player) * 10;\n    ```", "```js\n    }else if (lucky != unlucky && player == unlucky){\n     console.log(\"Player loses: matches unlucky score.\");\n     wallet = 0;\n    ```", "```js\n    }else if (player == target){\n     console.log(\"Player wins: ties target \" + target);\n     wallet += (21 - target) * 10;\n    ```", "```js\n    }else if (player > target){\n     console.log(\"Player wins: beats target by \" + (player - target));\n     wallet += (player - target) * 10;\n    ```", "```js\n    }else{\n     console.log(\"Player loses: misses target by \" + (target - player));\n     wallet = Math.max(0, wallet - (target - player) * 10);\n    }\n    console.log(\"Player final wallet:\", wallet);\n    ```", "```js\n    Target score: 4\n    8 Player score: 1\n    Lucky score: 6\n    Unlucky score: 4\n    Player initial wallet: 20\n    Player loses: misses target by 3\n    Players final wallet: 0\n    ```", "```js\n    Target score: 10\n    Player score: 18\n    Lucky score: 21\n    Unlucky score: 10\n    Player initial wallet: 360\n    Player wins: beats target by 8\n    Players final wallet: 440\n    ```", "```js\n    Target score: 19\n    Player score: 19\n    Lucky score: 4\n    Unlucky score: 7\n    Player initial wallet: 380\n    Player wins: ties target 19\n    Players final wallet: 400\n    ```", "```js\n    Target score: 19\n    Player score: 1\n    Lucky score: 1\n    Unlucky score: 7\n    Player initial wallet: 20\n    Player wins: matches lucky score.\n    Players final wallet: 40\n    ```", "```js\n    Target score: 8\n    Player score: 13\n    Lucky score: 10\n    Unlucky score: 13\n    Player initial wallet: 260\n    Player loses: matches unlucky score.\n    Players final wallet: 0\n    ```", "```js\nbreak\nbreak label\n```", "```js\nswitch(expression){\n   case expression_value:      \n      //Optional statement(s)   \n      break; //optional        \n   case expression_value:      \n     //Optional statement(s)   \n      break; //optional        \n   default:      \n      //Statement(s)            \n}\n```", "```js\n    var keyNames = \"WASDwasd\";\n    var keyName = keyNames.charAt(Math.floor(Math.random() * keyNames.length));\n    console.log(\"keyName:\", keyName);\n    ```", "```js\n    keyName: a\n    keyName: S\n    ```", "```js\n    console.log(\"keyName:\", keyName); \n    switch (keyName.toLowerCase()){\n    ```", "```js\n     case \"a\":\n      console.log(\"move left\"); //This block will execute when break; // keyName is a\n     case \"d\":\n      console.log(\"move right\");//This block will execute when break; // keyName is d\n     case \"w\":\n      console.log(\"move up\");//This block will execute when break; // keyName is w\n     case \"s\":\n      console.log(\"move down\");//This block will execute when break; // keyName is s\n\n    }\n    ```", "```js\n    keyName: S\n    move down\n    keyName: d\n    move right\n    ```", "```js\n    var keyNames = \"WASDwasdIJKMijkm\"; \n    ```", "```js\n     case \"a\":\n     case \"j\":\n      console.log(\"move left\");\n      break;\n     case \"d\":\n     case \"k\":\n      console.log(\"move right\");\n      break;\n     case \"w\":\n     case \"i\":\n      console.log(\"move up\");\n      break;\n     case \"s\":\n     case \"m\":\n      console.log(\"move down\");\n      break;\n    }\n    ```", "```js\n    keyName: J\n    move left\n    keyName: w\n    move up\n    ```", "```js\n    var keyNames = \"WASDwasdIJKMijkmRTXPrtxp\";\n    ```", "```js\n     case \"m\":\n      console.log(\"move down\");\n      break;\n     default:\n      console.log(\"invalid key\");\n      break;\n    }\n    ```", "```js\n    keyName: R\n    invalid key\n    ```", "```js\nfor(initialize statement; repeat expression; post expression){\n   //Statement\n   //Statement\n}\n```", "```js\n    for(var i = 1; i<= 5; i++){\n     console.log(i);\n    }\n    ```", "```js\n    1\n    2\n    3\n    4\n    5\n    ```", "```js\n    for(var i = 5; i>= 1; i--){\n     console.log(i);\n    }\n    ```", "```js\n    5\n    4\n    3\n    2\n    1\n    ```", "```js\n    for(var i = 2; i<= 10; i+=2){\n     console.log(i);\n    }\n    ```", "```js\n    2\n    4\n    6\n    8\n    10\n    ```", "```js\ndo{\n   //Statement\n   //Statement\n} while(repeat expression\ndo\n   //Single statement\nwhile(repeat expression)\n```", "```js\n    do{\n     var die1 = Math.floor(Math.random() * 6) + 1;\n     var die2 = Math.floor(Math.random() * 6) + 1;\n     console.log(\"Die 1:\", die1, \"Die 2:\", die2);\n    }while(die1 != die2);\n    ```", "```js\n    Die 1: 1 Die 2: 3\n    Die 1: 2 Die 2: 3\n    Die 1: 3 Die 2: 4\n    Die 1: 4 Die 2: 5\n    Die 1: 3 Die 2: 3\n    ```", "```js\n    Die 1: 5 Die 2: 5\n    ```", "```js\n    let iterations = 0;\n    do{\n     iterations++;\n     var die1 = Math.floor(Math.random() * 6) + 1;\n     var die2 = Math.floor(Math.random() * 6) + 1;\n     console.log(\"Die 1:\", die1, \"Die 2:\", die2);\n    }while(die1 != die2);\n    console.log(\"The matched value is: \", die1);\n    console.log(\"Number of iterations: \", iterations);\n    ```", "```js\n    Die 1: 1 Die 2: 3\n    Die 1: 2 Die 2: 3\n    Die 1: 5 Die 2: 4\n    Die 1: 3 Die 2: 1\n    Die 1: 4 Die 2: 4 \n    The matched value is:  4\n    Number of iterations:  5\n    ```", "```js\n    Die 1: 4 Die 2: 4\n    The matched value is:  4\n    Number of iterations:  1\n    ```", "```js\nwhile(repeat expression){\n   //Statement\n   //Statement\n}\nwhile (repeat expression)\n   //Single statement\n```", "```js\n    let iterations = 0;\n    while (iterations <10){\n     console.log(\"iterations:\", iterations);\n     iterations ++;\n    }\n    ```", "```js\n    iterations: 0\n    iterations: 1\n    iterations: 2\n    iterations: 3\n    iterations: 4\n    iterations: 5\n    iterations: 6\n    iterations: 7\n    iterations: 8\n    iterations: 9\n    ```", "```js\n     die = Math.floor(Math.random() * 6) + 1;\n     console.log(\"die:\", die);\n     iterations ++;\n    ```", "```js\n    die: 2\n    die: 5\n    die: 2\n    die: 4\n    die: 2\n    die: 3\n    die: 4\n    die: 2\n    die: 6\n    die: 1\n    ```", "```js\n    let die;\n    while (iterations <10){\n     die = Math.floor(Math.random() * 6) + 1;\n     if (die % 2 == 0){\n      break;\n     }\n     iterations ++;\n    }\n    console.log(\"Number of iterations: \", iterations + 1);\n    console.log(\"Die value: \", die);\n    ```", "```js\n    Number of iterations:  1\n    Die value:  2\n    ```", "```js\nfor (variable in object){\n   //Statement\n   //Statement\n}\nfor (variable in object)\n   //Single statement\n```", "```js\n    for (let name in location) {\n     console.log(name);\n    };\n    ```", "```js\n    replace\n    href\n    ancestorOrigins\n    origin\n    protocol\n    host\n    hostname\n    port\n    pathname\n    search\n    hash\n    assign\n    reload\n    toString\n    ```", "```js\n    for (let name in location) {\n     console.log(name, \":\", location[name]);\n    };\n    ```", "```js\n    replace : ƒ () { [native code] }\n    href : file://PATH_TO/for-in-statement.html\n    ancestorOrigins :DOMStringList {length: 0}\n    origin : file://\n    protocol :\n    host :\n    hostname :\n    port :\n    ```", "```js\n    search :\n    hash :\n    assign : ƒ assign() { [native code] }\n    reload : ƒ reload() { [native code] }\n    toString : ƒ toString() { [native code] }\n    ```", "```js\n    var stopWatch = {\n     elapsedTime: 0,\n     resultsHistory: [],\n     isTiming: true,\n     isPaused: true,\n     start: function(){console.log(\"start\");},\n     pause: function(){console.log(\"pause\");},\n     resume: function(){console.log(\"resume\");},\n     stop: function(){console.log(\"stop\");}\n    };\n    ```", "```js\n    for (const name in stopWatch) {\n     console.log(name, \":\", stopWatch[name]);\n    };\n    ```", "```js\n    elapsedTime : 0\n    resultsHistory : []\n    isTiming : true\n    isPaused : true\n    start : ƒ (){console.log(\"start\");}\n    pause : ƒ (){console.log(\"pause\");}\n    resume : ƒ (){console.log(\"resume\");}\n    stop : ƒ (){console.log(\"stop\");}\n    ```", "```js\nfor (variable of object){\n   //Statement\n   //Statement\n}\nfor (variable of object)\n   //Single statement\n```", "```js\n    var stopWatch = {\n     elapsedTime: 0,\n     resultsHistory: [],\n     isTiming: true,\n     isPaused: true,\n     start: function(){console.log(\"start\");},\n     pause: function(){console.log(\"pause\");},\n     resume: function(){console.log(\"resume\");},\n     stop: function(){console.log(\"stop\");}\n    };\n    ```", "```js\n    for (let name of stopWatch) {\n     console.log(name, \":\", stopWatch[name]);\n    };\n    ```", "```js\n    Uncaught TypeError: stopWatch is not iterable\n    ```", "```js\n    let anyString = 'abcxyz123';\n    for (const value of anyString) {\n     console.log(value);\n    }\n    ```", "```js\n    a\n    b\n    c\n    x\n    y\n    z\n    1\n    2\n    3\n    ```", "```js\n    let anyString = 'abcxyz123';\n    /*\n    for (let value of anyString) {\n     console.log(value);\n    }\n    */\n    for (var i = 0; i<anyString.length; i++) {\n     console.log(anyString.charAt(i));\n    }\n    ```", "```js\n    a\n    b\n    c\n    x\n    y\n    z\n    1\n    2\n    3\n    ```", "```js\n    let bowlingScores = [150, 160, 144, 190, 210, 185];\n    for (const value of bowlingScores) {\n     console.log(value);\n    }\n    ```", "```js\n    150\n    160\n    144\n    190\n    210\n    185\n    ```", "```js\n    let bowlingScores = [150, 160, 144, 190, 210, 185];\n    /*\n    for (const value of bowlingScores) {\n     console.log(value);\n    }\n    */\n    for (var i = 0; i<bowlingScores.length; i++) {\n     console.log(bowlingScores[i]);\n    }\n    ```", "```js\n    150\n    160\n    144\n    190\n    210\n    185\n    ```", "```js\ncontinue\ncontinue label\n```", "```js\nlabel : {\n   //Statement\n   //Statement\n}\nlabel : loop statement\n```", "```js\nconsole.log(\"Odd number count started!\");\nlet oddsCount = 0;\nodd_number:\n for (let i = 1; i<= 10; i++){\n  console.log(\"Iteration:\", i);\n  var number = Math.floor(Math.random() * 12) + 1;\n  if (number % 2 == 0){\n   continue odd_number;\n  }\n  oddsCount ++;\n  console.log(\"Number:\", number);\n }\nconsole.log(oddsCount + \" odd numbers found!\");\n```", "```js\nOdd number count started!\nIteration: 1\nIteration: 2\nIteration: 3\nIteration: 4\nNumber: 7\nIteration: 5\nIteration: 6\nNumber: 5\nIteration: 7\nIteration: 8\nIteration: 9\nNumber: 3\n3 odd numbers found!\n```", "```js\nconsole.log(\"Odd number count started!\");\nlet oddsCount = 0;\nfor (let i = 1; i<= 10; i++){\n console.log(\"Iteration:\", i);\n var number = Math.floor(Math.random() * 12) + 1;\n if (number % 2 != 0){\n  oddsCount ++;\n  console.log(\"Number:\", number);\n }\n}\nconsole.log(oddsCount + \" odd numbers found!\");\n```", "```js\nOdd number count started!\nIteration: 1\nIteration: 2\nNumber: 9\nIteration: 3\nNumber: 5\nIteration: 4\nIteration: 5\nNumber: 5\nIteration: 6\nIteration: 7\nNumber: 9\nIteration: 8\nIteration: 9\nNumber: 1\nIteration: 10\nNumber: 7\n6 odd numbers found!\n```", "```js\nfunction name(optional parameter list) {\n   //Statements\n   //Optional return statement\n}\n```", "```js\nfunction getDiceRollValue(){\n  return Math.floor(Math.random() * 6) + 1;\n}\n```", "```js\nvar rollValue = getDiceRollValue() + getDiceRollValue();\n```", "```js\nfunction getDiceRoll(numberOfDice){\n var rollValue = 0;\n for (let i = 1; i<= numberOfDice; i++){\n  rollValue += Math.floor(Math.random() * 6) + 1;\n }\n return rollValue;\n}\n```", "```js\nvar rollValue = getDiceRollValue(2);\n```", "```js\nvar numberOfDice = 2;\nvar rollValue = getDiceRollValue(numberOfDice);\n```", "```js\nfunction getDiceRoll(numberOfDice){\n numberOfDice = (isNaN(parseInt(numberOfDice)) || numberOfDice< 1) ?1 :numberOfDice;\n var rollValue = 0;\n for (let i = 1; i<= numberOfDice; i++){\n  rollValue += Math.floor(Math.random() * 6) + 1;\n }\n return rollValue;\n}\n```", "```js\nvar rollValue = getDiceRoll();\nvar rollValue = getDiceRoll(\"BOGUS\");\n```", "```js\n    function getDigitsOfNumber(num){\n     var digits = [];\n     console.log(\"num:\", num);\n     return digits;\n    }\n    ```", "```js\n     return digits;\n    } \n    console.log(\"getDigitsOfNumber:\", getDigitsOfNumber);\n    ```", "```js\n    getDigitsOfNumber: ƒ getDigitsOfNumber(num){\n     var digits = [];\n     console.log(\"num:\", num);\n     return digits;\n    }\n    ```", "```js\n     return digits;\n    }\n    var test456 = getDigitsOfNumber(456);\n    console.log(\"test456:\", test456);\n    ```", "```js\n    num: 456\n    test456: =>[]\n    ```", "```js\n    var test123 = getDigitsOfNumber(123);\n    console.log(\"test123:\", test123);\n    function getDigitsOfNumber_1(num){\n    ```", "```js\n    num: 123\n    test123: =>[]\n    num: 456\n    test456: =>[]\n    ```", "```js\n    function getDigitsOfNumber(num){\n     var digits = [];\n     num = Math.floor(Math.abs(num));\n     if(!isNaN(num)){\n      while(num != 0) {\n       digits.push(num % 10);\n       num = Math.floor(num / 10);\n      }\n     }\n     return digits;\n    }\n    ```", "```js\n    test123: =>(3) [3, 2, 1]\n    test456: =>(3) [6, 5, 4]\n    ```", "```js\n    var test456 = getDigitsOfNumber(456);\n    console.log(\"test456:\", test456);\n    console.log('5:', getDigitsOfNumber(5));\n    console.log('4563:', getDigitsOfNumber(4563));\n    console.log('123.654:', getDigitsOfNumber(123.654));\n    console.log('-123.654:', getDigitsOfNumber(-123.654));\n    console.log('\"1000\"', getDigitsOfNumber(\"1000\"));\n    console.log('\"1,000\"', getDigitsOfNumber(\"1,000\"));\n    console.log('\"B37\"', getDigitsOfNumber(\"B37\"));\n    console.log('\"37B\"', getDigitsOfNumber(\"37B\"));\n    ```", "```js\n    test123: =>(3) [3, 2, 1]\n    test456: =>(3) [6, 5, 4]\n    5: =>[5]\n    4563: =>(4) [3, 6, 5, 4]\n    123.654: =>(3) [3, 2, 1]\n    -123.654: =>(3) [3, 2, 1]\n    \"1000\" =>(4) [0, 0, 0, 1]\n    \"1,000\" =>[]\n    \"B37\" =>[]\n    \"37B\" =>[]\n    ```", "```js\nfunction(optional parameter list) {\n   //Statements\n   //Optional return statement\n}\n```", "```js\nvar getDiceValue = function(){\n return Math.floor(Math.random() * 6) + 1;\n}\n```", "```js\nvar rollValue = getDiceValue() + getDiceValue();\n```", "```js\n    var getRandomStringCharacter = function(source){\n     var returnCharacter = '';\n     console.log(\"source:\", source);\n     return returnCharacter;\n    }\n    console.log('getRandomStringCharacter', getRandomStringCharacter);\n    ```", "```js\n    getRandomStringCharacter ƒ (source){\n     var returnCharacter = '';\n     console.log(\"source:\", source);\n     return returnCharacter;\n    }\n    ```", "```js\n     return returnCharacter;\n    }\n    getRandomStringCharacter();\n    getRandomStringCharacter(\"AEIOU\");\n    ```", "```js\n    source: undefined\n    source: AEIOU\n    ```", "```js\n    getRandomStringCharacter();\n    var getRandomStringCharacter = function(source){\n     var returnCharacter = '';\n    ```", "```js\n    Uncaught TypeError: getRandomStringCharacter is not a function\n        at function-expression.js:1\n    ```", "```js\n    var getRandomStringCharacter = function(source){\n     if (source !=undefined &&source.length> 0){\n      returnCharacter = source.charAt(Math.floor(Math.random() * source.length));\n     }\n     return returnCharacter;\n    }\n    ```", "```js\n    console.log('():', getRandomStringCharacter());\n    console.log('(\"AEIOU\"):', getRandomStringCharacter('AEIOU'));\n    console.log('(\"JavaScript\"):', getRandomStringCharacter('JavaScript'));\n    console.log('(\"124678\"):', getRandomStringCharacter('124678'));\n    console.log('(124678):', getRandomStringCharacter(124678));\n    console.log('(true):', getRandomStringCharacter(true));\n    ```", "```js\n    (): \n    (\"AEIOU\"): U\n    (\"124678\"): 6\n    (\"JavaScript\"): a\n    (124678): \n    (true):\n    ```", "```js\n(optional parameter list) => {\n   //Statements\n   //Optional return statement\n}\n(optional parameter list) => //Expression or return statement\n```", "```js\nparameter => {\n   //Statements\n   //Optional return statement\n}\nparameter => //Expression or return statement\n```", "```js\n() => {\n   //Statements\n   //Optional return statement\n}\n() =>//Expression or return statement\n```", "```js\nvar getDiceValue = ()=> Math.floor(Math.random() * 6) + 1;\n```", "```js\nvar rollValue = getDiceValue() + getDiceValue();\n```", "```js\nvar getDiceRoll = (numberOfDice) => {\n numberOfDice = (isNaN(parseInt(numberOfDice)) || numberOfDice< 1) ?1 :numberOfDice;\n var rollValue = 0;\n for (let i = 1; i<= numberOfDice; i++){\n  rollValue += Math.floor(Math.random() * 6) + 1;\n }\n return rollValue;\n}\n```", "```js\nvar rollValue = getDiceRoll(2);\n```", "```js\n    (): \n    (\"AEIOU\"): U\n    (\"124678\"): 6\n    (\"JavaScript\"): a\n    (124678): \n    (true):\n    ```", "```js\n    var getRandomStringCharacter = (source) => {\n     var returnCharacter = '';\n     if (source !=undefined &&source.length> 0){\n      returnCharacter = source.charAt(Math.floor(Math.random() * source.length);\n     }\n     return returnCharacter;\n    }\n    ```", "```js\n    (): \n    (\"AEIOU\"): I\n    (\"124678\"): 2\n    (\"JavaScript\"): J\n    (124678): \n    (true):\n    ```", "```js\nNode⇒Element⇒HTMLElement⇒HTMLOListElement\n```", "```js\nlet userIdEle = getElementById(\"user-id\");\n```", "```js\nlet divEles = getElementByTagName(\"div\");\n```", "```js\nlet noticeEles = getElementByClassName(\"notice\");\n```", "```js\nlet noticeEles = getElementByClassName(\"notice\");\n```", "```js\nlet liEle = document.createElement(\"li\");\n```", "```js\nlet elementTextNode = document.createTextNode(\"Milk Moon\");\n```", "```js\n<ul>\n <li>Flower Moon</li>\n <li>Planting Moon</li>\n/ul>\n```", "```js\nlet liEle = document.createElement(\"li\");\n```", "```js\nliEle.appendChild(document.createTextNode(\"Milk Moon\"));\n```", "```js\n<ul>\n <li>Flower Moon</li>\n <li>Planting Moon</li>\n <li>Milk Moon</li>\n</ul>\n```", "```js\nlet mayMoons = [\n \"Flower Moon\",\n \"Planting Moon\",\n \"Milk Moon\"\n];\n```", "```js\n<ul id =\"full-moons\">\n <li>Grass Moon</li>\n <li>Egg Moon</li>\n <li>Pink Moon</li>\n</ul>\n```", "```js\nlet moonsEle = document.getElementById(\"full-moons\");\nmoonsEle.innerHTML = \"\";\n```", "```js\nfor (let i= 0; i<= mayMoons.length - 1; i++){\n let liEle = document.createElement(\"li\");\n liEle.appendChild(document.createTextNode(mayMoons.length[i]));\n listEle.appendChild(liEle);\n}\n```", "```js\n<ul id =\"full-moons\">\n li>Flower Moon</li>\n <li>Planting Moon</li>\n <li>Milk Moon</li>\n</ul>\n```", "```js\ntarget.addEventListener(event-type, listener)\n```", "```js\nhelpButtonEle.addEventListener(\"click\", function(e){\n console.log(\"Something was clicked\");\n}\n```", "```js\n    <input id=\"number-guessed\" type=\"text\" maxlength=\"2\">\n    ```", "```js\n    <button id=\"test-button\">Test Your Guess</button>\n    ```", "```js\n    .hidden{\n     display:none;\n    }\n    ```", "```js\n    <p id=\"results-msg\"  class=\"hidden\" …</p>\n    ```", "```js\n    <span id=\"match-msg\" class=\"hidden\">Congratulations!</span><span id=\"no-match-msg\" class=\"hidden\">Sorry!</span>\n    ```", "```js\n    <span id=\"number-to-guess\"></span>\n    ```", "```js\n    let testButtonEle = document.getElementById('test-button');\n    testButtonEle.addEventListener('click', testMatch);\n    function testMatch(e){\n     console.log(\"Clicked!\");\n    }\n    ```", "```js\n    Clicked!\n    ```", "```js\n    let resultsMsgEle = document.getElementById('results-msg');\n    let matchedMsgEle = document.getElementById('match-msg');\n    let noMatchMsgEle = document.getElementById('no-match-msg');\n    let numberToGuessEle = document.getElementById('number-to-guess');\n    let guessInputEle = document.getElementById('number-guessed');\n    let testButtonEle = document.getElementById('test-button');\n    ```", "```js\n    function testMatch(e){\n     let numberGuessed = parseInt(guessInputEle.value);\n     if(!isNaN(numberGuessed) &&numberGuessed> 0 &&numberGuessed<= 10){\n     }\n    }\n    ```", "```js\n     if(!isNaN(numberGuessed) &&numberGuessed> 0 &&numberGuessed<= 10){\n      let numberToGuess = Math.floor(Math.random() * 10 + 1);\n      if (numberGuessed == numberToGuess){\n       console.log(\"MATCHED!\");\n      }else{\n       console.log(\"NOT MATCHED!\");\n      }\n      console.log(\"Number guessed:\", numberGuessed);\n      console.log(\"Number to match:\", numberToGuess);\n     }\n    ```", "```js\n    NOT MATCHED!\n    Number guessed: 1\n    Number to match: 9\n    MATCHED!\n    Number guessed: 1\n    Number to match: 1\n    ```", "```js\n    function testMatch(e){\n     matchedMsgEle.style.display = 'none';\n     noMatchMsgEle.style.display = 'none';\n     resultsMsgEle.style.display = 'none';\n     let numberGuessed = parseInt(guessInputEle.value);\n    ```", "```js\n     if(!isNaN(numberGuessed) &&numberGuessed> 0 &&numberGuessed<= 10){\n      resultsMsgEle.style.display = 'block';\n      let numberToGuess = Math.floor(Math.random() * 10 + 1);\n      if (numberGuessed == numberToGuess){\n       matchedMsgEle.style.display = 'inline';\n      }else{\n       noMatchMsgEle.style.display = 'inline';\n      }\n      numberToGuessEle.innerText = numberToGuess;\n     }\n    ```"]