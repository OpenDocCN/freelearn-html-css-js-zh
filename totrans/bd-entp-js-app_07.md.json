["```js\n$ git checkout -b create-user/refactor-modules\n```", "```js\n$ mkdir -p src/middlewares && cd src/middlewares\n$ touch check-empty-payload.js \\\n check-content-type-is-set.js \\\n check-content-type-is-json.js \\\n error-handler.js\n```", "```js\nfunction errorHandler(err, req, res, next) {\n  ...\n}\n\nexport default errorHandler;\n```", "```js\nimport checkEmptyPayload from './middlewares/check-empty-payload';\nimport checkContentTypeIsSet from './middlewares/check-content-type-is-set';\nimport checkContentTypeIsJson from './middlewares/check-content-type-is-json';\nimport errorHandler from './middlewares/error-handler';\n...\napp.use(errorHandler);\n```", "```js\n$ git add -A && git commit -m \"Extract middlewares into modules\"\n```", "```js\nfunction createUser(req, res) {\n  if (\n    !Object.prototype.hasOwnProperty.call(req.body, 'email')\n    || !Object.prototype.hasOwnProperty.call(req.body, 'password')\n  ) {\n    res.status(400);\n    res.set('Content-Type', 'application/json');\n    return res.json({ message: 'Payload must contain at least the email and password fields' });\n  }\n  ...\n}\n\nexport default createUser;\n```", "```js\n...\nimport createUser from './handlers/users/create';\n...\napp.post('/users', createUser);\n...\n```", "```js\nimport elasticsearch from 'elasticsearch';\nconst client = new elasticsearch.Client({ host: ... });\n```", "```js\nfunction injectHandlerDependencies(handler, db) {\n  return (req, res) => { handler(req, res, db); };\n}\n\nexport default injectHandlerDependencies;\n```", "```js\nimport injectHandlerDependencies from './utils/inject-handler-dependencies';\n```", "```js\n# Change this\napp.post('/users', createUser);\n\n# To this\napp.post('/users', injectHandlerDependencies(createUser, client));\n```", "```js\nfunction createUser(req, res, db) {\n  ...\n  db.index({ ... });\n}\n```", "```js\n$ git add -A && git commit -m \"Extract request handlers into modules\"\n```", "```js\nclass ValidationError extends Error {\n  constructor(...params) {\n    super(...params);\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ValidationError);\n    }\n  }\n}\n\nexport default ValidationError;\n```", "```js\nfunction validate (req) {\n  if (\n    !Object.prototype.hasOwnProperty.call(req.body, 'email')\n    || !Object.prototype.hasOwnProperty.call(req.body, 'password')\n  ) {\n    res.status(400);\n    res.set('Content-Type', 'application/json');\n    return res.json({ message: 'Payload must contain at least the email and password fields' });\n  }\n  ...\n}\n\nexport default validate;\n```", "```js\nimport ValidationError from '../errors/validation-error';\n\nfunction validate(req) {\n  if (\n    !Object.prototype.hasOwnProperty.call(req.body, 'email')\n    || !Object.prototype.hasOwnProperty.call(req.body, 'password')\n  ) {\n    return new ValidationError('Payload must contain at least the email and password fields');\n  }\n  if (\n    typeof req.body.email !== 'string'\n    || typeof req.body.password !== 'string'\n  ) {\n    return new ValidationError('The email and password fields must be of type string');\n  }\n  if (!/^[\\w.+]+@\\w+\\.\\w+$/.test(req.body.email)) {\n    return new ValidationError('The email field must be a valid email.');\n  }\n  return undefined;\n}\n\nexport default validate;\n```", "```js\nimport ValidationError from '../../validators/errors/validation-error';\nimport validate from '../../validators/users/create';\nfunction createUser(req, res, db) {\n  const validationResults = validate(req);\n  if (validationResults instanceof ValidationError) {\n    res.status(400);\n    res.set('Content-Type', 'application/json');\n    return res.json({ message: validationResults.message });\n  }\n  db.index({ ... })\n}\n\nexport default createUser;\n```", "```js\n$ git add -A && git commit -m \"Decouple validation and response logic\"\n```", "```js\nimport ValidationError from '../../validators/errors/validation-error';\nimport validate from '../../validators/users/create';\n\nfunction create(req, db) {\n  const validationResults = validate(req);\n  if (validationResults instanceof ValidationError) {\n    return Promise.reject(validationResults);\n  }\n  return db.index({\n    index: process.env.ELASTICSEARCH_INDEX,\n    type: 'user',\n    body: req.body,\n  });\n}\n\nexport default create;\n```", "```js\nimport ValidationError from '../../validators/errors/validation-error';\nimport create from '../../engines/users/create';\n\nfunction createUser(req, res, db) {\n  create(req, db).then((result) => {\n    res.status(201);\n    res.set('Content-Type', 'text/plain');\n    return res.send(result._id);\n  }, (err) => {\n    if (err instanceof ValidationError) {\n      res.status(400);\n      res.set('Content-Type', 'application/json');\n      return res.json({ message: err.message });\n    }\n    return undefined;\n  }).catch(() => {\n    res.status(500);\n    res.set('Content-Type', 'application/json');\n    return res.json({ message: 'Internal Server Error' });\n  });\n}\n\nexport default createUser;\n```", "```js\n$ git add -A && git commit -m \"Ensure Single-Responsibility Principle for handler\"\n```", "```js\n{\n  \"name\": {\n    \"first\": <string>,\n    \"last\": <string>,\n    \"middle\": <string>\n  },\n  \"summary\": <string>,\n  \"bio\": <string>\n}\n```", "```js\nScenario Outline: Invalid Profile\n\n  When the client creates a POST request to /users/\n  And attaches <payload> as the payload\n  And sends the request\n  Then our API should respond with a 400 HTTP status code\n  And the payload of the response should be a JSON object\n  And contains a message property which says \"The profile provided is invalid.\"\n\n  Examples:\n\n  | payload                                                                          |\n  | {\"email\":\"e@ma.il\",\"password\":\"abc\",\"profile\":{\"foo\":\"bar\"}}                     |\n  | {\"email\":\"e@ma.il\",\"password\":\"abc\",\"profile\":{\"name\":{\"first\":\"Jane\",\"a\":\"b\"}}} |\n  | {\"email\":\"e@ma.il\",\"password\":\"abc\",\"profile\":{\"summary\":0}}                     |\n  | {\"email\":\"e@ma.il\",\"password\":\"abc\",\"profile\":{\"bio\":0}}                         |\n```", "```js\nWhen(/^attaches (.+) as the payload$/, function (payload) {\n  this.requestPayload = JSON.parse(payload);\n  this.request\n    .send(payload)\n    .set('Content-Type', 'application/json');\n});\n```", "```js\nconst schema = Joi.object().keys({\n    username: Joi.string().alphanum().min(3).max(30).required(),\n    password: Joi.string().regex(/^[a-zA-Z0-9]{3,30}$/),\n    access_token: [Joi.string(), Joi.number()],\n    birthyear: Joi.number().integer().min(1900).max(2013),\n    email: Joi.string().email()\n}).with('username', 'birthyear').without('password', 'access_token');\n\nconst result = Joi.validate({ username: 'abc', birthyear: 1994 }, schema);\n```", "```js\nvar constraints = {\n  username: {\n    presence: true,\n    exclusion: {\n      within: [\"nicklas\"],\n      message: \"'%{value}' is not allowed\"\n    }\n  },\n  password: {\n    presence: true,\n    length: {\n      minimum: 6,\n      message: \"must be at least 6 characters\"\n    }\n  }\n};\n\nvalidate({password: \"bad\"}, constraints);\n```", "```js\n{}\n```", "```js\n{ \"type\": \"object\" }\n```", "```js\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"bio\": { \"type\": \"string\" },\n    \"summary\": { \"type\": \"string\" },\n    \"name\": { \"type\": \"object\" }\n  }\n}\n```", "```js\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"bio\": { \"type\": \"string\" },\n    \"summary\": { \"type\": \"string\" },\n    \"name\": { \"type\": \"object\" }\n  },\n  \"additionalProperties\": false\n}\n```", "```js\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"bio\": { \"type\": \"string\" },\n    \"summary\": { \"type\": \"string\" },\n    \"name\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"first\": { \"type\": \"string\" },\n        \"last\": { \"type\": \"string\" },\n        \"middle\": { \"type\": \"string\" }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"additionalProperties\": false\n}\n```", "```js\n\"title\": \"User Profile Schema\",\n\"description\": \"For validating client-provided user profile object when creating and/or updating an user\",\n```", "```js\n{ \"$schema\": \"http://json-schema.org/schema#\" }\n```", "```js\n\"$id\": \"http://api.hobnob.social/schemas/users/profile.json\"\n```", "```js\n{\n  \"$schema\": \"http://json-schema.org/schema#\",\n  \"$id\": \"http://api.hobnob.social/schemas/users/profile.json\",\n  \"title\": \"User Profile Schema\",\n  \"description\": \"For validating client-provided user profile object \n   when creating and/or updating an user\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"bio\": { \"type\": \"string\" },\n    \"summary\": { \"type\": \"string\" },\n    \"name\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"first\": { \"type\": \"string\" },\n        \"last\": { \"type\": \"string\" },\n        \"middle\": { \"type\": \"string\" }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"additionalProperties\": false\n}\n```", "```js\n{\n  \"$schema\": \"http://json-schema.org/schema#\",\n  \"$id\": \"http://api.hobnob.social/schemas/users/create.json\",\n  \"title\": \"Create User Schema\",\n  \"description\": \"For validating client-provided create user object\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"email\": {\n      \"type\": \"string\",\n      \"format\": \"email\"\n    },\n    \"password\": { \"type\": \"string\" },\n    \"profile\": { \"$ref\": \"profile.json#\"}\n  },\n  \"required\": [\"email\", \"password\"],\n  \"additionalProperties\": false\n}\n```", "```js\n$ yarn add ajv\n```", "```js\nimport Ajv from 'ajv';\nimport profileSchema from '../../schema/users/profile.json';\nimport createUserSchema from '../../schema/users/create.json';\nimport ValidationError from '../errors/validation-error';\n...\n```", "```js\nfunction validate(req) {\n  const ajvValidate = new Ajv()\n    .addFormat('email', /^[\\w.+]+@\\w+\\.\\w+$/)\n    .addSchema([profileSchema, createUserSchema])\n    .compile(createUserSchema);\n\n  const valid = ajvValidate(req.body);\n  if (!valid) {\n    // Return ValidationError\n  }\n  return true;\n}\n```", "```js\n[\n  {\n    \"keyword\": \"type\",\n    \"dataPath\": \".bio\",\n    \"schemaPath\": \"#/properties/bio/type\",\n    \"params\": {\n      \"type\": \"string\"\n    },\n    \"message\": \"should be string\"\n  }\n]\n```", "```js\nfunction generateValidationErrorMessage(errors) {\n  const error = errors[0];\n\n  if (error.dataPath.indexOf('.profile') === 0) {\n    return 'The profile provided is invalid.';\n  }\n  if (error.keyword === 'required') {\n    return 'Payload must contain at least the email and password fields';\n  }\n  if (error.keyword === 'type') {\n    return 'The email and password fields must be of type string';\n  }\n  if (error.keyword === 'format') {\n    return 'The email field must be a valid email.';\n  }\n  return 'The object is invalid';\n}\n\nexport default generateValidationErrorMessage;\n```", "```js\nfunction generateValidationErrorMessage(errors) {\n  const error = errors[0];\n  if (error.keyword === 'required') {\n    return `The '${error.dataPath}.${error.params.missingProperty}' field is missing`;\n  }\n  if (error.keyword === 'type') {\n    return `The '${error.dataPath}' field must be of type ${error.params.type}`;\n  }\n  if (error.keyword === 'format') {\n    return `The '${error.dataPath}' field must be a valid ${error.params.format}`;\n  }\n  if (error.keyword === 'additionalProperties') {\n    return `The '${error.dataPath}' object does not support the field '${error.params.additionalProperty}'`;\n  }\n  return 'The object is not valid';\n}\n```", "```js\nScenario Outline: Bad Request Payload\n  ...\n  And contains a message property which says \"<message>\"\n\n  Examples:\n\n  | missingFields | message                          |\n | email         | The '.email' field is missing    |\n | password      | The '.password' field is missing |\n\nScenario Outline: Request Payload with Properties of Unsupported Type\n  ...\n And contains a message property which says \"The '.<field>' field must be of type <type>\"\n  ...\n\nScenario Outline: Request Payload with invalid email format\n  ...\n  And contains a message property which says \"The '.email' field must be a valid email\"\n  ...\n\nScenario Outline: Invalid Profile\n  ...\n  And contains a message property which says \"<message>\"\n\n  Examples:\n\n  | payload | message                                                   |\n  | ...     | The '.profile' object does not support the field 'foo'    |\n  | ...     | The '.profile.name' object does not support the field 'a' |\n  | ...     | The '.profile.summary' field must be of type string       |\n  | ...     | The '.profile.bio' field must be of type string           |\n```", "```js\nimport generateValidationErrorMessage from '../errors/messages';\n\nfunction validate(req) {\n  ...\n  const valid = ajvValidate(req.body);\n  if (!valid) {\n    return new ValidationError(generateValidationErrorMessage(ajvValidate.errors));\n  }\n  return true;\n}\n```", "```js\nError: Cannot find module '../../schema/users/profile.json'\n```", "```js\n\"build\": \"rimraf dist && babel src -d dist --copy-files\",\n```", "```js\nScenario Outline: Valid Profile\n\n  When the client creates a POST request to /users/\n  And attaches <payload> as the payload\n  And sends the request\n  Then our API should respond with a 201 HTTP status code\n  And the payload of the response should be a string\n  And the payload object should be added to the database, grouped under the \"user\" type\n  And the newly-created user should be deleted\n\n  Examples:\n\n  | payload                                                                         |\n  | {\"email\":\"e@ma.il\",\"password\":\"password\",\"profile\":{}}                          |\n  | {\"email\":\"e@ma.il\",\"password\":\"password\",\"profile\":{\"name\":{}}}                 |\n  | {\"email\":\"e@ma.il\",\"password\":\"password\",\"profile\":{\"name\":{\"first\":\"Daniel\"}}} |\n  | {\"email\":\"e@ma.il\",\"password\":\"password\",\"profile\":{\"bio\":\"bio\"}}               |\n  | {\"email\":\"e@ma.il\",\"password\":\"password\",\"profile\":{\"summary\":\"summary\"}}       |\n```", "```js\n# Clean the test index (if it exists)\ncurl --silent -o /dev/null -X DELETE \"$ELASTICSEARCH_HOSTNAME:$ELASTICSEARCH_PORT/$ELASTICSEARCH_INDEX\"\n```", "```js\n$ git add -A && git commit -m \"Fully validate Create User request payload\"\n```"]