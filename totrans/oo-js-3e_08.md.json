["```js\n    var Person = function(firstname) { \n        if (!(this instanceof Person)) { \n            throw new Error(\"Person is a constructor\"); \n        } \n        this.firstname = firstname; \n    }; \n\n    Person.prototype.giveBirth = function() { \n        // ...we give birth to the person \n    }; \n\n    var Employee = function(firstname, lastname, job) { \n        if (!(this instanceof Employee)) { \n            throw new Error(\"Employee is a constructor\"); \n        } \n        Person.call(this, firstname); \n        this.job = job; \n    };  \n    Employee.prototype = Object.create(Person.prototype); \n    Employee.prototype.constructor = Employee; \n    Employee.prototype.startJob = function() { \n        // ...Employee starts job \n    }; \n\n    var Engineer = function(firstname, lastname, job, department) { \n        if (!(this instanceof Engineer)) { \n            throw new Error(\"Engineer is a constructor\"); \n        } \n        Employee.call(this, firstname, lastname, job); \n        this.department = department; \n    }; \n    Engineer.prototype = Object.create(Employee.prototype); \n    Engineer.prototype.constructor = Engineer; \n    Engineer.prototype.startWorking = function() { \n        // ...Engineer starts working \n    }; \n\n```", "```js\n    class Person { \n        constructor(firstname) { \n            this.firsnamet = firstname; \n        } \n        giveBirth() { \n            // ... a person is born \n        } \n    } \n\n    class Employee extends Person { \n        constructor(firstname, lastname, job) { \n            super(firstname); \n            this.lastname = lastname; \n            this.position = position; \n        } \n\n         startJob() { \n            // ...Employee starts job \n        } \n    } \n\n    class Engineer extends Employee { \n        constructor(firstname, lastname, job, department) { \n            super(firstname, lastname, job); \n            this.department = department; \n        } \n\n        startWorking() { \n            // ...Engineer starts working \n        } \n    } \n\n```", "```js\n    class Car { \n      constructor(model, year){ \n        this.model = model; \n        this.year = year; \n      } \n    } \n    console.log(typeof Car); //\"function\" \n\n```", "```js\n    normalFunction();   //use first \n    function normalFunction() {}  //declare later \n\n```", "```js\n    var ford = new Car(); //Reference Error \n    class Car {} \n\n```", "```js\n    const Car = class { \n      constructor(model, year){ \n        this.model = model; \n        this.year = year; \n      } \n    } \n\n```", "```js\n    const NamedCar = class Car{ \n      constructor(model, year){ \n        this.model = model; \n        this.year = year; \n      } \n      getName() { \n          return Car.name; \n      } \n    } \n    const ford = new NamedCar(); \n    console.log(ford.getName()); // Car \n    console.log(ford.name); // ReferenceError: name is not defined \n\n```", "```js\n    class NoCommas { \n      method1(){} \n      member1;  //This is ignored and can be used to \n        separate class members \n      member2,  //This is an error \n      method2(){} \n    } \n\n```", "```js\n    class Car { \n      constructor(model, year){ \n        this.model = model; \n        this.year = year; \n      } \n    } \n    const fiesta = new Car('Fiesta','2010'); \n\n```", "```js\n    class Car { \n      constructor(model, year){ \n        this.model = model; \n        this.year = year; \n      } \n      get model(){ \n        return this.model \n      } \n\n      calculateCurrentValue(){ \n        return \"7000\" \n      } \n    } \n    const fiesta = new Car('Fiesta','2010') \n    console.log(fiesta.model) \n\n```", "```js\n    class CarOne { \n        driveCar() {} \n    } \n    class CarTwo { \n        ['drive'+'Car']() {} \n    } \n    const methodName = 'driveCar'; \n    class CarThree { \n        [methodName]() {} \n    } \n\n```", "```js\n    class Logger { \n      static log(level, message) { \n        console.log(`${level} : ${message}`) \n      } \n    } \n    //Invoke static methods on the Class \n    Logger.log(\"ERROR\",\"The end is near\") //\"ERROR : The end is near\" \n\n    //Not on instance \n    const logger = new Logger(\"ERROR\") \n    logger.log(\"The end is near\")     //logger.log is not a function \n\n```", "```js\n    class iterableArg { \n        constructor(...args) { \n            this.args = args; \n        } \n        * [Symbol.iterator]() { \n            for (const arg of this.args) { \n                yield arg; \n            } \n        } \n    } \n\n    for (const x of new iterableArg('ES6', 'wins')) { \n        console.log(x); \n    } \n\n    //ES6 \n    //wins \n\n```", "```js\n    class Animal {  \n      constructor(name) { \n        this.name = name; \n      } \n        speak() { \n        console.log(this.name + ' generic noise'); \n      } \n    } \n    class Cat extends Animal { \n      speak() { \n        console.log(this.name + ' says Meow.'); \n      } \n    } \n    var c = new Cat('Grace');  \n    c.speak();//\"Grace says Meow.\" \n\n```", "```js\n    class Animal {  \n      constructor(name) { \n        this.name = name; \n      } \n      speak() { \n        console.log(this.name + ' generic noise'); \n      } \n    } \n    class Cat extends Animal { \n      speak() { \n        console.log(this.name + ' says Meow.'); \n      } \n   } \n    class Lion extends Cat { \n      speak() { \n        super.speak(); \n        console.log(this.name + ' Roars....'); \n      } \n    } \n    var l = new Lion('Lenny');  \n    l.speak(); \n    //\"Lenny says Meow.\" \n    //\"Lenny Roar....\" \n\n```", "```js\n    class Base {} \n    class Derive extends Base { \n      constructor(name){ \n        this.name = name; //'this' is not allowed before super() \n      } \n    } \n\n```", "```js\n    class Base {} \n    class Derive extends Base { \n      constructor(){  //missing super() call in constructor \n      } \n    } \n\n```", "```js\n    constructor() {} \n\n```", "```js\n    constructor(...args){ \n      super(...args); \n    } \n\n```", "```js\n    class Person {} \n    class Employee extends Person{} \n\n```", "```js\n    class BackgroundCheck { \n      check() {} \n    } \n    class Onboard { \n      printBadge() { } \n    } \n\n```", "```js\n    class Person {} \n    const BackgroundCheck = Tools => class extends Tools { \n      check() {} \n    }; \n    const Onboard = Tools => class extends Tools { \n      printBadge() {} \n    }; \n    class Employee extends BackgroundCheck(Onboard(Person)){  \n    } \n\n```", "```js\n    //----------------server.js--------------------- \n    export const port = 8080; \n    export function startServer() { \n      //...start server \n    } \n    export class Config { \n      //... \n    } \n    function processConfig() { \n      //... \n    } \n\n```", "```js\n    //--------------app.js---------------------------- \n    import {Config, startServer} from 'server' \n    startServer(port); \n\n```", "```js\n    import * from 'server' \n\n```", "```js\n    //----------------server.js--------------------- \n    export default class { \n      //... \n    } \n    //--------------app.js---------------------------- \n    import Server from 'server'; \n    const s = new Server(); \n\n```", "```js\n    export {port, startServer, Config}; \n    const port = 8080; \n    function startServer() { \n      //...start server \n    } \n    class Config { \n      //... \n    } \n    function processConfig() { \n      //... \n    } \n\n```", "```js\n    import {trunc as StringLib} from \"../lib/string.js\" \n    import {trunc as MathLib} from \"../lib/math.js\" \n\n```", "```js\n    function v() {} \n    function v2() {} \n    export { \n      v as functionV(), \n      v2 as functionV2(), \n      v2 as functionLatest() \n    } \n\n```"]