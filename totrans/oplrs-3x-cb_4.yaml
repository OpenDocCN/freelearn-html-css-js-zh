- en: Chapter 4. Working with Events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a side-by-side map comparator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a work in progress indicator for map layers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listening for vector layer features' events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listening for non-OpenLayers events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is focused on events, which is an important concept in any JavaScript
    program. Although this chapter is brief, the concepts explained here are very
    important to understand when working with OpenLayers.
  prefs: []
  type: TYPE_NORMAL
- en: Events are the heart of JavaScript. They are the impulses that allow us to produce
    a reaction. As programmers of a mapping application, we are interested in reacting
    when the map zoom changes, when a layer is loaded, or when a feature is added
    to a layer. Every class susceptible to emit events is responsible for managing
    its listeners (those interested in being notified when an event is fired) and
    also to emit events under certain circumstances.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we can register a function listening for the `zoomend` event on
    the `OpenLayers.Map` instance. Every time the map instance changes its zoom, it
    is responsible to trigger the `zoomend` event, so all its listeners will be notified
    by the new event.
  prefs: []
  type: TYPE_NORMAL
- en: 'To help in all this process, OpenLayers has the `OpenLayers.Events` class,
    that takes care of registering listeners and simplifying the action of firing
    an event to all of them. In concrete, it allows to:'
  prefs: []
  type: TYPE_NORMAL
- en: Define event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Register listeners
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trigger events to notify all listeners
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many classes, such as `OpenLayers.Map` and `OpenLayers.Layer`, have an `events`
    property, which is an instance of `OpenLayers.Events` that takes care of registering
    the listeners interested to be notified on their event.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, these classes commonly define an `EVENT_TYPES` array property
    (which is constant) and list the available events you can register for that class.
    For example, for the `OpenLayers.Map` class the `EVENT_TYPES` is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As a programmer you need to look at the OpenLayers API documentation ([http://dev.openlayers.org/releases/OpenLayers-2.11/doc/apidocs/files/OpenLayers/Map-js.html](http://dev.openlayers.org/releases/OpenLayers-2.11/doc/apidocs/files/OpenLayers/Map-js.html))
    or you can also refer to the source code to know the available events that you
    can register on each class.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a side-by-side map comparator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to create a map comparator. The goal is to have two maps side-
    by-side from different providers and using some of the events that `OpenLayers.Map`
    instance provides to keep the maps synchronized at the same position and zoom
    level.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a side-by-side map comparator](img/7843_ch04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To have two maps side-by-side, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start creating an HTML with OpenLayers library dependency.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, add the HTML code required to have two maps side-by-side. Here we are
    using a table with a row and two columns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, let's write the JavaScript code. Create the two maps and initialize with
    the desired image provider. Here we have used `OpenStreetMap` and `Bing:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, register the `move` and `zoomend` events on both layers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, implement the `listener` functions that are called every time an event
    occurs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To keep the two maps always in synchronization at the same position and zoom
    level, we need to know when the map has moved and when the zoom level has changed.
  prefs: []
  type: TYPE_NORMAL
- en: The `move` event is triggered every time the map is moved. Additionally, there
    are the `movestart` and `moveend` events, which are fired only when the `move`
    action starts or ends, but they are not useful here because we need to catch every
    movement.
  prefs: []
  type: TYPE_NORMAL
- en: The `zoomend` event is triggered when the map's zoom level changes. So, how
    can we listen for events in the map? This is achieved through the `events` property,
    which is an instance of `OpenLayers.Events`.
  prefs: []
  type: TYPE_NORMAL
- en: There are two ways (really there is also a third one that we will see in the
    *There's more* section) to register event listeners for the map events—using the
    `on` or the `register` methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the first map, we have used the `on` method to register multiple events
    at once:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `on` method requires an object in which its properties' names are the event
    names and the values are the listener functions to be called when events are triggered.
  prefs: []
  type: TYPE_NORMAL
- en: The `on` method accepts a special property called `scope`. This allows us to
    register all the specified events to be executed within the same context. That
    is, when the `listener` function is executed, the `this` keyword will point to
    the object specified in the `scope` property.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Contexts can be an advanced topic for someone who has just initiated in JavaScript.
    An interesting conversation can be found at [http://stackoverflow.com/questions/1798881/javascript-context](http://stackoverflow.com/questions/1798881/javascript-context).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the second map, we have used the `register` method, which allows us to register
    an event listener one at a time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `events.register()` function accepts four parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`type:` This is the event we want to listen for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`object:` This is the context where the function is executed (similar to the
    `scope` property in the `on` method).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`function:` This is the function to be executed when the event is triggered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`priority:` This is a Boolean value. If it is `true`, the listener is queued
    at the front of the event''s queue instead of at the end.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, we will be notified for any `move` or `zoomend` event that any of the two
    maps will produce.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is important to note that OpenLayers event''s mechanism always calls the
    `listener` function by passing an `event` parameter. This `event` object contains
    any information that is written by the `source` object that triggers the event,
    plus the following three properties that are always added automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '`type:` Contains the event name (move, `zoomend`, and so on)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`object:` Points to the object that fires the event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`element:` The `DOM` element related to the event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s take a look at our listener functions. The `moveListener` function checks
    which map has fired the event, then gets the map''s `center`, and assigns the
    same `center` to the other map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we can get a reference to the map that triggers the event with
    `event.object.`
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, the `zoomListener` function gets the zoom level on the source event
    map and applies it on the other map.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bing maps have different resolution levels on their imagery than `OpenStreetMap`.
    We can say it differs by one zoom level with respect to other imagery providers
    because we are adding or subtracting this to/from the zoom level.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we can be interested in listening events, in the same way, we can also be
    interested in stopping the notifications.
  prefs: []
  type: TYPE_NORMAL
- en: The `OpenLayers.Events` class has the `un` and `unregister` methods, which allow
    us to unregister our listener functions from notifying when certain events are
    triggered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to the `on` method, the `un` method allows to unregister multiple listeners,
    while the `unregister` method allows to unregister only one listener at a time.
    Taking this recipe as a sample, we could unregister events on maps as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Another way to register an event listener
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In addition to the `on` and `register` methods, there is a third way to register
    event listeners.
  prefs: []
  type: TYPE_NORMAL
- en: 'When creating `OpenLayers.Map, OpenLayers.Layer`, and `OpenLayers.Control`
    instances, we can use the `eventListeners` property, in the same way as we use
    the `on` method to register a set of listeners. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: What really happens is the object passed to the `eventListener` property is
    directly used to initialize the listeners by using the `on` method.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Using Bing imagery* recipe in [Chapter 2](ch02.html "Chapter 2. Adding
    Raster Layers"), *Adding Raster Layers*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Implementing a work in progress indicator for map layers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Listening for vector layer features' events* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a work in progress indicator for map layers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the art of creating great applications, the most important thing to take
    into account is the user experience. A good application does what it must do,
    but by making the user feel comfortable.
  prefs: []
  type: TYPE_NORMAL
- en: When working with remote server, most of the time the user is waiting for data
    retrieval. For example, when working with a WMS layer, every time we change the
    zoom level, the user has to wait for some seconds till data is obtained from the
    server and the tiles start rendering.
  prefs: []
  type: TYPE_NORMAL
- en: It would be great to show some feedback to the users by using an icon, a progress
    bar, and so on, to inform that the application is working but needs some time.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how we can give some feedback to the user by informing when
    the application is loading content from different servers, making use of some
    layer events.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like in many other recipes in this book, we have used the Dojo toolkit framework
    ([http://dojotoolkit.org](http://dojotoolkit.org)) for a better user experience.
    The main difference we can see is that a basic HTML page is the set of rich widgets
    (buttons, toolbar, progress bar, and so on) it offers. Do not worry if something
    on the HTML page is not clear, the goal of the book is not teaching Dojo, and
    that does not alter the explanations about OpenLayers concepts.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an HTML file with OpenLayers dependency.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First we are going to add the HTML code required to show a progress bar. Note
    how simply it can be created by using the Dojo framework. Tag a normal `span`
    element with the `data-dojo-type` and `data-dojo-props` attributes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As always, place the `div` element to hold the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For starting the JavaScript section code, we need to take into account that
    we are requesting features from a remote WFS server, because this is the first
    thing we need to do for setting the proxy URL to be used:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create the map and two layers—a WMS layer, which is the base layer, and
    a WFS layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a layer switcher control and centralize the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Register event listeners on WMS and WFS layers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, implement the listener function to show the progress bar when any
    of the two layers is loading its content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After creating the map and the two layers, register our listener functions
    for the events `loadstart, loadend`, and `loadcancel` on both layers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: These are common events to all layers, because they are inherited from the `OpenLayers.Layer`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: The `loadstart` event is triggered when the layer starts the process of loading
    data, while `loadend` or `loadcancel` are triggered because the process ends or
    is canceled.
  prefs: []
  type: TYPE_NORMAL
- en: With this in mind, the cumbersome `updateLoader` listener function is responsible
    for showing an indeterminate progress bar with a text message when any of the
    two layers is loading data. The text message can be WMS, WFS, or WMS WFS, depending
    on the layers that are loading the content.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we mentioned earlier, the events used in this recipe are common for all layers.
  prefs: []
  type: TYPE_NORMAL
- en: Concrete subclasses of the `OpenLayers.Layer` class can have their own events,
    as in the case of `OpenLayers.Layer.Vector` that has events to notify when features
    are added, removed, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Adding WMS layer* recipe in [Chapter 2](ch02.html "Chapter 2. Adding Raster
    Layers"), *Adding Raster Layers*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding features from a WFS server* recipe in [Chapter 3](ch03.html "Chapter 3. Working
    with Vector Layers"), *Working with Vector Layers*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a side-by-side map comparator* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Listening for vector layer features' events* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listening for vector layer features' events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with vector layers, it is common to find a situation where you
    need to know what is happening, that is, when a new feature is going to be added
    to the layers or when a feature has been modified, deleted, and so on. Fortunately,
    vector layer has the capability to trigger a great fan of events.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this recipe is to show how easy it is to listen for events in a
    vector layer and know what is happening on it.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to load a GML file with some cities around the world, and we will
    style its fill color depending on some feature attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '![Listening for vector layer features'' events](img/7843_ch04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create an HTML file and add the OpenLayers library dependency files. Then,
    add a `div` element to define where to hold the map instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize the map instance, add a base layer, and centralize the viewport:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a vector layer to read a GML file. Also, initialize it by registering
    an event listener for the `beforefeatureadded` event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write the code for the listener function. Define a color palette that assigns
    a fill color to every feature depending on the `POP_RANK` attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After initializing the map and the base layer, we have to create a vector layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: As a protocol, we are using the `OpenLayers.Protocol.HTTP` instance that will
    get data from the specified URL, via HTTP protocol and will read it by using the
    `OpenLayers.Format.GeoJSON` format reader.
  prefs: []
  type: TYPE_NORMAL
- en: The vector layer uses `OpenLayers.Strategy.Fixed`, which means the content is
    loaded only once, no matter whether we move the map's viewport or not.
  prefs: []
  type: TYPE_NORMAL
- en: There are some ways to register the event listeners. One of those ways is using
    the `on` or `register` methods, but we have chosen to register the event listener
    at the same time when we initialize the layer by using the `eventListener` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'This way, every time when a feature is going to be added to the layer (before
    it was added), the listener function will be called by receiving an `event` object
    as a parameter, with some information related to the layer''s event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: From the event, we can get a reference to the feature and its attributes. Here
    we are using the `POP_RANK` attribute to select the fill color of the feature.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information about the feature style properties, which we can change, is
    available at [http://dev.openlayers.org/releases/OpenLayers-2.11/doc/apidocs/files/OpenLayers/Feature/Vector-js.html#OpenLayers.Feature.Vector.OpenLayers.Feature.Vector.style](http://dev.openlayers.org/releases/OpenLayers-2.11/doc/apidocs/files/OpenLayers/Feature/Vector-js.html#OpenLayers.Feature.Vector.OpenLayers.Feature.Vector.style).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this recipe, we can use the `OpenLayers.Util.extend` method to set the initial
    style of the feature and then set the desired fill color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The `OpenLayers.Util.extend` method requires two parameters—the destination
    and the source objects. Its function is to copy all the properties found in the
    source object to the destination.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `OpenLayers.Util.extend` method is very important to create hierarchy and
    inheritance in OpenLayers. However, its namespace is `OpenLayers.Util` and it
    is located in the `OpenLayers/BaseTypes/Class.js` file, which talks about its
    importance.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, `OpenLayers.Feature.Vector.style` is an object with some
    predefined styles for features such as `default, selected, delete`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: So, the preceding line means that a new object extending an empty object with
    all the properties in the `OpenLayers.Feature.Vector.style['default']` object
    can be created.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Styling features using symbolizers* recipe in [Chapter 7](ch07.html "Chapter 7. Styling
    Features"), *Styling Features*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding a GML layer* recipe in [Chapter 3](ch03.html "Chapter 3. Working
    with Vector Layers"), *Working with Vector Layers.*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a side-by-side map comparator* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Listening for non-OpenLayers events* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listening for non-OpenLayers events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When developing a web mapping application, the use of OpenLayers is only a piece
    among the set of tools that we need to use. Adding other components, such as buttons,
    images, lists, and so on, and interacting with them are other tasks that we must
    work on.
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with a `OpenLayers.Map` instance or `OpenLayers.Layer` subclass
    is easy because they trigger specific events, but what if we want to listen for
    events on a button or any `DOM` element?
  prefs: []
  type: TYPE_NORMAL
- en: For this purpose, OpenLayers offers us the `OpenLayers.Event` class (do not
    get confused with the plural `OpenLayers.Events` class). This is a helper class,
    which, among other things, allows us to listen for events in non-OpenLayers elements
    in a browser-independent way.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unfortunately the way to register event listeners in JavaScript is not the same
    in all browsers. Also, Microsoft differs from W3C (the WWW Consortium) in the
    way to register listeners. You can find more information at [http://www.quirksmode.org/js/events_advanced.html](http://www.quirksmode.org/js/events_advanced.html).
  prefs: []
  type: TYPE_NORMAL
- en: If your project uses a library or framework such as jQuery, Dojo, or ExtJS,
    you will probably use their features to access DOM elements, register for events,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: If you are working on a simpler project without the aforementioned libraries,
    it is a good idea to register events through the `OpenLayers.Event` class, because
    it is browser-independent, which means your application will be compatible with
    more browsers.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, there is one more reason to read this recipe and the reason is
    that OpenLayers uses the `OpenLayers.Event` class internally to implement many
    handlers and controls, which we will see in the future chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Let's have a look at how we can listen for events on HTML elements through the
    `OpenLayers.Event` class.
  prefs: []
  type: TYPE_NORMAL
- en: '![Listening for non-OpenLayers events](img/7843_ch04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The idea is to create six buttons and add six point features to a vector layer.
    Then highlight the feature when mouse enters a button or unselect if mouse leaves
    it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To listen for non-OpenLayers events, follow the next steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an HTML with OpenLayers library dependency. Start adding some CSS styles
    for the buttons. The following code defines a style when the buttons are not selected
    (the mouse is out) and also a style with different background color when mouse
    is hovered over the buttons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a table to hold the six buttons. A button will be represented by a `span`
    element with an identifier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `div` element to hold the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, add the JavaScript code required to instantiate the map object, set a
    base layer, and add a vector layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Populate the vector layer with six features. Each one will contain the identifier
    of the button that represents it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add the code that implements the event listeners:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We have created six buttons, identified from `f0` to `f5`, and we want to create
    six features that represent them. To do this, in the `for` loop, first we create
    a string with an identifier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, register an event listener function for the `mouseover` and `mouseout`
    events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'This is done by using the `OpenLayers.Event.observe` method, which requires
    three parameters. These parameters are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`elementParam:` The `DOM` element reference, or its identifier, which we want
    to listen to for `tis` events'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name:` The event you want to listen to'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`observer:` The function that will act as a listener'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because we need to pass the `DOM` element reference, we need to get it first.
    To get an element reference when its identifier is available, we can use the helper
    method `OpenLayers.Util.getElement`.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the `elementParam` definition, you can see that the use of `OpenLayers.Util.getElement`
    is not strictly necessary. If we pass an ID, the `OpenLayers.Event.observe` method
    will internally use the `OpenLayers.Util.getElement` function to get the element
    reference, so the next two lines will have the same result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `OpenLayers.Util` class has plenty of methods to help in working with the
    `DOM` elements, arrays, and many more functions. We encourage you to take a look.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the listeners are registered, we create a random point feature and add
    it to the vector layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember to transform the point coordinates to the projection used by the map.
    In this case, because the base layer is OSM and the map has no specified projection
    property, the OSM projection will be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: We have created the feature by passing a custom attribute `elem_id`, which will
    store the identifier of the button that represents the feature. This way we have
    a reference to connect the feature and the button.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows how custom attributes are stored within the
    feature `attributes` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7843_ch04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: At this point we have six buttons and six features, which store the corresponding
    button identifiers as the custom attributes. Now, the task is to implement the
    listener function. Let's have a look at the `mouseOverListener` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'From the event, which is a browser `MouseEvent`, we get the identifier of the
    target element that has triggered the event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, using the `OpenLayers.Layers.Vector.getFeatureByAttribute` method, we
    get an array of features within the vector layer that has the `elem_id` with the
    value `id`. Of course, here it will always return an array with only one element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we have the feature. Simply redraw it with a different render intent.
    Select to highlight the feature as selected and put its style back to default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will see more about styling features in [Chapter 7](ch07.html "Chapter 7. Styling
    Features"), *Styling Features*. Meanwhile, consider render intents as predefined
    styles to render features.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: OpenLayers defines a global variable `$`, which points to the `OpenLayers.Util.getElement`
    function, if it does not exist. This way we can get a reference to an element
    in a short way.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the next two lines have the same result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Be careful with the use of the `$` function. Many JavaScript libraries, one
    of the most known is jQuery library ([http://jquery.com](http://jquery.com)),
    also define the global `$` object as a common way to operate with it. So, check
    twice the order in which you have imported libraries on your application and where
    the `$` function really points.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a curiosity, while getting an element reference by its identifier with `OpenLayers.Util.getElement`
    written:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'jQuery library requires you to use the `#` character:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Stop observing
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We can be interested in observing some event, in the same way, we can also have
    a desire to stop observing it.
  prefs: []
  type: TYPE_NORMAL
- en: Similar to the `OpenLayers.Event.observe` method, given an element reference
    or a string identifier, the `OpenLayers.Event.stopObservingElement` method allows
    us to stop observing some `DOM` element.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Creating features programmatically* recipe in [Chapter 3](ch03.html "Chapter 3. Working
    with Vector Layers"), *Working with Vector Layers*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Styling features using symbolizers* recipe in [Chapter 7](ch07.html "Chapter 7. Styling
    Features"), *Styling Features*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a side-by-side map comparator* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Listening for vector layer features' events* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
