["```js\nfunction customTransition(node, params) {\n  const config = { ... };\n  return config;\n}\n```", "```js\n<div transition:customTransition={{ duration: 500 }}>some text</div>\n```", "```js\nconst config = customTransition(div, { duration: 500 });\n```", "```js\nimport { cubicInOut } from 'svelte/easing';\nfunction customTransition(node, params) {\n  return {\n    duration: 1000,\n    delay: 500,\n    easing: cubicInOut,\n    css: (progress) => `opacity: ${progress}`,\n  };\n}\n```", "```js\nfunction customTransition(node, params) {\n  return {\n    css: (progress) => `opacity: ${progress}`,\n  };\n}\n```", "```js\nfunction customTransition(node, params) {\n  return {\n    css: (progress) => `transform: translateX(${(1 – progress) * 100}px)`,\n  };\n}\n```", "```js\nfunction customTransition(node, params) {\n  return {\n    css: (progress, remaining) => `transform: translateX(${remaining * 100}px)`,\n  };\n}\n```", "```js\nfunction customTransition(node, params) {\n  return {\n    css: (progress, remaining) => `opacity: ${progress}; transform: translateX(${remaining * 100}px); `,\n  };\n}\n```", "```js\nfunction customTransition(node, params) {\n  return {\n    tick: (progress) => {\n      node.style.opacity = progress;\n    },\n  };\n}\n```", "```js\n<script>\n  function colourSwipe(node) {\n    // TODO: implement the transition here\n    const config = {};\n    return config;\n  }\n</script>\n<p transition:colourSwipe>Some text here</p>\n```", "```js\nfunction colourSwipe(node) {\n  const config = {\n    duration: 1000,\n    delay: 0,\n  };\n  return config;\n}\n```", "```js\n<div transition:colourSwipe={{ delay: 200, duration: 2000 }} />\n```", "```js\nfunction colourSwipe(node, params) {\n  const config = {\n    duration: params?.duration ?? 1000,\n    delay: params?.delay ?? 0,\n  };\n  return config;\n}\n```", "```js\nimport { linear } from 'svelte/easing';\nfunction colourSwipe(node, params) {\n  const config = {\n    duration: params?.duration ?? 1000,\n    delay: params?.delay ?? 0,\n    easing: params?.easing ?? linear,\n  };\n  return config;\n}\n```", "```js\nfunction colourSwipe(node, params) {\n  const config = {\n    duration: params?.duration ?? 1000,\n    delay: params?.delay ?? 0,\n    easing: params?.easing ?? linear,\n    css: (progress) => {}\n  };\n  return config;\n}\n```", "```js\ncss: (progress) => {\n  if (progress <= 0.5) {\n  } else {\n  }\n}\n```", "```js\nbackground: linear-gradient(to right, red 0, 25%, transparent 25%);\n```", "```js\nconst percentage = progress * 200;\n```", "```js\ncss: (progress) => {\n  if (progress <= 0.5) {\n    const percentage = progress * 200;\n    return `background: linear-gradient(to right, red 0, ${percentage}%, transparent ${percentage}%);`;\n  } else {\n  }\n}\n```", "```js\nconst percentage = (progress – 0.5) * 200\n```", "```js\ncss: (progress) => {\n  if (progress <= 0.5) {\n    const percentage = progress * 200;\n    return `background: linear-gradient(to right, red 0, ${percentage}%, transparent ${percentage}%);`;\n  } else {\n    const percentage = (progress – 0.5) * 200;\n    return `background: linear-gradient(to right, transparent 0, ${percentage}%, red ${percentage}%);`;\n  }\n}\n```", "```js\ncss: (progress) => {\n  if (progress <= 0.5) {\n    const percentage = progress * 200;\n    return `background: linear-gradient(to right, red 0, ${percentage}%, transparent ${percentage}%); color: transparent;`;\n  } else { /* ... */ }\n}\n```", "```js\nfunction colourSwipe(node, params) {\n  const { color } = window.getComputedStyle(node);\n  const config = {\n    css: (progress) => {\n      if (progress <= 0.5) {\n        const percentage = progress * 200;\n        return `background: linear-gradient(to right, ${color} 0, ${percentage}%, transparent ${percentage}%); color: transparent;`;\n      } else {\n        const percentage = (progress – 0.5) * 200;\n        return `background: linear-gradient(to right, transparent 0, ${percentage}%, ${color} ${percentage}%);`;\n      }\n    }\n  };\n  return config;\n}\n```", "```js\n<script>\n  function flipboard(node, params) {\n    const config = {\n      duration: params?.duration ?? 1000,\n      delay: params?.delay ?? 0,\n      easing: params?.easing ?? linear,\n      tick: (progress) => {\n        // TODO: implement the transition here\n      },\n    };\n    return config;\n  }\n</script>\n<p transition:flipboard>Hello Svelte.</p>\n```", "```js\nconst text = node.textContent;\n```", "```js\nnode.textContent = text;\n```", "```js\nfunction flipboard(node, params) {\n  const text = node.textContent;\n  const config = {\n    // ...\n    tick: (progress) => {\n      let newText;\n      // TODO: compute the newText based on `text` and progress value\n      node.textContent = newText;\n    },\n  };\n  return config;\n}\n```", "```js\ntick: (progress) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const position = i / text.length;\n    if (position < progress) {\n      // display the original character\n      newText += text[i];\n    } else {\n      // display a blank space instead\n      newText += ' ';\n    }\n  }\n  node.textContent = newText;\n},\n```", "```js\ntick: (progress) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const position = i / text.length;\n    if (position < progress) {\n      // display the original character\n      newText += text[i];\n    } else if (position < progress * 1.5) {\n      // display random characters\n      newText += randomCharacter()\n    } else if (position < progress * 2) {\n      // display dash\n      newText += '-';\n    } else {\n      // display a blank space instead\n      newText += ' ';\n    }\n  }\n  node.textContent = newText;\n},\n```", "```js\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890'\nfunction randomCharacter() {\n  return chars[Math.floor(Math.random() * chars.length)];\n}\n```", "```js\nfont-family: monospace;\n```"]