["```js\nvar s = Symbol();\n```", "```js\nlet s1 = window.Symbol(\"My Symbol\");\nlet s2 = window.Symbol(\"My Symbol\");\n\nconsole.log(s1 === s2); //Output is \"false\"\n```", "```js\nvar s = Symbol();\nconsole.log(typeof s); //Output \"symbol\"\n```", "```js\ntry\n{\n  let s = new Symbol(); //\"TypeError\" exception\n}\ncatch(e)\n{\n  console.log(e.message); //Output \"Symbol is not a constructor\"\n}\n```", "```js\nlet obj = null;\nlet s1 = null;\n\n(function(){\n  let s2 = Symbol();\n  s1 = s2;\n  obj = {[s2]: \"mySymbol\"}\n  console.log(obj[s2]);\n  console.log(obj[s2] == obj[s1]);\n})();\n\nconsole.log(obj[s1]);\n```", "```js\nmySymbol\ntrue\nmySymbol\n```", "```js\nlet obj = {a: 12};\nlet s1 = Symbol(\"mySymbol\");\nlet s2 = Symbol(\"mySymbol\");\n\nObject.defineProperty(obj, s1, {\n  enumerable: false\n});\n\nobj[s2] = \"\";\n\nconsole.log(Object.getOwnPropertySymbols(obj));\n```", "```js\nSymbol(mySymbol),Symbol(mySymbol)\n```", "```js\nlet obj = {};\n\n(function(){\n  let s1 = Symbol(\"name\");\n  obj[s1] = \"Eden\";\n})();\n\n//obj[s1] cannot be accessed here\n\n(function(){\n  let s2 = Symbol.for(\"age\");\n  obj[s2] = 27;\n})();\n\nconsole.log(obj[Symbol.for(\"age\")]); //Output \"27\"\n```", "```js\nlet obj = {\n  array: [1, 2, 3, 4, 5],\n  nextIndex: 0,\n  next: function(){\n    return this.nextIndex < this.array.length ?\n    {value: this.array[this.nextIndex++], done: false} :\n    {done: true};\n  }\n};\n\nconsole.log(obj.next().value);\nconsole.log(obj.next().value);\nconsole.log(obj.next().value);\nconsole.log(obj.next().value);\nconsole.log(obj.next().value);\nconsole.log(obj.next().done);\n```", "```js\n1\n2\n3\n4\n5\ntrue\n```", "```js\nlet obj = {\n  array: [1, 2, 3, 4, 5],\n  nextIndex: 0,\n  [Symbol.iterator]: function(){\n    return {\n      array: this.array,\n      nextIndex: this.nextIndex,\n      next: function(){\n        return this.nextIndex < this.array.length ?\n        {value: this.array[this.nextIndex++], done: false} :\n        {done: true};\n      }\n    }\n  }\n};\n\nlet iterable = obj[Symbol.iterator]()\n\nconsole.log(iterable.next().value);\nconsole.log(iterable.next().value);\nconsole.log(iterable.next().value);\nconsole.log(iterable.next().value);\nconsole.log(iterable.next().value);\nconsole.log(iterable.next().done);\n```", "```js\n1\n2\n3\n4\n5\ntrue\n```", "```js\nfunction* generator_function()\n{\n  yield 1;\n  yield 2;\n  yield 3;\n  yield 4;\n  yield 5;\n}\n\nlet generator = generator_function();\n\nconsole.log(generator.next().value);\nconsole.log(generator.next().value);\nconsole.log(generator.next().value);\nconsole.log(generator.next().value);\nconsole.log(generator.next().value);\nconsole.log(generator.next().done);\n\ngenerator = generator_function();\n\nlet iterable = generator[Symbol.iterator]();\n\nconsole.log(iterable.next().value);\nconsole.log(iterable.next().value);\nconsole.log(iterable.next().value);\nconsole.log(iterable.next().value);\nconsole.log(iterable.next().value);\nconsole.log(iterable.next().done);\n```", "```js\n1\n2\n3\n4\n5\ntrue\n1\n2\n3\n4\n5\ntrue\n```", "```js\nfunction* generator_function()\n{\n  var a = yield 12;\n  var b = yield a + 1;\n  var c = yield b + 2;\n  yield c + 3;\n}\n\nvar generator = generator_function();\n\nconsole.log(generator.next().value);\nconsole.log(generator.next(5).value);\nconsole.log(generator.next(11).value);\nconsole.log(generator.next(78).value);\nconsole.log(generator.next().done);\n```", "```js\n12\n6\n13\n81\ntrue\n```", "```js\nfunction* generator_function()\n{\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nvar generator = generator_function();\n\nconsole.log(generator.next().value);\nconsole.log(generator.return(22).value);\nconsole.log(generator.next().done);\n```", "```js\n1\n22\ntrue\n```", "```js\nfunction* generator_function()\n{\n\n  try\n  {\n    yield 1;\n  }\n  catch(e)\n  {\n    console.log(\"1st Exception\");\n  }\n\n  try\n  {\n    yield 2;\n  }\n  catch(e)\n  {\n    console.log(\"2nd Exception\");\n  }\n\n}\n\nvar generator = generator_function();\n\nconsole.log(generator.next().value);\nconsole.log(generator.throw(\"exception string\").value);\nconsole.log(generator.throw(\"exception string\").done);\n```", "```js\n1\n1st Exception\n2\n2nd Exception\ntrue\n```", "```js\nfunction* generator_function_1()\n{\n  yield 2;\n  yield 3;\n}\n\nfunction* generator_function_2()\n{\n  yield 1;\n  yield* generator_function_1();\n  yield* [4, 5];\n}\n\nvar generator = generator_function_2();\n\nconsole.log(generator.next().value);\nconsole.log(generator.next().value);\nconsole.log(generator.next().value);\nconsole.log(generator.next().value);\nconsole.log(generator.next().value);\nconsole.log(generator.next().done);\n```", "```js\n1\n2\n3\n4\n5\ntrue\n```", "```js\nfunction* generator_function()\n{\n  yield 1;\n  yield 2;\n  yield 3;\n  yield 4;\n  yield 5;\n}\n\nlet arr = [1, 2, 3];\n\nfor(let value of generator_function())\n{\n  console.log(value);\n}\n\nfor(let value of arr)\n{\n  console.log(value);\n}\n```", "```js\n1\n2\n3\n4\n5\n1\n2\n3\n```", "```js\n\"use strict\";\n\nfunction _add(x, y)\n{\n  return x + y;\n}\n\nfunction add1(x, y)\n{\n  x = parseInt(x);\n  y = parseInt(y);\n\n  //tail call\n  return _add(x, y);\n}\n\nfunction add2(x, y)\n{\n  x = parseInt(x);\n  y = parseInt(y);\n\n  //not tail call\n  return 0 + _add(x, y);\n}\n\nconsole.log(add1(1, '1')); //2\nconsole.log(add2(1, '2')); //3\n```", "```js\n\"use strict\";\n\nfunction _add(x, y)\n{\n  return x + y;\n}\n\nfunction add(x, y)\n{\n  x = parseInt(x);\n  y = parseInt(y);\n\n  var result = _add(x, y);\n  return result;\n}\n\nconsole.log(add(1, '1'));\n```", "```js\nfunction add(x, y)\n{\n  x = parseInt(x);\n  y = parseInt(y);\n\n  return _add(x, y);\n}\n```"]