["```js\nChart(Object options, [ Function callback ])\n```", "```js\n<script type=\"text/javascript\">\n  $(document).ready(function() {\n    var chart = new Highcharts.Chart({\n      chart: {\n          renderTo: \"container\"\n      },\n      yAxis: [{\n        min: 10,\n        max: 30\n      }, {\n        min: 40,\n        max: 60\n      }],\n      series: [{\n        data: [ 10, 20 ]\n      }, {\n        data: [ 50, 70 ],\n        yAxis: 1\n      }],\n      subtitle: {\n          text: \"Experiment Highcharts APIs\"\n      }\n\n    });\n  }, function() {\n   ...\n  });\n</script>\n```", "```js\nvar series = this.series[0];\n```", "```js\nvar yAxis = this.yAxis[1];\n```", "```js\nvar point = this.series[1].data[2];\n```", "```js\nvar chart = Highcharts.charts[0];\n```", "```js\nvar container = chart.container;\n```", "```js\n// Get the chart subtitle\nvar subtitle = chart.options.subtitle.text;\n```", "```js\nxAxis: {\n  id: 'xAxis',\n  categories: [ ... ]\n},\nseries: [{\n  name: 'UK',\n  id: 'uk',\n  data: [ 4351, 4190, \n      { y: 4028, id: 'thirdPoint' }, \n      ... ]\n}]\n```", "```js\nvar series = this.get('uk');\nvar point = this.get('thirdPoint');\nvar xAxis = this.get('xAxis');\n```", "```js\nthis.series.filter(function(elt) {return elt.name == 'uk';})[0];\n```", "```js\nvar point = this.get('uk').data[2];\n```", "```js\n    var chart = new Highcharts.Chart({\n      chart: {\n        renderTo: 'container',\n        showAxes: true,\n        borderWidth: 1\n      },\n      title: { text: 'Last 30 days stock price' },\n      credits: { text: 'Learning Highcharts' },\n      xAxis: {\n        type: 'datetime',\n        tickInterval: 24 * 3600 * 1000,\n        dateTimeLabelFormats: { day: '%Y-%m-%d' },\n        title: {\n          text: 'Date',\n          align: 'high'\n        },\n        labels: {\n          rotation: -45,\n          align : 'center',\n          step: 2,\n          y: 40,\n          x: -20\n        }\n      },\n      yAxis: {\n        title: { text: 'Price ($)' }\n      },\n      plotOptions: {\n        line: { allowPointSelect: true }\n      }\n     });\n```", "```js\nStock Symbol: <input type=text id='symbol' /> \n<input type='button' value='Add to the list' id='addStockList' /> <input type='button' value='Add &amp; Plot' id='plotStock'>\n....\nAdded symbols list:\n<ol id='stocklist'>\n</ol>\n```", "```js\n   $('#plotStock').button().click( \n     function(evt) {\n\n      // Get the input stock symbol, empty the \n      // list andinsert the new symbol into the list\n      $('#stocklist').empty();\n      var symbol = $('#symbol').val();\n           $('#stocklist').append($(\"<li/>\").append(symbol)); \n\n      // Kick off the loading screen\n      chart.showLoading(\"Getting stock data ....\");\n\n      // Launch the stock query\n      $.getJSON('./stockQuery.php?symbol=' + \n                   symbol.toLowerCase(),\n           function(stockData) {\n             // parse JSON response here\n             .....\n           }\n      );\n     }\n   );\n```", "```js\n<?php\n  $ch = curl_init();\n  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n  // Get the stock symbol name\n  curl_setopt($ch, CURLOPT_URL, \"http://download.finance.yahoo.com/d/quotes.csv?s={$_GET['symbol']}&f=n\");\n  $result = curl_exec($ch);\n  $name = trim(trim($result), '\"');\n\n  // Get from now to 30 days ago\n  $now = time();\n  $toDate = localtime($now, true);\n  $toDate['tm_year'] += 1900;\n  $fromDate = localtime($now - (86400 * 30), true);\n  $fromDate['tm_year'] += 1900;\n  $dateParams = \"a={$fromDate['tm_mon']}&b={$fromDate['tm_mday']}&c={$fromDate['tm_year']}\" .\"&d={$toDate['tm_mday']}&e={$toDate['tm_mday']}&f={$toDate['tm_year']}\";\n\n  curl_setopt($ch, CURLOPT_URL, \"http://ichart.finance.yahoo.com/table.csv?s={$_GET['symbol']}&{$dateParams}&g=d\");\n  $result = curl_exec($ch);\n  curl_close($ch);\n\n  // Remove the header row\n  $lines = explode(\"\\n\", $result);\n  array_shift($lines);\n\n  $stockResult['rows'] = array();\n  // Parse the result into dates and close value\n  foreach((array) $lines as $ln) {\n    if (!strlen(trim($ln))) {\n      continue;\n    }\n    list($date, $o, $h, $l, $c, $v, $ac) = \n      explode(\",\", $ln, 7);\n    list($year, $month, $day) = explode('-', $date, 3);\n    $tm = mktime(12, 0, 0, $month, $day, $year);\n    $stockResult['rows'][] = \n      array('date' => $tm * 1000, \n         'price' => floatval($c));\n  }\n\n  $stockResult['name'] = $name;\n  echo json_encode($stockResult);\n?>\n```", "```js\n{\"rows\":[ {\"date\":1348138800000,\"price\":698.7},\n     {\"date\":1348225200000,\"price\":700.09},\n     ... ],\n \"name\": \"Apple Inc.\"\n}\n```", "```js\n$.getJSON('./stockQuery.php?symbol=' + \n     symbol.toLowerCase(),\n     function(stockData) {\n\n         // Remove all the chart existing series\n         while (chart.series.length) {\n             chart.series[0].remove();\n         }\n\n         // Construct series data and add the series\n         var seriesData = [];\n         $.each(stockData.rows, \n             function(idx, data) {\n                 seriesData.push([ data.date, data.price ]);\n             }\n         );\n\n         var seriesOpts = {\n             name: stockData.name + ' - (' + symbol +')',\n             data: seriesData,\n\n             // This is to stop Highcharts rotating\n             // the color and data point symbol for\n             // the series\n             color: chart.options.colors[0],\n             marker: {\n                 symbol: chart.options.symbols[0]\n             }\n         };\n\n         chart.hideLoading();\n         chart.addSeries(seriesOpts);\n     }\n);\n```", "```js\n// Query all the stocks simultaneously and \n// plot multipleseries in one go\n$('#plotAll').button().click( \n\n  function(evt) {\n\n    // Kick off the loading screen\n    chart.showLoading(\"Getting multiple stock data ....\");\n\n    // Get the list of stock symbols and launch \n    // the query foreach symbol \n    var total = $('#stocklist').children().length;\n\n    // start Ajax request for each of the items separately\n      $.each($('#stocklist').children(), \n      function(idx, item) {\n       var symbol = $(item).text();\n       $.getJSON('./stockQuery.php?symbol=' +\n         symbol.toLowerCase(),\n              function(stockData) {\n\n          // data arrives, buildup the series array\n          $.each(stockData.rows, \n            function(idx, data) {\n             $.histStock.push([ data.date,\n                      data.price ]);\n            }\n          );\n\n          seriesOpts.push({\n           name: stockData.name + ' - (' +       \n              symbol +')',\n           data: $.histStock,\n           // This is to stop Highcharts \n           // rotating the colorfor the series\n           color: chart.options.colors[idx],\n           marker: {\n             symbol: chart.options.symbols[idx]\n           }\n          });\n\n          // Plot the series if this result \n          // is the last one\n          if (seriesOpts.length == total) {\n\n            // Remove all the chart existing series\n            while (chart.series.length) {\n              chart.series[0].remove()\n            }\n\n            chart.hideLoading();\n            $.each(seriesOpts, \n              function(idx, hcOption) {\n               chart.addSeries(hcOption, \n                       false);\n              }\n            );\n\n            chart.redraw();\n                } // else â€“ do nothing, \n          // not all results came yet \n         } // function(stockData) \n        ); // getJSON\n     }); // $.each($('#stocklist')\n    }); // on('click'\n```", "```js\n // Export chart into SVG and deliver it to the server\n function deliverChart(chart, protocol, target) {\n\n   // First extracts the SVG markup content from the\n   // displayed chart\n   var svg = chart.getSVG();\n\n   // Send the whole SVG to the server and url\n   $.post('./deliverChart.php', {\n       svg: svg,\n       protocol: protocol,\n       target: target\n     },\n     function(result) {\n       var message = null;\n       var title = null;\n\n       switch (protocol) {\n\n         // Create a dialog box to show the \n         // sent status\n         case 'mailto':\n           message = result.success ? \n            'The mail has been sent successfully' : \n            result.message;\n           title = 'Email Chart';\n           break;\n\n         // Uses hidden frame to download the \n         // image file created on the server side\n         case 'file':        \n           // Only popup a message if error occurs\n           if (result.success) {\n             $('#hidden_iframe').attr(\"src\",\n                      \"dlChart.php\");\n           } else {\n             message = result.message;\n             title = 'Download Chart';\n           }\n           break;\n       }\n\n       if (message) {\n         var msgDialog = $('#dialog');\n         msgDialog.dialog({ autoOpen: false, \n           modal: true, title: title});\n         msgDialog.text(message);\n         msgDialog.dialog('open');\n       }\n   }, 'json');\n }\n```", "```js\n<?php\n$svg = $_POST['svg'];\n$protocol = $_POST['protocol'];\n$target = $_POST['target'];\n\nfunction returnError($output) {\n  $result['success'] = false;\n  $result['error'] = implode(\"<BR/>\", $output);\n  echo json_encode($result);\n  exit(1);\n}\n\n// Format the svg into an image file\nfile_put_contents(\"/tmp/chart.svg\", $svg);\n$cmd = \"convert /tmp/chart.svg /tmp/chart.png\";\nexec($cmd, $output, $rc);\nif ($rc) {\n  returnError($output);\n}\n\n// Deliver the chart image file according to the url\nif ($protocol == 'mailto') {\n\n  $cmd = \"EMAIL='{$target}' mutt -s 'Here is the chart' -a /tmp/chart.png -- {$protocol}:{$target} <<.\nHope you like the chart\n.\";\n\n  exec($cmd, $output, $rc);\n  if ($rc) {\n   returnError($output);\n  }\n  $result['success'] = true;\n\n} else if ($protocol == 'file') {\n  $result['success'] = true;\n}\n\necho json_encode($result);\n?>\n```", "```js\njava -jar batik-rasterizer.jar /tmp/chart.svg\n\n```", "```js\n  // Show the highest and lowest range in the plotlines. \n  var showRange = function(chart, checked) {\n    if (!chart.series || !chart.series.length) {\n        return;  \n    }\n\n    // Checked or not checked, we still need to remove\n    // any existing plot lines first\n    chart.yAxis[0].removePlotLine('highest');\n    chart.yAxis[0].removePlotLine('lowest');\n\n    if (!checked) {\n      return;\n    }\n\n    // Checked - get the highest & lowest points\n    var extremes = chart.yAxis[0].getExtremes();\n\n    // Create plot lines for the highest & lowest points \n    chart.yAxis[0].addPlotLine({\n      width: 2,\n      label: {\n        text: extremes.dataMax,\n        enabled: true,\n        y: -7\n      },\n      value: extremes.dataMax,\n      id: 'highest',\n      zIndex: 2,\n      dashStyle: 'dashed',\n      color: '#33D685'\n    });\n\n    chart.yAxis[0].addPlotLine({\n      width: 2,\n      label: {\n        text: extremes.dataMin,\n        enabled: true,\n        y: 13\n      },\n      value: extremes.dataMin,\n      zIndex: 2,\n      id: 'lowest',\n      dashStyle: 'dashed',\n      color: '#FF7373'\n    });\n  };\n```", "```js\n $('#showPoint').button().click(function(evt) {\n   // Remove the point info box if exists \n   chart.infoBox && (chart.infoBox =\n            chart.infoBox.destroy());\n\n   // Display the point value box if a data point \n   // is selected\n   var selectedPoint = chart.getSelectedPoints();\n   var r = chart.renderer;\n   if (selectedPoint.length) {\n     chart.infoBox = r.g();\n     r.rect(20, 255, 150, 30, 3).attr({\n       stroke: chart.options.colors[0],\n       'stroke-width': 2,\n       fill: 'white'\n     }).add(chart.infoBox);\n\n     // Convert selected point UTC value to date string\n     var tm = new Date(selectedPoint[0].x);\n     tm = tm.getFullYear() + '-' + \n       (tm.getMonth() + 1) + '-' + tm.getDate();\n     r.text(tm + ': ' + selectedPoint[0].y, \n       28, 275).add(chart.infoBox);\n     chart.infoBox.add();\n   }\n });\n```", "```js\nvar renderer = new Highcharts.Renderer($('#container')[0], 200, 100);\n```", "```js\n // Create a named space to store the current user\n // input field values and the timeout id\n $.histStock = {};\n\n $('#Start').button().click(function() {\n\n   chart.showLoading(\"Loading stock price ... \"); \n\n   // Remove old timeout if exists\n   $.histStock.timeoutID && \n     clearTimeout($.histStock.timeoutID);\n\n   var symbol = \n     encodeURIComponent($('#symbol').val().toLowerCase());\n   var years = encodeURIComponent($('#years').val());\n\n   // Remember current user settings and initialise values\n   // for the run\n   $.histStock = {\n     // First loop start at the beginning\n     offset: 0,\n     // Number of data pts to display in each iteration\n     numPoints: 30,\n     // How long to wait in each iteration\n     wait: parseInt($('#updateMs').val(), 10),\n     // Which Highcharts method to update the series\n     method: $('#update').val(),\n     // How many data points to update in each iteration\n     update: parseInt($('#updatePoints').val(), 10)\n   };\n\n   // Clean up old data points from the last run\n   chart.series.length && chart.series[0].setData([]);\n\n   // Start Ajax query to get the stock history\n   $.getJSON('./histStock.php?symbol=' + symbol + \n        '&years=' + years,\n     function(stockData) {\n       // Got the whole period of historical stock data\n       $.histStock.name = stockData.name;\n       $.histStock.data = stockData.rows;\n\n       chart.hideLoading();\n       // Start the chart refresh\n       refreshSeries();\n     }\n   );\n })\n```", "```js\nvar refreshSeries = function() {\n  var i = 0, j;\n\n  // Update the series data according to each approach\n  switch ($.histStock.method) {\n    case 'setData':\n       .... \n    break;\n    case 'renewSeries':\n       .... \n    break;\n    case 'update':\n       .... \n    break;\n    case 'addPoint':\n       .... \n    break;\n  }\n\n  // Shift the offset for the next update\n  $.histStock.offset += $.histStock.update; \n\n  // Update the jQuery UI progress bar\n  ....\n\n  // Finished \n  if (i == $.histStock.data.length) {\n    return;\n  }\n\n  // Setup for the next loop\n  $.histStock.timeoutID = \n       setTimeout(refreshSeries, $.histStock.wait);\n};\n```", "```js\nsetData (Array<Mixed> data, [Boolean redraw])\n```", "```js\n  case 'setData':\n    var data = [];\n\n    // Building up the data array in the series option\n    for (i = $.histStock.offset, j = 0; \n       i < $.histStock.data.length && \n       j < $.histStock.numPoints; i++, j++) {\n      data.push([ \n        $.histStock.data[i].date,\n        $.histStock.data[i].price ]);\n    }\n\n    if (!chart.series.length) {\n\n      // Insert the very first series\n      chart.addSeries({\n        name: $.histStock.name,\n        data: data    \n      });\n    } else {\n\n      // Just update the series with \n      // the new data array\n      chart.series[0].setData(data, true);\n    }\n    break;\n```", "```js\n  case 'renewSeries':\n    var data = [];\n    for (i = $.histStock.offset, j = 0; \n       i < $.histStock.data.length && \n       j < $.histStock.numPoints; i++, j++) {\n      data.push([ $.histStock.data[i].date, \n            $.histStock.data[i].price ]);\n    }\n    // Remove all the existing series\n    if (chart.series.length) {\n      chart.series[0].remove();\n    }\n\n    // Re-insert a new series with new data\n    chart.addSeries({\n      name: $.histStock.name,\n      data: data,\n      color: chart.options.colors[0],\n      marker: {\n        symbol: chart.options.symbols[0]\n      }\n    });\n    break;\n```", "```js\nupdate ([Mixed options], [Boolean redraw], [Mixed animation])\n```", "```js\n  case 'update':\n    // Note: Series can be already existed \n    // at start if we click 'Stop' and 'Start'\n    // again\n    if (!chart.series.length || \n        !chart.series[0].points.length) {\n      // Build up the first series\n      var data = [];\n      for (i = $.histStock.offset, j = 0; \n         i < $.histStock.data.length && \n         j < $.histStock.numPoints; i++, j++) {\n        data.push([ \n          $.histStock.data[i].date, \n          $.histStock.data[i].price ]); \n      }\n\n      if (!chart.series.length) {\n        chart.addSeries({\n          name: $.histStock.name,\n          data: data    \n        });\n      } else {\n        chart.series[0].setData(data);\n      }\n\n    } else {\n      // Updating each point\n      for (i = $.histStock.offset, j = 0; \n         i < $.histStock.data.length && \n         j < $.histStock.numPoints; i++, j++) {\n        chart.series[0].points[j].update([\n          $.histStock.data[i].date,                         \n          $.histStock.data[i].price ],\n        false);\n      }\n      chart.redraw();\n    }\n    break;\n```", "```js\nremove ([Boolean redraw], [Mixed animation])\naddPoint (Object options, [Boolean redraw], [Boolean shift], \n          [Mixed animation])\n```", "```js\n  case 'addPoint':\n    // Note: Series can be already existed at\n    // start if we click 'Stop' and 'Start' again\n    if (!chart.series.length || \n        !chart.series[0].points.length) {\n\n      // Build up the first series\n      var data = [];\n      for (i = $.histStock.offset, j = 0; \n          i < $.histStock.data.length && \n        j < $.histStock.numPoints; i++, j++) {\n        data.push([ \n          $.histStock.data[i].date,\n          $.histStock.data[i].price ]); \n      }\n\n      if (!chart.series.length) {\n        chart.addSeries({\n          name: $.histStock.name,\n          data: data    \n        });\n      } else {\n        chart.series[0].setData(data);\n      }\n\n      // This is different, we don't redraw \n      // any old points\n      $.histStock.offset = i;\n\n    } else {\n\n      // Only updating the new data point\n      for (i = $.histStock.offset, j = 0; \n        i < $.histStock.data.length && \n        j < $.histStock.update; i++, j++) {\n        chart.series[0].addPoint([\n          $.histStock.data[i].date, \n          $.histStock.data[i].price ],\n          false, true );\n      }\n      chart.redraw();\n    }\n    break;\n```", "```js\nvar data = [];\n// Adjust for each experiment\nvar num = 0;\nif (location.match(/num=/)) {\n   var numParam = location.match(/num=([^&]+)/)[1];\n   num = parseInt(numParam, 10);\n}\nfor (var i = 0; i < num; i ++) {\n    data.push([ Math.random() * 1000000000, Math.random() * 50000 ]);\n}\n\nvar start = new Date().getTime();\nvar chart = new Highcharts.Chart({\n    chart: {\n         renderTo: 'container',\n         showAxes: true,\n         animation: false,\n         ....\n    },\n    series: [{\n         type: 'scatter',\n         data: data\n    }],\n    tooltips: {\n         enabled: false\n    },\n    plotOptions: {\n         series: {\n             turboThreshold: 1,\n             animation: false,\n             enableMouseTracking: false\n         }\n    }\n    }, function() {\n         var stop = new Date().getTime();\n         // Update the time taken label\n         $('#time').append(((stop - start) / 1000) + \" sec\");\n    });\n```"]