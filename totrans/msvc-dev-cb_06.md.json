["```js\n$ curl -D - -X POST http://localhost:9292/auth/login -d'email=p@eval.ca&password=foobar123'\n\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\nETag: W/\"3675d2006d59e01f8665f20ffef65fe7\"\nCache-Control: max-age=0, private, must-revalidate\nX-Request-Id: 6660a102-059f-4afe-b17c-99375db305dd\nX-Runtime: 0.150903\nTransfer-Encoding: chunked\n\n{\"auth_token\":\"eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJleHAiOjE1MzE2ODUxNjR9.vAToW_mWlOnr-GPzP79EvN62Q2MpsnLIYanz3MTbZ5Q\"}\n```", "```js\n$ curl -X POST -D - -H 'Authorization: eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJleHAiOjE1MzE2ODUxNjR9.vAToW_mWlOnr-GPzP79EvN62Q2MpsnLIYanz3MTbZ5Q' http://localhost:9292/messages -d'body=Hello&user_id=1'\nHTTP/1.1 201 Created\nContent-Type: application/json; charset=utf-8\nETag: W/\"211cdab551e63ca48de48217357f1cf7\"\nCache-Control: max-age=0, private, must-revalidate\nX-Request-Id: 1525333c-dada-40ff-8c25-a0e7d151433c\nX-Runtime: 0.019609\nTransfer-Encoding: chunked\n\n{\"id\":1,\"body\":\"Hello\",\"user_id\":1,\"created_at\":\"2018-07-14T20:08:19.369Z\",\"updated_at\":\"2018-07-14T20:08:19.369Z\",\"from_user_id\":1}\n```", "```js\ngroup 'com.packtpub.microservices'\nversion '1.0-SNAPSHOT'\n\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: '1.5.9.RELEASE'\n    }\n}\n\napply plugin: 'java'\napply plugin: 'org.springframework.boot'\napply plugin: 'io.spring.dependency-management'\n\nsourceCompatibility = 1.8\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'\n    compile group: 'org.springframework.security', name: 'spring-security-core'\n    compile group: 'org.springframework.security', name: 'spring-security-config'\n    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'\n```", "```js\n    compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'\n    compile group: 'mysql', name: 'mysql-connector-java'\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n}\n```", "```js\npackage com.packtpub.microservices.ch06.auth;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\n\n@SpringBootApplication\npublic class Application {\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch06.auth.models;\n\nimport org.hibernate.annotations.GenericGenerator;\n\nimport javax.persistence.*;\n\n@Entity\npublic class UserCredential {\n    @Id\n    @GeneratedValue(generator = \"uuid\")\n    @GenericGenerator(name = \"uuid\", strategy = \"uuid2\")\n    private String id;\n\n    @Column(unique=true)\n    private String email;\n\n    private String password;\n\n    public UserCredential(String email) {\n        this.email = email;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n```", "```js\n    public void setPassword(String password) {\n        this.password = password;\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch06.auth.models;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\npublic class AuthenticationToken {\n\n    @JsonProperty(\"auth_token\")\n    private String authToken;\n\n    public AuthenticationToken() {}\n\n    public AuthenticationToken(String authToken) {\n        this.authToken = authToken;\n    }\n\n    public String getAuthToken() {\n        return this.authToken;\n    }\n\n    public void setAuthToken(String authToken) {\n        this.authToken = authToken;\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch06.auth.data;\n\nimport com.packtpub.microservices.ch06.auth.models.UserCredential;\nimport org.springframework.data.repository.CrudRepository;\n\npublic interface UserCredentialRepository extends CrudRepository<UserCredential, String> {\n    UserCredential findByEmail(String email);\n}\n```", "```js\npackage com.packtpub.microservices.ch06.auth.exceptions;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.ResponseStatus;\n\n@ResponseStatus(HttpStatus.UNAUTHORIZED)\npublic class InvalidCredentialsException extends Exception {\n    public InvalidCredentialsException(String message) { super(message); }\n}\n```", "```js\npackage com.packtpub.microservices.ch06.auth.controllers;\n\nimport com.packtpub.microservices.ch06.auth.data.UserCredentialRepository;\nimport com.packtpub.microservices.ch06.auth.exceptions.InvalidCredentialsException;\nimport com.packtpub.microservices.ch06.auth.models.AuthenticationToken;\nimport com.packtpub.microservices.ch06.auth.models.UserCredential;\nimport io.jsonwebtoken.JwtBuilder;\nimport io.jsonwebtoken.Jwts;\nimport io.jsonwebtoken.SignatureAlgorithm;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.xml.bind.DatatypeConverter;\nimport java.security.Key;\n\n@RestController\npublic class UserCredentialController {\n\n    @Autowired\n    private UserCredentialRepository userCredentialRepository;\n\n    @Autowired\n    private PasswordEncoder passwordEncoder;\n\n    @Value(\"${secretKey}\")\n    private String keyString;\n\n    private String encodeJwt(String userId) {\n        System.out.println(\"SIGNING KEY: \" + keyString);\n        Key key = new SecretKeySpec(\n                DatatypeConverter.parseBase64Binary(keyString),\n                SignatureAlgorithm.HS256.getJcaName());\n\n        JwtBuilder builder = Jwts.builder().setId(userId)\n                .setSubject(userId)\n                .setIssuer(\"authentication-service\")\n                .signWith(SignatureAlgorithm.HS256, key);\n\n        return builder.compact();\n    }\n\n    @RequestMapping(path = \"/register\", method = RequestMethod.POST, produces = \"application/json\")\n    public AuthenticationToken register(@RequestParam String email, @RequestParam String password, @RequestParam String passwordConfirmation) throws InvalidCredentialsException {\n        if (!password.equals(passwordConfirmation)) {\n            throw new InvalidCredentialsException(\"Password and confirmation do not match\");\n        }\n\n        UserCredential cred = new UserCredential(email);\n        cred.setPassword(passwordEncoder.encode(password));\n        userCredentialRepository.save(cred);\n\n        String jws = encodeJwt(cred.getId());\n        return new AuthenticationToken(jws);\n    }\n\n    @RequestMapping(path = \"/login\", method = RequestMethod.POST, produces = \"application/json\")\n    public AuthenticationToken login(@RequestParam String email, @RequestParam String password) throws InvalidCredentialsException {\n        UserCredential user = userCredentialRepository.findByEmail(email);\n\n        if (user == null || !passwordEncoder.matches(password, user.getPassword())) {\n            throw new InvalidCredentialsException(\"Username or password invalid\");\n        }\n\n        String jws = encodeJwt(user.getId());\n        return new AuthenticationToken(jws);\n    }\n}\n```", "```js\nserver:\n  port: 8081\n\nspring:\n  jpa.hibernate.ddl-auto: create\n  datasource.url: jdbc:mysql://localhost:3306/user_credentials\n  datasource.username: root\n  datasource.password:\n\nsecretKey: supers3cr3t\n```", "```js\ngroup 'com.packtpub.microservices'\nversion '1.0-SNAPSHOT'\n\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: '1.5.9.RELEASE'\n    }\n}\n\napply plugin: 'java'\napply plugin: 'org.springframework.boot'\napply plugin: 'io.spring.dependency-management'\n\nsourceCompatibility = 1.8\ntargetCompatibility = 1.8\n\nrepositories {\n    mavenCentral()\n}\n\ndependencyManagement {\n    imports {\n        mavenBom 'org.springframework.cloud:spring-cloud-netflix:1.4.4.RELEASE'\n    }\n}\n\ndependencies {\n    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'\n    compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-zuul'\n    compile group: 'org.springframework.security', name: 'spring-security-core'\n    compile group: 'org.springframework.security', name: 'spring-security-config'\n    compile group: 'org.springframework.security', name: 'spring-security-web'\n    compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n}\n```", "```js\npackage com.packtpub.microservices.ch06.gateway;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.zuul.EnableZuulProxy;\n\n@EnableZuulProxy\n@SpringBootApplication\npublic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch06.gateway;\n\nimport io.jsonwebtoken.Claims;\nimport io.jsonwebtoken.Jwts;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.web.filter.OncePerRequestFilter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.xml.bind.DatatypeConverter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Optional;\n\npublic class AuthenticationFilter extends OncePerRequestFilter {\n\n    private String signingSecret;\n\n    AuthenticationFilter(String signingSecret) {\n        this.signingSecret = signingSecret;\n    }\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n        Optional<String> token = Optional.ofNullable(request.getHeader(\"Authorization\"));\n        Optional<Authentication> auth = token.filter(t -> t.startsWith(\"Bearer\")).flatMap(this::authentication);\n        auth.ifPresent(a -> SecurityContextHolder.getContext().setAuthentication(a));\n        filterChain.doFilter(request, response);\n    }\n\n    private Optional<Authentication> authentication(String t) {\n        System.out.println(signingSecret);\n        String actualToken = t.substring(\"Bearer \".length());\n        try {\n            Claims claims = Jwts.parser()\n                    .setSigningKey(DatatypeConverter.parseBase64Binary(signingSecret))\n                    .parseClaimsJws(actualToken).getBody();\n            Optional<String> userId = Optional.ofNullable(claims.getSubject()).map(Object::toString);\n            return userId.map(u -> new UsernamePasswordAuthenticationToken(u, null, new ArrayList<SimpleGrantedAuthority>()));\n        } catch (Exception e) {\n            return Optional.empty();\n        }\n\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch06.gateway;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n\nimport javax.servlet.http.HttpServletResponse;\n\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Value(\"${jwt.secret}\")\n    private String signingSecret;\n\n    @Override\n    protected void configure(HttpSecurity security) throws Exception {\n        security\n            .csrf().disable()\n            .logout().disable()\n            .formLogin().disable()\n            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n            .and()\n                .anonymous()\n            .and()\n                .exceptionHandling().authenticationEntryPoint(\n                    (req, rsp, e) -> rsp.sendError(HttpServletResponse.SC_UNAUTHORIZED))\n            .and()\n            .addFilterAfter(new AuthenticationFilter(signingSecret),\n                    UsernamePasswordAuthenticationFilter.class)\n            .authorizeRequests()\n            .antMatchers(\"/auth/**\").permitAll()\n            .antMatchers(\"/messages/**\").authenticated()\n            .antMatchers(\"/users/**\").authenticated();\n    }\n}\n\n```", "```js\nserver:\n  port: 8080\n\njwt:\n  secret: supers3cr3t\n\nzuul:\n  routes:\n    authentication-service:\n      path: /auth/**\n      url: http://127.0.0.1:8081\n    message-service:\n      path: /messages/**\n      url: http://127.0.0.1:8082\n    user-service:\n      path: /users/**\n      url: http://127.0.0.1:8083\n```", "```js\n$ curl -X POST -D - http://localhost:8080/auth/register -d'email=p@eval.ca&password=foobar123&passwordConfirmation=foobar123'\n\nHTTP/1.1 200\nX-Content-Type-Options: nosniff\nX-XSS-Protection: 1; mode=block\nCache-Control: no-cache, no-store, max-age=0, must-revalidate\nPragma: no-cache\nExpires: 0\nX-Frame-Options: DENY\nX-Application-Context: application:8080\nDate: Mon, 16 Jul 2018 03:27:17 GMT\nContent-Type: application/json;charset=UTF-8\nTransfer-Encoding: chunked\n\n{\"auth_token\":\"eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJmYWQzMGZiMi03MzhmLTRiM2QtYTIyZC0zZGNmN2NmNGQ1NGIiLCJzdWIiOiJmYWQzMGZiMi03MzhmLTRiM2QtYTIyZC0zZGNmN2NmNGQ1NGIiLCJpc3MiOiJhdXRoZW50aWNhdGlvbi1zZXJ2aWNlIn0.TzOKItjBU-AtRMqIB_D1n-qv6IO_zCBIK8ksGzsTC90\"}\n```", "```js\n$ curl -D - -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiI3YmU4N2U3Mi03ZjhhLTQ3ZjktODk3NS1mYzM5ZTE0NjNmODAiLCJzdWIiOiI3YmU4N2U3Mi03ZjhhLTQ3ZjktODk3NS1mYzM5ZTE0NjNmODAiLCJpc3MiOiJhdXRoZW50aWNhdGlvbi1zZXJ2aWNlIn0.fpFbHhdSEVKk95m5Q7iNjkKyM-eHkCGGKchTTKgbGWw\" http://localhost:8080/messages/123\n\nHTTP/1.1 404\nX-Content-Type-Options: nosniff\nX-XSS-Protection: 1; mode=block\nCache-Control: no-cache, no-store, max-age=0, must-revalidate\nPragma: no-cache\nExpires: 0\nX-Frame-Options: DENY\nX-Application-Context: application:8080\nDate: Mon, 16 Jul 2018 04:05:40 GMT\nContent-Type: application/json;charset=UTF-8\nTransfer-Encoding: chunked\n\n{\"timestamp\":1532318740403,\"status\":404,\"error\":\"Not Found\",\"exception\":\"com.packtpub.microservices.ch06.message.exceptions.MessageNotFoundException\",\"message\":\"Message 123 could not be found\",\"path\":\"/123\"}\n```", "```js\n$ curl -D - -H \"Authorization: Bearer not-the-right-jwt\" http://localhost:8080/messages/123\n\nHTTP/1.1 401\nX-Content-Type-Options: nosniff\nX-XSS-Protection: 1; mode=block\nCache-Control: no-cache, no-store, max-age=0, must-revalidate\nPragma: no-cache\nExpires: 0\nX-Frame-Options: DENY\nContent-Type: application/json;charset=UTF-8\nTransfer-Encoding: chunked\nDate: Mon, 23 Jul 2018 04:06:47 GMT\n\n{\"timestamp\":1532318807874,\"status\":401,\"error\":\"Unauthorized\",\"message\":\"No message available\",\"path\":\"/messages/123\"}\n```", "```js\n$ grep CONFIG_SECCOMP= /boot/config-$(uname -r)\nCONFIG_SECCOMP=y\n```", "```js\n{\n    \"defaultAction\": \"SCMP_ACT_ALLOW\",\n    \"syscalls\": [\n        {\n            \"name\": \"chown\",\n            \"action\": \"SCMP_ACT_ERRNO\"\n        }\n    ]\n}\n```", "```js\n$ docker run --rm -it --security-opt seccomp:policy.json busybox /bin/sh\n/ # touch foo\n/ # chown root foo\nchown: foo: Operation not permitted\n```", "```js\ngroup 'com.packtpub.microservices'\nversion '1.0-SNAPSHOT'\n\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: '1.5.9.RELEASE'\n    }\n}\n\napply plugin: 'java'\napply plugin: 'org.springframework.boot'\napply plugin: 'io.spring.dependency-management'\n\nsourceCompatibility = 1.8\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'\n    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '1.5.9.RELEASE'\n    compile group: 'mysql', name: 'mysql-connector-java'\n    compile group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.11.375'\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n}\n```", "```js\npackage com.packtpub.microservices.ch06.attachment;\n\nimport com.amazonaws.auth.EnvironmentVariableCredentialsProvider;\nimport com.amazonaws.regions.Regions;\nimport com.amazonaws.services.s3.AmazonS3;\nimport com.amazonaws.services.s3.AmazonS3ClientBuilder;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\n\n@SpringBootApplication\npublic class Application {\n\n    @Bean\n    public AmazonS3 getS3Client() {\n        AmazonS3ClientBuilder client = AmazonS3ClientBuilder.standard();\n        return client.withCredentials(\n                new EnvironmentVariableCredentialsProvider()).withRegion(Regions.US_WEST_2).build();\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch06.attachment.models;\n\nimport org.hibernate.annotations.GenericGenerator;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.Id;\n\n@Entity\npublic class Attachment {\n\n    @Id\n    @GeneratedValue(generator = \"uuid\")\n    @GenericGenerator(name = \"uuid\", strategy = \"uuid2\")\n    private String id;\n\n    @Column(unique = true)\n    private String messageId;\n    private String url;\n    private String fileName;\n    private Integer mediaType;\n\n    public Attachment(String messageId, String url, String fileName, Integer mediaType) {\n        this.messageId = messageId;\n        this.url = url;\n        this.fileName = fileName;\n        this.mediaType = mediaType;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getMessageId() {\n        return messageId;\n    }\n\n    public void setMessageId(String messageId) {\n        this.messageId = messageId;\n    }\n\n    public String getUrl() {\n        return url;\n    }\n\n    public void setUrl(String url) {\n        this.url = url;\n    }\n\n    public String getFileName() {\n        return fileName;\n    }\n\n    public void setFileName(String fileName) {\n        this.fileName = fileName;\n    }\n\n    public Integer getMediaType() {\n        return mediaType;\n    }\n\n    public void setMediaType(Integer mediaType) {\n        this.mediaType = mediaType;\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch06.attachment.data;\n\nimport com.packtpub.microservices.ch06.attachment.models.Attachment;\nimport org.springframework.data.repository.CrudRepository;\n\nimport java.util.List;\n\npublic interface AttachmentRepository extends CrudRepository<Attachment, String> {\n    public List<Attachment> findByMessageId(String messageId);\n}\n```", "```js\npackage com.packtpub.microservices.ch06.attachment.models;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\nimport java.util.Map;\n\npublic class AttachmentRequest {\n    private String fileName;\n\n    private String data;\n\n    public AttachmentRequest() {}\n\n    public AttachmentRequest(String fileName, String data) {\n        this.fileName = fileName;\n        this.data = data;\n    }\n\n    public String getFileName() {\n        return fileName;\n    }\n\n    public void setFileName(String fileName) {\n        this.fileName = fileName;\n    }\n\n    public String getData() {\n        return data;\n    }\n\n    public void setData(String data) {\n        this.data = data;\n    }\n\n    @JsonProperty(\"file\")\n    private void unpackFileName(Map<String, String> file) {\n        this.fileName = file.get(\"name\");\n        this.data = file.get(\"data\");\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch06.attachment.exceptions;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.ResponseStatus;\n\n@ResponseStatus(code = HttpStatus.NOT_FOUND, reason = \"No attachment(s) found\")\npublic class AttachmentNotFoundException extends RuntimeException {}\n```", "```js\npackage com.packtpub.microservices.ch06.attachment.controllers;\n\nimport com.amazonaws.services.s3.AmazonS3;\nimport com.amazonaws.services.s3.model.CannedAccessControlList;\nimport com.amazonaws.services.s3.model.ObjectMetadata;\nimport com.amazonaws.services.s3.model.PutObjectRequest;\nimport com.packtpub.microservices.ch06.attachment.data.AttachmentRepository;\nimport com.packtpub.microservices.ch06.attachment.exceptions.AttachmentNotFoundException;\nimport com.packtpub.microservices.ch06.attachment.models.Attachment;\nimport com.packtpub.microservices.ch06.attachment.models.AttachmentRequest;\nimport org.apache.commons.codec.binary.Base64;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.util.List;\n\n@RestController\npublic class AttachmentController {\n\n    @Autowired\n    private AttachmentRepository attachmentRepository;\n\n    @Autowired\n    private AmazonS3 s3Client;\n\n    @Value(\"${s3.bucket-name}\")\n    private String bucketName;\n\n    @RequestMapping(path = \"/message/{message_id}/attachments\", method = RequestMethod.GET, produces = \"application/json\")\n    public List<Attachment> getAttachments(@PathVariable(\"message_id\") String messageId) {\n        List<Attachment> attachments = attachmentRepository.findByMessageId(messageId);\n        if (attachments.isEmpty()) {\n            throw new AttachmentNotFoundException();\n        }\n        return attachments;\n    }\n\n    @RequestMapping(path = \"/message/{message_id}/attachments\", method = RequestMethod.POST, produces = \"application/json\")\n    public Attachment create(@PathVariable(\"message_id\") String messageId, @RequestBody AttachmentRequest request) {\n\n        byte[] byteArray = Base64.decodeBase64(request.getData());\n\n        ObjectMetadata metadata = new ObjectMetadata();\n        metadata.setContentLength(byteArray.length);\n        metadata.setContentType(\"image/jpeg\");\n        metadata.setCacheControl(\"public, max-age=31536000\");\n        InputStream stream = new ByteArrayInputStream(byteArray);\n\n        String fullyResolved = String.format(\"%s/%s\", messageId, request.getFileName());\n\n        s3Client.putObject(\n            new PutObjectRequest(bucketName, fullyResolved, stream, metadata)\n                .withCannedAcl(CannedAccessControlList.PublicRead));\n\n        String url = String.format(\"https://%s.s3.amazonaws.com/%s\", bucketName, fullyResolved);\n\n        Attachment attachment = new Attachment(messageId, url, request.getFileName(), 1);\n        attachmentRepository.save(attachment);\n        return attachment;\n    }\n}\n```", "```js\nspring:\n  jpa.hibernate.ddl-auto: create\n  datasource.url: ${DATABASE_URL}\n  datasource.username: ${DATABASE_USERNAME}\n  datasource.password: ${DATABASE_PASSWORD}\n\ns3:\n  bucket-name: ${BUCKET_NAME}\n```", "```js\n$ brew install vault\n```", "```js\n$ vault server --dev --dev-root-token-id=\"00000000-0000-0000-0000-000000000000\"\n```", "```js\n$ vault secrets enable -path=secret/attachment-service\n```", "```js\n$ vault write secret/attachment-service attachment.awsAccessKeyId=<access-key> attachment.awsSecretAccessKey=<access-secret>\n```", "```js\ngroup 'com.packtpub.microservices'\nversion '1.0-SNAPSHOT'\n\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: '1.5.9.RELEASE'\n    }\n}\n\napply plugin: 'java'\napply plugin: 'org.springframework.boot'\napply plugin: 'io.spring.dependency-management'\n\nsourceCompatibility = 1.8\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'\n    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '1.5.9.RELEASE'\n compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-vault-config', version: '1.1.1.RELEASE'\n    compile group: 'mysql', name: 'mysql-connector-java'\n    compile group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.11.375'\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n}\n```", "```js\npackage com.packtpub.microservices.ch06.attachment.config;\n\nimport org.springframework.boot.context.properties.ConfigurationProperties;\n\n@ConfigurationProperties(\"attachment\")\npublic class Configuration {\n\n    private String awsAccessKeyId;\n\n    private String awsSecretAccessKey;\n\n    public String getAwsAccessKeyId() {\n        return awsAccessKeyId;\n    }\n\n    public void setAwsAccessKeyId(String awsAccessKeyId) {\n        this.awsAccessKeyId = awsAccessKeyId;\n    }\n\n    public String getAwsSecretAccessKey() {\n        return awsSecretAccessKey;\n    }\n\n    public void setAwsSecretAccessKey(String awsSecretAccessKey) {\n        this.awsSecretAccessKey = awsSecretAccessKey;\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch06.attachment;\n\nimport com.amazonaws.auth.AWSCredentials;\nimport com.amazonaws.auth.AWSStaticCredentialsProvider;\nimport com.amazonaws.auth.BasicAWSCredentials;\nimport com.amazonaws.regions.Regions;\nimport com.amazonaws.services.s3.AmazonS3;\nimport com.amazonaws.services.s3.AmazonS3ClientBuilder;\n\nimport com.packtpub.microservices.ch06.attachment.config.Configuration;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\n\n@SpringBootApplication\n@EnableConfigurationProperties(Configuration.class)\npublic class Application {\n\n private final Configuration config;\n\n public Application(Configuration config) {\n this.config = config;\n    }\n\n    @Bean\n    public AmazonS3 getS3Client() {\n        AmazonS3ClientBuilder client = AmazonS3ClientBuilder.standard();\n        AWSCredentials credentials = new BasicAWSCredentials(config.getAwsAccessKeyId(), config.getAwsSecretAccessKey());\n        return client.withCredentials(\n new AWSStaticCredentialsProvider(credentials)).withRegion(Regions.US_WEST_2).build();\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n```", "```js\n$ brew install terraform\n```", "```js\n provider \"aws\" {\n     access_key = \"ACCESS_KEY\"\n     secret_key = \"SECRET_KEY\"\n     region = \"us-east-1\"\n }\n\n resource \"aws_instance\" \"example\" {\n   ami           = \"ami-b374d5a5\"\n   instance_type = \"t2.micro\"\n }\n\n resource \"aws_elasticache_cluster\" \"example\" {\n   cluster_id           = \"cluster-example\"\n   engine               = \"redis\"\n   node_type            = \"cache.m3.medium\"\n   num_cache_nodes      = 1\n   parameter_group_name = \"default.redis3.2\"\n   port                 = 6379\n   snapshot_window      = \"05:00-09:00\"\n   snapshot_retention_limit = 5\n }\n```", "```js\n$ terraform init\n```", "```js\n$ terraform apply\n\naws_instance.example: Refreshing state... (ID: i-09b5cf5ed923d60f4)\n```", "```js\n+ aws_elasticache_cluster.example\n id: <computed>\n apply_immediately: <computed>\n availability_zone: <computed>\n az_mode: <computed>\n cache_nodes.#: <computed>\n cluster_address: <computed>\n cluster_id: \"cluster-example\"\n configuration_endpoint: <computed>\n engine: \"redis\"\n engine_version: <computed>\n maintenance_window: <computed>\n node_type: \"cache.m3.medium\"\n num_cache_nodes: \"1\"\n parameter_group_name: <computed>\n port: \"6379\"\n replication_group_id: <computed>\n security_group_ids.#: <computed>\n security_group_names.#: <computed>\n snapshot_retention_limit: \"5\"\n snapshot_window: \"05:00-09:00\"\n subnet_group_name: <computed>\n\nPlan: 1 to add, 0 to change, 0 to destroy.\nDo you want to perform these actions?\n```", "```js\nEnter a value: yes\n\n...\n```", "```js\n$ terraform destroy\n```"]