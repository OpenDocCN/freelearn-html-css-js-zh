["```js\n// imperative.js\nconst data = [\n  { name: \"John\", age: 23, other: \"xxx\" },\n  { name: \"Paul\", age: 18, other: \"yyy\" },\n  { name: \"George\", age: 16, other: \"zzz\" },\n  { name: \"Ringo\", age: 25, other: \"ttt\" },\n];\n```", "```js\n// continued...\nconst result1 = [];\nfor (let i = 0; i < data.length; i++) {\n  if (data[i].age >= 21) {\n    result1.push(data[i]);\n  }\n}\n```", "```js\n// declarative.js\nconst isAdult = (person) => person.age >= 21;\nconst result2 = data.filter(isAdult);\n```", "```js\n$.get(\"some/url\", someData, function(result, status) {\n  // check status, and do something\n  // with the result\n});\n```", "```js\nvar doSomething = function(result, status) {\n  // check status, and do something\n  // with the result\n};\n$.get(\"some/url\", someData, doSomething);\n```", "```js\n// factorial.js\nfunction fact(n) {\n  if (n === 0) {\n    return 1;\n  } else {\n    return n * fact(n - 1);\n  }\n}\nconsole.log(fact(5)); // 120\n```", "```js\n// closure.js\nfunction newCounter() {\n  let count = 0;\n  return function () {\n    count++;\n    return count;\n  };\n}\nconst nc = newCounter();\nconsole.log(nc()); // 1\nconsole.log(nc()); // 2\nconsole.log(nc()); // 3\n```", "```js\n$.get(\"some/url\", data, (result, status) => {\n// check status, and do something\n// with the result\n});\n```", "```js\n// factorial.js, continued...\nconst fact2 = (n) => {\n  if (n === 0) {\n    return 1;\n  } else {\n    return n * fact2(n – 1);\n  }\n};\n```", "```js\n// continued...\nconst fact3 = (n) => (n === 0 ? 1 : n * fact3(n - 1));\n```", "```js\n// sum3.js\nfunction sum3(a, b, c) {\n  return a + b + c;\n}\nconst x  = [1, 2, 3];\nconst y = sum3(...x); // equivalent to sum3(1,2,3)\n```", "```js\n// continued...\nconst f = [1, 2, 3];\nconst g = [4, ...f, 5]; // [4,1,2,3,5]\nconst h = [...f, ...g]; // [1,2,3,4,1,2,3,5]\n```", "```js\n// continued…\nconst p = { some: 3, data: 5 };\nconst q = { more: 8, ...p }; // { more:8, some:3, data:5 }\n```", "```js\n// continued...\nconst numbers = [2, 2, 9, 6, 0, 1, 2, 4, 5, 6];\nconst minA = Math.min(...numbers); // 0\nconst maxArray = (arr) => Math.max(...arr);\nconst maxA = maxArray(numbers); // 9\n```", "```js\nsomeFn.apply(thisArg, arr) === someFn.call(thisArg, ...arr)\n```", "```js\nconst makeSaluteClass = (term) =>\n  class {\n    constructor(x) {\n      this.x = x;\n    }\n    salute(y) {\n      console.log(`${this.x} says \"${term}\" to ${y}`);\n    }\n  };\nconst Spanish = makeSaluteClass(\"HOLA\");\nnew Spanish(\"ALFA\").salute(\"BETA\");\n// ALFA says \"HOLA\" to BETA\nnew (makeSaluteClass(\"HELLO\"))(\"GAMMA\").salute(\"DELTA\");\n// GAMMA says \"HELLO\" to DELTA\nconst fullSalute = (c, x, y) => new c(x).salute(y);\nconst French = makeSaluteClass(\"BON JOUR\");\nfullSalute(French, \"EPSILON\", \"ZETA\");\n// EPSILON says \"BON JOUR\" to ZETA\n```"]