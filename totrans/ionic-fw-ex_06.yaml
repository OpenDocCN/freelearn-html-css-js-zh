- en: Chapter 6. Advanced Ionic Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will extend the application we created in [Chapter 5](part0026_split_000.html#OPEK2-798adc86542b445d8a1bb648e10b6714
    "Chapter 5. The London Tourist App"), *The London Tourist App*. We are going to
    learn how to add some more complex features like the Ionic Popover and the Ionic
    Modal components to our current application. At the end of this chapter, we will
    have a popover menu and a modal window as part of our application.
  prefs: []
  type: TYPE_NORMAL
- en: The Ionic Popover
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Ionic Popover component allows us to add a popover menu to our application.
    A popover menu is a contextual menu that is used to provide a hidden menu or extra
    menu options. It is normally used when we have limited space and want to present
    a list of options. Instead of cramming our limited available space, we create
    some sort of button so that, when clicked, the popover menu can pop up and show
    these menu items.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows a good description of what a popover does in
    reality:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Ionic Popover](img/00044.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Implementing the popover
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to implement our popover in our already existing application. The
    first thing you should do is open your application, as you have left the London
    Tourist Application in the previous chapter. What we will be aiming to do is create
    a popover that has three extra options as a list. These three options are **About**,
    **Help** and **Logout**. These three options will not perform any action as we
    will only be placing them for the sake of example. The following screenshots show
    a sample of what we will be aiming to achieve.
  prefs: []
  type: TYPE_NORMAL
- en: For iOS:![Implementing the popover](img/00045.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For Android:![Implementing the popover](img/00046.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To begin implementing our popover, open the `playlists.html` file of your LTA
    application project. Remember that this `playlists.html` file can be found by
    navigating to the `www` folder and looking into the `templates` folder within
    it. Here is the path: `www/templates/playlists.html`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you should have a file that closely resembles the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Adding the menu button
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first thing we are going to do is add the menu button that we want to trigger
    for our popover. This menu will display the popover when tapped. The following
    code block represents the code for button icon of our popover:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You are to replicate the preceding code just after the opening `<ion-view>`
    tag of your `playlists.html` page. The preceding code is using the `<ion-nav-buttons>`
    element to specify that we want to place a navigation button in our header. This
    element also has a `side` attribute with the value `right`. This `side` attribute
    is there to tell the `<ion-nav-buttons>` element which side of the page title
    to position itself. Within the `<ion-nav-buttons>` element is a simple button
    with some ionic styles that ensure that the button has an icon (`ion-more`) as
    our popover icon. If you have followed all the steps and replicated the code block
    correctly, your code should closely resemble the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: At the moment, it is probably a good idea to test our application and see how
    our icon button looks. Fire up your application on a Chrome browser using the
    `Ionic serve` technique as we have done in the past. Your screen should look close
    to what we have in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If your title is centered to the left when using an Android emulator on Chrome,
    this is perfectly normal. The iOS equivalent will be centered.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the menu button](img/00047.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Coding the popover
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The next step is to write the actual logic for our popover menu. The first
    thing we need to do is go into our `controller.js` file. This file can be found
    by looking in the following path from the root of your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Within the `controller.js` file, locate the `PlaylistsCtrl` controller. It is
    within this controller that we will be implementing our popover, as it is the
    controller associated with our `playlists.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the $ionicPopover service
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to use the Ionic Popover, Ionic has a special service called `$ionicPopover`
    that makes this very easy. Add `$ionicPopover` as a dependency by specifying it
    as a parameter on your `PlaylistsCtrl` controller. If you have done this correctly,
    your `PlaylistsCtrl` controller should now look similar to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Finishing the popover code
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The next step is to write the actual code to create the popover using the `$ionicPopover`
    service, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code block uses the `$ionicPopover` service to instantiate a new
    popover. We also use the `.fromTemplateUrl` function of `$ionicPopover` to create
    the popover. This function allows us to pass a URL for a file that contains the
    HTML for our popover. The `.fromTemplateUrl` function also returns a promise which
    returns the instance of a popover created. We then bind this popover instance
    to our scope so that it is available for use in our view. There is, however, one
    small part that we have not done. We passed in a file path `templates/popover.html`
    as the file which contains the code for our popover. However, this `popover.html`
    file does not currently exist so we need to create it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the popover.html file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create our `popover.html` file, create a new file called `popover.html`
    under the `templates` folder. This `templates` folder can be found under the `www`
    folder located in the root directory of your project. Here is the path: `www/templates/popover.html`.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have created this file, the next step is to populate this file.
    Remember that what we are trying to achieve is to have a list of menu items in
    `popover.html`. We want these three options to be **About**, **Help**, and **Logout**
    to mimic a fake set of popover options.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start creating the content of our popover, replicate the following code
    block into your `popover.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If you have done this, you have completed implementing the template of your
    popover. Now, let's understand what the HTML code we just implemented on our `popover.html`
    file does. The `<ion-popover-view>` element is an element that is essential for
    indicating that this particular view is a popover. It also contains an `<ion-content>`
    element which is a container for all the visible parts of our view, or popover
    in this case. We then put a `div` tag with a class `list` which is one of the
    Ionic's built-in classes. Within this `div`, there are three HTML bold tags that
    represent our three fake options. That is all we need to complete the implementation
    for our template. The final step is to wire our popover to ensure it works as
    it should.
  prefs: []
  type: TYPE_NORMAL
- en: Wiring up the popover
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the final step to get our popover to work. Remember that we created
    a function on our `PlayListsCtrl` controller called `openPopover()` which takes
    in a `$event` parameter. This function will initiate the popover when executed.
    We will also have to pass the `$event` parameter, which is a reserved parameter
    that represents an event sent from the view.
  prefs: []
  type: TYPE_NORMAL
- en: 'To put this into action, we will first need to wire this `openPopover()` function
    to be executed when the popover icon we created earlier is clicked. This popover
    button is in our `playlists.html` file from earlier steps. Your current `playlists.html`
    file should look close to what we have in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'What we need to do is add an Ionic tap event on the popover icon button that
    we created. We can do this with the Ionic provided attribute directive called
    `on-tap`. This `on-tap` attribute directive takes in a function which we want
    to be executed when the containing element is tapped. In our case, we want this
    function to be the `openPopover` function. Right now our popover Icon button code
    looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the code for the `on-tap` ionic attribute directive for `<button>` will
    look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see `$event` being passed as a parameter. Remember that this is very
    important and must be passed exactly as that. The final code for your `playlists.html`
    will look like the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: With that done, we have completely finished the implementation of our popover.
    Now, we can run it in our browser using the `ionic serve` technique to see what
    it looks like.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you correctly ran your app using the `ionic serve` technique, you should
    see something that looks like the following screenshot when you click the popover
    icon button. The view will be different depending on whether you are testing with
    an Android or iOS emulator setting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wiring up the popover](img/00048.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The popover is a great contextual menu tool for fitting extra menu options.
    It also has an automatic way of displaying a different version depending on what
    mobile operating system it is being displayed on. Now that we have learned how
    to use the Ionic Popover, let's learn to use the Ionic Modal.
  prefs: []
  type: TYPE_NORMAL
- en: The Ionic Modal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Ionic Modal is a component feature that Ionic provides and is used to create
    a modal window in our application. A modal window is a view that pops up on an
    existing page without losing the context of your current action. As soon as it
    is dismissed, the previous view state is restored. It is a great tool for collecting
    extra information or displaying something on the screen without losing track of
    our current state.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the modal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ionic exposes the modal functionality via a service called the `$ionicModal`
    service. This service provides us a way of creating a modal in our application.
    Before we begin implementing our modal, let's understand what we aim to do with
    the modal feature in our application.
  prefs: []
  type: TYPE_NORMAL
- en: We will still be using our LTA application and adding a modal. We want this
    modal to mimic a sample **About** page of our application which will have some
    small details about the app. Remember that we already have a button from the popover
    we created earlier which has a text labeled as **About**. We will wire this popover
    item to simply open the modal when tapped.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the modal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin implementing the modal, open your `controller.js` file and locate
    the `PlaylistsCtrl` controller. The first thing to do is add a dependency to the
    `$ionicModal` service on the `PlaylistsCtrl` controller. This is done by adding
    `$ionicModal` as a parameter for the `PlaylistsCtrl` controller function definition.
    Doing this correctly should make your `PlaylistsCtrl` controller look like what
    we have in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The next thing we are going to do is write the code for our modal in our `PlaylistsCtrl`
    controller. The following code represents the code for our modal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Replicate the preceding code into your `PlaylistsCtrl` controller. If you have
    done this correctly, your code block for the `PlaylistsCtrl` controller should
    look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's understand what the code for the modal is doing. We used the `$ionicModal`
    service to create a modal via its `.fromTemplateUrl()` method. This method takes
    two parameters; the first being the path to an HTML file containing the modal,
    and the second being an `options` object. This `options` object lets us customize
    the modal and even provides us with ways to customize things like what animation
    to use. For now, we only specify the scope the modal should use, which in this
    case is the scope of our controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `.fromTemplateUrl` method returns a promise with the created modal, which
    we set to our `$scope`. The following code is a reflection of the modal creation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We also have two functions that we created. These functions are `.openModal()`
    and `.closeModal()`. The `openModal()` function is bound to the `$scope`, and
    all it does is use the created modal's `.show()` method. The `.closeModal()` function
    does the opposite by implementing the `.hide()` method of the created modal. One
    thing we have not done yet is create the HTML template we passed, which is the
    `modal.html` in this case.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the modal.html file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Navigate to your `templates` folder and create a new HTML file called `modal.html`.
    The following code represents the template file for our modal, and you are to
    replicate this code into your `modal.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: If you look at this code closely, you can see an `<ion-modal-view>` element
    as the root element of the code. This `<ion-modal-view>` element is the root element
    of any modal template. We can also see that we have an `<ion-header-bar>` element
    and this element has a `<h1>` element used to declare the title of the modal header.
    There is also a `<button>` element that has an `on-tap` attribute that is directed
    to a `closeModal()` function which we created earlier.
  prefs: []
  type: TYPE_NORMAL
- en: There is also an `<ion-content>` element which is used to contain the visible
    main body of the modal. There is some dummy text to mimic the **About** page of
    the LTA app, but feel free to add some of your own HTML text. The last step we
    need to do is wire our popover button to open our modal.
  prefs: []
  type: TYPE_NORMAL
- en: Wiring up the modal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To wire up our modal, remember that we want our **About** popover menu item
    to open the modal when tapped. To begin, first open the `popover.html` file of
    your project. What you have currently is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'All we need to do is use the Ionic `on-tap` attribute on the `About` entry
    to reference the `openModal()` function. Doing this correctly will make our popover
    code look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'With this done, we have completed the implementation of our modal window. The
    next thing to do is to go ahead and test this. To do this, run your application
    using the `Ionic serve` technique. When your app is up and running in the browser,
    tap the popover icon and the **About** option. This should bring up a modal window
    like the one shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wiring up the modal](img/00049.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we used two very important features of Ionic and learned to
    create a popover and modal. We still used our LTA application from the previous
    chapter. The Ionic Popover is a great feature which is used to add extra menu
    items or provide contextual menu options. We also learned about the Ionic Modal,
    which is used to provide a view over another view of the app while maintaining
    the context.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn to use some of the customization techniques
    of Ionic, along with how to customize our Ionic app.
  prefs: []
  type: TYPE_NORMAL
