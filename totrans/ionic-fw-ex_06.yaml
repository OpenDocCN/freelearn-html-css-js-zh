- en: Chapter 6. Advanced Ionic Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。高级Ionic组件
- en: In this chapter, we will extend the application we created in [Chapter 5](part0026_split_000.html#OPEK2-798adc86542b445d8a1bb648e10b6714
    "Chapter 5. The London Tourist App"), *The London Tourist App*. We are going to
    learn how to add some more complex features like the Ionic Popover and the Ionic
    Modal components to our current application. At the end of this chapter, we will
    have a popover menu and a modal window as part of our application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将扩展我们在[第5章](part0026_split_000.html#OPEK2-798adc86542b445d8a1bb648e10b6714
    "第5章。伦敦旅游应用程序")中创建的应用程序，即*伦敦旅游应用程序*。我们将学习如何将一些更复杂的功能，如Ionic Popover和Ionic Modal组件，添加到我们的当前应用程序中。在本章结束时，我们将拥有一个弹出菜单和模态窗口作为我们应用程序的一部分。
- en: The Ionic Popover
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ionic Popover
- en: The Ionic Popover component allows us to add a popover menu to our application.
    A popover menu is a contextual menu that is used to provide a hidden menu or extra
    menu options. It is normally used when we have limited space and want to present
    a list of options. Instead of cramming our limited available space, we create
    some sort of button so that, when clicked, the popover menu can pop up and show
    these menu items.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic Popover组件允许我们在应用程序中添加弹出菜单。弹出菜单是一个上下文菜单，用于提供隐藏菜单或额外菜单选项。它通常在我们空间有限且想要展示选项列表时使用。我们不是拥挤我们有限的可用空间，而是创建某种按钮，当点击时，弹出菜单可以弹出并显示这些菜单项。
- en: 'The following screenshot shows a good description of what a popover does in
    reality:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了弹出窗口在实际中做什么的很好描述：
- en: '![The Ionic Popover](img/00044.jpeg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![Ionic Popover](img/00044.jpeg)'
- en: Implementing the popover
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现弹出窗口
- en: We are going to implement our popover in our already existing application. The
    first thing you should do is open your application, as you have left the London
    Tourist Application in the previous chapter. What we will be aiming to do is create
    a popover that has three extra options as a list. These three options are **About**,
    **Help** and **Logout**. These three options will not perform any action as we
    will only be placing them for the sake of example. The following screenshots show
    a sample of what we will be aiming to achieve.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在现有的应用程序中实现我们的弹出窗口。你应该做的第一件事是打开你的应用程序，因为你已经在上一章中离开了伦敦旅游应用程序。我们的目标是创建一个包含三个额外选项的弹出窗口列表。这三个选项是**关于**、**帮助**和**注销**。这三个选项不会执行任何操作，因为我们只是为了示例而放置它们。以下截图展示了我们将要实现的目标样本。
- en: For iOS:![Implementing the popover](img/00045.jpeg)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于iOS：![实现弹出窗口](img/00045.jpeg)
- en: For Android:![Implementing the popover](img/00046.jpeg)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Android：![实现弹出窗口](img/00046.jpeg)
- en: 'To begin implementing our popover, open the `playlists.html` file of your LTA
    application project. Remember that this `playlists.html` file can be found by
    navigating to the `www` folder and looking into the `templates` folder within
    it. Here is the path: `www/templates/playlists.html`.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始实现我们的弹出窗口，请打开LTA应用程序项目中的`playlists.html`文件。请记住，这个`playlists.html`文件可以通过导航到`www`文件夹并在其中查看`templates`文件夹来找到。路径如下：`www/templates/playlists.html`。
- en: 'Now, you should have a file that closely resembles the following code:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该有一个文件，其代码与以下代码非常相似：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Adding the menu button
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加菜单按钮
- en: 'The first thing we are going to do is add the menu button that we want to trigger
    for our popover. This menu will display the popover when tapped. The following
    code block represents the code for button icon of our popover:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要做的第一件事是添加我们想要触发弹出窗口的菜单按钮。当点击时，此菜单将显示弹出窗口。以下代码块表示我们弹出窗口的按钮图标代码：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You are to replicate the preceding code just after the opening `<ion-view>`
    tag of your `playlists.html` page. The preceding code is using the `<ion-nav-buttons>`
    element to specify that we want to place a navigation button in our header. This
    element also has a `side` attribute with the value `right`. This `side` attribute
    is there to tell the `<ion-nav-buttons>` element which side of the page title
    to position itself. Within the `<ion-nav-buttons>` element is a simple button
    with some ionic styles that ensure that the button has an icon (`ion-more`) as
    our popover icon. If you have followed all the steps and replicated the code block
    correctly, your code should closely resemble the following code block:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要在`playlists.html`页面的`<ion-view>`标签之后复制前面的代码。前面的代码使用`<ion-nav-buttons>`元素来指定我们想在页眉中放置一个导航按钮。此元素还有一个`side`属性，其值为`right`。这个`side`属性是用来告诉`<ion-nav-buttons>`元素将自身定位在页面标题的哪一侧。在`<ion-nav-buttons>`元素中有一个简单的按钮，它具有一些ionic样式，确保按钮有一个图标（`ion-more`）作为我们的弹出视图图标。如果你已经遵循了所有步骤并正确复制了代码块，你的代码应该非常类似于以下代码块：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: At the moment, it is probably a good idea to test our application and see how
    our icon button looks. Fire up your application on a Chrome browser using the
    `Ionic serve` technique as we have done in the past. Your screen should look close
    to what we have in the following screenshot.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，测试我们的应用程序并查看我们的图标按钮的外观可能是个好主意。使用我们过去使用过的`Ionic serve`技术，在Chrome浏览器上启动你的应用程序。你的屏幕应该看起来接近以下截图中的样子。
- en: Tip
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If your title is centered to the left when using an Android emulator on Chrome,
    this is perfectly normal. The iOS equivalent will be centered.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在使用Chrome上的Android模拟器时标题居左，这是完全正常的。iOS的等效操作也将居中。
- en: '![Adding the menu button](img/00047.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![添加菜单按钮](img/00047.jpeg)'
- en: Coding the popover
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写弹出视图代码
- en: 'The next step is to write the actual logic for our popover menu. The first
    thing we need to do is go into our `controller.js` file. This file can be found
    by looking in the following path from the root of your project:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是编写我们的弹出菜单的实际逻辑。首先，我们需要进入我们的`controller.js`文件。你可以通过从项目根目录查找以下路径来找到此文件：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Within the `controller.js` file, locate the `PlaylistsCtrl` controller. It is
    within this controller that we will be implementing our popover, as it is the
    controller associated with our `playlists.html`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在`controller.js`文件中，找到`PlaylistsCtrl`控制器。我们将在这个控制器中实现我们的弹出视图，因为它与我们的`playlists.html`相关联。
- en: Adding the $ionicPopover service
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加`$ionicPopover`服务
- en: 'In order to use the Ionic Popover, Ionic has a special service called `$ionicPopover`
    that makes this very easy. Add `$ionicPopover` as a dependency by specifying it
    as a parameter on your `PlaylistsCtrl` controller. If you have done this correctly,
    your `PlaylistsCtrl` controller should now look similar to the following code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用Ionic Popover，Ionic有一个名为`$ionicPopover`的特殊服务，这使得操作变得非常简单。通过在`PlaylistsCtrl`控制器中将`$ionicPopover`指定为参数来将其添加为依赖项。如果你已经正确完成，你的`PlaylistsCtrl`控制器现在应该类似于以下代码：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Finishing the popover code
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 完成弹出视图代码
- en: 'The next step is to write the actual code to create the popover using the `$ionicPopover`
    service, as shown in the following code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是使用`$ionicPopover`服务编写创建弹出视图的实际代码，如下所示：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The preceding code block uses the `$ionicPopover` service to instantiate a new
    popover. We also use the `.fromTemplateUrl` function of `$ionicPopover` to create
    the popover. This function allows us to pass a URL for a file that contains the
    HTML for our popover. The `.fromTemplateUrl` function also returns a promise which
    returns the instance of a popover created. We then bind this popover instance
    to our scope so that it is available for use in our view. There is, however, one
    small part that we have not done. We passed in a file path `templates/popover.html`
    as the file which contains the code for our popover. However, this `popover.html`
    file does not currently exist so we need to create it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码块使用`$ionicPopover`服务实例化一个新的弹出视图。我们还使用`$ionicPopover`的`.fromTemplateUrl`函数来创建弹出视图。此函数允许我们传递一个包含我们的弹出视图HTML的文件的URL。`.fromTemplateUrl`函数还返回一个promise，该promise返回创建的弹出视图实例。然后我们将此弹出视图实例绑定到我们的作用域，以便在视图中使用。然而，我们还有一个小的部分还没有完成。我们传递了一个文件路径`templates/popover.html`作为包含我们的弹出视图代码的文件。但是，这个`popover.html`文件目前不存在，因此我们需要创建它。
- en: Creating the popover.html file
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建`popover.html`文件
- en: 'To create our `popover.html` file, create a new file called `popover.html`
    under the `templates` folder. This `templates` folder can be found under the `www`
    folder located in the root directory of your project. Here is the path: `www/templates/popover.html`.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建我们的 `popover.html` 文件，在项目的根目录下的 `templates` 文件夹中创建一个名为 `popover.html` 的新文件。这个
    `templates` 文件夹位于 `www` 文件夹中，而 `www` 文件夹位于项目的根目录。路径如下：`www/templates/popover.html`。
- en: Now that we have created this file, the next step is to populate this file.
    Remember that what we are trying to achieve is to have a list of menu items in
    `popover.html`. We want these three options to be **About**, **Help**, and **Logout**
    to mimic a fake set of popover options.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了该文件，下一步就是填充这个文件。记住，我们试图实现的是在 `popover.html` 中有一个菜单项列表。我们希望这三个选项是 **关于**、**帮助**
    和 **注销**，以模拟一组假定的弹出选项。
- en: 'To start creating the content of our popover, replicate the following code
    block into your `popover.html`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始创建弹出内容，将以下代码块复制到您的 `popover.html` 文件中：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you have done this, you have completed implementing the template of your
    popover. Now, let's understand what the HTML code we just implemented on our `popover.html`
    file does. The `<ion-popover-view>` element is an element that is essential for
    indicating that this particular view is a popover. It also contains an `<ion-content>`
    element which is a container for all the visible parts of our view, or popover
    in this case. We then put a `div` tag with a class `list` which is one of the
    Ionic's built-in classes. Within this `div`, there are three HTML bold tags that
    represent our three fake options. That is all we need to complete the implementation
    for our template. The final step is to wire our popover to ensure it works as
    it should.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经完成了这个操作，您已经完成了弹出模板的实现。现在，让我们了解我们刚刚在 `popover.html` 文件上实现的 HTML 代码的作用。`<ion-popover-view>`
    元素是一个表示特定视图是弹出视图的必要元素。它还包含一个 `<ion-content>` 元素，这是一个容器，用于包含我们视图的所有可见部分，在这种情况下是弹出视图。我们在这个
    `div` 标签中放入一个具有 `list` 类的标签，这是 Ionic 的内置类之一。在这个 `div` 内部，有三个 HTML 粗体标签代表我们的三个假选项。这就是我们完成模板实现所需的所有内容。最后一步是将弹出功能连接起来，确保其按预期工作。
- en: Wiring up the popover
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 弹出功能的连接
- en: This is the final step to get our popover to work. Remember that we created
    a function on our `PlayListsCtrl` controller called `openPopover()` which takes
    in a `$event` parameter. This function will initiate the popover when executed.
    We will also have to pass the `$event` parameter, which is a reserved parameter
    that represents an event sent from the view.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使弹出功能正常工作的最后一步。请记住，我们在 `PlayListsCtrl` 控制器中创建了一个名为 `openPopover()` 的函数，该函数接受一个
    `$event` 参数。当这个函数被调用时，它将启动弹出视图。我们还将必须传递 `$event` 参数，这是一个保留参数，代表从视图发送的事件。
- en: 'To put this into action, we will first need to wire this `openPopover()` function
    to be executed when the popover icon we created earlier is clicked. This popover
    button is in our `playlists.html` file from earlier steps. Your current `playlists.html`
    file should look close to what we have in the following code block:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将这个功能付诸实践，我们首先需要将这个 `openPopover()` 函数连接到我们之前创建的弹出图标点击时执行。这个弹出按钮位于我们之前步骤中的
    `playlists.html` 文件中。您当前的 `playlists.html` 文件应该看起来接近以下代码块中的内容：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'What we need to do is add an Ionic tap event on the popover icon button that
    we created. We can do this with the Ionic provided attribute directive called
    `on-tap`. This `on-tap` attribute directive takes in a function which we want
    to be executed when the containing element is tapped. In our case, we want this
    function to be the `openPopover` function. Right now our popover Icon button code
    looks as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的是在创建的弹出图标按钮上添加一个 Ionic 点击事件。我们可以使用 Ionic 提供的属性指令 `on-tap` 来完成这个操作。这个 `on-tap`
    属性指令接受一个函数，当包含的元素被点击时，该函数将被执行。在我们的例子中，我们希望这个函数是 `openPopover` 函数。目前我们的弹出图标按钮代码如下所示：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, the code for the `on-tap` ionic attribute directive for `<button>` will
    look as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`<button>` 的 `on-tap` ionic 属性指令的代码如下所示：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can see `$event` being passed as a parameter. Remember that this is very
    important and must be passed exactly as that. The final code for your `playlists.html`
    will look like the following code block:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到 `$event` 被作为参数传递。请记住，这非常重要，必须严格按照这种方式传递。您最终的 `playlists.html` 代码将如下所示：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: With that done, we have completely finished the implementation of our popover.
    Now, we can run it in our browser using the `ionic serve` technique to see what
    it looks like.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些操作后，我们已经完全完成了弹出功能的实现。现在，我们可以使用 `ionic serve` 技术在浏览器中运行它，以查看其外观。
- en: 'If you correctly ran your app using the `ionic serve` technique, you should
    see something that looks like the following screenshot when you click the popover
    icon button. The view will be different depending on whether you are testing with
    an Android or iOS emulator setting:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用`ionic serve`技术正确运行了您的应用程序，当您点击弹出图标按钮时，您应该看到以下截图所示的内容。视图将根据您是否使用Android或iOS模拟器设置进行测试而有所不同：
- en: '![Wiring up the popover](img/00048.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![连接弹出菜单](img/00048.jpeg)'
- en: The popover is a great contextual menu tool for fitting extra menu options.
    It also has an automatic way of displaying a different version depending on what
    mobile operating system it is being displayed on. Now that we have learned how
    to use the Ionic Popover, let's learn to use the Ionic Modal.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 弹出菜单是一个很好的上下文菜单工具，用于添加额外的菜单选项。它还有一个根据显示的移动操作系统自动显示不同版本的功能。现在我们已经学会了如何使用Ionic
    Popover，让我们学习如何使用Ionic Modal。
- en: The Ionic Modal
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ionic Modal
- en: The Ionic Modal is a component feature that Ionic provides and is used to create
    a modal window in our application. A modal window is a view that pops up on an
    existing page without losing the context of your current action. As soon as it
    is dismissed, the previous view state is restored. It is a great tool for collecting
    extra information or displaying something on the screen without losing track of
    our current state.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic Modal是Ionic提供的一个组件功能，用于在我们的应用程序中创建模态窗口。模态窗口是一个弹出在现有页面上的视图，而不会丢失当前操作上下文。一旦它被取消，之前的视图状态就会恢复。这是一个收集额外信息或在屏幕上显示某些内容而不丢失当前状态的好工具。
- en: Creating the modal
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建模态
- en: Ionic exposes the modal functionality via a service called the `$ionicModal`
    service. This service provides us a way of creating a modal in our application.
    Before we begin implementing our modal, let's understand what we aim to do with
    the modal feature in our application.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic通过一个名为`$ionicModal`的服务公开模态功能。此服务为我们提供了一种在应用程序中创建模态的方法。在我们开始实现模态之前，让我们了解我们希望通过应用程序中的模态功能实现什么。
- en: We will still be using our LTA application and adding a modal. We want this
    modal to mimic a sample **About** page of our application which will have some
    small details about the app. Remember that we already have a button from the popover
    we created earlier which has a text labeled as **About**. We will wire this popover
    item to simply open the modal when tapped.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用我们的LTA应用程序并添加一个模态。我们希望这个模态模仿应用程序的示例**关于**页面，其中将包含一些关于应用程序的详细信息。记住，我们已经有了一个来自我们之前创建的弹出按钮的按钮，上面标有**关于**文本。我们将把这个弹出项连接起来，以便在点击时简单地打开模态。
- en: Implementing the modal
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现模态
- en: 'To begin implementing the modal, open your `controller.js` file and locate
    the `PlaylistsCtrl` controller. The first thing to do is add a dependency to the
    `$ionicModal` service on the `PlaylistsCtrl` controller. This is done by adding
    `$ionicModal` as a parameter for the `PlaylistsCtrl` controller function definition.
    Doing this correctly should make your `PlaylistsCtrl` controller look like what
    we have in the following code block:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始实现模式，请打开您的`controller.js`文件并定位到`PlaylistsCtrl`控制器。首先要做的是在`PlaylistsCtrl`控制器上添加对`$ionicModal`服务的依赖。这是通过将`$ionicModal`作为`PlaylistsCtrl`控制器函数定义的参数来完成的。正确执行此操作后，您的`PlaylistsCtrl`控制器应该看起来像以下代码块中的内容：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The next thing we are going to do is write the code for our modal in our `PlaylistsCtrl`
    controller. The following code represents the code for our modal:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将要在`PlaylistsCtrl`控制器中编写我们的模态代码。以下代码表示我们的模态代码：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Replicate the preceding code into your `PlaylistsCtrl` controller. If you have
    done this correctly, your code block for the `PlaylistsCtrl` controller should
    look like the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 将前面的代码复制到您的`PlaylistsCtrl`控制器中。如果您正确执行了此操作，您的`PlaylistsCtrl`控制器的代码块应该看起来像以下内容：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, let's understand what the code for the modal is doing. We used the `$ionicModal`
    service to create a modal via its `.fromTemplateUrl()` method. This method takes
    two parameters; the first being the path to an HTML file containing the modal,
    and the second being an `options` object. This `options` object lets us customize
    the modal and even provides us with ways to customize things like what animation
    to use. For now, we only specify the scope the modal should use, which in this
    case is the scope of our controller.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们理解一下模态代码的作用。我们使用了 `$ionicModal` 服务通过其 `.fromTemplateUrl()` 方法创建模态。这个方法接受两个参数；第一个是包含模态的
    HTML 文件的路径，第二个是一个 `options` 对象。这个 `options` 对象让我们可以自定义模态，并提供给我们自定义诸如使用哪种动画等事物的途径。目前，我们只指定了模态应该使用的范围，在这个例子中是控制器的范围。
- en: 'The `.fromTemplateUrl` method returns a promise with the created modal, which
    we set to our `$scope`. The following code is a reflection of the modal creation:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`.fromTemplateUrl` 方法返回一个包含创建的模态的承诺，我们将它设置到 `$scope` 上。以下代码是模态创建的反映：'
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We also have two functions that we created. These functions are `.openModal()`
    and `.closeModal()`. The `openModal()` function is bound to the `$scope`, and
    all it does is use the created modal's `.show()` method. The `.closeModal()` function
    does the opposite by implementing the `.hide()` method of the created modal. One
    thing we have not done yet is create the HTML template we passed, which is the
    `modal.html` in this case.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还创建了两个函数。这些函数是 `.openModal()` 和 `.closeModal()`。`openModal()` 函数绑定到 `$scope`，它所做的只是使用创建的模态的
    `.show()` 方法。`.closeModal()` 函数通过实现创建的模态的 `.hide()` 方法来做相反的操作。我们还没有做的事情是创建我们传递的
    HTML 模板，在这个例子中是 `modal.html`。
- en: Creating the modal.html file
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 modal.html 文件
- en: 'Navigate to your `templates` folder and create a new HTML file called `modal.html`.
    The following code represents the template file for our modal, and you are to
    replicate this code into your `modal.html` file:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到你的 `templates` 文件夹，创建一个名为 `modal.html` 的新 HTML 文件。以下代码代表我们的模态模板文件，你需要将此代码复制到你的
    `modal.html` 文件中：
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If you look at this code closely, you can see an `<ion-modal-view>` element
    as the root element of the code. This `<ion-modal-view>` element is the root element
    of any modal template. We can also see that we have an `<ion-header-bar>` element
    and this element has a `<h1>` element used to declare the title of the modal header.
    There is also a `<button>` element that has an `on-tap` attribute that is directed
    to a `closeModal()` function which we created earlier.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细查看这段代码，你可以看到 `<ion-modal-view>` 元素作为代码的根元素。这个 `<ion-modal-view>` 元素是任何模态模板的根元素。我们还可以看到我们有一个
    `<ion-header-bar>` 元素，这个元素有一个 `<h1>` 元素用来声明模态标题。还有一个 `<button>` 元素，它有一个 `on-tap`
    属性，指向我们之前创建的 `closeModal()` 函数。
- en: There is also an `<ion-content>` element which is used to contain the visible
    main body of the modal. There is some dummy text to mimic the **About** page of
    the LTA app, but feel free to add some of your own HTML text. The last step we
    need to do is wire our popover button to open our modal.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个 `<ion-content>` 元素，用于包含模态的可见主体部分。有一些占位文本来模拟 LTA 应用程序的 **关于** 页面，但你可以自由添加一些自己的
    HTML 文本。我们需要做的最后一步是将我们的弹出按钮连接到我们的模态。
- en: Wiring up the modal
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接模态
- en: 'To wire up our modal, remember that we want our **About** popover menu item
    to open the modal when tapped. To begin, first open the `popover.html` file of
    your project. What you have currently is as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要连接我们的模态，请记住我们希望当点击时，**关于** 弹出菜单项可以打开模态。首先，打开你的项目中的 `popover.html` 文件。你目前有的内容如下：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'All we need to do is use the Ionic `on-tap` attribute on the `About` entry
    to reference the `openModal()` function. Doing this correctly will make our popover
    code look like the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的只是使用 Ionic 的 `on-tap` 属性在 `About` 条目上引用 `openModal()` 函数。正确地这样做会使我们的弹出代码看起来如下：
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'With this done, we have completed the implementation of our modal window. The
    next thing to do is to go ahead and test this. To do this, run your application
    using the `Ionic serve` technique. When your app is up and running in the browser,
    tap the popover icon and the **About** option. This should bring up a modal window
    like the one shown in the following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，我们已经完成了模态窗口的实现。接下来要做的事情是进行测试。为此，使用 `Ionic serve` 技术运行你的应用程序。当你的应用程序在浏览器中运行时，点击弹出图标并选择
    **关于** 选项。这应该会弹出一个类似于以下截图中的模态窗口：
- en: '![Wiring up the modal](img/00049.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![连接模态](img/00049.jpeg)'
- en: Summary
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we used two very important features of Ionic and learned to
    create a popover and modal. We still used our LTA application from the previous
    chapter. The Ionic Popover is a great feature which is used to add extra menu
    items or provide contextual menu options. We also learned about the Ionic Modal,
    which is used to provide a view over another view of the app while maintaining
    the context.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用了Ionic的两个非常重要的特性，并学会了创建弹出窗口和模态窗口。我们仍然使用了上一章中的LTA应用程序。Ionic弹出窗口是一个很棒的功能，用于添加额外的菜单项或提供上下文菜单选项。我们还了解了Ionic模态窗口，它用于在保持上下文的同时，提供对应用中另一个视图的查看。
- en: In the next chapter, we will learn to use some of the customization techniques
    of Ionic, along with how to customize our Ionic app.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用Ionic的一些自定义技术，以及如何自定义我们的Ionic应用程序。
