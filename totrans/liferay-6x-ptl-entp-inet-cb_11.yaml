- en: Chapter 11. Quick Tricks and Advanced Knowledge
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章。快速技巧和高级知识
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The language properties hook
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言属性钩子
- en: Setting up the portal session time and session policy
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置门户会话时间和会话策略
- en: Configuring Liferay with the SMTP server
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 SMTP 服务器配置 Liferay
- en: Intranet protection by the antisamy-hook plugin
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 antisamy-hook 插件进行内网保护
- en: Migrating content from one database to another database
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将内容从一个数据库迁移到另一个数据库
- en: Using the Liferay Service Bus for communication between portlets
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Liferay 服务总线进行插件间的通信
- en: Clustering Liferay Portal
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集群 Liferay 门户
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: This chapter covers various topics that are not connected to each other. Recipes
    cover some standard scenarios that a Liferay administrator will face and provide
    solutions. It will help you perform those specific tasks for your intranet sites.
    Almost everyone should know how to configure SMTP in order to send e-mails and
    receive notifications. The next important aspect is security. Administrators and
    developers should know how to install the antisamy-hook plugin or how to set session
    time and session policy. This is extremely important regardless of what type of
    portal Liferay will be used for. Also, this chapter will introduce important knowledge
    about advanced tricks in Liferay. It will describe the Liferay Service Bus and
    show how a user can use it. Furthermore, it will provide a detailed description
    of how clustering works in Liferay and how to migrate content from one database
    to another.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了各种相互之间没有关联的主题。食谱涵盖了 Liferay 管理员可能会遇到的一些标准场景，并提供了解决方案。这将帮助您为您的内网站点执行这些特定任务。几乎每个人都应该知道如何配置
    SMTP 以发送电子邮件和接收通知。下一个重要方面是安全性。管理员和开发者应该知道如何安装 antisamy-hook 插件或如何设置会话时间和会话策略。这对于
    Liferay 将用于任何类型的门户来说都极为重要。此外，本章还将介绍有关 Liferay 高级技巧的重要知识。它将描述 Liferay 服务总线，并展示用户如何使用它。此外，它还将详细说明
    Liferay 中集群的工作原理以及如何将内容从一个数据库迁移到另一个数据库。
- en: The language properties hook
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语言属性钩子
- en: 'Liferay has a multilanguage architecture and enables users to add content with
    many translations. Moreover, it gives users out-of-the-box functionality to change
    languages. Apart from this, the content portal also contains many labels that
    also have their own translation. It means that the Liferay design has a functionality
    in which it is possible to translate labels or fields. If we look into the sources
    (`portal-impl/src/content`), there are a lot of files with the following names:
    `Language_en.properties`, `Language_de.properties`, `Language_pl.properties`,
    and so on. The ISO 639-1 standard defines a set of possible codes for every language,
    such as **en** for English, **de** for German, and so on. The Liferay Portal supports
    up to 47 languages, which are defined in the `portal-impl/src/portal.properties`
    file called **locales**. Default translations do not always meet our expectations.
    Thus, in this recipe, we will show you how to change the existing labels using
    the hook plugin.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Liferay 拥有多语言架构，并允许用户添加具有多种翻译的内容。此外，它还提供了开箱即用的功能来更改语言。除此之外，内容门户还包含许多标签，这些标签也有自己的翻译。这意味着
    Liferay 的设计具有一种功能，可以翻译标签或字段。如果我们查看源代码（`portal-impl/src/content`），会发现许多具有以下名称的文件：`Language_en.properties`、`Language_de.properties`、`Language_pl.properties`
    等等。ISO 639-1 标准为每种语言定义了一组可能的代码，例如 **en** 代表英语，**de** 代表德语，等等。Liferay 门户支持多达 47
    种语言，这些语言在名为 **locales** 的 `portal-impl/src/portal.properties` 文件中定义。默认翻译并不总是符合我们的期望。因此，在本食谱中，我们将向您展示如何使用钩子插件更改现有的标签。
- en: How to do it…
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'One of the functionalities of the hook plugin is to override messages in existing
    translations. Our goal is to change the **Sign in** label to **Intranet login**.
    The first step is generating a new hook called `language-hook`. To achieve it,
    use the Liferay Plugins SDK (`${SDK_HOME}/hook/create.sh language "Language hook"`)
    or Maven archetype generator (`mvn archetype:generate -Dfilter=liferay-hook`).
    If you encounter a problem with generating the language hook, go back and study
    the *Creating a custom portlet* recipe from [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Installation and Basic Configuration"), *Installation and Basic Configuration*.
    We assume that the user generates this plugin as a Maven project. Next, import
    the project to your favorite IDE, such as Eclipse, IntelliJ IDEA, or NetBeans,
    and follow these steps:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 钩子插件的一个功能是覆盖现有翻译中的消息。我们的目标是将**登录**标签更改为**内网登录**。第一步是生成一个新的钩子，称为`language-hook`。要实现它，请使用Liferay插件SDK（`${SDK_HOME}/hook/create.sh
    language "Language hook"`）或Maven存档生成器（`mvn archetype:generate -Dfilter=liferay-hook`）。如果您在生成语言钩子时遇到问题，请返回并研究[第1章](part0015.xhtml#aid-E9OE1
    "第1章。安装和基本配置")中的*创建自定义端口*食谱，*安装和基本配置*。我们假设用户将此插件作为Maven项目生成。接下来，将项目导入您喜欢的IDE，例如Eclipse、IntelliJ
    IDEA或NetBeans，并按照以下步骤操作：
- en: Open the `src/main/webapp/WEB-INF/liferay-hook.xml` file.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src/main/webapp/WEB-INF/liferay-hook.xml`文件。
- en: 'Define a new language property file:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个新的语言属性文件：
- en: '[PRE0]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Create the `i18n` folder in `src/main/resources` and create the `Language_en.properties`
    file.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/main/resources`中创建`i18n`文件夹，并创建`Language_en.properties`文件。
- en: 'In `Language_en.properties`, add the following line:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Language_en.properties`中添加以下行：
- en: '[PRE1]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Compile the plugin and deploy it by invoking the `mvn clean install liferay:deploy`
    command.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译插件并通过执行`mvn clean install liferay:deploy`命令来部署它。
- en: How it works…
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'As we said at the beginning, Liferay supports many languages and translations.
    Every translation is kept in the `Language.properties` file with a specific suffix,
    such as `_pl`, `_en`, `_de`, and so on. All the available locales are defined
    in the portal properties as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们一开始所说的，Liferay支持许多语言和翻译。每个翻译都保存在具有特定后缀的`Language.properties`文件中，例如`_pl`、`_en`、`_de`等。所有可用的区域设置都在以下门户属性中定义：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The first property specifies all the available locales in the Liferay Portal.
    The second one lists languages that are in beta. A set of beta properties means
    that the translation is not finished, and Liferay can contain some errors or mistakes.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个属性指定了Liferay Portal中所有可用的区域设置。第二个属性列出处于beta测试的语言。一组beta属性意味着翻译尚未完成，Liferay可能包含一些错误或错误。
- en: Note
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is possible to join the community that works with translations and participate
    with them. All the necessary information is available at [http://translate.liferay.com](http://translate.liferay.com).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以加入与翻译一起工作的社区，并参与其中。所有必要的信息都可在[http://translate.liferay.com](http://translate.liferay.com)找到。
- en: The last property lists languages that Liferay supports by default. It is necessary
    to change it if we create a new project and fit it to our requirements. It can
    be changed later. This operation is available in the Control Panel section.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个属性列出Liferay默认支持的语言。如果我们创建一个新项目并满足我们的要求，则需要更改它。这可以在控制面板部分稍后更改。此操作在控制面板部分可用。
- en: In this recipe, we showed you how to override the existing property. Overriding
    works for every single property defined in `portal-impl/src/content/Language.properties`.
    Additionally, in our `i18n/Language_en.properties`, it is possible to add a new
    property that can be used in our new functionalities.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们向您展示了如何覆盖现有的属性。覆盖对于在`portal-impl/src/content/Language.properties`中定义的每个属性都有效。此外，在我们的`i18n/Language_en.properties`中，可以添加一个新属性，该属性可以用于我们的新功能。
- en: In the Liferay language properties, there is a `portal-impl/src/content/Language.properties`
    file (without a language suffix). This set of properties is used when the system
    cannot find a property for the specific country/language.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在Liferay语言属性中，有一个`portal-impl/src/content/Language.properties`文件（没有语言后缀）。这组属性用于系统找不到特定国家/语言属性时。
- en: There's more…
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Apart from customizing language properties, Liferay lets you choose how your
    internationalization works. To understand this feature, you should know how to
    change the Liferay language first. By default, Liferay provides a unique URL for
    a specific language. The following are some of the examples:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 除了自定义语言属性外，Liferay 允许您选择国际化如何工作。要了解此功能，您首先应该知道如何更改 Liferay 语言。默认情况下，Liferay
    为特定语言提供唯一的 URL。以下是一些示例：
- en: '`http://localhost:8080/pl/web/guest/home`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/pl/web/guest/home`'
- en: '`http://localhost:8080/en_US/web/guest/home`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/en_US/web/guest/home`'
- en: This context (`/pl`, `/en_US`) is handled by `I18nServlet`, which is defined
    in the `web.xml` file. This servlet changes the language and renders a page with
    dedicated translation.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此上下文（`/pl`，`/en_US`）由 `I18nServlet` 处理，该 Servlet 定义在 `web.xml` 文件中。此 Servlet
    更改语言并渲染带有专用翻译的页面。
- en: 'In detail, there is a property called `locale.prepend.friendly.url.style` located
    in `portal-impl/src/portal.properties`. It has four possible values that are defined
    in the following table:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 详细来说，有一个名为 `locale.prepend.friendly.url.style` 的属性位于 `portal-impl/src/portal.properties`
    中。它有四个可能的值，如下表所示：
- en: '| Value | Description |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 值 | 描述 |'
- en: '| --- | --- |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `0` | The locale is not automatically prepended to a URL. This means that
    each URL could potentially point to many different languages. For example, if
    a user sets the German language in their account settings, the Portal displays
    sites in English by default.If this property is set as 0, page `http://localhost:8080/web/guest`
    is displayed in English. However, when users log in, it is automatically translated
    to German. URI has the same value, `/web/guest`, without language context. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `0` | 本地化不会自动添加到 URL 前面。这意味着每个 URL 可能指向多种不同的语言。例如，如果用户在账户设置中设置了德语，门户默认显示英语网站。如果此属性设置为
    0，页面 `http://localhost:8080/web/guest` 将以英语显示。然而，当用户登录时，它会自动翻译成德语。URI 的值相同，为 `/web/guest`，没有语言上下文。
    |'
- en: '| `1` | The locale is automatically prepended to a URL when the requested locale
    is not the default locale. This means that each URL points to just one language.
    Let''s analyze the situation from the first example where a user sets a language
    different from the default one. The first visit to the `http://localhost:8080`
    portal displays content in the default language (English). After the login action,
    the user is redirected to the `http://localhost:8080/de` URL. On every page, there
    is the `/de/web/guest/{PAGE}` URI. After logout, the portal remembers the language
    and displays German translations. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `1` | 当请求的语言不是默认语言时，本地化会自动添加到 URL 前面。这意味着每个 URL 只指向一种语言。让我们从第一个例子开始分析，其中用户设置了与默认语言不同的语言。第一次访问
    `http://localhost:8080` 门户时，内容以默认语言（英语）显示。在登录操作后，用户被重定向到 `http://localhost:8080/de`
    URL。在每一页上，都有 `/de/web/guest/{PAGE}` URI。在注销后，门户会记住语言并显示德语翻译。 |'
- en: '| `2` | The locale is automatically prepended to every URL. This means that
    each URL points to just one language. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `2` | 本地化会自动添加到每个 URL 前面。这意味着每个 URL 只指向一种语言。 |'
- en: '| `3` | The locale is automatically prepended to a URL when the requested locale
    is not the default user locale. In the case of guest users, the behavior is the
    same as having a value of 1\. However, in the our case (the user has a different
    locale than the portal), there is the following situation:By default, the portal
    displays content in English, and there is no language context. The URL looks like
    `http://localhost:8080/`.When a user logs in, the language is German, but the
    URL is the same, `http://localhost:8080` (without language context).After the
    logout action, the URL is the same, but the language is still German. To change
    the language, it is necessary to invoke the `http://localhost:8080/en` URL. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `3` | 当请求的语言不是默认用户语言时，本地化会自动添加到 URL 前面。对于访客用户，行为与值为 1 时相同。然而，在我们的情况下（用户具有与门户不同的本地化设置），存在以下情况：默认情况下，门户以英语显示内容，没有语言上下文。URL
    看起来像 `http://localhost:8080/`。当用户登录时，语言是德语，但 URL 仍然是相同的，`http://localhost:8080`（没有语言上下文）。在注销操作后，URL
    仍然是相同的，但语言仍然是德语。要更改语言，需要调用 `http://localhost:8080/en` URL。 |'
- en: 'The last thing connected with language settings, is the default language definition.
    It is placed in `portal-impl/src/system.properties` and can be overridden by `system-ext.properties`.
    To set the default language, override the following properties:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 与语言设置相关的最后一件事是默认语言定义。它位于 `portal-impl/src/system.properties` 中，可以被 `system-ext.properties`
    覆盖。要设置默认语言，覆盖以下属性：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: See also
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: In order to learn about creating plugins (especially portlets), refer to the
    *Creating a custom portlet* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Installation
    and Basic Configuration"), *Installation and Basic Configuration*
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解如何创建插件（尤其是端口），请参考[第1章](part0015.xhtml#aid-E9OE1 "第1章。安装和基本配置")中的*创建自定义端口*配方，*安装和基本配置*
- en: Setting up the portal session time and session policy
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置门户会话时间和会话策略
- en: In every project, especially the intranet one, the main functionality is authentication
    and authorization in order to provide correct permissions and serve dedicated
    content for an authenticated user. Every logged-in user has their own session;
    the expiry time can be set specifically. You can also set the session using any
    other settings, such as auto-extend session or redirection when a session expires.
    All the settings concerning the session can be found in `portal.properties`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个项目中，尤其是在企业内部网项目中，主要功能是身份验证和授权，以便为已验证用户提供正确的权限并为他们提供专用内容。每个已登录用户都有自己的会话；到期时间可以具体设置。您还可以使用任何其他设置来设置会话，例如自动扩展会话或会话过期时的重定向。所有关于会话的设置都可以在`portal.properties`中找到。
- en: 'Let''s assume that our goal is to configure the following session policy:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们的目标是配置以下会话策略：
- en: The session expires after 10 minutes
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 会话在10分钟后过期
- en: The system redirects the user to the default page after session expiration (if
    all pages don't have guest permission to display for unauthenticated users, the
    system should display the login page)
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在会话过期后，系统将用户重定向到默认页面（如果所有页面都没有为未经认证的用户显示访客权限，系统应显示登录页面）
- en: Two minutes before session ending, the system should display a warning with
    a counter
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在会话结束前两分钟，系统应显示一个带有倒计时的警告
- en: The session identifier shouldn't be visible in the URL
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 会话标识符不应在URL中可见
- en: How to do it…
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'As we said at the beginning, Liferay overrides session-specific properties
    via `portal-ext.properties`. To achieve our goal, open `portal-impl/src/portal-ext.properties`
    and set the following definitions:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们一开始所说，Liferay通过`portal-ext.properties`覆盖了会话特定的属性。为了达到我们的目标，打开`portal-impl/src/portal-ext.properties`并设置以下定义：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Except for the `session.timeout` setting, it is required that you set the same
    value in `web.xml`. To complete this task, open the main `web.xml` file, which
    is located in the `{$TOMCAT_HOME}/webapps/ROOT/WEB-INF` folder. Find an XML tag
    called `session-config` and change it as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`session.timeout`设置外，您还必须在`web.xml`中设置相同的值。为了完成此任务，打开位于`{$TOMCAT_HOME}/webapps/ROOT/WEB-INF`文件夹中的主`web.xml`文件。找到一个名为`session-config`的XML标签，并按以下方式更改：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Finally, save this file and restart your application server.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，保存此文件并重新启动您的应用程序服务器。
- en: How it works…
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Our first goal was to change a default session timeout, which was 30 minutes.
    We decreased it to 10 minutes. It is important to know that changing the `session.timeout`
    property is not sufficient because the `web.xml` configuration overrides this
    setting. To finish our configuration, we also had to change this value into the
    `web.xml` descriptor.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的首要目标是更改默认会话超时，它原本是30分钟。我们将其减少到10分钟。重要的是要知道，更改`session.timeout`属性是不够的，因为`web.xml`配置会覆盖此设置。为了完成我们的配置，我们还需要将此值更改到`web.xml`描述符中。
- en: 'Next, the assumption was connected with user redirection after timeout. In
    order to achieve our goal, we needed to change two properties:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，假设与超时后的用户重定向相关。为了达到我们的目标，我们需要更改两个属性：
- en: '`session.timeout.redirect.on.expire`: This is set to `true` and redirects the
    user to the default page when the session expires'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session.timeout.redirect.on.expire`：此设置为`true`，当会话过期时将用户重定向到默认页面'
- en: '`session.timeout.auto.extend`: This is set to `false` to deny the autoextend
    session'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session.timeout.auto.extend`：此设置为`false`以拒绝自动扩展会话'
- en: The `session.timeout.warning` property specifies the number of minutes before
    a warning, informing the user of the session expiration. We set this value to
    2 minutes.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`session.timeout.warning`属性指定了在警告用户会话过期之前的时间（分钟数）。我们将此值设置为2分钟。'
- en: The last assumption was connected with security requirements. Of course, it
    is disabled by default, but we decided to show how it can be configured. Thus,
    the last property called `session.enable.url.with.session.id` was set to `false`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个假设与安全要求相关。当然，它默认是禁用的，但我们决定展示如何进行配置。因此，最后一个名为`session.enable.url.with.session.id`的属性被设置为`false`。
- en: Configuring Liferay with the SMTP server
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SMTP服务器配置Liferay
- en: Liferay sends e-mails in many cases, such as when adding calendar events and
    posts on the message board or when a user creates an account. In order to enable
    this function, it is required that you correctly configure the SMTP server and
    set the appropriate properties. In this recipe, we will explain how to configure
    the SMTP server in the easiest way.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Liferay 在许多情况下发送电子邮件，例如添加日历事件和论坛帖子，或者当用户创建账户时。为了启用此功能，需要正确配置 SMTP 服务器并设置适当的属性。在本食谱中，我们将解释如何以最简单的方式配置
    SMTP 服务器。
- en: How to do it…
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: There are three ways to configure the SMTP server correctly. The easiest way
    is to use Liferay's Control Panel and configure the SMTP settings using the GUI
    interface. To achieve it, go to **Admin** | **Control Panel** | **Server Administration**
    and choose the **Mail** tab. After that, enter your settings for your mail session
    under the **Outgoing SMTP Server** section and click on the **Save** button. This
    type of setting is a great choice when there is only one instance of the SMTP
    server or the SMTP is a third-party external server. In many cases this setting
    is insufficient. The best example is an application running in a clustered environment
    where each node (Liferay instance) has its own SMTP local server.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 正确配置 SMTP 服务器有三种方法。最简单的方法是使用 Liferay 的控制面板，并通过 GUI 界面配置 SMTP 设置。要实现它，请转到 **管理**
    | **控制面板** | **服务器管理**，然后选择 **邮件** 选项卡。之后，在 **发件 SMTP 服务器** 部分下输入您的邮件会话设置，并点击
    **保存** 按钮。当只有一个 SMTP 服务器实例或 SMTP 是第三方外部服务器时，这种设置是一个很好的选择。在许多情况下，这种设置是不够的。最好的例子是运行在集群环境中的应用程序，其中每个节点（Liferay
    实例）都有自己的 SMTP 本地服务器。
- en: 'In many cases, for instance, in the clustered environment, it is a very common
    practice to install the SMTP server on the same node where the Liferay instance
    is. In this case, it is not possible to configure the SMTP server using the GUI
    interface, but this setting can be done in `portal-ext.properties`. In this file,
    we can put our settings that display the following listing:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，例如在集群环境中，将 SMTP 服务器安装在 Liferay 实例所在的同一节点上是一种非常常见的做法。在这种情况下，无法使用 GUI 界面配置
    SMTP 服务器，但可以在 `portal-ext.properties` 中完成此设置。在这个文件中，我们可以放置以下列出的设置：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The last possibility is to use the application server''s mail session via **Java
    Naming and Directory Interface** (**JNDI**), which looks up the Java mail session.
    In order to enable the JNDI name, put the following configuration in the `portal-ext.properties`
    file:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一种可能性是使用应用服务器的邮件会话通过 **Java 命名和目录接口**（**JNDI**）来查找 Java 邮件会话。为了启用 JNDI 名称，请在
    `portal-ext.properties` 文件中放置以下配置：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Make sure that, in your `{$TOMCAT_HOME}/conf/Catalina/localhost/ROOT.xml` file,
    there is defined a resource similar to the following tag:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在您的 `{$TOMCAT_HOME}/conf/Catalina/localhost/ROOT.xml` 文件中定义了一个类似于以下标签的资源：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The Liferay Portal recommends SMTP configuration over the GUI or by setting
    the properties as a unified configuration of Java mail, which doesn't depend on
    the application server.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Liferay 门户推荐使用 SMTP 配置，而不是通过 GUI 或将属性设置为 Java 邮件的统一配置，因为这种配置不依赖于应用服务器。
- en: How it works…
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Liferay has its own message bus implementation. It is a service-level API used
    to exchange messages within Liferay. In this specific case, an e-mail sending
    mechanism uses *Liferay Message Bus*. As in every message bus implementation,
    there is a sender, that sends messages to the destination. This functionality
    is implemented in the `com.liferay.mail.service.impl.MailServiceImpl` class in
    the `sendEmail` method:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Liferay 有自己的消息总线实现。这是一个服务级 API，用于在 Liferay 内部交换消息。在这个特定案例中，电子邮件发送机制使用 *Liferay
    消息总线*。与每个消息总线实现一样，有一个发送者，它将消息发送到目的地。这种功能在 `com.liferay.mail.service.impl.MailServiceImpl`
    类的 `sendEmail` 方法中实现：
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As we see in the preceding method, the sending action has quite a simple implementation
    that invokes only the `com.liferay.portal.kernel.messaging.MessageBusUtil.sendMessage`
    method, which gives with the type of destination and mail message arguments. `MailMessageListener`
    is responsible for sending e-mails to the specific address correctly.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述的方法所示，发送操作具有相当简单的实现，仅调用 `com.liferay.portal.kernel.messaging.MessageBusUtil.sendMessage`
    方法，并传递目的地和邮件消息参数。`MailMessageListener` 负责将电子邮件正确发送到指定地址。
- en: At the opposite site, there is a listener that can recognize the message and
    consume it. For instance, it sends an e-mail message. This is the `com.liferay.mail.messaging.MailMessageListener`
    class, which receives the event (in this case, the mail event) and invokes an
    appropriate action to send the e-mail.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在相反的一侧，有一个可以识别消息并消费它的监听器。例如，它会发送一封电子邮件。这是`com.liferay.mail.messaging.MailMessageListener`类，它接收事件（在这种情况下，邮件事件）并调用适当的操作来发送电子邮件。
- en: Intranet protection by the antisamy-hook plugin
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`antisamy-hook`插件通过内部网络进行保护'
- en: Liferay 6.x exposes a new functionality called sanitizers. This is an implementation
    that protects content (HTML and JavasScript) against malicious code that users
    may pass to the journal article, wiki, message board, and so on. This can happen
    if a user copies and pastes the content from any Internet resources. In the Liferay
    core implementation, there are no sanitizers. One of the reasons is that Liferay
    allows users to implement their own policy and install it as a hook plugin. Fortunately,
    Liferay has a plugin called `antisamy-hook` in the official GitHub repository
    at [https://github.com/liferay/liferay-plugins/tree/master/hooks/antisamy-hook](https://github.com/liferay/liferay-plugins/tree/master/hooks/antisamy-hook).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Liferay 6.x提供了一个名为sanitizers的新功能。这是一个保护内容（HTML和JavaScript）免受用户可能传递给期刊文章、维基、论坛等恶意代码的实现。如果用户从任何互联网资源复制并粘贴内容，就可能发生这种情况。在Liferay核心实现中，没有sanitizers。其中一个原因是Liferay允许用户实现自己的策略并将其作为钩子插件安装。幸运的是，Liferay在官方GitHub仓库中有一个名为`antisamy-hook`的插件[https://github.com/liferay/liferay-plugins/tree/master/hooks/antisamy-hook](https://github.com/liferay/liferay-plugins/tree/master/hooks/antisamy-hook)。
- en: In this recipe, we will show you how to install this plugin and also give you
    an idea about how it works.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将向您展示如何安装此插件，并给您一个关于它是如何工作的想法。
- en: How to do it…
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: The antisamy-hook plugin, like other plugins, is available on the official Liferay
    marketplace. Therefore, the installation process is really simple and unified.
    In order to achieve your goal, log in as an administrator, go to **Admin** | **Control
    Panel** | **Store**, find the **Antisamy CE** plugin, and purchase it by clicking
    on the **Free** button. This plugin is free if you have a valid marketplace account.
    After that, go to the **Purchased** tab and click on the **Install** button.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他插件一样，`antisamy-hook`插件可在官方Liferay市场上找到。因此，安装过程非常简单且统一。为了实现您的目标，以管理员身份登录，转到**Admin**
    | **Control Panel** | **Store**，找到**Antisamy CE**插件，并点击**Free**按钮购买它。如果您有一个有效的市场账户，此插件是免费的。之后，转到**Purchased**标签页并点击**Install**按钮。
- en: 'In the log file, you should find the following message:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在日志文件中，您应该找到以下消息：
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works…
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `antisamy-hook` plugin adds an *OWASP AntiSamy* implementation, which means
    that the plugin includes the OWASP `antisamy.jar` library, which is located in
    the `org.owasp.validator.html.AntiSamy` package. The OWASP AntiSamy project is
    an API that protects the content against malicious code.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`antisamy-hook`插件添加了一个*OWASP AntiSamy*实现，这意味着该插件包含了位于`org.owasp.validator.html.AntiSamy`包中的OWASP
    `antisamy.jar`库。OWASP AntiSamy项目是一个保护内容免受恶意代码侵害的API。'
- en: Note
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More details are available on the official OWASP site at [https://www.owasp.org/index.php/Category:OWASP_AntiSamy_Project](https://www.owasp.org/index.php/Category:OWASP_AntiSamy_Project).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详细信息可在官方OWASP网站上找到[https://www.owasp.org/index.php/Category:OWASP_AntiSamy_Project](https://www.owasp.org/index.php/Category:OWASP_AntiSamy_Project)。
- en: 'From a technical point of view, the `antisamy-hook` plugin is a very simple
    but powerful tool. It is simple, because it just overrides the `sanitizer.impl`
    property as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术角度来看，`antisamy-hook`插件是一个非常简单但功能强大的工具。它之所以简单，是因为它只是按照以下方式覆盖了`sanitizer.impl`属性：
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: It is powerful, because it uses an open source OWASP Antisamy project that filters
    our content.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 它非常强大，因为它使用了一个开源的OWASP Antisamy项目来过滤我们的内容。
- en: 'The main implementation is in the `AntiSamySanitizerImpl` class (actually,
    there is only one class in this plugin) in the sanitize method:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 主要实现位于`sanitize`方法中的`AntiSamySanitizerImpl`类（实际上，这个插件中只有一个类）：
- en: '[PRE12]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This implementation checks whether `contentType` is HTML and the `AntiSamy`
    implementation filters the content and returns the clean results. The OWASP library
    is responsible for correctly filtering content.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 此实现会检查`contentType`是否为HTML，然后`AntiSamy`实现会过滤内容并返回干净的结果。OWASP库负责正确过滤内容。
- en: Migrating content from one database to another database
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将内容从一个数据库迁移到另一个数据库
- en: The content migration tool is an interesting feature that Liferay provides as
    an out-of the-box core implementation. As you know, Liferay gives administrators
    a choice to select one of the database engines, such as MySQL, PostgreSQL, Oracle,
    and so on. It allows users to change the database engine without losing data.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 内容迁移工具是Liferay提供的一个有趣的功能，作为开箱即用的核心实现。正如您所知，Liferay允许管理员选择数据库引擎之一，例如MySQL、PostgreSQL、Oracle等。它允许用户在不丢失数据的情况下更改数据库引擎。
- en: Let's assume that our Liferay instance uses the PostgreSQL database, and we
    want to change it to MySQL engine.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们的Liferay实例使用的是PostgreSQL数据库，而我们想将其更改为MySQL引擎。
- en: Getting ready…
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中…
- en: 'In order to migrate our content, we need to create a new MySQL database. To
    achieve it log in to your database:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为了迁移我们的内容，我们需要创建一个新的MySQL数据库。为了实现它，请登录到您的数据库：
- en: '[PRE13]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, create a new database using the following command:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用以下命令创建一个新的数据库：
- en: '[PRE14]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How to do it…
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'This functionality is available out-of-the-box. Moreover, it doesn''t require
    developer support. All migration processes can be done with the help of the GUI.
    To migrate data, follows these steps:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能是开箱即用的。此外，它不需要开发人员支持。所有迁移过程都可以通过GUI完成。要迁移数据，请按照以下步骤操作：
- en: Log in as an administrator.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以管理员身份登录。
- en: Go to **Admin** | **Control Panel** | **Server Administration** and choose the
    **Data Migration** tab.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**管理** | **控制面板** | **服务器管理**，并选择**数据迁移**选项卡。
- en: 'Fill in the form as follows:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按以下方式填写表格：
- en: In **JDBC Driver Class Name**, enter `com.mysql.jdbc.Driver`
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**JDBC驱动类名称**中，输入`com.mysql.jdbc.Driver`
- en: In **JDBC URL**, enter `jdbc:mysql://localhost/lportal?useUnicode=true&characterEncoding=UTF-8&useFastDateParsing=false`
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**JDBC URL**中，输入`jdbc:mysql://localhost/lportal?useUnicode=true&characterEncoding=UTF-8&useFastDateParsing=false`
- en: In **JDBC User Name**, enter the database's user
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**JDBC用户名**中，输入数据库的用户
- en: In **JDBC Password**, enter the database user's password
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**JDBC密码**中，输入数据库用户的密码
- en: '![How to do it…](img/image00376.jpeg)'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/image00376.jpeg)'
- en: Click on the **Execute** button. All information about operation details will
    be available on the logfile. The following message will progressively appear on
    the screen:![How to do it…](img/image00377.jpeg)
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**执行**按钮。有关操作详细信息的所有信息都将出现在日志文件中。以下消息将逐渐出现在屏幕上：![如何操作…](img/image00377.jpeg)
- en: 'Make sure that the process is successfully finished. Inside the `catalina.out`
    logfile, you will find the following message:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保过程成功完成。在`catalina.out`日志文件中，您将找到以下消息：
- en: '[PRE15]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Next, shut down your application server, change the database properties to indicate
    a new database, and start an application server with a new configuration.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，关闭您的应用程序服务器，更改数据库属性以指示新的数据库，并使用新的配置启动应用程序服务器。
- en: How it works…
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The database migration process is supported by Liferay in order to retain compatibility
    with databases. This process uses Liferay Message Bus, which exposes listener
    to data migration. In this case, an event prepares and invokes the `com.liferay.portlet.admin.action.EditServerAction`
    class. The following listing shows how it was implemented:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库迁移过程由Liferay支持，以保留与数据库的兼容性。此过程使用Liferay消息总线，它公开了数据迁移的监听器。在这种情况下，一个事件准备并调用`com.liferay.portlet.admin.action.EditServerAction`类。以下列表显示了其实现方式：
- en: '[PRE16]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This method is responsible for preparing specific data, showing a maintenance
    window, and sending an event to the message bus.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法负责准备特定数据，显示维护窗口，并向消息总线发送事件。
- en: Listener is represented by `com.liferay.portal.convert.ConvertDatabase` with
    the `doConvert()` method. This method is responsible for preparing all database
    data and putting it into the new database. All details in this method are complex,
    but the main idea is to take every table, its data, and indexes and migrate them
    to the new database schema.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 监听器由`com.liferay.portal.convert.ConvertDatabase`的`doConvert()`方法表示。此方法负责准备所有数据库数据并将其放入新数据库中。此方法中的所有细节都很复杂，但主要思想是取每个表、其数据和索引并将它们迁移到新的数据库模式中。
- en: See also
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'If you want to migrate a storage data, refer to:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想迁移存储数据，请参考：
- en: The *Integration with the Amazon S3 cloud* recipe from [Chapter 6](part0050.xhtml#aid-1FLS41
    "Chapter 6. Documents and Media in Liferay"), *Documents and Media in Liferay*
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[第6章](part0050.xhtml#aid-1FLS41 "第6章。Liferay中的文档和媒体")，“Liferay中的文档和媒体”的*与Amazon
    S3云集成*配方
- en: The *Data migration between storage hooks* recipe from [Chapter 6](part0050.xhtml#aid-1FLS41
    "Chapter 6. Documents and Media in Liferay"), *Documents and Media in Liferay*
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[第6章](part0050.xhtml#aid-1FLS41 "第6章。Liferay中的文档和媒体")的*存储钩子之间的数据迁移*食谱，*Liferay中的文档和媒体*
- en: Using Liferay Service Bus for communication between portlets
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Liferay服务总线进行端口组件之间的通信
- en: The message bus is a mechanism for sending messages to different components
    in Liferay. This approach is very common, because it prevents class-loading issues.
    It is very important, because Liferay is a portlet container, and each portlet
    doesn't have information about the others. For that reason, Liferay provides a
    message bus that allows communication between portlets. An application that sends
    an event/message is called a producer, and an application that receives messages
    is called a consumer.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 消息总线是一种将消息发送到Liferay中不同组件的机制。这种方法非常常见，因为它可以防止类加载问题。它非常重要，因为Liferay是一个端口组件容器，每个端口组件都没有关于其他组件的信息。因此，Liferay提供了一个消息总线，允许端口组件之间进行通信。发送事件/消息的应用程序称为生产者，而接收消息的应用程序称为消费者。
- en: The message bus architecture supports asynchronous and synchronous messaging.
    Synchronous messages wait for a response, and asynchronous messages send a message,
    forget it, or receive a callback. The main difference between synchronous and
    asynchronous messages is the fact that the first one block threads and wait for
    the response.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 消息总线架构支持异步和同步消息。同步消息等待响应，而异步消息发送消息、忘记它或接收回调。同步消息和异步消息之间的主要区别是第一个会阻塞线程并等待响应。
- en: In this recipe, we will show you how to use a message bus in a real example.
    Let's assume that our goal is to write a search portlet with one input with the
    autocomplete feature. This will be a simple form with only one input that can
    autocomplete our query. After submitting the form, the search criteria should
    be sent to the existing out-of-the-box search portlet. The Liferay message bus
    will be used to communicate with the Lucene indexer.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将向您展示如何在真实示例中使用消息总线。假设我们的目标是编写一个具有自动完成功能的单输入搜索端口组件。这将是一个只有一个输入的简单表单，可以自动完成我们的查询。提交表单后，搜索条件应发送到现有的内置搜索端口组件。我们将使用Liferay消息总线与Lucene索引器进行通信。
- en: It is not possible to show and explain all the implementations, so we will explain
    a piece of code with the message bus. In the following *How to do it…* section,
    we will show you the steps to compile, deploy, and install our portlet. In the
    *How it works…* section of this recipe, we will explain a message bus implementation.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 由于无法展示和解释所有实现，我们将通过带有消息总线的代码片段进行解释。在下面的*如何做…*部分，我们将向您展示编译、部署和安装我们的端口组件的步骤。在本食谱的*如何工作…*部分，我们将解释消息总线实现。
- en: How to do it…
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In order to correctly compile, deploy, and install the portlet, follow these
    steps:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确编译、部署和安装端口组件，请按照以下步骤操作：
- en: Download `quicksearch-portlet` from [http://www.liferay-guru.com/code/ch11/quicksearch-portlet.zip](http://www.liferay-guru.com/code/ch11/quicksearch-portlet.zip).
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://www.liferay-guru.com/code/ch11/quicksearch-portlet.zip](http://www.liferay-guru.com/code/ch11/quicksearch-portlet.zip)下载`quicksearch-portlet`。
- en: Copy the portlet to the `workspace` folder.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将端口组件复制到`工作区`文件夹。
- en: Open `quicksearch-portlet/pom.xml` and set the appropriate paths in the `<properties>`
    section.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`quicksearch-portlet/pom.xml`，并在`<properties>`部分设置适当的路径。
- en: Invoke the `mvn clean install liferay:deploy` command.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`mvn clean install liferay:deploy`命令。
- en: 'Run your Liferay instance and check whether, in the logfile, there is a message
    to successfully deploy:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行您的Liferay实例，并检查日志文件中是否有成功部署的消息：
- en: '[PRE17]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Log in as an administrator, create a page called **Search**, and put the **Search**
    portlet, which is available under the **Tools** category in the left menu called
    **Add**.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以管理员身份登录，创建一个名为**搜索**的页面，并将**搜索**端口组件放入左侧菜单中名为**添加**的工具类别下的**搜索**端口组件。
- en: Create the second page, for example, `Quick Search`, and add the **QuickSearch**
    portlet.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建第二个页面，例如，`快速搜索`，并添加**快速搜索**端口组件。
- en: Open a search portlet configuration window and set the layout to the Search
    portlet (in our case, it will be the **Search** page).
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开搜索端口组件配置窗口，并将布局设置为搜索端口组件（在我们的例子中，它将是**搜索**页面）。
- en: Click on the **Save** button and close the pop-up configuration window via the
    **X** button.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**按钮，并通过**X**按钮关闭弹出配置窗口。
- en: Try to write a word (with at least three letters) in the **QuickSearch** portlet
    and enjoy the autocomplete feature.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试在**QuickSearch**端口中输入一个单词（至少三个字母），并享受自动完成功能。
- en: How it works…
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In this portlet, Liferay Message Bus is used to ask the search engine about
    the autocomplete results. In our case, the producer is a class called `com.liferay.guru.portlet.quicksearch.util.QSMessageBusUtil`.
    Its code looks like this:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个端口中，Liferay消息总线用于询问搜索引擎关于自动完成的结果。在我们的例子中，生产者是一个名为`com.liferay.guru.portlet.quicksearch.util.QSMessageBusUtil`的类。其代码如下：
- en: '[PRE18]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This class has only one method that returns a JSON array with search results.
    The first three lines are responsible for creating the `Message` object, which
    will be sent to the message bus. The `Message` object is an instance of the `com.liferay.portal.kernel.messaging.Message`
    class with the following fields:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 此类只有一个方法，该方法返回一个包含搜索结果的JSON数组。前三行负责创建`Message`对象，该对象将被发送到消息总线。`Message`对象是`com.liferay.portal.kernel.messaging.Message`类的一个实例，具有以下字段：
- en: '`String _destinationName`: This is the name of our destination. It is the place
    to which we address our message'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String _destinationName`：这是我们目标的名字。这是我们发送消息的地方'
- en: '`Object _payload`: This field represents an object (payload) that will be sent
    to the consumer'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Object _payload`：此字段表示一个将被发送到消费者的对象（有效载荷）'
- en: '`Object _response`: This field contains an object that represents the response
    message'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Object _response`：此字段包含一个表示响应消息的对象'
- en: '`String _responseDestinationName`: The place where the consumer (listener)
    sends back the response. In our example, this is `DestinationNames.MESSAGE_BUS_DEFAULT_RESPONSE`,
    which defines the response back to the destination, the producer'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String _responseDestinationName`：消费者（监听器）发送响应的地方。在我们的例子中，这是`DestinationNames.MESSAGE_BUS_DEFAULT_RESPONSE`，它定义了返回给目标、生产者的响应'
- en: '`String _responseId`: This value represents the response identifier'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String _responseId`：此值表示响应标识符'
- en: '`Map<String, Object> _values`: Additional maps of objects that will be sent
    to the consumer or producer'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Map<String, Object> _values`：将发送到消费者或生产者的额外对象映射'
- en: In our implementation, we set the payload as `SearchContext` (our Lucene query)
    and set `responseDestinationName` as a default response.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的实现中，我们将有效载荷设置为`SearchContext`（我们的Lucene查询）并将`responseDestinationName`设置为默认响应。
- en: 'To send our message to the message bus, we invoked the following method:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 要将我们的消息发送到消息总线，我们调用了以下方法：
- en: '[PRE19]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'There is a question: which class should receive our message? The answer and
    all of the configuration are in the `applicationContext-messaging.xml` file, which
    looks like this:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个问题：哪个类应该接收我们的消息？答案和所有配置都在`applicationContext-messaging.xml`文件中，其内容如下：
- en: '[PRE20]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The preceding configuration specifies the following beans:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置指定了以下豆类：
- en: The `listener` bean with the `messageListener.autocomplete.lucene` ID.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有`messageListener.autocomplete.lucene` ID的`listener`豆。
- en: The `destination` bean with the `destination.search.autocomplete` ID.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有`destination.search.autocomplete` ID的`destination`豆。
- en: The `configurator` bean that maps listeners to their destinations. In our case,
    it maps our `destination.search.autocomplete` destination to the `messageListener.autocomplete.lucene`
    bean. In other words, it links the destination with the listener.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将监听器映射到其目标位置的`configurator`豆。在我们的例子中，它将我们的`destination.search.autocomplete`目标映射到`messageListener.autocomplete.lucene`豆。换句话说，它将目标与监听器连接起来。
- en: 'Let''s look at our listener implementation:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们的监听器实现：
- en: '[PRE21]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`AutocompleteListener` extends `BaseMessageListener` and overrides the `doReceive`
    method.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`AutocompleteListener`扩展了`BaseMessageListener`并重写了`doReceive`方法。'
- en: The body of this method is responsible for creating a new response and sending
    it back to our producer. An object that was received and that will be sent is
    put to the payload field. Therefore, our implementation gets an object from payload,
    checks whether it is `SearchContext`, looks for new suggestions, and sets suggestions
    as a new payload.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法的主体负责创建一个新的响应并将其发送回我们的生产者。接收到的对象将被放入有效载荷字段。因此，我们的实现从有效载荷中获取一个对象，检查它是否是`SearchContext`，寻找新的建议，并将建议作为新的有效载荷设置。
- en: 'Summarizing this recipe, remember the following things:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 总结这个配方，请记住以下事项：
- en: Liferay Message Bus implements a communication between producer and consumer
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Liferay消息总线实现了生产者和消费者之间的通信
- en: The `Message` object is sent between the producer and consumer
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Message`对象在生产者和消费者之间发送'
- en: 'The producer creates a `Message` object with the following attributes:'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产者创建一个具有以下属性的`Message`对象：
- en: '`payload`: This field represents the object (payload) that will be sent to
    the consumer'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`payload`：此字段表示将要发送给消费者的对象（有效载荷）'
- en: '`responseDestinationName`: This is the name that is provided for listeners
    to use in replying'
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`responseDestinationName`：这是提供给监听器用于回复的名称'
- en: Optionally, `responseId` (the `setResponseId` method) and other objects that
    should be sent to the consumer as a key/value pair (put method)
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选地，`responseId`（`setResponseId`方法）和其他应作为键/值对发送给消费者的对象
- en: To send a synchronous message, you should use the `MessageBusUtil.sendSynchronousMessage`
    method
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要发送同步消息，应使用`MessageBusUtil.sendSynchronousMessage`方法
- en: The listener (consumer) must be registered in the XML definition
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监听器（消费者）必须在XML定义中注册
- en: The listener has a `doReceive` method that sends back a message
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监听器有一个`doReceive`方法，该方法发送回消息
- en: The consumer extracts values from the message and prepares a response message
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消费者从消息中提取值并准备响应消息
- en: '`MessageBusUtil.createResponseMessage` should be used to create a response
    message'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应使用`MessageBusUtil.createResponseMessage`来创建响应消息
- en: Consumers send back a message to the producer via the `MessageBusUtil.sendMessage`
    method
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消费者通过`MessageBusUtil.sendMessage`方法向生产者发送消息
- en: There's more...
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'In this recipe, we discussed only synchronous communication that is a basic
    example of using a message bus. As a matter of fact, using synchronous messaging
    is not a good idea in many cases. Why? The answer is simple: this type of communication
    blocks waiting for a response from a recipient. Communication via messages was
    basically designed for asynchronous communication. There are two types of asynchronous
    messaging:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们仅讨论了同步通信，这是使用消息总线的基本示例。实际上，在许多情况下使用同步消息并不是一个好主意。为什么？答案很简单：这种类型的通信会阻塞等待接收者的响应。消息通信基本上是为异步通信设计的。存在两种类型的异步消息：
- en: '**send and forget**: This means *push an event and forget about it*. This type
    of communication is useful in notification cases, for example, if a producer wants
    to notify listeners about some action.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发送并忘记**：这意味着*推送一个事件然后忘记它*。这种类型的通信在通知情况下很有用，例如，如果生产者想通知监听器关于某些操作。'
- en: '**call-back**: The producer defines a call back destination in `responseDestinationName`
    for the message. The listener can send the message back to the specific `responseDestinationName`.
    The important information is that the producer is free for further processing.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回调**：生产者在`responseDestinationName`中为消息定义了一个回调目的地。监听器可以将消息发送回特定的`responseDestinationName`。重要的是，生产者可以自由地进行进一步处理。'
- en: 'From a technical point of view, an asynchronous implementation is very similar
    to our example. The main difference is that it invokes a different method from
    `MessageBusUtil`. To send an asynchronous message, the following invocation should
    be used, as you can see in the listener code when you send the response:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术角度来看，异步实现与我们示例非常相似。主要区别在于它调用`MessageBusUtil`中的不同方法。要发送异步消息，应使用以下调用，正如你在发送响应时在监听器代码中所看到的：
- en: '[PRE22]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The important information is that the `sendMessage` method does not return
    any values, because it is an asynchronous message, and we don''t know whether
    there is call-back information or not. All of the configurations where call back
    should be sent are placed in the `messaging.xml` file. Here is an example:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是，`sendMessage`方法不返回任何值，因为它是一个异步消息，我们不知道是否有回调信息。所有应该发送回调的配置都放置在`messaging.xml`文件中。以下是一个示例：
- en: '[PRE23]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: See also
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: In order to learn about creating plugins (especially portlets), refer to the
    *Creating a custom portlet* recipe from [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Installation
    and Basic Configuration"), *Installation and Basic Configuration.*
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解如何创建插件（尤其是端口组件），请参考[第1章](part0015.xhtml#aid-E9OE1 "第1章。安装和基本配置")中的*创建自定义端口组件*配方，*安装和基本配置*。
- en: Clustering Liferay Portal
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集群Liferay Portal
- en: 'Liferay supports clustering out-of-the-box in the **Community Edition** (**CE**)
    version as well as the **Enterprise Edition** (**EE**) version. It is designed
    to build scalable systems that can be used by large companies with a huge amount
    of data, so it allows us to run several portal instances on parallel servers.
    In order to build Liferay clusters, you need to know which components are sensitive
    to clustering. The clustering process has a huge impact on the following components:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: Liferay在**社区版**（**CE**）和**企业版**（**EE**）版本中都支持开箱即用的集群功能。它旨在构建可扩展的系统，可以由拥有大量数据的大公司使用，因此它允许我们在并行服务器上运行多个门户实例。为了构建Liferay集群，您需要知道哪些组件对集群敏感。集群过程对以下组件有巨大影响：
- en: Databases, where Liferay instances keep their data
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库，Liferay实例存储数据的地方
- en: Documents and media as a folder on the hard drive
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将文档和媒体作为硬盘上的文件夹
- en: Lucene search engine files
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lucene搜索引擎文件
- en: Liferay caches
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Liferay缓存
- en: This recipe will go through each point and show you how to cluster Liferay correctly.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方将逐点说明并展示如何正确地集群Liferay。
- en: Getting ready…
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作…
- en: This recipe is not a tutorial on how to correctly run clustered environments,
    such as Apache server, load balancers, and so on. Instead, our goal is to show
    you how to correctly configure Liferay so that it works with a parallel environment.
    Let's assume that you have properly configured all the components. The last step
    is configuring Liferay to work in a cluster properly.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方不是关于如何正确运行集群环境（如Apache服务器、负载均衡器等）的教程。相反，我们的目标是向您展示如何正确配置Liferay，使其能够在并行环境中工作。假设您已正确配置所有组件。最后一步是配置Liferay以正确地在集群中工作。
- en: How to do it…
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: As we said at the beginning, there are several points that should be checked
    before running Liferay on a cluster.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们一开始所说的，在运行Liferay集群之前，应该检查几个点。
- en: Check database configuration
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查数据库配置
- en: 'The first thing, which is really simple, is checking database configuration.
    There should be one database instance shared between all Liferay nodes. To check
    configuration correctness, open the property file where database access configuration
    is present. Usually, it is `portal-ext.properties`. Make sure that, in every node,
    the configuration is the same. Here is an example:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 第一件事，其实很简单，就是检查数据库配置。应该在所有Liferay节点之间共享一个数据库实例。为了检查配置的正确性，打开包含数据库访问配置的属性文件。通常，它是`portal-ext.properties`。确保在每个节点上配置都是相同的。以下是一个示例：
- en: '[PRE24]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Documents and media clustering
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文档和媒体集群
- en: 'In [Chapter 6](part0050.xhtml#aid-1FLS41 "Chapter 6. Documents and Media in
    Liferay"), *Documents and Media in Liferay*, we explained how the Documents and
    Media portlet works. It is also important to know that file metadata is stored
    in a database, but binary data (files) are stored on the hard drive. As you can
    guess, it will be a problem when Liferay works as a clustered environment, because
    each node can have its own repository and files are not shared between nodes.
    In order to resolve this problem, there are three ways:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](part0050.xhtml#aid-1FLS41 "第6章。Liferay中的文档和媒体")中，我们解释了Liferay中的文档和媒体插件的工作原理。了解文件元数据存储在数据库中，但二进制数据（文件）存储在硬盘上也很重要。正如你所猜到的，当Liferay作为集群环境运行时，这将会成为一个问题，因为每个节点可以有自己的存储库，文件在节点之间不共享。为了解决这个问题，有三种方法：
- en: 'Sharing the repository between nodes via **Storage Area Network** (**SAN**),
    **Network Attached Storage** (**NAS**), GlusterFS and so on: Ask your system administrator
    which option is available on a specific machine and correctly install the clustered
    filesystem. In many solutions, we have seen a GlusterFS system, which shared a
    data folder between nodes. This solution guarantees that each node has the same
    repository of files. Make sure that the following property indicates a proper
    location for shared disk storage:'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过**存储区域网络**（**SAN**）、**网络附加存储**（**NAS**）、GlusterFS等方式在节点之间共享存储库：询问您的系统管理员在特定机器上哪种选项可用，并正确安装集群文件系统。在许多解决方案中，我们看到了一个GlusterFS系统，它在节点之间共享数据文件夹。此解决方案确保每个节点都有相同的文件存储库。确保以下属性指示共享磁盘存储的正确位置：
- en: '[PRE25]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Using database storage: All data, including binary files, is stored in a database
    table. To enable this configuration, set the following property:'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数据库存储：所有数据，包括二进制文件，都存储在数据库表中。要启用此配置，设置以下属性：
- en: '[PRE26]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This setting automatically uses the database instead of filesystem. The database
    should support the BLOB's field.
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此设置会自动使用数据库而不是文件系统。数据库应支持BLOB字段。
- en: 'Using external storage systems, such as the following ones:'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下外部存储系统：
- en: '**Amazon Cloud**: We showed you how to configure this storage in the *Integration
    with the Amazon S3 cloud* recipe in [Chapter 6](part0050.xhtml#aid-1FLS41 "Chapter 6. Documents
    and Media in Liferay"), *Documents and Media in Liferay*'
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**亚马逊云**：我们在第 6 章（part0050.xhtml#aid-1FLS41 "第 6 章。Liferay 中的文档和媒体"）*与亚马逊 S3
    云的集成*配方中展示了如何配置此存储，*Liferay 中的文档和媒体*'
- en: '**Content Management Interoperability Services** (**CMIS**) Store such as Alfresco:
    After successful installation of Alfresco (or other CMIS Store system), set the
    following properties:'
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内容管理互操作性服务**（**CMIS**）存储，例如 Alfresco：在成功安装 Alfresco（或其他 CMIS 存储系统）后，设置以下属性：'
- en: '[PRE27]'
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '**A Java Content Repository** (**JCR**) store such as Jackrabbit: This is an
    Apache project implemented as a JSR-170 specification. Liferay supports it, but
    this configuration is deprecated because of performance issues and concurrency
    conflicts. In this solution, the Jackrabbit repository must be placed on the SAN
    shared storage (mounted on every node).'
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一个 Java 内容仓库**（**JCR**）存储，例如 Jackrabbit：这是一个作为 JSR-170 规范实现的 Apache 项目。Liferay
    支持它，但由于性能问题和并发冲突，此配置已被弃用。在此解决方案中，Jackrabbit 仓库必须放置在 SAN 共享存储（挂载在每个节点上）。'
- en: Search engine
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 搜索引擎
- en: 'We already mentioned the search engine topic in [Chapter 8](part0059.xhtml#aid-1O8H61
    "Chapter 8. Search and Content Presentation Tools"), *Search and Content Presentation
    Tools*. We showed two search engines: Apache Lucene and Apache Solr. If you use
    Solr or Solr Cloud as a search engine, everything will work perfectly because
    Solr is an external application with which Liferay establishes a connection. In
    the clustered environment, this is the best option because of performance and
    the quality of the search results.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在第 8 章（part0059.xhtml#aid-1O8H61 "第 8 章。搜索和内容展示工具"）*搜索和内容展示工具*中提到了搜索引擎主题。我们展示了两个搜索引擎：Apache
    Lucene 和 Apache Solr。如果您使用 Solr 或 Solr Cloud 作为搜索引擎，一切都将完美运行，因为 Solr 是一个外部应用程序，Liferay
    与其建立连接。在集群环境中，这是最佳选择，因为性能和搜索结果的质量。
- en: 'As you know, Lucene keeps its data in a local storage filesystem. It is a problem
    to keep an up-to-date index on every Liferay node in the clustered environment.
    We cannot replicate the index file by GlusterFS, because Lucene sometimes locks
    data when it writes to an index or optimizes it. In order to resolve this conflict,
    Liferay gives a functionality that provides a replication mechanism between all
    Liferay''s nodes. To enable this functionality, set the following properties:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所知，Lucene 将其数据存储在本地存储文件系统中。在集群环境中，保持每个 Liferay 节点的最新索引是一个问题。我们不能通过 GlusterFS
    复制索引文件，因为 Lucene 在写入索引或优化它时有时会锁定数据。为了解决这个冲突，Liferay 提供了一个功能，它提供了所有 Liferay 节点之间的复制机制。要启用此功能，请设置以下属性：
- en: '[PRE28]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: These properties need to be set for all of Liferay's nodes. The `cluster.link.enabled`
    property turns on the whole mechanism of cache replication, which we will describe
    in the following section.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这些属性需要为 Liferay 的所有节点设置。`cluster.link.enabled` 属性打开整个缓存复制机制，我们将在下一节中描述。
- en: Cache replication
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缓存复制
- en: 'Liferay uses EhCache to cache some content, such as the result of SQL queries.
    In a clustered environment, cache distribution is a very important issue. Each
    node should know about the changes on the database and cache invalidations. Phil
    Karlton once quoted:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: Liferay 使用 EhCache 缓存一些内容，例如 SQL 查询的结果。在集群环境中，缓存分布是一个非常重要的问题。每个节点都应该了解数据库上的更改和缓存失效。Phil
    Karlton 曾经引用：
- en: '*"There are only two hard things in Computer Science: cache invalidation and
    naming things."*'
  id: totrans-228
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"在计算机科学中，只有两件难事：缓存失效和命名事物。"*'
- en: I completely agree with him.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我完全同意他的观点。
- en: Multicast
  id: totrans-230
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 多播
- en: 'Cache distribution between nodes works perfectly with multicasting. Make sure
    that your servers support multicasting. Next, set the following property to enable
    replication:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 节点间的缓存分布与多播完美配合。请确保您的服务器支持多播。接下来，设置以下属性以启用复制：
- en: '[PRE29]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This property turns on the clustered mode.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性打开集群模式。
- en: 'The following properties define five channels for distributing messages between
    nodes:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 以下属性定义了五个节点间消息分发的通道：
- en: '[PRE30]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Set a proper IP addresses and port number for the preceding properties (settings).
    In many environments, it works out of the box.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 为前面的属性（设置）设置适当的 IP 地址和端口号。在许多环境中，它将自动运行。
- en: Unicast
  id: totrans-237
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 单播
- en: In some servers, it might not be possible to send messages by multicasting.
    Fortunately, it is possible to force Liferay to use unicast protocols instead
    of multicast. Configuration is not very difficult, but it is hard to discover
    it. To reduce the time spent on Google, follow this part of the recipe and correctly
    set this type of communication.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些服务器上，可能无法通过多播发送消息。幸运的是，可以强制Liferay使用单播协议而不是多播。配置并不非常困难，但很难发现。为了减少在Google上花费的时间，请遵循以下配方部分并正确设置此类通信。
- en: First, turn on the clustering mode by setting the `cluster.link.enabled` property
    with the `true` value.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过将`cluster.link.enabled`属性设置为`true`值来打开集群模式。
- en: 'Next, you have to use the `JGroups` library to establish communication via
    TCP. To achieve this, set the following properties:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您必须使用`JGroups`库通过TCP建立通信。为了实现这一点，设置以下属性：
- en: '[PRE31]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Analyze the highlighted part in the preceding section. All channels have references
    to the `unicast-ehcache.xml` file. Thus, create the `unicast-ehcache.xml` file
    on a classpath (`${TOMCAT_HOME}webapps/ROOT/WEB-INF/classes`). It is also possible
    to create it in the `ext` plugin at `ext-impl/src/main/resources/unicast-ehcache.xml`.
    The content of the file is as follows:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 分析上一节中突出显示的部分。所有通道都引用了`unicast-ehcache.xml`文件。因此，在类路径上创建`unicast-ehcache.xml`文件（`${TOMCAT_HOME}webapps/ROOT/WEB-INF/classes`）。它也可以在`ext`插件中的`ext-impl/src/main/resources/unicast-ehcache.xml`创建。文件内容如下：
- en: '[PRE32]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The last thing to enable communication is to tell `JGroups` about the available
    nodes (Liferay instances). Let''s assume there are two nodes of Liferay with the
    following IP addresses:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一件要启用通信的事情是告诉`JGroups`关于可用节点（Liferay实例）的信息。假设有两个Liferay节点，以下IP地址：
- en: '**node1** with 192.168.0.10 address'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**node1**带有192.168.0.10地址'
- en: '**node2** with 192.168.0.11 address'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**node2**带有192.168.0.11地址'
- en: 'In order to configure it, set the following `JAVA_OPTS` variable in your application
    server (for instance, at `${TOMCAT_HOME}/bin/setenv.sh`):'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 为了配置它，请在您的应用服务器中设置以下`JAVA_OPTS`变量（例如，在`${TOMCAT_HOME}/bin/setenv.sh`）：
- en: '**node1**:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '**node1**:'
- en: '[PRE33]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '**node2**:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '**node2**:'
- en: '[PRE34]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: How it works…
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'In this recipe, we touched upon several subjects from database configuration
    to Ehcache replication. All of these steps are necessary to correctly run Liferay
    in a clustered environment. Liferay is a huge system with many dependencies, so
    it is quite difficult to install it in many server instances. We believe that
    our advice will help you configure and run Liferay CMS. Our intention was to introduce
    the possible ways of configuration. Every company has its own ideas and solutions
    to install Liferay. In our experience, here are some of the best configurations:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们讨论了从数据库配置到Ehcache复制的几个主题。所有这些步骤都是正确在集群环境中运行Liferay所必需的。Liferay是一个具有许多依赖项的庞大系统，因此在多个服务器实例中安装它相当困难。我们相信我们的建议将帮助您配置和运行Liferay
    CMS。我们的目的是介绍可能的配置方式。每个公司都有自己的安装Liferay的想法和解决方案。根据我们的经验，以下是一些最佳配置：
- en: Apache with the `mod_jk` module and load balancer as a reverse proxy
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用带有`mod_jk`模块和负载均衡器作为反向代理的Apache
- en: Squid as a caching proxy
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Squid作为缓存代理
- en: GlusterFS as a shared filesystem where documents and media portlets keep their
    data
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GlusterFS作为共享文件系统，其中文档和媒体组件端口保留其数据
- en: The Solr server and Zookeeper as a search engine cloud
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Solr服务器和Zookeeper作为搜索引擎云
- en: The MySQL database with a master/slave configuration
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有主/从配置的MySQL数据库
- en: The EhCache replication via multicast (or unicast)
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过多播（或单播）的EhCache复制
- en: Note
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you need more detailed information, go to Liferay's official documentation
    at [https://dev.liferay.com/discover/deployment/-/knowledge_base/6-2/liferay-clustering](https://dev.liferay.com/discover/deployment/-/knowledge_base/6-2/liferay-clustering).
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果需要更详细的信息，请访问Liferay官方文档[https://dev.liferay.com/discover/deployment/-/knowledge_base/6-2/liferay-clustering](https://dev.liferay.com/discover/deployment/-/knowledge_base/6-2/liferay-clustering)。
- en: See also
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'In order to learn more about scalable infrastructure, refer to the following
    recipes:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解更多关于可伸缩基础设施的信息，请参考以下配方：
- en: The *Scalable infrastructure* recipe from [Chapter 12](part0088.xhtml#aid-2JTHG1
    "Chapter 12. Basic Performance Tuning"), *Basic Performance Tuning*
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[第12章](part0088.xhtml#aid-2JTHG1 "第12章。基本性能调整")的*可伸缩基础设施*配方，*基本性能调整*
- en: The *Integration with the Amazon S3 cloud* and the *Data migration between storage
    hooks* recipes from [Chapter 6](part0050.xhtml#aid-1FLS41 "Chapter 6. Documents
    and Media in Liferay"), *Documents and Media in Liferay*
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与亚马逊S3云的**集成**以及来自[第6章](part0050.xhtml#aid-1FLS41 "第6章。Liferay中的文档和媒体")，*Liferay中的文档和媒体*中的*存储钩子之间的数据迁移*食谱
