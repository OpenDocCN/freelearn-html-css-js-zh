- en: Chapter 3. Working with Layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The core of any Bootstrap website is the layout or grid component. Without a
    grid, a website is pretty much useless. One of the biggest layout challenges we
    face as web developers nowadays is dealing with a large array of screen resolutions,
    from desktop to tablets, mobile phones, and even Apple watches. It is not easy
    to lay out a website and we rely on responsive web design and media queries to
    take a mobile-first approach. Perhaps the best feature of the Bootstrap layout
    grid is that it's mobile-first and built using media queries. This takes the hardest
    part out of constructing a grid and lets us concentrate on the actual design of
    our projects. Before we start to layout the next part of our blog project, let's
    review the lay out grid basics in Bootstrap 4.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to discuss the following listed topics briefly:'
  prefs: []
  type: TYPE_NORMAL
- en: Working with containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding columns to your layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a simple three-column layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coding the blog home page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using responsive utility classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The base of any Bootstrap layout is a container class. There are two types of
    containers you can choose to use. The first is `.container-fluid`, which is a
    full-width box and will stretch the layout to fit the entire width of the browser
    window.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is some left and right padding added so the content doesn''t bump right
    up against the browser edge:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with containers](img/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The second option is the basic `.container` class, which will have a fixed
    width based on the size of your device''s viewport. There are five different sizes
    in Bootstrap, with the following width values:'
  prefs: []
  type: TYPE_NORMAL
- en: Extra small <544px
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Small >544px
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Medium >768px
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Large >992px
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extra large >1140px
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Working with containers](img/00023.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s take a look at the markup for both container types. I''ll start with
    the basic `.container` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s pretty easy. Now let''s look at the code for the fluid container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Again, that is straightforward and is all that you need to know about using
    the container classes in Bootstrap 4.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a layout without a container
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, in some cases, you may not want to use a container and that is totally
    fine. An example of this would be if you want a full width layout but you don't
    want the default left and right padding. You may have an image banner that you
    want to stretch to the full width of the browser with no padding. In this case,
    just remove the `<div>` with the `container` class on it.
  prefs: []
  type: TYPE_NORMAL
- en: Using multiple containers on a single page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is perfectly fine to use multiple containers on a single page template.
    The containers are CSS classes, so they are reusable. You may want to do this
    on longer page layouts, perhaps a landing page design, where you have multiple
    large regions. Another example is using a container to wrap your footer. If you
    are using a template system like Harp, you''ll want to create a footer partial.
    You can make the footer component more self contained by giving it its own container.
    Then you don''t have to worry about closing a container `<div>` in the footer
    that was opened in a page template or even the header. I would recommend using
    multiple containers to make your designs more modular and easier to manage by
    multiple users. Let''s take a quick look at how you would structure a basic page
    with multiple containers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We have three separate files there and using a container class for each makes
    each section more modular. You also don't have to worry about opening a `<div>`
    in one file then closing it in another. This is a good way to avoid orphan closing
    `</div>` tags.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting rows into your layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next step in creating a layout is to insert at least a single row of columns.
    Each container class can have one or more rows nested inside of it. A row defines
    a collection of horizontal columns that can be broken up to twelve times. The
    magic number when it comes to columns in Bootstrap is twelve, and you can sub-divide
    them any way you like. Before we get into columns though, let''s review the markup
    for rows. First let''s look at an example of a container with a single row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, this is an easy next step in setting up your layout. Like I
    mentioned, you can have as many rows within a container as you like. Here''s how
    you would code a five-row layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Like the container class, rows are also a CSS class, so they can be reused as
    many times as you like on a single page template.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You should never include actual contents inside a row `<div>`. All content should
    be included with column `<div>`s.
  prefs: []
  type: TYPE_NORMAL
- en: Adding columns to your layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we jump into actually adding the columns, let''s talk a little bit about
    the different column classes you have at your disposal with Bootstrap. In Bootstrap
    3 there were four different column class widths to choose from: extra small, small,
    medium, and large. With Bootstrap 4, they have also introduced a new extra large
    column class. This is likely to allow for extra large monitors, like you would
    find on an iMac. Let''s go over the fine points of each column class in Bootstrap
    4.'
  prefs: []
  type: TYPE_NORMAL
- en: Extra small
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The smallest of the grid classes uses the naming pattern `.col-xs-#`, where
    `-#` is equal to a number from 1 to 12\. Remember, in Bootstrap, your row must
    be divided into a number of columns that adds up to 12\. A couple of examples
    of this would be `.col-xs-6` or `.col-xs-3`. The extra small column class is for
    targeting mobile devices that have a `max-width` of 544 pixels.
  prefs: []
  type: TYPE_NORMAL
- en: Small
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The small column class uses the syntax pattern `.col-sm-#`, and some examples
    of that would be `.col-sm-4` or `.col-sm-6`. It is targeted for devices with a
    resolution greater than 544 pixels but smaller than 720 pixels.
  prefs: []
  type: TYPE_NORMAL
- en: Medium
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The medium column class uses a similar naming pattern of `.col-md-#` and some
    examples would be `.col-md-3` or `.col-md-12`. This column class is for devices
    greater than 720 pixels and smaller than 940 pixels.
  prefs: []
  type: TYPE_NORMAL
- en: Large
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The large column class again uses the naming pattern of `.col-lg-#` and some
    examples would be `.col-lg-6` or `.col-lg-2`. This column class targets devices
    that are larger than 940 pixels but smaller than 1140 pixels.
  prefs: []
  type: TYPE_NORMAL
- en: Extra large
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The final and new column class is extra large and the syntax for it is `.col-xl-#`
    with examples being `.col-xl-1` or `.col-xl-10`. This column class option is for
    all resolutions greater than or equal to 1140 pixels.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a column class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a good question. With all of the class options, it can be hard to decide
    which ones to use. If you are building a mobile app, then you would likely want
    to stick to the extra small or small column classes. For a tablet, you might want
    to use medium. If the primary user for your application will be on a desktop computer,
    then use the large or extra large classes. But what if you are building a responsive
    website and you need to target multiple devices? If that is the case, I usually
    recommend using either the medium or large column classes. Then you can adjust
    to use larger or smaller classes where necessary if you have a component that
    needs some extra attention for specific resolutions.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple three-column layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s assume that we are building a simple responsive website and we need
    a three-column layout for our template. Here''s what your markup should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, I''ve inserted three `<div>`s inside my row `<div>`, each with
    a class of `.col-md-4`. For devices that have a resolution of 768 pixels or greater,
    you''ll see a three-column layout like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a simple three-column layout](img/00024.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, if you were to view this same layout on a device with resolution smaller
    than 768 pixels, each column''s width would change to 100% and the columns would
    be stacked on top of each other. That variation of the layout for smaller screens
    would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a simple three-column layout](img/00025.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That's all well and good, but what if we wanted to have a different layout for
    the columns on smaller devices that didn't set them all to 100% width? That can
    be done by mixing column classes.
  prefs: []
  type: TYPE_NORMAL
- en: Mixing column classes for different devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Adding additional classes to each of our column `<div>`s will allow us to target
    the grid layout for different devices. Let''s consider our three-column layout
    from before, but this time, we want to lay it out like this:'
  prefs: []
  type: TYPE_NORMAL
- en: The first two columns should be 50% of the layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third column should stretch 100% of the layout and be below the first two
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To achieve this layout, we''ll mix some different column classes. Here''s what
    the markup should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'I''ve added the `.col-xs-6` class to the first two column `<div>`s. Now, if
    our device resolution is less than 768 pixels, the first two columns will be set
    to a width of 50%. For the third column, I''ve used the `.col-xs-12` class, which
    will wrap the third column onto a new line and set it to 100% of the width of
    the layout. The resulting layout will look like this on smaller devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Mixing column classes for different devices](img/00026.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This will only apply to devices with a layout of less than 768 pixels. If you
    were to view this grid, using the latest code, on a larger device, it will still
    appear as three equal columns laid out horizontally.
  prefs: []
  type: TYPE_NORMAL
- en: What if I want to offset a column?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perhaps your layout requires you to offset some columns and leave some horizontal
    blank space before your content starts. This can easily be used with Bootstrap''s
    offset grid classes. The naming convention is similar to the regular column classes,
    but we need to add the offset keyword, like this: `.col-lg-offset-#`. A couple
    examples of this would be `.col-lg-offset-3` or `.col-md-offset-6`. Let''s take
    our three-column grid from before but remove the first column. However, we want
    the second and third columns to remain where they are in the layout. This will
    require us to use the offset grid class. Here''s what your markup should look
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note how I removed the first column `<div>`. I also added the class `.col-md-offset-4`
    to the second column's `<div>`. Once you've done this, your layout should appear
    like this.
  prefs: []
  type: TYPE_NORMAL
- en: 'There you go; you''ve successfully offset your column by removing the first
    column and then sliding over the other two columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What if I want to offset a column?](img/00027.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That concludes the basics of the Bootstrap grid that you'll need to know for
    the remainder of this chapter. Now that you have a good understanding of how the
    grid works, let's move onto coding up our blog home page layout using the grid
    classes.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the blog home page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that you have a good grasp of how to use the Bootstrap 4 grid, we''re going
    to code up our blog home page. This page will include a feed of posts, a sidebar,
    and a newsletter sign-up form section at the bottom of the page. Let''s start
    by taking the code we wrote in [Lesson 1](part0008_split_000.html#7K4G1-d17423bd3b664255b5fd09e37e25e334
    "Chapter 1. Setting up Our First Blog Project"), *Setting up Our First Blog Project*
    for our `hello world!` template and duplicating the entire directory. Rename the
    folder `Lesson 3: Working with Layouts or Bootstrap Layout`.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember, we are using the regular grid moving forward, not the Flexbox grid.
    Make sure you are using the default build of `bootstrap.min.css`. If you carry
    out a simple duplication of the second chapter's code then you'll have the right
    file configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the index.ejs template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Good news! Since we set up our Harp project in the beginning, we can reuse
    a bunch of that code now for our blog home page. There''s no need to make any
    updates to the JSON files and header or footer partials. The only file we need
    to make changes is `index.ejs`. Open the file up in a text editor and paste the
    following code to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a few different things going on here so let me break them all down
    for you:'
  prefs: []
  type: TYPE_NORMAL
- en: I don't want a full width layout, so I've decided to use the `.container` class
    to wrap my templates layout.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I've created three different rows, one for our page title, one for the page
    content (blog feed and sidebar), and one for the mailing list section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are some classes on the row `<div>`s that we haven't seen before, like
    `m-t-3`. I'll cover what those do in the next section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since I want my blog to be readable on devices of all sizes, I decided to use
    the medium-sized column classes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The page title column is set to .`col-md-12`, so it will stretch to 100% of
    the layout width.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I've divided the second row, which holds most of our page content, into a two-column
    grid. The first column will take up 2/3 of the layout width with the `col-md-8`
    class. The second column, our sidebar, will take up 1/3 of the layout width with
    the `col-md-4` class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, the third row will hold the mailing list and it is also using the `col-md-12`
    class and will stretch to fill the entire width of the layout.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The basic layout of the grid for our blog home page is now complete. However,
    let's revisit those new CSS classes from our layout that I added to the row `<div>`s.
  prefs: []
  type: TYPE_NORMAL
- en: Using spacing CSS classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the new utilities that has been added in Bootstrap 4 is spacing classes.
    These are great as they add an easy, modular way to add extra vertical spacing
    to your layouts without having to write custom CSS classes for each region. Spacing
    classes can be applied to both the CSS `margin` and `padding` properties. The
    basic pattern for defining the class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s break down how this works in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '`property` is equal to either `margin` or `padding`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sides` is equal to the side of a box you want to add either `margin` or `padding`
    to. This is written using a single letter: `t` for top, `b` for bottom, `l` for
    left, and `r` for right.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`size` is equal to the amount of margin or padding you want to add. The scale
    is 0 to 3\. Setting the size value to 0 will actually remove any existing margin
    or padding on an element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To better understand this concept, let''s construct a few spacer classes. Let''s
    say that we want to add some top margin to a row with a size value of 1\. Our
    class would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Applied to the actual row, `<div>`, the class would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: For a second example, let's say we want to add some left padding to a div with
    a value of 2\. That combination would look like this when combined with a row
    `<div>:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Are you starting to see how easy it is to add some spacing around your layout
    and components?
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Spacing classes can be used on any type of element, not just the Bootstrap grid.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you understand how these classes work, let''s take a look at our blog
    home page template again. In that case, our `<div>`s looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: On three sections of the template, I've decided to use these classes and they
    are all top margin with a size value of three. It's a good idea to try and keep
    these consistent as it will result in a visually appealing layout when you are
    done. It also makes it a little easier to do the math when you are setting up
    your page. Now that we've gone over the entire home page layout, we need to test
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Testing out the blog home page layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s test it out in the browser to make sure it''s looking the way we want.
    Before we can do that we''ll need to compile our code with Harp. Open the Terminal
    back up and navigate to the project directory for this chapter''s code that we
    created. Run the `harp compile` command, here it is again in case you forgot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'That should run without any errors; then, we can start-up the web server to
    view our page. Here''s the command again to run the web server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the server has launched, head to a web browser and enter `http://localhost:9000`
    in the URL bar to bring up the blog home page. Here''s what your page should look
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing out the blog home page layout](img/00028.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Uh oh, that doesn't look quite right. You can see the page title but we can't
    see any of our columns. Oh yeah! We need to fill in some content so the columns
    are revealed. Let's add in some dummy text for demo purposes. In later chapters,
    I'll get into coding the actual components we want to see on this page. This chapter
    is just about setting up our layout.
  prefs: []
  type: TYPE_NORMAL
- en: Adding some content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Head back to `index.ejs` in your text editor and let''s add some dummy text.
    Go to the first column of the main content area first and enter something like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: If you're looking for a quick way to get filler text in HTML format, visit [http://html-ipsum.com/](http://html-ipsum.com/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, go to the sidebar column `<div>` and add the same paragraph of text,
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, drop down to the mailing list `<div>` and add the same paragraph of
    content again. It should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we''ve added some actual content to our page body, let''s recompile
    the project and launch the web server again:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With Harp, you don't actually have to recompile after every little change you
    make. You can also make changes to your files while the server is running and
    they will be picked up by the browser. It's a good habit to compile regularly
    in case you run into an error on compile. This will make it easier to troubleshoot
    potential problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the server is up and running, return to your browser and refresh the page.
    Now your layout should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding some content](img/00029.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Yay! We can now see our columns and the dummy text that we just added. The page
    may not be much to look at right now, but what's important is to verify that your
    columns are laid out correctly.
  prefs: []
  type: TYPE_NORMAL
- en: What about mobile devices?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to consider what will happen to our layout on mobile devices and smaller
    screen resolutions. I used the medium grid layout class, so any device that is
    smaller than 720 pixels will have an adjusted layout. Resize your browser window,
    making it smaller to trigger the media query, and you''ll see that all of the
    columns will be resized to 100% width of the container. Here''s what it looks
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What about mobile devices?](img/00030.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: I'm going to keep our blog layout pretty minimal so I'm okay with this layout.
    In this format, the sidebar will slide in under the main blog feed of posts. I'm
    actually not that crazy about this design, so I'm just going to hide the sidebar
    altogether when you view the blog on a smaller device.
  prefs: []
  type: TYPE_NORMAL
- en: Using responsive utility classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Responsive utility classes will allow you to selectively hide `<div>`s or components
    based on the screen resolution size. This is great for creating a mobile-first
    web application, because in many cases you''ll want to hide some components that
    don''t work well on a phone or tablet. Mobile application design generally means
    a simpler, more minimal experience some using responsive utility classes will
    allow you to achieve this. Open up `index.ejs` in a text editor and go down to
    the sidebar `<div>`, then add the `.hidden-md-down` class to your code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Adding this class will hide the `<div>` from the browser when your screen resolution
    is smaller than 720 pixels. Make sure your column class, in this case `-md`, matches
    the hidden class. Now, if you shrink your web browser down again, you'll notice
    that the sidebar `<div>` will disappear.
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of responsive utility classes you can use in your projects.
    There is a `-down` version for each of the column class names. You can also use
    a `-up` version if you wish to hide something when viewing at a larger resolution.
    Some examples of that class are `.hidden-lg-up` or `.hidden-xl-up`. To learn more
    about responsive utility classes, check out the page in the Bootstrap docs at
    [http://v4-alpha.getbootstrap.com/layout/responsive-utilities/](http://v4-alpha.getbootstrap.com/layout/responsive-utilities/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: That completes the layout of the grid for our blog home page. Before we move
    onto learning about content classes in Bootstrap 4, let's set up the layout grid
    for the other pages we'll be building for the blog.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the additional blog project page grids
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we create new templates for our contact and single blog post pages, we
    need to update some of the Harp project files. Let's update those files, then
    we'll move onto the page templates.
  prefs: []
  type: TYPE_NORMAL
- en: Updating _data.json for our new pages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Remember a couple chapters back we learned how to code the `_data.json` file
    and we created a variable for the page title of each of our templates? We need
    to update this file for our two new pages by providing the `pageTitle` variable
    value for each of them. Open up `_data.json` in a text editor; you can find the
    file in the root of your blog project directory. Once you have the file open,
    insert the following code. The entire file should read as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Originally, we only included the `index` file. I've added two more entries,
    one for the contact page and one for the blog-post page. I've entered a value
    for each page's `pageTitle` variable. It's as simple as that. Save the JSON file
    and then you can close it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the new page templates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that `_data.json` has been updated, we need to create the actual page template
    EJS files like we did with index. In your text editor, create two new files and
    save them as `contact.ejs` and `blog-post.ejs`. For now, just leave them blank
    and we'll start to fill them in the next steps. The templates are now set up and
    ready to be coded. For now, both of our new pages will use the same `_layout.ejs`
    file as the index file, so there is no need to create any more layouts. Let's
    start by coding the contact page template.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the contact page template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open up the `contact.ejs` file you just created in your text editor. Let''s
    start the template by setting up our page title. Enter the following code into
    the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s breakdown what''s happening here in the code:'
  prefs: []
  type: TYPE_NORMAL
- en: I've opened up the file with a `<div>` with a `.container` class on it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next I added `.row <div>` and I've added the same `m-t-3` spacing classes so
    it matches the blog home page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I've added a column `<div>` with a class of `.col-md-12`. Since this is our
    page title, we want it to stretch to the width of our layout.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, I've added an `<h1>` tag with our contact page title.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the contact page body
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next let''s insert our grid layout for the body of the contact page. Following
    the page title code, insert the following grid code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s review the code for the page body:'
  prefs: []
  type: TYPE_NORMAL
- en: I've opened up another row `<div>` for the page body. It also has the same `m-t-3`
    spacing class on it for consistent vertical spacing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I've used the `col-md-12` column class again because the contact page layout
    will fill the whole width of our container.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I've added some filler text for now so that we can verify that the page is laid
    out properly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Before we finish, let''s add one more row for our mailing list section. I''d
    like this to be available on every page of our blog. The grid code for this section
    will be identical to the markup we did for the page body. Here''s what it looks
    like, for reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Since this code is identical to the page body, I won't bother breaking it down
    again. Our layout for the contact page is now complete. Make sure you save the
    file and let's test it before we move onto the blog post page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal back up and navigate to the root directory of the blog project.
    Once there, run the `harp compile` command and then the Harp server command to
    launch the local web server. Open your web browser and enter the following URL
    to preview your page: `http://localhost:9000/contact.html`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Your contact page should load up and you should see a page title and two rows
    of filler text. Here''s what it should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the contact page body](img/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Our contact page grid is now complete. Before we move onto creating the blog
    post template, let''s take a look at all the code for the contact template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Coding the blog post template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Head back to your text editor and open the file `blog-post.ejs` that you previously
    created. Like our contact page template, let''s start by first setting up the
    page title section of code. Enter the following code into the blog post template
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, this code is almost identical to the contact page. There are
    two small differences that I will point out for you:'
  prefs: []
  type: TYPE_NORMAL
- en: I've changed up the spacing classes on the row `<div>`. In a future chapter,
    we are going to add some different components around the page title, so I've altered
    the vertical spacing to allow for them. I'm using the same margin top spacer but
    I've only set it to a value of 2\. I've added a second margin bottom spacer with
    a value of 2 with the `.m-b-2` class. Switching the `-t` to a `-b` will apply
    a bottom margin instead a of top margin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I've changed the page title to `Post Title` in the `<h1>` tag.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the blog post feature
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The body of our blog post will have some different elements compared to the
    blog home template. After the page title, I''m going to insert a feature section
    that will be used for an image or carousel in a future chapter. For now, let''s
    just lay in the grid column and some filler text for testing purposes. Enter the
    following code after the page title section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This is a very simple section. Notice the `row <div>` doesn't have a spacer
    class on it, since we added the bottom margin to the page title section. I've
    inserted a full-width `col-md-12` column class so the feature can stretch to the
    width of the layout.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the blog post body
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we''ve added the blog post feature section, let''s add the actual
    body part of the template. This section will use the same layout as our blog home
    page. It will be a two-column layout, the first being 2/3 wide, and the sidebar
    being 1/3 of the layout. Insert the following code after the feature section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s break down what''s happening here in the code:'
  prefs: []
  type: TYPE_NORMAL
- en: The row `<div>` has a `m-t-2` spacer class added on to provide some vertical
    spacing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I'm using the same `col-md-8` and `col-md-4` column classes to set up the layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I've also used the `hidden-md-4` class on the sidebar `<div>` so that this section
    will not be visible on smaller resolution devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, I added some temporary filler text for testing purposes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting the mailing list section to a partial
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now go back to the blog post template file and insert the following line of
    code where the mailing list section should appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Remember to do the same thing for the index and contact template. Delete the
    hardcoded mailing list and replace it with the preceding partial line.
  prefs: []
  type: TYPE_NORMAL
- en: 'That concludes the setup of the blog post template. Let''s test it out before
    we move onto the next chapter, to make sure the new mailing list partial is working
    properly. Return to the Terminal and compile your project from the root directory.
    Run the Harp server command, then visit the following URL: `http://localhost:9000/blog-post.html`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If all went as planned, your blog post page should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Converting the mailing list section to a partial](img/00032.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Make sure you don't forget to test the index and contact page templates in your
    browser to make sure the mailing list partial is working properly. That concludes
    the design layout for the blog post template. All of our templates are now ready
    to go, but before we move onto the next chapter on content components, let's review
    what we've learned.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has been a detailed explanation of the Bootstrap layout grid, how
    to use it, and how to build a sample project. We started out by learning the basics
    of the Bootstrap container, container-fluid, and row classes. Next, we moved onto
    learning the differences between all the Bootstrap column classes. Following the
    columns, we covered some more advanced topics, like offsetting columns, spacing,
    and responsive utilities. Once you had a solid understanding of the grid, we coded
    up the remaining page layouts that we'll need for the rest of the book. Now that
    we have everything set up, we'll start to drop some real content into the blog
    using Bootstrap content classes.
  prefs: []
  type: TYPE_NORMAL
- en: Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the two types of containers you can use for a Bootstrap layout?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.container-fluid`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.container`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Both i & ii
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It is perfectly fine to use multiple containers on a single page template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.col-xl-1` or `.col-xl-10`: this column class option is for all resolutions
    greater than or equal to ___________ pixels.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '940'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '1140'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '720'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '544'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the advantage of `spacing` classes in Bootstrap 4?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adds spaces to rows and columns
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: They add an easy, modular way to add extra vertical spacing to your layouts
    without having to write custom CSS classes for each region
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Can be applied to both the CSS `margin` and `padding` properties
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Both ii & iii
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is the use of utility classes?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uses the medium grid layout class, so any device that is smaller than *720 pixels*
    will have an adjusted layout
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Multiple containers to make your designs more modular and easier to manage by
    multiple users
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: order the boxes vertically so they were stacked on top of each other in ascending
    order
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Utility classes will allow you to selectively hide `<div>` tags or components
    based on the screen resolution size
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
