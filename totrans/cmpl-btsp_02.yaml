- en: Chapter 3. Working with Layouts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。与布局一起工作
- en: The core of any Bootstrap website is the layout or grid component. Without a
    grid, a website is pretty much useless. One of the biggest layout challenges we
    face as web developers nowadays is dealing with a large array of screen resolutions,
    from desktop to tablets, mobile phones, and even Apple watches. It is not easy
    to lay out a website and we rely on responsive web design and media queries to
    take a mobile-first approach. Perhaps the best feature of the Bootstrap layout
    grid is that it's mobile-first and built using media queries. This takes the hardest
    part out of constructing a grid and lets us concentrate on the actual design of
    our projects. Before we start to layout the next part of our blog project, let's
    review the lay out grid basics in Bootstrap 4.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 任何Bootstrap网站的核心是布局或网格组件。没有网格，网站几乎毫无用处。我们作为现代网页开发者面临的最大布局挑战之一是处理从桌面到平板电脑、移动电话，甚至苹果手表的大量屏幕分辨率。布局一个网站并不容易，我们依赖于响应式网页设计和媒体查询来采取以移动端优先的方法。Bootstrap布局网格的最好特性之一是它以移动端优先，并使用媒体查询构建。这从构建网格的最困难部分中解脱出来，让我们能够专注于我们项目的实际设计。在我们开始布局我们博客项目的下一部分之前，让我们回顾一下Bootstrap
    4中的布局网格基础知识。
- en: 'In this chapter, we are going to discuss the following listed topics briefly:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将简要讨论以下列出的主题：
- en: Working with containers
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与容器一起工作
- en: Adding columns to your layout
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向您的布局添加列
- en: Creating a simple three-column layout
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个简单的三列布局
- en: Coding the blog home page
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写博客主页的代码
- en: Using responsive utility classes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用响应式实用类
- en: Working with containers
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与容器一起工作
- en: The base of any Bootstrap layout is a container class. There are two types of
    containers you can choose to use. The first is `.container-fluid`, which is a
    full-width box and will stretch the layout to fit the entire width of the browser
    window.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 任何Bootstrap布局的基础是一个容器类。您可以选择使用两种类型的容器。第一种是 `.container-fluid`，它是一个全宽度的盒子，并将布局扩展以适应浏览器窗口的整个宽度。
- en: 'There is some left and right padding added so the content doesn''t bump right
    up against the browser edge:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了一些左右填充，以便内容不会紧挨着浏览器边缘：
- en: '![Working with containers](img/00022.jpeg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![与容器一起工作](img/00022.jpeg)'
- en: 'The second option is the basic `.container` class, which will have a fixed
    width based on the size of your device''s viewport. There are five different sizes
    in Bootstrap, with the following width values:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种选择是基本的 `.container` 类，它将根据您的设备视口的尺寸具有固定的宽度。Bootstrap中有五种不同的大小，以下为宽度值：
- en: Extra small <544px
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非常小 <544px
- en: Small >544px
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小 >544px
- en: Medium >768px
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中等 >768px
- en: Large >992px
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大 >992px
- en: Extra large >1140px
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非常大 >1140px
- en: '![Working with containers](img/00023.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![与容器一起工作](img/00023.jpeg)'
- en: 'Let''s take a look at the markup for both container types. I''ll start with
    the basic `.container` class:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看两种容器类型的标记。我将从基本的 `.container` 类开始：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'That''s pretty easy. Now let''s look at the code for the fluid container:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当简单。现在让我们看看流体容器的代码：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Again, that is straightforward and is all that you need to know about using
    the container classes in Bootstrap 4.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '再次，这很简单，这就是您需要了解的关于在Bootstrap 4中使用容器类的一切。 '
- en: Creating a layout without a container
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建没有容器的布局
- en: Now, in some cases, you may not want to use a container and that is totally
    fine. An example of this would be if you want a full width layout but you don't
    want the default left and right padding. You may have an image banner that you
    want to stretch to the full width of the browser with no padding. In this case,
    just remove the `<div>` with the `container` class on it.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在某些情况下，您可能不想使用容器，这是完全可以接受的。这种情况的一个例子是，如果您想要全宽度的布局，但不想有默认的左右填充。您可能有一个想要拉伸到浏览器全宽且没有填充的图片横幅。在这种情况下，只需移除带有
    `container` 类的 `<div>` 即可。
- en: Using multiple containers on a single page
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在单页上使用多个容器
- en: 'It is perfectly fine to use multiple containers on a single page template.
    The containers are CSS classes, so they are reusable. You may want to do this
    on longer page layouts, perhaps a landing page design, where you have multiple
    large regions. Another example is using a container to wrap your footer. If you
    are using a template system like Harp, you''ll want to create a footer partial.
    You can make the footer component more self contained by giving it its own container.
    Then you don''t have to worry about closing a container `<div>` in the footer
    that was opened in a page template or even the header. I would recommend using
    multiple containers to make your designs more modular and easier to manage by
    multiple users. Let''s take a quick look at how you would structure a basic page
    with multiple containers:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在单个页面模板上使用多个容器是完全可行的。容器是CSS类，因此它们是可重用的。你可能想在较长的页面布局中这样做，比如一个着陆页设计，其中包含多个大型区域。另一个例子是使用容器来包裹你的页脚。如果你使用像Harp这样的模板系统，你将想要创建一个页脚部分。你可以通过给它自己的容器来使页脚组件更加自包含。这样你就不必担心在页脚中关闭在页面模板或甚至标题中打开的容器`<div>`。我建议使用多个容器来使你的设计更加模块化，并且更容易被多个用户管理。让我们快速看一下如何使用多个容器来构建一个基本页面：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We have three separate files there and using a container class for each makes
    each section more modular. You also don't have to worry about opening a `<div>`
    in one file then closing it in another. This is a good way to avoid orphan closing
    `</div>` tags.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有三个独立的文件，并为每个文件使用一个容器类，这使得每个部分更加模块化。你也不必担心在一个文件中打开`<div>`然后在另一个文件中关闭它。这是一种避免孤儿关闭`</div>`标签的好方法。
- en: Inserting rows into your layout
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在布局中插入行
- en: 'The next step in creating a layout is to insert at least a single row of columns.
    Each container class can have one or more rows nested inside of it. A row defines
    a collection of horizontal columns that can be broken up to twelve times. The
    magic number when it comes to columns in Bootstrap is twelve, and you can sub-divide
    them any way you like. Before we get into columns though, let''s review the markup
    for rows. First let''s look at an example of a container with a single row:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 创建布局的下一步是插入至少一行的列。每个容器类可以包含一个或多个嵌套在其中的行。一行定义了一组水平列，这些列可以被分成十二份。在Bootstrap中，列的神奇数字是十二，你可以以任何你喜欢的方式细分它们。在我们讨论列之前，让我们回顾一下行的标记。首先让我们看看一个包含单行的容器的例子：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As you can see, this is an easy next step in setting up your layout. Like I
    mentioned, you can have as many rows within a container as you like. Here''s how
    you would code a five-row layout:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，这是设置布局的简单下一步。就像我提到的，你可以在容器内拥有任意多的行。以下是如何编码一个五行布局的方法：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Like the container class, rows are also a CSS class, so they can be reused as
    many times as you like on a single page template.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 与容器类一样，行也是一个CSS类，因此它们可以在单个页面模板上重复使用任意多次。
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You should never include actual contents inside a row `<div>`. All content should
    be included with column `<div>`s.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你永远不应该在行`<div>`中包含实际内容。所有内容都应该包含在列`<div>`中。
- en: Adding columns to your layout
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向布局中添加列
- en: 'Before we jump into actually adding the columns, let''s talk a little bit about
    the different column classes you have at your disposal with Bootstrap. In Bootstrap
    3 there were four different column class widths to choose from: extra small, small,
    medium, and large. With Bootstrap 4, they have also introduced a new extra large
    column class. This is likely to allow for extra large monitors, like you would
    find on an iMac. Let''s go over the fine points of each column class in Bootstrap
    4.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们实际添加列之前，让我们简要谈谈Bootstrap中你可以使用的不同列类。在Bootstrap 3中，有四种不同的列类宽度可供选择：超小、小、中和大。Bootstrap
    4引入了一个新的超大列类。这可能是为了允许使用超大显示器，比如你可以在iMac上找到的那种。让我们过一遍Bootstrap 4中每个列类的细微差别。
- en: Extra small
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 超小
- en: The smallest of the grid classes uses the naming pattern `.col-xs-#`, where
    `-#` is equal to a number from 1 to 12\. Remember, in Bootstrap, your row must
    be divided into a number of columns that adds up to 12\. A couple of examples
    of this would be `.col-xs-6` or `.col-xs-3`. The extra small column class is for
    targeting mobile devices that have a `max-width` of 544 pixels.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最小的网格类使用命名模式`.col-xs-#`，其中`-#`等于从1到12的数字。记住，在Bootstrap中，你的行必须分成若干列，这些列的总数加起来必须是12。这个例子包括`.col-xs-6`或`.col-xs-3`。超小列类用于针对最大宽度为544像素的移动设备。
- en: Small
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 小
- en: The small column class uses the syntax pattern `.col-sm-#`, and some examples
    of that would be `.col-sm-4` or `.col-sm-6`. It is targeted for devices with a
    resolution greater than 544 pixels but smaller than 720 pixels.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Medium
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The medium column class uses a similar naming pattern of `.col-md-#` and some
    examples would be `.col-md-3` or `.col-md-12`. This column class is for devices
    greater than 720 pixels and smaller than 940 pixels.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Large
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The large column class again uses the naming pattern of `.col-lg-#` and some
    examples would be `.col-lg-6` or `.col-lg-2`. This column class targets devices
    that are larger than 940 pixels but smaller than 1140 pixels.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Extra large
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The final and new column class is extra large and the syntax for it is `.col-xl-#`
    with examples being `.col-xl-1` or `.col-xl-10`. This column class option is for
    all resolutions greater than or equal to 1140 pixels.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a column class
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a good question. With all of the class options, it can be hard to decide
    which ones to use. If you are building a mobile app, then you would likely want
    to stick to the extra small or small column classes. For a tablet, you might want
    to use medium. If the primary user for your application will be on a desktop computer,
    then use the large or extra large classes. But what if you are building a responsive
    website and you need to target multiple devices? If that is the case, I usually
    recommend using either the medium or large column classes. Then you can adjust
    to use larger or smaller classes where necessary if you have a component that
    needs some extra attention for specific resolutions.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple three-column layout
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s assume that we are building a simple responsive website and we need
    a three-column layout for our template. Here''s what your markup should look like:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As you can see, I''ve inserted three `<div>`s inside my row `<div>`, each with
    a class of `.col-md-4`. For devices that have a resolution of 768 pixels or greater,
    you''ll see a three-column layout like this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a simple three-column layout](img/00024.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
- en: 'Now, if you were to view this same layout on a device with resolution smaller
    than 768 pixels, each column''s width would change to 100% and the columns would
    be stacked on top of each other. That variation of the layout for smaller screens
    would look like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a simple three-column layout](img/00025.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
- en: That's all well and good, but what if we wanted to have a different layout for
    the columns on smaller devices that didn't set them all to 100% width? That can
    be done by mixing column classes.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Mixing column classes for different devices
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Adding additional classes to each of our column `<div>`s will allow us to target
    the grid layout for different devices. Let''s consider our three-column layout
    from before, but this time, we want to lay it out like this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: The first two columns should be 50% of the layout
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third column should stretch 100% of the layout and be below the first two
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To achieve this layout, we''ll mix some different column classes. Here''s what
    the markup should look like:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'I''ve added the `.col-xs-6` class to the first two column `<div>`s. Now, if
    our device resolution is less than 768 pixels, the first two columns will be set
    to a width of 50%. For the third column, I''ve used the `.col-xs-12` class, which
    will wrap the third column onto a new line and set it to 100% of the width of
    the layout. The resulting layout will look like this on smaller devices:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '![Mixing column classes for different devices](img/00026.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
- en: This will only apply to devices with a layout of less than 768 pixels. If you
    were to view this grid, using the latest code, on a larger device, it will still
    appear as three equal columns laid out horizontally.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: What if I want to offset a column?
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perhaps your layout requires you to offset some columns and leave some horizontal
    blank space before your content starts. This can easily be used with Bootstrap''s
    offset grid classes. The naming convention is similar to the regular column classes,
    but we need to add the offset keyword, like this: `.col-lg-offset-#`. A couple
    examples of this would be `.col-lg-offset-3` or `.col-md-offset-6`. Let''s take
    our three-column grid from before but remove the first column. However, we want
    the second and third columns to remain where they are in the layout. This will
    require us to use the offset grid class. Here''s what your markup should look
    like:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note how I removed the first column `<div>`. I also added the class `.col-md-offset-4`
    to the second column's `<div>`. Once you've done this, your layout should appear
    like this.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'There you go; you''ve successfully offset your column by removing the first
    column and then sliding over the other two columns:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '![What if I want to offset a column?](img/00027.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
- en: That concludes the basics of the Bootstrap grid that you'll need to know for
    the remainder of this chapter. Now that you have a good understanding of how the
    grid works, let's move onto coding up our blog home page layout using the grid
    classes.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Coding the blog home page
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that you have a good grasp of how to use the Bootstrap 4 grid, we''re going
    to code up our blog home page. This page will include a feed of posts, a sidebar,
    and a newsletter sign-up form section at the bottom of the page. Let''s start
    by taking the code we wrote in [Lesson 1](part0008_split_000.html#7K4G1-d17423bd3b664255b5fd09e37e25e334
    "Chapter 1. Setting up Our First Blog Project"), *Setting up Our First Blog Project*
    for our `hello world!` template and duplicating the entire directory. Rename the
    folder `Lesson 3: Working with Layouts or Bootstrap Layout`.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember, we are using the regular grid moving forward, not the Flexbox grid.
    Make sure you are using the default build of `bootstrap.min.css`. If you carry
    out a simple duplication of the second chapter's code then you'll have the right
    file configuration.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Writing the index.ejs template
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Good news! Since we set up our Harp project in the beginning, we can reuse
    a bunch of that code now for our blog home page. There''s no need to make any
    updates to the JSON files and header or footer partials. The only file we need
    to make changes is `index.ejs`. Open the file up in a text editor and paste the
    following code to get started:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'There are a few different things going on here so let me break them all down
    for you:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: I don't want a full width layout, so I've decided to use the `.container` class
    to wrap my templates layout.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I've created three different rows, one for our page title, one for the page
    content (blog feed and sidebar), and one for the mailing list section.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are some classes on the row `<div>`s that we haven't seen before, like
    `m-t-3`. I'll cover what those do in the next section.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since I want my blog to be readable on devices of all sizes, I decided to use
    the medium-sized column classes.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The page title column is set to .`col-md-12`, so it will stretch to 100% of
    the layout width.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I've divided the second row, which holds most of our page content, into a two-column
    grid. The first column will take up 2/3 of the layout width with the `col-md-8`
    class. The second column, our sidebar, will take up 1/3 of the layout width with
    the `col-md-4` class.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, the third row will hold the mailing list and it is also using the `col-md-12`
    class and will stretch to fill the entire width of the layout.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The basic layout of the grid for our blog home page is now complete. However,
    let's revisit those new CSS classes from our layout that I added to the row `<div>`s.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Using spacing CSS classes
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the new utilities that has been added in Bootstrap 4 is spacing classes.
    These are great as they add an easy, modular way to add extra vertical spacing
    to your layouts without having to write custom CSS classes for each region. Spacing
    classes can be applied to both the CSS `margin` and `padding` properties. The
    basic pattern for defining the class is as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s break down how this works in more detail:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '`property` is equal to either `margin` or `padding`.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sides` is equal to the side of a box you want to add either `margin` or `padding`
    to. This is written using a single letter: `t` for top, `b` for bottom, `l` for
    left, and `r` for right.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`size` is equal to the amount of margin or padding you want to add. The scale
    is 0 to 3\. Setting the size value to 0 will actually remove any existing margin
    or padding on an element.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To better understand this concept, let''s construct a few spacer classes. Let''s
    say that we want to add some top margin to a row with a size value of 1\. Our
    class would look like this:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Applied to the actual row, `<div>`, the class would look like this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: For a second example, let's say we want to add some left padding to a div with
    a value of 2\. That combination would look like this when combined with a row
    `<div>:`
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Are you starting to see how easy it is to add some spacing around your layout
    and components?
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Spacing classes can be used on any type of element, not just the Bootstrap grid.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 空间类可以用于任何类型的元素，而不仅仅是 Bootstrap 网格。
- en: 'Now that you understand how these classes work, let''s take a look at our blog
    home page template again. In that case, our `<div>`s looks like this:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了这些类是如何工作的，让我们再次查看我们的博客主页模板。在这种情况下，我们的 `<div>` 看起来是这样的：
- en: '[PRE13]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: On three sections of the template, I've decided to use these classes and they
    are all top margin with a size value of three. It's a good idea to try and keep
    these consistent as it will result in a visually appealing layout when you are
    done. It also makes it a little easier to do the math when you are setting up
    your page. Now that we've gone over the entire home page layout, we need to test
    it.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在模板的三个部分，我决定使用这些类，并且它们都是顶部边距，大小值为三。保持这些一致性是个好主意，因为当你完成时，这将导致一个视觉上吸引人的布局。这也会使你在设置页面时进行数学计算变得稍微容易一些。现在我们已经审查了整个主页布局，我们需要对其进行测试。
- en: Testing out the blog home page layout
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试博客主页布局
- en: 'Let''s test it out in the browser to make sure it''s looking the way we want.
    Before we can do that we''ll need to compile our code with Harp. Open the Terminal
    back up and navigate to the project directory for this chapter''s code that we
    created. Run the `harp compile` command, here it is again in case you forgot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在浏览器中测试一下，确保它看起来是我们想要的。在我们能够这样做之前，我们需要用 Harp 编译我们的代码。再次打开终端，导航到我们为这一章代码创建的项目目录。运行
    `harp compile` 命令，这里再次列出，以防你忘记：
- en: '[PRE14]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'That should run without any errors; then, we can start-up the web server to
    view our page. Here''s the command again to run the web server:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该没有错误地运行；然后，我们可以启动网络服务器来查看我们的页面。这是再次运行网络服务器的命令：
- en: '[PRE15]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now that the server has launched, head to a web browser and enter `http://localhost:9000`
    in the URL bar to bring up the blog home page. Here''s what your page should look
    like:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器现在已经启动，打开网页浏览器，在 URL 栏中输入 `http://localhost:9000` 以显示博客主页。以下是你的页面应该看起来像这样：
- en: '![Testing out the blog home page layout](img/00028.jpeg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![测试博客主页布局](img/00028.jpeg)'
- en: Uh oh, that doesn't look quite right. You can see the page title but we can't
    see any of our columns. Oh yeah! We need to fill in some content so the columns
    are revealed. Let's add in some dummy text for demo purposes. In later chapters,
    I'll get into coding the actual components we want to see on this page. This chapter
    is just about setting up our layout.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀，这看起来不太对。你可以看到页面标题，但我们看不到任何列。哦，是的！我们需要填写一些内容，以便显示列。让我们为了演示目的添加一些占位文本。在后面的章节中，我将介绍如何编写我们想要在这个页面上看到的实际组件。这一章只是关于设置我们的布局。
- en: Adding some content
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一些内容
- en: 'Head back to `index.ejs` in your text editor and let''s add some dummy text.
    Go to the first column of the main content area first and enter something like
    this:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 回到你的文本编辑器中的 `index.ejs` 并添加一些占位文本。首先进入主内容区域的第一列，输入如下内容：
- en: '[PRE16]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If you're looking for a quick way to get filler text in HTML format, visit [http://html-ipsum.com/](http://html-ipsum.com/)
    .
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在寻找一种快速获取 HTML 格式填充文本的方法，请访问 [http://html-ipsum.com/](http://html-ipsum.com/)
    。
- en: 'Next, go to the sidebar column `<div>` and add the same paragraph of text,
    like so:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，转到侧边栏列 `<div>` 并添加相同的段落文本，如下所示：
- en: '[PRE17]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Finally, drop down to the mailing list `<div>` and add the same paragraph of
    content again. It should look like this:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，下拉到邮件列表 `<div>` 并再次添加相同的段落内容。它应该看起来像这样：
- en: '[PRE18]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now that we''ve added some actual content to our page body, let''s recompile
    the project and launch the web server again:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经向页面主体添加了一些实际内容，让我们重新编译项目并再次启动网络服务器：
- en: Note
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: With Harp, you don't actually have to recompile after every little change you
    make. You can also make changes to your files while the server is running and
    they will be picked up by the browser. It's a good habit to compile regularly
    in case you run into an error on compile. This will make it easier to troubleshoot
    potential problems.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Harp，你实际上不必在每次进行的小改动后都重新编译。你还可以在服务器运行时更改你的文件，并且它们将被浏览器拾取。定期编译是个好习惯，以防你在编译时遇到错误。这将使解决潜在问题更容易。
- en: 'Once the server is up and running, return to your browser and refresh the page.
    Now your layout should look like this:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦服务器启动并运行，返回你的浏览器并刷新页面。现在你的布局应该看起来像这样：
- en: '![Adding some content](img/00029.jpeg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![添加一些内容](img/00029.jpeg)'
- en: Yay! We can now see our columns and the dummy text that we just added. The page
    may not be much to look at right now, but what's important is to verify that your
    columns are laid out correctly.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 哈哈！我们现在可以看到我们添加的列和占位文本。目前页面可能看起来不太吸引人，但重要的是要验证你的列布局是否正确。
- en: What about mobile devices?
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于移动设备呢？
- en: 'We need to consider what will happen to our layout on mobile devices and smaller
    screen resolutions. I used the medium grid layout class, so any device that is
    smaller than 720 pixels will have an adjusted layout. Resize your browser window,
    making it smaller to trigger the media query, and you''ll see that all of the
    columns will be resized to 100% width of the container. Here''s what it looks
    like:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要考虑我们的布局在移动设备和较小屏幕分辨率下的表现。我使用了中等网格布局类，所以任何小于720像素的设备都将有一个调整后的布局。调整浏览器窗口的大小，使其更小以触发媒体查询，你会看到所有的列都将调整到容器宽度的100%。看起来是这样的：
- en: '![What about mobile devices?](img/00030.jpeg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![关于移动设备呢？](img/00030.jpeg)'
- en: I'm going to keep our blog layout pretty minimal so I'm okay with this layout.
    In this format, the sidebar will slide in under the main blog feed of posts. I'm
    actually not that crazy about this design, so I'm just going to hide the sidebar
    altogether when you view the blog on a smaller device.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我打算保持我们的博客布局相当简约，所以我对此布局没有问题。在这个格式中，侧边栏将滑入主要博客帖子流下方。实际上，我对这个设计并不那么热衷，所以我将完全隐藏侧边栏，当你在较小设备上查看博客时。
- en: Using responsive utility classes
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用响应式实用类
- en: 'Responsive utility classes will allow you to selectively hide `<div>`s or components
    based on the screen resolution size. This is great for creating a mobile-first
    web application, because in many cases you''ll want to hide some components that
    don''t work well on a phone or tablet. Mobile application design generally means
    a simpler, more minimal experience some using responsive utility classes will
    allow you to achieve this. Open up `index.ejs` in a text editor and go down to
    the sidebar `<div>`, then add the `.hidden-md-down` class to your code:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式实用类允许你根据屏幕分辨率大小有选择地隐藏`<div>`或组件。这对于创建以移动端优先的Web应用来说很棒，因为在很多情况下，你可能想要隐藏一些在手机或平板上表现不佳的组件。移动应用设计通常意味着更简单、更简约的体验，使用响应式实用类将允许你实现这一点。在文本编辑器中打开`index.ejs`，然后向下到侧边栏`<div>`，然后在你的代码中添加`.hidden-md-down`类：
- en: '[PRE19]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Adding this class will hide the `<div>` from the browser when your screen resolution
    is smaller than 720 pixels. Make sure your column class, in this case `-md`, matches
    the hidden class. Now, if you shrink your web browser down again, you'll notice
    that the sidebar `<div>` will disappear.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 添加这个类将在屏幕分辨率小于720像素时从浏览器中隐藏`<div>`。确保你的列类，在这种情况下是`-md`，与隐藏类匹配。现在，如果你再次缩小浏览器窗口，你会注意到侧边栏`<div>`将消失。
- en: There are a number of responsive utility classes you can use in your projects.
    There is a `-down` version for each of the column class names. You can also use
    a `-up` version if you wish to hide something when viewing at a larger resolution.
    Some examples of that class are `.hidden-lg-up` or `.hidden-xl-up`. To learn more
    about responsive utility classes, check out the page in the Bootstrap docs at
    [http://v4-alpha.getbootstrap.com/layout/responsive-utilities/](http://v4-alpha.getbootstrap.com/layout/responsive-utilities/)
    .
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在项目中使用许多响应式实用类。对于每个列类名都有一个`-down`版本。如果你希望在大分辨率下隐藏某些内容，你也可以使用`-up`版本。该类的示例包括`.hidden-lg-up`或`.hidden-xl-up`。要了解更多关于响应式实用类的信息，请查看Bootstrap文档中的页面[http://v4-alpha.getbootstrap.com/layout/responsive-utilities/](http://v4-alpha.getbootstrap.com/layout/responsive-utilities/)。
- en: That completes the layout of the grid for our blog home page. Before we move
    onto learning about content classes in Bootstrap 4, let's set up the layout grid
    for the other pages we'll be building for the blog.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了我们博客主页的网格布局。在我们学习Bootstrap 4中的内容类之前，让我们设置其他我们将为博客构建的页面的布局网格。
- en: Coding the additional blog project page grids
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码额外的博客项目页面网格
- en: Before we create new templates for our contact and single blog post pages, we
    need to update some of the Harp project files. Let's update those files, then
    we'll move onto the page templates.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们为联系和单篇博客页面创建新模板之前，我们需要更新一些Harp项目文件。让我们更新这些文件，然后我们将转向页面模板。
- en: Updating _data.json for our new pages
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新新页面用的_data.json
- en: 'Remember a couple chapters back we learned how to code the `_data.json` file
    and we created a variable for the page title of each of our templates? We need
    to update this file for our two new pages by providing the `pageTitle` variable
    value for each of them. Open up `_data.json` in a text editor; you can find the
    file in the root of your blog project directory. Once you have the file open,
    insert the following code. The entire file should read as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Originally, we only included the `index` file. I've added two more entries,
    one for the contact page and one for the blog-post page. I've entered a value
    for each page's `pageTitle` variable. It's as simple as that. Save the JSON file
    and then you can close it.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Creating the new page templates
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that `_data.json` has been updated, we need to create the actual page template
    EJS files like we did with index. In your text editor, create two new files and
    save them as `contact.ejs` and `blog-post.ejs`. For now, just leave them blank
    and we'll start to fill them in the next steps. The templates are now set up and
    ready to be coded. For now, both of our new pages will use the same `_layout.ejs`
    file as the index file, so there is no need to create any more layouts. Let's
    start by coding the contact page template.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Coding the contact page template
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open up the `contact.ejs` file you just created in your text editor. Let''s
    start the template by setting up our page title. Enter the following code into
    the file:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Let''s breakdown what''s happening here in the code:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: I've opened up the file with a `<div>` with a `.container` class on it.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next I added `.row <div>` and I've added the same `m-t-3` spacing classes so
    it matches the blog home page.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I've added a column `<div>` with a class of `.col-md-12`. Since this is our
    page title, we want it to stretch to the width of our layout.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, I've added an `<h1>` tag with our contact page title.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the contact page body
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next let''s insert our grid layout for the body of the contact page. Following
    the page title code, insert the following grid code:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Let''s review the code for the page body:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: I've opened up another row `<div>` for the page body. It also has the same `m-t-3`
    spacing class on it for consistent vertical spacing.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I've used the `col-md-12` column class again because the contact page layout
    will fill the whole width of our container.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I've added some filler text for now so that we can verify that the page is laid
    out properly.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Before we finish, let''s add one more row for our mailing list section. I''d
    like this to be available on every page of our blog. The grid code for this section
    will be identical to the markup we did for the page body. Here''s what it looks
    like, for reference:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Since this code is identical to the page body, I won't bother breaking it down
    again. Our layout for the contact page is now complete. Make sure you save the
    file and let's test it before we move onto the blog post page.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal back up and navigate to the root directory of the blog project.
    Once there, run the `harp compile` command and then the Harp server command to
    launch the local web server. Open your web browser and enter the following URL
    to preview your page: `http://localhost:9000/contact.html`.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: 'Your contact page should load up and you should see a page title and two rows
    of filler text. Here''s what it should look like:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the contact page body](img/00031.jpeg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
- en: 'Our contact page grid is now complete. Before we move onto creating the blog
    post template, let''s take a look at all the code for the contact template:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Coding the blog post template
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Head back to your text editor and open the file `blog-post.ejs` that you previously
    created. Like our contact page template, let''s start by first setting up the
    page title section of code. Enter the following code into the blog post template
    file:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'As you can see, this code is almost identical to the contact page. There are
    two small differences that I will point out for you:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: I've changed up the spacing classes on the row `<div>`. In a future chapter,
    we are going to add some different components around the page title, so I've altered
    the vertical spacing to allow for them. I'm using the same margin top spacer but
    I've only set it to a value of 2\. I've added a second margin bottom spacer with
    a value of 2 with the `.m-b-2` class. Switching the `-t` to a `-b` will apply
    a bottom margin instead a of top margin.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I've changed the page title to `Post Title` in the `<h1>` tag.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the blog post feature
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The body of our blog post will have some different elements compared to the
    blog home template. After the page title, I''m going to insert a feature section
    that will be used for an image or carousel in a future chapter. For now, let''s
    just lay in the grid column and some filler text for testing purposes. Enter the
    following code after the page title section:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This is a very simple section. Notice the `row <div>` doesn't have a spacer
    class on it, since we added the bottom margin to the page title section. I've
    inserted a full-width `col-md-12` column class so the feature can stretch to the
    width of the layout.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: Adding the blog post body
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we''ve added the blog post feature section, let''s add the actual
    body part of the template. This section will use the same layout as our blog home
    page. It will be a two-column layout, the first being 2/3 wide, and the sidebar
    being 1/3 of the layout. Insert the following code after the feature section:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Let''s break down what''s happening here in the code:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: The row `<div>` has a `m-t-2` spacer class added on to provide some vertical
    spacing
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I'm using the same `col-md-8` and `col-md-4` column classes to set up the layout
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I've also used the `hidden-md-4` class on the sidebar `<div>` so that this section
    will not be visible on smaller resolution devices
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, I added some temporary filler text for testing purposes
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting the mailing list section to a partial
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now go back to the blog post template file and insert the following line of
    code where the mailing list section should appear:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在回到博客帖子模板文件，在邮件列表部分应该出现的地方插入以下代码行：
- en: '[PRE30]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Remember to do the same thing for the index and contact template. Delete the
    hardcoded mailing list and replace it with the preceding partial line.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 记得对索引和联系模板做同样的事情。删除硬编码的邮件列表，并用前面的部分行替换它。
- en: 'That concludes the setup of the blog post template. Let''s test it out before
    we move onto the next chapter, to make sure the new mailing list partial is working
    properly. Return to the Terminal and compile your project from the root directory.
    Run the Harp server command, then visit the following URL: `http://localhost:9000/blog-post.html`.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这标志着博客帖子模板设置的完成。在我们进入下一章之前，让我们先测试一下，以确保新的邮件列表部分正常工作。返回终端，从根目录编译您的项目。运行 Harp
    服务器命令，然后访问以下 URL：`http://localhost:9000/blog-post.html`。
- en: 'If all went as planned, your blog post page should look like this:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切按计划进行，您的博客帖子页面应该看起来像这样：
- en: '![Converting the mailing list section to a partial](img/00032.jpeg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![将邮件列表部分转换为部分视图](img/00032.jpeg)'
- en: Make sure you don't forget to test the index and contact page templates in your
    browser to make sure the mailing list partial is working properly. That concludes
    the design layout for the blog post template. All of our templates are now ready
    to go, but before we move onto the next chapter on content components, let's review
    what we've learned.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您不要忘记在浏览器中测试索引和联系页面模板，以确保邮件列表部分正常工作。这标志着博客帖子模板的设计布局完成。现在，我们的所有模板都已准备就绪，但在我们进入下一章关于内容组件之前，让我们回顾一下我们已经学到的内容。
- en: Summary
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter has been a detailed explanation of the Bootstrap layout grid, how
    to use it, and how to build a sample project. We started out by learning the basics
    of the Bootstrap container, container-fluid, and row classes. Next, we moved onto
    learning the differences between all the Bootstrap column classes. Following the
    columns, we covered some more advanced topics, like offsetting columns, spacing,
    and responsive utilities. Once you had a solid understanding of the grid, we coded
    up the remaining page layouts that we'll need for the rest of the book. Now that
    we have everything set up, we'll start to drop some real content into the blog
    using Bootstrap content classes.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 本章详细解释了 Bootstrap 布局网格，如何使用它，以及如何构建一个示例项目。我们首先学习了 Bootstrap 容器、container-fluid
    和行类的基础知识。接下来，我们学习了所有 Bootstrap 列类的区别。在列之后，我们涵盖了更多高级主题，如列偏移、间距和响应式实用工具。一旦你对网格有了坚实的理解，我们就编写了剩余的页面布局，这些布局我们将用于本书的其余部分。现在，我们已经一切就绪，我们将开始使用
    Bootstrap 内容类将实际内容添加到博客中。
- en: Assessments
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估
- en: What are the two types of containers you can use for a Bootstrap layout?
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用哪两种容器类型为 Bootstrap 布局？
- en: '`.container-fluid`'
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.container-fluid`'
- en: '`.container`'
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.container`'
- en: Both i & ii
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: i 和 ii 都有
- en: None of the above
  id: totrans-210
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以上都不是
- en: It is perfectly fine to use multiple containers on a single page template.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单个页面模板上使用多个容器是完全可行的。
- en: 'True'
  id: totrans-212
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确
- en: 'False'
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 错误
- en: '`.col-xl-1` or `.col-xl-10`: this column class option is for all resolutions
    greater than or equal to ___________ pixels.'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.col-xl-1` 或 `.col-xl-10`：这个列类选项适用于所有大于或等于 ___________ 像素的分辨率。'
- en: '940'
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '940'
- en: '1140'
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '1140'
- en: '720'
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '720'
- en: '544'
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '544'
- en: What is the advantage of `spacing` classes in Bootstrap 4?
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Bootstrap 4 中 `spacing` 类的优势是什么？
- en: Adds spaces to rows and columns
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为行和列添加空格
- en: They add an easy, modular way to add extra vertical spacing to your layouts
    without having to write custom CSS classes for each region
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们提供了一个简单、模块化的方式来为布局添加额外的垂直间距，而无需为每个区域编写自定义 CSS 类
- en: Can be applied to both the CSS `margin` and `padding` properties
  id: totrans-222
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以应用于 CSS 的 `margin` 和 `padding` 属性
- en: Both ii & iii
  id: totrans-223
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: ii 和 iii 都有
- en: Which of the following is the use of utility classes?
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪项是实用类的作用？
- en: Uses the medium grid layout class, so any device that is smaller than *720 pixels*
    will have an adjusted layout
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用中等网格布局类，因此小于 *720 像素* 的任何设备都将有调整后的布局
- en: Multiple containers to make your designs more modular and easier to manage by
    multiple users
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 多个容器使您的设计更模块化，更容易由多个用户管理
- en: order the boxes vertically so they were stacked on top of each other in ascending
    order
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将盒子垂直排列，以便它们按升序堆叠在一起
- en: Utility classes will allow you to selectively hide `<div>` tags or components
    based on the screen resolution size
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实用类将允许您根据屏幕分辨率大小有选择地隐藏 `<div>` 标签或组件
