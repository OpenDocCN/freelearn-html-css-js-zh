- en: Chapter 12. Creating Maps with GeoJSON and TopoJSON
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 12 章. 使用 GeoJSON 和 TopoJSON 创建地图
- en: D3.js provides extensive capabilities for creating maps and to facilitate you
    in presenting data as part of the map or as an overlay. The functions for mapping
    within D3.js leverage a data format known as GeoJSON, a form of JSON that encodes
    geographic information.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js 提供了广泛的创建地图的能力，并帮助您将数据作为地图的一部分或作为叠加层来展示。D3.js 中的映射函数利用一种称为 GeoJSON 的数据格式，这是一种编码地理信息的
    JSON 格式。
- en: Another common type of data for maps in D3.js is TopoJSON. TopoJSON is a more
    compressed form of GeoJSON. Both these formats are used to represent the cartographic
    information required to create a map, and D3.js processes this data and performs
    its usual magic of converting this information into SVG paths that visualize the
    map.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js 中地图的另一种常见数据类型是 TopoJSON。TopoJSON 是 GeoJSON 的更压缩形式。这两种格式都用于表示创建地图所需的制图信息，D3.js
    处理这些数据并执行其将信息转换为可视化地图的 SVG 路径的常规魔法。
- en: This chapter wills start with a brief overview of GeoJSON and TopoJSON. This
    will give you the foundation to understand how maps are represented and rendered
    with D3.js. We will then jump into many examples using both data formats for rendering
    maps of various types, coloring the geometries within the map based upon data,
    and for overlaying information at specific locations on those maps.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将从 GeoJSON 和 TopoJSON 的简要概述开始。这将为您理解如何使用 D3.js 表示和渲染地图奠定基础。然后，我们将通过使用这两种数据格式渲染各种类型的地图、根据数据对地图内的几何形状进行着色以及在这些地图的特定位置叠加信息，进入许多示例。
- en: 'The specific topics that we will cover in this chapter include:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖的具体主题包括：
- en: A brief overview of TopoJSON and GeoJSON
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TopoJSON 和 GeoJSON 的简要概述
- en: Drawing a map of the United States with GeoJSON
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GeoJSON 绘制美国地图
- en: Using TopoJSON to draw the countries of the world
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 TopoJSON 绘制世界各国的地图
- en: Styling the geometries that comprise a map
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为构成地图的几何形状设置样式
- en: Panning and zooming of a map
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地图的平移和缩放
- en: Interaction with a globe
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与地球仪的交互
- en: Highlighting the boundaries of geometries on `mouseover` events
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `mouseover` 事件中突出显示几何形状的边界
- en: Adding symbols to a map at specific locations
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在地图的特定位置添加符号
- en: Rendering maps of regions based upon data (using a choropleth)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据数据（使用渐变）渲染区域地图
- en: Introducing TopoJSON and GeoJSON
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 TopoJSON 和 GeoJSON
- en: Almost every map example in D3.js will use either **GeoJSON** or **TopoJSON**.
    GeoJSON is an open, standard, JSON-based format for representing basic geographical
    features as well as the non-spatial properties for those features (such as the
    name of a city or a landmark).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有的 D3.js 地图示例都将使用 **GeoJSON** 或 **TopoJSON**。GeoJSON 是一种开放、标准的基于 JSON 的格式，用于表示基本地理特征以及这些特征的非空间属性（如城市或地标的名字）。
- en: 'The core geometries in GeoJSON are points, line strings, and polygons. The
    basic description of a GeoJSON entity uses the following syntax:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: GeoJSON 的核心几何形状是点、线字符串和多边形。GeoJSON 实体的基本描述使用以下语法：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s take a look at the four basic types of geometry types available in GeoJSON.
    A **point** represents a position in two-dimensional space, and consists of a
    pair of one latitude and longitude. A point is normally used to specify the location
    of a feature on a map (such as a building):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 GeoJSON 中可用的四种基本几何类型。一个 **点** 表示二维空间中的一个位置，由一对纬度和经度组成。点通常用于指定地图上某个要素的位置（例如建筑物）：
- en: '| Example | Representative GeoJSON |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 代表性 GeoJSON |'
- en: '| --- | --- |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| ![Introducing TopoJSON and GeoJSON](img/B04230_12_01.jpg) |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| ![介绍 TopoJSON 和 GeoJSON](img/B04230_12_01.jpg) |'
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '|'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '`LineString` describes a sequence of points which have a line drawn between
    them, starting at the first, through all intermediate points, and ending at the
    last coordinate. The name conjures up visions of stretching a string caught between
    all the points. These shapes are normally used to represent items such as, roads
    or rivers:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`LineString` 描述了一系列点，这些点之间用线连接，从第一个点开始，经过所有中间点，最后到达最后一个坐标。这个名字让人联想到在所有点之间拉紧一根线的景象。这些形状通常用于表示诸如道路或河流等物品：'
- en: '| Example | Representative GeoJSON |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 代表性 GeoJSON |'
- en: '| --- | --- |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| ![Introducing TopoJSON and GeoJSON](img/B04230_12_02.jpg) |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| ![介绍 TopoJSON 和 GeoJSON](img/B04230_12_02.jpg) |'
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '|'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'A **polygon** is a closed shape normally consisting of three or more points,
    where the last point is the same as the first and forms a closed shape. The JSON
    representation is shown as follows; note that the coordinates are an array of
    arrays of tuples:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**多边形** 是一个闭合形状，通常由三个或更多点组成，其中最后一个点与第一个点相同，形成一个闭合形状。其 JSON 表示如下；请注意，坐标是一个元组的数组数组：'
- en: '| Example | Representative GeoJSON |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 代表性 GeoJSON |'
- en: '| --- | --- |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| ![Introducing TopoJSON and GeoJSON](img/B04230_12_03.jpg) |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| ![介绍 TopoJSON 和 GeoJSON](img/B04230_12_03.jpg) |'
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '|'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'The purpose of an array of arrays of tuples is to allow multiple polygons to
    be defined, which exclude each other, thereby allowing the exclusions of one or
    more polygonal regions within one another:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 数组数组的目的是允许定义多个多边形，这些多边形相互排斥，从而允许在多边形区域内排除一个或多个多边形区域：
- en: '| Example | Representative GeoJSON |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 示例 | 代表性 GeoJSON |'
- en: '| --- | --- |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| ![Introducing TopoJSON and GeoJSON](img/B04230_12_04.jpg) |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| ![介绍 TopoJSON 和 GeoJSON](img/B04230_12_04.jpg) |'
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '|'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'It is possible to define multi-part geometries where a particular geometry
    type is reused, and where the coordinates describe multiple instances of the type
    of geometry. These types are the previous types prefaced with *Multi*—`MultiPoint`,
    `MultiLineString`, and `MultiPolygon`. Each is demonstrated as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 可以定义多部分几何形状，其中特定的几何类型被重用，并且坐标描述了该几何类型的多个实例。这些类型是前面带有 *Multi* 的类型——`MultiPoint`、`MultiLineString`
    和 `MultiPolygon`。每个类型如下所示：
- en: '| Type | Example | Representative GeoJSON |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 示例 | 代表性 GeoJSON |'
- en: '| --- | --- | --- |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| MultiPoint | ![Introducing TopoJSON and GeoJSON](img/B04230_12_05.jpg) |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 多点 | ![介绍 TopoJSON 和 GeoJSON](img/B04230_12_05.jpg) |'
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '|'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| MultiLineString | ![Introducing TopoJSON and GeoJSON](img/B04230_12_06.jpg)
    |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 多线字符串 | ![介绍 TopoJSON 和 GeoJSON](img/B04230_12_06.jpg) |'
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '|'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| MultiPolygon | ![Introducing TopoJSON and GeoJSON](img/B04230_12_08.jpg)
    |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 多边形 | ![介绍 TopoJSON 和 GeoJSON](img/B04230_12_08.jpg) |'
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '|'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'These basic geometries can be wrapped within a **feature**. A feature contains
    a geometry and also a set of properties. As an example, the following defines
    a feature which consists of a point geometry, and which has a single property,
    `name`, which can be used to describe a name for that feature:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这些基本几何形状可以封装在一个 **特性** 中。特性包含一个几何形状和一组属性。例如，以下定义了一个包含点几何形状的特性，并且具有单个属性 `name`，可以用来描述该特性的名称：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can go up one more level in the hierarchy, and define what is known as a
    **feature** **collection**:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在层次结构中再上升一级，并定义称为 **特性集合** 的概念：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: By combining geometries, features, and feature collections, it is possible to
    describe very complex shapes such as maps.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 通过组合几何形状、特性和特性集合，可以描述非常复杂的形状，如地图。
- en: But one of the problems with GeoJSON is that it is very verbose, and particular
    geometries and features cannot be reused. If the same geometry is required in
    multiple locations, it must be completely specified a second time.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 但 GeoJSON 的问题之一是它非常冗长，并且特定的几何形状和特性不能被重用。如果需要在多个位置使用相同的几何形状，则必须完全重新指定第二次。
- en: To help fix this situation, TopoJSON was created. TopoJSON provides additional
    constructs for the encoding of topology and reuse. Instead of discretely describing
    each geometry, TopoJSON allows you to define geometries, and then stitch them
    together using concepts known as **arcs**.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助解决这个问题，TopoJSON 被创建出来。TopoJSON 为拓扑编码和重用提供了额外的结构。而不是离散地描述每个几何形状，TopoJSON
    允许你定义几何形状，然后使用称为 **弧** 的概念将它们拼接在一起。
- en: Arcs allows TopoJSON to eliminate redundancy, and to provide a much more compact
    representation as compared to GeoJSON. It is stated that TopoJSON can commonly
    provide 80 percent compression over GeoJSON. With every millisecond of the download
    time of a web page being important, this can be significant for user experience
    when using large sets of geometry.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Arcs 允许 TopoJSON 消除冗余，并提供比 GeoJSON 更紧凑的表示形式。据称，TopoJSON 通常可以提供比 GeoJSON 高达 80%
    的压缩率。考虑到网页下载的每一毫秒都很重要，这对于使用大量几何数据集的用户体验来说可能非常关键。
- en: 'A full explanation of TopoJSON is a bit beyond the scope of this book, but
    to briefly demonstrate it, we can look at the following and briefly examine its
    content:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: TopoJSON 的完整解释超出了本书的范围，但为了简要展示它，我们可以查看以下内容并简要检查其内容：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This TopoJSON object has three properties: `type`, `objects`, and `arcs`. The
    value of `type` is always `"topology"`. The `objects` property consists of a geometry
    collection similar to those in GeoJSON, with the difference that instead of specifying
    coordinates, the object can, instead, specify one or more arcs.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 此 TopoJSON 对象有三个属性：`type`、`objects` 和 `arcs`。`type` 的值始终为 `"topology"`。`objects`
    属性由一个类似于 GeoJSON 中的几何形状集合组成，不同之处在于，对象可以指定一个或多个弧，而不是坐标。
- en: Arcs are the big difference in TopoJSON versus GeoJSON, and represent the means
    of reuse. The arcs property provides an array of arrays of positions, where a
    position is essentially a coordinate.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 弧是 TopoJSON 与 GeoJSON 之间的主要区别，代表了重用的手段。弧属性提供了一个位置数组的数组，其中位置本质上是一个坐标。
- en: These arcs are referenced by geometries of 0-based array semantics. Hence, the
    `LineString` geometry in the preceding code is referencing the first arc in the
    topology object by specifying `arcs[0]`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这些弧是通过基于 0 的数组语义的几何形状引用的。因此，前述代码中的 `LineString` 几何形状通过指定 `arcs[0]` 来引用拓扑对象中的第一个弧。
- en: The polygon object is referencing an arc with value `-2`. A negative arc value
    specifies that the one's complement of the arc that should be utilized. This essentially
    infers that the positions in the arc should be reversed. Therefore, `-2` instructs
    to get the reversed position of the second arc. This is one of the strategies
    that TopoJSON uses to reuse and compress data.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 多边形对象引用了一个值为 `-2` 的弧。负弧值指定了应该利用的弧的补码。这本质上意味着弧中的位置应该被反转。因此，`-2` 指示获取第二个弧的反转位置。这是
    TopoJSON 用来重用和压缩数据的一种策略。
- en: There are other options, such as transforms and bounding boxes, and other rules.
    For a more detailed specification, please see [https://github.com/mbostock/topojson-specification](https://github.com/mbostock/topojson-specification).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他选项，例如变换和边界框，以及其他规则。对于更详细的规范，请参阅[https://github.com/mbostock/topojson-specification](https://github.com/mbostock/topojson-specification)。
- en: Note
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: An important thing to note about TopoJSON is that D3.js itself only uses GeoJSON
    data. To use data in the TopoJSON format, you will need to use the TopoJSON plugin
    available at [https://github.com/mbostock/topojson](https://github.com/mbostock/topojson).
    This plugin will convert TopoJSON into GeoJSON that can be used by D3.js functions,
    thereby affording the capabilities of TopoJSON to your D3.js application.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 TopoJSON 的重要事项是，D3.js 本身仅使用 GeoJSON 数据。要使用 TopoJSON 格式的数据，您需要使用可在[https://github.com/mbostock/topojson](https://github.com/mbostock/topojson)找到的
    TopoJSON 插件。此插件将 TopoJSON 转换为 D3.js 函数可以使用的 GeoJSON，从而为您的 D3.js 应用程序提供 TopoJSON
    的功能。
- en: Creating a map of the United States
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建美国地图
- en: Our first examples will examine creating a map of the United States. We will
    start with an example that loads the data and gets the map rendered, and then
    we will examine styling the map to make it more visible, followed by examples
    of modifying the projection used to render the content more effectively.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一批示例将探讨创建美国地图的过程。我们将从一个加载数据并渲染地图的示例开始，然后我们将检查如何对地图进行样式化以使其更易于观察，接着将展示如何修改投影以更有效地渲染内容。
- en: Creating our first map of the United States with GeoJSON
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 GeoJSON 创建我们第一张美国地图
- en: 'Our first map will render the United States. We will use a GeoJSON data file,
    `us-states.json`, available at [https://gist.githubusercontent.com/d3byex/65a128a9a499f7f0b37d/raw/176771c2f08dbd3431009ae27bef9b2f2fb56e36/us-states.json](https://gist.githubusercontent.com/d3byex/65a128a9a499f7f0b37d/raw/176771c2f08dbd3431009ae27bef9b2f2fb56e36/us-states.json).
    The following are the first few lines of this file, and demonstrate how the shapes
    of the states are organized within the file:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一张地图将渲染美国地图。我们将使用一个 GeoJSON 数据文件，`us-states.json`，该文件可在[https://gist.githubusercontent.com/d3byex/65a128a9a499f7f0b37d/raw/176771c2f08dbd3431009ae27bef9b2f2fb56e36/us-states.json](https://gist.githubusercontent.com/d3byex/65a128a9a499f7f0b37d/raw/176771c2f08dbd3431009ae27bef9b2f2fb56e36/us-states.json)找到。以下是该文件的几行内容，展示了州形状在文件中的组织方式：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`FeatureCollection` at the top level consists of an array of features, each
    element of which is a state (or territory) as well as Washington D.C. Each state
    is a feature, has a single property `Name`, and a polygon geometry representing
    the outline of the state expressed in latitude and longitude tuples.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 顶级 `FeatureCollection` 包含一个特征数组，每个元素都是一个州（或地区）以及华盛顿特区。每个州都是一个特征，具有单个属性 `Name`，以及一个表示州轮廓的多边形几何形状，该轮廓以经纬度元组表示。
- en: 'The code for the example is available at the following link:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 示例的代码可在以下链接找到：
- en: Note
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (12.1): [http://goo.gl/dzKsVd](http://goo.gl/dzKsVd)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (12.1): [http://goo.gl/dzKsVd](http://goo.gl/dzKsVd)'
- en: 'On opening the URL, you will see the following map:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 打开URL后，您将看到以下地图：
- en: '![Creating our first map of the United States with GeoJSON](img/B04230_12_09.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![使用GeoJSON创建我们第一个美国地图](img/B04230_12_09.jpg)'
- en: 'The code required to take this data and render a map is sublimely simple (by
    design). It begins by creating the main SVG element:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 生成此地图所需的数据和渲染代码非常简单（按设计）。它首先创建主SVG元素：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'GeoJSON is simply JSON and can be loaded with `d3.json()`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: GeoJSON只是JSON，可以用 `d3.json()` 加载：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Once we have the data, we can then create a `d3.geo.path()`. This object has
    the smarts for taking the features in the GeoJSON and converting them into an
    SVG path. The code then adds a path to the main SVG element, binds the data, and
    sets the `d` property of the path to our `d3.geo.path()` object.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了数据，我们就可以创建一个 `d3.geo.path()`。此对象具有将GeoJSON中的要素转换为SVG路径的智能。然后代码将路径添加到主SVG元素中，绑定数据，并将路径的
    `d` 属性设置为我们的 `d3.geo.path()` 对象。
- en: Wow, with just a few lines of code, we have drawn a map of the United States!
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，仅仅用几行代码，我们就绘制了一张美国地图！
- en: Styling the map of the United States
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 美国地图的样式化
- en: Overall, this image is dark, and the borders between the states are not particularly
    visible. We can change this by providing a style for the fill and stroke values
    used to render the map.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，这张图片比较暗，各州之间的边界并不特别明显。我们可以通过提供用于渲染地图的填充和描边值样式来改变这一点。
- en: 'The code for this example is available at the following link:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的代码位于以下链接：
- en: Note
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (12.2): [https://goo.gl/chhKjz](https://goo.gl/chhKjz)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (12.2): [https://goo.gl/chhKjz](https://goo.gl/chhKjz)'
- en: 'When opening this URL, you will see the following map:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当打开此URL时，您将看到以下地图：
- en: '![Styling the map of the United States](img/B04230_12_10.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![美国地图的样式化](img/B04230_12_10.jpg)'
- en: 'The only change to the previous example is to set the fill to transparent,
    and the borders to black:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 与前一个示例的唯一不同之处在于将填充设置为透明，并将边界设置为黑色：
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Using the albersUsa projection
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用albersUsa投影
- en: You may have a few questions about the map in the previous two examples. First,
    how is the map scaled to the size of the SVG element? Second, can I change this
    scale? And why are Alaska and Hawaii drawn down where Mexico would normally be?
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能对前两个示例中的地图有一些疑问。首先，地图是如何缩放到SVG元素的大小？其次，我能改变这个比例吗？为什么阿拉斯加和夏威夷被画在墨西哥通常所在的位置？
- en: These are related to some underlying assumptions about a **projection**. A projection
    is a way of taking geographic data, which is 2D data (latitude and longitude),
    but which is really on a three dimensional sphere (the earth), and rendering it
    onto a 2D surface with specific dimensions (your computer screen or viewport in
    the browser).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这些与一些关于**投影**的基本假设有关。投影是将地理数据（二维数据，纬度和经度），但实际上是在一个三维球体（地球）上，渲染到具有特定尺寸的二维表面上（您的计算机屏幕或浏览器视口）的一种方式。
- en: 'In this example, D3.js made some implicit assumptions on these factors. To
    help exemplify these assumptions, suppose we change the SVG element to be of size
    500 x 250\. When running this, we get the following output:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，D3.js对这些因素做了一些隐含的假设。为了帮助说明这些假设，假设我们将SVG元素的大小更改为500 x 250。运行此操作时，我们得到以下输出：
- en: '![Using the albersUsa projection](img/B04230_12_11.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![使用albersUsa投影](img/B04230_12_11.jpg)'
- en: 'The code that creates this is available at the following location. The only
    change from the previous example is that the height and width of the SVG element
    have each been halved:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 创建此代码的代码位于以下位置。与前一个示例相比，唯一的区别是SVG元素的宽度和高度都减半了：
- en: Note
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (12.3): [http://goo.gl/41wyCY](http://goo.gl/41wyCY)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (12.3): [http://goo.gl/41wyCY](http://goo.gl/41wyCY)'
- en: The result is that the actual rendering is the same size, and we have clipped
    the lower and rightmost three-quarters of the map due to the smaller container.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是实际渲染的大小相同，但由于容器较小，我们剪掉了地图的下半部和最右边的四分之一。
- en: 'Why is this? It is because, by default, D3.js uses a projection known as an
    **albersUsa** projection, which has a number of assumptions that come with it:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么会这样？这是因为，默认情况下，D3.js使用一个称为**albersUsa**投影的投影，它附带一些假设：
- en: The dimensions of the resulting map are 1024 x 728
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成的地图尺寸为1024 x 728
- en: The map is centered at half of the width and height (512, 364)
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地图位于宽度和高度的一半（512，364）
- en: The projection also places Alaska and Hawaii in the lower-left side of the map
    (aha!)
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 投影还将阿拉斯加和夏威夷放在地图的左下角（啊哈！）
- en: To change these assumptions, we can create our own `albersUsa` projection using
    a `d3.geo.albersUsa()` projection object. This object can be used to specify both
    a translation and scaling of the rendering of the results.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要改变这些假设，我们可以使用`d3.geo.albersUsa()`投影对象创建自己的`albersUsa`投影。此对象可用于指定结果的渲染的平移和缩放。
- en: 'The following example creates an `albersUsa` projection and centers the map:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例创建了一个`albersUsa`投影并定位了地图：
- en: Note
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (12.4): [http://goo.gl/1e4DGp](http://goo.gl/1e4DGp)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (12.4): [http://goo.gl/1e4DGp](http://goo.gl/1e4DGp)'
- en: 'With the following result:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Using the albersUsa projection](img/B04230_12_12.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![使用albersUsa投影](img/B04230_12_12.jpg)'
- en: 'The code creates a `d3.geo.albersUsa` projection, and tells it to center the
    map of the United States at `[width/2, height/2]`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 代码创建了一个`d3.geo.albersUsa`投影，并告诉它将美国地图的中心定位在`[width/2, height/2]`：
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The projection object then needs to be assigned to the `d3.geo.path()` object
    using its `.projection()` function:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将投影对象分配给`d3.geo.path()`对象，使用其`.projection()`函数：
- en: '[PRE16]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We have translated the center of the map, but the scale is still the same size.
    To change the scale, we use the projection''s `.scale()` function. The following
    example sets the scale to the width, telling D3.js that the width of the map should
    not be 1024, but the value of `width` and `height`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经改变了地图的中心，但比例尺仍然是相同的尺寸。要改变比例尺，我们使用投影的`.scale()`函数。以下示例将比例尺设置为宽度，告诉D3.js地图的宽度不应该是1024，而是`width`和`height`的值：
- en: Note
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (12.5): [http://goo.gl/O51jPN](http://goo.gl/O51jPN)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (12.5): [http://goo.gl/O51jPN](http://goo.gl/O51jPN)'
- en: 'The preceding example results in a properly scaled map:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例生成了一个正确缩放的地图：
- en: '![Using the albersUsa projection](img/B04230_12_13.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![使用albersUsa投影](img/B04230_12_13.jpg)'
- en: 'The only difference in the code is the call to `.scale()` on the projection:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中唯一的不同之处在于对投影的`.scale()`的调用：
- en: '[PRE17]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note that we only pass a single value to scale. The projection scales along
    the width, and then automatically and proportionately along the height.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们只传递了一个比例尺值。投影沿着宽度缩放，然后自动按比例沿高度缩放。
- en: Creating a flat map of the world
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建世界的一个平坦地图
- en: The **albersUsa** projection is one of many D3.js supplied projection objects.
    You can see the full list of these projections at [https://github.com/mbostock/d3/wiki/Geo-Projections](https://github.com/mbostock/d3/wiki/Geo-Projections).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**albersUsa**投影是D3.js提供的许多投影对象之一。您可以在[https://github.com/mbostock/d3/wiki/Geo-Projections](https://github.com/mbostock/d3/wiki/Geo-Projections)中查看这些投影的完整列表。'
- en: We don't have space to demonstrate all of these in this book, but a few are
    worth the effort to demonstrate a couple of TopoJSON concepts. Specifically, we
    will demonstrate the rendering of a map of the countries of the world, sourced
    from TopoJSON, and projected onto both flat and spherical surfaces.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有足够的空间在这个书中展示所有这些，但其中一些值得努力展示几个TopoJSON概念。具体来说，我们将演示从TopoJSON源获取的世界各国地图的渲染，并将其投影到平坦和球面上。
- en: For data in these examples, will use the `world-110m.json` data file provided
    with the TopoJSON data library source code available at [https://gist.githubusercontent.com/d3byex/65a128a9a499f7f0b37d/raw/176771c2f08dbd3431009ae27bef9b2f2fb56e36/world-110m.json](https://gist.githubusercontent.com/d3byex/65a128a9a499f7f0b37d/raw/176771c2f08dbd3431009ae27bef9b2f2fb56e36/world-110m.json).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些示例中，我们将使用TopoJSON数据库源代码提供的`world-110m.json`数据文件，该源代码可在[https://gist.githubusercontent.com/d3byex/65a128a9a499f7f0b37d/raw/176771c2f08dbd3431009ae27bef9b2f2fb56e36/world-110m.json](https://gist.githubusercontent.com/d3byex/65a128a9a499f7f0b37d/raw/176771c2f08dbd3431009ae27bef9b2f2fb56e36/world-110m.json)找到。
- en: This data represents country data with features, specified at a 110-meter resolution.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 此数据表示具有特征的国界数据，以110米分辨率指定。
- en: Loading and rendering with TopoJSON
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用TopoJSON加载和渲染
- en: 'Now let''s examine loading and rendering of TopoJSON. The following example
    demonstrates the process:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来检查加载和渲染TopoJSON。以下示例演示了该过程：
- en: Note
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (12.6): [http://goo.gl/aLhKKe](http://goo.gl/aLhKKe)'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (12.6): [http://goo.gl/aLhKKe](http://goo.gl/aLhKKe)'
- en: 'The code does not vary much from the previous example. The change comes after
    the data is loaded:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 代码与前面的示例变化不大。变化发生在数据加载之后：
- en: '[PRE18]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The example still uses a `d3.geo.path()` object, but this object cannot directly
    be given the TopoJSON. What needs to be done is to first extract the portion of
    this data that represents the countries, which is done by calling the `topojson.feature()`
    function.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 示例仍然使用`d3.geo.path()`对象，但此对象不能直接接受TopoJSON。需要做的第一件事是提取代表国家的数据部分，这是通过调用`topojson.feature()`函数来完成的。
- en: The `topojson` variable is globally declared in the `topojson.js` file. Its
    `.feature()` function, when given a TopoJSON object (in this case, `world`), and
    a `GeometryCollection` (in this case, `world.objects.countries`), returns a GeoJSON
    feature that can be used by a path.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`topojson`变量在`topojson.js`文件中全局声明。它的`.feature()`函数，当给定一个TopoJSON对象（在这种情况下，`world`）和一个`GeometryCollection`（在这种情况下，`world.objects.countries`），返回一个GeoJSON特征，该特征可以被路径使用。'
- en: 'The selection to render the map then binds to this result, giving us the following
    map:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 将地图渲染出来的选择绑定到这个结果上，从而得到以下地图：
- en: '![Loading and rendering with TopoJSON](img/B04230_12_14.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![使用TopoJSON加载和渲染](img/B04230_12_14.jpg)'
- en: Whoops! That's not what we expected (but as we will see, it is exactly what
    we coded). Why is everything globed together? It is because we are still using
    the default projection, a `d3.geo.albersUsa()` projection.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！这并不是我们预期的结果（但正如我们将看到的，这正是我们编码的结果）。为什么所有东西都聚集在一起？这是因为我们仍在使用默认的投影，即`d3.geo.albersUsa()`投影。
- en: Creating a map of the world using a Mercator projection
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用墨卡托投影创建世界地图
- en: To fix this, we simply need to create a Mercator projection object, and apply
    it to the path. This is a well known projection that renders the map of the globe
    in a rectangular area.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们只需要创建一个墨卡托投影对象，并将其应用到路径上。这是一个众所周知的投影，它将地球的地图渲染在一个矩形区域内。
- en: 'The process is demosntrated in the following example:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程在以下示例中得到了演示：
- en: Note
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (12.7): [http://goo.gl/IWQPte](http://goo.gl/IWQPte)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (12.7): [http://goo.gl/IWQPte](http://goo.gl/IWQPte)'
- en: 'The only difference in this code is the setup of the path to use a Mercator
    projection object:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码中唯一的区别是路径设置的配置，使用墨卡托投影对象：
- en: '[PRE19]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We need to give the projection object a little information about the width
    and height of our rendering, and the resulting map is now the following, which
    looks a lot more like the familiar world map:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要给投影对象提供一些关于我们渲染的宽度和高度的信息，现在得到的地图如下，看起来更像我们熟悉的世界地图：
- en: '![Creating a map of the world using a Mercator projection](img/B04230_12_15.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![使用墨卡托投影创建世界地图](img/B04230_12_15.jpg)'
- en: Creating spherical maps with orthographic projection
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用正射投影创建球形地图
- en: 'Now let''s change our projection to an **orthographic** projection. This projection
    maps data on to a simulated sphere. This is demonstrated by the following example:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将我们的投影更改为**正射投影**。这种投影将数据映射到一个模拟的球体上。以下示例展示了这一点：
- en: Note
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (12.8): [http://goo.gl/M464W8](http://goo.gl/M464W8)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (12.8): [http://goo.gl/M464W8](http://goo.gl/M464W8)'
- en: 'This example simply changes the previous one by using a `d3.geo.orthographic()`
    projection object:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例只是通过使用`d3.geo.orthographic()`投影对象来改变之前的示例：
- en: '[PRE20]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The preceding example code gives us this beautiful rendering of the planet:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的示例代码给出了这个美丽的星球渲染：
- en: '![Creating spherical maps with orthographic projection](img/B04230_12_16.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![使用正射投影创建球形地图](img/B04230_12_16.jpg)'
- en: If you examine this closely, you will notice that it is not quite perfect. Notice
    that Australia seems to be colliding with Africa and Madagascar, and New Zealand
    is seen in the South Atlantic ocean.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细观察，你会注意到它并不完全完美。注意，澳大利亚似乎与非洲和马达加斯加相撞，新西兰在南大西洋中可见。
- en: This is because this projection renders through all 360 degrees of the globe,
    and we are essentially seeing through a clear globe to the backside of the land
    masses on the far side.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为这个投影渲染了整个地球的360度，我们实际上是通过一个透明的地球看到了远侧陆地的大后方。
- en: To fix this, we can use the `.clipAngle()` function of the Mercator projection.
    The parameter is the number of degrees around the center point to which the landmasses
    should be rendered.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们可以使用墨卡托投影的`.clipAngle()`函数。参数是围绕中心点渲染陆地的度数。
- en: 'The following example demonstrates this in action:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了这一过程：
- en: Note
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (12.9): [http://goo.gl/G28ir0](http://goo.gl/G28ir0)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (12.9): [http://goo.gl/G28ir0](http://goo.gl/G28ir0)'
- en: 'This changes one line of code:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这改变了代码中的一行：
- en: '[PRE21]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'And gives us the following result:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 并给出了以下结果：
- en: '![Creating spherical maps with orthographic projection](img/B04230_12_17.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![使用正射投影创建球形地图](img/B04230_12_17.jpg)'
- en: It may not be apparent in the image provided in the book, but this image of
    the globe on the web page is fairly small. We can change the scaling of the rendering
    using the `.scale()` function of the projection. The default value for scale is
    150, and the corresponding values will make the rendering larger or smaller.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 书中提供的图像可能不明显，但网页上的地球仪图像相当小。我们可以使用投影的 `.scale()` 函数来改变渲染的缩放比例。默认的缩放值是 150，相应的值会使渲染更大或更小。
- en: 'The following example makes the globe twice as large along with setting the
    center of the globe to not be clipped by the SVG container:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将地球仪放大一倍，同时设置地球仪的中心不被 SVG 容器裁剪：
- en: Note
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (12.10): [http://goo.gl/EVsHgU](http://goo.gl/EVsHgU)'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (12.10): [http://goo.gl/EVsHgU](http://goo.gl/EVsHgU)'
- en: '[PRE22]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This orthographic projection, by default, centers the view on the globe at latitude
    and longitude (**0,0**). If we want to center on another location, we need to
    `.rotate()` the projection by a number of degrees of latitude and longitude.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这种正射投影默认情况下将视图中心定位在地球仪的纬度和经度（**0,0**）。如果我们想定位在另一个位置，我们需要通过纬度和经度度数来 `.rotate()`
    投影。
- en: 'The following example rotates the globe to show the United States prominently:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将地球仪旋转以突出显示美国：
- en: Note
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (12.11): [http://goo.gl/1acSjF](http://goo.gl/1acSjF)'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (12.11): [http://goo.gl/1acSjF](http://goo.gl/1acSjF)'
- en: 'The one change to the projection is the following:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 投影的一个变化如下：
- en: '[PRE23]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This change in the projection gives us the following result:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这种投影方式的变化给我们带来了以下结果：
- en: '![Creating spherical maps with orthographic projection](img/B04230_12_19.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![使用正射投影创建球形地图](img/B04230_12_19.jpg)'
- en: Spicing up a globe
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调味地球仪
- en: Although this globe is quite impressive for the amount of code used to create
    it, it feels a little dull. Let's differentiate the countries a little more, and
    also add the lines of latitude and longitude.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个地球仪使用创建它的代码量相当可观，但它感觉有点单调。让我们稍微区分一下国家，并添加纬线和经线。
- en: Coloring the countries on a globe
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 地球仪上国家上色
- en: We can color the countries on the globe using a `d3.scale.category20()` color
    scale. But we can't simply rotate through the colors, as there will be cases where
    adjacent countries will be filled with the same color.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `d3.scale.category20()` 颜色比例尺来给地球仪上的国家上色。但我们不能简单地旋转颜色，因为相邻的国家可能会被填充成相同的颜色。
- en: To avoid this, we will take advantage of another function of TopoJSON, `topojson.neighbors()`.
    This function will return, given a set of geometries (like the countries), a data
    structure that identifies which geometries are adjacent to each other. We can
    then utilize this data to prevent the potential problem with colors.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这种情况，我们将利用 TopoJSON 的另一个函数 `topojson.neighbors()`。此函数将返回给定一组几何形状（如国家），一个标识相邻几何形状的数据结构。然后我们可以利用这个数据来防止潜在的颜色问题。
- en: 'The process is demonstrated in the following example:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程在以下示例中得到了演示：
- en: Note
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (12.12): [http://goo.gl/9UimER](http://goo.gl/9UimER)'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (12.12): [http://goo.gl/9UimER](http://goo.gl/9UimER)'
- en: The projection in this example remains the same. The remainder of the code is
    changed.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 本例中的投影保持不变。其余的代码已更改。
- en: 'We start by using the same projection as the last example so that code is not
    repeated here. The following creates the data structure of the colors, the countries,
    and the neighbors:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先使用与上一个示例相同的投影，所以这里不重复代码。以下创建颜色、国家和邻居的数据结构：
- en: '[PRE24]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The creation of the globe then uses the following statement:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 地球仪的创建使用以下语句：
- en: '[PRE25]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Our resulting globe is the following:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到的地球仪如下：
- en: '![Coloring the countries on a globe](img/B04230_12_20.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![地球仪上国家上色](img/B04230_12_20.jpg)'
- en: Pretty nice! But it's still lacking in the lines of longitude or latitude, and
    you can't really tell what the extents of the globe are. Let's fix that now by
    adding the lines of latitude and longitude.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来很棒！但仍然缺少纬线和经线，你实际上无法确定地球仪的范围。现在让我们通过添加纬线和经线来解决这个问题。
- en: You'll be really surprised at how easy it is to add the latitudes and longitudes.
    In D3.js, these are referred to as **graticules**. We create them by instantiating
    a `d3.geo.graticules()` object, and then by appending a separate path prior to
    the path for the countries.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 你会惊讶于添加纬线和经线有多容易。在 D3.js 中，这些被称为 **graticules**。我们通过实例化一个 `d3.geo.graticules()`
    对象来创建它们，然后在国家的路径之前添加一个单独的路径。
- en: 'This is demonstrated in the following example:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这在以下示例中得到了演示：
- en: Note
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (12.13): [http://goo.gl/5eJOai](http://goo.gl/5eJOai)'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (12.13): [http://goo.gl/5eJOai](http://goo.gl/5eJOai)'
- en: 'The only code added to the previous example is the following:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 添加到先前示例中的唯一代码如下：
- en: '[PRE26]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The change in code results in the following:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的变化导致以下结果：
- en: '![Coloring the countries on a globe](img/B04230_12_21.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![为地球仪上的国家着色](img/B04230_12_21.jpg)'
- en: Voila! And as they say, easy-peasy!
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！正如他们所说，简单易行！
- en: Adding interactivity to maps
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向地图添加交互性
- en: 'What good is a map if the user is not able to pan and zoom around the map to
    change the focus, and take a closer look at things? Fortunately, because of D3.js,
    this becomes very simple to implement. We will look at three different examples
    of interactivity and maps:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户无法在地图上平移和缩放以改变焦点，并更仔细地查看事物，那么地图有什么用呢？幸运的是，由于D3.js，这使得实现这一点变得非常简单。我们将查看三个不同的交互式地图示例：
- en: Panning and zooming a world map
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平移和缩放世界地图
- en: Highlighting country borders on `mouseover`
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`mouseover`时突出显示国家边界
- en: Rotating a globe with the mouse
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用鼠标旋转地球仪
- en: Panning and zooming a world map
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 平移和缩放世界地图
- en: To demonstrate panning and zooming of a world map, we will make a few modifications
    to our world Mercator projection example. These modifications will be for using
    the mouse wheel to zoom in and out, and to be able to drag the map to move it
    to another center.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示世界地图的平移和缩放，我们将对我们的世界墨卡托投影示例进行一些修改。这些修改将用于使用鼠标滚轮进行缩放，并能够拖动地图将其移动到另一个中心。
- en: 'A possible image with this version of the map code could look like the following,
    which is centered just east of Brazil, and brought up several factors of zoom:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 这种地图代码版本的可能图像可能如下所示，它位于巴西东边，并放大了几个因子：
- en: '![Panning and zooming a world map](img/B04230_12_23.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![平移和缩放世界地图](img/B04230_12_23.jpg)'
- en: 'There are a couple of considerations that we should take into account when
    panning and zooming a map:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在平移和缩放地图时，我们应该考虑以下一些因素：
- en: We can only zoom in and out between two extents so that we do not zoom out too
    far as to lose sight of the map, or too close as to get lost in a single country
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们只能在两个范围之间进行缩放，这样我们不会缩放得太远以至于看不到地图，也不会缩放得太近以至于迷失在单个国家中
- en: We can only drag the map to a certain extent to ensure that it is constrained
    and not dragged off some edge
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们只能将地图拖动到一定范围内，以确保它是约束的，不会从某个边缘拖动出去
- en: 'The example is available at the following location:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 示例可在以下位置找到：
- en: Note
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (12.14): [http://goo.gl/jjouGK](http://goo.gl/jjouGK)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (12.14): [http://goo.gl/jjouGK](http://goo.gl/jjouGK)'
- en: Much of the code is reused from the Mercator projection example, and also adds
    the code to uniquely color the countries.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分代码是从墨卡托投影示例中复用的，并且还添加了代码来为各国着色。
- en: 'The creation of the main SVG element differs to allow for drag and zoom. This
    starts with creating a zoom behavior, and assigning it to the main SVG element.
    Additionally, since we need to zoom the client elements, we add a group to facilitate
    this action:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 创建主要SVG元素的不同之处在于允许拖动和缩放。这始于创建一个缩放行为，并将其分配给主要SVG元素。此外，由于我们需要缩放客户端元素，我们添加一个组来便于这一动作：
- en: '[PRE27]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The rest of the main part of the code loads the data and renders the map, and
    is identical to the previous examples.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的其余部分加载数据并渲染地图，与之前的示例相同。
- en: 'The `moveAndZoom` function, which will be called on any drag and zoom events,
    is given as follows:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`moveAndZoom`函数，它将在任何拖动和缩放事件上被调用，如下所示：'
- en: '[PRE28]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: From these values, we need to adjust the SVG translate on the map based upon
    the current mouse position, while taking into account the scale level. We also
    do not want this to translate the map in any direction such that there is padding
    between the map and the boundaries; this is handled by combined calls to `Math.min`
    and `Math.max`.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 从这些值中，我们需要根据当前鼠标位置调整地图上的SVG平移，同时考虑到缩放级别。我们也不希望地图在任意方向上平移，这样地图和边界之间就有填充；这是通过`Math.min`和`Math.max`的联合调用来处理的。
- en: Congratulations, you now have a fully pan and scan map!
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你，你现在有一个完全平移和扫描的地图！
- en: Note
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that as you zoom in, the boundaries on the countries are fairly ragged.
    This is due to the 110-meter resolution of the data. To have more accurate graphics,
    use the files with the finer details. Even better, dynamically change to higher
    resolution data depending upon the zoom level.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当你放大时，国家的边界相当粗糙。这是由于数据的110米分辨率造成的。为了获得更精确的图形，请使用具有更细细节的文件。更好的是，根据缩放级别动态更改到更高分辨率的数据。
- en: Highlighting country borders on mouse hover
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在鼠标悬停时突出显示国家边界
- en: 'Now let''s add another interactivity effect to our map: highlighting the border
    of a country which has the mouse currently over its geometry. This will help us
    accentuate the country the user is currently examining. A quick demonstration
    of this is the following, where Peru has a thin white border:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们给我们的地图添加另一个交互效果：突出显示鼠标当前悬停在其几何形状上的国家边界。这将帮助我们强调用户当前正在检查的国家。以下是一个快速演示，其中秘鲁有一个细白的边界：
- en: '![Highlighting country borders on mouse hover](img/B04230_12_24.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![鼠标悬停时突出显示国家边界](img/B04230_12_24.jpg)'
- en: 'The example is available at the following location:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 示例可在以下位置找到：
- en: Note
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (12.15): [http://goo.gl/DTtJ2A](http://goo.gl/DTtJ2A)'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (12.15): [http://goo.gl/DTtJ2A](http://goo.gl/DTtJ2A)'
- en: 'This is implemented with a few modifications to the previous example. The modifications
    start with the creation of the top-level group element:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过在先前的示例中做几处修改来实现的。修改从创建顶级组元素开始：
- en: '[PRE29]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This code informs D3.js that all SVG elements contained within the group will
    have a 2-pixel white border, which is initially transparent. When we hover the
    mouse, we will make this visible on the appropriate geometry.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码通知D3.js，该组内包含的所有SVG元素都将有一个2像素的白色边框，最初是透明的。当我们悬停鼠标时，我们将使适当的几何形状可见。
- en: 'Now we need to hook up mouse event handlers on each of the path elements that
    represent countries. On the `mouseover` event, we make the `stroke-opacity` opaque,
    and set it back to transparent when the mouse exits:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要在每个代表国家的路径元素上连接鼠标事件处理器。在`mouseover`事件中，我们将`stroke-opacity`设置为不透明，并在鼠标退出时将其设置回透明：
- en: '[PRE30]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'There is one more small change that we will want to make whenever the zoom
    level changes. As the zoom level goes up, the country borders get disproportionately
    thick. To prevent this, we can add the following statement to the end of the `moveAndZoom`
    function:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 每当缩放级别发生变化时，我们希望进行的一个小改动是。当缩放级别增加时，国家边界会不成比例地变厚。为了防止这种情况，我们可以在`moveAndZoom`函数的末尾添加以下语句：
- en: '[PRE31]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This is stating that the border of a country should always stay at what is visually
    `2px` thick, no matter what the zoom level.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 这表示国家的边界应该始终保持在视觉上`2px`的厚度，无论缩放级别如何。
- en: Rotating a globe using the mouse
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用鼠标旋转地球
- en: 'Interactivity can also be applied to other projections. We will examine rotating
    an orthographic globe using the mouse. The example is available at the following
    location:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 交互性也可以应用于其他投影。我们将检查使用鼠标旋转正交地球。示例可在以下位置找到：
- en: Note
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (12.16): [http://goo.gl/cpH0LN](http://goo.gl/cpH0LN)'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (12.16): [http://goo.gl/cpH0LN](http://goo.gl/cpH0LN)'
- en: To save a little space, we won't show an image here, as it looks the same as
    the earlier example in the chapter, except that it rotates following the mouse.
    That, and the rotation effect is lost in a print medium.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 为了节省一点空间，我们这里不会展示图片，因为它看起来与本章早期示例相同，只是它会跟随鼠标旋转。此外，旋转效果在打印介质中会丢失。
- en: 'But the way this works is very simple. The technique involves creating two
    scales, one for longitude and the other for latitude. Longitude is calculated
    as mapping the mouse position from `0` to the width of the graphic to `-180` and
    `180` degrees of longitude. The latitude is a mapping of the vertical mouse position
    to `90` and `-90` degrees:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 但这个工作方式非常简单。该技术涉及创建两个比例尺，一个用于经度，另一个用于纬度。经度是通过将鼠标位置从`0`映射到图形宽度到`-180`和`180`度的经度。纬度是将垂直鼠标位置映射到`90`和`-90`度：
- en: '[PRE32]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'When the mouse is moved over the SVG element, we capture it and scale the mouse
    position into a corresponding latitude and longitude; we then set the rotation
    of the projection:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标移动到SVG元素上时，我们捕获它并将鼠标位置缩放为相应的纬度和经度；然后我们设置投影的旋转：
- en: '[PRE33]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: It's a pretty cool little trick of mathematics and scales that allows us to
    be able to see every position on the entire globe.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相当酷的数学和比例技巧，它使我们能够看到整个地球上的每一个位置。
- en: Annotating a map
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注释地图
- en: Our final examples of working with maps will demonstrate making annotations
    to a map. The first two will demonstrate placing labels and markers on a map,
    and the third will demonstrate the use of gradient colors to color regions all
    the way down to a state level.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用地图的最终示例将展示如何在地图上添加注释。前两个示例将展示如何在地图上放置标签和标记，第三个示例将展示如何使用渐变色为地区着色，直至州级别。
- en: All of these techniques would normally involve some fairly complex math if we
    had to do it on our own, but thankfully, D3.js again comes to help us solve this
    with just a few statements.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不得不自己完成这些技术，通常需要一些相当复杂的数学，但幸运的是，D3.js再次帮助我们只需几个语句就解决了这个问题。
- en: Labelling states using centroids
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用质心标记状态
- en: 'The maps of the United States we''ve created up to this point feel a little
    lacking in content, as they have not had the names of the states placed over their
    geometries. It would be very helpful to many reading a map to have the names visible.
    The example is available at the following location:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 我们到目前为止创建的美国地图在内容上感觉有点不足，因为它们没有在其几何形状上放置州名。对于许多阅读地图的人来说，使名称可见将非常有帮助。示例可在以下位置找到：
- en: Note
  id: totrans-263
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (12.17): [http://goo.gl/3vChcR](http://goo.gl/3vChcR)'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (12.17): [http://goo.gl/3vChcR](http://goo.gl/3vChcR)'
- en: 'The result of the example is the following:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 示例的结果如下：
- en: '![Labelling states using centroids](img/B04230_12_27.jpg)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![使用质心标记州](img/B04230_12_27.jpg)'
- en: 'This is actually fairly easy to implement, with only the addition of one statement
    to our United States Mercator projection example. The following code is placed
    immediately after the `.selectAll()` statement that creates the boundaries for
    all the states:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上相当容易实现，只需在我们的美国墨卡托投影示例中添加一个语句即可。以下代码放置在创建所有州边界的`.selectAll()`语句之后：
- en: '[PRE34]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This statement creates a text element for each geometric feature in the data
    file, and sets the text to be the value of the `name` property of the geometry
    object.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 该语句为数据文件中的每个几何特征创建一个文本元素，并将文本设置为几何对象的`name`属性的值。
- en: The position of the text uses a function of the path that calculates the **centroid**
    of the geometry. The centroid is the mathematical center of the geometry, and
    can be calculated using the `.centroid()` function of a path.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 文本的位置使用路径的函数来计算几何形状的**质心**。质心是几何形状的数学中心，可以使用路径的`.centroid()`函数来计算。
- en: 'For most states, especially rectangular ones, this works well. For others with
    irregular shapes, take Michigan for example, the placement is perhaps not optimal
    for aesthetics. There are various ways to fix this, but those are beyond the scope
    of this book (a hint: it involves adding additional data to represent location
    offsets for each geometry).'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '对于大多数州，尤其是矩形州，这效果很好。对于其他形状不规则的州，以密歇根州为例，放置可能不是从美学角度来看最理想的。有各种方法可以解决这个问题，但这些超出了本书的范围（提示：这涉及到为每个几何形状添加额外的数据来表示位置偏移）。 '
- en: Placing symbols at specific geographic locations
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在特定地理位置放置符号
- en: The last example with maps that we will look at will be to place SVG elements
    on the map at specific coordinates. Specifically, we will place circles at the
    position of the 50 most populous cities, and size the circle relative to the population.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要查看的最后一个地图示例是将SVG元素放置在地图上的特定坐标处。具体来说，我们将放置圆圈在50个人口最多的城市的位置，并使圆圈的大小与人口成比例。
- en: 'The data we will use is in `us-cities.csv`, which is available at [https://gist.githubusercontent.com/d3byex/65a128a9a499f7f0b37d/raw/176771c2f08dbd3431009ae27bef9b2f2fb56e36/us-cities.csv](https://gist.githubusercontent.com/d3byex/65a128a9a499f7f0b37d/raw/176771c2f08dbd3431009ae27bef9b2f2fb56e36/us-cities.csv).
    The data is straightforward; the following are the first few lines:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的数据在`us-cities.csv`文件中，该文件可在以下位置找到：[https://gist.githubusercontent.com/d3byex/65a128a9a499f7f0b37d/raw/176771c2f08dbd3431009ae27bef9b2f2fb56e36/us-cities.csv](https://gist.githubusercontent.com/d3byex/65a128a9a499f7f0b37d/raw/176771c2f08dbd3431009ae27bef9b2f2fb56e36/us-cities.csv)。数据很简单；以下是一些前几行：
- en: '[PRE35]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The example is available at the following location:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 示例可在以下位置找到：
- en: Note
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (12.18): [http://goo.gl/Y9MN5q](http://goo.gl/Y9MN5q)'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (12.18): [http://goo.gl/Y9MN5q](http://goo.gl/Y9MN5q)'
- en: 'The resulting visualization is the following:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 结果的可视化如下：
- en: '![Placing symbols at specific geographic locations](img/B04230_12_26.jpg)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
  zh: '![在特定地理位置放置符号](img/B04230_12_26.jpg)'
- en: 'The preceding example leverages the United States Mercator examples code. This
    example does, however, need to load two data files. To facilitate this, we will
    use a library called **queue** created by Mike Bostock to load these files asyncronously,
    and when both are complete, execute the `ready()` function. You can get this library
    and documentation at [https://github.com/mbostock/queue](https://github.com/mbostock/queue):'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例利用了美国墨卡托示例代码。然而，此示例需要加载两个数据文件。为了方便起见，我们将使用由Mike Bostock创建的名为**queue**的库来异步加载这些文件，并在两个文件都加载完成后执行`ready()`函数。您可以在[https://github.com/mbostock/queue](https://github.com/mbostock/queue)获取此库和文档：
- en: '[PRE36]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The map is then rendered as in the earlier examples. Then we need to place
    the circles. To do this, we will need to convert the latitude and longitude values
    to *X* and *Y* pixel locations. We can do this in D3.js using the projection object:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 然后地图的渲染方式与前面的示例相同。然后我们需要放置圆圈。为此，我们需要将纬度和经度值转换为*X*和*Y*像素位置。我们可以在D3.js中使用投影对象来完成此操作：
- en: '[PRE37]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: For each circle that is created, this code calls the projection function passing
    it the latitude and longitude for each city. The return value is the `x` and `y`
    location of the pixel representing that location. So we just set the center of
    the circle to this result, and assign the circle a radius that is a scale value
    of the population.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 对于创建的每个圆，此代码会调用投影函数，传递每个城市的纬度和经度。返回值是该位置的像素的`x`和`y`坐标。因此，我们只需将圆的中心设置为这个结果，并给圆分配一个与人口规模成比例的半径。
- en: Creating a choropleth
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建渐变图
- en: Our last map example is for creating a **choropleth**. A choropleth is a map
    with areas filled in with different colors to reflect the underlying data values—not
    just differing colors to represent different geographic boundaries. These are
    quite common types of visuals, and they commonly show a difference in opinion
    amongst the populations in adjacent regions, or how economic factors differ along
    neighbors.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后的地图示例是创建一个**渐变图**。渐变图是一种用不同颜色填充区域以反映基础数据值的地图，而不仅仅是用不同颜色来表示不同的地理边界。这些是相当常见的视觉类型，它们通常显示相邻地区之间的人口意见差异，或者经济因素如何在不同邻国之间有所不同。
- en: 'The example is available at the following location:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 示例可在以下位置找到：
- en: Note
  id: totrans-289
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (12.19): [http://goo.gl/ZeTh4o](http://goo.gl/ZeTh4o)'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (12.19): [http://goo.gl/ZeTh4o](http://goo.gl/ZeTh4o)'
- en: 'The resulting visualization is the following:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的可视化结果如下：
- en: '![Creating a choropleth](img/B04230_12_22.jpg)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![创建渐变图](img/B04230_12_22.jpg)'
- en: This choropleth represents the unemployment rate in the US counties for the
    year 2008\. The shade of blue varies from darker, representing lower unemployment,
    to lighter and higher unemployment.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 此渐变图表示了2008年美国各县失业率。蓝色的阴影从较深（表示失业率较低）到较浅（表示失业率较高）变化。
- en: 'The data for unemployment is available at [https://gist.githubusercontent.com/d3byex/65a128a9a499f7f0b37d/raw/176771c2f08dbd3431009ae27bef9b2f2fb56e36/unemployment.tsv](https://gist.githubusercontent.com/d3byex/65a128a9a499f7f0b37d/raw/176771c2f08dbd3431009ae27bef9b2f2fb56e36/unemployment.tsv).
    The first few lines are the following:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 失业率数据可在[https://gist.githubusercontent.com/d3byex/65a128a9a499f7f0b37d/raw/176771c2f08dbd3431009ae27bef9b2f2fb56e36/unemployment.tsv](https://gist.githubusercontent.com/d3byex/65a128a9a499f7f0b37d/raw/176771c2f08dbd3431009ae27bef9b2f2fb56e36/unemployment.tsv)找到。前几行如下所示：
- en: '[PRE38]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The data consists of a pair of a county identifier and the respective unemployment
    rate. The county ID will be matched to county IDs in the `us.json` file available
    at [https://gist.githubusercontent.com/d3byex/65a128a9a499f7f0b37d/raw/176771c2f08dbd3431009ae27bef9b2f2fb56e36/us.json](https://gist.githubusercontent.com/d3byex/65a128a9a499f7f0b37d/raw/176771c2f08dbd3431009ae27bef9b2f2fb56e36/us.json).
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 数据由一对县标识符和相应的失业率组成。县ID将与在[https://gist.githubusercontent.com/d3byex/65a128a9a499f7f0b37d/raw/176771c2f08dbd3431009ae27bef9b2f2fb56e36/us.json](https://gist.githubusercontent.com/d3byex/65a128a9a499f7f0b37d/raw/176771c2f08dbd3431009ae27bef9b2f2fb56e36/us.json)中可用的`us.json`文件中的县ID相匹配。
- en: 'This file consists of TopoJSON describing the shape of all of the counties
    in the US, each with the same county ID in the unemployment file. A snippet of
    this file is the following, which shows for country `1001` the arcs that should
    be used to render it:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件由描述美国所有县形状的TopoJSON组成，每个县在失业文件中都有相同的县ID。此文件的片段如下，显示了用于渲染国家`1001`的弧线：
- en: '[PRE39]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Our goal is to quantize the unemployment rates, and then fill each geometry
    with a color mapped to that quantile. It's actually easier to do than it may seem.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是将失业率量化，然后为每个几何形状填充一个与该分位数对应的颜色。实际上，这比看起来要容易得多。
- en: 'In this example, we will map our unemployment rates into ten quantiles. The
    color used for each will be specified using a style with a specific name. These
    are declared as follows:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将失业率映射到十个分位数。每个的颜色将使用具有特定名称的样式指定。这些声明如下：
- en: '[PRE40]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The data is loaded using the `queue()` function:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 数据是通过`queue()`函数加载的：
- en: '[PRE41]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: This code uses an alternate form of `.defer()` for the unemployment data, which
    calls a function for each data item that is loaded (another cool thing about queue).
    This builds a `d3.map()` object (like a dictionary object) that maps the county
    ID to its unemployment rate, and we use this map later during rendering.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码使用了一个用于失业数据的`.defer()`的替代形式，它为每个加载的数据项调用一个函数（队列的另一个酷特性）。这构建了一个`d3.map()`对象（类似于字典对象），它将县ID映射到其失业率，我们在渲染过程中使用这个映射。
- en: 'The county data is rendered first. To do this, we need to create a quantile
    scale which maps the domain from `0` to `0.15`. This will be used to map the unemployment
    levels to one of the styles. The range is then configured to generate the names
    of the nine styles:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 县数据首先被渲染。为此，我们需要创建一个分位数刻度，它将域从`0`映射到`0.15`。这将用于将失业水平映射到一种样式。然后配置范围以生成九种样式的名称：
- en: '[PRE42]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Next, the code creates the `albersUsa` projection and an associated path:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，代码创建了一个`albersUsa`投影和一个相关的路径：
- en: '[PRE43]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The next step is to create a group to hold the shaded counties. Then, to this
    group, we will add a path for each county by binding it to the `counties` features:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建一个组来存放阴影县，然后，我们将通过绑定到`counties`特征为这个组添加每个县的路径：
- en: '[PRE44]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Finally, we overlay the outlines of the states using a `white` stroke for the
    borders to help us differentiate the state borders:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用白色描边叠加了州的轮廓，以帮助我们区分州界：
- en: '[PRE45]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Note
  id: totrans-313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This particular piece of code also uses the `topojson.mesh` function to extract
    the **MultiPolygon** (GeoJSON) data for all of the states from the TopoJSON object.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码还使用了`topojson.mesh`函数从TopoJSON对象中提取所有州的**MultiPolygon**（GeoJSON）数据。
- en: And that's all! We've created a choropleth, and used a coding pattern that can
    be reused easily with other types of data.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！我们已经创建了一个渐变图，并使用了一种易于与其他类型的数据重复使用的编码模式。
- en: Summary
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We started this chapter by looking briefly at GeoJSON and TopoJSON. If you do
    anything with maps in D3.js, you will be using one or both of these. We covered
    it just enough to give an understanding of its structure, and how it is used to
    define data that can be rendered as a map.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以简要了解GeoJSON和TopoJSON开始这一章。如果您在D3.js中做任何与地图相关的事情，您将使用其中之一或两个。我们只介绍了足够的内容，以便理解其结构以及如何使用它来定义可以渲染为地图的数据。
- en: From there, we dove into creating several maps and covered many of the concepts
    that you will use in their creation. These included loading the data, creating
    projections, and rendering the geometries within the data.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 从那里，我们深入创建了几张地图，并涵盖了您在创建过程中将使用到的许多概念。这包括加载数据、创建投影以及渲染数据中的几何形状。
- en: We examined two projections, Mercator and orthographic, to give an idea of how
    these present data. Along the way, we also looked at how to style elements on
    the map, filling geometries with color, and highlighting geometries on `mouseover`.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 我们研究了两种投影，墨卡托和正射投影，以了解这些如何呈现数据。在这个过程中，我们还探讨了如何样式化地图上的元素，用颜色填充几何形状，以及在鼠标悬停时突出显示几何形状。
- en: Then we examined how to annotate our maps with labels as well as color elements
    based upon data (choropleths), and to place symbols on the map at specific geographic
    positions, with a size that is based upon the data.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们研究了如何用标签以及基于数据的颜色元素（渐变图）来注释我们的地图，并在特定的地理位置放置符号，其大小基于数据。
- en: At this point in the book, we have been pretty thorough in covering much of
    the core of D3.js, at least enough to make you very dangerous with it. But we
    have also only ever created stand-alone visualizations, ones that do not interact
    with other visualizations.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 到这本书的这一部分，我们已经相当详细地介绍了D3.js的核心内容，至少足够让您能够熟练使用它。但我们也只创建了独立的可视化，这些可视化不与其他可视化交互。
- en: In the next chapter, the final one of this book, we will look at combining multiple
    D3.js visualizations using AngularJS, and where those visuals also react to the
    user manipulating other content on their page.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，这本书的最后一章，我们将探讨如何使用 AngularJS 结合多个 D3.js 可视化，以及这些可视化如何对用户在其页面上操作其他内容做出反应。
