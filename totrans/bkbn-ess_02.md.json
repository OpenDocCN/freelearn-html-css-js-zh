["```js\n// Define Book's Initializer\nvar Book = function() {\n    // define Book's default properties\n    this.currentPage = 1;\n    this.totalPages = 1;\n}\n\n// Define book's parent class\nBook.prototype = new Backbone.Model();\n\n// Define a method of Book\nBook.prototype.turnPage = function() {\n    this.currentPage += 1;\n    return this.currentPage;\n}\n```", "```js\nvar simpleBook = {currentPage: 3, pages: 60};\nsimpleBook.turnPage = function() {\n    this.currentPage += 1;\n    return this.currentPage;\n}\nsimpleBook.turnPage(); // == 4\n```", "```js\nvar testGlobalThis = function() {\n    alert(this);\n}\ntestGlobalThis(); // alerts window\n```", "```js\nbook.turnPage = function() \n    this.currentPage += 1;\n};\n```", "```js\nbook.__proto__.turnPage();\n```", "```js\nbook.__proto__ = {\n    turnPage: function() {\n        this.currentPage += 1;\n    }\n};\n```", "```js\nvar Book = function() {};\nBook.prototype.turnPage = function() {\n    this.currentPage += 1;\n};\nvar book = new Book();\nbook.turnPage();// this works because book.__proto__  == Book.prototype\n```", "```js\nvar Book = Backbone.Model.extend();\n// Book.prototype.__proto__ == Backbone.Model.prototype;\nvar book = new Book();\nbook.destroy();\n```", "```js\nvar Book = Backbone.Model.extend({\n    currentPage: 1,\n    turnPage: function() {\n        this.currentPage += 1;\n    }\n});\nvar book = new Book();\nbook.currentPage; // == 1\nbook.turnPage(); // increments book.currentPage by one\n```", "```js\nvar Book = Backbone.Model.extend({}, {\n    areBooksGreat: function() {\n        alert(\"yes they are!\");\n    }\n});\nBook.areBooksGreat(); // alerts \"yes they are!\"\nvar book = new Book();\nbook.areBooksGreat(); // fails because static methods must be called on a class\n```", "```js\nvar Book = Backbone.Model.extend({\n    destroy: function(optionsOrPagesToDestroy) {\n        if (typeof optionsOrPagesToDestroy === 'number') {\n            // optionsOrPagesToDestroy is pagesToDestroy: call our version\n            this.totalPages -=  optionsOrPagesToDestroy;\n        } else {\n            // optionsOrPagesToDestroy is an options object: call the Backbone version\n            Backbone.Model.prototype.destroy.apply(this, arguments);\n        }\n    }\n});\n```", "```js\nvar Book = Backbone.Model.extend({\n    currentPage: 1,\n    turnPage: function() {\n        this.currentPage += 1;\n    }\n});\nvar simpleBook = {currentPage: 20};\nBook.prototype.turnPage.apply(simpleBook); //  simpleBook.currentPage == 21\n```", "```js\nvar Book = Backbone.Model.extend();\nvar book = new Book();\nbook.alertMessage = function(message, secondMessage) {\n    alert(message + ' ' + secondMessage);\n}\nbook.alertMessage.apply(null, ['hello', 'world']);// alerts \"hello world\"\n```", "```js\nvar book = new Book();\nbook.alertMessage = function(message, secondMessage) {\n    alert(message + ' ' + secondMessage);\n}\nbook.alertMessage.call(null, 'hello', 'world'); // alerts \"hello world\"\n```", "```js\nvar exampleObject = {};\nexampleObject.alertThis = function() {\n     alert(this);\n};\nwindow.setTimeout(exampleObject.alertThis); // alerts window\n```", "```js\n      var exampleObject = {};\nexampleObject.alertThisBuilder = function() {\n    var alertThis = function() {\n        alert(this);\n    }\n    var correctThis = this;\n    return function() {\n        alertThis.apply(correctThis);\n    }\n};\nvar alertThis = exampleObject.alertThisBuilder();\nwindow.setTimeout(alertThis); // alerts exampleObject\n```", "```js\nvar simpleBook = {};\nsimpleBook.alertThis = function() {\n     alert(this);\n};\nsimpleBook.alertThis = _.bind(simpleBook.alertThis, simpleBook);\nwindow.setTimeout(simpleBook.alertThis); // now alerts simpleBook, not window\n```", "```js\nvar Book = Backbone.Model.extend({\n     initialize: function() {\n          _.bindAll(this, 'alertThis');\n     },\n     alertThis: function() {\n          alert(this);\n     }\n});\nvar  book = new Book();\nwindow.setTimeout(book.alertThis); // alerts book, not window\n```", "```js\nvar mythicalAnimals = ['Unicorn', 'Dragon', 'Honest Politician'];\n_.each(mythicalAnimals, function(animalName, index) {\n    alert('Animal #' + index + ' is ' + animalName);\n});\n```", "```js\n      var mythicalAnimals = ['Unicorn', 'Dragon', 'Honest Politician'];\nfor (var index = 0; index < mythicalAnimals.length; index++) {\n    var animalName = mythicAnimals[index];\n    alert('Animal #' + index + ' is ' + animalName);\n}\n```", "```js\nvar mythicalAnimals = ['Unicorn', 'Dragon', 'Honest Politician'];\nfor (var index in mythicalAnimals) {\n    var animalName = mythicalAnimals[index];\n    alert('Animal #' + index + ' is ' + animalName);\n}\n```", "```js\nvar stringNumbers = [\"5\", \"10\", \"15\"];\nvar BASE = 10; // when we parse strings in to numbers in\n               // JavaScript we have to specify which base to use\nvar actualNumbers = _.map(stringNumbers, function(numberString, index) {\n    return parseInt(numberString, BASE);\n}); // actualNumbers == [5, 10, 15]\n```", "```js\nvar total = _.reduce(actualNumbers, function(total, actualNumber) {\n    return total +  actualNumber;\n}, 0); // total == 30\n```", "```js\nvar commonConfiguration = {foo: true, bar: true};\nvar specificConfiguration = {foo: false, baz: 7};\n```", "```js\nvar combined = _.extend({}, commonConfiguration, specificConfiguration);\n// combined == {foo: false, bar: true, baz: 7}\n```", "```js\nvar combined = _.defaults({}, specificConfiguration , commonConfiguration);\n// combined == {foo: false, bar: true, baz: 7}\n```", "```js\nvar fakeBooks = [\n    {title: 'Become English Better At', pages: 50, author: 'Bob'},\n    {title: 'You Is Become Even Better at English', pages: 100, author: 'Bob'},\n    {title: 'Bob is a Terrible Author', pages: 200, author: 'Fred the Critic'}\n];\n```", "```js\nvar fakeTitles = _.pluck(fakeBooks, 'title');// fakeTitles == ['Become English Better At', ...]\n```", "```js\nvar Book = Backbone.Model.extend({\n    getAuthor: function() {\n        // the \"get\" method returns an attribute of a Model;\n        // we'll learn more about it in the following chapter\n        return this.get('author');\n    }\n});\nvar books = [new Book(fakeBooks[0]),\n                     new Book(fakeBooks[1]),\n                     new Book(fakeBooks[2])];\nvar authors = _.invoke(books, 'getAuthor'); // == ['Bob', 'Bob', 'Fred the Critic']\n```"]