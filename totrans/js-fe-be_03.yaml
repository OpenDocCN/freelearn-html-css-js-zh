- en: '*Chapter 2*: Exploring the Advanced Concepts of JavaScript'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第二章*：探索JavaScript的高级概念'
- en: 'In this chapter, we will explore the advanced features of JavaScript, such
    as object-oriented programming. We will also study two types of objects that are
    widely used in JavaScript: arrays and strings. Finally, we will see how JavaScript
    allows you to trigger deferred processing, using so-called callback functions.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨JavaScript的高级特性，例如面向对象编程。我们还将研究JavaScript中广泛使用的两种类型的对象：数组和字符串。最后，我们将看到JavaScript如何允许你使用所谓的回调函数来触发延迟处理。
- en: 'In this chapter, we’ll be covering the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Classes and objects
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类和对象
- en: Arrays
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组
- en: Character strings
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串
- en: Multitasking
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多任务
- en: Using promises
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用承诺
- en: All these topics are fundamental to building JavaScript applications. Let’s
    start now!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些主题对于构建JavaScript应用程序都是基本的。现在让我们开始吧！
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You can find the code files for this chapter on GitHub at: [https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%202.zip](https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%202.zip).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在GitHub上找到本章的代码文件：[https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%202.zip](https://github.com/PacktPublishing/JavaScript-from-Frontend-to-Backend/blob/main/Chapter%202.zip)。
- en: Classes and objects
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类和对象
- en: The notion of classes and objects is fundamental to programming languages. JavaScript
    allows them to be used as well.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 类和对象的概念是编程语言的基础。JavaScript允许它们被使用。
- en: A class is used to represent any type of data. For example, people, customers,
    cars, and so on. We can define a class to represent each of these types of elements,
    for example, a `Person` class to represent people, a `Client` class to represent
    customers, and a `Car` class to represent cars.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 类用于表示任何类型的数据。例如，人、客户、汽车等等。我们可以定义一个类来表示这些类型的元素，例如，一个`Person`类来表示人，一个`Client`类来表示客户，一个`Car`类来表示汽车。
- en: Note
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the class name traditionally begins with an uppercase letter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，类名传统上以大写字母开头。
- en: An object, on the other hand, will be a particular element of a class (this
    element will be also called an instance). For example, among all the people of
    the class `Person`, the person identified by his name “Clinton” and his first
    name “Bill” represents a particular object of the class `Person`. This object
    can be associated, for example, with the variable `p` in the program. We can thus
    create variables to identify each object associated with the class.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，一个对象将是类的一个特定元素（这个元素也将被称为实例）。例如，在`Person`类中的所有人中，被其名字“Clinton”和名字“Bill”所标识的人代表了这个类`Person`的一个特定对象。这个对象可以与程序中的变量`p`相关联。因此，我们可以创建变量来标识与该类关联的每个对象。
- en: Defining a class
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义一个类
- en: The question to ask yourself when creating a class is what actions you want
    to perform on the type of data it represents.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 创建类时，你需要问自己的问题是，你想要对这个数据类型执行哪些操作。
- en: For example, if we create the `Person` class, we should ask what characterizes
    a person and what action can we perform on this class. We could, for example,
    say that the `Person` class is characterized by the last name, first name, and
    age of the person. You can also add an address, phone number, email, and so on.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们创建`Person`类，我们应该问什么特征可以定义一个人，以及我们可以在该类上执行哪些操作。例如，我们可以说`Person`类由人的姓氏、名字和年龄来定义。你也可以添加地址、电话号码、电子邮件等。
- en: As for the possible actions on people, we can imagine, for example, the action
    of getting married to another person, the action of moving to another city, the
    action of changing employers, and so on.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 至于对人的可能操作，我们可以想象，例如，与另一个人结婚的操作，搬到另一个城市的操作，更换雇主的操作等等。
- en: Note
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Characteristics such as last name, first name, age, and so on are called properties
    of the class, while actions such as getting married, moving, and so on are called
    methods of the class. A class will therefore group together a set of properties
    and a set of methods.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 姓氏、名字、年龄等这样的特征被称为类的属性，而结婚、搬家等这样的操作被称为类的方法。因此，一个类将把一组属性和一组方法组合在一起。
- en: 'A JavaScript class is created using the keyword `class` followed by the name
    of the class, followed by braces describing the content. For example, the `Person`
    class will be created as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`class`关键字后跟类名，然后是描述内容的括号来创建JavaScript类。例如，`Person`类的创建如下所示：
- en: Person class
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 人员类
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This definition of the `Person` class will not be very useful for now, because
    no properties or methods are defined inside it. We will see later how to improve
    it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这种 `Person` 类的定义现在不会很有用，因为它内部没有定义属性或方法。我们将在以后看到如何改进它。
- en: Creating an object by using a class
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过使用类创建对象
- en: 'Once the class is defined, we can create objects associated with this class.
    For this, we use the keyword `new` followed by the name of the class. This creates
    a variable that represents an object of that class:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦定义了类，我们就可以创建与该类关联的对象。为此，我们使用关键字 `new` 后跟类的名称。这创建了一个表示该类对象的变量：
- en: Creating an object p of class Person
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 Person 类的对象 p
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This is what you will see:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你将看到的内容：
- en: '![Figure 2.1 – Creating a Person class object'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.1 – 创建 Person 类对象'
- en: '](img/Figure_2.1_B17416.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.1_B17416.jpg)'
- en: Figure 2.1 – Creating a Person class object
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1 – 创建 Person 类对象
- en: The `p` object is displayed in the console. We are told that it is a `Person`
    class object and that it is empty `{}`. The representation of an object in the
    form of braces is traditional in JavaScript, as we saw in the *Type of variables
    used in JavaScript* section of the previous chapter.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`p` 对象在控制台中显示。我们被告知它是一个 `Person` 类对象，它是空的 `{}`。对象以花括号形式表示的传统在 JavaScript 中，正如我们在上一章的
    *JavaScript 中使用的变量类型* 部分中看到的。'
- en: 'We can verify that it also works on the client side, in a browser. The HTML
    file is as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以验证它也可以在客户端，在浏览器中工作。HTML 文件如下：
- en: index.html file
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: index.html 文件
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '![Figure 2.2 – Creating an object in the browser'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.2 – 在浏览器中创建对象'
- en: '](img/Figure_2.2_B17416.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.2_B17416.jpg)'
- en: Figure 2.2 – Creating an object in the browser
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 – 在浏览器中创建对象
- en: We find the display of braces, which symbolizes the display of a JavaScript
    object.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们找到了花括号的显示，这表示了 JavaScript 对象的显示。
- en: Creating an object without using a class
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不使用类创建对象
- en: It is possible to create an object without having created a class first. All
    you have to do is use the notation with the braces { and }.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 没有先创建类，也可以创建对象。你只需使用花括号 `{` 和 `}` 的符号。
- en: 'For example, we can write the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以编写以下内容：
- en: Creating an object using the braces notation
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用花括号符号创建对象
- en: '[PRE21]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This will create the object `p` with the `lastname` and `firstname` properties.
    Note that you can indicate the names of the properties by enclosing them in quotation
    marks, or not. So `{ lastname: "Clinton" }` can also be written `{ "lastname":
    "Clinton" }` by surrounding the `lastname` property with single or double quotes.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '这将创建具有 `lastname` 和 `firstname` 属性的对象 `p`。请注意，你可以通过将属性名称用引号括起来或不括起来来指定属性名称。因此，`{
    lastname: "Clinton" }` 也可以写成 `{ "lastname": "Clinton" }`，通过将 `lastname` 属性用单引号或双引号包围。'
- en: Now let’s see how to improve the `Person` class previously created by adding
    properties and methods to it.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何通过向其中添加属性和方法来改进之前创建的 `Person` 类。
- en: Adding properties to a class
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向类中添加属性
- en: A person has, in our example, a last name, a first name, and an age. We will
    create these three properties for people of the `Person` class.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，一个人有一个姓氏、一个名字和一个年龄。我们将为 `Person` 类的人创建这三个属性。
- en: 'All you have to do is indicate each of these properties, by name, in the body
    of the `Person` class. Above all, do not use the `var` or `let` keywords to define
    them:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需在 `Person` 类的主体中按名称指示这些属性即可。首先，不要使用 `var` 或 `let` 关键字来定义它们：
- en: Adding firstname, lastname, and age properties in Person class
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Person 类中添加 firstname、lastname 和 age 属性
- en: '[PRE23]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '![Figure 2.3 – Creation of lastname, firstname, and age properties in the Person
    class'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.3 – 在 Person 类中创建 lastname、firstname 和 age 属性'
- en: '](img/Figure_2.3_B17416.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.3_B17416.jpg)'
- en: Figure 2.3 – Creation of lastname, firstname, and age properties in the Person
    class
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3 – 在 Person 类中创建 lastname、firstname 和 age 属性
- en: The `Person` class object `p` now has the properties added in the class. Any
    other object of this class will also have them.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`Person` 类对象 `p` 现在具有在类中添加的属性。这个类的任何其他对象也将具有它们。'
- en: Note that the values of the added properties are `undefined`. This is normal
    because no values have been specified for these properties in the `p` object or
    the `Person` class.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，添加的属性值是 `undefined`。这是正常的，因为这些属性在 `p` 对象或 `Person` 类中尚未指定值。
- en: 'Let’s modify the `Person` class so that the properties have default values,
    rather than `undefined`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改 `Person` 类，以便属性具有默认值，而不是 `undefined`：
- en: Properties with default values
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 具有默认值的属性
- en: '[PRE30]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Each property is initialized with its default value. The `lastname` and `firstname`
    properties are initialized with an empty string `""`, while `age` is initialized
    by default to `0`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 每个属性都使用其默认值进行初始化。`lastname` 和 `firstname` 属性使用空字符串 `""` 进行初始化，而 `age` 默认初始化为
    `0`。
- en: '![Figure 2.4 – Properties with default values'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.4 – 具有默认值的属性'
- en: '](img/Figure_2.4_B17416.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.4 – 使用 display() 方法'
- en: Figure 2.4 – Properties with default values
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4 – 具有默认值的属性
- en: A class has properties, but also methods. Now let’s see how to add methods to
    a class.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一个类既有属性，也有方法。现在让我们看看如何向类中添加方法。
- en: Adding methods to a class
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向类中添加方法
- en: You can add methods to a class. Objects created from the class (with `new`)
    will be able to use these methods directly.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以向类中添加方法。从该类（使用 `new`）创建的对象将能够直接使用这些方法。
- en: 'For example, let’s create the `display()` method, which displays a line of
    text containing the person’s first and last name. The instruction `p.display()`
    (assuming that `p` is a `Person` class object) is used to display the last name
    and first name of the person related to the object `p`:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们创建一个 `display()` 方法，该方法显示包含人员的名字和姓氏的文本行。指令 `p.display()`（假设 `p` 是 `Person`
    类对象）用于显示与对象 `p` 相关的人员的姓氏和名字：
- en: Creating the display() method in the Person class
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Person 类中创建 display() 方法
- en: '[PRE37]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The properties of the class are accessible in the methods of the class by prefixing
    them with the keyword `this`. For example, `this.lastname` provides access to
    the `lastname` property of the class.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 类的属性可以通过在它们前面加上关键字 `this` 在类的方法中访问。例如，`this.lastname` 提供了对类中 `lastname` 属性的访问。
- en: The `this` keyword refers to the object itself that uses the `display()` method,
    so here, the `p` object.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`this` 关键字指的是使用 `display()` 方法的对象本身，因此在这里是 `p` 对象。'
- en: If you omit the `this` keyword and use the `lastname` property directly, you
    will get a syntax error because the property is only accessible with the `this`
    keyword.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您省略 `this` 关键字并直接使用 `lastname` 属性，您将得到一个语法错误，因为属性只有在使用 `this` 关键字时才是可访问的。
- en: 'The output of the preceding code snippet is displayed here:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段的输出显示在此处：
- en: '![Figure 2.5 – Using the display() method'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.5 – 使用 display() 方法'
- en: '](img/Figure_2.5_B17416.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.5 – 使用 display() 方法'
- en: Figure 2.5 – Using the display() method
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5 – 使用 display() 方法
- en: The `display()` method displays `firstname` and `lastname` of the person associated
    with the variable `p`, but since `lastname` and `firstname` have been initialized
    to an empty string, no last name or first name is displayed. Let’s look at how
    to modify the value of a property.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`display()` 方法显示与变量 `p` 相关人员的 `firstname` 和 `lastname`，但由于 `lastname` 和 `firstname`
    已经被初始化为空字符串，因此没有显示姓氏或名字。让我们看看如何修改属性的值。'
- en: Changing an object’s property values
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改对象的属性值
- en: 'You can modify the value of the properties of an object by using these properties
    directly, for example, `p.lastname` allows you to read or modify the value of
    the `lastname` property for the object `p`:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过直接使用这些属性来修改对象的属性值，例如，`p.lastname` 允许您读取或修改对象 `p` 的 `lastname` 属性的值：
- en: Initialization of the lastname and firstname of the person
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化人员的 `lastname` 和 `firstname`
- en: '[PRE52]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'This is what you will see:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您将看到的内容：
- en: '![Figure 2.6 – The lastname and firstname properties are initialized'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.6 – 初始化 `lastname` 和 `firstname` 属性'
- en: '](img/Figure_2.6_B17416.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.6 – 初始化 `lastname` 和 `firstname` 属性'
- en: Figure 2.6 – The lastname and firstname properties are initialized
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6 – 初始化 `lastname` 和 `firstname` 属性
- en: Once the object `p` has been created by the `new` operator, we initialize its
    `lastname` and `firstname` properties to the values indicated. The `age` property
    is not modified here, and will therefore remain equal to the value 0.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦使用 `new` 操作符创建了对象 `p`，我们就将其 `lastname` 和 `firstname` 属性初始化为指示的值。这里没有修改 `age`
    属性，因此它将保持等于值 0。
- en: We modified the value of the `lastname` and `firstname` properties of the object
    `p` created using `p.lastname` and `p.firstname`.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `p.lastname` 和 `p.firstname` 修改了使用 `new` 创建的对象 `p` 的 `lastname` 和 `firstname`
    属性的值。
- en: This modification of property values is done after the object `p` is created.
    It is possible to do this modification during the very creation of the object,
    in the `new` instruction. This requires defining a method called `constructor()`,
    which allows this initialization.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这种属性值的修改是在对象 `p` 创建之后进行的。在创建对象的过程中进行这种修改也是可能的，这需要定义一个名为 `constructor()` 的方法，它允许这种初始化。
- en: Using the class constructor
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用类构造函数
- en: The `constructor()` method is called the constructor of the class. It is automatically
    called during each `new` statement if the `constructor()` method exists in the
    class. We define it in a class if we want to perform a specific process each time
    an object is created in this class.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`constructor()` 方法被称为类的构造函数。如果类中存在 `constructor()` 方法，则在每次使用 `new` 语句创建对象时都会自动调用它。如果我们想在每次在这个类中创建对象时执行特定的过程，我们就在类中定义它。'
- en: 'The `constructor()` method can have any number of parameters or none at all.
    The parameters indicated here will be used to initialize the `lastname` and `firstname`
    properties of the person:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`constructor()` 方法可以有任何数量的参数，也可以没有任何参数。这里指示的参数将用于初始化人的 `lastname` 和 `firstname`
    属性：'
- en: Using a constructor for the Person class
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 使用构造函数创建 Person 类
- en: '[PRE70]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: The `constructor()` method is defined by giving it the three parameters `lastname`,
    `firstname`, and `age`. They are transferred into the properties of the object
    by means of `this.lastname`, `this.firstname`, and `this.age`.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`constructor()` 方法是通过提供三个参数 `lastname`、`firstname` 和 `age` 来定义的。它们通过 `this.lastname`、`this.firstname`
    和 `this.age` 的方式被转移到对象的属性中。'
- en: Finally, the object `p` is now created by passing as parameters the values of
    `lastname`, `firstname`, and `age` of the person created with `new`. Here, `age`
    is not specified in parameters in the `new` instruction; it will therefore be
    an `undefined` value that will be transmitted to the constructor.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过将 `lastname`、`firstname` 和 `age` 的值作为参数传递给 `new` 来创建对象 `p`。在这里，`age` 在
    `new` 指令中没有指定参数；因此，它将是一个 `undefined` 值，将被传递给构造函数。
- en: '![Figure 2.7 – Using a constructor'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.7 – 使用构造函数'
- en: '](img/Figure_2.7_B17416.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.7_B17416.jpg)'
- en: Figure 2.7 – Using a constructor
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7 – 使用构造函数
- en: 'We find the `lastname` and `firstname` properties initialized, but the `age`
    property is now initialized to the value `undefined` instead of `0`. To assign
    it another value, simply pass an additional value when creating the object with
    `new`. This additional value will represent the person’s age, for example:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现 `lastname` 和 `firstname` 属性已初始化，但 `age` 属性现在初始化为 `undefined` 而不是 `0`。要为其分配另一个值，只需在创建对象时传递一个额外的值。这个额外的值将代表人的年龄，例如：
- en: Using age when creating Person class object
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 Person 类对象时使用年龄
- en: '[PRE89]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '![Figure 2.8 – The person''s age is now transmitted'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.8 – 人的年龄现在被传输'
- en: '](img/Figure_2.8_B17416.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.8_B17416.jpg)'
- en: Figure 2.8 – The person’s age is now transmitted
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.8 – 人的年龄现在被传输
- en: We have seen how to create an object, by directly defining its properties and
    methods using a class. However, we can also create an object from another object.
    Let’s see how to do it.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何通过直接使用类定义其属性和方法来创建一个对象。然而，我们也可以从一个对象创建另一个对象。让我们看看如何做到这一点。
- en: Merging one object with another
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 合并一个对象与另一个对象
- en: There may be cases when you want to create a new object from an old object.
    Let’s see how to do this.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 有可能存在需要从一个旧对象创建新对象的情况。让我们看看如何做到这一点。
- en: If the object `p` contains a value, the statement `var p2 = p` does not create
    a new object `p2` distinct from the object `p`, but only a reference `p2` that
    points to the same value as the reference `p`. So any modification of the properties
    of the object `p` will also be visible in the object `p2` because both point to
    the same memory location.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对象 `p` 包含一个值，则语句 `var p2 = p` 并不会创建一个新的对象 `p2`，它与对象 `p` 是不同的，而只是一个指向与引用 `p`
    相同值的引用 `p2`。因此，对对象 `p` 的属性所做的任何修改都将反映在对象 `p2` 中，因为它们都指向相同的内存位置。
- en: 'This can be verified using the following example:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过以下示例进行验证：
- en: Modifying an object in memory
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 修改内存中的对象
- en: '[PRE111]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: Even if only the `p2` object is modified, the `p` object is also modified because
    they are memory references that point to the same location. If the contents of
    the memory location are changed, both references see the same change.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 即使只修改了 `p2` 对象，`p` 对象也会被修改，因为它们是内存引用，指向相同的位置。如果内存位置的内容发生变化，两个引用都会看到相同的变化。
- en: 'To avoid this situation, it would not be necessary to write `p2 = p`, but rather
    to copy the properties of the object `p` into those of the object `p2`, thus creating
    a new memory location. For this, JavaScript offers the spread operator, used in
    the form `…`, which allows it:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这种情况，不需要编写 `p2 = p`，而是将对象 `p` 的属性复制到对象 `p2` 的属性中，从而创建一个新的内存位置。为此，JavaScript
    提供了扩展运算符，其形式为 `…`，它允许这样做：
- en: Using the spread operator ...
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 使用扩展运算符 ...
- en: '[PRE122]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: The spread operator is used by surrounding the original object with braces `{
    and }`, and preceding the object with the spread operator (for example, `{...p}`).
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展运算符通过在大括号`{}`周围包围原始对象，并在对象前使用扩展运算符（例如，`{...p}`）来使用。
- en: '![Figure 2.9 – Using the spread operator...'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.9 – 使用扩展运算符...'
- en: '](img/Figure_2.9_B17416.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.9_B17416.jpg)'
- en: Figure 2.9 – Using the spread operator...
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.9 – 使用扩展运算符...
- en: Object `p` is no longer modified when object `p2` is modified.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 当对象`p2`被修改时，对象`p`不再被修改。
- en: 'It is also possible to write it in shortened form:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以用简化的形式来写：
- en: Creating object p2 from object p, adding the city
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 从对象`p`创建对象`p2`，添加城市
- en: '[PRE129]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'Now that we have looked at classes and objects and how to work with them, let’s
    take a look at an important class object: the `Array` class.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了类和对象以及如何使用它们，让我们看看一个重要的类对象：`Array`类。
- en: Arrays
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组
- en: Arrays store a collection of data, ordered according to their index. The index
    is also called the index of the array. It starts at 0 and scales up to the total
    number of elements in the array, minus 1 (0 to n-1).
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 数组按照它们的索引顺序存储数据集合。索引也称为数组的索引。它从0开始，增加到数组的总元素数减1（0到n-1）。
- en: Let’s learn how to create an array first.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先学习如何创建一个数组。
- en: Creating an array
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用方括号创建数组
- en: An array corresponds in JavaScript to an `Array` class object. We therefore
    create an array using the `new Array` instruction.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，数组对应于`Array`类对象。因此，我们使用`new Array`指令来创建一个数组。
- en: However, since arrays are widely used in JavaScript programs, it is also possible
    to create them using a bracket notation `[ and ]`. This is an easier way to use
    them without going through the `Array` class.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于数组在JavaScript程序中广泛使用，因此也可以使用方括号表示法`[`和`]`来创建它们。这是一种更简单的方法，无需通过`Array`类即可使用它们。
- en: Let’s take a detailed look at these two ways to create an array (with brackets
    and with the `Array` class).
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看看这两种创建数组的方式（使用方括号和使用`Array`类）。
- en: Creating an array using square brackets [ and ]
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用方括号[和]创建数组
- en: 'The easiest and fastest way to create an array is to use the bracket notation:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 创建数组最简单、最快的方法是使用方括号表示法：
- en: Creating an array using square brackets
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 使用方括号创建数组
- en: '[PRE131]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: The array begins with an opening square bracket `[` and ends with a closing
    square bracket `]`. The elements of the array are separated by a comma. We have
    inserted elements here as strings, but in fact, any type of element can be inserted
    into an array.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 数组以一个开方括号`[`开始，以一个闭方括号`]`结束。数组中的元素由逗号分隔。我们在这里插入的是字符串元素，但实际上，任何类型的元素都可以插入到数组中。
- en: '![Figure 2.10 – Elements inserted into an array'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.10 – 插入到数组中的元素'
- en: '](img/Figure_2.10_B17416.jpg)'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.10_B17416.jpg)'
- en: Figure 2.10 – Elements inserted into an array
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.10 – 插入到数组中的元素
- en: Note that it is possible to create an empty array (without any elements). We
    write this as `[]`, without indicating any element inside the square brackets.
    It will then be possible to add elements to this array.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，可以创建一个空数组（没有任何元素）。我们将其写为`[]`，不在方括号内指定任何元素。然后就可以向这个数组中添加元素。
- en: Creating an array using the Array class
  id: totrans-263
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`Array`类创建数组
- en: You can also use the `Array` class to create an array. The `Array` class includes
    a constructor in which we indicate the list of array elements, each separated
    from the next by a comma.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`Array`类来创建数组。`Array`类包括一个构造函数，其中我们指定数组元素的列表，每个元素之间由逗号分隔。
- en: 'The same array as before can be created by the `new Array` statement by writing
    the following:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过`new Array`语句以以下方式创建与之前相同的数组：
- en: Creating an array using new Array
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`new Array`创建数组
- en: '[PRE133]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '![Figure 2.11 – Creation of the array using new Array'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.11 – 使用`new Array`创建数组'
- en: '](img/Figure_2.11_B17416.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.11_B17416.jpg)'
- en: Figure 2.11 – Creation of the array using new Array
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.11 – 使用`new Array`创建数组
- en: The array created is the same as before.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 创建的数组与之前相同。
- en: 'To create an empty array, simply pass no parameters to the constructor by writing
    the following:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个空数组，只需在构造函数中不传递任何参数，如下所示：
- en: Creating an empty array using new Array()
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`new Array()`创建空数组
- en: '[PRE135]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '![Figure 2.12 – Creating an empty array [ ]'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.12 – 创建空数组 []'
- en: '](img/Figure_2.12_B17416.jpg)'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.12_B17416.jpg)'
- en: Figure 2.12 – Creating an empty array [ ]
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.12 – 创建空数组 []
- en: Now that we’ve seen how to create an array, let’s see how to access each of
    its elements.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了如何创建一个数组，接下来让我们看看如何访问它的每个元素。
- en: Accessing array elements
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问数组元素
- en: 'In previous programs, we displayed the entire array, using the `console.log(tab)`
    statement. It is possible to access each element of the array separately. Each
    element can be accessed as follows:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的程序中，我们使用`console.log(tab)`语句显示了整个数组。可以单独访问数组的每个元素。每个元素可以按以下方式访问：
- en: By its index
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过索引
- en: With a `for()` loop
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`for()`循环
- en: With the `forEach()` method
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`forEach()`方法
- en: Let’s take a look at each of these three ways.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这三种方法中的每一种。
- en: Accessing an element by index
  id: totrans-287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过索引访问元素
- en: 'Let’s take the previous array of five elements, that is, `tab = ["Element 1",
    "Element 2", "Element 3", "Element 4", "Element 5"]`:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以之前包含五个元素的数组为例，即`tab = ["元素1", "元素2", "元素3", "元素4", "元素5"]`：
- en: The first element can be accessed by its index 0, that is, `tab[0]`.
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个元素可以通过其索引0访问，即`tab[0]`。
- en: The next one, with index 1, will be accessed by `tab[1]`.
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一个，索引为1的，将通过`tab[1]`访问。
- en: The last one, with index 4, will be accessed by `tab[4]`.
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一个，索引为4的，将通过`tab[4]`访问。
- en: 'This is how you will display each element:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您显示每个元素的方式：
- en: Displaying each element of the array by its index
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 通过索引显示数组中的每个元素
- en: '[PRE137]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'The result is displayed in the following figure:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将在以下图中显示：
- en: '![Figure 2.13 – Displaying each element by its index'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.13 – 通过索引显示每个元素'
- en: '](img/Figure_2.13_B17416.jpg)'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_2.13_B17416.jpg](img/Figure_2.13_B17416.jpg)'
- en: Figure 2.13 – Displaying each element by its index
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.13 – 通过索引显示每个元素
- en: The array contains five elements, which means the indices go from 0 to 4\. However,
    to do a test, we also access the element with index 5\. It is possible to access
    an index of an element that does not exist in the array. The result in this case
    is the JavaScript value `undefined`, which means that the value of this element
    has not yet been assigned.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 该数组包含五个元素，这意味着索引从0到4。然而，为了进行测试，我们也访问了索引为5的元素。可以访问数组中不存在的元素的索引。在这种情况下，结果是JavaScript值`undefined`，这意味着此元素的值尚未分配。
- en: 'Note that it is possible with this access method to modify the value of an
    array element – just give it a new value:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，使用这种访问方法可以修改数组元素的值——只需给它一个新的值：
- en: Modifying the value of the elements in indexes 2 and 3 of the array
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 修改数组索引2和3中元素的值
- en: '[PRE145]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: 'This is the result:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 这是结果：
- en: '![Figure 2.14 – Modifying array elements'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.14 – 修改数组元素'
- en: '](img/Figure_2.14_B17416.jpg)'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_2.14_B17416.jpg](img/Figure_2.14_B17416.jpg)'
- en: Figure 2.14 – Modifying array elements
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.14 – 修改数组元素
- en: Next, we will look at accessing an element with a `for()` or `while()` loop.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将查看使用`for()`或`while()`循环访问元素。
- en: Accessing an element with a for() or while() loop
  id: totrans-322
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用for()或while()循环访问元素
- en: The `for()` and `while()` loops already studied in the previous chapter allow
    you to browse all the elements of an array. The index of the loop starts at 0
    (to access the first element of the array, the one with index 0) and ends at the
    last index of the array.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中已经研究过的`for()`和`while()`循环允许您浏览数组的所有元素。循环的索引从0开始（为了访问数组的第一个元素，即索引为0的元素）并结束于数组的最后一个索引。
- en: 'To know this last index, JavaScript provides the `length` property in the `Array`
    class, which allows us to know the total number of elements of an array. The last
    index will be the one with the value `length – 1`:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 要知道最后一个索引，JavaScript在`Array`类中提供了`length`属性，这允许我们知道数组中元素的总数。最后一个索引将是值为`length
    – 1`的索引：
- en: Accessing array elements with a for() loop
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 使用for()循环访问数组元素
- en: '[PRE153]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: Note that the end of the loop is written by testing the value `i < tab.length`.
    This is equivalent to writing `i <= tab.length – 1`.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，循环的结束是通过测试值`i < tab.length`来写的。这相当于写`i <= tab.length – 1`。
- en: '![Figure 2.15 – Accessing array elements with a for() loop'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.15 – 使用for()循环访问数组元素'
- en: '](img/Figure_2.15_B17416.jpg)'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_2.15_B17416.jpg](img/Figure_2.15_B17416.jpg)'
- en: Figure 2.15 – Accessing array elements with a for() loop
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.15 – 使用for()循环访问数组元素
- en: Next, we will look at accessing an element with the `forEach(callback)` method.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将查看使用`forEach(callback)`方法访问元素。
- en: Accessing an element with the forEach(callback) method
  id: totrans-335
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用forEach(callback)方法访问元素
- en: The `forEach(callback)` method is a method defined by JavaScript on the `Array`
    class. It is used to browse the elements of an array by transmitting each of the
    elements of the array to a function passed as a parameter. The function indicated
    as a parameter therefore has access to each element of the array (and to its index
    if necessary).
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '`forEach(callback)`方法是由JavaScript在`Array`类上定义的方法。它通过将数组的每个元素传递给作为参数传递的函数来遍历数组的元素。因此，作为参数指定的函数可以访问数组的每个元素（如果需要，还可以访问其索引）。'
- en: Callback Function
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数
- en: The principle of indicating a function in the parameters of a method is very
    common in JavaScript. The function in the parameters is known as a callback function,
    which means that the actual processing to be executed is that indicated in the
    callback function.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，将函数作为方法参数的指示原则非常常见。参数中的函数被称为回调函数，这意味着实际要执行的处理是在回调函数中指定的。
- en: We show here how to use a callback function indicated in parameters of the `forEach(callback)`
    method.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里展示了如何使用`forEach(callback)`方法参数中指定的回调函数。
- en: 'We use the `tab` array of five elements seen previously, to which we apply
    the `forEach()` method:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用之前看到的五个元素的`tab`数组，并对其应用`forEach()`方法：
- en: Accessing array elements using the forEach() method
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`forEach()`方法访问数组元素
- en: '[PRE157]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: We indicate a function as a parameter of the `forEach()` method. This so-called
    callback function will be called automatically by JavaScript for each element
    of the `tab` array (which uses the `forEach()` method).
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将函数作为`forEach()`方法的参数。这个所谓的回调函数将由JavaScript自动为`tab`数组（使用`forEach()`方法）的每个元素调用。
- en: The callback function takes as its first parameter the element of the array
    for which the function is called (parameter `elem`), and its index (parameter
    `i`).
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数将其第一个参数作为被调用的函数的数组元素（参数`elem`），以及其索引（参数`i`）。
- en: '![Figure 2.16 – Accessing array elements using the forEach() method'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.16 – Accessing array elements using the forEach() method](img/Figure_2.16_B17416.jpg)'
- en: '](img/Figure_2.16_B17416.jpg)'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.16 – B17416.jpg](img/Figure_2.16_B17416.jpg)'
- en: Figure 2.16 – Accessing array elements using the forEach() method
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.16 – 使用`forEach()`方法访问数组元素
- en: The result is the same as that obtained by the `for()` loop. However, there
    is a (small) difference that we discover right away.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 结果与`for()`循环得到的结果相同。然而，我们立即发现了一个（小）差异。
- en: The difference between the for() loop and the forEach() method
  id: totrans-354
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`for()`循环和`forEach()`方法的区别'
- en: The previous program did not show any difference between the `for()` loop and
    `forEach()` method results to access array elements.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的程序在访问数组元素时没有显示`for()`循环和`forEach()`方法结果之间的任何差异。
- en: To show the difference between these two approaches, let’s introduce a new element
    in the array, at index 10, knowing that the last index used during the creation
    of the array was 4\. We thus create a new element that is much further away than
    the current last element of the array. How will the array react to this enlargement?
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示这两种方法之间的区别，让我们在数组中引入一个新的元素，在索引10处，我们知道在创建数组时使用的最后一个索引是4。因此，我们创建了一个比数组当前最后一个元素远得多的新元素。数组会如何对这个扩展做出反应？
- en: Addition of an element at index 10
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 在索引10处添加元素
- en: '[PRE163]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: We add an element to the array using `tab[10] = "Element 9"`, then display the
    contents of the array using the `for()` loop and then the `forEach()` method.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`tab[10] = "Element 9"`向数组中添加一个元素，然后使用`for()`循环和`forEach()`方法显示数组的所有内容。
- en: 'The result is displayed in the following figure:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示在下图中：
- en: '![Figure 2.17 – Adding an element at index 10 of the array'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.17 – Adding an element at index 10 of the array](img/Figure_2.17_B17416.jpg)'
- en: '](img/Figure_2.17_B17416.jpg)'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.17 – B17416.jpg](img/Figure_2.17_B17416.jpg)'
- en: Figure 2.17 – Adding an element at index 10 of the array
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.17 – 在数组索引10处添加元素
- en: The display of the `for()` loop shows that the elements with indices 5 to 9
    exist but are of value `undefined`, because effectively, no values have been inserted
    for these indices of the array. However, the indices 5 to 9 with their `undefined`
    values are displayed by the `for()` loop.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '`for()`循环的显示表明索引5到9的元素存在，但它们的值为`undefined`，因为实际上没有为这些数组的索引插入任何值。然而，`for()`循环显示了具有`undefined`值的索引5到9。'
- en: Conversely, the `forEach()` method provides the callback function indicated
    in parameters with only the array elements that have actually been affected in
    the array. This therefore avoids the elements at indices 5 to 9, which have not
    been assigned in the program.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，`forEach()`方法只提供参数中指定的回调函数，该回调函数具有数组中实际受影响的数组元素。因此，避免了索引5到9的元素，这些元素在程序中没有分配。
- en: We have seen how to create an array, then how to access each of its elements.
    Let’s look at how to add new elements to the array.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何创建一个数组，然后如何访问其每个元素。现在让我们看看如何向数组中添加新元素。
- en: Adding items to the array
  id: totrans-379
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向数组中添加项目
- en: 'Once the array has been created (empty or not), it is possible to add elements
    to it. We will mainly use one of the two following techniques:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建数组（空或非空），就可以向其中添加元素。我们将主要使用以下两种技术之一：
- en: Adding an element by its index in the array
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在数组中通过索引添加元素
- en: Adding an item using the `push()` method
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 push() 方法添加项目
- en: Now let’s take a look at these two techniques.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看这两种技术。
- en: Adding an element by index
  id: totrans-384
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过索引添加元素
- en: This corresponds to the assignment `tab[i] = value`. We used it in the previous
    section by writing `tab[10] = "Element 9"`.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 这对应于赋值 `tab[i] = value`。我们之前在写 `tab[10] = "Element 9"` 时使用了它。
- en: Note simply that if the index used is greater than the current number of elements
    in the array, this enlarges the array by creating elements initialized to the
    value `undefined`. And if the index used is less than the number of elements in
    the array, it modifies the current value of the targeted element.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果使用的索引大于数组中当前元素的数量，这将通过创建初始化为值 `undefined` 的新元素来扩大数组。如果使用的索引小于数组中的元素数量，它将修改目标元素的当前值。
- en: Adding an element using the push() method
  id: totrans-387
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 push() 方法添加元素
- en: 'The `push()` method is defined in the `Array` class. It allows you to add a
    new element to an array without worrying about the insertion index because it
    automatically inserts the element at the end of the array:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '`push()` 方法定义在 `Array` 类中。它允许你添加一个新元素到数组中，而无需担心插入索引，因为它会自动将元素插入数组的末尾：'
- en: Inserting an element using the push() method
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 push() 方法插入元素
- en: '[PRE176]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: The instruction `tab.push("Element 6")` inserts this element at the end of the
    array. The array is then displayed using the various methods seen previously.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 指令 `tab.push("Element 6")` 将此元素插入数组的末尾。然后使用之前看到的各种方法显示数组。
- en: '![Figure 2.18 – Adding an element using the push() method'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.18 – 使用 push() 方法添加元素'
- en: '](img/Figure_2.18_B17416.jpg)'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.18_B17416.jpg)'
- en: Figure 2.18 – Adding an element using the push() method
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.18 – 使用 push() 方法添加元素
- en: We know how to add and modify elements in an array. All that remains is to know
    how to delete elements from an array.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道如何添加和修改数组中的元素。剩下的就是知道如何从数组中删除元素。
- en: Deleting array elements
  id: totrans-408
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除数组元素
- en: 'JavaScript allows us to delete array elements in two ways:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 允许我们以两种方式删除数组元素：
- en: Deleting the value of the element in the array, while retaining the element
    in the array with an `undefined` value
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除数组中元素的值，同时保留具有 `undefined` 值的元素在数组中
- en: Removing the element itself from the array
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数组中删除元素本身
- en: Let’s examine these two possibilities now.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来探讨这两种可能性。
- en: Deleting an element value (without deleting the element from the array)
  id: totrans-413
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除元素值（不删除数组中的元素）
- en: 'We use the `delete` keyword to delete the value of an element in an array.
    For example, `delete tab[0]` deletes the value of the element with index 0 in
    the array `tab`, by assigning it the value `undefined`. The element is not removed
    from the array, which still has the same number of elements as before:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `delete` 关键字来删除数组中元素的值。例如，`delete tab[0]` 通过将其赋值为 `undefined` 来删除数组 `tab`
    中索引为 0 的元素的值。元素没有被从数组中删除，数组仍然保留与之前相同的元素数量：
- en: Deleting the value of the element with index 0
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 删除索引为 0 的元素的值
- en: '[PRE189]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '![Figure 2.19 – Deleting the value of the element with index 0'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.19 – 删除索引为 0 的元素的值'
- en: '](img/Figure_2.19_B17416.jpg)'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.19_B17416.jpg)'
- en: Figure 2.19 – Deleting the value of the element with index 0
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.19 – 删除索引为 0 的元素的值
- en: We see that the `for()` loop displays the `undefined` value of the element,
    while the `forEach()` method no longer displays the element because its value
    has been deleted.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，`for()` 循环显示了元素的 `undefined` 值，而 `forEach()` 方法不再显示元素，因为它的值已经被删除。
- en: Note
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Note that if instead of using `delete tab[0]`, we use `tab[0] = undefined`,
    the `forEach()` method displays the element at index 0 as the first element of
    the array, because the value of the element has not actually been deleted but
    rather assigned to a new value, which here is `undefined`.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果我们不使用 `delete tab[0]`，而是使用 `tab[0] = undefined`，则 `forEach()` 方法将索引 0 的元素显示为数组的第一个元素，因为元素的值实际上并没有被删除，而是被分配了新的值，这里为
    `undefined`。
- en: Now let’s look at the second method for removing the element from the array.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看第二种从数组中删除元素的方法。
- en: Deleting an element from an array
  id: totrans-436
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从数组中删除元素
- en: Using the `delete` keyword does not delete the element from the array, which
    retains the same number of elements.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `delete` 关键字不会从数组中删除元素，数组保留相同的元素数量。
- en: The `splice(begin, count)` method defined in the `Array` class allows you to
    physically remove the element from the array, which will therefore have at least
    one element less after its use.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Array` 类中定义的 `splice(begin, count)` 方法允许你从数组中物理删除元素，因此在使用后数组将至少少一个元素。
- en: The `splice(begin, count)` method includes the `begin` and `count` parameters,
    which allow you to indicate from which index you want to delete (`begin` parameter)
    the elements and the number of consecutive elements you want to delete (`count`
    parameter).
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '`splice(begin, count)` 方法包含 `begin` 和 `count` 参数，这允许你指定从哪个索引开始删除（`begin` 参数）元素，以及你想要删除的连续元素的数量（`count`
    参数）。'
- en: 'So, to remove the element with index 0 from the array `tab`, just write `tab.splice
    (0, 1)`:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，要从数组 `tab` 中删除索引为 0 的元素，只需编写 `tab.splice(0, 1)`：
- en: Removing element with index 0 in array with splice() method
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 splice() 方法删除数组中的索引为 0 的元素
- en: '[PRE202]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: 'This is what you will see:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你将看到的内容：
- en: '![Figure 2.20 – Deletion of element with index 0'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.20 – 删除索引为 0 的元素'
- en: '](img/Figure_2.20_B17416.jpg)'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.20_B17416.jpg)'
- en: Figure 2.20 – Deletion of element with index 0
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.20 – 删除索引为 0 的元素
- en: We have seen how to add and delete elements in an array. Now let’s see how to
    extract a new array from the elements present in the current array.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何在数组中添加和删除元素。现在让我们看看如何从当前数组中的元素提取一个新的数组。
- en: Filtering elements in an array
  id: totrans-460
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在数组中过滤元素
- en: It is common to filter the elements of an array, for example, to keep only certain
    elements or to return new ones. The `Array` class has two methods—`filter(callback)`
    and `map(callback)`—that allow us to return a new array according to our conditions.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤数组元素是常见的操作，例如，保留特定元素或返回新的元素。`Array` 类有两个方法——`filter(callback)` 和 `map(callback)`——允许我们根据条件返回一个新数组。
- en: Using the filter(callback) method
  id: totrans-462
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 filter(callback) 方法
- en: The `tab.filter(callback)` method returns a new array while keeping only the
    desired elements of the `tab` array.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '`tab.filter(callback)` 方法返回一个新数组，同时只保留 `tab` 数组中所需的元素。'
- en: The callback function of the form `callback(element, index)` is called for each
    of the elements of the array `tab`. It must return `true` if we decide to keep
    the element; otherwise, the element is excluded. A new array is returned as a
    result by the `tab.filter()` method, but the original `tab` array is not modified
    (unless it is assigned in return from the method, as in the following example).
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 形式为 `callback(element, index)` 的回调函数会对数组 `tab` 的每个元素进行调用。如果决定保留该元素，则必须返回 `true`；否则，该元素将被排除。`tab.filter()`
    方法返回一个新数组作为结果，但原始 `tab` 数组不会被修改（除非在方法返回时将其赋值，如下例所示）。
- en: 'Let’s use the `filter()` method to keep only the elements of the array whose
    index is greater than or equal to 2:'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 `filter()` 方法来保留数组中索引大于或等于 2 的元素：
- en: Using the filter() method
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 filter() 方法
- en: '[PRE215]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: 'If the callback function returns `true`, the element is kept; otherwise, it
    is excluded. The callback function can also return `false`, or even return nothing,
    like here, and in this case, the element is excluded:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 如果回调函数返回 `true`，则保留该元素；否则，将其排除。回调函数也可以返回 `false`，甚至可以返回空值，就像这里一样，在这种情况下，该元素将被排除：
- en: '![Figure 2.21 – Using the filter() method'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.21 – 使用 filter() 方法'
- en: '](img/Figure_2.21_B17416.jpg)'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.21_B17416.jpg)'
- en: Figure 2.21 – Using the filter() method
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.21 – 使用 filter() 方法
- en: This brings us to the end of the filter() method.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了 `filter()` 方法的介绍。
- en: Using the map(callback) method
  id: totrans-480
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 map(callback) 方法
- en: The `tab.map(callback)` method is used to return a new array from the elements
    of the initial `tab` array. Each element of the initial array is passed to the
    callback function of the form `callback(element, index)`, which must return for
    each element a new element that will replace the original element.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: '`tab.map(callback)` 方法用于从初始 `tab` 数组的元素返回一个新数组。初始数组中的每个元素都会传递给形式为 `callback(element,
    index)` 的回调函数，该回调函数必须为每个元素返回一个新元素，该元素将替换原始元素。'
- en: 'Let’s use the `map(callback)` method to return a new array in which all elements
    have been capitalized:'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 `map(callback)` 方法来返回一个新数组，其中所有元素都已大写：
- en: Using the map() method
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 map() 方法
- en: '[PRE223]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: The `toUpperCase()` method is a method defined on the `String` class (following
    screenshot), allowing you to capitalize the character string that uses the method.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: '`toUpperCase()` 方法是在 `String` 类上定义的方法（以下截图），允许你将使用该方法字符字符串大写。'
- en: 'The result is displayed in the following figure:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示在下图中：
- en: '![Figure 2.22 – Using the map() method'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.22 – 使用 map() 方法'
- en: '](img/Figure_2.22_B17416.jpg)'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.22_B17416.jpg)'
- en: Figure 2.22 – Using the map() method
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: 'We have studied in this section the use of objects of the `Array` class. Another
    class of objects is also widely used with JavaScript: character strings, which
    are represented by the `String` class. Now let’s see how to use objects of the
    `String` class.'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
- en: Character strings
  id: totrans-498
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Strings are widely used in programming languages. They are used to represent
    text entered by a user or text that will be displayed to a user.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: Creating a character string
  id: totrans-500
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A character string is represented by an object of class `String`. But since
    character strings are widely used in JavaScript, the language allows them to be
    used by surrounding them with double quotes `" and "` or single quotes `' and
    '`. It is also possible, for certain uses, to use backticks (reverse quotation
    marks `' and ')`.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
- en: The string literal must in this case begin and end with the same type of quotes.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s see how to create a string using these various methods.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
- en: Creating a string literal using double or single quotes
  id: totrans-505
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The easiest way to create a string literal is to use the single or double quote
    notation:'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
- en: Creating a string literal with double quotes
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE231]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: 'Or, with single quotes:'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
- en: Creating a string literal with single quotes
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE233]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: In both cases, the character string displayed is the same.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.23 – Creating a character string'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.23_B17416.jpg)'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.23 – Creating a character string
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
- en: Advantage of Having the Option to Use Single/Double Quotation Marks
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
- en: The advantage of having the possibility of using single or double quotes is
    visible if the string itself contains quotes. For example, if the string is `"I'll
    love JavaScript"`, using single quotes to create the string will produce an error
    because the string will be assumed to end with the apostrophe in the word `I'll`.
    In this case, you must use double quotes to avoid the error.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
- en: Creating a string literal using backticks
  id: totrans-520
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also use backticks. This is useful in special cases where you want to
    use the value of variables in character strings in a simpler way.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, suppose you want to display a string that uses a person’s first
    and last name. The last name and first name are in variables named `lastname`
    and `firstname`:'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: Concatenating strings and variables
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE235]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '[PRE238]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '[PRE239]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '[PRE241]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: '[PRE242]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: When using reverse quotes, the `+` symbol is no longer used to concatenate strings
    and variables. Everything is written in a single string, and the variables are
    identified by the “symbols” `${variable}`.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
- en: What is written between the braces `{ and }` can be a simple variable (like
    here), but also a more complex JavaScript expression that can be calculated (for
    example, `{a+b}`).
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
- en: We can see that the two result strings are identical.
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.24 – Sequence of character strings and variables creating a string
    using the String class'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.24_B17416.jpg)'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.24 – Sequence of character strings and variables creating a string
    using the String class
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, it is possible to use the `String` class to create the character string.
    The `String` class has a constructor in which the string to be constructed is
    indicated as a parameter:'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，可以使用 `String` 类来创建字符字符串。`String` 类有一个构造函数，其中要构造的字符串作为参数指示：
- en: Using the String class
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 String 类
- en: '[PRE243]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '[PRE244]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: 'The following figure displays the result:'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了结果：
- en: '![Figure 2.25 – Using the String class'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.25 – 使用 String 类'
- en: '](img/Figure_2.25_B17416.jpg)'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.25_B17416.jpg)'
- en: Figure 2.25 – Using the String class
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.25 – 使用 String 类
- en: The `String` class has properties and methods. For example, the `length` property
    lets you know the number of characters in the string, and thus lets you compare,
    for example, the length of two character strings.
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: '`String` 类具有属性和方法。例如，`length` 属性可以让你知道字符串中的字符数，因此可以比较，例如，两个字符字符串的长度。'
- en: 'Let’s use the `length` property to display the length of the two strings created
    using quotes and the `String` class:'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 `length` 属性来显示使用引号和 `String` 类创建的两个字符串的长度：
- en: Using the length property of the String class
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 String 类的 length 属性
- en: '[PRE245]'
  id: totrans-549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: 'This is the result:'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 这是结果：
- en: '![Figure 2.26 – Using the length property of the String class'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.26 – 使用 String 类的 length 属性'
- en: '](img/Figure_2.26_B17416.jpg)'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.26_B17416.jpg)'
- en: Figure 2.26 – Using the length property of the String class
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.26 – 使用 String 类的 length 属性
- en: Regardless of how the string is created, its length is the same (here, 20 characters).
    We have seen how to create a character string, now let’s see how to access the
    characters that compose it.
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 无论字符串是如何创建的，它的长度都是相同的（这里，20 个字符）。我们已经看到了如何创建字符字符串，现在让我们看看如何访问组成它的字符。
- en: Accessing characters in a string
  id: totrans-560
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问字符串中的字符
- en: The `String` class defines methods for accessing characters in the string. These
    are, in particular, the `charAt(index)` and `slice(start, end)` methods. `charAt(index)`
    is used to retrieve the character located at the index indicated in the string,
    starting from index 0\. The maximum index is that associated with the value of
    the `length` property, reduced by 1\. `slice(start, end)` breaks the string into
    a substring, by extracting the characters that go from the `start` index (included)
    to the `end` index (excluded).
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: '`String` 类定义了用于访问字符串中字符的方法。特别是，这些方法是 `charAt(index)` 和 `slice(start, end)`。`charAt(index)`
    用于检索字符串中索引指示的字符，从索引 0 开始。最大索引是 `length` 属性的值减去 1。`slice(start, end)` 通过提取从 `start`
    索引（包含）到 `end` 索引（排除）的字符来将字符串分割成子字符串。'
- en: Using the charAt(index) method
  id: totrans-562
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 charAt(index) 方法
- en: 'Let’s use the `charAt(index)` method to display the characters of a string,
    one by one:'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 `charAt(index)` 方法逐个显示字符串中的字符：
- en: Displaying characters from a string
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 显示字符串中的字符
- en: '[PRE251]'
  id: totrans-565
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: Notice the use of reverse quotes to display the result string.
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 注意使用反引号来显示结果字符串。
- en: 'The result is displayed in the following figure:'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示在下图中：
- en: '![Figure 2.27 – Using the charAt() method'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.27 – 使用 charAt() 方法'
- en: '](img/Figure_2.27_B17416.jpg)'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.27_B17416.jpg)'
- en: Figure 2.27 – Using the charAt() method
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.27 – 使用 charAt() 方法
- en: Now, let’s look at the `slice(start, end)` method.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看 `slice(start, end)` 方法。
- en: Using the slice(start, end) method
  id: totrans-574
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 slice(start, end) 方法
- en: 'The preceding `charAt(index)` method retrieves a single character from the
    string, while the `slice(start, end)` method can retrieve several consecutive
    ones:'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的 `charAt(index)` 方法从字符串中检索单个字符，而 `slice(start, end)` 方法可以检索多个连续的字符：
- en: Note
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the `slice(start, end)` method does not modify the string on which
    the method applies, but rather returns a new string. The original string is not
    modified, allowing it to remain intact.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`slice(start, end)` 方法不会修改应用该方法的原字符串，而是返回一个新的字符串。原始字符串不会被修改，因此可以保持完整。
- en: Using slice() on the “Hello” string
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 在“Hello”字符串上使用 slice()
- en: '[PRE254]'
  id: totrans-579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '[PRE255]'
  id: totrans-580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-581
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '[PRE257]'
  id: totrans-582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: If the `end` index (second parameter) of the `slice(start, end)` method is negative,
    it means counting starts from the end of the string (instead of the beginning
    if it is positive).
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `slice(start, end)` 方法的 `end` 索引（第二个参数）是负数，这意味着计数从字符串的末尾开始（如果它是正数，则从开头开始）。
- en: 'We then obtain the following result:'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下结果：
- en: '![Figure 2.28 – Using the slice() method'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.28 – 使用 slice() 方法'
- en: '](img/Figure_2.28_B17416.jpg)'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.28_B17416.jpg)'
- en: Figure 2.28 – Using the slice() method
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.28 – 使用 slice() 方法
- en: Now that we have seen how to get the characters that make up the string, let’s
    look at how to modify the string.
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了如何获取组成字符串的字符，让我们看看如何修改字符串。
- en: Modifying a character string
  id: totrans-593
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改字符字符串
- en: 'To modify a string, there is only one possibility: you have to construct a
    new one from it. The original string cannot be changed directly.'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 要修改字符串，只有一个可能性：必须从它构建一个新的字符串。原始字符串不能直接更改。
- en: For this, we will use the previous `slice()` and `charAt()` methods, which will
    make it possible to extract parts of the original string, in order to build the
    resulting string.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将使用之前的`slice()`和`charAt()`方法，这将使我们能够提取原始字符串的部分，以便构建结果字符串。
- en: But to search or modify parts of character strings, it is better to use regular
    expressions. We study them below.
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 但为了搜索或修改字符字符串的部分，最好使用正则表达式。我们将在下面学习它们。
- en: Using regular expressions
  id: totrans-597
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用正则表达式
- en: Regular expressions are related to strings. They are used to check whether a
    string has a certain format (for example, the format of an email, of a telephone
    number, and so on), or to replace the characters that are in this format with
    others.
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式与字符串相关。它们用于检查字符串是否具有某种格式（例如，电子邮件格式、电话号码格式等），或者用其他字符替换这些格式的字符。
- en: For this, the `String` class has the `match(regexp)` method to check whether
    a character string has a given format and the `replace(regexp, str)` method to
    replace the part of the string in this format with the new string `str`.
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`String`类有`match(regexp)`方法来检查字符字符串是否具有特定的格式，以及`replace(regexp, str)`方法来将此格式中的字符串部分替换为新字符串`str`。
- en: In both methods, the `regexp` parameter corresponds to a regular expression,
    the meaning of which we will study next.
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种方法中，`regexp`参数对应于正则表达式，其含义我们将在下面学习。
- en: Checking whether a string has a given format
  id: totrans-601
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查字符串是否具有特定的格式
- en: The `match(regexp)` method is used to check whether the character string on
    which the method is used is in the format indicated in `regexp`. The `regexp`
    parameter is called a regular expression.
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: '`match(regexp)`方法用于检查方法所用的字符字符串是否与`regexp`中指示的格式相符。`regexp`参数被称为正则表达式。'
- en: Regular Expressions
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式
- en: A regular expression is a sequence of characters surrounded by `/` and `/`,
    for example, `/abc/`. The regular expression `/abc/` means that we are looking
    for the sequence of characters `abc` in the character string. If the string contains
    the sequence `abc`, the `match(/abc/)` method returns this sequence of characters
    as a result, otherwise it returns the value `null`.
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式是由`/`和`/`包围的字符序列，例如，`/abc/`。正则表达式`/abc/`表示我们在字符字符串中寻找字符序列`abc`。如果字符串包含序列`abc`，则`match(/abc/)`方法将返回此字符序列作为结果，否则返回值`null`。
- en: A full description of regular expressions can be found at [https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/RegExp](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/RegExp).
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式的完整描述可以在[https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/RegExp](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/RegExp)找到。
- en: 'Here are some examples of regular expressions with the values returned when
    using the `match()` method on the string `"Hello"`:'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些正则表达式的示例，以及当在字符串`"Hello"`上使用`match()`方法时返回的值：
- en: Using match(regexp)
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 使用match(regexp)
- en: '[PRE262]'
  id: totrans-608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: '[PRE263]'
  id: totrans-609
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '[PRE264]'
  id: totrans-610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-612
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '[PRE267]'
  id: totrans-613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-614
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '[PRE269]'
  id: totrans-615
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-617
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '[PRE272]'
  id: totrans-618
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-619
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '[PRE274]'
  id: totrans-620
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-621
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '[PRE276]'
  id: totrans-622
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '[PRE277]'
  id: totrans-623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: When the regular expression is found in the `"Hello"` string, the part of the
    string found is returned by the `match()` method, otherwise it returns `null`.
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 当正则表达式在`"Hello"`字符串中找到时，`match()`方法将返回找到的字符串部分，否则返回`null`。
- en: The `i` sign at the end of the regular expression indicates that uppercase or
    lowercase letters must be ignored.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式末尾的`i`标志表示必须忽略大小写字母。
- en: The square brackets `[` and `]` around a series of letters mean that only one
    of these letters is required.
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 一系列字母周围的方括号`[`和`]`表示只需要这些字母中的一个。
- en: The question mark `?` means that the preceding character is optional (it can
    be present or not).
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 问号`?`表示前面的字符是可选的（它可以出现，也可以不出现）。
- en: The braces `{min,max}` mean that the preceding character must be present at
    least `min` times and at most `max` times.
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 大括号`{min,max}`表示前面的字符至少出现`min`次，最多出现`max`次。
- en: 'The result of the previous program is as follows:'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 之前程序的输出如下：
- en: '![Figure 2.29 – Using regular expressions'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.29 – 使用正则表达式'
- en: '](img/Figure_2.29_B17416.jpg)'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.29 – 使用正则表达式](img/Figure_2.29_B17416.jpg)'
- en: Figure 2.29 – Using regular expressions
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.29 – 使用正则表达式
- en: Note
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Writing a regular expression can sometimes be complex to formulate. The site
    [https://regex101.com/](https://regex101.com/) allows you to test the regular
    expressions you want.
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 编写正则表达式有时可能比较复杂。网站[https://regex101.com/](https://regex101.com/)允许您测试您想要的正则表达式。
- en: A regular expression can also modify parts of character strings, using the `replace()`
    method.
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式也可以使用 `replace()` 方法修改字符字符串的部分。
- en: Replacing a part of a string with a given format
  id: totrans-636
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 replace() 方法替换字符串的一部分
- en: The `replace(regexp, str)` method is used to replace the part of the string
    having the format of the regular expression `regexp` with the string `str`. It
    returns a new string, and the original one is not modified. If the format indicated
    by the regular expression is not found, the original string is returned with no
    modifications.
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: '`replace(regexp, str)` 方法用于将字符串中符合正则表达式 `regexp` 格式的部分替换为字符串 `str`。它返回一个新的字符串，而原始字符串不会被修改。如果正则表达式指示的格式未找到，则返回原始字符串，不做任何修改。'
- en: 'Let’s take the regular expressions from the previous example and replace the
    string found with the string “abc”, thanks to the regular expressions:'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们取前一个示例中的正则表达式，并使用正则表达式将找到的字符串替换为字符串“abc”：
- en: Using the replace() method
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 replace() 方法
- en: '[PRE278]'
  id: totrans-640
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '[PRE280]'
  id: totrans-642
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '[PRE281]'
  id: totrans-643
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: '[PRE282]'
  id: totrans-644
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '[PRE283]'
  id: totrans-645
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: '[PRE284]'
  id: totrans-646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '[PRE285]'
  id: totrans-647
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: '[PRE286]'
  id: totrans-648
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '[PRE287]'
  id: totrans-649
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '[PRE288]'
  id: totrans-650
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '[PRE289]'
  id: totrans-651
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '[PRE290]'
  id: totrans-652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '[PRE291]'
  id: totrans-653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '[PRE292]'
  id: totrans-654
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '[PRE293]'
  id: totrans-655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[PRE294]'
  id: totrans-656
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-657
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-658
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '[PRE297]'
  id: totrans-659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '[PRE298]'
  id: totrans-660
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-661
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: 'The output is shown here:'
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '![Figure 2.30 – Using the replace() method'
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.30 – 使用 replace() 方法'
- en: '](img/Figure_2.30_B17416.jpg)'
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.30_B17416.jpg)'
- en: Figure 2.30 – Using the replace() method
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.30 – 使用 replace() 方法
- en: All executions of previous programs were executed immediately. We are now going
    to study how to perform deferred processing over time.
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: 所有之前的程序执行都是立即执行的。我们现在将研究如何执行延迟处理。
- en: Multitasking in JavaScript
  id: totrans-667
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript 中的多任务处理
- en: 'When you start coding in JavaScript, a question often comes up: is it possible
    to perform several processes simultaneously (what is called multitasking in computing)?
    This would be useful if a process to be executed will take a long time, so as
    not to block other equally urgent processes.'
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始用 JavaScript 编码时，经常会遇到一个问题：是否可以同时执行多个过程（在计算机中称为多任务处理）？如果需要执行的过程将花费很长时间，这将非常有用，以免阻塞其他同样紧急的过程。
- en: JavaScript does not allow several processing operations to be carried out simultaneously.
    On the other hand, it is possible not to block the program (both on the client
    side in the browser, and on the server side with Node.js) by using the callback
    function (which we have already talked about when studying the `forEach()`method
    in the *Accessing an element with the forEach(callback) method* section).
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 不允许同时执行多个处理操作。另一方面，可以通过使用回调函数（在我们研究 *使用 forEach(callback) 方法访问元素*
    部分时已经讨论过的）不阻塞程序（在浏览器客户端和 Node.js 服务器端）。
- en: Callback Function
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数
- en: A callback function corresponds to a processing function used as parameters
    of a JavaScript method or function. The callback function will be executed at
    the desired time by the method or function that uses it.
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数对应于用作 JavaScript 方法或函数参数的处理函数。回调函数将由使用它的方法或函数在期望的时间执行。
- en: Node.js makes extensive use of this feature. For example, when reading a file,
    the `readFile(callback)` method calls the callback function as a parameter when
    the file has been read, which allows the program not to block the pending processing
    of the file to be read.
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 广泛使用此功能。例如，在读取文件时，`readFile(callback)` 方法在文件被读取时将回调函数作为参数调用，这允许程序不阻塞待读取文件的挂起处理。
- en: 'JavaScript defines as standard two main functions that use this callback function
    concept: the `setTimeout()` and `setInterval()` functions. Both these use a callback
    function as a parameter. We’ll describe these two functions next.'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 定义了两个主要的标准函数，它们使用此回调函数概念：`setTimeout()` 和 `setInterval()` 函数。这两个函数都使用回调函数作为参数。我们将在下面描述这两个函数。
- en: Using the setTimeout() function
  id: totrans-674
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 setTimeout() 函数
- en: The `setTimeout(callback, timeout)` function is used to position a processing
    function (the `callback` function) that will be executed when the time period
    expressed by `timeout` (in milliseconds) has elapsed.
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: '`setTimeout(callback, timeout)` 函数用于定位一个将在 `timeout`（以毫秒为单位）表示的时间间隔过去后执行的执行函数（`callback`
    函数）。'
- en: 'This allows you, for example, to perform processing after 5 seconds (that is,
    5,000 milliseconds). You can execute other instructions while waiting for this
    delay, so the program is not blocked during this time:'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许你，例如，在 5 秒后（即 5,000 毫秒）执行处理。你可以在等待这个延迟的同时执行其他指令，因此程序在这段时间内不会被阻塞：
- en: Processing instructions after a delay of 5 seconds
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: 延迟 5 秒后的处理指令
- en: '[PRE300]'
  id: totrans-678
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: '[PRE301]'
  id: totrans-679
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: '[PRE302]'
  id: totrans-680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '[PRE303]'
  id: totrans-681
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: '[PRE304]'
  id: totrans-682
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: We display a message (`"Before setTimeout()"`) in the console at the start of
    the program. We program a delay of 5 seconds, after which a callback function
    is triggered, which displays another message in the console (`"In the callback
    function"`). Finally, we end the program by displaying a new message (`"After
    setTimeout()"`).
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在程序开始时在控制台中显示一条消息（`"Before setTimeout()"`）。我们编程一个 5 秒的延迟，之后触发一个回调函数，在控制台中显示另一条消息（`"In
    the callback function"`）。最后，我们通过显示一条新消息（`"After setTimeout()"`）来结束程序。
- en: Let’s run this program with the `node testnode.js` command, for example. To
    test this program in a browser, simply place the preceding JavaScript code between
    the `<script>` and `</script>` tags of the `index.html` file.
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用 `node testnode.js` 命令运行此程序。要在浏览器中测试此程序，只需将前面的 JavaScript 代码放置在 `index.html`
    文件的 `<script>` 和 `</script>` 标签之间。
- en: 'The following screenshot shows the display after 1 second:'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了 1 秒后的显示效果：
- en: '![Figure 2.31 – Using setTimeout()'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.31 – 使用 setTimeout()'
- en: '](img/Figure_2.31_B17416.jpg)'
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_2.31_B17416.jpg](img/Figure_2.31_B17416.jpg)'
- en: Figure 2.31 – Using setTimeout()
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 2.31 – 使用 setTimeout()
- en: Note that the display message of the start and that of the end follow each other,
    even though the 5-second time limit has not elapsed. This shows that the program
    is not blocked, waiting for the timeout to expire.
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，开始显示的消息和结束显示的消息是连续的，即使 5 秒的时间限制还没有结束。这表明程序没有被阻塞，等待超时到期。
- en: The following screenshot shows the display after at least 5 seconds (when the
    delay used in the `setTimeout()` method has elapsed).
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了至少 5 秒后的显示效果（当 `setTimeout()` 方法中使用的延迟已过去）。
- en: '![Figure 2.32 – Display when the 5-second delay has elapsed'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.32 – 5 秒延迟后的显示'
- en: '](img/Figure_2.32_B17416.jpg)'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.32 – B17416.jpg](img/Figure_2.32_B17416.jpg)'
- en: Figure 2.32 – Display when the 5-second delay has elapsed
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 2.32 – 5 秒延迟后的显示
- en: We see that when the 5-second delay has elapsed, the callback function registered
    in the `setTimeout()` function is called automatically by the `setTimeout()` function.
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，当 5 秒的延迟过去后，`setTimeout()` 函数中注册的回调函数会自动由 `setTimeout()` 函数调用。
- en: 'Let’s improve the program by displaying the time when the messages are displayed.
    This makes it possible to verify that the 5-second time limit is respected:'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过显示消息显示的时间来改进程序。这使得可以验证是否遵守了 5 秒的时间限制：
- en: Displaying the time when messages are posted
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 显示消息发布的时间
- en: '[PRE305]'
  id: totrans-697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '[PRE306]'
  id: totrans-698
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '[PRE307]'
  id: totrans-699
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '[PRE308]'
  id: totrans-700
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: '[PRE309]'
  id: totrans-701
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: '[PRE310]'
  id: totrans-702
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: '[PRE311]'
  id: totrans-703
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '[PRE312]'
  id: totrans-704
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '[PRE313]'
  id: totrans-705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: '[PRE314]'
  id: totrans-706
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '[PRE315]'
  id: totrans-707
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: '[PRE316]'
  id: totrans-708
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: '[PRE317]'
  id: totrans-709
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: '[PRE318]'
  id: totrans-710
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '[PRE319]'
  id: totrans-711
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: '[PRE320]'
  id: totrans-712
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: The `time()` function is used to generate a character string that contains the
    time in the form HH:MM:SS. This time is displayed at the beginning of each message
    displayed in the console.
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: '`time()` 函数用于生成一个包含 HH:MM:SS 格式的字符字符串。这个时间在每个显示在控制台中的消息的开头显示。'
- en: The `Date` class used here is a JavaScript class that allows you to manage dates
    and to extract hours, minutes, and seconds.
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: 这里使用的 `Date` 类是一个 JavaScript 类，它允许你管理日期并提取小时、分钟和秒。
- en: 'We now get the following:'
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在得到以下结果：
- en: '![Figure 2.33 – Displaying the time when messages are displayed in the console'
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.33 – 显示在控制台中消息显示的时间'
- en: '](img/Figure_2.33_B17416.jpg)'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_2.33_B17416.jpg](img/Figure_2.33_B17416.jpg)'
- en: Figure 2.33 – Displaying the time when messages are displayed in the console
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 2.33 – 显示在控制台中消息显示的时间
- en: We can clearly see that the callback function is executed at the end of the
    5-second period indicated in the parameter of the `setTimeout()` function.
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以清楚地看到，回调函数是在 `setTimeout()` 函数参数中指定的 5 秒周期的末尾执行的。
- en: Using the setInterval() function
  id: totrans-720
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 setInterval() 函数
- en: The `setInterval(callback, timeout)` function is similar to the `setTimeout()`
    function seen previously. But instead of executing the callback function only
    once at the end of the delay (as the `setTimeout()` function does), the `setInterval()`
    function executes the callback function repeatedly by setting a new delay at the
    end of it. The callback function is therefore executed at regular intervals. The
    only way to stop this cycle is to use the `clearInterval()` function.
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: '`setInterval(callback, timeout)` 函数与之前看到的 `setTimeout()` 函数类似。但与 `setTimeout()`
    函数只在延迟结束时只执行一次回调函数不同，`setInterval()` 函数会在每次回调函数执行结束后设置一个新的延迟，从而重复执行回调函数。因此，回调函数会以固定的时间间隔执行。停止这个循环的唯一方法是使用
    `clearInterval()` 函数。'
- en: The `setInterval()` function is very useful for running processes at regular
    intervals.
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: '`setInterval()` 函数对于定期运行进程非常有用。'
- en: 'Let’s use the `setInterval()` function to display, every second, the value
    of a counter initialized to `1`. The counter is incremented every second:'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 `setInterval()` 函数每秒显示一个初始化为 `1` 的计数器的值。计数器每秒递增：
- en: Incrementing a counter every second
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE321]'
  id: totrans-725
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: '[PRE322]'
  id: totrans-726
  prefs: []
  type: TYPE_PRE
  zh: '[PRE322]'
- en: '[PRE323]'
  id: totrans-727
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: '[PRE324]'
  id: totrans-728
  prefs: []
  type: TYPE_PRE
  zh: '[PRE324]'
- en: '[PRE325]'
  id: totrans-729
  prefs: []
  type: TYPE_PRE
  zh: '[PRE325]'
- en: '[PRE326]'
  id: totrans-730
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: '[PRE327]'
  id: totrans-731
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: '[PRE328]'
  id: totrans-732
  prefs: []
  type: TYPE_PRE
  zh: '[PRE328]'
- en: '[PRE329]'
  id: totrans-733
  prefs: []
  type: TYPE_PRE
  zh: '[PRE329]'
- en: '[PRE330]'
  id: totrans-734
  prefs: []
  type: TYPE_PRE
  zh: '[PRE330]'
- en: '[PRE331]'
  id: totrans-735
  prefs: []
  type: TYPE_PRE
  zh: '[PRE331]'
- en: '[PRE332]'
  id: totrans-736
  prefs: []
  type: TYPE_PRE
  zh: '[PRE332]'
- en: '[PRE333]'
  id: totrans-737
  prefs: []
  type: TYPE_PRE
  zh: '[PRE333]'
- en: '[PRE334]'
  id: totrans-738
  prefs: []
  type: TYPE_PRE
  zh: '[PRE334]'
- en: '[PRE335]'
  id: totrans-739
  prefs: []
  type: TYPE_PRE
  zh: '[PRE335]'
- en: '[PRE336]'
  id: totrans-740
  prefs: []
  type: TYPE_PRE
  zh: '[PRE336]'
- en: '[PRE337]'
  id: totrans-741
  prefs: []
  type: TYPE_PRE
  zh: '[PRE337]'
- en: 'This is what you will see:'
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.34 – Incrementing a counter every second'
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.34_B17416.jpg)'
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.34 – Incrementing a counter every second
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
- en: The counter increments every second, indefinitely. To stop this endless cycle,
    you have to use a new JavaScript function, which is `clearInterval()`.
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
- en: Using the clearInterval() function
  id: totrans-747
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `clearInterval(timer)` function is used to stop the cycle started during
    the `setInterval()` instruction.
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that multiple timers can be started by multiple calls to the `setInterval()`
    function. So the `clearInterval(timer)` function must specify which timer it wants
    to stop: the `timer` parameter is used to tell it.'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
- en: To do this, the `setInterval()` function returns the `timer` parameter that
    will be used when calling the `clearInterval(timer)` function.
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s use the `clearInterval()` function to stop the timer when the `count`
    counter has reached the value `5`:'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
- en: Using the clearInterval() function to stop the timer
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE338]'
  id: totrans-754
  prefs: []
  type: TYPE_PRE
  zh: '[PRE338]'
- en: '[PRE339]'
  id: totrans-755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE339]'
- en: '[PRE340]'
  id: totrans-756
  prefs: []
  type: TYPE_PRE
  zh: '[PRE340]'
- en: '[PRE341]'
  id: totrans-757
  prefs: []
  type: TYPE_PRE
  zh: '[PRE341]'
- en: '[PRE342]'
  id: totrans-758
  prefs: []
  type: TYPE_PRE
  zh: '[PRE342]'
- en: '[PRE343]'
  id: totrans-759
  prefs: []
  type: TYPE_PRE
  zh: '[PRE343]'
- en: '[PRE344]'
  id: totrans-760
  prefs: []
  type: TYPE_PRE
  zh: '[PRE344]'
- en: '[PRE345]'
  id: totrans-761
  prefs: []
  type: TYPE_PRE
  zh: '[PRE345]'
- en: '[PRE346]'
  id: totrans-762
  prefs: []
  type: TYPE_PRE
  zh: '[PRE346]'
- en: '[PRE347]'
  id: totrans-763
  prefs: []
  type: TYPE_PRE
  zh: '[PRE347]'
- en: '[PRE348]'
  id: totrans-764
  prefs: []
  type: TYPE_PRE
  zh: '[PRE348]'
- en: '[PRE349]'
  id: totrans-765
  prefs: []
  type: TYPE_PRE
  zh: '[PRE349]'
- en: '[PRE350]'
  id: totrans-766
  prefs: []
  type: TYPE_PRE
  zh: '[PRE350]'
- en: '[PRE351]'
  id: totrans-767
  prefs: []
  type: TYPE_PRE
  zh: '[PRE351]'
- en: '[PRE352]'
  id: totrans-768
  prefs: []
  type: TYPE_PRE
  zh: '[PRE352]'
- en: '[PRE353]'
  id: totrans-769
  prefs: []
  type: TYPE_PRE
  zh: '[PRE353]'
- en: '[PRE354]'
  id: totrans-770
  prefs: []
  type: TYPE_PRE
  zh: '[PRE354]'
- en: '[PRE355]'
  id: totrans-771
  prefs: []
  type: TYPE_PRE
  zh: '[PRE355]'
- en: '[PRE356]'
  id: totrans-772
  prefs: []
  type: TYPE_PRE
  zh: '[PRE356]'
- en: '[PRE357]'
  id: totrans-773
  prefs: []
  type: TYPE_PRE
  zh: '[PRE357]'
- en: 'The program of the callback function is modified: as soon as the counter reaches
    `5`, the timer is stopped. Otherwise, the counter is incremented by 1.'
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
- en: 'Check that the count stops after 5 times:'
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.35 – Timer stops after 5 counts'
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.35_B17416.jpg)'
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.35 – Timer stops after 5 counts
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
- en: The callback function that is used in the `setTimeout()` or `setInterval()`
    functions is included directly in the parameters of each function. JavaScript
    makes it easier to write callback functions by using a new type of object called
    a promise.
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
- en: Using promises
  id: totrans-780
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Promises are another way to use callback functions. Rather than integrating
    the callback function into the method call (as a parameter), we use it as a parameter
    of the new `then(callback)` method. This simplifies the reading of JavaScript
    code in case it uses callback functions.
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
- en: For an object to use the `then(callback)` method, it must be a `Promise` class
    object. The `Promise` class is a class defined in JavaScript language.
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
- en: The Promise Class
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
- en: A `Promise` class object uses a callback function of the form `callback(resolve,
    reject)` as a parameter of its constructor.
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
- en: 'The `resolve` and `reject` parameters are functions, which will be called from
    the promise’s callback:'
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
- en: When the `resolve()` function is called, it triggers the `then(callback)` method.
  id: totrans-786
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the `reject()` function is called, it triggers the `catch(callback)` method.
  id: totrans-787
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `resolve()` function must be called, otherwise the `then(callback)` method
    cannot be executed. On the other hand, calling the `reject()` function is optional,
    and if it is not used, the `catch(callback)` method will not be called (and therefore
    does not have to be present in the program).
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to the `resolve` and `reject` parameters, we therefore have the possibility
    of executing the cases of success (with the `then(callback)` method) and the cases
    of failure (with the `catch(callback)` method). This way of writing ensures more
    readability of the JavaScript code.
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
- en: To illustrate this, let’s take the example of the `setTimeout(callback, timeout)`
    function seen previously. The callback function is included in the method call
    here, which we want to avoid with promises. Let’s write the new `wait(timeout)`
    method that can be used in the form `wait(timeout).then(callback)`. The callback
    function is now externalized from the `wait()` method.
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这一点，让我们以之前看到的`setTimeout(callback, timeout)`函数为例。这里的回调函数包含在方法调用中，我们希望使用Promise来避免这种情况。让我们编写新的`wait(timeout)`方法，它可以以`wait(timeout).then(callback)`的形式使用。现在，回调函数已经从`wait()`方法外部化。
- en: The callback function registered in the `then(callback)` method will be called
    when the timeout expires.
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: 当超时到期时，将调用在`then(callback)`方法中注册的回调函数。
- en: This form of writing is more readable than the previous one with `setTimeout()`,
    because it thus shows the delay before a process is executed.
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: 这种写法比之前的`setTimeout()`写法更易读，因为它显示了在执行过程之前的时间延迟。
- en: 'To achieve this, the `wait(timeout)` method must return a `Promise` object:'
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现这一点，`wait(timeout)`方法必须返回一个`Promise`对象：
- en: Creating the Promise object, then using the then() method
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: 创建Promise对象，然后使用then()方法
- en: '[PRE358]'
  id: totrans-795
  prefs: []
  type: TYPE_PRE
  zh: '[PRE358]'
- en: '[PRE359]'
  id: totrans-796
  prefs: []
  type: TYPE_PRE
  zh: '[PRE359]'
- en: '[PRE360]'
  id: totrans-797
  prefs: []
  type: TYPE_PRE
  zh: '[PRE360]'
- en: '[PRE361]'
  id: totrans-798
  prefs: []
  type: TYPE_PRE
  zh: '[PRE361]'
- en: '[PRE362]'
  id: totrans-799
  prefs: []
  type: TYPE_PRE
  zh: '[PRE362]'
- en: '[PRE363]'
  id: totrans-800
  prefs: []
  type: TYPE_PRE
  zh: '[PRE363]'
- en: '[PRE364]'
  id: totrans-801
  prefs: []
  type: TYPE_PRE
  zh: '[PRE364]'
- en: '[PRE365]'
  id: totrans-802
  prefs: []
  type: TYPE_PRE
  zh: '[PRE365]'
- en: '[PRE366]'
  id: totrans-803
  prefs: []
  type: TYPE_PRE
  zh: '[PRE366]'
- en: '[PRE367]'
  id: totrans-804
  prefs: []
  type: TYPE_PRE
  zh: '[PRE367]'
- en: '[PRE368]'
  id: totrans-805
  prefs: []
  type: TYPE_PRE
  zh: '[PRE368]'
- en: '[PRE369]'
  id: totrans-806
  prefs: []
  type: TYPE_PRE
  zh: '[PRE369]'
- en: '[PRE370]'
  id: totrans-807
  prefs: []
  type: TYPE_PRE
  zh: '[PRE370]'
- en: '[PRE371]'
  id: totrans-808
  prefs: []
  type: TYPE_PRE
  zh: '[PRE371]'
- en: '[PRE372]'
  id: totrans-809
  prefs: []
  type: TYPE_PRE
  zh: '[PRE372]'
- en: '[PRE373]'
  id: totrans-810
  prefs: []
  type: TYPE_PRE
  zh: '[PRE373]'
- en: '[PRE374]'
  id: totrans-811
  prefs: []
  type: TYPE_PRE
  zh: '[PRE374]'
- en: '[PRE375]'
  id: totrans-812
  prefs: []
  type: TYPE_PRE
  zh: '[PRE375]'
- en: '[PRE376]'
  id: totrans-813
  prefs: []
  type: TYPE_PRE
  zh: '[PRE376]'
- en: '[PRE377]'
  id: totrans-814
  prefs: []
  type: TYPE_PRE
  zh: '[PRE377]'
- en: '[PRE378]'
  id: totrans-815
  prefs: []
  type: TYPE_PRE
  zh: '[PRE378]'
- en: '[PRE379]'
  id: totrans-816
  prefs: []
  type: TYPE_PRE
  zh: '[PRE379]'
- en: The `wait()` method returns a `Promise` object thanks to the `return new Promise()`
    statement. In the `callback(resolve, reject)` function, we call the `resolve()`
    function when we consider that the `then()` method can execute, here at the end
    of the timeout.
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: '`wait()`方法通过`return new Promise()`语句返回一个`Promise`对象。在`callback(resolve, reject)`函数中，当我们认为`then()`方法可以执行时，我们调用`resolve()`函数，这里是在超时结束时。'
- en: It is possible to specify arguments for the `resolve()` and `reject()` methods.
    These arguments will be used in the callback functions used in the `then(callback)`
    or `catch(callback)` methods. For example, here, we call the `resolve(sec)` method,
    which allows us to use the `sec` parameter in the callback function of the `then()`
    method.
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: 可以为`resolve()`和`reject()`方法指定参数。这些参数将在`then(callback)`或`catch(callback)`方法中使用的回调函数中使用。例如，在这里，我们调用`resolve(sec)`方法，这使得我们可以在`then()`方法的回调函数中使用`sec`参数。
- en: Note
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Notice that the `reject()` function is not used in our example because no error
    cases can occur here. The `resolve()` function must, however, be called; otherwise,
    the `then()` method will never be executed.
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在我们的示例中未使用`reject()`函数，因为没有错误情况可以发生。然而，必须调用`resolve()`函数；否则，`then()`方法将永远不会执行。
- en: The `time()` function is used to display the times of each process to check
    that the execution is correct.
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: '`time()`函数用于显示每个过程的执行时间，以检查执行是否正确。'
- en: '![Figure 2.36 – Using the then() method'
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.36 – 使用then()方法'
- en: '](img/Figure_2.36_B17416.jpg)'
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.36 – 使用then()方法](img/Figure_2.36_B17416.jpg)'
- en: Figure 2.36 – Using the then() method
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.36 – 使用then()方法
- en: This brings us to the end of the chapter.
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 这就带我们结束了本章的内容。
- en: Summary
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we went through advanced concepts related to JavaScript.
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了与JavaScript相关的高级概念。
- en: We learned how to use classes and objects, particularly the `Array` and `String`
    classes. We also saw how to delay the execution of instructions.
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何使用类和对象，特别是`Array`和`String`类。我们还看到了如何延迟指令的执行。
- en: In the rest of the book, we will discover the use of the Vue.js JavaScript library
    associated with the client side of application development.
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的其余部分，我们将发现与客户端应用开发相关的Vue.js JavaScript库的使用。
- en: We will see how the knowledge obtained here will allow us to use this language
    in aspects of client-side and then server-side programming.
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到如何利用在这里获得的知识，使我们能够在客户端和服务器端编程的各个方面使用这种语言。
