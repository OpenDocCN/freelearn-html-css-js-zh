- en: Chapter 1. Understanding Backbone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: Designing an application with the MVC pattern
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining business logic with models and collections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modeling an application's behavior with views and a router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an application structure from scratch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing your first Backbone application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing URL routing in your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending an application with plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contributing to the Backbone project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Backbone.js is a lightweight JavaScript framework that is based on the Model-View-Controller
    (MVC) pattern and allows developers to create single-page web applications. With
    Backbone, it is possible to update a web page quickly using the REST approach
    with a minimal amount of data transferred between a client and a server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Backbone.js is becoming more popular day by day and is being used on a large
    scale for web applications and IT startups; some of them are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Groupon Now!: The team decided that their first product would be AJAX-heavy
    but should still be linkable and shareable. Though they were completely new to
    Backbone, they found that its learning curve was incredibly quick, so they were
    able to deliver the working product in just two weeks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Foursquare: This used the Backbone.js library to create model classes for the
    entities in foursquare (for example, venues, check-ins, and users). They found
    that Backbone''s model classes provide a simple and light-weight mechanism to
    capture an object''s data and state, complete with the semantics of a classical
    inheritance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'LinkedIn mobile: This used Backbone.js to create its next-generation HTML5
    mobile web app. Backbone made it easy to keep the app modular, organized, and
    extensible, so it was possible to program the complexities of LinkedIn''s user
    experience. Moreover, they are using the same code base in their mobile applications
    for iOS and Android platforms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'WordPress.com: This is a SaaS version of Wordpress and uses Backbone.js models,
    collections, and views in its notification system, and is integrating Backbone.js
    into the Stats tab and into other features throughout the home page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Airbnb: This is a community marketplace for users to list, discover, and book
    unique spaces around the world. Its development team has used Backbone in many
    latest products. Recently, they rebuilt a mobile website with Backbone.js and
    Node.js tied together with a library named Rendr.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can visit the following links to get acquainted with other usage examples
    of Backbone.js:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://backbonejs.org/#examples](http://backbonejs.org/#examples)'
  prefs: []
  type: TYPE_NORMAL
- en: Backbone.js was started by Jeremy Ashkenas from DocumentCloud in 2010 and is
    now being used and improved by lots of developers all over the world using Git,
    the distributed version control system.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to provide some practical examples of how to use
    Backbone.js, and we will structure a design for a program named Billing Application
    by following the MVC and Backbone pattern. We will also refer to this structure
    in the later chapters of this book. Reading this chapter is especially useful
    if you are new to developing with Backbone.js. If you feel that you're an experienced
    developer, you can skip this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Designing an application with the MVC pattern
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MVC is a design pattern that is widely used in user-facing software, such as
    web applications. It is intended for splitting data and representing it in a way
    that makes it convenient for user interaction. To understand what it does, understand
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Model: This contains data and provides business logic used to run the application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'View: This presents the model to the user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Controller: This reacts to user input by updating the model and the view'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There could be some differences in the MVC implementation, but in general it
    conforms to the following scheme:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Designing an application with the MVC pattern](img/2728_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Worldwide practice shows that the use of the MVC pattern provides various benefits
    to the developer:'
  prefs: []
  type: TYPE_NORMAL
- en: Following the separation of the concerned paradigm, which splits an application
    into independent parts, it is easier to modify or replace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It achieves code reusability by rendering a model in different views without
    the need to implement model functionality in each view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It requires less training and has a quicker startup time for the new developers
    within an organization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To have a better understanding of the MVC pattern, we are going to design a
    Billing Application. We will refer to this design throughout the book when we
    are learning specific topics.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our Billing Application will allow users to generate invoices, manage them,
    and send them to clients. According to the worldwide practice, the invoice should
    contain a reference number, date, information about the buyer and seller, bank
    account details, a list of provided products or services, and an invoice sum.
    Let''s have a look at the following screenshot to understand how an invoice appears:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Designing an application with the MVC pattern](img/2728_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s follow the ensuing steps to design an MVC structure for the Billing
    Application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s write down a list of functional requirements for this application. We
    assume that the end user may want to be able to do the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generate an invoice
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: E-mail the invoice to the buyer
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Print the invoice
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: See a list of existing invoices
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage invoices (create, read, update, and delete)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Update an invoice status (draft, issued, paid, and canceled)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: View a yearly income graph and other reports
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To simplify the process of creating multiple invoices, the user may want to
    manage information about buyers and his personal details in the specific part
    of the application before he/she creates an invoice. So, our application should
    provide additional functionalities to the end user, such as the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The ability to see a list of buyers and use it when generating an invoice
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to manage buyers (create, read, update, and delete)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to see a list of bank accounts and use it when generating an invoice
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to manage his/her own bank accounts (create, read, update, and delete)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to edit personal details and use them when generating an invoice
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, we may want to have more functions, but this is enough for demonstrating
    how to design an application using the MVC pattern.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, we architect an application using the MVC pattern.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After we have defined the features of our application, we need to understand
    what is more related to the model (business logic) and what is more related to
    the view (presentation). Let's split the functionality into several parts.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then, we learn how to define models.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Models present data and provide data-specific business logic. Models can be
    related to each other. In our case, they are as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: InvoiceModel
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: InvoiceItemModel
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: BuyerModel
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SellerModel
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: BankAccountModel
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, will define collections of models.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our application allows users to operate on a number of models, so they need
    to be organized into a special iterable object named Collection. We need the following
    collections:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: InvoiceCollection
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: InvoiceItemCollection
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: BuyerCollection
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: BankAccountCollection
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we define views.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'View present a model or a collection to the application user. A single model
    or collection can be rendered to be used by multiple views. The views that we
    need in our application are as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: EditInvoiceFormView
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: InvoicePageView
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: InvoiceListView
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: PrintInvoicePageView
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: EmailInvoiceFormView
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: YearlyIncomeGraphView
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: EditBuyerFormView
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: BuyerPageView
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: BuyerListView
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: EditBankAccountFormView
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: BankAccountPageView
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: BankAccountListView
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: EditSellerInfoFormView
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ViewSellectInfoPageView
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ConfirmationDialogView
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we define a controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A controller allows users to interact with an application. In MVC, each view
    can have a different controller that is used to do following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Map a URL to a specific view
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetch models from a server
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Show and hide views
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Handle user input
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining business logic with models and collections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, it is time to design business logic for the Billing Application using the
    MVC and OOP approaches.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we are going to define an internal structure for our application
    with model and collection objects. Although a model represents a single object,
    a collection is a set of models that can be iterated, filtered, and sorted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Relations between models and collections in the Billing Application conform
    to the following scheme:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining business logic with models and collections](img/2728_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For each model, we are going to create two tables: one for properties and another
    for methods:'
  prefs: []
  type: TYPE_NORMAL
- en: We define BuyerModel properties.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Name | Type | Required | Unique |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| id | Integer | Yes | Yes |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| name | Text | Yes |   |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| address | Text | Yes |   |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| phoneNumber | Text | No |   |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Then, we define SellerModel properties.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Name | Type | Required | Unique |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| id | Integer | Yes | Yes |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| name | Text | Yes |   |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| address | Text | Yes |   |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| phoneNumber | Text | No |   |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| taxDetails | Text | Yes |   |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: After this, we define BankAccountModel properties.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Name | Type | Required | Unique |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| id | Integer | Yes | Yes |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| beneficiary | Text | Yes |   |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| beneficiaryAccount | Text | Yes |   |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| bank | Text | Yes |   |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| SWIFT | Text | Yes |   |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| specialInstructions | Text | No |   |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: We define InvoiceItemModel properties.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Name | Arguments | Return Type | Unique |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| calculateAmount | - | Decimal |   |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Next, we define InvoiceItemModel methods.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We don't need to store the item amount in the model, because it always depends
    on the price and the quantity, so it can be calculated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| Name | Type | Required | Unique |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| id | Integer | Yes | Yes |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| deliveryDate | Date | Yes |   |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| description | Text | Yes |   |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| price | Decimal | Yes |   |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| quantity | Decimal | Yes |   |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Now, we define InvoiceModel properties.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Name | Type | Required | Unique |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| id | Integer | Yes | Yes |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| referenceNumber | Text | Yes |   |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| date | Date | Yes |   |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| bankAccount | Reference | Yes |   |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| items | Collection | Yes |   |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| comments | Text | No |   |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| status | Integer | Yes |   |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: We define InvoiceModel methods.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The invoice amount can easily be calculated as the sum of invoice item amounts.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| Name | Arguments | Return Type | Unique |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| calculateAmount |   | Decimal |   |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Finally, we define collections.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In our case, they are InvoiceCollection, InvoiceItemCollection, BuyerCollection,
    and BankAccountCollection. They are used to store models of an appropriate type
    and provide some methods to add/remove models to/from the collections.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Models in Backbone.js are implemented by extending Backbone.Model, and collections
    are made by extending Backbone.Collection. To implement relations between models
    and collections, we can use special Backbone extensions, which are described in
    the later chapters of this book.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Operating with model attributes recipe in [Chapter 2](ch02.html "Chapter 2. Models"),
    Models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Creating a collection of models recipe in [Chapter 3](ch03.html "Chapter 3. Collections"),
    Collections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To learn more about object properties, methods, and OOP programming in JavaScript,
    you can refer to the following resource:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en-US/docs/JavaScript/Introduction_to_Object-Oriented_JavaScript](https://developer.mozilla.org/en-US/docs/JavaScript/Introduction_to_Object-Oriented_JavaScript)'
  prefs: []
  type: TYPE_NORMAL
- en: Modeling an application's behavior with views and a router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Unlike traditional MVC frameworks, Backbone does not provide any distinct object
    that implements controller functionality. Instead, the controller is diffused
    between Backbone.Router and Backbone. View and the following is done:'
  prefs: []
  type: TYPE_NORMAL
- en: A router handles URL changes and delegates application flow to a view. Typically,
    the router fetches a model from the storage asynchronously. When the model is
    fetched, it triggers a view update.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A view listens to DOM events and either updates a model or navigates an application
    through a router.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram shows a typical workflow in a Backbone application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Modeling an application''s behavior with views and a router](img/2728_01_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s follow the ensuing steps to understand how to define basic views and
    a router in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to create wireframes for an application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s draw a couple of wireframes in this recipe:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The Edit Invoice page allows users to select a buyer, to select the seller's
    bank account from the lists, to enter the invoice's date and a reference number,
    and to build a table of shipped products and services.![How to do it...](img/2728_01_03.jpg)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The Preview Invoice page shows how the final invoice will be seen by a buyer.
    This display should render all the information we have entered in the Edit Invoice
    form. Buyer and seller information can be looked up in the application storage.
    The user has the option to either go back to the Edit display or save this invoice.![How
    to do it...](img/2728_01_04.jpg)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we will define view objects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'According to the previous wireframes, we need to have two main views: EditInvoiceFormView
    and PreviewInvoicePageView. These views will operate with InvoiceModel; it refers
    to other objects, such as BankAccountModel and InvoiceItemCollection.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, we will split views into subviews.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For each item in the Products or Services table, we may want to recalculate
    the Amount field depending on what the user enters in the Price and Quantity fields.
    The first way to do this is to re-render the entire view when the user changes
    the value in the table; however, it is not an efficient way, and it takes a significant
    amount of computer power to do this.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We don''t need to re-render the entire view if we want to update a small part
    of it. It is better to split the big view into different, independent pieces,
    such as subviews, that are able to render only a specific part of the big view.
    In our case, we can have the following views:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/2728_01_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: As we can see, EditInvoiceItemTableView and PreviewInvoiceItemTableView render
    InvoiceItemCollection with the help of the additional views EditInvoiceItemView
    and PreviewInvoiceItemView that render InvoiceItemModel. Such separation allows
    us to re-render an item inside a collection when it is changed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, we will define URL paths that will be associated with a corresponding
    view. In our case, we can have several URLs to show different views, for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: /invoice/add
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: /invoice/:id/edit
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: /invoice/:id/preview
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Here, we assume that the Edit Invoice view can be used for either creating a
    new invoice or editing an existing one. In the router implementation, we can load
    this view and show it on specific URLs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Backbone.View object can be extended to create our own view that will render
    model data. In a view, we can define handlers to user actions, such as data input
    and keyboard or mouse events.
  prefs: []
  type: TYPE_NORMAL
- en: In the application, we can have a single Backbone.Router object that allows
    users to navigate through an application by changing the URL in the address bar
    of the browser. The router object contains a list of available URLs and callbacks.
    In a callback function, we can trigger the rendering of a specific view associated
    with a URL.
  prefs: []
  type: TYPE_NORMAL
- en: If we want a user to be able to jump from one view to another, we may want him/her
    to either click on regular HTML links associated with a view or navigate to an
    application programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Models"), Views'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an application structure from scratch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going to talk about how to create a Backbone project
    from scratch. There is important information of which we should be aware when
    dealing with the later chapters of this book.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to speak about Backbone dependencies and the directory structure
    for our project. Let''s follow the ensuing guidelines:'
  prefs: []
  type: TYPE_NORMAL
- en: Download Backbone.js.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Visit [http://backbone.js](http://backbone.js) and download the Backbone.js
    library. There are several versions available: production, development, and an
    edge version.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can use the production version for the best performance because it has been
    optimized and minimized. The development version may be good to use when working
    on the application, so you can use the code completion and debugging features
    of your IDE. And finally, you can use the edge version of Backbone, but do it
    at your own risk, because it may not be fully tested.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Download Backbone dependencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Backbone.js depends on the Underscore.js library, which can be downloaded from
    [http://underscorejs.org](http://underscorejs.org). Underscore is also shipped
    in three different versions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Also, Backbone.js depends on either the jQuery or Zepto libraries. These libraries
    have the same syntax and both provide useful functionality to the developer. They
    simplify work with the document tree, event handling, AJAX, and JavaScript animations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For many examples in this book, we are going to use the jQuery library, which
    can be downloaded from [http://jquery.com](http://jquery.com). It is provided
    with both the development and production versions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a project directory structure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you follow a specific directory structure, it would be easier to find any
    file and work with it, because such an application structure brings more order
    into your project. Here is an example of a directory structure that can be used
    by a simple Backbone application:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'lib/: This is a directory for third-party libraries, such as the following:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'backbone.js: This is the source code of Backbone.js'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'underscore.js: This is the source code of Underscore.js'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'jquery.js: This has sources of jQuery'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'js/: This is the directory of the project''s JavaScript files.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'main.js: This is the main JavaScript file that has been used in the project'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'index.html: This is the main file of our application.'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the main file of the application, which is index.html. It should include
    third-party libraries and your application files, as shown in the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the main JavaScript file named main.js that will contain the code of
    your application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we include our scripts into the head tag, they are executed before the body
    content is processed by a browser and before the whole HTML document is loaded.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In a Backbone application, as in many other JavaScript applications, we want
    to make sure our program starts to run right after the document is loaded, so
    main.js should look like the following code snippet:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use this application template for creating your own Backbone app. We
    are also going to use this template for the examples in this book.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Writing your first Backbone application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going to write our first Backbone application. Let it
    be a simple part of the billing system.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we can implement a model and a view for the invoice item. Let's
    create InvoiceItemModel that contains the Quantity and Price fields and calculates
    the item's amount. We also need to have PreviewInvoiceItemView that is used to
    render a model.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output of our demo application could be very simple, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing your first Backbone application](img/2728_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The new code in this recipe should go into the main.js file that we created
    in the previous recipe; we will do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Define the model by extending it from the Backbone.Model object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the InvoiceItemModel object, we have initialized the default values and performed
    the business logic, a function that calculates the total amount.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a model instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Define the view that will render the model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we can see, our view uses the this.model and this.el properties that are
    passed to the view when it is created.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Inside a view, we used the jQuery library to set the content for the element
    associated with the view $(this.el).html(html). In our case, this.el contains
    'body' that is also a jQuery selector.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Such selectors are similar to CSS selectors and allow jQuery to find an arbitrary
    HTML element using the $() function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To render a view, we simply need to execute the render() method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When rendering a view, we also used a templating engine provided by Underscore.js.
    This templating engine substitutes templates with data and outputs static HTML.
    More information about templates is available in the Using templates in a view
    recipe of [Chapter 6](ch06.html "Chapter 6. Templates and UX sugar"), Templates,
    Forms, and UX Sugar.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are several ways to start an application. If your application has only
    a single view, you can create a new instance of it and render it manually.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An application should be started right after the HTML page is loaded. Let''s
    write some code that will start a simple Backbone application:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Models"), Models'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Collections"), Collections'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Views"), Views'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Events and Bindings"), Events and Bindings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing URL routing in your application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Backbone.Router object is used for navigation inside your application. You
    should use it if you want to access different view pages by hitting the appropriate
    URLs. Users can also navigate through an application using the browser's history
    bar.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the router works well with hash paths, such as index.html#path/to/page.
    Any string that is placed after a hash character is supposed to be a route and
    is processed by Backbone.Router.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, we are going to explain how to create our own router in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: Define a router by extending Backbone.Router into the Workspace object and setting
    pairs of routes and callback functions for them inside the routes property that
    is passed to the extend() method. This gives the router information of which callback
    should be executed in case the appropriate route is accessed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add a callback method to the router object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the user visits index.html or index.html#invoice, the invoiceList() callback
    is executed, which renders InvoiceListView. Here, InvoiceListView is a simple
    stub.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/2728_01_08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Tell Backbone to use this router and start the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we create a new Workspace object and execute the start() method of the
    Backbone.history object that is used for global application routing. As always,
    we should start our application right after the HTML page has loaded completely.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Backbone.Router is used just for defining routes and callbacks. All the important
    jobs are done by Backbone.history that serves as a global router (per frame) to
    handle hashchange or pushState events, match the appropriate route, and trigger
    callbacks. You shouldn't ever have to create an instance of the global router—you
    should use the reference to Backbone.history that will be created for you automatically
    if you make use of routers with routes.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Backbone router allows the defining of routes with parameters, which we are
    going to explain in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Parsing parameters in a URL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we want the router to parse parameters in a URL, we need to use the colon
    character (:) before the parameter's name. Here is an example that demonstrates
    how Backbone.Router parses URLs with a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Paths such as index.html#invoice/1 and index.html#invoice/2 will be parsed by
    a router. In both cases, the invoicePage() callback is executed; it passes the
    ID parameter to InvoiceLPageView and renders it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Parsing parameters in a URL](img/2728_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Validate parameters in your router**'
  prefs: []
  type: TYPE_NORMAL
- en: There is no default way to set a restriction for the data type or format of
    the parameters inside the routes definition. All parameters that are passed to
    the router callbacks are strings, and it is up to the developer to validate them.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Handling router events recipe in [Chapter 5](ch05.html "Chapter 5. Events
    and Bindings"), Events and Bindings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Switching views using Backbone.Router recipe in [Chapter 4](ch04.html "Chapter 4. Views"),
    Views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending an application with plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Backbone's core is small, well-tested, and nicely maintained. However, developers
    may need additional functionalities to be used by a complex web application. The
    power of the Backbone framework depends on modularity and flexibility. Existing
    components can easily be either extended or replaced; thus, many developers create
    their own plugins.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are over 100 plugins that can be downloaded and used in your application
    from [https://github.com/documentcloud/backbone/wiki/Extensions,-Plugins,-Resources](https://github.com/documentcloud/backbone/wiki/Extensions,-Plugins,     -Resources). In this book, we are going to use some of them, so we need to know
    how to extend our application with plugins.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If the plugin is a single JavaScript file, simply copy it into the lib folder
    of the project and include it in index.html.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, if the plugin has been shipped with additional files, such as
    CSS and images, place all the plugin files in the plugin-name directory under
    the lib folder, and then include the JS and CSS files in index.html.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Use Git submodules**'
  prefs: []
  type: TYPE_NORMAL
- en: If your project is hosted in the Git repository, you can use the Git submodule
    command to insert a plugin repository inside your project repository. This is
    very useful if you want to have an easy way to update your project plugins by
    writing a single git command.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Creating a Backbone.js extension with Grunt recipe in [Chapter 8](ch08.html
    "Chapter 8. Special Techniques"), Special Techniques
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contributing to the Backbone project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Backbone.js is an open source project that has been developed by a strong community.
    In this recipe, we are going to speak about things that will help you became a
    part of this community and improve Backbone.js.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s follow the ensuing steps to make Backbone.js better:'
  prefs: []
  type: TYPE_NORMAL
- en: Work on the issue queue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you found a bug in Backbone.js or want a new feature to be implemented, you
    can submit your issue to the issue queue at [https://github.com/documentcloud/backbone/issues](https://github.com/documentcloud/backbone/issues).
    Before doing this, make sure there is no similar issue; otherwise, you can update
    the existing issue queue.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Contribute code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can submit your own code to the Backbone project. Such a contribution can
    be very helpful to the community and the project itself.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: By using Backbone, you save your own time. By contributing to the project, you
    save the time of other developers who use it and your own time in the future instead
    of having to work on the same issue again.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Detailed guidelines for the code contributing process can be found on the wiki
    page at [https://github.com/documentcloud/backbone/wiki/Contributing-to-Backbone](https://github.com/documentcloud/backbone/wiki/Contributing-to-Backbone).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Work on the documentation of Backbone.js.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The official documentation, which is located at [http://backbonejs.org](http://backbonejs.org),
    is based on a recent version of Backbone.js in the GitHub repository. You can
    improve the documentation by either updating the index.html file or the docs directory.
    If you want to add a new example, use the examples folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
