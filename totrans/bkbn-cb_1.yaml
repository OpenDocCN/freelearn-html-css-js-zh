- en: Chapter 1. Understanding Backbone
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following points:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Designing an application with the MVC pattern
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining business logic with models and collections
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modeling an application's behavior with views and a router
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an application structure from scratch
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing your first Backbone application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing URL routing in your application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending an application with plugins
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contributing to the Backbone project
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Backbone.js is a lightweight JavaScript framework that is based on the Model-View-Controller
    (MVC) pattern and allows developers to create single-page web applications. With
    Backbone, it is possible to update a web page quickly using the REST approach
    with a minimal amount of data transferred between a client and a server.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 'Backbone.js is becoming more popular day by day and is being used on a large
    scale for web applications and IT startups; some of them are as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'Groupon Now!: The team decided that their first product would be AJAX-heavy
    but should still be linkable and shareable. Though they were completely new to
    Backbone, they found that its learning curve was incredibly quick, so they were
    able to deliver the working product in just two weeks.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Foursquare: This used the Backbone.js library to create model classes for the
    entities in foursquare (for example, venues, check-ins, and users). They found
    that Backbone''s model classes provide a simple and light-weight mechanism to
    capture an object''s data and state, complete with the semantics of a classical
    inheritance.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'LinkedIn mobile: This used Backbone.js to create its next-generation HTML5
    mobile web app. Backbone made it easy to keep the app modular, organized, and
    extensible, so it was possible to program the complexities of LinkedIn''s user
    experience. Moreover, they are using the same code base in their mobile applications
    for iOS and Android platforms.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'WordPress.com: This is a SaaS version of Wordpress and uses Backbone.js models,
    collections, and views in its notification system, and is integrating Backbone.js
    into the Stats tab and into other features throughout the home page.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Airbnb: This is a community marketplace for users to list, discover, and book
    unique spaces around the world. Its development team has used Backbone in many
    latest products. Recently, they rebuilt a mobile website with Backbone.js and
    Node.js tied together with a library named Rendr.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can visit the following links to get acquainted with other usage examples
    of Backbone.js:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[http://backbonejs.org/#examples](http://backbonejs.org/#examples)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Backbone.js was started by Jeremy Ashkenas from DocumentCloud in 2010 and is
    now being used and improved by lots of developers all over the world using Git,
    the distributed version control system.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to provide some practical examples of how to use
    Backbone.js, and we will structure a design for a program named Billing Application
    by following the MVC and Backbone pattern. We will also refer to this structure
    in the later chapters of this book. Reading this chapter is especially useful
    if you are new to developing with Backbone.js. If you feel that you're an experienced
    developer, you can skip this chapter.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将提供一些如何使用Backbone.js的实用示例，并按照MVC和Backbone模式为名为计费应用程序的程序设计一个结构。我们还将在此书后面的章节中参考这个结构。如果你是Backbone.js的新手开发者，阅读本章特别有用。如果你觉得自己是经验丰富的开发者，可以跳过这一章。
- en: Designing an application with the MVC pattern
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MVC模式设计应用程序
- en: 'MVC is a design pattern that is widely used in user-facing software, such as
    web applications. It is intended for splitting data and representing it in a way
    that makes it convenient for user interaction. To understand what it does, understand
    the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: MVC是一种广泛用于面向用户软件（如Web应用程序）的设计模式。它的目的是以方便用户交互的方式分割数据并展示数据。为了理解它做什么，理解以下内容：
- en: 'Model: This contains data and provides business logic used to run the application'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型：它包含数据和提供用于运行应用程序的业务逻辑
- en: 'View: This presents the model to the user'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图：它向用户展示模型
- en: 'Controller: This reacts to user input by updating the model and the view'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器：它通过更新模型和视图来响应用户输入
- en: 'There could be some differences in the MVC implementation, but in general it
    conforms to the following scheme:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: MVC实现可能会有所不同，但通常它符合以下方案：
- en: '![Designing an application with the MVC pattern](img/2728_01_01.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![使用MVC模式设计应用程序](img/2728_01_01.jpg)'
- en: 'Worldwide practice shows that the use of the MVC pattern provides various benefits
    to the developer:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 全球实践表明，使用MVC模式为开发者提供了各种好处：
- en: Following the separation of the concerned paradigm, which splits an application
    into independent parts, it is easier to modify or replace
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵循关注点分离的原则，将应用程序分割成独立的部分，这使得修改或替换变得更加容易。
- en: It achieves code reusability by rendering a model in different views without
    the need to implement model functionality in each view
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通过在不同的视图中渲染模型来实现代码重用，而无需在每个视图中实现模型功能
- en: It requires less training and has a quicker startup time for the new developers
    within an organization
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于组织中的新开发者来说，它需要更少的培训，并且启动时间更快
- en: To have a better understanding of the MVC pattern, we are going to design a
    Billing Application. We will refer to this design throughout the book when we
    are learning specific topics.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解MVC模式，我们将设计一个计费应用程序。在学习特定主题时，我们将参考这个设计。
- en: 'Our Billing Application will allow users to generate invoices, manage them,
    and send them to clients. According to the worldwide practice, the invoice should
    contain a reference number, date, information about the buyer and seller, bank
    account details, a list of provided products or services, and an invoice sum.
    Let''s have a look at the following screenshot to understand how an invoice appears:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的计费应用程序将允许用户生成发票、管理它们并将它们发送给客户。根据全球惯例，发票应包含参考编号、日期、买方和卖方信息、银行账户详情、提供的产品或服务列表以及发票总额。让我们看一下下面的截图，以了解发票的外观：
- en: '![Designing an application with the MVC pattern](img/2728_01_02.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![使用MVC模式设计应用程序](img/2728_01_02.jpg)'
- en: How to do it...
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s follow the ensuing steps to design an MVC structure for the Billing
    Application:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们遵循以下步骤来为计费应用程序设计MVC结构：
- en: 'Let''s write down a list of functional requirements for this application. We
    assume that the end user may want to be able to do the following:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们为这个应用程序列出功能需求。我们假设最终用户可能希望能够执行以下操作：
- en: Generate an invoice
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成发票
- en: E-mail the invoice to the buyer
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将发票通过电子邮件发送给买方
- en: Print the invoice
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打印发票
- en: See a list of existing invoices
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看现有发票列表
- en: Manage invoices (create, read, update, and delete)
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理发票（创建、读取、更新和删除）
- en: Update an invoice status (draft, issued, paid, and canceled)
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新发票状态（草稿、已发行、已支付和已取消）
- en: View a yearly income graph and other reports
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看年度收入图表和其他报告
- en: 'To simplify the process of creating multiple invoices, the user may want to
    manage information about buyers and his personal details in the specific part
    of the application before he/she creates an invoice. So, our application should
    provide additional functionalities to the end user, such as the following:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The ability to see a list of buyers and use it when generating an invoice
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to manage buyers (create, read, update, and delete)
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to see a list of bank accounts and use it when generating an invoice
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to manage his/her own bank accounts (create, read, update, and delete)
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to edit personal details and use them when generating an invoice
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, we may want to have more functions, but this is enough for demonstrating
    how to design an application using the MVC pattern.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, we architect an application using the MVC pattern.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After we have defined the features of our application, we need to understand
    what is more related to the model (business logic) and what is more related to
    the view (presentation). Let's split the functionality into several parts.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then, we learn how to define models.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Models present data and provide data-specific business logic. Models can be
    related to each other. In our case, they are as follows:'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: InvoiceModel
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: InvoiceItemModel
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: BuyerModel
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SellerModel
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: BankAccountModel
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, will define collections of models.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our application allows users to operate on a number of models, so they need
    to be organized into a special iterable object named Collection. We need the following
    collections:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: InvoiceCollection
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: InvoiceItemCollection
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: BuyerCollection
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: BankAccountCollection
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we define views.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'View present a model or a collection to the application user. A single model
    or collection can be rendered to be used by multiple views. The views that we
    need in our application are as follows:'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: EditInvoiceFormView
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: InvoicePageView
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: InvoiceListView
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: PrintInvoicePageView
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: EmailInvoiceFormView
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: YearlyIncomeGraphView
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: EditBuyerFormView
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: BuyerPageView
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: BuyerListView
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: EditBankAccountFormView
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: BankAccountPageView
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: BankAccountListView
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: EditSellerInfoFormView
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ViewSellectInfoPageView
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ConfirmationDialogView
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we define a controller.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A controller allows users to interact with an application. In MVC, each view
    can have a different controller that is used to do following:'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Map a URL to a specific view
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetch models from a server
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Show and hide views
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Handle user input
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining business logic with models and collections
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, it is time to design business logic for the Billing Application using the
    MVC and OOP approaches.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we are going to define an internal structure for our application
    with model and collection objects. Although a model represents a single object,
    a collection is a set of models that can be iterated, filtered, and sorted.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'Relations between models and collections in the Billing Application conform
    to the following scheme:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining business logic with models and collections](img/2728_01_05.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For each model, we are going to create two tables: one for properties and another
    for methods:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: We define BuyerModel properties.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Name | Type | Required | Unique |'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| id | Integer | Yes | Yes |'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| name | Text | Yes |   |'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| address | Text | Yes |   |'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| phoneNumber | Text | No |   |'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Then, we define SellerModel properties.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Name | Type | Required | Unique |'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| id | Integer | Yes | Yes |'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| name | Text | Yes |   |'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| address | Text | Yes |   |'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| phoneNumber | Text | No |   |'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| taxDetails | Text | Yes |   |'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: After this, we define BankAccountModel properties.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Name | Type | Required | Unique |'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| id | Integer | Yes | Yes |'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| beneficiary | Text | Yes |   |'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| beneficiaryAccount | Text | Yes |   |'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| bank | Text | Yes |   |'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| SWIFT | Text | Yes |   |'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| specialInstructions | Text | No |   |'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: We define InvoiceItemModel properties.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Name | Arguments | Return Type | Unique |'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| calculateAmount | - | Decimal |   |'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Next, we define InvoiceItemModel methods.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We don't need to store the item amount in the model, because it always depends
    on the price and the quantity, so it can be calculated.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| Name | Type | Required | Unique |'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| id | Integer | Yes | Yes |'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| deliveryDate | Date | Yes |   |'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| description | Text | Yes |   |'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| price | Decimal | Yes |   |'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| quantity | Decimal | Yes |   |'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Now, we define InvoiceModel properties.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Name | Type | Required | Unique |'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| id | Integer | Yes | Yes |'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| referenceNumber | Text | Yes |   |'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| date | Date | Yes |   |'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| bankAccount | Reference | Yes |   |'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| items | Collection | Yes |   |'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| comments | Text | No |   |'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| status | Integer | Yes |   |'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: We define InvoiceModel methods.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The invoice amount can easily be calculated as the sum of invoice item amounts.
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| Name | Arguments | Return Type | Unique |'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| calculateAmount |   | Decimal |   |'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Finally, we define collections.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In our case, they are InvoiceCollection, InvoiceItemCollection, BuyerCollection,
    and BankAccountCollection. They are used to store models of an appropriate type
    and provide some methods to add/remove models to/from the collections.
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Models in Backbone.js are implemented by extending Backbone.Model, and collections
    are made by extending Backbone.Collection. To implement relations between models
    and collections, we can use special Backbone extensions, which are described in
    the later chapters of this book.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Operating with model attributes recipe in [Chapter 2](ch02.html "Chapter 2. Models"),
    Models
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Creating a collection of models recipe in [Chapter 3](ch03.html "Chapter 3. Collections"),
    Collections
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To learn more about object properties, methods, and OOP programming in JavaScript,
    you can refer to the following resource:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en-US/docs/JavaScript/Introduction_to_Object-Oriented_JavaScript](https://developer.mozilla.org/en-US/docs/JavaScript/Introduction_to_Object-Oriented_JavaScript)'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.mozilla.org/en-US/docs/JavaScript/Introduction_to_Object-Oriented_JavaScript](https://developer.mozilla.org/en-US/docs/JavaScript/Introduction_to_Object-Oriented_JavaScript)'
- en: Modeling an application's behavior with views and a router
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用视图和路由器建模应用程序的行为
- en: 'Unlike traditional MVC frameworks, Backbone does not provide any distinct object
    that implements controller functionality. Instead, the controller is diffused
    between Backbone.Router and Backbone. View and the following is done:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 与传统的MVC框架不同，Backbone不提供任何实现控制器功能的独立对象。相反，控制器在Backbone.Router和Backbone.View之间分散，以下是如何做的：
- en: A router handles URL changes and delegates application flow to a view. Typically,
    the router fetches a model from the storage asynchronously. When the model is
    fetched, it triggers a view update.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由器处理URL变化并将应用程序流程委托给视图。通常，路由器异步从存储中获取模型。当模型被获取时，它触发视图更新。
- en: A view listens to DOM events and either updates a model or navigates an application
    through a router.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图监听DOM事件，要么更新模型，要么通过路由器导航应用程序。
- en: 'The following diagram shows a typical workflow in a Backbone application:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了Backbone应用程序中的典型工作流程：
- en: '![Modeling an application''s behavior with views and a router](img/2728_01_10.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![使用视图和路由器建模应用程序的行为](img/2728_01_10.jpg)'
- en: How to do it...
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Let''s follow the ensuing steps to understand how to define basic views and
    a router in our application:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤来了解如何在我们的应用程序中定义基本视图和路由：
- en: First, we need to create wireframes for an application.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要为应用程序创建线框。
- en: 'Let''s draw a couple of wireframes in this recipe:'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们在本食谱中绘制几个线框：
- en: The Edit Invoice page allows users to select a buyer, to select the seller's
    bank account from the lists, to enter the invoice's date and a reference number,
    and to build a table of shipped products and services.![How to do it...](img/2728_01_03.jpg)
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑发票页面允许用户选择买方，从列表中选择卖方的银行账户，输入发票的日期和参考编号，以及构建已发货的产品和服务表格。![如何做到这一点...](img/2728_01_03.jpg)
- en: The Preview Invoice page shows how the final invoice will be seen by a buyer.
    This display should render all the information we have entered in the Edit Invoice
    form. Buyer and seller information can be looked up in the application storage.
    The user has the option to either go back to the Edit display or save this invoice.![How
    to do it...](img/2728_01_04.jpg)
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预览发票页面显示了买方将看到的最终发票。这种显示应该渲染我们在编辑发票表单中输入的所有信息。买方和卖方信息可以在应用程序存储中查找。用户可以选择返回到编辑显示或保存此发票。![如何做到这一点...](img/2728_01_04.jpg)
- en: Then, we will define view objects.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将定义视图对象。
- en: 'According to the previous wireframes, we need to have two main views: EditInvoiceFormView
    and PreviewInvoicePageView. These views will operate with InvoiceModel; it refers
    to other objects, such as BankAccountModel and InvoiceItemCollection.'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据之前的线框，我们需要有两个主要视图：EditInvoiceFormView和PreviewInvoicePageView。这些视图将与InvoiceModel一起操作；它引用其他对象，如BankAccountModel和InvoiceItemCollection。
- en: Now, we will split views into subviews.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将视图拆分成子视图。
- en: For each item in the Products or Services table, we may want to recalculate
    the Amount field depending on what the user enters in the Price and Quantity fields.
    The first way to do this is to re-render the entire view when the user changes
    the value in the table; however, it is not an efficient way, and it takes a significant
    amount of computer power to do this.
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于产品或服务表中的每一项，我们可能希望根据用户在价格和数量字段中输入的内容重新计算金额字段。做到这一点的一种方法是在用户更改表格中的值时重新渲染整个视图；然而，这不是一种高效的方法，并且需要大量的计算机功率来完成。
- en: 'We don''t need to re-render the entire view if we want to update a small part
    of it. It is better to split the big view into different, independent pieces,
    such as subviews, that are able to render only a specific part of the big view.
    In our case, we can have the following views:'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我们只想更新视图的一小部分，我们不需要重新渲染整个视图。最好是把大视图拆分成不同的、独立的片段，例如子视图，它们只能渲染大视图的特定部分。在我们的例子中，我们可以有以下视图：
- en: '![How to do it...](img/2728_01_06.jpg)'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/2728_01_06.jpg)'
- en: As we can see, EditInvoiceItemTableView and PreviewInvoiceItemTableView render
    InvoiceItemCollection with the help of the additional views EditInvoiceItemView
    and PreviewInvoiceItemView that render InvoiceItemModel. Such separation allows
    us to re-render an item inside a collection when it is changed.
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, we will define URL paths that will be associated with a corresponding
    view. In our case, we can have several URLs to show different views, for example:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: /invoice/add
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: /invoice/:id/edit
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: /invoice/:id/preview
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Here, we assume that the Edit Invoice view can be used for either creating a
    new invoice or editing an existing one. In the router implementation, we can load
    this view and show it on specific URLs.
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Backbone.View object can be extended to create our own view that will render
    model data. In a view, we can define handlers to user actions, such as data input
    and keyboard or mouse events.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: In the application, we can have a single Backbone.Router object that allows
    users to navigate through an application by changing the URL in the address bar
    of the browser. The router object contains a list of available URLs and callbacks.
    In a callback function, we can trigger the rendering of a specific view associated
    with a URL.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: If we want a user to be able to jump from one view to another, we may want him/her
    to either click on regular HTML links associated with a view or navigate to an
    application programmatically.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Models"), Views'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an application structure from scratch
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going to talk about how to create a Backbone project
    from scratch. There is important information of which we should be aware when
    dealing with the later chapters of this book.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to speak about Backbone dependencies and the directory structure
    for our project. Let''s follow the ensuing guidelines:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: Download Backbone.js.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Visit [http://backbone.js](http://backbone.js) and download the Backbone.js
    library. There are several versions available: production, development, and an
    edge version.'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can use the production version for the best performance because it has been
    optimized and minimized. The development version may be good to use when working
    on the application, so you can use the code completion and debugging features
    of your IDE. And finally, you can use the edge version of Backbone, but do it
    at your own risk, because it may not be fully tested.
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Download Backbone dependencies.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Backbone.js depends on the Underscore.js library, which can be downloaded from
    [http://underscorejs.org](http://underscorejs.org). Underscore is also shipped
    in three different versions.
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Also, Backbone.js depends on either the jQuery or Zepto libraries. These libraries
    have the same syntax and both provide useful functionality to the developer. They
    simplify work with the document tree, event handling, AJAX, and JavaScript animations.
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For many examples in this book, we are going to use the jQuery library, which
    can be downloaded from [http://jquery.com](http://jquery.com). It is provided
    with both the development and production versions.
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a project directory structure.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you follow a specific directory structure, it would be easier to find any
    file and work with it, because such an application structure brings more order
    into your project. Here is an example of a directory structure that can be used
    by a simple Backbone application:'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'lib/: This is a directory for third-party libraries, such as the following:'
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'backbone.js: This is the source code of Backbone.js'
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'underscore.js: This is the source code of Underscore.js'
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'jquery.js: This has sources of jQuery'
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'js/: This is the directory of the project''s JavaScript files.'
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'main.js: This is the main JavaScript file that has been used in the project'
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'index.html: This is the main file of our application.'
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the main file of the application, which is index.html. It should include
    third-party libraries and your application files, as shown in the following code:'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Create the main JavaScript file named main.js that will contain the code of
    your application.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As we include our scripts into the head tag, they are executed before the body
    content is processed by a browser and before the whole HTML document is loaded.
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In a Backbone application, as in many other JavaScript applications, we want
    to make sure our program starts to run right after the document is loaded, so
    main.js should look like the following code snippet:'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use this application template for creating your own Backbone app. We
    are also going to use this template for the examples in this book.
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Writing your first Backbone application
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going to write our first Backbone application. Let it
    be a simple part of the billing system.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: For example, we can implement a model and a view for the invoice item. Let's
    create InvoiceItemModel that contains the Quantity and Price fields and calculates
    the item's amount. We also need to have PreviewInvoiceItemView that is used to
    render a model.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: 'The output of our demo application could be very simple, as shown in the following
    screenshot:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing your first Backbone application](img/2728_01_07.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The new code in this recipe should go into the main.js file that we created
    in the previous recipe; we will do this as follows:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Define the model by extending it from the Backbone.Model object.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the InvoiceItemModel object, we have initialized the default values and performed
    the business logic, a function that calculates the total amount.
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a model instance.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Define the view that will render the model.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As we can see, our view uses the this.model and this.el properties that are
    passed to the view when it is created.
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Inside a view, we used the jQuery library to set the content for the element
    associated with the view $(this.el).html(html). In our case, this.el contains
    'body' that is also a jQuery selector.
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Such selectors are similar to CSS selectors and allow jQuery to find an arbitrary
    HTML element using the $() function.
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To render a view, we simply need to execute the render() method.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When rendering a view, we also used a templating engine provided by Underscore.js.
    This templating engine substitutes templates with data and outputs static HTML.
    More information about templates is available in the Using templates in a view
    recipe of [Chapter 6](ch06.html "Chapter 6. Templates and UX sugar"), Templates,
    Forms, and UX Sugar.
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start the application.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are several ways to start an application. If your application has only
    a single view, you can create a new instance of it and render it manually.
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An application should be started right after the HTML page is loaded. Let''s
    write some code that will start a simple Backbone application:'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: See also
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Models"), Models'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Collections"), Collections'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Views"), Views'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Events and Bindings"), Events and Bindings'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing URL routing in your application
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Backbone.Router object is used for navigation inside your application. You
    should use it if you want to access different view pages by hitting the appropriate
    URLs. Users can also navigate through an application using the browser's history
    bar.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: By default, the router works well with hash paths, such as index.html#path/to/page.
    Any string that is placed after a hash character is supposed to be a route and
    is processed by Backbone.Router.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, we are going to explain how to create our own router in our application:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: Define a router by extending Backbone.Router into the Workspace object and setting
    pairs of routes and callback functions for them inside the routes property that
    is passed to the extend() method. This gives the router information of which callback
    should be executed in case the appropriate route is accessed.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Add a callback method to the router object.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If the user visits index.html or index.html#invoice, the invoiceList() callback
    is executed, which renders InvoiceListView. Here, InvoiceListView is a simple
    stub.
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/2728_01_08.jpg)'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Tell Backbone to use this router and start the application.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, we create a new Workspace object and execute the start() method of the
    Backbone.history object that is used for global application routing. As always,
    we should start our application right after the HTML page has loaded completely.
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Backbone.Router is used just for defining routes and callbacks. All the important
    jobs are done by Backbone.history that serves as a global router (per frame) to
    handle hashchange or pushState events, match the appropriate route, and trigger
    callbacks. You shouldn't ever have to create an instance of the global router—you
    should use the reference to Backbone.history that will be created for you automatically
    if you make use of routers with routes.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Backbone router allows the defining of routes with parameters, which we are
    going to explain in this section.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: Parsing parameters in a URL
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we want the router to parse parameters in a URL, we need to use the colon
    character (:) before the parameter's name. Here is an example that demonstrates
    how Backbone.Router parses URLs with a parameter.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Paths such as index.html#invoice/1 and index.html#invoice/2 will be parsed by
    a router. In both cases, the invoicePage() callback is executed; it passes the
    ID parameter to InvoiceLPageView and renders it.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: '![Parsing parameters in a URL](img/2728_01_09.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
- en: Tip
  id: totrans-271
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Validate parameters in your router**'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: There is no default way to set a restriction for the data type or format of
    the parameters inside the routes definition. All parameters that are passed to
    the router callbacks are strings, and it is up to the developer to validate them.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Handling router events recipe in [Chapter 5](ch05.html "Chapter 5. Events
    and Bindings"), Events and Bindings
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Switching views using Backbone.Router recipe in [Chapter 4](ch04.html "Chapter 4. Views"),
    Views
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending an application with plugins
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Backbone's core is small, well-tested, and nicely maintained. However, developers
    may need additional functionalities to be used by a complex web application. The
    power of the Backbone framework depends on modularity and flexibility. Existing
    components can easily be either extended or replaced; thus, many developers create
    their own plugins.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: 'There are over 100 plugins that can be downloaded and used in your application
    from [https://github.com/documentcloud/backbone/wiki/Extensions,-Plugins,-Resources](https://github.com/documentcloud/backbone/wiki/Extensions,-Plugins,     -Resources). In this book, we are going to use some of them, so we need to know
    how to extend our application with plugins.'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If the plugin is a single JavaScript file, simply copy it into the lib folder
    of the project and include it in index.html.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Alternatively, if the plugin has been shipped with additional files, such as
    CSS and images, place all the plugin files in the plugin-name directory under
    the lib folder, and then include the JS and CSS files in index.html.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-284
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Use Git submodules**'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: If your project is hosted in the Git repository, you can use the Git submodule
    command to insert a plugin repository inside your project repository. This is
    very useful if you want to have an easy way to update your project plugins by
    writing a single git command.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Creating a Backbone.js extension with Grunt recipe in [Chapter 8](ch08.html
    "Chapter 8. Special Techniques"), Special Techniques
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [第 8 章](ch08.html "第 8 章。特殊技巧") 的 Grunt 菜谱中创建 Backbone.js 扩展，特殊技巧
- en: Contributing to the Backbone project
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 贡献到 Backbone 项目
- en: Backbone.js is an open source project that has been developed by a strong community.
    In this recipe, we are going to speak about things that will help you became a
    part of this community and improve Backbone.js.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: Backbone.js 是一个由强大社区开发的开源项目。在这个菜谱中，我们将讨论一些帮助你成为这个社区一部分并改进 Backbone.js 的内容。
- en: How to do it...
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s follow the ensuing steps to make Backbone.js better:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们遵循以下步骤来使 Backbone.js 更好：
- en: Work on the issue queue.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理问题队列。
- en: If you found a bug in Backbone.js or want a new feature to be implemented, you
    can submit your issue to the issue queue at [https://github.com/documentcloud/backbone/issues](https://github.com/documentcloud/backbone/issues).
    Before doing this, make sure there is no similar issue; otherwise, you can update
    the existing issue queue.
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你发现了 Backbone.js 中的错误或希望实现新功能，你可以将你的问题提交到 [https://github.com/documentcloud/backbone/issues](https://github.com/documentcloud/backbone/issues)
    的问题队列中。在这样做之前，请确保没有类似的问题；否则，你可以更新现有的问题队列。
- en: Contribute code.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 贡献代码。
- en: You can submit your own code to the Backbone project. Such a contribution can
    be very helpful to the community and the project itself.
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以向 Backbone 项目提交自己的代码。这样的贡献对社区和项目本身都非常有帮助。
- en: By using Backbone, you save your own time. By contributing to the project, you
    save the time of other developers who use it and your own time in the future instead
    of having to work on the same issue again.
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过使用 Backbone，你可以节省自己的时间。通过为项目做出贡献，你不仅节省了使用它的其他开发者的时间，也节省了你未来再次处理相同问题的自己的时间。
- en: Detailed guidelines for the code contributing process can be found on the wiki
    page at [https://github.com/documentcloud/backbone/wiki/Contributing-to-Backbone](https://github.com/documentcloud/backbone/wiki/Contributing-to-Backbone).
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关代码贡献过程的详细指南可以在 [https://github.com/documentcloud/backbone/wiki/Contributing-to-Backbone](https://github.com/documentcloud/backbone/wiki/Contributing-to-Backbone)
    的维基页面上找到。
- en: Work on the documentation of Backbone.js.
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从事 Backbone.js 的文档工作。
- en: The official documentation, which is located at [http://backbonejs.org](http://backbonejs.org),
    is based on a recent version of Backbone.js in the GitHub repository. You can
    improve the documentation by either updating the index.html file or the docs directory.
    If you want to add a new example, use the examples folder.
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 官方文档位于 [http://backbonejs.org](http://backbonejs.org)，基于 GitHub 仓库中的最新版本的 Backbone.js。你可以通过更新
    index.html 文件或 docs 目录来改进文档。如果你想添加一个新示例，请使用 examples 文件夹。
