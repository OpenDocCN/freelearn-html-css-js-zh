["```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch9/tuning-faas --path cncb-tuning-faas\n```", "```js\nservice: cncb-tuning-faas\n\nplugins:\n  - serverless-webpack\n\nprovider:\n  memorySize: 1024 # default\n  ...\n\npackage:\n  individually: true\ncustom:\n webpack:\n   includeModules: true\n\nfunctions:\n  save:\n    memorySize: 512 # function specific\n    ...\n```", "```js\nconst slsw = require('serverless-webpack');\nconst nodeExternals = require(\"webpack-node-externals\");\nconst path = require('path');\n\nmodule.exports = {\n  entry: slsw.lib.entries,\n  output: {\n    libraryTarget: 'commonjs',\n    path: path.join(__dirname, '.webpack'),\n    filename: '[name].js'\n  },\n  optimization: {\n    minimize: false\n  },\n  target: 'node',\n  mode: slsw.lib.webpack.isLocal ? \"development\" : \"production\",\n  externals: [\n    nodeExternals()\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        use: [\n          {\n            loader: 'babel-loader',\n          }\n        ],\n        include: __dirname,\n        exclude: /node_modules/\n      }\n    ]\n  }\n};\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch9/frp-batching --path cncb-frp-batching\n```", "```js\nmodule.exports.listener = (event, context, cb) => {\n  _(event.Records)\n    .map(recordToUow)\n    .filter(forPurple)\n    .ratelimit(Number(process.env.WRITE_CAPACITY) /\n      Number(process.env.SHARD_COUNT) /\n      Number(process.env.WRITE_BATCH_SIZE) / 10, 100)\n    .batch(Number(process.env.WRITE_BATCH_SIZE))\n    .map(batchUow)\n    .flatMap(batchWrite)\n    .collect().toCallback(cb);\n};\n\nconst batchUow = batch => ({ batch });\n\nconst batchWrite = batchUow => {\n  batchUow.params = {\n    RequestItems: {\n      [process.env.TABLE_NAME]: batchUow.batch.map(uow =>\n        ({\n          PutRequest: {\n            Item: uow.event\n          }\n        })\n      )\n    },\n  };\n\n  ...\n\n  return _(db.batchWrite(batchUow.params).promise()\n    .then(data => (\n      Object.keys(data.UnprocessedItems).length > 0 ?\n        Promise.reject(data) :\n        batchUow\n    ))\n    .catch(err => {\n      err.uow = batchUow;\n      throw err;\n    })\n  );\n};\n```", "```js\n$ sls invoke -f simulate -r us-east-1 -s $MY_STAGE\n[\n    {\n        \"total\": 3850,\n        \"orange\": 942,\n        \"purple\": 952,\n        \"blue\": 1008,\n        \"green\": 948\n    }\n]\n```", "```js\n$ sls logs -f listener -r us-east-1 -s $MY_STAGE --filter 'event count' 2018-08-04 23:46:53 ... event count: 100\n2018-08-04 23:46:57 ... event count: 1000\n2018-08-04 23:47:23 ... event count: 250\n2018-08-04 23:47:30 ... event count: 1000\n2018-08-04 23:47:54 ... event count: 1000\n2018-08-04 23:48:18 ... event count: 500$ sls logs -f listener -r us-east-1 -s $MY_STAGE --filter 'Duration' REPORT ... Duration: 3688.65 ms ...\nREPORT ... Duration: 25869.08 ms ...\nREPORT ... Duration: 7293.39 ms ...\nREPORT ... Duration: 23662.65 ms ...\nREPORT ... Duration: 24752.11 ms ...\nREPORT ... Duration: 13983.72 ms ...\n\n$ sls logs -f listener -r us-east-1 -s $MY_STAGE --filter 'retries' ...\n2018-08-04 23:48:20 ... [AWS dynamodb 200 0.031s 0 retries] batchWriteItem({ RequestItems:\n   { 'john-cncb-frp-batching-things':\n      [ { PutRequest:\n           { Item:\n              { id: { S: '320e6023-9862-11e8-b0f6-01e9feb460f5' },\n                type: { S: 'purple' },\n                timestamp: { N: '1533440814882' },\n                partitionKey: { S: '5' },\n                tags: { M: { region: { S: 'us-east-1' } } } } } },\n        { PutRequest:\n           { Item:\n              { id: { S: '320e6025-9862-11e8-b0f6-01e9feb460f5' },\n                type: { S: 'purple' },\n                timestamp: { N: '1533440814882' },\n                partitionKey: { S: '1' },\n                tags: { M: { region: { S: 'us-east-1' } } } } } },\n        ...\n        [length]: 10 ] },\n  ReturnConsumedCapacity: 'TOTAL',\n  ReturnItemCollectionMetrics: 'SIZE' })\n...\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch9/frp-async-non-blocking-io --path cncb-frp-async-non-blocking-io\n```", "```js\nmodule.exports.listener = (event, context, cb) => {\n  _(event.Records)\n    .map(recordToUow)\n    .filter(forPurple)\n    .ratelimit(Number(process.env.WRITE_CAPACITY) /\n      Number(process.env.SHARD_COUNT) / \n      Number(process.env.PARALLEL) / 10, 100)\n    .map(put)\n    .parallel(Number(process.env.PARALLEL))\n    .collect().toCallback(cb);\n};\n```", "```js\n$ sls invoke -f simulate -r us-east-1 -s $MY_STAGE\n[\n    {\n        \"total\": 4675,\n        \"blue\": 1136,\n        \"green\": 1201,\n        \"purple\": 1167,\n        \"orange\": 1171\n    }\n]\n```", "```js\n$ sls logs -f listener -r us-east-1 -s $MY_STAGE --filter 'event count' 2018-08-05 00:03:05 ... event count: 1675\n2018-08-05 00:03:46 ... event count: 1751\n2018-08-05 00:04:34 ... event count: 1249$ sls logs -f listener -r us-east-1 -s $MY_STAGE --filter 'Duration' REPORT ... Duration: 41104.28 ms ...\nREPORT ... Duration: 48312.47 ms ...\nREPORT ... Duration: 31450.13 ms ...\n\n$ sls logs -f listener -r us-east-1 -s $MY_STAGE --filter 'retries' ...\n2018-08-05 00:04:58.034 ... [AWS dynamodb 200 0.024s 0 retries] ...\n2018-08-05 00:04:58.136 ... [AWS dynamodb 200 0.022s 0 retries] ...\n2018-08-05 00:04:58.254 ... [AWS dynamodb 200 0.034s 0 retries] ...\n2018-08-05 00:04:58.329 ... [AWS dynamodb 200 0.007s 0 retries] ...\n2018-08-05 00:04:58.430 ... [AWS dynamodb 200 0.007s 0 retries] ...\n2018-08-05 00:04:58.540 ... [AWS dynamodb 200 0.015s 0 retries] ...\n2018-08-05 00:04:58.661 ... [AWS dynamodb 200 0.035s 0 retries] ...\n2018-08-05 00:04:58.744 ... [AWS dynamodb 200 0.016s 0 retries] ...\n2018-08-05 00:04:58.843 ... [AWS dynamodb 200 0.014s 0 retries] ...\n2018-08-05 00:04:58.953 ... [AWS dynamodb 200 0.023s 0 retries] ...\n...\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch9/frp-grouping --path cncb-frp-grouping\n```", "```js\nmodule.exports.listener = (event, context, cb) => {\n  _(event.Records)\n    .map(recordToUow)\n    .filter(forPurple)\n    .group(uow => uow.event.partitionKey)\n    .flatMap(groupUow)\n    .ratelimit(Number(process.env.WRITE_CAPACITY) /\n      Number(process.env.SHARD_COUNT) / 10, 100)\n    .flatMap(put)\n    .collect().toCallback(cb);\n};\n\nconst groupUow = groups => _(Object.keys(groups).map(key => ({ batch: groups[key]})));\n\nconst put = groupUow => {\n  const params = {\n    TableName: process.env.TABLE_NAME,\n    Item: groupUow.batch[groupUow.batch.length - 1].event, // last\n  };\n  ...\n  return _(db.put(params).promise()\n    .then(() => groupUow)\n  );\n};\n```", "```js\n$ sls invoke -f simulate -r us-east-1 -s $MY_STAGE\n[\n    {\n        \"total\": 4500,\n        \"blue\": 1134,\n        \"green\": 1114,\n        \"purple\": 1144,\n        \"orange\": 1108\n    }\n]\n```", "```js\n$ sls logs -f listener -r us-east-1 -s $MY_STAGE --filter 'event count' 2018-08-05 00:28:19 ... event count: 1000\n2018-08-05 00:28:20 ... event count: 1000\n2018-08-05 00:28:21 ... event count: 650\n2018-08-05 00:28:22 ... event count: 1000\n2018-08-05 00:28:23 ... event count: 850$ sls logs -f listener -r us-east-1 -s $MY_STAGE --filter 'Duration' REPORT ... Duration: 759.50 ms ...\nREPORT ... Duration: 611.70 ms ...\nREPORT ... Duration: 629.91 ms ...\nREPORT ... Duration: 612.90 ms ...\nREPORT ... Duration: 623.11 ms ...\n\n$ sls logs -f listener -r us-east-1 -s $MY_STAGE --filter 'retries' 2018-08-05 00:28:20.197 ... [AWS dynamodb 200 0.112s 0 retries] ...\n2018-08-05 00:28:20.320 ... [AWS dynamodb 200 0.018s 0 retries] ...\n...\n2018-08-05 00:28:23.537 ... [AWS dynamodb 200 0.008s 0 retries] ...\n2018-08-05 00:28:23.657 ... [AWS dynamodb 200 0.019s 0 retries] ...\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch9/dynamodb-autoscaling --path cncb-dynamodb-autoscaling\n```", "```js\nservice: cncb-dynamodb-autoscaling\n\n...\n\nplugins:\n  - serverless-dynamodb-autoscaling-plugin\n\ncustom:\n  autoscaling:\n    - table: Table\n      write:\n        minimum: 5\n        maximum: 50\n        usage: 0.6\n        actions:\n          - name: morning\n            minimum: 5\n            maximum: 50\n            schedule: cron(0 6 * * ? *)\n          - name: night\n            minimum: 1\n            maximum: 1\n            schedule: cron(0 0 * * ? *)\n      read:\n        ...\n\nresources:\n Resources:\n   Table:\n     Type: AWS::DynamoDB::Table\n     ...\n```", "```js\n$ sls logs -f listener -r us-east-1 -s $MY_STAGE --filter 'event count'\n$ sls logs -f listener -r us-east-1 -s $MY_STAGE --filter 'Duration'\n$ sls logs -f listener -r us-east-1 -s $MY_STAGE --filter '\"1 retries\"'$ sls logs -f listener -r us-east-1 -s $MY_STAGE --filter '\"2 retries\"'\n$ sls logs -f listener -r us-east-1 -s $MY_STAGE --filter '\"3 retries\"'\n$ sls logs -f listener -r us-east-1 -s $MY_STAGE --filter '\"4 retries\"'\n$ sls logs -f listener -r us-east-1 -s $MY_STAGE --filter '\"5 retries\"'\n$ sls logs -f listener -r us-east-1 -s $MY_STAGE --filter '\"6 retries\"'\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch9/cache-control --path cncb-cache-control\n```", "```js\nmodule.exports.get = (request, context, callback) => {\n  const response = {\n    statusCode: 200,\n    headers: {\n      'Cache-Control': 'max-age=5',\n    },\n    body: ...,\n  };\n\n  callback(null, response);\n};\n\nmodule.exports.save = (request, context, callback) => {\n const response = {\n   statusCode: 200,\n   headers: {\n     'Cache-Control': 'no-cache, no-store, must-revalidate',\n   },\n };\n\n callback(null, response);\n};\n```", "```js\n$ npm run dp:lcl -- -s $MY_STAGE\n...\nStack Outputs\nApiDistributionEndpoint: https://d2thj6o092tkou.cloudfront.net\n...\n```", "```js\n$ curl -s -D - -w \"Time: %{time_total}\" -o /dev/null  https://<see stack output>.cloudfront.net/things/123 | egrep -i 'X-Cache|Time' \nX-Cache: Miss from cloudfront\nTime: 0.712\n$ curl ...\nX-Cache: Hit from cloudfront\nTime: 0.145\n\n$ curl -v -X POST -H 'Content-Type: application/json' -d '{\"name\":\"thing 1\"}' https://<see stack output>.cloudfront.net/things ...\n< HTTP/1.1 200 OK\n< Cache-Control: no-cache, no-store, must-revalidate\n< X-Cache: Miss from cloudfront\n...\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch9/session-consistency/spa --path cncb-session-consistency-spa\n\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch9/session-consistency/service --path cncb-session-consistency-service\n```", "```js\n$ cd ./cncb-session-consistency-service\n$ npm install\n$ npm run dp:lcl -- -s $MY_STAGE\n```", "```js\n...\nconst client = new ApolloClient({\n    link: new HttpLink({\n        // CHANGE ME\n        uri: 'https://*<API_ID>*.execute-api.us-east-1.amazonaws.com/*<STAGE>*/graphql',\n    }),\n    cache: new InMemoryCache(),\n});\n...\n```", "```js\n...\nconst AddThing = () => {\n  ...\n  return (\n    <Mutation\n      mutation={SAVE_THING}\n      update={(cache, { data: { saveThing } }) => {\n        const { things } = cache.readQuery({ query: GET_THINGS });\n        cache.writeQuery({\n          query: GET_THINGS,\n          data: { things: { items: things.items.concat([saveThing]) } }\n        });\n      }}\n    >\n      ...\n    </Mutation>\n  );\n};\n...\n```", "```js\n$ cd ../cncb-session-consistency-service\n$ npm run rm:lcl -- -s $MY_STAGE\n```"]