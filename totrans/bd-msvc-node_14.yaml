- en: '14'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Logging in Microservices with Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with microservices architecture and Node.js, it is important to
    enable and check logs.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll start this chapter by understanding the core concepts of logging in microservices
    with Node.js. Logging is a critical aspect of microservices architecture, providing
    valuable insights into behavior, performance, and issues within a distributed
    system. In Node.js microservices, various logging techniques and libraries are
    employed to capture relevant information and robust logging systems for your Node.js
    microservices.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a microservices architecture, logging plays a crucial role. Let me summarize
    what happens when there is no proper logging:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Lack of visibility**: Without logging, it becomes challenging to track and
    understand what’s happening within individual microservices. You won’t have insights
    into their behavior, events, or transactions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Troubleshooting difficulties**: When issues arise, troubleshooting becomes
    cumbersome. Without logs, you won’t have information about errors, exceptions,
    or stack traces. Identifying failure points within a specific service becomes
    a guessing game.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Holistic view missing**: Each microservice may generate its own logs, but
    without a centralized logging system, you won’t get a holistic view of the entire
    system. Patterns or trends that span multiple services may remain hidden.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember—proper logging ensures better visibility, faster troubleshooting, and
    a more robust microservices architecture!
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have learned how to debug better and faster
    in microservices with Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a logging framework and defining log levels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Structured logging, log transport, and storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log filtering, sampling, error handling, and exception logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Context propagation, monitoring, and analyzing logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the first section, we’re going to show how to choose a logging framework
    and define log levels.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a logging framework and defining log levels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Logging** is a crucial aspect of microservices, aiding in debugging, performance
    monitoring, and system analysis. By selecting an appropriate logging library and
    implementing best practices, you can build a robust logging system for your Node.js
    microservices.'
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a logging library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A logging library is a piece of software that can help you generate and manage
    log data from your Node.js application. Logging libraries can provide various
    features, such as different log levels, log formats, log transports, and log aggregation.
    Logging libraries can also improve the performance and functionality of your application
    by reducing the overhead of `console.log` and providing more information and control
    over your log data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Selecting a suitable logging library is the first step. Some popular logging
    libraries for Node.js include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`info`, `debug`, `warn`, `error`). Supports log formatting and customization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bunyan**: Emphasizes structured logging, which is especially useful in microservices.
    Efficient for large-scale systems with high-throughput requirements. Supports
    log rotation and various log levels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pino**: Focused on fast and lightweight logging. Well suited for high-performance
    applications. Supports JSON logging and customizable log levels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are the most used logging libraries for Node.js, and they will help developers
    and system engineers save time while debugging and have no headaches while creating
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: For this book, let’s choose the *Winston* logging library, which is a widely
    used and versatile logging library for Node.js applications. Winston allows you
    to log messages at different levels, and it supports various transports (e.g.,
    console, file, database).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s first install Winston using the command given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create a file (for example, `logger.js`) to configure Winston with different
    log levels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can use this logger in your application, as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we’ve defined four log levels: `error`, `warn`, `info`, and
    `debug`. The levels are associated with increasing severity. The configuration
    also includes colorization for better visibility in the console. You can customize
    log levels, colors, and transports based on your specific requirements.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 14**.1* illustrates logging libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.1: Logging libraries (image by johnstocker on Freepik)](img/B14980_14_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.1: Logging libraries (image by johnstocker on Freepik)'
  prefs: []
  type: TYPE_NORMAL
- en: In summary, while `console.log` is straightforward and immediate, Winston provides
    more powerful features, including customizable log levels, structured formatting,
    and the ability to redirect logs to various destinations.
  prefs: []
  type: TYPE_NORMAL
- en: '*Best practice*: Instead of `console.log`, use a proper logging library (such
    as Winston or Bunyan). These allow you to control log levels, format messages,
    and direct logs to appropriate destinations (files, databases, and so on). Leaving
    `console.log` in production can inadvertently expose sensitive information. Imagine
    accidentally logging user credentials or API keys! Remember – production logs
    matter. Make them meaningful, secure, and efficient!'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s move on to log levels.
  prefs: []
  type: TYPE_NORMAL
- en: Log levels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Log levels** are a way of categorizing the severity and importance of log
    messages in Node.js. Log levels can help you filter, prioritize, and manage your
    log data more effectively. Log levels can also affect the performance and functionality
    of your application, depending on how you configure your logging framework.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the main recommendations for log levels:'
  prefs: []
  type: TYPE_NORMAL
- en: Utilize different log levels (`info`, `debug`, `warn`, `error`) appropriately.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjust log levels dynamically based on the deployment environment or configuration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log levels are very important for a system and need to be adjusted correctly
    to achieve what is required in terms of faster debugging and performance.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, remember that the log levels can be adjusted dynamically based
    on your environment or configuration, allowing you to control the verbosity of
    your logs in different scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: With an understanding of these concepts, let’s now move to structured logging,
    log transport, and storage.
  prefs: []
  type: TYPE_NORMAL
- en: Structured logging, log transport, and storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Structured logging, log transport, and storage are related concepts that can
    help you manage and analyze your application logs more effectively. Let’s look
    at structured logging in depth in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Structured logging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Structured logging** is a method of logging where log messages are formatted
    as a set of key-value pairs or as JSON objects. This format makes logs more machine-readable
    and allows for easier parsing, filtering, and analysis. When combined with appropriate
    log transport and storage mechanisms, structured logging becomes a powerful tool
    for monitoring and troubleshooting in microservices architectures.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some benefits of structured logging:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Machine readability**: Structured logs are easily parseable by machines,
    facilitating automated log analysis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Contextual information**: Key-value pairs allow the inclusion of contextual
    information with log messages, aiding in troubleshooting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Consistency**: A consistent log format makes it easier to create log analysis
    tools and ensures uniformity across different microservices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let’s look at an implementation of structured logging with Winston (Node.js):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, the log message includes structured data as key-value
    pairs.
  prefs: []
  type: TYPE_NORMAL
- en: 'What is sensitive data? Sensitive data refers to private information that must
    be protected from unauthorized access. While the specifics may vary depending
    on your context, here are some common types of sensitive data:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Personally identifiable information (PII)**: This includes data such as full
    names, addresses, email addresses, driver’s license numbers, and phone numbers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Financial data**: Credit card information and other financial details fall
    into this category.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Healthcare data**: Medical history, records, and any health-related information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Passwords**: Storing passwords in logs is a significant security risk.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IP addresses**: Although not always strictly sensitive, leaking IP addresses
    can have privacy implications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember that data sensitivity depends on your business context. Even seemingly
    innocuous details (such as zip codes) should be handled carefully if their exposure
    could harm your business or erode customer trust.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some best practices for avoiding sensitive data logging:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exclude sensitive data**: The simplest approach is to avoid logging sensitive
    data altogether. Only log necessary information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use structured logging**: Format logs in a structured way (for example, JSON)
    to make them more manageable and searchable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`INFO`, `DEBUG`, `ERROR`) and be selective about what gets logged.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Centralized logging**: Use a centralized system to collect and store logs
    securely.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mask sensitive data**: If you must log certain data (for example, for debugging),
    mask or redact sensitive parts (for example, replace credit card numbers with
    asterisks).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember – handling sensitive data responsibly is crucial for both security
    and compliance.
  prefs: []
  type: TYPE_NORMAL
- en: With these concepts learned, we can continue with log transport and storage.
  prefs: []
  type: TYPE_NORMAL
- en: Log transport and storage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Structured logging, when combined with appropriate **log transport and storage**
    mechanisms, enhances the observability and manageability of microservices. Log
    transport and storage are the processes of moving and storing your log data from
    your application to a log management system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the most common mechanisms:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Console transport**: Logs are often initially output to the console for development
    and debugging purposes. Console transport is quick and easy to set up, as shown
    here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**File transport**: Logs can be stored in files for later analysis. File transports
    are suitable for storing logs locally and can be set up like this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Cloud-based storage**: For cloud-based storage, consider services such as
    Amazon CloudWatch, Google Cloud Logging, or Azure Monitor. These services provide
    scalable, searchable, and centralized log storage. Here’s how to set them up:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**ELK Stack (Elasticsearch, Logstash, Kibana)**: The ELK Stack is a popular
    open source solution for log storage and analysis. It allows you to index logs
    in Elasticsearch, process them with Logstash, and visualize them using Kibana.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Centralized logging solutions**: Services such as Splunk, Sumo Logic, or
    Datadog offer centralized logging solutions. **Centralized logging solutions**
    are systems that collect, store, and analyze log data from multiple sources, such
    as Node.js applications, servers, networks, or other services. Centralized logging
    solutions can help you monitor, troubleshoot, and optimize your Node.js applications
    by providing a unified and comprehensive view of your log data. Centralized logging
    solutions can also help you improve the security, performance, and reliability
    of your Node.js applications by detecting and resolving issues faster, reducing
    log noise, and enhancing log quality with advanced features such as search, analytics,
    and alerting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In summary, the choice of transport and storage depends on factors such as scalability,
    analysis requirements, and the overall architecture of your application.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can continue to the next section, in which we will talk about log filtering,
    sampling, error handling, and exception logging.
  prefs: []
  type: TYPE_NORMAL
- en: Log filtering, sampling, error handling, and exception logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a microservices architecture, effective **log filtering**, **sampling**,
    **error handling**, and **exception logging** are crucial for managing logs efficiently
    and gaining insights into the system’s behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how you can approach these aspects:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Log filtering**: Log filtering involves selectively capturing and storing
    log entries based on specific criteria. This is essential for managing the volume
    of logs and focusing on relevant information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is its implementation with Winston (Node.js):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this example, logs are filtered based on severity levels, and exceptions
    are separately handled.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Log sampling**: Log sampling involves capturing a subset of logs, rather
    than logging every event. This is useful when dealing with high-volume systems
    to avoid overwhelming log storage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here’s an implementation of log sampling with Winston:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this example, only approximately 10% of log messages are written to the `sampled.log`
    file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Error handling and exception logging**: Error handling is crucial for identifying
    and resolving issues in a microservices architecture. Logging exceptions with
    detailed information aids in debugging.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here’s an implementation of error handling with exception logging with Winston:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this example, the exception is caught, and the details are logged separately
    in the `exceptions.log` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In summary, use filtering to include or exclude logs based on specific criteria,
    such as severity levels or custom conditions. Implement log sampling to capture
    a subset of logs, especially in high-volume systems, to avoid overwhelming log
    storage. Properly handle errors in your code and log detailed information about
    exceptions to aid in debugging and troubleshooting. Separate exception logs from
    regular logs for clarity.
  prefs: []
  type: TYPE_NORMAL
- en: Tailoring log filtering and sampling to your specific application and environment
    is essential for achieving the right balance between capturing valuable information
    and managing log volume efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn about context propagation, monitoring, and
    analyzing logs.
  prefs: []
  type: TYPE_NORMAL
- en: Context propagation, monitoring, and analyzing logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Context propagation, monitoring, and log analysis are critical aspects of managing
    microservices in a distributed system. In this section, we take a deeper look
    at context propagation.
  prefs: []
  type: TYPE_NORMAL
- en: Context propagation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In microservices, where requests can traverse multiple services, propagating
    context information is essential for tracking and understanding the flow of requests.
    Contextual information, often in the form of headers or tokens, allows you to
    correlate logs across different microservices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of context propagation. In a Node.js environment with Express.js,
    you can use middleware to propagate context information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: In this example, a unique request ID is added to the request, and it’s used
    to log the start of the request and any errors that occur. Context propagation
    in Node.js is the process of transferring context information, such as trace IDs,
    across asynchronous boundaries, such as callbacks, promises, or event emitters.
    Context propagation enables distributed tracing, which allows you to monitor and
    analyze the performance and behavior of your Node.js applications across multiple
    services and processes.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will talk about monitoring.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Monitoring** involves actively observing the behavior and performance of
    microservices to ensure they meet **service-level objectives** (**SLOs**) and
    to identify and address issues proactively.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some tools for monitoring:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Prometheus**: An open source monitoring and alerting toolkit designed for
    reliability and scalability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Grafana**: Works well with Prometheus to visualize and analyze metrics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Datadog, New Relic, or AppDynamics**: Commercial solutions that provide comprehensive
    monitoring capabilities, including performance metrics, error rates, and distributed
    tracing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are just some of the tools that can help you monitor your Node.js applications.
    You can also use other tools or methods, such as the built-in Node.js debugger,
    the `console` module, or the `node:async_hooks` module. The choice of the tool
    depends on your specific needs and goals. You can also combine different tools
    to get a more complete picture of your application’s performance and behavior.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will talk about log analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Log analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Log analysis** involves extracting valuable insights from logs to understand
    the behavior of microservices, troubleshoot issues, and identify areas for optimization.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some tools for log analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ELK Stack**: Elasticsearch is used for indexing logs, Logstash for log processing,
    and Kibana for visualization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Splunk**: A commercial log analysis platform that allows you to search, monitor,
    and analyze machine-generated data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Graylog**: An open source log management platform with search and analysis
    capabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In summary, propagate context information, such as request IDs, across microservices
    to correlate logs and trace the flow of requests. Actively monitor microservices
    using tools such as Prometheus, Grafana, Datadog, or others to ensure they meet
    performance and reliability objectives. Use log analysis tools such as the ELK
    Stack, Splunk, or Graylog to extract meaningful insights from logs and facilitate
    troubleshooting and optimization.
  prefs: []
  type: TYPE_NORMAL
- en: By effectively implementing context propagation, monitoring, and log analysis,
    you can enhance the observability of your microservices, making it easier to maintain,
    troubleshoot, and optimize the entire system.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned a lot about microservices and how to monitor
    microservices in Node.js using several principles and tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'In summary, logging in microservices with Node.js is a crucial aspect of ensuring
    observability, troubleshooting, and maintaining the health of a distributed system.
    Here’s a summary of key points:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Logging libraries**: Use logging libraries such as Winston in Node.js for
    structured and flexible logging.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`error`, `warn`, `info`, `debug`) to categorize and prioritize logs based on
    severity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Structured logging**: Implement structured logging by formatting logs as
    key-value pairs or JSON objects for better machine readability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Context propagation**: Propagate contextual information (for example, request
    IDs) across microservices to correlate logs and trace the flow of requests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Error handling**: Implement error handling and exception logging to capture
    detailed information about errors, aiding in debugging.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Log filtering and sampling**: Apply log filtering to selectively capture
    logs based on criteria such as severity levels. Consider log sampling to capture
    a subset of logs, especially in high-volume systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Log transport and storage**: Choose appropriate log transports (for example,
    console, file, cloud-based storage) based on your application’s needs and architecture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Monitoring**: Actively monitor microservices using tools such as Prometheus,
    Grafana, Datadog, or commercial solutions to ensure performance and reliability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Log analysis**: Leverage log analysis tools such as the ELK Stack, Splunk,
    or Graylog to extract valuable insights from logs for troubleshooting and optimization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Centralized logging**: Consider centralized logging solutions for better
    aggregation, search, and analysis of logs. Effective logging practices contribute
    to the overall observability of microservices, facilitating quick identification
    and resolution of issues, optimizing performance, and improving the reliability
    of the entire system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn about interpreting monitoring data
    in microservices.
  prefs: []
  type: TYPE_NORMAL
- en: Quiz time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are some popular logging libraries for Node.js?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is structured logging?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are log filtering, sampling, error handling and exception logging?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
