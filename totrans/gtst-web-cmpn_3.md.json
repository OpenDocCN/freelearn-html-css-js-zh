["```js\n<company-header \n   icon=\"icon.png\"\n    page-name=\"My Page\">\n</company-header>\n```", "```js\n<!DOCTYPE html>\n<html lang=\"en\" dir=\"ltr\">\n  <head>\n    <title>Custom header</title>\n\n    <!--\n      Notice how we use type=\"module\"\n    -->\n    <script type=\"module\">\n\n      import CompanyHeader from './CompanyHeader.js';\n\n      // We are now defining the custom element\n      customElements.define('company-header', CompanyHeader);\n    </script>\n\n  </head>\n  <body>\n\n    <company-header\n        icon=\"icon.png\"\n        page-name=\"My Page\">\n    </company-header>\n  </body>\n</html>\n```", "```js\n// CompanyHeader.js\n\nexport default class CompanyHeader extends HTMLElement {\n  constructor() {\n\n    // We are not even going to touch this.\n    super();\n\n    // Lets provide a default icon\n    this.icon = 'newicon.jpeg';\n\n    // Then lets render the template\n    this.render();\n  }\n\n  render() {\n    this.innerHTML = this.getTemplate();\n  }\n\n  // Lets get icon and page-name from attributes\n  static get observedAttributes() {\n    return ['icon', 'page-name'];\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (name == 'icon') {\n      this.icon = newValue;\n    }\n\n    if (name == 'page-name') {\n      this.pageName = newValue;\n    }\n\n    // Lets re-render after getting the new attributes\n    this.render();\n  }\n\n  getTemplate() {\n    return `\n      <a href=\"/\">\n        <img class=\"icon\" src=\"img/${this.icon}\" />\n      </a>\n      <h1 class=\"heading\">${this.pageName}</h1>\n      <div>\n        <a class=\"header-links\" href=\"/home.html\">Home</a>\n        <a class=\"header-links\" href=\"/aboutus.html\">About Us</a>\n      </div>\n    `;\n  }\n}\n\n```", "```js\n<style>\n  company-header {\n    display: flex;\n    background: #44afdc;\n    align-items: center;\n    padding: 0 10px;\n  }\n  .icon {\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n  }\n  .heading {\n    flex: 1;\n    color: white;\n    padding-left: 20px;\n  }\n  .header-links {\n    text-decoration: none;\n    padding: 20px;\n    color: white;\n  }\n</style>\n```", "```js\n<style>\n  company-header {\n    display: flex;\n    background: #44afdc;\n    align-items: center;\n    padding: 0 10px;\n  }\n  company-header .icon {\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n  }\n  company-header .heading {\n    flex: 1;\n    color: white;\n    padding-left: 20px;\n  }\n  company-header .header-links {\n    text-decoration: none;\n    padding: 20px;\n    color: white;\n  }\n</style>\n```", "```js\n// CompanyHeader.js\n\nexport default class CompanyHeader extends HTMLElement {\n  constructor() {\n\n    // We are not even going to touch this.\n    super();\n\n    // Lets provide a default icon\n    this.icon = 'newicon.jpeg';\n\n    // lets create our shadow root\n    this.shadowObj = this.attachShadow({mode: 'open'});\n\n    // Then lets render the template\n    this.render();\n  }\n\n  render() {\n\n    this.shadowObj.innerHTML = this.getTemplate();\n  }\n\n  // Lets get icon and page-name from attributes\n  static get observedAttributes() {\n    return ['icon', 'page-name'];\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (name == 'icon') {\n      this.icon = newValue;\n    }\n\n    if (name == 'page-name') {\n      this.pageName = newValue;\n    }\n\n    // Lets re-render after getting the new attributes\n    this.render();\n  }\n\n  getTemplate() {\n    return `\n      <a href=\"/\">\n        <img class=\"icon\" src=\"img/${this.icon}\" />\n      </a>\n      <h1 class=\"heading\">${this.pageName}</h1>\n      <div>\n        <a class=\"header-links\" href=\"/home.html\">Home</a>\n        <a class=\"header-links\" href=\"/aboutus.html\">About Us</a>\n      </div>\n    `;\n  }\n}\n```", "```js\ngetTemplate() {\n    return `\n      <a href=\"/\">\n        <img class=\"icon\" src=\"img/${this.icon}\" />\n      </a>\n      <h1 class=\"heading\">${this.pageName}</h1>\n      <div>\n        <a class=\"header-links\" href=\"/home.html\">Home</a>\n        <a class=\"header-links\" href=\"/aboutus.html\">About Us</a>\n      </div>\n      <style>\n        :host {\n          display: flex;\n          background: #44afdc;\n          align-items: center;\n          padding: 0 10px;\n        }\n        .icon {\n          width: 50px;\n          height: 50px;\n          border-radius: 50%;\n        }\n        .heading {\n          flex: 1;\n          color: white;\n          padding-left: 20px;\n        }\n        .header-links {\n          text-decoration: none;\n          padding: 20px;\n          color: white;\n        }\n      </style>\n    `;\n  }\n```", "```js\n<script type=\"module\">\n\n  import CompanyLogin from './CompanyLogin.js';\n\n  // We are now defining the custom element\n  customElements.define('company-login', CompanyLogin);\n</script>\n```", "```js\ngetTemplate() {\n  return `\n    <input type=\"text\" name=\"username\" placeholder=\"Username\"/>\n    <input type=\"password\" name=\"password\" placeholder=\"Password\"/>\n    <button type=\"submit\" class=\"login-button\">Login</button>\n  `;\n}\n```", "```js\n// lets create our shadow root\nthis.shadowObj = this.attachShadow({mode: 'open'});\n\nthis.shadowObj.innerHTML = this.getTemplate();\n```", "```js\nconnectedCallback() {\n  this.shadowObj.querySelector('button')\n    .addEventListener('click', (e) => this.handleLogin(e));\n}\n```", "```js\nhandleLogin(e) {\n  this.username = this.shadowObj.querySelector('[name=username]').value;\n  this.password = this.shadowObj.querySelector('[name=password]').value;\n\n  // Do what ever you want with these values\n  console.log(this.username, this.password);\n\n  // We will do things as per our requirement\n  let loginSuccess = Math.random();\n  if(loginSuccess > 0.5) {\n    this.classList.add('login-success');\n  } else {\n    this.classList.add('login-failure');\n  }\n}\n```", "```js\n<style>\n  :host {\n    background: #68afe8;\n    padding: 20px;\n    display: flex;\n    flex-direction: column;\n    width: 400px;\n    margin: 0 auto;\n  }\n  :host(.login-failure) {\n    background: #f35353;\n  }\n  :host(.login-success) {\n    background: #499c19;\n  }\n  input {\n    margin-top: 5px;\n    padding: 10px;\n    height: 30px;\n    font-size: 15px;\n    border: none;\n    border-radius: 5px;\n  }\n  button {\n    margin-top: 15px;\n    padding: 10px;\n    font-size: 15px;\n    border: none;\n    height: 50px;\n    border-radius: 5px;\n    cursor: pointer;\n  }\n</style>\n```", "```js\ngetTemplate() {\n  return `\n    <img src=\"img/${this.getAttribute('src')}\" \n         alt=\"${this.getAttribute('alt')}\"/>\n    ${this.handleErrors()}\n    <style>\n      img {\n        width: 400px;;\n      }\n    </style>\n  `;\n}\n```", "```js\n<header-image alt=\"Blue Clouds\"\n      src=\"img/clouds-sky-header.jpg\">\n</header-image>  \n```", "```js\nhandleErrors() {\n  if(!this.getAttribute('alt')) {\n    return `\n      <div class=\"error\">Missing Alt Text</div>\n      <style>\n        .error {\n          color: red;\n        }\n      </style>\n    `;\n  }\n\n  return ``;\n}\n```"]