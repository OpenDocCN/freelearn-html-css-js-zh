["```js\n    const express = require('express');\n    ```", "```js\n    const app = express();\n    ```", "```js\n    app.get('/api/resource', (req, res) => {\n    ```", "```js\n      res.send('Hello, API!');\n    ```", "```js\n    });\n    ```", "```js\n    app.listen(3000, () => {\n    ```", "```js\n      console.log('Server is running on port 3000');\n    ```", "```js\n    });\n    ```", "```js\n    // Import the restify module\n    ```", "```js\n    const restify = require('restify');\n    ```", "```js\n    // Create a server instance\n    ```", "```js\n    const server = restify.createServer();\n    ```", "```js\n    // Define a GET handler for the /api/resource endpoint\n    ```", "```js\n    server.get('/api/resource', (req, res, next) => {\n    ```", "```js\n      // Send a response with the text \"Hello, API!\"\n    ```", "```js\n      res.send('Hello, API!');\n    ```", "```js\n    });\n    ```", "```js\n    // Start the server and listen on port 3000\n    ```", "```js\n    server.listen(3000, () => {\n    ```", "```js\n      // Log a message to the console\n    ```", "```js\n      console.log('Server is running on port 3000');\n    ```", "```js\n    });\n    ```", "```js\n        const passport = require('passport');\n        ```", "```js\n        const LocalStrategy = require('passport-local').Strategy;\n        ```", "```js\n        passport.use(new LocalStrategy(\n        ```", "```js\n          (username, password, done) => {\n        ```", "```js\n            // Assuming a simple username/password check for demonstration purposes\n        ```", "```js\n        if (username === 'same_name' && password === 'secret') {\n        ```", "```js\n              const user = { id: 1, username: ' same_name' };\n        ```", "```js\n              return done(null, user); // Authentication successful\n        ```", "```js\n            } else {\n        ```", "```js\n              return done(null, false); // Authentication failed\n        ```", "```js\n            }\n        ```", "```js\n          }\n        ```", "```js\n        ));\n        ```", "```js\n        function isAdmin(req, res, next) {\n        ```", "```js\n          if (req.user && req.user.role === 'admin') {\n        ```", "```js\n            return next(); // User is authorized\n        ```", "```js\n          }\n        ```", "```js\n          res.status(403).send('Forbidden'); // User is not authorized\n        ```", "```js\n        }\n        ```", "```js\n        // Usage in a route\n        ```", "```js\n        app.get('/admin/resource', isAdmin, (req, res) => {\n        ```", "```js\n          // Handle the request for admin-only resource\n        ```", "```js\n        });\n        ```", "```js\n    const jwt = require('jsonwebtoken');\n    ```", "```js\n    // Generate a token\n    ```", "```js\n    const token = jwt.sign({ userId: '123' }, 'secretKey', { expiresIn: '1h' });\n    ```", "```js\n    // Verify a token\n    ```", "```js\n    jwt.verify(token, 'secretKey', (err, decoded) => {\n    ```", "```js\n      if (err) {\n    ```", "```js\n        // Token is invalid\n    ```", "```js\n      } else {\n    ```", "```js\n        // Token is valid, use decoded data\n    ```", "```js\n      }\n    ```", "```js\n    });\n    ```", "```js\n    const Joi = require('joi');\n    ```", "```js\n    const schema = Joi.object({\n    ```", "```js\n      username: Joi.string().alphanum().min(3).max(30).required(),\n    ```", "```js\n      password: Joi.string().pattern(new RegExp('^[a-zA-Z0-9]{3,30}$')),\n    ```", "```js\n    });\n    ```", "```js\n    app.post('/api/register', (req, res) => {\n    ```", "```js\n      const { error, value } = schema.validate(req.body);\n    ```", "```js\n      if (error) {\n    ```", "```js\n        res.status(400).send(error.details[0].message);\n    ```", "```js\n      } else {\n    ```", "```js\n        // Process the valid data\n    ```", "```js\n      }\n    ```", "```js\n    });\n    ```", "```js\n    // import the validator module\n    ```", "```js\n    var validator = require('validator');\n    ```", "```js\n    // check if the example email is a true email\n    ```", "```js\n    validator.isEmail('foo@bar.com'); //=> true\n    ```", "```js\n        const DOMPurify = require('dompurify');\n        ```", "```js\n        const sanitizedHTML = DOMPurify.sanitize(req.body.htmlInput);\n        ```", "```js\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        ```", "```js\n        if (!emailRegex.test(req.body.email)) {\n        ```", "```js\n          // Handle invalid email address\n        ```", "```js\n        }\n        ```", "```js\n    app.use((err, req, res, next) => {\n    ```", "```js\n      console.error(err.stack);\n    ```", "```js\n      res.status(500).send('Something went wrong!');\n    ```", "```js\n    });\n    ```", "```js\n    class CustomError extends Error {\n    ```", "```js\n      constructor(message, statusCode) {\n    ```", "```js\n        super(message);\n    ```", "```js\n        this.statusCode = statusCode;\n    ```", "```js\n      }\n    ```", "```js\n    }\n    ```", "```js\n    // Usage\n    ```", "```js\n    throw new CustomError('Custom error message', 400);\n    ```", "```js\n    const winston = require('winston');\n    ```", "```js\n    winston.error('Error message', { error: err, request: req });\n    ```", "```js\n    app.get('/api/resource', (req, res, next) => {\n    ```", "```js\n      const error = new Error('Resource not found');\n    ```", "```js\n      error.status = 404;\n    ```", "```js\n      next(error);\n    ```", "```js\n    });\n    ```", "```js\n    app.get('/api/resource', async (req, res, next) => {\n    ```", "```js\n      try {\n    ```", "```js\n        const data = await fetchData();\n    ```", "```js\n        res.json(data);\n    ```", "```js\n      } catch (err) {\n    ```", "```js\n        next(err);\n    ```", "```js\n      }\n    ```", "```js\n    });\n    ```", "```js\n    openapi: 3.0.0\n    ```", "```js\n    info:\n    ```", "```js\n      title: My API\n    ```", "```js\n      version: 1.0.0\n    ```", "```js\n    paths:\n    ```", "```js\n      /api/resource:\n    ```", "```js\n        get:\n    ```", "```js\n          summary: Get resource\n    ```", "```js\n          responses:\n    ```", "```js\n            '200':\n    ```", "```js\n              description: Successful response\n    ```", "```js\n    ## Get Resource [/api/resource]\n    ```", "```js\n    + Response 200 (application/json)\n    ```", "```js\n      + Body\n    ```", "```js\n        {\n    ```", "```js\n          \"data\": \"Resource data\"\n    ```", "```js\n        }\n    ```", "```js\n    /**\n    ```", "```js\n    * Get resource\n    ```", "```js\n    * @route GET /api/resource\n    ```", "```js\n    * @returns {object} 200 - Successful response\n    ```", "```js\n    */\n    ```", "```js\n    app.get('/api/resource', (req, res) => {\n    ```", "```js\n      res.json({ data: 'Resource data' });\n    ```", "```js\n    });\n    ```", "```js\n        test('adds 1 + 2 to equal 3', () => {\n        ```", "```js\n          expect(sum(1, 2)).toBe(3);\n        ```", "```js\n        });\n        ```", "```js\n        const request = require('supertest');\n        ```", "```js\n        const app = require('../app');\n        ```", "```js\n        test('GET /api/resource returns 200', async () => {\n        ```", "```js\n          const response = await request(app).get('/api/resource');\n        ```", "```js\n          expect(response.status).toBe(200);\n        ```", "```js\n        });\n        ```", "```js\n        describe('My API', () => {\n        ```", "```js\n          it('successfully loads', () => {\n        ```", "```js\n            cy.visit('/api/resource');\n        ```", "```js\n            cy.contains('Resource data');\n        ```", "```js\n          });\n        ```", "```js\n        });\n        ```", "```js\n        const nock = require('nock');\n        ```", "```js\n        nock('https://api.example.com')\n        ```", "```js\n          .get('/data')\n        ```", "```js\n          .reply(200, { data: 'Mocked data' });\n        ```", "```js\n        test.each([\n        ```", "```js\n          [1, 2, 3],\n        ```", "```js\n          [0, 0, 0],\n        ```", "```js\n          [-1, 1, 0],\n        ```", "```js\n        ])('adds %i + %i to equal %i', (a, b, expected) => {\n        ```", "```js\n          expect(sum(a, b)).toBe(expected);\n        ```", "```js\n        });\n        ```", "```js\n    // API Gateway route\n    ```", "```js\n    app.get('/api/resource', (req, res) => {\n    ```", "```js\n      // Forward request to the appropriate microservice\n    ```", "```js\n      // ...\n    ```", "```js\n    });\n    ```", "```js\n    upstream microservices {\n    ```", "```js\n      server microservice1:3000;\n    ```", "```js\n      server microservice2:3000;\n    ```", "```js\n    }\n    ```", "```js\n    // API Gateway middleware\n    ```", "```js\n    app.use('/api', (req, res, next) => {\n    ```", "```js\n      // Authenticate and authorize the request\n    ```", "```js\n      // ...\n    ```", "```js\n      next();\n    ```", "```js\n    });\n    ```", "```js\n    const rateLimit = require('express-rate-limit');\n    ```", "```js\n    const apiLimiter = rateLimit({\n    ```", "```js\n      windowMs: 15 * 60 * 1000, // 15 minutes\n    ```", "```js\n      max: 100, // limit each IP to 100 requests per windowMs\n    ```", "```js\n    });\n    ```", "```js\n    // Apply rate limiting to the API Gateway routes\n    ```", "```js\n    app.use('/api', apiLimiter);\n    ```", "```js\n    // API Gateway route for response aggregation\n    ```", "```js\n    app.get('/api/aggregated-resource', async (req, res) => {\n    ```", "```js\n      // Call multiple microservices and aggregate responses\n    ```", "```js\n      // ...\n    ```", "```js\n    });\n    ```"]