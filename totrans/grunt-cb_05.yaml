- en: Chapter 5. Running Automated Tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Running Jasmine tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running QUnit tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running NodeUnit tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running Mocha client-side tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running Mocha server-side tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating coverage reports for server-side code using Mocha and Blanket
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating coverage reports for client-side code using Mocha and Blanket
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating coverage reports for client-side code using QUnit and Istanbul
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the size and complexity of a software unit increases, it can become quite
    time-consuming to ensure that it behaves according to its specifications each
    time it is altered. For this purpose, automated testing becomes invaluable by
    increasing the overall reliability and quality of a software unit, without constant
    manual testing.
  prefs: []
  type: TYPE_NORMAL
- en: There are various levels of testing that a project can implement, ranging from
    unit tests at the function or class level, up to integration tests that make use
    of an entire application stack. Most testing frameworks provide for this entire
    range, perhaps just with the addition of a few tools.
  prefs: []
  type: TYPE_NORMAL
- en: Also worth mentioning in relation to testing is the practice of test-driven
    development, in which a developer first creates (initially failing) a test case
    for a desired improvement or a new feature, and then does the minimum amount of
    development to make the test case pass. To finish it off, the developer will then
    review the written code and refactor it to acceptable standards.
  prefs: []
  type: TYPE_NORMAL
- en: Running Jasmine tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `contrib-jasmine (0.7.0)` plugin to run
    our automated **Jasmine** tests in a **PhantomJS** browser environment.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through creating a sample code base, a few tests
    to run against the code base, and setting up Grunt to run them for us in a PhantomJS
    browser environment.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `contrib-jasmine` plugin
    by following the instructions provided in the *Installing a plugin* recipe in
    [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"),
    *Getting Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we''ll create a simple JavaScript source file in our project directory,
    which contains a function that we''d like to test. Let''s call it `main.js` and
    add the following content to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can write a simple suite of tests, using the Jasmine framework, to
    test the `square` method. Let''s create a file called `tests.js` in the project
    directory with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With our code base and tests created, we can now add the following `jasmine`
    task to our configuration, which will load the code from `main.js`, and run the
    tests in the `tests.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can then run the task using the `grunt jasmine` command, which should produce
    the following output informing us of the test results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `jasmine` task provides us with several useful options that can be used
    in conjunction with its basic test running feature. We'll look at how to load
    helpers to be used in tests, how to load libraries before running tests, how to
    load styles required by tests, and how to provide a custom template for the specification
    runner.
  prefs: []
  type: TYPE_NORMAL
- en: Loading helpers to be used in tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If we''d like to make use of custom equality testers or matchers, we can include
    them using the `helpers` option before tests are run. In the following example,
    we indicate that the custom helpers contained in the `helpers.js` file should
    be loaded before running the tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Loading libraries before running tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In case the code we''d like to test depends on third-party libraries that you
    don''t load in either your source, specifications or helpers, they can be loaded
    using the `vendor` option as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Loading styles required by tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If we have tests that depend on specific CSS styles being present in the browser,
    we can have them loaded using the `styles` option as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Providing a custom template for the specification runner
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When writing tests for source code that runs inside a browser, the need for
    a few HTML elements, such as fixtures, can be quite common. The simplest way to
    add HTML to the generated specification runner (`test.html`) is to customize the
    template that it's generated with.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps take us through retrieving the default specification runner
    template, customizing it, and using it as our template:'
  prefs: []
  type: TYPE_NORMAL
- en: The default specification runner template can be retrieved from the repository
    of the `contrib-jasmine` plugin and saved to the `runner.tmpl` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At the time of writing this, the default specification runner template could
    be downloaded from the following link:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[https://github.com/gruntjs/grunt-contrib-jasmine/raw/master/tasks/jasmine/templates/DefaultRunner.tmpl](https://github.com/gruntjs/grunt-contrib-jasmine/raw/master/tasks/jasmine/templates/DefaultRunner.tmpl)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once we have the default template saved as `runner.tmpl`, we can make some
    alterations to it. In the following example, we''ll just add an element with some
    text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the custom template ready, we''ll make use of the `template` option to
    indicate that it should be used in the generation of the runner:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will now make the `test` element available to us in our tests, allowing
    us to include tests similar to the following in our specifications:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Running QUnit tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `contrib-qunit (0.5.2)` plugin to run
    our automated **QUnit** tests in a **PhantomJS** browser environment.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through creating a sample code base, a few tests
    to run against the code base, setting up a testing environment, and configuring
    Grunt to run them for us in a PhantomJS browser.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `contrib-qunit` plugin
    by following the instructions provided in the *Installing a plugin* recipe in
    [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"),
    *Getting Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we''ll create a simple JavaScript source file in our project directory,
    which contains a function that we''d like to test. Let''s call it `main.js` and
    provide it with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can write a simple set of tests, using the QUnit framework, for the
    `square` method. Let''s create a file called `tests.js` in the project directory
    with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Due to the tests being run inside a browser and the `contrib-qunit` plugin not
    automatically including it, we'll have to download the QUnit library and style
    sheet into the project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At the time of writing this, the QUnit library and its accompanying style sheet
    could be downloaded from the following links:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://code.jquery.com/qunit/qunit-1.15.0.js](http://code.jquery.com/qunit/qunit-1.15.0.js)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://code.jquery.com/qunit/qunit-1.15.0.css](http://code.jquery.com/qunit/qunit-1.15.0.css)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To bring together all the parts we set up in the previous steps, we now need
    to create a testing environment that loads our code base, tests, and all the required
    libraries. Let''s create the `test.html` file in our project directory with the
    following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the code base, tests, and testing environment now in place, we can add
    the following `qunit` task to our configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can then run the task using the `grunt qunit` command, which should produce
    the following output informing us of the test results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `qunit` task provides us with several useful options that can be used in
    conjunction with its basic test running feature. We'll look at loading tests from
    a web server, continuing execution after failed tests, suppressing the PhantomJS
    browser console output, and passing arguments to the PhantomJS instance.
  prefs: []
  type: TYPE_NORMAL
- en: Loading tests from a web server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we'd like to load our testing environment along with all its parts from a
    web server instead of straight from a file on the filesystem, we can make use
    of the `urls` option by providing it with the absolute URLs of the testing environments
    that we'd like to run.
  prefs: []
  type: TYPE_NORMAL
- en: The following example takes us through moving the required files to a directory
    they can be served from, setting up a basic web server that serves them, and altering
    our configuration to test the files from the web server.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `contrib-connect` plugin
    by following the instructions provided in the *Installing a plugin* recipe in
    [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"),
    *Getting Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we can create a directory called `www` in the project root and move the
    `main.js`, `qunit-1.15.0.css`, `qunit-1.15.0.js`, `test.html`, and `tests.js`
    files into it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we can set up the basic web server that will serve the files from the
    `www` directory by adding the following `connect` task configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the server ready to serve the files required by our testing environment,
    we can alter the configuration of our `qunit` task to load it from the appropriate
    URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To test our setup, we can run the `grunt connect qunit` command to start the
    web server and run the testing environment hosted on it. This should produce output
    similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Continuing execution after failed tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The default behavior of the `qunit` task is to fail the entire task if a failure
    occurs in any one of the tests. This will in turn cause any of the tasks lined
    up for execution after the `qunit` task not to be executed. By setting the `force`
    option to `true`, as we do in the following example, we can indicate that the
    task itself should not fail due to test failures:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Suppressing the PhantomJS browser console output
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The default behavior of the `qunit` task is to print the console output generated
    in the headless PhantomJS browser to the command line where the task runs. If
    we''d like to prevent the console output from being printed, we can set the `console`
    option to `false` as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Passing arguments to the PhantomJS instance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In case we'd like to pass some options to the PhantomJS process when it starts,
    we can provide them along with the regular options just as they will be provided
    on the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A list of arguments that the PhantomJS executable accepts can be found at the
    following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://phantomjs.org/api/command-line.html](http://phantomjs.org/api/command-line.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example disables the loading of images in the browser by setting
    the `load-images` option to `false`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Running NodeUnit tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `contrib-nodeunit (0.4.1)` plugin to run
    our automated **NodeUnit** tests.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through creating a sample code base, creating a
    few tests to run against the code base, and configuring Grunt to run them for
    us.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `contrib-nodeunit` plugin
    by following per the instructions provided in the *Installing a plugin* recipe
    in [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"),
    *Getting Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we''ll create a simple JavaScript source file in our project directory
    that contains and exports a function that we''d like to test. Let''s call it `main.js`
    and add the following content to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can write a simple set of tests, using the NodeUnit framework, to test
    the `square` method. We will also have to import the `square` method into our
    suite of tests, since the `nodeunit` task does not do this automatically. Let''s
    create a file called `tests.js` in the project directory with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With our code base and tests created, we can now add the following `nodeunit`
    task to our configuration, which will run the tests contained in the `tests.js`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can then run the task using the `grunt nodeunit` command, which will produce
    the following output informing us of the test results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `nodeunit` task provides us with several useful options that can be used
    in conjunction with its basic test-running feature. We'll look at how to use an
    alternative reporter and send reporter output to a file.
  prefs: []
  type: TYPE_NORMAL
- en: Using an alternative reporter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In case we'd like to alter the way that the test results are displayed, we can
    make use of an alternative reporter by specifying one using the `reporter` option.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The default value of the `reporter` option is `grunt`, but it can be set to
    any one of the reporters listed in the `module.exports` object at the following
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/caolan/nodeunit/blob/master/lib/reporters/index.js](https://github.com/caolan/nodeunit/blob/master/lib/reporters/index.js)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we use the `reporter` option to indicate that we''d
    like the results of our tests to be reported in the HTML format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Sending reporter output to a file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If we''d like the reported results of our tests to be stored in a file when
    the `nodeunit` task is run, we can indicate which file should receive it using
    the `reporterOutput` option, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Running Mocha client-side tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `mocha (0.4.11)` plugin to run our automated
    **Mocha** tests in a **PhantomJS** browser environment.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through creating a sample code base, creating a
    few tests to run against the code base, and configuring Grunt to run them for
    us in a PhantomJS browser environment.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `mocha` plugin by following
    the instructions provided in the *Installing a plugin* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we''ll create a simple JavaScript source file in our project directory
    that contains a function that we''d like to test. Let''s call it `main.js` and
    provide it with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can write a simple suite of tests, using the Mocha and **Expect.js**
    frameworks, for the `square` method. Let''s create a file called `tests.js` in
    the project directory with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Due to the tests being run inside a browser and the `mocha` plugin not automatically
    including it, we'll have to download the Mocha library and style sheet into the
    project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At the time of writing this, the Mocha library and its accompanying style sheet
    could be downloaded from the following links:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[https://github.com/visionmedia/mocha/raw/master/mocha.js](https://github.com/visionmedia/mocha/raw/master/mocha.js)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[https://github.com/visionmedia/mocha/raw/master/mocha.css](https://github.com/visionmedia/mocha/raw/master/mocha.css)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Seeing as the Mocha framework does not include the Expect.js assertion library
    by default, we also need to download it into our project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At the time of writing this, the Expect.js library could be downloaded from
    the following link:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[https://github.com/LearnBoost/expect.js/raw/master/index.js](https://github.com/LearnBoost/expect.js/raw/master/index.js)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that for our current example, we'll download the `index.js` file mentioned,
    and change its filename to `expect.js`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To bring together all the parts we set up, we now need to create a testing
    environment that loads our code base, tests, and all the required libraries. Let''s
    create the `test.html` file in our project directory with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With our code base, tests, and testing environment ready, we can now add the
    following `mocha` task to our configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The `mocha` task injects code into the PhantomJS browser in order to gather
    the results of the tests once they have finished running. The `mocha.run` method
    call required to start the execution of the tests contained in the environment
    needs to run after the injection of this code in order for the results to be captured.
    Setting the `run` option to `true` ensures that this method is called after the
    injection of the code is completed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can then run the task using the `grunt mocha` command, which should produce
    the following output informing us of the test results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `mocha` task provides us with several useful options that can be used in
    conjunction with its basic test-running feature. We'll look at loading tests from
    a web server, sending reporter output to a file, displaying the PhantomJS browser's
    console output, displaying source errors, specifying options for the Mocha test
    runner, and using an alternative reporter.
  prefs: []
  type: TYPE_NORMAL
- en: Loading tests from a web server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we'd like to load our testing environment along with all its parts from a
    web server instead of straight from a file on the filesystem, we can make use
    of the `urls` option by passing the absolute URLs of the testing environments
    that we'd like to run.
  prefs: []
  type: TYPE_NORMAL
- en: The following example takes us through moving the required files to a directory
    they can be served from, setting up a basic web server that serves them, and altering
    our configuration to test the files from the web server.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `contrib-connect` plugin
    by following the instructions provided in the *Installing a plugin* recipe in
    [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"),
    *Getting Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we can create a directory called `www` in the project root and move the
    `expect.js`, `main.js`, `mocha.css`, `mocha.js`, `test.html`, and `tests.js` files
    into it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we can set up the basic web server, which will serve the files from the
    `www` directory by adding the following `connect` task configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the server ready to serve the files for the testing environment, we can
    now alter the configuration of our `mocha` task to load it from the appropriate
    URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To test our setup, we can run the `grunt connect qunit` command to start the
    web server and run the testing environment hosted on it. This should produce output
    similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Sending reporter output to a file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If we''d like the reported results of our tests to be stored in a file when
    the `mocha` task is run, we can indicate which file should receive it using the
    `dest` option as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Displaying the PhantomJS browser's console output
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By default, the output from the Phantom JS browser''s console will not be displayed
    in the command-line output when the `mocha` task runs. If we''d like to display
    the output, we can set the `log` option to `true` as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Displaying source errors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The default behavior for the `mocha` task is to ignore syntax errors encountered
    in the source files that the tests will run against. If an error is encountered,
    the source will simply not load, and probably cause all the tests to fail without
    a useful error message.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we''d like to be informed of the errors encountered in the source, we can
    set the `logErrors` option to `true` as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Specifying options for the Mocha test runner
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In case we''d like to specify some options directly to the Mocha test runner
    that runs behind the scenes of the `mocha` task, we can provide them using the
    `mocha` option. The following example uses the `grep` option to indicate that
    only tests that contain the string `''2''` in their description should be run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A list of the available options along with their explanations can be found
    at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://mochajs.org/#usage](http://mochajs.org/#usage)'
  prefs: []
  type: TYPE_NORMAL
- en: Using an alternative reporter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the case that we'd like to alter the way that the test results are displayed,
    we can make use of an alternative reporter by specifying one using the `reporter`
    option.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The default value of the `reporter` option is `dot` but it can be set to any
    one of the reporters listed at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://mochajs.org/#reporters](http://mochajs.org/#reporters)'
  prefs: []
  type: TYPE_NORMAL
- en: Note that the names of the various reporters as they are listed at the mentioned
    URL will, for the most part, have to be capitalized when indicating them with
    the `reporter` option.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we use the `reporter` option to indicate that we''d
    like the results of our tests to be reported in the JSON format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Running Mocha server-side tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `mocha-test (0.11.0)` plugin to run our
    automated **Mocha** tests.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through creating a sample code base, creating a
    few tests to run against the code base, and configuring Grunt to run them for
    us.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `mocha-test` plugin
    by following the instructions provided in the *Installing a plugin* recipe in
    [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"),
    *Getting Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we can create a JavaScript source file in our project directory that
    contains and exports a function that we''d like to have tested. Let''s call it
    `main.js` and add the following content to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can write a simple set of tests, using the Mocha framework, to test
    the `square` method. We would also have to import the `square` method and the
    `assert` library into our suite of tests, since the `mochaTest` task does not
    do this automatically. Let''s create a file called `tests.js` in the project directory
    with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With our code base and tests created, we can now add the following `mochaTest`
    task to our configuration, which will run the tests contained in the `tests.js`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can then run the task using the `grunt mochaTest` command, which should
    produce output informing us of the test results, similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `mochaTest` task provides us with several useful options that can be used
    in conjunction with its basic test running feature. We'll look at how to use an
    alternative reporter, select tests using a regular expression, check for global
    variable leaks, send reporter output to a file, and load extra modules into the
    testing environment.
  prefs: []
  type: TYPE_NORMAL
- en: Using an alternative reporter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the case that we'd like to alter the way that the test results are displayed,
    we can make use of an alternative reporter by specifying one using the `reporter`
    option.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The default value of the `reporter` option is `dot` but it can be set to any
    one of the reporters listed at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://mochajs.org/#reporters](http://mochajs.org/#reporters)'
  prefs: []
  type: TYPE_NORMAL
- en: Note that the names of the various reporters as they are listed at the mentioned
    URL should all be written in lowercase when referring to them with this plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we use the `reporter` option to indicate that we''d
    like the results of our tests to be reported in the JSON format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Selecting tests using a regular expression
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Quite often, we'd like to test only a subset of the tests available in our testing
    suite. We can target specific tests by providing a **regular expression** to the
    `grep` option, which will be matched against the description of the tests in our
    suite.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we indicate that we only want to run tests that have
    a description that contains the `''2''` string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Checking for global variable leaks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's generally considered bad practice to make use of global variables in JavaScript,
    as collisions can easily occur between variable names used by various libraries,
    or implied by the JavaScript environment.
  prefs: []
  type: TYPE_NORMAL
- en: If we'd like to receive warnings whenever global variables are encountered in
    either the source or test code, we can set the `ignoreLeaks` option to `false`.
    In addition to that, we can also make use of the `globals` option to indicate
    the variable names that should be ignored when defined as `globals`.
  prefs: []
  type: TYPE_NORMAL
- en: The following example turns global leak detection on, and also indicates that
    the `allowedGlobal` variable name should be ignored if it is defined globally.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Sending reporter output to a file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If we''d like the reported results of our tests to be stored in a file when
    the `mochaTest` task is run, we can indicate which file should receive it using
    the `captureFile` option as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Loading extra modules into the testing environment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `require` option can be used to load modules into our testing environment
    before the tests are run. This allows us to make use of libraries without having
    to import them into each of our test suites.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we load the `should.js` module so that we can make
    use of the **Should.js** library in our tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that for this example to work, the `should` package needs to be installed
    either locally or globally.
  prefs: []
  type: TYPE_NORMAL
- en: Generating coverage reports for server-side code using Mocha and Blanket
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `blanket (0.0.8)`, `mocha-test (0.11.0)`,
    and `contrib-copy (0.5.0)` plugins to run our automated **Mocha** tests, while
    at the same time, generating **coverage reports** for the source code they run
    against.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through creating a sample code base, creating a
    few tests to run against the code base, and configuring Grunt to generate coverage
    reports while running the tests.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the packages that contain the `blanket`, `mocha-test`,
    and `contrib-copy` plugins by following the instructions provided in the *Installing
    a plugin* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started
    with Grunt"), *Getting Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we can create a JavaScript source file that contains and exports two
    functions, only one of which we''ll be testing. Let''s create the file `src/main.js`
    in our project directory with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can write a simple set of tests, using the Mocha framework, to test
    the `square` method. We will also have to import the `square` method and the `assert`
    library into our suite of tests, since the `mochaTest` task does not do this automatically.
    Let''s create the file `tests/main.js` in the project directory with the following
    contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With our code base now in place, we can set up its **instrumentation** by adding
    the following `blanket` task to our configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In order for our tests to make use of the instrumented version of our code
    base, we should now also add the following `copy` task to our configuration, which
    will copy the tests to a position where it can access the instrumented code base,
    just as it would have accessed the regular code base:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To tie it all together, we add the following `mochaTest` task to our configuration,
    which will run the tests in the position where they have access to the instrumented
    code base, indicating that it should report the results in the `html-cov` format,
    and finally save it into the `result.html` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We can now test our setup by running the `grunt blanket copy mochaTest` command,
    which should produce a file called `result.html` in our project directory that
    looks like this:![How to do it...](img/image00273.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The combination of the plugins discussed in this recipe can result in a myriad
    of configurations, so we'll just focus on the most common requirement of reporting
    results in the **LCOV** format.
  prefs: []
  type: TYPE_NORMAL
- en: Outputting coverage results in the LCOV format
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The LCOV format for code coverage results is quite popular among services that
    consume them for reporting and analysis purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Coveralls** service is a good example of a service to which you can send
    your produced LCOV results to keep track of its history and provide a more graphical
    representation of them.
  prefs: []
  type: TYPE_NORMAL
- en: For more information refer to [http://coveralls.io/](http://coveralls.io/).
  prefs: []
  type: TYPE_NORMAL
- en: The following steps take us through installing a LCOV reporter for Mocha and
    altering our configuration to make use of it.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `mocha-lcov-reporter`
    plugin by following the instructions provided in the *Installing a plugin* recipe
    in [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"),
    *Getting Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we can alter the configuration of our `mochaTest` task to output the results
    using the newly installed reporter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We can now test our setup by running the `grunt blanket copy mochaTest` command.
    This should produce a file called `result.lcov` in our project directory, which
    is ready to be provided to one of the many available services.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generating coverage reports for client-side code using Mocha and Blanket
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `blanket-mocha (0.4.1)` plugin to run
    our automated **Mocha** tests in a **PhantomJS** environment, generating **coverage
    reports** for the source code they run against using the **Blanket.js** library,
    and comparing the results against a specified threshold.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through creating a sample code base, creating some
    tests to run against it, and configuring Grunt to generate coverage reports and
    compare the results against a threshold.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `blanket-mocha` plugin
    by following the instructions provided in the *Installing a plugin* recipe in
    [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"),
    *Getting Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we''ll create a simple JavaScript source file in our project directory,
    which contains two functions, one of which we''ll be testing. Let''s call it `main.js`
    and add the following content to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can write a simple suite of tests, using the Mocha and Expect.js frameworks,
    for the `square` method. Let''s create a file called `tests.js` in the project
    directory with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Due to the tests being run inside a browser and the `blanket_mocha` plugin not
    automatically including it, we'll have to download the Mocha library and style
    sheet into the project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At the time of writing this, the Mocha library and its accompanying style sheet
    could be downloaded from the following links:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[https://github.com/visionmedia/mocha/raw/master/mocha.js](https://github.com/visionmedia/mocha/raw/master/mocha.js)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[https://github.com/visionmedia/mocha/raw/master/mocha.css](https://github.com/visionmedia/mocha/raw/master/mocha.css)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Seeing as the Mocha framework does not include the Expect.js assertion library
    by default, we also need to download it into our project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At the time of writing this, the Expect.js library could be downloaded from
    the following link:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[https://github.com/LearnBoost/expect.js/raw/master/index.js](https://github.com/LearnBoost/expect.js/raw/master/index.js)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that for our current example, we'll download the `index.js` file mentioned,
    and change its filename to `expect.js`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We'll also have to manually include the Blanket.js client-side library in our
    testing setup, which means that we'll have to download it into our project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At the time of writing this, the Blanket.js client-side library could be downloaded
    from the following link:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[https://github.com/alex-seville/blanket/raw/master/dist/qunit/blanket.js](https://github.com/alex-seville/blanket/raw/master/dist/qunit/blanket.js)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In order to tie the Mocha and Blanket.js libraries together, we'll also have
    to include an adapter, which should also be downloaded into our project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At the time of writing this, the Mocha-to-Blanket.js adapter could be downloaded
    from the following link:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[https://github.com/ModelN/grunt-blanket-mocha/raw/master/support/mocha-blanket.js](https://github.com/ModelN/grunt-blanket-mocha/raw/master/support/mocha-blanket.js)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Due to the fact that the `blanket_mocha` task requires the Blanket.js results
    to be fed back into Grunt, we need to download the appropriate reporter into our
    project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At the time of writing this, the appropriate Blanket.js reporter could be downloaded
    from the following link:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[https://github.com/ModelN/grunt-blanket-mocha/raw/master/support/grunt-reporter.js](https://github.com/ModelN/grunt-blanket-mocha/raw/master/support/grunt-reporter.js)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To bring together all the parts we set up, we now need to create a testing
    environment that loads our code base, tests, and all the required libraries. Let''s
    create the `test.html` file in our project directory with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the `data-cover` attribute provided in the `script` tag imports the
    `main.js` code base. This attribute should be included in every script tag that
    imports a file for which coverage reports should be generated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'With our code base, tests, and testing environment ready, we can now add the
    following `blanket_mocha` task to our configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: We make use of the `threshold` option here to indicate the minimum code coverage
    percentage that should be achieved for each file. If the final percentage is lower
    than this threshold, the task will return with a failure.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can then run the task using the `grunt blanket_mocha` command, which will
    produce output informing us of the test and coverage results, similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `blanket-mocha` task provides us with several useful options that can be
    used in conjunction with its basic test running and coverage reporting features.
    We'll look at specifying a success threshold for the global average, specifying
    success thresholds for particular files, and specifying success thresholds for
    particular modules.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying a success threshold for the global average
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If we''d like to set a threshold that the average coverage percentage among
    all the files in the targeted source code should surpass, we can do so using the
    `globalThreshold` option as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Specifying success thresholds for particular files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There''s also the option of specifying the thresholds that particular files
    should adhere to using the `customThreshold` option as shown in the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Specifying success thresholds for particular modules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In case we'd like to specify a threshold for the average coverage percentage
    that modules should adhere to, we can make use of the `modulePattern,` `moduleThreshold`,
    and `customModuleThreshold` options.
  prefs: []
  type: TYPE_NORMAL
- en: The `modulePattern` option takes a **regular expression** of which the first
    grouping will be used to determine the names of modules. The `moduleThreshold`
    option is used to indicate the average threshold that all identified modules should
    adhere to and the `customModuleThreshold` option can be used to specify the threshold
    of each particular module.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example identifies modules by the first directory name after
    the `src` directory in the filename checks whether the average code coverage percentage
    of all the modules is above `70` and that the code coverage percentage of the
    `one` module is above `60`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Generating coverage reports for client-side code using QUnit and Istanbul
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `qunit-istanbul (0.4.5)` plugin to run
    our automated **QUnit** tests in a **PhantomJS** environment, generating **coverage
    reports** for the source code they run against using the **Istanbul** library,
    and comparing the results against a specified threshold.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following steps take us through creating a sample code base, creating a
    few tests to run against it, and configuring Grunt to generate coverage reports
    and compare the results to a threshold.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `qunit-istanbul` plugin
    by following the instructions provided in the *Installing a plugin* recipe in
    [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"),
    *Getting Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we''ll create a simple JavaScript source file in our project directory
    that contains two functions, one of which we''ll be testing. Let''s call it `main.js`
    and provide it with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can write a simple set of tests, using the QUnit framework, for the
    `square` method. Let''s create a file called `tests.js` in the project directory
    with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Due to the tests being run inside a browser and the `qunit-istanbul` plugin
    not automatically including it, we'll have to download the QUnit library and style
    sheet into the project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At the time of writing this, the QUnit library and its accompanying style sheet
    can be found at the following links:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://code.jquery.com/qunit/qunit-1.15.0.js](http://code.jquery.com/qunit/qunit-1.15.0.js)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://code.jquery.com/qunit/qunit-1.15.0.css](http://code.jquery.com/qunit/qunit-1.15.0.css)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To bring together all the parts we set up in the previous steps, we now need
    to create a testing environment that loads our code base, tests, and all the required
    libraries. Let''s create the `test.html` file in our project directory with the
    following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the code base, tests, and testing environment now in place, we can add
    the following `qunit` task to our configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that all the options provided by the `qunit` task can be used in the `options`
    object of the `istanbul` task. Only the options contained in the `coverage` part
    of the `options` object are used to indicate the behavior unique to this plugin.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `src` option is used to indicate the source files that we'd like to cover
    in our coverage report. This option can also be set to an array to indicate more
    files and can also make use of the standard Grunt globbing patterns.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `instrumentedFiles` option is used to indicate the temporary directory that
    will contain the instrumented files during the time that the tests are run. Note
    that this directory is automatically created and destroyed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can then run the task using the `grunt qunit` command, which should produce
    output informing us of the test and coverage results, similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `qunit-istanbul` task provides us with several useful options that can be
    used in conjunction with its basic test running and coverage reporting features.
    We'll look at how to specify a report output destination and coverage thresholds
    at various levels.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying a report output destination
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If we''d like to save the coverage report results to files, we can do so by
    providing a directory name to any of the highlighted options in the following
    example, each of which saves the results in the particular format mentioned in
    its name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Specifying coverage thresholds at various levels
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In case we''d like to specify the code coverage percentage thresholds at either
    the line, statement, function, or branch level, we can do so by using any of the
    appropriately named options highlighted in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
