- en: Chapter 5. Running Automated Tests
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章：运行自动化测试
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Running Jasmine tests
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 Jasmine 测试
- en: Running QUnit tests
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 QUnit 测试
- en: Running NodeUnit tests
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 NodeUnit 测试
- en: Running Mocha client-side tests
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 Mocha 客户端测试
- en: Running Mocha server-side tests
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 Mocha 服务器端测试
- en: Generating coverage reports for server-side code using Mocha and Blanket
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Mocha 和 Blanket 为服务器端代码生成覆盖率报告
- en: Generating coverage reports for client-side code using Mocha and Blanket
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Mocha 和 Blanket 为客户端代码生成覆盖率报告
- en: Generating coverage reports for client-side code using QUnit and Istanbul
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 QUnit 和 Istanbul 为客户端代码生成覆盖率报告
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: As the size and complexity of a software unit increases, it can become quite
    time-consuming to ensure that it behaves according to its specifications each
    time it is altered. For this purpose, automated testing becomes invaluable by
    increasing the overall reliability and quality of a software unit, without constant
    manual testing.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 随着软件单元的大小和复杂度的增加，每次修改后确保其行为符合其规范可能变得相当耗时。为此，通过增加软件单元的整体可靠性和质量，自动化测试变得非常有价值，无需进行持续的手动测试。
- en: There are various levels of testing that a project can implement, ranging from
    unit tests at the function or class level, up to integration tests that make use
    of an entire application stack. Most testing frameworks provide for this entire
    range, perhaps just with the addition of a few tools.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一个项目可以实施各种级别的测试，从函数或类级别的单元测试，到利用整个应用程序堆栈的集成测试。大多数测试框架都提供这一整个范围，可能只需添加一些工具。
- en: Also worth mentioning in relation to testing is the practice of test-driven
    development, in which a developer first creates (initially failing) a test case
    for a desired improvement or a new feature, and then does the minimum amount of
    development to make the test case pass. To finish it off, the developer will then
    review the written code and refactor it to acceptable standards.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 与测试相关，还值得提及的是测试驱动开发（test-driven development）的实践，在这种实践中，开发者首先为期望的改进或新功能创建（最初失败的）测试用例，然后进行最小限度的开发以使测试用例通过。为了完成它，开发者将审查编写的代码并将其重构到可接受的标准。
- en: Running Jasmine tests
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行 Jasmine 测试
- en: In this recipe, we'll make use of the `contrib-jasmine (0.7.0)` plugin to run
    our automated **Jasmine** tests in a **PhantomJS** browser environment.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将使用 `contrib-jasmine (0.7.0)` 插件在 **PhantomJS** 浏览器环境中运行我们的自动化 **Jasmine**
    测试。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用我们在 [第 1 章](part0015.xhtml#aid-E9OE1 "第 1 章。开始使用 Grunt") 中 *在项目中安装
    Grunt* 食谱中创建的基本项目结构。如果你还不熟悉其内容，请务必参考它。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: The following steps take us through creating a sample code base, a few tests
    to run against the code base, and setting up Grunt to run them for us in a PhantomJS
    browser environment.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们创建一个示例代码库，一些针对代码库运行的测试，以及设置 Grunt 在 PhantomJS 浏览器环境中为我们运行它们。
- en: We'll start by installing the package that contains the `contrib-jasmine` plugin
    by following the instructions provided in the *Installing a plugin* recipe in
    [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"),
    *Getting Started with Grunt*.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先按照 [第 1 章](part0015.xhtml#aid-E9OE1 "第 1 章。开始使用 Grunt") 中 *安装插件* 食谱提供的说明安装包含
    `contrib-jasmine` 插件的包，该食谱位于 [第 1 章](part0015.xhtml#aid-E9OE1 "第 1 章。开始使用 Grunt")，*开始使用
    Grunt*。
- en: 'Then, we''ll create a simple JavaScript source file in our project directory,
    which contains a function that we''d like to test. Let''s call it `main.js` and
    add the following content to it:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们在项目目录中创建一个简单的 JavaScript 源文件，其中包含我们想要测试的函数。让我们称它为 `main.js` 并向其中添加以下内容：
- en: '[PRE0]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, we can write a simple suite of tests, using the Jasmine framework, to
    test the `square` method. Let''s create a file called `tests.js` in the project
    directory with the following contents:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以编写一个简单的测试套件，使用 Jasmine 框架来测试 `square` 方法。让我们在项目目录中创建一个名为 `tests.js` 的文件，并添加以下内容：
- en: '[PRE1]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'With our code base and tests created, we can now add the following `jasmine`
    task to our configuration, which will load the code from `main.js`, and run the
    tests in the `tests.js` file:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建代码库和测试之后，我们现在可以向配置中添加以下 `jasmine` 任务，该任务将加载 `main.js` 中的代码，并在 `tests.js`
    文件中运行测试：
- en: '[PRE2]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can then run the task using the `grunt jasmine` command, which should produce
    the following output informing us of the test results:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以使用`grunt jasmine`命令来运行任务，这将产生以下输出，告知我们测试结果：
- en: '[PRE3]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: There's more...
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: The `jasmine` task provides us with several useful options that can be used
    in conjunction with its basic test running feature. We'll look at how to load
    helpers to be used in tests, how to load libraries before running tests, how to
    load styles required by tests, and how to provide a custom template for the specification
    runner.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`jasmine`任务为我们提供了几个有用的选项，可以与基本测试运行功能一起使用。我们将探讨如何加载用于测试的辅助工具，如何在运行测试之前加载库，如何加载测试所需的样式，以及如何为规范运行器提供自定义模板。'
- en: Loading helpers to be used in tests
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在测试中加载辅助工具
- en: 'If we''d like to make use of custom equality testers or matchers, we can include
    them using the `helpers` option before tests are run. In the following example,
    we indicate that the custom helpers contained in the `helpers.js` file should
    be loaded before running the tests:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想使用自定义的等价性测试器或匹配器，我们可以在运行测试之前使用`helpers`选项来包含它们。在下面的示例中，我们指示在运行测试之前应加载包含在`helpers.js`文件中的自定义辅助工具：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Loading libraries before running tests
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在运行测试之前加载库
- en: 'In case the code we''d like to test depends on third-party libraries that you
    don''t load in either your source, specifications or helpers, they can be loaded
    using the `vendor` option as shown in the following example:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要测试的代码依赖于第三方库，而这些库既没有在源代码、规范或辅助工具中加载，我们可以使用`vendor`选项来加载它们，如下面的示例所示：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Loading styles required by tests
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加载测试所需的样式
- en: 'If we have tests that depend on specific CSS styles being present in the browser,
    we can have them loaded using the `styles` option as shown in the following example:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的测试依赖于浏览器中存在特定的CSS样式，我们可以使用`styles`选项来加载它们，如下面的示例所示：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Providing a custom template for the specification runner
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为规范运行器提供自定义模板
- en: When writing tests for source code that runs inside a browser, the need for
    a few HTML elements, such as fixtures, can be quite common. The simplest way to
    add HTML to the generated specification runner (`test.html`) is to customize the
    template that it's generated with.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当编写在浏览器内部运行的源代码的测试时，需要一些HTML元素，如固定元素，这种情况可能相当常见。向生成的规范运行器（`test.html`）添加HTML的最简单方法是对其生成的模板进行自定义。
- en: 'The following steps take us through retrieving the default specification runner
    template, customizing it, and using it as our template:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们获取默认规范运行器模板，对其进行自定义，并将其用作我们的模板：
- en: The default specification runner template can be retrieved from the repository
    of the `contrib-jasmine` plugin and saved to the `runner.tmpl` file.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认规范运行器模板可以从`contrib-jasmine`插件的存储库中检索并保存到`runner.tmpl`文件中。
- en: Tip
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'At the time of writing this, the default specification runner template could
    be downloaded from the following link:'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在撰写本文时，默认规范运行器模板可以从以下链接下载：
- en: '[https://github.com/gruntjs/grunt-contrib-jasmine/raw/master/tasks/jasmine/templates/DefaultRunner.tmpl](https://github.com/gruntjs/grunt-contrib-jasmine/raw/master/tasks/jasmine/templates/DefaultRunner.tmpl)'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/gruntjs/grunt-contrib-jasmine/raw/master/tasks/jasmine/templates/DefaultRunner.tmpl](https://github.com/gruntjs/grunt-contrib-jasmine/raw/master/tasks/jasmine/templates/DefaultRunner.tmpl)'
- en: 'Once we have the default template saved as `runner.tmpl`, we can make some
    alterations to it. In the following example, we''ll just add an element with some
    text:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们将默认模板保存为`runner.tmpl`，我们就可以对其进行一些修改。在下面的示例中，我们只是添加了一个带有一些文本的元素：
- en: '[PRE7]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'With the custom template ready, we''ll make use of the `template` option to
    indicate that it should be used in the generation of the runner:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自定义模板准备就绪后，我们将使用`template`选项来指示它应在生成运行器时使用：
- en: '[PRE8]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This will now make the `test` element available to us in our tests, allowing
    us to include tests similar to the following in our specifications:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这样现在就可以在我们的测试中将`test`元素可用，允许我们在规范中包含类似以下测试：
- en: '[PRE9]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Running QUnit tests
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行QUnit测试
- en: In this recipe, we'll make use of the `contrib-qunit (0.5.2)` plugin to run
    our automated **QUnit** tests in a **PhantomJS** browser environment.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用`contrib-qunit (0.5.2)`插件在**PhantomJS**浏览器环境中运行我们的自动化**QUnit**测试。
- en: Getting ready
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将使用在[第1章](part0015.xhtml#aid-E9OE1 "第1章. 使用Grunt入门")中“在项目中安装Grunt”食谱中创建的基本项目结构。如果您还不熟悉其内容，请务必参考。
- en: How to do it...
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following steps take us through creating a sample code base, a few tests
    to run against the code base, setting up a testing environment, and configuring
    Grunt to run them for us in a PhantomJS browser.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们创建一个示例代码库、针对代码库运行的一些测试、设置测试环境以及配置Grunt为我们使用PhantomJS浏览器运行它们。
- en: We'll start by installing the package that contains the `contrib-qunit` plugin
    by following the instructions provided in the *Installing a plugin* recipe in
    [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"),
    *Getting Started with Grunt*.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先按照[第1章](part0015.xhtml#aid-E9OE1 "第1章. 使用Grunt入门")中“安装插件”食谱提供的说明来安装包含`contrib-qunit`插件的包，该食谱位于“使用Grunt入门”。
- en: 'Then, we''ll create a simple JavaScript source file in our project directory,
    which contains a function that we''d like to test. Let''s call it `main.js` and
    provide it with the following contents:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将在项目目录中创建一个简单的JavaScript源文件，其中包含我们想要测试的函数。让我们称它为`main.js`，并为其提供以下内容：
- en: '[PRE10]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, we can write a simple set of tests, using the QUnit framework, for the
    `square` method. Let''s create a file called `tests.js` in the project directory
    with the following contents:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以使用QUnit框架编写一组简单的测试，针对`square`方法。让我们在项目目录中创建一个名为`tests.js`的文件，并包含以下内容：
- en: '[PRE11]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Due to the tests being run inside a browser and the `contrib-qunit` plugin not
    automatically including it, we'll have to download the QUnit library and style
    sheet into the project directory.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于测试是在浏览器内运行的，而`contrib-qunit`插件不会自动包含它，因此我们必须将QUnit库和样式表下载到项目目录中。
- en: Tip
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'At the time of writing this, the QUnit library and its accompanying style sheet
    could be downloaded from the following links:'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在撰写本文时，QUnit库及其配套样式表可以从以下链接下载：
- en: '[http://code.jquery.com/qunit/qunit-1.15.0.js](http://code.jquery.com/qunit/qunit-1.15.0.js)'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://code.jquery.com/qunit/qunit-1.15.0.js](http://code.jquery.com/qunit/qunit-1.15.0.js)'
- en: '[http://code.jquery.com/qunit/qunit-1.15.0.css](http://code.jquery.com/qunit/qunit-1.15.0.css)'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://code.jquery.com/qunit/qunit-1.15.0.css](http://code.jquery.com/qunit/qunit-1.15.0.css)'
- en: 'To bring together all the parts we set up in the previous steps, we now need
    to create a testing environment that loads our code base, tests, and all the required
    libraries. Let''s create the `test.html` file in our project directory with the
    following contents:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了将之前步骤中设置的所有部分整合在一起，我们现在需要创建一个测试环境，该环境将加载我们的代码库、测试和所有必需的库。让我们在我们的项目目录中创建一个名为`test.html`的文件，并包含以下内容：
- en: '[PRE12]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'With the code base, tests, and testing environment now in place, we can add
    the following `qunit` task to our configuration:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在代码库、测试和测试环境都已就绪，我们可以在配置中添加以下`qunit`任务：
- en: '[PRE13]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can then run the task using the `grunt qunit` command, which should produce
    the following output informing us of the test results:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以使用`grunt qunit`命令来运行此任务，它应该会生成以下输出，告知我们测试结果：
- en: '[PRE14]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: There's more...
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: The `qunit` task provides us with several useful options that can be used in
    conjunction with its basic test running feature. We'll look at loading tests from
    a web server, continuing execution after failed tests, suppressing the PhantomJS
    browser console output, and passing arguments to the PhantomJS instance.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`qunit`任务为我们提供了几个有用的选项，可以与基本测试运行功能一起使用。我们将探讨从网络服务器加载测试、在测试失败后继续执行、抑制PhantomJS浏览器控制台输出以及向PhantomJS实例传递参数。'
- en: Loading tests from a web server
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从网络服务器加载测试
- en: If we'd like to load our testing environment along with all its parts from a
    web server instead of straight from a file on the filesystem, we can make use
    of the `urls` option by providing it with the absolute URLs of the testing environments
    that we'd like to run.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望从网络服务器而不是从文件系统上的文件直接加载我们的测试环境及其所有部分，我们可以使用`urls`选项，并提供我们想要运行的测试环境的绝对URL。
- en: The following example takes us through moving the required files to a directory
    they can be served from, setting up a basic web server that serves them, and altering
    our configuration to test the files from the web server.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将指导我们将所需的文件移动到可以从中提供服务的目录中，设置一个基本的Web服务器来提供这些文件，并修改我们的配置以从Web服务器测试文件。
- en: We'll start by installing the package that contains the `contrib-connect` plugin
    by following the instructions provided in the *Installing a plugin* recipe in
    [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"),
    *Getting Started with Grunt*.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先按照[第1章](part0015.xhtml#aid-E9OE1 "第1章. 使用Grunt入门")中“安装插件”部分的说明来安装包含`contrib-connect`插件的包，这部分内容在[《使用Grunt入门》](https://wiki.example.org/feynmans_learning_method)中。
- en: Then, we can create a directory called `www` in the project root and move the
    `main.js`, `qunit-1.15.0.css`, `qunit-1.15.0.js`, `test.html`, and `tests.js`
    files into it.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以在项目根目录中创建一个名为`www`的目录，并将`main.js`、`qunit-1.15.0.css`、`qunit-1.15.0.js`、`test.html`和`tests.js`文件移动到其中。
- en: 'Now, we can set up the basic web server that will serve the files from the
    `www` directory by adding the following `connect` task configuration:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以通过添加以下`connect`任务配置来设置基本的Web服务器，该服务器将从`www`目录中提供文件：
- en: '[PRE15]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'With the server ready to serve the files required by our testing environment,
    we can alter the configuration of our `qunit` task to load it from the appropriate
    URL:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器准备好为我们所需的测试环境提供文件后，我们可以修改我们的`qunit`任务配置，从适当的URL加载它：
- en: '[PRE16]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To test our setup, we can run the `grunt connect qunit` command to start the
    web server and run the testing environment hosted on it. This should produce output
    similar to the following:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试我们的设置，我们可以运行`grunt connect qunit`命令来启动Web服务器并运行其上托管的测试环境。这应该会产生类似于以下输出的结果：
- en: '[PRE17]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Continuing execution after failed tests
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在测试失败后继续执行
- en: 'The default behavior of the `qunit` task is to fail the entire task if a failure
    occurs in any one of the tests. This will in turn cause any of the tasks lined
    up for execution after the `qunit` task not to be executed. By setting the `force`
    option to `true`, as we do in the following example, we can indicate that the
    task itself should not fail due to test failures:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`qunit`任务的默认行为是在任何测试失败时使整个任务失败。这反过来会导致在`qunit`任务之后排队的任何任务都不会执行。通过将`force`选项设置为`true`，正如以下示例中所示，我们可以指示任务本身不应因测试失败而失败：'
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Suppressing the PhantomJS browser console output
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 抑制PhantomJS浏览器控制台输出
- en: 'The default behavior of the `qunit` task is to print the console output generated
    in the headless PhantomJS browser to the command line where the task runs. If
    we''d like to prevent the console output from being printed, we can set the `console`
    option to `false` as shown in the following example:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`qunit`任务的默认行为是将无头PhantomJS浏览器生成的控制台输出打印到任务运行的命令行。如果我们想防止控制台输出被打印，我们可以将`console`选项设置为`false`，如下例所示：'
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Passing arguments to the PhantomJS instance
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向PhantomJS实例传递参数
- en: In case we'd like to pass some options to the PhantomJS process when it starts,
    we can provide them along with the regular options just as they will be provided
    on the command line.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在PhantomJS进程启动时传递一些选项，我们可以像在命令行中提供一样，将它们与常规选项一起提供。
- en: Tip
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'A list of arguments that the PhantomJS executable accepts can be found at the
    following URL:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在以下URL找到PhantomJS可执行程序接受的参数列表：
- en: '[http://phantomjs.org/api/command-line.html](http://phantomjs.org/api/command-line.html)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://phantomjs.org/api/command-line.html](http://phantomjs.org/api/command-line.html)'
- en: 'The following example disables the loading of images in the browser by setting
    the `load-images` option to `false`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例通过将`load-images`选项设置为`false`来禁用浏览器中图像的加载：
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Running NodeUnit tests
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行NodeUnit测试
- en: In this recipe, we'll make use of the `contrib-nodeunit (0.4.1)` plugin to run
    our automated **NodeUnit** tests.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将使用`contrib-nodeunit (0.4.1)`插件来运行我们的自动化**NodeUnit**测试。
- en: Getting ready
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将使用在[第1章](part0015.xhtml#aid-E9OE1 "第1章. 使用Grunt入门")中“在项目中安装Grunt”部分的说明中创建的基本项目结构。如果你还不熟悉其内容，请务必参考它。
- en: How to do it...
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following steps take us through creating a sample code base, creating a
    few tests to run against the code base, and configuring Grunt to run them for
    us.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导我们创建一个示例代码库，创建一些针对代码库运行的测试，并配置Grunt为我们运行它们。
- en: We'll start by installing the package that contains the `contrib-nodeunit` plugin
    by following per the instructions provided in the *Installing a plugin* recipe
    in [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"),
    *Getting Started with Grunt*.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先按照[第1章](part0015.xhtml#aid-E9OE1 "第1章。使用Grunt入门")中“安装插件”配方提供的说明安装包含`contrib-nodeunit`插件的包。
- en: 'Then, we''ll create a simple JavaScript source file in our project directory
    that contains and exports a function that we''d like to test. Let''s call it `main.js`
    and add the following content to it:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将在项目目录中创建一个简单的JavaScript源文件，其中包含并导出一个我们想要测试的函数。让我们称它为`main.js`，并添加以下内容：
- en: '[PRE21]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, we can write a simple set of tests, using the NodeUnit framework, to test
    the `square` method. We will also have to import the `square` method into our
    suite of tests, since the `nodeunit` task does not do this automatically. Let''s
    create a file called `tests.js` in the project directory with the following contents:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以使用NodeUnit框架编写一组简单的测试，以测试`square`方法。我们还需要将`square`方法导入到我们的测试套件中，因为`nodeunit`任务不会自动执行此操作。让我们在项目目录中创建一个名为`tests.js`的文件，并包含以下内容：
- en: '[PRE22]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'With our code base and tests created, we can now add the following `nodeunit`
    task to our configuration, which will run the tests contained in the `tests.js`
    file:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的代码库和测试创建完成后，我们现在可以向我们的配置中添加以下`nodeunit`任务，它将运行`tests.js`文件中包含的测试：
- en: '[PRE23]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We can then run the task using the `grunt nodeunit` command, which will produce
    the following output informing us of the test results:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用`grunt nodeunit`命令运行此任务，这将产生以下输出，告知我们测试结果：
- en: '[PRE24]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: There's more...
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `nodeunit` task provides us with several useful options that can be used
    in conjunction with its basic test-running feature. We'll look at how to use an
    alternative reporter and send reporter output to a file.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`nodeunit`任务为我们提供了一些有用的选项，可以与基本测试运行功能一起使用。我们将探讨如何使用替代报告器和将报告器输出发送到文件。'
- en: Using an alternative reporter
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用替代报告器
- en: In case we'd like to alter the way that the test results are displayed, we can
    make use of an alternative reporter by specifying one using the `reporter` option.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要改变测试结果显示的方式，我们可以通过指定一个替代报告器来使用替代报告器。
- en: Tip
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'The default value of the `reporter` option is `grunt`, but it can be set to
    any one of the reporters listed in the `module.exports` object at the following
    URL:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`reporter`选项的默认值是`grunt`，但它可以被设置为以下URL中`module.exports`对象列出的任何一种报告器：'
- en: '[https://github.com/caolan/nodeunit/blob/master/lib/reporters/index.js](https://github.com/caolan/nodeunit/blob/master/lib/reporters/index.js)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/caolan/nodeunit/blob/master/lib/reporters/index.js](https://github.com/caolan/nodeunit/blob/master/lib/reporters/index.js)'
- en: 'In the following example, we use the `reporter` option to indicate that we''d
    like the results of our tests to be reported in the HTML format:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们使用`reporter`选项来指示我们希望测试结果以HTML格式报告：
- en: '[PRE25]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Sending reporter output to a file
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将报告器输出发送到文件
- en: 'If we''d like the reported results of our tests to be stored in a file when
    the `nodeunit` task is run, we can indicate which file should receive it using
    the `reporterOutput` option, as shown in the following example:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望在运行`nodeunit`任务时将测试报告的结果存储在文件中，我们可以使用`reporterOutput`选项来指示应该接收它的文件，如下面的示例所示：
- en: '[PRE26]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Running Mocha client-side tests
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行Mocha客户端测试
- en: In this recipe, we'll make use of the `mocha (0.4.11)` plugin to run our automated
    **Mocha** tests in a **PhantomJS** browser environment.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将使用`mocha (0.4.11)`插件在**PhantomJS**浏览器环境中运行我们的自动化**Mocha**测试。
- en: Getting ready
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用我们在[第1章](part0015.xhtml#aid-E9OE1 "第1章。使用Grunt入门")中“在项目中安装Grunt”配方中创建的基本项目结构，即*使用Grunt入门*。如果你还不熟悉其内容，请务必参考。
- en: How to do it...
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following steps take us through creating a sample code base, creating a
    few tests to run against the code base, and configuring Grunt to run them for
    us in a PhantomJS browser environment.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导我们创建一个示例代码库，创建一些针对代码库运行的测试，并配置 Grunt 在 PhantomJS 浏览器环境中为我们运行它们。
- en: We'll start by installing the package that contains the `mocha` plugin by following
    the instructions provided in the *Installing a plugin* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先按照 [第 1 章](part0015.xhtml#aid-E9OE1 "第 1 章。使用 Grunt 入门") 中 *安装插件* 部分的说明来安装包含
    `mocha` 插件的包，该部分位于 *使用 Grunt 入门*。
- en: 'Then, we''ll create a simple JavaScript source file in our project directory
    that contains a function that we''d like to test. Let''s call it `main.js` and
    provide it with the following contents:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将在项目目录中创建一个简单的 JavaScript 源文件，其中包含我们想要测试的函数。让我们称它为 `main.js`，并为其提供以下内容：
- en: '[PRE27]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, we can write a simple suite of tests, using the Mocha and **Expect.js**
    frameworks, for the `square` method. Let''s create a file called `tests.js` in
    the project directory with the following contents:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以使用 Mocha 和 **Expect.js** 框架为 `square` 方法编写一个简单的测试套件。让我们在项目目录中创建一个名为 `tests.js`
    的文件，并包含以下内容：
- en: '[PRE28]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Due to the tests being run inside a browser and the `mocha` plugin not automatically
    including it, we'll have to download the Mocha library and style sheet into the
    project directory.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于测试是在浏览器内运行的，而 `mocha` 插件不会自动包含它，因此我们需要将 Mocha 库和样式表下载到项目目录中。
- en: Tip
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'At the time of writing this, the Mocha library and its accompanying style sheet
    could be downloaded from the following links:'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在撰写本文时，Mocha 库及其配套的样式表可以从以下链接下载：
- en: '[https://github.com/visionmedia/mocha/raw/master/mocha.js](https://github.com/visionmedia/mocha/raw/master/mocha.js)'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/visionmedia/mocha/raw/master/mocha.js](https://github.com/visionmedia/mocha/raw/master/mocha.js)'
- en: '[https://github.com/visionmedia/mocha/raw/master/mocha.css](https://github.com/visionmedia/mocha/raw/master/mocha.css)'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/visionmedia/mocha/raw/master/mocha.css](https://github.com/visionmedia/mocha/raw/master/mocha.css)'
- en: Seeing as the Mocha framework does not include the Expect.js assertion library
    by default, we also need to download it into our project directory.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于 Mocha 框架默认不包含 Expect.js 断言库，我们还需要将其下载到我们的项目目录中。
- en: Tip
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'At the time of writing this, the Expect.js library could be downloaded from
    the following link:'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在撰写本文时，Expect.js 库可以从以下链接下载：
- en: '[https://github.com/LearnBoost/expect.js/raw/master/index.js](https://github.com/LearnBoost/expect.js/raw/master/index.js)'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/LearnBoost/expect.js/raw/master/index.js](https://github.com/LearnBoost/expect.js/raw/master/index.js)'
- en: Note that for our current example, we'll download the `index.js` file mentioned,
    and change its filename to `expect.js`.
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，对于我们的当前示例，我们将下载提到的 `index.js` 文件，并将其文件名更改为 `expect.js`。
- en: 'To bring together all the parts we set up, we now need to create a testing
    environment that loads our code base, tests, and all the required libraries. Let''s
    create the `test.html` file in our project directory with the following contents:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了将我们设置的所有部分整合在一起，我们现在需要创建一个测试环境，该环境加载我们的代码库、测试和所有必需的库。让我们在我们的项目目录中创建一个名为 `test.html`
    的文件，并包含以下内容：
- en: '[PRE29]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'With our code base, tests, and testing environment ready, we can now add the
    following `mocha` task to our configuration:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的代码库、测试和测试环境准备就绪后，我们现在可以向我们的配置中添加以下 `mocha` 任务：
- en: '[PRE30]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Tip
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `mocha` task injects code into the PhantomJS browser in order to gather
    the results of the tests once they have finished running. The `mocha.run` method
    call required to start the execution of the tests contained in the environment
    needs to run after the injection of this code in order for the results to be captured.
    Setting the `run` option to `true` ensures that this method is called after the
    injection of the code is completed.
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`mocha` 任务将代码注入到 PhantomJS 浏览器中，以便在测试运行完成后收集测试结果。为了捕获结果，需要调用 `mocha.run` 方法来启动环境中包含的测试执行，这个方法调用需要在代码注入之后运行。将
    `run` 选项设置为 `true` 确保在代码注入完成后调用此方法。'
- en: 'We can then run the task using the `grunt mocha` command, which should produce
    the following output informing us of the test results:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用 `grunt mocha` 命令来运行此任务，它应该会产生以下输出，告知我们测试结果：
- en: '[PRE31]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: There's more...
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `mocha` task provides us with several useful options that can be used in
    conjunction with its basic test-running feature. We'll look at loading tests from
    a web server, sending reporter output to a file, displaying the PhantomJS browser's
    console output, displaying source errors, specifying options for the Mocha test
    runner, and using an alternative reporter.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`mocha`任务为我们提供了几个有用的选项，可以与它的基本测试运行功能一起使用。我们将探讨从网络服务器加载测试、将报告输出发送到文件、显示PhantomJS浏览器的控制台输出、显示源错误、指定Mocha测试运行器的选项以及使用替代报告器。'
- en: Loading tests from a web server
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从网络服务器加载测试
- en: If we'd like to load our testing environment along with all its parts from a
    web server instead of straight from a file on the filesystem, we can make use
    of the `urls` option by passing the absolute URLs of the testing environments
    that we'd like to run.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望从文件系统上的文件而不是从网络服务器加载我们的测试环境及其所有部分，我们可以使用`urls`选项，通过传递我们想要运行的测试环境的绝对URL来实现。
- en: The following example takes us through moving the required files to a directory
    they can be served from, setting up a basic web server that serves them, and altering
    our configuration to test the files from the web server.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将指导我们将所需的文件移动到可以从中提供服务的目录，设置一个基本网络服务器以提供这些文件，并修改我们的配置以从网络服务器测试文件。
- en: We'll start by installing the package that contains the `contrib-connect` plugin
    by following the instructions provided in the *Installing a plugin* recipe in
    [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"),
    *Getting Started with Grunt*.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先按照[第1章](part0015.xhtml#aid-E9OE1 "第1章。使用Grunt入门")中*安装插件*食谱提供的说明安装包含`contrib-connect`插件的包。
- en: Then, we can create a directory called `www` in the project root and move the
    `expect.js`, `main.js`, `mocha.css`, `mocha.js`, `test.html`, and `tests.js` files
    into it.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以在项目根目录中创建一个名为`www`的目录，并将`expect.js`、`main.js`、`mocha.css`、`mocha.js`、`test.html`和`tests.js`文件移动到其中。
- en: 'Now, we can set up the basic web server, which will serve the files from the
    `www` directory by adding the following `connect` task configuration:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以设置基本网络服务器，通过添加以下`connect`任务配置来从`www`目录提供文件：
- en: '[PRE32]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'With the server ready to serve the files for the testing environment, we can
    now alter the configuration of our `mocha` task to load it from the appropriate
    URL:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在服务器准备好为测试环境提供文件后，我们现在可以修改`mocha`任务的配置，从适当的URL加载它：
- en: '[PRE33]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'To test our setup, we can run the `grunt connect qunit` command to start the
    web server and run the testing environment hosted on it. This should produce output
    similar to the following:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试我们的设置，我们可以运行`grunt connect qunit`命令以启动网络服务器并运行其上托管的测试环境。这应该会产生类似于以下内容的输出：
- en: '[PRE34]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Sending reporter output to a file
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将报告输出发送到文件
- en: 'If we''d like the reported results of our tests to be stored in a file when
    the `mocha` task is run, we can indicate which file should receive it using the
    `dest` option as shown in the following example:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望在运行`mocha`任务时将测试的报告结果存储在文件中，我们可以使用以下示例中的`dest`选项来指定应接收它的文件：
- en: '[PRE35]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Displaying the PhantomJS browser's console output
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显示PhantomJS浏览器的控制台输出
- en: 'By default, the output from the Phantom JS browser''s console will not be displayed
    in the command-line output when the `mocha` task runs. If we''d like to display
    the output, we can set the `log` option to `true` as shown in the following example:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，当`mocha`任务运行时，PhantomJS浏览器的控制台输出不会显示在命令行输出中。如果我们想显示输出，我们可以将`log`选项设置为`true`，如下面的示例所示：
- en: '[PRE36]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Displaying source errors
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显示源错误
- en: The default behavior for the `mocha` task is to ignore syntax errors encountered
    in the source files that the tests will run against. If an error is encountered,
    the source will simply not load, and probably cause all the tests to fail without
    a useful error message.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`mocha`任务的默认行为是忽略在将要运行的测试源文件中遇到的语法错误。如果遇到错误，源文件将不会加载，这可能会在没有有用错误消息的情况下导致所有测试失败。'
- en: 'If we''d like to be informed of the errors encountered in the source, we can
    set the `logErrors` option to `true` as shown in the following example:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想了解源中遇到的错误，我们可以将`logErrors`选项设置为`true`，如下面的示例所示：
- en: '[PRE37]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Specifying options for the Mocha test runner
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定Mocha测试运行器的选项
- en: 'In case we''d like to specify some options directly to the Mocha test runner
    that runs behind the scenes of the `mocha` task, we can provide them using the
    `mocha` option. The following example uses the `grep` option to indicate that
    only tests that contain the string `''2''` in their description should be run:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要直接将一些选项指定给在`mocha`任务背后运行的Mocha测试运行器，我们可以使用`mocha`选项提供它们。以下示例使用`grep`选项来指示仅运行描述中包含字符串`'2'`的测试：
- en: '[PRE38]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Tip
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'A list of the available options along with their explanations can be found
    at the following URL:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 可用选项及其解释的列表可以在以下URL中找到：
- en: '[http://mochajs.org/#usage](http://mochajs.org/#usage)'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://mochajs.org/#usage](http://mochajs.org/#usage)'
- en: Using an alternative reporter
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用替代报告器
- en: In the case that we'd like to alter the way that the test results are displayed,
    we can make use of an alternative reporter by specifying one using the `reporter`
    option.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要更改测试结果显示的方式，我们可以通过指定`reporter`选项来使用替代报告器。
- en: Tip
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'The default value of the `reporter` option is `dot` but it can be set to any
    one of the reporters listed at the following URL:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`reporter`选项的默认值是`dot`，但它可以设置为以下URL中列出的任何报告器：'
- en: '[http://mochajs.org/#reporters](http://mochajs.org/#reporters)'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://mochajs.org/#reporters](http://mochajs.org/#reporters)'
- en: Note that the names of the various reporters as they are listed at the mentioned
    URL will, for the most part, have to be capitalized when indicating them with
    the `reporter` option.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在提及的URL中列出的各种报告器的名称，大部分情况下在使用`reporter`选项指示它们时需要大写。
- en: 'In the following example, we use the `reporter` option to indicate that we''d
    like the results of our tests to be reported in the JSON format:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们使用`reporter`选项来指示我们希望以JSON格式报告测试结果：
- en: '[PRE39]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Running Mocha server-side tests
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行Mocha服务器端测试
- en: In this recipe, we'll make use of the `mocha-test (0.11.0)` plugin to run our
    automated **Mocha** tests.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用`mocha-test (0.11.0)`插件来运行我们的自动化**Mocha**测试。
- en: Getting ready
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用我们在[第1章](part0015.xhtml#aid-E9OE1 "第1章。使用Grunt入门")中提供的*在项目中安装Grunt*菜谱中创建的基本项目结构。如果你还不熟悉其内容，请务必参考它。
- en: How to do it...
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following steps take us through creating a sample code base, creating a
    few tests to run against the code base, and configuring Grunt to run them for
    us.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们创建一个示例代码库，创建一些要针对代码库运行的测试，并配置Grunt为我们运行它们。
- en: We'll start by installing the package that contains the `mocha-test` plugin
    by following the instructions provided in the *Installing a plugin* recipe in
    [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"),
    *Getting Started with Grunt*.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先通过遵循[第1章](part0015.xhtml#aid-E9OE1 "第1章。使用Grunt入门")中提供的*安装插件*菜谱中的说明来安装包含`mocha-test`插件的包，*使用Grunt入门*。
- en: 'Then, we can create a JavaScript source file in our project directory that
    contains and exports a function that we''d like to have tested. Let''s call it
    `main.js` and add the following content to it:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以在我们的项目目录中创建一个JavaScript源文件，该文件包含并导出我们想要测试的函数。让我们称它为`main.js`，并将其以下内容添加到其中：
- en: '[PRE40]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now, we can write a simple set of tests, using the Mocha framework, to test
    the `square` method. We would also have to import the `square` method and the
    `assert` library into our suite of tests, since the `mochaTest` task does not
    do this automatically. Let''s create a file called `tests.js` in the project directory
    with the following contents:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以编写一组简单的测试，使用Mocha框架来测试`square`方法。我们还需要将`square`方法和`assert`库导入到我们的测试套件中，因为`mochaTest`任务不会自动执行此操作。让我们在项目目录中创建一个名为`tests.js`的文件，并添加以下内容：
- en: '[PRE41]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'With our code base and tests created, we can now add the following `mochaTest`
    task to our configuration, which will run the tests contained in the `tests.js`
    file:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的代码库和测试创建完成后，我们现在可以将以下`mochaTest`任务添加到我们的配置中，该任务将运行`tests.js`文件中的测试：
- en: '[PRE42]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'We can then run the task using the `grunt mochaTest` command, which should
    produce output informing us of the test results, similar to the following:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以使用`grunt mochaTest`命令运行任务，该命令应该会输出测试结果，类似于以下内容：
- en: '[PRE43]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: There's more...
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: The `mochaTest` task provides us with several useful options that can be used
    in conjunction with its basic test running feature. We'll look at how to use an
    alternative reporter, select tests using a regular expression, check for global
    variable leaks, send reporter output to a file, and load extra modules into the
    testing environment.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`mochaTest` 任务为我们提供了几个有用的选项，这些选项可以与它的基本测试运行功能一起使用。我们将探讨如何使用替代报告器、使用正则表达式选择测试、检查全局变量泄漏、将报告器输出发送到文件以及将额外模块加载到测试环境中。'
- en: Using an alternative reporter
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用替代报告器
- en: In the case that we'd like to alter the way that the test results are displayed,
    we can make use of an alternative reporter by specifying one using the `reporter`
    option.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要更改测试结果显示的方式，可以通过指定 `reporter` 选项来使用一个替代的报告器。
- en: Tip
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'The default value of the `reporter` option is `dot` but it can be set to any
    one of the reporters listed at the following URL:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`reporter` 选项的默认值是 `dot`，但它可以设置为以下 URL 中列出的任何报告器之一：'
- en: '[http://mochajs.org/#reporters](http://mochajs.org/#reporters)'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://mochajs.org/#reporters](http://mochajs.org/#reporters)'
- en: Note that the names of the various reporters as they are listed at the mentioned
    URL should all be written in lowercase when referring to them with this plugin.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当使用此插件引用时，提到的各种报告器的名称都应该写成小写。
- en: 'In the following example, we use the `reporter` option to indicate that we''d
    like the results of our tests to be reported in the JSON format:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们使用 `reporter` 选项来指示我们希望将测试结果以 JSON 格式报告：
- en: '[PRE44]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Selecting tests using a regular expression
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用正则表达式选择测试
- en: Quite often, we'd like to test only a subset of the tests available in our testing
    suite. We can target specific tests by providing a **regular expression** to the
    `grep` option, which will be matched against the description of the tests in our
    suite.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 很常见的情况是我们只想测试测试套件中的一部分测试。我们可以通过向 `grep` 选项提供一个 **正则表达式** 来针对特定的测试进行定位，该正则表达式将与我们的套件中测试的描述进行匹配。
- en: 'In the following example, we indicate that we only want to run tests that have
    a description that contains the `''2''` string:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们指定只运行描述中包含 `'2'` 字符串的测试：
- en: '[PRE45]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Checking for global variable leaks
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查全局变量泄漏
- en: It's generally considered bad practice to make use of global variables in JavaScript,
    as collisions can easily occur between variable names used by various libraries,
    or implied by the JavaScript environment.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 通常认为在 JavaScript 中使用全局变量是不良做法，因为各种库使用的变量名或由 JavaScript 环境暗示的变量名之间可能会发生冲突。
- en: If we'd like to receive warnings whenever global variables are encountered in
    either the source or test code, we can set the `ignoreLeaks` option to `false`.
    In addition to that, we can also make use of the `globals` option to indicate
    the variable names that should be ignored when defined as `globals`.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望在源代码或测试代码中遇到全局变量时收到警告，可以将 `ignoreLeaks` 选项设置为 `false`。此外，我们还可以使用 `globals`
    选项来指定当作为 `globals` 定义时应忽略的变量名。
- en: The following example turns global leak detection on, and also indicates that
    the `allowedGlobal` variable name should be ignored if it is defined globally.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将全局泄漏检测打开，并指示如果 `allowedGlobal` 变量名在全局范围内定义，则应忽略它。
- en: '[PRE46]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Sending reporter output to a file
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将报告器输出发送到文件
- en: 'If we''d like the reported results of our tests to be stored in a file when
    the `mochaTest` task is run, we can indicate which file should receive it using
    the `captureFile` option as shown in the following example:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行 `mochaTest` 任务时，如果我们希望将测试的输出结果存储在文件中，可以使用 `captureFile` 选项来指定接收结果的文件，如下面的示例所示：
- en: '[PRE47]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Loading extra modules into the testing environment
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将额外模块加载到测试环境中
- en: The `require` option can be used to load modules into our testing environment
    before the tests are run. This allows us to make use of libraries without having
    to import them into each of our test suites.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`require` 选项可以在运行测试之前将模块加载到我们的测试环境中。这允许我们使用库，而无需将它们导入到每个测试套件中。'
- en: 'In the following example, we load the `should.js` module so that we can make
    use of the **Should.js** library in our tests:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们加载 `should.js` 模块，以便在测试中使用 **Should.js** 库：
- en: '[PRE48]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Tip
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that for this example to work, the `should` package needs to be installed
    either locally or globally.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，为了使此示例正常工作，`should` 包需要在本地或全局范围内安装。
- en: Generating coverage reports for server-side code using Mocha and Blanket
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Mocha 和 Blanket 生成服务器端代码的覆盖率报告
- en: In this recipe, we'll make use of the `blanket (0.0.8)`, `mocha-test (0.11.0)`,
    and `contrib-copy (0.5.0)` plugins to run our automated **Mocha** tests, while
    at the same time, generating **coverage reports** for the source code they run
    against.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们将使用 `blanket (0.0.8)`、`mocha-test (0.11.0)` 和 `contrib-copy (0.5.0)`
    插件来运行我们的自动化 **Mocha** 测试，同时生成针对它们运行的源代码的 **覆盖率报告**。
- en: Getting ready
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将使用在 [第 1 章](part0015.xhtml#aid-E9OE1 "第 1 章。开始使用 Grunt") 中 *在项目中安装 Grunt*
    菜单创建的基本项目结构，该章节介绍了 *开始使用 Grunt*。如果您还不熟悉其内容，请务必参考它。
- en: How to do it...
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following steps take us through creating a sample code base, creating a
    few tests to run against the code base, and configuring Grunt to generate coverage
    reports while running the tests.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们创建一个示例代码库，为代码库编写一些测试用例，并在运行测试的同时配置 Grunt 生成覆盖率报告。
- en: We'll start by installing the packages that contain the `blanket`, `mocha-test`,
    and `contrib-copy` plugins by following the instructions provided in the *Installing
    a plugin* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started
    with Grunt"), *Getting Started with Grunt*.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先按照 [第 1 章](part0015.xhtml#aid-E9OE1 "第 1 章。开始使用 Grunt") 中 *安装插件* 菜单提供的说明安装包含
    `blanket`、`mocha-test` 和 `contrib-copy` 插件的包，该章节介绍了 *开始使用 Grunt*。
- en: 'Then, we can create a JavaScript source file that contains and exports two
    functions, only one of which we''ll be testing. Let''s create the file `src/main.js`
    in our project directory with the following contents:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以创建一个包含并导出两个函数的 JavaScript 源文件，其中我们只测试其中一个。让我们在我们的项目目录中创建名为 `src/main.js`
    的文件，并包含以下内容：
- en: '[PRE49]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Now, we can write a simple set of tests, using the Mocha framework, to test
    the `square` method. We will also have to import the `square` method and the `assert`
    library into our suite of tests, since the `mochaTest` task does not do this automatically.
    Let''s create the file `tests/main.js` in the project directory with the following
    contents:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以编写一组简单的测试，使用 Mocha 框架来测试 `square` 方法。我们还需要将 `square` 方法以及 `assert` 库导入到我们的测试套件中，因为
    `mochaTest` 任务不会自动执行此操作。让我们在项目目录中创建名为 `tests/main.js` 的文件，并包含以下内容：
- en: '[PRE50]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'With our code base now in place, we can set up its **instrumentation** by adding
    the following `blanket` task to our configuration:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经建立了代码库，我们可以通过添加以下 `blanket` 任务到我们的配置中来设置其 **仪器化**：
- en: '[PRE51]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'In order for our tests to make use of the instrumented version of our code
    base, we should now also add the following `copy` task to our configuration, which
    will copy the tests to a position where it can access the instrumented code base,
    just as it would have accessed the regular code base:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了让我们的测试能够使用我们代码库的仪器化版本，我们现在还应该在配置中添加以下 `copy` 任务，该任务将测试用例复制到可以访问到仪器化代码库的位置，就像它访问常规代码库一样：
- en: '[PRE52]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'To tie it all together, we add the following `mochaTest` task to our configuration,
    which will run the tests in the position where they have access to the instrumented
    code base, indicating that it should report the results in the `html-cov` format,
    and finally save it into the `result.html` file:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了将这些步骤串联起来，我们在配置中添加了以下 `mochaTest` 任务，该任务将在测试用例可以访问到经过仪器化的代码库的位置运行测试，这表明它应该以
    `html-cov` 格式报告结果，并最终将其保存到 `result.html` 文件中：
- en: '[PRE53]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: We can now test our setup by running the `grunt blanket copy mochaTest` command,
    which should produce a file called `result.html` in our project directory that
    looks like this:![How to do it...](img/image00273.jpeg)
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以通过运行 `grunt blanket copy mochaTest` 命令来测试我们的设置，这应该在项目目录中生成一个名为 `result.html`
    的文件，其外观如下：![如何操作...](img/image00273.jpeg)
- en: There's more...
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: The combination of the plugins discussed in this recipe can result in a myriad
    of configurations, so we'll just focus on the most common requirement of reporting
    results in the **LCOV** format.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 本菜谱中讨论的插件组合可以产生多种配置，因此我们将只关注最常见的要求，即以 **LCOV** 格式报告结果。
- en: Outputting coverage results in the LCOV format
  id: totrans-257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以 LCOV 格式输出覆盖率结果
- en: The LCOV format for code coverage results is quite popular among services that
    consume them for reporting and analysis purposes.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 代码覆盖率结果的 LCOV 格式在用于报告和分析的服务中非常流行。
- en: Tip
  id: totrans-259
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The **Coveralls** service is a good example of a service to which you can send
    your produced LCOV results to keep track of its history and provide a more graphical
    representation of them.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '**Coveralls** 服务是一个很好的例子，你可以将生成的 LCOV 结果发送到该服务以跟踪其历史记录并提供更图形化的表示。'
- en: For more information refer to [http://coveralls.io/](http://coveralls.io/).
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请参阅 [http://coveralls.io/](http://coveralls.io/)。
- en: The following steps take us through installing a LCOV reporter for Mocha and
    altering our configuration to make use of it.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导我们安装 Mocha 的 LCOV 报告器，并修改我们的配置以使用它。
- en: We'll start by installing the package that contains the `mocha-lcov-reporter`
    plugin by following the instructions provided in the *Installing a plugin* recipe
    in [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"),
    *Getting Started with Grunt*.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将按照 [第 1 章](part0015.xhtml#aid-E9OE1 "第 1 章。使用 Grunt 入门") 中 *安装插件* 菜谱提供的说明，安装包含
    `mocha-lcov-reporter` 插件的包。
- en: 'Now, we can alter the configuration of our `mochaTest` task to output the results
    using the newly installed reporter:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以修改 `mochaTest` 任务的配置，以使用新安装的报告器输出结果：
- en: '[PRE54]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: We can now test our setup by running the `grunt blanket copy mochaTest` command.
    This should produce a file called `result.lcov` in our project directory, which
    is ready to be provided to one of the many available services.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以通过运行 `grunt blanket copy mochaTest` 命令来测试我们的设置。这应该在项目目录中生成一个名为 `result.lcov`
    的文件，该文件已准备好提供给众多可用服务之一。
- en: Generating coverage reports for client-side code using Mocha and Blanket
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Mocha 和 Blanket 生成客户端代码覆盖率报告
- en: In this recipe, we'll make use of the `blanket-mocha (0.4.1)` plugin to run
    our automated **Mocha** tests in a **PhantomJS** environment, generating **coverage
    reports** for the source code they run against using the **Blanket.js** library,
    and comparing the results against a specified threshold.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们将使用 `blanket-mocha (0.4.1)` 插件在 **PhantomJS** 环境中运行我们的自动化 **Mocha**
    测试，使用 **Blanket.js** 库为它们运行的源代码生成 **覆盖率报告**，并将结果与指定的阈值进行比较。
- en: Getting ready
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将使用在 [第 1 章](part0015.xhtml#aid-E9OE1 "第 1 章。使用 Grunt 入门") 中创建的基本项目结构，即
    *在项目中安装 Grunt* 菜谱，*使用 Grunt 入门*。如果你还不熟悉其内容，请务必参考它。
- en: How to do it...
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following steps take us through creating a sample code base, creating some
    tests to run against it, and configuring Grunt to generate coverage reports and
    compare the results against a threshold.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导我们创建一个示例代码库，创建一些针对它的测试，并配置 Grunt 以生成覆盖率报告并将结果与阈值进行比较。
- en: We'll start by installing the package that contains the `blanket-mocha` plugin
    by following the instructions provided in the *Installing a plugin* recipe in
    [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"),
    *Getting Started with Grunt*.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将按照 [第 1 章](part0015.xhtml#aid-E9OE1 "第 1 章。使用 Grunt 入门") 中 *安装插件* 菜谱提供的说明，安装包含
    `blanket-mocha` 插件的包。
- en: 'Then, we''ll create a simple JavaScript source file in our project directory,
    which contains two functions, one of which we''ll be testing. Let''s call it `main.js`
    and add the following content to it:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们在项目目录中创建一个简单的 JavaScript 源文件，其中包含两个函数，其中一个我们将对其进行测试。让我们称它为 `main.js` 并向其中添加以下内容：
- en: '[PRE55]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Now, we can write a simple suite of tests, using the Mocha and Expect.js frameworks,
    for the `square` method. Let''s create a file called `tests.js` in the project
    directory with the following contents:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以编写一个简单的测试套件，使用 Mocha 和 Expect.js 框架对 `square` 方法进行测试。让我们在项目目录中创建一个名为
    `tests.js` 的文件，并添加以下内容：
- en: '[PRE56]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Due to the tests being run inside a browser and the `blanket_mocha` plugin not
    automatically including it, we'll have to download the Mocha library and style
    sheet into the project directory.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于测试是在浏览器内运行的，并且 `blanket_mocha` 插件不会自动包含它，因此我们不得不将 Mocha 库和样式表下载到项目目录中。
- en: Tip
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'At the time of writing this, the Mocha library and its accompanying style sheet
    could be downloaded from the following links:'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在撰写本文时，Mocha 库及其配套样式表可以从以下链接下载：
- en: '[https://github.com/visionmedia/mocha/raw/master/mocha.js](https://github.com/visionmedia/mocha/raw/master/mocha.js)'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/visionmedia/mocha/raw/master/mocha.js](https://github.com/visionmedia/mocha/raw/master/mocha.js)'
- en: '[https://github.com/visionmedia/mocha/raw/master/mocha.css](https://github.com/visionmedia/mocha/raw/master/mocha.css)'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/visionmedia/mocha/raw/master/mocha.css](https://github.com/visionmedia/mocha/raw/master/mocha.css)'
- en: Seeing as the Mocha framework does not include the Expect.js assertion library
    by default, we also need to download it into our project directory.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于 Mocha 框架默认不包含 Expect.js 断言库，我们还需要将其下载到我们的项目目录中。
- en: Tip
  id: totrans-284
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'At the time of writing this, the Expect.js library could be downloaded from
    the following link:'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在撰写本文时，可以从以下链接下载 Expect.js 库：
- en: '[https://github.com/LearnBoost/expect.js/raw/master/index.js](https://github.com/LearnBoost/expect.js/raw/master/index.js)'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/LearnBoost/expect.js/raw/master/index.js](https://github.com/LearnBoost/expect.js/raw/master/index.js)'
- en: Note that for our current example, we'll download the `index.js` file mentioned,
    and change its filename to `expect.js`.
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，对于我们的当前示例，我们将下载提到的 `index.js` 文件，并将其文件名更改为 `expect.js`。
- en: We'll also have to manually include the Blanket.js client-side library in our
    testing setup, which means that we'll have to download it into our project directory.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还必须手动将 Blanket.js 客户端库包含到我们的测试设置中，这意味着我们必须将其下载到我们的项目目录中。
- en: Tip
  id: totrans-289
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'At the time of writing this, the Blanket.js client-side library could be downloaded
    from the following link:'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在撰写本文时，可以从以下链接下载 Blanket.js 客户端库：
- en: '[https://github.com/alex-seville/blanket/raw/master/dist/qunit/blanket.js](https://github.com/alex-seville/blanket/raw/master/dist/qunit/blanket.js)'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/alex-seville/blanket/raw/master/dist/qunit/blanket.js](https://github.com/alex-seville/blanket/raw/master/dist/qunit/blanket.js)'
- en: In order to tie the Mocha and Blanket.js libraries together, we'll also have
    to include an adapter, which should also be downloaded into our project directory.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了将 Mocha 和 Blanket.js 库连接起来，我们还需要包含一个适配器，该适配器也应下载到我们的项目目录中。
- en: Tip
  id: totrans-293
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'At the time of writing this, the Mocha-to-Blanket.js adapter could be downloaded
    from the following link:'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在撰写本文时，可以从以下链接下载 Mocha 到 Blanket.js 的适配器：
- en: '[https://github.com/ModelN/grunt-blanket-mocha/raw/master/support/mocha-blanket.js](https://github.com/ModelN/grunt-blanket-mocha/raw/master/support/mocha-blanket.js)'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/ModelN/grunt-blanket-mocha/raw/master/support/mocha-blanket.js](https://github.com/ModelN/grunt-blanket-mocha/raw/master/support/mocha-blanket.js)'
- en: Due to the fact that the `blanket_mocha` task requires the Blanket.js results
    to be fed back into Grunt, we need to download the appropriate reporter into our
    project directory.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于 `blanket_mocha` 任务需要将 Blanket.js 结果反馈给 Grunt，因此我们需要将适当的报告器下载到我们的项目目录中。
- en: Tip
  id: totrans-297
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'At the time of writing this, the appropriate Blanket.js reporter could be downloaded
    from the following link:'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在撰写本文时，可以从以下链接下载适当的 Blanket.js 报告器：
- en: '[https://github.com/ModelN/grunt-blanket-mocha/raw/master/support/grunt-reporter.js](https://github.com/ModelN/grunt-blanket-mocha/raw/master/support/grunt-reporter.js)'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/ModelN/grunt-blanket-mocha/raw/master/support/grunt-reporter.js](https://github.com/ModelN/grunt-blanket-mocha/raw/master/support/grunt-reporter.js)'
- en: 'To bring together all the parts we set up, we now need to create a testing
    environment that loads our code base, tests, and all the required libraries. Let''s
    create the `test.html` file in our project directory with the following contents:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了将我们设置的所有部分整合在一起，我们现在需要创建一个测试环境，该环境加载我们的代码库、测试和所有必需的库。让我们在我们的项目目录中创建一个名为 `test.html`
    的文件，并包含以下内容：
- en: '[PRE57]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Tip
  id: totrans-302
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that the `data-cover` attribute provided in the `script` tag imports the
    `main.js` code base. This attribute should be included in every script tag that
    imports a file for which coverage reports should be generated.
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，`script` 标签中提供的 `data-cover` 属性导入了 `main.js` 代码库。此属性应包含在导入需要生成覆盖率报告的文件的每个
    `script` 标签中。
- en: 'With our code base, tests, and testing environment ready, we can now add the
    following `blanket_mocha` task to our configuration:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的代码库、测试和测试环境准备就绪后，我们现在可以将以下 `blanket_mocha` 任务添加到我们的配置中：
- en: '[PRE58]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Tip
  id: totrans-306
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: We make use of the `threshold` option here to indicate the minimum code coverage
    percentage that should be achieved for each file. If the final percentage is lower
    than this threshold, the task will return with a failure.
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在这里使用 `threshold` 选项来指示每个文件应达到的最小代码覆盖率百分比。如果最终百分比低于此阈值，任务将返回失败。
- en: 'We can then run the task using the `grunt blanket_mocha` command, which will
    produce output informing us of the test and coverage results, similar to the following:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以使用`grunt blanket_mocha`命令运行任务，这将产生输出，告知我们测试和覆盖率结果，类似于以下内容：
- en: '[PRE59]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: There's more...
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `blanket-mocha` task provides us with several useful options that can be
    used in conjunction with its basic test running and coverage reporting features.
    We'll look at specifying a success threshold for the global average, specifying
    success thresholds for particular files, and specifying success thresholds for
    particular modules.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '`blanket-mocha`任务为我们提供了几个有用的选项，可以与它的基本测试运行和覆盖率报告功能一起使用。我们将探讨指定全局平均的成功阈值、指定特定文件的成功阈值以及指定特定模块的成功阈值。'
- en: Specifying a success threshold for the global average
  id: totrans-312
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定全局平均的成功阈值
- en: 'If we''d like to set a threshold that the average coverage percentage among
    all the files in the targeted source code should surpass, we can do so using the
    `globalThreshold` option as shown in the following example:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要设置一个阈值，使得目标源代码中所有文件的平均覆盖率百分比应超过，我们可以使用`globalThreshold`选项，如下例所示：
- en: '[PRE60]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Specifying success thresholds for particular files
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定特定文件的成功阈值
- en: 'There''s also the option of specifying the thresholds that particular files
    should adhere to using the `customThreshold` option as shown in the following
    example:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还可以使用`customThreshold`选项指定特定文件应遵守的阈值，如下例所示：
- en: '[PRE61]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Specifying success thresholds for particular modules
  id: totrans-318
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定特定模块的成功阈值
- en: In case we'd like to specify a threshold for the average coverage percentage
    that modules should adhere to, we can make use of the `modulePattern,` `moduleThreshold`,
    and `customModuleThreshold` options.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要为模块应遵守的平均覆盖率百分比指定一个阈值，我们可以使用`modulePattern`、`moduleThreshold`和`customModuleThreshold`选项。
- en: The `modulePattern` option takes a **regular expression** of which the first
    grouping will be used to determine the names of modules. The `moduleThreshold`
    option is used to indicate the average threshold that all identified modules should
    adhere to and the `customModuleThreshold` option can be used to specify the threshold
    of each particular module.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`modulePattern`选项接受一个**正则表达式**，其中第一个分组将用于确定模块的名称。`moduleThreshold`选项用于指示所有识别的模块应遵守的平均阈值，而`customModuleThreshold`选项可以用来指定每个特定模块的阈值。'
- en: 'The following example identifies modules by the first directory name after
    the `src` directory in the filename checks whether the average code coverage percentage
    of all the modules is above `70` and that the code coverage percentage of the
    `one` module is above `60`:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例通过文件名中`src`目录之后的第一个目录名称来识别模块，检查所有模块的平均代码覆盖率百分比是否高于`70`，以及`one`模块的代码覆盖率百分比是否高于`60`：
- en: '[PRE62]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Generating coverage reports for client-side code using QUnit and Istanbul
  id: totrans-323
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用QUnit和Istanbul生成客户端代码的覆盖率报告
- en: In this recipe, we'll make use of the `qunit-istanbul (0.4.5)` plugin to run
    our automated **QUnit** tests in a **PhantomJS** environment, generating **coverage
    reports** for the source code they run against using the **Istanbul** library,
    and comparing the results against a specified threshold.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将使用`qunit-istanbul (0.4.5)`插件在**PhantomJS**环境中运行我们的自动化**QUnit**测试，使用**Istanbul**库为他们运行的源代码生成**覆盖率报告**，并将结果与指定的阈值进行比较。
- en: Getting ready
  id: totrans-325
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将使用我们在[第1章](part0015.xhtml#aid-E9OE1 "第1章. 使用Grunt入门")中“在项目中安装Grunt”配方中创建的基本项目结构，即*使用Grunt入门*。如果您还不熟悉其内容，请务必参考。
- en: How to do it...
  id: totrans-327
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The following steps take us through creating a sample code base, creating a
    few tests to run against it, and configuring Grunt to generate coverage reports
    and compare the results to a threshold.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们创建一个示例代码库，创建一些针对它运行的测试，并配置Grunt以生成覆盖率报告并将结果与阈值进行比较。
- en: We'll start by installing the package that contains the `qunit-istanbul` plugin
    by following the instructions provided in the *Installing a plugin* recipe in
    [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"),
    *Getting Started with Grunt*.
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先按照 [第 1 章](part0015.xhtml#aid-E9OE1 "第 1 章。使用 Grunt 入门") 中 *安装插件* 菜单提供的说明安装包含
    `qunit-istanbul` 插件的包。
- en: 'Then, we''ll create a simple JavaScript source file in our project directory
    that contains two functions, one of which we''ll be testing. Let''s call it `main.js`
    and provide it with the following contents:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将在项目目录中创建一个简单的 JavaScript 源文件，其中包含两个函数，其中一个我们将对其进行测试。让我们称它为 `main.js` 并提供以下内容：
- en: '[PRE63]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Now, we can write a simple set of tests, using the QUnit framework, for the
    `square` method. Let''s create a file called `tests.js` in the project directory
    with the following contents:'
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以编写一组简单的测试，使用 QUnit 框架对 `square` 方法进行测试。让我们在项目目录中创建一个名为 `tests.js` 的文件，并包含以下内容：
- en: '[PRE64]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Due to the tests being run inside a browser and the `qunit-istanbul` plugin
    not automatically including it, we'll have to download the QUnit library and style
    sheet into the project directory.
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于测试是在浏览器内运行的，并且 `qunit-istanbul` 插件不会自动包含它，因此我们需要将 QUnit 库和样式表下载到项目目录中。
- en: Tip
  id: totrans-335
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'At the time of writing this, the QUnit library and its accompanying style sheet
    can be found at the following links:'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在撰写本文时，QUnit 库及其配套样式表可以在以下链接找到：
- en: '[http://code.jquery.com/qunit/qunit-1.15.0.js](http://code.jquery.com/qunit/qunit-1.15.0.js)'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://code.jquery.com/qunit/qunit-1.15.0.js](http://code.jquery.com/qunit/qunit-1.15.0.js)'
- en: '[http://code.jquery.com/qunit/qunit-1.15.0.css](http://code.jquery.com/qunit/qunit-1.15.0.css)'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://code.jquery.com/qunit/qunit-1.15.0.css](http://code.jquery.com/qunit/qunit-1.15.0.css)'
- en: 'To bring together all the parts we set up in the previous steps, we now need
    to create a testing environment that loads our code base, tests, and all the required
    libraries. Let''s create the `test.html` file in our project directory with the
    following contents:'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了将之前步骤中设置的所有部分组合在一起，我们现在需要创建一个测试环境，该环境加载我们的代码库、测试和所有必需的库。让我们在我们的项目目录中创建一个名为
    `test.html` 的文件，并包含以下内容：
- en: '[PRE65]'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'With the code base, tests, and testing environment now in place, we can add
    the following `qunit` task to our configuration:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，代码库、测试和测试环境都已就绪，我们可以将以下 `qunit` 任务添加到我们的配置中：
- en: '[PRE66]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Tip
  id: totrans-343
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Note that all the options provided by the `qunit` task can be used in the `options`
    object of the `istanbul` task. Only the options contained in the `coverage` part
    of the `options` object are used to indicate the behavior unique to this plugin.
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，`qunit` 任务提供的所有选项都可以用于 `istanbul` 任务的 `options` 对象中。只有 `options` 对象中 `coverage`
    部分的选项用于指示此插件特有的行为。
- en: The `src` option is used to indicate the source files that we'd like to cover
    in our coverage report. This option can also be set to an array to indicate more
    files and can also make use of the standard Grunt globbing patterns.
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`src` 选项用于指示我们希望在覆盖率报告中涵盖的源文件。此选项也可以设置为数组以指示更多文件，并且还可以使用标准的 Grunt 全局匹配模式。'
- en: The `instrumentedFiles` option is used to indicate the temporary directory that
    will contain the instrumented files during the time that the tests are run. Note
    that this directory is automatically created and destroyed.
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`instrumentedFiles` 选项用于指示在测试运行期间将包含已仪器化文件的临时目录。请注意，此目录会自动创建和销毁。'
- en: 'We can then run the task using the `grunt qunit` command, which should produce
    output informing us of the test and coverage results, similar to the following:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以使用 `grunt qunit` 命令运行任务，这将产生输出，告知我们测试和覆盖率结果，类似于以下内容：
- en: '[PRE67]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: There's more...
  id: totrans-349
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `qunit-istanbul` task provides us with several useful options that can be
    used in conjunction with its basic test running and coverage reporting features.
    We'll look at how to specify a report output destination and coverage thresholds
    at various levels.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '`qunit-istanbul` 任务为我们提供了几个有用的选项，可以与基本测试运行和覆盖率报告功能一起使用。我们将探讨如何指定报告输出目的地和不同级别的覆盖率阈值。'
- en: Specifying a report output destination
  id: totrans-351
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定报告输出目的地
- en: 'If we''d like to save the coverage report results to files, we can do so by
    providing a directory name to any of the highlighted options in the following
    example, each of which saves the results in the particular format mentioned in
    its name:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望将覆盖率报告结果保存到文件中，可以通过提供目录名称给以下示例中的任何突出显示的选项来实现，每个选项都将结果保存为名称中提到的特定格式：
- en: '[PRE68]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Specifying coverage thresholds at various levels
  id: totrans-354
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在不同级别指定覆盖率阈值
- en: 'In case we''d like to specify the code coverage percentage thresholds at either
    the line, statement, function, or branch level, we can do so by using any of the
    appropriately named options highlighted in the following example:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想指定代码覆盖率百分比阈值，无论是行、语句、函数还是分支级别，我们可以通过使用以下示例中突出显示的任何适当命名的选项来实现：
- en: '[PRE69]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
