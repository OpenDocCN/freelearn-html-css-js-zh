- en: Chapter 7. Getting into Shape
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating simple shapes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a line generator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using line curve
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing line tension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using an area generator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using area curve
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using an arc generator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing arc transition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Scalable Vector Graphics** (**SVG**) is a mature **World Wide Web Consortium**
    (**W3C**) standard designed for user-interactive graphics on the Web and Mobile
    platform. Similar to HTML, SVG can coexist happily with other technologies, such
    as CSS and JavaScript, in modern browsers and forms the backbone of many Web applications.
    In today''s Web, you can see use cases of SVG everywhere, from digital map to
    data visualization. So far, in this book, we covered most of the recipes using
    HTML elements alone; however, in real-world projects, SVG is the *de facto* standard
    for data visualization; it is also where D3''s strength really shines. In this
    chapter, we will cover the basic concept of SVG and D3''s support for SVG shape
    generation. SVG is a very rich topic. Volumes of books can be, and have been,
    devoted to this topic alone; hence, we will not plan or even try to cover all
    SVG-related topics, rather we''ll focus on D3 and data visualization-related techniques
    and features.'
  prefs: []
  type: TYPE_NORMAL
- en: What is SVG?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As its name suggests, SVG is about graphics. It is a way to describe graphical
    image with scalable vectors. Let''s take a look at the following two of the main
    SVG advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: Vector
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SVG image is based on vectors instead of pixels. With the pixel-based approach,
    an image is composed of a bitmap with *x* and *y* as its coordinates filled with
    color pigmentations. Whereas, with the vector-based approach, each image consists
    of a set of geometric shapes described using simple and relative formulae filled
    with certain texture. As you can imagine, this latter approach fits naturally
    with our data visualization requirement. It is much simpler to visualize your
    data with lines, bar, and circles in SVG rather than trying to manipulate color
    pigmentations in a bitmap.
  prefs: []
  type: TYPE_NORMAL
- en: Scalability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The second signature capability of SVG is scalability. Since SVG graphic is
    a group of geometric shapes described using relative formulas, it can be rendered
    and re-rendered
  prefs: []
  type: TYPE_NORMAL
- en: with different sizes and zoom levels without losing precision. On the other
    hand, when
  prefs: []
  type: TYPE_NORMAL
- en: 'bitmap-based images are resized to a large resolution, they suffer the effect
    of pixelation, which occurs when the individual pixels become visible, while SVG
    does not have this drawback. Refer to the following figure to get a better picture
    of what we just read:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Scalability](img/image_07_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: SVG versus bitmap pixelation
  prefs: []
  type: TYPE_NORMAL
- en: 'As a data visualizer, using SVG gives you the benefit of being able to display
    your visualization on any resolution without losing the crispiness of your eye-catching
    creation. On top of that, SVG offers you some additional advantages such as the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Readability**: SVG is based on XML, a human-readable markup language.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open standard**: SVG was created by W3C and is not a proprietary vendor standard.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Adoption**: All modern browsers support SVG standard, even on mobile platform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interoperability**: SVG works well with other Web technologies, such as CSS
    and JavaScript; D3 itself is a perfect demonstration of this capability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lightweight**: Compared to bitmap-based images, SVG is a lot lighter and
    takes up much less space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because of all these capabilities we have mentioned so far, SVG has become the
    *de facto* standard for data visualization on the Web. From this chapter onward,
    all recipes in this book will be illustrated using SVG as its most important part,
    with which the true power of D3 can be professed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some older browsers do not support SVG natively. If your target users are using
    legacy browsers, please check the SVG compatibility before deciding whether SVG
    is the right choice for your visualization project. Here is a link that you can
    visit to check your browser''s compatibility: [http://caniuse.com/#feat=svg](http://caniuse.com/#feat=svg)'
  prefs: []
  type: TYPE_NORMAL
- en: Creating simple shapes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will explore a few simple built-in SVG shape formulas and
    their attributes. These simple shapes are quite easy to generate and are usually
    created manually using D3 when necessary. Though these simple shapes are not the
    most useful shape generator to know when working with D3, occasionally, they could
    be handy when drawing peripheral shapes in your visualization project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/simple-shapes.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/simple-shapes.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will draw four different shapes in four different colors
    using native SVG shape elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following visual output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_07_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Simple SVG shapes
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have drawn four different shapes-a line, a circle, a rectangle, and a triangle-in
    this example using SVG built-in shape elements, which can be described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**A little refresher on SVG coordinate system** SVG *x* and *y* coordinate
    system originates from the top-left corner `(0, 0)` of the canvas and ends on
    the lower-right corner `(<width>, <height>)`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line`: A line element creates a simple straight line with coordinate attributes
    `x1` and `y1` as its start point and `x2`, `y2` as its endpoint (refer to line
    `A`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`circle`: The `append()` function draws a circle with coordinate attributes
    `cx` and `cy` defining the center of the circle, whereas the attribute `r` defines
    the radius of the circle (refer to line `B`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rect`: The `append()` function draws a rectangle with coordinate attributes
    `x` and `y` that define the top-left corner of the rectangular (refer to line
    `C`), attributes `width` and `height` that control the size of the rectangle,
    and the attributes `rx` and `ry` that introduce rounded corners. The attributes
    `rx` and `ry` control the *x* and *y* axes radius of the ellipse used to round
    off the corners of the rectangle (refer to line `E`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`polygon`: To draw a polygon, a set of points that makes up the polygon need
    to be defined using a `points` attribute (refer to line `F`). The `points` attribute
    accepts a list of point coordinates that are separated by space, as shown in the
    following code snippet:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: All SVG shapes can be styled using style attributes directly or through CSS
    similar to HTML elements. Furthermore, they can be transformed and filtered using
    SVG transformation and filter support; however, due to the limited scope of this
    book, we will not cover these topics in detail. In the rest of this chapter, we
    will focus on D3-specific supports on SVG shape generation instead.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SVG also supports the `ellipse` and `polyline` elements; however, due to their
    similarity to `circle` and `polygon`, we will not cover them in detail in this
    book. For more information on SVG shape elements, please visit [https://www.w3.org/TR/SVG/shapes.html](https://www.w3.org/TR/SVG/shapes.html)
    .
  prefs: []
  type: TYPE_NORMAL
- en: D3 SVG shape generators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The *swiss army knife* among SVG shape elements is `svg:path`. A path defines
    the outline of any shape, which can then be filled, stroked, or clipped. Every
    shape we have discussed so far can be mathematically defined using `svg:path`
    alone. The SVG `path` is a very powerful construct and has its own mini-language
    and grammar. The `svg:path` mini-language is used to set the `d` attribute on
    an `svg:path` element, which consists of the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '**moveto**: M (absolute)/m (relative) moveto (x y)+'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**closepath**: Z (absolute)/z (relative) closepath'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**lineto**: L (absolute)/l (relative) lineto (x y)+, H (absolute)/h (relative)
    horizontal lineto x+, V(absolute)/v(relative) vertical lineto y+'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cubic Bezier**: C(absolute)/c(relative) curve to (x1 y1 x2 y2 x y)+, S(absolute)/s(relative)
    shorthand curve to (x2 y2 x y)+'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Quadratic Bezier curve**: Q (absolute)/q (relative) quadratic Bezier curve
    to (x1 y1 x y)+, T (absolute)/t (relative) shorthand Quadratic Bezier curve to
    (x y)+'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Elliptical curve**: A (absolute)/a (relative) elliptical arc (rx ry x-axis-rotation
    large-arc-flag sweep-flag x y)+'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As directly using paths is not a very pleasant method due to its cryptic language,
    in most cases, some kind of software, for example, Adobe Illustrator or Inkscape,
    is required to assist us in creating the SVG `path` element visually. Similarly,
    D3 ships with a set of SVG shape generator functions that can be used to generate
    data-driven path formulas; this is how D3 truly revolutionizes the field of data
    visualization by combining the power of SVG with intuitive data-driven approach.
    This will be our focus for the rest of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please refer to [https://www.w3.org/TR/SVG/Overview.html](https://www.w3.org/TR/SVG/Overview.html)
    for more information on SVG-related topics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For a complete reference on SVG path formula language and its grammar, please
    visit [https://www.w3.org/TR/SVG/paths.html](https://www.w3.org/TR/SVG/paths.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a line generator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: D3 line generator is probably one of the most versatile generators. Although
    it is called a line generator, it has little to do with the `svg:line` element.
    In contrast, it is implemented using the `svg:path` element. Similar to `svg:path`,
    D3 `line` generator is so flexible that you can effectively draw any shape using
    `line` alone; however, to make your life easier, D3 also provides other more specialized
    shape generators, which will be covered in later recipes in this chapter. In this
    recipe, we will draw multiple data-driven lines using the `d3.svg.line` generator.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/line.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/line.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let''s take a look at the following line generator in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code draws multiple lines along with the *x* and *y* axes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_07_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: D3 line generator
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, the data we used to draw the lines is defined in a two-dimensional
    array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The first data series is defined manually and explicitly, whereas the second
    series is generated using a mathematical formula. Both of these cases are quite
    common in data visualization projects. Once the data is defined, in order to map
    data points to their visual representation, the following two scales were created
    for the *x* and *y* coordinates:'
  prefs: []
  type: TYPE_NORMAL
- en: x = d3.scaleLinear() // <-A .domain([0, 10]) .range([margin, width - margin]),
    y = d3.scaleLinear() // <-B .domain([0, 10]) .range([height - margin, margin]);
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the domains for these scales were set to be large enough to include
    all data points in both the series, while the ranges were set to represent the
    canvas area without including the margins. The *y* axis range is inverted since
    we want our point of origin at the lower-left corner of the canvas instead of
    the SVG-standard upper-left corner. Once both data and scales are set, all we
    need to do is generate the lines to define our generator using the `d3.line` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `d3.line` function returns a D3 line generator function, which you can
    further customize. In our example, we simply stated for this particular line generator
    the *x* coordinate, which will be calculated using the `x` scale mapping, while
    the *y* coordinate will be mapped by the `y` scale. Using D3 scales, to map coordinates,
    is not only convenient but also a widely accepted best practice (separation of
    concerns). Though, technically, you can implement these functions using any approach
    you prefer. Now the only thing left for you to do is the actual creation of the
    `svg:path` elements as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Path creation process in the preceding code was very straightforward. Two `svg:path`
    elements were created using the data array we defined (on line `E`). Then, the
    `d` attribute for each path element was set using the `line` generator we created
    previously by passing in the data `d` as its input parameter. The following screenshot
    shows what the generated `svg:path` elements look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image_07_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Generated SVG path elements
  prefs: []
  type: TYPE_NORMAL
- en: Finally, two axes were created using the same *x* and *y* scales we defined
    earlier. Due to limited space in this book, we have omitted the axes-related code
    in this recipe and in the rest of this chapter since they don't really change
    and also are not the focus of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For detailed information on D3 axes support, please refer to [Chapter 5](ch05.html
    "Chapter 5. Playing with Axes"), *Playing with Axes*.
  prefs: []
  type: TYPE_NORMAL
- en: Using line curve
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, the D3 line generator uses the *linear curve* mode; however, D3
    supports a number of different curve factories. The curve function determines
    how data points will be connected, for example, by a straight line (*linear*)
    or a curved line (**B-spline**). In this recipe, we will show you how these curve
    modes can be set along with their effects.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/line-curve.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/line-curve.html)'
  prefs: []
  type: TYPE_NORMAL
- en: This recipe is built on top of what we did in the previous recipe, so if you
    are not
  prefs: []
  type: TYPE_NORMAL
- en: yet familiar with basic line generator functions, please refer to the previous
    recipe first
  prefs: []
  type: TYPE_NORMAL
- en: before proceeding.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let''s take a look at how different line interpolation modes can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following line chart in your browser with
    configurable interpolation modes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_07_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Line curve
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Overall, this recipe is similar to the previous one. Two lines are generated
    using predefined dataset. However, in this recipe, you will allow the user to
    select a specific line interpolation mode, which is then set using the `interpolate`
    function on line generator (refer to line `A`) in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following interpolation modes are supported by D3:'
  prefs: []
  type: TYPE_NORMAL
- en: '`d3.curveLinear`: Linear segments, that is, polyline'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`d3.curveLinearClosed`: Closed linear segments, that is, polygon'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`d3.curveStepBefore`: Alternated between the vertical and horizontal segments,
    as in a step function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`d3.curveStepAfter`: Alternated between the horizontal and vertical segments,
    as in a step function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`d3.curveBasis`: It is a B-spline, with control point duplication on the ends'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`d3.curveBasisOpen`: An open B-spline; may not intersect the start or end'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`d3.curveBasisClosed`: A closed B-spline, as in a loop'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`d3.curveBundle`: Equivalent to basis, except the tension parameter is used
    to straighten the spline'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`d3.curveCardinal`: A cardinal spline, with control point duplication on the
    ends.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`d3.curveCardinalOpen`: An open cardinal spline; may not intersect the start
    or end, but will intersect other control points'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`d3.curveCardinalClosed`: A closed cardinal spline, as in a loop'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`d3.curveMonotoneY`: Cubic interpolation that preserves monotonicity in *y*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`d3.curveCatmullRom`: A cubic catmull-Rom spline.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Additionally, in the `renderDots` function (refer to line `B`), we have also
    created a small circle for each data point to serve as reference points. These
    dots are created using the `svg:circle` elements, as shown on line `C` of the
    following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: See Also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For detailed listing and API document for all D3 curve factories, please refer
    to [https://github.com/d3/d3-shape#curves](https://github.com/d3/d3-shape#curves)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing line tension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If Cardinal interpolation mode (cardinal, cardinal-open, or cardinal-closed)
    is used, then the line can be further modified using tension settings. In this
    recipe, you will see how tension can be modified and its effect on line interpolation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/line-tension.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/line-tension.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let''s take a look at how line tension can be changed and what effect
    it has on line generation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates a cardinal line chart with configurable tension:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_07_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Line Tension
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Tension sets the Cardinal spline interpolation tension to a specific number
    in the range of `[0, 1]`. Tension can be set using the `tension` function on line
    generator (refer to line `C`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Additionally, we also initiated a transition on line `B` to highlight the tension
    effect on line interpolation. The tension in cardinal curve essentially determines
    the length of the tangents. At tension one, it is the same as curve linear while
    at zero it produces uniform Catmull-Rom spline. If the tension is not set explicitly,
    Cardinal interpolation sets tension to `0` by default.
  prefs: []
  type: TYPE_NORMAL
- en: Using an area generator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using D3 line generator, we can technically generate an outline of any shape;
    however, even with a different curve support, directly drawing an area using line
    (as in an area chart) is not an easy task. This is why D3 also provides a separate
    shape generator function specifically designed for drawing area.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/area.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/area.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will add a filled area to a pseudo line chart, effectively
    turning it into an
  prefs: []
  type: TYPE_NORMAL
- en: 'area chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following visual output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_07_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Area generator
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Similar to the earlier given *Using a line generator* recipe, we have two scales
    defined in this recipe to map data to visual domain on *x* and *y* coordinates
    (refer to line A) as given in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'On line `B`, data is generated by a mathematical formula. Area generator is
    then created using the `d3.area` function (refer to line `C`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, D3 area generator is-similar to the line generator-designed
    to work in a 2D Cartesian coordinate system. The `x` function defines an accessor
    function for the *x* coordinate (refer to line `D`), which simply maps data to
    the visual coordinate using the `x` scale we defined earlier. For the *y* coordinate,
    we provided the area generator with two different accessors: one for the lower
    bound (`y0`) and the other for the higher bound (`y1`) coordinates. This is the
    crucial difference between area and line generator. D3 area generator supports
    higher and lower bound on both *x* and *y* axes (`x0`, `x1`, `y0`, `y1`) and supports
    the shorthand accessors (`x` and `y`) if the higher and lower bounds are the same.
    Once the area generator is defined, the method of creating an area is almost identical
    to the line generator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Area is also implemented using the `svg:path` element (refer to line `G`). D3
    area generator is used to generate the `d` formula for the `svg:path` element
    on line `H` with data `d` as its input parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Using area curve
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to the D3 line generator, area generator also supports identical interpolation
    mode, and hence, it can be used in combination with the line generator in every
    mode.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/area-curve.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/area-curve.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will show how interpolation mode can be configured on an
    area generator. This way, the matching interpolated area can then be created with
    its corresponding line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following pseudo area chart with configurable
    interpolation mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_07_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Area curve
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe is similar to the previous one, except that in this recipe the
    interpolation mode is passed in based on the user''s selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the curve mode was configured on both lines along with the area
    generator through the `curve` function (refer to lines `A` and `B`). Since D3
    line and area generator supports the same set of curve factories, they can always
    be counted on to generate matching line and area as seen in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: D3 area generator also supports the same tension configuration when using Cardinal
    mode; however, since it is identical to the line generator's tension support,
    and due to limited space in this book, we will not cover area tension here.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please refer to [https://github.com/d3/d3/blob/master/API.md#areas](https://github.com/d3/d3/blob/master/API.md#areas)
    for more information on area generator functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using an arc generator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Among the most common shape generators-besides the line and area generator-D3
    also provides the *arc generator*. At this point, you might be wondering, *Didn't
    SVG standard already include circle element? Isn't that enough?*
  prefs: []
  type: TYPE_NORMAL
- en: The simple answer to this is *no*. The D3 arc generator is a lot more versatile
    than the simple `svg:circle` element. The D3 arc generator is capable of creating
    not only circles but also annulus (donut), circular sector, and annulus sector,
    all of which we will learn in this recipe. More importantly, an arc generator
    is designed to generate, as its name suggests, an arc (in others words, not a
    full circle or even a sector but rather arcs of arbitrary angle).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/arc.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/arc.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will use arc generator to generate multi-slice circle, annulus
    (donut), circular sectors, and annulus sectors as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code produces the following circle, which you can change into
    an arc, a sector, or an arc sector by clicking on the buttons, for example, **Annulus(Donut)**
    generates the second shape:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_07_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Arc generator
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The most important part of understanding the D3 arc generator is its data structure.
    D3 arc generator has very specific requirements when it comes to its data, as
    shown on line `B`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Each row of the arc data has to contain two mandatory fields: `startAngle`
    and `endAngle`. The angles have to be in the range `[0, 2 * Math.PI]` (refer to
    line `A`). D3 arc generator will use these angles to generate corresponding slices,
    as shown earlier in this recipe.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Along with the start and end angles, arc dataset can contain any number of additional
    fields, which can then be accessed in D3 functions to drive other visual representation.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you think that calculating these angles based on the data you have will
    be a big hassle, you are absolutely correct. This is why D3 provides specific
    layout manager to help you calculate these angles, and we will cover this in the
    next chapter. For now, let''s focus on understanding the basic mechanism behind
    the scenes so that when it is time to introduce the layout manager or if you ever
    need to set the angles manually, you will be well equipped to do so. D3 arc generator
    is created using the following `d3.arc` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The `d3.arc` function optionally has the `outerRadius` and `innerRadius` settings.
    When `innerRadius` is set, the arc generator will produce an image of annulus
    (donut) instead of a circle. Finally, the D3 arc is also implemented using the
    `svg:path` element, and thus similar to the line and area generator, the `d3.arc`
    generator function can be invoked (refer to line `D`) to generate the `d` formula
    for the `svg:path` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: One additional element worth mentioning here is the `svg:g` element. This element
    does not define any shape itself but serves rather as a container element used
    to group other elements, in this case, the `path.arc` elements. Transformation
    applied to the `g` element is applied to all the child elements while its attributes
    are also inherited by its child elements.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please refer to [https://github.com/d3/d3/blob/master/API.md#arcs](https://github.com/d3/d3/blob/master/API.md#arcs)
    for more information on arc generator function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing arc transition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One area where arc differs significantly from other shapes, such as line and
    area, is its transition. For most of the shapes that we covered so far, including
    simple SVG built-in shapes, you can rely on D3 transition and interpolation to
    handle their animation. However, this is not the case when dealing with arc. We
    will explore the arc transition technique in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/arc-transition.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/arc-transition.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will animate a multi-slice annulus transitioning with each
    slice starting from angle `0` to its final desired angle and eventually reaching
    a full annulus:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates an arc that starts rotating and eventually becomes
    a complete annulus as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_07_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Arc transition with tweening
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When confronted with the requirement of such transition, your first thought
    might be using the vanilla D3 transition while relying on built-in interpolations
    to generate the animation. Here is the code snippet that will do just that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'As shown with highlighted lines in the preceding code snippet, with this approach,
    we initially created slice path with both `startAngle` and `endAngle` set to zero.
    Then, through transition, we interpolated the path `d` attribute to its final
    angle using the arc generator function `arc(d)`. This approach seems to make sense,
    however, what it generates is the transition shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/5530_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Arc transition without tweening
  prefs: []
  type: TYPE_NORMAL
- en: 'This is obviously not the animation we want. The reason for this strange transition
    is that by directly creating a transition on the `svg:path` attribute `d`, we
    are instructing D3 to interpolate this string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the preceding string will interpolate to this string linearly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Hence, it leads to this particular transition effect.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Though this transition effect is not what we desire in this example, this is
    still a good showcase of how flexible and powerful built-in D3 transition is.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to achieve the transition effect we want, we will need to leverage
    the D3 attribute tweening (for detailed description on tweening, refer to the
    *Using tweening* recipe of [Chapter 6](ch06.html "Chapter 6. Transition with Style"),
    *Transition with Style*):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Here, instead of transitioning the `svg:path` attribute `d` directly, we created
    a tweening function on line `A`. As you can recall, D3 `attrTween` expects a factory
    function for a tween function. In this case, we started our tweening from angle
    zero (refer to line `B`). Then, we created a compound object interpolator on line
    `C`, which will interpolate both start and end angles for each slice. Finally,
    on line `D`, the arc generator is used to generate a proper `svg:path` formula
    using the already interpolated angles. This is how a smooth transition of properly
    angled arcs can be created through custom attribute tweening.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: D3 also provides support for other shape generators, for example, symbol, chord,
    and diagonal. However, due to their simplicity and the limited scope of this book,
    we will not cover them individually here, although we will cover them as parts
    of other more complex visual constructs in the following chapters. More importantly,
    with well-grounded understanding of these basic shape generators covered in this
    chapter, you should be able to pick up other D3 shape generators without much
    trouble.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information on transition and tweening, refer to the *Using tweening
    recipe* in [Chapter 6](ch06.html "Chapter 6. Transition with Style"), *Transition
    with Style*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
