- en: Chapter 7. Getting into Shape
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Creating simple shapes
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a line generator
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using line curve
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing line tension
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using an area generator
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using area curve
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using an arc generator
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing arc transition
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Scalable Vector Graphics** (**SVG**) is a mature **World Wide Web Consortium**
    (**W3C**) standard designed for user-interactive graphics on the Web and Mobile
    platform. Similar to HTML, SVG can coexist happily with other technologies, such
    as CSS and JavaScript, in modern browsers and forms the backbone of many Web applications.
    In today''s Web, you can see use cases of SVG everywhere, from digital map to
    data visualization. So far, in this book, we covered most of the recipes using
    HTML elements alone; however, in real-world projects, SVG is the *de facto* standard
    for data visualization; it is also where D3''s strength really shines. In this
    chapter, we will cover the basic concept of SVG and D3''s support for SVG shape
    generation. SVG is a very rich topic. Volumes of books can be, and have been,
    devoted to this topic alone; hence, we will not plan or even try to cover all
    SVG-related topics, rather we''ll focus on D3 and data visualization-related techniques
    and features.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: What is SVG?
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As its name suggests, SVG is about graphics. It is a way to describe graphical
    image with scalable vectors. Let''s take a look at the following two of the main
    SVG advantages:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Vector
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SVG image is based on vectors instead of pixels. With the pixel-based approach,
    an image is composed of a bitmap with *x* and *y* as its coordinates filled with
    color pigmentations. Whereas, with the vector-based approach, each image consists
    of a set of geometric shapes described using simple and relative formulae filled
    with certain texture. As you can imagine, this latter approach fits naturally
    with our data visualization requirement. It is much simpler to visualize your
    data with lines, bar, and circles in SVG rather than trying to manipulate color
    pigmentations in a bitmap.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Scalability
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The second signature capability of SVG is scalability. Since SVG graphic is
    a group of geometric shapes described using relative formulas, it can be rendered
    and re-rendered
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: with different sizes and zoom levels without losing precision. On the other
    hand, when
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'bitmap-based images are resized to a large resolution, they suffer the effect
    of pixelation, which occurs when the individual pixels become visible, while SVG
    does not have this drawback. Refer to the following figure to get a better picture
    of what we just read:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '![Scalability](img/image_07_001.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
- en: SVG versus bitmap pixelation
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: 'As a data visualizer, using SVG gives you the benefit of being able to display
    your visualization on any resolution without losing the crispiness of your eye-catching
    creation. On top of that, SVG offers you some additional advantages such as the
    following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '**Readability**: SVG is based on XML, a human-readable markup language.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open standard**: SVG was created by W3C and is not a proprietary vendor standard.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开放标准**：SVG 由 W3C 创建，不是专有供应商标准。'
- en: '**Adoption**: All modern browsers support SVG standard, even on mobile platform.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**采用**：所有现代浏览器都支持 SVG 标准，甚至在移动平台上也是如此。'
- en: '**Interoperability**: SVG works well with other Web technologies, such as CSS
    and JavaScript; D3 itself is a perfect demonstration of this capability.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**互操作性**：SVG 与其他 Web 技术（如 CSS 和 JavaScript）配合良好；D3 本身就是这种能力的完美展示。'
- en: '**Lightweight**: Compared to bitmap-based images, SVG is a lot lighter and
    takes up much less space.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**轻量级**：与基于位图的图像相比，SVG 要轻得多，占用的空间也小得多。'
- en: Because of all these capabilities we have mentioned so far, SVG has become the
    *de facto* standard for data visualization on the Web. From this chapter onward,
    all recipes in this book will be illustrated using SVG as its most important part,
    with which the true power of D3 can be professed.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们之前提到的所有这些功能，SVG 已经成为 Web 上数据可视化的**事实标准**。从本章开始，本书中的所有食谱都将使用 SVG 作为其最重要的部分进行展示，通过
    SVG 可以充分发挥 D3 的真正威力。
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Some older browsers do not support SVG natively. If your target users are using
    legacy browsers, please check the SVG compatibility before deciding whether SVG
    is the right choice for your visualization project. Here is a link that you can
    visit to check your browser''s compatibility: [http://caniuse.com/#feat=svg](http://caniuse.com/#feat=svg)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一些较旧的浏览器不支持 SVG。如果您的目标用户正在使用旧版浏览器，请在决定 SVG 是否是您可视化项目的正确选择之前检查 SVG 兼容性。您可以访问以下链接来检查您浏览器的兼容性：[http://caniuse.com/#feat=svg](http://caniuse.com/#feat=svg)
- en: Creating simple shapes
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建简单形状
- en: In this recipe, we will explore a few simple built-in SVG shape formulas and
    their attributes. These simple shapes are quite easy to generate and are usually
    created manually using D3 when necessary. Though these simple shapes are not the
    most useful shape generator to know when working with D3, occasionally, they could
    be handy when drawing peripheral shapes in your visualization project.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将探索一些简单的内置 SVG 形状公式及其属性。这些简单的形状很容易生成，通常在需要时手动使用 D3 创建。尽管这些简单形状不是与 D3
    一起工作时最有用的形状生成器，但偶尔在可视化项目的边缘形状绘制时可能会很有用。
- en: Getting ready
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/simple-shapes.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/simple-shapes.html)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/simple-shapes.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/simple-shapes.html)'
- en: How to do it...
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In this recipe, we will draw four different shapes in four different colors
    using native SVG shape elements:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将使用原生的 SVG 形状元素，以四种不同的颜色绘制四种不同的形状：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding code generates the following visual output:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码生成了以下视觉输出：
- en: '![How to do it...](img/image_07_002.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_07_002.jpg)'
- en: Simple SVG shapes
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的 SVG 形状
- en: How it works...
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We have drawn four different shapes-a line, a circle, a rectangle, and a triangle-in
    this example using SVG built-in shape elements, which can be described as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用 SVG 内置的形状元素绘制了四种不同的形状——一条线、一个圆、一个矩形和一个三角形，这些形状可以描述如下：
- en: Tip
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**A little refresher on SVG coordinate system** SVG *x* and *y* coordinate
    system originates from the top-left corner `(0, 0)` of the canvas and ends on
    the lower-right corner `(<width>, <height>)`.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**SVG 坐标系的简要回顾** SVG 的 *x* 和 *y* 坐标系起源于画布的左上角 `(0, 0)`，并延伸到右下角 `(<width>, <height>)`。'
- en: '`line`: A line element creates a simple straight line with coordinate attributes
    `x1` and `y1` as its start point and `x2`, `y2` as its endpoint (refer to line
    `A`).'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`line`：一个线元素创建了一条简单的直线，其坐标属性 `x1` 和 `y1` 作为起点，`x2` 和 `y2` 作为终点（参见图 `A`）。'
- en: '`circle`: The `append()` function draws a circle with coordinate attributes
    `cx` and `cy` defining the center of the circle, whereas the attribute `r` defines
    the radius of the circle (refer to line `B`).'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`circle`：`append()` 函数通过坐标属性 `cx` 和 `cy` 绘制一个圆，这两个属性定义了圆的中心，而属性 `r` 定义了圆的半径（参见图
    `B`）。'
- en: '`rect`: The `append()` function draws a rectangle with coordinate attributes
    `x` and `y` that define the top-left corner of the rectangular (refer to line
    `C`), attributes `width` and `height` that control the size of the rectangle,
    and the attributes `rx` and `ry` that introduce rounded corners. The attributes
    `rx` and `ry` control the *x* and *y* axes radius of the ellipse used to round
    off the corners of the rectangle (refer to line `E`).'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rect`: `append()` 函数使用坐标属性 `x` 和 `y` 绘制矩形，这些属性定义了矩形的左上角（参考行 `C`），属性 `width`
    和 `height` 控制矩形的大小，以及引入圆角的属性 `rx` 和 `ry`。属性 `rx` 和 `ry` 控制用于圆角矩形的椭圆的 *x* 和 *y*
    轴半径（参考行 `E`）。'
- en: '`polygon`: To draw a polygon, a set of points that makes up the polygon need
    to be defined using a `points` attribute (refer to line `F`). The `points` attribute
    accepts a list of point coordinates that are separated by space, as shown in the
    following code snippet:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`polygon`: 要绘制多边形，需要使用 `points` 属性定义组成多边形的一组点（参考行 `F`）。`points` 属性接受由空格分隔的点坐标列表，如下面的代码片段所示：'
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: All SVG shapes can be styled using style attributes directly or through CSS
    similar to HTML elements. Furthermore, they can be transformed and filtered using
    SVG transformation and filter support; however, due to the limited scope of this
    book, we will not cover these topics in detail. In the rest of this chapter, we
    will focus on D3-specific supports on SVG shape generation instead.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 SVG 形状都可以使用样式属性直接或通过类似于 HTML 元素的 CSS 进行样式化。此外，它们可以使用 SVG 变换和过滤支持进行变换和过滤；然而，由于本书的范围有限，我们不会详细讨论这些主题。在本章的其余部分，我们将专注于
    D3 特定的 SVG 形状生成支持。
- en: There's more...
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: SVG also supports the `ellipse` and `polyline` elements; however, due to their
    similarity to `circle` and `polygon`, we will not cover them in detail in this
    book. For more information on SVG shape elements, please visit [https://www.w3.org/TR/SVG/shapes.html](https://www.w3.org/TR/SVG/shapes.html)
    .
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: SVG 也支持 `ellipse` 和 `polyline` 元素；然而，由于它们与 `circle` 和 `polygon` 的相似性，我们在这本书中不会详细讨论它们。有关
    SVG 形状元素的更多信息，请访问 [https://www.w3.org/TR/SVG/shapes.html](https://www.w3.org/TR/SVG/shapes.html)
    .
- en: D3 SVG shape generators
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: D3 SVG 形状生成器
- en: 'The *swiss army knife* among SVG shape elements is `svg:path`. A path defines
    the outline of any shape, which can then be filled, stroked, or clipped. Every
    shape we have discussed so far can be mathematically defined using `svg:path`
    alone. The SVG `path` is a very powerful construct and has its own mini-language
    and grammar. The `svg:path` mini-language is used to set the `d` attribute on
    an `svg:path` element, which consists of the following commands:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: SVG 形状元素中的“瑞士军刀”是 `svg:path`。路径定义了任何形状的轮廓，然后可以填充、描边或裁剪。我们迄今为止讨论的所有形状都可以仅使用 `svg:path`
    进行数学定义。SVG 的 `path` 是一个非常强大的结构，并且有自己的迷你语言和语法。`svg:path` 迷你语言用于设置 `svg:path` 元素的
    `d` 属性，它由以下命令组成：
- en: '**moveto**: M (absolute)/m (relative) moveto (x y)+'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移动到**: M (绝对)/m (相对) 移动到 (x y)+'
- en: '**closepath**: Z (absolute)/z (relative) closepath'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**闭合路径**: Z (绝对)/z (相对) 闭合路径'
- en: '**lineto**: L (absolute)/l (relative) lineto (x y)+, H (absolute)/h (relative)
    horizontal lineto x+, V(absolute)/v(relative) vertical lineto y+'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**直线到**: L (绝对)/l (相对) 直线到 (x y)+, H (绝对)/h (相对) 水平直线到 x+, V(绝对)/v(相对) 垂直直线到
    y+'
- en: '**Cubic Bezier**: C(absolute)/c(relative) curve to (x1 y1 x2 y2 x y)+, S(absolute)/s(relative)
    shorthand curve to (x2 y2 x y)+'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**三次贝塞尔曲线**: C(绝对)/c(相对) 曲线到 (x1 y1 x2 y2 x y)+, S(绝对)/s(相对) 简写曲线到 (x2 y2 x
    y)+'
- en: '**Quadratic Bezier curve**: Q (absolute)/q (relative) quadratic Bezier curve
    to (x1 y1 x y)+, T (absolute)/t (relative) shorthand Quadratic Bezier curve to
    (x y)+'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**二次贝塞尔曲线**: Q (绝对)/q (相对) 二次贝塞尔曲线到 (x1 y1 x y)+, T (绝对)/t (相对) 简写二次贝塞尔曲线到
    (x y)+'
- en: '**Elliptical curve**: A (absolute)/a (relative) elliptical arc (rx ry x-axis-rotation
    large-arc-flag sweep-flag x y)+'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**椭圆曲线**: A (绝对)/a (相对) 椭圆弧 (rx ry x-axis-rotation large-arc-flag sweep-flag
    x y)+'
- en: As directly using paths is not a very pleasant method due to its cryptic language,
    in most cases, some kind of software, for example, Adobe Illustrator or Inkscape,
    is required to assist us in creating the SVG `path` element visually. Similarly,
    D3 ships with a set of SVG shape generator functions that can be used to generate
    data-driven path formulas; this is how D3 truly revolutionizes the field of data
    visualization by combining the power of SVG with intuitive data-driven approach.
    This will be our focus for the rest of this chapter.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 由于直接使用路径语言晦涩难懂，这种方法并不愉快，在大多数情况下，需要某种软件，例如Adobe Illustrator或Inkscape，来帮助我们直观地创建SVG
    `path`元素。同样，D3附带了一套SVG形状生成器函数，可以用来生成数据驱动的路径公式；这就是D3如何通过结合SVG的力量和直观的数据驱动方法，真正地革新了数据可视化领域。这将是本章剩余部分的重点。
- en: See also
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: Please refer to [https://www.w3.org/TR/SVG/Overview.html](https://www.w3.org/TR/SVG/Overview.html)
    for more information on SVG-related topics
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考 [https://www.w3.org/TR/SVG/Overview.html](https://www.w3.org/TR/SVG/Overview.html)
    了解更多关于SVG相关主题的信息
- en: For a complete reference on SVG path formula language and its grammar, please
    visit [https://www.w3.org/TR/SVG/paths.html](https://www.w3.org/TR/SVG/paths.html)
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于SVG路径公式语言及其语法的完整参考，请访问 [https://www.w3.org/TR/SVG/paths.html](https://www.w3.org/TR/SVG/paths.html)
- en: Using a line generator
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用线生成器
- en: D3 line generator is probably one of the most versatile generators. Although
    it is called a line generator, it has little to do with the `svg:line` element.
    In contrast, it is implemented using the `svg:path` element. Similar to `svg:path`,
    D3 `line` generator is so flexible that you can effectively draw any shape using
    `line` alone; however, to make your life easier, D3 also provides other more specialized
    shape generators, which will be covered in later recipes in this chapter. In this
    recipe, we will draw multiple data-driven lines using the `d3.svg.line` generator.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: D3线生成器可能是最通用的生成器之一。尽管它被称为线生成器，但它与`svg:line`元素几乎没有关系。相反，它是使用`svg:path`元素实现的。与`svg:path`类似，D3
    `line`生成器非常灵活，你可以仅使用`line`有效地绘制任何形状；然而，为了使你的生活更轻松，D3还提供了其他更专业的形状生成器，这些将在本章后面的食谱中介绍。在本食谱中，我们将使用`d3.svg.line`生成器绘制多个数据驱动的线。
- en: Getting ready
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/line.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/line.html)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/line.html](https://github.com/NickQiZhu/d3-cookbook/blob/master/src/chapter7/line.html)'
- en: How to do it...
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Now, let''s take a look at the following line generator in action:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看以下线生成器的实际效果：
- en: '[PRE2]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The preceding code draws multiple lines along with the *x* and *y* axes:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码绘制了与*x*和*y*轴相关的多条线：
- en: '![How to do it...](img/image_07_003.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_07_003.jpg)'
- en: D3 line generator
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: D3线生成器
- en: How it works...
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In this recipe, the data we used to draw the lines is defined in a two-dimensional
    array:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们用来绘制线的数据定义在一个二维数组中：
- en: '[PRE3]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The first data series is defined manually and explicitly, whereas the second
    series is generated using a mathematical formula. Both of these cases are quite
    common in data visualization projects. Once the data is defined, in order to map
    data points to their visual representation, the following two scales were created
    for the *x* and *y* coordinates:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 第一组数据是手动和明确定义的，而第二组数据则是通过数学公式生成的。这两种情况在数据可视化项目中都很常见。一旦数据被定义，为了将数据点映射到它们的视觉表示，为*x*和*y*坐标创建了以下两个比例尺：
- en: x = d3.scaleLinear() // <-A .domain([0, 10]) .range([margin, width - margin]),
    y = d3.scaleLinear() // <-B .domain([0, 10]) .range([height - margin, margin]);
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: x = d3.scaleLinear() // <-A .domain([0, 10]) .range([margin, width - margin]),
    y = d3.scaleLinear() // <-B .domain([0, 10]) .range([height - margin, margin]);
- en: 'Note that the domains for these scales were set to be large enough to include
    all data points in both the series, while the ranges were set to represent the
    canvas area without including the margins. The *y* axis range is inverted since
    we want our point of origin at the lower-left corner of the canvas instead of
    the SVG-standard upper-left corner. Once both data and scales are set, all we
    need to do is generate the lines to define our generator using the `d3.line` function:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这些比例尺的域被设置为足够大，以包含两个系列中的所有数据点，而范围被设置为表示画布区域而不包括边距。由于我们希望原点位于画布的左下角而不是SVG标准的左上角，因此*y*轴的范围是反转的。一旦数据和比例尺都设置好了，我们只需要生成线，使用`d3.line`函数定义我们的生成器：
- en: '[PRE4]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `d3.line` function returns a D3 line generator function, which you can
    further customize. In our example, we simply stated for this particular line generator
    the *x* coordinate, which will be calculated using the `x` scale mapping, while
    the *y* coordinate will be mapped by the `y` scale. Using D3 scales, to map coordinates,
    is not only convenient but also a widely accepted best practice (separation of
    concerns). Though, technically, you can implement these functions using any approach
    you prefer. Now the only thing left for you to do is the actual creation of the
    `svg:path` elements as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`d3.line`函数返回一个D3线生成器函数，您可以进一步自定义。在我们的例子中，我们只是为这个特定的线生成器声明了*x*坐标，它将使用`x`比例映射来计算，而*y*坐标将由`y`比例映射。使用D3比例映射坐标不仅方便，而且是一种广泛接受的最佳实践（关注点分离）。尽管技术上，您可以使用您喜欢的任何方法来实现这些函数。现在，您唯一需要做的就是实际创建以下`svg:path`元素：'
- en: '[PRE5]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Path creation process in the preceding code was very straightforward. Two `svg:path`
    elements were created using the data array we defined (on line `E`). Then, the
    `d` attribute for each path element was set using the `line` generator we created
    previously by passing in the data `d` as its input parameter. The following screenshot
    shows what the generated `svg:path` elements look like:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中路径创建过程非常直接。创建了两个`svg:path`元素，使用我们定义的数据数组（在行`E`）。然后，使用我们之前创建的线生成器通过传递数据`d`作为其输入参数来设置每个路径元素的`d`属性。以下截图显示了生成的`svg:path`元素的外观：
- en: '![How it works...](img/image_07_004.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/image_07_004.jpg)'
- en: Generated SVG path elements
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的SVG路径元素
- en: Finally, two axes were created using the same *x* and *y* scales we defined
    earlier. Due to limited space in this book, we have omitted the axes-related code
    in this recipe and in the rest of this chapter since they don't really change
    and also are not the focus of this chapter.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用我们之前定义的相同*x*和*y*比例创建了两个轴。由于本书空间有限，我们在本食谱和本章的其余部分省略了与轴相关的代码，因为它们实际上并没有改变，也不是本章的重点。
- en: See also
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For detailed information on D3 axes support, please refer to [Chapter 5](ch05.html
    "Chapter 5. Playing with Axes"), *Playing with Axes*.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 有关D3轴支持详细信息的说明，请参阅第5章[Chapter 5. 玩转轴](ch05.html "Chapter 5. 玩转轴")，*玩转轴*。
- en: Using line curve
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用线曲线
- en: By default, the D3 line generator uses the *linear curve* mode; however, D3
    supports a number of different curve factories. The curve function determines
    how data points will be connected, for example, by a straight line (*linear*)
    or a curved line (**B-spline**). In this recipe, we will show you how these curve
    modes can be set along with their effects.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，D3线生成器使用*线性曲线*模式；然而，D3支持多种不同的曲线工厂。曲线函数决定了数据点将以何种方式连接，例如，通过直线（*线性*）或曲线（**B样条**）。在本食谱中，我们将向您展示如何设置这些曲线模式及其效果。
- en: Getting ready
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/line-curve.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/line-curve.html)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/line-curve.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/line-curve.html)'
- en: This recipe is built on top of what we did in the previous recipe, so if you
    are not
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱是在前一个食谱的基础上构建的，所以如果您不是
- en: yet familiar with basic line generator functions, please refer to the previous
    recipe first
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还不熟悉基本的线生成器函数，请首先参考前面的食谱
- en: before proceeding.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然后再继续。
- en: How to do it...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Now, let''s take a look at how different line interpolation modes can be used:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何使用不同的线插值模式：
- en: '[PRE6]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preceding code generates the following line chart in your browser with
    configurable interpolation modes:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码生成浏览器中的以下折线图，具有可配置的插值模式：
- en: '![How to do it...](img/image_07_005.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_07_005.jpg)'
- en: Line curve
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 线性曲线
- en: How it works...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Overall, this recipe is similar to the previous one. Two lines are generated
    using predefined dataset. However, in this recipe, you will allow the user to
    select a specific line interpolation mode, which is then set using the `interpolate`
    function on line generator (refer to line `A`) in the following code snippet:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，本食谱与上一个食谱类似。使用预定义的数据集生成两条线。然而，在本食谱中，您将允许用户选择特定的线插值模式，然后使用以下代码片段中的线生成器上的`interpolate`函数（参考行`A`）来设置：
- en: '[PRE7]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following interpolation modes are supported by D3:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: D3支持以下插值模式：
- en: '`d3.curveLinear`: Linear segments, that is, polyline'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d3.curveLinear`: 线性段，即折线'
- en: '`d3.curveLinearClosed`: Closed linear segments, that is, polygon'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d3.curveLinearClosed`: 闭合线性段，即多边形'
- en: '`d3.curveStepBefore`: Alternated between the vertical and horizontal segments,
    as in a step function'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d3.curveStepBefore`: 在垂直和水平段之间交替，就像步函数一样'
- en: '`d3.curveStepAfter`: Alternated between the horizontal and vertical segments,
    as in a step function'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d3.curveStepAfter`: 在水平和垂直段之间交替，就像步函数一样'
- en: '`d3.curveBasis`: It is a B-spline, with control point duplication on the ends'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d3.curveBasis`: 它是一个B样条，两端有控制点重复'
- en: '`d3.curveBasisOpen`: An open B-spline; may not intersect the start or end'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d3.curveBasisOpen`: 开放B样条；可能不会与起点或终点相交'
- en: '`d3.curveBasisClosed`: A closed B-spline, as in a loop'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d3.curveBasisClosed`: 闭合的B样条，就像一个环'
- en: '`d3.curveBundle`: Equivalent to basis, except the tension parameter is used
    to straighten the spline'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d3.curveBundle`: 等同于基函数，但张力参数用于使样条变直'
- en: '`d3.curveCardinal`: A cardinal spline, with control point duplication on the
    ends.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d3.curveCardinal`: 一种基数样条，两端有控制点重复。'
- en: '`d3.curveCardinalOpen`: An open cardinal spline; may not intersect the start
    or end, but will intersect other control points'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d3.curveCardinalOpen`: 开放基数样条；可能不会与起点或终点相交，但会与其他控制点相交'
- en: '`d3.curveCardinalClosed`: A closed cardinal spline, as in a loop'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d3.curveCardinalClosed`: 闭合基数样条，就像一个环'
- en: '`d3.curveMonotoneY`: Cubic interpolation that preserves monotonicity in *y*'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d3.curveMonotoneY`: 保留y的单调性的立方插值'
- en: '`d3.curveCatmullRom`: A cubic catmull-Rom spline.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d3.curveCatmullRom`: 立方catmull-Rom样条。'
- en: 'Additionally, in the `renderDots` function (refer to line `B`), we have also
    created a small circle for each data point to serve as reference points. These
    dots are created using the `svg:circle` elements, as shown on line `C` of the
    following code snippet:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在`renderDots`函数中（参见图线`B`），我们还为每个数据点创建了一个小圆圈作为参考点。这些点使用`svg:circle`元素创建，如下面的代码片段的`C`行所示：
- en: '[PRE8]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: See Also
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For detailed listing and API document for all D3 curve factories, please refer
    to [https://github.com/d3/d3-shape#curves](https://github.com/d3/d3-shape#curves)
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关所有D3曲线工厂的详细列表和API文档，请参阅[https://github.com/d3/d3-shape#curves](https://github.com/d3/d3-shape#curves)
- en: Changing line tension
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改变线条张力
- en: If Cardinal interpolation mode (cardinal, cardinal-open, or cardinal-closed)
    is used, then the line can be further modified using tension settings. In this
    recipe, you will see how tension can be modified and its effect on line interpolation.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用基数插值模式（基数、基数开放或基数闭合），则可以使用张力设置进一步修改线条。在这个菜谱中，您将看到如何修改张力以及它对线条插值的影响。
- en: Getting ready
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/line-tension.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/line-tension.html)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/line-tension.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/line-tension.html)'
- en: How to do it...
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Now, let''s take a look at how line tension can be changed and what effect
    it has on line generation:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何改变线条张力以及它对线条生成的影响：
- en: '[PRE9]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The preceding code generates a cardinal line chart with configurable tension:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码生成一个可配置张力的基数线图：
- en: '![How to do it...](img/image_07_006.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_07_006.jpg)'
- en: Line Tension
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 线条张力
- en: How it works...
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Tension sets the Cardinal spline interpolation tension to a specific number
    in the range of `[0, 1]`. Tension can be set using the `tension` function on line
    generator (refer to line `C`):'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 张力将基数样条插值张力设置为`[0, 1]`范围内的特定数字。可以使用线条生成器的`tension`函数设置张力（参见图线`C`）：
- en: '[PRE10]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Additionally, we also initiated a transition on line `B` to highlight the tension
    effect on line interpolation. The tension in cardinal curve essentially determines
    the length of the tangents. At tension one, it is the same as curve linear while
    at zero it produces uniform Catmull-Rom spline. If the tension is not set explicitly,
    Cardinal interpolation sets tension to `0` by default.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还在图线`B`上启动了一个过渡，以突出张力对线条插值的影响。基数曲线的张力本质上决定了切线的长度。在张力为1时，它与曲线线性相同，而在张力为0时，它产生均匀的Catmull-Rom样条。如果没有明确设置张力，基数插值默认将张力设置为`0`。
- en: Using an area generator
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用区域生成器
- en: Using D3 line generator, we can technically generate an outline of any shape;
    however, even with a different curve support, directly drawing an area using line
    (as in an area chart) is not an easy task. This is why D3 also provides a separate
    shape generator function specifically designed for drawing area.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 D3 线生成器，我们可以技术上生成任何形状的轮廓；然而，即使有不同的曲线支持，直接使用线（如面积图）绘制面积也不是一件容易的事情。这就是为什么 D3
    还提供了一个专门为绘制面积而设计的独立形状生成器函数。
- en: Getting ready
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/area.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/area.html)'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/area.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/area.html)'
- en: How to do it...
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: In this recipe, we will add a filled area to a pseudo line chart, effectively
    turning it into an
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将向伪线图添加填充面积，从而有效地将其转换为
- en: 'area chart:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 面积图：
- en: '[PRE11]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The preceding code generates the following visual output:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码生成以下视觉输出：
- en: '![How to do it...](img/image_07_007.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_07_007.jpg)'
- en: Area generator
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 面积生成器
- en: How it works...
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Similar to the earlier given *Using a line generator* recipe, we have two scales
    defined in this recipe to map data to visual domain on *x* and *y* coordinates
    (refer to line A) as given in the following code snippet:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前给出的 *使用线生成器* 菜谱类似，在这个菜谱中我们定义了两个比例，用于将数据映射到 *x* 和 *y* 坐标上的视觉域（参见图 A），如下代码片段所示：
- en: '[PRE12]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'On line `B`, data is generated by a mathematical formula. Area generator is
    then created using the `d3.area` function (refer to line `C`):'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在线 `B` 上，数据通过数学公式生成。然后使用 `d3.area` 函数创建面积生成器（参见图 `C`）：
- en: '[PRE13]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As you can see, D3 area generator is-similar to the line generator-designed
    to work in a 2D Cartesian coordinate system. The `x` function defines an accessor
    function for the *x* coordinate (refer to line `D`), which simply maps data to
    the visual coordinate using the `x` scale we defined earlier. For the *y* coordinate,
    we provided the area generator with two different accessors: one for the lower
    bound (`y0`) and the other for the higher bound (`y1`) coordinates. This is the
    crucial difference between area and line generator. D3 area generator supports
    higher and lower bound on both *x* and *y* axes (`x0`, `x1`, `y0`, `y1`) and supports
    the shorthand accessors (`x` and `y`) if the higher and lower bounds are the same.
    Once the area generator is defined, the method of creating an area is almost identical
    to the line generator:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，D3 面积生成器与线生成器类似，旨在在二维笛卡尔坐标系中工作。`x` 函数定义了一个访问器函数，用于 *x* 坐标（参见图 `D`），它简单地使用我们之前定义的
    `x` 缩放映射数据到视觉坐标。对于 *y* 坐标，我们向面积生成器提供了两个不同的访问器：一个用于下限（`y0`）和一个用于上限（`y1`）坐标。这是面积生成器和线生成器之间的关键区别。D3
    面积生成器支持 *x* 和 *y* 轴上的上下限（`x0`、`x1`、`y0`、`y1`），如果上下限相同，则支持简写访问器（`x` 和 `y`）。一旦定义了面积生成器，创建面积的方法几乎与线生成器相同：
- en: '[PRE14]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Area is also implemented using the `svg:path` element (refer to line `G`). D3
    area generator is used to generate the `d` formula for the `svg:path` element
    on line `H` with data `d` as its input parameter.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 面积也是使用 `svg:path` 元素实现的（参见图 `G`）。D3 面积生成器用于生成 `svg:path` 元素上的 `d` 公式（参见图 `H`），其中数据
    `d` 作为其输入参数。
- en: Using area curve
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用面积曲线
- en: Similar to the D3 line generator, area generator also supports identical interpolation
    mode, and hence, it can be used in combination with the line generator in every
    mode.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 与 D3 线生成器类似，面积生成器也支持相同的插值模式，因此它可以与线生成器在每种模式下结合使用。
- en: Getting ready
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/area-curve.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/area-curve.html)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/area-curve.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/area-curve.html)'
- en: How to do it...
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we will show how interpolation mode can be configured on an
    area generator. This way, the matching interpolated area can then be created with
    its corresponding line:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将展示如何配置面积生成器的插值模式。这样，就可以创建与其对应的线匹配的插值面积：
- en: '[PRE15]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The preceding code generates the following pseudo area chart with configurable
    interpolation mode:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码生成了以下可配置插值模式的伪面积图：
- en: '![How to do it...](img/image_07_008.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_07_008.jpg)'
- en: Area curve
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 面积曲线
- en: How it works...
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'This recipe is similar to the previous one, except that in this recipe the
    interpolation mode is passed in based on the user''s selection:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱与上一个类似，不同之处在于在本食谱中，根据用户的选取传入插值模式：
- en: '[PRE16]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As you can see, the curve mode was configured on both lines along with the area
    generator through the `curve` function (refer to lines `A` and `B`). Since D3
    line and area generator supports the same set of curve factories, they can always
    be counted on to generate matching line and area as seen in this recipe.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，曲线模式已在两条线上通过 `curve` 函数配置，同时与面积生成器一起（参见图 A 和 B）。由于 D3 线和面积生成器支持相同的曲线工厂集合，因此它们可以始终生成与本食谱中看到的匹配的线和面积。
- en: There's more...
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: D3 area generator also supports the same tension configuration when using Cardinal
    mode; however, since it is identical to the line generator's tension support,
    and due to limited space in this book, we will not cover area tension here.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: D3 面积生成器在采用 Cardinal 模式时也支持相同的张力配置；然而，由于它与线生成器的张力支持相同，并且由于本书篇幅有限，我们在此不涵盖面积张力。
- en: See also
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Please refer to [https://github.com/d3/d3/blob/master/API.md#areas](https://github.com/d3/d3/blob/master/API.md#areas)
    for more information on area generator functions
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅[https://github.com/d3/d3/blob/master/API.md#areas](https://github.com/d3/d3/blob/master/API.md#areas)以获取有关面积生成器函数的更多信息
- en: Using an arc generator
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用弧生成器
- en: Among the most common shape generators-besides the line and area generator-D3
    also provides the *arc generator*. At this point, you might be wondering, *Didn't
    SVG standard already include circle element? Isn't that enough?*
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在最常见的形状生成器中——除了线和面积生成器之外——D3 还提供了 *弧生成器*。此时，你可能想知道，*SVG 标准已经包含了圆形元素，这还不够吗？*
- en: The simple answer to this is *no*. The D3 arc generator is a lot more versatile
    than the simple `svg:circle` element. The D3 arc generator is capable of creating
    not only circles but also annulus (donut), circular sector, and annulus sector,
    all of which we will learn in this recipe. More importantly, an arc generator
    is designed to generate, as its name suggests, an arc (in others words, not a
    full circle or even a sector but rather arcs of arbitrary angle).
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 对此的简单答案是 *不*。D3 弧生成器比简单的 `svg:circle` 元素要灵活得多。D3 弧生成器不仅能创建圆，还能创建环形（甜甜圈）、圆形扇区和环形扇区，所有这些我们将在本食谱中学习。更重要的是，弧生成器旨在生成弧（换句话说，不是完整的圆或扇区，而是任意角度的弧）。
- en: Getting ready
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网页浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/arc.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/arc.html)'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/arc.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/arc.html)'
- en: How to do it...
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In this recipe, we will use arc generator to generate multi-slice circle, annulus
    (donut), circular sectors, and annulus sectors as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将使用弧生成器生成多切片圆、环形（甜甜圈）、圆形扇区和环形扇区，如下所示：
- en: '[PRE17]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The preceding code produces the following circle, which you can change into
    an arc, a sector, or an arc sector by clicking on the buttons, for example, **Annulus(Donut)**
    generates the second shape:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码生成了以下圆，您可以通过点击按钮将其更改为弧、扇区或弧扇区，例如，**环形（甜甜圈）**生成第二个形状：
- en: '![How to do it...](img/image_07_009.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_07_009.jpg)'
- en: Arc generator
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 弧生成器
- en: How it works...
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The most important part of understanding the D3 arc generator is its data structure.
    D3 arc generator has very specific requirements when it comes to its data, as
    shown on line `B`:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 理解 D3 弧生成器最重要的部分是其数据结构。D3 弧生成器对其数据有非常具体的要求，如线 B 所示：
- en: '[PRE18]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Each row of the arc data has to contain two mandatory fields: `startAngle`
    and `endAngle`. The angles have to be in the range `[0, 2 * Math.PI]` (refer to
    line `A`). D3 arc generator will use these angles to generate corresponding slices,
    as shown earlier in this recipe.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 弧数据集中的每一行都必须包含两个必填字段：`startAngle` 和 `endAngle`。角度必须在 `[0, 2 * Math.PI]` 范围内（参见图
    A）。D3 弧生成器将使用这些角度生成相应的切片，如本食谱中前面所示。
- en: Note
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Along with the start and end angles, arc dataset can contain any number of additional
    fields, which can then be accessed in D3 functions to drive other visual representation.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 除了起始角和结束角，弧数据集还可以包含任意数量的附加字段，然后可以在 D3 函数中访问这些字段以驱动其他视觉表示。
- en: 'If you think that calculating these angles based on the data you have will
    be a big hassle, you are absolutely correct. This is why D3 provides specific
    layout manager to help you calculate these angles, and we will cover this in the
    next chapter. For now, let''s focus on understanding the basic mechanism behind
    the scenes so that when it is time to introduce the layout manager or if you ever
    need to set the angles manually, you will be well equipped to do so. D3 arc generator
    is created using the following `d3.arc` function:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你认为根据你拥有的数据计算这些角度将会非常麻烦，你完全正确。这就是为什么D3提供了一个特定的布局管理器来帮助你计算这些角度，我们将在下一章中介绍这一点。现在，让我们专注于理解幕后基本机制，这样当需要介绍布局管理器或者你任何时候需要手动设置角度时，你将能够充分准备。
- en: '[PRE19]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `d3.arc` function optionally has the `outerRadius` and `innerRadius` settings.
    When `innerRadius` is set, the arc generator will produce an image of annulus
    (donut) instead of a circle. Finally, the D3 arc is also implemented using the
    `svg:path` element, and thus similar to the line and area generator, the `d3.arc`
    generator function can be invoked (refer to line `D`) to generate the `d` formula
    for the `svg:path` element:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`d3.arc`函数可选地具有`outerRadius`和`innerRadius`设置。当设置`innerRadius`时，弧生成器将生成一个环面（甜甜圈）的图像而不是一个圆。最后，D3弧也是使用`svg:path`元素实现的，因此与线和面积生成器类似，`d3.arc`生成器函数可以被调用（参见图`D`）以生成`svg:path`元素的`d`公式：'
- en: '[PRE20]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: One additional element worth mentioning here is the `svg:g` element. This element
    does not define any shape itself but serves rather as a container element used
    to group other elements, in this case, the `path.arc` elements. Transformation
    applied to the `g` element is applied to all the child elements while its attributes
    are also inherited by its child elements.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 值得在这里提到的一个额外元素是`svg:g`元素。这个元素本身不定义任何形状，而是一个容器元素，用于组合其他元素，在这种情况下，是`path.arc`元素。应用于`g`元素的变化会应用于所有子元素，同时其属性也会被其子元素继承。
- en: See also
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Please refer to [https://github.com/d3/d3/blob/master/API.md#arcs](https://github.com/d3/d3/blob/master/API.md#arcs)
    for more information on arc generator function
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅[https://github.com/d3/d3/blob/master/API.md#arcs](https://github.com/d3/d3/blob/master/API.md#arcs)以获取有关弧生成函数的更多信息
- en: Implementing arc transition
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现弧过渡
- en: One area where arc differs significantly from other shapes, such as line and
    area, is its transition. For most of the shapes that we covered so far, including
    simple SVG built-in shapes, you can rely on D3 transition and interpolation to
    handle their animation. However, this is not the case when dealing with arc. We
    will explore the arc transition technique in this recipe.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 弧与其他形状（如线和面积）显著不同的一个领域是其过渡。到目前为止，我们涵盖的大多数形状，包括简单的SVG内置形状，你可以依赖D3过渡和插值来处理它们的动画。然而，当处理弧时并非如此。我们将在这个菜谱中探索弧过渡技术。
- en: Getting ready
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/arc-transition.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/arc-transition.html)'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/arc-transition.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter7/arc-transition.html)'
- en: How to do it...
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we will animate a multi-slice annulus transitioning with each
    slice starting from angle `0` to its final desired angle and eventually reaching
    a full annulus:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将动画一个多切片环，每个切片从角度`0`开始过渡到其最终所需的角度，最终形成一个完整的环。
- en: '[PRE21]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The preceding code generates an arc that starts rotating and eventually becomes
    a complete annulus as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码生成一个开始旋转并最终成为一个完整环的弧：
- en: '![How to do it...](img/image_07_010.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_07_010.jpg)'
- en: Arc transition with tweening
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 使用缓动函数的弧过渡
- en: How it works...
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'When confronted with the requirement of such transition, your first thought
    might be using the vanilla D3 transition while relying on built-in interpolations
    to generate the animation. Here is the code snippet that will do just that:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 当面对这种过渡需求时，你首先可能想到的是使用纯D3过渡，同时依赖内置插值来生成动画。以下代码片段将完成这项工作：
- en: '[PRE22]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'As shown with highlighted lines in the preceding code snippet, with this approach,
    we initially created slice path with both `startAngle` and `endAngle` set to zero.
    Then, through transition, we interpolated the path `d` attribute to its final
    angle using the arc generator function `arc(d)`. This approach seems to make sense,
    however, what it generates is the transition shown in the following:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 如前代码片段中突出显示的行所示，我们最初通过设置 `startAngle` 和 `endAngle` 都为零来创建切片路径。然后，通过过渡，我们使用弧生成函数
    `arc(d)` 将路径 `d` 属性插值到其最终角度。这种方法看起来似乎合理，然而，它生成的过渡效果如下所示：
- en: '![How it works...](img/5530_07_11.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/5530_07_11.jpg)'
- en: Arc transition without tweening
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 无缓动动画的弧过渡
- en: 'This is obviously not the animation we want. The reason for this strange transition
    is that by directly creating a transition on the `svg:path` attribute `d`, we
    are instructing D3 to interpolate this string:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这显然不是我们想要的动画。这种奇怪过渡的原因是，通过直接在 `svg:path` 属性 `d` 上创建过渡，我们指示 D3 对这个字符串进行插值：
- en: '[PRE23]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then, the preceding string will interpolate to this string linearly:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，前面的字符串将线性插值到这个字符串：
- en: '[PRE24]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Hence, it leads to this particular transition effect.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，导致了这种特定的过渡效果。
- en: Tip
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Though this transition effect is not what we desire in this example, this is
    still a good showcase of how flexible and powerful built-in D3 transition is.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种过渡效果不是我们在这个例子中所期望的，但这仍然很好地展示了内置 D3 过渡的灵活性和强大功能。
- en: 'In order to achieve the transition effect we want, we will need to leverage
    the D3 attribute tweening (for detailed description on tweening, refer to the
    *Using tweening* recipe of [Chapter 6](ch06.html "Chapter 6. Transition with Style"),
    *Transition with Style*):'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现我们想要的过渡效果，我们需要利用 D3 属性缓动（有关缓动的详细描述，请参阅[第 6 章](ch06.html "第 6 章。以风格进行过渡")中的*使用缓动*配方，*以风格进行过渡*）：
- en: '[PRE25]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Here, instead of transitioning the `svg:path` attribute `d` directly, we created
    a tweening function on line `A`. As you can recall, D3 `attrTween` expects a factory
    function for a tween function. In this case, we started our tweening from angle
    zero (refer to line `B`). Then, we created a compound object interpolator on line
    `C`, which will interpolate both start and end angles for each slice. Finally,
    on line `D`, the arc generator is used to generate a proper `svg:path` formula
    using the already interpolated angles. This is how a smooth transition of properly
    angled arcs can be created through custom attribute tweening.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们不是直接过渡 `svg:path` 属性 `d`，而是在行 `A` 上创建了一个缓动函数。如您所回忆的，D3 `attrTween` 期望一个用于缓动函数的工厂函数。在这种情况下，我们从角度零开始缓动（参见图
    `B`）。然后，我们在行 `C` 上创建了一个复合对象插值器，它将为每个切片插值起始和结束角度。最后，在行 `D` 上，使用弧生成器根据已经插值的角生成适当的
    `svg:path` 公式。这就是如何通过自定义属性缓动创建平滑的、正确角度的弧过渡。
- en: There's more...
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: D3 also provides support for other shape generators, for example, symbol, chord,
    and diagonal. However, due to their simplicity and the limited scope of this book,
    we will not cover them individually here, although we will cover them as parts
    of other more complex visual constructs in the following chapters. More importantly,
    with well-grounded understanding of these basic shape generators covered in this
    chapter, you should be able to pick up other D3 shape generators without much
    trouble.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: D3 还提供了对其他形状生成器的支持，例如符号、和弦和斜线。然而，由于它们的简单性和本书范围的限制，我们在这里不会单独介绍它们，尽管我们将在后续章节中作为其他更复杂视觉结构的部分来介绍它们。更重要的是，通过本章涵盖的这些基本形状生成器的扎实理解，你应该能够轻松地掌握其他
    D3 形状生成器。
- en: See also
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For more information on transition and tweening, refer to the *Using tweening
    recipe* in [Chapter 6](ch06.html "Chapter 6. Transition with Style"), *Transition
    with Style*
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于过渡和缓动动画的更多信息，请参阅[第 6 章](ch06.html "第 6 章。以风格进行过渡")中的*使用缓动动画配方*，*以风格进行过渡*。
