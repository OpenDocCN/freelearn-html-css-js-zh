- en: Chapter 3. Building Great User Interfaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Inserting templates with Spacebars
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inserting raw HTML using triple braces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating dynamic lists
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a smooth interface with Bootstrap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating customized global helpers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using reactivity with HTML attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using dynamic templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating DOM elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like everything else in Meteor, UI development is designed to be simple, elegant,
    and powerful. With just a few imperative commands, you can create sophisticated
    and dynamic user interfaces, significantly speeding up your prototyping/wireframing
    efforts.
  prefs: []
  type: TYPE_NORMAL
- en: The recipes in this chapter will walk you through the most common UI- and template-building
    techniques, which will form the foundation for your Meteor apps moving forward.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting templates with Spacebars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Spacebars** is Meteor''s templating language. All **Document** **Object Model**
    (**DOM**) elements in Meteor are created programmatically using Meteor''s default
    templating engine, **Blaze**. Elements can therefore be created using pure JavaScript.
    Using JavaScript to create HTML elements, however, isn''t exactly quick and easy.'
  prefs: []
  type: TYPE_NORMAL
- en: Inspired by the popular HTML templating language **Handlebars**, Spacebars makes
    it incredibly easy to structure and declare your HTML elements using templates.
    And, it gives you access to all the reactive and dynamic features of Meteor. This
    recipe will show you how to create templates using the Spacebars syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need Meteor installed and have a project created. We recommend that
    you have a simple project, similar to the one found in the *Setting up your project
    file structure* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Optimizing
    Your Workflow"), *Optimizing Your Workflow*, but any project will do. You will
    need to locate your `<body>` tag, which is usually found inside your `main.html`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To make this recipe just a little bit more useful, we are going to create two
    templates and nest one inside of the other, using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, create a file named `templates.html` and add it to your `client` folder:![How
    to do it...](img/image00345.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `templates.html` in an editor, add the following code, and save your changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, open your `main.html` file (or the `.html` file that contains your `<body>`
    tag) and edit your `body` tag by adding the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the changes, start Meteor if it isn't already running, and navigate to
    your Meteor-hosted page in a browser (usually `http://localhost:3000`):![How to
    do it...](img/image00346.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We created two templates, with the first one being a very simple `svg` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We gave the template a `name` attribute value as `"one"` and added the well-formed
    HTML `<circle>` element with position and appearance attributes. We also created
    a parent template, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This template also has a name (`"firstTemplate"`) and contains a `<div>` element,
    containing the title of our template. We declared an `<svg>` element, and we inserted
    our template named `one` between the `<svg>` and `</svg>` tags using the `{{>}}`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in `main.html`, we inserted the `firstTemplate` template between the
    main `<body>` and `</body>` tags, again using the `{{>}}` command, which is also
    known as **template inclusion**.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, the content of our templates consists primarily of HTML tags.
    This is the fundamental building block of our UI, and it''s how we''ve been creating
    templates from the very beginning. Anything contained inside double braces (`{{…}}`)
    is a command meant for Blaze, Meteor''s templating engine. In this case, we told
    Blaze to:'
  prefs: []
  type: TYPE_NORMAL
- en: Insert the `firstTemplate` template into our `<body>` element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert the `one` template into our `<svg>` element, inside `firstTemplate`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can read all about templates in the official Meteor documentation, found
    at [http://docs.meteor.com/#/full/templates](http://docs.meteor.com/#/full/templates).
  prefs: []
  type: TYPE_NORMAL
- en: Inserting raw HTML using triple braces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Occasionally, you will want to insert raw HTML into your Meteor page. This is
    typically done when you have HTML generated by another process or library. This
    recipe will show you how to render your raw HTML inside a Meteor template.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need Meteor installed and have a project created with at least one
    template in it. We recommend that you use the files created in the *Inserting
    templates with Spacebars* recipe found in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't have a `templates.js` file in your `client` folder already, you
    should create one to keep your template `helpers` and `events` logic separate
    from other JavaScript you may be running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Identify the name of your root template and open the file containing your template
    definition. In our case, the root template is named `firstTemplate`, which can
    be found in our `templates.html` file, which is in our `[project root]/client`
    folder. Proceed with the following steps to insert raw HTML using triple braces:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Insert the following line, just before the `</template>` tag, and save your
    changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, open your `templates.js` file and add the following helper function:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes, start Meteor if it isn't already running, and navigate to
    your Meteor-hosted page in a browser (usually `http://localhost:3000`). You should
    see the rendered HTML at the bottom of your screen, as shown in the following
    screenshot:![How to do it…](img/image00347.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created and then called our `Template.firstTemplate.rawInsert` helper function
    by adding the `{{{rawInsert}}}` tag at the bottom of our template and declaring
    the `rawInsert` helper in our `templates.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: The triple-braced tag informs Blaze that the object returned from the helper
    will be raw HTML and needs to be rendered as such. Accordingly, Blaze expects
    a string and will attempt to render it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see how Blaze would normally treat raw HTML, change the triple-braced tag
    to a double-braced tag `( {{rawInsert}})` save your file, and view the result
    in your browser, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00348.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating dynamic graphs with SVG and Ajax* recipe in [Chapter 7](part0065.xhtml#aid-1TVKI1
    "Chapter 7. Using Client Methods"), *Using Client Methods*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating dynamic lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Meteor Spacebars syntax supports the rapid development of lists, tables,
    and other displays of data through the use of template block tags. Used within
    templates, block tags can quickly add dynamic lists and even customize the look
    and feel of each element, based on its unique attributes. This recipe will show
    you how to use the `#each` block tag to display multiple elements of a collection
    inside a Blaze template.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the code from the *Inserting templates with Spacebars* recipe, found
    in this chapter, as our baseline project.
  prefs: []
  type: TYPE_NORMAL
- en: If you haven't already done so, create and save a new file in your `[project
    root]/client` folder called `templates.js`.
  prefs: []
  type: TYPE_NORMAL
- en: Create and save a new file in your `[project root]/both` folder called `collections.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will want to make one modification to the HTML in the `templates.html` file.
    We will change the height of our `<svg>` element from `200` to `800`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we want to add the `random` package to our project to help us generate
    some random colors and positions. In a terminal window, navigate to your project
    root and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a dynamic list, proceed with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s declare a `shapes` collection. Open `collections.js`, add the
    following code, and save your changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s add shapes to the page dynamically. Open your `templates.html`
    file, make the following changes to the `one` template, and save your changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will now create the template helper, which returns our dynamic collection.
    Open `templates.js`, add the following helper function, and then close and save
    your changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now dynamically add shapes to the `shape` collection, and they will
    be rendered on our page. Open the JavaScript console in your browser and enter
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see a green circle with a dark border appear on the screen, similar
    to the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00349.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Let's add more circles to prove that our template is rendering all the shapes
    in the `Shapes` collection.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In `templates.js`, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now want to display the total number of shapes, so we need to add a `shapeCount`
    function to the `Template.firstTemplate.helpers` method call:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s add a `resetShapes` method for good measure. Open/create the `server.js`
    file, found in your `[project root]/server` folder, and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save all your changes, start Meteor if it isn't already running, and navigate
    to your Meteor-hosted page in a browser (usually `http://localhost:3000`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, as you click in your browser, new circles will appear and the upper-left
    part of the screen will display your `shapes` collection count:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00350.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Feel free to add as many shapes as you would like or reset back to zero by double-clicking
    anywhere on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created the `Template.one.svgShapes` helper in `templates.js`, which returns
    a cursor to the `shapes` collection. This sets the data context for our template
    and is accessible using the `{{#each svgShapes}}` block tag, which we added to
    our `one` template in `templates.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Because templates and template helpers are reactive computations, they react
    when the collection is updated. This reaction causes Blaze to re-render the page,
    using the dynamic template found within the `#each` block tag.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Other block helpers exist and they are just as easy to use. Refer to the Spacebars
    documentation on GitHub for a more detailed explanation, which is available at
    [https://github.com/meteor/meteor/blob/devel/packages/spacebars/README.md](https://github.com/meteor/meteor/blob/devel/packages/spacebars/README.md).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Implementing a simple collection* recipe in [Chapter 4](part0046.xhtml#aid-1BRPS1
    "Chapter 4. Creating Models"), *Creating Models*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating dynamic graphs with SVG and Ajax* recipe in [Chapter 7](part0065.xhtml#aid-1TVKI1
    "Chapter 7. Using Client Methods"), *Using Client Methods*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a smooth interface with Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a web developer, one of the biggest drains on your time comes from styling
    your pages. Bootstrap offers an elegant, simple design with enough ready-to-use
    component styles to get you up and running quickly, without having to get bogged
    down writing CSS. This recipe will walk you through a few of the Bootstrap component
    styles and give you a sampling of how easy they are to use.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using the *Creating dynamic lists* recipe found in this chapter as
    a baseline for our code.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also need to add the official Bootstrap package to our Meteor project
    using Meteor''s package repository. Open a terminal window, navigate to the root
    folder of your project, and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are other packages that are complementary to the official Bootstrap package.
    You can find a complete list of these at [https://atmospherejs.com/?q=bootstrap](https://atmospherejs.com/?q=bootstrap).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will make our title and collection count presentable using the `btn` and
    `navbar` styles built in to Bootstrap. Proceed with the following steps to build
    a smooth interface with Bootstrap:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s modify our title, adding a sub `<div>` tag and styling it like
    a Bootstrap button. Open `templates.html`, make the following code changes, and
    save your file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After this change, your title should look much more presentable, as shown in
    the following screenshot:![How to do it…](img/image00351.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will now add the `navbar` style to the entire title, giving it a distinct,
    intentional look. Open `templates.html` again and replace the title `<div>` tag
    with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save these changes and your page should be updated. The **Shapes Collection
    Count** section should now appear in a distinct `navbar` style, similar to the
    following screenshot:![How to do it…](img/image00352.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Lastly, let''s turn our count button into an actual button. Open `templates.js`
    and change the `dblclick` event to a specific `click` event. This event is placed
    at the bottom of the `Template.firstTemplate.events` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We have now disabled double-click as the method of resetting our `shapes` collection
    and transferred it to the **Shapes Collection Count** total. By clicking on the
    orange button, the collection will reset to zero:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00353.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Changing the look and feel of a page using Bootstrap is simply a matter of adding
    the correct CSS `class` declarations and structuring our HTML appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: To style the `shapes` collection count, we added the `btn` and `btn-warning`
    value to the `class` attribute. This allows the Bootstrap CSS to appropriately
    style the `<div>` tag, making it appear as an orange button.
  prefs: []
  type: TYPE_NORMAL
- en: To style our title, we had to first create the scaffolding for the `navbar`
    tag. We did this by essentially wrapping our `<div>` tag with a `<nav>` tag. We
    then appropriately structured the containing tags by adding `nav`, `navbar`, `navbar-header`,
    and `navbar-left` to the `class` attributes. The other `class` declarations (`navbar-default`,
    `navbar-brand`, and `navbar-btn`) are strictly style declarations, changing the
    color/shape but not affecting the overall structure or layout.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bootstrap is very robust and comes with excellent documentation. You can learn
    more about Bootstrap at [http://getbootstrap.com/](http://getbootstrap.com/).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding Meteor packages* and *Discovering new packages with Atmosphere*
    recipes in [Chapter 2](part0028.xhtml#aid-QMFO1 "Chapter 2. Customizing with Packages"),
    *Customizing with Packages*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating customized global helpers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you begin to really dig into templates, you'll soon discover how truly great
    template helpers are. You can access data inline and drastically reduce the amount
    of code you need to write.
  prefs: []
  type: TYPE_NORMAL
- en: You will, however, eventually run into a situation where you find yourself repeating
    the same logic in multiple, in-template helpers. Wouldn't it be great if there
    was a way to create global helpers accessible from any template? Well, Meteor
    has a solution for this too! This recipe will show you how to create global template
    helpers using the `Template.registerHelper` function.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the codebase from the *Building a smooth interface with Bootstrap*
    recipe, found in this chapter. Please follow that recipe first or download the
    corresponding codebase.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''re going to make a global random color generator and add random colors
    to all the objects on the screen by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `templates.html`, found in your `[project root]/client` folder, and make
    the following changes to the color attributes of the `one` template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will also use the `randColor` helper in our `<div>` title to give it a bit
    of (random) color. Inside the `firstTemplate` template, look for and modify the
    `<div>` title as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and start your Meteor app if it isn't already started. As
    you view your Meteor page in your browser, you will notice that the circles have
    all turned black. This is because although we are referencing the global helper,
    we haven't actually created it yet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So, let''s take care of that. Open `templates.js`, found in your `[project
    root]/client` folder, and add the following function at the bottom:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once you save the changes, your page will refresh and the circles will now have
    a random color, as will the title bar of your app. To prove that it is indeed
    using the global `randColor` helper, open another browser window, navigate to
    your page (usually `http://localhost:3000`), and view the results side by side.
    As you click on the page to add circles or refresh the page, the colors will change
    at random and will be different from one browser window to the next, as shown
    in the following screenshot:![How to do it…](img/image00354.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Template.registerHelper` function declares a helper that can be seen in
    context with any template. Think of it as a way to declare global functions, accessible
    within the Spacebars syntax.
  prefs: []
  type: TYPE_NORMAL
- en: The first argument of `Template.registerHelper` is a string value, which contains
    the name of our helper (the name to be used to reference it inline, inside our
    templates). When deciding on a name for a global helper, keep in mind that it
    is indeed global. It should therefore be unique, to prevent conflicts, or the
    value could be overridden by a template-specific helper. Our example is very simple,
    so we can get away with `randColor`; however, as you build more sophisticated
    templates, it's a good idea to give your helpers more distinct names. The value
    returned is obviously a randomly selected color, using the same technique that
    we used in the original `firstTemplate` click event handler.
  prefs: []
  type: TYPE_NORMAL
- en: We then used the global helper in two different templates. First, we replaced
    `{{color}}` and `{{border}}` in the circle's `svg` declaration with `{{randColor}}`,
    causing our circles to appear with a random color every time. Finally, we added
    a `style="color:{{randColor}}"` attribute to our `<div>` title, which randomly
    assigns a text color upon page refresh.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are obviously some very advanced techniques you can accomplish with global
    helpers, using other template-related methods such as `Template.instance()` and
    `Template.currentData`. All of these can't be covered in this recipe, but we encourage
    you to explore the Meteor documentation to familiarize yourself with what global
    helpers can do.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a good overview of the available template utilities, consult the Meteor
    documentation at [http://docs.meteor.com/#/full/templates_api](http://docs.meteor.com/#/full/templates_api).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Inserting templates with Spacebars* and *Using reactivity with HTML attributes*
    recipes in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding and using templates in Meteor is a great way to speed up your workflow.
    Using Meteor's built-in content block helpers can further streamline your workflow
    by allowing nested and deferred template calls. In essence, you can combine and
    nest templates to create your own "components". This recipe will show you how
    to build a basic Spacebars custom block helper using `Template.contentBlock`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the codebase from the *Building a smooth interface with Bootstrap*
    recipe found in this chapter. Please follow that recipe first, or download the
    corresponding codebase.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Proceed with the following steps to create custom components:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to make the template-specific `shapeCount` helper global so we can
    use it inside our component. In `templates.js`, delete the `shapeCount` function
    found in the `Template.firstTemplate.helpers()` method call, and add the following
    function to the bottom of the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we will create our component. We will first create a `navbutton` template,
    which will use the newly created `shapeCount` helper. Create a new template file,
    named `navbar.html`, in your `[project_root]/client` folder. Open this file in
    a text editor and add the following template code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To create a custom `navbar` block tag, add the `navbar` template in the same
    file, complete with a `Template.contentBlock` reference, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our component is now complete! Let''s use it in our code. Open `templates.html`
    and completely remove the `<nav>` element block, including the code inside the
    `firstTemplate` template. The only element left after this change will be the
    `<svg>` element. Just above the `<svg>` element, we are going to call our `navbar`
    template using the `{{#[template name]}}` block tag, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save all your changes, start your Meteor instance if it isn't already running,
    and view the results in your browser. You will notice that nothing has changed.
    We have the same functionality as before; only now, we have created a custom Spacebars
    component (formally, a custom block helper), and we could add more components
    to the `navbar` tag as needed or enter explicit HTML, for example, replacing `{{>
    navbutton}}` with `<div>{{shapeCount}}</div>` will display the **Shapes collection
    count** without the use of the `navbutton` template, similar to the following
    screenshot (not very pretty, but you get the point):![How to do it…](img/image00355.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you inspect the element in your browser, you will notice that manually entered
    `<div>…</div>` has been inserted in the placeholder block, similar to the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The key to building block helpers resides in the `Template.contentBlock` function.
    We created a new `navbar` template and used `{{> Template.contentBlock}}` inside
    that template to specify a placeholder. This placeholder (called a **content**
    **block**) can be specified later, rather than having to be specified explicitly
    inside the `navbar` template. This simple addition of a content block turns our
    `navbar` template into a *component*.
  prefs: []
  type: TYPE_NORMAL
- en: Once we created our block helper, along with the template meant to go inside
    the block helper, we added a `Spacebars` block tag with `{{#navbar}}` and the
    ending `{{/navbar}}` calls. Inside this block, we called our new `navbutton` template
    using `{{> navbutton}}`, which is inserted in the `{{> Template.contentBlock}}`
    placeholder. At runtime, all these template functions get executed in order, and
    Blaze renders the actual HTML DOM elements.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Custom block helpers can also utilize the `#if`, `#else`, and `#unless` logic
    through the use of `UI.elseBlock`. Using these commands, you can create reusable,
    dynamic block helpers and templates, further streamlining your development process.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a thorough walkthrough of all the options available, see the GitHub documentation
    on Spacebars, found at [https://github.com/meteor/meteor/blob/devel/packages/spacebars/README.md](https://github.com/meteor/meteor/blob/devel/packages/spacebars/README.md).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Inserting templates with Spacebars* and *Creating customized global helpers*
    recipes in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using reactivity with HTML attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the hidden gems in Meteor is the extremely granular control you have
    over how HTML is rendered. Blaze was designed in such a way that you can modify,
    add, or remove HTML element attributes dynamically without affecting anything
    else in the DOM! This recipe will walk you through the use of dynamic, reactive
    data inside element attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the codebase from the *Creating custom components* recipe, the previous
    recipe in this chapter. Please follow that recipe first or download the corresponding
    codebase.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Proceed with the following steps to use reactivity with HTML attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We first need to create a new `navcolor` template. Open `navbar.html` in your
    `[project root]/client` folder and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now need to add our new template to our `navbar` content block so that we
    can input a new background color and turn it on and off. Open `templates.html`
    (also in the `client` folder) and modify the `firstTemplate` template, adding
    a template call just below the `{{> navbutton}}` call, similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On the very next line, add a `style` attribute to the `<svg>` element so that
    we can change the background color, like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the preceding code, we have set up references to two helper functions: `bgColor`
    and `useBG`. We will now create these global template helpers. Open `templates.js`
    and append the following two functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we save these changes and open the web console in your browser, we can now
    programmatically change and toggle the background color. In the web console, execute
    the following two lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'These three things should have changed on your screen:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The background should now be light grey in color
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The checkbox to the top-right of your `navbar` tag should be checked
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The word **lightgrey** should now appear in the top-right text box
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Your screen should now look similar to the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00356.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'All that''s left is to hook up events to the checkbox''s and textbox''s `<input>`
    elements. Create a new file named `navbar.js` in your `[project_root]/client`
    folder and add the following `events` handler declarations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and your elements will now affect the background. Checking/unchecking
    the checkbox will toggle the background color, and changing the value in the textbox
    will dynamically change the displayed background.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We want to observe the effect this has on the DOM. Open the `developer` panel
    in your browser and locate the `<svg>` element. As you toggle the background on
    and off using the checkbox, observe the attribute list inside the top `<svg>`
    tag. You'll notice that the `style` attribute appears and disappears, depending
    on the state of the checkbox, similar to the following screenshot:![How to do
    it…](img/image00357.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see, the attribute doesn't just become empty. It is removed altogether.
    You will also notice that when this happens, neither the screen nor the elements
    view are refreshing. That's because the DOM is not being rebuilt. The attribute
    is being added and removed, according to the state of `{{bgColor}}`. Similarly,
    when you modify the value in the textbox, nothing else is affected (no screen
    refreshes, or lost states).
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the introduction of the Blaze templating engine, Meteor stopped manipulating
    strings and started interacting with DOM trees / DOM elements directly. This change
    simplifies the development process in comparison to other templating libraries
    because DOM elements don't have to be re-rendered every time there is a change
    to the HTML.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of the `style` attribute, the only argument inside the attribute
    is a reference to the `bgColor` helper function. If the value from a helper function
    or data context is `null`/`undefined`, and if that value is the only value in
    an attribute, Blaze automatically removes the attribute, rather than rendering
    it with no value in it.
  prefs: []
  type: TYPE_NORMAL
- en: So, in this case, when the `{{bgColor}}` helper function returned `null` (when
    `Session.useBG` is `false` or `undefined`), Blaze was removing the `style` attribute
    from the `<svg>` element.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Inserting templates with Spacebars* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using the Session object* recipe in [Chapter 4](part0046.xhtml#aid-1BRPS1
    "Chapter 4. Creating Models"), *Creating Models*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using dynamic templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Meteor has yet another templating trick up its sleeve! In addition to custom
    code blocks, reactive data contexts, and all the other various template niceties,
    Meteor also allows you to dynamically switch between rendered templates. This
    recipe will show you how to dynamically render templates, using the `Template.dynamic`
    helper.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the codebase from the *Creating custom components* recipe found
    in this chapter. Please follow that recipe first or download the corresponding
    codebase.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will add a dynamic template that will switch our shapes from circles to
    squares, when rendered. Proceed with the following steps to use dynamic templates:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to create our alternate template. Inside `templates.html`, located
    in your `[project root]/client` folder, add the following template, just below
    the declaration for the existing `one` template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will need a data context for this template. Fortunately, we can reuse the
    `Shapes` collection. Open `templates.js`, make a copy of the `svgShapes` function,
    and add it to a new `Template.two.helpers()` method call, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we will add logic to toggle between the `one` and `two` templates, based
    on the `Session.curTemplate` variable. At the bottom of `templates.js`, add the
    following `helpers()` method call:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'All that''s left to do is to add the dynamic template declaration and create
    an easy way to toggle between the templates. Let''s take care of the declaration
    first. Open `templates.html` and modify the double brackets inside the `<svg>`
    element as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we will add some toggle buttons and hook up the events to change the value
    of the `Session.curTemplate` variable. Open `navbar.html` and add the following
    template at the bottom:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to include the `navshapes` template in our block helper. Open `templates.html`
    and add the following template inclusion just before the `{{/navbar}}` block tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'One last addition, to hook up the events, and we''re ready to roll. Create
    a `navbar.js` file in your `[project root]/client` folder and add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save all your changes, start your Meteor project if it isn't already running,
    and navigate to your project in a browser (usually `http://localhost:3000`). You
    will see two buttons at the top-right corner of the screen. Click on them, back
    and forth, to see the shapes on the screen toggle between circles and squares,
    similar to the following screenshot:![How to do it...](img/image00358.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Template.dynamic` takes a `template` argument and renders the template with
    the appropriate name. Because we make the template argument dynamic and reactive,
    using the `curTemplate` helper, the rendered template will change as the value
    of `Session.curTemplate` changes. This ability to dynamically render templates
    is the basis for the popular Meteor package `iron:router`. It can be used in multiple
    situations where you would like to switch out templates, based on reactive data
    sources.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Iron Router takes dynamic templates to an entirely new level. The documentation
    for Iron Router can be found at [https://github.com/iron-meteor/iron-router/blob/devel/Guide.md](https://github.com/iron-meteor/iron-router/blob/devel/Guide.md).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a multipage application with Iron Router* recipe in [Chapter 2](part0028.xhtml#aid-QMFO1
    "Chapter 2. Customizing with Packages"), *Customizing with Packages*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating custom components* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using the Session object recipe* in [Chapter 4](part0046.xhtml#aid-1BRPS1
    "Chapter 4. Creating Models"), *Creating Models*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a complete app with Iron Router* recipe in [Chapter 12](part0088.xhtml#aid-2JTHG1
    "Chapter 12. Creating Useful Projects"), *Creating Useful Projects*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating DOM elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Meteor has a very elegant way of rendering DOM elements in our web apps, but
    until now, this hasn't included animations. Fortunately for us, Meteor now supports
    animations, including animations when an element is first added to the DOM. This
    recipe will walk you through how to use standard CSS animation techniques inside
    Meteor.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the codebase from the *Using dynamic templates* recipe found in
    this chapter. Please follow that recipe first or download the corresponding codebase.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will animate the shapes from our previous recipe, demonstrating animation
    both before and after the elements are first created and rendered.
  prefs: []
  type: TYPE_NORMAL
- en: Because we used SVG elements instead of DOM elements, we need to modify jQuery
    to be able to use `.addClass` and `.removeClass`. Fortunately, there is a custom
    package available that will add SVG support and add Meteor UI event support at
    the same time.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a terminal window, navigate to the root folder of your project and execute
    the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will install the `animation-hooks` package, which includes support for
    SVG in jQuery.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We will now add a very simple hover animation effect. Open or create a `style.css`
    file in your `[project root]/client/lib/styles` folder and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save your changes, start your Meteor project if it isn''t already started,
    and navigate to your project URL in a browser (usually `http://localhost:3000`).
    If you don''t have shapes on your screen, click to add some and then hover over
    the shapes. As you hover, you will notice that the shapes will fade out slowly,
    and as you move the mouse away, the shapes will fade in slowly until they return
    to full opacity. Now we will use jQuery to move all the shapes on the screen at
    once. Inside `navbar.html`, add the following template at the bottom:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside `templates.html`, add a call to the new `navoffset` template, just before
    the `navshapes` declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now add the code for the `button` events by modifying `navbar.js`, adding
    the following function at the bottom:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also want to add a little bit of polish to our `nav` buttons, so add the
    following CSS to the `style.css` file, at the bottom:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save all these changes and your web page should now contain two new buttons,
    labeled **red** and **blue**. As you click on these buttons alternately, all the
    shapes on the screen will move their location randomly, back and forth diagonally
    across your screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will now use the built-in animation hooks, called `_uihooks`, to animate
    shapes as they are added dynamically to the DOM. Open `templates.html` and make
    the following modifications to both the `one` and `two` templates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We have one final step and that is to add the initial *before* state to the
    shapes, via our `.animate` CSS declaration. Open `style.css` and add the following
    declaration at the bottom:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and test out the new animations functionality by either adding
    new shapes to the screen (clicking anywhere), or by changing the shapes from circles
    to squares, and back again (clicking on the **one** and **two** buttons). As you
    click, you will see the shape(s) fade in and move into place from the left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Because Blaze now renders objects according to the DOM, rather than rendering
    according to text-based HTML tags, it is aware of the styles and conditions of
    the created elements, for example, because we added the `opacity:0` style to our
    `:hover` shape elements in `style.css`, elements underneath the mouse will fade
    out and stay faded out, even when we click on / add new shapes. Using jQuery,
    we can programmatically add styles and transformations, as we did in `navbar.js`
    with the `.css()` functions. Blaze will respect these changes as well because
    programmatic changes to the CSS/DOM are remembered, even when new elements are
    added.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `_uihooks` declaration contains three event handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `insertElement` | This is fired before a DOM node is rendered so that we
    can manipulate its position, map where the node will go when animated, and then
    animate the node as it is rendered. |'
  prefs: []
  type: TYPE_TB
- en: '| `removeElement` | This is fired before a DOM node is removed. We check to
    see whether there is an outgoing animation and animate the node if so. Otherwise,
    we just remove it. |'
  prefs: []
  type: TYPE_TB
- en: '| `moveElement` | This is fired when a DOM node changes the indexed position
    in the DOM. We can add any animations before, and then during the index change,
    to create an animation effect. |'
  prefs: []
  type: TYPE_TB
- en: For our sample, we only need to worry about inserting and removing elements.
    Each element has the CSS `animate` class assigned to it, by virtue of the template,
    which offsets the intended position by (-300,-100). The way we animate is by having
    the element appear on the screen in the offset position (with the `animate` class
    in effect), and then by removing the `animate` class, which triggers a transition/animation
    because the element moves to its intended position. Thanks to `_uihooks` and the
    `insertElement` event handler, we can programmatically remove `class` declarations
    to elements, right after they are initially rendered, causing them to animate.
    This makes the shapes seem to fade in from the top-left. Similarly, we can then
    add them back right before the elements are removed in order to perform an outgoing
    animation.
  prefs: []
  type: TYPE_NORMAL
- en: We declare which elements will be affected by wrapping the elements in the `{{#Animate}}…{{/Animate}}`
    block helpers, which causes the `insertElement` and `removeElement` handlers to
    fire on the wrapped elements.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We expect some changes as Meteor continues to improve animation support, although
    the major functionality is already there. Meanwhile, you can walk through how
    `_uihooks` works by adding breakpoints to the client source, in the `packages/appmill:animations-hooks/animation-hooks.js`
    file, similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more…](img/image00359.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can also get a (slightly) more thorough explanation at [https://github.com/strack/meteor-animation-hooks](https://github.com/strack/meteor-animation-hooks).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using reactivity with HTML attributes* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
