- en: Optimizing Observability
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化可观察性
- en: 'In this chapter, the following recipes will be covered:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将介绍以下配方：
- en: Monitoring a cloud-native system
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控云原生系统
- en: Implementing custom metrics
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现自定义指标
- en: Monitoring domain events
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控域事件
- en: Creating alerts
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建警报
- en: Creating continuous synthetic transaction tests
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建持续的合成事务测试
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Confidence is crucial to maximize the potential of our lean and autonomous cloud-native
    services, because a crisis of confidence will stifle progress. Leveraging fully
    managed cloud services and following cloud-native design patterns to create autonomous
    services significantly increases team confidence. Decoupling deployment from release
    and shifting testing to the left, to create a streamlined continuous deployment
    pipeline, further increases team confidence. Yet, this is not enough. We need
    to shift testing to the right as well, all the way into production, so that we
    can monitor and alert the team about the status of the system. This gives teams
    confidence that they will have timely information so that they can minimize the
    mean time to recovery when errors do happen. The recipes in this chapter demonstrate
    how to optimize the observability of cloud-native services, alert about what matters,
    and continuously test in production to increase team confidence.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 信心对于最大限度地发挥我们精简和自主的云原生服务的潜力至关重要，因为信心危机会阻碍进步。利用完全管理的云服务和遵循云原生设计模式来创建自主服务显著增加了团队信心。将部署与发布解耦并将测试左移，以创建流线化的持续交付管道，进一步增加了团队信心。然而，这还不够。我们需要将测试右移，一直进入生产环境，这样我们就可以监控和提醒团队关于系统状态的信息。这使团队有信心，他们将在错误发生时及时获得信息，从而最大限度地减少平均恢复时间。本章中的配方演示了如何优化云原生服务的可观察性，对重要事项发出警报，并在生产环境中持续测试以增加团队信心。
- en: Monitoring a cloud-native system
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控云原生系统
- en: Leveraging fully managed cloud services is key to creating lean, cloud-native
    services, because embracing this disposable architecture empowers self-sufficient,
    full-stack teams to rapidly deliver with confidence based on the foundation provided
    by those cloud services. Team confidence is further increased because this foundation
    comes with good observability. This recipe demonstrates how to tap into cloud-provider
    metrics using a cloud-provider-agnostic, third-party monitoring service.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 利用完全管理的云服务是创建精简、云原生服务的关键，因为采用这种可丢弃的架构使自给自足的全栈团队能够基于云服务提供的基础快速自信地交付。团队信心进一步增加，因为这种基础附带良好的可观察性。本配方演示了如何使用云提供商无关的第三方监控服务利用云提供商指标。
- en: Getting ready
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Before starting this recipe you will need a Datadog account ([https://www.datadoghq.com](https://www.datadoghq.com)).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始此配方之前，您需要一个 Datadog 账户 ([https://www.datadoghq.com](https://www.datadoghq.com))。
- en: How to do it...
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Create the project from the following template:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下模板创建项目：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Navigate to the `cncb-datadog-account` directory with `cd cncb-datadog-account`.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `cd cncb-datadog-account` 切换到 `cncb-datadog-account` 目录。
- en: 'Review the file named `serverless.yml` with the following content:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看以下内容的 `serverless.yml` 文件：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Install the dependencies with `npm install`.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm install` 安装依赖项。
- en: Run the tests with `npm test`.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm test` 运行测试。
- en: Review the contents generated in the `.serverless` directory.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看在 `.serverless` 目录中生成的内容。
- en: Deploy the stack with `npm run dp:lcl -- -s $MY_STAGE`.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm run dp:lcl -- -s $MY_STAGE` 部署堆栈。
- en: Log in to **Datadog** and go to the **Integrations** page and select the AWS
    integration tile.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到 **Datadog** 并转到 **集成** 页面，然后选择 AWS 集成磁贴。
- en: Select Role Delegation, enter your AWS account ID and set the AWS role name
    to `DatadogAWSIntegrationRole`.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择角色委派，输入您的 AWS 账户 ID 并将 AWS 角色名称设置为 `DatadogAWSIntegrationRole`。
- en: Copy the AWS external ID value and use it to update `sts:ExternalId` in  `serverless.yml`.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制 AWS 外部 ID 值并使用它来更新 `serverless.yml` 中的 `sts:ExternalId`。
- en: Set tags to `account:cncb` and press Install Integration.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将标签设置为 `account:cncb` 并按安装集成。
- en: Update the stack with `npm run dp:lcl -- -s $MY_STAGE`.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm run dp:lcl -- -s $MY_STAGE` 更新堆栈。
- en: Review the stack and resources in the AWS Console.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 AWS 控制台中查看堆栈和资源。
- en: 'Invoke the sample function multiple times with the following command:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令多次调用示例函数：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Review the preset Datadog Lambda dashboard with Dashboards | Dashboard List
    | All Integrations | AWS Lambda.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看预设的 Datadog Lambda 仪表板，在 Dashboards | Dashboard List | All Integrations |
    AWS Lambda。
- en: Remove the stack once you are finished with this chapter with `npm run rm:lcl
    -- -s $MY_STAGE`.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成本章内容后，使用 `npm run rm:lcl -- -s $MY_STAGE` 删除堆栈。
- en: How it works...
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Cloud providers collect valuable metrics for their cloud services. However,
    they do not necessarily retain this data for extended periods, and the ability
    to slice and dice this data can be limited. Therefore, it is recommended to employ
    a third-party monitoring service to fill in the gaps and provide more comprehensive
    monitoring capabilities. Furthermore, in the eventuality of utilizing a polyglot
    cloud, a cloud-provider-agnostic monitoring service offers a unified monitoring
    experience. My monitoring service of choice is Datadog. This recipe shows how
    easily and quickly we can connect Datadog to an AWS account and start aggregating
    metrics to increase the observability of our cloud-native systems.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 云服务提供商为他们的云服务收集有价值的指标。然而，他们不一定保留这些数据很长时间，并且对数据的切片和切块能力可能有限。因此，建议使用第三方监控服务来填补空白并提供更全面的监控能力。此外，在多语言云的使用情况下，云提供商无关的监控服务提供统一的监控体验。我选择的监控服务是
    Datadog。这个配方展示了我们如何轻松快速地将 Datadog 连接到 AWS 账户并开始汇总指标，以增加我们云原生系统的可观察性。
- en: To allow Datadog to start collecting metrics from an AWS account, we must grant
    it permission to do so. As the *How to do it* section shows, this requires steps
    on the AWS side and the Datadog side. First, we deploy a stack to create `DatadogAWSIntegrationPolicy`
    with all the necessary permissions, and `DatadogAWSIntegrationRole` connects the
    AWS account with Datadog's AWS account. This last bit is important. Datadog runs
    in AWS as well. This means that we can use *Role Delegation* to connect the accounts
    instead of sharing access keys. Once `DatadogAWSIntegrationRole` is created, we
    can configure the AWS integration on the Datadog side, which has a prerequisite
    for the existence of the role. Datadog generates `ExternalId`, which we need to
    add to `DatadogAWSIntegrationRole` as a condition for assuming the role. With
    the integration in place, Datadog consumes the requested metrics from CloudWatch
    in your AWS account, so that they can be aggregated into meaningful dashboards,
    retained for historical analysis, and monitored to alert about conditions of interest.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要允许 Datadog 从 AWS 账户开始收集指标，我们必须授予它这样做的能力。正如 *如何操作* 部分所示，这需要在 AWS 端和 Datadog
    端执行步骤。首先，我们部署一个堆栈来创建具有所有必要权限的 `DatadogAWSIntegrationPolicy`，以及 `DatadogAWSIntegrationRole`
    将 AWS 账户与 Datadog 的 AWS 账户连接起来。这一点很重要。Datadog 也在 AWS 中运行。这意味着我们可以使用 *角色委托* 来连接账户，而不是共享访问密钥。一旦创建了
    `DatadogAWSIntegrationRole`，我们就可以在 Datadog 端配置 AWS 集成，这需要角色的存在作为先决条件。Datadog 生成
    `ExternalId`，我们需要将其添加到 `DatadogAWSIntegrationRole` 中，作为假设角色的条件。一旦集成到位，Datadog
    就会从您的 AWS 账户中的 CloudWatch 消费请求的指标，以便它们可以汇总成有意义的仪表板，保留用于历史分析，并监控以发出关于感兴趣条件的警报。
- en: Implementing custom metrics
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现自定义指标
- en: The metrics provided by value-added cloud services, such as *Function-as-a-service*,
    are a great starting point. Teams can put their cloud-native services into production
    with just these metrics with a reasonable level of confidence. However, more observability
    is almost always better. We need fine-grained details about the inner workings
    of our functions. This recipe demonstrates how to collect additional metrics,
    such as cold starts, memory, CPU utilization, and the latency of HTTP resources.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 价值增加型云服务提供的指标，如 *函数即服务*，是一个很好的起点。团队只需这些指标就可以有信心地将云原生服务投入生产。然而，更多的可观察性几乎总是更好的。我们需要了解我们函数内部运作的细粒度详细信息。这个配方展示了如何收集额外的指标，例如冷启动、内存、CPU
    利用率和 HTTP 资源的延迟。
- en: How to do it...
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the project from the following template:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下模板创建项目：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Navigate to the `cncb-custom-metrics` directory with `cd cncb-custom-metrics`.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `cd cncb-custom-metrics` 命令导航到 `cncb-custom-metrics` 目录。
- en: 'Review the file named `serverless.yml` with the following content:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看名为 `serverless.yml` 的文件，其内容如下：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Review the file named `handler.js` with the following content:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看名为 `handler.js` 的文件，其内容如下：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Install the dependencies with `npm install`.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm install` 安装依赖项。
- en: Run the tests with `npm test`.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm test` 运行测试。
- en: Review the contents generated in the `.serverless` directory.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看在 `.serverless` 目录中生成的内容。
- en: 'Deploy the stack:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署堆栈：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Review the stack and resources in the AWS Console.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 AWS 控制台中查看堆栈和资源。
- en: 'Invoke the endpoint shown in the stack output in the  following commands:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下命令中调用堆栈输出中显示的端点：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Take a look at the logs:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看日志：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Execute the service several more times and then review the Lambda dashboard
    in Datadog under Dashboards | Dashboard List | All Integrations | AWS Lambda.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行服务几次后，然后在 Datadog 中的仪表板下查看 Lambda 控板：仪表板 | 控板列表 | 所有集成 | AWS Lambda。
- en: 'Explore the custom metrics in Datadog under Metrics *|* Explore with Graph:
    `hello.count` and `aws.lambda.handler.avg`.'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Datadog 中探索自定义指标，使用图形探索：`hello.count` 和 `aws.lambda.handler.avg`。
- en: Remove the stack once you are finished with `npm run rm:lcl -- -s $MY_STAGE`.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，使用 `npm run rm:lcl -- -s $MY_STAGE` 删除堆栈。
- en: How it works...
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Adding custom metrics to a function works differently than traditional monitoring.
    The traditional approach involves adding an agent to each machine that collects
    metrics and periodically sends the data to the monitoring system. But with *Function-as-a-service,*
    there is no machine for us to deploy an agent on. An alternative is simply to send
    the collected metrics at the end of each function invocation. However, this adds
    significant latency to each function invocation. Datadog offers a unique alternative
    based on structured log statements. Counts, gauges, histograms, and checks are
    simply logged as they are collected and Datadog automatically consumes these statements
    from CloudWatch Logs.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 将自定义指标添加到函数中的操作与传统监控不同。传统方法涉及在每个机器上添加代理来收集指标，并定期将数据发送到监控系统。但是，在 *Function-as-a-service*
    中，我们没有机器可以部署代理。一种替代方法是简单地在每个函数调用的末尾发送收集到的指标。然而，这会给每个函数调用增加显著的延迟。Datadog 提供了一种基于结构化日志语句的独特替代方案。计数、仪表、直方图和检查只是按收集时的顺序记录，Datadog
    自动从 CloudWatch 日志中消费这些语句。
- en: The `serverless-datadog-metrics` library ([https://www.npmjs.com/package/serverless-datadog-metrics](https://www.npmjs.com/package/serverless-datadog-metrics)) 
    facilitates using this approach. We simply wrap the handler function with the
    `monitor` function and it will collect useful metrics, such as cold starts, errors,
    execution time, memory, and CPU utilization as well as the latency of HTTP resources.
    The HTTP metrics are very valuable. All HTTP calls to resources, such as DynamoDB,
    S3, and Kinesis, are automatically recorded so that we can see how much time a
    function spends waiting on its external resources.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`serverless-datadog-metrics` 库 ([https://www.npmjs.com/package/serverless-datadog-metrics](https://www.npmjs.com/package/serverless-datadog-metrics))
    简化了此方法的使用。我们只需用 `monitor` 函数包装处理函数，它将收集有用的指标，例如冷启动、错误、执行时间、内存和 CPU 利用率，以及 HTTP
    资源的延迟。HTTP 指标非常有价值。所有对资源（如 DynamoDB、S3 和 Kinesis）的 HTTP 调用都会自动记录，这样我们就可以看到函数在其外部资源上花费了多少时间。'
- en: This library also exports low-level functions, such as `count`, `gauge`, and
    `histogram`, to support additional custom metrics. The environment valuables,
    such as `ACCOUNT_NAME` and `SERVERLESS_PROJECT`, are used as tags for filtering
    metrics in dashboards and alerts.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此库还导出低级函数，例如 `count`、`gauge` 和 `histogram`，以支持额外的自定义指标。环境变量，如 `ACCOUNT_NAME`
    和 `SERVERLESS_PROJECT`，用作仪表板和警报中过滤指标的分标签。
- en: Monitoring domain events
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控领域事件
- en: In traditional systems, we typically focus on observing the behavior of synchronous
    requests. However, our cloud-native systems are highly asynchronous and event-driven.
    Therefore, we need to place equal or greater attention on the flow of domain events
    through the system so that we can determine when these flows deviate from the
    norm. This recipe demonstrates how to collect domain event metrics.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统系统中，我们通常专注于观察同步请求的行为。然而，我们的云原生系统是高度异步和事件驱动的。因此，我们需要对系统中的领域事件流给予同等或更大的关注，以便我们可以确定这些流程何时偏离正常。此配方演示了如何收集领域事件指标。
- en: Getting ready
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Before starting this recipe, you will need an AWS Kinesis Stream, such as the
    one created in the *Creating an event stream* recipe.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始此配方之前，您需要一个 AWS Kinesis Stream，例如在 *创建事件流* 配方中创建的流。
- en: How to do it...
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create the project from the following template:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下模板创建项目：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Navigate to the `cncb-event-metrics` directory with `cd cncb-event-metrics`.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `cd cncb-event-metrics` 命令进入 `cncb-event-metrics` 目录。
- en: Review the file named `serverless.yml`.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看名为 `serverless.yml` 的文件。
- en: 'Review the file named `handler.js` with the following content:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看包含以下内容的 `handler.js` 文件：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Install the dependencies with `npm install`.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm install` 安装依赖项。
- en: Run the tests with `npm test -- -s $MY_STAGE`.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm test -- -s $MY_STAGE` 运行测试。
- en: Review the contents generated in the `.serverless` directory.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看在 `.serverless` 目录中生成的内容。
- en: Deploy the stack: `npm run dp:lcl -- -s $MY_STAGE`.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署堆栈：`npm run dp:lcl -- -s $MY_STAGE`
- en: Review the stack and resources in the AWS Console.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在AWS控制台中查看堆栈和资源。
- en: 'Invoke the `simulate` function with the following command:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令调用`simulate`函数：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Take a look at the logs:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看日志：
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Explore the event metrics in Datadog under Metrics *|* Explore with Graph:
    `domain.event` and one graph per `type`.'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Datadog的指标下探索事件指标，使用图形：`domain.event`，每个`type`一个图形。
- en: Remove the stack once you are finished: `npm run rm:lcl -- -s $MY_STAGE`.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后删除堆栈：`npm run rm:lcl -- -s $MY_STAGE`
- en: How it works...
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Monitoring events works similarly to collecting events in the data lake. A single
    stream processor observes all events from all streams and simply counts the domain
    events by event `type`, along with additional tags, such as `region`, `stream`,
    and `source`. Again, these counts are recorded as structured log statements and
    Datadog consumes these statements from CloudWatch Logs. Graphing the domain event
    metrics in a dashboard can provide great insight into the behavior of a system.
    We will see how to alert about the flow of domain events in the *Creating alerts*
    recipe. We also perform special handling for `fault` events. For these events,
    we invoke the Datadog Event API, which provides for sending additional contextual
    information, such as a stack trace. We will discuss `fault` events in [Chapter
    8](5c400ff6-91da-4782-9369-549622d4a0d1.xhtml), *Designing for Failure*.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 监控事件的工作方式与在数据湖中收集事件类似。单个流处理器观察所有流的所有事件，并简单地按事件`type`计数域事件，以及额外的标签，如`region`、`stream`和`source`。同样，这些计数被记录为结构化日志语句，Datadog从CloudWatch日志中消费这些语句。在仪表板上绘制域事件指标可以提供对系统行为的深入了解。我们将在*创建警报*配方中看到如何对域事件流发出警报。我们还会对`fault`事件进行特殊处理。对于这些事件，我们调用Datadog事件API，该API提供发送附加上下文信息的功能，例如堆栈跟踪。我们将在[第8章](5c400ff6-91da-4782-9369-549622d4a0d1.xhtml)，*设计失败*中讨论`fault`事件。
- en: Creating alerts
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建警报
- en: To maximize our confidence in our cloud-native services, we need to be alerted
    about issues ahead of the end users so that we can respond quickly and minimize
    the mean time to recovery. This also means that we need to eliminate alert fatigue
    and only alert on what really matters, otherwise important alerts will be lost
    in the noise. This recipe demonstrates how to create alerts on key metrics.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最大限度地提高我们对云原生服务的信心，我们需要在最终用户之前就收到问题警报，以便我们能够快速响应并最小化平均恢复时间。这也意味着我们需要消除警报疲劳，并且只对真正重要的事情发出警报，否则重要的警报将淹没在噪音中。本配方演示了如何创建关键指标的警报。
- en: How to do it...
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Log in to your Datadog account.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的Datadog账户。
- en: 'Create an IAM alert with the following settings:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下设置创建一个IAM警报：
- en: Select Monitors | New Monitor | Event
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择监控器 | 新监控器 | 事件
- en: Match events from `Amazon Cloudtrail` over `aws-service:iam`
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 匹配来自`Amazon Cloudtrail`的`aws-service:iam`事件
- en: Multi Alert—`aws_account`
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多警报—`aws_account`
- en: Alert threshold—`above 0`
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 警报阈值—`above 0`
- en: Title—`aws.iam`
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标题—`aws.iam`
- en: Include trigger tags—`true`
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含触发标签—`true`
- en: Notify—`yourself`
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通知—`yourself`
- en: 'Create an iterator age alert with the following settings:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下设置创建一个年龄迭代器警报：
- en: Select Monitors | New Monitor | Integration | AWS Lambda
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择监控器 | 新监控器 | 集成 | AWS Lambda
- en: Metric—`aws.lambda.iterator_age`
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指标—`aws.lambda.iterator_age`
- en: Max by—`functionname`, `region` and `account`
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大值按—`functionname`、`region`和`account`
- en: Multi Alert—`functionname`, `region` and `account`
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多警报—`functionname`、`region`和`account`
- en: Alert threshold—`7200000` (2 hrs)
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 警报阈值—`7200000` (2小时)
- en: Warning threshold—`1800000`  (0.5 hrs)
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 警告阈值—`1800000`  (0.5小时)
- en: Title—`aws.lambda.iterator_age`
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标题—`aws.lambda.iterator_age`
- en: Include trigger tags—`true`
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含触发标签—`true`
- en: Notify—`yourself`
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通知—`yourself`
- en: 'Create a request rate alert with the following settings:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下设置创建一个请求速率警报：
- en: Select Monitors | New Monitor | Anomaly
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择监控器 | 新监控器 | 异常
- en: Metric—`aws.apigateway.count`
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指标—`aws.apigateway.count`
- en: Average by—`apiname`, `region`, and `account` as `rate`
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平均值按—`apiname`、`region`和`account`作为`rate`
- en: Multi Alert—`apiname`, `region`, and `account`
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多警报—`apiname`、`region`和`account`
- en: Alert conditions—start with the defaults and tune to your data
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 警报条件—使用默认值并调整到您的数据
- en: Title—`aws.apigateway.rate`
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标题—`aws.apigateway.rate`
- en: Include trigger tags—`true`
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含触发标签—`true`
- en: Notify—`yourself`
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通知—`yourself`
- en: 'Create a domain event rate alert with the following settings:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下设置创建一个域事件速率警报：
- en: Select Monitors | New Monitor | Anomaly
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择监控器 | 新监控器 | 异常
- en: Metric—`domain.event`
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指标—`domain.event`
- en: Average by—`type`, `region`, and `account` as `rate`
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平均值按—`type`、`region`和`account`作为`rate`
- en: Multi Alert—`type`, `region`, and `account`
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多警报—`type`、`region`和`account`
- en: Alert conditions—Start with the defaults and tune to your data
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 警报条件—从默认值开始，并根据您的数据进行调整
- en: Title—`domain.event.rate`
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标题—`domain.event.rate`
- en: Include trigger tags—`true`
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含触发标签—`true`
- en: Notify—`yourself`
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通知—`yourself`
- en: 'Create a Fault Event alert with the following settings:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下设置创建一个故障事件警报：
- en: Select Monitors | New Monitor | Event
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择监控器 | 新监控器 | 事件
- en: 'Match events containing—`Fault Event` with status `error` from: `My Apps`'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 匹配包含—`Fault Event`且状态为`error`的事件，来自：`My Apps`
- en: Multi Alert—`functionname`, `region`, and `account`
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多警报—`functionname`、`region`和`account`
- en: Alert threshold—`above 0`
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 警报阈值—`above 0`
- en: Title—`fault.event`
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标题—`fault.event`
- en: Include trigger tags—`true`
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含触发标签—`true`
- en: Notify—`yourself`
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通知—`yourself`
- en: Datadog autocomplete menus are populated based on the metrics that have been
    recently collected.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Datadog自动完成菜单是根据最近收集的指标填充的。
- en: How it works...
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Now that our system is observable, we need to do something proactive and useful
    with all this data. There is simply too much data to process manually and our
    confidence will only be increased if we can turn this data into valuable, timely
    information. We will certainly use this data for root-cause and post-mortem analysis,
    but our confidence is increased by our focus on mean time to recovery. Therefore,
    we need to create monitors that are constantly *testing* the data, turning it
    into information and alerting on what matters. However, we must be careful to
    avoid alert fatigue. The best practice is to alert liberally, but page judiciously
    on symptoms rather than causes. For example, we should create many monitors that
    only record that a threshold was crossed so that this additional information can
    be used in the root-cause analysis. Other monitors will email the team to warn
    of a potential problem, but a few select monitors will page the team to jump into
    immediate action.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们系统是可观察的，我们需要用所有这些数据进行一些积极主动且有用的事情。手动处理的数据太多，而且如果我们能将这些数据转化为有价值、及时的信息，我们的信心就会增加。我们肯定会使用这些数据进行根本原因和事后分析，但我们的信心是通过关注平均恢复时间来增加的。因此，我们需要创建不断*测试*数据、将其转化为信息并在重要事项上发出警报的监控器。然而，我们必须小心避免警报疲劳。最佳实践是广泛发出警报，但明智地针对症状而不是原因进行页面。例如，我们应该创建许多仅记录阈值被跨越的监控器，以便在根本原因分析中使用这些附加信息。其他监控器将通过电子邮件向团队发出潜在问题的警告，但少数精选监控器将向团队发送页面，以便立即采取行动。
- en: To know the difference between a symptom and a cause, we categorize our metrics
    into work metrics and resource metrics. Work metrics represent the user-visible
    output of the system. Resource metrics represent the internal workings of the
    system. Our resource monitors will usually record and send warnings, and our work
    monitors will page the team. The RED method ([https://dzone.com/articles/red-method-for-prometheus-3-key-metrics-for-micros](https://dzone.com/articles/red-method-for-prometheus-3-key-metrics-for-micros))
    and the USE method ([https://dzone.com/articles/red-method-for-prometheus-3-key-metrics-for-micros](https://dzone.com/articles/red-method-for-prometheus-3-key-metrics-for-micros))
    break these categories down further. **RED** stands for **Rate, Error, and Duration**.
    When a critical service has a significant decrease in the rate of requests or
    events or a significant increase in errors, or latency significantly increases,
    then these may warrant paging the team. **USE** stands for **Utilization**, **Saturation**,
    and **Errors**. When the utilization of a resource, such as DynamoDB or Kinesis,
    reaches a certain level then it is probably good to warn the team. However, saturation
    and/or errors, such as throttling, may just warrant recording, because they may
    quickly subside or, if prolonged, they will trigger the work monitors.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解症状和原因之间的区别，我们将我们的指标分为工作指标和资源指标。工作指标代表系统对用户可见的输出。资源指标代表系统的内部工作。我们的资源监控器通常会记录并发送警告，而我们的工作监控器会向团队发送页面。RED方法([https://dzone.com/articles/red-method-for-prometheus-3-key-metrics-for-micros](https://dzone.com/articles/red-method-for-prometheus-3-key-metrics-for-micros))和USE方法([https://dzone.com/articles/red-method-for-prometheus-3-key-metrics-for-micros](https://dzone.com/articles/red-method-for-prometheus-3-key-metrics-for-micros))进一步细分了这些类别。**RED**代表**速率、错误和持续时间**。当一个关键服务的请求数或事件数显著减少，或错误显著增加，或者延迟显著增加时，这可能需要向团队发送页面。**USE**代表**利用率、饱和度和错误**。当资源（如DynamoDB或Kinesis）的利用率达到一定水平时，可能需要向团队发出警告。然而，饱和度和/或错误（如限流）可能只需要记录，因为它们可能会迅速减轻，或者如果持续存在，它们将触发工作监控器。
- en: This recipe demonstrated a few possible monitors. The `fault` monitor represents
    work that is failing and must be addressed. The stream `iterator age` monitor
    straddles the line, because it could represent temporary resource saturation,
    or it could represent an error that is causing work to back up. Therefore, it
    has both a warning and an alert at different thresholds. The `anomaly detection`
    monitors should focus on work metrics, such as the rate of critical requests or
    domain events. It is also a good idea to monitor CloudTrail for any IAM changes,
    such as to roles and permissions.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方演示了几种可能的监控器。`故障`监控器代表失败的工作，必须解决。`流迭代器年龄`监控器处于边缘，因为它可能代表临时资源饱和，也可能代表导致工作积压的错误。因此，它在不同的阈值处都有警告和警报。`异常检测`监控器应关注工作指标，例如关键请求的速率或域事件。同时监控CloudTrail以检测任何IAM更改，例如角色和权限的更改也是一个好主意。
- en: The `notification` step is optional if you only need to record the condition.
    To warn the team, send the notification to chat and/or group email. To page the
    team, send the notification to an SNS topic. It is best to use the Multi Alert
    feature, triggered on pertinent tags, and include these in the notification title
    so that this information is available at a glance.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只需要记录条件，则`通知`步骤是可选的。为了警告团队，请将通知发送到聊天和/或群组电子邮件。为了唤醒团队，请将通知发送到SNS主题。最好使用Multi
    Alert功能，在相关标签上触发，并在通知标题中包含这些信息，以便一目了然地获取这些信息。
- en: Ultimately, to be valuable and to avoid fatigue, these monitors need care and
    feeding. These monitors are your tests in production. As your team's understanding
    of your system increases, then you will uncover better tests/monitors. When your
    monitors produce false positives, they will need to be tuned or eliminated. Your
    level of confidence is the true measure of successful monitoring.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，为了有价值并避免疲劳，这些监控器需要得到关注和培养。这些监控器是您在生产中的测试。随着您的团队对系统的理解加深，您将发现更好的测试/监控器。当您的监控器产生误报时，它们需要调整或消除。您的信心水平是成功监控的真实衡量标准。
- en: Creating synthetic transaction tests
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建合成事务测试
- en: If a tree falls in a forest and no one is around to hear it, does it make a
    sound? Or more on topic, if a deployment is broken in a region and no one is awake
    to use it, does it make a difference? Of course, the answer is yes. We want to
    be alerted about the broken deployment so that it can be fixed before normal traffic
    begins. To enable this, we need to continuously pump synthetic traffic through
    the system so that there is a continuous signal to test. This recipe demonstrates
    how to generate synthetic traffic using cloud-provider-agnostic, third-party services.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果森林里有一棵树倒下，没有人听到声音，它还会发出声音吗？或者更贴近话题，如果某个地区的部署出现故障，没有人醒来使用它，这会有所不同吗？当然，答案是肯定的。我们希望被通知关于损坏的部署，以便在正常流量开始之前修复它。为了启用此功能，我们需要通过系统连续泵送合成流量，以便有一个连续的信号进行测试。此配方演示了如何使用云提供商无关的第三方服务生成合成流量。
- en: Getting ready
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Before starting this recipe, you will need a Pingdom account ([https://www.pingdom.com](https://www.pingdom.com)).
    You will also need an AWS Cognito user pool, such as the one created in the *Creating
    a federated identity pool* recipe.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始此配方之前，您需要一个Pingdom账户（[https://www.pingdom.com](https://www.pingdom.com)）。您还需要一个AWS
    Cognito用户池，例如在*创建联合身份池*配方中创建的那个。
- en: How to do it...
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Create the project from the following template:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下模板创建项目：
- en: '[PRE13]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Navigate to the `cncb-synthetics` directory `cd cncb-synthetics`.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`cncb-synthetics`目录`cd cncb-synthetics`。
- en: Install the dependencies with `npm install`.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`npm install`安装依赖项。
- en: Review the file named `src/App.js` and update the `clientId` and `domain` fields
    with the values for the user pool stack.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查名为`src/App.js`的文件，并使用用户池堆栈的值更新`clientId`和`domain`字段。
- en: Build the app with `npm run build`.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`npm run build`构建应用程序。
- en: 'Deploy the stack:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署堆栈：
- en: Deploying a CloudFront distribution can take upward of 20 minutes.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 部署CloudFront分发可能需要20分钟以上。
- en: '[PRE14]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Update the `callbackURLs` and `logoutURLs` of the user pool stack to include `WebsiteDistributionURL`
    and then redeploy it.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新用户池堆栈的`callbackURLs`和`logoutURLs`以包括`WebsiteDistributionURL`，然后重新部署。
- en: Browse to `WebsiteDistributionURL` provided in the stack output to test the
    site configuration.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览堆栈输出中提供的`WebsiteDistributionURL`以测试网站配置。
- en: Log in to your Pingdom account.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的Pingdom账户。
- en: 'Create an uptime check with the following settings:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下设置创建一个可用性检查：
- en: Select Experience Monitoring | Uptime | Add check.
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择“经验监控”|“可用性”|“添加检查”。
- en: Name—`cncb-synthetics`.
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称—`cncb-synthetics`。
- en: Check interval—`1 minute`
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查间隔—`1分钟`
- en: URL—`WebsiteDistributionURL from your deploy output`
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL—`WebsiteDistributionURL`（从您的部署输出中获取）
- en: Review the Experience Monitoring *|* Uptime dashboard periodically.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定期审查经验监控 *|* 服务器正常运行时间仪表板。
- en: 'Create a real user monitor with the following settings:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下设置创建真实用户监控：
- en: Select Experience Monitoring | Visitor Insights (RUM) | Add site.
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择“经验监控 | 访客洞察（RUM） | 添加站点”。
- en: Name—`cncb-synthetics`
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称—`cncb-synthetics`
- en: URL—`WebsiteDistributionURL from your deploy output`
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL—`WebsiteDistributionURL`（从您的部署输出中获取）
- en: 'Review the file named `public/index.html`, uncomment the following code, and
    replace the ID with the value from the generated code snippet:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审查名为`public/index.html`的文件，取消以下代码的注释，并将ID替换为生成的代码片段中的值：
- en: '[PRE15]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Build and redeploy the app:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建和重新部署应用程序：
- en: '[PRE16]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Review the Experience Monitoring | Visitor Insights (RUM) dashboard periodically.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定期审查经验监控 | 访客洞察（RUM）仪表板。
- en: 'Create a Synthetic Transaction test with the following settings:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下设置创建合成事务测试：
- en: Select Experience Monitoring | Transactions | Add check
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择“经验监控 | 事务 | 添加检查”。
- en: Name—`cncb-synthetics`
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称—`cncb-synthetics`
- en: Test interval—`10 minutes`
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试间隔—`10分钟`
- en: Go to the URL `WebsiteDistributionURL from deploy output`
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前往`WebsiteDistributionURL` URL
- en: Fill in the `username` field with `your-username`
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`username`字段中填写`your-username`
- en: Fill in the `password` field with `your-password`
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`password`字段中填写`your-password`
- en: Click Sign In
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击“登录”
- en: Wait for the element `.App-title` to contain `Welcome to React`
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等待元素`.App-title`包含`Welcome to React`
- en: Review the Experience Monitoring *|* Transactions dashboard periodically.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定期审查经验监控 *|* 事务仪表板。
- en: Remove the stack once you are finished with `npm run rm:lcl -- -s $MY_STAGE`.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，使用`npm run rm:lcl -- -s $MY_STAGE`删除堆栈。
- en: Cancel your Pingdom free trial, under Account | Subscriptions | Manage Plan,
    before the 14 days expire, to avoid costs.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在14天试用期到期前，在“账户 | 订阅 | 管理计划”下取消Pingdom免费试用，以避免费用。
- en: How it works...
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Testing in production is different than traditional preproduction testing. As
    demonstrated in the *Creating alerts* recipe, our production tests are implemented
    as monitors that are constantly testing the signals emitted by the system. However,
    if there is no traffic, then there is no signal, and so no tests to alert us to
    problems in any deployments that happen during these periods. This, in turn, decreases
    our confidence in these deployments. The solution is to generate steady synthetic
    traffic to fill in the gaps when there is no natural traffic.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 生产环境中的测试与传统的前生产测试不同。正如在“创建警报”配方中所示，我们的生产测试是以监控的形式实现的，这些监控不断测试系统发出的信号。然而，如果没有流量，就没有信号，因此也就没有测试来提醒我们这些期间发生的任何部署中的问题。这反过来又降低了我们对这些部署的信心。解决方案是在没有自然流量时生成稳定的合成流量来填补空白。
- en: Uptime checks are the simplest to put in place because they only make a single
    request. These should be included at a minimum, because they can be put in place
    quickly with little effort and because they have the highest frequency. **Real
    User Monitoring** (**RUM**) should be included because it only requires a simple
    code modification and because a significant amount of the user performance experience
    in cloud-native systems is executed in the browser by single-page applications.
    Finally, a small but strategic set of synthetic transaction scripts needs to be
    implemented to smoke test crucial features continuously. These scripts resemble
    traditional test scripts, but their focus is on continuously exercising these
    critical happy paths to ensure that the crucial features are unaffected by the
    continuous deployment of new features.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器正常运行检查是最容易实施的，因为它们只进行单个请求。这些至少应该包括在内，因为它们可以快速实施且几乎不需要努力，并且它们具有最高的频率。**真实用户监控**（**RUM**）应该包括在内，因为它只需要简单的代码修改，并且云原生系统中大量的用户体验是由单页应用程序在浏览器中执行的。最后，需要实施一组小型但战略性的合成事务脚本，以持续测试关键功能。这些脚本类似于传统的测试脚本，但它们的重点是持续执行这些关键的成功路径，以确保关键功能不受新功能持续部署的影响。
