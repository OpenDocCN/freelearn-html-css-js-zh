- en: Chapter 7. Creating Interactive Webpages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned to create an RSS/Atom feed reader, stock
    quote ticker, language translator, and to create a document reviewing and commenting
    application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: To create web applications that return Sheet data as HTML, JSON, and PDF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To send HTTP/HTTPS request with the query string
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To create an RSS feed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To create a file upload application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To create a timesheet application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a web app to render Sheet data as HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will create an application to return Sheet data as HTML in the browser.
    Create a Sheet, rename it as `Data`, and populate it with some test data as shown
    in the next screenshot. You can populate the Sheet with any random data with the
    three columns named `First Name`, `Last Name`, and `Full Name`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a web app to render Sheet data as HTML](img/B05010_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the `Code.gs` file, create the `doGet` function as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `HtmlService` function can be used to create any HTML content. The preceding
    `doGet` function returns HTML content created by `HtmlService` to the browser.
    Publish the script as explained earlier, and enter the URL in the browser's address
    bar. You can see the result as shown in the following screenshot. The data shown
    may vary as per your input data.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a web app to render Sheet data as HTML](img/B05010_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a web app to return JSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will see how to return JSON string instead of HTML content. In the
    `Data` Sheet, add another column named `DOB` as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a web app to return JSON](img/B05010_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Create the `doGet` function as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output in the browser will be JSON string as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a web app to return JSON](img/B05010_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Converting Sheet data as a PDF file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can create an application to convert Sheet data into a PDF file and store
    it in Drive, and return the PDF file''s URL to the user:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Code.gs` file, create the `doGet` function as listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new HTML file, `Template.html`, and enter the following HTML code.
    In this code, the `data` array is a 2-dimensional array already assigned to the
    `template` object in the `doGet` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the mentioned code, the template markers `<?` and `?>` enclose the script
    code, which is identical to the `script` tag in the normal HTML code. The enclosed
    code executes, but does not return anything. The markers `<?=` and `?>` return
    the result of the enclosed code. For example, `<?= data[i][j] ?>` returns the
    *i*th row *j*th column value of a 2-dimensional `data` array.
  prefs: []
  type: TYPE_NORMAL
- en: 'For your understanding the server script without template markup in the previous
    code is reproduced here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Publish and enter the published URL in a browser''s address bar. The result
    will be as shown in the following screenshot. Click on the hyperlink to open the
    PDF file in Drive:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Converting Sheet data as a PDF file](img/B05010_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A sample output of the created PDF as per the Sheet data is shown in the following
    screenshot. The output may vary as per your input data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Converting Sheet data as a PDF file](img/B05010_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Sending an HTTP/HTTPS request with query string
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can send an HTTP/HTTPS request along with the query string. To do this,
    append the published URL with your query string.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example: `https://script.google.com/macros/s/AKfycbxa4ErKHiX_0gQ0JUU-Q1qMhvRrOsrx3HXuVZp7pzX8UVxMu4w/exec?`**fname=John**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'A sample of the logged HTTP/HTTPS request''s `event` object is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sending an HTTP/HTTPS request with query string](img/B05010_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `doGet` function listed in the following code snippet shows how you can
    use the `event` object to get the required parameters for further processing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The mentioned `doGet` function gets the `fname` parameter from the query string
    and returns the calculated `age` value along with `dob` for matching `fname`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Sending an HTTP/HTTPS request with query string](img/B05010_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating RSS feed using ContentService
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You created an RSS reader application in [Chapter 6](ch06.html "Chapter 6. Creating
    Feed Reader and Translator Applications"), *Creating Feed Reader and Translator
    Applications*. Now, you can create an application to publish an RSS feed. Put
    the RSS data in a Sheet as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating RSS feed using ContentService](img/B05010_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, edit/enter the following `doGet` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Publish the script as you did before. You can use the published URL as the RSS
    URL in your RSS reader application built in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a file upload application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can create an application to upload any file to Drive from the browser.
    Create the `doGet` and `uploadFiles` functions in the `Code.gs` file as listed
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Code.gs` file, add this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `uploadFiles` function looks for an existing folder with the name `Uploaded
    Files`. If not found, then it creates the same within root, `My Drive,` folder.
    Subsequently, it creates the file passed with the argument and returns the created
    file's URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the code in the `Form.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code renders the upload form controls, and if **Upload** is clicked,
    then it calls the `uploadFiles` server function.
  prefs: []
  type: TYPE_NORMAL
- en: 'A sample of the file upload form''s controls is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a file upload application](img/B05010_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click on the **Browse…** button to select any file stored locally. Then, click
    on the **Upload** button to upload to Drive. The selected file will be uploaded
    to the `Uploaded Files` folder within the `My Drive` folder.
  prefs: []
  type: TYPE_NORMAL
- en: After a successful upload, an alert box with the uploaded file's URL will be
    displayed as shown in the following screenshot. You can use the URL to verify
    the successful file upload.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a file upload application](img/B05010_07_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating an employee timesheet application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From the knowledge and experience gathered by creating the preceding applications,
    you can create this full blown timesheet application. This application can be
    used in an organization or company to log employees, worked hours in a day or
    shift. The daily attendance data will be backed in the `Backup` Sheet for future
    reference.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new spreadsheet with a Sheet named `EmployeesList` and populate it
    with employee names. All these names will be listed as a dropdown automatically
    in the user interface.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an employee timesheet application](img/B05010_07_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Create another Sheet named `TimeSheet` and arrange the column headers as shown
    in the following screenshot. Ensure columns *C*, *D*, *E*, and *F* are formatted
    as `date`, otherwise date may be shown as epoch number. Leave column *A* blank
    as it will be used by the script to mark the status of a shift such as `sb` (shift
    begin), `bb` (break begin), `be` (break end), and `se` (shift end).
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an employee timesheet application](img/B05010_07_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Create another Sheet with the name `Backup`, which is used to back up every
    day's shift data from the `TimeSheet` Sheet. Arrange the columns as shown here.
    Remember to format columns *B*, *C*, *D*, and *E* as `date`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an employee timesheet application](img/B05010_07_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Create another new Sheet and name it as `Message`, which will be used to pass
    a message, if any, to employees:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an employee timesheet application](img/B05010_07_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the `Code.gs` file, create the global variables as well as the `doGet` and
    `getEmpNames` functions. Replace `[[ this spreadsheet id ]]` with the actual ID/key
    (as a string) of the spreadsheet in which you are editing the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This `getEmpList` function creates and returns employee names as an array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `doGet` function, the message and employee list are assigned to the
    `template` object and returns evaluated HTML content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This `getEmpStatus` function returns employee shift status as an array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `fmtDate_` function is a helper function that returns the formatted date
    string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The `postTime` function populates timesheet with respect to the employee name
    and what button he/she has clicked and these values are supplied as an argument
    (`name` and `val`). This function also throws errors, if any.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The keyword throw returns an error object and terminates the execution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The preceding `postTime` function populates data to the `TimeSheet` Sheet as
    per the button clicked by the user. Also, it throws errors if there are any conflicts
    in the shift time. For example, a user cannot click on **Break End** before **Break
    Start** and cannot click on **Shift Start** without ending the previous shift,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new HTML file named as `Timesheet` and enter the following code in
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Publish the script and enter the published URL in the browser's address bar,
    then you will get the timesheet application loaded as shown in the screenshot.
    Experiment by selecting employee names from the dropdown and by clicking on buttons
    next to it. For every user action, the `Timesheet` and/or `Backup` Sheet data
    will be updated.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an employee timesheet application](img/B05010_07_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A sample output of the `Timesheet` data is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an employee timesheet application](img/B05010_07_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As soon as the user clicks on **Shift End**, then the corresponding data from
    the `TimeSheet` Sheet will be transferred to the `Backup` Sheet and formulas will
    be created for the `Shift Hours`, `Break Time`, and `Worked Hours` columns. These
    formulas calculate the date difference and multiply it by 24 to show it as an
    hour value. A sample output of the `Backup` Sheet is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an employee timesheet application](img/B05010_07_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned and created many useful real-life applications
    including RSS publisher and a full-blown timesheet application. In the next chapter,
    you will create an order processing workflow application.
  prefs: []
  type: TYPE_NORMAL
