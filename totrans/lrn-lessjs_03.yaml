- en: Chapter 3. Getting Started with Less
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the first two chapters of this book, [Chapter 1](part0018_split_000.html#page
    "Chapter 1. Introducing Less"), *Introducing Less*, and [Chapter 2](part0025_split_000.html#page
    "Chapter 2. Building a Less Development Toolkit"), *Building a Less Development
    Toolkit*, we learned what Less is, some of its benefits, and the reasons why you
    should get to grips with a preprocessor that is rapidly gaining serious traction
    in the development world.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we're going to start by downloading and installing Less and
    then setting up our base project that we can reuse throughout this book, which
    is already set to our preferences. While it might seem a little mundane, it is
    nevertheless an essential part of working with Less! Once we have our base project
    ready, we will then delve into a whistle-stop tour of some of the main code features
    of Less, before looking at how you can compile your Less code into valid CSS and
    seeing the effects of any changes made to the Less code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will delve a little deeper into Less by covering the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Incorporating Less into your website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The dangers of using Less on the client side
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the syntax used by Less
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating some basic styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling the code and viewing the results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Altering the Less code and viewing the effects of changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ready? As they say in temperal mechanics, there's no time like the present to
    get started...!
  prefs: []
  type: TYPE_NORMAL
- en: Creating the foundation page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have downloaded the library, the next stage is to set up our base
    project that we can reuse throughout this book. This is going to be a simple HTML5
    document, which will contain the basic skeleton we will need for our projects.
  prefs: []
  type: TYPE_NORMAL
- en: For my code editor, I will be using Sublime Text 2, for which we set up support
    for Less back in [Chapter 2](part0025_split_000.html#page "Chapter 2. Building
    a Less Development Toolkit"), *Building a Less Development Toolkit*. This is available
    for download from Sublime Text's website at [http://www.sublimetext.com/2](http://www.sublimetext.com/2),
    although you can use whichever editor you are most comfortable with.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by creating our base project file. In a new folder called `lessjs`,
    create a new file and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Save this as `project.html`. We'll make reference to this throughout the book
    and it will be the basis for each of our projects when using Less.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and installing Less
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a test page created, it's time to download the Less library.
    The latest version of the library is 1.7.3, which we will reference throughout
    this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'To obtain a copy of the library, there are two main options available: downloading
    the latest release as a standalone library or compiling code using Node. We''ll
    start with downloading the standalone library.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Less on the client side
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use Less in our code, we can download it from the Less site by browsing to
    [http://lesscss.org/#download-options-browser-downloads](http://lesscss.org/#download-options-browser-downloads)
    and then clicking on the **Download Less.js v.1.7.3** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the contents of the file, displayed in the browser window as `less.min.js`,
    in a subfolder called `js`, under the main `lessjs` project folder; you will end
    up with something like this screenshot (this shows the files you will create later
    in this chapter):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Less on the client side](img/00028.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In a copy of the `project.html` file we created at the start of this chapter,
    add the code as highlighted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: That's it—once this has been added, Less will compile the styles into valid
    CSS dynamically and render the results in the browser. The key point to note is
    that for Less to compile the styles correctly, the reference to the Less style
    sheet file must be included in your code first, before the reference to the Less
    library.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Can I get the source code for Less?**'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to delve into the Less library and examine the code in more detail,
    then you might like to download a copy of the uncompressed version of the library,
    which is available at [https://github.com/less/less.js/archive/master.zip](https://github.com/less/less.js/archive/master.zip).
  prefs: []
  type: TYPE_NORMAL
- en: Using a CDN
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although we could download a copy of the library, we don't need to when hosting
    it in a production environment. Less is available on a content delivery network
    hosted by CDNJS. You can instead link to this version in your code.
  prefs: []
  type: TYPE_NORMAL
- en: If you host an international site with a lot of network traffic, using a **Content
    Delivery Network** (**CDN**) hosted file will help ensure that the library is
    downloaded to a visitor's computer from a server that is geographically close
    to them. This helps in making the response quicker, as the browser will use a
    cached version on subsequent visits to the page, which saves on bandwidth. This
    is *not* recommended for development however!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to use a CDN link, then it can be found at [http://cdnjs.cloudflare.com/ajax/libs/less.js/1.7.3/less.min.js](http://cdnjs.cloudflare.com/ajax/libs/less.js/1.7.3/less.min.js).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Less on the server side
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As an alternative to compiling code on the fly, we can always use the command
    line to perform the same function—Less comes with a built-in command-line compiler
    that requires the JavaScript-based Node platform to operate.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Less using Node
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We took a look at how you can install Node in [Chapter 2](part0025_split_000.html#page
    "Chapter 2. Building a Less Development Toolkit"), *Building a Less Development
    Toolkit*; I will assume that you have installed it using the defaults, as outlined
    in that chapter. At this point, we now need to install the Less compiler, so bring
    up a command prompt, change to the location of the project folder we created earlier,
    and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see it run through a download and install of Less at the command prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Less using Node](img/00029.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the installation is complete, we can enter the following command to compile
    a Less file, which uses this syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Less will compile the output to `stdout`; if we want to use a different one,
    then we can redirect the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We're now ready to compile Less files at the command prompt—we will see this
    in action, later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Less using Bower
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using Node with the command line is not the only option we have—we can also
    install Less using the cross-platform Bower package manager system, available
    at [http://www.bower.io](http://www.bower.io).
  prefs: []
  type: TYPE_NORMAL
- en: Based on Node, Bower is designed to help with the installation of packages for
    the web, such as jQuery, AngularJS, the Font Awesome icon library, and of course,
    Less. Let's take a look at how to install it for Windows, as this has an added
    dependency of Git for Windows, which must also be installed if we are to use this
    platform.
  prefs: []
  type: TYPE_NORMAL
- en: To get the full benefit from this demonstration, you will find it better to
    use a local web server, such as WAMP. For the purposes of this book, I will assume
    this has been installed with the default settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by visiting [http://msysgit.github.io](http://msysgit.github.io) and
    downloading the latest installer, which is `Git-1.8.5.2-preview20131230.exe` at
    the time of writing. Double-click on the installer and click on **Next** to accept
    all defaults, until you get to this screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Less using Bower](img/00030.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Change the selected option to **Run Git from the Windows Command Prompt**, then
    continue by clicking on **Next** to accept the defaults for the remaining settings.
    The Git installer will install and configure the client, and once completed, it
    will display the installation notes for reading if desired.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a command prompt, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This will download and install the various packages that make up Bower—it will
    display a confirmation if the installation has been successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Less using Bower](img/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the Bower installation has been completed, change to the `www` folder
    within your web space and enter the following command to install the Less package
    for Bower:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This will perform a similar process to download and install the Less package
    for Bower, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Less using Bower](img/00032.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: At this point, Bower is now installed and available for use.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Bower package
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that Bower is installed, we can use it in our code—the major difference
    though is that it doesn't contain a version of `lessc`, so we are limited to only
    using it to compile dynamically in our code, and that developing code, which relies
    on using Node, is not supported.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this in mind, we can still use it in a development capacity, to at least
    prove that our code works—for this, we only need to make one change to our code.
    If we open a copy of `project.html`, we can change the highlighted line to use
    the Bower version of Less, instead of the original version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We can, of course, take this much further—Bower operates very much in the same
    manner as Node, allowing us to produce `.json` packages, just as we did for Node
    in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to learn more about producing packages for Bower, then Bob Yexley
    has a useful article at [http://bob.yexley.net/creating-and-maintaining-your-own-bower-package/](http://bob.yexley.net/creating-and-maintaining-your-own-bower-package/).
  prefs: []
  type: TYPE_NORMAL
- en: Let's now turn our attention to getting accustomed to the Less syntax. Before
    we do so, there is one important point we need to be aware of that concerns the
    dangers of using Less on the client side.
  prefs: []
  type: TYPE_NORMAL
- en: The dangers of using Less on the client side
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've worked through how you can install Less in your code and use it
    to compile code into valid CSS, as each page is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Surely we should be good to start using Less, right? After all, we have the
    library in place, we know how to add it in, and know something of what to expect
    when styles have been compiled...or perhaps not. There is one critical point we've
    missed; let me explain.
  prefs: []
  type: TYPE_NORMAL
- en: When Less first came out, it was originally written using Ruby; this meant code
    had to be compiled first, before including the results in website pages, as valid
    CSS. Although this was a perfectly valid procedure, it made development slower,
    as extra steps were required in order to compile the Less code and include it
    in web pages.
  prefs: []
  type: TYPE_NORMAL
- en: The rebasing of the library in JavaScript led to a 30 to 40 percent increase
    in speed—this led to the temptation to include the library directly in code, along
    with the raw Less code. This worked well enough, while removing the need to compile
    the code separately.
  prefs: []
  type: TYPE_NORMAL
- en: 'This, however, is no longer deemed good practice, at least for production sites,
    for a number of reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript can be turned off—a reliance on JavaScript to control the styling
    for a site means that it will break, resulting in a messy site!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A reliance on a JavaScript-based library means that another HTTP request has
    to be made to the server, which can result in increased loading times, particularly
    for script-heavy sites.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On a content-heavy site, with a lot of styles, this can lead to a noticeable
    increase in rendering times, as the styles have to be compiled dynamically before
    content is rendered on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most mobile platforms cannot handle the compilation of Less (nor the associated
    JavaScript file) dynamically and will just abort the execution, which will result
    in a mess.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This doesn't mean compiling on client side is a complete no-no, it should just
    be limited to working in development environments, or in instances where it is
    beneficial to store the library locally, such as within an HTML5 application.
  prefs: []
  type: TYPE_NORMAL
- en: You will note that many of the examples throughout this book will use Less client-side.
    This is to ensure that you, as the reader, are exposed to the whole experience;
    as we are working in a development/demonstration capacity, this is not an issue.
    When working on production sites, the Less code should always be precompiled first,
    before adding it to the site.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the syntax used by Less
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Enough theory about installing! Let's move on and take a look at the syntax
    that makes up Less. Over the next few chapters, we will explore each part of the
    library in depth; before doing so, we will start with a whistle-stop tour through
    some of the more important parts of the library, beginning with variables.
  prefs: []
  type: TYPE_NORMAL
- en: Working with variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we need to write CSS styles, it''s likely that we will include one or more
    styles that appear in multiple places. A great example is a number of shapes,
    where we might need to use the same value for borders or foreground colors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We could, as web designers, simply use the same color values throughout our
    code, and where appropriate, this is a perfectly valid option. However, what happens
    if we've set up a specific set of colors, only to find they all need to be changed?
  prefs: []
  type: TYPE_NORMAL
- en: Each style can be changed individually, although this assumes we manage to change
    every instance—on a style-heavy site, and with the best will in the world, there
    will always be one that we miss!
  prefs: []
  type: TYPE_NORMAL
- en: 'We can solve this easily by using variables to store a constant value for each
    color, and use it throughout the style sheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This means that if we choose to change the original color for something else,
    then all we need to do is change the color value assigned to the relevant variable,
    and Less will automatically update each instance of the variable throughout the
    rest of the code.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, we set up a variable to store the color value of `#5cb100`—if
    we wanted to change this, then we will only need to change the assigned variable
    at the start. Less will then handle the updating of every instance where the variable
    has been used, so we can be confident that the change has taken effect throughout
    our code.
  prefs: []
  type: TYPE_NORMAL
- en: We will explore more of variables in [Chapter 4](part0041_split_000.html#page
    "Chapter 4. Working with Variables, Mixins, and Functions"), *Working with Variables,
    Mixins, and Functions*.
  prefs: []
  type: TYPE_NORMAL
- en: Changing variables programmatically
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although we can set variables as static values, we might come across instances
    where it will be beneficial to programmatically change a value assigned to a Less
    variable, from within our code.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, this is not something you will have to do too often, but it is useful
    to at least know how it works. Let's take a quick look at how this works, using
    an example form that has a couple of input fields and a simple **Submit** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new file, open a copy of the `project.html` file we created earlier, then
    alter the code as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add the following code in between the `<body>` tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, add the following Less styles to a new file, saving it as `object.less`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In our example, we've added a reference to the Less object, then used the `modifyVars`
    method to change the color of the `@button-color` variable, which we specified
    in `object.less`, to `#61783F`. We will cover variables in more detail in [Chapter
    4](part0041_split_000.html#page "Chapter 4. Working with Variables, Mixins, and
    Functions"), *Working with Variables, Mixins, and Functions*.
  prefs: []
  type: TYPE_NORMAL
- en: Creating mixins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next key element of Less is the creation of mixins, or predefined blocks
    of Less code that we can reuse from one ruleset, as part of another ruleset. So,
    we take the following block of CSS as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Here, we've added a gradient color of dark green to a preset style rule called
    `.green-gradient`. So far so good; this will produce a perfectly usable gradient
    that fades from green to very dark green.
  prefs: []
  type: TYPE_NORMAL
- en: 'We could repeat this block of code for each instance where an object needs
    a similar style, but that would quickly lead to a lot of unnecessary code bloat.
    Instead, we can include the block of code as a mixin, within another style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This produces the following valid CSS—the mixin code is highlighted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Using this method means that we can cut down on the code we need to write and
    still produce the same results. As you will see in [Chapter 4](part0041_split_000.html#page
    "Chapter 4. Working with Variables, Mixins, and Functions"), *Working with Variables,
    Mixins, and Functions*, we will take this a step further—with some careful planning,
    we can begin to build up a library of mixins that we can reuse in future projects.
    The key to this is creating mixins that are sufficiently generic, which can then
    be reused as needed. Others have already created such libraries and made them
    available online—we will use some of the more well-known ones, such as **3L, More
    or Less** and **LESSHat**, in our code examples.
  prefs: []
  type: TYPE_NORMAL
- en: The great thing about Less is that when we include these mixin libraries, Less
    will only include those mixins from the libraries where they are being referenced
    in our code. While it might initially seem like we're including a lot of extra
    code, the reality is that only a fraction of the code is used—it all comes down
    to careful planning as to how much we need to use!
  prefs: []
  type: TYPE_NORMAL
- en: Nesting styles in Less
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Moving on, let''s turn our focus to another key part of the Less library: the
    ability to nest styles. No, I''m not talking about bird habits (if you excuse
    the pun!), but a way to reduce repetition when creating your styles. Let me explain
    more.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine you have a block of code similar to the following code, where a number
    of CSS styles have been created for child elements against their parent element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: On the face of it, this would appear normal code, right? Absolutely, there's
    nothing wrong with it. However, we can do better than this—as part of defining
    the class styles for each child element, there is a necessary degree of repetition
    in each style rule.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Less, we can embed or nest our styles more effectively. Our code will
    appear as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Granted that it might not always reduce the number of lines required when writing
    code in your editor. However, this is not necessarily the aim of the exercise—the
    key here is to make the code more readable, as styles that relate to a specific
    element are grouped together, so it is clearer what role they play. You will find,
    particularly on larger sites, that this can sometimes mean a reduction in the
    number of lines we need to write—it all comes down to careful planning! We will
    cover nesting in more detail in [Chapter 5](part0050_split_000.html#page "Chapter 5. Inheritance,
    Overriding, and Nesting in Less"), *Inheritance, Overriding, and Nesting in Less*.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating values using operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, our whistle-stop preview has taken us through creating variables, basic
    mixins, and reordering our code through the use of nesting. We're now going to
    step things up a little and have a look at the use of operators in our code.
  prefs: []
  type: TYPE_NORMAL
- en: Operators? Suprised? I am sure you are. Let's see what happens when we use them
    in our code. Imagine we have a number of shapes on screen, which are perfectly
    sized and positioned. We could use individual style rules for each element, but
    it would require careful calculations to ensure we had everything in the right
    place, particularly if any element needed repositioning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead, we can use simple maths to work out the size and position of each
    element automatically, based on one or more given values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: It will, of course, require that each calculation be worked out, but once this
    is done, then all we need to do is change the initial value set, and it will automatically
    update every other value.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It''s worth noting that a strict math option is available in Less, which only
    calculates math that is encapsulated in parentheses, such as this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: You can read more about this option at [http://lesscss.org/usage/#command-line-usage-strict-math](http://lesscss.org/usage/#command-line-usage-strict-math).
  prefs: []
  type: TYPE_NORMAL
- en: 'In our example, we''ve set an initial variable, `@basic-width`, of 100 px,
    then used it to double the width of `shape2`. Once the code is compiled, it will
    produce the following CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: If we were to change the value for `.shape1` to `75px` for example, then the
    width of `.shape2` will be recalculated as 2 x 75px, or `150px`. We'll be exploring
    more on the use of operators later in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Extending existing styles in Less
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is a relatively new feature in Less and works almost as a direct opposite
    to a normal mixin. It takes a little time to get used to it, so let''s examine
    a simple example—imagine you have a `div` tag that uses the following style rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The `div` tag produces a very light gray color as its background color. We
    can use this to extend another element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This compiles to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Instead of adding a whole bunch of properties of a mixin class to an existing
    class, it adds the extending selector to the existing selector so that the output
    of the extended class includes both sets of styles.
  prefs: []
  type: TYPE_NORMAL
- en: 'The beauty of this is that it results in a similar effect to using mixins,
    but without the associated bloat that you sometimes get when using mixins. It
    works by taking the contents of the existing selector, in this instance `background-color:
    #e0e0e0`, and assigning it to the new selector, `p`. This way, we can be more
    selective about reusing styles from existing elements, without the need to introduce
    new mixins.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that extend will not check for duplicates. If you extend the same selector
    twice, it will add the selector twice. For more details, see [http://lesscss.org/features/#extend-featureduplication-detection](http://lesscss.org/features/#extend-featureduplication-detection).
  prefs: []
  type: TYPE_NORMAL
- en: Compiling the code and viewing results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've seen something of the syntax of Less, let's change tack and focus
    on how to compile our Less styles to produce valid CSS. There are several ways
    to achieve this, of which we touched on some back in [Chapter 2](part0025_split_000.html#page
    "Chapter 2. Building a Less Development Toolkit"), *Building a Less Development
    Toolkit*. For the moment, we're going to concentrate on using Crunch! to compile
    our code; we will switch to using the command line later in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Using a standalone compiler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will start with the variable example shown earlier in this chapter. Let's
    begin by starting up Crunch! and then clicking on the **New LESS file** button
    in the main code window. By default, it will create a new placeholder file called
    `new.less`; paste in the code from our example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Press *Ctrl* + *S* to save the file, then save it in the `lessjs` project folder
    we created earlier, as `variables.less`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using a standalone compiler](img/00033.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on **Crunch File** to view the results of the compiled code—it will prompt
    you to assign a filename, so give it the default, which is the same name of the
    Less file, or in this instance, `variables.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using a standalone compiler](img/00034.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That was easy, huh? Any time we make a change to our Less file, all we need
    to do is save it, then click on **Crunch File** and the file is automatically
    updated. Let's test this by changing the color value assigned to the `@my-color`
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `variable.less` file, alter the value shown against `@my-color` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Resave the file, then click on **Crunch File**—the `variable.css` tab will
    flash momentarily to indicate that it has been updated. Click on it to view the
    changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using a standalone compiler](img/00035.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see, Crunch! has successfully updated the changes to our code—if
    there had been an error, it would flag an error message at the foot of our code,
    such as this one, to indicate a missing `}` at the end of our code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using a standalone compiler](img/00036.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Adding the missing `}` in this instance will fix the issue and allow Crunch!
    to recompile our code without any issue. Let's switch tack now and focus on performing
    the same operation, but this time using the command line instead.
  prefs: []
  type: TYPE_NORMAL
- en: Using the command-line compiler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've used a standalone editor to compile (or Crunch!—pun intended!)
    our code. It has successfully produced some valid CSS for us, which can be used
    in a normal HTML page if desired. This works well, but might not be the preferred
    choice for everyone!
  prefs: []
  type: TYPE_NORMAL
- en: Instead of having to use a standalone compiler, we can achieve the same result
    by using the command line instead. Granted that this is a little bit more of a
    manual process, but it does give us the opportunity to hook in the compilation
    process as a command that we can run directly from most text editors.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling Less files using the command line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The process to compile Less files via the command line is very easy. Start
    by bringing up a command prompt and changing the location to your project folder,
    which is the `lessjs` folder we created earlier. At the command prompt, type in
    the following command and then press *Enter*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: That's all that is required for a basic compilation. Less will now compile the
    `variables.less` file and save the results as `variables.css` in the same folder.
    It means that you can leave this session open in the background and rerun the
    command each time you want to make a change to the code.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Less has a number of other options available when using `lessc` via the command
    line. To view them, type in `lessc` at a command prompt to display the full list.
  prefs: []
  type: TYPE_NORMAL
- en: Watching for changes in Watch mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this exercise, we're going to take a look at a simple, but useful feature
    called the Watch mode. This allows us to make changes to any Less file while still
    in development, and for us to reload the page without having to force a complete
    reload of the page from the server. It is worth noting that the Watch mode can
    be used with the local filesystem, or with a web server—both will produce the
    same effect. For the purposes of the book, we will assume the use of the latter;
    in this case, we will use WampServer, which we covered back in [Chapter 2](part0025_split_000.html#page
    "Chapter 2. Building a Less Development Toolkit"), *Building a Less Development
    Toolkit*. If you are a Mac user, then you can use something such as MAMP; Linux
    users will have a selection of local web servers available within their distro.
  prefs: []
  type: TYPE_NORMAL
- en: We're going to test it by creating a simple form with the username and password
    fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming that we have installed WAMP, or have web space available, start by
    opening up your text editor, then add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice how `less.env = "development"` has been added. This sets Less to work
    in the development mode—this is one of several options we can set in this mode.
    For more details, it is worth reading the documentation on Less' site at [http://lesscss.org/usage/#using-less-in-the-browser](http://lesscss.org/usage/#using-less-in-the-browser).
  prefs: []
  type: TYPE_NORMAL
- en: 'Save it as `watchr.html` in the `www` folder, which should be `c:\wamp\www`
    by default. Next, in a separate file, add the following and save it as `include.less`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Fire up your browser, then navigate to it by entering the appropriate URL into
    your browser; if all is well, you will see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Watching for changes in Watch mode](img/00037.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Keep your browser window open. Now, let''s make a change to our Less code;
    in the Less file, change the `@color-button` value to `#334466`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the change to the Less file. Within a few moments, we will see the color
    of our button change from dark green to dark blue, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Watching for changes in Watch mode](img/00038.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When working with Less, compiled styles are stored in the **localStorage**
    area of the browser, and they remain there until the **localStorage** area is
    cleared. We can see this by pressing *F12*, then clicking on **DOM**, and scrolling
    down to the **localStorage** entry—assuming Firebug is installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Watching for changes in Watch mode](img/00039.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To view any changes, we have to force a refresh from the server—using the watch
    facility forces the browser into the development mode, which prevents the browser
    from caching the generated CSS files.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth noting that there are other methods you can use to watch for changes,
    such as using Grunt or Gulp. Two great examples include observr, which is available
    at [https://github.com/kevinburke/observr](https://github.com/kevinburke/observr),
    or lessc-bash, downloadable from [https://github.com/pixelass/lessc-bash](https://github.com/pixelass/lessc-bash).
    We covered using Grunt to watch for changes in [Chapter 2](part0025_split_000.html#page
    "Chapter 2. Building a Less Development Toolkit"), *Building a Less Development
    Toolkit*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're now ready to start exploring the Less syntax in more detail. Before we
    do so, let's recap what we learned throughout this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We began with how you can download and install Less; we first covered how you
    can download this as a standalone library, before incorporating it into our pages.
    We also took a brief look at how you can use a CDN link instead of downloading
    the code; while this isn't recommended for development purposes, it nevertheless
    is worthwhile for production sites, where the browser can cache the library if
    a visitor has already accessed the library on a previous site.
  prefs: []
  type: TYPE_NORMAL
- en: Moving on, we then took a look at how you install Less server-side, using the
    Node platform. We saw how easy it is to compile Less files, using a single command,
    and that we can perform this as many times as we like, by rerunning the command
    when needed. We discussed how to install Less by taking a look at the dangers
    of using it client side and how this should really be limited to use in a development
    environment only, due to the extra demands placed on the hosting server.
  prefs: []
  type: TYPE_NORMAL
- en: We then changed focus and took a whistle-stop tour on some of the key parts
    of the Less syntax, as a precursor to exploring it in more detail in later chapters.
    We covered the use of variables, mixins, nesting, operations, and extending in
    Less before switching to compiling some basic code to see how the compilation
    process works. We examined how you can use either a standalone compiler or the
    command line to perform the same operation. We finished the chapter with a look
    at how to use the `watch()` function within Less—this can be set to watch for
    any changes in the Less file and force the browser to automatically refresh the
    page, without the need for manual intervention.
  prefs: []
  type: TYPE_NORMAL
- en: We've now covered the basics of how to install Less and get it up and running
    in our code. Let's move on and begin our journey through the functionality of
    Less, starting with a look at mixins, functions, and variables.
  prefs: []
  type: TYPE_NORMAL
