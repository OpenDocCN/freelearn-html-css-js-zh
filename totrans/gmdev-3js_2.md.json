["```js\nTHREE.CubeGeometry(width, height, depth, widthSegments = 1, heightSegments = 1,\ndepthSegments = 1)\n```", "```js\nTHREE.Sphere(radius, horizontalSegments = 8, verticalSegments = 6)\n```", "```js\nTHREE.Icosahedron(radius, detail = 0); \nTHREE.Octahedron(radius, detail = 0);\nTHREE.Tetrahedron(radius, detail = 0);\n```", "```js\nTHREE.CylinderGeometry(radiusTop, radiusBottom, height, radiusSegments = 8, heightSegments = 1, openEnded = false)\n```", "```js\nTHREE.TorusGeometry(radius, tubeWidth = 40, radialSegments = 8, tubularSegments = 6)\n```", "```js\nTHREE.TorusKnotGeometry(radius, tubeWidth = 40, radialSegments, tubularSegments, p = 2, q = 3, heightScale = 1)\n```", "```js\nTHREE.PlaneGeometry(width, height, widthSegments = 1, heightSegments = 1)\n```", "```js\nTHREE.CircleGeometry(radius, numberOfSides = 8)\n```", "```js\nTHREE.RingGeometry(innerRadius, outerRadius, radialSegments = 8, ringSegments = 8)\n```", "```js\ngeometry = new THREE.IcosahedronGeometry(200, 2);\nmaterial = new THREE.MeshBasicMaterial({color: 0x000000});\nmesh = new THREE.Mesh(geometry, material);\n```", "```js\ngeometry = new THREE.IcosahedronGeometry(200, 2);\nmaterial = new THREE.LineBasicMaterial({color: 0x000000});\nmesh = new THREE.Line(geometry, material);\n```", "```js\nvar geo = new THREE.Geometry();\ngeo.vertices = [\n  new THREE.Vector3(0, 0, 0),\n  new THREE.Vector3(0, 100, 0),\n  new THREE.Vector3(0, 0, 100)\n];\ngeo.faces.push(new THREE.Face3(0, 1, 2));\ngeo.computeBoundingSphere();\n```", "```js\nvar triangle = new THREE.Shape([\n  new THREE.Vector2 (0,  50),\n  new THREE.Vector2 (50, 50),\n  new THREE.Vector2 (50,  0)\n]);\nvar geometry = new THREE.ExtrudeGeometry(triangle, {\n  bevelEnabled: false,\n  amount: 30\n});\n```", "```js\n<script src=\"img/helvetiker_bold.typeface.js\"></script>\n<script src=\"img/helvetiker_regular.typeface.js\"></script>\n```", "```js\nnew THREE.TextGeometry(\"Text message goes here\", {\n  size: 30,\n  height: 20, // extrude thickness\n  font: \"helvetiker\", // font family in lower case\n  weight: \"normal\", // or e.g. bold\n  style: \"normal\", // or e.g. italics\n  bevelEnabled: false\n});\n```", "```js\nvar mat1 = new THREE.MeshPhongMaterial({ color: 0x0000ff  });\nvar mat2 = new THREE.MeshPhongMaterial({ color: 0xff0000 });\nvar mat3 = new THREE.MeshPhongMaterial({ color: 0xffffff });\nvar materials = [mat1, mat2, mat3];\nmaterial = new THREE.MeshFaceMaterial(materials);\nfor (var i = 0, l = geometry.faces.length; i < l; i++) {\n  geometry.faces[i].materialIndex = i % l;\n}\n```", "```js\nvar image = THREE.ImageUtils.loadTexture('image.jpg');\nnew THREE.MeshBasicMaterial({map: image});\n```", "```js\nTHREE.ImageUtils.loadTexture('earth.jpg', undefined, function(texture) {\n  geometry = new THREE.SphereGeometry(280, 20, 20);\n  material = new THREE.MeshBasicMaterial({map: texture, overdraw: true});\n  mesh = new THREE.Mesh(geometry, material);\n  mesh.rotation.x = 30 * Math.PI / 180;\n  scene.add(mesh);\n});\n```", "```js\nvar geo = new THREE.CubeGeometry(1, 1, 1);\ngeo.applyMatrix(new THREE.Matrix4().makeTranslation(0, 0.5, 0));\nvar material = new THREE.MeshDepthMaterial({overdraw: true});\n```", "```js\nfor (var i = 0; i < 300; i++) {\n  var building = new THREE.Mesh(geo.clone(), material.clone());\n  building.position.x = Math.floor(Math.random() * 200 - 100) * 4;\n  building.position.z = Math.floor(Math.random() * 200 - 100) * 4;\n  building.scale.x = Math.random() * 50 + 10;\n  building.scale.y = Math.random() * building.scale.x * 8 + 8;\n  building.scale.z = building.scale.x;\n  scene.add(building);\n}\n```", "```js\ncamera.position.y = 400;\ncamera.position.z = 400;\ncamera.rotation.x = -45 * Math.PI / 180;\n```", "```js\nvar geo = new THREE.PlaneGeometry(2000, 2000, 20, 20);\nvar mat = new THREE.MeshBasicMaterial({color: 0x9db3b5, overdraw: true});\nvar mesh = new THREE.Mesh(geo, mat);\nmesh.rotation.x = -90 * Math.PI / 180;\nscene.add(mesh);\n```", "```js\nvar camera, scene, renderer;\n\nfunction setup() {\n  document.body.style.backgroundColor = '#d7f0f7';\n  setupThreeJS();\n  setupWorld();\n\n  requestAnimationFrame(function animate() {\n    renderer.render(scene, camera);\n    requestAnimationFrame(animate);\n  });\n}\n\nfunction setupThreeJS() {\n  scene = new THREE.Scene();\n\n  camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 10000);\n  camera.position.y = 400;\n  camera.position.z = 400;\n  camera.rotation.x = -45 * Math.PI / 180;\n\n  renderer = new THREE.CanvasRenderer();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  document.body.appendChild(renderer.domElement);\n}\n\nfunction setupWorld() {\n  // Floor\n  var geo = new THREE.PlaneGeometry(2000, 2000, 20, 20);\n  var mat = new THREE.MeshBasicMaterial({color: 0x9db3b5, overdraw: true});\n  var floor = new THREE.Mesh(geo, mat);\n  floor.rotation.x = -90 * Math.PI / 180;\n  scene.add(floor);\n\n  // Original building\n  var geometry = new THREE.CubeGeometry(1, 1, 1);\n  geometry.applyMatrix(new THREE.Matrix4().makeTranslation(0, 0.5, 0));\n  var material = new THREE.MeshDepthMaterial({overdraw: true});\n\n  // Cloned buildings\n  for (var i = 0; i < 300; i++) {\n    var building = new THREE.Mesh(geometry.clone(), material.clone());\n    building.position.x = Math.floor(Math.random() * 200 - 100) * 4;\n    building.position.z = Math.floor(Math.random() * 200 - 100) * 4;\n    building.scale.x  = Math.random() * 50 + 10;\n    building.scale.y  = Math.random() * building.scale.x * 8 + 8;\n    building.scale.z  = building.scale.x;\n    scene.add(building);\n  }\n}\n\n// Run it!\nsetup();\n```", "```js\nvar cityGeometry = new THREE.Geometry();\nfor (var i = 0; i < 300; i++) {\n var building = new THREE.Mesh(geometry.clone());\n  building.position.x = Math.floor(Math.random() * 200 - 100) * 4;\n  building.position.z = Math.floor(Math.random() * 200 - 100) * 4;\n  building.scale.x  = Math.random() * 50 + 10;\n  building.scale.y  = Math.random() * building.scale.x * 8 + 8;\n  building.scale.z  = building.scale.x;\n THREE.GeometryUtils.merge(cityGeometry, building);\n}\nvar city = new THREE.Mesh(cityGeometry, material);\nscene.add(city);\n\n```", "```js\nTHREE.AmbientLight(color)\n```", "```js\nTHREE.DirectionalLight(color, intensity = 1)\n```", "```js\nTHREE.HemisphereLight(skyColor, groundColor, intensity = 1)\n```", "```js\nTHREE.PointLight(color, intensity = 1, radius = 0)\n```", "```js\nTHREE.SpotLight(color, intensity, radius = 0, coneAngle = Math.PI / 3, falloff = 10)\n```", "```js\nvar material = new THREE.MeshPhongMaterial({overdraw: true, color: 0xcccccc});\n```", "```js\nvar light = new THREE.DirectionalLight(0xf6e86d, 1);\nlight.position.set(1, 3, 2);\nscene.add(light);\n```", "```js\nrenderer = new THREE.WebGLRenderer();\n```", "```js\nscene.fog = new THREE.FogExp2(0x9db3b5, 0.002);\n```", "```js\nscene.fog = new THREE.Fog(0x9db3b5, 0, 800);\n```", "```js\nrenderer.shadowMapEnabled = true;\n```", "```js\nfloor.receiveShadow = true;\ncity.castShadow = true;\ncity.receiveShadow = true;\n```", "```js\nlight.castShadow = true;\nlight.shadowDarkness = 0.5;\nlight.shadowMapWidth = 2048;\nlight.shadowMapHeight = 2048;\nlight.position.set(500, 1500, 1000); \nlight.shadowCameraFar = 2500; \n// DirectionalLight only; not necessary for PointLight\nlight.shadowCameraLeft = -1000;\nlight.shadowCameraRight = 1000;\nlight.shadowCameraTop = 1000;\nlight.shadowCameraBottom = -1000;\n```", "```js\nlight.shadowCameraVisible = true;\n```", "```js\nrenderer = new THREE.WebGLRenderer({antialias: true});\n```"]