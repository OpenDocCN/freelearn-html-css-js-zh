- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: The Assert Wrapper – the Importance of Embedded Details
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 断言包装器 – 内嵌细节的重要性
- en: In this chapter, we will be writing our first assertion wrapper. Assertions
    allow us to pass or fail a test as well as add detail regarding the expected and
    actual results. WebdriverIO has at least three ways to implement assertions and
    each has its own style. First, there is the standard Jest `expect-webdriverio`
    for all examples in this book. However, a little background on how these approaches
    differ should be noted.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将编写我们的第一个断言包装器。断言允许我们通过或失败一个测试，并添加有关预期和实际结果的相关细节。WebdriverIO至少有三种实现断言的方法，每种方法都有自己的风格。首先，有标准的Jest
    `expect-webdriverio`，用于本书中的所有示例。然而，关于这些方法如何不同的背景知识应该被注意。
- en: 'We''ll cover the following main topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主要内容：
- en: expect, assert, and should
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: expect, assert, and should
- en: Timeout
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超时
- en: Hard and soft expect assertions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬和软expect断言
- en: Allure reports
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Allure报告
- en: expect, assert, and should –how did we get here?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: expect, assert, and should –我们是如何到达这里的？
- en: Let’s take a look at a brief history of JavaScript assertion libraries to understand
    why we will be making some of the choices in our custom `assert()` wrapper.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要回顾一下JavaScript断言库的历史，以了解为什么我们将在自定义`assert()`包装器中做出一些选择。
- en: What is Jasmine?
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Jasmine是什么？
- en: 'Jasmine was first released in 2010\. It was designed to provide a simple and
    flexible way to add assertions. It provides a set of built-in assertion methods.
    Note that the interface is `expect` with chainable methods such as `.toBe`, `.toEqual`,
    and `.not`. Here is a sample assertion in Jasmine:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Jasmine首次发布于2010年。它旨在提供一种简单灵活的方式来添加断言。它提供了一套内置的断言方法。注意接口是`expect`，具有链式方法，如`.toBe`、`.toEqual`和`.not`。以下是Jasmine中的一个示例断言：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding test calls a simple function that returns the sum of two arguments
    passed to the `AddNumbers()` function.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的测试调用了一个简单的函数，该函数返回传递给`AddNumbers()`函数的两个参数的和。
- en: 'This is a basic arithmetic assertion. If we run it, we notice the pass result
    does not report anything. Only the failure is reported. It really does not provide
    much detail when passing or failing:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基本的算术断言。如果我们运行它，我们会注意到通过的结果没有报告任何内容。只有失败被报告。在通过或失败时，它实际上并没有提供很多细节：
- en: '![Figure 8.1: Results of a pass and intentional fail of the AddNumbers() function](img/B19395_08_1.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图8.1：AddNumbers()函数通过和故意失败的测试结果](img/B19395_08_1.jpg)'
- en: 'Figure 8.1: Results of a pass and intentional fail of the AddNumbers() function'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1：AddNumbers()函数通过和故意失败的测试结果
- en: In a test automation project, we would need to extract the object properties
    or values and validate that against the expected result. The detailed result may
    only report expected `[true]` actual `[false]`. To provide this output would require
    a lot of additional code to include if we had it performed at the test or feature
    file level.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个测试自动化项目中，我们需要提取对象属性或值，并验证它们与预期结果是否一致。详细的结果可能只报告预期的`[true]`和实际的`[false]`。要提供这种输出，需要包含大量的附加代码，如果我们在测试或功能文件级别执行它。
- en: What is Jest?
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Jest是什么？
- en: 'In 2013, Jest was released by Facebook and became widely adopted by the React
    community. It has a similar assertion syntax as Jasmine with additional features
    including snapshot testing and code coverage reporting. Note the interface is
    also `expect`. Here is the same assertion in Jest:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在2013年，Jest由Facebook发布，并被React社区广泛采用。它具有与Jasmine类似的断言语法，并增加了包括快照测试和代码覆盖率报告等额外功能。注意接口也是`expect`。以下是Jest中的相同断言：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'However, Jest on its own does not support any messages to report the details
    of the validation. The `jest-expect-message` package should be included to provide
    this functionality with `npm` or `yarn`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Jest本身不支持任何消息来报告验证的详细信息。应包含`jest-expect-message`包以提供此功能，使用`npm`或`yarn`：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now that we have added the `expect` message package for Jest, we can provide
    more descriptive results:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为Jest添加了`expect`消息包，我们可以提供更详细的输出：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Jest is included as part of the WebdriverIO package, but WDIO has an extended
    assertion library of its own. This allows us to pass elements directly for assertions
    rather than writing our own.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Jest作为WebdriverIO包的一部分被包含，但WDIO有一个扩展的断言库。这允许我们直接传递元素进行断言，而不是编写自己的代码。
- en: What is Chai?
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Chai是什么？
- en: 'Chai is a popular assertion library for JavaScript that provides three interfaces
    for making assertions:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Chai是JavaScript中流行的断言库，它提供了三个接口来进行断言：
- en: '`should (BDD)`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`should (BDD)`'
- en: '`expect (BDD)`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expect (BDD)`'
- en: '`assert (TDD)`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assert (TDD)`'
- en: Each of these interfaces has its own pros and cons, which we will look into
    in the subsections.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这些接口各有优缺点，我们将在子节中探讨。
- en: Should
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应该
- en: 'The `should` interface extends all objects with a `should` property that can
    be used to make assertions. Here is a Chai `should` sample:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`should` 接口扩展了所有对象，使其具有一个 `should` 属性，可以用来进行断言。以下是一个 Chai `should` 示例：'
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: While this interface allows for readable and expressive code, it can lead to
    unexpected side effects in the way that it modifies object behaviors. For this
    reason, it will not be a part of our implementation.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个接口允许编写可读性和表达性强的代码，但它可能会以修改对象行为的方式产生意外的副作用。因此，它将不会成为我们实现的一部分。
- en: Assert
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 断言
- en: 'The `assert` interface provides a more classical style of making assertions,
    using traditional methods such as `assert.equal()` and `assert.notEqual()`. This
    interface is useful for developers who are already familiar with other testing
    frameworks or who prefer a more traditional style of testing. However, it can
    be less readable and expressive than the `should` or `expect` interfaces, especially
    when dealing with more complex assertions:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`assert` 接口提供了一种更传统的断言方式，使用传统的如 `assert.equal()` 和 `assert.notEqual()` 方法。这个接口对于已经熟悉其他测试框架或更喜欢更传统测试风格的开发者来说很有用。然而，它可能不如
    `should` 或 `expect` 接口可读性和表达性强，尤其是在处理更复杂的断言时：'
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Expect
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 期待
- en: 'The Chai `expect` interface provides a more flexible and chainable way of making
    assertions. This interface is designed to be easy to read and write and provides
    a fluent syntax that can be used to make complex assertions in a clear and concise
    way. Here is a Chai `should` sample:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Chai `expect` 接口提供了一种更灵活和可链式的断言方式。这个接口旨在易于阅读和编写，并提供了一种流畅的语法，可以用来以清晰和简洁的方式做出复杂的断言。以下是一个
    Chai `should` 示例：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Using Chai’s `expect` interface is the preferred way of making assertions.
    It provides a lot of flexibility without the side effects of `should` with a similar
    syntax to the Jest assertions. There is a problem, we don’t get all the details.
    Consider this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Chai 的 `expect` 接口是进行断言的首选方式。它提供了很多灵活性，而没有 `should` 的副作用，并且语法与 Jest 断言相似。但是有一个问题，我们得不到所有细节。考虑以下：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Sure, the tests passed, but what exactly did it do? There is no expected result,
    actual results, or any detail of what the assertion is doing. This is why we need
    wrappers to simplify our reporting of our results.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，测试通过了，但它到底做了什么？没有预期结果，实际结果，或者断言做了什么的任何细节。这就是为什么我们需要包装器来简化我们结果的报告。
- en: 'Let us look at a failing assertion:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个失败的断言：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now we are over-reporting as we had one validation. The error was reported three
    times to the output, and that is a problem.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们过度报告了，因为我们只有一个验证。错误被报告了三次到输出中，这是一个问题。
- en: 'There is one problem – all of these assertion packages are designed to perform
    a hard expect ending the test execution, not a soft expect that will allow the
    test to perform more validations:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 存在一个问题——所有这些断言包都是设计用来执行硬断言以结束测试执行，而不是软断言，后者将允许测试执行更多验证：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Notice it takes 6 seconds for the validation to fail. Do we really need to wait
    that much time? We already have the `pageSync()` method consuming all the time
    needed.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注意验证失败需要6秒钟。我们真的需要等待那么长时间吗？我们已经有 `pageSync()` 方法消耗了所有需要的时间。
- en: Timeout – delay of game
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超时——比赛延迟
- en: 'The default timeout for a WebdriverIO `expect` matcher is 3 seconds and the
    interval is 100 ms. That is 30 checks over 3 seconds, which is far better than
    waiting 30 seconds as is the industry standard. Remember we are using the `pageSync()`
    method to burn the time that the page uses to build. It makes sense that our assertions
    should be available almost immediately. To adjust the timeout and interval of
    the `expect-webdriverio` assertion, we can make a change in the WebdriverIO hooks
    section of the `wdio.config.ts` file:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: WebdriverIO `expect` 匹配器的默认超时时间为3秒，间隔为100毫秒。这意味着在3秒内有30次检查，这比行业标准等待30秒要好得多。记住我们正在使用
    `pageSync()` 方法来消耗页面构建所需的时间。我们的断言几乎立即可用是有意义的。要调整 `expect-webdriverio` 断言的超时时间和间隔，我们可以在
    `wdio.config.ts` 文件的 WebdriverIO 钩子部分进行更改：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This code will now change our `expect` assertions to be executed 20 times.
    The wait timeout will be 5 seconds. The check will be performed every 1/4 second:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码现在将把我们的`expect`断言执行次数改为20次。等待超时时间为5秒。检查将每1/4秒进行一次：
- en: '`Spec Files: 0 passed, 1 failed, 1 total (100% completed)` `in 00:00:05`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`Spec 文件：0 通过，1 失败，1 总计（100% 完成）` `耗时 00:00:05`'
- en: The resulting time is now reduced to an optimal amount. It is just a second,
    but a little here and there saves minutes and hours.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 结果时间现在减少到了最优量。这仅仅是一秒钟，但点点滴滴的节省可以节省分钟和小时。
- en: What is expect-webdriverio?
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是expect-webdriverio？
- en: For the purpose of this book, we will be using `expect-webdriverio`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这本书的目的，我们将使用`expect-webdriverio`。
- en: 'WebdriverIO uses the `expect-webdriverio` assertion library, which is an extension
    of the Jest `expect` interface. It adds browser and element assertions:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: WebdriverIO使用`expect-webdriverio`断言库，它是Jest `expect`接口的扩展。它增加了浏览器和元素断言：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: However, all these libraries are missing the ability to execute a soft assertion.
    For that, we turn to Chai and the `soft-assert` package.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，所有这些库都缺少执行软断言的能力。为此，我们转向Chai和`soft-assert`包。
- en: What are hard and soft expect assertions?
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是硬断言和软断言？
- en: By default, all of the assertion packages perform a **hard expect assertion**,
    which is more commonly known as a **hard assert**. This means that when an assertion
    fails, the test ends. What kind of superhero leaves the fight after the first
    punch? This is problematic as we might have four or five values on a single page
    that we want to assert. What is the point of failing on the first assertion and
    leaving the next four out of the results? We want the power to continue the fight
    even if we take one to the chin along the way.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，所有的断言包都会执行**硬断言**，这更常被称为**硬断言**。这意味着当断言失败时，测试就会结束。哪种超级英雄会在第一拳之后离开战斗？这很成问题，因为我们可能在一个页面上有四到五个我们想要断言的值。在第一个断言失败后，留下接下来的四个不纳入结果有什么意义？我们希望即使在过程中受到打击，也能继续战斗的力量。
- en: 'That is why we strive to add the ability of a **soft expect** (more commonly
    known as **soft assert**) into the framework. This feature is built into Java’s
    TestNG. It seems a shame that it is missing from all the popular JavaScript assertion
    libraries. If the buttons exist for navigation, the best testing frameworks will
    be able to get to the end point and have all validations executed, no matter whether
    they pass or fail. That is our ultimate dual goal: more results in our report
    and less repetitious piecemeal runs.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 正因如此，我们努力将**软期望**（更常被称为**软断言**）的功能添加到框架中。这个特性内置在Java的TestNG中。它似乎有些遗憾，这个特性在所有流行的JavaScript断言库中都缺失了。如果存在用于导航的按钮，最好的测试框架将能够到达终点并执行所有验证，无论它们是成功还是失败。这就是我们的最终双重目标：报告中的结果更多，重复的零散运行更少。
- en: Putting it all together
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将所有这些放在一起
- en: Now, we need to protect our identities; to accomplish this feat, we use `expect-webdriverio`,
    which extends the Chai `expect` interface.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要保护我们的身份；为了完成这个壮举，我们使用`expect-webdriverio`，它扩展了Chai `expect`接口。
- en: 'We can now perform a failing soft assertion on our **Bogus** button and still
    allow the next assertions to execute:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以在我们的**Bogus**按钮上执行失败的软断言，同时仍然允许后续的断言执行：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We have our power rings. When we smash them together, we will take on multiple
    forms, as a helper `expectAdv()` wrapper will be used to increase the flexibility
    in the amount of detail being provided in a consistent format. This section will
    take us beyond generic fail messages and detail the pass results with the least
    amount of repeated code.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有了我们的力量戒指。当我们把它们砸在一起时，我们将采取多种形式，因为将使用辅助`expectAdv()`包装器来增加在一致格式中提供详细信息的灵活性。本节将使我们超越通用的失败消息，并详细说明通过最少重复代码的通过结果。
- en: The `expect-webdriverio` library supports 23 different element matcher assertions.
    Eight are substring matchers of other full-string assertions. Others, such as
    `.toBePresent`, `.toHaveChildren`, and `.toBeDisplayedInViewPort`, are in the
    lesser part of the 80/20 relevancy.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`expect-webdriverio`库支持23种不同的元素匹配断言。其中八个是其他完整字符串断言的子字符串匹配器。其他，如`.toBePresent`、`.toHaveChildren`和`.toBeDisplayedInViewPort`，在80/20的相关性中占较小的部分。'
- en: What are soft assertions and why would we need them?
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软断言是什么？为什么我们需要它们？
- en: An efficient test will be able to perform multiple validations on a page, but
    if the first of three assertions fail, the test will immediately end. Maybe only
    the first assertion is failing, or maybe all three. We want the full count of
    assertions, not the least. Otherwise, it becomes a piecemeal process and slows
    us down.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一个高效的测试能够在页面上执行多个验证，但如果三个断言中的第一个失败，测试将立即结束。可能只有第一个断言失败，或者可能所有三个都失败了。我们希望得到断言的完整计数，而不是最少的。否则，它就变成了零散的过程，并减慢了我们的速度。
- en: Note that `Expect.toBeExist`, `Expect.toBePresent`, and `Expect.toBeExisting`
    only mean the element is in the DOM. They do not explicitly mean the element is
    visible to the user, so they are, for the most part, impractical.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`Expect.toBeExist`、`Expect.toBePresent`和`Expect.toBeExisting`仅意味着元素在DOM中。它们并不明确表示元素对用户是可见的，因此它们在大多数情况下是不切实际的。
- en: 'WebdriverIO provides positive and negative checks of the status of elements:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: WebdriverIO提供了对元素状态的积极和消极检查：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'It also provides two ways to check whether an element contains text or a value:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 它还提供了两种检查元素是否包含文本或值的方法：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'It also provides validations of IDs, elements, and attributes, which can be
    exact or string subsets:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 它还提供了对ID、元素和属性的验证，这些验证可以是精确的或字符串子集：
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Soft asserts – allowing a test to continue after an assertion fails
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软断言 - 允许在断言失败后继续测试
- en: 'In our custom `expectAdv` wrapper, we will implement a few concepts that allow
    it to be read similarly to a plain English sentence. The first parameter, `actual`,
    is intentionally assigned the `any` type. This is because we want the flexibility
    to validate either an element or a string value:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的自定义`expectAdv`包装器中，我们将实现一些概念，使其可以像普通英语句子一样阅读。第一个参数`actual`有意分配了`any`类型。这是因为我们希望有灵活性来验证元素或字符串值：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Here, `assertionType` is a string that indicates the assertion to perform. An
    element might *exist*; the element might *equal* an expected string.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`assertionType`是一个字符串，表示要执行的断言。元素可能*存在*；元素可能*等于*一个预期的字符串。
- en: The expected argument is optional as it would not be required if an element
    “is enabled”.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 预期参数是可选的，因为如果元素“已启用”，则不需要它。
- en: Quick tip
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 快速提示
- en: The description is required. Every validation should have some detail about
    what is being performed. Thus, if it is missing, a helpful nudge to add transparency
    to our test case is provided.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 描述是必需的。每次验证都应该有一些关于正在执行的操作的详细信息。因此，如果缺少描述，将提供一个有用的提示，以增加我们测试用例的透明度。
- en: In the case of a soft assertion, the method returns a Boolean `true` or `false`
    value. This means our test cases can be optimized with decision trees. This concept
    will be used in a later chapter when we discuss how to have steps that continue
    without failure even if the element does not exist.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在软断言的情况下，该方法返回一个布尔值`true`或`false`。这意味着我们的测试用例可以通过决策树进行优化。这个概念将在后续章节中讨论，届时我们将讨论如何使步骤在没有失败的情况下继续执行，即使元素不存在。
- en: Introduction to Allure reports
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Allure报告简介
- en: 'Allure is a powerful reporting framework that presents concise and well-organized
    reports. You can access this report template by installing the `@wdio/allure-reporter`
    and `allure-commandline` packages:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Allure是一个强大的报告框架，它提供了简洁且组织良好的报告。您可以通过安装`@wdio/allure-reporter`和`allure-commandline`包来访问此报告模板：
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Allure exports reports in a standardized format called Allure results format.
    To generate comprehensive reports, you can utilize the Allure framework through
    the command-line interface:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Allure以称为Allure结果格式的标准化格式导出报告。要生成全面的报告，您可以通过命令行界面利用Allure框架：
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The Allure Framework is a versatile and lightweight test reporting tool supporting
    multiple programming languages. It provides a succinct presentation of test results
    in HTML format, empowering all stakeholders in the development process to extract
    valuable insights from routine test executions:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Allure框架是一个多才多艺且轻量级的测试报告工具，支持多种编程语言。它以HTML格式简洁地展示测试结果，使开发过程中的所有利益相关者都能从常规测试执行中提取有价值的见解：
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: By adding these Allure statements into our framework, we can provide significantly
    more detail to stakeholders in a way that is visually informative.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将这些Allure语句添加到我们的框架中，我们可以以视觉信息丰富的方式向利益相关者提供更多细节。
- en: '![Figure 8.2: Samples of test results in Allure with historical trends](img/B19395_08_2.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图8.2：Allure中的测试结果样本及其历史趋势](img/B19395_08_2.jpg)'
- en: 'Figure 8.2: Samples of test results in Allure with historical trends'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2：Allure中的测试结果样本及其历史趋势
- en: Allure reports can organize tests into subcategories. This makes it clear whether
    related tests are failing. It also shows how the runs have been performing over
    time. This can show both an increase in test case coverage as well trends where
    results are improving or recently worsening.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Allure报告可以将测试组织成子类别。这使得相关测试是否失败变得清晰。它还显示了运行随时间的变化情况。这可以显示测试用例覆盖率增加的趋势以及结果改善或最近恶化的趋势。
- en: '![Figure 8.3: Sample of step-by-step execution with a screen capture of the
    Login page'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.3：带有登录页面屏幕捕获的逐步执行样本]'
- en: '](img/B19395_08_3.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B19395_08_3.jpg)'
- en: 'Figure 8.3: Sample of step-by-step execution with a screen capture of the Login
    page'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3：逐步执行的示例，包含登录页面的屏幕截图
- en: These reports also provide the option to add screen captures such as X-ray vision.
    This can give vital clues as to what is occurring when the test fails, particularly
    if we are running in the cloud without a direct live view into the system as it
    runs.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这些报告还提供了添加屏幕截图的选项，例如X射线视觉。这可以提供有关测试失败时发生情况的宝贵线索，尤其是如果我们正在云中运行而没有直接实时查看系统运行情况时。
- en: Summary
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this section, we talked about the history of assert, expect, and should assertions.
    We introduced the concepts of hard and soft assertions, why they are important
    distinctions, and when they should be implemented. We also introduced Allure reports
    to provide details of all events being executed and the results of whether they
    pass or fail. Allure reports will further enhance our view in the future by providing
    a historical view of tests that pass and fail. In the next chapter, we'll build
    the page object model.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了assert、expect和should断言的历史。我们介绍了硬断言和软断言的概念，为什么它们是重要的区分，以及何时应该实现它们。我们还介绍了Allure报告，以提供正在执行的所有事件的详细信息以及它们是否通过或失败的结果。Allure报告将通过提供通过和失败的测试的历史视图来进一步增强我们的视图。在下一章中，我们将构建页面对象模型。
