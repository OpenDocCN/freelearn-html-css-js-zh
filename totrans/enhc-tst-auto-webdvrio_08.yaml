- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Assert Wrapper – the Importance of Embedded Details
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be writing our first assertion wrapper. Assertions
    allow us to pass or fail a test as well as add detail regarding the expected and
    actual results. WebdriverIO has at least three ways to implement assertions and
    each has its own style. First, there is the standard Jest `expect-webdriverio`
    for all examples in this book. However, a little background on how these approaches
    differ should be noted.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll cover the following main topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: expect, assert, and should
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Timeout
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hard and soft expect assertions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allure reports
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: expect, assert, and should –how did we get here?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s take a look at a brief history of JavaScript assertion libraries to understand
    why we will be making some of the choices in our custom `assert()` wrapper.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: What is Jasmine?
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Jasmine was first released in 2010\. It was designed to provide a simple and
    flexible way to add assertions. It provides a set of built-in assertion methods.
    Note that the interface is `expect` with chainable methods such as `.toBe`, `.toEqual`,
    and `.not`. Here is a sample assertion in Jasmine:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding test calls a simple function that returns the sum of two arguments
    passed to the `AddNumbers()` function.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a basic arithmetic assertion. If we run it, we notice the pass result
    does not report anything. Only the failure is reported. It really does not provide
    much detail when passing or failing:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1: Results of a pass and intentional fail of the AddNumbers() function](img/B19395_08_1.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.1: Results of a pass and intentional fail of the AddNumbers() function'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: In a test automation project, we would need to extract the object properties
    or values and validate that against the expected result. The detailed result may
    only report expected `[true]` actual `[false]`. To provide this output would require
    a lot of additional code to include if we had it performed at the test or feature
    file level.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: What is Jest?
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In 2013, Jest was released by Facebook and became widely adopted by the React
    community. It has a similar assertion syntax as Jasmine with additional features
    including snapshot testing and code coverage reporting. Note the interface is
    also `expect`. Here is the same assertion in Jest:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'However, Jest on its own does not support any messages to report the details
    of the validation. The `jest-expect-message` package should be included to provide
    this functionality with `npm` or `yarn`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now that we have added the `expect` message package for Jest, we can provide
    more descriptive results:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Jest is included as part of the WebdriverIO package, but WDIO has an extended
    assertion library of its own. This allows us to pass elements directly for assertions
    rather than writing our own.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: What is Chai?
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Chai is a popular assertion library for JavaScript that provides three interfaces
    for making assertions:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '`should (BDD)`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`expect (BDD)`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assert (TDD)`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these interfaces has its own pros and cons, which we will look into
    in the subsections.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Should
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `should` interface extends all objects with a `should` property that can
    be used to make assertions. Here is a Chai `should` sample:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: While this interface allows for readable and expressive code, it can lead to
    unexpected side effects in the way that it modifies object behaviors. For this
    reason, it will not be a part of our implementation.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Assert
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `assert` interface provides a more classical style of making assertions,
    using traditional methods such as `assert.equal()` and `assert.notEqual()`. This
    interface is useful for developers who are already familiar with other testing
    frameworks or who prefer a more traditional style of testing. However, it can
    be less readable and expressive than the `should` or `expect` interfaces, especially
    when dealing with more complex assertions:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Expect
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Chai `expect` interface provides a more flexible and chainable way of making
    assertions. This interface is designed to be easy to read and write and provides
    a fluent syntax that can be used to make complex assertions in a clear and concise
    way. Here is a Chai `should` sample:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Using Chai’s `expect` interface is the preferred way of making assertions.
    It provides a lot of flexibility without the side effects of `should` with a similar
    syntax to the Jest assertions. There is a problem, we don’t get all the details.
    Consider this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Sure, the tests passed, but what exactly did it do? There is no expected result,
    actual results, or any detail of what the assertion is doing. This is why we need
    wrappers to simplify our reporting of our results.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us look at a failing assertion:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now we are over-reporting as we had one validation. The error was reported three
    times to the output, and that is a problem.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 'There is one problem – all of these assertion packages are designed to perform
    a hard expect ending the test execution, not a soft expect that will allow the
    test to perform more validations:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Notice it takes 6 seconds for the validation to fail. Do we really need to wait
    that much time? We already have the `pageSync()` method consuming all the time
    needed.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Timeout – delay of game
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The default timeout for a WebdriverIO `expect` matcher is 3 seconds and the
    interval is 100 ms. That is 30 checks over 3 seconds, which is far better than
    waiting 30 seconds as is the industry standard. Remember we are using the `pageSync()`
    method to burn the time that the page uses to build. It makes sense that our assertions
    should be available almost immediately. To adjust the timeout and interval of
    the `expect-webdriverio` assertion, we can make a change in the WebdriverIO hooks
    section of the `wdio.config.ts` file:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This code will now change our `expect` assertions to be executed 20 times.
    The wait timeout will be 5 seconds. The check will be performed every 1/4 second:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '`Spec Files: 0 passed, 1 failed, 1 total (100% completed)` `in 00:00:05`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: The resulting time is now reduced to an optimal amount. It is just a second,
    but a little here and there saves minutes and hours.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: What is expect-webdriverio?
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the purpose of this book, we will be using `expect-webdriverio`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'WebdriverIO uses the `expect-webdriverio` assertion library, which is an extension
    of the Jest `expect` interface. It adds browser and element assertions:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: However, all these libraries are missing the ability to execute a soft assertion.
    For that, we turn to Chai and the `soft-assert` package.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: What are hard and soft expect assertions?
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, all of the assertion packages perform a **hard expect assertion**,
    which is more commonly known as a **hard assert**. This means that when an assertion
    fails, the test ends. What kind of superhero leaves the fight after the first
    punch? This is problematic as we might have four or five values on a single page
    that we want to assert. What is the point of failing on the first assertion and
    leaving the next four out of the results? We want the power to continue the fight
    even if we take one to the chin along the way.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'That is why we strive to add the ability of a **soft expect** (more commonly
    known as **soft assert**) into the framework. This feature is built into Java’s
    TestNG. It seems a shame that it is missing from all the popular JavaScript assertion
    libraries. If the buttons exist for navigation, the best testing frameworks will
    be able to get to the end point and have all validations executed, no matter whether
    they pass or fail. That is our ultimate dual goal: more results in our report
    and less repetitious piecemeal runs.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Putting it all together
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we need to protect our identities; to accomplish this feat, we use `expect-webdriverio`,
    which extends the Chai `expect` interface.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now perform a failing soft assertion on our **Bogus** button and still
    allow the next assertions to execute:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We have our power rings. When we smash them together, we will take on multiple
    forms, as a helper `expectAdv()` wrapper will be used to increase the flexibility
    in the amount of detail being provided in a consistent format. This section will
    take us beyond generic fail messages and detail the pass results with the least
    amount of repeated code.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: The `expect-webdriverio` library supports 23 different element matcher assertions.
    Eight are substring matchers of other full-string assertions. Others, such as
    `.toBePresent`, `.toHaveChildren`, and `.toBeDisplayedInViewPort`, are in the
    lesser part of the 80/20 relevancy.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: What are soft assertions and why would we need them?
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An efficient test will be able to perform multiple validations on a page, but
    if the first of three assertions fail, the test will immediately end. Maybe only
    the first assertion is failing, or maybe all three. We want the full count of
    assertions, not the least. Otherwise, it becomes a piecemeal process and slows
    us down.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Note that `Expect.toBeExist`, `Expect.toBePresent`, and `Expect.toBeExisting`
    only mean the element is in the DOM. They do not explicitly mean the element is
    visible to the user, so they are, for the most part, impractical.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'WebdriverIO provides positive and negative checks of the status of elements:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'It also provides two ways to check whether an element contains text or a value:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'It also provides validations of IDs, elements, and attributes, which can be
    exact or string subsets:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Soft asserts – allowing a test to continue after an assertion fails
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our custom `expectAdv` wrapper, we will implement a few concepts that allow
    it to be read similarly to a plain English sentence. The first parameter, `actual`,
    is intentionally assigned the `any` type. This is because we want the flexibility
    to validate either an element or a string value:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Here, `assertionType` is a string that indicates the assertion to perform. An
    element might *exist*; the element might *equal* an expected string.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: The expected argument is optional as it would not be required if an element
    “is enabled”.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Quick tip
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: The description is required. Every validation should have some detail about
    what is being performed. Thus, if it is missing, a helpful nudge to add transparency
    to our test case is provided.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: In the case of a soft assertion, the method returns a Boolean `true` or `false`
    value. This means our test cases can be optimized with decision trees. This concept
    will be used in a later chapter when we discuss how to have steps that continue
    without failure even if the element does not exist.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Allure reports
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Allure is a powerful reporting framework that presents concise and well-organized
    reports. You can access this report template by installing the `@wdio/allure-reporter`
    and `allure-commandline` packages:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Allure exports reports in a standardized format called Allure results format.
    To generate comprehensive reports, you can utilize the Allure framework through
    the command-line interface:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The Allure Framework is a versatile and lightweight test reporting tool supporting
    multiple programming languages. It provides a succinct presentation of test results
    in HTML format, empowering all stakeholders in the development process to extract
    valuable insights from routine test executions:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: By adding these Allure statements into our framework, we can provide significantly
    more detail to stakeholders in a way that is visually informative.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2: Samples of test results in Allure with historical trends](img/B19395_08_2.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.2: Samples of test results in Allure with historical trends'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Allure reports can organize tests into subcategories. This makes it clear whether
    related tests are failing. It also shows how the runs have been performing over
    time. This can show both an increase in test case coverage as well trends where
    results are improving or recently worsening.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.3: Sample of step-by-step execution with a screen capture of the
    Login page'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B19395_08_3.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B19395_08_3.jpg)'
- en: 'Figure 8.3: Sample of step-by-step execution with a screen capture of the Login
    page'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3：逐步执行的示例，包含登录页面的屏幕截图
- en: These reports also provide the option to add screen captures such as X-ray vision.
    This can give vital clues as to what is occurring when the test fails, particularly
    if we are running in the cloud without a direct live view into the system as it
    runs.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这些报告还提供了添加屏幕截图的选项，例如X射线视觉。这可以提供有关测试失败时发生情况的宝贵线索，尤其是如果我们正在云中运行而没有直接实时查看系统运行情况时。
- en: Summary
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this section, we talked about the history of assert, expect, and should assertions.
    We introduced the concepts of hard and soft assertions, why they are important
    distinctions, and when they should be implemented. We also introduced Allure reports
    to provide details of all events being executed and the results of whether they
    pass or fail. Allure reports will further enhance our view in the future by providing
    a historical view of tests that pass and fail. In the next chapter, we'll build
    the page object model.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了assert、expect和should断言的历史。我们介绍了硬断言和软断言的概念，为什么它们是重要的区分，以及何时应该实现它们。我们还介绍了Allure报告，以提供正在执行的所有事件的详细信息以及它们是否通过或失败的结果。Allure报告将通过提供通过和失败的测试的历史视图来进一步增强我们的视图。在下一章中，我们将构建页面对象模型。
