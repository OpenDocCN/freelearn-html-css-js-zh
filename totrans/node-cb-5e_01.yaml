- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introducing Node.js 22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Created in 2009, Node.js is a cross-platform, open source JavaScript runtime
    that allows you to execute JavaScript outside of the browser. Node.js wraps Google
    Chrome’s JavaScript engine, V8, to enable JavaScript to be run outside the browser.
    Node.js brings JavaScript to the server, which enables us to interact with the
    operating system, network, and filesystem with JavaScript. Node.js was built following
    an event loop architecture, which enables it to effectively handle input/output
    and concurrent operations.
  prefs: []
  type: TYPE_NORMAL
- en: Today, Node.js is a popular technology choice for building many types of applications,
    including HTTP web servers, microservices, real-time applications, and more. Part
    of Node.js’s success is that it enables full-stack development in a common language,
    JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: The massive ecosystem of modules has supported Node.js’s success. There are
    over 3 million modules available on the **npm** registry, with many abstracting
    lower-level implementation details to higher-level and more easily consumable
    APIs. Building your applications atop **npm** modules can speed up the development
    process while promoting code sharing and reuse.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js is now over a decade old and has matured as a technology. Today, it
    is a common technology choice for building applications of all sizes. Many large
    enterprises use Node.js in production. Due to the widespread usage and dependence
    on Node.js, it was moved under the OpenJS Foundation (formerly the Node.js Foundation).
    The OpenJS Foundation offers a neutral environment for JavaScript projects, emphasizing
    a robust commitment to open governance. Open governance facilitates transparency
    and accountability, which, in turn, helps to ensure that no single person or company
    has too much control over the project.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter introduces Node.js – including instructions on how to install the
    runtime and access the necessary documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js 22 with **nvm**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing the Node.js API documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adopting new JavaScript syntax in Node.js 22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing the Node.js event loop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will require access to a terminal, a browser of your choice, and
    the internet.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js 22 with nvm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Node.js follows a release schedule and adopts a **long-term support** ( **LTS**
    ) policy. The release schedule is based on the **Semantic Versioning** ( [https://semver.org/](https://semver.org/)
    ) specification.
  prefs: []
  type: TYPE_NORMAL
- en: According to the Node.js release policy, Node.js undergoes two major updates
    annually, scheduled for April and October. These major releases may introduce
    alterations to the API that could potentially break compatibility. However, the
    Node.js project strives to keep the number and severity of such disruptive changes
    to a minimum, aiming to lessen any inconvenience for end users.
  prefs: []
  type: TYPE_NORMAL
- en: Even-numbered major releases of Node.js are promoted to LTS after 6 months.
    Even-numbered releases are always scheduled for release in April and promoted
    to LTS in October. LTS releases are supported for up to 30 months. It is recommended
    to use LTS versions of Node.js in production. The purpose of the LTS schedule
    is to provide stability to end users and also to provide a predictable timeline
    of releases so that users can manage their upgrades appropriately. All LTS versions
    of Node.js are given codenames, named after elements. Node.js 22 will have the
    LTS codename “Jod”.
  prefs: []
  type: TYPE_NORMAL
- en: Odd-numbered major releases are released in October and are only supported for
    6 months. Odd-numbered releases are mostly recommended to be used to try out new
    features and test the migration path but are not generally recommended for use
    in production applications.
  prefs: []
  type: TYPE_NORMAL
- en: The Node.js Release Working Group has authority over the Node.js release schedule
    and processes. The Node.js release schedule and policy documentation can be found
    at [https://github.com/nodejs/release](https://github.com/nodejs/release) .
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we will be using Node.js 22 throughout. Node.js 22 was released
    in April 2024. Node.js 22 was promoted to LTS in October 2024 and is planned to
    be supported until April 2027. This recipe will cover how to install Node.js 22
    using **node version manager** ( **nvm** ). **nvm** is a project of the OpenJS
    Foundation and provides a convenient way to install and update Node.js versions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may also need to have the appropriate permissions on your device to install
    **nvm** . This recipe assumes you’re on a Unix-like platform. If you’re on Windows,
    it should be run under Windows WSL.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we’re going to be installing Node.js 22 using **nvm** . Follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to install **nvm** . **nvm** provides a script that can download
    and install **nvm** . Enter the following command in your terminal to execute
    the **nvm** installation script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**nvm** will automatically attempt to add itself to your path. Close and reopen
    your terminal to ensure the changes have taken place. Then, enter the following
    command to list the **nvm** version we have installed; this will also confirm
    that **nvm** is available in our path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To install Node.js 22, we can use the **$ nvm install** command. We can supply
    either the specific version we wish to install or the major version number. If
    we specify just the major version number, **nvm** will install the latest release
    of that major release line. Enter the following command to install the latest
    version of Node.js 22:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that this command will install the latest version of Node.js 22, so your
    specific version install is likely to differ from that shown in the preceding
    output.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The latest Node.js 22 version should now be installed and available in your
    path. You can confirm this by entering the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**nvm** will also install the version of **npm** that is bundled with the Node.js
    version you have installed. Enter the following command to confirm which version
    of **npm** is installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**nvm** makes it easy to install and switch between multiple Node.js versions.
    We can enter the following command to install and switch to the latest Node.js
    20 version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once we’ve got the versions installed, we can use the **nvm use** command to
    switch between them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With that, we’ve installed the latest version of Node.js 22 using **nvm** .
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**nvm** is a version manager for Node.js on Unix-like platforms and supports
    **Portable Operating System Interface** ( **POSIX** )-compliant shells. POSIX
    is a set of standards for operating system compatibility, defined by the IEEE
    Computer Society.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we downloaded and executed the **nvm** installation script. Under the
    hood, the **nvm** install script does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Clones the **nvm** GitHub repository ( [https://github.com/nvm-sh/nvm](https://github.com/nvm-sh/nvm)
    ) to **~/.nvm/** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attempts to add some source lines to import and load **nvm** into the appropriate
    profile file, where the profile file is either **~/.bash_profile** , **~/.bashrc**
    , **~/.profile** , or **~/.zshrc** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Should you use a profile file other than the ones mentioned previously, you
    may need to manually add the following lines to your profile file to load **nvm**
    . The following lines are specified in the **nvm** installation documentation
    ( [https://github.com/nvm-sh/nvm#install--update-script](https://github.com/nvm-sh/nvm#install--update-script)
    ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Each time you install a Node.js version using **$ nvm install** , **nvm** downloads
    the appropriate binary for your platform from the official Node.js download server.
    The official Node.js download server can be accessed directly at [https://nodejs.org/dist/](https://nodejs.org/dist/)
    . **nvm** will store all Node.js versions it has installed in the **~/.** **nvm/versions/node/**
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: '**nvm** supports aliases that can be used to install the LTS versions of Node.js.
    For example, you can use the **$ nvm install --lts** command to install the latest
    LTS release.'
  prefs: []
  type: TYPE_NORMAL
- en: To uninstall a Node.js version, you can use the **$ nvm uninstall** command.
    To change the default Node.js version, use the **$ nvm alias default <version>**
    command. The default version is the version that will be available when you open
    your terminal.
  prefs: []
  type: TYPE_NORMAL
- en: If you do not wish to or are unable to use **nvm** , you can install Node.js
    manually. Visit the Node.js **Downloads** page (see [https://nodejs.org/en/download](https://nodejs.org/en/download)
    ) to download the appropriate binary for your platform.
  prefs: []
  type: TYPE_NORMAL
- en: The Node.js project provides TAR files for installation on many platforms. To
    install via a TAR file, you need to download and extract the TAR file, and then
    add the binary location to your path.
  prefs: []
  type: TYPE_NORMAL
- en: Alongside TAR files, the Node.js project provides an installer for both macOS
    ( **.pkg** ) and Windows ( **.msi** ). As a result of installing Node.js manually,
    you will need to manually install updated versions of Node.js when you require
    them.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As allowed by the Semantic Versioning specification, when upgrading from Node.js
    major versions, you may experience breaking changes that impact or stop how your
    script or application (including any dependencies) was executing under the prior
    version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some recommendations for when you’re debugging upgrades:'
  prefs: []
  type: TYPE_NORMAL
- en: Review the major release’s release notes. These release notes will highlight
    any breaking changes, new or deprecated features, and important updates. Understanding
    what has changed can help you identify issues. Note that if you’re upgrading from/to
    Node.js LTS versions (for example, from Node.js 20 to 22), you should start by
    at least reviewing each of the interim major release changelogs – both 21.0.0
    and 22.0.0 .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you’re upgrading from a very old Node.js version, it may be wise to perform
    incremental upgrades through intermediate versions. This can make it easier to
    identify and address compatibility issues gradually. This is made easier when
    using a Node.js version manager such as **nvm** as you can run and test your code
    against different versions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Review your project’s dependencies and ensure they are compatible with the new
    Node.js version. Outdated or unmaintained packages may not work correctly with
    the latest Node.js release.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create comprehensive test suites for your applications. Run your test suite
    before and after upgrading Node.js to ensure that your code behaves as expected.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Node.js debugging tools. Node.js provides various diagnostic tools that
    can help you identify and resolve issues during an upgrade.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leverage online communities, forums, and documentation. Others in the Node.js
    community may have encountered similar issues during upgrades and can provide
    valuable insights and solutions. This could include raising a GitHub issue on
    one of the official Node.js repositories ( [https://github.com/nodejs/node](https://github.com/nodejs/node)
    or [https://github.com/nodejs/help](https://github.com/nodejs/help) ).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember that debugging Node.js upgrades may require time and thorough testing.
    It’s essential to be prepared for potential challenges and have a plan in place
    to mitigate any disruptions to your application’s functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the Node.js API documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Node.js project provides comprehensive API reference documentation. The
    Node.js API documentation is a critical resource for understanding which APIs
    are available in the version of Node.js that you’re using. The Node.js documentation
    also describes how to interact with APIs, including which arguments a given method
    accepts and the method’s return value.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show how to access and navigate the Node.js API documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need access to a browser of your choice and an internet connection
    to access the Node.js API documentation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe is going to demonstrate how to navigate the Node.js API documentation.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, navigate to [https://nodejs.org/api/](https://nodejs.org/api/) in your
    browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You’ll see the Node.js API documentation for the most recent version of Node.js:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Node.js API documentation home page](img/B19212_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – Node.js API documentation home page
  prefs: []
  type: TYPE_NORMAL
- en: 'Hover over the **Other versions** dropdown to view the other release lines
    of Node.js. This is how you can change which version of Node.js you’re viewing
    the documentation for:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Node.js API documentation showing the Other versions dropdown](img/B19212_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – Node.js API documentation showing the Other versions dropdown
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s suppose we want to find the documentation for the **fs.readFile()**
    method. The **fs.readFile()** method is exposed via the **File system** core module.
    First, we need to locate and click on **File system** in the left-hand navigation
    pane. Clicking **File system** will take us to the table of contents for the **File
    system** core module API documentation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.3 – Node.js API documentation for the File system subsystem](img/B19212_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 – Node.js API documentation for the File system subsystem
  prefs: []
  type: TYPE_NORMAL
- en: 'Scroll down until you find the **fs.readFile()** method listed in the table
    of contents. When looking for a specific API, it may be worthwhile using your
    browser’s search facility to locate the API definition. Click the **fs.readFile()**
    link in the table of contents. This will open the API definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.4 – Node.js API documentation showing the fs.readFile() API definition](img/B19212_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.4 – Node.js API documentation showing the fs.readFile() API definition
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, click **Command-line options** in the left-hand navigation pane. This
    page details all the available command-line options that can be passed to the
    Node.js process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.5 – Node.js API documentation showing the available command-line
    options](img/B19212_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.5 – Node.js API documentation showing the available command-line options
  prefs: []
  type: TYPE_NORMAL
- en: With that, we’ve learned how to access and navigate the Node.js API documentation.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Node.js API documentation is a vital reference resource when you’re building
    Node.js applications. The documentation is specific to each version of Node.js.
    In this recipe, we accessed the documentation for the most recent version of Node.js,
    which is the default version of the documentation that is rendered at [https://nodejs.org/api/](https://nodejs.org/api/)
    . The following URL can be used to access the documentation for a specific version
    of Node.js: [https://nodejs.org/docs/v22.0.0/api/index.html](https://nodejs.org/docs/v22.0.0/api/index.html)
    (substitute **v22.0.0** with the specific version you wish to view the documentation
    for).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The API documentation details the usage of the Node.js APIs, including the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: The accepted parameters and their types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If applicable, the value and type that the API returns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In some cases, the documentation will provide further information, including
    a usage example or sample code demonstrating the usage of the API.
  prefs: []
  type: TYPE_NORMAL
- en: Note that there are some undocumented APIs. Some Node.js APIs are intentionally
    undocumented as they are considered internal-only and are not intended for use
    outside of the Node.js core runtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'The API documentation also details the stability of APIs. The Node.js project
    defines and uses the following four stability indices:'
  prefs: []
  type: TYPE_NORMAL
- en: '**0 – Deprecated** : Usage of these APIs is discouraged. Warnings may be emitted
    upon the usage of these APIs. Deprecated APIs will also be listed at [https://nodejs.org/docs/latest-v22.x/api/deprecations.html](https://nodejs.org/docs/latest-v22.x/api/deprecations.html)
    .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**1 – Experimental** : These APIs are not considered stable and may be subject
    to some non-backward-compatible changes. Experimental APIs are not subject to
    the Semantic Versioning rules. Usage of these APIs should be done with caution,
    especially in production environments. More recently, the “Experimental” status
    in the Node.js documentation has been broken down into multiple stages in an attempt
    to indicate the maturity of the features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**1.0 -** **Early Development**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**1.1 -** **Active Development**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**1.2 -** **Release Candidate**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**2 – Stable** : With stable APIs, the Node.js project will try to ensure compatibility.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**3 – Legacy** : Legacy features may be unmaintained or more modern alternatives
    may be available. However, they are unlikely to be removed and continue to abide
    by Semantic Versioning rules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Node.js documentation is maintained by the Node.js project in the Node.js
    core repository. Any errors or suggested improvements can be raised at [https://github.com/nodejs/node](https://github.com/nodejs/node)
    .
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Node.js project maintains a **.md** file for each release line of Node.js,
    detailing the individual commits that land in each release. The **CHANGELOG.md**
    file for Node.js 22 can be found at [https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V22.md](https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V22.md)
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a snippet from the Node.js 22 **CHANGELOG.md** file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6 – Example Node.js 22.0.0 CHANGELOG.md entry](img/B19212_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.6 – Example Node.js 22.0.0 CHANGELOG.md entry
  prefs: []
  type: TYPE_NORMAL
- en: The Node.js project highlights the notable changes in each release. The **CHANGELOG.md**
    file denotes which commits were determined to be **SEMVER-MINOR** according to
    the Semantic Versioning standard ( [https://semver.org/](https://semver.org/)
    ). Entries marked as **SEMVER-MINOR** indicate feature additions. The **CHANGELOG.md**
    file will also denote when a release is considered a security release (fixing
    a security issue). In the case of a security release, the **Notable Changes**
    section will start with the sentence **This is a** **security release.**
  prefs: []
  type: TYPE_NORMAL
- en: For major releases, the Node.js project releases a release announcement on the
    Node.js website that details the new features and changes. The Node.js 22 release
    announcement is available at [https://nodejs.org/en/blog/announcements/v22-release-announce](https://nodejs.org/en/blog/announcements/v22-release-announce)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Node.js **CHANGELOG.md** files can be used as a reference when upgrading Node.js,
    to help you understand what updates and changes are included in the new version.
  prefs: []
  type: TYPE_NORMAL
- en: Adopting new JavaScript syntax in Node.js 22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The formal specification for the JavaScript language is ECMAScript. New JavaScript
    features make their way into Node.js via updates to the underlying V8 JavaScript
    engine that the Node.js runtime is built on top of. ECMAScript has annual updates
    that provide new JavaScript language features and syntax.
  prefs: []
  type: TYPE_NORMAL
- en: New major versions of Node.js tend to include a significant upgrade to the V8
    engine. Node.js version 22.0.0 was released with V8 version 12.4. However, the
    V8 version may be upgraded during the lifetime of Node.js 22.
  prefs: []
  type: TYPE_NORMAL
- en: Updated versions of V8 bring underlying performance improvements and new JavaScript
    language features and syntax to the Node.js runtime. This recipe will showcase
    a couple of the newer JavaScript language features that have been introduced in
    Node.js 22.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you will need to have Node.js 22 installed. You will also need
    to have access to a terminal.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will be using the Node.js **Read Eval Print Loop** ( **REPL**
    ) to test out the newer JavaScript features that are available in Node.js 22.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s open the Node.js REPL. Enter the following command in your terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should open the REPL, which is an interface that we can use to execute
    code. Expect to see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.7 – Node.js REPL](img/B19212_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.7 – Node.js REPL
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by entering the following command. This command will return the version
    of V8 that is embedded in the Node.js version you’re using:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Two new JavaScript **String** methods were made available since Node.js 20:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**String.prototype.isWellFormed** : This method returns whether the supplied
    **String** is well-formed UTF-16'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**String.prototype.toWellFormed** : This method will replace unpaired surrogates
    with the **replacement character** ( **U+FFFD** ), thus making the UTF-16 String
    well-formed.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can demonstrate this in the REPL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Another recent feature addition is the **Intl.NumberFormat** built-in object,
    which provides language-based number formatting. Let’s test this out. In the REPL,
    declare a number:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, let’s format that number as if it were the **Great British** **Pound**
    ( **GBP** ):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In Node.js 22, new **Set** methods like **union** , **intersection** , and
    **difference** were added as part of the V8 12.4 update. These enhancements make
    it easier to perform operations on numeric sets. Here’s an example involving prime
    and odd numbers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using the REPL, we’ve explored a couple of the new JavaScript language features
    that are available in Node.js 22. The main goal of this learning is that new JavaScript
    language features become available through upgrading the underlying Google Chrome
    V8 engine.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: New JavaScript language features are introduced into Node.js via updates to
    the underlying Google Chrome V8 JavaScript engine. A JavaScript engine parses
    and executes JavaScript code. The embedding of the Google Chrome V8 engine in
    Node.js is what enabled the execution of JavaScript outside of the browser. Chrome’s
    V8 JavaScript engine is one of many available JavaScript engines, with Mozilla’s
    SpiderMonkey, which is used in the Mozilla Firefox browser, being another leading
    JavaScript engine.
  prefs: []
  type: TYPE_NORMAL
- en: Every 6 weeks, a new version of Google Chrome’s V8 engine is released. Node.js
    22 will continue to incorporate updates into V8, provided they can be made **application
    binary interface** ( **ABI** )-compatible. An ABI describes how programs can interact
    with functions and data structures via compiled programs. It can be considered
    similar to a compiled version of an **application programming** **interface**
    ( **API** ).
  prefs: []
  type: TYPE_NORMAL
- en: Once there is a release of V8 that no longer allows ABI compatibility, the specific
    release line of Node.js will be fixed on that version of V8. However, specific
    V8 patches and fixes may continue to be applied directly to that Node.js release
    line. Node.js 20 is now fixed on V8 version 11.3, whereas Node.js 22, at the time
    of writing, is at V8 12.4. The V8 version in Node.js 22 will continue to be updated
    until ABI compatibility of newer versions of V8 can no longer be maintained.
  prefs: []
  type: TYPE_NORMAL
- en: The V8 JavaScript engine compiles JavaScript internally using **just-in-time**
    ( **JIT** ) compilation. JIT compilation speeds up the execution of JavaScript.
    While V8 is executing JavaScript, it obtains data about the code that is being
    executed. From this data, the V8 engine can make speculative optimizations. Speculative
    optimizations anticipate the upcoming code based on the code that has recently
    been executed. This allows the V8 engine to optimize for the upcoming code.
  prefs: []
  type: TYPE_NORMAL
- en: The V8 blog provides announcements of new V8 releases and details the new features
    and updates to V8. The V8 blog can be accessed at [https://v8.dev/blog](https://v8.dev/blog)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the Node.js event loop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Node.js event loop is a fundamental concept in Node.js that enables it to
    perform asynchronous and non-blocking operations efficiently. It’s a mechanism
    that’s responsible for managing the execution of code in an event-driven environment.
    Understanding the Node.js event loop is crucial for building scalable and responsive
    applications, especially when dealing with input/output-bound tasks such as reading
    files, making network requests, or handling multiple client connections simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need to have Node.js 22 installed. You will also need to have access
    to a terminal.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will create two files. One will demonstrate us blocking
    the event loop, while the other will demonstrate not blocking the event loop.
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a file named **blocking.js** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the script and observe how it waits on the blocking operation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This script demonstrates a blocking operation by using a synchronous loop that
    keeps the CPU busy. When you run the script, you’ll notice that it logs **Start
    blocking operation** , executes the blocking loop, and finally logs **End blocking
    operation** and **After** **blocking operation** .
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, let’s implement a non-blocking script. Create a file named **non-blocking.js**
    .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the script and observe how it executes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This script demonstrates a non-blocking operation using the **setTimeout** function,
    which implements a delay of at least 2 seconds. When you run this script, it logs
    **Before non-blocking operation** , schedules the timeout, immediately logs **After
    non-blocking operation** , and then, after 2 seconds, logs **Non-blocking operation
    completed** . This example demonstrates that during the 2-second delay, Node.js
    remains responsive and can continue with other tasks, showing that this operation
    is non-blocking.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let’s demonstrate the Node.js event loop with **process.nextTick()** . To do
    so, create a file named **next-tick.js** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to **next-tick.js** :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the program and observe the order of how they’re executed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The **Start** and **End** log statements are executed immediately because they
    are part of the main code execution. The two callbacks that are scheduled with
    **process.nextTick()** are executed before any other scheduled callbacks, before
    the **setTimeout** callback. This is because **process.nextTick()** callbacks
    have the highest priority and run at the beginning of the next event loop cycle.
    After the **process.nextTick()** callbacks are executed, the **setTimeout** callback
    is executed.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Node.js operates in a single-threaded environment, meaning it uses a single
    main thread of execution for your JavaScript code. However, Node.js can still
    handle many concurrent operations by leveraging asynchronous, non-blocking I/O.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js is event-driven, which means it relies on events and callbacks to execute
    code in response to various actions or events. Events can be I/O operations (for
    example, reading files or making network requests), timers, or custom events triggered
    by your code.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some key concepts to understand about Node.js’s handling of I/O:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Non-blocking** : Node.js not waiting for each operation to complete before
    moving on is referred to as non-blocking. Node.js can handle multiple tasks concurrently,
    making it highly efficient for I/O-bound operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event queue** : When you perform an asynchronous operation, such as reading
    a file, Node.js doesn’t block the entire program. Instead, it puts these operations
    in a queue known as the **event queue** and continues with other tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event loop** : The **event loop** keeps running and checking the event queue.
    If there’s an operation in the queue that has completed (for example, a file has
    finished being read), it will execute a callback function associated with that
    operation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Callback functions** : When an asynchronous operation is initiated, you usually
    provide a callback function. This function gets called when the operation is finished.
    For example, if you’re reading a file, the callback function will handle what
    to do with the file’s contents once it’s available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**libuv** ( [https://libuv.org/](https://libuv.org/) ) serves as the underlying
    library that powers the Node.js event loop by providing a platform-agnostic, efficient,
    and concurrent I/O framework. It enables Node.js to achieve its non-blocking,
    asynchronous nature while maintaining compatibility across various operating systems.'
  prefs: []
  type: TYPE_NORMAL
- en: There’s more
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Node.js event loop operates a flow of phases. Deeply understanding this
    flow is important when it comes to debugging, performance, and making the most
    of Node.js’ non-blocking approach.
  prefs: []
  type: TYPE_NORMAL
- en: When the Node.js process starts, the event loop is initialized and the input
    script is processed. The event loop will continue until nothing is pending in
    the event loop or **process.exit()** is explicitly called.
  prefs: []
  type: TYPE_NORMAL
- en: 'The event loop phases are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Timers phase** : This phase checks for any scheduled timers that need to
    be executed. These timers are typically created using functions such as **setTimeout()**
    or **setInterval()** . If a timer’s specified time has passed, its callback function
    is added to the I/O polling phase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pending callbacks phase** : In this phase, the event loop checks for events
    that have completed (or errored) their I/O operations. This includes, for example,
    filesystem operations, network requests, and user events. If any of these operations
    have been completed, their callback functions are executed during this phase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Idle and prepare phases** : These phases are rarely used in typical application
    development and are typically reserved for special use cases. The idle phase runs
    callbacks that are scheduled to execute during the idle period, whereas the prepare
    phase is used to prepare for poll events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Poll phase** : The poll phase is where most of the action happens in the
    event loop. It performs the following tasks:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checks for new I/O events (for example incoming data on a socket) and executes
    their callbacks if any are ready.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If no I/O events are pending, it checks the callback queue for pending callbacks
    scheduled by timers or **setImmediate()** . If any are found, they are executed.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If there are no pending I/O events or callbacks, the event loop may enter a
    blocking state waiting for new events to arrive. This is called “polling.”
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Check phase** : In this phase, callbacks registered with **setImmediate()**
    are executed. Any callbacks are executed after the current poll phase but before
    any I/O callbacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Close callbacks phase** : This phase is responsible for executing close event
    callbacks, such as those registered with the **socket.on(''close'', ...)** event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After completing all these phases, the event loop checks if there are any pending
    timers, I/O operations, or other events. If there are, it goes back to the appropriate
    phase to handle them. Otherwise, if there are no further pending events, the Node.js
    process ends.
  prefs: []
  type: TYPE_NORMAL
- en: '**process.nextTick()** is not detailed in the phases. This is because **process.nextTick()**
    schedules the provided callback function to run on the next tick of the event
    loop. Importantly, this callback function is executed with higher priority than
    other asynchronous operations. The **process.nextTick()** callback is executed
    after the current phase of the event loop is complete but before the event loop
    moves on to the next phase. This allows you to schedule tasks so that they run
    with higher priority, making it useful for ensuring that certain functions run
    immediately after the current operation.'
  prefs: []
  type: TYPE_NORMAL
