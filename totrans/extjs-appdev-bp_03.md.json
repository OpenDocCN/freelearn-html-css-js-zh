["```js\n<!-- The line below must be kept intact for Sencha Cmd to build your application -->\n<script id=\"microloader\" type=\"text/javascript\" src=\"img/bootstrap.js\"></script>\n```", "```js\n/**\n * @class CultivateCode.SessionManager\n * @extends extendsClass\n * Description\n */\nExt.define('CultivateCode.SessionManager', {\n    singleton: true,\n    isLoggedIn: false,\n\n    login: function(username, password) {\n        // login impl\n    },\n\n    logout: function() {\n        // logout impl\n    },\n\n    isLoggedIn() {\n        return isLoggedIn;\n    }\n});\n```", "```js\nExt.define('CultivateCode.ux.grid.plugins.CoordViewer', {\n    extend: 'Ext.plugin.Abstract',\n    alias: 'plugin.coordviewer',\n\n    mixins: {\n        observable: 'Ext.util.Observable'\n    },\n\n    init: function(grid) {\n        this.mon(grid.view, 'cellclick', this.onCellClick, this);\n    },\n\n    onCellClick: function(view, cell, colIdx, record, row, rowIdx, e) {\n        var coords = Ext.String.format('Cell is at {0}, {1}', colIdx, rowIdx)\n\n        Ext.Msg.alert('Coordinates', coords);\n    }\n});\n```", "```js\nExt.define('CultivateCode.util.Mathematics', {\n    singleton: true,\n\n    square: function(num) {\n        return Math.pow(num, 2);\n    },\n\n    circumference: function(radius) {\n        return 2 * Math.PI * radius;\n    }\n}); \n```", "```js\nExt.define('CultivateCode.math.Combinatorics', {\n    // implementation here!\n});\nExt.define('CultivateCode.math.Geometry', {\n    // implementation here!\n});\n```", "```js\nvar geometry = Ext.create('MyApp.math.Geometry');\n```", "```js\nvar area = CultivateCode.math.areaOfCircle(radius);\n```", "```js\nvar circle = Ext.create('CultivateCode.math.Circle', { radius: radius });\nvar area = circle.getArea();\n```", "```js\nExt.define('CultivateCode.ux.grid.GridManager', {\n\n    singleton: true,\n    currentGrid: null,\n    grids: [],\n\n    add: function(grid) {\n        this.grids.push(grid);\n    },\n\n    setCurrentGrid: function(grid) {\n        this.focusedGrid = grid;\n    }\n});\n```", "```js\nExt.define('CultivateCode.view.main.Main', {\n    extend: 'CultivateCode.ux.GridContainer',\n\n    currentGrid: null,\n    grids: [],\n\n    add: function(grid) {\n        this.grids.push(grid);\n    },\n\n    setCurrentGrid: function(grid) {\n        this.currentGrid = grid;\n    }\n});\n```", "```js\nExt.define('CultivateCode.util.Shakeable', {\n    mixinId: 'shakeable',\n\n    shake: function() {\n        var el = this.el,\n            box = el.getBox(),\n            left = box.x - (box.width / 3),\n            right = box.x + (box.width / 3),\n            end = box.x;\n\n        el.animate({\n            duration: 400,\n            keyframes: {\n                33: {   \n                    x: left\n                },\n                66: {\n                    x: right\n                },\n                100: {\n                    x: end\n                }\n            }\n        });\n    }\n});\n```", "```js\nExt.define('CultivateCode.ux.button.ShakingButton', {\n    extend: 'Ext.Button',\n    mixins: ['CultivateCode.util.Shakeable'],\n    xtype: 'shakingbutton'\n});\n```", "```js\nvar btn = Ext.create('CultivateCode.ux.button.ShakingButton', {\n   text: 'Shake It!'\n});\nbtn.on('click', function(btn) {\n   btn.shake();\n});\n```", "```js\nExt.define('CultivateCode.ux.form.MetaPanel', {\n    extend: 'Ext.form.Panel',\n\n    initialize: function() {\n        this.callParent(arguments);\n        this.addPersistenceEvents();\n    },\n\n    loadRecord: function(model) {\n        this.buildItemsFromRecord(model);\n        this.callParent(arguments);\n    },\n\n    buildItemsFromRecord: function(model) {\n        // Implementation\n    },\n\n    buildFieldsetsFromRecord: function(model){\n        // Implementation\n    },\n\n    buildItemForField: function(field){\n        // Implementation\n    },\n\n    isStateAvailable: function(){\n        // Implementation\n    },\n\n    addPersistenceEvents: function(){\n        // Implementation\n    },\n\n    persistFieldOnChange: function(){\n        // Implementation\n    },\n\n    restorePersistedForm: function(){\n        // Implementation\n    },\n\n    clearPersistence: function(){\n        // Implementation\n    }\n});\n```", "```js\nExt.define('CultivateCode.ux.form.MetaPanel', {\n    extend: 'Ext.form.Panel',\n\n    mixins: [\n        // Contains methods:\n        // - buildItemsFromRecord\n        // - buildFieldsetsFromRecord\n        // - buildItemForField\n        'CultivateCode.ux.form.Builder',\n\n        // - isStateAvailable\n        // - addPersistenceEvents\n        // - persistFieldOnChange\n        // - restorePersistedForm\n        // - clearPersistence\n        'CultivateCode.ux.form.Persistence'\n    ],\n\n    initialize: function() {\n        this.callParent(arguments);\n        this.addPersistenceEvents();\n    },\n\n    loadRecord: function(model) {\n        this.buildItemsFromRecord(model);\n        this.callParent(arguments);\n    }\n});\n```", "```js\nExt.define('CultivateCode.Application', {\n    extend: 'Ext.app.Application',\n\n    name: 'CultivateCode',\n\n    searchCfg: {\n        mode: 'beginsWith',\n        dir: 'asc'\n    },\n\n    isLoggedIn: false,\n    isSecure: false,\n\n    launch: function () {\n        this.setupAjaxOverrides();\n        this.performCookieCheck();\n\n        Ext.apply(Ext.util.Format, {\n            defaultDateFormat: 'd F Y'\n        });\n    },\n\n    setMasked: function(mask) {\n        // Implementation\n    },\n\n    setupAjaxOverrides: function() {\n        // Implementation\n    },\n\n    onAjaxError: function(connection, resp, opt) {\n        // Implementation\n    }\n\n    performCookieCheck: function() {\n        // Implementation\n    }\n});\n```"]