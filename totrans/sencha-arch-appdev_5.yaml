- en: Chapter 5. Working with Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will learn how to use the Resources toolbox and the Resources
    package from the project inspector. So in this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Changing the Ext JS and Sencha Touch SDK path
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The debugging mode and the production mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating new CSS files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Google Maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with theme files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with additional JavaScript files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Library resource
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we create a Sencha Touch or Ext JS project on Sencha Architect, we will
    be able to see a Resources package with a Library resource inside it. Depending
    on the version of the SDK you use to create the project, the options can be a
    little bit different.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if we create an Ext JS 4.1 project, we will have the default **Library**
    options such as **Debug**, **Include CSS**, **Include** **JavaScript**, and **Library**
    **Base** **Path**. When we create an Ext JS 4.2 project, we will see all the options
    already mentioned plus the **theme** property as demonstrated by the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Library resource](img/9819OS_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The same thing happens with Sencha Touch 2.1 projects and Sencha Touch 2.2
    projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Library resource](img/9819OS_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is because Sencha added the capability to change the themes for Sencha
    Touch 2.2 and later and Ext JS 4.2 and later versions.
  prefs: []
  type: TYPE_NORMAL
- en: So what does each option mean (**Debug**, **Include CSS**, **Include JavaScript**,
    **Library Base Path**)?
  prefs: []
  type: TYPE_NORMAL
- en: The **Debug** option means, if we want to use the debug or the production version
    of the SDK. By default, Sencha Architect will use the `ext-all.js` and `sencha-touch-all.js`
    SDK files. If we check the **Debug** checkbox, Sencha Architect will use the `ext-all-debug.js`
    and `sencha-touch-debug.js` SDK files instead.
  prefs: []
  type: TYPE_NORMAL
- en: By default, Sencha Architect also has the **Include CSS** property checked.
    This means that Sencha Architect will automatically add the Ext JS and Sencha
    Touch CSS files (`ext-theme-classic-all.css` and `sencha-touch.css`) to the `app.html`
    file. But if we need the CSS to have the beautiful look provided by Ext JS and
    Sencha Touch frameworks, why does Sencha Architect offer the developer the option
    to add the CSS file? We will answer this question later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Include JavaScript** option is also checked. When this option is checked,
    Sencha Architect includes the `ext-all.js` and `sencha-touch-all.js` SDK files
    in `app.html`. Again, the same question: if we need Ext JS or Sencha Touch SDK
    to have an Ext JS or Sencha Touch application, why does Sencha Architect offer
    the possibility to remove these files from `app.html`? If you already generated
    a Sencha Touch or Ext JS project using Sencha Cmd, you will notice that in the
    `index.html` file, it was included a different file as `bootstrap.js` file, and
    inside this `bootstrap.js` file we have the logic to add production or debug file.
    So if we uncheck the **Include JavaScript** property, we can have a `bootstrap.js`
    file included by adding a new JS resource. Sencha Architect is very flexible when
    it comes to choosing what files you want to include in your `app.html` file.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting the local SDK
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another property that caught our attention is the **Library Base Path**. When
    we create a Sencha Architect project, the **Library Base Path** for an Ext JS
    4.2 project is [http://cdn.sencha.com/ext/gpl/4.2.0/](http://cdn.sencha.com/ext/gpl/4.2.0/),
    and for a Sencha Touch 2.2 project it is [http://cdn.sencha.com/touch/sencha-touch-2.2.0-rc/](http://cdn.sencha.com/touch/sencha-touch-2.2.0-rc/).
    This means that every time you execute the application you are creating, your
    application will load the SDK JS file and the CSS file from the Sencha servers.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are testing your application locally, or you want to load the framework
    resources from a specific place, we need to change the **Library Base Path**.
    For example, in the following screenshot we are loading the Ext SJ framework files
    from a local server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting the local SDK](img/9819OS_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This can also be useful in case you are on an airplane and want to continue
    coding your project, and you do not have access to Internet, so you can point
    to your local installation.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is another scenario in which Sencha Architect helps us a lot. Developing
    a really big Ext JS or Sencha Touch project can take a while. We start developing
    the project with the latest version of the framework (most of the cases); however,
    Sencha releases new versions of the framework with fixes and new components. And
    we want to have those fixes, so for this reason we want to upgrade the project
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sencha Architect also offers the feature of upgrading. To upgrade a project
    (as long Sencha Architect already supports this new version) we need to select
    the **Library** and right-click on it. An **Upgrade** option will appear. Once
    you click on it, we need to confirm that we really want to upgrade, because there
    is no turning back. Sencha Architect will also create an archive backup for the
    project''s safety:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Upgrading projects](img/9819OS_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screenshot, we upgraded a project that was built with Ext
    JS 4.0\. So we can first upgrade to Ext JS 4.1.x, or we can update directly to
    Ext JS 4.2.x. Also, in the previous screenshot we upgraded from Ext JS 4.0.x to
    Ext JS 4.1.x. If we try to upgrade it again, only the **Upgrade to Ext JS 4.2.x**
    option will be available as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Upgrading projects](img/9819OS_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The same feature is available for Sencha Touch:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Upgrading projects](img/9819OS_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For these examples, we used an existing Ext JS project (`arrayGrid`) that is
    available at [https://github.com/loiane/sencha-extjs4-examples-architect/tree/master/grid/arrayGrid](https://github.com/loiane/sencha-extjs4-examples-architect/tree/master/grid/arrayGrid)
    and `Touch Twitter Search` that is available at [https://github.com/loiane/sencha-touch2-examples-architect/tree/master/TouchTwitterSearch](https://github.com/loiane/sencha-touch2-examples-architect/tree/master/TouchTwitterSearch).
  prefs: []
  type: TYPE_NORMAL
- en: Native themes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Ext JS 4.2 and Sencha Touch 2.2 projects, the library also displays the
    **theme** property. We can change to another available **theme** (native theme)
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Native themes](img/9819OS_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'And if we change the **theme** on Sencha Architect, we will be able to see
    the changes right away on the **Design** mode of the canvas:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Native themes](img/9819OS_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The same will happen for Sencha Touch:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Native themes](img/9819OS_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will see how to handle custom themes at the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating/linking CSS and JavaScript files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this book, we learned how to create Sencha code using Sencha Architect.
    But an Ext JS or Sencha Touch project does not necessarily means we will have
    only Ext JS or Sencha Touch code. We can have additional JS and CSS files as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'So let''s see how to create new CSS and JS files (the logic is the same for
    both CSS and JS files). First we need to select **Resources** from project inspector,
    and then go to the toolbox, locate **Resources**, and double-click on the resource
    we want to create (*Step 1*). Alternatively, we can also use the drag-and-drop
    feature that we learned in the previous chapters. Then, a new CSS or JS file will
    be displayed under the **Resources** package. We need to select it and on the
    config panel we can give an **id** (just to help us to identify the file) and
    its **url** (*Step 2*). Then, if we go to the canvas and open the code editor,
    we will be able to edit this file (*Step 3*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating/linking CSS and JavaScript files](img/9819OS_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If the file does not exist, Sencha Architect will create it for us on the path
    set as the **url** (if it is a local path). If the file already exists, Sencha
    Architect will load it for us as demonstrated by the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating/linking CSS and JavaScript files](img/9819OS_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As it is an existing file, it is going to be locked for changes. If you want
    to make changes on it, just click on **Unlock** and then you will have freedom
    to add, edit, or delete the code you want.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Google Maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For Sencha Touch projects, it is possible to add a Google Maps API resource
    to the project. This resource will only add a new JavaScript file declaration
    in the `app.html` file pointing to the Google Maps API URL.
  prefs: []
  type: TYPE_NORMAL
- en: To add it, select **Resources** from the project inspector, go to the toolbox,
    locate **Resources**, and double-click on the **Google Maps API** resource. It
    is going to be added on the project inspector under the **Resources** package.
    We do not need to change anything on the config panel.
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with Google Maps](img/9819OS_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Only Sencha Touch projects have this resource option. But if we want to add
    the Google Maps API on an Ext JS project, we can simply add a new JS resource
    pointing to the same URL as demonstrated previously.
  prefs: []
  type: TYPE_NORMAL
- en: Working with custom themes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We already learned how to work with native themes on Sencha Architect. But creating
    and customizing themes is fun and we also want to use custom themes in our Sencha
    Architect projects. And it is possible!
  prefs: []
  type: TYPE_NORMAL
- en: Remember we asked why Sencha Architect allows us to disable the **Include CSS**
    option on the Library? This is one of the reasons. So if we want to use custom
    themes, we need to disable the **Include CSS** option and add our own theme. Adding
    a custom theme is very similar to adding an existing CSS resource to the project.
    First we select the **Resources** from the project inspector. Then we need to
    go to the toolbox, locate the **Resources** option, and then double-click on the
    **CSS resource**. The CSS file that represents the custom theme must be already
    present in the projects' directory. So we go to the config panel of this new CSS
    resource and add the relative path of the `my-theme.css` file.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the theme is included on the `app.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with custom themes](img/9819OS_05_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When we reload the **Design** view of the canvas, the CSS will be applied to
    the project and we can immediately see how it looks, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with custom themes](img/9819OS_05_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Just remember that we need to generate the theme first. Sencha Architect is
    not a tool that will help us to create the theme; we need to use Sencha Cmd (along
    with Sass and Compass) to do it.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information about creating themes for Ext JS please visit [http://docs.sencha.com/extjs/4.2.1/#!/guide/theming](http://docs.sencha.com/extjs/4.2.1/#!/guide/theming)
    and for Sencha Touch please visit [http://docs.sencha.com/touch/2.2.1/#!/guide/theming](http://docs.sencha.com/touch/2.2.1/#!/guide/theming).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we learned how to add some extra resources to a Sencha Architect
    project, such as a new CSS (or existing one), a new JavaScript file (or existing
    one), how to change themes, and how to apply a custom theme created by you or
    any other developer, how to upgrade the Ext JS or Sencha Touch SDK version, and
    also how to work with Google Maps. With all these resources we can enhance our
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to build, package, and deploy Sencha
    Architect projects.
  prefs: []
  type: TYPE_NORMAL
