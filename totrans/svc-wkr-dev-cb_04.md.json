["```js\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Templating</title>\n      <style>\n      * {\n        -webkit-box-sizing: border-box;\n        -moz-box-sizing: border-box;\n        box-sizing: border-box;\n      }\n\n      body {\n        margin: 0 auto;\n        text-align: center;\n        font-family: sans-serif;\n      }\n\n      main {\n        max-width: 350px;\n        border: 1px solid #4CAF50;\n        padding: 20px;\n        border-radius: 5px;\n        width: 350px;\n        margin: 20px auto;\n      }\n\n      h1 {\n        color: #4CAF50;\n      }\n\n      img {\n        padding: 20px 0;\n        max-width: 200px;\n      }\n\n      .hidden {\n        display: none;\n      }\n\n      .frameworks {\n        margin: 20px auto;\n      }\n\n      table, th, td {\n        border: 1px solid black;\n        border-collapse: collapse;\n      }\n\n      .frameworks th {\n        background-color: #000;\n        color: #FFF;\n        padding: 3px 10px;\n      }\n\n      .frameworks tr {\n        text-align: left;\n      }\n\n      .frameworks td {\n        background-color: #FFF;\n        padding: 3px 10px;\n      }\n\n      #registration-status {\n        background-color: #FFE454;\n        padding: 10px;\n      }\n      </style>\n    </head>\n    <body>\n      <section id=\"registration-status\">\n        <p>Registration status: <strong id=\"status\"></strong></p>\n        <input type=\"button\" id=\"resetButton\" value=\"Reset\" />\n      </section>\n      <section>\n          <h2>JS Frameworks & Creators</h2>\n          <table class=\"frameworks\">\n            <tr>\n              <th>Framework</th>\n              <th>Name</th>\n              <th>Twitter</th>\n            </tr>\n            {{#users}}\n              <tr>\n                  <td>{{framework}}</td>\n                  <td>{{person.firstName}} \n    \t\t\t  {{person.lastName}}</td>\n                  <td><a href=\"https://twitter.com/{{twitter}}\">@{{twitter}}</a></td>\n              </tr>\n            {{/users}}\n          </table>\n      </section>\n\n      <script>\n      'use strict';\n\n      var scope = {\n        scope: './'\n      };\n\n      if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.register(\n          'service-worker.js',\n          scope\n        ).then( function(serviceWorker) {\n          printStatus('successful');\n        }).catch(function(error) {\n          printStatus(error);\n        });\n      } else {\n        printStatus('unavailable');\n      }\n\n      function printStatus(status) {\n        document.querySelector('#status').innerHTML = status;\n      }\n\n      document.querySelector('#resetButton').addEventListener('click',\n        function() {\n          navigator.serviceWorker.getRegistration().then(function(registration) {\n            registration.unregister();\n            window.location.reload();\n          });\n        }\n      );\n      </script>\n    </body>\n    </html>\n    ```", "```js\n    'use strict';\n\n    importScripts('handlebars.js');\n\n    var cacheName= 'template-cache';\n\n    self.addEventListener('install', function(event) {\n      event.waitUntil(\n        caches.open(cacheName)\n          .then(function(cache) {\n            return cache.addAll([\n              'index.html',\n              'service-worker.js',\n              'people.json'\n            ]);\n          })\n          .then(function() {\n            return self.skipWaiting();\n          })\n      );\n    });\n\n    self.addEventListener('fetch', function(event) {\n      var requestURL = new URL(event.request.url);\n\n      event.respondWith(\n        Promise.all([\n          caches.match('index.html').then(function(res) {\n            if(res) {\n              return res.text();\n            }\n          }),\n          caches.match('people.json').then(function(res) {\n            return res.json();\n          })\n        ]).then(function(resps) {\n          var template = resps[0],\n            data = resps[1],\n            renderTemplate = Handlebars.compile(template);\n\n          return new Response(renderTemplate(data), {\n            headers: {\n              'Content-Type': 'text/html'\n            }\n          });\n        })\n      );\n    });\n    ```", "```js\n    {\n      \"users\":[\n        {\n          \"framework\": \"Ember\",\n          \"person\":{\n            \"firstName\": \"Yehuda\",\n            \"lastName\": \"Katz\"\n          },\n          \"twitter\": \"wycats\"\n        },\n        {\n          \"framework\": \"React\",\n          \"person\":{\n            \"firstName\": \"Jordan\",\n            \"lastName\": \"Walke\"\n          },\n          \"twitter\": \"jordwalke\"\n        },\n        {\n          \"framework\": \"Angular\",\n          \"person\":{\n            \"firstName\": \"Miško\",\n            \"lastName\": \"Hevery\"\n          },\n          \"twitter\": \"mhevery\"\n        }\n      ]\n    }\n    ```", "```js\n<table class=\"frameworks\">\n    <tr>\n    <th>Framework</th>\n       <th>Name</th>\n       <th>Twitter</th>\n    </tr>\n    {{#users}}\n       <tr>\n          <td>{{framework}}</td>\n          <td>{{person.firstName}} {{person.lastName}}</td>\n          <td><a href=\"https://twitter.com/{{twitter}}\">\n\t\t  @{{twitter}}</a></td>\n          </tr>\n        {{/users}}\n</table>\n```", "```js\n{\n  \"users\":[\n    {\n      \"framework\": \"Ember\",\n      \"person\":{\n        \"firstName\": \"Yehuda\",\n        \"lastName\": \"Katz\"\n      },\n      \"twitter\": \"wycats\"\n    },\n    {\n      \"framework\": \"React\",\n      \"person\":{\n        \"firstName\": \"Jordan\",\n        \"lastName\": \"Walke\"\n      },\n      \"twitter\": \"jordwalke\"\n    },\n    {\n      \"framework\": \"Angular\",\n      \"person\":{\n        \"firstName\": \"Miško\",\n        \"lastName\": \"Hevery\"\n      },\n      \"twitter\": \"mhevery\"\n    }\n  ]\n}\n```", "```js\nreturn cache.addAll([\n          'index.html',\n          'style.css',\n          'service-worker.js',\n          'people.json'\n        ]);\n```", "```js\ncaches.match('index.html').then(function(response) {\n        if(response) {\n          return response.text();\n        }\n      }),\n```", "```js\n   caches.match('people.json').then(function(response) {\n        return response.json();\n      })\n```", "```js\n]).then(function(resps) {\n      var template = resps[0],\n        data = resps[1],\n        renderTemplate = Handlebars.compile(template);\n\n      return new Response(renderTemplate(data), {\n        headers: {\n          'Content-Type': 'text/html'\n        }\n      });\n    })\n```", "```js\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Read-through Caching</title>\n      <link rel=\"stylesheet\" href=\"style.css\">\n    </head>\n    <body>\n      <section id=\"registration-status\">\n        <p>Registration status: <strong id=\"status\"></strong></p>\n        <input type=\"button\" id=\"resetButton\" value=\"Reset\" />\n      </section>\n      <section</section>\n      <script src=\"img/index.js\"></script>\n    </body>\n    </html>\n    ```", "```js\n    * {\n      -webkit-box-sizing: border-box;\n      -moz-box-sizing: border-box;\n      box-sizing: border-box;\n    }\n\n    body {\n      margin: 0 auto;\n      text-align: center;\n      font-family: sans-serif;\n    }\n\n    main {\n      max-width: 350px;\n      border: 1px solid #4CAF50;\n      padding: 20px;\n      border-radius: 5px;\n      width: 350px;\n      margin: 20px auto;\n    }\n\n    h1 {\n      color: #4CAF50;\n    }\n\n    img {\n      padding: 20px 0;\n      max-width: 200px;\n    }\n\n    .hidden {\n      display: none;\n    }\n\n    #registration-status {\n      background-color: #FFE454;\n      padding: 10px;\n    }\n    ```", "```js\n    'use strict';\n\n    var scope = {\n      scope: './'\n    };\n\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.register(\n        'service-worker.js',\n        scope\n      ).then( function(serviceWorker) {\n        printStatus('successful');\n      }).catch(function(error) {\n        printStatus(error);\n      });\n    } else {\n      printStatus('unavailable');\n    }\n\n    function printStatus(status) {\n      document.querySelector('#status').innerHTML = status;\n    }\n\n    document.querySelector('#resetButton').addEventListener('click',\n      function() {\n        navigator.serviceWorker.getRegistration().then(function(registration) {\n          registration.unregister();\n          window.location.reload();\n        });\n      }\n    );\n    ```", "```js\n    'use strict';\n\n    var version = 1,\n      currentCaches= { readThrough : 'version-' + version },\n      NOT_FOUND = -1,\n      ERROR_RESPONSE = 400;\n\n    self.addEventListener('activate', function(event) {\n      var expectingCacheNames = Object.keys(currentCaches).map(function(key) {\n        return currentCaches[key];\n      });\n\n      event.waitUntil(\n        caches.keys().then(function(cacheNames) {\n          return Promise.all(\n            cacheNames.map(function(cacheName) {\n              if (expectingCacheNames.indexOf(cacheName) === NOT_FOUND) {\n                console.log(\n                  '%c DELETE: Out of date cache: %s',\n                  'color: #ff0000',\n                  cacheName\n                );\n                return caches.delete(cacheName);\n              }\n            })\n          );\n        })\n      );\n    });\n\n    self.addEventListener('fetch', function(event) {\n      var request = event.request,\n        requestUrl = request.url;\n\n      console.log(\n        '%c  EVENT: %c Handling fetch event for %s',\n        'color: #F57F20',\n        'color: #000',\n        requestUrl\n      );\n\n      event.respondWith(\n        caches.open(currentCaches['readThrough']).then(function(cache) {\n          return cache.match(request).then(function(response) {\n            if (response) {\n              console.log(\n                '%c P RESPONSE: %c Found in cache: %s',\n                'color: #5EBD00',\n                'color: #000000',\n                response\n              );\n\n              return response;\n            }\n            console.log(\n              '%c O RESPONSE: %c For %s not found in cache. ' +\n              'fetching from network...',\n              'color: #F05266',\n              'color: #000',\n              requestUrl\n            );\n\n            return fetch(request.clone()).then(function(response) {\n              console.log(\n                '%c RESPONSE: %c For %s from network is: %O',\n                'color: #F05266',\n                'color: #000',\n                requestUrl,\n                response\n              );\n\n              if (response.status < ERROR_RESPONSE) {\n                cache.put(request, response.clone());\n              }\n\n              return response;\n            });\n          }).catch(function(err) {\n            console.error('FAIL: Read-through cache:', err);\n            throw error;\n          });\n        })\n      );\n    });\n    ```", "```js\nvar version = 1,\n   currentCaches= { readThrough : 'version-' + version },\n```", "```js\nself.addEventListener('activate', function(event) {\n  var expectingCacheNames = Object.keys(currentCaches).map(function(key) {\n    return currentCaches[key];\n  });\n\n  event.waitUntil(\n    caches.keys().then(function(cacheNames) {\n      return Promise.all(\n        cacheNames.map(function(cacheName) {\n          if (expectingCacheNames.indexOf(cacheName) === NOT_FOUND) {\n            console.log('%c DELETE: Out of date cache: %s',\n              'color: #ff0000', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});\n```", "```js\nevent.respondWith(\n    caches.open(currentCaches['readThrough']).then(function(cache) {\n      return cache.match(request).then(function(response) {\n        if (response) {\n          console.log(\n            '%c ✔ RESPONSE: %c Found in cache: %s',\n            'color: #5EBD00','color: #000000',response\n          );\n\n          return response;\n        }\n```", "```js\nreturn fetch(request.clone()).then(function(response) {\n          console.log(\n            '%c RESPONSE: %c For %s from network is: %O',\n            'color: #F05266',\n            'color: #000',\n            requestUrl,\n            response\n          );\n```", "```js\nif (response.status < ERROR_RESPONSE) {\n```", "```js\n…\ncache.put(request, response.clone());\n}\n\nreturn response;\n```", "```js\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Offline Google Analytics</title>\n      <link rel=\"stylesheet\" href=\"style.css\">\n    </head>\n    <body>\n      <section id=\"registration-status\">\n        <p>Registration status: <strong id=\"status\"></strong></p>\n        <input type=\"button\" id=\"resetButton\" value=\"Reset\" />\n      </section>\n      <section id=\"outlet\">\n        <p id=\"message\"></p>\n        <div id=\"images\" style=\"display: none\">\n           <img src=\"img/serice-worker.jpg\">\n        </div>\n      </section>\n      <script src=\"img/index.js\"></script>\n      <script>\n          /* jshint ignore:start */\n          (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n            (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n          })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n          ga('create', 'UA-12345678-1', 'auto');\n          ga('send', 'pageview');\n          /* jshint ignore:end */\n        </script>\n    </body>\n    </html>\n    ```", "```js\n    * {\n      -webkit-box-sizing: border-box;\n      -moz-box-sizing: border-box;\n      box-sizing: border-box;\n    }\n\n    body {\n      margin: 0 auto;\n      text-align: center;\n      font-family: sans-serif;\n    }\n\n    main {\n      max-width: 350px;\n      border: 1px solid #4CAF50;\n      padding: 20px;\n      border-radius: 5px;\n      width: 350px;\n      margin: 20px auto;\n    }\n\n    h1 {\n      color: #4CAF50;\n    }\n\n    img {\n      padding: 20px 0;\n      max-width: 400px;\n    }\n\n    .hidden {\n      display: none;\n    }\n\n    #registration-status {\n      background-color: #FFE454;\n      padding: 10px;\n    }\n    ```", "```js\n    'use strict';\n\n    var scope = {\n      scope: './'\n    };\n\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.register(\n        'service-worker.js',\n        scope\n      ).then( function(serviceWorker) {\n        printStatus('successful');\n        if (navigator.serviceWorker.controller) {\n          showImages();\n        } else {\n          document.querySelector('#message').textContent = 'Reload the page for images to be loaded from the service worker cache';\n        }\n      }).catch(function(error) {\n        printStatus(error);\n      });\n    } else {\n      printStatus('unavailable');\n    }\n\n    function printStatus(status) {\n      document.querySelector('#status').innerHTML = status;\n    }\n\n    document.querySelector('#resetButton').addEventListener('click',\n      function() {\n        navigator.serviceWorker.getRegistration().then(function(registration) {\n          registration.unregister();\n          window.location.reload();\n        });\n      }\n    );\n\n    function showImages() {\n      document.querySelector('#images').style.display = 'block';\n    }\n    ```", "```js\n    'use strict';\n\n    var RW = 'readwrite';\n\n    function checkForAnalyticsRequest(requestUrl) {\n      var url = new URL(requestUrl),\n        regex = /^(w{3}|ssl)\\.google-analytics.com$/;\n\n      if (url.hostname.match(regex) && url.pathname === '/collect') {\n        console.log('INDEXEDDB: Store request(Google analytics) for replaying later.');\n        saveGoogleAnalyticsRequest(requestUrl);\n      }\n    }\n\n    function saveGoogleAnalyticsRequest(requestUrl) {\n      getIDBObjectStore(idbInstance, idbStore, RW).add({\n        url: requestUrl,\n        timestamp: Date.now()\n      });\n    }\n\n    function replayGoogleAnalyticsRequests(idbInstance, idbStore, throttle) {\n      var savedGoogleAnalyticsRequests = [];\n\n      getIDBObjectStore(idbInstance, idbStore).openCursor().onsuccess = function(event) {\n        var cursor = event.target.result;\n\n        if (cursor) {\n          savedGoogleAnalyticsRequests.push(cursor.value);\n          cursor.continue();\n        } else {\n          console.log('REPLAY: Starting %d Google Analytics requests',\n            savedGoogleAnalyticsRequests.length);\n\n          savedGoogleAnalyticsRequests.forEach(function(savedRequest) {\n            var queueTime = Date.now() - savedRequest.timestamp;\n            if (queueTime > throttle) {\n              getIDBObjectStore(idbInstance, idbStore, RW).delete(savedRequest.url);\n              console.log('REQUEST: Queued for %dms ' +\n                'STOPPED: Replay attempt', queueTime);\n            } else {\n              var requestUrl = savedRequest.url + '&qt=' + queueTime;\n\n              console.log('%c ♫ REPLAY: %s %s', 'color: #1C99D8', 'in progress...', requestUrl);\n\n              fetch(requestUrl).then(function(response) {\n                if (response.status < 400) {\n                  getIDBObjectStore(idbInstance, idbStore, RW).delete(savedRequest.url);\n                  console.log('%c ♫ REPLAY: %s', 'color: #1C99D8', 'success');\n                } else {\n                  console.error('♫ REPLAY: fail -', response);\n                }\n              }).catch(function(err) {\n                console.error('♫ REPLAY: fail - ', err);\n              });\n            }\n          });\n        }\n      };\n    }\n    ```", "```js\nvar db = openIDBDatabase('offline-google-analytics', idbVersion);\ndb.onerror = function(err) {\n  console.error('%c ✗ ERROR: IndexedDB - %s', 'color: #ff0000', err);\n};\n\ndb.onupgradeneeded = function() {\n  this.result.createObjectStore(idbStore, {keyPath: 'url'});\n};\n\ndb.onsuccess = function() {\n  idbInstance = this.result;\n  replayGoogleAnalyticsRequests(idbInstance, idbStore, throttle);\n};\n```", "```js\nevent.respondWith(\n    caches.open(currentCaches['offline-google-analytics']).then(function(cache) {\n      return cache.match(event.request).then(function(res) {\n        if (res) {\n          console.log(\n            '%c ✔ RESPONSE: %c Found in cache: %s',\n            'color: #5EBD00', 'color: #000000', res\n          );\n\n          return res;\n        }\n```", "```js\n return fetch(event.request.clone()).then(function(res) {\n          console.log('%c ✔ RESPONSE: %c For %s from network: %O',\n            'color: #5EBD00', 'color: #000000',\n            event.request.url, res);\n\n          if (res.status < 400) {\n            cache.put(event.request, res.clone());\n          }\n```", "```js\npromises = promises.map(function(promise) {\n      return Promise.resolve(promise);\n    });\n```", "```js\nif (res.status < 400) {\n            cache.put(event.request, res.clone());\n          }\n```", "```js\n} else if (res.status >= 500) {\n            checkForAnalyticsRequest(event.request.url);\n          }\n```", "```js\nfunction checkForAnalyticsRequest(requestUrl) {\n  var url = new URL(requestUrl),\n    regex = /^(w{3}|ssl)\\.google-analytics.com$/;\n\n  if (url.hostname.match(regex) && url.pathname === '/collect') {\n    console.log('INDEXEDDB: Store request(Google analytics) for replaying later.');\n    saveGoogleAnalyticsRequest(requestUrl);\n  }\n}\n```", "```js\nfunction replayGoogleAnalyticsRequests(idbInstance, idbStore, throttle) {\n  var savedGoogleAnalyticsRequests = [];\n\n  getIDBObjectStore(idbInstance, idbStore).openCursor().onsuccess = function(event) {\n    var cursor = event.target.result;\n```", "```js\ngetIDBObjectStore(idbInstance, idbStore).openCursor().onsuccess = function(event) {\n    var cursor = event.target.result;\n\n    if (cursor) {\n      savedGoogleAnalyticsRequests.push(cursor.value);\n      cursor.continue();\n    }\n```", "```js\n} else {\n      console.log('REPLAY: Starting %d Google Analytics requests',\n        savedGoogleAnalyticsRequests.length);\n\n      savedGoogleAnalyticsRequests.forEach(function(savedRequest) {\n        var queueTime = Date.now() - savedRequest.timestamp;\n        if (queueTime > throttle) {\n          getIDBObjectStore(idbInstance, idbStore, RW).delete(savedRequest.url);\n          console.log('REQUEST: Queued for %dms ' +\n            'STOPPED: Replay attempt', queueTime);\n        } else {\n          var requestUrl = savedRequest.url + '&qt=' + queueTime;\n\n          console.log('%c ♫ REPLAY: %s %s', 'color: #1C99D8', 'in progress...', requestUrl);\n\n          fetch(requestUrl).then(function(response) {\n            if (response.status < 400) {\n              getIDBObjectStore(idbInstance, idbStore, RW).delete(savedRequest.url);\n              console.log('%c ♫ REPLAY: %s', 'color: #1C99D8', 'success');\n            } else {\n              console.error('♫ REPLAY: fail -', response);\n            }\n          }).catch(function(err) {\n            console.error('♫ REPLAY: fail - ', err);\n          });\n        }\n      });\n    }\n```", "```js\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Offline User Interaction</title>\n      <link rel=\"stylesheet\" href=\"style.css\">\n    </head>\n    <body>\n      <section id=\"registration-status\">\n        <p>Registration status: <strong id=\"status\"></strong></p>\n        <input type=\"button\" id=\"resetButton\" value=\"Reset\" />\n      </section>\n      <section>\n        <video width=\"320\" height=\"240\" id=\"video-01\" controls>\n          <source src=\"img/video.mp4\" type=\"video/mp4\">\n          Your browser does not support the video tag.\n        </video>\n        <input type=\"button\" id=\"watch-later\" value=\"Watch Later\" />\n      </section>\n      <script src=\"img/index.js\"></script>\n    </body>\n    </html>\n    ```", "```js\n    'use strict';\n\n    var scope = {\n      scope: './'\n    };\n\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.register(\n        'service-worker.js',\n        scope\n      ).then( function(serviceWorker) {\n        printStatus('successful');\n      }).catch(function(error) {\n        printStatus(error);\n      });\n    } else {\n      printStatus('unavailable');\n    }\n\n    document.querySelector('#resetButton').addEventListener('click',\n      function() {\n        navigator.serviceWorker.getRegistration().then(function(registration) {\n          registration.unregister();\n          window.location.reload();\n        });\n      }\n    );\n\n    function printStatus(status) {\n      document.querySelector('#status').innerHTML = status;\n    }\n\n    document.getElementById('watch-later').addEventListener('click', function(event) {\n      event.preventDefault();\n\n      caches.open('video').then(function(cache) {\n        fetch('video.mp4').then(function(response) {\n          return response.url;\n        }).then(function(url) {\n          cache.add(url);\n        });\n      });\n    });\n    ```", "```js\n    'use strict';\n\n    var cacheName= 'user-interaction-cache';\n\n    self.addEventListener('install', function(event) {\n      event.waitUntil(\n        caches.open(cacheName)\n          .then(function(cache) {\n            return cache.addAll([\n              'index.html'\n            ]);\n          })\n          .then(function() {\n            return self.skipWaiting();\n          })\n      );\n    });\n\n    self.addEventListener('fetch', function(event) {\n      event.respondWith(\n        caches.match(event.request)\n          .then(function(response) {\n            if (response) {\n              console.log('Fetching from the cache: ', event.request.url);\n              return response;\n            } else {\n              console.log('Fetching from server: ', event.request.url);\n            }\n           return fetch(event.request);\n         }\n       )\n     );\n    });\n\n    self.addEventListener('activate', function(event) {\n       console.log('Activating the service worker!');\n       event.waitUntil(self.clients.claim());\n    });\n    ```", "```js\n    * {\n      -webkit-box-sizing: border-box;\n      -moz-box-sizing: border-box;\n      box-sizing: border-box;\n    }\n\n    body {\n      margin: 0 auto;\n      text-align: center;\n      font-family: sans-serif;\n    }\n\n    main {\n      max-width: 350px;\n      border: 1px solid #4CAF50;\n      padding: 20px;\n      border-radius: 5px;\n      width: 350px;\n      margin: 20px auto;\n    }\n\n    h1 {\n      color: #4CAF50;\n    }\n\n    img {\n      padding: 20px 0;\n      max-width: 200px;\n    }\n\n    .hidden {\n      display: none;\n    }\n\n    #registration-status {\n      background-color: #FFE454;\n      padding: 10px;\n    }\n\n    input#watch-later {\n        display: block;\n        margin: 10px auto;\n        padding: 50px;\n    }\n    ```", "```js\ncaches.open(cacheName)\n      .then(function(cache) {\n        return cache.addAll([\n          'index.html'\n        ]);\n      })\n```", "```js\n<section>\n    <video width=\"320\" height=\"240\" id=\"video-01\" controls>\n      <source src=\"img/video.mp4\" type=\"video/mp4\">\n      Your browser does not support the video tag.\n    </video>\n    <input type=\"button\" id=\"watch-later\" value=\"Watch Later\" />\n  </section>\n```", "```js\ndocument.getElementById('watch-later').addEventListener('click', function(event) {\n  event.preventDefault();\n\n  caches.open('video').then(function(cache) {\n    fetch('video.mp4').then(function(response) {\n      return response.url;\n    }).then(function(url) {\n      cache.add(url);\n    });\n  });\n});\n```", "```js\nself.addEventListener('fetch', function(event) {\n  event.respondWith(\n    caches.match(event.request)\n      .then(function(response) {\n        if (response) {\n          console.log('Fetching from the cache: ', event.request.url);\n          return response;\n        } else {\n          console.log('Fetching from server: ', event.request.url);\n        }\n       return fetch(event.request);\n     }\n   )\n );\n});\n```", "```js\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Cache First, then Network</title>\n      <link rel=\"stylesheet\" href=\"style.css\">\n    </head>\n    <body>\n      <section id=\"registration-status\">\n        <p>Registration status: <strong id=\"status\"></strong></p>\n        <input type=\"button\" id=\"resetButton\" value=\"Reset\" />\n      </section>\n      <section id=\"outlet\">\n        <p></p>\n      </section>\n      <script src=\"img/index.js\"></script>\n    </body>\n    </html>\n    ```", "```js\n    'use strict';\n\n    var scope = {\n      scope: './'\n    };\n\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.register(\n        'service-worker.js',\n        scope\n      ).then( function(serviceWorker) {\n        printStatus('successful');\n        document.querySelector('#outlet p').textContent =\n        'The service worker controlling this page has cached this funky font.';\n      }).catch(function(error) {\n        printStatus(error);\n      });\n    } else {\n      printStatus('unavailable');\n    }\n\n    function printStatus(status) {\n      document.querySelector('#status').innerHTML = status;\n    }\n\n    document.querySelector('#resetButton').addEventListener('click',\n      function() {\n        navigator.serviceWorker.getRegistration().then(function(registration) {\n          registration.unregister();\n          window.location.reload();\n        });\n      }\n    );\n    ```", "```js\n    'use strict';\n\n    var cacheVersion = 1,\n      currentCaches = {\n      font: 'selective-caching-v' + cacheVersion\n    };\n\n    self.addEventListener('activate', function(event) {\n      var cacheNamesExpected = Object.keys(currentCaches).map(function(key) {\n        return currentCaches[key];\n      });\n\n      event.waitUntil(\n        caches.keys().then(function(cacheNames) {\n          return Promise.all(\n            cacheNames.map(function(cacheName) {\n              if (cacheNamesExpected.indexOf(cacheName) === -1) {\n                console.log('DELETE: out of date cache:', cacheName);\n                return caches.delete(cacheName);\n              }\n            })\n          );\n        })\n      );\n    });\n    self.addEventListener('fetch', function(event) {\n      console.log('%c  EVENT: %c Handling fetch event for %s','color: #F57F20',\n      'color: #000',\n      event.request.url);\n\n      event.respondWith(\n        caches.open(currentCaches.font).then(function(cache) {\n          return cache.match(event.request).then(function(res) {\n            if (res) {\n              console.log(\n                '%c ✔ RESPONSE: %c Found in cache: %s',\n                'color: #5EBD00', 'color: #000000', res\n              );\n              return res;\n            }\n\n            console.log('%c  ✗ RESPONSE: %c Not found for %s in cache. ' +\n              'Attempt to fetch from network', 'color: #EB4A4B', 'color: #000000',\n              event.request.url);\n\n            return fetch(event.request.clone()).then(function(res) {\n              console.log('%c ✔ RESPONSE: %c For %s from network: %O',\n                'color: #5EBD00', 'color: #000000',\n                event.request.url, res);\n\n              if (res.status < 400 &&\n                  res.headers.has('content-type') &&\n                  res.headers.get('content-type').match(/^font\\//i)) {\n                console.log('%c ✔ RESPONSE: %c Caching to %s ',\n                  'color: #5EBD00', 'color: #000000',\n                  event.request.url);\n                cache.put(event.request, res.clone());\n              } else {\n                console.log('%c ✔ RESPONSE: %c Not caching to %s ',\n                  'color: #5EBD00', 'color: #000000',\n                  event.request.url);\n              }\n\n              return res;\n            });\n          }).catch(function(err) {\n            throw error;\n          });\n        })\n      );\n    });\n    ```", "```js\n    * {\n      -webkit-box-sizing: border-box;\n      -moz-box-sizing: border-box;\n      box-sizing: border-box;\n    }\n\n    body {\n      margin: 0 auto;\n      text-align: center;\n      font-family: sans-serif;\n    }\n\n    main {\n      max-width: 350px;\n      border: 1px solid #4CAF50;\n      padding: 20px;\n      border-radius: 5px;\n      width: 350px;\n      margin: 20px auto;\n    }\n\n    h1 {\n      color: #4CAF50;\n    }\n\n    img {\n      padding: 20px 0;\n      max-width: 200px;\n    }\n\n    .hidden {\n      display: none;\n    }\n\n    #registration-status {\n      background-color: #FFE454;\n      padding: 10px;\n    }\n\n    @font-face{\n      font-family: 'MyWebFont';\n      src: url('webfont-serif.woff') format('woff');\n    }\n\n    #outlet p {\n      font-family: 'MyWebFont', Arial, sans-serif;\n    }\n    ```", "```js\n  <section id=\"outlet\">\n    <p></p>\n  </section>\n```", "```js\n  @font-face{\n  font-family: 'MyWebFont';\n  src: url('webfont-serif.woff') format('woff');\n}\n\n#outlet p {\n  font-family: 'MyWebFont', Arial, sans-serif;\n}\n```", "```js\nif (res.status < 400 &&\n              res.headers.has('content-type') &&\n              res.headers.get('content-type').match(/^font\\//i)) {\n            console.log('%c ✔ RESPONSE: %c Caching to %s ',\n              'color: #5EBD00', 'color: #000000',\n              event.request.url);\n            cache.put(event.request, res.clone());\n          } else {\n            console.log('%c ✔ RESPONSE: %c Not caching to %s ',\n              'color: #5EBD00', 'color: #000000',\n              event.request.url);\n          }\n```"]