- en: Chapter 6. Manage Audio in Babylon.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the last chapter, you started adding dynamism to your scenes by adding collisions
    checks and physics simulations. Another important feature is handling sounds in
    your scenes and finally making it more alive. This chapter not only explains sound
    management with Babylon.js in order to create soundtrack sounds, but also spatialized
    sounds (3D). In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Playing 2D sounds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing 3D sounds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing 2D sounds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Babylon.js framework provides an audio engine based on WebAudio. It allows
    you to easily add 2D and 3D sounds using the provided tools that are developed
    for you by the Babylon.js team.
  prefs: []
  type: TYPE_NORMAL
- en: Creating 2D sounds
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Babylon.js framework provides a `BABYLON.Sound` class. This class allows
    you to create and manage 2D and 3D sounds for your scene. To add a sound, the
    only thing you need to do is to create a new `BABYLON.Sound` object, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can now get access to methods such as `.play`, `.pause`, and `.stop`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In fact, the sounds are loaded asynchronously so that you cannot call `sound.play()` right
    after creating the new sound object. This is why the `BABYLON.Sound` constructor
    provides a `readyToPlayCallback` parameter after the scene in order to handle
    the loading process. To play the sound when loaded, simply set the `readyToPlayCallback`
    parameter, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Fortunately, the developers thought about this behavior and provided a last
    parameter named `options`. This parameter allows you to automatically set the
    default behaviors instead of managing them in the ready-to-play callback. The
    `options` parameter is optional and is an object that looks similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `autoPlay` parameter will automatically play the sound when loaded and you
    don't have to manage the sound in the ready-to-play callback.
  prefs: []
  type: TYPE_NORMAL
- en: The Babylon.js framework still keeps things simple as you already added an audio
    track to your scene only by calling a `new` statement on the `BABYLON.Sound` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, you can play several sounds in a single scene, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Managing 2D sounds
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are several properties to manipulate a sound in 2D , such as the volume,
    whether the sound is playing or not, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set the sound''s volume, just call the `.setVolume` function of the sound.
    The new volume is set in the [0, 1] interval, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also get the volume, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can check the current state of a sound any time, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also set the sound''s state any time, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Playing 3D sounds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous topic, you added and played 2D sounds in a scene. These 2D sounds
    can be easily used as soundtracks for your games. To add dynamism to your scenes,
    as physics and collisions do, you can configure the sounds to be spatialized in
    a scene. The spatialized sounds, which are called 3D sounds, give give the notion
    of distance and orientation between the player and the sound. In other words,
    more the player is far from the sound, more the sound will be attenuated. Also,
    if the sound position is rather on the right of the player, the right speaker
    will generate more sound than the left speaker and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if the sound is emitted on your right, only the right speaker(s)
    should play it and the farther you are from the sound, the lower the sound's volume
    should be.
  prefs: []
  type: TYPE_NORMAL
- en: Creating 3D sounds
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can imagine that, as for the 2D sounds, you can create a spatialized sound
    using the same `BABYLON.Sound` constructor. Only the `options` parameter will
    change as you have to set `spatialSound` to `true`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have created the spatialized sound, you can set its 3D position in
    the scene''s world using a `BABYLON.Vector3`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Managing 3D sounds
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In contrast to the 2D sounds, you can customize more properties with 3D sounds.
    Spatialized sounds provide properties to configure the attenuation and panning
    model.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the default distance model (attenuation) is set to be linear.
    Two other models such as `exponential` and `inverse` exist, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As for the fog ([Chapter 4](ch04.html "Chapter 4. Using Materials to Customize
    3D Objects Appearance"), *Using Materials to Customize 3D Objects Appearance*),
    the linear model says that the farther away the player is from the sound source,
    the lower the sound will be following a linear function (the threshold of 0 volume
    is set by the `maxDistance` property). The exponential model is a variant of the
    linear model by following an exponential function.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `maxDistance` property can be set only if the distance model is linear,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'As for the `maxDistance` property, you can set the `rolloffFactor` property
    if you''re using an exponential model, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, you can update multiple values at the same time. Just configure
    the `.updateOptions` parameter with the values. Consider the following as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The last useful function for spatialized sounds is to directly attach a sound
    to a mesh. Then, it is not required to update the sound''s position manually to
    set it to the mesh''s position, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now, the sound and mesh share the same position and are updated together by
    the scene when you call `scene.render()`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a directional spatialized sound
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous spatialized sounds that you created were omnidirectional. This
    means that if you are behind a speaker, you'll hear the sound as loud as when
    you are in front of the speaker. Something that does not happen in real life.
    The Babylon.js audio engine provides a way to create directional sounds that are
    easily configurable.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that direction-spatialized sounds work only when the sound is attached
    to a mesh.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with the following sound reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You can configure it to be directional by calling only three functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, the direction of the sound is represented by a cone. Just set the direction
    cone, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'There are three parameters, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The size of the inner cone (in degrees) should be smaller than the outer cone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The size of the outer cone (in degrees) should be larger than the inner cone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The volume of the spatialized sound when the player is outside the outer cone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For a perfect directional sound, the sizes of the inner and outer cone should
    be equal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the directional cone is set, just set the direction of the sound according
    to the mesh rotation. The parameter is local to the mesh. Then, if you rotate
    the speaker, for example, the sound will always follow the speaker''s rotation,
    depending on the parameter. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, don''t forget to attach the sound to the mesh, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This quick chapter demonstrates that using sounds (2D and 3D) in a 3D engine
    can be easy when powerful tools are provided to the developer. The example files
    create a 2D sound that is played as a soundtrack and a 3D sound located at the
    box's position. Do not hesitate to play with the distance models and check the
    effects using your headphones.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll try to automate some things using the `ActionManager `class
    of Babylon.js. This class is useful for executing actions on objects when a trigger
    is raised. For example, if the player left-clicks on the box, it plays the sound
    named `my_sound.wav`. It's also the time to introduce **Actions Builder**, which
    is a part of the Babylon.js 3ds Max exporter. Actions Builder allows artists (and
    developers) to create actions on their objects without any lines of code.
  prefs: []
  type: TYPE_NORMAL
