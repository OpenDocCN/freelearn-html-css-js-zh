["```js\nvar http = require('http');\nvar router = function(req, res) {\n  res.end('API response');\n}\nhttp.createServer(router).listen('9000', '127.0.0.1');\nconsole.log('API listening');\n```", "```js\nvar routes = [];\nmodule.exports = {\n  register: function(method, route, handler) {\n    routes.push({ method: method, route: route, handler: handler });\n  },\n  process: function(req, res, next) {\n    // ...\n  }\n}\n```", "```js\nvar http = require('http');\nvar router = require('./router');\nhttp.createServer(router.process).listen('9000', '127.0.0.1');\nconsole.log('API listening');\n```", "```js\nprocess: function(req, res, next) {\n  var urlInfo = url.parse(req.url, true);\n  var info = {\n    get: urlInfo.query,\n    post: {},\n    path: urlInfo.pathname,\n    method: req.method\n  }\n  for(var i=0; i<routes.length; i++) {\n    var r = routes[i];\n    var match = info.path.match(r.route);\n    if((info.method === r.method || '' === r.method) && match) {\n      info.match = match;\n      if(info.method === 'POST' || info.method === 'PUT') {\n        processRequest(req, function(body) {\n          info.post = body;\n          r.handler(req, res, info);\n        });\n      } else {\n        r.handler(req, res, info);\n      }\n      return;\n    }\n  }\n  res.end('');\n}\n```", "```js\nvar url = require('url');\nvar qs = require('querystring');\nvar processRequest = function(req, callback) {\n  var body = '';\n    req.on('data', function (data) {\n        body += data;\n    });\n    req.on('end', function () {\n        callback(qs.parse(body));\n    });\n}\n```", "```js\nrouter.register('GET', /\\/books(.+)?/, function(req, res, info) {\n  console.log(info);\n  res.end('Getting all the books')\n});\n```", "```js\nrouter.register('POST', /\\/book(.+)?/, function(req, res, info) {\n  console.log(info);\n  res.end('New book created')\n});\n```", "```js\nrouter.register('GET', /\\/book\\/(.+)\\/(.+)?/, function(req, res, info) {\n  console.log(info);\n  res.end('Getting specific book')\n});\n```", "```js\nget: function(route, handler) { \n  this.register('GET', route, handler); \n},\npost: function(route, handler) { \n  this.register('POST', route, handler); \n},\nput: function(route, handler) { \n  this.register('PUT', route, handler); \n},\ndel: function(route, handler) { \n  this.register('DELETE', route, handler); \n},\nall: function(route, handler) { \n  this.register('', route, handler); \n}\n```", "```js\nmodule.exports = function(res) {\n  return {\n    c: 200,\n    code: function(c) {\n      this.c = c;\n      return this;\n    },\n    send: function(content) {\n      res.end(content.toString('utf8'));\n      this.c = 200;\n      return this;\n    }\n  }\n}\n```", "```js\nvar responder = require('./responder');\nrouter.get(/\\/book\\/(.+)\\/(.+)?/, function(req, res, info) {\n  console.log(info);\n  responder(res).code(200).send('Getting specific book');\n});\n```", "```js\njson: function(o) {\n  res.writeHead(this.c, {'Content-Type': 'application/json; charset=utf-8'});\n  return this.send(JSON.stringify(o));\n},\nhtml: function(content) {\n  res.writeHead(this.c, {'Content-Type': 'text/html; charset=utf-8'});\n  return this.send(content);\n},\ncss: function(content) {\n  res.writeHead(this.c, {'Content-Type': 'text/css; charset=utf-8'});\n  return this.send(content);\n},\njs: function(content) {\n  res.writeHead(this.c, {'Content-Type': 'application/javascript; charset=utf-8'});\n  return this.send(content);\n},\ntext: function(content) {\n  res.writeHead(this.c, {'Content-Type': 'text/plain; charset=utf-8'});\n  return this.send(content);\n}\n```", "```js\n{\n  \"name\": \"projectname\",\n  \"description\": \"description\",\n  \"version\": \"0.0.1\",\n  \"dependencies\": {\n    \"mongodb\": \"1.3.20\"\n    \"request\": \"2.34.0\"\n\n  }\n}\n```", "```js\nvar crypto = require(\"crypto\"),\n    client = require('mongodb').MongoClient,\n  mongodb_host = \"127.0.0.1\",\n  mongodb_port = \"27017\",\n  collection;\n\nvar connection = 'mongodb://';\nconnection += mongodb_host + ':' + mongodb_port;\nconnection += '/library';\nclient.connect(connection, function(err, database) {\n  if(err) {\n    throw new Error(\"Can't connect.\");\n  } else {\n    console.log(\"Connection to MongoDB server successful.\");\n      collection = database.collection('books');\n    }\n});\n```", "```js\nrouter.post(/\\/book/, function(req, res, info) {\n  var book = info.post;\n  book.ID = crypto.randomBytes(20).toString('hex');\n  if(typeof book.name == 'undefined') {\n    responder(res).code(400).json({error: 'Missing name.'});\n  } else if(typeof book.author == 'undefined') {\n    responder(res).code(400).json({error: 'Missing author.'});\n  } else {\n    collection.insert(book, {}, function() {\n      responder(res).code(201.json({message: 'Record created successful.'});  \n    });  \n  }\n});\n```", "```js\nrouter.put(/\\/book\\/(.+)?/, function(req, res, info) {\n  var book = info.post;\n  if(typeof book.name === 'undefined') {\n    responder(res).code(400).json({error: 'Missing name.'});\n  } else if(typeof book.author === 'undefined') {\n    responder(res).code(400).json({error: 'Missing author.'});\n  } else {\n    var ID = info.match[1];\n    collection.find({ID: ID}).toArray(function(err, records) {\n      if(records && records.length > 0) {\n        book.ID = ID;\n        collection.update({ID: ID}, book, {}, function() {\n          responder(res).code(200).json({message: 'Record updated successful.'});\n          });\n      } else {\n        responder(res).code(400).json({error: 'Missing record.'});    \n      }\n    });\n  }\n});\n```", "```js\nrouter.del(/\\/book\\/(.+)?/, function(req, res, info) {\n  var ID = info.match[1];\n  collection.find({ID: ID}).toArray(function(err, records) {\n    if(records && records.length > 0) {\n      collection.findAndModify({ID: ID}, [], {}, {remove: true}, function() {\n        responder(res).code(200).json({message: 'Record removed successfully.'});\n        });\n    } else {\n      responder(res).code(400).json({error: 'Missing record.'});    \n    }\n  });\n});\n```", "```js\nrouter.get(/\\/books/, function(req, res, info) {\n  collection.find({}).toArray(function(err, records) {\n    if(!err) {\n      responder(res).code(200).json(records);\n    } else {\n      responder(res).code(200).json([]);\n    }  \n  });\n});\n```", "```js\nrouter.all('', function(req, res, info) {\n  var html = '';\n  html += 'Available methods:<br />';\n  html += '<ul>';\n  html += '<li>GET /books</li>';\n  html += '<li>POST /book</li>';\n  html += '<li>PUT /book/[id]</li>';\n  html += '<li>DELETE /book/[id]</li>';\n  html += '</ul>';\n  responder(res).code(200).html(html);\n});\n```", "```js\n    var request = require('request');\n    var endpoint = 'http://127.0.0.1:9000/';\n    var bookID = '';\n    describe(\"Testing API\", function() {\n      it(\"should create a new book record\", function(done) {\n        request.post({ \n          url: endpoint + '/book', \n          form: {\n            name: 'Test Book',\n            author: 'Test Author'\n          }\n        }, function (e, r, body) {\n          expect(body).toBeDefined();\n          expect(JSON.parse(body).message).toBeDefined();\n          expect(JSON.parse(body).message).toBe('Record created successfully.');\n          done();\n        });\n      });\n    });\n    ```", "```js\n    it(\"should get all the books\", function(done) {\n      request.get({ \n        url: endpoint + '/books'\n      }, function (e, r, body) {\n        var books = JSON.parse(body);\n        expect(body).toBeDefined();\n        expect(books.length > 0).toBeDefined();\n        bookID = books[0].ID;\n        expect(bookID).toBeDefined();\n        done();\n      });\n    });\n    ```", "```js\n    it(\"should edit\", function(done) {\n      request.put({ \n        url: endpoint + '/book/' + bookID, \n        form: {\n          name: 'New name',\n          author: 'New author'\n        }\n      }, function (e, r, body) {\n        expect(body).toBeDefined();\n        expect(JSON.parse(body).message).toBeDefined();\n        expect(JSON.parse(body).message).toBe('Record updated successfully.');\n        done();\n      });\n    });\n    it(\"should delete a book\", function(done) {\n      request.del({ \n        url: endpoint + '/book/' + bookID\n      }, function (e, r, body) {\n        expect(body).toBeDefined();\n        expect(JSON.parse(body).message).toBeDefined();\n        expect(JSON.parse(body).message).toBe('Record removed successfully.');\n        done();\n      });\n    });\n    ```"]