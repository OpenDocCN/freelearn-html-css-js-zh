["```js\n// main.js \nasync function someTask () { \n   console.log('Performing some task'); \n} \n```", "```js\nexport function main () { \n  console.log('before task'); \n  someTask(); \n  console.log('after task created'); \n}  \n```", "```js\nexport function main () { \n  console.log('Before Promise created'); \n  someTask().then(function () { \n    console.log('After Task completed'); \n  }); \n  console.log('After Promise created');}  \n```", "```js\n// main.js \nasync function getRandomNumber () { \n   return Math.random(); \n} \n```", "```js\nexport async function main () { \n  console.log('before task'); \n  const result = await getRandomNumber(); \n  console.log('Received the value: %s', result); \n  console.log('after task completed'); \n}  \n```", "```js\nasync function getRandomNumber() { \n  console.log('Getting random number.'); \n  return Math.random(); \n} \n```", "```js\nasync function deteremineReadyToLaunch(percentage) { \n  console.log('Determining Ready to launch.'); \n  return Math.random() > 0.5; \n}  \n```", "```js\nasync function reportResults(isReadyToLaunch) { \n  if (isReadyToLaunch) { \n    console.log('Rocket ready to launch. Initiate countdown: '); \n  } else { \n    console.error('Rocket not ready. Abort mission: '); \n  } \n}  \n```", "```js\nexport function main() { \n  console.log('Before Promise created'); \n  getRandomNumber() \n    .then(deteremineReadyToLaunch) \n    .then(reportResults) \n  console.log('After Promise created'); \n}   \n```", "```js\nasync function checkEngines(threshold = 0.9) { \n  return Math.random() < threshold; \n} \n\nasync function checkFlightPlan(threshold = 0.9) { \n  return Math.random() < threshold; \n} \n\nasync function checkNavigationSystem(threshold = 0.9) { \n  return Math.random() < threshold; \n} \n\nPromise.all([ \n    checkEngines(), \n    checkFlightPlan(0.5), \n    checkNavigationSystem(0.75) \n]).then(function([enginesOk, flighPlanOk, navigationOk]) { \n  if (enginesOk) { \n    console.log('engines ready to go'); \n  } else { \n    console.error('engines not ready'); \n  } \n\n  if (flighPlanOk) { \n    console.log('flight plan good to go'); \n  } else { \n    console.error('error found in flight plan'); \n  } \n\n  if (navigationOk) { \n    console.log('navigation systems good to go'); \n  } else { \n    console.error('error found in navigation systems'); \n  } \n}) \n```", "```js\nasync function getRandomNumber() { \n  console.log('Getting random number.'); \n  return Math.random(); \n} \n```", "```js\nasync function deteremineReadyToLaunch(percentage) { \n  console.log('Determining Ready to launch.'); \n  return Math.random() > 0.5; \n} \n```", "```js\nasync function reportResults(isReadyToLaunch) { \n  if (isReadyToLaunch) { \n    console.log('Rocket ready to launch. Initiate countdown: '); \n  } else { \n    console.error('Rocket not ready. Abort mission: '); \n  } \n}  \n```", "```js\nexport async function main() { \n  const randomNumber = await getRandomNumber();\n  const ready = await deteremineReadyToLaunch(randomNumber);\n  await reportResults(ready); \n}  \n```", "```js\nfunction checkEngines() { \n  console.log('checking engine'); \n\n  return new Promise(function (resolve) { \n    setTimeout(function() { \n      console.log('engine check completed'); \n      resolve(Math.random() < 0.9) \n    }, 250) \n  }); \n} \n\nfunction checkFlightPlan() { \n  console.log('checking flight plan'); \n\n  return new Promise(function (resolve) { \n    setTimeout(function() { \n      console.log('flight plan check completed'); \n      resolve(Math.random() < 0.9) \n    }, 350) \n  }); \n} \n\nfunction checkNavigationSystem() { \n  console.log('checking navigation system'); \n\n  return new Promise(function (resolve) { \n    setTimeout(function() { \n      console.log('navigation system check completed'); \n      resolve(Math.random() < 0.9) \n    }, 450) \n  }); \n}  \n```", "```js\n  export async function main() { \n  const enginePromise = checkEngines(); \n  const flighPlanPromise = checkFlightPlan(0.5); \n  const navSystemPromise = checkNavigationSystem(0.75); \n\n  const enginesOk = await enginePromise; \n  const flighPlanOk = await flighPlanPromise; \n  const navigationOk = await navSystemPromise; \n\n  if (enginesOk && flighPlanOk && navigationOk) { \n    console.log('All systems go, ready to launch: '); \n  } else { \n    console.error('Abort the launch: '); \n\n    if (!enginesOk) { \n      console.error('engines not ready'); \n    } \n\n    if (flighPlanOk) { \n      console.error('error found in flight plan'); \n    } \n\n    if (navigationOk) { \n      console.error('error found in navigation systems'); \n    } \n  } \n} \n```", "```js\nfunction checkEngines() { \n  console.log('checking engine'); \n\n  return new Promise(function (resolve) { \n    setTimeout(function() { \n      console.log('engine check completed'); \n      resolve(Math.random() < 0.9) \n    }, 250) \n  }); \n} \n\nfunction checkFlightPlan() { \n  console.log('checking flight plan'); \n\n  return new Promise(function (resolve) { \n    setTimeout(function() { \n      console.log('flight plan check completed'); \n      resolve(Math.random() < 0.9) \n    }, 350) \n  }); \n} \n\nfunction checkNavigationSystem() { \n  console.log('checking navigation system'); \n\n  return new Promise(function (resolve) { \n    setTimeout(function() { \n      console.log('navigation system check completed'); \n      resolve(Math.random() < 0.9) \n    }, 450) \n  }); \n}  \n```", "```js\nexport async function main() { \n  const prelaunchChecks = [ \n    checkEngines(), \n    checkFlightPlan(0.5), \n    checkNavigationSystem(0.75) \n  ]; \n\n  const checkResults = await Promise.all(prelaunchChecks); \n  const readyToLaunch = checkResults.reduce((acc, curr) => acc && \n  curr); \n\n  if (readyToLaunch) { \n    console.log('All systems go, ready to launch: '); \n  } else { \n    console.error('Something went wrong, abort the launch: '); \n  } \n} \n```", "```js\n export async function main() { \n  const prelaunchChecks = [ \n    checkEngines, \n    checkFlightPlan, \n    checkNavigationSystem \n  ]; \n const checkResults = await Promise.all(prelaunchChecks.map((check) => \n  check()); \n  const readyToLaunch = checkResults.reduce((acc, curr) => acc && \n  curr); \n\n  if (readyToLaunch) { \n    console.log('All systems go, ready to launch: '); \n  } else { \n    console.error('Something went wrong, abort the launch: '); \n  } \n\n```", "```js\nasync function addBoosters() { \n  throw new Error('Unable to add Boosters'); \n} \n```", "```js\nasync function performGuidanceDiagnostic (rocket) { \n  throw new Error('Unable to finish guidance diagnostic')); \n} \n```", "```js\n export async function main() { \n    console.log('Before Check'); \n\n  try { \n    await addBosters(); \n    await performGuidanceDiagnostic(); \n  } catch (e) { \n    console.error(e); \n  } \n} \n\n  console.log('After Check'); \n```", "```js\nfunction checkEngines() { \n  console.log('checking engine'); \n\n  return new Promise(function (resolve, reject) { \n    setTimeout(function () { \n      if (Math.random() > 0.5) { \n        reject(new Error('Engine check failed')); \n      } else { \n        console.log('Engine check completed'); \n        resolve(); \n      } \n    }, 250) \n  }); \n} \n\nfunction checkFlightPlan() { \n  console.log('checking flight plan'); \n\n  return new Promise(function (resolve, reject) { \n    setTimeout(function () { \n      if (Math.random() > 0.5) { \n        reject(new Error('Flight plan check failed')); \n      } else { \n        console.log('Flight plan check completed'); \n        resolve(); \n      } \n    }, 350) \n  }); \n} \n\nfunction checkNavigationSystem() { \n  console.log('checking navigation system'); \n\n  return new Promise(function (resolve, reject) { \n    setTimeout(function () { \n      if (Math.random() > 0.5) { \n        reject(new Error('Navigation system check failed')); \n      } else { \n        console.log('Navigation system check completed'); \n        resolve(); \n      } \n    }, 450) \n  }); \n} \n\n```", "```js\n export async function main() { \n  try { \n    const prelaunchChecks = [ \n      checkEngines, \n      checkFlightPlan, \n      checkNavigationSystem \n    ]; \n    await Promise.all(prelauchCheck.map((check) => check()); \n; \n    console.log('All systems go, ready to launch: '); \n  } catch (e) { \n    console.error('Aborting launch: '); \n    console.error(e); \n  } \n   }    \n```", "```js\n function checkEngines() { \n  console.log('checking engine'); \n\n  return new Promise(function (resolve, reject) { \n    setTimeout(function () { \n      if (Math.random() > 0.5) { \n        reject(new Error('Engine check failed')); \n      } else { \n        console.log('Engine check completed'); \n        resolve(); \n      } \n    }, 250) \n  }); \n} \n\nfunction checkFlightPlan() { \n  console.log('checking flight plan'); \n\n  return new Promise(function (resolve, reject) { \n    setTimeout(function () { \n      if (Math.random() > 0.5) { \n        reject(new Error('Flight plan check failed')); \n      } else { \n        console.log('Flight plan check completed'); \n        resolve(); \n      } \n    }, 350) \n  }); \n} \n\nfunction checkNavigationSystem() { \n  console.log('checking navigation system'); \n\n  return new Promise(function (resolve, reject) { \n    setTimeout(function () { \n      if (Math.random() > 0.5) { \n        reject(new Error('Navigation system check failed')); \n      } else { \n        console.log('Navigation system check completed'); \n        resolve(); \n      } \n    }, 450) \n  }); \n}  \n```", "```js\nasync function performChecks() { \n  console.log('Starting Pre-Launch Checks'); \n  try { \n    const prelaunchChecks = [ \n      checkEngines, \n      checkFlightPlan, \n      checkNavigationSystem \n    ]; \n\n    return Promise.all(prelauchCheck.map((check) => check()); \n\n  } finally { \n    console.log('Completed Pre-Launch Checks'); \n  } \n   }  \n```", "```js\nexport async function main() { \n  try { \n    await performChecks(); \n    console.log('All systems go, ready to launch: '); \n  } catch (e) { \n    console.error('Aborting launch: '); \n    console.error(e); \n  } \n   }  \n```"]