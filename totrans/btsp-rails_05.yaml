- en: Chapter 5. Reinventing Tables and Forms in Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tables and forms are good old fashioned features of HTML. They have been playing
    a pivotal role on the Internet since its inception. With Bootstrap and Rails,
    we are going to reinvent a whole new way of creating forms and tables in our web
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will take a look at various features of Bootstrap tables
    and forms. We will use Bootstrap's validation classes while validating forms in
    a Rails app. Finally, we will use Bootstrap's tables to fill the stored data.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will continue to develop the same demo application that was half designed
    in the last chapter. We will now see how to modify the single-product page by
    using Bootstrap''s tables. There are some more pages which were left unstyled
    in the last chapter: the `New Product` Form page and `Edit Product` Form page.
    We will use Bootstrap forms to modify these pages as well.'
  prefs: []
  type: TYPE_NORMAL
- en: However, before jumping into the application, we need to understand how Bootstrap's
    tables and forms are created. Hence, we will start by creating dummy products,
    as always, and then integrate them in our real application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Bootstrap tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bootstrap tables are normal HTML tables, along with some special classes provided
    by Bootstrap. These classes come with various different CSS styles to be applied
    to the HTML tables. Hence, Bootstrap gives you multiple classes to create different
    types of tables, as per your requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s create a basic HTML table first. For this, create a dummy project
    called `Bootstrap Tables` and create an `index.html` file. Copy the following
    Bootstrap recommended HTML markup into this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This file has all the necessary Bootstrap files included from the CDN. Let''s
    proceed with Bootstrap container and insert code into the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create an HTML table inside this container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you preview the preceding markup in the browser, you will see a *not-so-awesome*
    table with two columns, here''s the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Bootstrap tables](img/7269OS_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s time to check out the magic of Bootstrap. Just add the `table` class
    to the preceding table in the screenshot, and you will find a properly aligned
    and decent table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'After inserting the preceding code, you''ll get something like the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Bootstrap tables](img/7269OS_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: That's great, isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s explore more. Now, add a `.table-striped` class to the preceding table
    in the screenshot. Also, keep the`.table` class in the table markup. Here, `.table-striped`
    is a helper class to add an additional alternate striped style to the table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get something like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Bootstrap tables](img/7269OS_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There''s more. To get a bordered table, this time add the `.table-bordered`
    class to the `table` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Bootstrap tables](img/7269OS_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Some other helper classes include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.table-hover`: Adding this class to the table highlights a row when the mouse
    is hovered over it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.table-condensed`: Add this class when you want to reduce the amount of spacing
    in each cell.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should not restrict yourself to combining the preceding classes together
    in a single table. I leave this up to you to experiment.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are five different contextual classes in Bootstrap. These classes are
    added to a particular row to highlight them with a particular color. The five
    contextual classes in Bootstrap are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`active`: This is added for a light grey background color'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`success`: This is added for a light green background color'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`danger`: This is added for a reddish brown background color'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`info`: This is added for a light blue background color'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`warning`: This is added for a light yellow background color'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows all the preceding contextual classes in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Bootstrap tables](img/7269OS_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding contextual class can also be applied to a particular cell. For
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This will only highlight that cell, instead of the whole row.
  prefs: []
  type: TYPE_NORMAL
- en: Let's talk about the responsiveness of the Bootstrap table. By default, Bootstrap
    tables are responsive in nature. They change their overall width and also the
    width of the columns, as per the size of the browser window. There might be times
    when you have hundreds of columns in your table, and you need to view it in a
    mobile screen. Imagine 100 columns dividing the table width into 100 equal parts.
    Too untidy, isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: Well, here's Bootstrap to the rescue! Bootstrap gives you a class called`.table-responsive`,
    which adds a horizontal scroll bar to the table when the space isn't sufficient.
    This also makes the table responsive to the touch-based scrolls in mobile screens.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that you shouldn't use these tables to structure the web pages.
    A table-based layout is outdated and is generally considered bad from an SEO point
    of view. You should only use tables to display tabular data.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Bootstrap forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating forms in Bootstrap is as easy as creating tables, which we have just
    seen in the previous section. All you need is some HTML markup and proper Bootstrap
    classes for forms. In this section, we will again create a dummy project called
    `Bootstrap Forms` and add an `index.html` file. Also, fill this file with the
    basic Bootstrap recommended HTML, as shown in the previous section. Do not forget
    to add the Bootstrap container in it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a simple `<form>` tag to the preceding container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: You don't have to attach any class to the form tag. The classes here are added
    to the form elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add our first form element to our form. We will place a text field and
    an associated label element. Bootstrap allows you to create a form group which
    consists of a label and a text field. This helps Bootstrap to properly style the
    form elements. A form group is created using a `div` element with a `.form-group`
    class. Let''s add a form group to the preceding form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We have also added a `.form-control` class to the text field to apply Bootstrap's
    style for text-based fields. You can also add this class to other text-based fields
    such as `<textarea>`, `<datetime>`, `<email>`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding form should now look as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Bootstrap forms](img/7269OS_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In a similar way, we will fill the preceding form with a **password** field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives us the form represented in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Bootstrap forms](img/7269OS_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s time to add a `checkbox` and a `radio` button to the form. Bootstrap
    provides a different set of classes for checkbox and radio buttons, `.form-control`
    isn''t compatible with them. This time, we will create wrappers with `checkbox`
    and `radio` classes. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create a properly aligned checkbox to your form. Just replace `checkbox`
    with `.radio` and create a `radio` button inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'For now, we will go with the checkbox element in our form, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Bootstrap forms](img/7269OS_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, let''s add a `submit` button to the form. The markup for a submit
    button is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This is a basic Bootstrap button with `btn` and `.btn-success` classes. The
    first class gives it the shape of a button, while the second class applies a color
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our final Bootstrap form will now look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Bootstrap forms](img/7269OS_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can also create different types of forms in Bootstrap. For example, if you
    want to place a login form inside the top-thin navigation bar of your website
    then the preceding form is definitely not suited for it.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap lets you place all the form elements in line or side by side, so that
    it can be fitted properly in such situations. To create an inline form, you just
    need a single class, as always, `.form-inline`. You need to add this class to
    the preceding `<form>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Bootstrap forms](img/7269OS_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'I know you are surprised here! Bootstrap added a single line of CSS code to
    `.form-group` when the `.form-inline` class was added. Here''s the code snapshot
    from Bootstrap''s CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'There is another very useful HTML form element called `<select>` used to create
    a drop-down menu. You can add the `.form-control` class to remove the default
    browser style from it and apply Bootstrap''s style. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: To disable a field in a Bootstrap form, just add HTML5's disabled attribute
    to any text field. Bootstrap will apply a deactivated style to it. This is applicable
    to `text-based` fields, `checkboxes`, `radio buttons`, `form buttons`, and the
    <`select`> element.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also control the sizes of each text-based field and select elements
    in Bootstrap using the following sizing classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.input-lg`: Adding `.input-lg` to a text field will make it look bigger than
    the default style'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.input-sm`: Adding `.input-sm` to a text field will make it look smaller than
    the default style'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sometimes, you might need to add a `help` text below each form field. To do
    this, you need to add a `span` element with the `.help-block` class inside the
    `.form-group` element. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Validation classes in Bootstrap forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bootstrap works well with HTML5's default form validation. Adding an attribute
    called required to any form element will prevent the form from being submitted.
    Bootstrap's JavaScript doesn't have any predefined validation functionality. It
    provides you with CSS classes that can be applied to the form elements on runtime.
    These classes are important to highlight which form element needs attention by
    the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at some of the form validation classes by Bootstrap:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.has-error`: This class is used to highlight a red color'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.has-warning`: This class is used to highlight a dull yellow color'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.has-success`: This class is used to highlight a green color'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These classes are applied to the `.form-group` element. For example, adding
    the `.has-error` class to any `.form-group` element will highlight both label
    and form elements with a red color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Validation classes in Bootstrap forms](img/7269OS_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Please note that Bootstrap will not add the validation classes automatically.
    You have to programmatically add them to highlight the errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also display fancy validation icons beside each form element. For this,
    you need to add a`.has-feedback` class to the `.form-group` element. You also
    have to add a span element with a Glyphicon icon in it. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will give you the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Validation classes in Bootstrap forms](img/7269OS_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding Bootstrap tables to our Rails application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our application, **OnlinePacktShopping**, we have a `product details` page.
    We will be adding Bootstrap's table to this page and do the redesigning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the server and check out the product page, it should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Bootstrap tables to our Rails application](img/7269OS_05_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We are going to redesign the page using Bootstrap, it should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Bootstrap tables to our Rails application](img/7269OS_05_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The product page is displayed using the `show.html.erb` view present in the
    `products` folder. To reach this folder, navigate to `app/views/products/`. Open
    this page and delete the entire markup from it.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to carry the page header style from the home page to this screen.
    So, put the following markup in the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'In the home page, we used to display **All products** using the `<h3>` tag.
    This time we will fill it with the name of the product. The product name is carried
    to this view by the `@product` model using the `name` property. Hence, `@product.name`
    should give us the name of the product:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we want to place two default action buttons, **Edit** and **Back**, on
    this page header. We have to place both these buttons side by side. Hence, we
    will use Bootstrap''s `list-inline` component here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in the preceding screenshot, I have used `link_to` tag to create
    links dynamically. The path is produced using the `edit_product_path()` and `products_path`
    methods. I am also adding classes `.btn`, `.btn-warning` and `.btn-default` to
    the buttons. This will produce a screen that looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Bootstrap tables to our Rails application](img/7269OS_05_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: I have used `.btn-warning` just to achieve the orange-colored button. It is
    not related to any warning sign here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s pull those buttons to the right side using Bootstrap''s helper class
    `.pull-right` added to the `<ul>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Bootstrap tables to our Rails application](img/7269OS_05_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we have our buttons placed properly. Let''s create a Bootstrap table to
    display product data in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'I am using a bordered table here. Let''s proceed to create rows and columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in the preceding code, I have displayed all the data present
    inside `@product` model in each row. I have also highlighted the last row using
    the`.success` class. The preceding markup will give us a page that looks like
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Bootstrap tables to our Rails application](img/7269OS_05_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: That was easy! Wasn't it?
  prefs: []
  type: TYPE_NORMAL
- en: We still have to show the `notice` object when it is passed from the `Edit`
    page and `Create` page to product page. Since this message is not always visible,
    we will use a conditional `if` statement to display it in this product page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go ahead and add the following markup above the table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'I am using Bootstrap''s alert feature here using the `alert` and `.alert-info`
    class. The first class is used to space and properly align the text and the second
    class is used for giving a proper background color. We will discuss more on alerts
    in the upcoming sections. The preceding markup will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Bootstrap tables to our Rails application](img/7269OS_05_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Finally, we are done with the product display page. We will now proceed to design
    the `Add product` and `Edit product` views.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Bootstrap forms to our Rails application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two template files that we have to edit here: `new.html.erb` and
    `edit.html.erb`. Open and view them. You will find that both of these files have
    the exact same structure. There''s only one additional **Show product** button
    in the `edit.html.erb` template. Hence, we will design only one form, `new.html.erb`,
    and then reuse it in the second template.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, delete everything that''s inside `new.html.erb`. As we did in all the
    pages, we will create a `page-header` in this page too. To do this, add the following
    markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s proceed to add a **cancel** button to the home page in the preceding
    `page-header`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we are having only button, we don''t have to use Bootstrap''s `list-inline`
    feature here, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Bootstrap forms to our Rails application](img/7269OS_05_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s time to create a form for creating new products. We will use Bootstrap''s
    grid system to create an 8-Bootstrap-columns container form. The markup for this
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We have used an offset class to center align the whole container. Next, we
    will add the tag to render the form inside the preceding container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will fetch the old unstyled form from the `_form.html.erb`
    template. So, let''s style the form present in this template. Here''s the modified
    markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: If you look carefully, you'll see that, I have wrapped all the labels and their
    respective form elements inside a `.form-group` element. For each label, I have
    added a `for` attribute with the value as the ID of its corresponding form element.
    For each text field, I have added a class as `.form-control` and an ID attribute
    with a unique ID value.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end, I have used Bootstrap''s `list-inline` feature to align two action
    buttons: **Submit** and **Reset**. I have added class `btn-success` to the submit
    button and `btn-default` to the reset button.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s time to checkout the whole `Add product` page in the browser. If you
    have implemented everything correctly, you should get a screen that looks like
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Bootstrap forms to our Rails application](img/7269OS_05_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will now move on to edit the `edit.html.erb` template file. We just need
    to make some modifications to the `new.html.erb` file''s markup to make it ready
    for `edit.html.erb`. Copy all the contents of the `new.html.erb` file and paste
    it in the `edit.html.erb` file. Change the text in the page-header to `Edit Product`.
    We need to add an additional button to this section, the `Show Product` Button.
    Hence, the final markup for the page-header in this file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how to create dummy Bootstrap forms and tables. We saw
    many different types of variations in them which could be done by simply changing
    or replacing Bootstrap classes. We then moved on to learn various Bootstrap validation
    classes for forms.
  prefs: []
  type: TYPE_NORMAL
- en: We saw how to use helper classes to make both forms and tables even more exciting.
    Finally, we moved on to integrate both Bootstrap forms and tables in our application,
    `OnlinePacktShopping`. We also completed the whole design of our basic application
    using Bootstrap's features. In the upcoming chapter, we will learn about Bootstrap
    navigation bars.
  prefs: []
  type: TYPE_NORMAL
