- en: Chapter 5. Reinventing Tables and Forms in Bootstrap
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章 在Bootstrap中重新设计表格和表单
- en: Tables and forms are good old fashioned features of HTML. They have been playing
    a pivotal role on the Internet since its inception. With Bootstrap and Rails,
    we are going to reinvent a whole new way of creating forms and tables in our web
    applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 表格和表单是HTML的古老功能。自从互联网诞生以来，它们一直在互联网上扮演着关键角色。通过Bootstrap和Rails，我们将重新发明一种全新的方式来创建我们的Web应用程序中的表单和表格。
- en: In this chapter, we will take a look at various features of Bootstrap tables
    and forms. We will use Bootstrap's validation classes while validating forms in
    a Rails app. Finally, we will use Bootstrap's tables to fill the stored data.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将查看Bootstrap表格和表单的各种功能。在Rails应用程序中验证表单时，我们将使用Bootstrap的验证类。最后，我们将使用Bootstrap的表格来填充存储的数据。
- en: 'We will continue to develop the same demo application that was half designed
    in the last chapter. We will now see how to modify the single-product page by
    using Bootstrap''s tables. There are some more pages which were left unstyled
    in the last chapter: the `New Product` Form page and `Edit Product` Form page.
    We will use Bootstrap forms to modify these pages as well.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续开发上一章中半设计的相同演示应用程序。现在，我们将看到如何通过使用Bootstrap的表格来修改单个产品页面。上一章中还有一些未设置样式的页面：`新产品`表单页面和`编辑产品`表单页面。我们也将使用Bootstrap表单来修改这些页面。
- en: However, before jumping into the application, we need to understand how Bootstrap's
    tables and forms are created. Hence, we will start by creating dummy products,
    as always, and then integrate them in our real application.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们跳入应用程序之前，我们需要了解Bootstrap的表格和表单是如何创建的。因此，我们将像往常一样先创建一些虚拟产品，然后将其集成到我们的实际应用程序中。
- en: Creating Bootstrap tables
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Bootstrap表格
- en: Bootstrap tables are normal HTML tables, along with some special classes provided
    by Bootstrap. These classes come with various different CSS styles to be applied
    to the HTML tables. Hence, Bootstrap gives you multiple classes to create different
    types of tables, as per your requirements.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap表格是普通的HTML表格，附带Bootstrap提供的一些特殊类。这些类包含各种不同的CSS样式，可以应用于HTML表格。因此，Bootstrap为你提供了多个类来创建不同类型的表格，以满足你的需求。
- en: 'So, let''s create a basic HTML table first. For this, create a dummy project
    called `Bootstrap Tables` and create an `index.html` file. Copy the following
    Bootstrap recommended HTML markup into this file:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们首先创建一个基本的HTML表格。为此，创建一个名为`Bootstrap Tables`的虚拟项目，并创建一个`index.html`文件。将以下Bootstrap推荐的HTML标记复制到该文件中：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This file has all the necessary Bootstrap files included from the CDN. Let''s
    proceed with Bootstrap container and insert code into the file:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件已从CDN包含所有必要的Bootstrap文件。让我们继续使用Bootstrap容器并在文件中插入代码：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s create an HTML table inside this container:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在容器内创建一个HTML表格：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you preview the preceding markup in the browser, you will see a *not-so-awesome*
    table with two columns, here''s the screenshot:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你预览浏览器中的前一个标记，你会看到一个*不那么出色*的带有两列的表格，以下是截图：
- en: '![Creating Bootstrap tables](img/7269OS_05_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![创建Bootstrap表格](img/7269OS_05_01.jpg)'
- en: 'It''s time to check out the magic of Bootstrap. Just add the `table` class
    to the preceding table in the screenshot, and you will find a properly aligned
    and decent table:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候看看Bootstrap的魔法了。只需将`table`类添加到截图中的前一个表格中，你就会发现一个排列整齐且不错的表格：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After inserting the preceding code, you''ll get something like the following
    screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在插入上述代码后，你会得到以下类似的截图：
- en: '![Creating Bootstrap tables](img/7269OS_05_02.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![创建Bootstrap表格](img/7269OS_05_02.jpg)'
- en: That's great, isn't it?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这太棒了，不是吗？
- en: 'Let''s explore more. Now, add a `.table-striped` class to the preceding table
    in the screenshot. Also, keep the`.table` class in the table markup. Here, `.table-striped`
    is a helper class to add an additional alternate striped style to the table:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续探索。现在，将`.table-striped`类添加到截图中的前一个表格中。同时保留表格标记中的`.table`类。在这里，`.table-striped`是一个辅助类，用于为表格添加额外的交替条纹样式：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You should get something like the following screenshot:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下类似的截图：
- en: '![Creating Bootstrap tables](img/7269OS_05_03.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![创建Bootstrap表格](img/7269OS_05_03.jpg)'
- en: 'There''s more. To get a bordered table, this time add the `.table-bordered`
    class to the `table` class:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多。要得到一个带边框的表格，这次将`.table-bordered`类添加到`table`类中：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output will be as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '![Creating Bootstrap tables](img/7269OS_05_04.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![创建Bootstrap表格](img/7269OS_05_04.jpg)'
- en: 'Some other helper classes include:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一些其他辅助类包括：
- en: '`.table-hover`: Adding this class to the table highlights a row when the mouse
    is hovered over it.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.table-hover`：将此类添加到表格中，当鼠标悬停在其上时，会突出显示一行。'
- en: '`.table-condensed`: Add this class when you want to reduce the amount of spacing
    in each cell.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.table-condensed`：当你想要减少每个单元格的间距时添加此类。'
- en: You should not restrict yourself to combining the preceding classes together
    in a single table. I leave this up to you to experiment.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你不应该将自己限制在将之前的类组合在一起的单个表格中。我将这个实验留给你。
- en: 'There are five different contextual classes in Bootstrap. These classes are
    added to a particular row to highlight them with a particular color. The five
    contextual classes in Bootstrap are:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 有五种不同的上下文类。这些类被添加到特定的行中，以特定的颜色突出显示。Bootstrap 中的五个上下文类是：
- en: '`active`: This is added for a light grey background color'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`active`：这是为了添加浅灰色背景颜色'
- en: '`success`: This is added for a light green background color'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`success`：这是为了添加浅绿色背景颜色'
- en: '`danger`: This is added for a reddish brown background color'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`danger`：这是为了添加红棕色背景颜色'
- en: '`info`: This is added for a light blue background color'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info`：这是为了添加浅蓝色背景颜色'
- en: '`warning`: This is added for a light yellow background color'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`warning`：这是为了添加浅黄色背景颜色'
- en: 'The following screenshot shows all the preceding contextual classes in action:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了所有之前的上下文类在作用：
- en: '![Creating Bootstrap tables](img/7269OS_05_05.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![创建 Bootstrap 表格](img/7269OS_05_05.jpg)'
- en: 'The preceding contextual class can also be applied to a particular cell. For
    example:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 之前提到的上下文类也可以应用于特定的单元格。例如：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will only highlight that cell, instead of the whole row.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这只会突出显示该单元格，而不是整行。
- en: Let's talk about the responsiveness of the Bootstrap table. By default, Bootstrap
    tables are responsive in nature. They change their overall width and also the
    width of the columns, as per the size of the browser window. There might be times
    when you have hundreds of columns in your table, and you need to view it in a
    mobile screen. Imagine 100 columns dividing the table width into 100 equal parts.
    Too untidy, isn't it?
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们谈谈 Bootstrap 表格的响应性。默认情况下，Bootstrap 表格具有响应性。它们根据浏览器窗口的大小改变整体宽度和列宽。可能会有时候你在你的表格中有数百列，你需要在一个移动屏幕上查看它。想象一下
    100 列将表格宽度分成 100 个相等的部分。太乱了，不是吗？
- en: Well, here's Bootstrap to the rescue! Bootstrap gives you a class called`.table-responsive`,
    which adds a horizontal scroll bar to the table when the space isn't sufficient.
    This also makes the table responsive to the touch-based scrolls in mobile screens.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这里是 Bootstrap 来帮忙！Bootstrap 提供了一个名为 `.table-responsive` 的类，当空间不足时，它会为表格添加一个水平滚动条。这也使得表格在移动屏幕上对基于触摸的滚动做出响应。
- en: Please note that you shouldn't use these tables to structure the web pages.
    A table-based layout is outdated and is generally considered bad from an SEO point
    of view. You should only use tables to display tabular data.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你不应该使用这些表格来构建网页结构。基于表格的布局已经过时，并且通常被认为从 SEO 角度来看是糟糕的。你应该只使用表格来显示表格数据。
- en: Creating Bootstrap forms
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Bootstrap 表单
- en: Creating forms in Bootstrap is as easy as creating tables, which we have just
    seen in the previous section. All you need is some HTML markup and proper Bootstrap
    classes for forms. In this section, we will again create a dummy project called
    `Bootstrap Forms` and add an `index.html` file. Also, fill this file with the
    basic Bootstrap recommended HTML, as shown in the previous section. Do not forget
    to add the Bootstrap container in it.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Bootstrap 中创建表单就像创建表格一样简单，正如我们在上一节中看到的。你所需要的是一些 HTML 标记和适当的 Bootstrap 表单类。在本节中，我们将再次创建一个名为
    `Bootstrap Forms` 的虚拟项目，并添加一个 `index.html` 文件。还要在这个文件中填充之前章节中显示的基本 Bootstrap 推荐的
    HTML，不要忘记在其中添加 Bootstrap 容器。
- en: 'Let''s add a simple `<form>` tag to the preceding container:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在先前的容器中添加一个简单的 `<form>` 标签：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You don't have to attach any class to the form tag. The classes here are added
    to the form elements.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要将任何类附加到表单标签上。这里的类是添加到表单元素上的。
- en: 'Let''s add our first form element to our form. We will place a text field and
    an associated label element. Bootstrap allows you to create a form group which
    consists of a label and a text field. This helps Bootstrap to properly style the
    form elements. A form group is created using a `div` element with a `.form-group`
    class. Let''s add a form group to the preceding form:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在表单中添加第一个表单元素。我们将放置一个文本字段和一个相关的标签元素。Bootstrap 允许你创建一个由标签和文本字段组成的表单组，这有助于
    Bootstrap 正确地样式化表单元素。表单组是通过一个具有 `.form-group` 类的 `div` 元素创建的。让我们在先前的表单中添加一个表单组：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We have also added a `.form-control` class to the text field to apply Bootstrap's
    style for text-based fields. You can also add this class to other text-based fields
    such as `<textarea>`, `<datetime>`, `<email>`, and so on.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还向文本字段添加了`.form-control`类以应用 Bootstrap 的文本字段样式。您还可以将此类添加到其他基于文本的字段，如 `<textarea>`、`<datetime>`、`<email>`
    等。
- en: 'The preceding form should now look as shown in the following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的表单现在应该看起来如下截图所示：
- en: '![Creating Bootstrap forms](img/7269OS_05_06.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![创建 Bootstrap 表单](img/7269OS_05_06.jpg)'
- en: 'In a similar way, we will fill the preceding form with a **password** field:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以类似的方式，我们将使用密码字段填充前面的表单：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This gives us the form represented in the following screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们展示了以下截图中的表单：
- en: '![Creating Bootstrap forms](img/7269OS_05_07.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![创建 Bootstrap 表单](img/7269OS_05_07.jpg)'
- en: 'It''s time to add a `checkbox` and a `radio` button to the form. Bootstrap
    provides a different set of classes for checkbox and radio buttons, `.form-control`
    isn''t compatible with them. This time, we will create wrappers with `checkbox`
    and `radio` classes. For example:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候向表单添加复选框和单选按钮了。Bootstrap 为复选框和单选按钮提供了一组不同的类，`.form-control`与它们不兼容。这次，我们将使用`checkbox`和`radio`类创建包装器。例如：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This will create a properly aligned checkbox to your form. Just replace `checkbox`
    with `.radio` and create a `radio` button inside it:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在您的表单中创建一个正确对齐的复选框。只需将`checkbox`替换为`.radio`并在其中创建一个单选按钮：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'For now, we will go with the checkbox element in our form, as shown here:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们将在表单中使用复选框元素，如下所示：
- en: '![Creating Bootstrap forms](img/7269OS_05_08.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![创建 Bootstrap 表单](img/7269OS_05_08.jpg)'
- en: 'Finally, let''s add a `submit` button to the form. The markup for a submit
    button is as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们在表单中添加一个`提交`按钮。提交按钮的标记如下：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This is a basic Bootstrap button with `btn` and `.btn-success` classes. The
    first class gives it the shape of a button, while the second class applies a color
    to it.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基本的 Bootstrap 按钮，具有 `btn` 和 `.btn-success` 类。第一个类给它提供了按钮的形状，而第二个类则应用了颜色。
- en: 'Our final Bootstrap form will now look like the following screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最终的 Bootstrap 表单现在将看起来如下截图所示：
- en: '![Creating Bootstrap forms](img/7269OS_05_09.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![创建 Bootstrap 表单](img/7269OS_05_09.jpg)'
- en: You can also create different types of forms in Bootstrap. For example, if you
    want to place a login form inside the top-thin navigation bar of your website
    then the preceding form is definitely not suited for it.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在 Bootstrap 中创建不同类型的表单。例如，如果您想在网站的顶部细导航栏中放置登录表单，那么前面的表单肯定不适合。
- en: Bootstrap lets you place all the form elements in line or side by side, so that
    it can be fitted properly in such situations. To create an inline form, you just
    need a single class, as always, `.form-inline`. You need to add this class to
    the preceding `<form>` tag.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 允许您将所有表单元素放置在一行或并排，以便在类似情况下正确适配。要创建内联表单，您只需要一个类，就像往常一样，`.form-inline`。您需要将此类添加到前面的`<form>`标签中。
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You should get the following output:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到以下输出：
- en: '![Creating Bootstrap forms](img/7269OS_05_10.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![创建 Bootstrap 表单](img/7269OS_05_10.jpg)'
- en: 'I know you are surprised here! Bootstrap added a single line of CSS code to
    `.form-group` when the `.form-inline` class was added. Here''s the code snapshot
    from Bootstrap''s CSS:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道您在这里感到惊讶！当添加`.form-inline`类时，Bootstrap 为`.form-group`添加了一行 CSS 代码。以下是 Bootstrap
    CSS 中的代码快照：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'There is another very useful HTML form element called `<select>` used to create
    a drop-down menu. You can add the `.form-control` class to remove the default
    browser style from it and apply Bootstrap''s style. For example:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 另有一个非常实用的 HTML 表单元素叫做 `<select>`，用于创建下拉菜单。您可以为它添加`.form-control`类以移除默认浏览器样式并应用
    Bootstrap 的样式。例如：
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: To disable a field in a Bootstrap form, just add HTML5's disabled attribute
    to any text field. Bootstrap will apply a deactivated style to it. This is applicable
    to `text-based` fields, `checkboxes`, `radio buttons`, `form buttons`, and the
    <`select`> element.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Bootstrap 表单中禁用字段，只需将 HTML5 的 disabled 属性添加到任何文本字段。Bootstrap 将应用一个非激活的样式。这适用于`基于文本`的字段、`复选框`、`单选按钮`、`表单按钮`和
    `<select>` 元素。
- en: 'You can also control the sizes of each text-based field and select elements
    in Bootstrap using the following sizing classes:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用以下尺寸类控制 Bootstrap 中每个文本字段和选择元素的尺寸：
- en: '`.input-lg`: Adding `.input-lg` to a text field will make it look bigger than
    the default style'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.input-lg`：将`.input-lg`添加到文本字段会使它看起来比默认样式更大'
- en: '`.input-sm`: Adding `.input-sm` to a text field will make it look smaller than
    the default style'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.input-sm`：将`.input-sm`添加到文本字段会使它看起来比默认样式更小'
- en: 'Sometimes, you might need to add a `help` text below each form field. To do
    this, you need to add a `span` element with the `.help-block` class inside the
    `.form-group` element. For example:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，你可能需要在每个表单字段下方添加一个 `help` 文本。为此，你需要在 `.form-group` 元素内添加一个具有 `.help-block`
    类的 `span` 元素。例如：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Validation classes in Bootstrap forms
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bootstrap 表单中的验证类
- en: Bootstrap works well with HTML5's default form validation. Adding an attribute
    called required to any form element will prevent the form from being submitted.
    Bootstrap's JavaScript doesn't have any predefined validation functionality. It
    provides you with CSS classes that can be applied to the form elements on runtime.
    These classes are important to highlight which form element needs attention by
    the user.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 与 HTML5 的默认表单验证功能配合良好。将一个名为 required 的属性添加到任何表单元素中，将阻止表单提交。Bootstrap
    的 JavaScript 没有任何预定义的验证功能。它为你提供可以在运行时应用于表单元素的 CSS 类。这些类对于突出显示哪些表单元素需要用户注意非常重要。
- en: 'Let''s have a look at some of the form validation classes by Bootstrap:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 Bootstrap 的一些表单验证类：
- en: '`.has-error`: This class is used to highlight a red color'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.has-error`：此类用于突出显示红色'
- en: '`.has-warning`: This class is used to highlight a dull yellow color'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.has-warning`：此类用于突出显示一种暗淡的黄色'
- en: '`.has-success`: This class is used to highlight a green color'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.has-success`：此类用于突出显示绿色'
- en: 'These classes are applied to the `.form-group` element. For example, adding
    the `.has-error` class to any `.form-group` element will highlight both label
    and form elements with a red color:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类应用于 `.form-group` 元素。例如，将 `.has-error` 类添加到任何 `.form-group` 元素上，将突出显示标签和表单元素为红色：
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You should get something like the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下类似的内容：
- en: '![Validation classes in Bootstrap forms](img/7269OS_05_11.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![Bootstrap 表单中的验证类](img/7269OS_05_11.jpg)'
- en: Please note that Bootstrap will not add the validation classes automatically.
    You have to programmatically add them to highlight the errors.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Bootstrap 不会自动添加验证类。你必须通过编程方式添加它们以突出显示错误。
- en: 'You can also display fancy validation icons beside each form element. For this,
    you need to add a`.has-feedback` class to the `.form-group` element. You also
    have to add a span element with a Glyphicon icon in it. For example:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在每个表单元素旁边显示花哨的验证图标。为此，你需要在 `.form-group` 元素上添加一个 `.has-feedback` 类。你还需要添加一个包含
    Glyphicon 图标的 `span` 元素。例如：
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The preceding code will give you the following output:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将给出以下输出：
- en: '![Validation classes in Bootstrap forms](img/7269OS_05_12.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![Bootstrap 表单中的验证类](img/7269OS_05_12.jpg)'
- en: Adding Bootstrap tables to our Rails application
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 Bootstrap 表格添加到我们的 Rails 应用程序中
- en: In our application, **OnlinePacktShopping**, we have a `product details` page.
    We will be adding Bootstrap's table to this page and do the redesigning.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序 `OnlinePacktShopping` 中，我们有一个 `产品详情` 页面。我们将在这个页面上添加 Bootstrap 的表格并进行重新设计。
- en: 'Start the server and check out the product page, it should look like this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 启动服务器并查看产品页面，它应该看起来像这样：
- en: '![Adding Bootstrap tables to our Rails application](img/7269OS_05_13.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![将 Bootstrap 表格添加到我们的 Rails 应用程序中](img/7269OS_05_13.jpg)'
- en: 'We are going to redesign the page using Bootstrap, it should look like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Bootstrap 重新设计页面，它应该看起来像这样：
- en: '![Adding Bootstrap tables to our Rails application](img/7269OS_05_14.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![将 Bootstrap 表格添加到我们的 Rails 应用程序中](img/7269OS_05_14.jpg)'
- en: The product page is displayed using the `show.html.erb` view present in the
    `products` folder. To reach this folder, navigate to `app/views/products/`. Open
    this page and delete the entire markup from it.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 产品页面是通过 `products` 文件夹中存在的 `show.html.erb` 视图显示的。要到达这个文件夹，导航到 `app/views/products/`。打开这个页面并删除其中的全部标记。
- en: 'First, we need to carry the page header style from the home page to this screen.
    So, put the following markup in the file:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要将主页的页面标题样式带到这个屏幕上。因此，在文件中放置以下标记：
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In the home page, we used to display **All products** using the `<h3>` tag.
    This time we will fill it with the name of the product. The product name is carried
    to this view by the `@product` model using the `name` property. Hence, `@product.name`
    should give us the name of the product:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在主页上，我们曾经使用 `<h3>` 标签显示 **所有产品**。这次我们将用产品的名称来填充它。产品名称是通过 `@product` 模型使用 `name`
    属性传递到这个视图的。因此，`@product.name` 应该给我们提供产品的名称：
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, we want to place two default action buttons, **Edit** and **Back**, on
    this page header. We have to place both these buttons side by side. Hence, we
    will use Bootstrap''s `list-inline` component here:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们想在页面标题上放置两个默认操作按钮，**编辑**和**返回**。我们必须将这两个按钮并排放置。因此，我们将在这里使用 Bootstrap 的`list-inline`组件。
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As you can see in the preceding screenshot, I have used `link_to` tag to create
    links dynamically. The path is produced using the `edit_product_path()` and `products_path`
    methods. I am also adding classes `.btn`, `.btn-warning` and `.btn-default` to
    the buttons. This will produce a screen that looks like the following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在前面的截图中所见，我使用了`link_to`标签来动态创建链接。路径是通过`edit_product_path()`和`products_path`方法生成的。我还为按钮添加了`.btn`,
    `.btn-warning`和`.btn-default`类。这将生成一个如下所示的屏幕：
- en: '![Adding Bootstrap tables to our Rails application](img/7269OS_05_15.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![将 Bootstrap 表格添加到我们的 Rails 应用程序中](img/7269OS_05_15.jpg)'
- en: I have used `.btn-warning` just to achieve the orange-colored button. It is
    not related to any warning sign here.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用`.btn-warning`只是为了得到橙色按钮。这与任何警告标志无关。
- en: 'Let''s pull those buttons to the right side using Bootstrap''s helper class
    `.pull-right` added to the `<ul>` tag:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 Bootstrap 的辅助类`.pull-right`将那些按钮拉到右侧，添加到`<ul>`标签中：
- en: '![Adding Bootstrap tables to our Rails application](img/7269OS_05_16.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![将 Bootstrap 表格添加到我们的 Rails 应用程序中](img/7269OS_05_16.jpg)'
- en: 'Now, we have our buttons placed properly. Let''s create a Bootstrap table to
    display product data in it:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的按钮已经放置好了。让我们创建一个 Bootstrap 表格来显示产品数据。
- en: '[PRE22]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'I am using a bordered table here. Let''s proceed to create rows and columns:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里使用了一个带边框的表格。让我们继续创建行和列：
- en: '[PRE23]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'As you can see in the preceding code, I have displayed all the data present
    inside `@product` model in each row. I have also highlighted the last row using
    the`.success` class. The preceding markup will give us a page that looks like
    the following:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在前面的代码中所见，我在每一行中显示了`@product`模型中存在的所有数据。我还使用`.success`类突出了最后一行。前面的标记将给我们一个如下所示的页面：
- en: '![Adding Bootstrap tables to our Rails application](img/7269OS_05_17.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![将 Bootstrap 表格添加到我们的 Rails 应用程序中](img/7269OS_05_17.jpg)'
- en: That was easy! Wasn't it?
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这很简单！不是吗？
- en: We still have to show the `notice` object when it is passed from the `Edit`
    page and `Create` page to product page. Since this message is not always visible,
    we will use a conditional `if` statement to display it in this product page.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然需要在从`编辑`页面和`创建`页面传递到产品页面时显示`notice`对象。由于此消息并不总是可见的，我们将使用条件`if`语句在此产品页面中显示它。
- en: 'Go ahead and add the following markup above the table:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在表格上方添加以下标记：
- en: '[PRE24]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'I am using Bootstrap''s alert feature here using the `alert` and `.alert-info`
    class. The first class is used to space and properly align the text and the second
    class is used for giving a proper background color. We will discuss more on alerts
    in the upcoming sections. The preceding markup will look like the following:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里使用 Bootstrap 的警报功能，使用`alert`和`.alert-info`类。第一个类用于间距和正确对齐文本，第二个类用于提供适当的背景颜色。我们将在接下来的章节中更详细地讨论警报。前面的标记将如下所示：
- en: '![Adding Bootstrap tables to our Rails application](img/7269OS_05_18.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![将 Bootstrap 表格添加到我们的 Rails 应用程序中](img/7269OS_05_18.jpg)'
- en: Finally, we are done with the product display page. We will now proceed to design
    the `Add product` and `Edit product` views.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们完成了产品显示页面。我们现在将继续设计`添加产品`和`编辑产品`视图。
- en: Adding Bootstrap forms to our Rails application
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 Bootstrap 表单添加到我们的 Rails 应用程序中
- en: 'There are two template files that we have to edit here: `new.html.erb` and
    `edit.html.erb`. Open and view them. You will find that both of these files have
    the exact same structure. There''s only one additional **Show product** button
    in the `edit.html.erb` template. Hence, we will design only one form, `new.html.erb`,
    and then reuse it in the second template.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们必须编辑两个模板文件：`new.html.erb`和`edit.html.erb`。打开并查看它们。您会发现这两个文件具有完全相同的结构。在`edit.html.erb`模板中只有一个额外的**显示产品**按钮。因此，我们只设计一个表单`new.html.erb`，然后在第二个模板中重用它。
- en: 'First, delete everything that''s inside `new.html.erb`. As we did in all the
    pages, we will create a `page-header` in this page too. To do this, add the following
    markup:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除`new.html.erb`中所有内容。就像我们在所有页面中所做的那样，我们将在本页也创建一个`page-header`。为此，添加以下标记：
- en: '[PRE25]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Let''s proceed to add a **cancel** button to the home page in the preceding
    `page-header`:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续在前面`page-header`中添加一个**取消**按钮：
- en: '[PRE26]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Since we are having only button, we don''t have to use Bootstrap''s `list-inline`
    feature here, as shown in the following screenshot:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们只有一个按钮，所以我们在这里不需要使用Bootstrap的`list-inline`功能，如下面的截图所示：
- en: '![Adding Bootstrap forms to our Rails application](img/7269OS_05_19.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![将Bootstrap表单添加到我们的Rails应用程序中](img/7269OS_05_19.jpg)'
- en: 'It''s time to create a form for creating new products. We will use Bootstrap''s
    grid system to create an 8-Bootstrap-columns container form. The markup for this
    is as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候创建一个用于创建新产品的表单了。我们将使用Bootstrap的网格系统创建一个8列的Bootstrap容器表单。这个标记的格式如下：
- en: '[PRE27]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We have used an offset class to center align the whole container. Next, we
    will add the tag to render the form inside the preceding container:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了一个偏移类来使整个容器居中对齐。接下来，我们将添加标签以在先前的容器中渲染表单：
- en: '[PRE28]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The preceding code will fetch the old unstyled form from the `_form.html.erb`
    template. So, let''s style the form present in this template. Here''s the modified
    markup:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将从`_form.html.erb`模板中获取旧的未样式表单。因此，让我们为这个模板中现有的表单添加样式。以下是修改后的标记：
- en: '[PRE29]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: If you look carefully, you'll see that, I have wrapped all the labels and their
    respective form elements inside a `.form-group` element. For each label, I have
    added a `for` attribute with the value as the ID of its corresponding form element.
    For each text field, I have added a class as `.form-control` and an ID attribute
    with a unique ID value.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细观察，你会看到我将所有的标签及其相应的表单元素都包裹在一个`.form-group`元素中。对于每个标签，我添加了一个`for`属性，其值为相应表单元素的ID。对于每个文本字段，我添加了一个类`.form-control`和一个具有唯一ID值的ID属性。
- en: 'At the end, I have used Bootstrap''s `list-inline` feature to align two action
    buttons: **Submit** and **Reset**. I have added class `btn-success` to the submit
    button and `btn-default` to the reset button.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我使用了Bootstrap的`list-inline`功能来对齐两个操作按钮：**提交**和**重置**。我将`btn-success`类添加到提交按钮上，将`btn-default`类添加到重置按钮上。
- en: 'It''s time to checkout the whole `Add product` page in the browser. If you
    have implemented everything correctly, you should get a screen that looks like
    the following:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候在浏览器中检查整个`添加产品`页面了。如果你正确实现了所有内容，你应该会看到一个如下所示的屏幕：
- en: '![Adding Bootstrap forms to our Rails application](img/7269OS_05_20.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![将Bootstrap表单添加到我们的Rails应用程序中](img/7269OS_05_20.jpg)'
- en: 'We will now move on to edit the `edit.html.erb` template file. We just need
    to make some modifications to the `new.html.erb` file''s markup to make it ready
    for `edit.html.erb`. Copy all the contents of the `new.html.erb` file and paste
    it in the `edit.html.erb` file. Change the text in the page-header to `Edit Product`.
    We need to add an additional button to this section, the `Show Product` Button.
    Hence, the final markup for the page-header in this file is as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将继续编辑`edit.html.erb`模板文件。我们只需要对`new.html.erb`文件的标记做一些修改，使其为`edit.html.erb`做好准备。复制`new.html.erb`文件的所有内容，并将其粘贴到`edit.html.erb`文件中。将页面标题中的文本更改为`编辑产品`。我们需要在这个部分添加一个额外的按钮，即`显示产品`按钮。因此，该文件中页面标题的最终标记如下：
- en: '[PRE30]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Summary
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw how to create dummy Bootstrap forms and tables. We saw
    many different types of variations in them which could be done by simply changing
    or replacing Bootstrap classes. We then moved on to learn various Bootstrap validation
    classes for forms.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何创建虚拟的Bootstrap表单和表格。我们看到了许多不同类型的变体，这些变体可以通过简单地更改或替换Bootstrap类来实现。然后我们继续学习各种Bootstrap表单验证类。
- en: We saw how to use helper classes to make both forms and tables even more exciting.
    Finally, we moved on to integrate both Bootstrap forms and tables in our application,
    `OnlinePacktShopping`. We also completed the whole design of our basic application
    using Bootstrap's features. In the upcoming chapter, we will learn about Bootstrap
    navigation bars.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了如何使用辅助类来使表单和表格更加引人入胜。最后，我们将Bootstrap的表单和表格整合到我们的应用程序`OnlinePacktShopping`中。我们还利用Bootstrap的特性完成了基本应用程序的整体设计。在下一章中，我们将学习Bootstrap导航栏。
