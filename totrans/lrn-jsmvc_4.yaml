- en: Chapter 4. jQueryMX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: jQueryMX is a collection of jQuery libraries that provides functionality necessary
    to implement and organize large JavaScript applications.
  prefs: []
  type: TYPE_NORMAL
- en: It provides classical inheritance simulation, model-view-controller layers to
    provide logically separated codebase. It also provides useful DOM helpers, custom
    events, and language helpers.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter we will go through the most common or most interesting ones.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the full plugins list go to [http://javascriptmvc.com/docs.html#!jquerymx](http://javascriptmvc.com/docs.html#!jquerymx).
  prefs: []
  type: TYPE_NORMAL
- en: We use the existing `Todo` application folder structure to play around with
    jQueryMX plugins.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Todo` folder create a `jquerymx_playground` folder with two files using
    the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: When a code snippet is indicated as run in the console it means paste and execute
    the example in Google Chrome Console on the opened index.html page. We can use
    any web browser console such as Firebug, however, Google Chrome (and Safari) seem
    to be among the best at the moment and have a very handy code complementation.
  prefs: []
  type: TYPE_NORMAL
- en: $.Class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '$.Class provides classical inheritance simulation based on John Resig''s *Simple
    JavaScript Inheritance* found at [http://ejohn.org/blog/simple-javascript-inheritance/](http://ejohn.org/blog/     simple-javascript-inheritance/).'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The class signature is `$.Class( [NAME , STATIC,] PROTOTYPE ) -> Class`.
  prefs: []
  type: TYPE_NORMAL
- en: The `class` method is available to all class instances whereas the `instance`
    method is available only to a particular instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s write some examples in the file `jquerymx_playground_0.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the console we can see that classes are created. Lets create some instances
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We can execute instance methods as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the following sections, let's break down the code and see what happened here.
  prefs: []
  type: TYPE_NORMAL
- en: The first parameter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using `$.Class` we created a new class with the name `Account` passing the string
    `Bank.Account` as a first parameter. By using the dot notation we created a namespace
    `Bank`. This is why we created a new instance of the class `Account` we called
    `Bank.Account`. In this case `Bank` is just an empty object to help us create
    nice and tidy application object structure.
  prefs: []
  type: TYPE_NORMAL
- en: An alternative namespace, for example, could *CompanyName.Product.SomeClass*.
  prefs: []
  type: TYPE_NORMAL
- en: The second parameter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the second parameter we passed object with properties, which are class properties
    shared with all classes instances.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case class method `getType` from the `Account` class is available in
    the `SavingAccount` class. We can thus type the following in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The third parameter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As the third parameter we passed an object with properties, which are instance
    properties shared with all instances. We thus type the following command in the
    console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Method override
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the `getType` instance method example, we can see how to override methods
    in the children objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `SavingAccount` we override the `getType` method by adding an additional
    `Hello` string to the ancestor method of the same name, and call ancestor method
    using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In case we don''t want to use the same name, we can use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Life cycle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In both class and instance we can use the predefined method `setup` and `init`.
  prefs: []
  type: TYPE_NORMAL
- en: If it exists it is always called, so there is no need to call it manually.
  prefs: []
  type: TYPE_NORMAL
- en: The `setup` method is called first, then the `init` method. In most cases there
    is no need to use the `setup` method.
  prefs: []
  type: TYPE_NORMAL
- en: $.Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: $.Model is the application data layer. It provides an easy way to connect to
    the services that provide RESTful APIs, listen to data changes, and bind HTML
    elements to models, deferrers, and validations.
  prefs: []
  type: TYPE_NORMAL
- en: $.Model is very handy; we don't need to manually write XHR calls using jQuery's
    Ajax method for instance. We can map our backend API using $.Model and then use
    its methods to pull/push data to the server.
  prefs: []
  type: TYPE_NORMAL
- en: We can organize $.Models with a list using `$.Model.List`, which is similar
    to Backbone.js's collections ([http://backbonejs.org/#Collection](http://backbonejs.org/#Collection)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s write some code in the file `jquerymx_playground_1.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Lets break down this code and see what happened here:'
  prefs: []
  type: TYPE_NORMAL
- en: The code starting from `$.Model` is responsible for mapping API to our model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The lines starting with `$.fixtures` are responsible for imitating server responses.
    Fixtures are very helpful when we need to start development without the web server
    API being ready or available.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `bind` method in the `model` class is responsible for binding model methods
    `update` and `create`. We can try using them to see how they work from the web
    browser console by executing these methods on the instance of `AccountModel`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: $.View
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: $.View is a client-side template solution. It populates HTML templates with
    data.
  prefs: []
  type: TYPE_NORMAL
- en: 'It comes with four pre-packaged template engines, which can be downloaded from
    the following websites:'
  prefs: []
  type: TYPE_NORMAL
- en: '**EJS**: [http://embeddedjs.com](http://embeddedjs.com) (default one created
    by JMVC team)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jaml**: [http://javascriptmvc.com/docs.html#!Jaml](http://javascriptmvc.com/docs.html#!Jaml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Micro**: [http://javascriptmvc.com/docs.html#!Micro](http://javascriptmvc.com/docs.html#!Micro)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**jQuery** **templates**: [http://api.jquery.com/category/plugins/templates](http://api.jquery.com/category/plugins/templates)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's easy to extend it by using `$.View.register`.
  prefs: []
  type: TYPE_NORMAL
- en: Templates can be embedded in the HTML documents or loaded synchronously or asynchronously
    from external files. $.View supports template caching and bundling in the production
    builds.
  prefs: []
  type: TYPE_NORMAL
- en: Embedded
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Templates are embedded in the HTML documents as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s copy the following code into `index.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, copy the following code into file `jquerymx_playground_2.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the console, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'As a result, the following DOM node should be created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: External
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This method of using templates is the most common one, since it allows for
    better organization of the project file''s structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file `message.ejs` and copy the previous template into it. The file
    content should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Type the following in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The object with the property message is passed into the HTML method which uses
    `message.ejs` file to render the text "Awesome" in place of `<%= message %>` and
    then append it into the body DOM node.
  prefs: []
  type: TYPE_NORMAL
- en: The result should be the same as in the embedded one.
  prefs: []
  type: TYPE_NORMAL
- en: Sub-templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Inside a template we can embed another template, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: $.Controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `$.Controller` plugin helps to create an organized, memory leak-free JavaScript
    code.
  prefs: []
  type: TYPE_NORMAL
- en: 'A great example of how to use `$.Controller` is the `Todos` controller from
    [Chapter 1](ch01.html "Chapter 1. Getting Started with JavaScriptMVC"), *Getting
    Started with JavaScriptMVC*, is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: DOM helpers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DOM helpers extensions add a set of useful plugins for the DOM. They are described
    in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: $.cookie
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `$.cookie` plugin contains useful methods to manage cookies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s paste the following code into the `jquerymx_cookie.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We can create a cookie in the console using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In the resources tab we can see that cookie has been created.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can get a cookie using it''s cookie name, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also delete a cookie using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: $.fn.compare
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `$.fn.compare` plugin compares two nodes and returns a number describing
    how they are positioned each together.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s paste following code into the `jquerymx_compare.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In the console, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: In the first case we should get `4` and in the second case `2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what the numbers mean:'
  prefs: []
  type: TYPE_NORMAL
- en: '`0`: The elements are identical'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1`: The nodes are in different documents (or one is outside of a document)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`2`: `strong` precedes `p`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`4`: `p` precedes `strong`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`8`: `strong` contains `p`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`16`: `p` contains `strong`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: $.fn.selection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `$.fn.selection` plugin sets or gets current text selection on any element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s paste the following code into the `jquerymx_selection.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In the console, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: It should return `null`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, select some part of the text and run the command again, it should return
    an object as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'To set the selection, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: $.fn.within
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `$.fn.within` plugin returns the elements that are within the given position.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s paste the following code into the `jquerymx_within.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In the console, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: It should return an array containing all `p` elements with a position left 30
    px and top 20 px.
  prefs: []
  type: TYPE_NORMAL
- en: $.Range
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `$.Range` plugin contains useful methods that operate on text selections
    to support creating, moving, and comparing selections.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s paste the following code into the `jquerymx_range.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'In the console, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: To get the current range, select some portion of the text and execute the code
    again and compare the returned objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the current selection text, run the following command in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: $.route
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `$.route` plugin contains useful methods to manage the application state.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s paste the following code into the `jquerymx_route.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end of the URL, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, type the following command and observe the console output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Another example of routing can be found in [Chapter 1](ch01.html "Chapter 1. Getting
    Started with JavaScriptMVC"), *Getting Started with JavaScriptMVC*, in the `Todo`
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Special events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Special events extensions add a set of special events plugins.
  prefs: []
  type: TYPE_NORMAL
- en: $.Drag and $.Drop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `$.Drag` and `$.Drop` plugins contain the drag and drop events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s paste the following code into the `jquerymx_draganddrop.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Language helpers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Language helpers are a set of jQuery plugins. They are described in the following
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: $.Object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `$.Object` plugin contains the following three useful methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`same`: It compares two objects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`subset`: It checks if an object is a set of another object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`subsets`: It returns the subsets of an object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: same
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `same` method can compare two objects. It supports nested objects. We can
    also specify if the comparison is case sensitive or if we can skip a particular
    property comparison.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s paste the following code into the `jquerymx_object.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'In the console, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: It should return `false`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now try to ignore the case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: It should return `true`, since `property_2` and all its children are compared
    with the ignore case flag.
  prefs: []
  type: TYPE_NORMAL
- en: 'To ignore the case in a particular property we can specify it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The result should be `true` as well.
  prefs: []
  type: TYPE_NORMAL
- en: $.Observe
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `$.Observe` plugin provides an observer pattern for the JavaScript objects
    and arrays.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s paste the following code into the `jquerymx_observe.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'In the console, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The same number should be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the value of the `number` property using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Since we bound the anonymous function to the `change` event, which is emitted
    when any of the observable object property has changed, `console.log` with all
    passed information, should be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please note that `oData` is a copy of data, so the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Is different from:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: $.String
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `$.String` plugin contains useful string methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s paste following code into the `jquerymx_string.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: deparam
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This method converts URL parameters into an object literal.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the console run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'It should convert string into the following object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: $.toJSON
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `$.toJSON` plugin contains useful object methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s paste the following code into the `jquerymx_tojson.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'In the console, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: It should return a JSON representation of a given object.
  prefs: []
  type: TYPE_NORMAL
- en: $.Vector
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `$.Vector` plugin contains useful methods to create and operate on vectors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s paste the following code into the `jquerymx_vector.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'In the console, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: It should return a new `Vector` instance.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we learned what jQueryMX plugins have to offer and how we can
    use them to make our day-to-day coding more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we will learn about dependency management tool, StealJS.
  prefs: []
  type: TYPE_NORMAL
