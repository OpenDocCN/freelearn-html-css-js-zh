["```js\n#0UYAPE#42. That is, snippet 0UYAPE at revision 42.  \n```", "```js\n\nlet createScene = function () {\n    let eng = engine;\n    let startScene = createStartScene(eng);\n    return startScene.scene;\n}; \n```", "```js\n\nfunction createStartScene(engine) {\n    let that = {};\n    let scene = that.scene = new BABYLON.Scene(engine);\n    let camAlpha = 0,\n        camBeta = -Math.PI / 4,\n        camDist = 350,\n        camTarget = new BABYLON.Vector3(0, 0, 0);\n    let camera = that.camera = new BABYLON.ArcRotateCamera(\"camera1\", camAlpha, camBeta, camDist, camTarget, scene);    \n    let env = setupEnvironment(scene);\n    let star = that.star = createStar(scene);    \n    let planets = that.planets = populatePlanetarySystem(scene);\n    camera.attachControl(true);    \n    return that;\n}\n```", "```js\n\nfunction setupEnvironment(scene) {\n    let starfieldPT = new BABYLON.StarfieldProceduralTexture(\"starfieldPT\", 512, scene);\n    starfieldPT.coordinatesMode = BABYLON.Texture.FIXED_EQUIRECTANGULAR_MIRRORED_MODE;\n    starfieldPT.darkmatter = 1.5;\n    starfieldPT.distfading = 0.75;\n    let envOptions = {\n        skyboxSize: 512,\n        createGround: false,\n        skyboxTexture: starfieldPT,\n        environmentTexture: starfieldPT\n    };\n    let light = new BABYLON.PointLight(\"starLight\", BABYLON.Vector3.Zero(), scene);\n    light.intensity = 2;\n    light.diffuse = new BABYLON.Color3(.98, .9, 1);\n    light.specular = new BABYLON.Color3(1, 0.9, 0.5);\n    let env = scene.createDefaultEnvironment(envOptions);\n    return env;\n}\n```", "```js\n\nfunction createStar(scene) {\n    let starDiam = 16;\n    let star = BABYLON.MeshBuilder.CreateSphere(\"star\", \n        { diameter: starDiam, segments: 128 }, scene);\n    let mat = new BABYLON.StandardMaterial(\"starMat\",\n        scene);\n    star.material = mat;\n    mat.emissiveColor = new BABYLON.Color3(0.37, 0.333,\n        0.11);\n    mat.diffuseTexture = new BABYLON.Texture\n        (\"textures/distortion.png\", scene);\n    mat.diffuseTexture.level = 1.8;\n    return star;\n}\n```", "```js\n\nlet hg = {\n    name: \"hg\",\n    posRadians: BABYLON.Scalar.RandomRange(0, 2 * Math.PI),\n    posRadius: 14,\n    scale: 2,\n    color: new BABYLON.Color3(0.45, 0.33, 0.18),\n    rocky: true\n}; //...\n```", "```js\n\nplanets.push(createPlanet(hg, scene));\nplanets.push(createPlanet(aphro, scene));\nplanets.push(createPlanet(tellus, scene));\nplanets.push(createPlanet(ares, scene));\nplanets.push(createPlanet(zeus, scene));\nreturn planets;\n```", "```js\n\nfunction createPlanet(opts, scene) {\n    let planet = BABYLON.MeshBuilder.\n        CreateSphere(opts.name, { diameter: 1 }, scene);\n    let mat = new BABYLON.StandardMaterial(planet.\n        name + \"-mat\", scene);\n    mat.diffuseColor = mat.specularColor = opts.color;\n    mat.specularPower = 0;\n    if (opts.rocky === true) {\n        mat.bumpTexture = new\n            BABYLON.Texture(\"textures/rockn.png\", scene);\n        mat.diffuseTexture = new\n            BABYLON.Texture(\"textures/rock.png\", scene);\n    }\n    else {\n        mat.diffuseTexture = new BABYLON.Texture\n            (\"textures/distortion.png\", scene);\n    }\n    planet.material = mat;\n    planet.scaling.setAll(opts.scale);\n    planet.position.x = opts.posRadius *\n        Math.sin(opts.posRadians);\n    planet.position.z = opts.posRadius *\n        Math.cos(opts.posRadians);\n    return planet;\n}\n```", "```js\n\nfunction createSpinAnimation() {\n    let orbitAnim = new BABYLON.Animation(\"planetspin\",\n        \"rotation.y\", 30,\n        BABYLON.Animation.ANIMATIONTYPE_FLOAT,\n        BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE);\n    const keyFrames = [];\n    keyFrames.push({\n        frame: 0,\n        value: 0\n    });\n    keyFrames.push({\n        frame: 60,\n        value: BABYLON.Scalar.TwoPi\n    });\n    orbitAnim.setKeys(keyFrames);\n    return orbitAnim;\n}\n```", "```js\n\nlet spinAnim = createSpinAnimation();\nstar.animations.push(spinAnim);\nscene.beginAnimation(star, 0, 60, true);\n```", "```js\n\nplanets.forEach(p => {\n    p.animations.push(spinAnim);\n      scene.beginAnimation(p, 0, 60, true,\n          BABYLON.Scalar.RandomRange(0.1, 3));\n});\n```", "```js\n\nplanet.orbitOptions = opts;\nplanet.orbitAnimationObserver = \n    createAndStartOrbitAnimation(planet, scene);\n```", "```js\n\nfunction createAndStartOrbitAnimation(planet, scene) {\n    const Gm = 6672.59 * 0.07;\n    const opts = planet.orbitOptions;\n    const rCubed = Math.pow(opts.posRadius, 3);\n    const period = BABYLON.Scalar.TwoPi * Math.sqrt\n        (rCubed / Gm);\n    const v = Math.sqrt(Gm / opts.posRadius);\n    const w = v / period;\n    const circum = Scalar.TwoPi * opts.posRadius;\n    let angPos = opts.posRadians;\n```", "```js\n\nlet preRenderObsv = scene.onBeforeRenderObservable.add(sc => {\n    planet.position.x = opts.posRadius * Math.sin(angPos);\n    planet.position.z = opts.posRadius * Math.cos(angPos);\n    angPos = BABYLON.Scalar.Repeat(angPos + w,\n        BABYLON.Scalar.TwoPi);\n});\nreturn preRenderObsv;\n```", "```js\n\nplanet.computeWorldMatrix(true);\nlet planetTrail = new BABYLON.TrailMesh(planet.name + \n    \"-trail\", planet, scene, .1, circum, true);\nlet trailMat = new BABYLON.StandardMaterial\n    (planetTrail.name + \"-mat\", scene);\ntrailMat.emissiveColor = trailMat.specularColor =\n    trailMat.diffuseColor = opts.color;\nplanetTrail.material = trailMat;\n```", "```js\n\nlet glowLayer = new BABYLON.GlowLayer(\"glowLayer\", scene);\n```", "```js\n\nplanets.forEach(p => {\n        glowLayer.addExcludedMesh(p);\n        p.animations.push(spinAnim);\n        scene.beginAnimation(p, 0, 60, true,\n            BABYLON.Scalar.RandomRange(0.1, 3));\n    });\n```"]