["```js\nnpm start \n```", "```js\ndocker --version \n```", "```js\nDocker version 25.0.3, build 4debf41 \n```", "```js\nimport { Router } from \"express\";\nimport { CategoryModel, ProductModel, SupplierModel }\n    from \"../../data/orm/models\";\nimport { readFileSync } from \"fs\";\nimport { getConfig } from \"../../config\";\nexport const createDbManagementRoutes = (router: Router) => {\n    router.get(\"\", (req, resp) => {\n        resp.render(\"admin/db_mgt\");\n    });\n    router.post(\"/reset\", async (req, resp) => {\n        await ProductModel.sequelize?.drop();\n        await ProductModel.sequelize?.sync();\n        const data = JSON.parse(readFileSync(getConfig(\"catalog:orm_repo\")\n            .seed_file).toString());\n        await ProductModel.sequelize?.transaction(async (transaction) => {\n            await SupplierModel.bulkCreate(data.suppliers, { transaction });\n            await CategoryModel.bulkCreate(data.categories, { transaction });\n            await ProductModel.bulkCreate(data.products, { transaction });\n        });\n        resp.render(\"admin/db_mgt\", {\n            admin_msg: \"Products database reset and seeded\"\n        });\n    });\n} \n```", "```js\nimport { Express, NextFunction, Request, Response, Router } from \"express\";\nimport { createAdminCatalogRoutes } from \"./admin_catalog_routes\";\nimport { createAdminOrderRoutes } from \"./admin_order_routes\";\nimport passport from \"passport\";\nimport { getConfig} from \"../../config\";\n**import** **{ createDbManagementRoutes } from \"./database_routes\";**\nconst users: string[] = getConfig(\"admin:users\", []);\nexport const createAdminRoutes = (app: Express) => {\n    // ... routes omitted for brevity...\n    const authCheck = (r: Request) => users.find(u => r.user?.email === u);\n    const apiAuth = (req: Request, resp: Response, next: NextFunction) => {\n        if (!authCheck(req)) {\n            return resp.sendStatus(401)\n        }\n        next();\n    };\n    const cat_router = Router();\n    createAdminCatalogRoutes(cat_router);\n    app.use(\"/api/products\", apiAuth, cat_router);\n    const order_router = Router();\n    createAdminOrderRoutes(order_router);\n    app.use(\"/api/orders\", apiAuth, order_router);\n    **const db_router =** **Router();**\n **createDbManagementRoutes(db_router);**\n **app.use(\"/api/database\", apiAuth, db_router);**\n    const userAuth = (req: Request, resp: Response, next: NextFunction) => {\n        if (!authCheck(req)) {\n            return resp.redirect(\"/admin/signin\");\n        }\n        next();\n    };\n    // ...other routes omitted for brevity...\n    app.get(\"/admin/orders\", userAuth, (req, resp) => {\n        resp.locals.content = \"/api/orders/table\";\n        resp.render(\"admin/admin_layout\");\n    })\n   ** app.get(\"/admin/database\", userAuth, (req, resp) => {**\n **resp.locals.content = \"****/api/database\";**\n **resp.render(\"admin/admin_layout\");**\n **})** \n} \n```", "```js\n{{> admin/area_buttons mode=\"database\"}}\n<div class=\"m-2\">\n    <h5 class=\"text-danger text-center\">{{admin_msg}}</h5>\n</div>\n<div class=\"m-2 text-center\">\n    <button class=\"btn btn-danger m-2\"\n        hx-post=\"/api/database/reset\"\n        hx-target=\"#content\">Reset & Seed Database</button>\n</div> \n```", "```js\n<swap_wrapper hx-swap-oob=\"innerHTML:#area_buttons\">\n    <div class=\"d-grid gap-2\" >\n        <button id=\"products_btn\" class=\"btn {{ buttonClass \"products\" mode }}\"\n            hx-get=\"/api/products/table\" hx-target=\"#content\"\n            hx-push-url=\"/admin/products\">\n            Products\n        </button>\n        <button id=\"orders_btn\" class=\"btn {{ buttonClass \"orders\" mode }}\"\n            hx-get=\"/api/orders/table\" hx-target=\"#content\"\n            hx-push-url=\"/admin/orders\">\n            Orders\n        </button>\n      **  <button id****=\"db_btn\" class=\"btn {{ buttonClass \"database\" mode }}\"**\n **hx-get=\"/api/database\" hx-target=\"#content\"**\n **hx-push-url=\"****/admin/database\">**\n **Database**\n **</button>**\n    </div>\n</swap_wrapper> \n```", "```js\nNODE_ENV=production \n```", "```js\nimport { readFileSync } from \"fs\";\nimport { getEnvironment, Env } from \"./environment\";\nimport { merge } from \"./merge\";\nimport { config as dotenvconfig } from \"dotenv\";\n**dotenvconfig({ path: \"overrides.env\", override: false});**\nconst file = process.env.SERVER_CONFIG ?? \"server.config.json\"\nconst data = JSON.parse(readFileSync(file).toString());\ndotenvconfig({\n    path: getEnvironment().toString() + \".env\"\n})\ntry {\n    const envFile = getEnvironment().toString() + \".\" + file;\n    const envData = JSON.parse(readFileSync(envFile).toString());\n    merge(data, envData);\n} catch {\n    // do nothing - file doesn't exist or isn't readable\n}\nexport const getConfig = (path: string, defaultVal: any = undefined) => {\n    const paths = path.split(\":\");\n    let val = data;\n    paths.forEach(p => val = val[p]);\n    return val ?? defaultVal;\n}\nexport const getSecret = (name: string) => {\n    const secret = process.env[name];\n    if (secret === undefined) {\n        throw new Error(`Undefined secret: ${name}`);\n    }\n    return secret;\n}\nexport { getEnvironment, Env }; \n```", "```js\nNODE_ENV=production\n**COOKIE_SECRET=\"sportsstoresecret\"**\n**GOOGLE_CLIENT_ID=<enter your client ID>**\n**GOOGLE_CLIENT_SECRET=<enter your secret>** \n```", "```js\nnpm run server \n```", "```js\ndocker run -e POSTGRES_PASSWORD=MySecret$ -p 5432:5432 postgres:16.2 \n```", "```js\nnpm install pg@8.11.3\nnpm install pg-hstore@2.3.4 \n```", "```js\n{\n    \"catalog\": {\n        \"orm_repo\": {\n            \"reset_db\": false,\n            \"settings\": {\n                \"dialect\": \"postgres\",\n                \"host\": \"localhost\",\n                \"port\": \"5432\",\n                \"username\": \"postgres\",\n                \"password\": \"MySecret$\"\n            }\n        }\n    },\n    \"sessions\": {\n        \"reset_db\": false,\n        \"orm\": {\n            \"settings\": {\n                \"dialect\": \"postgres\",\n                \"host\": \"localhost\",\n                \"port\": \"5432\",\n                \"username\": \"postgres\",\n                \"password\": \"MySecret$\"\n            }\n        }       \n    }\n} \n```", "```js\nnpm run server \n```", "```js\nnode_modules \n```", "```js\nFROM node:20.10.0\nRUN mkdir -p /usr/src/sportsstore\nCOPY dist /usr/src/sportsstore/dist\nCOPY templates /usr/src/sportsstore/templates\nCOPY products.json /usr/src/sportsstore/\nCOPY server.config.json /usr/src/sportsstore/\nCOPY production.server.config.json /usr/src/sportsstore/\nCOPY package.json /usr/src/sportsstore/\nWORKDIR /usr/src/sportsstore\nRUN npm install --omit=dev\nRUN npm install wait-for-it.sh@1.0.0\nENV NODE_ENV=production\nENV COOKIE_SECRET=\"sportsstoresecret\"\nENV GOOGLE_CLIENT_ID=<enter your ID>\nENV GOOGLE_CLIENT_SECRET=<enter your secret>\nEXPOSE 5000\nENTRYPOINT npx wait-for-it postgres:5432 && node dist/server.js \n```", "```js\n...\nRUN npm install --omit=dev\n... \n```", "```js\n...\nRUN npm install wait-for-it.sh@1.0.0\n... \n```", "```js\n{\n    \"catalog\": {\n        \"orm_repo\": {\n            \"reset_db\": false,\n            \"settings\": {\n                \"dialect\": \"postgres\",\n               ** \"host\": \"postgres\",**\n                \"port\": \"5432\",\n                \"username\": \"postgres\",\n                \"password\": \"MySecret$\"\n            }\n        }\n    },\n    \"sessions\": {\n        \"reset_db\": false,\n        \"orm\": {\n            \"settings\": {\n                \"dialect\": \"postgres\",\n **\"host\": \"postgres\",**\n                \"port\": \"5432\",\n                \"username\": \"postgres\",\n                \"password\": \"MySecret$\"\n            }\n        }       \n    }\n} \n```", "```js\nnpx tsc \n```", "```js\ndocker build . -t sportsstore -f Dockerfile \n```", "```js\n[+] Building 25.6s (17/17) FINISHED    docker:default\n => [internal] load build definition from Dockerfile\n=> => transferring dockerfile: 785B\n=> [internal] load metadata for docker.io/library/node:20.10.0\n=> [auth] library/node:pull token for registry-1.docker.io\n=> [internal] load .dockerignore\n=> => transferring context: 52B\n=> [internal] load build context \n=> => transferring context: 60.69kB\n=> [ 1/11] FROM docker.io/library/node:20.10.0@sha256:8d0f16fe841577f9317ab49011c6d819e1fa81f8d\n=> CACHED [ 2/11] RUN mkdir -p /usr/src/sportsstore\n=> CACHED [ 3/11] COPY dist /usr/src/sportsstore/dist\n=> CACHED [ 4/11] COPY templates /usr/src/sportsstore/templates\n=> CACHED [ 5/11] COPY products.json /usr/src/sportsstore/\n=> CACHED [ 6/11] COPY server.config.json /usr/src/sportsstore/\n=> CACHED [ 7/11] COPY production.server.config.json /usr/src/sportsstore/\n=> CACHED [ 8/11] COPY package.json /usr/src/sportsstore/\n=> CACHED [ 9/11] WORKDIR /usr/src/sportsstore\n=> [10/11] RUN npm install --omit=dev\n=> [11/11] RUN npm install wait-for-it.sh@1.0.0  \n=> exporting to image\n=> => exporting layers\n=> => writing image sha256:4b2f72d561dfbe21695573d7f448bc6ada3a9c4802bc5a70b8af1676e82c1fcd \n=> => naming to docker.io/library/sportsstore \n```", "```js\nversion: \"3\"\nvolumes:\n  databases:\nservices:\n  postgres:\n    image: \"postgres:16.2\"\n    volumes:\n      - databases:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_PASSWORD=MySecret$\n\n  sportsstore:\n    image: \"sportsstore\"\n    depends_on:\n      - postgres\n    ports:\n      - 5000:5000 \n```", "```js\ndocker-compose build \n```", "```js\ndocker-compose up \n```", "```js\ndefaults\n    mode http\n    timeout connect 5000\n    timeout client  50000\n    timeout server  50000\nresolvers dockerdns\n    nameserver dns1 127.0.0.11:53\nfrontend localnodes\n    bind *:80\n    bind *:443 ssl crt /usr/local/etc/haproxy/cert.pem\n    http-request redirect scheme https unless { ssl_fc }\n    default_backend app\nbackend app\n    balance roundrobin\n    server-template sportsstore- 5 sportsstore:5000 check resolvers dockerdns \n```", "```js\nFROM haproxy:2.9.6\nCOPY haproxy.cfg /usr/local/etc/haproxy\nCOPY cert.pem /usr/local/etc/haproxy\nCOPY key.pem /usr/local/etc/haproxy/cert.pem.key \n```", "```js\ndocker build . -t ss-proxy -f Dockerfile.proxy \n```", "```js\n{\n    \"catalog\": {\n        \"orm_repo\": {\n            \"reset_db\": false,           \n            \"settings\": {\n                \"dialect\": \"postgres\",\n                \"host\": \"postgres\",\n                \"port\": \"5432\",\n                \"username\": \"postgres\",\n                \"password\": \"MySecret$\"\n            }\n        }\n    },\n    \"sessions\": {\n        \"reset_db\": false,\n        \"orm\": {\n            \"settings\": {\n                \"dialect\": \"postgres\",\n                \"host\": \"postgres\",\n                \"port\": \"5432\",\n                \"username\": \"postgres\",\n                \"password\": \"MySecret$\"\n            }\n        }       \n    },\n   ** \"auth\": {**\n **\"openauth\": {**\n **\"redirectionUrl\": \"https://localhost/signin-google\"**\n **}**\n **},**\n **\"****admin\": {**\n **\"openauth\": {**\n **\"redirectionUrl\": \"https://localhost/auth-signin-google\"**\n **}**\n **}**\n} \n```", "```js\ndocker build . -t sportsstore -f Dockerfile \n```", "```js\nversion: \"3\"\nvolumes:\n  databases:\nservices:\n  postgres:\n    image: \"postgres:16.2\"\n    volumes:\n      - databases:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_PASSWORD=MySecret$\n\n  sportsstore:\n    image: \"sportsstore\"\n    depends_on:\n      - postgres\n **   # ports:**\n **#   - 5000:5000**\n **deploy:**\n **replicas: 5**\n **proxy:**\n **image: \"****ss-proxy\"**\n **ports:**\n **- 80:80**\n **- 443:443** \n```", "```js\ndocker-compose down \n```", "```js\ndocker-compose up \n```", "```js\n...\n**sportsstore-1**  | Executing (default): SELECT \"sid\", \"expires\", \"data\", \"createdAt\", \"updatedAt\" FROM \"Sessions\" AS \"Session\" WHERE \"Session\".\"sid\" = 'eGtcJR_TJhkO3N0gCzXiqsdJWV4exbmU';\n**sportsstore-1**  | Executing (default): UPDATE \"Sessions\" SET \"expires\"=$1,\"updatedAt\"=$2 WHERE \"sid\" = $3; \"2024-03-21 23:56:43.319 +00:00\", \"2024-03-21 21:56:43.319 +00:00\", \"eGtcJR_TJhkO3N0gCzXiqsdJWV4exbmU\"\n**sportsstore-5**  | Executing (default): SELECT \"sid\", \"expires\", \"data\", \"createdAt\", \"updatedAt\" FROM \"Sessions\" AS \"Session\" WHERE \"Session\".\"sid\" = 'eGtcJR_TJhkO3N0gCzXiqsdJWV4exbmU';\n**sportsstore-5**  | Executing (default): UPDATE \"Sessions\" SET \"expires\"=$1,\"updatedAt\"=$2 WHERE \"sid\" = $3; \"2024-03-21 23:56:43.389 +00:00\", \"2024-03-21 21:56:43.389 +00:00\", \"eGtcJR_TJhkO3N0gCzXiqsdJWV4exbmU\"\n**sportsstore-2**  | Executing (default): SELECT \"sid\", \"expires\", \"data\", \"createdAt\", \"updatedAt\" FROM \"Sessions\" AS \"Session\" WHERE \"Session\".\"sid\" = 'eGtcJR_TJhkO3N0gCzXiqsdJWV4exbmU';\n**sportsstore-2**  | Executing (default): UPDATE \"Sessions\" SET \"expires\"=$1,\"updatedAt\"=$2 WHERE \"sid\" = $3; \"2024-03-21 23:56:43.436 +00:00\", \"2024-03-21 21:56:43.437 +00:00\", \"eGtcJR_TJhkO3N0gCzXiqsdJWV4exbmU\"\n... \n```", "```js\ndocker-compose scale sportsstore=4 \n```", "```js\n...\nRunning 6/6\nContainer sportsstore-postgres-1     Running\nContainer sportsstore-sportsstore-4  Running\nContainer sportsstore-sportsstore-3  Running\nContainer sportsstore-sportsstore-1  Running\nContainer sportsstore-sportsstore-2  Running\nContainer sportsstore-sportsstore-5  Removed\n... \n```", "```js\n...\nproxy-1        | [WARNING]  (8) : Server app/sportsstore-3 is going DOWN for maintenance (No IP for server ). 4 active and 0 backup servers left. 0 sessions active, 0 requeued, 0 remaining in queue.\n... \n```", "```js\ndocker-compose down \n```", "```js\n...\n[+] Running 7/7\n    Container sportsstore-sportsstore-2  Removed                                                                          \n  Container sportsstore-proxy-1        Removed                                                                           \n   Container sportsstore-sportsstore-3  Removed                                                                          \n    Container sportsstore-sportsstore-1  Removed                                                                          \n  Container sportsstore-sportsstore-4  Removed                                                                          \n    Container sportsstore-postgres-1     Removed                                                                           \n    Network sportsstore_default          Removed                                                                           \n... \n```"]