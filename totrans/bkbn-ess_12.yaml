- en: Chapter 12. Summary and Further Reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we begin by looking back over everything we''ve covered in
    the previous chapters. We then look at how Backbone is being used to power a real-world
    medical application, and finally, we look forward to how you can continue your
    Backbone education. In particular we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Summarize the roles of various Backbone components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how Backbone is being used today to power Syapse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consider how everything we've learned is applied to the Syapse use case
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Look at further opportunities to learn about Backbone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Putting it all together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the first half of this book, we examined the four Backbone classes (`Collection`,
    `Model`, `Router`, and `View`), and how each of them fit together to build a web
    application. To refresh, a Backbone-powered site starts with a `Router` class,
    which is used to map URLs to the virtual pages of the application. `Router` makes
    up half of the MVC `Controller` layer, while the `View` class makes up the other
    half. The `View` class is also responsible for the MVC `View` layer of a web application,
    as `View` classes both render the pages that make up the site and listen for and
    respond to user-generated events.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, a data or MVC `Model` layer is also essential for almost any application,
    and this layer is handled by the `Model` and `Collection` classes. `Model` classes,
    which represent individual data objects, are used both to manage data on the client-side
    and to send and receive data to and from the server. `Collection` classes hold
    sets of `Model` classes but are otherwise used similarly to manage data and transmit
    it to/from the server. `Model` and `Collection` classes are used primarily by
    `View` classes, which render their data into DOM elements.
  prefs: []
  type: TYPE_NORMAL
- en: All of these classes are designed not just to be used directly but also to be
    extended into new subclasses with logic specific to your application. This same
    extension mechanism is used by third-party Backbone libraries, such as BackGrid
    and BackSupport, to provide components that further extend the capabilities of
    your application. However, Backbone-specific libraries aren't the only third-party
    libraries that you can use in your Backbone application. By wrapping non-Backbone
    components with your own custom Backbone classes, you can cleanly incorporate
    tools such as a template system or a jQuery UI widget in to your application.
    Even libraries that can't be wrapped in a Backbone class, such as Underscore,
    RequireJS, or Mocha, can be used independently to add functionality without losing
    any of the benefits of Backbone itself.
  prefs: []
  type: TYPE_NORMAL
- en: This, in short, summarizes everything we've learned so far, but as we covered
    that information originally, we kept our focus on component at a time. As we finish
    this book, it would be beneficial to look at how all these pieces can be used
    together to implement a real-world use case. That use case is Syapse.
  prefs: []
  type: TYPE_NORMAL
- en: What's Syapse?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Building a
    Single-Page Site Using Backbone"), *Building a Single-Page Site Using Backbone*,
    Syapse ([http://www.syapse.com](http://www.syapse.com)) is a Backbone-powered
    web application for requesting and providing precision medicine results. Syapse's
    customers are laboratories and hospitals that use genetic sequencing to profile
    patients with serious diseases like cancer. Once sequenced, these genetic profiles
    can be combined with large bodies of research to determine the best treatments
    and dosages for a given patient based on the patient's own DNA.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at how Syapse was put together.
  prefs: []
  type: TYPE_NORMAL
- en: The 10,000-foot view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Syapse''s client-side code is organized using Require.js (see *Dependency management
    with RequireJS* in [Chapter 11](part0095.xhtml#aid-2QJ5E1 "Chapter 11. (Not) Re-Inventing
    the Wheel – Utilizing Third-Party Libraries"), *(Not) Re-Inventing the Wheel:
    Utilizing Third-Party Libraries*). Every module is either a class, a singleton
    instance (for utility libraries), or a function (for routes). Syapse has two different
    sites, one for laboratories and the other for clinics, so we use RequireJS to
    compile separate JavaScript files for each site.'
  prefs: []
  type: TYPE_NORMAL
- en: Each of these files has its own Backbone `Router`, allowing each site to have
    a completely distinct set of URLs and pages (see *Multiple routers* in [Chapter
    6](part0054.xhtml#aid-1JFUC1 "Chapter 6. Creating Client-side Pages with Routers"),
  prefs: []
  type: TYPE_NORMAL
- en: '*Creating Client-Side Pages with Routers*). These `Router` classes form the
    top of the RequireJS dependency tree, bringing in (or depending on) all of the
    site''s routes. These route modules then bring in the site''s `Views` classes,
    which in turn bring in the site''s `Model` and `Collection` classes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four "base" classes that every other class in the application inherits
    from. These base classes are based on the BackSupport classes (see *Making life
    easier with BackSupport* in [Chapter 11](part0095.xhtml#aid-2QJ5E1 "Chapter 11. (Not)
    Re-Inventing the Wheel – Utilizing Third-Party Libraries"), *(Not) Re-Inventing
    the Wheel: Utilizing Third-Party Libraries*), and are used to define new features
    that are Syapse-specific. For instance, since Syapse uses the Handlebars templating
    library, the base `View` class includes the logic for rendering Handlebars templates
    (see *Templating with Handlebars* in [Chapter 11](part0095.xhtml#aid-2QJ5E1 "Chapter 11. (Not)
    Re-Inventing the Wheel – Utilizing Third-Party Libraries"), *(Not) Re-Inventing
    the Wheel: Utilizing Third-Party Libraries*).'
  prefs: []
  type: TYPE_NORMAL
- en: Syapse uses the `Page View` pattern (see *Page views* in [Chapter 5](part0050.xhtml#aid-1FLS42
    "Chapter 5. Adding and Modifying Elements with Views"), *Adding and Modifying
    Elements With Views*) with one base `Page View` class for the laboratory interface
    and one for the clinic interface. These render all of the parts of the site that
    are shared between pages, such as the navigation menu, and both of these `Page
    View` patterns share a common base `View` class, allowing them to reuse generic
    page-rendering logic that is common to both sites.
  prefs: []
  type: TYPE_NORMAL
- en: The View layer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Pages in the Syapse laboratory site are divided into three sections, each with
    their own `View` class: a left navigation section, a header area, and a main content
    area. Each of these can optionally be overwritten when the page is instantiated,
    letting each route modify only its unique section(s). For instance, most routes
    don''t change the left navigation bar, so when these routes instantiate the page
    `View` class, they simply rely on the default navigation bar of this `View` class.'
  prefs: []
  type: TYPE_NORMAL
- en: Each of the subclasses of `View` handles the rendering of its part of the page.
    Because Syapse relies on *The combined approach* (see [Chapter 5](part0050.xhtml#aid-1FLS42
    "Chapter 5. Adding and Modifying Elements with Views"), *Adding and Modifying
    Elements with Views*) to do its rendering, these `View` classes use a combination
    of Handlebars templates and other child `View` classes to generate their content.
    For particularly complex pages, this can result in not just child `View` classes
    but also grandchild, great grandchild, and sometimes, even great-great grandchild
    `View` classes. Whenever possible, Syapse uses multiple smaller `View` classes
    rather than one large one, to keep the logic for each `View` class as simple as
    possible.
  prefs: []
  type: TYPE_NORMAL
- en: For consistency, all of the render methods in these `View` classes return this.
    Further, for consistency, each `View` class is designed to be re-renderable, so
    that it can easily listen and respond to change events in its `Model` classes
    (see *Other render considerations* in [Chapter 5](part0050.xhtml#aid-1FLS42 "Chapter 5. Adding
    and Modifying Elements with Views"), *Adding and Modifying Elements with Views*).
  prefs: []
  type: TYPE_NORMAL
- en: The Data layer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On the server-side, Syapse uses Python and the Django REST Framework library
    to power all of its APIs, and while this gives the server team a great deal of
    control over the API, they are still somewhat limited by the library and can't
    always make APIs that return ideal Backbone JSON. Because of this many of Syapse's
    `Model` and `Collection` classes make use of `parse` and `toJSON` method overrides
    to extract or send back the correct JSON to/from the API (see *Fetching data from
    the server* and *Saving data to the server* in [Chapter 3](part0029.xhtml#aid-RL0A1
    "Chapter 3. Accessing Server Data with Models"), *Accessing Server Data with Models*).
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes, Syapse''s APIs return not just the data for a given `Model` or `Collection`
    class but also supplemental information. For instance, an API that returns a patient
    `Model` class might include the ID of that patient''s doctor, but since the end
    user wants to see a name instead of an ID, the API response also includes a separate
    map of IDs to names. To keep track of this supplemental information, Syapse relies
    on a global pub/sub system (see *Publish/Subscribe* in [Chapter 7](part0069.xhtml#aid-21PMQ1
    "Chapter 7. Fitting Square Pegs in Round Holes – Advanced Backbone Techniques"),
    *Fitting Square Pegs in Round Holes: Advanced Backbone Techniques*). Whenever
    a `Model` class parses such supplemental information during a fetch, it triggers
    a special supplemental information" event with this information as an extra argument.
    This event is then listened for by one or more site-wide `Collection` caches,
    which aggregate the supplemental information and make it available for the `View`
    classes.'
  prefs: []
  type: TYPE_NORMAL
- en: The Support layer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All of Syapse''s code is tested using Selenium for acceptance testing and Mocha/Sinon
    for unit testing (see *Testing? In JavaScript?* and *Selenium* in [Chapter 10](part0089.xhtml#aid-2KS221
    "Chapter 10. Keeping the Bugs Out – How to Test a Backbone Application"), *Keeping
    the Bugs Out: How to Test a Backbone Application*). By using expressive test names
    and the BDD test output style (see *TDD versus BDD: What''s the difference?* in
    [Chapter 10](part0089.xhtml#aid-2KS221 "Chapter 10. Keeping the Bugs Out – How
    to Test a Backbone Application"), *Keeping the Bugs Out: How to Test a Backbone
    Application*), we ensure that Syapse''s test output is very specific and looks
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Support layer](img/image00171.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: For documentation, Syapse relies primarily on inline documentation, using JSDoc
    annotations without actually rendering documentation pages (see *The robust documentation
    approach* in [Chapter 9](part0083.xhtml#aid-2F4UM1 "Chapter 9. What Was I Thinking?
    Documenting Backbone Code"), *What Was I Thinking? Documenting Backbone Code*).
    However, Syapse also has a customer-facing JavaScript API, which is considerably
    more heavily documented than both generated JSDoc API pages and a Docco-based
    tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: Building your own Syapse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your application might be, like Syapse, a serious tool designed to help with
    a critical problem such as fighting cancer. Alternatively, your application might
    be something more fun, like a game or personal project. In either case, Backbone
    offers everything you need to not just build your site but also continue adding
    to and maintaining the site over its entire lifetime.
  prefs: []
  type: TYPE_NORMAL
- en: However, no book can possibly explain every possible nuance of a library that
    is as flexible and as powerful as Backbone. At its core, Backbone strives to do
    only a few important things well and leaves everything else up to you, the programmer.
    This not only means a great deal of power and flexibility, but it also means that
    you have to make a large number of decisions for yourself as to how you want to
    use Backbone. To make the correct decisions, and truly take advantage of everything
    Backbone has to offer, you will no doubt want to continue learning as much as
    you can about both Backbone in particular and web development in general.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many places to learn about Backbone, but perhaps, the best place is
    Backbone's own source code. As the author of both Backbone and Docco, it's no
    surprise that Jeremy Ashkenas uses the Docco documentation tool to provide an
    annotated version of Backbone's source code, which you can find at [http://backbonejs.org/docs/backbone.html](http://backbonejs.org/docs/backbone.html).
  prefs: []
  type: TYPE_NORMAL
- en: However, you don't need the annotated version to read Backbone's code. In fact,
    whenever some part of Backbone seems confusing or difficult to understand, one
    of the best ways to learn more is to throw debugger statements into the Backbone
    source code itself and then, run your application using the browser's debugging
    tool. By walking through the code in the debugger, you can see the logic progress
    through Backbone's classes and methods, and because the source code is so well-written
    and readable, this task will be much less daunting than it would be with almost
    any other major JavaScript library.
  prefs: []
  type: TYPE_NORMAL
- en: Backbone also offers a wiki at [https://github.com/jashkenas/backbone/wiki](https://github.com/jashkenas/backbone/wiki).
    In addition to basic Backbone information, this wiki includes collections of plugins
    and development tools, lists of companies that use Backbone, and a great variety
    of tutorials and informative blog posts. This latter list (which can be found
    at [https://github.com/jashkenas/backbone/wiki/Tutorials,-blog-posts-and-example-sites](https://github.com/jashkenas/backbone/wiki/Tutorials,-blog-posts-and-example-sites))
    is particularly valuable, with more than fifty different high-quality sites where
    you can learn more about Backbone.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another great source of information on Backbone is Packt Publishing, which
    offers many great Backbone-focused books. While they do cover some of the same
    basics as this book, you might find the sample applications built in *BackboneJS
    Blueprints* by Andrew Bugess or the recipes of *Backbone.js Cookbook* by Vadim
    Mirgood to be valuable. If you''d prefer a more advanced look at useful Backbone
    patterns you can employ, then you might instead find *Backbone.js Patterns and
    Best Practices* by Swarnendu De useful. Further, if you find your interest piqued
    by [Chapter 10](part0089.xhtml#aid-2KS221 "Chapter 10. Keeping the Bugs Out –
    How to Test a Backbone Application"), *Keeping the Bugs Out: How to Test a Backbone
    Application*, then *Backbone.js Testing* by Ryan Roemer is a perfect text for
    you to learn more about Backbone testing.'
  prefs: []
  type: TYPE_NORMAL
- en: However, as great as books are, they can never keep completely up-to-date with
    the very latest in emerging Backbone technologies, and that's where certain websites
    can be invaluable. One incredible resource is Stack Overflow ([http://www.stackoverflow.com](http://www.stackoverflow.com)),
    where programmers of any persuasion can find answers to their technical questions,
    including ones about Backbone. However, Stack Overflow can also be valuable when
    you don't have a specific question. Because the site has both *tags* and *votes*
    on every question, you can search for questions with the `backbone.js` tag, and
    then sort them by votes; any questions at the top will most likely be educational.
    At the time of writing, Stack Overflow featured more than 12,000 different Backbone
    questions with answers (and more than 17,000 questions in total).
  prefs: []
  type: TYPE_NORMAL
- en: Another similar question and answer site, which isn't programming-focused, is
    Quora ([https://www.quora.com/](https://www.quora.com/)). While Stack Overflow
    limits itself exclusively to objective questions, Quora has no such limitation
    and so is perfect for more subjective questions, such as "What are the advantages
    of Backbone.js" ([http://www.quora.com/What-are-the-advantages-of-Backbone-js](http://www.quora.com/What-are-the-advantages-of-Backbone-js)).
  prefs: []
  type: TYPE_NORMAL
- en: Another excellent place to learn about Backbone is the Backbone Google Group
    ([https://groups.google.com/forum/#!forum/backbonejs](https://groups.google.com/forum/#!forum/backbonejs)),
    which has an active community. If, on the other hand, you prefer to follow a stream
    of news articles, the Backbone sub-feed on Reddit ([http://www.reddit.com/r/backbonejs/](http://www.reddit.com/r/backbonejs/))
    is a great resource for keeping up to date. Finally, on a more general level,
    Hacker News ([https://news.ycombinator.com/](https://news.ycombinator.com/)),
    Lobsters ([https://lobste.rs](https://lobste.rs)), and Dzone ([http://www.dzone.com/links/index.html](http://www.dzone.com/links/index.html))
    all feature continuous feeds of various programming-related news and articles,
    including many on JavaScript in general and Backbone in particular.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we reviewed the previous eleven chapters and summarized patterns
    of how to use Backbone to build a robust web application. We also looked specifically
    at how Backbone was used to build the cancer-fighting application Syapse. Finally,
    we examined other places where you can learn even more about Backbone, including
    other great books from Packt Publishing. We hope you enjoyed this book, and we
    wish you the best of luck in creating powerful web applications using Backbone.
  prefs: []
  type: TYPE_NORMAL
