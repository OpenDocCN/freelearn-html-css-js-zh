["```js\nlet myArray = [1, 2, 3];\n```", "```js\nArray.prototype.flatMap = function(callback) {\n    return Array.prototype.concat.apply([], this.map(callback));\n};\n```", "```js\nfor (let i in myArray) {\n    console.log(myArray[i]);\n}\n```", "```js\nfor (let i in myArray) {\n    if (myArray.hasOwnProperty(i)) {\n        console.log(myArray[i]);\n    }\n}\n```", "```js\nfor (let i = 0; i < myArray.length; ++i) {\n    console.log(myArray[i]);\n}\n```", "```js\nfor (let value of myArray) {\n    console.log(value);\n}\n```", "```js\nlet myArray = [1, 2, 3];\nlet myFunc = (foo, bar, baz) => (foo + bar) * baz;\nconsole.log(myFunc(...values)); // Prints 9\n```", "```js\nlet subClauses = ['2a', '2b', '2c'];\nlet clauses = ['1', '2', ...subClauses, '3'];\n    // Equivalent to ['1', '2', '2a', '2b', '2c', '3']\n```", "```js\nfunction foldLeft(combine, initial, ...values) {\n    let result = initial;\n    for (let value of values) {\n       result = combine(result, value);\n    }\n    return result;\n}\nconsole.log(foldLeft((x, y) => x+y, 0, 1, 2, 3, 4)); // Prints 10\n```", "```js\nlet foo, bar;\n[foo, bar] = [1, 2]; // Equivalent to foo = 1, bar = 2\n```", "```js\n[foo, bar, ...rest] = [1, 2, 3, 4, 5];\n    // Equivalent to foo = 1, bar = 2, rest = [3, 4, 5]\n```", "```js\n{ foo, bar } = { foo: 1, bar: 2 }; // Equivalent to foo=1, bar=2\n```", "```js\n[foo, bar] = [bar, foo]; // Swap foo and bar in place\n[previous, current] = [current, previous + current];\n    // Calculation step for a Fibonacci sequence\n```", "```js\n'use strict';\nfunction* powers(number, exponent) {\n    let result = 1;\n    for (let i = 0; i < exponent; ++i) {\n        result = result * number;\n        yield result;\n    }\n}\nfor (let i of powers(2, 8)) {\n    console.log(i);\n}\n```", "```js\nlet generator = powers(2, 8);\nlet current = generator.next();\nwhile (!current.done) {\n    console.log(current.value);\n    current = generator.next();\n}\n```", "```js\n'use strict';\nfunction* generator() {\n    let received = yield 1;\n    console.log(received);\n    return 3;    \n}\nlet instance = generator();\nlet first = instance.next();\nconsole.log(first);\nlet last = instance.next(2);\nconsole.log(last);\n```", "```js\n> { value: 1, done: false }\n> 2\n> { value: 3, done: true }\n\n```", "```js\nfunction flatMap<T, R>(\n    source:T[],\n    callback:(T)=>R[]): R[] {\n    return Array.prototype.concat.apply([],\n        source.map(callback));\n}\nlet result = flatMap([1, 2, 3], (i:number) => [i, i + 0.5]);\nconsole.log(result); // Prints [1, 1.5, 2, 2.5, 3, 3.5]\n```", "```js\nvar i, n;\nfor (n = i = 1; i <= 10; n = ++i) {\n    if (n % 2 === 0) {\n        console.log(n * n);\n    }\n}\n```", "```js\nconsole.log n*n for n in [1..10] when n%2 is 0\n```", "```js\nusing System;\nusing System.Threading.Tasks;\nnamespace DeepThought\n{\n  public class UltimateQuestion\n  {\n    public Task<Object> GetAnswer(object input) {\n      var result = new\n      {\n        description =\n          \"Answer to The Ultimate Question of \" + input,\n        value = 42\n      };\n      return Task.FromResult<object>(result);\n    }\n  }\n}\n```", "```js\n'use strict';\nconst edge = require('edge');\nlet getAnswer = edge.func({\n    assemblyFile: 'bin\\\\Debug\\\\DeepThought.dll',\n    typeName: 'DeepThought.UltimateQuestion',\n    methodName: 'GetAnswer'\n});\ngetAnswer('Life, the Universe, and Everything', (error, result) => {\n    console.log(result);\n});\n```", "```js\n> node index.js\n> { description: 'Answer to The Ultimate Question of Life, the Universe, and Everything', value: 42 }\n\n```"]