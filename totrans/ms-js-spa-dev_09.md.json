["```js\nvar express = require('express'); \nvar path = require('path'); \nvar favicon = require('serve-favicon'); \nvar logger = require('morgan'); \nvar cookieParser = require('cookie-parser'); \nvar bodyParser = require('body-parser'); \n\n//Database stuff \nvar mongodb = require('mongodb'); \nvar monk = require('monk'); \nvar db = monk('localhost:27017/giftapp') \n\nvar routes = require('./routes/index'); \nvar users = require('./routes/users'); \n\nvar app = express(); \n\n// view engine setup \napp.set('views', path.join(__dirname, 'views')); \napp.set('view engine', 'ejs'); \n\n// uncomment after placing your favicon in /public \n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico'))); \napp.use(logger('dev')); \napp.use(bodyParser.json()); \napp.use(bodyParser.urlencoded({ extended: false })); \napp.use(cookieParser()); \napp.use(express.static(path.join(__dirname, 'public'))); \n\n//Database middlewear \napp.use(function(req,res,next){ \n    req.db = db; \n    next(); \n}); \n\napp.use('/', routes); \napp.use('/users', users); \n\n// catch 404 and forward to error handler \napp.use(function(req, res, next) { \n  var err = new Error('Not Found'); \n  err.status = 404; \n  next(err); \n}); \n\n// error handlers \n\n// development error handler \n// will print stacktrace \nif (app.get('env') === 'development') { \n  app.use(function(err, req, res, next) { \n    res.status(err.status || 500); \n    res.render('error', { \n      message: err.message, \n      error: err \n    }); \n  }); \n} \n\n// production error handler \n// no stacktraces leaked to user \napp.use(function(err, req, res, next) { \n  res.status(err.status || 500); \n  res.render('error', { \n    message: err.message, \n    error: {} \n  }); \n}); \n\nmodule.exports = app; \n\n```", "```js\nvar express = require('express'); \nvar router = express.Router(); \n\n/* GET users listing. */ \nrouter.get('/', function(req, res, next) { \n  res.send('respond with a resource'); \n}); \n\nrouter.get('/show', function(req, res, next) { \n    var db = req.db; \n    var collection = db.get('users'); \n    collection.find({}, {}, function(err,docs){ \n        if(!err){ \n            //res.json(docs); \n res.render('users/show',\n { \n users: docs, \n appName: req.app.locals.appName \n }\n); \n        }else{ \n            res.send('error'); \n        } \n    }); \n}); \nmodule.exports = router; \n\n```", "```js\n<!DOCTYPE html> \n<html> \n<head> \n    <title>Show Users</title> \n    <link rel='stylesheet' href='/stylesheets/style.css' /> \n</head> \n<body> \n<h1>User List: <%= appName %></h1> \n\n<table> \n    <thead> \n        <tr> \n\n            <th>First Name</th> \n            <th>Last Name</th> \n            <th>Email Address</th> \n        </tr> \n    </thead> \n    <tbody> \n    <% users.forEach(function(user, index){ -%> \n        <tr> \n            <td><%= user.firstName %></td> \n            <td><%= user.lastName %></td> \n            <td><%= user.email %></td> \n        </tr> \n    <% }); %> \n    </tbody> \n</table> \n</body> \n</html> \n\n```", "```js\n/** \n * Module dependencies. \n */ \n\nvar app = require('../app'); \nvar debug = require('debug')('giftapp:server'); \nvar http = require('http'); \n\n/** \n * Get port from environment and store in Express. \n */ \n\nvar port = normalizePort(process.env.PORT || '3000'); \napp.set('port', port); \n\n/** \n * Create HTTP server. \n */ \n\nvar server = http.createServer(app); \n\n/** \n * Listen on provided port, on all network interfaces. \n */ \n\nserver.listen(port); \nserver.on('error', onError); \nserver.on('listening', onListening); \n\n```", "```js\napp.all('/protected/', authenticationRequired); \n\n```", "```js\nrouter.get('/show', function(req, res, next) { \n    var db = req.db; \n    var collection = db.get('users'); \n    collection.find({}, {}, function(err,docs){ \n        if(!err){ \n            //res.json(docs); \n            res.render('users/show', { \n                users: docs, \n                appName: req.app.locals.appName \n            }); \n        }else{ \n            res.send('error'); \n        } \n    }); \n}); \n\n```", "```js\nvar express = require('express'); \nvar router = express.Router(); \n\n/* GET users listing. */ \nrouter.get('/', function(req, res, next) { \n  res.send('respond with a resource'); \n}); \n\nrouter.get('/show/:id', function(req, res, next)\n { \n var db = req.db; \n var collection = db.get('users'); \n collection.findOne({ \"_id\": req.params.id },{}, function(err,User)\n{\n if(!err)\n{ \n res.render('users/user',\n { \n user: User, \n appName: req.app.locals.appName \n }\n); \n }\nelse\n{ \n res.send('error'); \n } \n }); \n}); \n\nrouter.get('/show', function(req, res, next) { \n    var db = req.db; \n    var collection = db.get('users'); \n    collection.find({}, {}, function(err,docs){ \n        if(!err){ \n            //res.json(docs); \n            res.render('users/show', { \n                users: docs, \n                appName: req.app.locals.appName \n            }); \n        }else{ \n            res.send('error'); \n        } \n    }); \n}); \n\nmodule.exports = router; \n\n```", "```js\n<!DOCTYPE html> \n<html> \n<head> \n    <title><%= appName %>: <%= user.firstName %> <%= user.lastName  \n%></title> \n    <link rel='stylesheet' href='/stylesheets/style.css' /> \n</head> \n<body> \n<h1><%= user.firstName %> <%= user.lastName %></h1> \n<ul> \n    <li>Email: <%= user.email %></li> \n    <li>Id: <%= user._id %></li> \n</ul> \n\n<p><a href=\"/users/show\">&lt; Back</a></p> \n\n</body> \n</html> \n\n```", "```js\n<!DOCTYPE html> \n<html> \n<head> \n    <title>Show Users</title> \n    <link rel='stylesheet' href='/stylesheets/style.css' /> \n</head> \n<body> \n<h1>User List: <%= appName %></h1> \n\n<table> \n    <thead> \n        <tr> \n\n            <th>First Name</th> \n            <th>Last Name</th> \n            <th>Email Address</th> \n        </tr> \n    </thead> \n    <tbody> \n    <% users.forEach(function(user, index){ -%> \n        <tr> \n <td><a href=\"\"show/<%= user._id%>\"\"><%= user.firstName %></a></td> \n            <td><%= user.lastName %></td> \n            <td><%= user.email %></td> \n        </tr> \n    <% }); %> \n    </tbody> \n</table> \n\n</body> \n</html> \n\n```", "```js\napp.use(bodyParser.json()); \napp.use(bodyParser.urlencoded({ extended: false })); \n\n```", "```js\nrouter.post('/user', function(req, res, next) { \n    var db = req.db; \n    var collection = db.get('users'); \n    collection.insert({ firstName: req.body.firstName, \n                        lastName: req.body.lastName, \n                        email: req.body.email}, \n                        function(err){ \n        if(!err){ \n            res.redirect('/users/show'); \n        }else{ \n            res.send('error'); \n        } \n    }); \n}); \n\n```", "```js\nrouter.get('/show/:id', function(req, res, next) { \n    var db = req.db; \n    var collection = db.get('users'); \n    collection.findOne({ \"\"_id\"\": req.params.id }, {}, function(err,User){ \n        if(!err){ \n if(req.xhr){ \n User.appName = req.app.locals.appName; \n res.json(User); \n } else { \n res.render('users/user',\n { \n user: User, \n appName: req.app.locals.appName \n }); \n } \n        }else{ \n            res.send('error'); \n        } \n    }); \n}); \n\n```", "```js\nres.cookie('userName', 'Joe', { maxage: 900000, secure: true, signed:true }); \n\n```", "```js\nres.clearCookie() \n\n```", "```js\nres.clearCooke('userName'); \n\n```", "```js\nres.download('/reports/TPS-coversheet.pdf', 'coversheet.pdf, function(err){ \n  if(err){ \n    //handle error here \n} else { \n    //do something appropriate \n  } \n}); \n\n```", "```js\nres.json({dog: 'Fido', breed: 'Sheltie' commands: {sit: true, stay: false}); \n\n```", "```js\nres.jsonp({dog: 'Fido'); \n//returns someFunction({\"\"dog\"\": \"\"Fido\"\"}) \n\n```", "```js\nrouter.post('/user', function(req, res, next) { \n    var db = req.db; \n    var collection = db.get('users'); \n    collection.insert({ firstName: req.body.firstName, \n                        lastName: req.body.lastName, \n                        email: req.body.email}, \n                        function(err){ \n        if(!err){ \n res.redirect('/users/show'); \n        }else{ \n            res.send('error'); \n        } \n    }); \n}); \n\n```", "```js\nres.redirect(301, 'http://www.whitehouse.gov'); \n\n```", "```js\nrouter.get('/show', function(req, res, next) { \n    var db = req.db; \n    var collection = db.get('users'); \n    collection.find({}, {}, function(err,docs){ \n        if(!err){ \n            //res.json(docs); \n res.render('users/show',\n { \n users: docs, \n appName: req.app.locals.appName \n }\n); \n        }else{ \n            res.send('error'); \n        } \n    }); \n}); \n\n```", "```js\nres.render('users/show', { \n    users: docs, \n    appName: req.app.locals.appName \n}, function(err, html){ \n    if(!err){ \n    res.cookie('rendered':\"\"someValue\"\") \n        res.send(html); \n    } else { \n        res.send(\"\"There's been a horrible error.\"\"); \n    } \n}); \n\n```", "```js\nrouter.get('/show', function(req, res, next) { \n    var db = req.db; \n    var collection = db.get('users'); \n    collection.find({}, {}, function(err,docs){ \n        if(!err){ \n            //res.json(docs); \n            res.render('users/show', { \n                users: docs, \n                appName: req.app.locals.appName \n            }); \n        }else{ \n res.status(500).send(\"\"There has been a major error\"\"); \n        } \n    }); \n}); \n\n```", "```js\nvar router = express.Router(); \n\n```", "```js\nvar express = require('express'); \nvar path = require('path'); \nvar favicon = require('serve-favicon'); \nvar logger = require('morgan'); \nvar cookieParser = require('cookie-parser'); \nvar bodyParser = require('body-parser'); \n\n//Database stuff \nvar mongodb = require('mongodb'); \nvar monk = require('monk'); \nvar db = monk('localhost:27017/giftapp') \n\nvar routes = require('./routes/index');\nvar users = require('./routes/users'); \n\nvar app = express(); \n\n// view engine setup \napp.set('views', path.join(__dirname, 'views')); \napp.set('view engine', 'ejs'); \n\napp.set('x-powered-by', false); \n\napp.locals.appName = \"My Gift App\"; \n\n// uncomment after placing your favicon in /public \n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico'))); \napp.use(logger('dev')); \napp.use(bodyParser.json()); \napp.use(bodyParser.urlencoded({ extended: false })); \napp.use(cookieParser()); \napp.use(express.static(path.join(__dirname, 'public'))); \n\n//Database middlewear \napp.use(function(req,res,next){ \n    req.db = db; \n    next(); \n}); \n\napp.use('/', routes);\napp.use('/users', users); \n\n// catch 404 and forward to error handler \napp.use(function(req, res, next) { \n  var err = new Error('Not Found'); \n  err.status = 404; \n  next(err); \n}); \n\n// error handlers \n\n// development error handler \n// will print stacktrace \nif (app.get('env') === 'development') { \n  app.use(function(err, req, res, next) { \n    res.status(err.status || 500); \n    res.render('error', { \n      message: err.message, \n      error: err \n    }); \n  }); \n} \n\n// production error handler \n// no stacktraces leaked to user \napp.use(function(err, req, res, next) { \n  res.status(err.status || 500); \n  res.render('error', { \n    message: err.message, \n    error: {} \n  }); \n}); \n\nmodule.exports = app \n\n```", "```js\nrouter.get('/something', function(req, res, next) { \n    res.send(\"\"something loaded\"\"); \n}); \n\n```", "```js\nrouter.get('/something', function(req, res, next) { \n    res.locals.foo = \"\"bar\"\"; \n    next() \n}); \n\nrouter.get('/something', function(req, res, next) { \n    res.send(res.locals.foo); \n    //send s 'bar' \n}); \n\n```", "```js\nrouter.all('/api/*', someAuthenticationMiddleware); \n\n```", "```js\nvar express = require('express'); \nvar router = express.Router(); \n\n/* GET users listing. */ \nrouter.get('/', function(req, res, next) { \n  res.send('respond with a resource'); \n}); \n\nrouter.param('id', function(req, res, next, id)\n { \n var db = req.db; \n var collection = db.get('users'); \n collection.findOne({ \"\"_id\"\": id }, {}, function(err,User)\n{ \n if(err)\n{\n res.send(err); \n }else if(User){ \n req.user = User; \n next(); \n }\n else\n { \n res.send(new Error('User not found.')\n); \n } \n }); \n}); \nrouter.get('/show/:id', function(req, res, next)\n { \n if(req.xhr)\n{ \n User.appName = req.app.locals.appName; \n res.json(req.user); \n }\n else\n { \n res.render('users/user',\n { \n user: req.user, \n appName: req.app.locals.appName \n }); \n }\n}); \n\nrouter.get('/show', function(req, res, next) { \n    var db = req.db; \n    var collection = db.get('users'); \n    collection.find({}, {}, function(err,docs){ \n        if(!err){ \n            //res.json(docs); \n            res.render('users/show', { \n                users: docs, \n                appName: req.app.locals.appName \n            }); \n        }else{ \n            res.send('error'); \n        } \n    }); \n}); \n\nmodule.exports = router; \n\n```", "```js\nvar isJSON = function(req, res, next){ \n    if(req.xhr || req.headers['accepts'] == 'application/json'){ \n        req.isJSON = true; \n    } \n    next(); \n} \n\nmodule.exports = isJSON; \n\n```", "```js\nvar express = require('express'); \nvar path = require('path'); \nvar favicon = require('serve-favicon'); \nvar logger = require('morgan'); \nvar cookieParser = require('cookie-parser'); \nvar bodyParser = require('body-parser'); \nvar isJSON = require('./utils/json'); \n\n//Database stuff \nvar mongodb = require('mongodb'); \nvar monk = require('monk'); \nvar db = monk('localhost:27017/giftapp') \n\nvar routes = require('./routes/index'); \nvar users = require('./routes/users'); \n\nvar app = express(); \n\n// view engine setup \napp.set('views', path.join(__dirname, 'views')); \napp.set('view engine', 'ejs'); \n\napp.set('x-powered-by', false); \n\napp.locals.appName = \"\"My Gift App\"\"; \n\n// uncomment after placing your favicon in /public \n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico'))); \napp.use(logger('dev')); \napp.use(bodyParser.json()); \napp.use(bodyParser.urlencoded({ extended: false })); \napp.use(cookieParser()); \napp.use(express.static(path.join(__dirname, 'public'))); \napp.use(isJSON); \n\n//Database middlewear \napp.use(function(req,res,next){ \n    req.db = db; \n    next(); \n}); \n\napp.use('/', routes); \napp.use('/users', users); \n\n// catch 404 and forward to error handler \napp.use(function(req, res, next) { \n  var err = new Error('Not Found'); \n  err.status = 404; \n  next(err); \n}); \n\n// error handlers \n\n// development error handler \n// will print stacktrace \nif (app.get('env') === 'development') { \n  app.use(function(err, req, res, next) { \n    res.status(err.status || 500); \n    res.render('error', { \n      message: err.message, \n      error: err \n    }); \n  }); \n} \n\n// production error handler \n// no stacktraces leaked to user \napp.use(function(err, req, res, next) { \n  res.status(err.status || 500); \n  res.render('error', { \n    message: err.message, \n    error: {} \n  }); \n}); \n\nmodule.exports = app; \n\n```", "```js\nNext, we'll modify our routes/users.js file to use the middleware:var express = require('express'); \nvar router = express.Router(); \n\n/* GET users listing. */ \nrouter.get('/', function(req, res, next) { \n  res.send('respond with a resource'); \n}); \n\nrouter.param('id', function(req, res, next, id) { \n    var db = req.db; \n    var collection = db.get('users'); \n    collection.findOne({ \"\"_id\"\": id }, {}, function(err,User){ \n        if(err){ \n            res.send(err); \n        }else if(User){ \n            req.user = User; \n            next(); \n        } else { \n            res.send(new Error('User not found.')); \n        } \n    }); \n}); \n\nrouter.get('/show/:id', function(req, res, next) { \n if(req.isJSON){\n User.appName = req.app.locals.appName;\n res.json(req.user);\n } else {\n res.render('users/user', {\n user: req.user,\n appName: req.app.locals.appName\n });\n } \n}); \n\nrouter.get('/show', function(req, res, next) { \n    var db = req.db; \n    var collection = db.get('users'); \n    collection.find({}, {}, function(err,docs){ \n        if(!err){ \n if(req.isJSON)\n{ \n res.send(docs); \n }\n else\n { \n res.render('users/show',\n { \n users: docs, \n appName: req.app.locals.appName \n }); \n } \n        }else{ \n            res.send('error'); \n        } \n    }); \n}); \n\nmodule.exports = router; \n\n```", "```js\nnpm install resource-routing -save\n\n```", "```js\nvar express = require('express'); \nvar path = require('path'); \nvar favicon = require('serve-favicon'); \nvar logger = require('morgan'); \nvar cookieParser = require('cookie-parser'); \nvar bodyParser = require('body-parser'); \nvar isJSON = require('./utils/json'); \nvar routing = require('resource-routing');\nvar controllers = path.resolve('./controllers'); \n\n//Database stuff \nvar mongodb = require('mongodb'); \nvar monk = require('monk'); \nvar db = monk('localhost:27017/giftapp') \n\nvar routes = require('./routes/index'); \nvar users = require('./routes/users'); \n\nvar app = express(); \nrouting.expose_routing_table(app, { at: \"\"/my-routes\"\" }); \n\n// view engine setup \napp.set('views', path.join(__dirname, 'views')); \napp.set('view engine', 'ejs'); \n\napp.set('x-powered-by', false); \n\napp.locals.appName = \"\"My Gift App\"\"; \n\n// uncomment after placing your favicon in /public \n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico'))); \napp.use(logger('dev')); \napp.use(bodyParser.json()); \napp.use(bodyParser.urlencoded({ extended: false })); \napp.use(cookieParser()); \napp.use(express.static(path.join(__dirname, 'public'))); \napp.use(isJSON); \n\n//Database middlewear \napp.use(function(req,res,next){ \n    req.db = db; \n    next(); \n}); \n\napp.use('/', routes); \napp.use('/users', users); \n\nrouting.resources(app, controllers, \"\"giftlist\"\"); \n\n// catch 404 and forward to error handler \napp.use(function(req, res, next) { \n  var err = new Error('Not Found'); \n  err.status = 404; \n  next(err); \n}); \n\n// error handlers \n\n// development error handler \n// will print stacktrace \nif (app.get('env') === 'development') { \n  app.use(function(err, req, res, next) { \n    res.status(err.status || 500); \n    res.render('error', { \n      message: err.message, \n      error: err \n    }); \n  }); \n} \n\n// production error handler \n// no stacktraces leaked to user \napp.use(function(err, req, res, next) { \n  res.status(err.status || 500); \n  res.render('error', { \n    message: err.message, \n    error: {} \n  }); \n}); \n\nmodule.exports = app; \n\n```", "```js\nGET    /giftlist             giftlist_controller.index \nGET    /giftlist.format      giftlist_controller.index \nGET    /giftlist/new         giftlist_controller.new \nGET    /giftlist/new.format  giftlist_controller.new \nPOST   /giftlist             giftlist_controller.create \nPOST   /giftlist:format      giftlist_controller.create \nGET    /giftlist/:id         giftlist_controller.show \nGET    /giftlist/:id.format  giftlist_controller.show \nGET    /giftlist/:id/edit    giftlist_controller.edit \nGET    /giftlist/:id/edit.format  giftlist_controller.edit \nPUT    /giftlist/:id         giftlist_controler.update \nPUT    /giftlist/:id.format  giftlist_controller.update \nDELETE    /giftlist/:id      giftlist_controller.destroy \nDELETE    /giftlist/:id.format   giftlist_controller.destroy \n\n```", "```js\nexports.index = function(req, res){ \n    res.send('giftlist index'); \n}; \n\nexports.new = function(req, res){ \n    res.send('new giftlist'); \n}; \n\nexports.create = function(req, res){ \n    res.send('create giftlist'); \n}; \n\nexports.show = function(req, res){ \n    res.send('show giftlist'+ req.params.id); \n}; \n\nexports.edit = function(req, res){ \n    res.send('edit giftlist'); \n}; \n\nexports.update = function(req, res){ \n    res.send('update giftlist'); \n}; \n\nexports.destroy = function(req, res){ \n    res.send('destroy giftlist'); \n}; \n\n```", "```js\nshow giftlist 17 \n\n```", "```js\nexports.index = function(req, res){ \n    if(req.params.format == \"\"json\"\" || req.isJSON){ \n        res.json({\"\"title\"\":\"\"giftlist index\"\"}) \n    }else{ \n        res.send('<h1>giftlist index</h1>'); \n    } \n\n}; \n\nexports.new = function(req, res){ \n    exports.index = function(req, res){ \n        if(req.params.format == \"\"json\"\" || req.isJSON){ \n            res.json({\"\"title\"\":\"\"new giftlist\"\"}) \n        }else{ \n            res.send('<h1>new giftlist</h1>'); \n        } \n\n    }; \n\n}; \n\nexports.create = function(req, res){ \n    exports.index = function(req, res){ \n        if(req.params.format == \"\"json\"\" || req.isJSON){ \n            res.json({\"\"title\"\":\"\"create giftlist\"\"}) \n        }else{ \n            res.send('<h1>create giftlist</h1>'); \n        } \n\n    }; \n\n}; \n\nexports.show = function(req, res){ \n    exports.index = function(req, res){ \n        if(req.params.format == \"\"json\"\" || req.isJSON){ \n            res.json({ \"\"title\"\":\"\"show giftlist\"\", \"\"giftlist\"\":req.params.id }) \n        }else{ \n            res.send('<h1>show giftlist' + req.params.id + '</h1>'); \n        } \n\n    }; \n\n}; \n\nexports.edit = function(req, res){ \n    exports.index = function(req, res){ \n        if(req.params.format == \"\"json\"\" || req.isJSON){ \n            res.json({ \"\"title\"\":\"\"edit giftlist\"\", \"\"giftlist\"\":req.params.id }) \n        }else{ \n            res.send('<h1>edit giftlist' + req.params.id + '</h1>'); \n        } \n\n    }; \n\n}; \n\nexports.update = function(req, res){ \n    exports.index = function(req, res){ \n        if(req.params.format == \"\"json\"\" || req.isJSON){ \n            res.json({ \"\"title\"\":\"\"update giftlist\"\", \"\"giftlist\"\":req.params.id }) \n        }else{ \n            res.send('<h1>update giftlist' + req.params.id + '</h1>'); \n        } \n\n    }; \n\n}; \n\nexports.destroy = function(req, res){ \n    exports.index = function(req, res){ \n        if(req.params.format == \"\"json\"\" || req.isJSON){ \n            res.json({ \"\"title\"\":\"\"delete giftlist\"\", \"\"giftlist\"\":req.params.id }) \n        }else{ \n            res.send('<h1>delete giftlist' + req.params.id + '</h1>'); \n        } \n\n    }; \n\n}; \n\n```"]