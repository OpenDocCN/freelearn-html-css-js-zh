["```js\ncache (x, y, width, height, [scale=1])\n```", "```js\nvar shape = new createjs.Shape(); \nshape.graphics.beginFill(\"#ff0000\").drawCircle(0, 0, 25); \nshape.cache(-25, -25, 50, 50);\n```", "```js\n<!DOCTYPE html>\n<html>\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html;charset=UTF-8\">\n<title>Cache method in EaselJS</title>\n<script type='text/javascript' src='createjs.js'></script>\n\n<script type='text/javascript'>\nwindow.onload=function() {\n  var canvas = document.getElementById(\"testCanvas\");\n  var stage = new createjs.Stage(canvas);\n\n  var shape = new createjs.Shape();\n  shape.graphics.beginFill(\"#ff0000\").drawCircle(0, 0, 25); \n  shape.cache(-25, -25, 50, 50);\n\n  stage.addChild(shape);\n  stage.update();\n}\n</script>\n\n</head>\n<body>\n<canvas id=\"testCanvas\" width=\"400\" height=\"100\" style=\"border: 1px solid black;\"></canvas>\n</body>\n</html>\n```", "```js\nvar canvas;\nvar stage;\nvar shape;\nvarcircleRadius= 30;\nvar rings = 30;\n```", "```js\nFunction init() {\n  // create a new stage and point it at our canvas:\n  canvas = document.getElementById(\"testCanvas\");\n  stage = new createjs.Stage(canvas);\n\n  // create a large number of slightly complex vector shapes, and give them random positions and velocities:\n\n  var colors = [\"#828b20\", \"#b0ac31\", \"#cbc53d\", \"#fad779\", \"#f9e4ad\", \"#faf2db\", \"#563512\", \"#9b4a0b\", \"#d36600\", \"#fe8a00\", \"#f9a71f\"];\n\n  for(var i= 0; i< 200; i++) {\n    shape = new createjs.Shape();\n      for(var j = rings; j > 0; j--) {\n        shape.graphics.beginFill(colors[Math.random() * colors.length | 0]).drawCircle(0, 0, circleRadius * j / rings);\n    }\n    shape.x = Math.random() * canvas.width;\n    shape.y = Math.random() * canvas.height;\n    shape.velX = Math.random() * 10 - 5;\n    shape.velY = Math.random() * 10 - 5;\n\n    stage.addChild(shape);\n  }\n\n  // add a text object to output the current FPS:\n  fpsLabel = new createjs.Text(\"-- fps\", \"bold 18px Arial\", \"#FFF\");\n  stage.addChild(fpsLabel);\n  fpsLabel.x = 10;\n  fpsLabel.y = 20;\n\n  // start the tick and point it at the window so we can do some work before updating the stage:\n  createjs.Ticker.addEventListener(\"tick\", tick);\n  createjs.Ticker.setFPS(50);\n}\n```", "```js\nfunction tick(event) {\n  var w = canvas.width;\n  var h = canvas.height;\n  var l = stage.getNumChildren() - 1;\n\n  // iterate through all the children and move them according to their velocity:\n  for(var i= 1; i< l; i++) {\n    var shape = stage.getChildAt(i);\n    shape.x = (shape.x + shape.velX + w) % w;\n    shape.y = (shape.y + shape.velY + h) % h;\n  }\n  fpsLabel.text = Math.round(createjs.Ticker.getMeasuredFPS()) + \" fps\";\n  // draw the updates to stage:\n  stage.update(event);\n}\n```", "```js\nfunction toggleCache(value) {\n  // iterate all the children except the fpsLabel, and set up the cache:\n  var l = stage.getNumChildren() - 1;\n  for(var i= 0; i< l; i++) {\n    var shape = stage.getChildAt(i);\n    if (value) {\n      shape.cache(-circleRadius, -circleRadius, circleRadius * 2,circleRadius * 2);\n    } else {\n      shape.uncache();\n    }\n  }\n}\n```", "```js\nfunction init() {\n  var canvas = document.getElementById(\"canvas\");\n  var stage = new createjs.Stage(canvas);\n\n  var image = new Image();\n  image.src = \"easeljs.png\";\n\n  //wait to load the image\n  image.onload = function(evt) {\n    var bitmap = new createjs.Bitmap(evt.target);\n    var width = bitmap.image.width;\n    var height = bitmap.image.height;\n\n    //clone the existing bitmap to use as reflection\n    var reflectBitmap = bitmap.clone();\n    reflectBitmap.regY = height;\n    reflectBitmap.rotation = 180;\n\n    //to add a padding from the main bitmap\n    reflectBitmap.y = height + 2;\n    reflectBitmap.scaleX = -1;\n\n    var maskShape = new createjs.Shape();\n    var graphics = maskShape.graphics;\n    //add reflection effect\n    graphics.beginLinearGradientFill([\"rgba(255, 255, 255, 0)\", \"rgba(255, 255, 255, 0.6)\"], [0.5, 1], 0, 10, 0, height);\n    graphics.drawRect(0, 0, width, height);\n    graphics.endFill();\n\n    maskShape.cache(0, 0, width, height);\n\n    reflectBitmap.filters = [new createjs.AlphaMaskFilter(maskShape.cacheCanvas)];\n    reflectBitmap.cache(0, 0, width, height);\n\n    //add both pictures\n    stage.addChild(bitmap);\n    stage.addChild(reflectBitmap);\n    stage.update();\n  }\n}\n```"]