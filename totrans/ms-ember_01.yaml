- en: Chapter 1. Introduction to Ember.js
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 Ember.js简介
- en: 'This chapter will introduce **Ember.js**, including its origin, release cycle,
    and its key elements. It will focus on describing the different functions that
    can be undertaken once an application is created. Therefore, a better understanding
    of the following will be gained at the end of the chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍**Ember.js**，包括其起源、发布周期及其关键元素。它将专注于描述一旦创建应用程序后可以执行的不同功能。因此，在章节结束时，您将更好地理解以下内容：
- en: Ember.js's origin
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ember.js的起源
- en: Downloading Ember.js and its dependencies
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载Ember.js及其依赖项
- en: Creating a basic Ember.js application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建基本的Ember.js应用程序
- en: Ember.js application concepts
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ember.js应用程序概念
- en: The origin of Ember.js
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ember.js的起源
- en: Ember.js is a fun and productive open source JavaScript framework used for creating
    ambitious web applications. It powers complex client-side applications and guarantees
    development productivity through use of common web conventions over trivial configurations.
    Its official website is [http://emberjs.com](http://emberjs.com).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Ember.js是一个用于创建雄心勃勃的Web应用程序的有趣且高效的开源JavaScript框架。它通过使用常见的Web约定而不是琐碎的配置来保证开发效率。它的官方网站是[http://emberjs.com](http://emberjs.com)。
- en: 'It was forked from SproutCore by Yehuda Katz and Tom Dale. SproutCore is an
    MVC framework that strives to provide a robust JavaScript widget toolkit similar
    to Apple''s Cocoa API for Max OS X. The additional user interface widget feature
    was found to be unnecessary to most developers, hence the fork. The result was
    a more lightweight, easy-to-use library that still lived up to the promise of:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 它是由Yehuda Katz和Tom Dale从SproutCore分叉出来的。SproutCore是一个力求提供类似Apple的Cocoa API用于Max
    OS X的强大JavaScript小部件工具包的MVC框架。额外的用户界面小部件功能被发现对大多数开发者来说是不必要的，因此进行了分叉。结果是，一个更轻量级、易于使用的库，同时仍然实现了以下承诺：
- en: Reducing development time
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少开发时间
- en: Creating robust applications through use of common client-side web application
    development best practices
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用常见的客户端Web应用程序开发最佳实践来创建健壮的应用程序
- en: Friendly API that makes client-side programming fun
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 友好的API使客户端编程变得有趣
- en: Ember.js has a wide range of applications. It is well suited for applications
    that display dynamic data and have increased user interaction. Such applications
    include task managers, dashboards, forums, chat and messaging applications, and
    so on. Think of applications such as Gmail, Facebook, and Twitter. That being
    said, Ember.js is not ideal for static websites.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Ember.js具有广泛的应用范围。它非常适合显示动态数据和具有增强用户交互的应用程序。这些应用程序包括任务管理器、仪表板、论坛、聊天和消息应用程序等。想想Gmail、Facebook和Twitter这样的应用程序。话虽如此，Ember.js并不适合静态网站。
- en: Ember.js is used by many companies throughout the world including, but not limited
    to, Apple, Groupon, Square, Zendesk, and Tilde Inc.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Ember.js被世界各地的许多公司使用，包括但不限于Apple、Groupon、Square、Zendesk和Tilde Inc.
- en: Downloading Ember.js
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载Ember.js
- en: One of the most asked questions is, where do I download Ember.js from? The most
    stable version of library can be downloaded from [http://emberjs.com/builds/#/release](http://emberjs.com/builds/#/release).
    However, the home page ([http://emberjs.com/](http://emberjs.com/)) usually contains
    a link to a starter kit that also contains the required dependencies. At the time
    of writing this book, the current stable version of Ember.js is version 1.7.0,
    which we will be using throughout the book. In our case, we will be using the
    corresponding starter kit from [https://github.com/emberjs/starter-kit/archive/v1.7.0.zip](https://github.com/emberjs/starter-kit/archive/v1.7.0.zip),
    which you should download and unarchive into your working directory.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最常被问到的一个问题就是，我从哪里下载Ember.js？该库的最稳定版本可以从[http://emberjs.com/builds/#/release](http://emberjs.com/builds/#/release)下载。然而，主页([http://emberjs.com/](http://emberjs.com/))通常包含一个指向包含所需依赖项的入门套件的链接。在撰写本书时，Ember.js的当前稳定版本是1.7.0，我们将全书使用这个版本。在我们的情况下，我们将使用来自[https://github.com/emberjs/starter-kit/archive/v1.7.0.zip](https://github.com/emberjs/starter-kit/archive/v1.7.0.zip)的相应入门套件，您应该下载并解压缩到您的工作目录中。
- en: Upgrading Ember.js has been made much easier. New releases are usually announced
    at [http://emberjs.com/blog/tags/releases.html](http://emberjs.com/blog/tags/releases.html)
    and go in detail to discuss what to expect in the release.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 升级Ember.js变得容易多了。新版本通常在[http://emberjs.com/blog/tags/releases.html](http://emberjs.com/blog/tags/releases.html)上宣布，并详细讨论发布中可以期待的内容。
- en: 'Now, after unarchiving the provided starter kit, under `js/libs`, we notice
    the two basic requirements for running Ember.js:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在解压缩提供的入门套件后，在`js/libs`目录下，我们注意到运行Ember.js的两个基本要求：
- en: '**jQuery**: Ember.js uses jQuery for fundamental functions such as HTTP requests,
    DOM manipulation, and events management. jQuery is the most popular DOM manipulation
    library; hence, readers with past experience in it will feel at home. This also
    means that we will be able to easily integrate our favorite third-party jQuery
    libraries into our Ember.js applications.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**jQuery**：Ember.js使用jQuery进行基本功能，如HTTP请求、DOM操作和事件管理。jQuery是最受欢迎的DOM操作库；因此，有经验的读者会感到很自在。这也意味着我们可以轻松地将我们喜欢的第三方jQuery库集成到我们的Ember.js应用程序中。'
- en: '**Handlebars**: This is the template engine library that Ember.js uses to display
    reactive pages to the users through autoupdates and better user interactions.
    It''s worth noting that we can still use other template engines such as Ender
    or Jade with a little bit of effort.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Handlebars**：这是Ember.js使用的模板引擎库，通过自动更新和更好的用户交互向用户显示响应式页面。值得注意的是，我们仍然可以通过一些努力使用其他模板引擎，如Ender或Jade。'
- en: 'The index file loaded these files as:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 索引文件以以下方式加载这些文件：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `app.js` file contains all our application code but later on we may separate
    application concerns into more files when the application grows. It''s worth noting
    that the order in which the scripts are loaded is important. Once the page loads,
    Ember.js logs the dependencies used together with their versions, as shown in
    the following screenshot:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.js`文件包含我们所有的应用程序代码，但随着应用程序的增长，我们可能会将应用程序的关注点分离到更多的文件中。值得注意的是，脚本加载的顺序很重要。一旦页面加载，Ember.js会记录使用的依赖项及其版本，如下面的截图所示：'
- en: '![Downloading Ember.js](img/00002.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![下载Ember.js](img/00002.jpeg)'
- en: 'The two libraries and Ember.js can be accessed from the global scope as `jQuery`
    (or `$` ), `Handlebars`, and `Ember` (or `Em`) respectively, as shown in the following
    code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 两个库和Ember.js可以从全局作用域作为`jQuery`（或`$`）、`Handlebars`和`Ember`（或`Em`）分别访问，如下面的代码所示：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com](http://www.packtpub.com)的账户下载您购买的所有Packt书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给您。
- en: Creating your first application
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的第一个应用程序
- en: 'The application script file (`js/app.js`) in the starter kit contains a basic
    Ember.js application. If you load the `index.html` file in your browser, you should
    see the three primary colors displayed:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 入门套件中的应用程序脚本文件（`js/app.js`）包含一个基本的Ember.js应用程序。如果您在浏览器中加载`index.html`文件，您应该看到显示的三种主要颜色：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: What steps led to the result?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 导致这一结果的是哪些步骤？
- en: First, an Ember.js application was created which then created a router.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，创建了一个Ember.js应用程序，然后创建了路由器。
- en: The router that is responsible for state management transitioned the application
    into two states, the first of which was the application state. This state resulted
    in the application template being rendered into the DOM, hence the **Welcome to
    Ember.js** message.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负责状态管理的路由器将应用程序转换成两种状态，第一种是应用程序状态。这种状态导致应用程序模板被渲染到DOM中，因此出现了**欢迎使用Ember.js**的消息。
- en: Superseding the application state was the index state whose route, `App.IndexRoute`
    rendered the index template inside the application template.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取代应用程序状态的是索引状态，其路由`App.IndexRoute`在应用程序模板内渲染了索引模板。
- en: The index route also provided the template, the lists, and the colors as the
    model context.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引路由还提供了模板、列表和颜色作为模型上下文。
- en: 'This can be summarized as in the following figure:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以总结如下图所示：
- en: '![Creating your first application](img/00003.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![创建您的第一个应用程序](img/00003.jpeg)'
- en: This example alone has introduced some of the following key Ember.js concepts.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 仅此一个示例就介绍了以下一些关键的Ember.js概念。
- en: Router
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 路由器
- en: The router coordinates the application's state with the browser's location.
    It supports traditional web features such as navigation of the application's history
    using the browser's back and forward buttons, as well as linking back to the application
    using links.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 路由器协调应用程序的状态与浏览器的位置。它支持传统的Web功能，例如使用浏览器的后退和前进按钮导航应用程序的历史记录，以及通过链接返回到应用程序。
- en: 'Depending on the current URL, it calls matched routes that render several nested
    templates on a page. Each of these templates has a model context. The router is
    automatically created by an application on initialization. Therefore, we only
    need to call its `map` method to define the application routes, as shown in the
    following code:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 根据当前的URL，它调用匹配的路由，在页面上渲染多个嵌套模板。每个模板都有一个模型上下文。路由器在初始化时自动创建。因此，我们只需要调用其`map`方法来定义应用程序路由，如下面的代码所示：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Route
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 路由
- en: 'The route is primarily responsible for providing a template''s model context.
    It''s defined from the `Ember.Route` class, as shown:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 路由主要负责提供模板的模型上下文。它由`Ember.Route`类定义，如下所示：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It will be covered extensively in [Chapter 3](part0029_split_000.html#page "Chapter 3. Routing
    and State Management"), *Routing and State Management*.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 它将在[第3章](part0029_split_000.html#page "第3章。路由和状态管理")中广泛介绍，*路由和状态管理*。
- en: Controller
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器
- en: 'A controller proxies models provided by routes and further decorates them with
    display logic. They are also the channel of communication between the different
    states of an application through explicit dependency specification, as we shall
    learn in [Chapter 5](part0061_split_000.html#page "Chapter 5. Controllers"), *Controllers*.
    To create controllers, we extend the `Ember.Controller` class, as shown in the
    following line of code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器代理由路由提供的模型，并进一步用显示逻辑装饰它们。它们也是通过显式依赖指定在不同应用程序状态之间的通信渠道，正如我们将在[第5章](part0061_split_000.html#page
    "第5章。控制器")中学习的那样，*控制器*。要创建控制器，我们扩展`Ember.Controller`类，如下面的代码行所示：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: View
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图
- en: 'Views are used to manage events. They delegate user-generated events back to
    controllers and routes. Views are typically used to integrate other DOM manipulation
    libraries, for example, third-party jQuery packages. They are usually created
    from the `Ember.View` class:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 视图用于管理事件。它们将用户生成的事件委派回控制器和路由。视图通常用于集成其他DOM操作库，例如第三方jQuery包。它们通常从`Ember.View`类创建：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We will discuss them in detail in [Chapter 6](part0069_split_000.html#page "Chapter 6. Views
    and Event Management"), *Views and Event Management*.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第6章](part0069_split_000.html#page "第6章。视图和事件管理")中详细讨论它们，*视图和事件管理*。
- en: Template
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模板
- en: 'A template is set of expressions that are compiled down to HTML and rendered
    into the DOM. Templates are usually defined with the following signature:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 模板是一组编译成HTML并渲染到DOM中的表达式。模板通常使用以下签名定义：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Component
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 组件
- en: The component is a new concept in Ember.js that enables creation of reusable
    elements in accordance to the **W3C Web Components** specification. These elements
    are ideally not application-specific and can therefore be reused in other applications.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 组件是Ember.js中的一个新概念，它根据**W3C Web Components**规范允许创建可重用元素。这些元素理想上不是特定于应用程序的，因此可以在其他应用程序中重用。
- en: Initializing the application
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化应用程序
- en: 'An Ember.js application is created by instantiating the `Ember.Application`
    class:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Ember.js应用程序通过实例化`Ember.Application`类来创建：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: A few things happen when an application is first created.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序首次创建时，会发生一些事情。
- en: 'A new namespace is created for the app on which we define views, controllers,
    and routes. This prevents us from polluting the global scope. Therefore, defining
    a route, for example, should be attached to it as:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为我们定义视图、控制器和路由的应用程序创建了一个新的命名空间。这防止了我们污染全局作用域。因此，定义一个路由，例如，应该附加到它上，如下所示：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Ember.js usually initializes the application by calling its `initialize` method.
    This initialization can be delayed by calling the application''s `deferReadiness`
    method and then recommenced with `advanceReadiness`. For example, imagine our
    application needed to load the Google Client library beforehand, as shown:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Ember.js通常通过调用其`initialize`方法来初始化应用程序。可以通过调用应用程序的`deferReadiness`方法来延迟初始化，然后通过`advanceReadiness`重新开始。例如，假设我们的应用程序需要先加载Google客户端库，如下所示：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here''s how our application would finalize its readiness as soon as the library
    is loaded:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的应用程序在库加载后立即完成其准备的方式：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now that our application is ready to use the SDK, we would load any currently
    logged-in user using an initializer via a promise. Initializers are called when
    the application is being initialized and are therefore a good opportunity to perform
    various functions, such as inject dependencies using the application''s container.
    This container is used to organize the different components within the application
    and can be referenced as:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们应用程序准备使用SDK，我们将通过一个初始化器加载任何当前登录的用户。初始化器在应用程序初始化时被调用，因此是执行各种功能的好机会，例如使用应用程序的容器注入依赖。这个容器用于组织应用程序内的不同组件，可以按以下方式引用：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'For example, internally, an instance of a route could be accessed as:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，内部，可以按以下方式访问路由的一个实例：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Since we have now loaded the third-party library, we can proceed to create
    a user initializer that would load any currently logged-in user:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们现在已经加载了第三方库，我们可以继续创建一个用户初始化器，该初始化器将加载任何当前登录的用户：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The two blocks demonstrate the two uses of the application container as mentioned
    in the preceding code. The first one shows how to register an accessible application
    component; in this case, the user will now be accessed as:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个模块演示了在前面代码中提到的应用程序容器的两种用途。第一个展示了如何注册一个可访问的应用程序组件；在这种情况下，用户现在将按以下方式访问：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This user first starts off as a promise in the initializer. A **promise** is
    a stateful object whose value can be set at a later point in time. We will not
    cover much about promises in this chapter but one thing to note is that once the
    sign-in process completes, the sign-in callback `gapi.auth.authorize` either rejects
    or resolves the promise. Resolving the promise transitions the user object from
    the pending state to the fulfilled state.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此用户最初在初始化器中作为一个承诺。**承诺**是一个有状态的对象，其值可以在稍后的时间点设置。我们将在本章中不深入讨论承诺，但有一点需要注意，一旦登录过程完成，登录回调
    `gapi.auth.authorize` 要么拒绝要么解决承诺。解决承诺将用户对象从挂起状态转换为满足状态。
- en: 'The second block demonstrates dependency injection, which we also talked about
    earlier. In this case, we will now be able to access this user in routes and controllers
    as shown in the following code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个模块演示了依赖注入，这是我们之前也讨论过的。在这种情况下，我们现在将能够通过以下代码在路由和控制器中访问此用户：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Embedding Ember.js applications
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嵌入 Ember.js 应用程序
- en: 'An Ember.js application can be embedded into an existing page by specifying
    the application''s `rootElement`. This attribute is a jQuery selector. For example,
    to embed the application into a `#chat-container` element, use the following lines
    of code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过指定应用程序的 `rootElement` 将 Ember.js 应用程序嵌入到现有页面中。此属性是一个 jQuery 选择器。例如，要将应用程序嵌入到
    `#chat-container` 元素中，请使用以下代码行：
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This is useful when we are creating such applications as widgets. Specifying
    the root element ensures that only events invoked inside the element are managed
    by the Ember.js application.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建此类应用程序（如小部件）时，这很有用。指定根元素确保只有在该元素内部引发的事件才由 Ember.js 应用程序管理。
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter has been an introductory guide to Ember.js. It focused on introducing
    the key elements that compose an Ember.js application. These elements inherit
    from the `Ember.Object` primitive, which will be discussed in the next chapter.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是 Ember.js 的入门指南。它侧重于介绍构成 Ember.js 应用程序的关键元素。这些元素继承自 `Ember.Object` 原始类型，这将在下一章中讨论。
