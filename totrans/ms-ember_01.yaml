- en: Chapter 1. Introduction to Ember.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter will introduce **Ember.js**, including its origin, release cycle,
    and its key elements. It will focus on describing the different functions that
    can be undertaken once an application is created. Therefore, a better understanding
    of the following will be gained at the end of the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Ember.js's origin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading Ember.js and its dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a basic Ember.js application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ember.js application concepts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The origin of Ember.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ember.js is a fun and productive open source JavaScript framework used for creating
    ambitious web applications. It powers complex client-side applications and guarantees
    development productivity through use of common web conventions over trivial configurations.
    Its official website is [http://emberjs.com](http://emberjs.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'It was forked from SproutCore by Yehuda Katz and Tom Dale. SproutCore is an
    MVC framework that strives to provide a robust JavaScript widget toolkit similar
    to Apple''s Cocoa API for Max OS X. The additional user interface widget feature
    was found to be unnecessary to most developers, hence the fork. The result was
    a more lightweight, easy-to-use library that still lived up to the promise of:'
  prefs: []
  type: TYPE_NORMAL
- en: Reducing development time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating robust applications through use of common client-side web application
    development best practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Friendly API that makes client-side programming fun
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ember.js has a wide range of applications. It is well suited for applications
    that display dynamic data and have increased user interaction. Such applications
    include task managers, dashboards, forums, chat and messaging applications, and
    so on. Think of applications such as Gmail, Facebook, and Twitter. That being
    said, Ember.js is not ideal for static websites.
  prefs: []
  type: TYPE_NORMAL
- en: Ember.js is used by many companies throughout the world including, but not limited
    to, Apple, Groupon, Square, Zendesk, and Tilde Inc.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading Ember.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most asked questions is, where do I download Ember.js from? The most
    stable version of library can be downloaded from [http://emberjs.com/builds/#/release](http://emberjs.com/builds/#/release).
    However, the home page ([http://emberjs.com/](http://emberjs.com/)) usually contains
    a link to a starter kit that also contains the required dependencies. At the time
    of writing this book, the current stable version of Ember.js is version 1.7.0,
    which we will be using throughout the book. In our case, we will be using the
    corresponding starter kit from [https://github.com/emberjs/starter-kit/archive/v1.7.0.zip](https://github.com/emberjs/starter-kit/archive/v1.7.0.zip),
    which you should download and unarchive into your working directory.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading Ember.js has been made much easier. New releases are usually announced
    at [http://emberjs.com/blog/tags/releases.html](http://emberjs.com/blog/tags/releases.html)
    and go in detail to discuss what to expect in the release.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, after unarchiving the provided starter kit, under `js/libs`, we notice
    the two basic requirements for running Ember.js:'
  prefs: []
  type: TYPE_NORMAL
- en: '**jQuery**: Ember.js uses jQuery for fundamental functions such as HTTP requests,
    DOM manipulation, and events management. jQuery is the most popular DOM manipulation
    library; hence, readers with past experience in it will feel at home. This also
    means that we will be able to easily integrate our favorite third-party jQuery
    libraries into our Ember.js applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Handlebars**: This is the template engine library that Ember.js uses to display
    reactive pages to the users through autoupdates and better user interactions.
    It''s worth noting that we can still use other template engines such as Ender
    or Jade with a little bit of effort.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The index file loaded these files as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `app.js` file contains all our application code but later on we may separate
    application concerns into more files when the application grows. It''s worth noting
    that the order in which the scripts are loaded is important. Once the page loads,
    Ember.js logs the dependencies used together with their versions, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Downloading Ember.js](img/00002.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The two libraries and Ember.js can be accessed from the global scope as `jQuery`
    (or `$` ), `Handlebars`, and `Ember` (or `Em`) respectively, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The application script file (`js/app.js`) in the starter kit contains a basic
    Ember.js application. If you load the `index.html` file in your browser, you should
    see the three primary colors displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: What steps led to the result?
  prefs: []
  type: TYPE_NORMAL
- en: First, an Ember.js application was created which then created a router.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The router that is responsible for state management transitioned the application
    into two states, the first of which was the application state. This state resulted
    in the application template being rendered into the DOM, hence the **Welcome to
    Ember.js** message.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Superseding the application state was the index state whose route, `App.IndexRoute`
    rendered the index template inside the application template.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The index route also provided the template, the lists, and the colors as the
    model context.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This can be summarized as in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating your first application](img/00003.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This example alone has introduced some of the following key Ember.js concepts.
  prefs: []
  type: TYPE_NORMAL
- en: Router
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The router coordinates the application's state with the browser's location.
    It supports traditional web features such as navigation of the application's history
    using the browser's back and forward buttons, as well as linking back to the application
    using links.
  prefs: []
  type: TYPE_NORMAL
- en: 'Depending on the current URL, it calls matched routes that render several nested
    templates on a page. Each of these templates has a model context. The router is
    automatically created by an application on initialization. Therefore, we only
    need to call its `map` method to define the application routes, as shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Route
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The route is primarily responsible for providing a template''s model context.
    It''s defined from the `Ember.Route` class, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: It will be covered extensively in [Chapter 3](part0029_split_000.html#page "Chapter 3. Routing
    and State Management"), *Routing and State Management*.
  prefs: []
  type: TYPE_NORMAL
- en: Controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A controller proxies models provided by routes and further decorates them with
    display logic. They are also the channel of communication between the different
    states of an application through explicit dependency specification, as we shall
    learn in [Chapter 5](part0061_split_000.html#page "Chapter 5. Controllers"), *Controllers*.
    To create controllers, we extend the `Ember.Controller` class, as shown in the
    following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: View
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Views are used to manage events. They delegate user-generated events back to
    controllers and routes. Views are typically used to integrate other DOM manipulation
    libraries, for example, third-party jQuery packages. They are usually created
    from the `Ember.View` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We will discuss them in detail in [Chapter 6](part0069_split_000.html#page "Chapter 6. Views
    and Event Management"), *Views and Event Management*.
  prefs: []
  type: TYPE_NORMAL
- en: Template
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A template is set of expressions that are compiled down to HTML and rendered
    into the DOM. Templates are usually defined with the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The component is a new concept in Ember.js that enables creation of reusable
    elements in accordance to the **W3C Web Components** specification. These elements
    are ideally not application-specific and can therefore be reused in other applications.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An Ember.js application is created by instantiating the `Ember.Application`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: A few things happen when an application is first created.
  prefs: []
  type: TYPE_NORMAL
- en: 'A new namespace is created for the app on which we define views, controllers,
    and routes. This prevents us from polluting the global scope. Therefore, defining
    a route, for example, should be attached to it as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Ember.js usually initializes the application by calling its `initialize` method.
    This initialization can be delayed by calling the application''s `deferReadiness`
    method and then recommenced with `advanceReadiness`. For example, imagine our
    application needed to load the Google Client library beforehand, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s how our application would finalize its readiness as soon as the library
    is loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that our application is ready to use the SDK, we would load any currently
    logged-in user using an initializer via a promise. Initializers are called when
    the application is being initialized and are therefore a good opportunity to perform
    various functions, such as inject dependencies using the application''s container.
    This container is used to organize the different components within the application
    and can be referenced as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, internally, an instance of a route could be accessed as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we have now loaded the third-party library, we can proceed to create
    a user initializer that would load any currently logged-in user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The two blocks demonstrate the two uses of the application container as mentioned
    in the preceding code. The first one shows how to register an accessible application
    component; in this case, the user will now be accessed as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This user first starts off as a promise in the initializer. A **promise** is
    a stateful object whose value can be set at a later point in time. We will not
    cover much about promises in this chapter but one thing to note is that once the
    sign-in process completes, the sign-in callback `gapi.auth.authorize` either rejects
    or resolves the promise. Resolving the promise transitions the user object from
    the pending state to the fulfilled state.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second block demonstrates dependency injection, which we also talked about
    earlier. In this case, we will now be able to access this user in routes and controllers
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Embedding Ember.js applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An Ember.js application can be embedded into an existing page by specifying
    the application''s `rootElement`. This attribute is a jQuery selector. For example,
    to embed the application into a `#chat-container` element, use the following lines
    of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This is useful when we are creating such applications as widgets. Specifying
    the root element ensures that only events invoked inside the element are managed
    by the Ember.js application.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has been an introductory guide to Ember.js. It focused on introducing
    the key elements that compose an Ember.js application. These elements inherit
    from the `Ember.Object` primitive, which will be discussed in the next chapter.
  prefs: []
  type: TYPE_NORMAL
