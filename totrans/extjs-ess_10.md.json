["```js\nExt.define('MyClass', {\n  doAction: function(){\n    Ext.Ajax.request({\n      url: 'action.php',\n      success: function(response){\n        OtherClass.async(response.value, function(newValue){\n          AnotherClass.async(newValue, function(){\n          // finished!\n          });\n        });\n      }\n    });\n  }\n});\n```", "```js\nExt.define('MyClass', {\n  doAction: function(){\n    Ext.Ajax.request({\n      url: 'action.php',\n      success: this.onActionSuccess\n    });\n  },\n  onActionSuccess: function(response){\n    OtherClass.async(response.value, this.onOtherClassAsync);\n  },\n  onOtherClassAsync: function(newValue){\n    AnotherClass.async(newValue, this.onAnotherClassSync);\n  },\n  onAnotherClassSync: function(){\n  // finished!\n  }\n});\n```", "```js\nonDeleteButtonClick: function(btn) {\n  var grid = btn.up('gridpanel'),\n  selectedUserModel = grid.getSelection()[0];\n  Ext.Ajax.request({\n    url : 'deleteUser.php',\n    params : {\n      userID: selectedUserModel.get('userID')\n    },\n    success: this.onUserDeleteSuccess,\n    failure: this.onUserDeleteFailure,\n    scope : this\n  });\n}\n```", "```js\nonDeleteButtonClick: function(btn) {\n  var grid = btn.up('gridpanel'),\n  selectedUserModel = grid.getSelection()[0];\n  this.doUserDelete(selectedUserModel.get('userID'));\n},\ndoUserDelete: function(userID){\n  Ext.Ajax.request({\n    url : 'deleteUser.php',\n    params : {\n      userID: userID\n    },\n    success: this.onUserDeleteSuccess,\n    failure: this.onUserDeleteFailure,\n    scope : this\n  });\n}\n```", "```js\ndescribe(\"Test Suite Title\", function() {\n  var a;\n  it(\"Spec Description\", function() {\n    a = MyClass.doSomething();\n    expect(a).toBe(true);\n  });\n});\n```", "```js\nStartTest(function(t) {\n  t.diag(\"MyClass Test\");\n  var a = MyClass.doSomething();\n  t.is(a, true, 'MyClass.doSomething returned true');\n  t.done();\n});\n```", "```js\nExt.define('BizDash.config.Config', {\n  extend: 'Ext.util.Observable',\n  singleton: true,\n  config: { version: '0.0.1-0' ... },\n  ...\n  getBuildNumber: function() {\n    var versionSplit = this.getVersion().split('-');\n    return versionSplit[1];\n  },\n  applyVersion: function(newVersion, oldVersion){\n    return newVersion;\n  },\n  updateVersion: function(newVersion, oldVersion){\n    if(this.hasListeners) {\n      this.fireEvent('versionchanged', newVersion, oldVersion);\n    }\n  }\n});\n```", "```js\nvar Harness = Siesta.Harness.Browser.ExtJS;\nHarness.configure({\n  title: 'Config Tests',\n  preload: [\n    '../../../MyWorkspace/build/testing/BizDash/resources/BizDash-all.css',\n    '../../../MyWorkspace/build/testing/BizDash/app.js' ]\n  });\n  Harness.start(\n    {\n      group: 'Config',\n      items: [\n    ]\n  }\n);\n```", "```js\n<!DOCTYPE html>\n    <html>\n    <head>\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"http://cdn.sencha.io/ext/gpl/4.2.0/resources/css/ext-all.css\">\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"../../siesta/resources/css/siesta-all.css\">\n\n        <script type=\"text/javascript\" src=\"img/ext-all.js\"></script>\n        <script type=\"text/javascript\" src=\"img/siesta-all.js\"></script>\n        <script type=\"text/javascript\" src=\"img/index.js\"></script>\n    </head>\n    <body>\n    </body>\n    </html>\n```", "```js\nStartTest(function(t) {\n  t.diag(\"Config.getBuildNumber\");\n  t.done();\n});\n```", "```js\nStartTest(function(t) {\n  t.diag(\"Config.getBuildNumber\");\n  var buildNumber = BizDash.config.Config.getBuildNumber();\n  t.expect(buildNumber).toEqual('0');\n  t.done();\n});\n```", "```js\nHarness.start(\n  {\n    group: 'Config',\n    items: [\n      '010_getBuildNumber.t.js'\n    ]\n  }\n);\n```", "```js\nStartTest(function(t) {\n  t.diag(\"Config.getBuildNumber\");\n  BizDash.config.Config.setVersion('');\n  var buildNumber = BizDash.config.Config.getBuildNumber();\n  t.expect(buildNumber).toBeUndefined();\n  t.done();\n});\n```", "```js\nStartTest(function(t) {\n  t.diag(\"Config.getBuildNumber\");\n  BizDash.config.Config.setVersion(null);\n  t.expect(BizDash.config.Config.getBuildNumber).toThrow();\n  t.done();\n});\n```", "```js\nStartTest(function(t) {\n  t.diag(\"Product Grid Contents\");\n  var productsStore = Ext.getStore('Products');\n  productsStore.removeAll();\n  productsStore.add([\n    {\n      \"id\" : 1,\n      \"Name\" : \"Product 1\",\n      \"Description\": \"Product 1 Description\",\n      \"Quantity\" : 1,\n      \"Price\" : 9.99\n    },\n    {\n      \"id\" : 2,\n      \"Name\" : \"Product 2\",\n      \"Description\": \"Product 2 Description\",\n      \"Quantity\" : 5,\n      \"Price\" : 2.99\n    },\n    {\n      \"id\" : 3,\n      \"Name\" : \"Product 3\",\n      \"Description\": \"Product 3 Description\",\n      \"Quantity\" : 1000,\n      \"Price\" : 5.49\n    }\n  ]);\n});\n```", "```js\n// test Row 0, Cell 0\nt.matchGridCellContent('product-ProductGrid', 0, 0, 'Product 1', 'Cell 0, 0 contents are correct');\n// test Row 1, Cell 0\nt.matchGridCellContent('product-ProductGrid', 1, 0, 'Product 2', 'Cell 1, 0 contents are correct');\n```", "```js\nvar cell = t.getCell('product-ProductGrid', 0, 4);\n```", "```js\n...\nt.chain( function (next) {\n  // click the button\n  t.click(cell);\n  // check ProductForm is created\n    t.cqExists('product-ProductForm', 'Product Form is displayed');\n    next();\n  }\n  ...\n);\n```", "```js\n...\n{\n  waitFor: 'Ms',\n  args: 10\n},\nfunction (next) {\n  t.fieldHasValue('product-ProductForm textfield[fieldLabel=\"Name\"]', 'Product 1', 'Name field has correct value');\n\n  t.fieldHasValue('product-ProductForm textfield[fieldLabel=\"Description\"]', 'Product 1 Description', 'Description field has correct value');\n\n  t.fieldHasValue('product-ProductForm textfield[fieldLabel=\"Quantity\"]', '1', 'Quantity field has correct value');\n\n  t.fieldHasValue('product-ProductForm textfield[fieldLabel=\"Price\"]', '9.99', 'Price field has correct value');\n\n  next();\n}\n...\n```", "```js\nfunction(next){\n  var nameField = Ext.ComponentQuery.query('product-ProductForm textfield[fieldLabel=\"Name\"]')[0];\n\n  nameField.setValue('Updated Product 1');\n\n  t.matchGridCellContent('product-ProductGrid', 0, 0, 'Updated Product 1', 'Cell 0, 0 contents are correct');\n\n  t.expect(Ext.getStore('Products').getAt(0).dirty).toEqual(true);\n\n  next();\n}\n```", "```js\nfunction(){\n  t.click('>>button[text=\"Save\"]');\n  t.cqNotExists('product-ProductForm');\n  t.expect(Ext.getStore('Products').getAt(0).dirty).toEqual(false);\n  t.done();\n}\n```", "```js\nt.chain( { click : \"button[text=Details] => .x-btn-button\", offset : [10, 13] },\nfunction(next) {\n  t.cqExists('product-ProductForm', 'Product Form is displayed');\n  next();\n},\n{\n  click : \"product-ProductForm[title=Product 1] textfield[inputType=text] => .x-form-text\", offset : [127, 10] },\n{\naction : \"type\", text : \" Updated\"\n},\nfunction(next) {\n  t.matchGridCellContent('product-ProductGrid', 0, 0, 'Product 1 Updated', 'Cell 0, 0 contents are correct');\n  t.expect(Ext.getStore('Products').getAt(0).dirty).toEqual(true);\n  next();\n},\n{\n  click : \"button[text=Cancel] => .x-btn-inner\", offset : [16, 1] },\n  function() {\n    t.cqNotExists('product-ProductForm');\n    t.expect(Ext.getStore('Products').getAt(0).dirty).toEqual(false);\n    t.done();\n  }\n);\n```", "```js\nsiesta/bin/webdriver http://localhost/tests/view/product/_ProductGrid/index.html --browser=chrome\n```"]