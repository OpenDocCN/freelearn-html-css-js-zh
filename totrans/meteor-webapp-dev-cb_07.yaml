- en: Chapter 7. Using Client Methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating dynamic graphs with SVG and Ajax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the HTML FileReader to upload images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a coloring book with the Canvas element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web programming, on the client side, has come a long way since the inception
    of HTML. Up until recently, it was necessary to write/use third party **polyfill**
    libraries to do simple things, such as build graphs, read files, and draw on the
    screen. But that cute lil' bucktoothed kid we all knew and disliked has grown
    up! With powerful, easy to use scripting and graphics APIs and objects now supported
    in nearly every browser, web programming is finally ready to be used on its own.
    The recipes in this chapter will go through some of the most popular Web API objects,
    and show you how to implement them inside Meteor.
  prefs: []
  type: TYPE_NORMAL
- en: Creating dynamic graphs with SVG and Ajax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While there are a lot of graphing libraries out there (all of which you can
    use in Meteor, by the way!) it's good to know how to implement fundamental shapes
    inside an HTML page, using **SVG** **templates**. Sometimes implementing a full-fledged
    graphing library is overkill, and having a working knowledge of SVG in your back
    pocket can be very useful. However, this is a Meteor recipe; we not only want
    to see an example of SVG, but we want to see it in action! This recipe will teach
    you how to stream a live data source into MongoDB collections, and then represent
    that dynamic collection graphically, using SVG tags.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will be using a default project installation, with `client`, `server`, and
    `both` folders, to keep the code clean and readable. In a terminal window, navigate
    to where you would like your project to reside, and execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We also want to make use of a few packages, and remove the `autopublish` package,
    so let''s do that now. Run the following commands in the terminal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We're now ready to start creating our SVG streaming data graph.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our project is going to read the comments stream from [http://www.meetup.com/](http://www.meetup.com/),
    which is freely available, and very easy to use. We will record the comments from
    the stream, and display a sum total of comments by state. We will need to create
    the interface, which will display state totals as a vertical bar chart, and will
    also show us the last comment made, along with a picture of the Meetup Group it
    came from.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note**'
  prefs: []
  type: TYPE_NORMAL
- en: We are using the data stream collecting code for demonstration purposes only!
    There is no redundancy checking or hardening built into it. We strongly recommend
    against using this code as-is in anything even resembling a production application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Proceed with the following steps to create dynamic graphs with SVG and Ajax:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will first create the SVG element with the `id` of `stateBars`. We will
    then create a `<rect>` element for each individual state, and adjust the height
    using the `stateStat` template. Inside the `[project root]/client/` folder, create
    a `client.html` file, add the following HTML code, and save the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We want to provide some basic styling on our page, so let''s get that out of
    the way. In the `[project root]/client` folder, create a `style.css` file, and
    add the following style declarations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, let''s set up the `Comments` and `CountryTotals` collections. To keep
    things cleaner, logic-wise, on the client we will use some server-side logic to
    aggregate the incoming comments. We first need to declare our collections for
    use on both the client and the server. In the `[project root]/both/` folder, create
    a new file called `model.js`, and add the following two declarations to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, let''s set up monitoring for the `commentsStream` data, and add a code
    to count the totals. As we removed the `autopublish` package, we need to declare
    our `Comments` publication, and at the same time, we want to update the totals
    for a state whenever any new comments come in. We can accomplish this by using
    the `Meteor.publish()` function and using the `cursor.observeChanges()` method.
    In your `[project root]/server/` folder, create a new file called `svggraph-server.js`,
    and add the following method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also need to declare the `Meteor.publish()` method for our state totals
    by country, so let''s do that as well. Append the following to the end of the
    `svggra``ph-server.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to keep track of the country that we are monitoring, and what the last
    comment and picture from the Meetup Group were. The most straightforward way to
    do this is through `Session` variables, so let''s create a file called `svggraph-client.js`
    in the `[project root]/client/` folder, and add the following three variables
    at the top:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we have specified the country that we will be monitoring, we can add
    our `Meteor.subscribe` statements, which both take the country as a parameter.
    In the `svggraph-client.js` file, add the following statements inside a `T``racker.autorun`
    block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will hook up the data later, but we still need to add the `Template.helpers`
    method for displaying the latest pictures and comments, based on the `Session`
    variables declared in the preceding steps. In the `svggraph-client.js` file, add
    the following code just below the `Tracker.autorun` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In anticipation of incoming data from the client, we need a few `helper` methods,
    to message data and perform *aggregate queries* on our Mongo DB collections. We
    also want a quick way to reset our collections, because the sheer amount of data
    we''re collecting can get messy for a sample application. As such, we will create
    the following server-side methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`addMsg`: This is used for inserting a message into our `Comments` collection.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`totalsByState`: This is used to aggregate the total number of `Comments`,
    by state.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`totalsByCountry`: This is used to aggregate totals, by country.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resetDB`: This is used to reset the `Comments` and `CountryTotals` collections.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Open `svggraph-server.js` and add the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With our server-side helper logic all in place, it''s time to read and parse
    the data stream. In the `svggraph-client.js` file, add the following `connect`,
    `disconnect`, `onopen`, `onclose`, and `onmessage` websocket functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the data stream all ready to go, all that''s left is to add our display
    logic, and flip the switch. In the `svggraph-client.js` file, locate the `Template.cPic.helpers`
    code block, and add the following helper function just below the `curComment`
    event (don''t forget the comma!):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need a few style helpers to properly position our text data, and to let
    us know where the most recent comment was added (to make the things all fancy!).
    Append the following `Template.helpers` code block to the bottom of the `svggraph-client.js`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using the `Template.rendered` method block, we will turn our data stream on
    and update our `lastState` session variable whenever a new comment is posted,
    using a simple `autorun` method. Enter the following code at the bottom of your
    `svggraph-client.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save all changes, and open a browser (if you haven't already) to `http://localhost:3000`.
    Wait just a bit, and you should see the new comments coming in, with state totals
    being updated, as shown in the following screenshot:![How to do it...](img/image00386.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let it run for a bit, so that more states appear. If you let it run long enough,
    you''ll eventually get all 50 states (and maybe even Puerto Rico!). If you would
    like to reset your collection, open your browser console and enter the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned in the recipe introduction, there are two critical pieces to graphing
    dynamic data. The first has to do with rendering SVG objects, and can be found
    mostly in the HTML template code, in the `[project root]/clie` `nt/client.html`
    file. We first used the `{{> cPic}}` template inclusion to reference our `cPic`
    template. The template itself declares our `<svg>` element, then runs a standard
    `{{#each }}` control structure on the `stateStats` collection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We set the width and height of the `<svg>` element directly (note that they
    are *not* CSS style attributes, but are actual element attributes instead), and
    add a unique `id` attribute for CSS styling as well, as shown in the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `stateStat` template, we create a `<rect>` element and set pretty much
    every attribute dynamically:'
  prefs: []
  type: TYPE_NORMAL
- en: '`width`: This is set based on the number of comments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`height`: This is set based on the total number of states.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`y`: This is the vertical position and is set based on position in the data
    collection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fill`: This is the color value which is set to green if it was the last state
    updated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We likewise set the position of the text SVG element to make sure it lines
    up with the corresponding `<rect>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: It's important to understand that SVG elements are not positioned relative to
    other elements inside the same `<svg>` block. This is why we had to set the position
    of each element. Also, some attributes (`width` and `height` for example) can
    be set directly. SVG elements are truly a hybrid between a bonafide DOM element
    and a graphic element.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a great introduction to SVG, you can read the MDN SVG tutorial, found at
    [https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial).
  prefs: []
  type: TYPE_NORMAL
- en: 'The second critical piece surrounds the use of the `WebSocket` HTML5 Web API
    object, found in our `MeetupsStream` function of the `svggraph-client.js` file.
    In this function, we prepare a pretty standard Ajax (actually `WebSocket`) call
    by setting handlers for `.ondisconnect`, `.onopen`, and `.onmessage`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The one we are most interested in is the `.onmessage` handler, where we parse
    the data (which comes in as a string) into an `EJSON` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We then (conditionally) set the `msgPic` variable, which immediately changes
    the image displayed in our `cPic` template. We likewise update `msgComment` to
    change the displayed comment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we make a `Meteor.call` method to the server-side `''addMsg''` method,
    which puts things in motion to update our state totals:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `WebSocket` object also has a good MDN tutorial, found at [https://developer.mozilla.org/en-US/docs/WebSockets](https://developer.mozilla.org/en-US/docs/WebSockets).
  prefs: []
  type: TYPE_NORMAL
- en: A few more odds and ends can be found in the code we used, such as the `meteorhacks:aggregate`
    package, which lets us do summations and groupings on the MongoDB collections
    (official support coming soon!) via the .`aggregate` method, but this recipe was
    meant to focus on the SVG and Ajax (`WebSocket`) aspects.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating dynamic lists* recipe in [Chapter 3](part0036.xhtml#aid-12AK81
    "Chapter 3. Building Great User Interfaces"), *Building Great User Interfaces*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Handling asynchronous events* recipe in [Chapter 11](part0083.xhtml#aid-2F4UM1
    "Chapter 11. Leveraging Advanced Features"), *Leveraging Advanced Features*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the HTML FileReader to upload images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding files via a web application is a pretty standard functionality nowadays.
    That doesn't mean that it's easy to do, programmatically. New browsers support
    Web APIs to make our job easier, and a lot of quality libraries/packages exist
    to help us navigate the file reading/uploading forests, but, being the coding
    lumberjacks that we are, we like to know how to roll our own! In this recipe,
    you will learn how to read and upload image files to a Meteor server.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will be using a default project installation, with `client`, `server`, and
    `both` folders, and with the addition of a special folder for storing images.
    In a terminal window, navigate to where you would like your project to reside,
    and execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Note the dot in the `.images` folder. This is really important because we don't
    want the Meteor application to automatically refresh every time we add an image
    to the server! By creating the images folder as `.images`, we are hiding it from
    the eye-of-Sauron-like monitoring system built into Meteor, because folders starting
    with a period are "invisible" to Linux or Unix.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s also take care of the additional Atmosphere packages we''ll need. In
    the same terminal window, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: We're now ready to get started on building our image upload application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We want to display the images we upload, so we'll be using a layout package
    (`voodoohop:masonrify`) for display purposes. We will also initiate uploads via
    drag and drop, to cut down on UI components. Lastly, we'll be relying on an npm
    module to make the file upload much easier. Let's break this down into a few steps,
    starting with the user interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `[project root]/client` folder, create a file called `imageupload.html`
    and add the following templates and `template` inclusions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We want to add just a little bit of styling, including an "active" state for
    our drop zone, so that we know when we are safe to drop files onto the page. In
    your `[project root]/client/` folder, create a new `style.css` file and enter
    the following CSS style directives:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now want to create an `Images` collection to store references to our uploaded
    image files. To do this, we will be relying on **EJSON**. EJSON is Meteor''s extended
    version of JSON, which allows us to quickly transfer binary files from the client
    to the server. In your `[project root]/both/` folder, create a file called `imgFile.js`
    and add the MongoDB collection by adding the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will now create the `imgFile` object, and declare an EJSON type of `imgFile`
    to be used on both the client and the server. After the preceding `Images` declaration,
    enter the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To properly initialize `imgFile` as an EJSON type, we need to implement the
    `fromJSONValue()`, `prototype()`, and `toJSONValue()` methods. We will then declare
    `imgFile` as an EJSON type using the `EJSON.addType()` method. Add the following
    code just below the `imgFile` function declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The EJSON code used in this recipe is heavily inspired by Chris Mather's Evented
    Mind file upload tutorials. We recommend checking out his site and learning even
    more about file uploading at [https://www.eventedmind.com](https://www.eventedmind.com).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Even though it''s usually cleaner to put client-specific and server-specific
    code in separate files, because the code is related to the `imgFile` code we just
    entered, we are going to put it all in the same file. Just below the `EJSON.addType()`
    function call in the preceding step, add the following `Meteor.isClient` and `Meteor.isServer`
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we will add some `Images` collection `insert` helpers. We will provide
    the ability to add either references (URIs) to images, or to upload files into
    our `.images` folder on the server. To do this, we need some `Meteor.methods`.
    In the `[project root]/server/` folder, create an `imageupload-server.js` file,
    and enter the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now need to establish the code to process/serve images from the `.images`
    folder. We need to circumvent Meteor''s normal asset serving capabilities for
    anything found in the (hidden) `.images` folder. To do this, we will use the `fs`
    npm module, and redirect any content requests accessing the `Images/` folder address
    to the actual `.images` folder found on the server. Just after the `Meteor.methods`
    block entered in the preceding step, add the following `WebApp.connectHandlers.use()`
    function code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our images `display` template is entirely dependent on the `Images` collection,
    so we need to add the appropriate reactive `Template.helpers` function on the
    client side. In your `[project root]/client/` folder, create an `imageupload-client.js`
    file, and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we add pictures we don''t like and want to remove them quickly, the easiest
    way to do that is by double clicking on a picture. So, let''s add the code for
    doing that just below the `Template.helpers` method in the same file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now for the fun stuff. We''re going to add drag and drop visual feedback cues,
    so that whenever we drag anything over our drop zone, the drop zone will provide
    visual feedback to the user. Likewise, once we move away from the zone, or actually
    drop items, the drop zone should return to normal. We will accomplish this through
    a `Session` variable, which modifies the CSS class in the `div.dropzone` element,
    whenever it is changed. At the bottom of the `imageupload-client.js` file, add
    the following `Template.helpers` and `Template.events` code blocks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last task is to evaluate what has been dropped in to our page drop zone.
    If what''s been dropped is simply a URI, we will add it to the `Images` collection
    as is. If it''s a file, we will store it, create a URI to it, and then append
    it to the `Images` collection. In the `imageupload-client.js` file, just before
    the final closing curly bracket inside the `Template.dropzone.events` code block,
    add the following event handler logic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save all your changes and open a browser to `http://localhost:3000`. Find some
    pictures from any web site, and drag and drop them in to the drop zone. As you
    drag and drop the images, the images will appear immediately on your web page,
    as shown in the following screenshot:![How to do it…](img/image00387.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As you drag and drop the dinosaur images in to the drop zone, they will be
    uploaded as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00388.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Similarly, dragging and dropping actual files will just as quickly upload and
    then display images, as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00389.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: As the files are dropped, they are uploaded and saved in the `.images/` folder:![How
    to do it…](img/image00390.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a lot of moving parts to the code we just created, but we can refine
    it down to four areas.
  prefs: []
  type: TYPE_NORMAL
- en: First, we created a new `imgFile` object, complete with the internal functions
    added via the `Object.prototype = {…}` declaration. The functions added here (
    `typeName`, `equals`, `clone`, `toJSONValue` and `fromJSONValue`) are primarily
    used to allow the `imgFile` object to be *serialized* and *deserialized* properly
    on the client and the server. Normally, this isn't needed, as we can just `insert`
    into Mongo Collections directly, but in this case it is needed because we want
    to use the `FileReader` and Node `fs` packages on the client and server respectively
    to directly load and save image files, rather than write them to a collection.
  prefs: []
  type: TYPE_NORMAL
- en: Second, the underscore `_.extend()` method is used on the client side to create
    the `read()` function, and on the server side to create the `save()` function.
    `read` takes the file(s) that were dropped, reads the file into an `ArrayBuffer`,
    and then calls the included `callback`, which uploads the file to the server.
    The `save` function on the server side reads the `ArrayBuffer`, and writes the
    subsequent image file to a specified location on the server (in our case, the
    `.images` folder).
  prefs: []
  type: TYPE_NORMAL
- en: 'Third, we created an `ondropped` event handler, using the `''drop #dropzone''`
    event. This handler determines whether an actual file was dragged and dropped,
    or if it was simply an HTML `<img>` element, which contains a URI link in the
    `src` property. In the case of a file (determined by `files.length`), we call
    the `imgFile.read` command, and pass a callback with an immediate `Meteor.call(''uploadIMG''…)`
    method. In the case of an `<img>` tag, we parse the URI from the `src` attribute,
    and use `Meteor.call(''addURL'')` to update the `Images` collection.'
  prefs: []
  type: TYPE_NORMAL
- en: Fourth, we have our `helper` functions for updating the UI. These include `Template.helpers`
    functions, `Template.events` functions, and the `WebApp.connectedHandlers.use()`
    function, used to properly serve uploaded images without having to update the
    UI each time a file is uploaded. Remember, Meteor will update the UI automatically
    on any file change. This unfortunately includes static files, such as images.
    To work around this, we store our images in a file invisible to Meteor (using
    `.images`). To redirect the traffic to that hidden folder, we implement the `.use()`
    method to listen for any traffic meant to hit the `'/images/'` folder, and redirect
    it accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: As with any complex recipe, there are other parts to the code, but this should
    cover the major aspects of file uploading (the four areas mentioned in the preceding
    section).
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next logical step is to not simply copy the URIs from remote image files,
    but rather to download, save, and serve local copies of those remote images. This
    can also be done using the `FileReader` and Node `fs` libraries, and can be done
    either through the existing client code mentioned in the preceding section, or
    directly on the server, as a type of *cron* job.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on `FileReader`, please see the MDN FileReader article,
    located at [https://developer.mozilla.org/en-US/docs/Web/API/FileReader](https://developer.mozilla.org/en-US/docs/Web/API/FileReader).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using npm packages directly* recipe in [Chapter 8](part0069.xhtml#aid-21PMQ1
    "Chapter 8. Integrating Third-party Libraries"), *Intergrating Third-party Libraries*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating custom EJSON objects* recipe in [Chapter 11](part0083.xhtml#aid-2F4UM1
    "Chapter 11. Leveraging Advanced Features"), *Leveraging Advanced Features*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a coloring book with the Canvas element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are now multiple ways to display graphics on a web page. DOM elements,
    SVG, WebGL, and, perhaps the most user-friendly, the `Canvas` element. Using JavaScript,
    the `Canvas` element provides a flexible graphics area where you can paint, erase,
    color, cut and paste to your heart's content. A good representation of what you
    can do with the `Canvas` element is found in this recipe, where you will learn
    how to build a coloring book app from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Get your crayons! Okay, maybe those won't be needed (don't use them on your
    monitor!) but what we're about to create is the next best thing, so let's get
    the app structure and packages out of the way, so we can start coloring!
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the usual suspects, we will need some specialty folders to make
    the grouping of our code cleaner and more manageable. Open a terminal window,
    navigate to where you would like to create your root project, and execute the
    following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It may not seem like it on the surface, but there's actually a lot to developing
    a coloring book application. You have to worry about user preferences, undo/redo,
    picking colors, erasing, and so on. We will tackle these steps one at a time,
    adding packages and functionality as we go along.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will add user management packages. Meteor has some fantastic out-of-the-box
    functionality for user account management, and we will take advantage of that
    functionality. In a terminal window, navigate to your `[project root]` folder
    and add the following two Meteor libraries by entering the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will want to display these on the screen, so let''s add the necessary UI
    elements and style them appropriately. Create a file called `cb-ui.html` in your
    `[project root]/client/` folder, and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your page will look very spartan at the moment, but just like that, we already
    have accounts and account creation! In a browser, navigate to `http://localhost:3000`
    and you should see the accounts dialog dropdown at the top left of your screen,
    similar to the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00391.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Let''s finish up the visual aspects of our UI by adding a toolbar, where we
    can see color swatches and adjust the size of our brush; and let''s also add our
    `canvas` element, with a background `<div>` to display the picture we want to
    color. In the same `cb-ui.html` file, add the following template inclusions in
    the `body` element block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `picture` template is actually the easiest, so we''ll add the code for
    that first. Add the following template code just below the `</body>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we add the `toolbar` and the `swatch` templates, which use a bit of SVG
    and `Masonry.js` to display our brush and color swatches. Just below the template
    code added in the preceding step, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To get everything all pretty, we need to add some Atmosphere packages, and
    just a bit of CSS styling. In a terminal window, navigate to your `[project root]`
    folder and run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create a file named `cb-style.css` in the `[project root]/client/` folder,
    and add the following style declarations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that the `bgpicture` element has a background image in it, called `'RAWR.GIF'—`You
    can either obtain this picture from the source files for this recipe, or you can
    add your own image to be colored. The image *must* have a transparent background,
    and will look better if it is `800x600` pixels, but in any case, the image you
    want displayed should go into the `[project root]/public/` folder, and you should
    change the `background` property in the preceding step, so that it will display
    properly on the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will need to be able to change brush sizes, change colors, and paint/erase
    on the canvas, and we want to do that no matter what device we are on, so we will
    use the official `Hammer.js` package. We also want to include global shortcut
    keys for undo (*control* + *Z*) and redo (*shift* + *control* + *Z*), so we''ll
    add a handy library that does that! In a terminal window, in your `[project root]`
    folder, enter the following two commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It''s cleaner and easier to use `Hammer.js` events in the `Template.events`
    block, so we want to add the jQuery plugin for the `Hammer.js` file. As Meteor
    piggybacks on jQuery event handlers, if the plugin is added to jQuery, it''s added
    to Meteor! As of this writing, the most reliable way to add the plugin is to manually
    copy the `plugin` script file into your `[project root]/client/scripts/` folder.
    You can either obtain the script by going to [http://hammerjs.github.io/jquery-plugin/](http://hammerjs.github.io/jquery-plugin/)
    and following the instructions there, or by creating a file in your `scripts`
    folder called `jquery.hammer.js`, and adding the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will now add the `Activities`, `Prefs`, and `Swatches` collections. As mentioned
    previously, we will need to keep track of our undo/redo, through recording activities.
    We will also need to keep track of color swatches, user preferences for brush
    size, and so on. To do this, we will declare three MongoDB collections. In your
    `[project root]/both/` folder, create a file called `cb-model.js` and add the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We'll be using these later on, on both the client and on the server, but for
    now we're all done. You can close the `cb-model.js` file and move on to the next
    step.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s add the server-side logic for the preferences and undo/redo history.
    As unbelievable as this may seem, the server-side code for the coloring book is
    very light, compared to the client code. So, we''re going to get it out of the
    way. We need to do several things on the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Initialize swatches and other preferences
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow new swatches to be added, if desired
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Track and recall our painting activity (undo/redo)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Clear everything out, so we can start over
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In your `[project root]/server/` folder, create a file called `cb-server.js`
    and add the following `Meteor.methods` declaration:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now add the `Accounts.onLogin()` event handler in the same file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It''s time to build the main logic that allows us to draw on the screen, using
    the `canvas` element. Create a file called `cb-client.js` in the `[project root]/client/`
    folder and add the following initial default values that control what we are drawing,
    and what our paintbrush color should be:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Because it''s used in multiple places, we want to create a `drawLine` function
    that will draw/erase parts of the screen as needed. Add the following code just
    below the `Session.setDefault` declarations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, add some helper functions that help us clean up the screen, or calculate
    the paint stroke positioning, relative to the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Whenever the user lifts their mouse/stylus/finger off of the screen, we want
    to record what they just drew, so let''s add a snapshot-taking function just below
    our helpers:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When we first log in, or when we go up and down the undo/redo history chain,
    we need to repaint the screen. Add the following helper function just below the
    `addSnapshot` helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Okay, we''re ready for the final touches, which include enabling our toolbar,
    and hooking up all the touch/mouse events to adjust brush sizes, change colors,
    paint and erase. In your `[project root]/client/` folder, create a file named
    `tmpl-toolbar.js`, and add the following interaction event handler code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In that same file, add the `Template.helpers` function for displaying brush
    size, color preference, and so on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s also add the interactivity logic, via the `Template.events` helper block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We have a little bit of logic/event handling for the `swatch` template as well,
    so let''s create a file called `tmpl-swatch.js` in the `[project root]/client/`
    folder, and add the following event listener and event interaction logic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Two more files and we''re done! We have quite a bit of interaction to handle
    in the `picture` template (where our `canvas` element is), so let''s create a
    file called `tmpl-picture.js` in the `[project root]/client/` folder, and add
    our initialization logic, via the `Template.rendered` method block. Add the following
    code to the `tmpl-picture.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On preference changes, or on login/logout of a user, we have to perform some
    reactive logic to clean up or initialize our canvas. Add two `autorun` method
    blocks just below `Template.picture.rendered`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last item of business for the `picture` template is to hook up the drawing
    events themselves. When we start drawing, we need event handlers for `panstart`,
    `panmove`, `panend`, and we also need one to clean everything up when we `doubletap`
    on the page. Add the following `Template.events` method block to the bottom of
    `tmpl-pictur``e.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'All that''s left now is the `keydown` event logic, so that we have proper undo/redo.
    Quickly make a file called `tmpl-body.js` in your `[project root]/client/` folder
    and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Whew! We made it through! Save all of your changes and navigate to your project
    in a browser, via `http://localhost:3000`. After you log in/create an account,
    you should see a nice color palette, a picture of your choice, and a brush size/preview.
    The following features are available:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Double-click on the brush preview to toggle `'eraser'` mode
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click and drag left and right on the brush preview to resize the brush
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Double-click on the page to erase and clear your undo history
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Press *Ctrl* + *Z* or *CMD* + *Z* to undo your strokes
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Press *Shift* + *Ctrl* + *Z* or *Shift* + *CMD* + *Z* to redo your strokes
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Log out and in with another user, to allow multi-user use
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Do note that your undo/redo history chain is preserved, even if you log out.
    Once you log back in, you can go through your paint creations, stroke by stroke.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you are a particularly awesome artist like my daughter, and you have properly
    coded everything, your page will look similar to the following masterpiece:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00392.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Oh boy! That was a lot of code, just to demonstrate how the `canvas` element
    works, wasn't it? Instead of going through all of it step by step, let's go through
    the important pieces, related to the `Canvas` element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside of `tmpl-picture.js`, we initialize our `canvas`. In the `Template.picture.rendered()`
    helper block, we first find our `canvas` element using `this.$(''#picture'')`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'We then get the context (the handle) using the very appropriately-named `getContext()`
    function. We only want the 2D representation and not the 3D, so we pass `''2d''`
    as the argument to `getContext`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Moving on to `cb-client.js`, we have several uses for the context, passed around
    in the global `ctx` variable. In the `drawLine` function, we set the size (`lineWidth`),
    color (`strokeStyle`) and we set the type of stroke (`globalCompositeOperation`)
    according to whether we are erasing (`''destination-out''`) or laying down some
    paint (`''source-over''`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Once all that is set/determined, we tell the canvas that we are starting to
    draw (`beginPath`); we move our stroke (`moveTo`, `lineTo`) and then we clean
    up (`closePath`, `stroke`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'To save database space/transactions, we don''t record every stroke. Instead,
    we wait for a stroke to be finished (the `''panend #picture''` event) and we add
    a snapshot of the entire canvas. We did this inside the `addSnapshot` helper function,
    with a call to the `canvas.toDataURL()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have the `canvas` graphics element represented as data, we simply save
    it to the `Activities` collection, via `Activities.insert()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Retrieving and displaying a saved screenshot from the `Activities` Collection
    is just as easy. The `ctx` handle takes care of the drawing for us. All we have
    to do to get that monkey to dance is give it the data. So, inside `paintActivity`,
    we create a new `Image()` object and we add a `.src` to that `imageObj`. We then
    call `ctx.drawImage()` when the `.onLoad` event callback is triggered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, and most simply, if we want to `wipe` the screen, we simply call `ctx.clearRect()`
    with the dimensions we want cleared (in this case, the `width` and `height` of
    the canvas):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: There's a lot of Meteor magic going on, in coordination, so that we are using
    as little functional programming as possible, but that coordination is covered
    in other recipes.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Actually, there's a whole lot more! We could have added custom color swatches
    (use `Meteor.call('addSwatch','#yourcolorhere')` to do that from the console,
    by the way), or enabled drag and drop, and the storing of other pictures. You
    can use the *Using the HTML FileReader to upload images* recipe found in this
    chapter to do that, if you would like.
  prefs: []
  type: TYPE_NORMAL
- en: 'The core functionality, however, will remain the same: reference a `<canvas>`
    object, grab the context, and draw, baby draw!'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For an informative and thorough tutorial on HTML canvas, please visit: [http://www.html5canvastutorials.com/](http://www.html5canvastutorials.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding Meteor packages* recipe in [Chapter 2](part0028.xhtml#aid-QMFO1
    "Chapter 2. Customizing with Packages"), *Customizing with Packages*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Inserting templates with Spacebars* and *Creating customized global helpers*
    recipes in [Chapter 3](part0036.xhtml#aid-12AK81 "Chapter 3. Building Great User
    Interfaces"), *Building Great User Interfaces*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating and consuming a reactive value* recipe in [Chapter 6](part0058.xhtml#aid-1NA0K1
    "Chapter 6. Mastering Reactivity"), *Mastering Reactivity*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using the HTML FileReader to upload images* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
