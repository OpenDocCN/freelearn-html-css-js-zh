- en: Chapter 2. To-Do List App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be diving headfirst into Ionic and will be using a
    lot of the Ionic CLI tool. We will create our first Ionic application and add
    some basic Ionic features to our app. We will also get to run our app for the
    first time using Ionic and will debug our app in Chrome. We will finish this chapter
    by creating a to-do list application with Ionic. This application will simply
    let us add items to our app and also provide us a way of deleting these items
    or marking them as done.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a new project with Ionic is actually a very pain-free experience with
    the Ionic CLI. There are different ways to create a new Ionic project but the
    easiest and more standard technique is to use the Ionic templates. This is by
    far the easiest way, and it let us use any of the three standard templates provided
    by Ionic.
  prefs: []
  type: TYPE_NORMAL
- en: 'These templates include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The blank template**: This creates a new project with some boilerplate code
    to help you get set up with a blank application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The tabs template**: This is the same as the first but instead of a blank
    application, you get an application with a tabbed design'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The side menu template**: This creates a new application with a side menu
    design and some boilerplate'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will be using each of these in this book at some point of time. For now,
    we are going to start with the first and create a brand new Ionic project using
    the blank template. Before we move on, let''s have a look at the command that
    the Ionic CLI uses to create a new application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `create` command for the Ionic CLI allows us to provide two parameters,
    the first being the name we want our app to be called. This first parameter will
    also be the name given to the folder that gets generated with our files. The second
    parameter is the template name. As discussed earlier, there are three template
    styles. You can either pass in blank, tabs, or side menu as a parameter to represent
    the type of template you want your app to be generated with.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our to-do list app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to create our to-do list application. We are going to use the
    blank template to do this. We will be calling our app `todo` for the sake of consistency.
    To create the `todo` app, go ahead and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will create a new blank Ionic application called `todo`. When
    this command has finished running, enter the project of your application via the
    command line by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: To further explore our newly created `todo` app, open the `todo` app folder
    in your favorite IDE.
  prefs: []
  type: TYPE_NORMAL
- en: The Ionic workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you create a new Ionic project, there are a couple of folders and files
    that come as stock as part of the generated project. Your directory should look
    similar to what is seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Ionic workflow](img/00009.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The structure you see is pretty much the same as in every Cordova project, with
    the exception of a few files and folders. For example, there is a `scss` folder.
    This contains a file that lets us customize the look and feel of our application
    and will be covered in detail in later chapters. There are also the `platforms`
    and `plugins` folder. The `platforms` folder, in most cases is auto-generated,
    but we will not be covering them in this book so you can ignore them for the time
    being.
  prefs: []
  type: TYPE_NORMAL
- en: You will also notice that in your `www/lib` folder, there is a folder called
    `ionic` that contains all the required files to run Ionic. There are `css`, `fonts`,
    `js`, and `scss` folder.
  prefs: []
  type: TYPE_NORMAL
- en: '`css`: This folder contains all the default CSS that come with an Ionic app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fonts`: Ionic comes with its own font and Icon library called **Ionicons**.
    This Ionicons library contains hundreds of icons, which are all available for
    use in your app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`js`: This contains all the code for the core Ionic library. Since Ionic is
    built with Angular, there is a version of Angular here with a bunch of other files
    that make up the Ionic framework.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scss`: This is the folder that contains SASS files that are used to build
    the beautiful Ionic framework CSS styles. Everything here can be overwritten easily
    in order to make your app feel a bit more customized and we will discuss how you
    can do this in [Chapter 7](part0031_split_000.html#TI1E1-798adc86542b445d8a1bb648e10b6714
    "Chapter 7. Customizing the App"), *Customizing the App*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you have a look at the root folder, you will see a lot of other files that
    are generated for you as part of the Ionic workflow. These files are not overly
    important now, but let''s have a look at the more important ones in the following
    list:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bower.json`: This is the file that contains some of the dependencies acquired
    from the bower package manager. The browser dependencies are resolved in the `lib`
    folder as specified in the `bowerrc` file. This is a great place to specify other
    third-party dependencies that your project might need.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config.xml`: This is the standard `config` file that comes along with any
    Phonegap/Cordova project. This is where you request permissions for device features
    and also specify universal and platform-specific configurations for you app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gulpfile`: Ionic uses the Gulp build tool, and this file contains some code
    that is provided by Ionic that enables you do some amazing things. We will use
    some features of this file in [Chapter 7](part0031_split_000.html#TI1E1-798adc86542b445d8a1bb648e10b6714
    "Chapter 7. Customizing the App"), *Customizing the App*, when we do some customization
    tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ionic.project`: This is a file specific for Ionic services. It is the file
    used by the Ionic CLI and the `ionic.IO` services as a place to specify some of
    your Ionic-specific configuration. We will use some of the features of this file
    when we use the Ionic view app in [Chapter 3](part0022_split_000.html#KVCC2-798adc86542b445d8a1bb648e10b6714
    "Chapter 3. Running Ionic Apps"), *Running Ionic Apps*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`package.json`: This is a file used by node to specify some node dependencies.
    When you create a project with the Ionic CLI, Ionic uses both the Node and Bower
    Package Manager to resolve some of your dependencies. If you require a node module
    when you are developing Ionic apps, you can specify these dependencies here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These files are some of the more important files that are by default a part
    of a project created with the Ionic CLI. At the moment you do not need to worry
    too much about them, but it's always good to know that they exist and have an
    idea about what they actually represent.
  prefs: []
  type: TYPE_NORMAL
- en: In-depth look at our project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we go ahead and do any development, it is imperative that we understand
    how to actually add features to our app and where to do this. There are two files
    in particular that we are going to pay great attention to:'
  prefs: []
  type: TYPE_NORMAL
- en: '`index.html`: This file is the entry point of your application in terms of
    what you actually see. It is a normal HTML page with some boilerplate code based
    on the blank Ionic template. If you pay close attention, you will see some custom
    HTML tags such as `<ion-pane>`, `<ion-header>`, and `<ion-content>`. These custom
    tags are actually Ionic components that have been built with Angular, and for
    now, you need not worry about what they do as we will be discussing this shortly.
    A closer look at the `<body>` tag will also reveal the attribute `ng-app=starter`.
    This is a custom attribute provided by Angular, which we use to provide the name
    of the main module of an angular application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app.js`: This file lives in the `js` folder, and this is the file that contains
    the main module of our application. In Angular, modules provide us a way to create
    isolated chunks of code that our application uses. The main module is the module
    that actually gets loaded to our application when it starts. Think of the main
    module as the entry point of our application. If you take a closer look at the
    `app.js` file, you will see how we create the module and specify its name as starter:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You will also see that it takes a second parameter, an array which contains
    one string called `ionic`. In Angular, this array is used to provide the names
    of any module that our application depends on. So, just like we specified the
    name of our main module, starter to the `ng-app` attribute in the `index.html`
    file, we specify a list of modules that our main module relies on, in this case,
    `ionic`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You would have also noticed a `run` function in the `app.js`. This function
    is the function that fires as soon as our app is ready and all our dependent Angular
    modules and factories have loaded. The `run` function is a great place to do little
    pieces of tidying up that you want done as soon as your application begins.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: These two files are the ones you need to worry about as they are the two main
    files we will be working with in order to build our to-do list application.
  prefs: []
  type: TYPE_NORMAL
- en: Envisioning our app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is always good to do a small bit of wireframing before you build any application.
    This enables you to understand how the app will work and how it will probably
    look just before you actually begin to code the app. The following screenshot
    is a rough wireframe of what our `todo` app will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Envisioning our app](img/00010.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Our `todo` application allows a user to simply enter any task they want added
    to their to-do list. Think of this app as a mini diary where you put in things
    you want done later. In this section, we will only be building the very basic
    feature of our `todo` app, and we will only be allowing the user to add new items.
    In later chapters, as we learn more about Ionic, we will be adding more complex
    features like using a complex list and also letting the user edit, remove, and
    even archive to-do list items.
  prefs: []
  type: TYPE_NORMAL
- en: Building our todo app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get started with building our `todo` app, we will need to further break down
    what we want to achieve into smaller steps. The first thing we need to do is to
    create the UI for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the UI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first thing we are going to do to get started with building our `todo`
    application is building the user interface. We are going to build the input form
    and the button that will add the `todo` item currently typed in the input. After
    we have written the code for this, we will add the markup for the list where we
    want any entered `todo` item to be displayed. I have already compiled this markup
    for you in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding code, you can see the skin of our user interface ready. We
    have an input that receives what we want entered into our to-do list. We have
    an HTML unordered list that will be placed where our to-do list items will be
    situated. You can see some classes on some of our elements. These are actually
    classes from the auto-generated Ionic CSS styles that come as part of any Ionic
    project.
  prefs: []
  type: TYPE_NORMAL
- en: The code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Since we have written the user interface for our application, we will also
    need to write the Angular code to enable it to work. What we need to do is to
    create an array that will hold the list of `todo` items and also create a function
    that will add a `todo` item into this list anytime we click the **Add** button
    we created earlier. We will achieve this all by creating an Angular controller
    in our main module and insert all this logic into it. I have already written this
    code and you can copy it and get it into your project from the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding code, you can see that we have created a controller called
    the `TodoController`. Within this `TodoController`, we have a `todos` array. This
    is the array that will hold all our `todo` items. We also have a `todoModel` object
    that is an empty object that will hold our entered `todo` item. Lastly, we have
    a function called `addTodo` that adds the current value in our `todoModel` object
    to our `todos` array and then sets the value of our current `todoModel` object
    to an empty string so we can type from scratch again.
  prefs: []
  type: TYPE_NORMAL
- en: Wiring things up
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we have created our user interface boilerplate code and also written
    our code for it, it is time to wire the two together and dictate what gets to
    appear where:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If you have a look at the preceding code, you will see that the UI code now
    looks a bit different. Firstly, we have associated our `<ion-content>` element
    with our `TodoController`. This is done in order to create a binding context,
    meaning any variable within the `TodoController` is now available for data binding
    to all its descendants. Secondly, you will also notice that our input now has
    a new `ng-model` attribute that binds to our `todoModel` variable from our `TodoController`.
    This is binding the value of the input tag at any point in time to the `todoModel`
    object. Thirdly, we have set an `ng-click` attribute on the **add todo** button
    to ensure that any time it is clicked, a new `todo` item is added to our array.
    Finally, we have done an `ng-repeat` within the UL element to specify that we
    want all children of the `todo` array to be rendered with the LI.
  prefs: []
  type: TYPE_NORMAL
- en: With this, we have successfully completed the `todo` application and all that
    is left is to see it in action. We will be learning how to run this application
    we have just built-in different ways in the next chapter, so do follow up to learn
    how to get your app to run and test it live.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we got to create our very first Ionic application using the
    Ionic blank application template. We had a look at what the Ionic workflow looks
    like and also got to see some of the files that make up the workflow. We then
    dived in and discussed about how we intended to build our to-do list application.
    We further went ahead and actually implemented the UI of our to-do list app based
    on a wireframe. We wrote some Angular code and wired it up to the user interface
    we created.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn different ways to run and test our application
    for the very first time with the Ionic CLI.
  prefs: []
  type: TYPE_NORMAL
