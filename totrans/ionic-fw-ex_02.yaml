- en: Chapter 2. To-Do List App
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 章。待办事项应用
- en: In this chapter, we will be diving headfirst into Ionic and will be using a
    lot of the Ionic CLI tool. We will create our first Ionic application and add
    some basic Ionic features to our app. We will also get to run our app for the
    first time using Ionic and will debug our app in Chrome. We will finish this chapter
    by creating a to-do list application with Ionic. This application will simply
    let us add items to our app and also provide us a way of deleting these items
    or marking them as done.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨 Ionic，并会使用大量的 Ionic CLI 工具。我们将创建我们的第一个 Ionic 应用程序，并添加一些基本的 Ionic
    功能到我们的应用程序中。我们将使用 Ionic 首次运行我们的应用程序，并在 Chrome 中调试我们的应用程序。我们将通过创建一个待办事项应用程序来结束本章。此应用程序将简单地让我们添加项目到我们的应用程序中，并提供一种删除这些项目或标记它们为完成的方法。
- en: Creating our first application
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的第一个应用程序
- en: Creating a new project with Ionic is actually a very pain-free experience with
    the Ionic CLI. There are different ways to create a new Ionic project but the
    easiest and more standard technique is to use the Ionic templates. This is by
    far the easiest way, and it let us use any of the three standard templates provided
    by Ionic.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Ionic 创建新项目实际上是一个非常轻松的过程，因为有了 Ionic CLI。创建新的 Ionic 项目有多种方法，但最简单和最标准的技巧是使用
    Ionic 模板。这是迄今为止最简单的方法，它允许我们使用 Ionic 提供的三个标准模板中的任何一个。
- en: 'These templates include:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模板包括：
- en: '**The blank template**: This creates a new project with some boilerplate code
    to help you get set up with a blank application'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**空白模板**：这会创建一个新的项目，其中包含一些样板代码，以帮助您设置空白应用程序'
- en: '**The tabs template**: This is the same as the first but instead of a blank
    application, you get an application with a tabbed design'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标签模板**：这与第一个模板相同，但您将获得一个具有标签设计的应用程序，而不是空白应用程序'
- en: '**The side menu template**: This creates a new application with a side menu
    design and some boilerplate'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**侧边菜单模板**：这会创建一个具有侧边菜单设计和一些样板代码的新应用程序'
- en: 'We will be using each of these in this book at some point of time. For now,
    we are going to start with the first and create a brand new Ionic project using
    the blank template. Before we move on, let''s have a look at the command that
    the Ionic CLI uses to create a new application:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书的某个时候使用这些工具。现在，我们将从第一个开始，使用空白模板创建一个全新的 Ionic 项目。在我们继续之前，让我们看看 Ionic CLI
    用于创建新应用程序的命令：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `create` command for the Ionic CLI allows us to provide two parameters,
    the first being the name we want our app to be called. This first parameter will
    also be the name given to the folder that gets generated with our files. The second
    parameter is the template name. As discussed earlier, there are three template
    styles. You can either pass in blank, tabs, or side menu as a parameter to represent
    the type of template you want your app to be generated with.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic CLI 的 `create` 命令允许我们提供两个参数，第一个是我们希望应用程序被称作的名称。这个第一个参数也将是生成文件时创建的文件夹的名称。第二个参数是模板名称。如前所述，有三种模板样式。您可以通过传递
    blank、tabs 或 side menu 作为参数来表示您想要生成的应用程序模板类型。
- en: Creating our to-do list app
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建我们的待办事项应用程序
- en: 'We are going to create our to-do list application. We are going to use the
    blank template to do this. We will be calling our app `todo` for the sake of consistency.
    To create the `todo` app, go ahead and run the following command:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建我们的待办事项应用程序。我们将使用空白模板来完成这个任务。为了保持一致性，我们将把我们的应用程序称为 `todo`。要创建 `todo` 应用程序，请运行以下命令：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This command will create a new blank Ionic application called `todo`. When
    this command has finished running, enter the project of your application via the
    command line by running the following command:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将创建一个名为 `todo` 的新空白 Ionic 应用程序。当此命令运行完成后，通过在命令行中运行以下命令进入您的应用程序项目：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To further explore our newly created `todo` app, open the `todo` app folder
    in your favorite IDE.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要进一步探索我们新创建的 `todo` 应用程序，请打开您最喜欢的 IDE 中的 `todo` 应用程序文件夹。
- en: The Ionic workflow
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ionic 工作流程
- en: 'When you create a new Ionic project, there are a couple of folders and files
    that come as stock as part of the generated project. Your directory should look
    similar to what is seen in the following screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当您创建一个新的 Ionic 项目时，有几个文件夹和文件作为生成项目的一部分提供。您的目录应类似于以下截图所示：
- en: '![The Ionic workflow](img/00009.jpeg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![Ionic 工作流程](img/00009.jpeg)'
- en: The structure you see is pretty much the same as in every Cordova project, with
    the exception of a few files and folders. For example, there is a `scss` folder.
    This contains a file that lets us customize the look and feel of our application
    and will be covered in detail in later chapters. There are also the `platforms`
    and `plugins` folder. The `platforms` folder, in most cases is auto-generated,
    but we will not be covering them in this book so you can ignore them for the time
    being.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你看到的结构基本上与每个 Cordova 项目相同，除了几个文件和文件夹。例如，有一个 `scss` 文件夹。这个文件夹包含一个文件，允许我们自定义应用的外观和感觉，将在后面的章节中详细说明。还有
    `platforms` 和 `plugins` 文件夹。在大多数情况下，`platforms` 文件夹是自动生成的，但在这本书中我们不会涉及它们，所以你可以暂时忽略它们。
- en: You will also notice that in your `www/lib` folder, there is a folder called
    `ionic` that contains all the required files to run Ionic. There are `css`, `fonts`,
    `js`, and `scss` folder.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会注意到在你的 `www/lib` 文件夹中，有一个名为 `ionic` 的文件夹，它包含运行 Ionic 所需的所有文件。这里有 `css`、`fonts`、`js`
    和 `scss` 文件夹。
- en: '`css`: This folder contains all the default CSS that come with an Ionic app.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`css`: 这个文件夹包含一个 Ionic 应用附带的所有默认 CSS。'
- en: '`fonts`: Ionic comes with its own font and Icon library called **Ionicons**.
    This Ionicons library contains hundreds of icons, which are all available for
    use in your app.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fonts`: Ionic 自带自己的字体和图标库，称为 **Ionicons**。这个 Ionicons 库包含数百个图标，所有这些图标都可以在你的应用中使用。'
- en: '`js`: This contains all the code for the core Ionic library. Since Ionic is
    built with Angular, there is a version of Angular here with a bunch of other files
    that make up the Ionic framework.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`js`: 这包含了核心 Ionic 库的所有代码。由于 Ionic 是用 Angular 构建的，这里有一个 Angular 版本和一些其他文件，这些文件共同构成了
    Ionic 框架。'
- en: '`scss`: This is the folder that contains SASS files that are used to build
    the beautiful Ionic framework CSS styles. Everything here can be overwritten easily
    in order to make your app feel a bit more customized and we will discuss how you
    can do this in [Chapter 7](part0031_split_000.html#TI1E1-798adc86542b445d8a1bb648e10b6714
    "Chapter 7. Customizing the App"), *Customizing the App*.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scss`: 这是一个包含用于构建美丽的 Ionic 框架 CSS 样式的 SASS 文件的文件夹。这里的一切都可以轻松覆盖，以使你的应用感觉更加定制化，我们将在
    [第 7 章](part0031_split_000.html#TI1E1-798adc86542b445d8a1bb648e10b6714 "第 7 章。自定义应用")，*自定义应用*
    中讨论你如何做到这一点。'
- en: 'If you have a look at the root folder, you will see a lot of other files that
    are generated for you as part of the Ionic workflow. These files are not overly
    important now, but let''s have a look at the more important ones in the following
    list:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看根文件夹，你会看到很多其他文件，这些文件是作为 Ionic 工作流程的一部分为你生成的。这些文件现在并不特别重要，但让我们在下面的列表中查看一些更重要的文件：
- en: '`bower.json`: This is the file that contains some of the dependencies acquired
    from the bower package manager. The browser dependencies are resolved in the `lib`
    folder as specified in the `bowerrc` file. This is a great place to specify other
    third-party dependencies that your project might need.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bower.json`: 这是包含从 bower 包管理器获取的一些依赖项的文件。浏览器依赖项在 `bowerrc` 文件中指定的 `lib` 文件夹中解析。这是一个指定你项目可能需要的其他第三方依赖项的好地方。'
- en: '`config.xml`: This is the standard `config` file that comes along with any
    Phonegap/Cordova project. This is where you request permissions for device features
    and also specify universal and platform-specific configurations for you app.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.xml`: 这是由任何 Phonegap/Cordova 项目附带的标准 `config` 文件。在这里，你可以请求设备功能的权限，并指定你应用的通用和平台特定配置。'
- en: '`gulpfile`: Ionic uses the Gulp build tool, and this file contains some code
    that is provided by Ionic that enables you do some amazing things. We will use
    some features of this file in [Chapter 7](part0031_split_000.html#TI1E1-798adc86542b445d8a1bb648e10b6714
    "Chapter 7. Customizing the App"), *Customizing the App*, when we do some customization
    tasks.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gulpfile`: Ionic 使用 Gulp 构建工具，这个文件包含一些由 Ionic 提供的代码，可以让你做一些令人惊叹的事情。我们将在 [第
    7 章](part0031_split_000.html#TI1E1-798adc86542b445d8a1bb648e10b6714 "第 7 章。自定义应用")，*自定义应用*
    中使用这个文件的一些功能，当我们进行一些自定义任务时。'
- en: '`ionic.project`: This is a file specific for Ionic services. It is the file
    used by the Ionic CLI and the `ionic.IO` services as a place to specify some of
    your Ionic-specific configuration. We will use some of the features of this file
    when we use the Ionic view app in [Chapter 3](part0022_split_000.html#KVCC2-798adc86542b445d8a1bb648e10b6714
    "Chapter 3. Running Ionic Apps"), *Running Ionic Apps*.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ionic.project`: 这是一个专门用于 Ionic 服务的文件。它是 Ionic CLI 和 `ionic.IO` 服务用来指定一些特定于
    Ionic 的配置的文件。当我们使用 [第 3 章](part0022_split_000.html#KVCC2-798adc86542b445d8a1bb648e10b6714
    "第 3 章。运行 Ionic 应用") 中的 Ionic view 应用时，我们会使用这个文件的一些功能，即 *运行 Ionic 应用*。'
- en: '`package.json`: This is a file used by node to specify some node dependencies.
    When you create a project with the Ionic CLI, Ionic uses both the Node and Bower
    Package Manager to resolve some of your dependencies. If you require a node module
    when you are developing Ionic apps, you can specify these dependencies here.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.json`: 这是一个由 node 用于指定一些 node 依赖的文件。当您使用 Ionic CLI 创建项目时，Ionic 会使用
    Node 和 Bower 包管理器来解决一些依赖项。如果您在开发 Ionic 应用时需要 node 模块，您可以在该处指定这些依赖项。'
- en: These files are some of the more important files that are by default a part
    of a project created with the Ionic CLI. At the moment you do not need to worry
    too much about them, but it's always good to know that they exist and have an
    idea about what they actually represent.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件是默认包含在用 Ionic CLI 创建的项目中的某些较为重要的文件。目前您不需要过分担心它们，但了解它们的存在以及它们代表的内容总是一个好主意。
- en: In-depth look at our project
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对我们的项目的深入了解
- en: 'Before we go ahead and do any development, it is imperative that we understand
    how to actually add features to our app and where to do this. There are two files
    in particular that we are going to pay great attention to:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始任何开发工作之前，了解如何实际向我们的应用添加功能和在哪里进行这些操作是至关重要的。我们将特别关注两个文件：
- en: '`index.html`: This file is the entry point of your application in terms of
    what you actually see. It is a normal HTML page with some boilerplate code based
    on the blank Ionic template. If you pay close attention, you will see some custom
    HTML tags such as `<ion-pane>`, `<ion-header>`, and `<ion-content>`. These custom
    tags are actually Ionic components that have been built with Angular, and for
    now, you need not worry about what they do as we will be discussing this shortly.
    A closer look at the `<body>` tag will also reveal the attribute `ng-app=starter`.
    This is a custom attribute provided by Angular, which we use to provide the name
    of the main module of an angular application.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.html`: 这个文件是您应用的实际入口点。它是一个基于空白 Ionic 模板的正常 HTML 页面，包含一些样板代码。如果您仔细观察，您会看到一些自定义
    HTML 标签，如 `<ion-pane>`、`<ion-header>` 和 `<ion-content>`。这些自定义标签实际上是使用 Angular
    构建的 Ionic 组件，目前您不需要担心它们的功能，因为我们很快就会讨论这个问题。更仔细地查看 `<body>` 标签，您也会发现属性 `ng-app=starter`。这是
    Angular 提供的一个自定义属性，我们用它来提供 Angular 应用的主模块名称。'
- en: '`app.js`: This file lives in the `js` folder, and this is the file that contains
    the main module of our application. In Angular, modules provide us a way to create
    isolated chunks of code that our application uses. The main module is the module
    that actually gets loaded to our application when it starts. Think of the main
    module as the entry point of our application. If you take a closer look at the
    `app.js` file, you will see how we create the module and specify its name as starter:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app.js`: 这个文件位于 `js` 文件夹中，它是包含我们应用主模块的文件。在 Angular 中，模块为我们提供了一种创建应用使用的隔离代码块的方法。主模块是当应用启动时实际加载到应用中的模块。将主模块视为应用的入口点。如果您仔细查看
    `app.js` 文件，您会看到我们如何创建模块并将其名称指定为 starter：'
- en: '[PRE3]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以从 [http://www.packtpub.com](http://www.packtpub.com) 下载您购买的所有 Packt 出版物的示例代码文件。如果您在其他地方购买了这本书，您可以访问
    [http://www.packtpub.com/support](http://www.packtpub.com/support) 并注册，以便将文件直接通过电子邮件发送给您。
- en: You will also see that it takes a second parameter, an array which contains
    one string called `ionic`. In Angular, this array is used to provide the names
    of any module that our application depends on. So, just like we specified the
    name of our main module, starter to the `ng-app` attribute in the `index.html`
    file, we specify a list of modules that our main module relies on, in this case,
    `ionic`.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你还会看到它接受一个第二个参数，一个包含一个名为 `ionic` 的字符串的数组。在 Angular 中，这个数组用于提供应用程序依赖的任何模块的名称。所以，就像我们在
    `index.html` 文件中将我们的主模块名称 `starter` 指定给 `ng-app` 属性一样，我们指定了一个列表，其中包含我们的主模块所依赖的模块，在这种情况下，是
    `ionic`。
- en: You would have also noticed a `run` function in the `app.js`. This function
    is the function that fires as soon as our app is ready and all our dependent Angular
    modules and factories have loaded. The `run` function is a great place to do little
    pieces of tidying up that you want done as soon as your application begins.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你也会注意到 `app.js` 中有一个 `run` 函数。这个函数是在我们的应用程序准备好并且所有依赖的 Angular 模块和工厂都已加载时触发的函数。`run`
    函数是一个很好的地方，可以在应用程序开始时立即完成一些整理工作。
- en: These two files are the ones you need to worry about as they are the two main
    files we will be working with in order to build our to-do list application.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个文件是你需要关注的，因为它们是我们构建待办事项列表应用程序时将主要使用的两个文件。
- en: Envisioning our app
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 想象我们的应用程序
- en: 'It is always good to do a small bit of wireframing before you build any application.
    This enables you to understand how the app will work and how it will probably
    look just before you actually begin to code the app. The following screenshot
    is a rough wireframe of what our `todo` app will look like:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建任何应用程序之前进行一点简单的线框设计总是好的。这使你能够在实际开始编码应用程序之前了解应用程序的工作方式和外观。以下截图是我们 `todo` 应用程序的大致线框：
- en: '![Envisioning our app](img/00010.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![想象我们的应用程序](img/00010.jpeg)'
- en: Our `todo` application allows a user to simply enter any task they want added
    to their to-do list. Think of this app as a mini diary where you put in things
    you want done later. In this section, we will only be building the very basic
    feature of our `todo` app, and we will only be allowing the user to add new items.
    In later chapters, as we learn more about Ionic, we will be adding more complex
    features like using a complex list and also letting the user edit, remove, and
    even archive to-do list items.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `todo` 应用程序允许用户简单地将他们想要添加到待办事项列表中的任何任务输入进去。想象这个应用就像一个迷你日记，你可以把想要稍后完成的任务记录进去。在本节中，我们只将构建我们
    `todo` 应用程序的最基本功能，并且只允许用户添加新项目。在后面的章节中，随着我们对 Ionic 的了解加深，我们将添加更多复杂的功能，比如使用复杂列表，并允许用户编辑、删除，甚至存档待办事项列表项。
- en: Building our todo app
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建我们的 todo 应用程序
- en: To get started with building our `todo` app, we will need to further break down
    what we want to achieve into smaller steps. The first thing we need to do is to
    create the UI for our application.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始构建我们的 `todo` 应用程序，我们需要将我们想要实现的目标进一步分解成更小的步骤。我们首先需要做的是创建我们应用程序的界面。
- en: Creating the UI
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建用户界面
- en: 'The first thing we are going to do to get started with building our `todo`
    application is building the user interface. We are going to build the input form
    and the button that will add the `todo` item currently typed in the input. After
    we have written the code for this, we will add the markup for the list where we
    want any entered `todo` item to be displayed. I have already compiled this markup
    for you in the following code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始构建我们的 `todo` 应用程序，我们首先要构建用户界面。我们将构建输入表单和添加当前输入框中 `todo` 项的按钮。在编写完这段代码后，我们将添加我们想要显示任何输入
    `todo` 项的列表的标记。以下代码中我已经为您编译了这些标记：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: From the preceding code, you can see the skin of our user interface ready. We
    have an input that receives what we want entered into our to-do list. We have
    an HTML unordered list that will be placed where our to-do list items will be
    situated. You can see some classes on some of our elements. These are actually
    classes from the auto-generated Ionic CSS styles that come as part of any Ionic
    project.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码中，你可以看到我们用户界面的外观已经准备好了。我们有一个接收我们想要输入到待办事项列表中的内容的输入框。我们有一个 HTML 无序列表，它将被放置在待办事项列表项所在的位置。你可以在我们的某些元素上看到一些类。这些实际上是来自自动生成的
    Ionic CSS 样式的类，这些样式是任何 Ionic 项目的一部分。
- en: The code
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代码
- en: 'Since we have written the user interface for our application, we will also
    need to write the Angular code to enable it to work. What we need to do is to
    create an array that will hold the list of `todo` items and also create a function
    that will add a `todo` item into this list anytime we click the **Add** button
    we created earlier. We will achieve this all by creating an Angular controller
    in our main module and insert all this logic into it. I have already written this
    code and you can copy it and get it into your project from the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经为我们的应用程序编写了用户界面，我们还需要编写Angular代码来使其能够工作。我们需要做的是创建一个数组来保存待办事项列表，并创建一个函数，以便在点击我们之前创建的**添加**按钮时将待办事项项添加到这个列表中。我们将通过在主模块中创建一个Angular控制器并插入所有这些逻辑来实现这一点。我已经编写了这段代码，您可以从以下链接复制它并将其添加到您的项目中：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: From the preceding code, you can see that we have created a controller called
    the `TodoController`. Within this `TodoController`, we have a `todos` array. This
    is the array that will hold all our `todo` items. We also have a `todoModel` object
    that is an empty object that will hold our entered `todo` item. Lastly, we have
    a function called `addTodo` that adds the current value in our `todoModel` object
    to our `todos` array and then sets the value of our current `todoModel` object
    to an empty string so we can type from scratch again.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码中，您可以看到我们创建了一个名为`TodoController`的控制器。在这个`TodoController`中，我们有一个`todos`数组。这个数组将保存所有的`todo`项。我们还有一个`todoModel`对象，它是一个空对象，将保存我们输入的`todo`项。最后，我们有一个名为`addTodo`的函数，它将`todoModel`对象中的当前值添加到`todos`数组中，然后将当前`todoModel`对象的值设置为空字符串，以便我们可以从头开始输入。
- en: Wiring things up
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接组件
- en: 'Now that we have created our user interface boilerplate code and also written
    our code for it, it is time to wire the two together and dictate what gets to
    appear where:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了用户界面的模板代码，并且为它编写了代码，现在是时候将它们连接起来并指定它们应该出现在哪里：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you have a look at the preceding code, you will see that the UI code now
    looks a bit different. Firstly, we have associated our `<ion-content>` element
    with our `TodoController`. This is done in order to create a binding context,
    meaning any variable within the `TodoController` is now available for data binding
    to all its descendants. Secondly, you will also notice that our input now has
    a new `ng-model` attribute that binds to our `todoModel` variable from our `TodoController`.
    This is binding the value of the input tag at any point in time to the `todoModel`
    object. Thirdly, we have set an `ng-click` attribute on the **add todo** button
    to ensure that any time it is clicked, a new `todo` item is added to our array.
    Finally, we have done an `ng-repeat` within the UL element to specify that we
    want all children of the `todo` array to be rendered with the LI.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看前面的代码，您会看到UI代码现在看起来有些不同。首先，我们已经将我们的`<ion-content>`元素与`TodoController`关联起来。这样做是为了创建一个绑定上下文，这意味着`TodoController`中的任何变量现在都可以用于与其所有后代的数据绑定。其次，您也会注意到我们的输入现在有一个新的`ng-model`属性，它绑定到`TodoController`中的`todoModel`变量。这是将任何时间点的输入标签的值绑定到`todoModel`对象。第三，我们在**添加todo**按钮上设置了一个`ng-click`属性，以确保每次点击时都会向我们的数组中添加一个新的`todo`项。最后，我们在UL元素内进行了`ng-repeat`操作，以指定我们想要将`todo`数组的所有子项渲染为LI。
- en: With this, we have successfully completed the `todo` application and all that
    is left is to see it in action. We will be learning how to run this application
    we have just built-in different ways in the next chapter, so do follow up to learn
    how to get your app to run and test it live.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们已经成功完成了`todo`应用的开发，剩下的就是看到它实际运行的效果。在下一章中，我们将学习如何以不同的方式运行我们刚刚构建的应用程序，所以请继续学习如何运行和实时测试您的应用程序。
- en: Summary
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we got to create our very first Ionic application using the
    Ionic blank application template. We had a look at what the Ionic workflow looks
    like and also got to see some of the files that make up the workflow. We then
    dived in and discussed about how we intended to build our to-do list application.
    We further went ahead and actually implemented the UI of our to-do list app based
    on a wireframe. We wrote some Angular code and wired it up to the user interface
    we created.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用Ionic空白应用程序模板创建了我们的第一个Ionic应用程序。我们查看了一下Ionic的工作流程，并看到了组成工作流程的一些文件。然后我们深入讨论了我们打算如何构建我们的待办事项列表应用程序。我们进一步进行了实际操作，根据线框实现了待办事项列表应用程序的UI。我们编写了一些Angular代码，并将其连接到我们创建的用户界面。
- en: In the next chapter, we will learn different ways to run and test our application
    for the very first time with the Ionic CLI.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习使用 Ionic CLI 首次运行和测试我们的应用程序的不同方法。
