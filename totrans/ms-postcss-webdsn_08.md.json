["```js\nvar postcss = require('postcss');\n\nmodule.exports = postcss.plugin('myplugin', function(options) {\n\n  return function (css) {\n    options = options || {};\n\n    // Processing code will be added here\n  }\n});\n```", "```js\n{\n  \"name\": \"PLUGIN_NAME\",\n  \"version\": \"0.0.0\",\n  \"description\": \"PostCSS plugin PLUGIN_DESC\",\n  \"keywords\": [\n    \"postcss\",\n    \"css\",\n    \"postcss-plugin\"KEYWORDS\n  ],\n```", "```js\n  \"author\": \"AUTHOR_NAME <AUTHOR_EMAIL>\",\n  \"license\": \"MIT\",\n  \"repository\": \"GITHUB_NAME/PLUGIN_NAME\",\n  \"bugs\": {\n    \"url\": \"https://github.com/GITHUB_NAME/PLUGIN_NAME/issues\"\n},\n\"homepage\": \"https://github.com/GITHUB_NAME/PLUGIN_NAME\",\n```", "```js\n  \"dependencies\": {\n    \"postcss\": \"^5.0.10\"\n  },\n  \"devDependencies\": {\n    \"ava\": \"^0.7.0\",\n    \"eslint\": \"^1.10.2\"\n  },\n  \"scripts\": {\n    \"test\": \"ava && eslint *.js\"\n  }\n}\n```", "```js\nimport postcss from 'postcss';\nimport test from 'ava';\n\nimport plugin from './';\n\nfunction run(t, input, output, opts = { }) {\n  return postcss([ plugin(opts) ]).process(input)\n    .then( result => {\n      t.same(result.css, output);\n      t.same(result.warnings().length, 0);\n    });\n}\n\n/* Write tests here\ntest('does something', t => {\n  return run(t, 'a{ }', 'a{ }', { });\n});\n*/\n```", "```js\nvar postcss = require('postcss');\n```", "```js\nvar vendor = postcss.vendor;\n```", "```js\n// prefix extracted = '-webkit-'\nvar vp = postcss.vendor;\nvp.prefix('-webkit-clip-path')\n```", "```js\n// value extracted = 'tab-size'\nvar vp = postcss.vendor;\nvp.unprefixed('-moz-tab-size')\n```", "```js\nvar list = postcss.list;\n```", "```js\n// expected result:\n// ['1px', 'calc(10% + 1px)']\nvar ls = postcss.list;\nls.space('1px calc(10% + 1px)')\n```", "```js\n// Expected result:\n// ['black', 'linear-gradient(white, black)']\nvar ls = postcss.list;\nls.comma('black, linear-gradient(white, black)')\n```", "```js\nvar root = postcss.parse('a{color: darkred}');\nroot.type         //=> 'root'\nroot.nodes.length //=> 1\n```", "```js\nvar root = postcss.parse('h1{}');\nvar rule = root.first;\nrule.type       //=> 'rule'\nrule.toString() //=> 'h1{}'\n```", "```js\nvar root = postcss.parse('a{color: darkred}');\nvar decl = root.first.first;\ndecl.type       //=> 'decl'\ndecl.toString() //=> 'color: darkred'\n```", "```js\nvar root = postcss.parse('a { color: /* inner */ darkred; /* outer */ }');\nvar decl    = root.first.first;\nvar comment = root.first.last;\n\ncomment.type //=> 'comment'\ndecl.between //=> ': /* inner */'\n```", "```js\n    git clone https://github.com/postcss/postcss-plugin-boilerplate.git\n\n    ```", "```js\n    node ./postcss-plugin-boilerplate/start\n\n    ```", "```js\n    var postcss = require('postcss');\n\n    module.exports = postcss.plugin('postcss-transition-shortcut', function (opts) {\n      opts = opts || {};\n\n      var defaults = {\n        property: 'all',\n        duration: '1s',\n        timing: 'ease-in-out',\n        delay: '1s'\n      };\n\n      return function (css, result) {\n        css.walkRules(function (rule) {\n          var transitionRule;\n          var transitionValues = [];\n          var index = -1, node;\n          var attributes = /^ (property|duration|timing|delay)$/;\n\n          while (node = rule.nodes[++index]) {\n             if (attributes.test(node.prop)) {\n              transitionRule = transitionRule || node.cloneBefore({ prop: 'transition' });\n              var transValues = postcss.list.space(node.value);\n              transitionValues.push(transValues.join(','));\n              node.remove();\n              --index;\n            }\n          }\n          transitionRule.value =\n            transitionValues.join(' '); \n          });\n      };\n    });\n    ```", "```js\n    npm install --global ava\n    ava --init\n\n    ```", "```js\n          t.same(result.warnings().length, 0);\n        }); \n    } \n\n    test('transitionShtct', t => { \n     return run( t, 'div { property: all; duration: 1s; timing: ease-in-out; delay: 1s; }', 'div { transition: all 1s ease-in-out 1s; }', { }); \n    });\n\n    ```", "```js\n    div {\n      property: all;\n      duration: 1s;\n      timing: ease-in-out;\n      delay: 1s;\n    }\n    ```", "```js\nvar postcss = require('postcss');\n```", "```js\nmodule.exports = postcss.plugin('postcss-transition-shortcut', function (options) {\n```", "```js\noptions = options || {};\n```", "```js\nvar defaults = {\n  property: 'all',\n  duration: '1s',\n  timing: 'ease-in-out',\n  delay: '1s'\n};\n```", "```js\n  return function (css) {\n     css.walkRules(function (rule) {\n       var transitionRule;\n       var transitionValues = [];\n       var index = -1, node;\n       var attributes = /^(property|duration|timing|delay)$/;\n```", "```js\n       while (node = rule.nodes[++index]) {\n        if (attributes.test(node.prop)) {\n          transitionRule = transitionRule || node.cloneBefore({ prop: 'transition' });\n           var transValues = postcss.list.space(node.value);\n           transitionValues.push(transValues.join(','));\n           node.remove();\n           --index;\n         }\n       }\n       transitionRule.value = transitionValues.join(' ');\n    });\n  };\n});\n```", "```js\n    npm install postcss --save\n    npm install underscore --save\n\n    ```", "```js\n    @font-face {\n      font-family: 'robotoregular';\n      font-path: '/fonts/Roboto-Regular-webfont';\n      font-weight: normal;\n      font-style: normal;\n    }\n\n    h1 { font-family: robotoregular,  fontstack(\"Extra Stack\"); }\n    ```", "```js\nvar postcss = require('postcss');\nvar _ = require('underscore');\n\n// Font stacks from http://www.cssfontstack.com/\nvar fontstacks_config = {\n  'Arial': 'Arial, \"Helvetica Neue\", Helvetica, sans-serif',\n  'Times New Roman': 'TimesNewRoman, \"Times New Roman\", Times,\n  Baskerville, Georgia, serif'\n}\n```", "```js\n// Credit for this function: http://stackoverflow.com/a/196991\nfunction toTitleCase(str) {\n  return str.replace(/\\w\\S*/g, function(txt){\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n}\n```", "```js\nmodule.exports = postcss.plugin('customfonts', function (options) {\n  return function (css) {\n\n    options = options || {};\n    fontstacks_config = _.extend(fontstacks_config, options.fontstacks);\n```", "```js\n    css.walkRules(function (rule) {\n      rule.walkDecls(function (decl, i) {\n        var value = decl.value;\n        if (value.indexOf( 'fontstack(' ) !== -1) {\n          var fontstack_requested = value.match(/\\(([^)]+)\\)/)[1].replace(/[\"']/g, \"\");\n          fontstack_requested = toTitleCase(fontstack_requested);\n\n          var fontstack = fontstacks_config[fontstack_requested];\n          var first_font =  value.substr(0, value.indexOf('fontstack('));\n\n          var new_value = first_font + fontstack;\n          decl.value = first_font + fontstack;\n        }\n      });\n    });\n```", "```js\n    css.walkAtRules('font-face', function(rule) {\n      rule.walkDecls('font-path', function(decl) {\n        var fontPath = decl.value.replace(/'/g, ''),\n        src = '',\n        formats = [\n          { type: 'woff', ext: '.woff' },\n          { type: 'truetype', ext: '.ttf' },\n          { type: 'svg', ext: '.svg' }\n        ];\n```", "```js\n        formats.forEach(function(format, index, array) {\n          if (index === array.length - 1){\n            src += 'url(\"' + fontPath + format.ext + '\")\n        format(\\'' + format.type + '\\')';\n          } else {\n            src += 'url(\"' + fontPath + format.ext + '\")\n        format(\\'' + format.type + '\\'),\\n ';\n          }\n        });\n\n        decl.cloneBefore({ prop: 'src', value: src });\n        decl.remove();\n      });\n    });\n  }\n});\n```"]