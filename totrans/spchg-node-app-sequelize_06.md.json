["```js\n    const tx = await sequelize.transaction();\n    ```", "```js\n    try {\n        const amount = 100;\n        await Account.increment(\n            { balance: amount * -1 },\n            {\n                where: { id: 1 },\n                transaction: tx\n            }\n        );\n        await Account.increment(\n            { balance: amount },\n            {\n                where: { id: 2 },\n                transaction: tx\n            }\n        );\n    ```", "```js\nawait tx.commit();\n```", "```js\n    } catch (error) {\n      await tx.rollback();\n      // log the error here\n    }\n    ```", "```js\ntry {\n    const amount = 100;\n    await sequelize.transaction(async (tx) => {\n        await Account.increment(\n            { balance: amount },\n            {\n                where: { id: 1 },\n                transaction: tx\n            }\n        );\n\n        await Account.increment(\n            { balance: amount * -1 },\n            {\n                where: { id: 2 },\n                transaction: tx\n            }\n        );\n    });\n\n    // the transaction has automatically been committed\n} catch (error) {\n    // Sequelize has already rolled back the transaction \n       from the try block\n}\n```", "```js\ntry {\n    await sequelize.transaction(async (tx) => {\n        // some queries\n        throw new Error(\"rolling back the transaction manu\n                         ally here\");       \n        // some more queries\n    });\n} catch (error) {\n    // rolling back the transaction manually here\n}\n```", "```js\nsequelize.transaction((tx1) => {\n    return sequelize.transaction((tx2) => {\n```", "```js\n        return Promise.all([\n            Account.create({ id: 1 }, { transaction: null }),\n            Account.create({ id: 2 }, { transaction: tx1 }),\n            Account.create({ id: 3 }, { transaction: tx2 }),\n        ]);\n    });\n});\n```", "```js\nnpm install continuation-local-storage\n```", "```js\nconst cls = require('continuation-local-storage');\nconst namespace = cls.createNamespace('custom-sequelize-namespace');\n```", "```js\nconst Sequelize = require('@sequelize/core');\nSequelize.useCLS(namespace);\nconst sequelize = new Sequelize(/* … */);\n```", "```js\nsequelize.transaction((tx1) => {\n    return sequelize.transaction((tx2) => {\n        return Promise.all([\n            Account.create({ id: 1 }, { transaction: null }),\n            Account.create({ id: 2 }, { transaction: tx1 }),\n            Account.create({ id: 3 }),\n        ]);\n    });\n});\n```", "```js\nawait sequelize.transaction(async () => { // the tx\nargument is not required\n        await removeUserInventory(id);\n        await User.destroy({ where: { id } }); // tx is also \n        used here\n});\nasync function removeUserInventory(id) {\n    // this query will also use the same scope tx variable \n       as User.destroy\n    await UserInventory.destroy({ where: { userId: id } });\n}\n```", "```js\nconst Sequelize = require('@sequelize/core');\nsequelize.transaction({\n    isolationLevel: Sequelize.Transaction.ISOLATION_LEVELS.\n                    SERIALIZABLE\n}, (tx) => { /* ... */ });\n```", "```js\nnew Sequelize('db', 'user', 'pw', {\n    isolationLevel: Sequelize.Transaction.ISOLATION_LEVELS.\n                    READ_COMMITTED\n});\n```", "```js\nsequelize.transaction((tx) => {\n    const seat = Seats.findOne({\n        where: { venue: 1, row: 5, seat: 13 }\n        transaction: tx,\n        lock: true\n    });\n    // ... more queries ...\n});\n```", "```js\nconst tx1 = await sequelize.transaction();\nconst seat = Seats.findOne({\n    where: { venue: 1, row: 5, seat: 13 }\n    transaction: tx1,\n    lock: true\n});\n```", "```js\nconst tx2 = await sequelize.transaction();\nconst seats = Seats.findAll({\n    where: { venue: 1 }\n    transaction: tx2,\n    lock: true,\n    skipLocked: true\n});\n```", "```js\nsequelize.transaction((tx) => {\n    tx.afterCommit((trx) => {\n        // … your logic here ...\n    });\n    // ... queries using tx ...\n});\n```", "```js\nSeats.afterSave((instance, options) => {\n    if (options.transaction) {\n        // appending afterCommit to the transaction instance here\n        options.transaction.afterCommit(() => { /* your logic here */ });\n        return;\n    }\n    // code will continue here if we did not save under a transaction\n});\n```", "```js\nnpm i --save luxon\n```", "```js\nBoardingTicket.beforeSave('checkSeat', async (ticket, options) => {\n    const newSeat = ticket.getDataValue('seat');\n    const { transaction } = options;\n    if (ticket.changed('seat')) {\n      const boardingTicketExists = await BoardingTicket.findOne({\n        where: {\n          seat: newSeat\n        },\n        transaction,\n      });\n      if (boardingTicketExists !== null) {\n        throw new Error(`The seat ${newSeat} has already been taken.`);\n      }\n    }\n  });\n```", "```js\nconst { DateTime } = require('luxon');\n```", "```js\n      validateDepartureTime() {\n        const dt = DateTime.fromJSDate(this.departureTime);\n        if (!dt.isValid) {\n          throw new Error(\"Invalid departure time\");\n        }\n        if (dt < DateTime.now()) {\n          throw new Error(\"The departure time must be set \n                           within the future\");\n        }\n      },\n```", "```js\nconst { DateTime } = require(\"luxon\");\nconst models = require(\"../models\");\n```", "```js\nasync function createAirplane(req, res) {\n    const { name, seats } = req.body;\n```", "```js\n    try {\n        const airplane = await models.Airplane.create({\n            planeModel: name,\n            totalSeats: seats,\n        });\n        return res.json(airplane);\n    } catch (error) {\n        res.status(500).send(error);\n    }\n}\nexports.createAirplane = createAirplane;\n```", "```js\nasync function createSchedule(req, res) {\n    const { airplaneId, origin, destination, departure } = \n    req.body;\n```", "```js\n        const dt = DateTime.fromISO(departure);\n        if (!dt.isValid) {\n            return res.status(400).send(\"invalid departure \n                                         time\");\n        }\n```", "```js\n    try {\n const plane = await models.Airplane.findByPk(airplaneId);\n        if (!plane) {\n            return res.status(404).send(\"airplane does not \n                                         exist\");\n        }\n```", "```js\n        const flight = await sequelize.transaction(async \n        (tx) => {\n   const schedule = await models.FlightSchedule.create({\n                originAirport: origin,\n                destinationAirport: destination,\n                departureTime: dt,\n            }, { transaction: tx });\n```", "```js\n            await schedule.setAirplane(plane, \n            { transaction: tx });\n            return schedule;\n        });\n       return res.json(flight);\n```", "```js\n    } catch (error) {\n        return res.status(500).send(error);\n    }\n}\nexports.createSchedule = createSchedule;\n```", "```js\nconst models = require(\"../models\");\n```", "```js\nasync function bookTicket(req, res) {\n    try {\n        const { scheduleId, seat } = req.body;\n        const t = await sequelize.transaction(async (tx) => {\n```", "```js\nconst schedule = await models.FlightSchedule.findByPk\n(scheduleId, {transaction: tx});\n            if (!schedule) {\n                throw new Error(\"schedule could not be \n                                 found\");\n            }\n```", "```js\nconst boardingTicket = await models.BoardingTicket.create({\n                seat,\n            }, { transaction: tx });\n```", "```js\n            // this is where we would set a customer if we had an application with authentication, etc.\n            // await ticket.setCustomer(customerId, { transaction: tx });\n            await schedule.addBoardingTicket(boardingTicket, { transaction: tx });\n\n            return boardingTicket;\n        });\n        return res.json(t.toJSON());\n```", "```js\n    } catch (error) {\n        return res.status(400).send(error.toString());\n    }\n}\nexports.bookTicket = bookTicket;\n```", "```js\nnpm i --save body-parser\n```", "```js\nconst bodyParser = require(\"body-parser\");\n```", "```js\nconst { bookTicket } = require(\"./routes/tickets\")\nconst { createAirplane, createSchedule } = require(\"./routes/flights\");\n```", "```js\napp.use(bodyParser.json({ type: 'application/json' }));\n```", "```js\napp.post('/airplanes', createAirplane);\n```", "```js\napp.post('/schedules', createSchedule);\napp.post('/book-flight', bookTicket);\n```", "```js\nnpm run start\n```", "```js\ncurl -X POST -H \"Content-Type: application/json\" -d \"{\\\"name\\\": \\\"A320\\\", \\\"seats\\\": -1}\" http://127.0.0.1:3000/airplanes\n```", "```js\n{\"name\":\"SequelizeValidationError\",\"errors\":[{\"message\":\"A plane must have at least one seat\",\"type\":\"Validation error\",\"path\":\"totalSeats\",\"value\":-1,\"origin\":\"FUNCTION\",\"instance\":{\"id\":null,\"planeModel\":\"A320\",\"totalSeats\":-1,\"updatedAt\":\"2022-02-21T16:27:18.336Z\",\"createdAt\":\"2022-02-21T16:27:18.336Z\"},\"validatorKey\":\"min\",\"validatorName\":\"min\",\"validatorArgs\":[1],\"original\":{\"validatorName\":\"min\",\"validatorArgs\":[1]}}]}\n```", "```js\ncurl -X POST -H \"Content-Type: application/json\" -d \"{\\\"name\\\": \\\"A320\\\", \\\"seats\\\": 150}\" http://127.0.0.1:3000/airplanes\n```", "```js\n{\"id\":1,\"planeModel\":\"A320\",\"totalSeats\":150,\"updatedAt\":\"2022-02-21T15:49:19.883Z\",\"createdAt\":\"2022-02-21T15:49:19.883Z\"}\n```", "```js\ncurl -X POST -H \"Content-Type: application/json\" -d \"{\\\"airplaneId\\\": 1, \\\"origin\\\": \\\"LAX\\\", \\\"destination\\\": \\\"ORD\\\", \\\"departure\\\": \\\"2060-01-01T14:00:00Z\\\"}\"  http://127.0.0.1:3000/schedules\n```", "```js\n{\"name\":\"SequelizeValidationError\",\"errors\":[{\"message\":\"Invalid destination airport\",\"type\":\"Validation error\",\"path\":\"destinationAirport\",\"value\":\"ORD\",\"origin\":\"LAX\",\"instance\":{\"id\":null,\"originAirport\":\"LAX\",\"destinationAirport\":\"ORD\",\"updatedAt\":\"2022-02-21T18:11:02.108Z\",\"createdAt\":\"2022-02-21T18:11:02.108Z\"},\"validatorKey\":\"isIn\",\"validatorName\":\"isIn\",\"validatorArgs\":[[\"MIA\",\"JFK\",\"LAX\"]],\"original\":{\"validatorName\":\"isIn\",\"validatorArgs\":[[\"MIA\",\"JFK\",\"LAX\"]]}}]}\n```", "```js\ncurl -X POST -H \"Content-Type: application/json\" -d \"{\\\"airplaneId\\\": 1, \\\"origin\\\": \\\"LAX\\\", \\\"destination\\\": \\\"MIA\\\", \\\"departure\\\": \\\"2060-01-01T14:00:00Z\\\"}\" http://127.0.0.1:3000/schedules\n```", "```js\n{\"id\":1,\"originAirport\":\"LAX\",\"destinationAirport\":\"MIA\",\"departureTime\":\"2060-01-01T14:00:00.000Z\",\"updatedAt\":\"2022-02-21T18:34:46.049Z\",\"createdAt\":\"2022-02-21T18:34:46.038Z\",\"AirplaneId\":1}\n```", "```js\ncurl -X POST -H \"Content-Type: application/json\" -d \"{\\\"scheduleId\\\": 1, \\\"seat\\\": \\\"1A\\\"}\" http://127.0.0.1:3000/book-flight\n```", "```js\n{\"isEmployee\":{},\"id\":1,\"seat\":\"1A\",\"updatedAt\":\"2022-02-21T18:55:30.837Z\",\"createdAt\":\"2022-02-21T18:55:30.837Z\"}\n```", "```js\nError: The seat 1A has already been taken.\n```"]