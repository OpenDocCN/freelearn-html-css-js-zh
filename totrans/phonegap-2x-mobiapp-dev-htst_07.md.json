["```js\n            <script type=\"application/javascript\" charset=\"utf-8\" src=\"img/PKVideoThumbnail.js\">\n            </script>\n        ```", "```js\n        \t<plugin name=\"PKVideoThumbnail\" value=\"com.kerrishotts.PKVideoThumbnail.PKVideoThumbnail\"/>\n        ```", "```js\n            <script type=\"application/javascript\" charset=\"utf-8\" src=\"img/PKVideoThumbnail.js\">\n            </script>\n        ```", "```js\nvar PKVideoThumbnail = PKVideoThumbnail || {};\n\nPKVideoThumbnail.createThumbnail = function ( source, target, success, failure )\n{\n    cordova.exec(success, failure,\n    \"PKVideoThumbnail\",\n    \"createThumbnail\",\n     [\"file://localhost\" + source, target]);\n}\n```", "```js\nvar PKVideoThumbnail = PKVideoThumbnail || {};\n\nPKVideoThumbnail.createThumbnail = function ( source, target, success, failure )\n{\n    cordova.exec(success, failure,\n    \"PKVideoThumbnail\",\n    \"createThumbnail\",\n     [source, target]);\n}\n```", "```js\n#import <Cordova/CDVPlugin.h>\n\n@interface PKVideoThumbnail : CDVPlugin\n\n #if CORDOVA_VERSION_MIN_REQUIRED <= __CORDOVA_2_0_0\n- (void) createThumbnail:(NSMutableArray*)arguments withDict:(NSMutableDictionary*)options;\n #else\n- (void) createThumbnail:(CDVInvokedUrlCommand*)command;\n #endif\n@end\n```", "```js\n#import \"PKVideoThumbnail.h\"\n#import <Cordova/CDVPluginResult.h>\n#import <MediaPlayer/MediaPlayer.h>\n```", "```js\n@implementation PKVideoThumbnail\n\nBOOL extractVideoThumbnail ( NSString *theSourceVideoName,NSString *theTargetImageName )\n{\n    UIImage *thumbnail;\n```", "```js\n    // BASED ON http://stackoverflow.com/a/6432050 //\n    MPMoviePlayerController *mp = [[MPMoviePlayerController \n    alloc]\n      initWithContentURL: [NSURL \n      URLWithString:theSourceVideoName] ];\n    mp.shouldAutoplay = NO;\n    mp.initialPlaybackTime = 1;\n    mp.currentPlaybackTime = 1;\n```", "```js\n    thumbnail = [mp thumbnailImageAtTime:1\n    timeOption:MPMovieTimeOptionNearestKeyFrame];\n     [mp stop];\n     [mp release];\n```", "```js\n    return [UIImageJPEGRepresentation ( thumbnail, 1.0) writeToFile:theTargetImageName atomically:YES];\n```", "```js\n}\n\n #if CORDOVA_VERSION_MIN_REQUIRED <= __CORDOVA_2_0_0\n```", "```js\n- (void) createThumbnail:(NSMutableArray*)arguments withDict:(NSMutableDictionary*)options\n{\n    NSString* callbackId = [arguments objectAtIndex:0];\n    CDVPluginResult* pluginResult = nil;\n    NSString* javaScript = nil;\n```", "```js\n    @try {\n        NSString* theSourceVideoName = [arguments objectAtIndex:1];\n        NSString* theTargetImageName = [arguments objectAtIndex:2];\n```", "```js\n        if ( extractVideoThumbnail(theSourceVideoName, theTargetImageName) )\n        {\n          pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsString:theTargetImageName];\n          javaScript = [pluginResult toSuccessCallbackString:callbackId];\n        }\n        else\n        {\n          pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR messageAsString:theTargetImageName];\n          javaScript = [pluginResult toErrorCallbackString:callbackId];\n        }\n```", "```js\n    } @catch (NSException* exception) {\n      pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_JSON_EXCEPTION messageAsString:[exception reason]];\n      javaScript = [pluginResult toErrorCallbackString:callbackId];\n    }\n\n     [self writeJavascript:javaScript];\n}\n```", "```js\n #else\n- (void) createThumbnail:(CDVInvokedUrlCommand*)command\n{\n    CDVPluginResult* pluginResult = nil;\n    NSString* javaScript = nil;\n\n    @try {\n        NSString* theSourceVideoName = [command.arguments objectAtIndex:0];\n        NSString* theTargetImageName = [command.arguments objectAtIndex:1];\n\n        if ( extractVideoThumbnail(theSourceVideoName, theTargetImageName) )\n        {\n          pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsString:theTargetImageName];\n          javaScript = [pluginResult toSuccessCallbackString:command.callbackId];\n        }\n        else\n        {\n          pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR messageAsString:theTargetImageName];\n          javaScript = [pluginResult toErrorCallbackString:command.callbackId];\n        }\n    } @catch (NSException* exception) {\n        pluginResult = [CDVPluginResult resultWithStatus:CDVCommandStatus_JSON_EXCEPTION messageAsString:[exception reason]];\n        javaScript = [pluginResult toErrorCallbackString:command.callbackId];\n    }\n\n     [self writeJavascript:javaScript];\n}\n #endif\n\n@end\n```", "```js\n    BOOL extractThumbnailToFile: (NSString *) theTargetImageName fromVideoNamed: (NSString *)theSourceVideoName\n```", "```js\n  if (extractThumbnailToFile:theTargetImageName fromVideoNamed:theSourceVideoName) â€¦\n```", "```js\npackage com.kerrishotts.PKVideoThumbnail;\n\nimport org.apache.cordova.api.Plugin;\nimport org.apache.cordova.api.PluginResult;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport android.graphics.Bitmap;\nimport android.graphics.Bitmap.CompressFormat;\nimport android.media.*;\nimport android.provider.MediaStore;\n\nimport java.io.*;\n```", "```js\npublic class PKVideoThumbnail extends Plugin {\n\n    public PluginResult execute(String action, JSONArray args, String callbackId) {\n```", "```js\n        try {\n          if (action.equals(\"createThumbnail\")) {\n```", "```js\n              String sourceVideo = args.getString(0);\n              String targetImage = args.getString(1);\n```", "```js\n              Bitmap thumbnail = ThumbnailUtils.createVideoThumbnail ( sourceVideo, MediaStore.Images.Thumbnails.MINI_KIND);\n```", "```js\n              FileOutputStream theOutputStream;\n              try\n              {\n                File theOutputFile = new File (targetImage.substring(7));\n                if (!theOutputFile.exists())\n                {\n                  if (!theOutputFile.createNewFile())\n                  {\n                    return new PluginResult(PluginResult.Status.ERROR,\"Could not save thumbnail.\");\n                  }\n                }\n                  if (theOutputFile.canWrite())\n                  {\n                    theOutputStream = new FileOutputStream (theOutputFile);\n                    if (theOutputStream != null)\n                      {\n                        thumbnail.compress(CompressFormat.JPEG, 75, theOutputStream);\n                      }\n                      else\n                      {\n                        return new PluginResult(PluginResult.Status.ERROR, \"Could not save thumbnail; target not writeable.\");\n                      }\n                  }\n                }\n                catch (IOException e)\n                {\n                  e.printStackTrace();\n                  return new PluginResult(PluginResult.Status.IO_EXCEPTION, \"I/O exception saving thumbnail.\");\n                }\n```", "```js\n                return new PluginResult (PluginResult.Status.OK, targetImage );\n```", "```js\n            } else {\n                return new PluginResult(PluginResult.Status.INVALID_ACTION);\n            }\n        } catch (JSONException e) {\n            return new PluginResult(PluginResult.Status.JSON_EXCEPTION);\n        }\n    }\n}\n```", "```js\ndocumentsView.documentIterator = function(o)\n  {\n    var theHTML = \"\";\n    var theNumberOfDocuments = 0;\n documentsView.documentToIndex = {};\n    for (var i = 0; i < o.getDocumentCount(); i++)\n    {\n      var theDocumentEntry = o.getDocumentAtIndex(i);\n\n      theHTML += PKUTIL.instanceOfTemplate($ge(\"documentsView_documentTemplate\"),\n      { \"src\" : theDocumentEntry.fullPath,\n      \"index\" : i\n    });\n\n      documentsView.documentToIndex[ PKUTIL.FILE.getFileNamePart ( theDocumentEntry.fullPath ) ] = i;\n      theNumberOfDocuments++;\n    }\n    $ge(\"documentsView_contentArea\").innerHTML = theHTML;\n```", "```js\n    PKUTIL.delay(100, function()\n    {\n      for (var i = 0; i < theNumberOfDocuments; i++)\n      {\n        var theDocumentEntry = o.getDocumentAtIndex(i);\n        var theElement = $ge(\"documentsView_item\" + i + \"\");\n        var theLPGesture = new GESTURES.LongPressGesture(theElement, function(o)\n        {\n          documentsView.longPressReceived(o.data);\n        });\n        theLPGesture.data = i;\n\n        PKVideoThumbnail.createThumbnail ( theDocumentEntry.fullPath,\n        PKUTIL.FILE.getPathPart ( theDocumentEntry.fullPath ) + PKUTIL.FILE.getFileNamePart ( theDocumentEntry.fullPath ) + \".jpg\",documentsView.renderVideoThumbnail,function ( theError )\n          { console.log ( JSON.stringify ( theError ) );\n          }\n        )\n```", "```js\n      }\n    });\n  }\n\n  documentsView.renderVideoThumbnail = function ( theTargetImage )\n  {\n        var img = new Image();\n        var i = documentsView.documentToIndex[ PKUTIL.FILE.getFileNamePart ( theTargetImage ) ];\n```", "```js\ndocumentsView.takeMovie = function()\n  {\n    navigator.device.capture.captureVideo(\n```", "```js\n      function (mediaFiles)\n      {\n        var uri = mediaFiles[0].fullPath;\n        var fileExt = PKUTIL.FILE.getFileExtensionPart ( uri );\n        PKFILE.moveFileTo ( uri, \n        \"doc://\" + PKUTIL.getUnixTime() + \".\" + fileExt,\n        function ()\n          {\n            documentsView.reloadAvailableDocuments();\n          },\n        function (evt)\n          {\n            console.log (JSON.stringify(evt));\n            var anAlert = new PKUI.MESSAGE.Alert(__T(\"Oops!\"), __T(\"Failed to save the video.\"));\n            anAlert.show();\n        } )\n    },\n```", "```js\n      function (error)\n      {\n        var msg = 'An error occurred during capture: ' + error.code;\n        var anAlert = new PKUI.MESSAGE.Alert(__T(\"Oops!\"), msg);\n        anAlert.show();\n      },\n```", "```js\n      {limit: 1});\n  }\n```", "```js\n  documentsView.importMovie = function()\n  {\n    navigator.camera.getPicture ( function (uri)\n    {\n      var fileExt = PKUTIL.FILE.getFileExtensionPart ( uri );\n      PKFILE.moveFileTo ( uri, \"doc://\" + PKUTIL.getUnixTime() + \".\" + fileExt,Â function ()\n      {\n        documentsView.reloadAvailableDocuments();\n      },\n        function (evt)\n        {\n          console.log (JSON.stringify(evt));\n          var anAlert = new PKUI.MESSAGE.Alert(__T(\"Oops!\"), __T(\"Failed to save the video.\"));\n          anAlert.show();\n        } )\n     },\n     function (msg)\n     {\n       var anAlert = new PKUI.MESSAGE.Alert(__T(\"Oops!\"), msg);\n       anAlert.show();\n     },\n      { destinationType: Camera.DestinationType.FILE_URI,\n      sourceType: Camera.PictureSourceType.PHOTOLIBRARY,\n      mediaType: Camera.MediaType.VIDEO,\n      saveToPhotoAlbum: false\n     }\n   );\n  }\n```", "```js\n<div id=\"movieView_documentTemplate\" class=\"hidden\">\n    <video src=\"img/%SRC%\" controls autoplay autobuffer style=\"width:100%; height: 100%;\" />\n</div>\n```", "```js\n  movieView.setMovie = function ( moviePath, movieIndex )\n  {\n    movieView.moviePath = moviePath;\n    movieView.movieIndex = movieIndex;\n\n    $ge(\"movieView_contentArea\").innerHTML =\n      PKUTIL.instanceOfTemplate($ge(\"movieView_documentTemplate\"),\n        { \"src\" : movieView.moviePath,\n          \"thumb\": PKUTIL.FILE.getPathPart ( moviePath ) +PKUTIL.FILE.getFileNamePart ( moviePath ) + \".jpg\"});\n  }\n```", "```js\n        <script type=\"application/javascript\" charset=\"utf-8\" src=\"img/video.js\"></script>\n    ```", "```js\n        <plugin name=\"VideoPlayer\" value=\"com.phonegap.plugins.video.VideoPlayer\"/>\n    ```", "```js\n      documentsView.documentContainerTapped = function(idx)\n      {\n        var theElement = $ge(\"documentsView_item\"+ idx + \"_canvas\");\n        if (documentsView.inSelectionMode)\n        {\n         â€¦ this code is identical to the previous chapter â€¦\n        }\n        else\n        {\n          if ( PKDEVICE.platform() != \"android\" )\n          {\n            PKUI.CORE.pushView (movieView);\n            PKUTIL.delay(500, function()\n            {\n              movieView.setMovie ( documentsView.availableDocuments.getDocumentAtIndex(idx).fullPath, idx );\n            } );\n          }\n          else\n          {\n            window.plugins.videoPlayer.play( documentsView.availableDocuments.getDocumentAtIndex(idx).fullPath );\n         }\n        }\n      }\n    ```"]