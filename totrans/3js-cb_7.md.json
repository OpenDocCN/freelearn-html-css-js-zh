["```js\n  <script src=\"img/tween.js\"></script>\n```", "```js\n      var tween = new TWEEN.Tween({x:0 , y:1.25, z:0, rot: 0});\n    ```", "```js\n      tween.to({x:5, y:15, z:-10, rot: 2*Math.PI}, 5000);\n    ```", "```js\n      tween.easing(TWEEN.Easing.Elastic.InOut);\n    ```", "```js\n      tween.onUpdate(function() {\n        cube.position.set(this.x, this.y, this.z);\n        cube.rotation.set(this.rot, this.rot, this.rot);\n      });\n    ```", "```js\n      tween.repeat(Infinity);\n      tween.yoyo(true);\n    ```", "```js\n      tween.start();\n    ```", "```js\n      TWEEN.update();\n    ```", "```js\n  var tween = new TWEEN.Tween({x:0 , y:1.25, z:0, rot: 0}).to({x:5, y:15, z:-10, rot: 2*Math.PI}, 5000).easing(TWEEN.Easing.Elastic.InOut).onUpdate(function() {\n    cube.position.set(this.x, this.y, this.z);\n    cube.rotation.set(this.rot, this.rot, this.rot);\n  })\n  .repeat(Infinity)\n  .yoyo(true)\n  .start();\n```", "```js\n      var jsonLoader = new THREE.JSONLoader();\n      jsonLoader.load(\"../assets/models/morph/car.js\",\n      function(model, materials) {\n        ...\n      });\n    ```", "```js\n      materials.forEach(function(mat) {\n        mat.morphTargets = true;\n      });\n    ```", "```js\n      car = new THREE.Mesh(model,new THREE.MeshFaceMaterial( materials ));\n      scene.add(car);\n    ```", "```js\n      gui.add(control, 'mt_1', 0,1).step(0.01).listen().onChange(function(a){\n        car.morphTargetInfluences[1] = a;\n      });\n      gui.add(control, 'mt_2', 0,1).step(0.01).listen().onChange(function(a){\n        car.morphTargetInfluences[2] = a;\n      });;\n      gui.add(control, 'mt_3', 0,1).step(0.01).listen().onChange(function(a){\n        car.morphTargetInfluences[3] = a;\n      });\n    ```", "```js\n  cubeGeometry.morphTargets[0] = {name: 't1', vertices:cubeTarget2.vertices};\n  cubeGeometry.morphTargets[1] = {name: 't2', vertices:cubeTarget1.vertices};\n```", "```js\n  cube.morphTargetInfluences[0] = 0.4;\n  cube.morphTargetInfluences[1] = 0.6;\n```", "```js\n      var jsonLoader = new THREE.JSONLoader();\n      jsonLoader.load(\"../assets/models/bones/giraffe.js\",function(model, materials) {\n        ...\n      });\n    ```", "```js\n      materials.forEach(function(mat) {\n        mat.skinning = true;\n      });\n    ```", "```js\n      var giraffe = new THREE.SkinnedMesh(model, materials[0]);\n      scene.add(giraffe);\n    ```", "```js\n      // the neck bone\n      giraffe.children[0].children[1].children[0].children[0].rotation.x = control.neck_rot_x;\n      giraffe.children[0].children[1].children[0].children[0].rotation.y = control.neck_rot_y;\n      giraffe.children[0].children[1].children[0].children[0].rotation.z = control.neck_rot_z;\n      giraffe.children[0].children[1].children[0].children[0].position.x = control.neck_pos_x;\n      giraffe.children[0].children[1].children[0].children[0].position.y = control.neck_pos_y;\n      giraffe.children[0].children[1].children[0].children[0].position.z = control.neck_pos_z;\n      // the tail bone\n      giraffe.children[0].children[0].children[0].rotation.z -= 0.1\n    ```", "```js\n  var helper = new THREE.SkeletonHelper(giraffe);\n  scene.add(helper);\n```", "```js\n  helper.update();\n```", "```js\n      var loader = new THREE.JSONLoader();\n      loader.load(\"../assets/models/morph/simplemorph.js\",function(model){\n        ...\n      });\n    ```", "```js\n      var mat = new THREE.MeshLambertMaterial({color: 0xff3333, morphTargets:true})\n    ```", "```js\n      mesh = new THREE.MorphAnimMesh(model, mat);\n      mesh.castShadow = true;\n      scene.add(mesh);\n    ```", "```js\n      mesh.parseAnimations();\n      mesh.playAnimation('animation', 20);\n      mesh.duration = 10;\n      render();\n    ```", "```js\n      var t = new THREE.Clock();\n      function render() {\n        renderer.render(scene, camera);\n        mesh.updateAnimation(t.getDelta());\n        requestAnimationFrame(render);\n      }\n    ```", "```js\n      var loader = new THREE.JSONLoader();\n      loader.load(\"../assets/models/bones/crow.js\",function(model){\n        ...\n      });\n    ```", "```js\n      var mat = new THREE.MeshLambertMaterial({color: 0xf33f33,shading: THREE.FlatShading, skinning:true})\n    ```", "```js\n      mesh = new THREE.SkinnedMesh(model, mat);\n    ```", "```js\n      model.animation = \"Crow.ArmatureAction\";\n      THREE.AnimationHandler.add(model.animations[0]);\n      var animation = new THREE.Animation(mesh, model.animation );\n      animation.play();\n    ```", "```js\n      var t = new THREE.Clock();\n      function render() {\n        renderer.render(scene, camera);\n        THREE.AnimationHandler.update( t.getDelta() );\n        requestAnimationFrame(render);\n      }\n    ```", "```js\n      var cubeGeometry = new THREE.BoxGeometry(2, 2, 2);\n      var cubeMaterial = new THREE.MeshLambertMaterial({color: 0xff2255});\n    var cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\n    cube.name='cube';\n    scene.add(cube);\n    ```", "```js\n    var cubes = [];\n    var cubeMaterial2 = new THREE.MeshLambertMaterial({color: 0xff0000});\n    var cube2 = new THREE.Mesh(cubeGeometry, cubeMaterial2);\n    cube2.position.set(5,0,0);\n    cube2.name='cube-red';\n    scene.add(cube2);\n    cubes.push(cube2);\n    ...\n    var cubeMaterial5 = new THREE.MeshLambertMaterial({color: 0xff00ff});\n    var cube5 = new THREE.Mesh(cubeGeometry, cubeMaterial5);\n    cube5.position.set(-5,0,0);\n    cube5.name='cube-purple';\n    scene.add(cube5);\n    cubes.push(cube5);\n    ```", "```js\n    // reset the opacity at the beginning of the loop\n    cubes.forEach(function(cube){\n        cube.material.transparent = false;\n        cube.material.opacity = 1.0;\n\n    });\n\n    var cube = scene.getObjectByName('cube');\n    var originPoint = cube.position.clone();\n\n    for (var vertexIndex = 0; \n             vertexIndex < cube.geometry.vertices.length;\n             vertexIndex++) {\n        var localVertex = cube.geometry.\n        vertices[vertexIndex].clone();\n        var globalVertex = localVertex.applyMatrix4( \n                              cube.matrix);\n        var directionVector = globalVertex.sub( \n                              cube.position);\n\n        var ray = new THREE.Raycaster( \n                       originPoint,\n                       directionVector.clone().normalize() );\n        var collisionResults = ray.intersectObjects( cubes );\n        if ( collisionResults.length > 0 \n                     && collisionResults[0].distance < \n                             directionVector.length() ) {\n             collisionResults[0].object\n                        .material.transparent = true;\n            collisionResults[0]\n                        .object.material.opacity = 0.4;\n        }\n    }\n    ```", "```js\n  <script src=\"img/CCapture.min.js\"></script>\n  <script src=\"img/Whammy.js\"></script>\n```", "```js\n      Var capturer = new CCapture({\n        framerate: 20\n      });\n    ```", "```js\n      capturer.start();\n      // call the render loop\n      render();\n    ```", "```js\n      function render() {\n        renderer.render(scene, camera);\n        capturer.capture( renderer.domElement );\n        requestAnimationFrame(render);\n      }\n    ```", "```js\n      this.saveMovie = function() {\n        var videoUrl = capturer.save();\n        var link = document.createElement(\"a\");\n        link.download = 'video.webm';\n        link.href = videoUrl;\n        link.click();\n      };\n    ```", "```js\n      var plane;\n      var selectedObject;\n      var projector = new THREE.Projector();\n      var offset = new THREE.Vector3();\n      var objects =[];\n    ```", "```js\n      plane = new THREE.Mesh( new THREE.PlaneGeometry( 2000, 2000, 18, 18 ), new THREE.MeshBasicMaterial() );\n      plane.visible = false;\n      scene.add( plane );\n    ```", "```js\n      for (var i = 0 ; i < 200 ; i ++) {\n        var cubeGeometry = new THREE.BoxGeometry(2, 2, 2);\n        var cubeMaterial = new \n        THREE.MeshLambertMaterial({color: Math.random() * 0xffffff});\n        cubeMaterial.transparent = true;\n        cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\n     objects.push(cube);\n        // randomize position, scale and rotation\n        scene.add(cube);\n      }\n    ```", "```js\n      document.onmousemove = function(e) {\n        ...\n      };\n    ```", "```js\n      // get the mouse position in viewport coordinates\n      var mouse_x = ( event.clientX / window.innerWidth ) * 2 - 1;\n      var mouse_y = - ( event.clientY / window.innerHeight ) * 2 + 1;\n      // get the 3D position and create a raycaster\n      var vector = new THREE.Vector3( mouse_x, mouse_y, 0.5 );\n      projector.unprojectVector( vector, camera );\n      var raycaster = new THREE.Raycaster( camera.position, vector.sub( camera.position ).normalize() );\n    ```", "```js\n      if (selectedObject) {\n        var intersects = raycaster.intersectObject( plane );\n        selectedObject.position.copy(intersects[ 0 ] .point.sub( offset ) );\n      } else {\n        var intersects = raycaster.intersectObjects(objects);\n        if ( intersects.length > 0 ) {\n          plane.position.copy( intersects[0]\n            .object.position );\n            plane.lookAt( camera.position );\n        }\n      }\n    ```", "```js\n      document.onmousedown = function(event) {\n        ...\n      };\n    ```", "```js\n      var mouse_x = (event.clientX / window.innerWidth)* 2 - 1;\n      var mouse_y = -(event.clientY / window.innerHeight)* 2 + 1;\n      var vector = new THREE.Vector3(mouse_x, mouse_y, 0.5);\n      projector.unprojectVector(vector, camera);\n      var raycaster = new THREE.Raycaster(camera.position, vector.sub(camera.position).normalize());\n      var intersects = raycaster.intersectObjects(objects);\n    ```", "```js\n      if (intersects.length > 0) {\n        orbit.enabled = false;\n        selectedObject = intersects[0].object;\n        // and calculate the offset\n        var intersects = raycaster.intersectObject(plane);\n        offset.copy(intersects[0].point).sub(plane.position);\n    }\n    ```", "```js\n      document.onmouseup = function(event) {\n        orbit.enabled = true;\n        selectedObject = null;\n      }\n    ```", "```js\n  <script src=\"img/physi.js\"></script>\n```", "```js\n  Physijs.scripts.worker = \"../libs/physijs_worker.js\";\n```", "```js\n      scene = new Physijs.Scene;\n      scene.setGravity(new THREE.Vector3( 0, -30, 0 ));\n    ```", "```js\n      var cubeGeometry = new THREE.BoxGeometry(\n        4 * Math.random() + 2, \n        4 * Math.random() + 2, \n        4 * Math.random() + 2);\n      var cubeMaterial = new THREE.MeshLambertMaterial(\n        {\n          color: 0xffffff * Math.random()\n        }\n      );\n    ```", "```js\n      var box_material = Physijs.createMaterial(\n        cubeMaterial, \n        control.friction, \n        control.restitution);\n      var cube = new Physijs.BoxMesh(\n        cubeGeometry,\n        box_material,\n        10\n      );\n      scene.add(cube);\n    ```", "```js\n      function render() {\n        renderer.render(scene, camera);\n        requestAnimationFrame(render);\n        scene.simulate();\n      }\n    ```"]