- en: Chapter 9. Real-Life Tasks with Ember.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Using services with a component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing basic authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using **OAuth2** with Ember Simple Auth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Liquid Fire to create transitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with HTML5 drag and drop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning Bootstrap with Ember.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When developing a web application, you'll run into some tricky situations. You
    might need to set up authentication or animations or add transitions. You may
    need to figure out how to use Bootstrap in your application. These scenarios happen
    all the time.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll go over some more common real-life tasks and some recipes
    that you can use to make life easier when working with Ember.js.
  prefs: []
  type: TYPE_NORMAL
- en: Using services with a component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Ember.js, a service is a singleton object that holds state. In other words,
    it can be shared throughout an Ember application and doesn't change. For example,
    session data, APIs that talk to a server, and **WebSockets** are good candidates
    for services.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll create and inject a service into a component.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Dependency injection**'
  prefs: []
  type: TYPE_NORMAL
- en: Services and dependency injection go hand in hand. **Dependency Injection**
    (**DI**) occurs when we take objects and inject them into other objects during
    instantiation. This means that we take a service and inject it into our routes,
    controllers, and components. This is an important framework concept and should
    not be overused. Having too many injected services would break the separation
    of concerns design principle.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a new application, generate these files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These files will be used to create our application. The service will hold a
    property and method that returns data.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Begin by editing the `start.js` service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is the `services` file. It has an `isOn` property and a method called `importantInfo`
    that returns a string. In this example, we want access to this information in
    our component, `comp-info`, so that it can be displayed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the component `comp-info.js` file and add a new action that uses the `start`
    services information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The most important thing in the component is the `start` property. We can inject
    the `start` service into the component using `Ember.inject.service()`. By convention,
    the name of the property must match the name of the service being injected. In
    our example, the `start` service will be injected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `pressMe` action toggles the `isOn` property of the `start` service. We
    then `set` the text returned from the `importantInfo` method in the `message`
    property so that it can be displayed in the template.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add `button` to the template information for the component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the component, all we are doing is adding an action to the button and displaying
    a message.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the `comp-info` component to the application template file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now the template will display the component that was just created.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start the Ember server, and it will look as follows:![How to do it...](img/00062.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pressing the button will toggle the `isOn` property. As you can see from this
    example, the service information was accessed by the component and displayed to
    the template.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create `initializer` that injects the service into all the components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Ember.js initializers are created when the application is started. It's a good
    place to preload data or set up the application state. The `app` argument, in
    the `initialize` function, is also known as `Ember.Application`. It serves as
    a registry for dependency declaration. Factories (classes) can be registered and
    injected into the application. The `service:start` is the key for the `start`
    service that we created earlier. Once a factory is registered, it can be injected
    anywhere in the application. As the `start` service has already been created,
    there is no need to register it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `app.inject` takes three arguments. The first is the type to be injected.
    The second is the `name` of the service, `start`. Finally, the `service:start`
    factory is created.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the component so that it no longer injects the `start` service as it''s
    already available via the dependency injection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `start` service is commented out so it's no longer available. The rest of
    the component remains the same as the service can still be retrieved using `this.get('start')`.
    This is due to the fact that we injected it into all the components in the initializer.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run the server again and the template loaded will remain the same with the same
    functionality.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Services are long-lived Ember objects that can be used in different parts of
    your application. They are good to use with sessions, WebSockets, geolocation,
    logging, and more. They can be made available to the rest of the application using
    `Ember.inject.service`, which is a method that can retrieve services and make
    them available.
  prefs: []
  type: TYPE_NORMAL
- en: DI can be used to inject services into many different parts of the Ember application.
    Ember's architecture uses factories that are registered by `Ember.Application`.
    We can inject into all routes, components, and controllers using the `Application.inject`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Managing basic authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In any real-world Ember application, at some point, you'll need to deal with
    authentication. For example, users might need to send their credentials to identify
    themselves to the server, or authenticated users may need access to protected
    parts of the application.
  prefs: []
  type: TYPE_NORMAL
- en: An important aspect of authentication is protecting information based on the
    logged in user. This can be done by creating sessions with the use of tokens.
    In this recipe, we'll create a simple token-based authentication with an Express
    server. This will help us understand the basics. In the next section, we'll go
    over using OAuth2 with Ember Simple Auth.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a new application, generate these files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will generate all the scaffolding that we need for our application. The
    `students` route will be protected. It will only populate information from the
    server if the user is authenticated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `ember g server index` command will generate a node Express mock server
    for us. In the previous chapters, we used Ember CLI Mirage to do all our mock
    tests. The Express server generated by Ember is not as powerful. However, it will
    be easier to set up our fake server and authentication example. Be aware that
    when deploying an Ember application to production, the Ember server will not be
    included. It will, however, automatically start when running the `ember serve`
    command.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a new service called session that will handle our authentication and
    keep track of authenticated users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This service will be injected into our login controller. This will keep track
    of authenticated users and send Ajax requests to the server. The `authenticate`
    method accepts the login name and password. These values are sent to the server
    using an HTTP `POST` method to `/token`. If the login information is correct,
    a token is returned and saved. If not, an error will be returned. We'll deal with
    the error in the login controller later.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `token` property will be used to keep track whether the user is authenticated
    or not.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the Express server `index.js` file. Add a route for `token`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is our node Express server. It will run when we start the Ember server.
    When the HTTP `POST` `/token` request is sent to the server, it will check the
    body `username` and `password`. For this example, we'll just hardcode them as
    `'erik'` and `'secretcode'`. If these match, it returns `access_token`. If not,
    it returns an invalid message.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The access token will be saved in the session service. We can use this token
    to authenticate future requests to the server.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `application.js` file. Add a new authorization header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In our application, accessing the students route will trigger a request to
    the server. The server will respond to authenticated users only. The server expects
    an authorization bearer header with every Ember Data request. We can do this using
    the `headers` `computed` property and returning the `Authorization: Bearer` header
    with the secret token from the service. Every request to the server, using Ember
    Data, will send this header.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the Express server index information in order to return information
    to the application if the token matches:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Above `app.post`, you can add `app.get` for the `students` route. Ember will
    trigger this HTTP GET request whenever it enters the `/students` route. The server
    will check whether the request header has the secret code. If it matches, it returns
    the proper JSON data for the `students` route. If not, it returns a 401 error.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Verify the route and model information for students:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Earlier, we generated this file with two properties, `name` and `age`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The students route will send an HTTP GET request to `/students` to retrieve
    the students model. As we defined the application to use the REST adapter, Ember
    will expect the data in the REST format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The students template uses the `each` helper to iterate through the model returned
    from the server. It displays each `name` and `age`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the login username and property information to the login template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This template uses the `input` helper for the `loginName` and `password` properties.
    The button triggers the `authenticate` action.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the login controller to handle the `authenticate` action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The controller has several properties. It retrieves the session information
    service and uses the `authenticate` method to send the login information to the
    server. The `authenticate` method returns a promise. If it's successful, the application
    transitions to the `students` route. If it's not successful, an error is displayed
    in an alert box. In this example, we are using the ES6 arrow function. The `()=>`
    arrow function is a little shorter than using a function expression and it also
    lexically binds this variable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the index with a link to log in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is just a simple link to the login route.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start the server and navigate to the login route. You'll see the following image:![How
    to do it...](img/00063.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To log in, enter the username `'erik'` and password `'password'`. After clicking
    `Login`, an HTTP POST request will be sent to the server with the name and password
    information. The Express server that we had set up earlier will respond with the
    token, and the session service will save it. The application will then transition
    to the students route. The following screen will be displayed:![How to do it...](img/00064.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When this route loads, an HTTP GET request will be sent to `/students`. The
    Express server will check to make sure that the authorization bearer header has
    the correct secret code. It then will respond with the JSON data that Ember will
    display.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the username or password does not match, the following alert box will be
    displayed:![How to do it...](img/00065.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Token-based authentication requires the client to send over credentials to the
    server. If authorized, the server then sends back a token that the client saves
    and uses on subsequent requests to the server. If the token is not present, the
    server may not return data to the client.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe is a simple example of using authentication. It lacks proper error
    handling and session persistence. Nevertheless, it gives you an idea of how authentication
    works.
  prefs: []
  type: TYPE_NORMAL
- en: Using OAuth2 with Ember Simple Auth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OAuth2 specifies authorization flows for web applications. We can use it with
    Ember to secure our application and provide data to only those users that are
    authorized. In this recipe, we'll look at using OAuth2 with **Ember Simple Auth**
    (**ESA**), a robust add-on for Ember.
  prefs: []
  type: TYPE_NORMAL
- en: ESA will handle our client-side session and authentication and send the requests
    to the server. It's very customizable and extensible. Although it can be complicated,
    just like our last recipe, we'll create a protected students route that can be
    accessed by authorized users only.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For the purposes of this example, we''ll need an OAuth2 server. Setting up
    an OAuth2 server is beyond the scope of this recipe. There are several OAuth2
    libraries out there that you can use to set one up. I recommend the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Rails**: [https://github.com/doorkeeper-gem/doorkeeper](https://github.com/doorkeeper-gem/doorkeeper)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Express**: [https://github.com/thomseddon/node-oauth2-server](https://github.com/thomseddon/node-oauth2-server)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a new Ember application, run the generator command to create the required
    files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will generate the scaffolding that we need to begin our application. The
    last command installs the add-on for ESA.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We'll begin by setting up the Ember Simple Auth authenticator and authorizer
    for OAuth2\. We need to set this up so that a user can authenticate with the server.
    Create two new directories in the `app` folder called `authenticators` and `authorizers`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new file called `oauth2-custom.js` to the `authenticators` directory
    and `application.js` to the `authorizers` folder. Add this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `authenticators` file is used by ESA whenever a user logs in. We can overwrite
    anything in the authenticator if needed. The `makeRequest` method is used to send
    messages to the server. By default, ESA will make an HTTP `POST` request to `/token`
    with the username and password in the form field.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Unfortunately, many OAuth2 servers require a header called `Authorization`
    `Basic` with a secret client ID and client secret when authenticating for the
    first time with a server. To fix this, we can extend the `makeRequest` method
    with our own Ajax request. This will be used when we log in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `authorizers` file is used by ESA to tell which type of authentication we
    are using. In this example, we are using Oauth2 as defined by `OAuth2Bearer.extend()`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the adapter and add the ESA data adapter mixin to the `application.js`
    file in the `adapters` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The adapter tells Ember to make all requests to the `/api` namespace. The ESA
    `DataAdapterMixin` is used to define the authorizer that the application will
    use. In this case, all Ember Data requests will use the OAuth2 application authorizer
    that we defined earlier. In other words, any request sent to the server using
    Ember Data will include the session data token, if it exists.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s update our login-comp component template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will submit the `login` and `password` to the `authenticate` action setup
    in our component.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the login page component with the `authenticate` action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we are using ESA, we have access to a `session` service. This `session` service
    has an `authenticate` method that uses `authenticator` that we created earlier.
    In the preceding code, we used the `this.get()` method to get `login` and `password`
    from our template. We then called the `authenticate` method on our service, passing
    in our `authenticator`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If the server returns a successful message, then we call `transition`, a method
    that is passed to the component. If not, an alert box pops up telling the user
    that their login was not successful.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the login page component to the login template, and update the login controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This calls the login component and passes in the parent action, `loggedIn`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This action transitions the application to the `students` route. It's triggered
    only with a successful login. It's also the name of the action passed in the login
    page component.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the students controller, route, and template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The template displays the information from the server using the `each` helper.
    A `logout` button action will log the user out:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `logout` action invalidates the session. Invalidating the session revokes
    the token so that it is no longer available:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This route returns all the information for the `student` model. You'll notice
    that `AuthenticatedRouteMixin` is added. This tells Ember to make this route available
    only if it's authenticated by the server. If it's not, it will route back to the
    application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the application mixin to the application route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: ESA's `ApplicationRouteMixin` will catch any errors and transition to the login
    route.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the index template with a link to the login route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `link-to` helper links to the `login` route.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the Ember server and OAuth2 server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `--proxy` argument tells Ember to proxy all server requests to `localhost`
    at port `3000`. We'll assume, in this example, that the OAuth2 server is running
    on port `3000` in your local box.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A successful login will look like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/00066.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'It will then redirect to the students route. This route will send a request
    to the server with an authorization bearer request with the correct token. It
    will receive the student data so that it can be displayed to the user:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/00067.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Accessing this route without being logged in causes redirection to the login
    page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Ember Simple Auth add-on manages the session, authentication, authorization,
    persistence, and communication with a server. It has its own built-in session
    service that makes it easy to manage.
  prefs: []
  type: TYPE_NORMAL
- en: OAuth2 is a specification of a type of flow when doing authentication in web
    apps. As Ember is a single-page application, there is not much security on the
    application side. It must rely on a server to authenticate and manage tokens.
    ESA makes this possible by handling all the work needed to send and communicate
    with the server.
  prefs: []
  type: TYPE_NORMAL
- en: Using Liquid Fire to create transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Ember Liquid Fire** is an add-on for Ember that handles animations and transitions.
    It''s a toolkit of sorts that splits its responsibilities between template headers,
    transition maps, and transitions.'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll create a few transitions to see how this add-on works.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a new Ember application, generate these files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will generate the scaffolding for the `tut1` and `tut2` routes as well
    as install the `liquid-fire` add-on.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a new `transitions.js` file in the root of the `app` folder. Add a few
    transitions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Liquid Fire requires a transitions map file. There are a number of predefined
    transitions that you have available:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`toLeft`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`toRight`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`toUp`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`toDown`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`crossFade`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fade`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Each one behaves as you would expect. The `toLeft` transition will create a
    transition animation where the page moves from left to right. The `toRight` transition
    is the exact opposite. You can also create your own animations if needed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The map tells us which transitions to use when moving from one route to another.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the application template with the Liquid Fire outlet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To use Liquid Fire transitions, we must use `liquid-outlet`. This is used when
    transitioning between routes. Here are all the template helpers available:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`{{#liquid-outlet}}`: This transitions between routes'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{{#liquid-with}}`: This transitions between models or contexts in a single
    route'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{{#liquid-bind}}`: This updates to simple bound values'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{{#liquid-if}}`: This switches between true and false branches in a `#if`
    statement'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{{#liquid-spacer}}`: This provides a smoothly growing/shrinking container
    that animates whenever the contained **Document Object Model** (**DOM**) mutates'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the index template file, add a link to the `tut1` route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `link-to` helper transitions to the `tut1` route. The liquid outlet will
    display the `tut1` route when it renders.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `tut1` and `tut2` route templates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'All this does is have a link to the second route `tut2`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This has a link back to `tut1`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run the server and you'll see the transitions as you click on the links:![How
    to do it...](img/00068.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is what it looks like mid-transition using crossfade from the application
    route to the `tut1` route.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Liquid Fire is a versatile add-on for Ember that brings transitions and animation
    to life. It uses a simple transition map and template helpers to make things easier.
    Under the hood, Liquid Fire uses many tricks to make these animations possible.
    It's extensible, so you can create your own transitions as well.
  prefs: []
  type: TYPE_NORMAL
- en: Working with HTML5 drag and drop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drag and drop is a part of the HTML5 standard. It allows the user to grab objects
    in the DOM and drop them at different locations. Any element can be draggable
    if the browser supports it. Most modern browsers do.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see an example of dragging an IMG file to a drop zone
    on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a new application, generate these files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `drag-drop-zone` component will represent the area where each item will
    be dropped. The `drag-drop` component will be the item to be dropped.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `drag-drop-zone.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This component has a few special events attached to it. Ember has built-in events
    for `dragLeave`, `dragOver`, and `drop`. These will fire whenever items are dragged
    on top of the component. Remember that all components render as `div` tags. We
    can use the `classNames` property to add more classes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `classNameBindings` property allows classes to be added to the component
    as if they were properties. In other words, `dragClass` can be set dynamically
    in the component. We'll use this to change the color of the `drop` zone when items
    are dragged over it. When items are dropped, the `drop` event is triggered.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the drag drop component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As mentioned earlier, normally, components render as a `div` tag. However, we
    can change this using the `tagName` property. In the `drag-drop` component, we
    are creating an `image` tag. The `dragStart` event available in Ember. In this
    example, we are setting the data to the target ID.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To drag items in HTML5, you must have a `draggable` attribute on the tag. It
    also must be set to `true`. We'll use `attributeBindings` to make this possible.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `app.css` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is some basic `css` that creates a border around the `drop` zone and changes
    the color to `red` when an item is about to be dropped.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The last step is to add the components to the application template file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will render the two components to the application template.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Render the page and you'll see the picture and dropzone:![How to do it...](img/00069.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can drag the picture into the box:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/00070.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The box will turn red before the item is dropped and back to black after it's
    dropped.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The HTML5 standard allows dragging and dropping elements. Ember has several
    built-in events that we can use in components and controllers. The `dragLeave`,
    `dragOver`, `drop`, and `dragStart` methods can all be used to capture events
    to allow dragging and dropping.
  prefs: []
  type: TYPE_NORMAL
- en: Learning Bootstrap with Ember.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bootstrap, formerly known as Twitter Bootstrap, is a popular, free, and open
    source collection of tools to create websites and applications. It contains several
    templates for typography, forms, buttons, and navigation.
  prefs: []
  type: TYPE_NORMAL
- en: You can use Bootstrap to make nice and simple user interfaces. In this recipe,
    we'll use it to create a drop-down menu.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a new Ember application, use Bower to install the latest version of Bootstrap:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This uses Bower's frontend package manager to install Bootstrap. It will be
    saved as a development dependency in the `bower.json` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `ember-cli-build.js` file and add the libraries for Ember Bootstrap:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `app.import` statement takes the asset path as the first and only argument.
    This is standard for non-AMD assets. Once this is loaded, we can use Bootstrap
    anywhere in our application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a drop-down button to the application template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will add a drop-down button.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start the server and you'll see the rendered button:![How to do it...](img/00071.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After clicking on the button, the menu will be displayed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s install the Bootstrap Ember add-on and comment out `app.imports` in
    the `ember-cli-build.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ember Bootstrap is an add-on that includes all the normal `css` and icon assets
    in your project. It also includes a set of native Ember components. It does not
    use the Bootstrap JavaScript file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we are using the add-on, we must comment out the Bootstrap files. They are
    already included.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the application template file using the new Ember Bootstrap components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: All the Ember Bootstrap components start with `bs`. The `{{bs-dropdown}}` component
    creates a drop-down menu that displays links to the user.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using Ember Bootstrap can be a little cleaner and easier than installing Bootstrap
    with Bower.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Load the server and you'll see the following image:![How to do it...](img/00072.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is using Ember Bootstrap to create a menu.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bootstrap is a versatile set of tools that can help you design a frontend quickly.
    Ember accepts assets using a library called Broccoli. Broccoli is an asset pipeline—it
    helps build the application. The `app.import` statement is used to bring AMD and
    non-AMD assets in the application.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, the Ember Bootstrap library can also be used. It has easy-to-use
    components built-in that make it easy to add buttons and menus.
  prefs: []
  type: TYPE_NORMAL
