["```js\nnpm start \n```", "```js\n{\n    \"extends\": \"@tsconfig/node20/tsconfig.json\",\n     \"compilerOptions\": {                      \n         \"rootDir\": \"src\",  \n         \"outDir\": \"dist\",\n        ** \"allowJs\": true**\n     },\n     **\"include\": [\"src/**/*\"]**\n} \n```", "```js\nimport { test } from \"node:test\";\ntest(\"my first test\", () => {\n    // do nothing - test will pass\n}); \n```", "```js\nnode --test dist \n```", "```js\n...\nmy first test (0.5989ms)\ntests 1\nsuites 0\npass 1\nfail 0\ncancelled 0\nskipped 0\ntodo 0\nduration_ms 51.685\n... \n```", "```js\n...\n\"scripts\": {\n    \"server\": \"tsc-watch --noClear --onsuccess \\\"node dist/server.js\\\"\",\n    \"client\": \"webpack serve\",\n    \"start\": \"npm-run-all --parallel server client\",\n    **\"test\": \"node --test --watch dist\"**\n},\n... \n```", "```js\nnpm run test \n```", "```js\n...\nmy first test (0.5732ms)\n... \n```", "```js\nimport { test } from \"node:test\";\n**test(\"my new test name\", () => {**\n    // do nothing - test will pass\n}); \n```", "```js\n...\nmy first test (0.5732ms)\n**my new test name (0.6408ms)**\n... \n```", "```js\nimport { test } from \"node:test\";\ntest(\"my new test name\", () => {\n    **throw new Error(\"something went wrong\");**\n}); \n```", "```js\n...\nmy first test (0.5732ms)\nmy new test name (0.6408ms)\n**my new test name (0.6288ms)**\n **Error: something went wrong**\n **at TestContext.<anonymous> (C:\\webapp\\dist\\readHandler.test.js:6:11)**\n... \n```", "```js\nimport { Request, Response } from \"express\";\nexport const readHandler = (req: Request, resp: Response) => {   \n    resp.cookie(\"sessionID\", \"mysecretcode\");\n    req.pipe(resp);\n} \n```", "```js\nimport { test } from \"node:test\";\n**test(\"readHandler tests\", (testCtx) => {**\n **// Arrange - set up the test**\n **const req = {**\n**pipe: testCtx.mock.fn()**\n **};**\n **const resp = {**\n **cookie: testCtx.mock.fn()**\n **};**\n **// TODO - Act - perform the test**\n\n **// TODO - Assert - verify the results**\n}); \n```", "```js\n`fn(orig, impl)` \n```", "```js\n`method(obj, name, impl, opts)` \n```", "```js\n`getter(obj, name, impl, opts)` \n```", "```js\n`setter(obj, name, impl, opts)` \n```", "```js\nimport { test } from \"node:test\";\n**import { readHandler } from** **\"./readHandler\";**\ntest(\"readHandler tests\", (testCtx) => {\n    // Arrange - set up the test\n    const req = {\n        pipe: testCtx.mock.fn()\n    };\n    const resp = {\n        cookie: testCtx.mock.fn()\n    };\n    **// Act - perform the test**\n **readHandler(req, resp);**\n\n    // TODO - Assert - verify the results\n}); \n```", "```js\n`callCount()` \n```", "```js\n`calls` \n```", "```js\n`arguments` \n```", "```js\n`result` \n```", "```js\n`error` \n```", "```js\n`stack` \n```", "```js\nimport { test } from \"node:test\";\nimport { readHandler } from \"./readHandler\";\ntest(\"readHandler tests\", (testCtx) => {\n    // Arrange - set up the test\n    const req = {\n        pipe: testCtx.mock.fn()\n    };\n    const resp = {\n        cookie: testCtx.mock.fn()\n    };\n    // Act - perform the test\n    readHandler(req, resp);\n **// Assert - verify the results**\n **if (req.pipe.mock.callCount() !== 1** **||**\n **req.pipe.mock.calls[0].arguments[0] !== resp) {**\n **throw new Error(\"Request not piped\"****);**\n **}**\n **if (resp.cookie.mock.callCount() === 1) {**\n **const [name, val] = resp.cookie.mock.calls[0****].arguments;**\n **if (name !== \"sessionID\" || val !== \"mysecretcode\") {**\n **throw new Error(\"Cookie not set correctly\");**\n **}**\n **} else {**\n **throw** **new Error(\"cookie method not called once\");**\n **}**\n}); \n```", "```js\n`assert(val)` \n```", "```js\n`equal(v1, v2)` \n```", "```js\n`notEqual(v1, v2)` \n```", "```js\n`deepStrictEqual(v1, v2)` \n```", "```js\n`notDeepStrictEqual(v1, v2)` \n```", "```js\n`match(str, regexp)` \n```", "```js\n`doesNotMatch(str, regexp)` \n```", "```js\nimport { test } from \"node:test\";\nimport { readHandler } from \"./readHandler\";\n**import { equal } from \"assert\";**\ntest(\"readHandler tests\", (testCtx) => {\n    // Arrange - set up the test\n    const req = {\n        pipe: testCtx.mock.fn()\n    };\n    const resp = {\n        cookie: testCtx.mock.fn()\n    };\n    // Act - perform the test\n    readHandler(req, resp);\n    // Assert - verify the results\n    **equal****(req.pipe.mock.callCount(), 1);**\n **equal(req.pipe.mock.calls[0].arguments****[0], resp);**\n **equal(resp.cookie.mock.callCount(), 1);**\n **equal(resp.cookie.mock.calls****[0].arguments[0], \"sessionID\");**\n **equal(resp.cookie.mock.calls[0].arguments****[1], \"mysecretcode\");**\n}); \n```", "```js\nimport { Request, Response } from \"express\";\n**import { readFile } from \"fs\";**\nexport const readHandler = (req: Request, resp: Response) => {   \n    **readFile****(\"data.json\", (err, data) => {**\n **if (err != null) {**\n **resp.writeHead(500, err.message);**\n **} else {**\n **resp.setHeader****(\"Content-Type\", \"application/json\")**\n **resp.write(data);**\n **}**\n **resp.end();** \n **});**\n} \n```", "```js\nimport { test } from \"node:test\";\nimport { readHandler } from \"./readHandler\";\nimport { equal } from \"assert\";\n**import fs from \"fs\";**\ntest(\"readHandler tests\", async (testCtx) => {\n    // Arrange - set up the test\n   ** const data = \"****json-data\";**\n **testCtx.mock.method(fs, \"readFile\", (file, cb) => cb(undefined, data));**\n **const req = {};**\n\n **const resp = {**\n**setHeader: testCtx.mock.fn(),**\n **write: testCtx.mock.fn(),**\n **end: testCtx.mock.fn()**\n **};**\n    // Act - perform the test\n    **await readHandler(req, resp);**\n    // Assert - verify the results\n  **  equal(resp.setHeader.mock.calls[0].arguments[0], \"****Content-Type\");**\n **equal(resp.setHeader.mock.calls[0].arguments[1], \"application/json\");**\n **equal(resp.****write.mock.calls[0].arguments[0], data);**\n **equal(resp.end.mock.callCount(),** **1);**\n}); \n```", "```js\n...\ntestCtx.mock.**method**(fs, \"readFile\", (file, cb) => cb(undefined, data));\n... \n```", "```js\n...\nimport fs from \"fs\";\n... \n```", "```js\nimport { Request, Response } from \"express\";\n**import { readFile } from \"fs/promises\";**\n**export const readHandler = async (req: Request, resp: Response) => {** \n**try {**\n **resp.setHeader(\"Content-Type\", \"application/json\")**\n **resp.write(await readFile(\"data.json\"));**\n **} catch (err) {**\n **resp.writeHead(****500);**\n **}**\n **resp.end();**\n} \n```", "```js\nimport { test } from \"node:test\";\nimport { readHandler } from \"./readHandler\";\nimport { equal } from \"assert\";\n**import fs from \"fs/promises\";**\ntest(\"readHandler tests\", async (testCtx) => {\n    // Arrange - set up the test\n    const data = \"json-data\";\n    **testCtx.mock.method(fs, \"readFile\", async () => data);**\n    const req = {};\n\n    const resp = {\n        setHeader: testCtx.mock.fn(),\n        write: testCtx.mock.fn(),\n        end: testCtx.mock.fn()\n    };\n    // Act - perform the test\n    await readHandler(req, resp);\n    // Assert - verify the results\n    equal(resp.setHeader.mock.calls[0].arguments[0], \"Content-Type\");\n    equal(resp.setHeader.mock.calls[0].arguments[1], \"application/json\");\n    equal(resp.write.mock.calls[0].arguments[0], data);\n    equal(resp.end.mock.callCount(), 1);\n}); \n```", "```js\nimport { test } from \"node:test\";\nimport { readHandler } from \"./readHandler\";\nimport { equal } from \"assert\";\nimport fs from \"fs/promises\";\n**const createMockResponse = (testCtx) => ({**\n **writeHead****: testCtx.mock.fn(),**\n **setHeader: testCtx.mock.fn(),**\n **write: testCtx.mock.fn(),**\n **end: testCtx.mock****.fn()** \n**});**\ntest(\"readHandler tests\", async (testCtx) => {\n    // Arrange - set up the test\n    const req = {};\n\n    **// const resp = {**\n **//     setHeader: testCtx.mock.fn(),**\n **//     write: testCtx.mock.fn(),**\n **//     end: testCtx.mock.fn()**\n **// };**\n **// Test the successful outcome**\n **await testCtx.test(\"Successfully reads file\", async (innerCtx) => {**\n **// Arrange - set up the test**\n **const data = \"json-data\";**\n **innerCtx.mock****.method(fs, \"readFile\", async () => data);**\n **const resp = createMockResponse(innerCtx);**\n **// Act - perform the test**\n **await readHandler(req, resp);**\n **// Assert - verify the results**\n **equal****(resp.setHeader.mock.calls[0].arguments[0], \"Content-Type\");**\n **equal(resp.setHeader.mock****.calls[0].arguments[1], \"application/json\");**\n **equal(resp.write.mock.calls[0****].arguments[0], data);**\n **equal(resp.end.mock.callCount(), 1);**\n **});**\n **// Test the failure outcome**\n **await testCtx.test****(\"Handles error reading file\", async (innerCtx) => {**\n **// Arrange - set up the test**\n **innerCtx.mock.method(fs, \"readFile\",** \n **() => Promise.reject(\"file error\"****));**\n **const resp = createMockResponse(innerCtx);**\n **// Act - perform the test**\n **await readHandler(req, resp);**\n\n **// Assert - verify the results**\n **equal(resp.writeHead.mock.calls****[0].arguments[0], 500);**\n **equal(resp.end.mock.callCount(), 1);**\n **});**\n}); \n```", "```js\n...\nreadHandler tests\n  Successfully reads file (0.5485ms)\n  Handles error reading file (0.2952ms)\nreadHandler tests (2.0538ms)\n... \n```", "```js\nnpm run client \n```", "```js\n{\n    \"extends\": \"@tsconfig/node20/tsconfig.json\",\n     \"compilerOptions\": {                      \n         \"rootDir\": \"src\",  \n         \"outDir\": \"dist\",\n         \"allowJs\": true,\n         **\"sourceMap\": true**\n     },\n     \"include\": [\"src/**/*\"]\n} \n```", "```js\nimport { Request, Response } from \"express\";\nimport { readFile } from \"fs/promises\";\nexport const readHandler = async (req: Request, resp: Response) => {   \n    try {\n        resp.setHeader(\"Content-Type\", \"application/json\")\n        resp.write(await readFile(\"data.json\"));\n        **debugger**\n    } catch (err) {\n        resp.writeHead(500);\n    }\n    resp.end();\n} \n```", "```js\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"type\": \"node\",\n            \"request\": \"launch\",\n            \"name\": \"Launch Program\",\n            \"skipFiles\": [\n                \"<node_internals>/**\"\n            ],\n           ** \"program\": \"${workspaceFolder}/dist/server.js\"****,**\n            \"preLaunchTask\": \"tsc: build - tsconfig.json\",\n            \"outFiles\": [\n                \"${workspaceFolder}/dist/**/*.js\"\n            ]\n        }\n    ]\n} \n```", "```js\nnode --inspect dist/server.js \n```", "```js\n**Debugger listening on ws://127.0.0.1:9229/faed1dec-fbb0-4425-bd87-410c98980716**\nFor help, see: https://nodejs.org/en/docs/inspector\nHTTP Server listening on port 5000\nDebugger attached. \n```"]