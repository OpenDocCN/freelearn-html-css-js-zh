["```js\nExt.define('MyApp.model.Deck', {\n    extend: 'Ext.data.Model',\n    config: {\n        fields: [\n            {\n                name: 'id'\n            },\n            {\n                name: 'name'\n            }\n        ]\n    }\n}); \n```", "```js\nExt.define('MyApp.model.Card', {\n    extend: 'Ext.data.Model',\n    config: {\n        fields: [\n            {\n                name: 'id'\n            },\n            {\n                name: 'deckID'\n            },\n            {\n                name: 'question'\n            },\n            {\n                name: 'answer'\n            }\n        ]\n    }\n});\n```", "```js\nExt.define('MyApp.store.DeckStore', {\n    extend: 'Ext.data.Store',\n    requires: [\n        'MyApp.model.Deck'\n    ],\n    config: {\n        autoLoad: true,\n        model: 'MyApp.model.Deck',\n        storeId: 'DeckStore',\n        proxy: {\n            type: 'localstorage',\n            id: 'Decks'\n        },\n        fields: [\n            {\n                name: 'id',\n                type: 'int'\n            },\n            {\n                name: 'name',\n                type: 'string'\n            }\n        ]\n    }\n});\n```", "```js\nExt.define('MyApp.store.CardStore', {\n    extend: 'Ext.data.Store',\n    requires: [\n        'MyApp.model.Card'\n    ],\n    config: {\n        autoLoad: true,\n        model: 'MyApp.model.Card',\n        storeId: 'CardStore',\n        proxy: {\n            type: 'localstorage',\n            id: 'Cards'\n        },\n        fields: [\n            {\n                name: 'id',\n                type: 'int'\n            },\n            {\n                name: 'deckID',\n                type: 'int'\n            },\n            {\n                name: 'question',\n                type: 'string'\n            },\n            {\n                name: 'question',\n                type: 'string'\n            }\n        ]\n    }\n});\n```", "```js\nExt.define('MyApp.view.Main', {\n    extend: 'Ext.tab.Panel',\n\n    config: {\n        id: 'mainView',\n        items: [],\n        tabBar: {\n            docked: 'bottom'\n        }\n});\n```", "```js\nExt.Loader.setConfig({\n    enabled: true\n});\n\nExt.application({\n    models: [\n        'Deck',\n        'Card'\n    ],\n    stores: [\n        'DeckStore',\n        'CardStore'\n    ],\n    views: [\n        'Main'\n    ],\n    name: 'MyApp',\n\n    launch: function() {\n\n        Ext.create('MyApp.view.Main', {fullscreen: true});\n    }\n\n});\n```", "```js\n{\n    xtype: 'container',\n    layout: {\n        type: 'fit'\n    },\n    title: 'Decks',\n    iconCls: 'info',\n    items: [\n        {\n            xtype: 'list',\n            itemTpl: [\n                '<div>{name}</div>'\n            ],\n            store: 'DeckStore'\n        },\n        {\n            xtype: 'titlebar',\n            docked: 'top',\n            title: 'Decks',\n            items: [\n                {\n                    xtype: 'button',\n                    itemId: 'mybutton',\n                    text: 'Add',\n                    align: 'right'\n                }\n            ]\n        }\n    ]\n}\n```", "```js\n{\n    xtype: 'container',\n    title: 'Cards',\n    iconCls: 'info',\n    items: [\n        {\n            xtype: 'titlebar',\n            docked: 'top',\n            items: [\n                {\n                    xtype: 'button',\n                    itemId: 'mybutton1',\n                    text: 'Add',\n                    align: 'right'\n                },\n                {\n                    xtype: 'button',\n                    text: 'Shuffle'\n                }\n            ]\n        },\n        {\n            xtype: 'carousel'\n        }\n    ]\n}\n```", "```js\nExt.define('MyApp.view.addDeckSheet', {\n    extend: 'Ext.Sheet',\n    alias: 'widget.addDeckSheet',\n\n    config: {\n        id: 'addDeckSheet',\n        items: [\n            {\n                xtype: 'textfield',\n                margin: '0 0 10 0',\n                label: 'Name'\n            },\n            {\n                xtype: 'button',\n                ui: 'confirm',\n                text: 'Save',\n                itemID: 'saveDeckButton'\n            },\n            {\n                xtype: 'button',\n                itemId: 'cancelDeckButton',\n                ui: 'decline',\n                text: 'Cancel'\n            }\n        ],\n        listeners: [\n            {\n                fn: 'hideDeckSheet',\n                event: 'tap',\n                delegate: '#cancelDeckButton'\n            }\n        ]\n    },\n\n    hideDeckSheet: function(button, e, options) {\n        button.up('sheet').hide();\n    }\n\n});\n```", "```js\nExt.define('MyApp.view.addCardSheet', {\n    extend: 'Ext.Sheet', \n    config: {\n        id: 'addCardSheet',\n        items: [\n            {\n                xtype: 'container',\n                html: 'Deck Name Here',\n                style: 'color: #FFFFFF; text-align:center;'\n            },\n            {\n                xtype: 'textareafield',\n                id: 'cardQuestion',\n                margin: '0 0 10 0',\n                label: 'Question'\n            },\n            {\n                xtype: 'textareafield',\n                id: 'cardAnswer',\n                margin: '0 0 10 0',\n                label: 'Answer'\n            },\n            {\n                xtype: 'button',\n                ui: 'confirm',\n                itemId: 'saveCardButton',\n                text: 'Save'\n            },\n            {\n                xtype: 'button',\n                itemId: 'cancelCardButton',\n                ui: 'decline',\n                text: 'Cancel'\n            }\n\n        ],\n        listeners: [\n            {\n                fn: 'hideCardSheet',\n                event: 'tap',\n                delegate: '#cancelCardButton'\n            }\n        ]\n    },\n    hideCardSheet: function(button, e, options) {\n        button.up('sheet').hide();\n    }\n});\n```", "```js\n<script type=\"text/javascript\" src=\"img/socket.io.js\"></script>\n<script type=\"text/javascript\" src=\"img/sencha-io-debug.js\"></script>\n```", "```js\nExt.Loader.setPath({\n    'Ext.io': 'lib/io/src/io',\n    'Ext.cf': 'lib/io/src/cf'\n});\n```", "```js\nconfig: {\n    io: {\n    appId: 'YouAppIDHere',\n    appSecret: 'YouAppSecretHere'\n  }\n}\n```", "```js\nExt.define('MyApp.store.DeckStore', {\n    extend: 'Ext.data.Store',\n    requires: [\n        'MyApp.model.Deck'\n    ],\n\n    config: {\n        autoLoad: true,\n        model: 'MyApp.model.Deck',\n        storeId: 'DeckStore',\n proxy: {\n type: 'syncstorage',\n id: 'decks',\n owner: 'user',\n access: 'private'\n },\n autoLoad: true, \n autoSync: false\n    }\n});\n```", "```js\nExt.define('MyApp.controller.MyController', {\n    extend: 'Ext.app.Controller',\n    config: {\n        selectedDeck: false,\n        models: [\n          'Deck',\n          'Card'\n        ],\n        stores: [\n          'DeckStore',\n          'CardStore'\n        ],\n        views: [\n          'Main',\n          'addCardSheet',\n          'addDeckSheet',\n          'CardView'\n        ],\n   refs: {\n       addCardSheet: '#addCardSheet',\n       addCardSaveButton: '#addCardSheet button[text=\"Save\"]',\n       addDeckSheet: '#addDeckSheet',\n       addDeckSaveButton: '#addDeckSheet button[text=\"Save\"]',\n       deckList: '#deckList',\n       mainView: '#mainView',\n       shuffle: 'button[text=\"Shuffle\"]'\n   }\n  }\n});\n```", "```js\ncontrol: {\n    addCardSaveButton: {\n  tap: \"addCard\"\n    },\n    addDeckSaveButton: {\n  tap: \"addDeck\"\n    },\n    deckList: {\n  select: \"onDeckSelected\"\n    },\n    addCardSheet: {\n  show: \"updateCardSheetDeckInfo\"\n    },\n    shuffle: {\n  tap: 'shuffleDeck'\n    }\n}\n```", "```js\ninit: function() {\n  this.getApplication().sio.on({\n    authorized: this.onAuth,\n    logout: this.onLogout,\n    usermessage: this.onUserMessage,\n    scope: this\n  });\n}\n```", "```js\nonAuth: function(user) {\n Ext.getStore('DeckStore').sync();\n Ext.getStore('CardStore').sync();\n return true;\n}\n```", "```js\nonLogout: function() {\n  var deckStore = Ext.getStore('DeckStore');\n  deckStore.getProxy().clear();\n  deckStore.load();\n  var cardStore = Ext.getStore('CardStore');\n  cardStore.getProxy().clear();\n  cardStore.load();\n  return true;\n}\n```", "```js\n    onUserMessage: function(sender, message) {\n        var userId = sender.getUserId();\n        console.log(\"user got a message!\", arguments, userId);\n        Ext.getStore('DeckStore').sync(function() {\n            console.log(\"DeckStore sync callback\", arguments);\n        });\n        Ext.getStore('CardStore').sync(function() {\n            console.log(\"CardStore sync callback\", arguments);\n        });\n        return true;\n    }\n```", "```js\naddCard: function() {\n var cards = Ext.getStore('CardStore'),\n sheet = this.getAddCardSheet();\n cards.add({\n  deckID: this.getSelectedDeck().get('id'),\n  question: sheet.down('#cardQuestion').getValue(),\n  answer: sheet.down('#cardAnswer').getValue()\n });\n cards.sync(Ext.bind(this.syncCallback, this));\n sheet.down('#cardQuestion').setValue(\"\");\n sheet.down('#cardAnswer').setValue(\"\");\n sheet.hide();\n}\n```", "```js\nsyncCallback: function() {\n    console.log(\"broadcast update\", arguments);\n    this.getApplication().sio.getUser(function(user, error) {\n        if (user) {\n            console.log(\"user\", user);\n            user.send({\n                message: \"updated\"\n            },\n            function() {\n                console.log(\"send callback\");\n            }\n            );\n\n        }\n    });\n}\n```", "```js\naddDeck: function() {\n var decks = Ext.getStore('DeckStore'),\n sheet = this.getAddDeckSheet();\n decks.add({\n  name: sheet.down('textfield').getValue()\n });\n decks.sync(Ext.bind(this.syncCallback, this));\n sheet.down('textfield').setValue(\"\");\n sheet.hide();\n}\n```", "```js\nExt.define('MyApp.view.CardView', {\n extend: 'Ext.carousel.Carousel',\n alias: 'widget.flashcards',\n config: {\n  store: null,\n  indicator: false\n }\n});\n```", "```js\nxtype: 'carousel'\n```", "```js\nxtype: 'flashcards',\nstore: 'CardStore'\n```", "```js\nquestionTpl: '<div class=\"question qa\"><span class=\"count\">{number} of {total}</span><span class=\"question\">{question}</span></div>',\nanswerTpl: '<div class=\"question qa\"><span class=\"count\">{number} of {total}</span><span class=\"question\">{question}</span></div><div class=\"answer qa\"><span class=\"answer\">{answer}</span></div>'\n```", "```js\nconstructor: function(config) {\n   this.callParent(arguments);\n   this.getQuestionTpl().compile();\n   this.getAnswerTpl().compile();\n   this.setStore(Ext.getStore(this.getStore()));\n   this.getStore().on({\n       load: this.createCards,\n       refresh: this.createCards,\n       addrecords: this.createCards,\n       scope: this\n   });\n\n}\n```", "```js\ncreateCards: function() {\n   var store = this.getStore();\n   this.removeAll(); // removes all the old panels\n   if (store.getCount() > 0) {\n     store.each(this.createFlashCard, this); \n   } else {\n       this.add({xtype: 'panel', html: 'No Cards Available for this Deck.<br />Please click Add to add a card to this deck.'});\n   }\n   this.setActiveItem(0);\n}\n```", "```js\ncreateFlashCard: function(record, index, total) {\n  var data = Ext.apply({ total: total, number: (index + 1) }, record.data);\n  this.add({ xtype: 'panel', html: this.getQuestionTpl().apply(data), scrollable: 'vertical' });\n  this.add({ xtype: 'panel', html: this.getAnswerTpl().apply(data), scrollable: 'vertical' });\n}\n```", "```js\nonDeckSelected: function(list, record) {\n var cards = Ext.getStore('CardStore');\n this.setSelectedDeck(record);\n cards.clearFilter();\n cards.sort('id', 'ASC');\n cards.filter('deckID', record.get('id'));\n this.getMainView().down('#cardsPanel').enable();\n this.getMainView().setActiveItem(1);\n}\n```", "```js\nupdateCardSheetDeckInfo: function(sheet) {\nsheet.down('#deckName').setHtml(this.getSelectedDeck().get('name'));\n}\n```", "```js\nshuffleDeck: function() {\n Ext.getStore('CardStore').sort({\n  sorterFn: function() {\n   return (Math.round(Math.random())-0.5);\n  }\n });\n}\n```"]