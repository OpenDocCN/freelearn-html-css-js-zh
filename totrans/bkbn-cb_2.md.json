["```js\n      var InvoiceItemModel = Backbone.Model.extend({\n\n      });\n    ```", "```js\n      var invoiceItemModel = new InvoiceItemModel({\n        date: '2013-04-24',\n        description: 'Wooden Toy House',\n        price: 22,\n        quantity: 3\n      });\n    ```", "```js\nnewModel = invoiceItemModel.clone();\n```", "```js\n  var InvoiceItemModel = Backbone.Model.extend({\n\n    // Define default attributes.\n    defaults: {\n      date: '',\n      description: '',\n      price: 0,\n      quantity: 1\n    },\n  });\n```", "```js\n  var invoiceItemModel2 = new InvoiceItemModel({\n    description: 'Farm Animal Set',\n    price: 17\n  });\n\n  invoiceItemModel2.get('date') != undefined; // true\n  invoiceItemModel2.get('quantity'); // 1\n```", "```js\n  // Create new model object\n  var InvoiceItemModel = Backbone.Model.extend({\n\n    // Set default attributes.\n      defaults: {\n        description: '',\n        price: 0,\n        quantity: 1,\n\n    // Use function for multiline expression.\n        date: function() {\n          var date = new Date();\n\n        // Return attribute value.\n          return date.toISOString();\n        }\n      }\n    });\n```", "```js\n  // Crate new model\n  var InvoiceItemModel = Backbone.Model.extend({\n\n    // Set default values.\n    defaults: {\n      description: '',\n      price: 0,\n      quantity: 1,\n    },\n\n    // Set default values in initialize method.\n    // Following method is run after the object is created.\n    initialize: function() {\n\n      // Check that attribute is not initialized yet.\n        if (!this.has('date')) {\n          var date = new Date();\n\n        // Set attribute value.\n          this.set('date', date.toISOString());\n        }\n      }\n    }\n```", "```js\n    var quantity = invoiceItemModel.get('quantity');\n    ```", "```js\n    invoiceItemModel.set('quantity', 5);\n    ```", "```js\n            invoiceItemModel.set({\n              quantity: 5,\n              price: 10\n            });\n        ```", "```js\n    invoiceItemModel.unset('quantity');\n    ```", "```js\n    invoiceItemModel.clear();\n    ```", "```js\nif (!invoiceItemModel.has('quantity')) {\n  console.log('Quantity attribute does not exists!')\n}\n```", "```js\n  var hacker = new Backbone.Model({\n    name: \"<script>alert('xss')</script>\"\n  });\n  var escaped_name = hacker.escape('name');\n  // &lt;script&gt;alert('xss')&lt;/script&gt;\n```", "```js\n      invoiceItemModel.id = Math.random().toString(36).substr(2);\n    ```", "```js\n      var id = invoiceItemModel.id;\n    ```", "```js\n  var Meal = Backbone.Model.extend({\n    idAttribute: \"_id\"\n  });\n```", "```js\n      var InvoiceItemModel = Backbone.Model.extend({\n\n        // Define validation criteria.\n        validate: function(attrs) {\n          if (attrs.quantity <= 0) {\n            return \"quantity can't be negative or equal to zero\";\n          }\n        }\n      });\n    ```", "```js\n      var invoiceItemModel = new InvoiceItemModel({\n        description: 'Wooden Toy House',\n        price: 10\n      });\n\n        // Set value that is not valid.\n        invoiceItemModel.set('quantity', -1, {validate: true});\n    ```", "```js\n  invoiceItemModel.on(\"invalid\", function(model, error) {\n    console.log(error);\n  });\n```", "```js\n  var invoiceItemModel2 = new InvoiceItemModel({\n    description: 'Animal Farm',\n    price: 17\n  });\n    invoiceItemModel2.set({quantity: 0}, {\n      invalid: function(model, error) {\n        console.log(error);\n      },\n      validate: true\n    });\n```", "```js\n  var invoiceItemModel3 = new InvoiceItemModel({\n    description: 'Wooden Toy House',\n    price: 10,\n    quantity: -5\n  });\n    invoiceItemModel3.isValid(); // false\n```", "```js\n      var BuyerModel = Backbone.Model.extend({\n\n        // Use mutators\n        mutators: {\n\n        // Introduce virtual attribute.\n          fullName: {\n            get: function () {\n              return this.firstName + ' ' + this.lastName;\n            }\n          }\n        }\n      });\n    ```", "```js\n      var buyerModel = new BuyerModel();\n      buyerModel.set({\n        firstName: 'John',\n        lastName: 'Smith'\n      });\n\n        buyerModel.get('fullName'); // John Smith\n        buyerModel.get('firstName'); // John\n        buyerModel.get('lastName'); // Smith\n    ```", "```js\n      var BuyerModel = Backbone.Model.extend({\n\n        // Use mutators\n        mutators: {\n\n          // Introduce virtual attribute.\n          fullName: {\n            set: function (key, value, options, set) {\n              var names = value.split(' ');\n              this.set('firstName', names[0], options);\n              this.set('lastName', names[1], options);\n            }\n          }\n        }\n      });\n    ```", "```js\n        var buyerModel2 = new BuyerModel()\n        buyerModel2.set('fullName', 'Joe Bloggs');\n\n        buyerModel2.get('fullName'); // Joe Bloggs\n        buyerModel2.get('firstName'); // Joe\n        buyerModel2.get('lastName'); // Bloggs\n    ```", "```js\n  var BuyerModel = Backbone.Model.extend({\n\n    // Use mutators.\n    mutators: {\n\n      // Override existing attribute.\n      vip: {\n        get: function() {\n          return this.vip === true ? 'VIP' : 'Regular';\n        },\n        set: function (key, value, options, set) {\n          set(key, value === 'VIP', options);\n        }\n      }\n    }\n  });\n```", "```js\n    var buyerModel3 = new BuyerModel();\n    buyerModel2.set({\n      fullName: 'Mister X',\n      vip: 'VIP'\n    });\n\n    buyerModel2.get('vip'); // VIP\n    buyerModel2.attributes.vip; // true\n```", "```js\n    buyerModel3.on('mutators:set:fullName',\n      function (a, b, c, d) {\n        console.log('mutators:set:fullName is triggered');\n    });\n\n    buyerModel3.set({\n      fullName: 'Mister Y'\n    });\n```", "```js\n      var InvoiceItemModel = Backbone.Model.extend({\n\n        // Extend model instance with memento instance.\n        initialize: function() {\n          _.extend(this, new Backbone.Memento(this));\n        }\n      });\n    ```", "```js\n      var invoiceItemModel = new InvoiceItemModel();\n      invoiceItemModel.set('price', 10);\n    ```", "```js\n      invoiceItemModel.store();\n    ```", "```js\n      invoiceItemModel.set('price', 20);\n    ```", "```js\n      invoiceItemModel.restore();\n    ```", "```js\n      invoiceItemModel.get('price'); // 10\n    ```", "```js\n    // States stack demo.\n    var invoiceItemModel2 = new InvoiceItemModel();\n    invoiceItemModel2.set('price', 10);\n\n    // Save state and update value.\n    invoiceItemModel2.store();\n    invoiceItemModel2.set('price', 20);\n\n    // Save state and update value.\n    invoiceItemModel2.store();\n    invoiceItemModel2.set('price', 30);\n\n    // Restore last state and get value.\n    invoiceItemModel2.restore();\n    invoiceItemModel2.get('price'); // 20\n\n    // Restore last state and get value.\n    invoiceItemModel2.restore();\n    invoiceItemModel2.get('price'); // 10\n```", "```js\n    invoiceItemModel3.restart();\n```", "```js\n  var AnotherInvoiceItemModel = Backbone.Model.extend({\n\n    // Extend model instance with memento instance.\n    // Ignore restoring of description attribute.\n    initialize: function() {\n      _.extend(this, new Backbone.Memento(\n        this, {ignore: [\"description\"]}\n      ));\n    }\n  });\n```", "```js\n      var InvoiceModel = Backbone.Model.extend({\n\n        // Define workflow states.\n        workflow: {\n\n          // Define initial state.\n          initial: 'draft',\n\n          // Define state transitions.\n          events: [\n            { name: 'issue', from: 'draft', to: 'issued' },\n            { name: 'payout', from: 'issued', to: 'paid' },\n            { name: 'cancel', from: 'draft', to: 'canceled' },\n            { name: 'cancel', from: 'issued', to: 'canceled' },\n          ]\n        },\n\n        initialize: function() {\n          // Extend model instance with workflow instance.\n          // Set attribute name which contains status.\n          _.extend(this,\n            new Backbone.Workflow(this, {attrName: 'status'})\n          );\n        }\n      });\n    ```", "```js\n        var invoiceModel = new InvoiceModel();\n        invoiceModel.get('status'); // draft\n\n        invoiceModel.triggerEvent('issue');\n        invoiceModel.get('status'); // issued\n\n        invoiceModel.triggerEvent('payout');\n        invoiceModel.get('status') // paid\n    ```", "```js\n  var InvoiceModel = Backbone.Model.extend({\n\n    // Define workflow states.\n    // [workflow definition goes here]\n\n    initialize: function() {\n      // Extend model instance with workflow instance.\n      // Set attribute name which contains status.\n      _.extend(this,\n        new Backbone.Workflow(this, {attrName: 'status'})\n      );\n\n      // Bind reaction on event when status changes from\n      // draft to any.\n      this.bind('transition:from:draft', function() {\n        this.set('createdDate', new Date().toISOString());\n      });\n\n      // Bind reaction on event when status changes\n      // from any to paid.\n      this.bind('transition:to:paid, function() {\n        this.set('payoutDate', new Date().toISOString());\n      });\n    }\n  });\n```", "```js\n    var invoiceModel = new InvoiceModel();\n    invoiceModel.get('status'); // draft\n\n    invoiceModel.triggerEvent('issue');\n    invoiceModel.get('status'); // issued\n    invoiceModel.get('createdDate');\n    // 2012-05-01T12:00:10.234Z\n\n    invoiceModel.triggerEvent('payout');\n    invoiceModel.get('status') // paid\n    invoiceModel.get('payoutDate');\n    // 2012-05-01T12:00:10.238Z\n```", "```js\n      _.extend(Backbone.Model.prototype, Backbone.Validation.mixin);\n    ```", "```js\n      var BuyerModel = Backbone.Model.extend({\n\n        // Defining a validation criteria.\n        validation: {\n          name: {\n            required: true\n          },\n          email: {\n            pattern: 'email'\n          }\n        }\n      });\n    ```", "```js\n    var buyerModel = new BuyerModel();\n\n    // Set attribute values which do not validate.\n    buyerModel.set({\n      email: 'http://example.com'\n    }, {validate: true});\n\n    // Check if model is valid.\n    buyerModel.isValid(); // false\n    buyerModel.get('email'); // undefined\n```", "```js\n      var BuyerModel = Backbone.Model.extend({\n        validation: {\n          name: {\n            required: true\n          },\n        }\n      });\n    ```", "```js\n       var UserRegistrationModel = Backbone.Model.extend({\n        validation: {\n          terms: {\n            acceptance: true\n          },\n        }\n      });\n    ```", "```js\n      var BuyerModel = Backbone.Model.extend({\n        validation: {\n          age: {\n            min: 18\n          },\n        }\n      });\n    ```", "```js\n      var EventRegistrationModel = Backbone.Model.extend({\n        validation: {\n          guests: {\n            max: 2\n          },\n        }\n      });\n    ```", "```js\n      var ChildTicketModel = Backbone.Model.extend({\n        validation: {\n          age: {\n            range: [2, 12]\n          },\n        }\n      });\n    ```", "```js\n      var AddressModel = Backbone.Model.extend({\n        validation: {\n          zip: {\n            length: 5\n          },\n        }\n      });\n    ```", "```js\n      var UserModel = Backbone.Model.extend({\n        validation: {\n          password: {\n            minLength: 8\n          },\n        }\n      });\n    ```", "```js\n      var UserModel = Backbone.Model.extend({\n        validation: {\n          password: {\n            maxLength: 8\n          },\n        }\n      });\n    ```", "```js\n      var BuyerModel = Backbone.Model.extend({\n        validation: {\n          phoneNumber: {\n            rangeLength: [10, 12]\n          },\n        }\n      });\n    ```", "```js\n      var BuyerModel = Backbone.Model.extend({\n        validation: {\n          type: {\n            oneOf: [''person'', ''organization'']\n          },\n        }\n      });\n    ```", "```js\n      var UserModel = Backbone.Model.extend({\n        validation: {\n          password: {\n            required: true\n          },\n          passwordRepeat: {\n            equalTo: 'password'\n          }\n        }\n      });\n    ```", "```js\n    var BuyerModel = Backbone.Model.extend({\n      validation: {\n        email: {\n          pattern: 'email'\n        }\n      }\n    });\n    ```", "```js\n    var BuyerModel = Backbone.Model.extend({\n      validation: {\n        phoneNumber: {\n          pattern: /^(\\+\\d)*\\s*(\\(\\d{3}\\)\\s*)*\\d{3}(-{0,1}|\\s{0,1})\\d{2}(-{0,1}|\\s{0,1})\\d{2}$/\n        }\n      }\n    });\n    ```", "```js\nBackbone.Validation.bind(this);\n```", "```js\n(function($){\n\n  // Define new model.\n  var BuyerModel = Backbone.Model.extend({\n    defaults: {\n      name: '',\n      age: ''\n    },\n\n    // Define validation criteria.\n    validation: {\n      name: {\n        required: true\n      },\n      age: {\n        min: 18\n      }\n    }\n  });\n\n  var BuyerModelFormView = Backbone.View.extend({\n\n    // Bind Backbone.Validation to a view.\n    initialize: function(){\n      Backbone.Validation.bind(this);\n    },\n\n    // Define a template.\n    template: _.template('\\\n      <form>\\\n        Enter name:\\\n        <input name=\"name\" type=\"text\" value=\"<%= name %>\"><br>\\\n        Enter age:\\\n        <input name=\"age\" type=\"text\" value=\"<%= age %>\"><br>\\\n        <input type=\"button\" name=\"save\" value=\"Save\">\\\n      </form>\\\n    '),\n\n    // Render view.\n    render: function(){\n      // Render template with model values.\n      var html = this.template(this.model.toJSON());\n\n      // Update html.\n      $(this.el).html(html);\n    },\n\n    // Bind save callback click event.\n    events: {\n      'click [name~=\"save\"]': 'save'\n    },\n\n    // Save callback.\n    save: function(){\n\n      // Update model attributes.\n      this.model.set({\n        name: $('[name~=\"name\"]').val(),\n        age: $('[name~=\"age\"]').val()\n      });\n    }\n  });\n\n  $(document).ready(function () {\n     // Create new model instance.\n     var buyerModel = new BuyerModel();\n\n     // Create new view instance.\n     var buyerModelFormView = new BuyerModelFormView({\n       model: buyerModel,\n       el: 'body'\n     });\n\n     // Render view.\n     buyerModelFormView.render();\n  });\n})(jQuery);\n```", "```js\n      var BuyerModel = Backbone.NestedModel.extend({\n\n      });\n    ```", "```js\n        buyerModel.set({\n          'name.title': 'Mr',\n          'name.generation': 'II'\n        });\n    ```", "```js\n        buyerModel.set({\n          name: {\n            first: 'John',\n            last: 'Smith',\n            middle: {\n              initial: 'P',\n              full: 'Peter'\n            }\n          }\n        });\n    ```", "```js\n        buyerModel.get('name.middle.full'); // Peter\n        buyerModel.get('name.middle');\n        // { full: 'Peter', initial: 'P }\n        buyerModel.get('name.title'); // Mr\n    ```", "```js\n    buyerModel.set({\n      'addresses': [\n        {city: 'Brooklyn', state: 'NY'},\n        {city: 'Oak Park', state: 'IL'}\n      ]\n    });\n```", "```js\n    buyerModel.set({\n      'addresses[1].state': 'MI'\n    });\n```", "```js\n    buyerModel.get('addresses[0].state'); // NY\n    buyerModel.get('addresses[1].state'); // MI\n```", "```js\n    buyerModel.add('addresses', {\n      city: 'Seattle',\n      state: 'WA'\n    });\n\n    buyerModel.get('addresses[2]');\n    // { city: 'Seattle', state: 'WA' }\n```", "```js\n    buyerModel.remove('addresses[1]');\n\n    buyerModel.get('addresses').length; // 2\n```", "```js\n    buyerModel.bind('change:addresses[0].city', function(model, value){\n      console.log(value);\n    });\n\n    buyerModel.set('addresses[0].city', 'Chicago');\n```", "```js\n      // Define new model object.\n      var UserModel = Backbone.RelationalModel.extend({\n\n      });\n\n      // Define new model object.\n      var BuyerModel = Backbone.RelationalModel.extend({\n\n        // Define one-to-one relationship.\n        relations: [\n          {\n             // Relationship type\n             type: Backbone.HasOne,\n\n             // Relationship key in BuyerModel.\n             key: 'user',\n\n             // Related model.\n             relatedModel: UserModel,\n\n             // Define reverse relationship.\n             reverseRelation: {\n               type: Backbone.HasOne,\n               key: 'buyer'\n             }\n          }\n        ]\n      });\n    ```", "```js\n        var userModel1 = new UserModel({\n          login: 'jsmith',\n          email: 'jsmith@example.com'\n        });\n\n        var buyerModel1 = new BuyerModel({\n          firstName: 'John',\n          lastName: 'Smith',\n          user: userModel1\n        });\n    ```", "```js\n        var buyerModel = new BuyerModel({\n          firstName: 'John',\n          lastName: 'Smith',\n          user: {\n            login: 'jsmith',\n            email: 'jsmith@example.com'\n          }\n        });\n    ```", "```js\n        var userModel = new UserModel({\n          login: 'jsmith',\n          email: 'jsmith@example.com',\n          buyer: {\n            firstName: 'John',\n            lastName: 'Smith'\n          }\n        });\n    ```", "```js\n        buyerModel1.get('user').get('email');\n        // jsmith@example.com\n        userModel1.get('buyer').get('lastName'); // Smith\n    ```"]