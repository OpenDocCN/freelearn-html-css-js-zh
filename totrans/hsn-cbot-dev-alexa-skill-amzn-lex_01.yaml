- en: Understanding Chatbots
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解聊天机器人
- en: To create successful chatbots using Alexa or Lex, you first need to understand
    the components that make up a chatbot. These parts can then be used to create
    conversation diagrams and flow diagrams, helping visualize the user's path through
    the conversation. Being able to have this map for the user's conversation makes
    building chatbots far easier and quicker.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Alexa或Lex创建成功的聊天机器人，你首先需要了解构成聊天机器人的组件。然后可以使用这些部分来创建对话图和流程图，帮助可视化用户在对话中的路径。拥有用户对话的这种地图可以使构建聊天机器人变得更容易、更快。
- en: Toward the end of the chapter, we will also introduce Alexa and Lex and have
    a look at their similarities and differences. We'll also have a quick look at
    some of the use cases for each of them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的结尾，我们还将介绍Alexa和Lex，并探讨它们的相似之处和不同之处。我们还将快速查看它们的一些用例。
- en: 'The chapter will explain the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将解释以下主题：
- en: Introducing chatbots
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍聊天机器人
- en: Designing conversation flow diagrams
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计对话流程图
- en: Best practices
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最佳实践
- en: Amazon Alexa and Amazon Lex
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊Alexa和亚马逊Lex
- en: What are chatbots?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是聊天机器人？
- en: Chatbots are a new way to interact with a user in a more human way, through
    conversation. This is vastly different from existing methods, which provide minimal
    interaction or personalization.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 聊天机器人是一种以更人性化的方式与用户互动的新方法，通过对话。这与现有方法大相径庭，现有方法提供的交互或个性化非常有限。
- en: Chatbots can be either voice or text-based interactions, allowing them to be
    integrated into existing websites and apps or used in phone calls and virtual
    assistants.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 聊天机器人可以是基于语音或文本的交互，这使得它们可以被集成到现有的网站和应用程序中，或者用于电话和虚拟助手。
- en: They have recently been put in the spotlight with products such as Amazon Echo
    and Google Home, as well as an enormous number of Facebook Messenger chatbots.
    These advances in technology allow you to check the weather or order a pizza without
    looking at a screen, or get personalized information without having to wait to
    talk to a call center.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，随着亚马逊Echo和Google Home等产品的推出，以及大量Facebook Messenger聊天机器人的出现，它们受到了广泛关注。这些技术进步使得你可以在不查看屏幕的情况下检查天气或订购披萨，或者在没有等待与呼叫中心交谈的情况下获取个性化信息。
- en: What makes up a chatbot?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是聊天机器人？
- en: 'A chatbot is very different in the way that it interacts with a user, and therefore
    how it works is also very different. There are three main components of a chatbot:
    **intents**, **slots**, and **utterances**.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 聊天机器人在与用户互动的方式上非常不同，因此其工作原理也非常不同。聊天机器人主要有三个组成部分：**意图**、**插槽**和**utterances**。
- en: Intents
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 意图
- en: Intents are the most important part of a chatbot. They are the tasks or conversations
    that the chatbot can process. They are called intents because they are the things
    that the user intends to do.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 意图是聊天机器人的最重要部分。它们是聊天机器人可以处理的任务或对话。它们被称为意图，因为它们是用户打算做的事情。
- en: Intents can vary in complexity from very simple to extremely complicated. A
    basic intent may just be `SayHello`, which just says "Hi" to the user. A more
    complex intent may be booking a holiday, choosing and buying a pair of shoes,
    or ordering a pizza. They can be designed to be as elaborate as your imagination
    allows.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 意图可以从非常简单到极其复杂。一个基本的意图可能只是`SayHello`，它只是对用户说“Hi”。一个更复杂的意图可能是预订假期、选择并购买一双鞋或者订购披萨。它们可以被设计得像你的想象力一样复杂。
- en: They are started or triggered when the user says one of the **sample utterances**.
    The sample utterances are a list of words or phrases that the user might say when
    they are trying to start an intent. Each intent can have lots of sample utterances.
    In the `SayHello` example, they might be "Hello chatbot", "Hey there chatbot",
    or just "Hi".
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户说出其中一个**示例utterances**时，它们就会被启动或触发。示例utterances是一系列用户可能在尝试启动意图时可能说出的单词或短语。每个意图可以有大量的示例utterances。在`SayHello`示例中，它们可能是“Hello
    chatbot”、“Hey there chatbot”或者仅仅是“Hi”。
- en: Slots
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插槽
- en: To allow the chatbot to be really useful, it has to be able to gather details
    about what the user is asking for. If you are wanting to order a pizza, the chatbot
    needs to know what toppings you want, what style of base you want, and where you
    want it delivered to. This information is collected and stored in slots.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使聊天机器人真正有用，它必须能够收集有关用户请求的详细信息。如果你想要订购披萨，聊天机器人需要知道你想要什么配料，你想要什么风味的底料，以及你希望它送到哪里。这些信息被收集并存储在插槽中。
- en: Slots are designed to only accept certain types of information. If you were
    trying to find out whether they wanted a large, medium, or small pizza, it wouldn't
    be very useful if they could enter any random information. Defining the information
    that can be stored in a certain slot is called creating a **slot type**.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 槽位被设计成只接受某些类型的信息。如果你试图了解他们是否想要大、中或小披萨，如果他们可以输入任何随机信息，那么这将不会很有用。定义可以存储在某个槽位中的信息被称为创建**槽类型**。
- en: To make use of the information gathered in the slots, they can be accessed in
    the next stage of the chatbot logic. This could be as simple as saying "You have
    ordered a *large* *Hawaiian* pizza", where the size and topping are exactly what
    the user previously ordered.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要利用在槽位中收集到的信息，它们可以在聊天机器人逻辑的下一阶段被访问。这可能只是简单地表示“您已订购一个*大* *夏威夷*披萨”，其中大小和配料正是用户之前订购的。
- en: Utterances
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 话语
- en: An utterance is a word or phrase that has been said. This is key to chatbots
    as this is how a user interacts with the chatbot.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 话语是一个已经被说出的词或短语。这对于聊天机器人来说至关重要，因为这是用户与聊天机器人交互的方式。
- en: These utterances can trigger which intent the user is trying to access and they
    can also be used to get the exact information needed to fill the slots.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些话语可以触发用户试图访问的意图，它们也可以用来获取填充槽位所需的精确信息。
- en: Designing conversation flows
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计对话流程
- en: Now that we understand the components that make up a chatbot, we can start to
    design the conversations that we want our chatbot to handle. Designing conversations
    now makes it a lot easier to visualize how the chatbot will work, making it easier
    and quicker to build. Designing conversations in this way makes them easy to understand,
    making it a great tool for creating chatbots with people who can't code.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了构成聊天机器人的组件，我们可以开始设计我们希望聊天机器人处理的对话。现在设计对话使得可视化聊天机器人的工作方式变得容易得多，从而使得构建更加容易和快速。以这种方式设计对话使得它们易于理解，对于不能编写代码的人来说，这是一个创建聊天机器人的伟大工具。
- en: This design method will work for voice or text chatbots; just imagine the textboxes
    as speech bubbles.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这种设计方法适用于语音或文本聊天机器人；只需想象文本框为气泡即可。
- en: Starting with the perfect conversation diagram
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从完美的对话图开始
- en: Everything has to start somewhere, so it may as well be perfect. The aim of
    this stage is to have a basic conversation diagram that we will later expand into
    a detailed flow diagram.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 每件事都需要有一个起点，所以最好是完美的。这个阶段的目标是有一个基本的对话图，我们稍后会将其扩展为详细的流程图。
- en: 'To do this, you need to think about what the perfect conversation with your
    user would be. Start by writing down what the user will say and how the bot will
    respond. This is an example of ordering a pizza:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，你需要考虑与用户进行完美对话的内容。首先写下用户会说什么，以及机器人将如何回应。以下是一个订购披萨的例子：
- en: '![](img/eb1621bf-6e58-4ef7-aa63-15b85326f36b.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/eb1621bf-6e58-4ef7-aa63-15b85326f36b.png)'
- en: Ordering pizza conversation
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 订单披萨对话
- en: 'This can be done in lots of ways: with flow diagram software, using two phones
    or two messaging accounts, or simply with pen and paper. The aim is just to understand
    how the chatbot is going to be interacting with the user and what utterances the
    user is likely to say.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过许多方式完成：使用流程图软件、使用两部手机或两个消息账户，或者简单地用笔和纸。目标是理解聊天机器人将如何与用户互动以及用户可能说些什么。
- en: Conversation flow diagrams
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对话流程图
- en: 'Now that you have a basic conversation diagram, we need to make it into a flow
    diagram. A flow diagram is different from a conversation diagram in a few key
    ways:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有一个基本的对话图，我们需要将其转换为流程图。流程图在几个关键方面与对话图不同：
- en: Each part of a flow diagram has its own symbol, making it easy to understand
    what is happening at each stage.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流程图的每一部分都有自己的符号，这使得理解每个阶段的状况变得容易。
- en: A flow diagram contain more than just the conversation. It also describes the
    logic, information, and processes that take place behind the scenes.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流程图不仅仅包含对话。它还描述了幕后发生的逻辑、信息和流程。
- en: Flow diagrams aren't linear. This means that they can describe lots of conversations
    where the user says different things.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流程图不是线性的。这意味着它们可以描述许多对话，其中用户说不同的话。
- en: 'To properly describe our chatbots, we need to have a symbol for each of the
    parts of the conversation. To start with, we are going to be using six, but we
    can add more symbols later on:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确描述我们的聊天机器人，我们需要为对话的每个部分都有一个符号。首先，我们将使用六个，但稍后可以添加更多符号：
- en: '![](img/c3603139-a654-43bb-851f-9b6408ef6a10.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c3603139-a654-43bb-851f-9b6408ef6a10.png)'
- en: Flow diagram symbols
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 流程图符号
- en: 'To create our flow diagrams, we''ll be using flow diagram software. There are
    a couple of reasons we want to use flow diagram software instead of a normal document
    or even creating them by hand:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建我们的流程图，我们将使用流程图软件。我们想要使用流程图软件而不是普通文档甚至手工制作的原因有几个：
- en: They are easily editable. We are going to be changing the stages of the conversational
    flow and the text of utterances and replies as we work through this book. Having
    to redraw the diagram every time you make a change would be very time-consuming.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们很容易编辑。在我们通过这本书的工作过程中，我们将改变对话流程的阶段和话语及回复的文本。每次更改都要重新绘制图表将会非常耗时。
- en: It's the easiest way to make flow diagrams. The symbols snap into place and
    are easy to edit and modify. Doing flow diagrams in Word would be far more time-consuming.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是制作流程图最简单的方法。符号会自动对齐，并且易于编辑和修改。在Word中制作流程图将会花费更多的时间。
- en: In all of the examples throughout this book, we'll be using [www.draw.io](https://www.draw.io/),
    but if you have a different flow diagram software that you prefer then that will
    work too. We use draw.io as it's free, online, and is very easy to use.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的所有示例中，我们将使用[www.draw.io](https://www.draw.io/)，但如果你有更喜欢的其他流程图软件，那也可以。我们使用draw.io，因为它免费、在线且易于使用。
- en: Creating a conversation flow diagram
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建对话流程图
- en: Now that we know the parts of a conversation flow diagram, let's create one.
    We'll use the same pizza order conversation that we used earlier.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了对话流程图的组成部分，让我们来创建一个吧。我们将使用之前用过的相同的比萨订购对话。
- en: 'Start at the very beginning of the conversation. Create a symbol for the user''s
    first utterance. This first message from the user is a really important one as
    it will trigger an intent:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 从对话的起始点开始。为用户的第一次话语创建一个符号。这条来自用户的第一条信息非常重要，因为它将触发一个意图：
- en: '![](img/07a433dc-1995-4eb3-9ad9-831d3ad7becf.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/07a433dc-1995-4eb3-9ad9-831d3ad7becf.png)'
- en: Utterance triggering an intent
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 话语触发意图
- en: 'Now that the `OrderPizza` intent has been triggered, our chatbot can start
    asking the user about the pizza they want to order. We''ll start by asking what
    topping they want and they reply with "Hawaiian":'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在已经触发了`OrderPizza`意图，我们的聊天机器人可以开始询问用户他们想要订购的比萨。我们将首先询问他们想要什么配料，他们回复“夏威夷”：
- en: '![](img/ed5eebe7-a61c-484d-bd7b-cd558775f549.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ed5eebe7-a61c-484d-bd7b-cd558775f549.png)'
- en: Starting the intent
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 开始意图
- en: 'Later on, we want to remember that they chose Hawaiian as their topping so
    we need to store this as a slot. We store the information against a slot name,
    so in this case, it will be **topping = Hawaiian**. As well as storing the slot,
    we need to carry on the conversation, asking them what size of pizza they want:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们想要记住他们选择了夏威夷作为配料，因此我们需要将这个信息存储为一个槽位。我们将信息存储在槽位名称下，在这种情况下，它将是**topping =
    Hawaiian**。除了存储槽位，我们还需要继续对话，询问他们想要多大份的比萨：
- en: '![](img/c7b50a80-dc4e-4229-a58b-ec53a1933f49.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c7b50a80-dc4e-4229-a58b-ec53a1933f49.png)'
- en: Storing a slot value
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 存储槽位值
- en: With the response from the user, we store the size in a slot and proceed to
    the next stage. We repeat the question, answer, slot process for the size of pizza
    the user wants.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在收到用户的回复后，我们将大小存储在槽位中，并继续到下一个阶段。我们重复询问、回答、槽位的过程，以确定用户想要的比萨大小。
- en: Now that we have all of the information that we need, we need to tell the pizzeria
    that someone has ordered a medium Hawaiian pizza. For this, we'll use the action
    symbol and make sure to include the slots that are required. When we include slot
    information into anything, it is normal to write it as the slot name wrapped in
    curly braces.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经拥有了所有需要的信息，我们需要告诉比萨店有人订购了一份中份夏威夷比萨。为此，我们将使用动作符号，并确保包括所需的槽位。当我们将槽位信息包含在任何内容中时，通常将其写成括在花括号中的槽位名称。
- en: 'As well as telling the pizzeria about the order, we need to let the user know
    that their order has been placed and tell them when to collect it. Again, we use
    the slot name wrapped in curly braces to customize the message with slot information:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 除了告诉比萨店订单信息，我们还需要让用户知道他们的订单已经下单，并告诉他们何时取货。同样，我们使用括在花括号中的槽位名称来定制包含槽位信息的消息：
- en: '![](img/3a82030d-254a-4698-893b-496705c267a0.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3a82030d-254a-4698-893b-496705c267a0.png)'
- en: Full pizza ordering flow diagram
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的比萨订购流程图
- en: User stories
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户故事
- en: User stories are a vital tool in the design and testing of chatbots. They are
    stories about fictional users, what they want, and how they will interact with
    your bot. When we create a user story, it needs to be as close to a real user
    as possible. They should be based on a real user or the type of user that would
    be using your chatbot. If you have existing customers that you are wanting to
    target your chatbot toward then you can create data-driven user stories.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 用户故事是聊天机器人设计和测试中的关键工具。它们是关于虚构用户的故事，包括他们的需求以及他们如何与你的机器人互动。当我们创建用户故事时，它需要尽可能接近真实用户。它们应该基于真实用户或可能使用你的聊天机器人的用户类型。如果你有希望将聊天机器人针对的目标客户，你可以创建数据驱动的用户故事。
- en: 'To create a user story, start by describing the user and why they are talking
    with your bot. Examples of the pizza ordering bot might be the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建用户故事，首先描述用户以及他们为什么与你的机器人交谈。以下是一些披萨订购机器人的示例：
- en: Chris, a 23-year-old joiner. Wants to order a pizza on his phone so he can pick
    it up on the way home from work.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 克里斯，一位23岁的实习生。他希望在手机上订购披萨，以便在下班回家的路上取。
- en: Claire, a 35-year-old bank manager. Ordering a pizza using Alexa while she watches
    TV.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 克莱尔，一位35岁的银行经理。在看电视的同时使用Alexa订购披萨。
- en: The user descriptions don't have to be very long or complicated, but they have
    to represent the kind of users the bot will get.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 用户描述不需要非常长或复杂，但它们必须代表机器人将遇到的用户类型。
- en: For each user, go through the flow diagram pretending that the bot is talking
    to that user. The aim of this is to test your flow diagram before we start building
    the bot. If you find that the conversation doesn't work for a certain part of
    the flow diagram, changing it now will save you time later on.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个用户，请通过流程图模拟机器人与该用户对话。这样做的目的是在我们开始构建机器人之前测试你的流程图。如果你发现某个部分的对话不顺畅，现在修改它将节省你以后的时间。
- en: For simple examples like this pizza order, there won't be a big difference between
    all of the conversations, but user stories will become more important as we create
    more complicated flow diagrams.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像这样的简单例子，所有对话之间可能没有太大区别，但随着我们创建更复杂的流程图，用户故事将变得更加重要。
- en: Best practices
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最佳实践
- en: Anyone can make a chatbot. With a bit of practice, you can build a simple bot
    in a few hours. The problem with building bots like this is that, as they grow
    in scope and complexity, they can very easily become unmanageable. Simple changes
    can result in hours or even days of bug fixing and it can ruin the joy you get
    when you finally get the chatbot working.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 任何人都可以制作聊天机器人。经过一点练习，你可以在几小时内构建一个简单的机器人。构建这种机器人的问题是，随着它们的范围和复杂性的增长，它们很容易变得难以管理。简单的更改可能导致数小时甚至数天的错误修复，这可能会破坏你最终让聊天机器人工作时的喜悦。
- en: To avoid the horror of working with a disorganized and complex chatbot, there
    are a few best practices. Following these will reduce your headache later on and
    allow you to quickly and easily add new features.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免与一个无序且复杂的聊天机器人一起工作的恐怖经历，有一些最佳实践。遵循这些实践将减少你以后的头痛，并允许你快速轻松地添加新功能。
- en: Handling errors
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理错误
- en: Throughout a user's conversation with a chatbot, there are a lot of points where
    errors can occur. Errors can occur when an utterance isn't understood, an API
    returns an error or when there is a mistake in the developer's code. Each of these
    needs to be caught and dealt with properly. We'll cover how to use `try`/`catch`
    and the `to()` method to catch these errors in [Chapter 4](7567de44-8fd8-4f0a-b304-adfe6006e0a3.xhtml),
    *Connecting Your Alexa Skill to External APIs*.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户与聊天机器人的整个对话过程中，有很多可能出现错误的地方。错误可能发生在语句没有被理解、API返回错误或开发者的代码中存在错误时。每个错误都需要被捕捉并妥善处理。我们将在[第4章](7567de44-8fd8-4f0a-b304-adfe6006e0a3.xhtml)“将你的Alexa技能连接到外部API”中介绍如何使用`try`/`catch`和`to()`方法来捕捉这些错误。
- en: Missed utterances
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错过的语句
- en: The most common error will be when utterances aren't understood or aren't what
    the chatbot expected. This can be because the user typed something incorrectly,
    misspelled a word, or just typed a response you hadn't thought of. Alexa and Lex
    both use **natural language understanding** (**NLU**) to try to reduce the errors
    from misspelling and varied responses but they aren't perfect.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的错误可能是当语句没有被理解或不是聊天机器人所期望的。这可能是因为用户输入错误，拼写错误，或者只是输入了你没有考虑到的响应。Alexa和Lex都使用**自然语言理解**（**NLU**）来尝试减少拼写错误和不同响应的错误，但它们并不完美。
- en: 'Because not understanding the user''s utterance is such a common error, both
    Lex and Alexa also have systems to handle them. This involves a failure phrase
    that can be sent to the user when the chatbot doesn''t understand what the user
    just said. Make sure that this is set up properly and that you are asking the
    user to try again or to choose a different option:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 由于不理解用户的表述是一个如此常见的错误，Lex和Alexa也都有系统来处理它们。这包括当聊天机器人不理解用户刚刚说了什么时可以发送给用户的失败短语。确保这一点设置正确，并且你要求用户再次尝试或选择不同的选项：
- en: '![](img/be26d4ed-98ec-4bb8-bb8f-ba3f003deb01.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/be26d4ed-98ec-4bb8-bb8f-ba3f003deb01.png)'
- en: Failed utterances
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 失败的表述
- en: Alexa and Lex also have a feature that stores all of the times that it couldn't
    understand an utterance. Using this list, you can add more sample utterances to
    help the chatbot understand more. Doing this regularly can give a massive boost
    to your user satisfaction, as well as helping you understand how your users interact
    with your bot.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Alexa和Lex还有一个功能，可以存储所有它无法理解表述的时间。使用这个列表，你可以添加更多样本表述来帮助聊天机器人理解更多。定期这样做可以极大地提高用户满意度，同时也有助于你了解用户如何与你的机器人互动。
- en: External APIs
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 外部API
- en: Every time you deal with anything outside of your code, there is a risk that
    it will error. This might be a third-party API, your own API, or simply a query
    to a database. You should always write these requests so that if the request returns
    an error, you fully deal with it. This means logging what the error was and where
    it took place and making sure that the chatbot still works when an error occurs.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 每次你处理代码之外的事情时，都存在出错的风险。这可能是一个第三方API、你自己的API，或者仅仅是向数据库的查询。你应该始终编写这些请求，以便如果请求返回错误，你能完全处理它。这意味着记录错误是什么以及它发生在哪里，并确保在发生错误时聊天机器人仍然可以工作。
- en: 'Making sure that the chatbot still works when an error occurs is really important
    as no one wants to talk to a chatbot that just stops talking to you halfway through
    the conversation. To make sure this doesn''t happen, you have three options: create
    error messages for every external call you make, let all errors flow down to a
    very low-level error handler that sends a generic *We had an error* message, or
    a combination of the two. The idea would be using custom messages for every error
    that could happen but as your chatbot becomes larger and more complicated, that
    can become very time-consuming.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在发生错误时聊天机器人仍然可以工作是非常重要的，因为没有人愿意和一个在对话中途停止说话的聊天机器人交谈。为了确保这种情况不会发生，你有三个选择：为每个外部调用创建错误消息，让所有错误流到一个非常低级的错误处理器，该处理器发送一个通用的“我们遇到了错误”消息，或者两者的组合。想法是使用自定义消息来处理可能发生的每个错误，但随着你的聊天机器人变得更大、更复杂，这可能会变得非常耗时。
- en: 'An effective method for dealing with the errors is to create a low-level error
    handler that passes a generic error message unless a specific error message is
    provided. This gives you the flexibility to let the user know exactly what went
    wrong when it matters but saves you having to create lots of similar error messages:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 处理错误的有效方法之一是创建一个低级错误处理器，除非提供了特定的错误消息，否则传递一个通用的错误消息。这让你在需要时能够确切地让用户知道出了什么问题，但同时也节省了你创建大量类似错误消息的时间：
- en: '[PRE0]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Errors in your code
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码中的错误
- en: No developer wants to admit there are bugs in their code, but if you create
    more than a simple chatbot, there probably will be. There are different ways to
    approach this problem, from writing tests for every function, to thorough end-to-end
    testing, to wrapping everything in a `try`/`catch`. This book will let you decide
    how you want to deal with these errors, but expecting your code to be error-free
    is a very dangerous path.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 没有开发者愿意承认他们的代码中存在错误，但如果你创建的不仅仅是简单的聊天机器人，那么很可能会有。处理这个问题有不同的方法，从为每个函数编写测试，到彻底的端到端测试，到使用`try`/`catch`将一切包裹起来。这本书将让你决定如何处理这些错误，但期望代码无错误是一个非常危险的道路。
- en: No matter how you want to stop errors getting into your code, you need to deal
    with them when you get them. This is where having a low-level error handler can
    also be of use. You can use that to catch errors that have occurred in your code
    the same way that you deal with errors from external APIs.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你想要如何阻止错误进入你的代码，你都需要在遇到它们时处理它们。这就是为什么拥有一个低级错误处理器也可能很有用。你可以用它来捕获代码中发生的错误，就像你处理外部API的错误一样。
- en: Tone of voice
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语调
- en: One of the best things about chatbots is the fact that they are conversational
    and feel more human. Because of this, you need to give your bot a personality
    and you need to tailor that personality to suit the purpose of the chatbot and
    the users who will be interacting with it.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 聊天机器人最棒的地方之一是它们具有对话性和更接近人类的感受。正因为如此，你需要给你的机器人赋予一个个性，并且需要根据聊天机器人的目的和与之互动的用户来调整这个个性。
- en: Having a banking chatbot that uses slang might make the users trust the chatbot
    less, whereas having a clothing sales chatbot that uses lots of very formal or
    old-fashioned language might be just as off-putting.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一个使用俚语的银行聊天机器人可能会让用户对聊天机器人的信任度降低，而拥有一个使用大量非常正式或过时语言的服装销售聊天机器人可能同样令人反感。
- en: Try to design the language that the chatbot uses to be in line with your brand
    persona. If you don't have a brand persona then you can build one by interviewing
    your staff and customers. Use these interviews to create a persona (similar to
    a user story) that relates closely to your customers.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 尽量设计聊天机器人使用的语言与您的品牌形象保持一致。如果您没有品牌形象，可以通过采访您的员工和客户来构建一个。利用这些采访创建一个与客户紧密相关的人物（类似于用户故事）。
- en: Identifying suitable use cases
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定合适的用例
- en: Chatbots are awesome! Being able to create a new way for users to interact is
    such a great feeling that you want to make a chatbot for everything. Unfortunately,
    chatbots aren't suited to every situation and some things need to be carefully
    thought through before being implemented. You need to think about whether users
    would want to talk about certain things with a chatbot, as well as how the chatbot
    will be communicating back.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 聊天机器人很棒！能够为用户提供一种全新的交互方式是一种非常美妙的感觉，以至于你想要为每一件事都制作一个聊天机器人。不幸的是，聊天机器人并不适合所有情况，在实施之前需要仔细考虑一些事情。你需要考虑用户是否愿意与聊天机器人讨论某些事情，以及聊天机器人将如何进行回应。
- en: Thinking about the way that the bot will be communicating is particularly important
    for voice-based chatbots, as everything that the chatbot says will be sent through
    speakers for everyone around to hear. This could end badly for a chatbot that
    accesses your bank information, reads your emails, or deals with any other personal
    information. When designing your Alexa conversations, ask yourself whether you'd
    want Alexa telling all of your friends and colleagues about your results from
    your doctor's appointment or reading out an email from your partner about what
    they had planned for that evening.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑机器人将如何进行交流对于基于语音的聊天机器人尤为重要，因为聊天机器人所说的每一句话都将通过扬声器发送给周围的人听到。这对访问您的银行信息、阅读您的电子邮件或处理任何其他个人信息的人工智能聊天机器人来说可能会很糟糕。在设计您的Alexa对话时，问问自己你是否希望Alexa告诉你所有的朋友和同事你的医生预约结果，或者朗读你伴侣关于他们当晚计划的电子邮件。
- en: Designing the information for the delivery method
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计用于交付方式的信息
- en: As the method of information delivery is very different from existing methods
    (emails, websites, and printed media), you also need to think about what it will
    be like for the user. For example, when creating a newspaper chatbot, having Alexa
    read the whole paper for 15 minutes or Lex send a huge chunk of text might not
    be very user-friendly. Instead, you could break down the information into smaller
    chunks, or give a brief overview of the information.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 由于信息交付方式与现有方式（电子邮件、网站和印刷媒体）非常不同，你还需要考虑用户会有什么感受。例如，当创建一个报纸聊天机器人时，让Alexa花15分钟读完整份报纸或Lex发送一大块文本可能并不太友好。相反，你可以将信息分解成更小的部分，或者提供信息的简要概述。
- en: There can be a fine line between a chatbot that provides the user with great
    information and one that talks too much. Make sure that the amount of information
    is designed in a way that is suited to the end delivery method.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在提供优质信息和说得太多的聊天机器人之间可能有一条很细的界限。确保信息量是以适合最终交付方式的方式设计的。
- en: Amazon Alexa and Lex
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 亚马逊Alexa和Lex
- en: Alexa and Lex are a pair of tools built by Amazon to change the way that users
    interact with technology. They are platforms that allow developers to create immensely
    powerful conversational interfaces without having to study deep learning, natural
    language processing, or speech recognition.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Alexa和Lex是亚马逊开发的一对工具，旨在改变用户与技术互动的方式。它们是平台，允许开发者创建极其强大的对话界面，而无需深入研究深度学习、自然语言处理或语音识别。
- en: They are part of the **Amazon Web Services** (**AWS**) group and therefore work
    brilliantly alongside the rest of the services, making the development process
    smoother and more consistent.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 它们是 **Amazon Web Services** （**AWS**） 组的一部分，因此与其它服务配合得非常好，使开发过程更加顺畅和一致。
- en: The main difference between Alexa and Lex is that the Alexa platform allows
    developers to create skills for Alexa-enabled devices, whereas Lex allows developers
    to create generic text or voice-based chatbots.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Alexa 和 Lex 之间的主要区别在于，Alexa 平台允许开发者为 Alexa 兼容设备创建技能，而 Lex 允许开发者创建通用的文本或语音聊天机器人。
- en: Amazon Alexa
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Amazon Alexa
- en: Amazon Alexa is a voice-based chatbot that is the brains behind the Echo family
    of products from Amazon. Users can customize their Echo experience by adding **skills**
    to their Alexa account in a similar way to how you add apps onto a smartphone.
    These skills can be downloaded from the Alexa Skills Store and there are thousands
    to choose from.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Alexa 是一种基于语音的聊天机器人，它是亚马逊 Echo 系列产品的智能大脑。用户可以通过向他们的 Alexa 账户添加 **技能**
    来定制他们的 Echo 体验，就像在智能手机上添加应用程序一样。这些技能可以从 Alexa 技能商店下载，有数千种可供选择。
- en: Similar to apps, each of these skills has been designed to perform a single
    task, whether that's to talk you through a recipe to cook, guide you through your
    morning workout, or just to tell you jokes.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 与应用程序类似，每个这些技能都设计用来执行单一任务，无论是引导你烹饪食谱，指导你完成早晨的锻炼，还是仅仅讲笑话。
- en: Alexa was released in November 2014 and has become increasingly popular. By
    the end of 2017, Amazon had sold tens of millions of Alexa-connected devices.
    This has resulted in Alexa devices securing 55% of the market for virtual assistants
    by February 2018.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Alexa 于 2014 年 11 月发布，并越来越受欢迎。到 2017 年底，亚马逊已经售出了数千万台与 Alexa 连接的设备。这使得到 2018
    年 2 月，Alexa 设备在虚拟助手市场中占据了 55% 的份额。
- en: Amazon Lex
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Amazon Lex
- en: Amazon Lex is a chatbot service that allows developers to create either text-
    or voice-based chatbots, utilizing the incredible power of the deep learning,
    natural language understanding, and speech recognition that Amazon has developed.
    Lex differs from Alexa in that it can be integrated into different devices and
    services.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Lex 是一种聊天机器人服务，允许开发者创建基于文本或语音的聊天机器人，利用亚马逊开发的深度学习、自然语言理解和语音识别的惊人力量。Lex
    与 Alexa 的不同之处在于它可以集成到不同的设备和服务中。
- en: Lex is most commonly used as a text-based chatbot. There are loads of different
    ways that users interact with text-based chats, and Lex can integrate with a lot
    of them. Developers can create Facebook Messenger bots, Slack bots, Kik bots,
    and Twilio texting bots through integrations built into the Lex platform.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Lex 最常被用作基于文本的聊天机器人。用户与基于文本的聊天互动的方式有很多种，Lex 可以与其中很多种集成。开发者可以通过 Lex 平台内置的集成创建
    Facebook Messenger 机器人、Slack 机器人、Kik 机器人和 Twilio 短信机器人。
- en: Lex can also be triggered through the AWS-SDK, meaning that it can be put behind
    an endpoint. This means that developers can set up a system where they post messages
    to an API and get back the response from Lex. This gives you the flexibility to
    send messages to Lex from almost any system. This can be used to create a chat
    window inside a website, create a chatbot on almost any messaging service, or
    integrate it with any system that can connect with the internet.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Lex 还可以通过 AWS-SDK 触发，这意味着它可以放在端点后面。这意味着开发者可以设置一个系统，他们向 API 发送消息，然后从 Lex 获取响应。这使您可以从几乎任何系统中发送消息到
    Lex。这可以用来在网站上创建聊天窗口，在几乎任何消息服务上创建聊天机器人，或者将其与任何可以连接到互联网的系统集成。
- en: Using Amazon Transcribe for speech recognition, you could create a system very
    similar to Alexa. This has been used very effectively in call centers, allowing
    a customer to talk to a virtual service representative instead of just waiting
    until a human service representative is available. This means that a lot of callers
    can get the information that they need without talking to a human. This has the
    dual effect of reducing the time to get an answer if the bot can solve your problem,
    and reducing the number of people going through to the call center, reducing call
    wait times.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Amazon Transcribe 进行语音识别，您可以创建一个与 Alexa 非常相似的系统。这已经在呼叫中心中被非常有效地使用，允许客户与虚拟服务代表交谈，而不是仅仅等待有人类服务代表可用。这意味着许多呼叫者可以在不与人类交谈的情况下获得他们所需的信息。这意味着如果机器人可以解决你的问题，可以减少获得答案的时间，同时减少通过呼叫中心的人数，减少通话等待时间。
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we've learned about the components of chatbots—intents, slots,
    and utterances—and the role that each of them plays.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了聊天机器人的组成部分——意图、槽位和话语，以及它们各自扮演的角色。
- en: Next, we learned how to design conversation flows, starting with an ideal conversation
    and converting it into a conversation flow diagram. Using flowchart software,
    we created conversation flow diagrams to help visualize how our chatbot will interact
    with the users.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们学习了如何设计对话流程，从理想的对话开始，将其转换为对话流程图。使用流程图软件，我们创建了对话流程图，以帮助可视化我们的聊天机器人如何与用户互动。
- en: We talked about the best practices for creating a chatbot, from handling errors
    to designing your conversations to work well on chatbots, from the tone of voice
    to good chatbot use cases.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了创建聊天机器人的最佳实践，从处理错误到设计对话以在聊天机器人上良好工作，从语气到好的聊天机器人用例。
- en: The last part of this chapter introduced Amazon Alexa and Amazon Lex. We learned
    about the similarities and differences between the two types of chatbot as well
    as a bit of background into them both.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最后部分介绍了Amazon Alexa和Amazon Lex。我们了解了这两种类型聊天机器人的相似之处和不同之处，以及它们的一些背景信息。
- en: Questions
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the three main components of a chatbot?
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 聊天机器人的三个主要组成部分是什么？
- en: Name two things that Alexa and Amazon Lex have in common.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出两个Alexa和Amazon Lex共有的特点。
- en: Name two differences between Alexa and Amazon Lex.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出Alexa和Amazon Lex之间的两个不同点。
- en: When designing a conversation flow, where should you start?
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设计对话流程时，你应该从哪里开始？
- en: What does *tone of voice* mean?
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “语气”是什么意思？
- en: What are the three main types of errors that can occur in chatbots?
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 聊天机器人中可能发生的三种主要错误类型是什么？
