- en: Chapter 4. Diving a Bit Deeper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In most of the JavaScript programs, which we learned so far, the lines of code
    were executed in the same order in which they appeared in the program. Each code
    was executed only once. Thus, the code did not include tests to determine if the
    conditions were true or false or we did not perform any logical statements.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you are going to learn some logical programming. You will
    learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Loops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If statement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Switch case
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You already know how to embed JavaScript codes on an HTML document. Before starting
    this chapter, you will learn a few HTML tags and JavaScript methods. These methods
    and tags will be used throughout the book.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In object-oriented programming, we don't directly perform any operations on
    the data from outside an object; we ask an object to perform the operation by
    passing one or multiple parameters. This task is called an object's method.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, you learned how to print something using `document.write()`.
    Now, you will learn something more.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will check the methods on both console and HTML document, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To show an alert or a pop-up box using JavaScript, we use the following method:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Type this on the console and press *Enter*, you will see a pop-up box saying
    **Hello World**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![JavaScript methods](img/B04720_04_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'You can write your code to show a pop-up box similar to the following on an
    HTML document:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![JavaScript methods](img/B04720_04_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'If you want to take information from users, you need to use a prompt box to
    do this. Consider the following for example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You want to take input of the username and print it on the main web page.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You can do this using the `window.prompt()` method.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The structure of `window.prompt()` is similar to the following:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, you need to store the information on a variable. You already know how
    to do this from the previous chapters. Type the following and press *Enter*:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: After running this code on console, you will be asked to input something on
    a textbox. After typing your information, you need to press the **OK** button.
    Your information is now stored in the `name` variable:![JavaScript methods](img/B04720_04_03.jpg)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you want to print the variable on your web page, you can use the `document.write();`
    method, as follows:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: The output of these steps can been seen in the following screenshot:![JavaScript
    methods](img/B04720_04_04.jpg)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The codes on an HTML document will be as shown in the following:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: HTML buttons and form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, you learned about a few HTML tags. Now, we will study a
    few tags that will make learning HTML more interesting.
  prefs: []
  type: TYPE_NORMAL
- en: Buttons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to add buttons to your HTML web page, you can use the `<button></button>`
    tags. The structure of the tags is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to make your button do something, for example, open an URL; you
    can consider the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the code will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Buttons](img/B04720_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In HTML, we use form to represent a document section that contains interactive
    controls to submit information to a web server. The basic structure of HTML form
    is as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the code will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Form](img/B04720_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's dive little bit deeper now!
  prefs: []
  type: TYPE_NORMAL
- en: If statement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's say John has 23 apples and Tom has 45 apples. We want to check who has
    more apples using JavaScript programming. We need to make our browser understand
    the **if statement**.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The if statement compares two variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check our condition, we need to declare the two variables containing the
    number of apples, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To check which number is bigger, we can apply the if statement as shown in
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s say that we do not know which variable is bigger. Then, we need to check
    both the variables. Therefore, we need to include the following codes to our program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The whole code in an HTML page will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![If statement](img/B04720_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You learned about the conditional operators in the previous chapters. In if
    statement, you can use all of them. Here are a few examples with comments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: To check multiple conditions, you need to use OR (`||`) or AND (`&&`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Switch-case
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you have more than three conditions, it is good practice to use the **switch-case**
    statement. The basic structure of switch-case is as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Every `case` has a `break`. However, the `default` does not need a `break`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider that Tom has 35 pens. His friends John, Cindy, Laura, and Terry have
    25, 35, 15, and 18 pens, respectively. Now, John wants to check who has 35 pens.
    We need to compare the number of Tom''s pens with everyone''s pens. We can use
    switch-case for this type of case. The code will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Switch-case](img/B04720_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, change the value of second case (`35`) to other and check your result.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Suppose you need to go to school every day except Saturday and Sunday. Write
    a code, where you will input today''s date number and the web page will show you
    whether you need to go to school or not. (Hint: use a switch case.)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Consider that you have a garden and you water all the plants on even days of
    the month. Write a code that will show you whether you will water your plants
    on that day. (Hint: use the if condition and modulus operator (`%`).)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Loops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this paragraph, we will learn something interesting called **loop**.
  prefs: []
  type: TYPE_NORMAL
- en: Consider that you need to print a line 100 times using JavaScript. What you
    will do?
  prefs: []
  type: TYPE_NORMAL
- en: You can type `document.write("The line I want You to Write");` 100 times in
    your program or you can use loop.
  prefs: []
  type: TYPE_NORMAL
- en: The basic use of loop is to do something more than one time. Say, you need to
    print all the integers of *1 + 2 + 4 + 6 +…………+100* series upto 100\. The calculation
    is the same, you only need to do it multiple times. In these cases, we use loop.
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss two types of loops, namely **for loop** and **while loop**.
  prefs: []
  type: TYPE_NORMAL
- en: The for loop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The basic structure of the for loop is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The `starting` parameter is the initialization of your loop. You need to initialize
    the loop in order to start it. The `condition` parameter is the key element to
    control the loop. The `increment/decrement` parameter defines how your loop will
    increase/decrease.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see an example. You want to print **javascript is fun** 10 times. The
    code will be as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The for loop](img/B04720_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Yes! You printed the line 10 times. If you look at the code carefully, you
    will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: We declared a variable named `java`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the `for` loop, we initialized `0` to its value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We added a `java<10` condition that made the browser count from `0` to `10`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We incremented the variable by `1`; that's why we added `java++`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercise
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Write a code using JavaScript that will print the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Write a code that will print all the even numbers from 2 to 500.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The while loop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You have already have learned how to execute something multiple times using
    the for loop. Now, we will learn another loop known as the while loop. The structure
    of while loop is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The codes for the previous example will be like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The output will be the same as the `for` loop.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Write a code that will print all the odd values from 1 to 600 using the while
    loop. (Hint: use the modulus operator.)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write a code that will print the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned logical operations using JavaScript. You learned
    loops, conditional operation, and other HTML tags.
  prefs: []
  type: TYPE_NORMAL
- en: We need to focus on this chapter as we have discussed the most important attributes
    in JavaScript here. You can become a JavaScript master if you practice this chapter
    and the last three chapters. I recommend you not to go further unless you have
    a good knowledge all the four chapters. If you have already learned about all
    the topics that we discussed earlier, let's move on to [Chapter 5](ch05.html "Chapter 5. Ahoy!
    Sailing into Battle"), *Ahoy! Sailing into Battle*.
  prefs: []
  type: TYPE_NORMAL
