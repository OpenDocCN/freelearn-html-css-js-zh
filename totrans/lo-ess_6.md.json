["```js\nvar collection = [\n    { name: 'Ronnie', age: 43 },\n    { name: 'Ben', age: 19 },\n    { name: 'Sharon', age: 25 },\n    { name: 'Melissa', age: 29 }\n];\n\nfunction collectionNames() {\n    return _.map(collection, 'name');\n}\n\nfunction indirectionNames(coll, prop) {\n    return _.map(coll, prop);\n}\n\nfunction genericCollNames(coll) {\n    return _.map(coll, 'name');\n}\n\nfunction genericPropNames(prop) {\n    return _.map(collection, prop);\n}\n\ncollectionNames();\nindirectionNames(collection, 'name');\ngenericCollNames(collection);\n\ngenericPropNames('name');\n// → [ \"Ronnie\", \"Ben\", \"Sharon\", \"Melissa\" ]\n```", "```js\nfunction insert(coll, callback) {\n    var toInsert;\n\n    if (_.isFunction(callback)) {\n        toInsert = _.slice(arguments, 2);\n    } else {\n        toInsert = _.slice(arguments, 1);\n        callback = _.identity;\n    }\n\n    _.each(toInsert, function(item) {\n        coll.splice(_.sortedIndex(coll, item, callback), 0, item);\n    });\n\n    return coll;\n\n}\n\nvar collection = _.range(1, 11);\n\ninsert(collection, 8.4);\n// → [ 1, 2, 3, 4, 5, 6, 7, 8, 8.4, 9, 10 ]\n\ninsert(collection, 1.1, 6.9);\n// → [ 1, 1.1, 2, 3, 4, 5, 6, 6.9, 7, 8, 8.4, 9, 10 ]\n\ninsert(collection, 4, 100);\n// → [ 1, 1.1, 2, 3, 4, 4, 5, 6, 6.9, 7, 8, 8.4, 9, 10, 100 ]\n```", "```js\nvar flattenProp = _.compose(_.flatten, _.prop),\n    skills = _.partialRight(flattenProp, 'skills'),\n    names = _.partialRight(flattenProp, 'name');\n\nvar collection = [\n    { name: 'Danielle', skills: [ 'CSS', 'HTML', 'HTTP' ] },\n    { name: 'Candice', skills: [ 'Lo-Dash', 'jQuery' ] },\n    { name: 'Larry', skills: [ 'KineticJS', 'Jasmine' ] },\n    { name: 'Norman', skills: [ 'Grunt', 'Require' ] }\n];\n\n_.contains(skills(collection), 'Lo-Dash');\n// → true\n_.contains(names(collection), 'Candice');\n// → true\n```", "```js\nvar YEAR_MILLISECONDS = 31560000000;\n\nfunction validItem(item) {       \n    return item.age > 21 &&\n        _.isString(item.first) &&\n        _.isString(item.last);\n}\n\nfunction computed(item) {\n    return _.extend({\n        name: _.result(item, 'first', '') + ' ' +\n            _.result(item, 'last', ''),\n        yob: new Date(new Date() - (YEAR_MILLISECONDS * item.age))\n            .getFullYear()\n    }, item);\n}\n\nvar invalidItem = _.negate(validItem);\n\n    { first: 'Roderick', last: 'Campbell', age: 56 },\n    { first: 'Monica', last: 'Salazar', age: 38 },\n    { first: 'Ross', last: 'Andrews', age: 45 },\n    { first: 'Martha', age: 51 }\n];\n\n_.every(collection, validItem);\n// → false\n\n_.filter(collection, validItem);\n// →\n// [\n//   { first: \"Roderick\", last: \"Campbell\", age: 56 },\n//   { first: \"Monica\", last: \"Salazar\", age: 38 },\n//   { first: \"Ross\", last: \"Andrews\", age: 45 }\n// ]\n\n_.find(collection, invalidItem);\n// → { first: \"Martha\", age: 51 }\n\n_.map(collection, computed);\n// →\n// [\n//   {\n//     name: \"Roderick Campbell\",\n//     yob: 1958,\n//     first: \"Roderick\",\n//     last: \"Campbell\",\n//     age: 56\n//   }, {\n//     name: \"Monica Salazar\",\n//     yob: 1976,\n//     first: \"Monica\",\n//     last: \"Salazar\",\n//     age: 38\n//   }, {\n//     name: \"Ross Andrews\",\n//     yob: 1969,\n//     first: \"Ross\",\n//     last: \"Andrews\",\n//     age: 45\n//   }, {\n//     name: \"Martha \",\n//     yob: 1963,\n//     first: \"Martha\",\n//     age: 51 }]\n```", "```js\nfunction byName(coll, name, take) {\n    return _(coll)\n        .filter({ name: name })\n        .take(_.isUndefined(take) ? 100 : take)\n        .value();\n}\n\nvar collection = [\n    { name: 'Theodore', enabled: true },\n    { name: 'Leslie', enabled: true },\n    { name: 'Justin', enabled: false },\n    { name: 'Leslie', enabled: false }\n];\n\nbyName(collection, 'Leslie');\n// →\n// [\n//   { name: \"Leslie\", enabled: true },\n//   { name: \"Leslie\", enabled: false }\n// ]\n\nbyName(_.filter(collection, 'enabled'), 'Leslie');\n// →\n// [ { name: \"Leslie\", enabled: true } ]\n\nbyName(_(collection).filter('enabled'), 'Leslie');\n// →\n// [ { name: \"Leslie\", enabled\": true } ]\n```", "```js\nfunction sort(coll, prop, desc) {\n    var wrapper = _(coll).sortBy(prop);\n    return desc ? wrapper.reverse() : wrapper;\n}\n\nvar collection = [\n    { first: 'Bobby', last: 'Pope' },\n    { first: 'Debbie', last: 'Reid' },\n    { first: 'Julian', last: 'Garcia' },\n    { first: 'Jody', last: 'Greer' }\n];\n\nsort(collection, 'first').value(),\n// →\n// [\n//   { first: \"Bobby\", last: \"Pope\" },\n//   { first: \"Debbie\", last: \"Reid\" },\n//   { first: \"Jody\", last: \"Greer\" },\n//   { first: \"Julian\", last: \"Garcia\" }\n// ]\n\nsort(collection, 'first', true).value(),\n// →\n// [\n//   { first: \"Julian\", last: \"Garcia\" },\n//   { first: \"Jody\", last: \"Greer\" },\n//   { first: \"Debbie\", last: \"Reid\" },\n//   { first: \"Bobby\", last: \"Pope\" }\n// ]\n\nsort(collection, 'last')\n    .takeRight(2)\n    .pluck('last')\n    .value();\n// → [ \"Pope\", \"Reid\" ]\n```", "```js\nfunction enabledIndex(obj) {\n    return _.transform(obj, function(result, value, key) {\n        result[key] = _.result(value, 'enabled', false);\n    });\n}\n\nvar collection = [\n    { name: 'Claire', enabled: true },\n    { name: 'Patricia', enabled: false },\n    { name: 'Mario', enabled: true },\n    { name: 'Jerome', enabled: false }\n];\n\nvar indexByName = _.partialRight(_.indexBy, 'name'),\n    enabled = _.partial(_.flow(indexByName, enabledIndex),\n    collection);\n\nenabled();\n// →\n// {\n//   Claire: true,\n//   Patricia: false,\n//   Mario: true,\n//   Jerome: false\n// }\n\ncollection.push({ name: 'Gloria', enabled: true });\nenabled();\n// →\n// {\n//   Claire: true,\n//   Patricia: false,\n//   Mario: true,\n//   Jerome: false,\n//   Gloria: true\n// }\n```", "```js\nvar collection = [\n    { first: 'Andrea', last: 'Stewart', age: 28 },\n    { first: 'Clarence', last: 'Johnston', age: 31 },\n    { first: 'Derek', last: 'Lynch', age: 37 },\n    { first: 'Susan', last: 'Rodgers', age: 41 }\n];\n\nvar minimal = _.flow(_.identity,\n    _.partialRight(_.pick, [ 'last', 'age' ]));\n\n_.map(collection, minimal);\n// →\n// [\n//   { last: \"Stewart\", age: 28 },\n//   { last: \"Johnston\", age: 31 },\n//   { last: \"Lynch\", age: 37 },\n//   { last: \"Rodgers\", age: 41 }\n// ]\n```", "```js\nfunction sorted(wrapper) {\n    return _(wrapper).sortBy();\n}\n\nfunction rejectOdd(wrapper) {\n    return _(wrapper).reject(function(item) {\n        return item % 2\n    });\n}\n\nvar sortedEvens = _.flow(sorted, rejectOdd),\n    evensSorted = _.flow(rejectOdd, sorted,\n        _.partialRight(_.result, 'value')),\n    collection = _.shuffle(_.range(1, 11));\n\nsortedEvens(collection)\n    .reverse()\n    .value();\n// → [ 10, 8, 6, 4, 2 ]\n\nevensSorted(collection);\n// → [ 2, 4, 6, 8, 10 ]\n```", "```js\nfunction validThru(next, value) {\n    return value && next;\n}\n\nfunction User(first, last, age) {\n    this.first = first;\n    this.last = last;\n    this.age = age;\n}\n\nUser.prototype.valid = function() {\n    return _.chain(this.first)\n        .isString()\n        .thru(_.partial(validThru, this.last))\n        .isString()\n        .thru(_.partial(validThru, this.age))\n        .isFinite()\n        .value();\n}\n\nnew User('Orlando', 'Olson', 25).valid();\n// → true\n\nnew User('Timothy', 'Davis').valid();\n// → false\n\nnew User('Colleen').valid();\n// → false\n```", "```js\n_.mixin({average: function(coll, callback) {\n    return _(coll)\n        .map(callback)\n        .reduce(function(result, item) {\n            return result + item;\n        }) / _.size(coll);\n}});\n\nvar collection = [\n    { name: 'Frederick', age: 41, enabled: true },\n    { name: 'Jasmine', age: 29, enabled: true },\n    { name: 'Virgil', age: 47, enabled: true },\n    { name: 'Lila', age: 22, enabled: false }\n];\n\n_.average(collection, 'age');\n// → 34.75\n\n_.average(collection, function(item) {\n    return _.size(item.name);\n});\n// → 6.5\n\n_(collection)\n    .filter('enabled')\n    .average('age');\n// → 39\n```", "```js\n_.mixin({distance: function(source, target) {\n    var sourceSize = _.size(source),\n        targetSize = _.size(target),\n        matrix;\n\n    if (sourceSize === 0) {\n        return targetSize;\n    }\n    if (targetSize === 0) {\n        return sourceSize;\n    }\n\n    matrix = _.map(_.range(targetSize + 1), function(item) {\n        return [ item ];\n    });\n\n     _.each(_.range(sourceSize + 1), function(item) {\n        matrix[0][item] = item;\n    });\n\n    _.each(target, function(targetItem, targetIndex) {\n        _.each(source, function(sourceItem, sourceIndex) {\n            if (targetItem === sourceItem) {\n                matrix[targetIndex + 1][sourceIndex + 1] =\n                    matrix[targetIndex][sourceIndex];\n            } else {\n                matrix[targetIndex + 1][sourceIndex + 1] = Math.min(\n                    matrix[targetIndex][sourceIndex] + 1,\n                    Math.min(matrix[targetIndex + 1][sourceIndex] + 1,\n                        matrix[targetIndex][sourceIndex + 1] + 1));\n            }\n        });\n    });\n\n    return matrix[targetSize][sourceSize]\n\n}});\n\n_.mixin({closest: function(coll, value, callback) {\n    return _.sortBy(coll, _.flow(_.callback(callback), function(item) {\n        return _.distance(value, item);\n    }));\n}});\n\nvar collection = [\n    'console',\n    'compete',\n    'competition',\n    'compose',\n    'composition'\n];\n\n_.distance('good', 'food');\n// → 1\n\n_.closest(collection, 'composite');\n// →\n// [\n//   \"compose\",\n//   \"compete\",\n//   \"composition\",\n//   \"console\",\n//   \"competition\"\n// ]\n\n_(collection)\n    .closest('consulate')\n    .first();\n// → \"console\"\n```"]