- en: Chapter 5. Using Device Storage and the Files API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Your knowledge of PhoneGap is coming together well. It''s time to add some
    interaction with external data sources and with the device itself. The main goal
    of this chapter is to guide you through the offline storage capabilities of PhoneGap
    and help you understand how to interact with the Files API.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to read and write data on the device using the `localStorage` object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to handle the storage on a local database considering the specific
    platform implementation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand database storage limitations and learn how to handle them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn about the Files API, how it works, and how to organize your code to keep
    it clear and maintainable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the Files API to explore the device filesystem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to read and render data inside a file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to load and save a file to a device's persistent storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application data storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every application (desktop, web, or mobile) needs to store (and access) some
    data in order to work properly. How the data is stored depends on the kind of
    information the application will work with and on the environment in which the
    application will run. A web application, for instance, can rely mostly on server
    storage because it runs on the Internet. Most advanced web applications implement
    an offline strategy and store some data locally on the user machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modern web development offers several tools in order to let users interact
    with an application even when they''re not connected:'
  prefs: []
  type: TYPE_NORMAL
- en: The **LocalStorage** API ([http://www.w3.org/TR/webstorage/#the-localstorage-attribute](http://www.w3.org/TR/webstorage/#the-localstorage-attribute))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **SessionStorage** API ([http://www.w3.org/TR/webstorage/#the-sessionstorage-attribute](http://www.w3.org/TR/webstorage/#the-sessionstorage-attribute))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **ApplicationCache** interface ([http://www.w3.org/TR/2011/WD-html5-20110525/offline.html](http://www.w3.org/TR/2011/WD-html5-20110525/offline.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **IndexedDB** API ([http://www.w3.org/TR/IndexedDB/](http://www.w3.org/TR/IndexedDB/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the modern mobile browsers let developers handle the online and offline
    events through the navigator object ([https://developer.mozilla.org/en/docs/Online_and_offline_events](https://developer.mozilla.org/en/docs/Online_and_offline_events)).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's important to keep in mind that the specifications about the `OnLine` attribute
    report that this attribute is inherently unreliable because a computer can be
    connected to a network without having Internet access.
  prefs: []
  type: TYPE_NORMAL
- en: 'A complete overview of the previous API, events, and interface is beyond the
    scope of this book. In the following sections, I will discuss only those that
    are most relevant for building a PhoneGap app: LocalStorage and IndexedDB.'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the PhoneGap LocalStorage API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two main web storage types: **local storage** and **session storage**.
    The LocalStorage API is part of the **WebStorage** API defined by the W3C in order
    to provide a guideline for persistent data storage of key-value pair data in web
    clients. The LocalStorage API is designed to support data that needs to be available
    between sessions. In other words, the data your app saves when using the LocalStorage
    API will be available again the next time the app runs.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to access the LocalStorage API, you have to refer the `window` object
    to its `localStorage` property. If you type the following snippet in your browser
    console, you can take a look at the methods and properties of the `localStorage`
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following list summarizes the available methods and properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`key`: This returns the key name stored at a specific position; you can access
    the `localStorage` data either by key or by index'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getItem`: This returns the value identified by a key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setItem`: This saves the value in a specific key (that is, a string) of the
    `localStorage` object; the method needs a string as a key and a value to store
    in the specific key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`removeItem`: This removes the item identified by a key from the `localStorage`
    object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clear`: This removes all of the key-value pairs from the `localStorage` object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`length`: This returns the total number of items stored in the `localStorage`
    object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `localStorage` object allows you to store only simple string data as key-value
    pairs. If you want to store more complex data, you have to use JSON or other string
    representations of the data you want to store. When you use a JSON formatted string
    to store the value, you will need to convert the string back to JSON when you
    want to use it. Each time the `localStorage` object is updated, `StorageEvent`
    is fired. This event cannot be cancelled and contains the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`key`: This is a string that represents the named key that was added, removed,
    or modified in the storage'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`oldValue`: This is the previous value of the named key if it was updated or
    null if a new item was added to the `localStorage` object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`newValue`: This is the new value of the key or null if an item was removed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`url`: This is the address of the HTML page that called a method that triggered
    this data change'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A JavaScript event is cancelable if it is possible to prevent the event's default
    action.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that storage events don't work for the same window or tab; they
    are fired only for other windows or tabs that use the same `localStorage` object.
  prefs: []
  type: TYPE_NORMAL
- en: The `localStorage` capabilities of PhoneGap allow you as a developer to write
    code as in the browser; it's the framework that handles the different platforms
    (Android, BlackBerry WebWorks OS 6.0 and higher, iOS, Windows Phone 7 and 8, and
    Tizen) on your behalf.
  prefs: []
  type: TYPE_NORMAL
- en: There are some drawbacks when using the `localStorage` object. As the `localStorage`
    API is synchronous, the time required to access the `localStorage` object is greater
    than the time needed to access an object in memory. Due to this, the app might
    appear less responsive. Also, as already mentioned, complex data needs to be serialized
    and de-serialized. This process might further impact the responsiveness of the
    app. You can use JavaScript **WebWorker** to avoid any performance degradation,
    but the support depends on the platform browser implementation and not on PhoneGap.
  prefs: []
  type: TYPE_NORMAL
- en: These drawbacks, however, should not prevent you from using the LocalStorage
    API because, as with most performance metrics, these performance hits really matter
    when you perform the same operation multiple times in a row. More specifically,
    the performance degradation due to the time needed to access the `localStorage`
    object happens when different tabs/windows access the same object.
  prefs: []
  type: TYPE_NORMAL
- en: When the mobile app built on top of PhoneGap is running, it's almost impossible
    that `localStorage` is accessed at the same time by other tabs/windows (you should
    have an issue only if your app starts to use several `InAppBrowser` instances
    in `UIWebView` of the app).
  prefs: []
  type: TYPE_NORMAL
- en: We will create a sample app now to get familiarized with using the `localStorage`
    object and all the methods supported by it.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – reading and writing data on the LocalStorage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open the command-line tool and create a new PhoneGap project using the PhoneGap
    CLI you installed before. This will create a new directory called `DeviceApi`
    in your current working directory; this can be done using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Move to the directory you just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the platforms you want to test on the device API. For this example, we
    add the Android platform:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Delete all the files and subdirectories except `index.html` inside the `www`
    directory. Open the `index.html` file you will find in the `www` root folder and
    add the following HTML code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code will add four buttons, which will add new `localStorage` data, remove
    data, retrieve data, and clear all `localStorage` data. Note that each button
    has an `onclick` event referring to a function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now let''s add the required JavaScript to the page. First, we will bind the
    `onDeviceReady` function to the `deviceready` event. This function is going to
    add 3 `localStorage` data when the page loads. The `setItem` method of the `localStorage`
    object is used to add a new key-value pair. This is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When the user clicks on the **Add Canada** button, we will need to add a new
    country to the `localStorage` object. We will use the `setItem` again to add the
    new item. Once done, we will display an alert. Note that you can''t add the same
    key again to the storage, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, to get a particular object from the storage, we should use the `getItem`
    method. When there is a matching key, the value is returned. If not, null is returned.
    In this example, we will get the value for the `USA` key and display it in the
    alert:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To get all items from the storage, we should loop the `localStorage` object
    and get the keys one by one as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `clear` method is used to clear out all the values from `localStorage`
    of the app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As shown in the `removeAllData` function, we can use `window.localStorage` instead
    of `localStorage` to work with the `localStorage` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete code for this example is provided for your reference as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You saved persistent data on the device using JavaScript that can also run in
    all major desktop browsers. Keep in mind that each platform stores this data in
    a different location and that this data may be cleared by the device. Depending
    on the platform, this data can be deleted when the app is closed or when the device
    is rebooted. For this reason, it's strongly encouraged not to use the `localStorage`
    object to store crucial information.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the PhoneGap SQL storage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The client-side storage implementation in different browsers on mobiles is pretty
    inconsistent right now. It's important to make an analysis of each browser implementation
    when working on a PhoneGap project because the app is rendered through WebView;
    on iOS, this is the Objective-C `UIWebView` class; on Android, it is `android.webkit.WebView`,
    and it differs on all other supported platforms. The web view simply exposes the
    underlying platform browser. For this reason, it's important to know which client-side
    storage option is supported by the mobile browsers of your target platform.
  prefs: []
  type: TYPE_NORMAL
- en: The following table summarizes the storage support for the mobile versions of
    the major browsers at the time of writing; the X sign indicates whether the feature
    is supported.
  prefs: []
  type: TYPE_NORMAL
- en: '|   | Android browser | Firefox OS | iOS Safari | IE 11 Mobile | Chrome for
    Android |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| IndexedDB | X | X | X | X | X |'
  prefs: []
  type: TYPE_TB
- en: '| Web SQL | X | --- | X | --- | X |'
  prefs: []
  type: TYPE_TB
- en: IndexedDB is a simple flat-file database with hierarchical key-value persistence
    and basic indexing. **Web SQL** is basically **SQLite** embedded in the browser.
    SQLite is a relational database contained in a small (approximately 350 KB) library
    written in C that is used by software such as **Skype** or **Photoshop Lightroom**.
    The main difference between these storage options is that IndexedDB is a NoSQL
    database that lets you work with your JavaScript objects and indexes based on
    your application needs, while Web SQL is a real, relational client-side database
    implementation. One of the advantages of using Web SQL is that you can share the
    same queries between the backend and frontend. When running some tests, you can
    see how much faster Web SQL can be.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to run the same test on your machine, you can clone the GitHub repository
    at [https://github.com/scaljeri/indexeddb-vs-websql](https://github.com/scaljeri/indexeddb-vs-websql)
    and open the file `test.html` in your web browser.
  prefs: []
  type: TYPE_NORMAL
- en: The W3C dropped support for Web SQL on November 18, 2010, making IndexedDB the
    *de facto* standard. From a developer's point of view, IndexedDB may look like
    a huge step backward but it really isn't. For years, developers have stored data
    on the client side using key-value pairs, and most of the time they use JSON to
    query the objects using **Unstructured Query Language** (**UQL**) or NoSQL. For
    these reasons, IndexedDB should be seen as the natural evolution of client-side
    storage.
  prefs: []
  type: TYPE_NORMAL
- en: PhoneGap provides storage API based on the deprecated Web SQL database specification.
    When Web SQL is supported by the device, the app will use it. If not, the app
    will use the PhoneGap one. There will be no difference for the developer as we
    will not have to change any line of code.
  prefs: []
  type: TYPE_NORMAL
- en: Working with database storage in PhoneGap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To work with a `Database` object in PhoneGap, it''s enough to use the `openDatabase`
    method shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The `openDatabase` method accepts the following four (self-explanatory) arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: The database **name**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The database **version**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **display name** of the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Estimated **size** of the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep in mind that an application can query the version number of the database
    in order to understand whether an upgrade to the database schema is required.
    The `openDatabase` method returns a reference to the currently open database.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous snippet, I allocated 2 MB of space in bytes. When allocating
    space, consider that mobile devices may have limitations on the size of the database
    they can support. For example, iOS only allows up to 5 MB for web-based applications;
    the same is true when using PhoneGap as a wrapper.
  prefs: []
  type: TYPE_NORMAL
- en: 'The returned database object between the others exposes two methods that take
    from one to three arguments: `transaction()`and `readTransaction()`. The main
    difference is that the `readTransaction()` method has to be used in read-only
    mode. The arguments that can be passed to these methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: A function to execute one or more SQL statements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A function to handle an exception raised by the app when opening the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A function to handle the successful opening of the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that the `transaction()` and `readTransaction()` asynchronous methods are
    the only methods in the PhoneGap framework that want the failure handler function
    before the success one. Also, the success handler is the only one that doesn't
    receive any argument; the other handlers receive a `SQLTransaction` object.
  prefs: []
  type: TYPE_NORMAL
- en: The `SQLTransaction` object exposes the `executeSql` method. Using this method,
    it's possible to run several SQL statements and pass some parameters to the statements
    to handle successful SQL query execution and SQL errors.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use several tokens in order to pass parameters to a SQL statement. For
    a complete overview of the available tokens, refer to the online documentation
    at [http://www.sqlite.org/lang_expr.html](http://www.sqlite.org/lang_expr.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'The success handler receives two arguments: the first one is a reference to
    the transaction itself and the second one is a `SQLResultSet` object that contains
    the information, and optionally the results, of the executed query.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `insertId` property of the `SQLResultSet` object returns an `Exception:
    DOMException` value when performing a `SELECT` statement. You can safely ignore
    it because it doesn''t affect the app.'
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – populating a local database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to reinforce what you just learned, you will create a new local database,
    add a table to it, and write and read some data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to the project you created for the previous example or create a new
    project. Clean out the content of the `index.html` file, and add the following
    button markup to it. This button will be used to query the data back from the
    database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript tag and the `deviceready` event listener:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the body of the `onDeviceReady` function, we will create a new database
    called `EMP` with version number of `1.0`, named `Employee Details,` with an estimated
    size of 2 MB:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once the database is created using the `openDatabase` method, we populate the
    database. We have to create a transaction for every operation we need to perform
    and so we provide the `populateDB` method as an argument for the transaction:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `executeSql` method can take any standard SQL statement and execute it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We will now create the `queryEmployees` function, which is bound to the button
    `onclick` event. This function is going to open the database and create a transaction
    to query the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `queryData` function provided as an argument to the transaction executes
    the SQL query. This takes the transaction argument `tx` and the result set is
    passed to the `onSelectSuccess` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `onSelectSuccess` function has the transaction and result set as an argument
    and does the actual parsing job:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The complete code of this example is provided for your quick reference. You
    can also verify the database records in your browser developer tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You created a local database in order to store and recover information relevant
    for your app and its users. The database will be automatically removed when the
    app is uninstalled.
  prefs: []
  type: TYPE_NORMAL
- en: Database limitations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are some limitations to be aware of when using the WebSQL implementation
    of PhoneGap (refer to the SQLite documentation for a complete overview at [http://www.sqlite.org/limits.html](http://www.sqlite.org/limits.html)).
    These limitations are not related to the framework itself but are due to the web
    view implementation of each target platform.
  prefs: []
  type: TYPE_NORMAL
- en: The limit you can easily hit when working on an app is the size limit of the
    database file. For example, on WebKit, it varies depending on the operating system
    from 5 MB to 25 MB. Another limitation you can find is that, since iOS 5.1, both
    `localStorage` and Web SQL databases have been moved to the `~/Library/Caches`
    folder from the `~/Library/WebKit` folder. Actually, this change means that the
    information stored is not backed up anymore and can be arbitrarily deleted by
    the operating system when more space is needed (for more information about iOS
    data management, refer to the Apple Developer guide at [https://developer.apple.com/technologies/ios/data-management.html](https://developer.apple.com/technologies/ios/data-management.html)).
  prefs: []
  type: TYPE_NORMAL
- en: In order to avoid the issues described, you can use the Sqlite plugin available
    on GitHub for Android and iOS ([https://github.com/litehelpers/Cordova-sqlite-storage](https://github.com/litehelpers/Cordova-sqlite-storage)).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You will learn more about PhoneGap plugins throughout this book; for now, it
    suffices to know that a plugin is typically a combination of HML/CSS/JavaScript
    and native code used in order to extend the PhoneGap capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: The main advantages you get when using this plugin are that you can keep the
    SQLite database in a user data location that is known and can be reconfigured,
    there are no more size limits, and the database can be encrypted using **SQLcipher**
    (for a complete reference, refer to the online documentation at [http://sqlcipher.net/documentation/](http://sqlcipher.net/documentation/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'From a developer''s point of view, there is no change in the API except the
    prefix; it means that instead of opening a database accessing the `window` object
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'You have to refer to the plugin like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Understanding the Files API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The PhoneGap Files API is an implementation of two different W3C APIs, the Directories
    and System API and the File API (you can find the complete specifications on the
    W3C website at [http://www.w3.org/TR/file-system-api/](http://www.w3.org/TR/file-system-api/)
    and [http://www.w3.org/TR/file-upload](http://www.w3.org/TR/file-upload).) The
    PhoneGap Files API is not a complete implementation of the W3C specification;
    the missing piece is the synchronous filesystem interface implementation. Asynchronous
    JavaScript APIs are a bit more complex to use because you have to work with multiple
    nested functions but this should not be a big issue; in fact, it's something web
    developers are all too familiar with.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The main difference between asynchronous and synchronous JavaScript execution
    is that in the first case, you can run several processes simultaneously and avoid
    "freezing" the user interface. With the introduction of web workers in JavaScript,
    it's possible to avoid this issue but this is totally beyond the scope for this
    book; you can find more information about web workers on the Mozilla website at
    [https://developer.mozilla.org/en-US/docs/DOM/Using_web_workers](https://developer.mozilla.org/en-US/docs/DOM/Using_web_workers).
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to access the device filesystem, you can use the `requestFileSystem`
    method of the `LocalFileSystem` object; all the methods of this object are defined
    in the `window` object. The method accepts the following four arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: The type of storage (temporary or persistent)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The amount of space in bytes to be allocated on the device storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The success handler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The error handler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you want to access the device filesystem, the resulting code looks as
    shown the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `storage` argument, you need to specify one of the following two pseudo
    constants defined in the `LocalFileSystem` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '`LocalFileSystem.PERSISTENT`: This indicates that the storage cannot be removed
    by the user agent without the app''s or user''s permission.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LocalFileSystem.TEMPORARY`: This indicates that the files stored in the requested
    space can be deleted by the user agent or by the system without the app''s or
    user''s permission'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The size of the requested sandbox storage is expressed in bytes; for example,
    in order to make the code more readable, you can use the syntax (4 x 1024 x 1024)
    to allocate 4 KB instead of the bytes number 4,194,304.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The device hard disk is not completely open to the app's view. A limited portion
    of the hard disk is dedicated to a single app alone; this is the app **sandbox**.
    The idea behind the app sandbox is that each app can only access its own sandbox
    and some higher-level directories owned by the operating system. The structure
    of the high-level directories varies depending on the operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `onSuccess` handler receives a `FileSystem` object as an argument. The
    two properties defined for this object are `name` and `root`. Accessing the `name`
    property of the object makes it possible to read the name of the filesystem; accessing
    the `root` property allows you to get a reference to the `root` directory of the
    app sandbox. This is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The `onError` handler receives a `FileError` object as an argument; this object
    represents different errors using several pseudo constants defined in the object
    itself, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'If the location of the file or directory is known, you can use the `resolveLocalFileSystemURI`
    method of the `LocalFileSystem` object to access it. This method accepts the following
    three arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: The URI of the file or directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The success handler (`onSuccess`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The error handler (`onError`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you want to access, for instance, the external storage of an Android device,
    you can use the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The `onSuccess` function receives as argument a `DirectoryEntry` or `FileEntry`
    object depending on the kind of path entered (that is, a directory or file); the
    `onError` handler receives a `FileError` object as argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'The values of the `code` property are summarized by the following pseudo constants:'
  prefs: []
  type: TYPE_NORMAL
- en: '`FileError.NOT_FOUND_ERR` (returned value `1`): This means the file or directory
    required by the app cannot be found'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FileError.SECURITY_ERR` (returned value `2`): This means the file or directory
    is outside the app sandbox or the app does not have the rights to access it'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FileError.ABORT_ERR` (returned value `3`): This is thrown when the `abort`
    method of the reader or writer is called'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FileError.NOT_READABLE_ERR` (returned value `4`): This means that the file
    or directory required by the app cannot be read'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FileError.ENCODING_ERR` (returned value `5`): This means a path or local URI
    used as an argument in the `resolveLocalFileSystemURI` method of the `LocalFileSystem`
    object is malformed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FileError.NO_MODIFICATION_ALLOWED_ERR` (returned value `6`): This means the
    app attempted to write to a file or directory that cannot be modified due to the
    actual state of the filesystem'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FileError.INVALID_STATE_ERR` (returned value `7`): This means the app accesses
    a file that is used by another process'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FileError.SYNTAX_ERR` (returned value `8`): This is self-explanatory; this
    occurs due to the syntax error'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FileError.INVALID_MODIFICATION_ERR` (returned value `9`): This means the modification
    requested by the app is invalid; an example of such an error is moving a directory
    into its own child'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FileError.QUOTA_EXCEEDED_ERR` (returned value `10`): This means the app requested
    a storage amount greater than the allowed storage quota'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FileError.TYPE_MISMATCH_ERR` (returned value `11`): This means the app attempted
    to access a file or directory but the entry is not of the expected type (that
    is, a directory is returned instead of a file)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FileError.PATH_EXISTS_ERR` (returned value `12`): This means the app failed
    to create a file or directory due to the existence of a file or directory with
    the same path'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading directories and files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Only after getting access to the filesystem is it possible to read the device
    directories, subdirectories, and content. Again, the `onSuccess` handler used
    as an argument in the `requestFileSystem` method receives a `FileSystem` object.
    Through the `root` property of this object, it''s possible to access a `DirectoryEntry`
    object and then create a `DirectoryReader` object able to read all the entries
    available in the current directory. This is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The `DirectoryReader` object exposes one method named `readEntries`. It can
    be used in order to read the entries and, due to the asynchronous nature of the
    File API, it accepts a success and a failure handler. Similar to what's happening
    for the `resolveLocalFileSystemURI` method, the success handler receives an array
    of `DirectoryEntry` or `FileEntry` objects according to the kind of item that
    is listed (that is, a directory or a file).
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – listing folders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Get ready to explore the folders of the device''s persistent storage. Use the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the command-line tool and create a new project using the Cordova CLI tool
    you installed before. This will create a new directory called `FileSystem` in
    your current working directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Move to the directory you just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the platforms you want to test on the device API. For this example, we
    add the Android platform:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the File API plugin using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to the `www` folder, open the `index.html` file, and add a `div` element
    with the `id` value as `fileslist` inside the body of the app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will now add a `deviceready` event listener in the JavaScript section. The
    `onDeviceReady` function has to be called once the `deviceready` event is fired:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the body of the `onDeviceReady` function, request access to the device filesystem
    specifying the success and failure handlers you will define next and request a
    persistent storage of 0 KB; you need to specify a quota only when writing to the
    device filesystem:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the error handler that will notify you when the code throws an error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the success handler and inside its body, create a new `DirectoryReader`
    object and use this object to read all the directory contents. We need to pass
    a new function `parseDirectories`, which will actually iterate through the list
    of directories. The directory entries will be passed automatically as an argument
    to this function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the `parseDirectories` function and add the following snippet to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We read the entries and for each entry in the list, we check whether it's a
    directory or a file. If it's a directory, we append the directory name to the
    unordered list and ignore it if it's a file. At the end, we add the generated
    unordered list (`ul`) to the `div` named `fileslist` we previously created.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When this code runs in an actual device, it will list all the directories in
    the persistent storage.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The entire source code of this example is provided as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The app can now read the list of directories from the device's persistent storage
    using the asynchronous Files API.
  prefs: []
  type: TYPE_NORMAL
- en: Writing and reading a file's data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To write data to a file, it suffices that the app gets access to the file using
    the `FileWriter` object. In order to get a `FileWriter` object, you first have
    to get access to a `DirectoryEntry` object or a `FileEntry` object using the `requestFileSystem`
    method of the `LocalFileSystem` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you successfully get access to the filesystem, you can request a file
    specifying that you want to create it using the `create` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are two flags available within the Files API that can be used as arguments
    of the `getFile` and `getDirectory` methods: `create` and `exclusive`. The `create`
    flag is used to indicate that the file or directory should be created; the `exclusive`
    flag takes effect only when the `create` flag is set to `true` and it causes the
    file or directory creation to fail if it already exists.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As with the other Files API, the `getFile` method is asynchronous and requires
    a success and failure handler. Once in the success handler, it''s possible to
    create a `FileWriter` object using the `createWriter` method of the `FileEntry`
    object received as an argument. The `createWriter` method also requires the success
    and failure handlers, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Once again, you have two other handlers, which means only after three callback
    functions, can you write some content into the file you just created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can't write binary data from JavaScript in PhoneGap using a `FileWriter`
    object; this is a limitation of the framework because it passes data between the
    native and JavaScript layers as a string. One possible solution is to write a
    plugin that translates a Base64 string into binary data.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you perform the write operation, several events occur. For each such event,
    there is a corresponding property available on the `FileWriter` object:'
  prefs: []
  type: TYPE_NORMAL
- en: The `onwritestart` event is called when the `FileWriter` object starts to write
    the file; it receives as an argument a `ProgressEvent` object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `onwrite` event gets called when the `FileWriter` object has successfully
    completed the write operation; it receives as an argument a `ProgressEvent` object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Onabort` event is called when the write operation has been interrupted
    by calling the `abort` method of `FileWriter`; it receives as an argument a `ProgressEvent`
    object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Onerror` event is called when the write operation fails; it receives as
    an argument the `ProgressEvent` object. In order to understand why the error occurs,
    you can access the `FileError` object stored in the `target.error` property of
    the `event` object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `FileWriter` object contains other properties as well. For a complete overview,
    refer to the online guide available at [http://docs.phonegap.com/en/edge/cordova_file_file.md.html#FileWriter](http://docs.phonegap.com/en/edge/cordova_file_file.md.html#FileWriter).
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `ProgressEvent` object, you can access the bytes loaded, the total
    bytes, and the nature of the event (that is, `abort`, `writeend`, and so on) using
    the `loaded`, `total`, and `type` properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you try to call sequentially the `write` method of the `FileWriter` object,
    only the first string will be added to the file. You have to wait until the `writeend`
    event is fired in order to write other data to the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you want to read a file, you can use a `FileReader` object. This object
    works similarly to the `FileWriter` object. When using it, several events occur:
    the `onabort` and `onerror` properties of the `FileWriter` object act similarly
    to the `FileReader` ones. The properties related only to the `FileReader` object
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`onloadstart`: The function stored in this property is called when the `FileReader`
    object starts to read a file; it receives a `ProgressEvent` object as an argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onload`: The function stored in this property is called when the read operation
    has successfully completed; it receives a `ProgressEvent` object as an argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onloadend`: The function stored in this property is called when the read operation
    is completed (regardless of whether it succeeded or failed); it receives a `ProgressEvent`
    object as argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `FileReader` object allows you to read the file data in the following four
    different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '`readAsDataURL`: This reads the file and returns the content of the specified
    file as a Base64-encoded data URL'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`readAsText`: This reads a file and returns the data as a string encoded by
    default in UTF-8'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`readAsBinaryString`: This reads the file as binary and returns the data as
    a binary string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`readAsArrayBuffer`: This reads the file and returns the data as `ArrayBuffer`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to put into practice what you just learned, you will now see how to
    parse the device's persistent storage, recover the first available image, and
    render it in the app's web view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the complete source code for writing a text file to the phone storage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Time for action – reading and rendering an image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Get ready to render the first available image in the device''s storage into
    the PhoneGap default app template. Refer to the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the command-line tool and create a new PhoneGap project named `ReadingFile`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the File API plugin using the following command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to the `www` folder, open the `index.html` file, and add an `img` tag with
    the `id` value as `firstImage` inside the main `div` of the app following the
    `deviceready` one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to the `www/js` folder, open the `index.js` file, and define a new function
    named `requestFileSystem`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the error handler in order to get the code of every possible error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the body of the `requestFileSystem` function, access the device filesystem
    using the `requestFileSystem` function of the `LocalFileSystem` object, define
    the success and failure handlers, and inside the success handler, access the `root`
    filesystem:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You are requesting a `0` bytes quota because you are just reading a file; you
    need to specify a quota only when writing to the device filesystem.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once you get access to the `root` filesystem, you can create a `DirectoryReader`
    object in the success handler and start to explore the root filesystem using the
    `readEntries` asynchronous method of the object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In order to determine whether a file is an image in the `for` loop, you can
    first check the `isFile` property of the entry and then use a simple regular expression;
    when the condition is met, you access the file using the `getFile` method of the
    root `DirectoryEntry` object specifying the success and the failure handlers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the JavaScript section, define the `onGetFile` function, and in its body,
    access the real file by using the `file` method of the `FileEntry` object. Once
    you get access to the file, specify the `onload` and `onerror` handlers and read
    the file using the `readAsDataURL` method in order to assign the result as the
    `src` attribute of the `img` tag, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now test the project on a real device. Take a look at the following complete
    code provided for a quick review:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You explored the filesystem of the device and rendered the first image found
    as a Base64 data stream in your app. Now that you are somewhat familiar with the
    File API, it's time to learn how to transfer files from and to a device.
  prefs: []
  type: TYPE_NORMAL
- en: Transferring files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The PhoneGap File API also includes the `FileTransfer` object. As the name
    suggests, this object allows you to develop apps to download and upload files
    over the Internet. The methods exposed by the `FileTransfer` object are self-explanatory:
    `upload`, `download`, and `abort`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `upload` method accepts several arguments: the path of the file on the
    device, a URL to receive the file, the success and failure handlers, an option
    object, and a Boolean to force the method to accept all the security certificates.
    (I omitted the Boolean in the next snippet because using it for production is
    not recommended; an app should accept only the protocols it was designed to deal
    with.)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The `options` argument is a `FileUploadOptions` object. This object allows
    you to provide additional information using the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`chunkedMode`: This is a Boolean value that indicates whether the streaming
    of the HTPP request is performed without internal buffering. (For a more detailed
    description of the chunked transfer encoding, you can refer to [http://en.wikipedia.org/wiki/Chunked_transfer_encoding](http://en.wikipedia.org/wiki/Chunked_transfer_encoding)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fileKey`: This is a string that indicates the name of the form element under
    which the file is uploaded to the server; the default value is `file`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fileName`: This is a string that represents the name of the uploaded file;
    the default value is `image.jpg.`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mimeType`: This is a string representing the MIME type of the file that will
    be uploaded; by default, the value is `image/jpg`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`params`: This is an object that represents key-value pairs to be included
    in the HTTP request header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `onSuccess` handler receives a `FileEntry` object as an argument so that
    you can immediately access information, such as the filename and full path on
    the device. The `onError` handler receives a `FileTransferError` object; the properties
    of this object are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`code`: This is a number that represents one of the four possible error codes
    stored in the `FileTransferError` pseudo constants (that is, `FILE_NOT_FOUND_ERR`,
    `INVALID_URL_ERR`, `CONNECTION_ERR`, and `ABORT_ERR`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`source`: This is a string representing the URI to the source file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target`: This is a string representing the URI to the target file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http_status`: This is a number representing the HTTP status code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `download` method works in a similar way; the only difference is that the
    first two arguments are switched and are: the URL to download the file and the
    system URI (that is, the path) in order to store it on the device, respectively;
    also, the `options` parameter accepts only HTTP headers. This is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: The `abort` method can be used to stop a download or an upload operation, once
    the `onError` handler is called, and the value of the `code` property of its argument
    is the pseudo constant, `FileTransferError.ABORT_ERR`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Also, when you set up the wrong path of the file to download, the `code` property
    of the `FileTransferError` object is equal to `FileTransferError.FILE_NOT_FOUND_ERR`
    (that is, the value `1`).
  prefs: []
  type: TYPE_NORMAL
- en: Only the `onprogress` property is defined in the `FileTransfer` object. As the
    name suggests, this property is used to store a function that is called whenever
    a chunk of data is transferred from or to the device.
  prefs: []
  type: TYPE_NORMAL
- en: Next, in order to put into practice what you just learned, you will download
    a file, show the download progress, and add a link to the file once the download
    is completed.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – downloading and saving a file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Get ready to download a file and display in the PhoneGap default app template
    a progress bar and a link to the file. Refer to the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the command-line tool and create a new PhoneGap project named `DownloadFile`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the directory to `DownloadFile`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the File and FileTransfer API plugins using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to the `www` folder, open the `index.html` file, and add a `progress` tag
    with the `id` value as `progress` inside the main `div` element of the app below
    the `deviceready` tag; assign `1` to the `value` attribute and `100` to the `max`
    attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a new JavaScript function named `onDeviceReady` and add it to the `deviceready`
    listener:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the `onFileSystemSuccess` method, once you get access to the filesystem,
    create a new `FileTransfer` object and call the `download` method specifying the
    remote URL, the system root URI, and the success and failure handlers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the success and failure event callback functions. For any error, we
    will alert the entire `error` object as a JSON string, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now run your project on a real device. The file will be downloaded and the progress
    will be shown in the progress bar. Once it's done, you can verify the downloaded
    file in your device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The complete source code of this example is provided as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You initiated a file download, displayed a progress bar, and rendered a link
    to the file. You will notice a problem because most platforms don't provide a
    PDF reader inside the WebView. In short, the user will not be able to read the
    file, neither in the app nor in the external browser. In order to open a native
    app to read the file, you have to use an external plugin. You will discover in
    the next chapter how to integrate a plugin in your app and how to solve this problem.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to save data on the device and how to handle
    the most common limitations. You also learned how the Files API works and looked
    at its features.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to use the Contact API to work with
    contacts in the device and Camera API, in order to capture an image using the
    device camera.
  prefs: []
  type: TYPE_NORMAL
