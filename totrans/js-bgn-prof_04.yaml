- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Logic Statements
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 逻辑语句
- en: Up to this point, our code has been rather static. It will do the same thing
    every time we execute it. In this chapter, that is all going to change. We will
    be dealing with logical statements. Logical statements allow us to make multiple
    paths in our code. Depending on the outcome of a certain expression, we will follow
    one code path or another.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的代码相当静态。每次执行它都会做同样的事情。在本章中，这一切都将改变。我们将处理逻辑语句。逻辑语句允许我们在代码中创建多个路径。根据某个表达式的结果，我们将遵循一个代码路径或另一个。
- en: There are different logic statements, and we will go over them in this chapter.
    We will start with `if` and `if else` statements. After that, we will be dealing
    with the ternary operator, and the final one we will be dealing with is the `switch`
    statement.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同的逻辑语句，我们将在本章中介绍它们。我们将从`if`和`if else`语句开始。然后我们将处理三元运算符，最后我们将处理的是`switch`语句。
- en: 'Along the way, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在旅途中，我们将涵盖以下主题：
- en: if and if else statements
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if`和`if else`语句'
- en: else if statements
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`else if`语句'
- en: Conditional ternary operators
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件三元运算符
- en: switch statements
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: switch语句
- en: 'Note: exercise, project and self-check quiz answers can be found in the *Appendix*.'
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意：练习、项目和自我检查测验的答案可以在*附录*中找到。
- en: if and if else statements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`if`和`if else`语句'
- en: 'We can make decisions in our code using if and if else statements. It is very
    much like this template:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`if`和`if else`语句在代码中做出决定。这非常类似于以下模板：
- en: '*if *some condition is true*, then *a certain action will happen*, else *another
    action will happen**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果*某个条件为真，则*将发生某个动作*，否则*将发生另一个动作**'
- en: 'For example, *if* it is raining then, I will take my umbrella, *else* I will
    leave my umbrella at home. It is not that much different in code:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，*如果*下雨，我会带上我的伞，*否则*我会把伞留在家里。在代码中并没有太大的不同：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In this case, the value of `rain` is `true`. And therefore, it will log to
    the console:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`rain`的值为`true`。因此，它将在控制台记录：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: But let's first take a step back and look at the syntax. We start with the word
    "if." After this, we get something within parentheses. Whatever is between these
    parantheses will be translated to a Boolean. If the value of this Boolean is `true`,
    it will execute the block of code associated with `if`. You can recognize this
    block by the curly braces.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 但让我们先退一步，看看语法。我们以单词"if"开始。之后，我们得到括号内的某个东西。括号之间的一切都将被转换为布尔值。如果这个布尔值的值为`true`，它将执行与`if`关联的代码块。你可以通过大括号来识别这个块。
- en: The next block is optional; it is an `else` block. It starts with the word "else"
    and is only executed in case of the Boolean having the value `false`. If there
    is no `else` block and the condition evaluates to false, the program will just
    skip ahead to the code underneath the `if`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个块是可选的；它是一个`else`块。它以单词"else"开始，并且仅在布尔值为`false`时执行。如果没有`else`块，并且条件评估为`false`，则程序将跳到`if`下面的代码。
- en: 'Only one of these two blocks will be executed; the `if` block when the expression
    is true, and the `else` block when the expression is false:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个块中只有一个将被执行；当表达式为真时执行`if`块，当表达式为假时执行`else`块：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here is another example. If the age is below 18, log to the console that access
    is denied, otherwise log to the console that the person is allowed to come in:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个另一个例子。如果年龄低于18岁，则在控制台记录访问被拒绝，否则在控制台记录该人获准进入：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: There is a common coding mistake related to `if` statements. I have made it
    in the following code snippet. Can you see what this code does?
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 与`if`语句相关的一个常见的编码错误。我在下面的代码片段中犯了这个错误。你能看出这段代码做了什么吗？
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It will log the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 它将记录以下内容：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: That might surprise you. The problem here is the single equal sign in the `if`
    statement. Instead of evaluating the condition, it is assigning `coding` to `hobby`.
    And then it is converting `coding` to a Boolean, and since it is not an empty
    string, it will become true, so the if block will be executed. So, always remember
    to use the double equal sign in this case.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能会让你感到惊讶。这里的问题是`if`语句中的单个等号。它不是评估条件，而是将`coding`赋值给`hobby`。然后它将`coding`转换为布尔值，由于它不是一个空字符串，所以它将是`true`，因此`if`块将被执行。所以，请始终记住在这种情况下使用双等号。
- en: Let's test our knowledge with a practice exercise.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个练习来测试我们的知识。
- en: Practice exercise 4.1
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习4.1
- en: Create a variable with a Boolean value.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个具有布尔值的变量。
- en: Output the value of the variable to the console.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将变量的值输出到控制台。
- en: 'Check whether the variable is true and if so, output a message to the console,
    using the following syntax:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查变量是否为真，如果是，则使用以下语法在控制台输出一条消息：
- en: '[PRE6]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Add another if statement with an `!` in front of the variable to check whether
    the condition is *not* true, and create a message that will be printed to the
    console in that instance. You should have two if statements, one with an `!` and the
    other without. You could also use an if and an else statement instead—experiment!
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加另一个带有变量前缀 `!` 的 `if` 语句来检查条件是否不成立，并创建一个在这种情况下将被打印到控制台的消息。你应该有两个 `if` 语句，一个带有
    `!`，另一个不带。你也可以使用一个 `if` 和一个 `else` 语句来代替——尝试一下！
- en: Change the variable to the opposite to see how the result changes.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将变量改为相反的值，看看结果如何变化。
- en: else if statements
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`else if` 语句'
- en: A variation of the `if` statement is an `if` statement with multiple `else if`
    blocks. This can be more efficient in certain situations because you are always
    only going to execute one or zero blocks. If you have many `if else` statements
    underneath one another, they are going to be evaluated and possibly executed even
    though one of the ones above already had a condition evaluate to true and proceeded
    to execute the associated code block.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`if` 语句的一个变体是带有多个 `else if` 块的 `if` 语句。在某些情况下，这可能会更有效，因为你总是只会执行一个或零个块。如果你有很多堆叠在一起的
    `if else` 语句，它们将被评估并可能执行，即使上面的某个语句已经有一个条件评估为真并继续执行相关的代码块。'
- en: 'Here is the written template:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是书面模板：
- en: '*If *a value falls into a certain category*, then *a certain action will happen*,
    else if *the value falls into a different category than the previous statement*,
    then *a certain action will happen*, else if *the value falls into a different
    category than either of the previous brackets*, then *a certain action will happen**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果 *一个值落在某个类别中*，则 *将发生某些操作*，否则如果 *值落在与上一个语句不同的类别中*，则 *将发生某些操作*，否则如果 *值落在与上述任一括号不同的类别中*，则
    *将发生某些操作**'
- en: 'For example, take this statement, to determine what the ticket price should
    be. If a person is younger than 3, then access is free, else if a person is older
    than 3 and younger than 12, then access is 5 dollars, else if a person is older
    than 12 and younger than 65, then access is 10 dollars, else if a person is 65
    or older, then access is 7 dollars:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下语句，以确定票价应该是多少。如果一个人年龄小于3岁，则免费入场，否则如果一个人年龄大于3岁且小于12岁，则入场费为5美元，否则如果一个人年龄大于12岁且小于65岁，则入场费为10美元，否则如果一个人年龄为65岁或以上，则入场费为7美元：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Chances are that you will think the code is easier to read than the written
    template. In that case, nicely done! You are really starting to think like a JavaScript
    developer already.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能你会认为代码比书面模板更容易阅读。在这种情况下，做得很好！你已经开始像JavaScript开发者一样思考了。
- en: 'The code gets executed top to bottom, and only one of the blocks will be executed.
    As soon as a true expression is encountered, the other ones will be ignored. This
    is why we can also write our sample like this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 代码从上到下执行，并且只有一个块会被执行。一旦遇到一个为真的表达式，其他块将被忽略。这就是为什么我们也可以像这样编写我们的示例：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Practice exercise 4.2
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习4.2
- en: Create a prompt to ask the user's age
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个提示来询问用户的年龄
- en: Convert the response from the prompt to a number
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将提示响应转换为数字
- en: Declare a message variable that you will use to hold the console message for
    the user
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个 `message` 变量，你将使用它来保存用户的控制台消息
- en: If the input age is equal to or greater than 21, set the `message` variable
    to confirm entry to a venue and the ability to purchase alcohol
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果输入的年龄等于或大于21岁，将 `message` 变量设置为确认入场并允许购买酒精
- en: If the input age is equal to or greater than 19, set the `message` variable
    to confirm entry to the venue but deny the purchase of alcohol
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果输入的年龄等于或大于19岁，将 `message` 变量设置为确认入场但拒绝购买酒精
- en: Provide a default else statement to set the `message` variable to deny entry
    if none are true
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供一个默认的 `else` 语句，如果没有任何条件成立，则将 `message` 变量设置为拒绝入场
- en: Output the response `message` variable to the console
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `message` 响应变量输出到控制台
- en: Conditional ternary operators
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 条件三元运算符
- en: 'We did not actually discuss this very important operator in our section on
    operators in *Chapter 2*, *JavaScript Essentials*. This is because it helps to
    understand the if else statement first. Remember that we had a unary operator
    that was called a unary operator because it only had one operand? This is why
    our ternary operator has its name; it has three operands. Here is its template:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实际上没有在我们的 *第 2 章* *JavaScript Essentials* 中的运算符部分讨论这个非常重要的运算符。这是因为它有助于首先理解
    if else 语句。记住，我们有一个被称为一元运算符的一元运算符，因为它只有一个操作数？这就是为什么我们的三元运算符有这个名字；它有三个操作数。以下是它的模板：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`operand1` is the expression that is to be evaluated. If the value of the expression
    is `true`, `operand2` gets executed. If the value of the expression is `false`,
    `operand3` gets executed. You can read the question mark as "then" and the colon
    as "else" here:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`operand1` 是要评估的表达式。如果表达式的值为 `true`，则执行 `operand2`。如果表达式的值为 `false`，则执行 `operand3`。在这里，你可以将问号读作“then”，将冒号读作“else”：'
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The template for saying it in your head should be:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在心里说它的模板应该是这样的：
- en: '*if *operand1*, then *operand2*, else *operand3**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*if *operand1*, then *operand2*, else *operand3***'
- en: 'Let''s have a look at a few examples:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看几个例子：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This syntax can be confusing at first. The template of what to say in your head
    while reading it can really come to the rescue here. You can only use these ternary
    operators for very short actions, so it's best practice to use the ternary operator
    in these instances as it makes code easier to read. However, if the logic contains
    multiple comparison arguments, you'll have to use the regular if-else.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这种语法一开始可能会让人困惑。在阅读时，心里想说什么的模板真的可以在这里救命。你只能将这些三元运算符用于非常短的操作，因此在这些情况下最好使用三元运算符，因为它使代码更容易阅读。然而，如果逻辑包含多个比较参数，你必须使用常规的
    if-else。
- en: Practice exercise 4.3
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 4.3
- en: Create a Boolean value for an ID variable
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 ID 变量创建一个布尔值
- en: Using a ternary operator, create a message variable that will check whether
    their ID is valid and either allow a person into a venue or not
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用三元运算符创建一个消息变量，该变量将检查他们的 ID 是否有效，并允许或不允许一个人进入场所
- en: Output the response to the console
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将响应输出到控制台
- en: switch statements
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: switch 语句
- en: If else statements are great for evaluating Boolean conditions. There are many
    things you can do with them, but in some cases, it is better to replace them with
    a switch statement. This is especially the case when evaluating more than four
    or five values.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: If else 语句非常适合评估布尔条件。你可以用它们做很多事情，但在某些情况下，最好用 switch 语句来替换它们。这尤其适用于评估四个或五个以上的值。
- en: 'We are going to see how switch statements can help us and what they look like.
    First, have a look at this if else statement:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到 switch 语句如何帮助我们以及它们的外观。首先，看看这个 if else 语句：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'It is determining what the time is based on what we are doing. It would be
    better to implement this using a switch statement. The syntax of a switch statement
    looks like this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 它是根据我们在做什么来确定时间的。最好使用 switch 语句来实现这一点。switch 语句的语法如下所示：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You can read it in your head as follows: If the expression equals `value1`,
    do whatever code is specified for that case. If the expression equals `value2`,
    do whatever code is specified for that case, and so on.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在心里这样读：如果表达式等于 `value1`，则执行该 case 指定的任何代码。如果表达式等于 `value2`，则执行该 case 指定的任何代码，依此类推。
- en: 'Here is how we can rewrite our long if else statement in a much cleaner manner
    using a switch statement:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们可以使用 switch 语句以更干净的方式重写我们的长 if else 语句的方法：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If our activity has the value `Lunch` it will output the following to the console:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的活动值为 `Lunch`，它将向控制台输出以下内容：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'What''s up with all these breaks, you may be wondering? If you do not use the
    command `break` at the end of a case, it will execute the next case as well. This
    will be done from the case where it has a match, until the end of the switch statement
    or until we encounter a `break` statement. This is what the output of our switch
    statement would be without breaks for the `Lunch` activity:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道所有这些 breaks 是怎么回事？如果你在 case 的末尾不使用 `break` 命令，它将执行下一个 case。这将从匹配的 case
    开始执行，直到 switch 语句的末尾或我们遇到一个 `break` 语句。这是没有 breaks 的 `Lunch` 活动的 switch 语句的输出：
- en: '[PRE18]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: One last side note. `switch` uses strict type checking (the triple equals strategy)
    to determine equality, which checks for both a value and a data type.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个注意事项。`switch` 使用严格类型检查（三等号策略）来确定相等性，这会检查值和数据类型。
- en: The default case
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认情况
- en: 'There is one part of switch that we have not worked with yet, and that is a
    special case label, namely, `default`. This works a lot like the else part of
    an if else statement. If it does not find a match with any of the cases and a
    default case is present, then it will execute the code associated with the default
    case. Here is the template of a switch statement with a default case:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有处理开关的一部分，那就是一个特殊的标签，即`default`。这和if else语句的else部分非常相似。如果它没有与任何case匹配，并且存在默认case，那么它将执行与默认case关联的代码。下面是一个带有默认case的switch语句的模板：
- en: '[PRE19]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The convention is to have the default case as the last case in the switch statement,
    but the code will work just fine when it is in the middle or the first case. However,
    we recommend you stick to the conventions and have it as a last case, since that
    is what other developers (and probably your future self) will expect when dealing
    with your code later.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 习惯上，将默认case放在switch语句的最后一个case，但代码即使放在中间或第一个case也能正常工作。然而，我们建议你坚持这些约定，并将其放在最后一个case，因为这是其他开发者（以及可能未来的你）在以后处理你的代码时预期的。
- en: 'Let''s say our long `if` statement has an `else` statement associated with
    it that looks like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们的长`if`语句有一个看起来像这样的`else`语句相关联：
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The switch statement would then look like this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: switch语句将看起来像这样：
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If the value of the activity was to be something that is not specified as a
    case, for example, "Watch Netflix," it would log the following to the console:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果活动的值要是不指定为case的内容，例如，“看Netflix”，它将在控制台记录以下内容：
- en: '[PRE22]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Practice exercise 4.4
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习4.4
- en: 'As discussed in *Chapter 1*, *Getting Started with JavaScript*, the JavaScript
    function `Math.random()` will return a random number in the range of 0 to less
    than 1, including 0 but not 1\. You can then scale it to the desired range by
    multiplying the result and using `Math.floor()` to round it down to the nearest
    whole number; for example, to generate a random number between 0 and 9:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如*第1章*中所述，*JavaScript入门*，JavaScript函数`Math.random()`将返回一个介于0到小于1之间的随机数，包括0但不包括1。然后你可以通过乘以结果并将其使用`Math.floor()`向下舍入到最接近的整数来将其缩放到所需的范围；例如，要生成一个介于0到9之间的随机数：
- en: '[PRE23]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In this exercise, we''ll create a Magic 8-Ball random answer generator:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将创建一个魔法8球随机答案生成器：
- en: Start by setting a variable that gets a random value assigned to it. The value
    is assigned by generating a random number 0-5, for 6 possible results. You can
    increase this number as you add more results.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先设置一个变量，将其随机值分配给它。这个值是通过生成0-5之间的随机数来分配的，有6种可能的结果。你可以随着添加更多结果来增加这个数字。
- en: Create a prompt that can get a string value input from a user that you can repeat
    back in the final output.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个提示，可以获取用户输入的字符串值，你可以在最终输出中重复它。
- en: Create 6 responses using the switch statement, each assigned to a different
    value from the random number generator.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用switch语句创建6个响应，每个响应分配给随机数生成器的不同值。
- en: Create a variable to hold the end response, which should be a sentence printed
    for the user. You can assign different string values for each case, assigning
    new values depending on the results from the random value.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个变量来保存最终响应，这应该是一个打印给用户的句子。你可以为每个case分配不同的字符串值，根据随机值的返回结果分配新值。
- en: Output the user's original question, plus the randomly selected case response,
    to the console after the user enters their question.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户输入问题后，将用户的原问题以及随机选择的case响应输出到控制台。
- en: Combining cases
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混合case
- en: 'Sometimes, you would want to do the exact same thing for multiple cases. In
    an if statement, you would have to specify all the different *or* (`||`) clauses.
    In a switch statement, you can simply combine them by putting them on top of each
    other like this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可能想要为多个case执行完全相同的事情。在if语句中，你必须指定所有不同的*或*（`||`）子句。在switch语句中，你可以通过将它们堆叠在一起来简单地合并它们，如下所示：
- en: '[PRE24]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'For the values `F` and `D`, the same thing is happening. This is also true
    for `C` and `B`. When the value of `grade` is either `C` or `B`, it will log the
    following to the console:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`F`和`D`的值，发生的情况相同。对于`C`和`B`也是如此。当`grade`的值为`C`或`B`时，它将在控制台记录以下内容：
- en: '[PRE25]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This is more readable than the alternative if-else statement:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这比替代的if-else语句更易读：
- en: '[PRE26]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Practice exercise 4.5
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习4.5
- en: Create a variable called `prize` and use a prompt to ask the user to set the
    value by selecting a number between 0 and 10
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`prize`的变量，并使用提示让用户通过选择0到10之间的数字来设置值。
- en: Convert the prompt response to a number data type
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将提示响应转换为数字数据类型
- en: Create a variable to use for the output message containing the value "`My Selection:`
    "
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个用于输出消息的变量，包含值“我的选择：”
- en: Using the switch statement (and creativity), provide a response back regarding
    a prize that is awarded depending on what number is selected
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用switch语句（和创造力），根据所选数字提供有关奖励的响应
- en: Use the switch break to add combined results for prizes
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用switch break添加奖励的合并结果
- en: Output the message back to the user by concatenating your prize variable strings
    and the output message string
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过连接你的奖励变量字符串和输出消息字符串将消息返回给用户
- en: Chapter projects
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节项目
- en: Evaluating a number game
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 评估数字游戏
- en: Ask the user to enter a number and check whether it's greater than, equal to,
    or less than a dynamic number value in your code. Output the result to the user.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 请求用户输入一个数字，并检查它是否大于、等于或小于代码中的动态数值。将结果输出给用户。
- en: Friend checker game
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 朋友检查游戏
- en: Ask the user to enter a name, using the switch statement to return a confirmation
    that the user is a friend if the name selected is known in the case statements.
    You can add a default response that you don't know the person if it's an unknown
    name. Output the result into the console.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 请求用户输入一个名字，使用switch语句返回一个确认，如果所选的名字在case语句中已知，则用户是朋友。如果你不知道这个名字，可以添加一个默认响应。将结果输出到控制台。
- en: Rock Paper Scissors game
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 石头、布、剪刀游戏
- en: 'This is a game between a player and the computer, where both will make a random
    selection of either Rock, Paper, or Scissors (alternatively, you could create
    a version using real player input!). Rock will beat out Scissors, Paper will beat
    out Rock, and Scissors will beat out Paper. You can use JavaScript to create your
    own version of this game, applying the logic with an if statement. Since this
    project is a little more difficult, here are some suggested steps:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个玩家和电脑之间的游戏，两者将随机选择石头、布或剪刀（或者你也可以创建一个使用真实玩家输入的版本！）。石头会打败剪刀，布会打败石头，剪刀会打败布。你可以使用JavaScript创建你自己的游戏版本，使用if语句应用逻辑。由于这个项目有点难，这里有一些建议的步骤：
- en: Create an array that contains the variables Rock, Paper, and Scissors.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含变量“石头”、“布”和“剪刀”的数组。
- en: Set up a variable that generates a random number 0-2 for the player and then
    do the same for the computer's selection. The number represents the index values
    in the array of the 3 items.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一个变量，生成一个0-2之间的随机数用于玩家，然后为电脑的选择也做同样的事情。这个数字代表数组中三个项目的索引值。
- en: Create a variable to hold a response message to the user. This can show the
    random results for the player and then also the result for the computer of the
    matching item from the array.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个用于保存响应消息的变量。这可以显示玩家的随机结果，然后也是从数组中匹配项目的电脑结果。
- en: Create a condition to handle the player and computer selections. If both are
    the same, this results in a tie.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个条件来处理玩家和电脑的选择。如果两者相同，则结果是平局。
- en: Use conditions to apply the game logic and return the correct results. There
    are several ways to do this with the condition statements, but you could check
    which player's index value is bigger and assign the victory accordingly, with
    the exception of Rock beating Scissors.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用条件来应用游戏逻辑并返回正确的结果。有几种方法可以使用条件语句来完成，但你可以检查哪个玩家的索引值更大，并据此分配胜利，除了石头打剪刀的情况。
- en: Add a new output message that shows the player selection versus the computer
    selection and the result of the game.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的输出消息，显示玩家选择与电脑选择以及游戏结果。
- en: Self-check quiz
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自我检查测验
- en: What will be outputted to the console in this instance?
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这种情况下，控制台将输出什么？
- en: '[PRE27]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: What will be outputted to the console in this instance?
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这种情况下，控制台将输出什么？
- en: '[PRE28]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: What will be outputted to the console in this instance?
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这种情况下，控制台将输出什么？
- en: '[PRE29]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: What will be outputted to the console in this instance?
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这种情况下，控制台将输出什么？
- en: '[PRE30]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: What will be outputted to the console in this instance?
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这种情况下，控制台将输出什么？
- en: '[PRE31]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: What will be outputted to the console in this instance?
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这种情况下，控制台将输出什么？
- en: '[PRE32]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: What will be outputted to the console in this instance?
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这种情况下，控制台将输出什么？
- en: '[PRE33]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Summary
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Now, let's wrap things up. In this chapter, we have covered conditional statements.
    We started with if else statements. Whenever the condition associated with the
    if is true, the if block gets executed. If the condition is false and there is
    an else block present, that will be executed. We have also seen ternary operators
    and the funky syntax they bring to the table. It is a short way of writing an
    if-else statement if you only need one statement per block.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来总结一下。在本章中，我们学习了条件语句。我们从if else语句开始。每当与if关联的条件为真时，if块就会被执行。如果条件为假且存在else块，那么else块将被执行。我们还看到了三元运算符以及它们带来的奇特语法。如果你只需要在每个块中写一个语句，这是一种写if-else语句的简短方式。
- en: And lastly, we have seen switch statements and how they can be used to optimize
    our conditional code. With the switch statement, we can compare one condition
    with many different cases. When they are equal (value and type), the code associated with
    the case gets executed.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们看到了switch语句以及它们如何被用来优化我们的条件代码。使用switch语句，我们可以将一个条件与许多不同的案例进行比较。当它们相等（值和类型）时，与case关联的代码将被执行。
- en: In the next chapter, we are going to add loops to the mix! This is going to
    help us write more efficient code and algorithms.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将向其中添加循环！这将帮助我们编写更高效的代码和算法。
