- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Logic Statements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up to this point, our code has been rather static. It will do the same thing
    every time we execute it. In this chapter, that is all going to change. We will
    be dealing with logical statements. Logical statements allow us to make multiple
    paths in our code. Depending on the outcome of a certain expression, we will follow
    one code path or another.
  prefs: []
  type: TYPE_NORMAL
- en: There are different logic statements, and we will go over them in this chapter.
    We will start with `if` and `if else` statements. After that, we will be dealing
    with the ternary operator, and the final one we will be dealing with is the `switch`
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Along the way, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: if and if else statements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: else if statements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conditional ternary operators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: switch statements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note: exercise, project and self-check quiz answers can be found in the *Appendix*.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if and if else statements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can make decisions in our code using if and if else statements. It is very
    much like this template:'
  prefs: []
  type: TYPE_NORMAL
- en: '*if *some condition is true*, then *a certain action will happen*, else *another
    action will happen**'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, *if* it is raining then, I will take my umbrella, *else* I will
    leave my umbrella at home. It is not that much different in code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, the value of `rain` is `true`. And therefore, it will log to
    the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: But let's first take a step back and look at the syntax. We start with the word
    "if." After this, we get something within parentheses. Whatever is between these
    parantheses will be translated to a Boolean. If the value of this Boolean is `true`,
    it will execute the block of code associated with `if`. You can recognize this
    block by the curly braces.
  prefs: []
  type: TYPE_NORMAL
- en: The next block is optional; it is an `else` block. It starts with the word "else"
    and is only executed in case of the Boolean having the value `false`. If there
    is no `else` block and the condition evaluates to false, the program will just
    skip ahead to the code underneath the `if`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Only one of these two blocks will be executed; the `if` block when the expression
    is true, and the `else` block when the expression is false:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is another example. If the age is below 18, log to the console that access
    is denied, otherwise log to the console that the person is allowed to come in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: There is a common coding mistake related to `if` statements. I have made it
    in the following code snippet. Can you see what this code does?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'It will log the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: That might surprise you. The problem here is the single equal sign in the `if`
    statement. Instead of evaluating the condition, it is assigning `coding` to `hobby`.
    And then it is converting `coding` to a Boolean, and since it is not an empty
    string, it will become true, so the if block will be executed. So, always remember
    to use the double equal sign in this case.
  prefs: []
  type: TYPE_NORMAL
- en: Let's test our knowledge with a practice exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Practice exercise 4.1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a variable with a Boolean value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Output the value of the variable to the console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check whether the variable is true and if so, output a message to the console,
    using the following syntax:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add another if statement with an `!` in front of the variable to check whether
    the condition is *not* true, and create a message that will be printed to the
    console in that instance. You should have two if statements, one with an `!` and the
    other without. You could also use an if and an else statement instead—experiment!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the variable to the opposite to see how the result changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: else if statements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A variation of the `if` statement is an `if` statement with multiple `else if`
    blocks. This can be more efficient in certain situations because you are always
    only going to execute one or zero blocks. If you have many `if else` statements
    underneath one another, they are going to be evaluated and possibly executed even
    though one of the ones above already had a condition evaluate to true and proceeded
    to execute the associated code block.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the written template:'
  prefs: []
  type: TYPE_NORMAL
- en: '*If *a value falls into a certain category*, then *a certain action will happen*,
    else if *the value falls into a different category than the previous statement*,
    then *a certain action will happen*, else if *the value falls into a different
    category than either of the previous brackets*, then *a certain action will happen**'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, take this statement, to determine what the ticket price should
    be. If a person is younger than 3, then access is free, else if a person is older
    than 3 and younger than 12, then access is 5 dollars, else if a person is older
    than 12 and younger than 65, then access is 10 dollars, else if a person is 65
    or older, then access is 7 dollars:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Chances are that you will think the code is easier to read than the written
    template. In that case, nicely done! You are really starting to think like a JavaScript
    developer already.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code gets executed top to bottom, and only one of the blocks will be executed.
    As soon as a true expression is encountered, the other ones will be ignored. This
    is why we can also write our sample like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Practice exercise 4.2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a prompt to ask the user's age
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Convert the response from the prompt to a number
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Declare a message variable that you will use to hold the console message for
    the user
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the input age is equal to or greater than 21, set the `message` variable
    to confirm entry to a venue and the ability to purchase alcohol
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the input age is equal to or greater than 19, set the `message` variable
    to confirm entry to the venue but deny the purchase of alcohol
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a default else statement to set the `message` variable to deny entry
    if none are true
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Output the response `message` variable to the console
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Conditional ternary operators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We did not actually discuss this very important operator in our section on
    operators in *Chapter 2*, *JavaScript Essentials*. This is because it helps to
    understand the if else statement first. Remember that we had a unary operator
    that was called a unary operator because it only had one operand? This is why
    our ternary operator has its name; it has three operands. Here is its template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '`operand1` is the expression that is to be evaluated. If the value of the expression
    is `true`, `operand2` gets executed. If the value of the expression is `false`,
    `operand3` gets executed. You can read the question mark as "then" and the colon
    as "else" here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The template for saying it in your head should be:'
  prefs: []
  type: TYPE_NORMAL
- en: '*if *operand1*, then *operand2*, else *operand3**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at a few examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This syntax can be confusing at first. The template of what to say in your head
    while reading it can really come to the rescue here. You can only use these ternary
    operators for very short actions, so it's best practice to use the ternary operator
    in these instances as it makes code easier to read. However, if the logic contains
    multiple comparison arguments, you'll have to use the regular if-else.
  prefs: []
  type: TYPE_NORMAL
- en: Practice exercise 4.3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a Boolean value for an ID variable
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using a ternary operator, create a message variable that will check whether
    their ID is valid and either allow a person into a venue or not
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Output the response to the console
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: switch statements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If else statements are great for evaluating Boolean conditions. There are many
    things you can do with them, but in some cases, it is better to replace them with
    a switch statement. This is especially the case when evaluating more than four
    or five values.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to see how switch statements can help us and what they look like.
    First, have a look at this if else statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'It is determining what the time is based on what we are doing. It would be
    better to implement this using a switch statement. The syntax of a switch statement
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You can read it in your head as follows: If the expression equals `value1`,
    do whatever code is specified for that case. If the expression equals `value2`,
    do whatever code is specified for that case, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how we can rewrite our long if else statement in a much cleaner manner
    using a switch statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'If our activity has the value `Lunch` it will output the following to the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'What''s up with all these breaks, you may be wondering? If you do not use the
    command `break` at the end of a case, it will execute the next case as well. This
    will be done from the case where it has a match, until the end of the switch statement
    or until we encounter a `break` statement. This is what the output of our switch
    statement would be without breaks for the `Lunch` activity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: One last side note. `switch` uses strict type checking (the triple equals strategy)
    to determine equality, which checks for both a value and a data type.
  prefs: []
  type: TYPE_NORMAL
- en: The default case
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is one part of switch that we have not worked with yet, and that is a
    special case label, namely, `default`. This works a lot like the else part of
    an if else statement. If it does not find a match with any of the cases and a
    default case is present, then it will execute the code associated with the default
    case. Here is the template of a switch statement with a default case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The convention is to have the default case as the last case in the switch statement,
    but the code will work just fine when it is in the middle or the first case. However,
    we recommend you stick to the conventions and have it as a last case, since that
    is what other developers (and probably your future self) will expect when dealing
    with your code later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say our long `if` statement has an `else` statement associated with
    it that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The switch statement would then look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'If the value of the activity was to be something that is not specified as a
    case, for example, "Watch Netflix," it would log the following to the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Practice exercise 4.4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As discussed in *Chapter 1*, *Getting Started with JavaScript*, the JavaScript
    function `Math.random()` will return a random number in the range of 0 to less
    than 1, including 0 but not 1\. You can then scale it to the desired range by
    multiplying the result and using `Math.floor()` to round it down to the nearest
    whole number; for example, to generate a random number between 0 and 9:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'In this exercise, we''ll create a Magic 8-Ball random answer generator:'
  prefs: []
  type: TYPE_NORMAL
- en: Start by setting a variable that gets a random value assigned to it. The value
    is assigned by generating a random number 0-5, for 6 possible results. You can
    increase this number as you add more results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a prompt that can get a string value input from a user that you can repeat
    back in the final output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create 6 responses using the switch statement, each assigned to a different
    value from the random number generator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a variable to hold the end response, which should be a sentence printed
    for the user. You can assign different string values for each case, assigning
    new values depending on the results from the random value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Output the user's original question, plus the randomly selected case response,
    to the console after the user enters their question.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Combining cases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes, you would want to do the exact same thing for multiple cases. In
    an if statement, you would have to specify all the different *or* (`||`) clauses.
    In a switch statement, you can simply combine them by putting them on top of each
    other like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'For the values `F` and `D`, the same thing is happening. This is also true
    for `C` and `B`. When the value of `grade` is either `C` or `B`, it will log the
    following to the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'This is more readable than the alternative if-else statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Practice exercise 4.5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a variable called `prize` and use a prompt to ask the user to set the
    value by selecting a number between 0 and 10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Convert the prompt response to a number data type
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a variable to use for the output message containing the value "`My Selection:`
    "
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the switch statement (and creativity), provide a response back regarding
    a prize that is awarded depending on what number is selected
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the switch break to add combined results for prizes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Output the message back to the user by concatenating your prize variable strings
    and the output message string
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Evaluating a number game
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ask the user to enter a number and check whether it's greater than, equal to,
    or less than a dynamic number value in your code. Output the result to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Friend checker game
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ask the user to enter a name, using the switch statement to return a confirmation
    that the user is a friend if the name selected is known in the case statements.
    You can add a default response that you don't know the person if it's an unknown
    name. Output the result into the console.
  prefs: []
  type: TYPE_NORMAL
- en: Rock Paper Scissors game
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is a game between a player and the computer, where both will make a random
    selection of either Rock, Paper, or Scissors (alternatively, you could create
    a version using real player input!). Rock will beat out Scissors, Paper will beat
    out Rock, and Scissors will beat out Paper. You can use JavaScript to create your
    own version of this game, applying the logic with an if statement. Since this
    project is a little more difficult, here are some suggested steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an array that contains the variables Rock, Paper, and Scissors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up a variable that generates a random number 0-2 for the player and then
    do the same for the computer's selection. The number represents the index values
    in the array of the 3 items.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a variable to hold a response message to the user. This can show the
    random results for the player and then also the result for the computer of the
    matching item from the array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a condition to handle the player and computer selections. If both are
    the same, this results in a tie.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use conditions to apply the game logic and return the correct results. There
    are several ways to do this with the condition statements, but you could check
    which player's index value is bigger and assign the victory accordingly, with
    the exception of Rock beating Scissors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new output message that shows the player selection versus the computer
    selection and the result of the game.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Self-check quiz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What will be outputted to the console in this instance?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What will be outputted to the console in this instance?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What will be outputted to the console in this instance?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What will be outputted to the console in this instance?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What will be outputted to the console in this instance?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What will be outputted to the console in this instance?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What will be outputted to the console in this instance?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's wrap things up. In this chapter, we have covered conditional statements.
    We started with if else statements. Whenever the condition associated with the
    if is true, the if block gets executed. If the condition is false and there is
    an else block present, that will be executed. We have also seen ternary operators
    and the funky syntax they bring to the table. It is a short way of writing an
    if-else statement if you only need one statement per block.
  prefs: []
  type: TYPE_NORMAL
- en: And lastly, we have seen switch statements and how they can be used to optimize
    our conditional code. With the switch statement, we can compare one condition
    with many different cases. When they are equal (value and type), the code associated with
    the case gets executed.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to add loops to the mix! This is going to
    help us write more efficient code and algorithms.
  prefs: []
  type: TYPE_NORMAL
