- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Select Wrapper – Choosing Values in Lists and Comboboxes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we’ll extend our suite of utility belt functions with a versatile
    method called `selectAdv()`. This function is designed to handle list elements
    effectively, similar to how our existing `clickAdv()` and `setValue()` functions
    operate. We’ll incorporate a validation check to ensure the element passed to
    the function is a valid one. Moreover, we’ll implement a retry mechanism that
    attempts to locate the element up to three times, scrolling it into view each
    time as necessary.
  prefs: []
  type: TYPE_NORMAL
- en: The true challenge, however, arises when dealing with comboboxes. These elements
    can be complex to interact with, especially when it comes to opening them to reveal
    a list of selectable items. Another point of concern is to clear any lingering
    text from the combobox before selecting a new value. We’ll explore three distinct
    strategies to achieve this.
  prefs: []
  type: TYPE_NORMAL
- en: Once these hurdles are overcome, the next step is to identify the desired item
    from the list and select it. Here, another tool, `SelectorsHub`, comes into play
    as a life-saving sidekick, assisting us in pinpointing the correct item with precision.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll cover the following main topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding the base functionality of `Click` and `setValue`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting an item from a list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inspecting a list that closes when it loses focus with `SelectorsHub`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will begin with the code that is common to the prior methods discussed.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the base functionality of clickAdv() and setValueAdv() to selectAdv()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just like our `clickAdv()` and `setValueAdv()` methods before, we will want
    to ensure that our elements are valid and scroll into view for our screen captures.
    If the test itself has already failed, we will not perform any further action,
    essentially stubbing out the function. The initial section of the method will
    be similar to the `clickAdv()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If the list element does not exist, we will make three attempts to find a similar
    node in the `getValidElement()` function. This first approach is to try to find
    a list using the `@``id` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If there are no elements found with all-lowercase IDs, we will try again without
    the case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Our final attempt will be to seek the child `select` node of any element that
    contains the text in the string. This is commonly a `Div` or `Span` node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have the list element, we have three ways to select the item from
    the list. Each way has its advantages and disadvantages.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting an item from the list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'WebdriverIO provides three ways to select an item from an element:'
  prefs: []
  type: TYPE_NORMAL
- en: '`selectByVisibleText`: Matches the option based on its visible text'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`selectByIndex`: Matches the option based on its index location (0-based)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`selectByAttribute`: Matches the option based on a specific attribute and its
    value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, if we wanted to select the third month from a list of months,
    each of these approaches could work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Often, the WebdriverIO `selectByVisibleText` method works fine as the default
    method in a wrapper, but there are times when a list element needs to interact
    with open of the alternative ways.
  prefs: []
  type: TYPE_NORMAL
- en: 'In each case, we should validate that the correct value has been selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In addition, if an error is thrown, we should attempt to find a close match
    in the list.
  prefs: []
  type: TYPE_NORMAL
- en: 'One way is to send the down arrow in the list. Then, we check whether the selected
    value contains the expected value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we can loop through and note the match or print the list of non-matching
    values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This is an infinite loop with two exit points. Either a close match was found
    or the last item of the list was reached and there was no match:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If this loop never finds a match, we will output the item we sought and the
    list of available elements stored in `arrItems[]`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This completes the most common list element. However, we can also support a
    path that interacts with a combobox, which can be a whole different type of beast.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting from a combobox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another reason to have a wrapper is to be able to identify and interact with
    an element that is not a true drop-down list. In this example, we have a combobox.
    This is both an input field and a selection from a list of potential matches.
    Take, for example, a list of countries.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – A combobox with an item selected from partial text](img/B19395_07_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – A combobox with an item selected from partial text
  prefs: []
  type: TYPE_NORMAL
- en: In `<select>` element with multiple `<option>` child elements. Here are a few
    approaches.
  prefs: []
  type: TYPE_NORMAL
- en: Using selectByVisibleText
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This method allows you to select an option by its visible text (the text displayed
    to the user):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Using selectByAttribute
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This method allows you to select an option by its `value` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Using selectByIndex
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This method allows you to select an option by its index (`0`-based):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Then, we click the field and type the item text. If we find an element containing
    the text, we click it. However, writing that element locator in a self-closing
    list can be tricky. That’s where `SelectorsHub` comes in handy.
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting a list that closes when it loses focus with SelectorsHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On occasion, it is difficult to get the locator of a list item because the
    list will only be open when the mouse cursor hovers over it. In this example,
    we can pause the execution of the web page in order to interact with the elements
    while the list is expanded. The pause feature in DevTools is located on the **Sources**
    tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – The Sources tab selected to display the pause button](img/B19395_07_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 – The Sources tab selected to display the pause button
  prefs: []
  type: TYPE_NORMAL
- en: 'This is handy for catching elements that do not stay on the screen long, such
    as spinners and *loading...* mechanisms. Sometimes, we’re just not fast enough
    to get to the pause button or the list simply closes once we move our mouse off
    of it. This is where a tool called `SelectorsHub` comes in handy. This tool is
    a Chrome browser add-on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3 – SelectorsHub displayed in the browser tools’ extentions menu](img/B19395_07_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3 – SelectorsHub displayed in the browser tools’ extentions menu
  prefs: []
  type: TYPE_NORMAL
- en: This tool can be installed by searching the Chrome browser extensions.
  prefs: []
  type: TYPE_NORMAL
- en: Once installed, the tool can be found on the **Elements** tab. Usually, it’s
    the first tab listed, and sometimes, it’s the last. One of the hidden features
    of this tool is **Debug** mode.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4 – Activating the pause from SelectorsHub to freeze a spinner and
    get its locator ID](img/B19395_07_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4 – Activating the pause from SelectorsHub to freeze a spinner and
    get its locator ID
  prefs: []
  type: TYPE_NORMAL
- en: 'By clicking the `SelectorsHub` will automatically pause the web page after
    five seconds. This allows us to capture tricky elements in good time. Try pausing
    the *loading...* spinner page of the website at [https://candymapperr2.com/launch-candymapper](https://candymapperr2.com/launch-candymapper):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5 – An example of a spinner on a web page](img/B19395_07_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.5 – An example of a spinner on a web page
  prefs: []
  type: TYPE_NORMAL
- en: The default setting of entering pause mode after five seconds is sufficient
    for most of these situations. To catch very brief elements, the **Settings** option
    allows us to change the delay to shorter or longer amounts as needed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.6 – Setting the time for the debugger to wait](img/B19395_07_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.6 – Setting the time for the debugger to wait
  prefs: []
  type: TYPE_NORMAL
- en: This also works well with *loading...* **wait** mechanisms that are briefly
    displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a locator that is an element inside a list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we have our list in a combobox and can clear any existing element text.
    There are a few ways this can be done. We can set the value, we can double-click
    to select all the existing text, and lastly, we can send *Ctrl* + *A* keystrokes
    to the field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'However, that may not work for all input field elements. Perhaps a double-click
    to the field will work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Well, it will work if there is a single word already in the field, such as `Denmark`,
    but not if it includes spaces, such as `Trinidad` `and Tobago`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Surprisingly, a triple click on a field will select everything. However, at
    the time of writing, the authors know of no automation tool that supports triple
    clicks. Also, in case you were wondering, this is not a triple-click:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a way to clear a field. Set the focus on the field with a single click.
    Then, send a `Home` keystroke to place the cursor at the start of the field. Next,
    hit the *Shift* and *End* keys to highlight all the text in the field. Finally,
    send a *Delete* key to the field followed by the text, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In this situation, the combobox displays all the items that are available to
    choose. Inside a `try` and `Catch`, we can now get a collection of all the list
    items that match our expected value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We search for a list item that is close to a perfect match.
  prefs: []
  type: TYPE_NORMAL
- en: 'If found, we break the loop and perform a click, using the custom `clickAdv()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If this fails, it means there was no item to click. The most important information
    we need to log now is what the available items displayed in the list were:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have a robust custom method that will give actionable details to help
    us maintain our tests when they fail. From here, we can extend this method to
    report when there are multiple close matches.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we wrote a custom wrapper to select an item from a list element.
    We learned how to handle two separate types of objects with a single method, reducing
    test case code. The combobox path uses the `click()` method to open and navigate
    through a list, as well as clear the input field that filters matches in the list.
    We embedded reporting if no exact or close match exists, making debugging easier.
    This was done by sending a log error message, indicating what item was sought,
    the list element it was using, and the list of non-matching values. We also showed
    how to use `SelectorsHub` to provide a way to validate handwritten XPath selectors
    when the list closes, as soon as the object loses focus.
  prefs: []
  type: TYPE_NORMAL
- en: This completes three of the four most common methods used in test automation.
    In the next chapter, we will create an enhanced `Assertion` method that validates
    the state or text of an object, as well as validating generic text that appears
    on a page.
  prefs: []
  type: TYPE_NORMAL
