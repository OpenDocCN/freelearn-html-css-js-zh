- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: The Select Wrapper – Choosing Values in Lists and Comboboxes
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择包装器 – 在列表和组合框中选择值
- en: In this chapter, we’ll extend our suite of utility belt functions with a versatile
    method called `selectAdv()`. This function is designed to handle list elements
    effectively, similar to how our existing `clickAdv()` and `setValue()` functions
    operate. We’ll incorporate a validation check to ensure the element passed to
    the function is a valid one. Moreover, we’ll implement a retry mechanism that
    attempts to locate the element up to three times, scrolling it into view each
    time as necessary.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过一个名为 `selectAdv()` 的多功能方法扩展我们的工具函数集。这个函数旨在有效地处理列表元素，类似于我们现有的 `clickAdv()`
    和 `setValue()` 函数的操作。我们将包含一个验证检查以确保传递给函数的元素是有效的。此外，我们将实现一个重试机制，该机制尝试最多三次定位元素，每次必要时将其滚动到视图中。
- en: The true challenge, however, arises when dealing with comboboxes. These elements
    can be complex to interact with, especially when it comes to opening them to reveal
    a list of selectable items. Another point of concern is to clear any lingering
    text from the combobox before selecting a new value. We’ll explore three distinct
    strategies to achieve this.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，真正的挑战出现在处理组合框时。这些元素与交互复杂，尤其是在打开它们以显示可选择的项列表时。另一个关注点是，在选择新值之前清除组合框中残留的任何文本。我们将探讨三种不同的策略来实现这一点。
- en: Once these hurdles are overcome, the next step is to identify the desired item
    from the list and select it. Here, another tool, `SelectorsHub`, comes into play
    as a life-saving sidekick, assisting us in pinpointing the correct item with precision.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦克服了这些障碍，下一步就是从列表中识别所需的项目并选择它。在这里，另一个工具 `SelectorsHub` 作为救星出现，帮助我们精确地定位正确的项目。
- en: 'We’ll cover the following main topics in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中将涵盖以下主要主题：
- en: Adding the base functionality of `Click` and `setValue`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `Click` 和 `setValue` 的基本功能添加
- en: Selecting an item from a list
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从列表中选择项目
- en: Inspecting a list that closes when it loses focus with `SelectorsHub`
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `SelectorsHub` 检查失去焦点时关闭的列表
- en: We will begin with the code that is common to the prior methods discussed.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从之前讨论的方法中共同的代码开始。
- en: Adding the base functionality of clickAdv() and setValueAdv() to selectAdv()
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 `clickAdv()` 和 `setValueAdv()` 的基本功能添加到 `selectAdv()`
- en: 'Just like our `clickAdv()` and `setValueAdv()` methods before, we will want
    to ensure that our elements are valid and scroll into view for our screen captures.
    If the test itself has already failed, we will not perform any further action,
    essentially stubbing out the function. The initial section of the method will
    be similar to the `clickAdv()` method:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 就像之前的 `clickAdv()` 和 `setValueAdv()` 方法一样，我们希望确保我们的元素是有效的并且滚动到视图中以便进行屏幕截图。如果测试本身已经失败，我们将不会执行任何进一步的操作，本质上就是模拟函数。方法的开头部分将与
    `clickAdv()` 方法类似：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If the list element does not exist, we will make three attempts to find a similar
    node in the `getValidElement()` function. This first approach is to try to find
    a list using the `@``id` property:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果列表元素不存在，我们将在 `getValidElement()` 函数中尝试找到三个类似节点。第一种方法是通过尝试使用 `@id` 属性找到列表：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If there are no elements found with all-lowercase IDs, we will try again without
    the case:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有找到所有小写 ID 的元素，我们将尝试再次不区分大小写：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Our final attempt will be to seek the child `select` node of any element that
    contains the text in the string. This is commonly a `Div` or `Span` node:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后的尝试将是寻找包含字符串中文本的任何元素的子 `select` 节点。这通常是一个 `Div` 或 `Span` 节点：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now that we have the list element, we have three ways to select the item from
    the list. Each way has its advantages and disadvantages.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了列表元素，我们有三种方式从列表中选择项目。每种方式都有其优点和缺点。
- en: Selecting an item from the list
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从列表中选择项目
- en: 'WebdriverIO provides three ways to select an item from an element:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: WebdriverIO 提供了三种从元素中选择项目的方法：
- en: '`selectByVisibleText`: Matches the option based on its visible text'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`selectByVisibleText`：根据其可见文本匹配选项'
- en: '`selectByIndex`: Matches the option based on its index location (0-based)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`selectByIndex`：根据其索引位置（基于0）匹配选项'
- en: '`selectByAttribute`: Matches the option based on a specific attribute and its
    value'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`selectByAttribute`：根据特定的属性及其值匹配选项'
- en: 'For example, if we wanted to select the third month from a list of months,
    each of these approaches could work:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想从一个月份列表中选择第三个月份，这些方法中的每一个都可能有效：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Often, the WebdriverIO `selectByVisibleText` method works fine as the default
    method in a wrapper, but there are times when a list element needs to interact
    with open of the alternative ways.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，WebdriverIO的`selectByVisibleText`方法作为包装器中的默认方法运行良好，但有时列表元素需要以其他方式与打开的列表进行交互。
- en: 'In each case, we should validate that the correct value has been selected:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在每种情况下，我们都应该验证是否已选择了正确的值：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In addition, if an error is thrown, we should attempt to find a close match
    in the list.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果抛出错误，我们应该尝试在列表中找到一个接近匹配。
- en: 'One way is to send the down arrow in the list. Then, we check whether the selected
    value contains the expected value:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一种方法是在列表中发送下箭头。然后，我们检查所选值是否包含预期的值：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, we can loop through and note the match or print the list of non-matching
    values:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以循环遍历并记录匹配项或打印不匹配值的列表：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This is an infinite loop with two exit points. Either a close match was found
    or the last item of the list was reached and there was no match:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个有两个出口点的无限循环。要么找到了一个接近匹配，要么到达了列表的最后一个项目但没有匹配：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If this loop never finds a match, we will output the item we sought and the
    list of available elements stored in `arrItems[]`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个循环从未找到匹配项，我们将输出我们寻求的项目和存储在`arrItems[]`中的可用元素列表：
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This completes the most common list element. However, we can also support a
    path that interacts with a combobox, which can be a whole different type of beast.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了最常见的列表元素列表。然而，我们也可以支持一种与组合框交互的路径，这可能是一种完全不同的类型。
- en: Selecting from a combobox
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从组合框中选择
- en: Another reason to have a wrapper is to be able to identify and interact with
    an element that is not a true drop-down list. In this example, we have a combobox.
    This is both an input field and a selection from a list of potential matches.
    Take, for example, a list of countries.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个使用包装器的原因是能够识别和与不是真正下拉列表的元素交互。在这个例子中，我们有一个组合框。这既是输入字段，也是从潜在匹配项列表中进行选择。以国家列表为例。
- en: '![Figure 7.1 – A combobox with an item selected from partial text](img/B19395_07_1.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图7.1 – 从部分文本中选择项的组合框](img/B19395_07_1.jpg)'
- en: Figure 7.1 – A combobox with an item selected from partial text
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1 – 从部分文本中选择项的组合框
- en: In `<select>` element with multiple `<option>` child elements. Here are a few
    approaches.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在具有多个`<option>`子元素的`<select>`元素中。这里有一些方法。
- en: Using selectByVisibleText
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用selectByVisibleText
- en: 'This method allows you to select an option by its visible text (the text displayed
    to the user):'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法允许您通过其可见文本（用户显示的文本）选择一个选项：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Using selectByAttribute
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用selectByAttribute
- en: 'This method allows you to select an option by its `value` attribute:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法允许您通过其`value`属性选择一个选项：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Using selectByIndex
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用selectByIndex
- en: 'This method allows you to select an option by its index (`0`-based):'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法允许您通过其索引（`0`为基础）选择一个选项：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Then, we click the field and type the item text. If we find an element containing
    the text, we click it. However, writing that element locator in a self-closing
    list can be tricky. That’s where `SelectorsHub` comes in handy.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们点击字段并输入项目文本。如果我们找到一个包含该文本的元素，我们就点击它。然而，在自闭合列表中编写该元素定位器可能很棘手。这就是`SelectorsHub`派上用场的地方。
- en: Inspecting a list that closes when it loses focus with SelectorsHub
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SelectorsHub检查失去焦点时关闭的列表
- en: 'On occasion, it is difficult to get the locator of a list item because the
    list will only be open when the mouse cursor hovers over it. In this example,
    we can pause the execution of the web page in order to interact with the elements
    while the list is expanded. The pause feature in DevTools is located on the **Sources**
    tab:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，很难获取列表项的定位器，因为列表只有在鼠标光标悬停在其上时才会打开。在这个例子中，我们可以暂停网页的执行，以便在列表展开时与元素交互。DevTools中的暂停功能位于**源**选项卡：
- en: '![Figure 7.2 – The Sources tab selected to display the pause button](img/B19395_07_2.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图7.2 – 选择“源”选项卡以显示暂停按钮](img/B19395_07_2.jpg)'
- en: Figure 7.2 – The Sources tab selected to display the pause button
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2 – 选择“源”选项卡以显示暂停按钮
- en: 'This is handy for catching elements that do not stay on the screen long, such
    as spinners and *loading...* mechanisms. Sometimes, we’re just not fast enough
    to get to the pause button or the list simply closes once we move our mouse off
    of it. This is where a tool called `SelectorsHub` comes in handy. This tool is
    a Chrome browser add-on:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于捕获不会在屏幕上停留很长时间的元素很有用，例如旋转器和*加载...*机制。有时，我们可能不够快，无法到达暂停按钮，或者当我们移动鼠标离开它时，列表简单地关闭。这就是一个名为`SelectorsHub`的工具派上用场的地方。这个工具是Chrome浏览器的插件：
- en: '![Figure 7.3 – SelectorsHub displayed in the browser tools’ extentions menu](img/B19395_07_3.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.3 – SelectorsHub 显示在浏览器工具扩展菜单中](img/B19395_07_3.jpg)'
- en: Figure 7.3 – SelectorsHub displayed in the browser tools’ extentions menu
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – SelectorsHub 显示在浏览器工具扩展菜单中
- en: This tool can be installed by searching the Chrome browser extensions.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工具可以通过在 Chrome 浏览器扩展中搜索来安装。
- en: Once installed, the tool can be found on the **Elements** tab. Usually, it’s
    the first tab listed, and sometimes, it’s the last. One of the hidden features
    of this tool is **Debug** mode.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，该工具可以在 **元素** 选项卡中找到。通常，它是列出的第一个选项卡，有时是最后一个。这个工具的一个隐藏功能是 **调试** 模式。
- en: '![Figure 7.4 – Activating the pause from SelectorsHub to freeze a spinner and
    get its locator ID](img/B19395_07_4.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.4 – 从 SelectorsHub 激活暂停以冻结转轮并获取其定位器 ID](img/B19395_07_4.jpg)'
- en: Figure 7.4 – Activating the pause from SelectorsHub to freeze a spinner and
    get its locator ID
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4 – 从 SelectorsHub 激活暂停以冻结转轮并获取其定位器 ID
- en: 'By clicking the `SelectorsHub` will automatically pause the web page after
    five seconds. This allows us to capture tricky elements in good time. Try pausing
    the *loading...* spinner page of the website at [https://candymapperr2.com/launch-candymapper](https://candymapperr2.com/launch-candymapper):'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 `SelectorsHub` 将在五秒后自动暂停网页。这使我们能够及时捕获难以捉摸的元素。尝试暂停网站 [https://candymapperr2.com/launch-candymapper](https://candymapperr2.com/launch-candymapper)
    的 *加载中...* 转轮页面：
- en: '![Figure 7.5 – An example of a spinner on a web page](img/B19395_07_5.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.5 – 网页上的转轮示例](img/B19395_07_5.jpg)'
- en: Figure 7.5 – An example of a spinner on a web page
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5 – 网页上的转轮示例
- en: The default setting of entering pause mode after five seconds is sufficient
    for most of these situations. To catch very brief elements, the **Settings** option
    allows us to change the delay to shorter or longer amounts as needed.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，五秒后进入暂停模式对于大多数这些情况来说已经足够了。为了捕捉非常短暂的对象，**设置** 选项允许我们根据需要更改延迟时间，使其更短或更长。
- en: '![Figure 7.6 – Setting the time for the debugger to wait](img/B19395_07_6.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.6 – 设置调试器等待时间](img/B19395_07_6.jpg)'
- en: Figure 7.6 – Setting the time for the debugger to wait
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6 – 设置调试器等待时间
- en: This also works well with *loading...* **wait** mechanisms that are briefly
    displayed.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这也适用于短暂显示的 *加载中...* **等待** 机制。
- en: Writing a locator that is an element inside a list
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写位于列表中的定位器
- en: 'Now, we have our list in a combobox and can clear any existing element text.
    There are a few ways this can be done. We can set the value, we can double-click
    to select all the existing text, and lastly, we can send *Ctrl* + *A* keystrokes
    to the field:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们在组合框中有我们的列表，可以清除任何现有的元素文本。有几种方法可以做到这一点。我们可以设置值，我们可以双击以选择所有现有文本，最后，我们可以向字段发送
    *Ctrl* + *A* 键盘快捷键：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'However, that may not work for all input field elements. Perhaps a double-click
    to the field will work:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这可能不会适用于所有输入字段元素。也许双击字段会起作用：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Well, it will work if there is a single word already in the field, such as `Denmark`,
    but not if it includes spaces, such as `Trinidad` `and Tobago`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，如果字段中已经有一个单词，比如 `Denmark`，那么它就会起作用，但如果它包含空格，比如 `Trinidad` `and Tobago`，则不会起作用。
- en: 'Surprisingly, a triple click on a field will select everything. However, at
    the time of writing, the authors know of no automation tool that supports triple
    clicks. Also, in case you were wondering, this is not a triple-click:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 令人惊讶的是，在字段上三击会选中所有内容。然而，在撰写本文时，作者知道没有自动化工具支持三击。此外，如果你想知道，这并不是三击：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here is a way to clear a field. Set the focus on the field with a single click.
    Then, send a `Home` keystroke to place the cursor at the start of the field. Next,
    hit the *Shift* and *End* keys to highlight all the text in the field. Finally,
    send a *Delete* key to the field followed by the text, like this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一种清除字段的方法。通过单次点击将焦点置于字段上。然后，发送一个 `Home` 键来将光标置于字段的起始位置。接下来，按住 *Shift* 和 *End*
    键以突出显示字段中的所有文本。最后，向字段发送一个 *Delete* 键，然后是文本，如下所示：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In this situation, the combobox displays all the items that are available to
    choose. Inside a `try` and `Catch`, we can now get a collection of all the list
    items that match our expected value:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，组合框会显示所有可供选择的项目。在一个 `try` 和 `Catch` 块中，我们现在可以获取所有与预期值匹配的列表项集合：
- en: '[PRE17]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We search for a list item that is close to a perfect match.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们搜索一个接近完美匹配的列表项。
- en: 'If found, we break the loop and perform a click, using the custom `clickAdv()`
    method:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果找到，我们就会中断循环并执行点击操作，使用自定义的 `clickAdv()` 方法：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If this fails, it means there was no item to click. The most important information
    we need to log now is what the available items displayed in the list were:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这失败了，意味着没有可点击的项目。我们现在需要记录的最重要信息是列表中显示的可用项目：
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now, we have a robust custom method that will give actionable details to help
    us maintain our tests when they fail. From here, we can extend this method to
    report when there are multiple close matches.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有一个健壮的自定义方法，它将提供可操作的详细信息，帮助我们维护测试失败时的测试。从这里，我们可以扩展此方法，以便在存在多个近似匹配时报告。
- en: Summary
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we wrote a custom wrapper to select an item from a list element.
    We learned how to handle two separate types of objects with a single method, reducing
    test case code. The combobox path uses the `click()` method to open and navigate
    through a list, as well as clear the input field that filters matches in the list.
    We embedded reporting if no exact or close match exists, making debugging easier.
    This was done by sending a log error message, indicating what item was sought,
    the list element it was using, and the list of non-matching values. We also showed
    how to use `SelectorsHub` to provide a way to validate handwritten XPath selectors
    when the list closes, as soon as the object loses focus.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们编写了一个自定义包装器来从列表元素中选择一个项目。我们学习了如何使用单一方法处理两种不同的对象类型，从而减少测试用例代码。组合框路径使用
    `click()` 方法打开并遍历列表，以及清除输入字段以过滤列表中的匹配项。我们嵌入报告，如果不存在精确匹配或近似匹配，使调试更容易。这是通过发送日志错误消息来完成的，指示所寻求的项目、所使用的列表元素以及不匹配的值列表。我们还展示了如何使用
    `SelectorsHub` 在列表关闭时，当对象失去焦点时，验证手写的 XPath 选择器。
- en: This completes three of the four most common methods used in test automation.
    In the next chapter, we will create an enhanced `Assertion` method that validates
    the state or text of an object, as well as validating generic text that appears
    on a page.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了测试自动化中最常用的四种方法中的三种。在下一章中，我们将创建一个增强的 `Assertion` 方法，该方法验证对象的状态或文本，以及验证页面上的通用文本。
