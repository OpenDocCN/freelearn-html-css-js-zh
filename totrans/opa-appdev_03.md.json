["```js\nServer.start(Server.http, {text: \"hello Opa\"})\n```", "```js\n$ opa 301.opa –-\n\n```", "```js\nHttp serving on http://localhost:8080\n\n```", "```js\nvoid start(Server.conf arg1, Server.handler handler)\n```", "```js\ntype Server.conf = {\n  int port,                    //port server runs on\n  ip netmask,                  //netmask\n  Server.encryption encryption,//secure config if using https\n  String name                  //server name\n}\n```", "```js\nconf = {Server.http with port: 8088}\nServer.start(conf,{text: \"Hello Opa!\"})\n```", "```js\ntype Server.handler = \n  {string text} or\n  {string title, (-> xhtml) page} or\n  {stringmap(resource) resources} or\n  {(Uri.relative -> resource) dispatch} or\n  {Server.filter filter, (Uri.relative -> resource) dispatch} or\n  {Server.registrable_resource register} or\n  {Parser.general_parser(resource) custom} or\n  list(Server.handler)\n```", "```js\nServer.start(Server.http, {\n  title: \"Opa world\"\n  page : function(){ <h1>Hello Opa!</h1> }\n})\n```", "```js\n\"res/opa1.png\" -> a resource of opa1.png\n\"res/opa2.png\" -> a resource of opa2.png\n\"res/opa3.png\" -> a resource of opa3.png\n```", "```js\nServer.start(Server.http,{\n  resources: @static_resource_directory(\"res\")\n})\n```", "```js\ntype Uri.relative ={\n  list(string) path,\n  list((string, string)) query,\n  option(string) fragment,\n  bool is_directory,\n  bool is_from_root\n}\n```", "```js\n{ path: [admin,find],            //a list of path\n  query: [(name,Li),(age,28)],   //a list of tuple2\n  ...}                        //we do not care about the fields here.\n```", "```js\nfunction dispatch(uri){\n  match(uri){\n  case {path:[],...} ：Resource.page(\"Login\",<h1>Login</h1>);\n  case {path:[\"admin\"|_],...}:Resource.page(\"Admin\", <h1>Admin</h1>);\n  case {path:[\"user\",x|_],...}:Resource.page(\"User\", <h1>User:{x}</h1>);\n  }\n}\nServer.start(Server.http,{~dispatch})\n```", "```js\nServer.start(Server.http,{\n  filter: Server.Filter.path([\"opa\",\"packt\"]),\n  dispatch: function(_){\n    Resource.page(\"opa packt\",<h1> Hello Opa!</h1>)\n  }\n})\n```", "```js\nServer.start(Server.http,{\n  register: [ \n    {doctype: {html5}}, \n    {js: [\"/res/js/js1.js\",\"/res/js/js2.js\"]},\n    {css: [\"/res/css/style1.css\",\"/res/css/style2.css\"]}\n  ]\n});\n```", "```js\ncustom = parser{\n  case (\"/admin\".*) : Resource.page(\"Admin\",<h1>Admin</h1>);\n  case (\"/user\".*) : Resource.page(\"User\",<h1>User</h1>);\n  case (.*) : Resource.page(\"default\",<h1>default</h1>);\n}\nServer.start(Server.http, {~custom});\n```", "```js\nServer.start(Server.http,[\n{resources: @static_resource_directory(\"resources\")},\n  {~dispatch},  //we omitted the definition here\n  {~custom},    //we omitted the definition here\n  {title:\"404\", page:function(){ <h1>Page Not Found!<h1> }}\n]);\n```", "```js\n// XHTML is a data-type with built-in syntax\nxhtml span = <span class=\"test\">Hello Opa!</span>\n//named closing tag is optional,\n// so are the quotes around literal attributes\nanother_span = <span class=test>Hello XHTML</>\n```", "```js\nfunction f(class, content){\n  <span class=\"{class}\"> {content} </span>\n}\n```", "```js\nresource page(string title, xhtml body)\n```", "```js\nfunction dispatch(_){\n  Resource.page(\"Opa Packt\", <h1>Hello Opa!</h1>)\n}\nServer.start(Server.http,{~dispathc})\n```", "```js\nred_style = css { color: red }\nspan = <span style={red_style} />\n// one can use inserts inside css, i.e. height: {height}px;\nfunction div(width, height, content) {\n  <div style={ css { height: {height}px; width: {width}px }}>\n   {content}\n  </div>\n}\n```", "```js\nServer.start(Server.http,\n  [ {register: {css: [\"resources/css/style.css\"]}} , ...]\n)\n```", "```js\n// save this as file: resources/hello.css\n.hello1 { font-size: 20pt }\n.hello2 { font-size: 12pt }\n//save the following code as a file, compile and run it.\nfunction dispatch(_){\n  Resource.styled_page(\"Opa Packt\", [\"resources/hello.css\"],\n    <div class=\"hello1\">Hello Opa!</div>\n    <div class=\"hello2\">Hello Opa!</div>\n  )\n}\nServer.start(Server.http,[\n  {resources: @static_resource_directory(\"resources\")},\n  {~dispatch}\n])\n```", "```js\nfunction f1(_){ #test1 = \"test1\"}\nfunction f2(_){ Dom.set_text(#test2,\"clicked\"}\nfunction f3(_){ Dom.clear_value(#test3) }\nfunction page(){\n  <div id=#test1 onready={f1}></div>\n  <button id=#test2 onclick={f2}>click</button>\n  <input id=#test3 onnewline={f3}></input>\n  <div id=#test4 onclick={function(_){ jlog(\"clicked\") }}></div>\n}\nServer.start(Server.http, {title:\"Opa Packt\", ~page})\n```", "```js\nDom.select_id(\"id\")          //select element with a given id\nDom.select_document()        //select the complete document\nDom.select_class(\"class\")    //select elements belongs to a class\nDom.select_children(parent)  //select all children\n//and much more, search online Opa API for entry Dom\n```", "```js\n#text   //the same as: dom = Dom.select_id(\"text\")\n#{test} //insert can be used in this in combination with the //shortcut notation.\nDom.select_children(#text)\n```", "```js\n<input id=#test type=\"text\" value=\"test1\">test2</input>\nx1 = Dom.get_value(#test)            // x1 = test1, x1 is a string\ny1 = Dom.get_text(#test)             // y1 = test2, y1 is a string\nx2 = Dom.get_attribute(#test,\"type\") // x2 = {some: text}\ny2 = Dom.get_property(#test,\"type\")  // y2 = {some: text}\nx3 = Dom.get_with(#test)             //x3 is the width of #test\ny3 = Dom.get_height(#test)           //y3 is the height of #test\n```", "```js\n#identifier = content  //replace the content\n#identifier =+ content //prepend the content\n#identifier += content //append the content\n```", "```js\nDom.add_class(#test,\"style\")    //add a class \"style\" to #test\nDom.clear_value(#test)\t          //clear the value of #test\nDom.put_after(#test,#item)      //move #item after #test\nDom.put_before(#test,#item)     //move #item before #test\nDom.put_replace(#test,#item)    //replace #test with #item\nDom.remove(#test)               //remove dom #test\nDom.remove_class(#test,\"style\") //remove class \"style\" in #test\nDom.remove_content(#test)       //remove #test's content\n//and for more, search online Opa API for entry Dom\n```", "```js\nDom.event_handler bind(dom dom, Dom.event.kind event, \n  ( Dom.event -> void ) handler)\n```", "```js\n<input id=#test type=\"button\" value=\"bind\"></input>\n//bind #test's click event with a function\nhandler = Dom.bind(#test,{click},function(_){ void })\nDom.unbind(#test, handler) //unbind the event handler\n```", "```js\nDom.transaction transition(dom item, Dom.animation effect)\n```", "```js\nfunction hide(_){\n  _ = Dom.transition(#test,Dom.Effect.hide()); void\n}\nfunction page(){\n  <div id=#test style=\"width:100px;height:100px;\"></div>\n  <button id=#btnanim onclick={hide}>Hide</button>\n}\nServer.start(Server.http,{title:\"Opa Packt\", ~page})\n```"]