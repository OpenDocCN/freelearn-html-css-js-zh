- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Writing Less Code – CMSs, No-Code Solutions, and Generative AI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Developers are an inherently lazy bunch. I know that sounds weird but hear
    me out! We are always looking for ways to write *less* code. Sometimes, there
    is a good reason for that: if someone has already put a ton of time and effort
    into writing a library that, say, encrypts data, then why should we waste our
    time re-inventing that particular wheel? We probably shouldn’t in most cases.'
  prefs: []
  type: TYPE_NORMAL
- en: Instead, we’re always looking for tools to automate tasks, to generate code
    for us, or to otherwise save us from ourselves! Of course, I was being facetious
    earlier when I said we’re lazy. No, it’s more about the efficient use of our time.
    After all, you can hammer a nail into a piece of wood with a screwdriver if you
    need to, but it’s far faster and more efficient to use an actual hammer. Just
    like in carpentry, choosing the right tool for a job is key in web development.
  prefs: []
  type: TYPE_NORMAL
- en: So, after talking about writing code for a few chapters, we’re now going to
    talk about how to avoid doing just that – or, at least, minimizing it as much
    as possible and writing code with tools more efficiently! Especially when someone
    is paying you by the hour, you should always look to optimize your time as much
    as possible; there are tools for doing just that that you can avail yourself of,
    and that’s what this chapter is all about, starting with the concept of CMSs,
    including WordPress and Drupal.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll then move on to so-called “no-code solutions,” platforms that allow you
    to build websites in a more visual way. Finally, we’ll talk about how the revolution
    in **artificial intelligence** (**AI**) happening right now can further enhance
    your ability to create without coding (at least not as much).
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in this chapter, we’ll cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing WordPress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting to know Drupal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Throwing away coding altogether – “no-code” solutions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utililzing artificial intelligence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing WordPress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing we’re going to talk about is called a **content management system**
    (**CMS**). A CMS is software that allows users to create, manage, and change content
    on a website without needing to have technical knowledge (or at least to minimize
    it as much as possible).
  prefs: []
  type: TYPE_NORMAL
- en: A typical CMS will allow users to create pages on a website, very often much
    like creating a document in Microsoft Word or any modern word processor, in a
    visual way. For example, they will allow you to drag images into place, add text
    around them, draw sections on the page, and otherwise create a page without writing
    code. Then, a CMS will normally offer the ability to publish that content, so
    it is live for visitors, as well as provide management capabilities so that you
    can delete pages, reorganize them, modify them, and otherwise maintain them. You
    can create an entire website with a CMS with about the same level of complexity
    as it takes to create Word documents.
  prefs: []
  type: TYPE_NORMAL
- en: A CMS can even supply more advanced functionality. For example, they can allow
    you to have a comment section on your pages where visitors can interact with one
    another socially. They can supply ways to hook into popular social media sites,
    accept uploads from users, implement polls to get feedback from your users, and
    many other capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: There are many CMSs out there, but perhaps the most popular is WordPress. **WordPress**
    is an open-source CMS known especially for its ease of use, flexibility, and vast
    community that contributes plugins and themes that allow you to expand its functionality
    easily. WordPress was originally a blogging platform, but it has evolved to support
    a wide range of website types nowadays, including e-commerce, portfolios, and
    business sites. Almost anything you can think of can be done with WordPress because
    it is especially known for how customizable it is.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Figure 8**.1*, you can see the site that is automatically created as a
    result of installing WordPress with basic, default options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1: A default site generated from a basic WordPress installation](img/B18315_08_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.1: A default site generated from a basic WordPress installation'
  prefs: []
  type: TYPE_NORMAL
- en: It’s a great choice for both beginners and advanced developers due to its user-friendly
    interface and extensive documentation. Many developers will build websites on
    WordPress, but non-technical users can use it just as well.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at some of the key features of WordPress next.
  prefs: []
  type: TYPE_NORMAL
- en: Key features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some of the most important features that WordPress offers include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Themes and plugins**: WordPress has thousands of themes and plugins available,
    allowing users to enhance the functionality and appearance of their websites without
    all that mucking about in HTML, CSS, and JavaScript. Themes control the visual
    presentation, while plugins add features such as contact forms, user polls, message
    forms, and e-commerce capabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SEO**: WordPress websites tend to rank well on search engines because they
    offer SEO-friendly features and plugins such as Yoast SEO to optimize content.
    The websites it produces are inherently geared toward SEO by design.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User-friendly**: WordPress has an intuitive dashboard interface that’s easy
    to navigate, making content management and site administration straightforward.
    Everything you need can be found in one place and presented in an easy-to-understand
    way.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Community**: With a large global community, WordPress has extensive forums,
    tutorials, and resources for troubleshooting and learning. You’ll never be out
    in the cold trying to figure something out on your own; help is always just a
    few keystrokes away.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Updates**: The WordPress team frequently updates their code for security
    and functionality, ensuring the software remains current, stable, and secure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reach**: WordPress is widely used by bloggers, small businesses, and even
    large corporations, demonstrating its versatility and reliability as a website
    platform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The dashboard interface, which you can see in *Figure 8**.2*, is the primary
    way you interact with WordPress. It allows you to control all of its functionality,
    and it’s worth seeing to understand how comprehensive WordPress really is. Of
    course, keep in mind that what you see in it may differ from installation to installation,
    depending on what plugins you have installed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2: The WordPress dashboard in all its glory](img/B18315_08_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.2: The WordPress dashboard in all its glory'
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s also important to note that WordPress is not just one thing, not just
    a piece of software. It’s divided into two versions that serve different needs
    and have requirements different from yours as a developer:'
  prefs: []
  type: TYPE_NORMAL
- en: '**WordPress.org** ([wordpress.org](http://wordpress.org)): This is where you
    can find open-source software that’s free to use. To use it, you need to have
    a server to run it on, and most likely your own domain name will need to be purchased.
    It offers full customization with access to all plugins and themes, both free
    and premium. This version is ideal for those who want full control over their
    website’s functionality and design and who don’t have a problem with administering
    their own server and managing software on it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WordPress.com** ([wordpress.com](http://wordpress.com)): This is a commercial
    offering that offers hosting of websites created with WordPress. With this version,
    you don’t need your own server and don’t need to install WordPress yourself; it’s
    all managed for you. You simply purchase a plan and get to building your website
    immediately, but it otherwise offers all the same capabilities as self-hosting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That’s the functional angle, but what about the technology WordPress is built
    on? Let’s talk briefly about that.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the technical perspective
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'From a technical perspective, WordPress is a robust and versatile CMS with
    the following technical characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: '**PHP**: WordPress is written in PHP. This handles server-side execution and
    provides all the functionality WordPress offers, including the ability to update
    WordPress itself seamlessly on a live site without downtime.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MySQL**: One of the most popular open-source relational databases out there,
    MySQL is used by WordPress to store the actual user-generated content, settings,
    and user data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Plugins**: The ability to extend functionality without having to update to
    a whole new version of WordPress is what the plugin architecture enables. Through
    it, you can add custom features and functionalities modularly, without altering
    core WordPress code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Themes**: The presentation layer of WordPress is controlled by themes, which
    are collections of PHP, HTML, CSS, and JavaScript files that work together to
    dictate the visual layout and style of the site.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Loop**: This is a fundamental part of WordPress responsible for processing
    each post and displaying its content, allowing for dynamic content. Things such
    as showing a new blog post pulled from the database and displayed through a theme
    is what The Loop is all about. The basic structure of The Loop is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `have_posts()` function will determine whether there are any posts to be
    displayed. If there are, the `while` loop begins. In that loop, for each post,
    the `the_post()` function is called to get the data for the post. Then, template
    files from the theme are used in conjunction with the data for the post. This
    data is inserted where specific tags in the templates are found, and the result
    is HTML to be displayed for each post.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**REST API**: WordPress offers a robust REST API giving developers an interface
    to use to interact with a WordPress site remotely by sending and receiving JSON
    objects, making WordPress a headless CMS option. This means that you can store
    and manage your content in WordPress but display it through custom code if you
    wish.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Actions**: These are hooks (bits of code, essentially) that WordPress core
    executes at specific points during execution, or when specific events occur. Plugins
    can specify actions to execute at these points, providing a way to enhance WordPress
    when specific events occur, such as a user leaving a comment, for example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Filters**: These are bits of code that allow modification of data before
    it is saved or sent to the browser. This is crucial for customizing the functionality
    of WordPress without changing the core files. As some examples, filters can be
    used to automatically do things such as change the formatting of content (perhaps
    to highlight key phrases), place related posts beneath your content, or truncate
    text to ensure it always fits on the page in an aesthetically pleasing way.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security measures**: WordPress has built-in security measures such as regular
    updates. But being a popular platform for online content, it’s a common target
    for attacks. Thus, security is often bolstered with plugins, secure hosting, and
    best practices in website management. For example, some plugins can monitor for
    hack attempts and alert you, while others can enforce password policies for your
    users to promote more secure passwords.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multisite capability**: WordPress allows running multiple sites from a single
    WordPress installation. This allows for the efficient use of server resources:
    you don’t need to build a separate server for each WordPress site since one server
    can handle many sites.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compatibility and standards**: WordPress always strives to follow web standards
    set by the W3C, ensuring compatibility with different browsers and devices and
    ensuring accessibility for those with disabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From a developer’s perspective, WordPress offers a balance of user-friendly
    interface and extensive customizability, making it suitable for both beginners
    and experienced developers. But its real attraction is *not* writing code. Using
    a **What You See Is What You Get** (**WYSIWYG**) interface allows developers and
    non-developers alike to drag and drop content quickly and easily. It’s nice to
    know though that for more advanced use cases, there are ways you *can* interact
    with WordPress in a more traditional developer sense. In any case, as a fledgling
    web developer, I thought you should have some general idea of what the technical
    structure of WordPress was like too.
  prefs: []
  type: TYPE_NORMAL
- en: WordPress isn’t the only popular CMS in town, though. Let’s look at another
    of its main competitors now, the one known on the streets as Drupal.
  prefs: []
  type: TYPE_NORMAL
- en: Getting to know Drupal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drupal is another popular open-source CMS, well known for its robustness and
    flexibility. It is especially well suited to complex, large-scale websites and
    applications as a result.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see the example site that Drupal creates when you install it with basic,
    default options in *Figure 8**.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.3: A default site created by a basic installation of Drupal](img/B18315_08_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.3: A default site created by a basic installation of Drupal'
  prefs: []
  type: TYPE_NORMAL
- en: Drupal is more of a developer-centric CMS in a sense, given that setting it
    up and using it requires more technical knowledge than WordPress. WordPress is
    designed from its core to be user-friendly and is geared toward non-technical
    users, whereas Drupal isn’t, at least not to the same extent. One of the key reasons
    is that where WordPress offers a hosted option, Drupal does not. You’ll be setting
    up your own instance of Drupal on your own server if you want to use it, and that
    simply requires more technical know-how.
  prefs: []
  type: TYPE_NORMAL
- en: Also, WordPress is WYSIWYG out of the box, whereas Drupal is not. Drupal provides
    a more limited interface for creating and maintaining content, essentially just
    a text editor where you can apply some formatting. Creating full-fledged websites
    with Drupal requires more direct editing of content rather than just dragging
    and dropping elements around as in WordPress. That said, Drupal can be extended
    with plugins that can allow it to reach – more or less – parity with WordPress
    in this regard. Again, Drupal is more geared toward developers, and while you
    aren’t writing code per se, it’s closer to that than to WordPress’s visually oriented
    content creation approach.
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 8**.4*, you can begin to get a feel for how more technical Drupal
    is than WordPress by looking at just the **Configuration** tab available in the
    management console, which is just one of many comparatively complex screens with
    lots of more technically oriented options.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4: The Configuration tab of the Drupal management console](img/B18315_08_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.4: The Configuration tab of the Drupal management console'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at some of the key features of Drupal next.
  prefs: []
  type: TYPE_NORMAL
- en: Key features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some key points about Drupal to consider include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**PHP**: Like WordPress, Drupal is written in PHP, making it flexible and extensible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Database integration**: While WordPress only works with MySQL, Drupal supports
    multiple databases, including MySQL, PostgreSQL, SQLite, and MariaDB, for storing
    content and settings. It does this by way of a database abstraction layer, which
    means an API that the Drupal code is written against, which then translates the
    Drupal function calls to database-specific calls.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Modularity and extensibility**: Instead of plugins, Drupal uses modules to
    extend its functionality. Different name, but same basic idea. There are thousands
    of community-contributed modules available for various features, including all
    the same sorts of things WordPress offers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Themes**: Similar to WordPress, Drupal uses themes to define the look and
    feel of a website. Themes in Drupal are highly customizable via HTML, CSS, and
    JavaScript coding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Content structure**: Known for its powerful content structuring capabilities,
    Drupal allows the creation of multiple content types with custom attributes and
    fields. It’s more than just web pages in Drupal land; it’s whatever type of content
    you need, be it videos, images, PDF files, Excel spreadsheets, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Access control**: Drupal provides an advanced user role and permission system,
    enabling granular access control for different types of users. Because Drupal
    is known for its strong security features, it is often chosen for government and
    enterprise websites. It also offers in-depth security reports and regular updates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance and scalability**: Drupal is designed from the ground up for
    performance and scalability, handling large amounts of data and traffic efficiently.
    It has built-in caching features and can be integrated with external caching systems
    for high-traffic websites.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Community and ecosystem**: Drupal has an active community of developers,
    designers, and content managers, providing extensive support through forums, documentation,
    and events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**API-first approach**: Drupal supports a *headless* or *decoupled* architecture,
    meaning that the frontend (what a user sees) is separated from the backend (where
    content is stored), allowing for more flexibility in content delivery.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multilingual capabilities**: Drupal offers extensive multilingual features
    out of the box, allowing for easy content translation and site localization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Version updates**: Unlike WordPress, which can be updated seamlessly, Drupal’s
    version updates are significant, often requiring considerable effort to migrate
    from one major version to another.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drupal is particularly suited for complex, data-driven websites and those requiring
    extensive content organization, such as community platforms, online stores, and
    corporate websites. Its steep learning curve can be challenging for beginners
    but offers powerful solutions for experienced developers.
  prefs: []
  type: TYPE_NORMAL
- en: Given that more developer-centric focus, you might imagine there is more to
    say about Drupal from a technical perspective, and you’re right, and that’s what
    we’re discussing next.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the technical perspective
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'From a technical perspective, Drupal stands out for its robust architecture,
    advanced customization capabilities, and strong focus on scalability and security.
    Here are some key technical points:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Modularity**: Drupal’s architecture is highly modular, allowing for extensive
    customization. Core functionalities can be extended or overridden with custom
    modules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hook system**: Drupal employs a hook system that allows modules to interact
    with the core and alter or extend its behavior without modifying the core files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance**: As mentioned before, Drupal has extensive caching mechanisms
    (such as Page Cache and Block Cache) to improve performance. It also supports
    robust integration with external caching systems such as Varnish and Memcached
    to further improve performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Theming**: Drupal uses the Twig templating engine, which is a flexible, secure,
    and fast templating engine, for implementing its themes. Drupal themes are inherently
    responsive, ensuring websites work well on various devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**API-first approach**: Drupal supports RESTful APIs, allowing for headless
    or decoupled architectures where the frontend is separated from the backend. In
    fact, it does this internally, meaning that Drupal itself is conceptually separated
    like this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security**: Drupal offers a sophisticated **Role-Based Access Control** (**RBAC**)
    system, allowing detailed permissions and user management, generally considered
    to be more robust and better suited to the needs of large businesses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Quality assurance**: Drupal includes a comprehensive testing framework, supporting
    unit, functional, and integration testing, and it enforces strict coding standards,
    contributing to the overall quality and maintainability of the code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Taxonomy system**: Drupal has a highly sophisticated taxonomy system, enabling
    intricate categorization and tagging of content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Localization support**: Drupal has strong multilingual and localization capabilities
    built into the core, making it suitable for international and multi-language sites.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration management**: Drupal has a sophisticated configuration management
    system. It allows developers to easily manage and transfer configuration changes
    from development to production environments, a critical feature for complex and
    large-scale website development. It is, in a sense, built-in DevOps!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Views module**: One of Drupal’s most powerful features, the Views module
    allows users to create, manage, and display lists of content. Unlike WordPress,
    where similar functionality is achieved through plugins, Views is integrated into
    Drupal core in its recent versions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Block system**: Drupal’s block system is another key feature. It allows for
    the placement of content and other elements in region-specific blocks on a page,
    offering extensive layout customization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**APIs**: Drupal functions not only as a CMS but also as a framework, allowing
    developers to build custom applications on top of it. It offers a range of APIs
    for different functionalities, such as database management, theming, and user
    management.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To summarize, Drupal is, in a sense, a developer’s CMS. Meanwhile, WordPress
    can still require some technical knowledge, yet is much more focused on end users.
  prefs: []
  type: TYPE_NORMAL
- en: But recently, a new kid on the block has arrived that takes the vision of WordPress
    to a whole new level, and that’s the land of no-code solutions, which is the next
    stop on our train ride to web developer expertise!
  prefs: []
  type: TYPE_NORMAL
- en: Throwing away coding altogether – “no-code” solutions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While a CMS such as WordPress – and Drupal, to a lesser extent – can be user-friendly
    and can be used by non-technical users in the case of WordPress, there is a whole
    other class of tools that takes this a giant step further into the realm of no-code
    solutions. WordPress really does come pretty close, and some would probably even
    argue that it *is literally* a no-code solution, especially the WordPress.com
    side of it.
  prefs: []
  type: TYPE_NORMAL
- en: But true no-code solutions really step this paradigm up and become something
    that *anyone* can use with virtually zero technical knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: '**No-code solutions** are tools that allow users to build and manage applications
    and websites without the need for programming skills. These solutions are designed
    to be user-friendly, often using drag-and-drop interfaces and pre-built templates,
    and generally present a visual development environment to the non-technical user.'
  prefs: []
  type: TYPE_NORMAL
- en: 'These solutions democratize web app and website development, enabling business
    professionals, entrepreneurs, and hobbyists to create digital content. And, while
    you definitely can create robust web apps with them, it’s more common to find
    more static websites being built with them. This is largely down to the visual
    development paradigm they typically employ: it’s far easier to represent static
    content in a visual builder tool than it is dynamic interactions (though not impossible,
    to be clear).'
  prefs: []
  type: TYPE_NORMAL
- en: No-code solutions are particularly popular among small businesses, start-ups,
    and non-technical users in larger organizations. They can be used to build websites,
    mobile apps, and internal business applications and even to automate business
    workflows.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that no-code solutions are not usually something you
    install yourself and they aren’t pieces of software per se. Almost always, they
    are themselves websites that you go to that provide all the functionality you
    need in one place. You don’t need to worry about servers, domain names, or, of
    course, programming or anything else because these solutions are all-encompassing,
    including hosting. You’ll build your website there, and it will be immediately
    available on the internet at the click of a button.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key aspects of these no-code solutions include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**User interface (UI)**: No-code solutions usually feature a GUI that allows
    users to build apps and websites by visually manipulating elements. This can include
    dragging and dropping components such as text boxes, buttons, and images onto
    a canvas.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customization**: Although no-code solutions offer less customization than
    hand-coding does, many of these solutions provide a range of templates and modules
    that can be tailored to meet specific needs. Users can often customize the look
    and feel of their results, again in a visually driven way that doesn’t require
    coding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integration**: Many no-code solutions offer integrations with other software
    and services at the click of a button. This allows users to connect their no-code
    solutions with existing tools and systems, such as databases, CRM systems, or
    email servers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data handling and analytics**: Many no-code solutions offer built-in tools
    for data management, analytics, and reporting. Users can create forms, manage
    databases, and visualize data without coding. This feature is particularly useful
    for businesses that need to gather insights about how their website is being accessed,
    or for dealing with data generally, but who lack the technical expertise for complex
    data handling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Collaboration**: No-code solutions often emphasize collaboration, allowing
    multiple users to work on a project simultaneously. This can include version control,
    role-based access, and real-time editing, but with a more user-friendly model
    than even something such as GitHub provides.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Responsive design**: Most no-code solutions automatically ensure that the
    generated results are responsive, meaning they will adapt to different screen
    sizes, from desktops to smartphones. This is crucial in today’s multi-device environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Marketplaces**: Some no-code solutions offer marketplaces where users can
    find additional plugins or extensions, created either by the solution provider
    or third-party developers. These add-ons can extend the functionality of the base
    platform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Community and support**: The rise of no-code solutions has had the result
    of creating vibrant user communities where people share tips, templates, and best
    practices. Most solutions also offer robust customer support and educational resources
    to help users maximize the solution’s potential.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cross-platform**: No-code solutions can be used from any device, regardless
    of hardware specifications, OS, or other considerations. This makes them more
    accessible to more people.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security and compliance**: Any good no-code solution will be designed with
    security in mind and adhere to industry-standard compliance regulations. It’ll
    ultimately be up to the users of these solutions how to implement it, but the
    tools for solid security should be provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Economic impact**: By enabling more people to build websites and web apps,
    no-code solutions are lowering the barrier to entry in the tech world, potentially
    leading to more innovation and economic growth, especially in sectors where technology
    adoption was previously limited.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To begin to get a feel for what such a solution looks like, take a look at *Figure
    8**.5*. This is the designer interface for GoDaddy, which is a popular no-code
    solution. In it, you can see how just clicking an element provides an editor on
    the right where you can easily change all sorts of parameters (this is for a site
    generated for me from a starting template for an online candle store).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.5: The GoDaddy designer interface in action (as much “action” as
    there can be on a printed page anyway!)](img/B18315_08_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.5: The GoDaddy designer interface in action (as much “action” as there
    can be on a printed page anyway!)'
  prefs: []
  type: TYPE_NORMAL
- en: The primary advantage of no-code solutions is speed and efficiency. Since there
    is no custom programming needed, they tend to be faster to create. This also makes
    them more cost-effective since no (often times expensive) web developers are needed.
    This all has the result of empowering non-developers, allowing those without coding
    skills to take part in the development process.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of GoDaddy’s web designer, for example, it allows an exclusively
    visual-based approach to designing, a paradigm where the user drags and drops
    components around the page and can edit details about each as necessary, all without
    coding.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, it isn’t all roses and rainbows when it comes to no-code solutions.
    For one thing, as an organization’s needs grow and evolve, the limitations of
    no-code solutions may become apparent because they may not supply the flexibility
    you need at some point. While they are excellent for the quick deployment and
    validation of ideas, transitioning to more customizable, code-based solutions
    might be necessary for scaling and complex customization. That said, most good
    no-code solutions will grow with you for a while and provide fertile ground to
    start your online journey.
  prefs: []
  type: TYPE_NORMAL
- en: For another thing, no-code solutions make you dependent on the provider of that
    solution. While this isn’t the case when you host your own hardware, no-code solutions
    do tend to bind you to them more deeply, and it can be difficult to move away
    from them if and when needed. This won’t be a problem for many people, of course,
    but it’s something to be aware of as at least a potential issue.
  prefs: []
  type: TYPE_NORMAL
- en: No-code solutions represent a significant shift in the technology landscape,
    making app and web development more accessible and altering traditional dynamics
    in the tech industry by allowing non-coders to produce results that until now
    have required custom development.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now talk about some of the biggest names in the no-code movement.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing some popular no-code solutions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the realm of web development, several popular no-code solutions have gained
    widespread recognition for their ease of use and powerful features. Here are some
    notable examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Wix**: Wix is very similar to GoDaddy in approach, again providing a visual
    design toolset that doesn’t require any coding. It arguably tends to be slightly
    less user-friendly than GoDaddy, but the difference isn’t drastic if so.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Squarespace**: Squarespace is favored for its sleek, professionally designed
    templates, making it ideal for portfolios, blogs, and business websites. It offers
    robust design options and e-commerce capabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weebly**: A user-friendly solution with drag-and-drop tools, Weebly is great
    for small businesses and online stores. It integrates e-commerce features and
    provides various design templates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shopify**: Primarily focused on e-commerce, Shopify allows users to create
    online stores without coding. It offers extensive e-commerce tools, templates,
    and integration with a wide range of payment gateways and other services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Carrd**: Specializing in one-page websites, Carrd is a simple, lightweight
    tool for creating personal profiles, landing pages, and simple portfolios.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bubble**: While it’s more focused on web applications than websites, Bubble
    is a powerful no-code tool that allows for the development of complex, data-driven
    web applications with a visual programming interface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These solutions stand out for their ease of use, diverse design options, and
    ability to cater to various needs.
  prefs: []
  type: TYPE_NORMAL
- en: But what if even drag-and-drop and a visual builder are too much for someone?
    Well, there’s something that has crashed onto the scene like little else that
    may give an answer, and that’s AI.
  prefs: []
  type: TYPE_NORMAL
- en: Utilizing artificial intelligence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AI isn’t new. It’s been around since around 1956 in various forms, but 2023
    was a watershed moment for it in which we saw a sudden explosion of innovation
    in space.
  prefs: []
  type: TYPE_NORMAL
- en: Many of the no-code solutions out there are now adding AI capabilities to the
    mix. GoDaddy and Wix both incorporate **artificial design intelligence**, or **ADI**.
    This is a form of AI that simplifies the design process by automatically creating
    a website based on the user’s responses to a set of questions. This approach is
    particularly beneficial for those who want a professional-looking website without
    investing much time or needing technical skills. You simply answer a series of
    questions, such as what your website is about, where it’s located, and any key
    points about it, and these platforms can create a website from those responses
    that, while not a complete and ready-to-go result, serves as a good starting point
    for your design work.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, such a thing isn’t without its limitations. Reliance on ADI means
    that websites may lack uniqueness since AI isn’t yet *quite* as creative as humans
    can be, and users might find the designs somewhat limited compared to competitors
    since there have to be guardrails in place for any AI, limits to what it can produce.
    While being able to produce a website with a simple description is incredibly
    powerful (and I would even say cool!), it doesn’t offer as much creative freedom
    and lacks certain advanced features, such as the ability to integrate third-party
    apps as effectively.
  prefs: []
  type: TYPE_NORMAL
- en: This AI-driven no-code solution is best suited for businesses or individuals
    who need a simple, clean, and professional website quickly and are not looking
    to delve deeply into customizations or advanced features. It’s particularly user-friendly
    and affordable, with various pricing plans, including a free option, making it
    a practical choice for small businesses or entrepreneurs starting out.
  prefs: []
  type: TYPE_NORMAL
- en: But this is just one specific example of a more generic concept, a concept that
    has really taken the world by storm and that you as a web developer can use in
    other ways, and that concept is called generative AI. Let’s delve into that a
    little deeper.
  prefs: []
  type: TYPE_NORMAL
- en: Generative AI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You would have to have been living under a rock for most of 2023 to have not
    heard of generative AI. AI itself isn’t new, of course, it’s been around since
    around 1956 in various forms, but 2023 was a watershed moment for it when ChatGPT,
    the poster child for generative AI, hit the scene.
  prefs: []
  type: TYPE_NORMAL
- en: '**Generative AI** is a type of AI that can create new content, be it text,
    images, programming code, music, or even whole websites. It does this by first
    ingesting a large amount of data and, in a sense, learning from it. This data
    can be many things, including books, existing music, source code from GitHub,
    and documents of various types. The AI can understand the patterns and structure
    of this data and then use it to generate new (arguably) original output. For example,
    generative AI such as ChatGPT can write a news article, compose a piece of music,
    or create an image that never existed before. As you can probably tell, generative
    AI has the potential to revolutionize the way websites – and a lot of other things
    – are built, offering new levels of efficiency, customization, and creativity.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In terms of how AI like this works, and without getting into all the complex
    math and concepts that underly them, the main component is what results from ingesting
    all of the data I mentioned: something called a **model**. It’s a complex representation
    of all of the data in the form of a **neural network**. A neural network is essentially
    an algorithm specifically built to be able to recognize patterns, which is similar
    to how the human brain works. When you ask ChatGPT a question, it uses complex
    statistics to traverse this model, finding patterns that match what it statistically
    believes follows logically from each step in the traversal. In the end, they output
    something that the model statistically sees as being most likely to answer the
    request that was put to it.'
  prefs: []
  type: TYPE_NORMAL
- en: There are many different models, trained from many different datasets. GPT,
    which underlies ChatGPT (which is really a combination of a UI plus that model),
    is specifically for textual content. Another model, DALL-E, was trained on a large
    set of images and can produce new ones from it. The more data a model is trained
    on – assuming the data is of sufficient quality – the more productive and accurate
    it becomes at fulfilling requests to it.
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 8**.6*, you can see what the ChatGPT ([https://chat.openai.com](https://chat.openai.com))
    interface looks like, where I’ve had a bit of a discussion about programming to
    give you an idea of what such an interaction can be like.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.6: A conversation with ChatGPT, the preeminent generative AI solution
    today](img/B18315_08_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.6: A conversation with ChatGPT, the preeminent generative AI solution
    today'
  prefs: []
  type: TYPE_NORMAL
- en: On the left, you can see a history of chats I’ve had with ChatGPT (don’t mind
    some of the sillier conversations; this thing can be fun as well as useful!).
    On the right is the current conversation where you can see it was able to generate
    some example code to answer my question. The chat goes on for a while with me
    asking clarifying questions and for an example using a specific library. This
    exchange was quite helpful to a project I was working on.
  prefs: []
  type: TYPE_NORMAL
- en: 'But ChatGPT and other generative AI models like it can do even more than this.
    Various models can be used for specific purposes, and these tools can be integrated
    into other products, expanding their capability. Here’s a list of some interesting
    uses you can find being used in the world today when it comes to web development:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Prototyping and wireframing**: Generative AI tools can quickly generate website
    prototypes and wireframes, allowing designers to visualize and refine their ideas
    more rapidly than they probably could otherwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automated design creation**: Generative AI can generate website layouts and
    designs based on user preferences or predefined criteria – or even prototypes
    and wireframes it previously generated! Some of the big no-code solutions are
    beginning to integrate these kinds of capabilities to incredible effect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Copy generation**: Generative AI can be used to create textual content for
    websites. For instance, it can generate product descriptions, blog posts, or marketing
    copy tailored to the site’s audience, saving time and effort on the part of humans
    (which, generically, is what most of this boils down to frankly).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual asset creation**: Generative AI can generate visual assets such as
    images, icons, or even animations that are tailored to the website’s theme and
    requirements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code generation**: Generative AI can generate the actual code needed to build
    websites, especially for standard components. This can significantly speed up
    the development process, although it may require oversight and refinement from
    human developers, which is a common theme with any generative AI model. I’ll go
    into this a bit more in the next section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SEO optimization**: AI can analyze search engine algorithms and suggest or
    implement SEO strategies for better ranking, including keyword optimization, meta
    tags, and content structuring. For example, it can analyze the top results from
    a search you want your site to be ranked higher in, and then see what changes
    could be made to your site to achieve that goal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Personalization**: AI can personalize website experiences for individual
    visitors in real time. It can change layouts, content, and recommendations based
    on user behavior, preferences, and interactions. This is different than the previous
    points in that here we’re not talking about using AI to build a website; instead,
    we’re talking about AI that runs on behalf of the user, as they’re actually using
    a website.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**UI and UX optimization**: As with personalization, AI can analyze user interaction
    data after a website is live to suggest improvements in the UI/UX design. This
    could come in the form of training a model on data collected from users using
    your site, from which you can then extract suggestions from the model about things
    to improve.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The integration of generative AI and other forms of advanced AI systems into
    web development tools and solutions is still something that is evolving. We’re
    still figuring out how to use these new techniques and tools. As AI technology
    advances though, it seems likely that it will become an integral part of the web
    development process, offering more sophisticated and intuitive ways to build websites.
    I don’t personally believe it will replace web developers, but web developers
    will certainly have to understand and adapt to these tools, integrating them into
    their toolbox. It seems likely to me that those who don’t will probably be left
    behind, so if for no other reason than the selfish “I want to be employable” perspective,
    it’s important to be aware of AI advancements and keep up with how they can be
    used to make you a more effective web developer.
  prefs: []
  type: TYPE_NORMAL
- en: 'One last area of this topic I want to discuss is how you can use generative
    AI tools to write code, with one way in particular at the forefront: GitHub Copilot.'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Copilot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While the idea of generative AI being used to generate whole websites or content
    for sites, or being used as tools to help build and enhance websites, was the
    thrust of the previous section, here I want to talk about the idea of using it
    to write code: in other words, continuing to be web developers, but using tools
    to make that job easier and more efficient. While ChatGPT can be used in that
    way because it’s quite good at being able to generate code for you, or helping
    you troubleshoot your code, these capabilities are taken to another level when
    you use a good IDE with Microsoft’s GitHub Copilot integrated into it.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Copilot** is actually powered by the GPT model, the same one (or, at least,
    one of several available) that ChatGPT uses. But the training data that the model
    is based on is all the content on GitHub (well, any content that hasn’t been explicitly
    disallowed for this purpose at least).'
  prefs: []
  type: TYPE_NORMAL
- en: 'It allows for two key capabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: The ability to have the code you write be autocompleted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to generate code from comments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can find information on how to install Copilot on your specific IDE (it
    supports most of them) here: [https://docs.github.com/en/copilot](https://docs.github.com/en/copilot).
    Then, as you type your code, Copilot can suggest completions.'
  prefs: []
  type: TYPE_NORMAL
- en: And let me tell you, it can get scary good at it sometimes! Since it is aware
    of the code in your project, as well as all the repositories hosted on GitHub,
    it’s able to offer suggestions that make sense within the code you’re writing
    – contextually meaningful suggestions, not just random gibberish pulled from other
    people’s code.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8**.7* demonstrates Copilot’s autocomplete capabilities in IntelliJ
    IDEA. Here, you can see that it has suggested for me a line of code that builds
    upon what I already wrote. It’s a little hard to see on the printed page due to
    the coloring that is present on the screen but not in print, but all of the code
    after the highlighted `return` statement was suggested by Copilot. All I need
    to do at this point is hit the *Tab* key to accept the suggestion, and the code
    is inserted into my editor.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.7: An example of using Copilot’s comments-to-code capability](img/B18315_08_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.7: An example of using Copilot’s comments-to-code capability'
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft calls Copilot “your AI pair programmer.” Pair programming is an idea
    where two developers sit down physically together and code together. One person
    may control the keyboard, or it may pass between them, and you write code in a
    pair, both of your brains working together, hopefully harmoniously! If you’ve
    ever seen the movie *Pacific Rim*, it’s a lot like the Drift that allows two pilots
    to control the Jaegers, the giant robots used to fight the Kaiju (the giant monsters),
    sharing the mental strain. With Copilot, your partner is in a sense all the developers
    who have code posted on GitHub!
  prefs: []
  type: TYPE_NORMAL
- en: Aside from those autocompletion suggestions, Copilot has another trick up its
    sleeve. If you type up some comments, in plain language, describing a function,
    Copilot can then produce that function for you! It’s really kind of amazing when
    you see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8**.8* shows the usage of Copilot in IntelliJ IDEA. Here, you can see
    that it has suggested for me an implementation of a function to search through
    objects in an array, based on my comments. All I did was type the comments, hit
    *Enter*, and then wait a moment for Copilot to generate the code you see. All
    I need to do now is hit the *Tab* key to accept the suggestion, and the code is
    inserted into my editor.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.8: An example of using Copilot’s comments-to-code capability](img/B18315_08_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.8: An example of using Copilot’s comments-to-code capability'
  prefs: []
  type: TYPE_NORMAL
- en: As of the time of writing, a third capability – chat – is becoming generally
    available. This puts a mechanism just like ChatGPT into Copilot. Now, you can
    have a back-and-forth discussion with Copilot about some tricky programming issue
    you’re having, or ask for documentation about something, to generate code or test
    cases, and to help you with debugging. While ChatGPT can do all of this too, having
    it integrated into your IDE and having it be immediately aware of what you’re
    working on already is game-changing. Unlike ChatGPT though, chat in Copilot can
    only answer questions about coding; it by design isn’t as general-purpose as ChatGPT
    is.
  prefs: []
  type: TYPE_NORMAL
- en: 'And here’s the good news: you can play with Copilot for free! Microsoft offers
    a fairly generous free trial period, after which Copilot costs a nominal fee (as
    of the time of writing, $10 a month for an individual). I for one find it to be
    very much worth the expense.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, that all may sound great, but here’s the one big warning with Copilot,
    and for any generative AI actually: *you can’t blindly trust them*! Generative
    AI models are known to *hallucinate*, which is to say they make things up that
    are basically gibberish. Of course, we are in fact asking the AI to make things
    up, but we expect those things to be valid, and they aren’t always. In the same
    vein, the answers these models produce are sometimes factually incorrect. They
    simply get things wrong sometimes. Often, it’s because the training data was flawed,
    and sometimes it’s because the complex math that underpins them simply leads to
    incorrect answers.'
  prefs: []
  type: TYPE_NORMAL
- en: Check out *Figure 8**.9* for an example of this. While trying to figure out
    a problem at work, I asked a question about dates in JavaScript, and the answer
    it gave wasn’t correct. Though I pointed this out to the AI and it corrected itself,
    if I didn’t have some foundational knowledge already, I probably wouldn’t have
    spotted that, and I might have been sent off down the wrong path, wasting time
    and energy. So, you must keep an eye on these things and not just rely on them
    100%, which is the point I’m making here.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.9: ChatGPT making a mistake](img/B18315_08_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.9: ChatGPT making a mistake'
  prefs: []
  type: TYPE_NORMAL
- en: So, you can’t take their answers as absolute truth; you have to think and validate
    it yourself. This means that generative AI requires you to already have some knowledge
    of the topic you’re discussing with it, which means something such as Copilot
    – which is specifically geared to writing code – wouldn’t be as helpful to someone
    who doesn’t already know how to code. If you see something that you think isn’t
    right, the interesting thing is you can challenge the AI, at which point it will
    often correct itself, as you see in *Figure 8**.9*.
  prefs: []
  type: TYPE_NORMAL
- en: Right or wrong, the ability to have an ongoing conversation with these things
    is when you can start to see the most benefit, though. You can ask a question,
    get an answer, then ask to expand on that answer. You may see something in the
    answer that you’ve never heard of before and be able to prove further. As a personal
    anecdote, this happened to me once when I was asking about how to do something
    in Java. I can’t frankly remember the problem I was trying to solve, but the point
    is that ChatGPT (which I was using before I started using Copilot) offered a solution
    – which worked fine – but used some language feature I hadn’t seen before. I was
    able to ask a follow-up question about that feature, and I got a great explanation.
    I was then able to ask another follow-up asking for an example and got it. All
    of this led to me understanding that feature, I believe, better than I probably
    would have if I had just Googled it and read some articles.
  prefs: []
  type: TYPE_NORMAL
- en: 'You shouldn’t undersell the ability to – without shame – ask question after
    question after question, even if you think some of them are “stupid.” Especially
    in the early days of your web developer journey, you’re going to have a lot of
    questions that may be hard to get answers for with a search engine such as Google,
    and that you might be embarrassed to ask a person about, if you even have someone
    you can ask. Well, first, you really shouldn’t be embarrassed because we all start
    at a point of not knowing everything, and asking questions is how you learn! But
    I get it: we’re people and sometimes we feel like we’re asking silly questions.'
  prefs: []
  type: TYPE_NORMAL
- en: Well, ChatGPT or Copilot is never going to judge you! You can keep asking it
    as many questions as you need to, keep asking it for different examples or different
    explanations, and it’ll keep trying as long as you need it to. You can build your
    knowledge over time with it, keep going off on tangents as much as you need, and
    it’ll never get tired or annoyed with you. It’s a capability we haven’t as a society
    had before, and it really can be transformational.
  prefs: []
  type: TYPE_NORMAL
- en: So, I strongly encourage you to start using these generative AI tools, be it
    ChatGPT or Copilot, or whatever else is out there or comes out after these words
    have been committed to paper. As I said, don’t trust them 100% because they *do*
    get things wrong, but in my experience, they do more than a good enough job for
    the benefits to far outweigh any negatives.
  prefs: []
  type: TYPE_NORMAL
- en: 'While some worry that this new breed of AI tools and no-code solutions may
    take our jobs in the long run, I for one think the opposite will happen: these
    tools will become necessary tools that web developers will have to come to terms
    with and learn how to use effectively.'
  prefs: []
  type: TYPE_NORMAL
- en: And hey, if they ultimately turn into Skynet and send Terminators after all
    of us, at least we will have built some great websites in the meantime, right?
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing the roadmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we wrap up the technical-focused part of this book, you’ve uncovered a few
    more items. In *Figure 8**.10*, you can see the updated web developer roadmap:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.10: The roadmap, with a few more boxes filled in](img/B18315_08_10_NEW.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.10: The roadmap, with a few more boxes filled in'
  prefs: []
  type: TYPE_NORMAL
- en: With this chapter, you uncovered **CRMs** (which completes the **Frontend**
    section of the roadmap!), **No-Code Solutions**, and **Generative AI**. That may
    not seem like a lot, but hey, they’re pretty cool topics, wouldn’t you say?
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed some tools that allow you to create websites and
    web apps without writing code, or at least minimizing the code you have to write.
    You saw how things such as WordPress and Drupal can allow even non-technical users
    – to at least some extent – to create content for the web. You also saw how no-code
    offerings from companies such as GoDaddy or Wix can remove the need for web developers
    entirely… though you also saw how these tools can make you a more effective web
    developer, thereby (I believe!) reversing that notion.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, which begins the final part of this book, we’re going to
    put the technical stuff completely behind us and focus entirely on other concerns,
    things such as career development, skills growth, and landing your first web developer
    job. That’s ultimately the goal after all, and we’ll spend a few chapters figuring
    out how to get there together!
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 3: Getting and Keeping a Job and Growing a Career'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final part, we’ll largely step away from technology-specific knowledge
    and begin to look at what it takes to find a job in the web development field.
    We’ll talk about what a FAANG company is, why you may or may not want to consider
    them, and what kind of salaries you might expect in this field.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll delve into building a resume and portfolio, and what a typical web developer
    interview might entail. We’ll discuss how to prepare for the interview, common
    questions you might encounter, and how to handle them.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll also talk about work/life balance and how it’s of critical importance
    for growing a successful career in web development while staying sane!
  prefs: []
  type: TYPE_NORMAL
- en: 'This part includes the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B18315_09.xhtml#_idTextAnchor219), *Landing Your First Job*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B18315_10.xhtml#_idTextAnchor259), *Discovering the Keys to
    Quality Work as a Web Developer*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B18315_11.xhtml#_idTextAnchor279), *Reviewing Soft Skills (They
    Make You Hard to Deny)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B18315_12.xhtml#_idTextAnchor300), *Growing Your Career*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
