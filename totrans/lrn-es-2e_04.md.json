["```js\nconst page1 = $.syncHTTP('http://example.com/page1');\nconst page2 = $.syncHTTP('http://example.com/page2');\nconst page3 = $.syncHTTP('http://example.com/page3');\nconst page4 = $.syncHTTP('http://example.com/page4');\n\nconsole.log(page1, page2, page3, page4);\n```", "```js\nconsole.log('Start');\n\nsetTimeout( () => {\n  console.log('Middle');\n}, 1000 )\n\nconsole.log('End');\n```", "```js\nconsole.log('Hello');\nsetTimeout( () => {\n  console.log('World')\n}, 0 ) // 0 second timeout (executes immediately)\nconsole.log('???')\n```", "```js\nHello\n???\nWorld\n```", "```js\nfunction displayName(json) {\n    try {\n        //we usally display it using DOM\n        console.log(json.Name);\n    } catch(e) {\n    console.log(\"Exception: \" + e.message);\n    }\n}\n\nfunction displayProfession(json) {\n    try {\n        console.log(json.Profession);\n    } catch(e) {\n        console.log(\"Exception: \" + e.message);\n    }\n}\n\nfunction displayAge(json) {\n    try {\n        console.log(json.Age);\n    } catch(e) {\n        console.log(\"Exception: \" + e.message);\n    }\n}\n\nfunction displayData(data) {\n    try {\n        const json = JSON.parse(data);\n        displayName(json);\n        displayProfession(json);\n        displayAge(json);\n    } catch(e) {\n        console.log(\"Exception: \" + e.message);\n    }\n}\n\nconst request = new XMLHttpRequest();\nconst url = \"data.json\";\nrequest.open(\"GET\", url);\nrequest.addEventListener(\"load\", function(){\n\n    if(request.status === 200) {\n        displayData(request.responseText);\n    } else {\n        console.log(\"Server Error: \" + request.status);\n    }\n\n}, false);\n\nrequest.addEventListener(\"error\", function(){\n    console.log(\"Cannot Make AJAX Request\");\n}, false);\n\nrequest.send();\n```", "```js\n{\n    \"Name\": \"Eden\",\n    \"Profession\": \"Developer\",\n    \"Age\": \"25\"\n}\n```", "```js\nfunction verify() {\n    try {\n        const result = confirm(\"Is the data correct?\");\n        if (result) {\n        //make AJAX request to send data to server\n        } else {\n        //make AJAX request to send data to server\n        }\n    } catch(e) {\n        console.log(\"Exception: \" + e.message);\n    }\n}\n\nfunction displayData(data) {\n    try {\n        const json = JSON.parse(data);\n        displayName(json);\n        displayProfession(json);\n        displayAge(json);\n        verify();\n    } catch(e) {\n        console.log(\"Exception: \" + e.message);\n    }\n}\n```", "```js\nfunction displayName(json) {\n    try {\n        console.log(json.Name);\n    } catch(e) {\n        console.log(\"Exception: \" + e.message);\n    }\n}\n\nfunction displayProfession(json) {\n    try {\n        console.log(json.Profession);\n    } catch(e) {\n        console.log(\"Exception: \" + e.message);\n    }\n}\n\nfunction displayAge(json) {\n    try {\n        console.log(json.Age);\n    } catch(e) {\n        console.log(\"Exception: \" + e.message);\n    }\n}\n\nfunction displayData(data) {\n    try {\n        const json = JSON.parse(data);\n        displayName(json);\n        displayProfession(json);\n        displayAge(json);\n    } catch(e) {\n        console.log(\"Exception: \" + e.message);\n    }\n}\n\n$.ajax({\nurl: \"data.json\", \nsuccess: function(result, status, responseObject) {\n    displayData(responseObject.responseText);\n}, \nerror: function(xhr,status,error) {\n    console.log(\"Cannot Make AJAX Request. Error is: \" + error);\n}\n});\n```", "```js\najaxCall('http://example.com/page1', response1 => {\n   ajaxCall('http://example.com/page2'+response1, response2 => {\n     ajaxCall('http://example.com/page3'+response2, response3 => {\n       console.log(response3)\n     }\n   })\n})\n```", "```js\najaxCallPromise('http://example.com/page1')\n.then( response1 => ajaxCallPromise('http://example.com/page2'+response1) )\n.then( response2 => ajaxCallPromise('http://example.com/page3'+response2) )\n.then( response3 => console.log(response3) )\n```", "```js\nconst ajaxCallPromise = url => {\n  return new Promise((resolve, reject) => {\n    // DO YOUR ASYNC STUFF HERE\n    $.ajaxAsyncWithNativeAPI(url, function(data) {\n      if(data.resCode === 200) {\n          resolve(data.message)\n      } else {\n          reject(data.error)\n      }\n    })\n  })\n}\n```", "```js\nfoo().then( res => {\n   bar().then( res2 => {\n     console.log('Both done')\n   })\n})\n```", "```js\nfoo()\n.then( res => bar() ) // bar() returns a Promise\n.then( res => {\n   console.log('Both done')\n})\n```", "```js\najaxCallPromise('http://example.com/page1').then( \n  successData => { console.log('Request was successful') },\n  failData => { console.log('Request failed' + failData) } \n)\n```", "```js\nsetTimeout( () => {\n  // code here executes after TIME_DURATION milliseconds\n}, TIME_DURATION)\n```", "```js\nconst PsetTimeout = duration => {\n   return new Promise((resolve, reject) => {\n      setTimeout( () => {\n         resolve()\n      }, duration);\n   })\n}\n\n// usage:\n\nPsetTimeout(1000)\n.then(() => {\n  console.log('Executes after a second')\n})\n```", "```js\najaxPromiseCall('http://invalidURL.com')\n.then(success => { console.log(success) },\nfailed => { console.log(failed) });\n```", "```js\najaxPromiseCall('http://invalidURL.com')\n.then(success => console.log(success))\n.catch(failed => console.log(failed));\n```", "```js\nconst p1 = Promise.resolve(4);\np1.then(function(value){\n  console.log(value);\n}); //passed a promise object\n\nPromise.resolve(p1).then(function(value){ \n console.log(value);\n});\n\nPromise.resolve({name: \"Eden\"})\n.then(function(value){ \n  console.log(value.name);\n});\n```", "```js\n4\n4\nEden\n```", "```js\nconst p1 = Promise.reject(4);\np1.then(null, function(value){\nconsole.log(value);\n});\nPromise.reject({name: \"Eden\"})\n.then(null, function(value){\nconsole.log(value.name);\n});\n```", "```js\n4\nEden\n```", "```js\nconst p1 = new Promise(function(resolve, reject){\n setTimeout(function(){\n  resolve();\n }, 1000);\n});\n\nconst p2 = new Promise(function(resolve, reject){\n setTimeout(function(){\n  resolve();\n }, 2000);\n});\n\nconst arr = [p1, p2];\nPromise.all(arr).then(function(){\nconsole.log(\"Done\"); //\"Done\" is logged after 2 seconds\n});\n```", "```js\nconst p1 = new Promise(function(resolve, reject){\n setTimeout(function(){\n  reject(\"Error\");\n }, 1000);\n});\n\nconst p2 = new Promise(function(resolve, reject){\n setTimeout(function(){\n  resolve();\n }, 2000);\n});\n\nconst arr = [p1, p2];\nPromise.all(arr).then(null, function(reason){\nconsole.log(reason); //\"Error\" is logged after 1 second\n});\n```", "```js\nvar p1 = new Promise(function(resolve, reject){ \nsetTimeout(function(){ \nresolve(\"Fulfillment Value 1\"); \n}, 1000);\n});\nvar p2 = new Promise(function(resolve, reject){ \nsetTimeout(function(){\nresolve(\"fulfillment Value 2\"); \n}, 2000);\n});\nvar arr = [p1, p2];\nPromise.race(arr).then(function(value){ \nconsole.log(value); //Output \"Fulfillment value 1\"\n}, function(reason){ \nconsole.log(reason);\n});\n```", "```js\nasync function ES8isCool() {\n   // asynchronous work\n   const information = await getES8Information() // Here getES8Information itself is an async function\n}\n```", "```js\nfunction sendAsyncHTTP(url) {\n return new Promise((resolve, reject) => {\n  const xhttp = new XMLHttpRequest()\n  xhttp.onreadystatechange = function() {\n    if (this.readyState == 4) { // success\n    if(this.status == 200) {\n           resolve(xhttp.responseText)\n      } else {\n           console.log(this.readyState, this.status)\n           reject(xhttp.statusText) // failed\n      }\n    }\n  };\n  xhttp.open(\"GET\", url, true);\n  xhttp.send();\n })\n}\n\nasync function doSomeTasks() {\n   const documentFile1 = await sendAsyncHTTP('http://example.com')\n   console.log('Got first document')\n   const documentFile2 = await sendAsyncHTTP('http://example.com/?somevar=true')\n   console.log('Got second document')\n   return documentFile2\n}\n\ndoSomeTasks() // returns a Promise\n.then( res => console.log(\"res is a HTML file\") ) \n```", "```js\nasync function sendAsyncHTTP(url) {\n  const xhttp = new XMLHttpRequest()\n  xhttp.onreadystatechange = function() { // <-- hint\n    if(this.status == 200) {\n          resolve(xhttp.responseText)\n     } else {\n          console.log(this.readyState, this.status)\n          reject(xhttp.statusText) // failed\n     }\n  };\n  xhttp.open(\"GET\", url, true);\n  xhttp.send();\n}\n```", "```js\nasync function doSomeTasks() {\n   const documentFile1 = await sendAsyncHTTP('http://example.com')\n   console.log('Got first document')\n   const documentFile2 = await sendAsyncHTTP('http://example.com/?somevar=true')\n   console.log('Got second document')\n   return documentFile2\n}\n```", "```js\nconst doSomething = () => {\n  return p1().then(res1 => {\n      return p2().then(res2 => {\n          // finally we need both res1 and res2 \n          return p3(res1, res2)\n        })\n    })\n}\n```", "```js\nconst doSomething = async () => {\n  const res1 = await p1()\n  const res2 = await p2()\n  return p3(res1, res2)\n}\n```"]