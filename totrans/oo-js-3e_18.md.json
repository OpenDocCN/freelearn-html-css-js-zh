["```js\n            > var a; typeof a; \n            \"undefined\" \n\n    ```", "```js\n            > a === undefined; \n            true \n\n    ```", "```js\n            > var s = '1s'; s++; \n            NaN \n\n    ```", "```js\n            > !!\"false\"; \n            true \n\n    ```", "```js\n            > !!false; \n            false \n\n    ```", "```js\n            > !false; \n            true \n            > !true; \n            false \n\n    ```", "```js\n            > !!\"hello\"; \n            true \n            > !!\"0\"; \n            true \n            > !!\"\"; \n            false \n\n    ```", "```js\n            > !!undefined; \n            false \n\n    ```", "```js\n            > typeof -Infinity; \n            \"number\" \n\n    ```", "```js\n            > 10 % \"0\"; \n            NaN \n\n    ```", "```js\n            > undefined == null; \n            true \n\n    ```", "```js\n            > undefined === null; \n            false \n\n    ```", "```js\n            > false === \"\"; \n            false \n\n    ```", "```js\n            > typeof \"2E+2\"; \n            \"string\" \n\n    ```", "```js\n            > 2E+2; \n            200 \n            > typeof 2E+2; \n            \"number\" \n\n    ```", "```js\n            > a = 3e+3; a++; \n            3000 \n\n    ```", "```js\n            > a; \n            3001 \n\n    ```", "```js\n            > var v = v || 10; \n            > v; \n            10 \n\n    ```", "```js\n            > var v = undefined || 10; \n            > v; \n            10 \n\n    ```", "```js\n            > var v = 100; \n            > var v = v || 10; \n            > v; \n            100 \n\n    ```", "```js\n            > var v = 0; \n            > var v = v || 10; \n            > v; \n            10 \n\n    ```", "```js\n            for (var i = 1; i <= 12; i++) { \n              for (var j = 1; j <= 12; j++) { \n                console.log(i + ' * ' + j + ' = ' + i * j); \n              } \n            } \n\n    ```", "```js\n            var i = 1, j = 1; \n            while (i <= 12) { \n              while (j <= 12) { \n                console.log(i + ' * ' + j + ' = ' + i * j); \n                j++; \n              } \n              i++; \n              j = 1; \n            } \n\n    ```", "```js\n            function getRGB(hex) { \n              return \"rgb(\" + \n                parseInt(hex[1] + hex[2], 16) + \", \" + \n                parseInt(hex[3] + hex[4], 16) + \", \" + \n                parseInt(hex[5] + hex[6], 16) + \")\"; \n            } \n            Testing: \n            > getRGB(\"#00ff00\"); \n                   \"rgb(0, 255, 0)\" \n            > getRGB(\"#badfad\"); \n                   \"rgb(186, 223, 173)\" \n\n    ```", "```js\n        function getRGB2(hex) { \n          var result = []; \n          result.push(parseInt(hex.slice(1, 3), 16)); \n          result.push(parseInt(hex.slice(3, 5), 16)); \n          result.push(parseInt(hex.slice(5), 16)); \n          return \"rgb(\" + result.join(\", \") + \")\"; \n        } \n\n    ```", "```js\n            > parseInt(1e1); \n            10 \n            Here, you're parsing something that is already an integer: \n            > parseInt(10); \n            10 \n            > 1e1; \n            10 \n\n    ```", "```js\n            > parseInt('1e1'); \n            1 \n\n    ```", "```js\n            > parseFloat('1e1'); \n            10 \n\n    ```", "```js\n            > isFinite(0 / 10); \n            true \n\n    ```", "```js\n            > isFinite(20 / 0); \n            false \n\n    ```", "```js\n            > 20 / 0; \n            Infinity \n\n    ```", "```js\n            > isNaN(parseInt(NaN)); \n            true \n\n    ```", "```js\n            var a = 1; \n            function f() { \n              function n() { \n                alert(a); \n              } \n              var a = 2; \n              n(); \n            } \n            f(); \n\n    ```", "```js\n            function f() { \n              var a; \n              function n() { \n                alert(a); \n              } \n              a = 2; \n              n(); \n            } \n\n    ```", "```js\n            var a = 1; \n            function f() { \n              function n() { \n                alert(a); \n              } \n              n(); \n              var a = 2; \n              n(); \n            } \n            f(); \n\n    ```", "```js\n            var a = 1; \n            function f() { \n              var a; // a is now undefined \n              function n() { \n                alert(a); \n              } \n              n(); // alert undefined \n              a = 2; \n              n(); // alert 2 \n            } \n            f(); \n\n    ```", "```js\n            var f = alert; \n            eval('f(\"Boo!\")'); \n\n    ```", "```js\n            > f(\"Boo\"); \n\n    ```", "```js\n            var e; \n            var f = alert; \n            eval('e=f')('Boo!'); \n\n    ```", "```js\n            > var a = 1; \n            > var b; \n            > var c = (b = a); \n            > c; \n            1 \n\n    ```", "```js\n            (function(){ \n              return alert; \n            })()('Boo!'); \n\n    ```", "```js\n            function F() { \n              function C() { \n                return this; \n              } \n              return C(); \n            } \n            var o = new F(); \n\n    ```", "```js\n            function F() { \n              function C() { \n                return this; \n              } \n              return new C(); \n            } \n            var o = new F(); \n\n    ```", "```js\n            > o.constructor.name; \n            \"C\" \n\n    ```", "```js\n            function F() { \n              \"use strict\"; \n              this.name = \"I am F()\"; \n              function C() { \n                console.log(this); // undefined \n                return this; \n              } \n              return C(); \n            } \n\n    ```", "```js\n            > var o = new F(); \n            > o.name; \n            \"I am F()\" \n\n    ```", "```js\n            function C() { \n              this.a = 1; \n              return false; \n            } \n            And testing: \n            > typeof new C(); \n            \"object\" \n            > new C().a; \n             1 \n\n    ```", "```js\n            > var c = [1, 2, [1, 2]]; \n            > c.sort(); \n            > c; \n             [1, Array[2], 2] \n\n    ```", "```js\n            > c.join('--'); \n            > c; \n            \"1--1,2--2\" \n\n    ```", "```js\n            function MyString(input) { \n              var index = 0; \n\n              // cast to string \n              this._value = '' + input; \n\n              // set all numeric properties for array access \n              while (input[index] !== undefined) { \n                this[index] = input[index]; \n                index++; \n              } \n\n              // remember the length \n              this.length = index; \n            } \n\n            MyString.prototype = { \n              constructor: MyString, \n              valueOf: function valueOf() { \n                return this._value; \n              }, \n              toString: function toString() { \n                return this.valueOf(); \n              }, \n              charAt: function charAt(index) { \n                return this[parseInt(index, 10) || 0]; \n              }, \n              concat: function concat() { \n                var prim = this.valueOf(); \n                for (var i = 0, len = arguments.length; i < len; i++) { \n                  prim += arguments[i]; \n                } \n                return prim; \n              }, \n              slice: function slice(from, to) { \n                var result = '', \n                    original = this.valueOf(); \n                if (from === undefined) { \n                  return original; \n                } \n                if (from > this.length) { \n                  return result; \n                } \n                if (from < 0) { \n                  from = this.length - from; \n                } \n                if (to === undefined || to > this.length) { \n                  to = this.length; \n                } \n                if (to < 0) { \n                  to = this.length + to; \n                } \n                // end of validation, actual slicing loop now \n                for (var i = from; i < to; i++) { \n                  result += original[i]; \n                } \n                return result; \n              }, \n              split: function split(re) { \n                var index = 0, \n                   result = [], \n                    original = this.valueOf(), \n                    match, \n                    pattern = '', \n                    modifiers = 'g'; \n\n                if (re instanceof RegExp) { \n                  // split with regexp but always set \"g\" \n                  pattern = re.source; \n                  modifiers += re.multiline  ? 'm' : ''; \n                  modifiers += re.ignoreCase ? 'i' : ''; \n                } else { \n                  // not a regexp, probably a string, we'll convert it \n                  pattern = re; \n                } \n                re = RegExp(pattern, modifiers); \n\n                while (match = re.exec(original)) { \n                  result.push(this.slice(index, match.index)); \n                  index = match.index + new MyString(match[0]).length; \n                } \n                result.push(this.slice(index)); \n                return result; \n               } \n            }; \n\n    ```", "```js\n             > var s = new MyString('hello'); \n            > s.length; \n             5 \n            > s[0]; \n            \"h\" \n             > s.toString(); \n             \"hello\" \n            > s.valueOf(); \n             \"hello\" \n            > s.charAt(1); \n             \"e\" \n            > s.charAt('2'); \n            \"l\" \n            > s.charAt('e'); \n            \"h\" \n            > s.concat(' world!'); \n            \"hello world!\" \n            > s.slice(1, 3); \n            \"el\" \n            > s.slice(0, -1); \n            \"hell\" \n            > s.split('e'); \n             [\"h\", \"llo\"] \n            > s.split('l'); \n             [\"he\", \"\", \"o\"] \n\n    ```", "```js\n            > MyString.prototype.reverse = function reverse() { \n                return this.valueOf().split(\"\").reverse().join(\"\"); \n              }; \n            > new MyString(\"pudding\").reverse(); \n             \"gniddup\" \n\n    ```", "```js\n            function MyArray(length) { \n              // single numeric argument means length \n              if (typeof length === 'number' && \n                  arguments[1] === undefined) { \n                this.length = length; \n                return this; \n              } \n\n              // usual case \n               this.length = arguments.length; \n              for (var i = 0, len = arguments.length; i < len; i++) { \n                this[i] = arguments[i]; \n              } \n              return this; \n\n              // later in the book you'll learn how to support \n              // a non-constructor invocation too \n            } \n\n            MyArray.prototype = { \n              constructor: MyArray, \n              join: function join(glue) { \n                var result = ''; \n                if (glue === undefined) { \n                  glue = ','; \n                } \n                for (var i = 0; i < this.length - 1; i++) { \n                  result += this[i] === undefined ? '' : this[i]; \n                  result += glue; \n                } \n                result += this[i] === undefined ? '' : this[i]; \n                return result; \n              }, \n              toString: function toString() { \n                return this.join(); \n              }, \n              push: function push() { \n                for (var i = 0, len = arguments.length; i < len; i++) { \n                  this[this.length + i] = arguments[i]; \n                } \n                this.length += arguments.length; \n                return this.length; \n              }, \n              pop: function pop() { \n                var poppd = this[this.length - 1]; \n                delete this[this.length - 1]; \n                this.length--; \n                return poppd; \n              } \n            }; \n\n    ```", "```js\n            > var a = new MyArray(1, 2, 3, \"test\"); \n            > a.toString(); \n            \"1,2,3,test\" \n            > a.length; \n             4 \n            > a[a.length - 1]; \n            \"test\" \n            > a.push('boo'); \n             5 \n            > a.toString(); \n            \"1,2,3,test,boo\" \n            > a.pop(); \n            \"boo\" \n            > a.toString(); \n            \"1,2,3,test\" \n            > a.join(','); \n            \"1,2,3,test\" \n            > a.join(' isn't '); \n            \"1 isn't 2 isn't 3 isn't test\" \n\n    ```", "```js\n            var MyMath = (function () { \n\n             function isArray(ar) { \n                return \n                  Object.prototype.toString.call(ar) === \n                    '[object Array]'; \n             } \n\n              function sort(numbers) { \n                // not using numbers.sort() directly because \n                // `arguments` is not an array and doesn't have sort() \n                return Array.prototype.sort.call(numbers, function (a, b) { \n                  if (a === b) { \n                    return 0; \n                  } \n                  return  1 * (a > b) - 0.5; // returns 0.5 or -0.5 \n               }); \n              } \n\n              return { \n                PI:   3.141592653589793, \n                E:    2.718281828459045, \n                LN10: 2.302585092994046, \n                LN2:  0.6931471805599453, \n                // ... more constants \n                max: function max() { \n                  // allow unlimited number of arguments \n                  // or an array of numbers as first argument \n                  var numbers = arguments; \n                  if (isArray(numbers[0])) { \n                    numbers = numbers[0]; \n                  } \n                  // we can be lazy:  \n                  // let Array sort the numbers and pick the last \n                  return sort(numbers)[numbers.length - 1]; \n                }, \n                min: function min() { \n                  // different approach to handling arguments: \n                  // call the same function again \n                  if (isArray(numbers)) { \n                    return this.min.apply(this, numbers[0]); \n                  } \n\n                  // Different approach to picking the min: \n                  // sorting the array is an overkill, it's too much  \n                  // work since we don't worry about sorting but only  \n                  // about the smallest number. \n                  // So let's loop: \n                  var min = numbers[0]; \n                  for (var i = 1; i < numbers.length; i++) { \n                    if (min > numbers[i]) { \n                      min = numbers[i]; \n                    } \n                 } \n                  return min; \n                }, \n                rand: function rand(min, max, inclusive) { \n                  if (inclusive) { \n                    return Math.round(Math.random() * (max - min) + min); \n                    // test boundaries for random number \n                    // between 10 and 100 *inclusive*: \n                    // Math.round(0.000000 * 90 + 10); // 10 \n                    // Math.round(0.000001 * 90 + 10); // 10 \n                    // Math.round(0.999999 * 90 + 10); // 100 \n\n                  } \n                  return Math.floor(Math.random() * (max - min - 1) + min + 1); \n                  // test boundaries for random number \n                  // between 10 and 100 *non-inclusive*: \n                  // Math.floor(0.000000 * (89) + (11)); // 11 \n                  // Math.floor(0.000001 * (89) + (11)); // 11 \n                  // Math.floor(0.999999 * (89) + (11)); // 99 \n                } \n              }; \n            })(); \n\n    ```", "```js\n            var shape = { \n              type: 'shape', \n              getType: function () { \n                return this.type; \n              } \n            }; \n\n    ```", "```js\n            function Triangle(a, b, c) { \n              this.a = a; \n              this.b = b; \n              this.c = c; \n            } \n\n            Triangle.prototype = shape; \n            Triangle.prototype.constructor = Triangle; \n            Triangle.prototype.type = 'triangle'; \n\n    ```", "```js\n            Triangle.prototype.getPerimeter = function () { \n              return this.a + this.b + this.c; \n            }; \n\n    ```", "```js\n            > var t = new Triangle(1, 2, 3); \n            > t.constructor === Triangle; \n            true \n            > shape.isPrototypeOf(t); \n            true \n            > t.getPerimeter(); \n            6 \n            > t.getType(); \n            \"triangle\" \n\n    ```", "```js\n            for (var i in t) { \n              if (t.hasOwnProperty(i)) { \n                console.log(i, '=', t[i]); \n             } \n            } \n\n    ```", "```js\n            Array.prototype.shuffle = function () { \n              return this.sort(function () { \n                return Math.random() - 0.5; \n              }); \n            }; \n\n    ```", "```js\n            > [1, 2, 3, 4, 5, 6, 7, 8, 9].shuffle(); \n             [4, 2, 3, 1, 5, 6, 8, 9, 7] \n            > [1, 2, 3, 4, 5, 6, 7, 8, 9].shuffle(); \n             [2, 7, 1, 3, 4, 5, 8, 9, 6] \n            > [1, 2, 3, 4, 5, 6, 7, 8, 9].shuffle(); \n             [4, 2, 1, 3, 5, 6, 8, 9, 7] \n\n    ```", "```js\n            var my = objectMulti(obj, another_obj, a_third, { \n              additional: \"properties\" \n            }); \n            A possible solution: \n            function objectMulti() { \n              var Constr, i, prop, mixme; \n\n            // constructor that sets own properties \n            var Constr = function (props) { \n              for (var prop in props) { \n                this[prop] = props[prop]; \n              } \n            }; \n\n           // mix into the prototype \n           for (var i = 0; i < arguments.length - 1; i++) { \n             var mixme = arguments[i]; \n             for (var prop in mixme) { \n               Constr.prototype[prop] = mixme[prop]; \n             } \n           } \n\n          return new Constr(arguments[arguments.length - 1]);\n       } \n\n    ```", "```js\n            > var obj_a = {a: 1}; \n            > var obj_b = {a: 2, b: 2}; \n            > var obj_c = {c: 3}; \n            > var my = objectMulti(obj_a, obj_b, obj_c, {hello: \"world\"}); \n            > my.a; \n             2 \n\n    ```", "```js\n            > my.b; \n            2 \n            > my.c; \n            3 \n            > my.hello; \n            \"world\" \n            > my.hasOwnProperty('a'); \n            false \n            > my.hasOwnProperty('hello'); \n            true \n\n    ```", "```js\n            new Triangle( \n              new Point(100, 155), \n              new Point(30, 50), \n              new Point(220, 00)).draw(); \n\n            new Triangle( \n              new Point(10, 15),   \n              new Point(300, 50), \n              new Point(20, 400)).draw(); \n\n    ```", "```js\n            new Square(new Point(150, 150), 300).draw(); \n            new Square(new Point(222, 222), 222).draw(); \n\n    ```", "```js\n            new Rectangle(new Point(100, 10), 200, 400).draw(); \n            new Rectangle(new Point(400, 200), 200, 100).draw(); \n\n    ```", "```js\n            function Kite(center, diag_a, diag_b, height) { \n              this.points = [ \n                new Point(center.x - diag_a / 2, center.y), \n                new Point(center.x, center.y + (diag_b - height)), \n                new Point(center.x + diag_a / 2, center.y), \n                new Point(center.x, center.y - height) \n              ]; \n              this.getArea = function () { \n                return diag_a * diag_b / 2; \n              }; \n            } \n\n            function Rhombus(center, diag_a, diag_b) { \n              Kite.call(this, center, diag_a, diag_b, diag_b / 2); \n            } \n\n            function Trapezoid(p1, side_a, p2, side_b) { \n              this.points = [p1, p2, new Point(p2.x + side_b, p2.y),\n              new Point(p1.x + side_a, p1.y) \n              ]; \n\n              this.getArea = function () { \n                var height = p2.y - p1.y; \n                return height * (side_a + side_b) / 2; \n              }; \n            } \n\n            // regular pentagon, all edges have the same length \n            function Pentagon(center, edge) { \n              var r = edge / (2 * Math.sin(Math.PI / 5)), \n                  x = center.x, \n                  y = center.y; \n\n              this.points = [new Point(x + r, y),\n            new Point(x + r * Math.cos(2 * Math.PI / 5), y - r * \n             Math.sin(2 * Math.PI / 5)), \n            new Point(x - r * Math.cos(    Math.PI / 5), y - r * \n             Math.sin(    Math.PI / 5)), \n            new Point(x - r * Math.cos(    Math.PI / 5), y + r * \n             Math.sin(    Math.PI / 5)), \n            new Point(x + r * Math.cos(2 * Math.PI / 5), y + r * \n             Math.sin(2 * Math.PI / 5)) \n              ]; \n\n              this.getArea = function () { \n                return 1.72 * edge * edge; \n              }; \n            } \n\n            function Circle(center, radius) { \n              this.getArea = function () { \n                return Math.pow(radius, 2) * Math.PI; \n              }; \n\n              this.getPerimeter = function () { \n                return 2 * radius * Math.PI; \n              };   \n\n              this.draw = function () { \n                var ctx = this.context; \n                ctx.beginPath(); \n                ctx.arc(center.x, center.y, radius, 0, 2 * Math.PI); \n                ctx.stroke(); \n              }; \n            } \n\n            (function () { \n              var s = new Shape(); \n              Kite.prototype = s; \n              Rhombus.prototype = s; \n              Trapezoid.prototype = s; \n              Pentagon.prototype = s; \n              Circle.prototype = s; \n            }()); \n\n    ```", "```js\n            new Kite(new Point(300, 300), 200, 300, 100).draw(); \n            new Rhombus(new Point(200, 200), 350, 200).draw(); \n            new Trapezoid( \n              new Point(100, 100), 100,  \n              new Point(50, 250), 400).draw(); \n            new Pentagon(new Point(400, 400), 100).draw(); \n            new Circle(new Point(500, 300), 270).draw(); \n\n    ```", "```js\n            // inherit(Child, Parent) \n            inherit(Rectangle, Shape); \n            inherit(Square, Rectangle); \n\n    ```", "```js\n            var s = new Shape(); \n            Kite.prototype = s; \n            Rhombus.prototype = s; \n\n    ```", "```js\n            Child.prototype.uber.call(this, args...) \n\n    ```", "```js\n            function inherit(Child, Parent) { \n              // remember prototype \n              var extensions = Child.prototype; \n\n              // inheritance with an intermediate F() \n              var F = function () {}; \n               F.prototype = Parent.prototype; \n              Child.prototype = new F(); \n              // reset constructor \n              Child.prototype.constructor = Child; \n              // remember parent \n              Child.prototype.uber = Parent; \n\n              // keep track of who inherits the Parent \n              if (!Parent.children) { \n                Parent.children = []; \n              } \n              Parent.children.push(Child); \n\n              // carry over stuff previsouly added to the prototype \n              // because the prototype is now overwritten completely \n              for (var i in extensions) { \n                if (extensions.hasOwnProperty(i)) { \n                  Child.prototype[i] = extensions[i]; \n                } \n              } \n            } \n\n    ```", "```js\n            function Triangle(a, b, c) { \n              Triangle.prototype.uber.call(this); \n              this.points = [a, b, c]; \n            } \n\n            Triangle.prototype.getArea = function () { \n              var p = this.getPerimeter(), s = p / 2; \n              return Math.sqrt(s * (s - this.lines[0].length) * \n            (s - this.lines[1].length) * (s - this.lines[2].length)); \n            }; \n\n            function Rectangle(p, side_a, side_b) { \n              // calling parent Shape() \n              Rectangle.prototype.uber.call(this); \n\n              this.points = [ p, \n                new Point(p.x + side_a, p.y), \n                new Point(p.x + side_a, p.y + side_b), \n                new Point(p.x, p.y + side_b) \n              ]; \n            } \n\n           Rectangle.prototype.getArea = function () { \n               // Previsouly we had access to side_a and side_b  \n               // inside the constructor closure. No more. \n              // option 1: add own properties this.side_a and this.side_b \n              // option 2: use what we already have: \n              var lines = this.getLines(); \n              return lines[0].length * lines[1].length; \n            }; \n\n            function Square(p, side) { \n              this.uber.call(this, p, side, side); \n              // this call is shorter than Square.prototype.uber.call() \n              // but may backfire in case you inherit  \n              // from Square and call uber \n              // try it :-) \n            } \n\n    ```", "```js\n            inherit(Triangle, Shape); \n            inherit(Rectangle, Shape); \n            inherit(Square, Rectangle); \n\n    ```", "```js\n            > var sq = new Square(new Point(0, 0), 100); \n            > sq.draw(); \n            > sq.getArea(); \n            10000 \n\n    ```", "```js\n            > sq.constructor === Square; \n            true \n            > sq instanceof Square; \n            true \n            > sq instanceof Rectangle; \n            true \n            > sq instanceof Shape; \n            true \n\n    ```", "```js\n            > Shape.children[1] === Rectangle; \n            true \n            > Rectangle.children[0] === Triangle; \n            false \n            > Rectangle.children[0] === Square; \n            true \n            > Square.children; \n            undefined \n\n    ```", "```js\n            > sq.uber === Rectangle; \n            true \n\n    ```", "```js\n            Shape.prototype.isPrototypeOf(sq); \n            true \n            Rectangle.prototype.isPrototypeOf(sq); \n            true \n            Triangle.prototype.isPrototypeOf(sq); \n            false \n\n    ```", "```js\n            setInterval(function () { \n              document.title = new Date().toTimeString(); \n            }, 1000); \n\n    ```", "```js\n            var w = window.open( \n                'http://phpied.com', 'my', \n                 'width = 200, height = 200'); \n\n            var i = setInterval((function () { \n              var size = 200; \n              return function () { \n                size += 5; \n                w.resizeTo(size, size); \n                if (size === 400) { \n                  clearInterval(i); \n                } \n              }; \n            }()), 100); \n\n    ```", "```js\n           var i = setInterval((function () { \n              var start = +new Date(); // Date.now() in ES5 \n              return function () { \n                w.moveTo( \n                  Math.round(Math.random() * 100), \n                  Math.round(Math.random() * 100)); \n                if (new Date() - start > 5000) { \n                  clearInterval(i); \n                } \n              }; \n             }()), 20); \n\n    ```", "```js\n            function walkDOM(n, cb) { \n              cb(n); \n              var i, \n                  children = n.childNodes, \n                  len = children.length, \n                  child; \n              for (i = 0; i < len; i++) { \n              child = n.childNodes[i]; \n                if (child.hasChildNodes()) { \n                  walkDOM(child, cb); \n                } \n              } \n            } \n\n    ```", "```js\n            > walkDOM(document.documentElement,\n            console.dir.bind(console)); \n           html \n           head \n           title \n           body \n           h1 \n           ... \n\n    ```", "```js\n            // helper \n            function isFunction(f) { \n              return Object.prototype.toString.call(f) === \n                \"[object Function]\"; \n            } \n\n            function removeDom(node) { \n              var i, len, attr; \n\n              // first drill down inspecting the children \n              // and only after that remove the current node \n              while (node.firstChild) { \n                removeDom(node.firstChild); \n              } \n\n              // not all nodes have attributes, e.g. text nodes don't \n              len = node.attributes ? node.attributes.length : 0; \n\n              // cleanup loop \n              // e.g. node === <body>,  \n              // node.attributes[0].name === \"onload\" \n              // node.onload === function()... \n              // node.onload is not enumerable so we can't use  \n              // a for-in loop and have to go the attributes route \n              for (i = 0; i < len; i++) { \n                attr = node[node.attributes[i].name]; \n                if (isFunction(attr)) { \n                  // console.log(node, attr); \n                  attr = null; \n                } \n              } \n\n              node.parentNode.removeChild(node); \n            } \n\n    ```", "```js\n            > removeDom(document.body); \n\n    ```", "```js\n            function include(url) { \n              var s = document.createElement('script'); \n              s.src = url; \n              document.getElementsByTagName('head')[0].\n              appendChild(s); \n            } \n\n    ```", "```js\n            > include(\"http://www.phpied.com/files/jinc/1.js\"); \n            > include(\"http://www.phpied.com/files/jinc/2.js\"); \n\n    ```", "```js\n            var myevent = (function () { \n\n              // wrap some private stuff in a closure \n              var add, remove, toStr = Object.prototype.toString; \n\n              // helper \n              function toArray(a) { \n                // already an array \n                if (toStr.call(a) === '[object Array]') { \n                  return a; \n               } \n\n                // duck-typing HTML collections, arguments etc \n                var result, i, len; \n                if ('length' in a) { \n                  for (result = [], i = 0, len = a.length; i < len; i++)\n                  { \n                    result[i] = a[i]; \n                  } \n                  return result; \n               } \n\n                // primitives and non-array-like objects \n                // become the first and single array element \n                return [a]; \n              } \n\n              // define add() and remove() depending \n              // on the browser's capabilities \n              if (document.addEventListener) { \n                add = function (node, ev, cb) { \n                  node.addEventListener(ev, cb, false); \n                }; \n                remove = function (node, ev, cb) { \n                  node.removeEventListener(ev, cb, false); \n                }; \n              } else if (document.attachEvent) { \n                add = function (node, ev, cb) { \n                  node.attachEvent('on' + ev, cb); \n                }; \n                remove = function (node, ev, cb) { \n                  node.detachEvent('on' + ev, cb); \n                }; \n              } else { \n                add = function (node, ev, cb) { \n                  node['on' + ev] = cb; \n                }; \n                remove = function (node, ev) { \n                  node['on' + ev] = null; \n                }; \n              } \n\n              // public API \n              return { \n\n                addListener: function (element, event_name, callback) { \n                  // element could also be an array of elements \n                  element = toArray(element); \n                  for (var i = 0; i < element.length; i++) { \n                    add(element[i], event_name, callback); \n                  } \n                }, \n\n               removeListener: function (element, event_name, callback) { \n                  // same as add(), only practicing a different loop \n                  var i = 0, els = toArray(element), len = els.length; \n                 for (; i < len; i++) { \n                    remove(els[i], event_name, callback); \n                  } \n               }, \n\n                getEvent: function (event) { \n                  return event || window.event; \n                }, \n\n                getTarget: function (event) { \n                  var e = this.getEvent(event); \n                  return e.target || e.srcElement; \n                }, \n\n                stopPropagation: function (event) { \n                  var e = this.getEvent(event); \n                  if (e.stopPropagation) { \n                    e.stopPropagation(); \n                  } else { \n                    e.cancelBubble = true; \n                  } \n                }, \n\n                preventDefault: function (event) { \n                  var e = this.getEvent(event); \n                  if (e.preventDefault) { \n                    e.preventDefault(); \n                  } else { \n                    e.returnValue = false; \n                  } \n                } \n\n              }; \n            }()); \n\n    ```", "```js\n            function myCallback(e) { \n              e = myevent.getEvent(e); \n              alert(myevent.getTarget(e).href); \n              myevent.stopPropagation(e); \n              myevent.preventDefault(e); \n            } \n            myevent.addListener(document.links, 'click', myCallback); \n\n    ```", "```js\n            // add a div to the bottom of the page \n            var div = document.createElement('div'); \n            div.style.cssText = 'width: 100px; height:\n             100px; background: red; position: absolute;'; \n            document.body.appendChild(div); \n\n            // remember coordinates \n            var x = div.offsetLeft; \n            var y = div.offsetTop; \n\n            myevent.addListener(document.body, \n             'keydown', function (e) { \n             // prevent scrolling \n              myevent.preventDefault(e); \n\n              switch (e.keyCode) { \n                case 37: // left \n                  x--; \n                  break; \n                case 38: // up \n                  y--; \n                  break; \n                case 39: // right \n                  x++; \n                  break; \n                case 40: // down \n                  y++; \n                  break; \n                default: \n                  // not interested \n              } \n\n              // move \n              div.style.left = x + 'px'; \n              div.style.top  = y + 'px'; \n\n            }); \n\n    ```", "```js\n            var ajax = { \n              getXHR: function () { \n                var ids = ['MSXML2.XMLHTTP.3.0', \n                 'MSXML2.XMLHTTP', 'Microsoft.XMLHTTP']; \n                var xhr; \n                if (typeof XMLHttpRequest === 'function') { \n                  xhr = new XMLHttpRequest(); \n                } else { \n                  // IE: try to find an ActiveX object to use \n                  for (var i = 0; i < ids.length; i++) { \n                    try { \n                      xhr = new ActiveXObject(ids[i]); \n                      break; \n                    } catch (e) {} \n                  } \n                } \n                return xhr; \n\n              }, \n              request: function (url, method, cb, post_body) { \n                var xhr = this.getXHR(); \n                xhr.onreadystatechange = (function (myxhr) { \n                  return function () { \n                    if (myxhr.readyState === 4 && myxhr.status === 200) { \n                      cb(myxhr); \n                    } \n                  }; \n                }(xhr)); \n                xhr.open(method.toUpperCase(), url, true); \n                xhr.send(post_body || ''); \n              } \n            }; \n\n    ```", "```js\n            function myCallback(xhr) { \n              alert(xhr.responseText); \n            } \n            ajax.request('1.css', 'get', myCallback); \n            ajax.request('1.css', 'post', myCallback,\n             'first=John&last=Smith'); \n\n    ```"]