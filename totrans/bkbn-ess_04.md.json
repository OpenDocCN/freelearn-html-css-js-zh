["```js\nvar Cats = Backbone.Collection.extend({\n     // The properties and methods of Cats would go here\n});\n```", "```js\nvar cartoonCats = new Cats([{id: 'cat1', name: 'Garfield'}]);\nvar garfield = cartoonCats.models[0]; // garfield is a  Model\n```", "```js\nvar cartoonCats = new Cats([{name: 'Garfield'}, {name: 'Heathcliff'}]);\ncartoonCats.models.length; // 2, but instead you can do ...\ncartoonCats.length; // also 2\n```", "```js\nvar Cats = Backbone.Collection.extend({model: Cat});\nvar cats = new Cats(); // cats.model == Cat\n```", "```js\nvar Cat = Backbone.Model.extend();\nvar Cats = Backbone.Collection.extend({model: Cat});\nvar Dog = Backbone.Model.extend();\nvar snoopy = new Dog({name: 'Snoopy'});\nvar cartoonCats = new Cats([snoopy]);\ncartoonCats.models[0] instanceof Dog; // true\n```", "```js\nvar snoopyAttributes = {id: 'dog1', name: 'Snoopy'};\nvar cartoonCats = new Cats([snoopyAttributes]);\ncartoonCats.models[0] instanceof Cat; // true\n```", "```js\nvar cartoonCats = new Cats();\nvar garfield = cats.create({name: 'Garfield'}); // equivalent to:\n// var garfield = new Cat({name: 'Garfield'});// cats.models.push(garfield);\n// garfield.save();\n```", "```js\nvar cats = new Backbone.Collection();\ncats.add({name: 'Garfield'});\ncats.models[0] instanceof Cat; // true\n```", "```js\nvar cats = new Backbone.Collection([{name: 'Garfield'}]);\ncats.reset([{name: 'Heathcliff'}]);\ncats.models[0].get('name'); // \"Heathcliff\"\ncats.length; // 1, not 2, because we replaced Garfield with Heathcliff\n```", "```js\nvar garfield = new Cat({id: 'cat1', name: 'Garfield'});\nvar cats = new Backbone.Collection([garfield]);\ncats.get('cat1'); // garfield\ncats.get(garfield.cid); // also garfield\ncats.get('cat2'); // returns undefined\n```", "```js\nvar cats = new Backbone.Collection([{\n    id: 'cat1',    name: 'Garfield'\n}]);\ncats.remove('cat1');\ncats.length; // 0\n```", "```js\nvar cats = new Backbone.Collection([\n    {name: 'Garfield'},    {name: 'Heathcliff'}\n]);\ncats.at(1); // returns heathcliff\n```", "```js\nvar Cats = Backbone.Collection.extend({comparator: 'name'});\nvar cartoonCats = new Cats();\ncartoonCats.comparator; // 'name'\n```", "```js\nvar cartoonCats = new Backbone.Collection([\n    {name: 'Heathcliff'},\n    {name: 'Garfield'}\n], {\n    comparator: 'name'\n});\ncartoonCats.at(0);// garfield, because his name sorts first alphabetically\n```", "```js\nvar Cats = Backbone.Collection.extend({\n    comparator: function(cat) {\n        if (cat.get('name') == 'Heathcliff') return '0';\n        return cat.get('name');\n    }\n});\nvar cartoonCats = new Cats([ \n    {name: 'Heathcliff'},    {name: 'Garfield'}\n]);\ncartoonCats.at(0); // heathcliff, because \"0\" comes before \"garfield\" alphabetically\n```", "```js\nvar Cats = Backbone.Collection.extend({\n    comparator: function(leftCat, rightCat) {\n        // Special case sorting for Heathcliff\n        if (leftCat.get('name') == 'Heathcliff') return -1;\n        // Sorting rules for all other cats\n        if (leftCat.get('name') > rightCat.get('name')) return 1;\n        if (leftCat.get('name') < rightCat.get('name')) return -1;\n        if (leftCat.get('name') == rightCat.get('name')) return 0;\n    }\n});\nvar cartoonCats = new Cats([ \n    {name: 'Heathcliff'},    {name: 'Garfield'}\n]);\ncartoonCats.at(0);// heathcliff, because any comparison of his name will return -1\n```", "```js\nvar cartoonCats = new Cats([{name: 'Garfield'}]);\ncartoonCats.on('change', function(changedModel) {\n    alert( changedModel.get('name') + ' just changed!');\n});\ncartoonCats.at(0).set('weight', 'a whole lot'); // alerts \"Garfield just changed!\"\n```", "```js\nvar Cats = Backbone.Collection.extend({\n     url: '/cats'\n});\nvar cats = new Cats({name: 'Garfield'});\ncats.save(); // saves Garfield to the server\ncats.fetch(); // retrieves cats from the server and adds them\n```", "```js\nvar cats = new Backbone.Collection([ \n    {name: 'Garfield'},    {name: 'Heathcliff'}\n]);\ncats.each(function(cat) {\n    alert(cat.get('name'));\n}); // will alert \"Garfield\", then \"Heathcliff\"\n```", "```js\nvar warAndPeace = new Backbone.Model();\nvar books = new Backbone.Collection([warAndPeace]);\nbooks.contains(warAndPeace); // true\nbooks.isEmpty(); // false\n```", "```js\nvar books = new Backbone.Collection([\n    {pages: 120, title: \"Backbone Essentials 4: The Reckoning\"},\n    {pages: 20, title: \"Even More Ideas For Fake Book Titles\"}\n]);\nbooks.some(function(book)  {\n    return book.get('pages') > 100;\n}); // true\nbooks.every(function(book)  {\n    return book.get('pages') > 100;\n}); // false\n```", "```js\nvar books = new Backbone.Collection([\n    { \n        pages: 100,        title: \"Backbone Essentials 5: The Essentials Return\"\n    }, {\n        pages: 100,        title: \"Backbone Essentials 6: We're Not Done Yet?\"\n    },{\n        pages: 25,        title: \"Completely Fake Title\"\n    } \n]);\nvar hundredPageBooks = books.where({pages: 100});\n//  hundredPageBooks array of all of the books except Completely Fake Title\nvar firstHundredPageBook = books.findWhere({pages: 100});\nfirstHundredPageBook; // Backbone Essentials 5: The Essentials Return\n```", "```js\nvar books = new Backbone.Collection([\n    { \n        pages: 100,        title: \"Backbone Essentials 5: The Essentials Return\"\n    }, {\n        pages: 200,        title: \"Backbone Essentials 7: How Are We Not Done Yet?\"\n    }, {\n        pages: 25,        title: \"Completely Fake Title\"\n    }\n]);\nvar hundredPageOrMoreBooks = books.filter(function(book)  {\n    return book.get('pages') >= 100;\n});\nhundredPageOrMoreBooks; // again, this will be an array of all books but the last\nvar hundredPageOrMoreBooks = books.reject(function(book)  {\n    return book.get('pages') < 100;\n});\nhundredPageOrMoreBooks; // this will still be an array of all books but the last\n```", "```js\nvar books = new Backbone.Collection([\n    {title: \"Zebras Are Cool\"},\n    {title: \"Alligators Are Also Cool\"},\n    {title: \"Aardvarks!!\"}\n]);\nvar notAlphabeticalBooks = books.toArray();\nnotAlphabeticalBooks;// will contain Zebras, then Alligators, then  Aardvarks\nvar alphabeticalBooks = books.sortBy('title');\nalphabeticalBooks;// will contain Alligators, then Aardvarks, then Zebras\n```", "```js\nvar firstLetterGroupedBooks = books.groupBy(function(book) {\n    return book.get('title')[0];\n});\n// will be an array of [Alligators,  Aardvarks], [Zebras]\n```"]