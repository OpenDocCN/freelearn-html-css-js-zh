- en: Chapter 2. Ext JS-provided Plugins and Extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduces some of the very useful and popular plugins and extensions
    available in the Ext JS library.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: MultiSelect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ItemSelector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TreeViewDragDrop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CheckColumn
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CellEditing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RowEditing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LiveSearchGridPanel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The MultiSelect extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Ext.ux.form.MultiSelect` is a form field type which allows the selection of
    one or more items from a list. A list is populated using a data store. Items can
    be reordered via the drag-and-drop method, if the `ddReorder` property of this
    class is set to `true`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, in the following code, a form panel class has been defined, in which
    the `MultiSelect` extension has been used as an item of this form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can see in the preceding code that the `ddReorder` option is set to `true`
    in order to reorder the items by the drag-and-drop method. And also, by using
    the `getMultiSelectValue` function as the `change` event handler of the `multiselect`
    field, a message, with the selected value of the `multiselect` field, can be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, you can see the result of the `MultiSelectFormPanel`
    class that we have defined, which is used within a window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The MultiSelect extension](img/3725OS_2_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see that we can select multiple values, and as soon as we select the
    items in the list, the selected values of the multiselect field is shown as the
    message, the selected value of the `multiselect` field is shown as the message.
  prefs: []
  type: TYPE_NORMAL
- en: The available configuration options, properties, methods, and events for this
    extension is documented at [http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.ux.form.MultiSelect](http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.ux.form.MultiSelect).
  prefs: []
  type: TYPE_NORMAL
- en: The ItemSelector extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`ItemSelector` is a specialized `MultiSelect` field that renders as a pair
    with the `MultiSelect` field; one with the available options and the other with
    the selected options. A set of buttons in between, allows the items to be moved
    between the fields and reordered within the selection. Also, they can be moved
    via drag-and–drop method.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, in the following code, a form panel class is defined, in which we are
    using the `ItemSelector` extension as an item of this form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see in the following screenshot that the `ItemSelector` extension is
    a pair of `MultiSelect` field where one is loaded with data store:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The ItemSelector extension](img/3725OS_2_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can select the values from this available field and can move those values
    to the **Selected** field. We can use the arrow buttons or drag-and-drop, to move
    the values within those fields or reorder between those. If we use the `getValue`
    function of this `ItemSelector` extension, it will return the collection of values
    available at the **Selected** field.
  prefs: []
  type: TYPE_NORMAL
- en: The documentation for this extension is available at [http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.ux.form.ItemSelector](http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.ux.form.ItemSelector),
    where you will get all the available configuration options, properties, methods,
    and events for this extension.
  prefs: []
  type: TYPE_NORMAL
- en: The TreeViewDragDrop plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This plugin provides a drag and/or drop functionality for a `TreeView` class.
    It creates a specialized instance of `DragZone`, which knows how to drag out of
    a `TreeView` class, and loads the data object which is passed on to the cooperating
    methods of `DragZone` with the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '**copy**: `Boolean`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is the value of the `copy` property of `TreeView` or `true` if the `TreeView`
    class was configured with `allowCopy` set to `true` and the *Ctrl* key was pressed
    when the drag operation was begun.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**view**: `TreeView`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is the source `TreeView` from which the drag originated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**ddel**: `HtmlElement`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is the drag proxy element which moves with the mouse.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**item**: `HtmlElement`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is the `TreeView` node upon which the `mousedown` event was registered.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**records**: `Array`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is an array of models representing the selected data being dragged from the
    source `TreeView`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It also creates a specialized instance of `Ext.dd.DropZone`, which cooperates
    with other `DropZone` classes. These `DropZone` classes are members of the same
    `ddGroup`, which processes such data objects. Adding this plugin to a view means
    that two new events may be fired from the client `TreeView`, before the drag-and-drop.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note that the plugin must be added to the tree view, and not to the tree panel.
    For example, by using `viewConfig`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, in the following code snippet, a tree class has been defined, in which
    the `TreeViewDragDrop` plugin is used to drag-and-drop the nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following screenshot you can see the result of the `TreeViewDragDropTree`
    class that we have defined, which is used within a window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The TreeViewDragDrop plugin](img/3725OS_2_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see that when we are dragging the **09/29/2006** node, a visible floating
    message stating that one node is selected, is shown, and then we can easily drop
    that node within other nodes.
  prefs: []
  type: TYPE_NORMAL
- en: This plugin is well documented at [http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.tree.plugin.TreeViewDragDrop](http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.tree.plugin.TreeViewDragDrop),
    where you will get all the available configuration options, properties, methods,
    and events for this plugin.
  prefs: []
  type: TYPE_NORMAL
- en: The CheckColumn extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Ext.ux.CheckColumn` is an extension of `Ext.grid.column.Column` that renders
    a checkbox in each column cell. This checkbox toggles the truthiness of the associated
    data field on a click. In addition to toggling a Boolean value within the record
    data, this class adds or removes a CSS class `x-grid-checked`, on the `<td>` element
    based on whether or not it is checked to alter the background image used for a
    column.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here in the following code we are defining a grid class in which we are using
    the `CheckColumn` extension to provide a checkbox within each cell of a column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, in the following screenshot, you can see the result of the `CheckColumnGrid`
    class that we have defined which is used within a window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The CheckColumn extension](img/3725OS_2_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see the **Attending?** column, where the `CheckColumn` extension has
    generated the checkboxes that use the store values to determine whether the checkbox
    should be checked or not.
  prefs: []
  type: TYPE_NORMAL
- en: The available configuration options, properties, methods, and events for this
    extension is documented at [http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.ux.CheckColumn](http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.ux.CheckColumn).
  prefs: []
  type: TYPE_NORMAL
- en: The CellEditing plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Ext.grid.plugin.CellEditing` plugin injects editing at the cell level for
    a Grid. The `editor` field can be a field instance or a field configuration which
    needs to be provided within the `editor` configuration option within the `columns`
    definition. With the `CellEditing` plugin we can edit a cell at any time. If an
    editor is not specified for a particular column, that cell cannot be edited and
    it will be skipped when activated via the mouse or the keyboard.
  prefs: []
  type: TYPE_NORMAL
- en: When we configure a column to use an editor for cell editing, we should choose
    an appropriate field type to match the data type that this editor field will be
    editing. For example, to edit a date value in the cell, it would be useful to
    specify `Ext.form.field.Date` as the editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, in the following code we are defining a grid class in which we are using
    the `CellEditing` plugin to edit the cells:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You can see in the code that in the `columns` definition, the `editor` configuration
    has been provided with the `textfield` option to edit the **Name** cells and the
    `datefield` option to edit the **Birth date** cells. To support cell editing,
    it's specified that the grid should use the `cellmodel` option for `selType`,
    and create an instance of the `CellEditing` plugin. The plugin has been configured
    to activate each editor after a single click, by setting the `clicksToEdit` configuration
    option to `1`. The value can be set to 2 too, for the `clicksToEdit` option to
    activate the editor by double-click. There is another configuration option called
    `triggerEvent`, which also triggers the editing, and supercedes the `clicksToEdit`
    configuration option. The value for `triggerEvent` option can be set to `cellclick`,
    `celldblclick`, `cellfocus`, and `rowfocus.`
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, in the following screenshot you can see the result of the `CellEditingGrid`
    class that we have defined which is used within a window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The CellEditing plugin](img/3725OS_2_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see that a date field allows you to choose a date from a date picker
    as soon as the cell is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: This plugin is well documented at [http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.grid.plugin.CellEditing](http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.grid.plugin.CellEditing),
    where you will get all the available configuration options, properties, methods,
    and events for this plugin.
  prefs: []
  type: TYPE_NORMAL
- en: The RowEditing plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Ext.grid.plugin.RowEditing` plugin injects editing at the row level for
    a Grid. When editing begins, a small floating dialog will be shown for the appropriate
    row. Each editable column will show a field for editing. There is a button to
    save or cancel all changes for the edit. The `editor` field can be a field instance
    or a field configuration and we need to provide this within the `editor` configuration
    option within the column definition. If an editor is not specified for a particular
    column, the cell of that column will not be editable and the value of the cell
    will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: When we configure a column to use an editor for row editing, we should choose
    an appropriate field type to match the data type that this editor field will be
    editing. For example, to edit a date value in the cell, it would be useful to
    specify `Ext.form.field.Date` as the editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, in the following code we are defining a grid class in which we are using
    the `RowEditing` plugin to edit the row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You can see in the code that in the `columns` definition, the `editor` configuration
    has been provided with the `textfield` option to edit the **Name** cells and the
    `datefield` option to edit the **Birth date** cells. To support row editing, it's
    specified that the grid should use `rowmodel` as the value for the `selType` configuration.
    An instance of the `RowEditing` plugin has been created, which has been configured
    to activate each editor after a single click.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot you can see the result of the `RowEditing` grid
    class that we have defined which is used within a window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The RowEditing plugin](img/3725OS_2_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see that a floating dialog is showing just on top of the editing row
    with the provided editors including the **Update** and **Cancel** buttons.
  prefs: []
  type: TYPE_NORMAL
- en: The available configuration options, properties, methods, and events for this
    plug-in is documented at [http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.grid.plugin.RowEditing](http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.grid.plugin.RowEditing).
  prefs: []
  type: TYPE_NORMAL
- en: The LiveSearchGridPanel extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Ext.ux.LiveSearchGridPanel` is a `GridPanel` class that supports live search.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, in the following code, a grid panel class is defined by extending the
    `LiveSearchGridPanel` extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following screenshot you can see the result of the `LiveSearchGrid`
    class that we have defined, which is used within a window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The LiveSearchGridPanel extension](img/3725OS_2_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see that a grid panel with a **Search** input box, previous and next
    buttons, **Regular expression**, and **Case sensitive** options, and a status
    bar for proper messaging is generated. This extension, `GridPanel`, highlights
    the matched text and selects the first row of the matched text rows. Then we can
    also use the previous and next buttons to move the selection between those rows.
  prefs: []
  type: TYPE_NORMAL
- en: The documentation for this extension is available at [http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.ux.LiveSearchGridPanel](http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.ux.LiveSearchGridPanel),
    where all the available configuration options, properties, methods, and events
    for this extension is documented.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ext JS is really a rich library that provides several ready-to-use, useful extensions
    and plugins. In this chapter we went through some of those popular extensions
    and plugins, and learned how to use them.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we will go through hands-on development of an extension
    called Labeled Spinner by extending the `Ext.form.field.Spinner` class.
  prefs: []
  type: TYPE_NORMAL
