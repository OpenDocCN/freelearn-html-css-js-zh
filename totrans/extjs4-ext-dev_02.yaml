- en: Chapter 2. Ext JS-provided Plugins and Extensions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章. Ext JS 提供的插件和扩展
- en: This chapter introduces some of the very useful and popular plugins and extensions
    available in the Ext JS library.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了 Ext JS 库中一些非常有用且流行的插件和扩展。
- en: 'In this chapter we will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: MultiSelect
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MultiSelect
- en: ItemSelector
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ItemSelector
- en: TreeViewDragDrop
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TreeViewDragDrop
- en: CheckColumn
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CheckColumn
- en: CellEditing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CellEditing
- en: RowEditing
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RowEditing
- en: LiveSearchGridPanel
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LiveSearchGridPanel
- en: The MultiSelect extension
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: The MultiSelect extension
- en: '`Ext.ux.form.MultiSelect` is a form field type which allows the selection of
    one or more items from a list. A list is populated using a data store. Items can
    be reordered via the drag-and-drop method, if the `ddReorder` property of this
    class is set to `true`.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`Ext.ux.form.MultiSelect` 是一种表单字段类型，允许从列表中选择一个或多个项目。列表使用数据存储进行填充。如果此类的 `ddReorder`
    属性设置为 `true`，则可以通过拖放方法重新排序项目。'
- en: 'Here, in the following code, a form panel class has been defined, in which
    the `MultiSelect` extension has been used as an item of this form:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，定义了一个表单面板类，其中使用了 `MultiSelect` 扩展作为此表单的一项：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can see in the preceding code that the `ddReorder` option is set to `true`
    in order to reorder the items by the drag-and-drop method. And also, by using
    the `getMultiSelectValue` function as the `change` event handler of the `multiselect`
    field, a message, with the selected value of the `multiselect` field, can be displayed.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，您可以看到 `ddReorder` 选项设置为 `true` 以通过拖放方法重新排序项目。此外，通过使用 `getMultiSelectValue`
    函数作为 `multiselect` 字段的 `change` 事件处理程序，可以显示一个包含 `multiselect` 字段已选值的消息。
- en: 'In the following screenshot, you can see the result of the `MultiSelectFormPanel`
    class that we have defined, which is used within a window:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下屏幕截图中，您可以看到我们定义的 `MultiSelectFormPanel` 类的结果，该类用于窗口中：
- en: '![The MultiSelect extension](img/3725OS_2_5.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![The MultiSelect extension](img/3725OS_2_5.jpg)'
- en: You can see that we can select multiple values, and as soon as we select the
    items in the list, the selected values of the multiselect field is shown as the
    message, the selected value of the `multiselect` field is shown as the message.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到我们可以选择多个值，一旦我们在列表中选择项目，多选字段的已选值就会显示为消息，`multiselect` 字段的已选值也会显示为消息。
- en: The available configuration options, properties, methods, and events for this
    extension is documented at [http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.ux.form.MultiSelect](http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.ux.form.MultiSelect).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 该扩展的可用配置选项、属性、方法和事件在 [http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.ux.form.MultiSelect](http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.ux.form.MultiSelect)
    中有文档说明。
- en: The ItemSelector extension
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: The ItemSelector extension
- en: '`ItemSelector` is a specialized `MultiSelect` field that renders as a pair
    with the `MultiSelect` field; one with the available options and the other with
    the selected options. A set of buttons in between, allows the items to be moved
    between the fields and reordered within the selection. Also, they can be moved
    via drag-and–drop method.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`ItemSelector` 是一个专门的 `MultiSelect` 字段，它以一对的形式呈现，与 `MultiSelect` 字段一起；一个包含可用选项，另一个包含已选选项。中间有一组按钮，允许项目在字段之间移动并在选择中进行重新排序。此外，它们还可以通过拖放方法移动。'
- en: 'Here, in the following code, a form panel class is defined, in which we are
    using the `ItemSelector` extension as an item of this form:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，定义了一个表单面板类，其中我们使用 `ItemSelector` 扩展作为此表单的一项：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can see in the following screenshot that the `ItemSelector` extension is
    a pair of `MultiSelect` field where one is loaded with data store:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下屏幕截图中看到 `ItemSelector` 扩展是一对 `MultiSelect` 字段，其中一个加载了数据存储：
- en: '![The ItemSelector extension](img/3725OS_2_6.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![The ItemSelector extension](img/3725OS_2_6.jpg)'
- en: We can select the values from this available field and can move those values
    to the **Selected** field. We can use the arrow buttons or drag-and-drop, to move
    the values within those fields or reorder between those. If we use the `getValue`
    function of this `ItemSelector` extension, it will return the collection of values
    available at the **Selected** field.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从这个可用字段中选择值并将这些值移动到 **已选** 字段。我们可以使用箭头按钮或拖放来移动这些字段内的值或在这些字段之间进行重新排序。如果我们使用此
    `ItemSelector` 扩展的 `getValue` 函数，它将返回 **已选** 字段中可用的值集合。
- en: The documentation for this extension is available at [http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.ux.form.ItemSelector](http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.ux.form.ItemSelector),
    where you will get all the available configuration options, properties, methods,
    and events for this extension.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此扩展的文档可在 [http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.ux.form.ItemSelector](http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.ux.form.ItemSelector)
    上找到，在那里您可以获取此扩展的全部可用配置选项、属性、方法和事件。
- en: The TreeViewDragDrop plugin
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TreeViewDragDrop 插件
- en: 'This plugin provides a drag and/or drop functionality for a `TreeView` class.
    It creates a specialized instance of `DragZone`, which knows how to drag out of
    a `TreeView` class, and loads the data object which is passed on to the cooperating
    methods of `DragZone` with the following properties:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此插件为 `TreeView` 类提供了拖放功能。它创建了一个专门的 `DragZone` 实例，该实例知道如何从 `TreeView` 类中拖动，并加载传递给
    `DragZone` 协作方法的数据对象，具有以下属性：
- en: '**copy**: `Boolean`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复制**: `布尔值`'
- en: It is the value of the `copy` property of `TreeView` or `true` if the `TreeView`
    class was configured with `allowCopy` set to `true` and the *Ctrl* key was pressed
    when the drag operation was begun.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它是 `TreeView` 的 `copy` 属性的值，或者如果 `TreeView` 类配置了 `allowCopy` 设置为 `true` 并且在拖动操作开始时按下了
    *Ctrl* 键，则为 `true`。
- en: '**view**: `TreeView`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**: `TreeView`'
- en: It is the source `TreeView` from which the drag originated.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它是拖动操作的源 `TreeView`。
- en: '**ddel**: `HtmlElement`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ddel**: `HtmlElement`'
- en: It is the drag proxy element which moves with the mouse.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它是随着鼠标移动的拖动代理元素。
- en: '**item**: `HtmlElement`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**item**: `HtmlElement`'
- en: It is the `TreeView` node upon which the `mousedown` event was registered.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它是注册了 `mousedown` 事件的 `TreeView` 节点。
- en: '**records**: `Array`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**记录**: `数组`'
- en: It is an array of models representing the selected data being dragged from the
    source `TreeView`.
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它是一个表示从源 `TreeView` 拖动的选中数据的模型数组。
- en: It also creates a specialized instance of `Ext.dd.DropZone`, which cooperates
    with other `DropZone` classes. These `DropZone` classes are members of the same
    `ddGroup`, which processes such data objects. Adding this plugin to a view means
    that two new events may be fired from the client `TreeView`, before the drag-and-drop.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 它还创建了一个专门的 `Ext.dd.DropZone` 实例，与其他 `DropZone` 类协作。这些 `DropZone` 类是同一 `ddGroup`
    的成员，处理这些数据对象。将此插件添加到视图中意味着在拖放之前，客户端 `TreeView` 可能会触发两个新事件。
- en: Note
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Note that the plugin must be added to the tree view, and not to the tree panel.
    For example, by using `viewConfig`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，插件必须添加到树视图中，而不是树面板中。例如，通过使用 `viewConfig`：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here, in the following code snippet, a tree class has been defined, in which
    the `TreeViewDragDrop` plugin is used to drag-and-drop the nodes:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码片段中，定义了一个树类，其中使用了 `TreeViewDragDrop` 插件来实现节点拖放：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the following screenshot you can see the result of the `TreeViewDragDropTree`
    class that we have defined, which is used within a window:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，您可以查看我们定义的 `TreeViewDragDropTree` 类的结果，该类用于窗口中：
- en: '![The TreeViewDragDrop plugin](img/3725OS_2_3.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![TreeViewDragDrop 插件](img/3725OS_2_3.jpg)'
- en: You can see that when we are dragging the **09/29/2006** node, a visible floating
    message stating that one node is selected, is shown, and then we can easily drop
    that node within other nodes.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，当我们拖动 **09/29/2006** 节点时，会显示一个可见的浮动消息，表明已选择一个节点，然后我们可以轻松地将该节点拖放到其他节点中。
- en: This plugin is well documented at [http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.tree.plugin.TreeViewDragDrop](http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.tree.plugin.TreeViewDragDrop),
    where you will get all the available configuration options, properties, methods,
    and events for this plugin.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此插件在 [http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.tree.plugin.TreeViewDragDrop](http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.tree.plugin.TreeViewDragDrop)
    上有很好的文档，在那里您可以获取此插件的全部可用配置选项、属性、方法和事件。
- en: The CheckColumn extension
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CheckColumn 扩展
- en: '`Ext.ux.CheckColumn` is an extension of `Ext.grid.column.Column` that renders
    a checkbox in each column cell. This checkbox toggles the truthiness of the associated
    data field on a click. In addition to toggling a Boolean value within the record
    data, this class adds or removes a CSS class `x-grid-checked`, on the `<td>` element
    based on whether or not it is checked to alter the background image used for a
    column.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`Ext.ux.CheckColumn` 是 `Ext.grid.column.Column` 的一个扩展，它会在每个列单元格中渲染一个复选框。这个复选框在点击时切换关联数据字段的真值。除了在记录数据中切换布尔值之外，这个类还会根据是否选中在
    `<td>` 元素上添加或移除 CSS 类 `x-grid-checked`，以改变用于列的背景图像。'
- en: 'Here in the following code we are defining a grid class in which we are using
    the `CheckColumn` extension to provide a checkbox within each cell of a column:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，我们定义了一个网格类，在其中我们使用`CheckColumn`扩展为列中的每个单元格提供复选框：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here, in the following screenshot, you can see the result of the `CheckColumnGrid`
    class that we have defined which is used within a window:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，您可以查看我们定义的`CheckColumnGrid`类所得到的结果，该类在窗口中使用：
- en: '![The CheckColumn extension](img/3725OS_2_4.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![The CheckColumn extension](img/3725OS_2_4.jpg)'
- en: You can see the **Attending?** column, where the `CheckColumn` extension has
    generated the checkboxes that use the store values to determine whether the checkbox
    should be checked or not.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到**参加？**列，其中`CheckColumn`扩展生成了复选框，这些复选框使用存储值来确定复选框是否应该被选中。
- en: The available configuration options, properties, methods, and events for this
    extension is documented at [http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.ux.CheckColumn](http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.ux.CheckColumn).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 该扩展的可用配置选项、属性、方法和事件在[http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.ux.CheckColumn](http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.ux.CheckColumn)中有文档说明。
- en: The CellEditing plugin
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`CellEditing`插件'
- en: The `Ext.grid.plugin.CellEditing` plugin injects editing at the cell level for
    a Grid. The `editor` field can be a field instance or a field configuration which
    needs to be provided within the `editor` configuration option within the `columns`
    definition. With the `CellEditing` plugin we can edit a cell at any time. If an
    editor is not specified for a particular column, that cell cannot be edited and
    it will be skipped when activated via the mouse or the keyboard.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`Ext.grid.plugin.CellEditing`插件在网格的单元格级别注入编辑功能。`editor`字段可以是一个字段实例或一个需要提供在`columns`定义中的`editor`配置选项内的字段配置。使用`CellEditing`插件，我们可以在任何时间编辑单元格。如果未为特定列指定编辑器，则该单元格不能被编辑，并且当通过鼠标或键盘激活时将被跳过。'
- en: When we configure a column to use an editor for cell editing, we should choose
    an appropriate field type to match the data type that this editor field will be
    editing. For example, to edit a date value in the cell, it would be useful to
    specify `Ext.form.field.Date` as the editor.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们配置列使用编辑器进行单元格编辑时，我们应该选择一个合适的字段类型来匹配此编辑器字段将要编辑的数据类型。例如，要编辑单元格中的日期值，指定`Ext.form.field.Date`作为编辑器将是有用的。
- en: 'Here, in the following code we are defining a grid class in which we are using
    the `CellEditing` plugin to edit the cells:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，我们定义了一个网格类，在其中我们使用`CellEditing`插件来编辑单元格：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can see in the code that in the `columns` definition, the `editor` configuration
    has been provided with the `textfield` option to edit the **Name** cells and the
    `datefield` option to edit the **Birth date** cells. To support cell editing,
    it's specified that the grid should use the `cellmodel` option for `selType`,
    and create an instance of the `CellEditing` plugin. The plugin has been configured
    to activate each editor after a single click, by setting the `clicksToEdit` configuration
    option to `1`. The value can be set to 2 too, for the `clicksToEdit` option to
    activate the editor by double-click. There is another configuration option called
    `triggerEvent`, which also triggers the editing, and supercedes the `clicksToEdit`
    configuration option. The value for `triggerEvent` option can be set to `cellclick`,
    `celldblclick`, `cellfocus`, and `rowfocus.`
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在代码中看到，在`columns`定义中，`editor`配置已经提供了`textfield`选项来编辑**名称**单元格，以及`datefield`选项来编辑**出生日期**单元格。为了支持单元格编辑，指定网格应使用`cellmodel`选项的`selType`，并创建一个`CellEditing`插件的实例。该插件已被配置为通过设置`clicksToEdit`配置选项为`1`，在单次点击后激活每个编辑器。该值也可以设置为`2`，以便通过双击激活编辑器。还有一个名为`triggerEvent`的配置选项，它也会触发编辑，并覆盖`clicksToEdit`配置选项。`triggerEvent`选项的值可以设置为`cellclick`、`celldblclick`、`cellfocus`和`rowfocus`。
- en: 'Here, in the following screenshot you can see the result of the `CellEditingGrid`
    class that we have defined which is used within a window:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，您可以查看我们定义的`CellEditingGrid`类所得到的结果，该类在窗口中使用：
- en: '![The CellEditing plugin](img/3725OS_2_1.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![The CellEditing plugin](img/3725OS_2_1.jpg)'
- en: You can see that a date field allows you to choose a date from a date picker
    as soon as the cell is clicked.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，日期字段允许您在单元格被点击后立即从日期选择器中选择一个日期。
- en: This plugin is well documented at [http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.grid.plugin.CellEditing](http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.grid.plugin.CellEditing),
    where you will get all the available configuration options, properties, methods,
    and events for this plugin.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 该插件在 [http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.grid.plugin.CellEditing](http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.grid.plugin.CellEditing)
    中有很好的文档，在那里你可以获取该插件的所有可配置选项、属性、方法和事件。
- en: The RowEditing plugin
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RowEditing 插件
- en: The `Ext.grid.plugin.RowEditing` plugin injects editing at the row level for
    a Grid. When editing begins, a small floating dialog will be shown for the appropriate
    row. Each editable column will show a field for editing. There is a button to
    save or cancel all changes for the edit. The `editor` field can be a field instance
    or a field configuration and we need to provide this within the `editor` configuration
    option within the column definition. If an editor is not specified for a particular
    column, the cell of that column will not be editable and the value of the cell
    will be displayed.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`Ext.grid.plugin.RowEditing` 插件在 Grid 的行级别注入编辑功能。当开始编辑时，将显示一个小浮动对话框，用于适当的行。每个可编辑列将显示一个用于编辑的字段。有一个按钮可以保存或取消所有编辑更改。`editor`
    字段可以是字段实例或字段配置，我们需要在列定义中的 `editor` 配置选项中提供它。如果未为特定列指定编辑器，则该列的单元格将不可编辑，单元格的值将显示。'
- en: When we configure a column to use an editor for row editing, we should choose
    an appropriate field type to match the data type that this editor field will be
    editing. For example, to edit a date value in the cell, it would be useful to
    specify `Ext.form.field.Date` as the editor.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们配置一个列以使用行编辑的编辑器时，我们应该选择一个合适的字段类型来匹配该编辑器字段将要编辑的数据类型。例如，要编辑单元格中的日期值，指定 `Ext.form.field.Date`
    作为编辑器会很有用。
- en: 'Here, in the following code we are defining a grid class in which we are using
    the `RowEditing` plugin to edit the row:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，我们正在定义一个网格类，在其中我们使用 `RowEditing` 插件来编辑行：
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can see in the code that in the `columns` definition, the `editor` configuration
    has been provided with the `textfield` option to edit the **Name** cells and the
    `datefield` option to edit the **Birth date** cells. To support row editing, it's
    specified that the grid should use `rowmodel` as the value for the `selType` configuration.
    An instance of the `RowEditing` plugin has been created, which has been configured
    to activate each editor after a single click.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中可以看到，在 `columns` 定义中，已经提供了 `editor` 配置，使用 `textfield` 选项编辑**名称**单元格，使用 `datefield`
    选项编辑**出生日期**单元格。为了支持行编辑，指定网格应使用 `rowmodel` 作为 `selType` 配置的值。已创建 `RowEditing`
    插件的实例，并将其配置为在单击一次后激活每个编辑器。
- en: 'In the following screenshot you can see the result of the `RowEditing` grid
    class that we have defined which is used within a window:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，你可以看到我们定义的 `RowEditing` 网格类在窗口中的结果：
- en: '![The RowEditing plugin](img/3725OS_2_2.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![RowEditing 插件](img/3725OS_2_2.jpg)'
- en: You can see that a floating dialog is showing just on top of the editing row
    with the provided editors including the **Update** and **Cancel** buttons.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，一个浮动对话框正好显示在编辑行上方，其中包含提供的编辑器，包括**更新**和**取消**按钮。
- en: The available configuration options, properties, methods, and events for this
    plug-in is documented at [http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.grid.plugin.RowEditing](http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.grid.plugin.RowEditing).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 该插件的可配置选项、属性、方法和事件文档位于 [http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.grid.plugin.RowEditing](http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.grid.plugin.RowEditing)。
- en: The LiveSearchGridPanel extension
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LiveSearchGridPanel 扩展
- en: '`Ext.ux.LiveSearchGridPanel` is a `GridPanel` class that supports live search.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`Ext.ux.LiveSearchGridPanel` 是一个支持实时搜索的 `GridPanel` 类。'
- en: 'Here, in the following code, a grid panel class is defined by extending the
    `LiveSearchGridPanel` extension:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，通过扩展 `LiveSearchGridPanel` 扩展定义了一个网格面板类：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the following screenshot you can see the result of the `LiveSearchGrid`
    class that we have defined, which is used within a window:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，你可以看到我们定义的 `LiveSearchGrid` 类的结果，该类在窗口中使用：
- en: '![The LiveSearchGridPanel extension](img/3725OS_2_7.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![LiveSearchGridPanel 扩展](img/3725OS_2_7.jpg)'
- en: You can see that a grid panel with a **Search** input box, previous and next
    buttons, **Regular expression**, and **Case sensitive** options, and a status
    bar for proper messaging is generated. This extension, `GridPanel`, highlights
    the matched text and selects the first row of the matched text rows. Then we can
    also use the previous and next buttons to move the selection between those rows.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，生成了一个带有**搜索**输入框、上一页和下一页按钮、**正则表达式**和**大小写敏感**选项的网格面板，以及用于适当消息的状态栏。此扩展`GridPanel`突出显示匹配文本并选择匹配文本行的第一行。然后我们还可以使用上一页和下一页按钮在这些行之间移动选择。
- en: The documentation for this extension is available at [http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.ux.LiveSearchGridPanel](http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.ux.LiveSearchGridPanel),
    where all the available configuration options, properties, methods, and events
    for this extension is documented.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 该扩展的文档可在[http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.ux.LiveSearchGridPanel](http://docs.sencha.com/extjs/4.1.3/#!/api/Ext.ux.LiveSearchGridPanel)找到，其中详细记录了该扩展的所有可用配置选项、属性、方法和事件。
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Ext JS is really a rich library that provides several ready-to-use, useful extensions
    and plugins. In this chapter we went through some of those popular extensions
    and plugins, and learned how to use them.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Ext JS 确实是一个功能丰富的库，提供了多个现成且实用的扩展和插件。在本章中，我们介绍了一些流行的扩展和插件，并学习了如何使用它们。
- en: In the next chapter we will go through hands-on development of an extension
    called Labeled Spinner by extending the `Ext.form.field.Spinner` class.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过扩展`Ext.form.field.Spinner`类来实际开发一个名为Labeled Spinner的扩展。
