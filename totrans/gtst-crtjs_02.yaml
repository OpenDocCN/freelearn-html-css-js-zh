- en: Chapter 2. Commencing with CreateJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to talk about working with basic objects and events
    in CreateJS and EaselJS. After learning about these topics, you can work with
    basic methods and functions in CreateJS to create your shapes, and control them
    using events.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring CreateJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Methods and events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring CreateJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'EaselJS is one of the main CreateJS modules, which enable developers to work
    with Canvas elements. To work with EaselJS, we need to have a `canvas` element,
    so all shapes can be rendered into this area. After creating an instance of `Stage`
    class, we need to add `displayObject` to the `Stage` class. EaselJS supports the
    following features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bitmap**: This is used for the images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shape** and **Graphics**: These are used for the vector graphics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SpriteSheet** and **Sprite**: These are used for the animated Bitmaps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text**: This is used for the simple text instances.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Container**: These hold other DisplayObjects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DOMElement**: This is used to control the HTML DOM elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the `Stage` object wraps the `canvas` element, all shapes and text appear
    in the `Canvas` element.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more details, check the EaselJS documentation at [http://www.createjs.com/Docs/EaselJS/modules/EaselJS.html](http://www.createjs.com/Docs/EaselJS/modules/EaselJS.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go through an example of creating a basic shape in EaselJS. Here, we
    have a `canvas` element with a specific height and width:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'CreateJS has a `Stage` method, which accepts a `canvas` element in the first
    parameter, and we should pass the ID of our canvas element to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We now have a stage for our canvas element. In the next step, we need to create
    a shape:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: In the first line, a `circle` variable is created. It contains the `Shape` object
    from EaselJS. All `Shape` objects have a `graphics` property.
  prefs: []
  type: TYPE_NORMAL
- en: In the next line, we fill it with the color red using the `beginFill` method,
    and then in the line after that, we create a circle with the `drawCircle` method.
    The `drawCircle` method has three parameters; the first two parameters are used
    for positioning the circle (x and y axis values) and the last parameter is the
    radius in pixels. Thus, we have created a circle with position `0` (relative to
    the shape's position) and radius `50`.
  prefs: []
  type: TYPE_NORMAL
- en: EaselJS supports method chaining, we can call all functions one after another,
    just as we have seen in our previous example of creating the circle and filling
    in the background color.
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating the `Shape` object, we need to add it to our `stage` object
    and also update the stage as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Keep in mind that after adding `child` (`shape`, `circle`, and so on), we have
    to call the `update` method from the `stage` object to update the stage; otherwise,
    the code will not run properly and we will not get the desired result. You can
    see the result of our simple code in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring CreateJS](img/0260OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Working with events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`DisplayObject` has a method to add events to shapes or objects. Using `addEventListener`,
    we can add an event to `DisplayObject` (for example, `shape`). This function has
    two mandatory arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The callback function for the event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will understand this method of working with events with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the first line, a click event is added to `displayObject` so that the `handleClick`
    function is called when the user clicks on the object. The `handleClick` function
    is empty in this example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider our earlier example of the circle and add a click event to
    our circle. Inside the callback function of the click event, we move the circle
    10 pixels to right. Here is the code for that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the first line, we have our DisplayObject. Using `addEventListener`, the
    click event is added to the circle. Our callback handler is `handleClick`. Inside
    this function, we can get target objects (the circle shape, in this example) and
    change properties of the shape (for example, width, height, or position) via the
    `event` variable.
  prefs: []
  type: TYPE_NORMAL
- en: '`event.target` is the target shape object. In every callback function call,
    we add the x property with 10 and then call the `update` function from the `stage`
    object. We have to call the update function after changing properties in order
    to apply changes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that to add events to `DisplayObject`, we need to add an event listener
    first and then add displayObject to the stage. Here is the complete source code
    for our example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: EaselJS has many more events, and you can use all of them in the same example
    explained previously.
  prefs: []
  type: TYPE_NORMAL
- en: 'Currently DisplayObjects supports the following events:'
  prefs: []
  type: TYPE_NORMAL
- en: '`click`: The user clicks and releases the mouse'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dblclick`: The user double-clicks the mouse'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mousedown`: The user clicks the mouse'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mouseout`: The user moves the mouse pointer away from an object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mouseover`: The user moves the mouse pointer over an object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pressmove`: The user clicks the mouse and then moves it'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pressup`: The user releases the mouse either over or outside the object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rollout`: The user rolls away from a child element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rollover`: The user rolls over a child element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more details, refer to [http://www.createjs.com/Docs/EaselJS/classes/DisplayObject.html#events](http://www.createjs.com/Docs/EaselJS/classes/DisplayObject.html#events).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to work with the basic functions and events
    of CreateJS and EaselJS. We have learned how to create a stage object in EaselJS,
    what `DisplayObject` is, and how to append them to the `stage` object.
  prefs: []
  type: TYPE_NORMAL
- en: We also created the first simple shape in EaselJS, a circle. In the last part
    of the chapter, we discussed how to add an event listener to an object in EaselJS.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to go through complex examples to create a
    drag-and-drop interaction and use mouse events in EaselJS.
  prefs: []
  type: TYPE_NORMAL
