["```js\nwhile loop:\n```", "```js\nwhile (condition) {\n  // code that gets executed as long as the condition is true\n} \n```", "```js\nlet i = 0;\nwhile (i < 10) {\n  console.log(i);\n  i++;\n} \n```", "```js\n1\n2\n3\n4\n5\n6\n7\n8\n9 \n```", "```js\nlet someArray = [\"Mike\", \"Antal\", \"Marc\", \"Emir\", \"Louiza\", \"Jacky\"];\nlet notFound = true;\nwhile (notFound && someArray.length > 0) {\n  if (someArray[0] === \"Louiza\") {\n    console.log(\"Found her!\");\n    notFound = false;\n  } else {\n    someArray.shift();\n  }\n} \n```", "```js\nFound her!\nfalse \n```", "```js\nlet nr1 = 0;\nlet nr2 = 1;\nlet temp;\nfibonacciArray = [];\nwhile (fibonacciArray.length < 25) {\n  fibonacciArray.push(nr1);\n  temp = nr1 + nr2;\n  nr1 = nr2;\n  nr2 = temp;  \n} \n```", "```js\n[\n     0,     1,     1,     2,     3,\n     5,     8,    13,    21,    34,\n    55,    89,   144,   233,   377,\n   610,   987,  1597,  2584,  4181,\n  6765, 10946, 17711, 28657, 46368\n] \n```", "```js\ndo {\n  // code to be executed if the condition is true\n} while (condition); \n```", "```js\nlet number;\ndo {\n  number = prompt(\"Please enter a number between 0 and 100: \");\n} while (!(number >= 0 && number < 100)); \n```", "```js\nPlease enter a number between 0 and 100: > -50\nPlease enter a number between 0 and 100: > 150\nPlease enter a number between 0 and 100: > 34 \n```", "```js\nfor (initialize variable; condition; statement) { \n  // code to be executed\n} \n```", "```js\nfor (let i = 0; i < 10; i++) {\n  console.log(i);\n} \n```", "```js\nlet arr = [];\nfor (let i = 0; i < 100; i++) {\n  arr.push(i);\n} \n```", "```js\n[\n   0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11,\n  12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n  24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n  36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n  48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n  60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,\n  72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n  84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,\n  96, 97, 98, 99\n] \n```", "```js\nlet arr = [];\nfor (let i = 0; i < 100; i = i + 2) {\n  arr.push(i);\n} \n```", "```js\n[\n   0,  2,  4,  6,  8, 10, 12, 14, 16, 18, 20,\n  22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42,\n  44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64,\n  66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86,\n  88, 90, 92, 94, 96, 98\n] \n```", "```js\n    name: 'Lesson 1', status: true \n    ```", "```js\nwhile (condition 1) {\n  // code that gets executed as long as condition 1 is true\n  // this loop depends on condition 1 being true\n    while (condition 2) {\n      // code that gets executed as long as condition 2 is true\n    }\n} \n```", "```js\nlet arrOfArrays = [];\nfor (let i = 0; i < 3; i++){\n  arrOfArrays.push([]);\n  for (let j = 0; j < 7; j++) {\n    arrOfArrays[i].push(j);\n  }\n} \n```", "```js\nconsole.log(arrOfArrays); \n```", "```js\n[\n  [\n    0, 1, 2, 3, 4, 5, 6\n  ],\n  [\n    0, 1, 2, 3, 4, 5, 6\n  ],\n  [\n    0, 1, 2, 3, 4, 5, 6\n  ]\n] \n```", "```js\nconsole.table(arrOfArrays); \n```", "```js\n┌─────────┬───┬───┬───┬───┬───┬───┬───┐\n│ (index) │ 0 │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │\n├─────────┼───┼───┼───┼───┼───┼───┼───┤\n│    0    │ 0 │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │\n│    1    │ 0 │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │\n│    2    │ 0 │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │\n└─────────┴───┴───┴───┴───┴───┴───┴───┘ \n```", "```js\nlet arr = [some array];\nfor (initialize variable; variable smaller than arr.length; statement) {\n  // code to be executed\n} \n```", "```js\nlet names = [\"Chantal\", \"John\", \"Maxime\", \"Bobbi\", \"Jair\"];\nfor (let i = 0; i < names.length; i ++){\n  console.log(names[i]);\n} \n```", "```js\nChantal\nJohn\nMaxime\nBobbi\nJair \n```", "```js\nlet names = [\"Chantal\", \"John\", \"Maxime\", \"Bobbi\", \"Jair\"];\nfor (let i = 0; i < names.length; i ++){\n  names[i] = \"hello \" + names[i];\n} \n```", "```js\n[\n  'hello Chantal',\n  'hello John',\n  'hello Maxime',\n  'hello Bobbi',\n  'hello Jair'\n] \n```", "```js\nlet names = [\"Chantal\", \"John\", \"Maxime\", \"Bobbi\", \"Jair\"]; \nfor (let i = 0; i < names.length; i ++){ \n  if(names[i].startsWith(\"M\")){\n    delete names[i];\n    continue;\n  }\n  names[i] = \"hello \" + names[i]; \n} \nconsole.log(names); \n```", "```js\n[\n  'hello Chantal',\n  'hello John',\n  <1 empty item>,\n  'hello Bobbi',\n  'hello Jair'\n] \n```", "```js\nlet names = [\"Chantal\", \"John\", \"Maxime\", \"Bobbi\", \"Jair\"]; \nfor (let i = 0; i < names.length; i++){ \n  names.push(\"...\")\n} \n```", "```js\nlet arr = [some array];\nfor (let variableName of arr) {\n  // code to be executed\n  // value of variableName gets updated every iteration\n  // all values of the array will be variableName once\n} \n```", "```js\nlet names = [\"Chantal\", \"John\", \"Maxime\", \"Bobbi\", \"Jair\"];\nfor (let name of names){\n  console.log(name);\n} \n```", "```js\nChantal\nJohn\nMaxime\nBobbi\nJair \n```", "```js\nlet car = {\n  model: \"Golf\",\n  make: \"Volkswagen\",\n  year: 1999,\n  color: \"black\",\n};\nfor (let prop in car){\n  console.log(car[prop]);\n} \n```", "```js\nGolf\nVolkswagen\n1999\nblack \n```", "```js\nfor (let prop in car){\n  console.log(prop);\n} \n```", "```js\nmodel\nmake\nyear\ncolor \n```", "```js\nlet car = {\n  model: \"Golf\",\n  make: \"Volkswagen\",\n  year: 1999,\n  color: \"black\",\n}; \n```", "```js\nlet arrKeys = Object.keys(car);\nconsole.log(arrKeys); \n```", "```js\n[ 'model', 'make', 'year', 'color' ] \n```", "```js\nfor(let key of Object.keys(car)) {\n  console.log(key);\n} \n```", "```js\nmodel\nmake\nyear\ncolor \n```", "```js\nfor(let key of Object.values(car)) {\n  console.log(key);\n} \n```", "```js\nlet arrKeys = Object.keys(car);\nfor(let i = 0; i < arrKeys.length; i++) {\n  console.log(arrKeys[i] + \": \" + car[arrKeys[i]]);\n} \n```", "```js\nmodel: Golf\nmake: Volkswagen\nyear: 1999\ncolor: black \n```", "```js\nlet arrEntries = Object.entries(car);\nconsole.log(arrEntries); \n```", "```js\n[\n  [ 'model', 'Golf' ],\n  [ 'make', 'Volkswagen' ],\n  [ 'year', 1999 ],\n  [ 'color', 'black' ]\n] \n```", "```js\nfor (const [key, value] of Object.entries(car)) {\n  console.log(key, \":\", value);\n} \n```", "```js\nmodel : Golf\nmake : Volkswagen\nyear : 1999\ncolor : black \n```", "```js\nlet cars = [\n  {\n    model: \"Golf\",\n    make: \"Volkswagen\",\n    year: 1999,\n    color: \"black\",\n  },\n  {\n    model: \"Picanto\",\n    make: \"Kia\",\n    year: 2020,\n    color: \"red\",\n  },\n  {\n    model: \"Peugeot\",\n    make: \"208\",\n    year: 2021,\n    color: \"black\",\n  },\n  {\n    model: \"Fiat\",\n    make: \"Punto\",\n    year: 2020,\n    color: \"black\",\n  }\n]; \n```", "```js\nfor (let i = 0; i < 10; i++) {\n  console.log(i);\n  if (i === 4) {\n    break;\n  }\n} \n```", "```js\nfor (let i = 0; i < cars.length; i++) {\n  if (cars[i].year >= 2020) {\n    if (cars[i].color === \"black\") {\n      console.log(\"I have found my new car:\", cars[i]);\n      break;\n    }\n  }\n} \n```", "```js\nI have found my new car: { model: 'Peugeot', make: '208', year: 2021, color: 'black' } \n```", "```js\nwhile (true) {\n  if (superLongArray[0] != 42 && superLongArray.length > 0) {\n    superLongArray.shift();\n  } else {\n    console.log(\"Found 42!\");\n    break;\n  }\n} \n```", "```js\nwhile (superLongArray.length > 0 && notFound) {\n  if (superLongArray[0] != 42) {\n    superLongArray.shift();\n  } else {\n    console.log(\"Found 42!\");\n    notFound = false;\n  }\n} \n```", "```js\nfor (let car of cars){\n  if(car.color !== \"black\"){\n    continue;\n  }\n  if (car.year >= 2020) {\n    console.log(\"we could get this one:\", car);\n  }\n} \n```", "```js\nwe could get this one: { model: 'Peugeot', make: '208', year: 2021, color: 'black' }\nwe could get this one: { model: 'Fiat', make: 'Punto', year: 2020, color: 'black' } \n```", "```js\n// let's only log the odd numbers to the console\nlet i = 1;\nwhile (i < 50) {\n  if (i % 2 === 0){\n    continue;\n  }\n  console.log(i);\n  i++;\n} \n```", "```js\nlet i = 1;\nwhile (i < 50) {\n  i++;\n  if ((i-1) % 2 === 0){\n    continue;\n  }\n  console.log(i-1);\n} \n```", "```js\nfor (let i = 1; i < 50; i = i + 2) {\n  console.log(i);\n} \n```", "```js\nlet groups = [\n  [\"Martin\", \"Daniel\", \"Keith\"],\n  [\"Margot\", \"Marina\", \"Ali\"],\n  [\"Helen\", \"Jonah\", \"Sambikos\"],\n]; \n```", "```js\nfor (let i = 0; i < groups.length; i++) {\n  let matches = 0;\nfor (let j = 0; j < groups[i].length; j++) {\n  if(groups[i][j].startsWith(\"M\")){\n      matches++;\n    } else {\n      continue;\n    }\n  if (matches === 2){\n      console.log(\"Found a group with two names starting with an M:\");\n      console.log(groups[i]);\n      break;\n    }\n  }\n} \n```", "```js\nfor (let group of groups){\n  for (let member of group){\n    if (member.startsWith(\"M\")){\n      console.log(\"found one starting with M:\", member);\n      break;\n    }\n  }\n} \n```", "```js\nfound one starting with M: Martin\nfound one starting with M: Margot \n```", "```js\ndata set contains at least one of something. Because of the nature of the for of loop, it won't give the index or place where it found it. It will simply break, and you have the value of the element of the array to use. If you need to know more, you can work with counters, which are updated every iteration.\n```", "```js\nouter:\nfor (let group of groups) {\n  inner:\n  for (let member of group) {\n    if (member.startsWith(\"M\")) {\n      console.log(\"found one starting with M:\", member);\n      break outer;\n    }\n  }\n} \n```", "```js\nfound one starting with M: Martin \n```", "```js\n    let step = 3;\n\n    for (let i = 0; i < 1000; i += step) {\n        if (i > 10) {\n            break;\n        }\n        console.log(i);\n    } \n    ```", "```js\n    const myArray = [1,5,7];\n    for(el in myArray){\n        console.log(Number(el));\n        el = Number(el) + 5;\n        console.log(el);\n    }\n    console.log(myArray); \n    ```"]