- en: Chapter 2. Essentials of Automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 1](ch01.html "Chapter 1. Automation Life Cycle and Automation Goals"),
    *Automation Life Cycle and Automation Goals*, we learned about the test automation
    life cycle and automation goals. The basic features of the test automation are
    record and replay. These features allow the user to play scripts many times and
    compare expected values with actual values. This approach is simple and requires
    little or no knowledge of coding and can be applied to any supported application
    that has a graphical user interface. One should be familiar with basic QTP features,
    such as recording, replay, OR (Object Repository) creation, checkpoints, synchronization,
    actions, reporting, error handling, parameterization, and configuration. One should
    also know how to use environment variables to make the script complete and reusable.
    This chapter deals with recording or creating the test scripts, script creation
    life cycle, QTP features, and various ways of using these features to make complete
    reusable scripts. The intent of this chapter is not to gain in-depth knowledge
    but to get familiarized with these features for script creation and its enhancement.
  prefs: []
  type: TYPE_NORMAL
- en: About QTP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HP **QuickTest Professional** (**QTP** or QuickTest) or **Unified Functional
    Tester** (**UFT**) is the test automation tool for functional and regression test
    case automation. HP QuickTest Professional supports keyword view and scripting
    interfaces to automate the test. It uses VBScript as a scripting language to specify
    test scripts and working with the objects and controls in the application under
    test.
  prefs: []
  type: TYPE_NORMAL
- en: QTP is a tool that provides support for automated software testing and framework
    creation. The basic components that support QTP in recording and replay mechanism
    are test object model, test object, and object repository. The knowledge and understanding
    of these components is helpful in creating scripts.
  prefs: []
  type: TYPE_NORMAL
- en: The QuickTest object model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The test object model is a collection of objects and classes, which represents
    the objects in AUT. Each class has a set of properties for its identification;
    QTP uses a subset of the properties to identify the object uniquely at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Test script is a combination of standard VBScript statements and statements
    that use QuickTest test objects, methods, and properties. The QuickTest object
    model contains one section for each add-in environment available with the QTP
    installation, as well as a special section for utility and supplemental objects.
  prefs: []
  type: TYPE_NORMAL
- en: Test objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: QTP uses a test object to represent an object in AUT. Each test object has one
    or more methods and properties that are used to perform operations and retrieve
    values for that object. Each test object has a number of identification properties
    that describe the object.
  prefs: []
  type: TYPE_NORMAL
- en: Object identification properties can be used in the object repository description,
    programmatic descriptions, checkpoints, output values, test steps, and passed
    as argument values for `GetTOProperty` and `GetROProperty` methods. A runtime
    object is the actual object in AUT on which methods are performed during the run
    session.
  prefs: []
  type: TYPE_NORMAL
- en: Object repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Set up the resources before the test is created. One of the most important
    resources for any test is object repository, which stores the test objects (and
    other object types) used in your test. QuickTest can store the test objects it
    learns in two types of object repository files: shared and local.'
  prefs: []
  type: TYPE_NORMAL
- en: A **shared object repository** contains test objects that can be used across
    multiple actions.
  prefs: []
  type: TYPE_NORMAL
- en: A **local object repository** stores test objects that can only be used in one
    specific action and not in any other action.
  prefs: []
  type: TYPE_NORMAL
- en: Record and replay
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Recording is a process of capturing human actions performed on AUT and simultaneously
    creating a script, which can be replayed on AUT many times.
  prefs: []
  type: TYPE_NORMAL
- en: What happens when we record
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When a user records the scripts, QTP perform various tasks as shown in following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: QTP uses a test object model. It identifies the test object and operation performed
    on an object that belongs to AUT.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then it stores the test object in a local object repository on which the user
    performed the action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Object identification properties of the test object are captured, which allows
    identification of the object uniquely at time of replay.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It provides a logical name to a test object, which makes objects' names readable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a test step; a test step contains test objects including parent(s),
    operation, and data, if applicable. The following code is an example of the test
    step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous test step, `Dialog` is the class name, `Login` is its logical
    name, and it is a parent of the `WinEdit` object. `WinEdit` is the class and `Set`
    is the operation, which sets the value as `ashish` to the object whose logical
    name is `Agent Name`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps for recording are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Record** button on the toolbar as shown in the following screenshot:![What
    happens when we record](img/1027EN_02_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform the action on the AUT.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat step 2 to record other test steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What happens when we replay
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When QTP replays the scripts, it performs various tasks as shown in the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: QTP finds the test object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It identifies the test object uniquely; in some cases it may be using one of
    the following items: ordinal identifiers, smart identification, and relational
    identifiers.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform the intended operation on the runtime object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The steps for recording are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Run** button in the toolbar as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What happens when we replay](img/1027EN_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Script development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps for script development are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Analyze Application Under Test.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create OR (add a test object manually).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add test steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enhance scripts by adding checkpoints, synchronization points, and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a structure by inserting functions, actions, loops, and control statements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run and debug the test.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Analyze results and report defects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag-and-drop object from OR to expert view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will discuss the preceding steps 4, 5, and 6 in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing an application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Determine the development environment to load the relevant QuickTest add-ins
    and provide support for the objects in AUT. Analyze the flow and plan tests and
    actions accordingly. Decide the organization of the test, and ensure that the
    test and AUT are set to match the need of the automation.
  prefs: []
  type: TYPE_NORMAL
- en: Creating OR (adding test objects to OR)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When an object is added to an object repository, QuickTest performs the following
    actions:'
  prefs: []
  type: TYPE_NORMAL
- en: It identifies the test object class, which represents the learned object and
    creates the appropriate test object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It reads the current value of the object's properties in AUT as well as stores
    the list of identification properties. It selects the identification properties
    that can identify the test object uniquely.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It chooses a unique name for the test object, generally using the value of
    one of its prominent properties: for example, `name`, if the object has one.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Following are the ways to add the test object to OR:'
  prefs: []
  type: TYPE_NORMAL
- en: Record a test step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add object to local.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an object description.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a test object by using define new test objects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: OR Manager Navigate and Learn or Add object option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding test objects to the local object repository from **Active Screen**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Recording a test step
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Test objects are created automatically and added to the local OR when a user
    records a step. Add object to local.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a test object to OR
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Add a test object to the local OR through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Resources** | **Object Repository** | **Add object to local**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the button **Add Object to local**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the hand pointer to the object we want to add from AUT.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK**. The object is added to the OR as shown in the following screenshot:![Adding
    a test object to OR](img/1027EN_02_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating an object description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The test object can be created without recording, by providing an object description.
    Refer to the following screenshot. The test object class name is `WinComboBox`
    and it has two description properties, which are stored with a logical name `Fly
    From`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an object description](img/1027EN_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When we record the test step to select an option from the **Fly From** combobox,
    the following script is generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use the object description in the test steps directly, as shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Both statements are the same when we replay the script, one uses an object from
    the OR and the other one uses the description directly. When we use programmatic
    description, the logical name is replaced by the pair(s) of the identification
    properties and its values.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a test object using Define New Test Object
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To define a new object, we should know its class and its identification properties.
    Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Resources** | **Object Repository** | **Define New Test Object**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Filter **Environment** from the **Define New Test Object** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the class from the **Class** drop-down box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a logical name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide the value for the **Identification** property (1 to n).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If required, add some identification properties.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button to add a test object to the OR:![Creating a test
    object using Define New Test Object](img/1027EN_02_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the environment displayed based on the loaded add-ins, select **Class**,
    and provide a logical name.
  prefs: []
  type: TYPE_NORMAL
- en: OR Manager Navigate and Learn and Add Object options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: How can I learn GUI Objects in one go?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Navigate and Learn in the OR Manager.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Navigate and Learn toolbar
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This toolbar allows you to add multiple test objects to a shared object repository
    while you navigate through your application. Following are the steps to learn
    to navigate the object in the object repository manager:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Resources** | **Object Repository Manager** | **Object** | **Navigate
    and Learn** or press *F6*.![The Navigate and Learn toolbar](img/1027EN_02_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a window to learn. The selected window and its descendant objects are
    added to the active shared object repository according to a predefined object
    filter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding a test object using the OR Manager Add Object option
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Navigate to **Resources** | **Object Repository Manager** | **Objects** | **Add
    Object**. Click on the hand pointer and select the window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The object filter is used for the **Navigate and Learn** option as well as the
    **Add Objects** option.![Adding a test object using the OR Manager Add Object
    option](img/1027EN_02_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'See the description of each filter in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| UI Elements | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Selected object only (no descendants** **)** | This option allows you to
    select objects without descendants and add the selected ones by previously using
    selected and its properties. |'
  prefs: []
  type: TYPE_TB
- en: '| **Default object types** | This option enables adding selected objects and
    their descendants to the object repository. The objects selected are specified
    by the default filter option. |'
  prefs: []
  type: TYPE_TB
- en: '| **All object types** | This option allows adding the objects and their descendants
    with properties and values selected previously in the object repository using
    the **Selected object types** option. |'
  prefs: []
  type: TYPE_TB
- en: '| **Selected object types** | This option allows selecting and filtering the
    objects and their descendants. The selection remains valid until a user does not
    change the selection criteria. |'
  prefs: []
  type: TYPE_TB
- en: Based on the filter option, the other is added to the OR.
  prefs: []
  type: TYPE_NORMAL
- en: Adding test objects to the local object repository from Active Screen
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Select the required object from **Active Screen** and add it to the object
    repository. In order to add test objects to the object repository using **Active
    Screen**, **Active Screen** should have the object. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the **Active Screen** pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select an object and right-click on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **View** / **Add Object**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add to Repository** button.![Adding test objects to the local
    object repository from Active Screen](img/1027EN_02_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have selected the object button **Cancel** as shown in the preceding screenshot.
    The test object is added to the local object repository and can be used only by
    the current action. We cannot add a test object in a shared OR (in OR Manager)
    using **Active Screen**.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a test step
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are many ways in which we can add the steps in the scripts, as shown
    in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Recording**: Recording creates the test step when a user performs the action
    on an object in AUT.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Manually adding a step**: To add steps manually, we need to add the OR first.
    Write the class name, for example `Dialog`; the editor displays the list of dialogs.
    In case multiple dialogs are stored in OR, we can select the desired one. In case
    of a single dialog QTP, complete print the name of it in editor. When a user types
    `WinEdit`, the editor displays two objects that belong to the `WinEdit` class.
    Refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a test step](img/1027EN_02_08.jpg)![Adding a test step](img/1027EN_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Press *.* on the keyboard after `WinButton("OK")`, the drop-down menu appears
    with the list of the methods available for the object. Select the appropriate
    method and complete the statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps for the keyword view:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the OR.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch to the keyword driven view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the **Item** column.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the object from the drop-down menu in the item of the grid.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the method from the **Operation** column.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the value, if required, in the **Value** column.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The comment will be added by QTP itself.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If the test object is not added to the Object Repository before inserting the
    step,click on the object from the repository in the drop-down menu in the item
    column. Click on the hand pointer to add a test object from the repository in
    the selected test object window.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a test step](img/1027EN_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Step Generator** from Keyword view:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the OR (add object to OR).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch to the keyword driven view and right-click on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Step Generator**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Test Object** from **Category**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the test object from the dropdown or click on the icon (select the test
    object) to open the selected object window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the test object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide arguments and click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Adding steps to **Active screen**:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the **Active Screen** pane (if the **Active Screen** pan is not visible,
    go to **View** | **Active**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the object we want to add.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Step Generator** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Test Object** from **Category**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the test object from the dropdown or click on the icon (select the test
    object) to open the selected object window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the test object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide the arguments.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enhancing scripts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have learned various ways of adding test objects and creating test steps,
    now we will learn about enhancing the scripts using checkpoints, actions, synchronization
    point, reporter object, Err handling, and environment variable to make it more
    reusable and effective.
  prefs: []
  type: TYPE_NORMAL
- en: Checkpoints
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A checkpoint is a verification that compares the actual value for specified
    properties or the current state of other characteristics of an object with the
    expected value or characteristics. This allows notifying the **Run Result** window
    or scripts them as to whether applications are working as expected or not. When
    a checkpoint is added to the test, QuickTest inserts a checkpoint step in the
    keyword view and adds a `CheckPoint` statement in the expert view. When a test
    is executed, QuickTest compares the expected results and actual results using
    checkpoints. If there is a mismatch, the checkpoint fails. The results of the
    checkpoint can be viewed in the **Run Results Viewer**. See the various types
    of checkpoints in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Type | Description | How to insert | Example of use |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Standard checkpoint | Verifies the value of an object''s properties | Click
    on **Record** in toolbar.Navigate to **Insert** &#124; **Checkpoint** &#124; **Standard
    Checkpoint**. | Verify the property of the object |'
  prefs: []
  type: TYPE_TB
- en: '| Image checkpoint | Verifies the properties of images | This checkpoint type
    is inserted by selecting the **Standard Checkpoint** option and then selecting
    to check a web image object. | Verify the `alt` property of the image |'
  prefs: []
  type: TYPE_TB
- en: '| Table checkpoint | Verifies the information in the web table | This checkpoint
    type is inserted by selecting the **Standard Checkpoint** option and then selecting
    to check any table object. | Verify if the value of the cell in the web table
    is correct |'
  prefs: []
  type: TYPE_TB
- en: '| Page checkpoint | Verifies the characteristics of a web page | This checkpoint
    type is inserted by selecting the Standard Checkpoint option and then selecting
    to check a web page object. | Verify the number of links |'
  prefs: []
  type: TYPE_TB
- en: '| Text checkpoint | Verifies the displayed text or text within predefined and
    post-defined values | Click on **Record** in the toolbar.Navigate to **Insert**
    &#124; **Checkpoint** &#124; **Text Checkpoint**. | Verify if the expected text
    string is displayed |'
  prefs: []
  type: TYPE_TB
- en: '| Text Area checkpoint | Verify if string is displayed within a defined area
    | Click on **Record** in the toolbar.Navigate to **Insert** &#124; **Checkpoint**
    &#124; **Text Area Checkpoint**. | Verify if the string defined in area matches
    with the expected string |'
  prefs: []
  type: TYPE_TB
- en: '| Bitmap checkpoint | Verifies the bitmap or part of the bitmap | Click on
    **Record** in toolbar.Navigate to **Insert** &#124; **Checkpoint** &#124; **Bitmap
    Checkpoint**. | Check if bitmap matches the expected bitmap |'
  prefs: []
  type: TYPE_TB
- en: '| Database checkpoint | Check if the value retrieved by query matches the expected
    value | Navigate to **Insert** &#124; **Checkpoint** &#124; **Database Checkpoint**.
    | Check if the value retrieved by query matches the expected value |'
  prefs: []
  type: TYPE_TB
- en: '| Accessibility checkpoint | Identifies areas of a website to check for Section
    508 compliancy | Click on **Record** in toolbar.Navigate to **Insert** &#124;
    **Checkpoint** &#124; **Accessibility Checkpoint**. | Check if the images on a
    web page include `ALT` properties, required by the W3C Web |'
  prefs: []
  type: TYPE_TB
- en: '| XML checkpoint | Verifies data in XML documents | Navigate to **Insert**
    &#124; **Checkpoint** &#124; **XML Checkpoint**. | Check the value of an XML node
    and attributes |'
  prefs: []
  type: TYPE_TB
- en: We will learn more about checkpoints in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Synchronization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When a test runs, it may not always match up to the speed of AUT and it is required
    to wait for the following. This is known as test synchronization.
  prefs: []
  type: TYPE_NORMAL
- en: Wait until a progress bar reaches 100 percent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Status message is displayed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wait until button is enabled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wait until a window or a pop up is displayed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In these scenarios, tests are either not able to perform the next step or synchronization
    times out, causing the test to fail. These issues can be resolved by various synchronization
    techniques provided by the QTP.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several options to synchronize a test with AUT:'
  prefs: []
  type: TYPE_NORMAL
- en: Inserting the `Wait` statement allows a test to wait for a predefined time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert a synchronization point or insert the `WaitProperty` method, allowing
    a test to pause until an object property achieves the specified value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `Exist` statement allows waiting until an object exists or times out.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: QTP allows setting the default time-out for a web page to load.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Increase the default synchronization time-out by navigating to **File** | **Test**
    | **Run** |**object synchronization timeout**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the `Sync` method for a web page to wait until the page is loaded. See
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The synchronization point does not work when QTP is not able to identify the
    object; use `exist` or `wait` instead.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Exist statements
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `Exist` statement allows a test to wait for a window to open or an object
    to appear. `Exist` statements return a Boolean value indicating whether or not
    an object currently exists.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The first statement instructs QuickTest to wait until the default synchronization
    time. The second statement waits for a maximum of 10 seconds for the `Flights
    Table` dialog box to open.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Reporter objects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This object is used to send information to the run results. It has various methods
    and properties used at runtime to decide and change the control of flow of scripts.
    The following table demonstrates methods and properties of the reporter object.
  prefs: []
  type: TYPE_NORMAL
- en: '| Associated methods of the `Reporter` object | Associated properties of the
    `Reporter` object |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `ReportEvent` method`ReportNote` method | `Filter` property`ReportPath` property`RunStatus`
    property |'
  prefs: []
  type: TYPE_TB
- en: 'Let''s see how to use these methods and properties:'
  prefs: []
  type: TYPE_NORMAL
- en: 'It takes four arguments (`EventStatus`, `StepName`, `Details(Description)`,
    and `[, pathtosavefile]`) as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`EventStatus` is shown as a number or a constant. These constants are shown
    with the description of the message sent to the **Run Result** window as shown
    in the following table.'
  prefs: []
  type: TYPE_NORMAL
- en: '| 0 or micPass: | 1 or micFail: | 2 or micDone: | 3 or micWarning: |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Sends the passed message to the **Run Results** window | Sends the failed
    message to the **Run Results** window | Sends the message of doneness to the **Run
    Result** window | Sends a warning message to the **Run Results** window |'
  prefs: []
  type: TYPE_TB
- en: 'The arguments list and its descriptions are mentioned in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Arguments | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `ReportStepName` | `String` | Name of the step that the user wants to display
    in the **Run Results** window |'
  prefs: []
  type: TYPE_TB
- en: '| `Details` | `String` | Sends the custom message or step description to run
    results |'
  prefs: []
  type: TYPE_TB
- en: '| `ImageFilePath` | `String` | This argument is optional. The format to store
    the images are `.bmp`, `.jpeg`, `.png`, and `.gif` format |'
  prefs: []
  type: TYPE_TB
- en: 'The following is the example of how to use the reporter object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The Reporter.RunStatus object
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `Reporter.RunStatus` object retrieves the current run status of the test.
    The following example demonstrates how to retrieve the value if it fails, and
    then exit from the test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This method also allows setting `RunStatus` as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Enable or disable the mode setting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The mode can be one of the following values with description as shown in the
    following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Mode | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `0` or `rfEnableAll` Default. | Displays all events in run results |'
  prefs: []
  type: TYPE_TB
- en: '| `1` or `rfEnableErrorsAndWarnings` | Displays the warning or fail status
    in run results |'
  prefs: []
  type: TYPE_TB
- en: '| `2` or `rfEnableErrorsOnly` | Displays the fail status in the run results
    |'
  prefs: []
  type: TYPE_TB
- en: '| `3` or `rfDisableAll` | Displays no events in run results |'
  prefs: []
  type: TYPE_TB
- en: Actions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An action is a set of statements to perform a task(s); divide the test into
    actions to decompose the functionality into smaller and manageable scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Purpose of actions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Provide decomposition of scripts into manageable pieces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increase reusability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Types of actions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Non reusable actions**: They can be called in the same test only once and
    cannot be used in other tests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reusable actions**: Reusable actions can be used in the same test multiple
    times as well as in other tests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**External actions**: An external action is defined in another test and is
    used as read-only in calling a test and can be modified by a stored test.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Error handling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Error handling is an important aspect that allows coming up cleanly from erroneous
    conditions. QTP provides various options in case of an error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to **File** | **Settings** | **Run** | **Select** when an error occurs during
    a run session; the options are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pop-up message box**: A pop-up message box displays the options selected
    by the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Proceed to the next test Iteration**: Skip the current iteration and move
    to the next one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stop Run**: Stop the test execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Proceed to the next step**: Skip the current step and proceed to the next
    one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By specifying this action the test will come out of the error condition and
    proceed as a selected option. QTP also provides the recovery mechanism. Using
    VBScript we can handle various error situations using VBScript's `ERR` object.
    We will see how to use it in the later chapters of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Parameterization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A parameter is a variable that holds a value(s). Parameterization allows substituting
    of values when a test is executed. QTP uses `datatable` to parameterize the test.
    Either a global or local sheet can be used for parameterization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![Parameterization](img/1027EN_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The data defined in `DataTable` or any external data source allows parameterizing
    of the test when a test is run for a number of rows in data sources. Parameterization
    helps to make the test iterative.
  prefs: []
  type: TYPE_NORMAL
- en: Environment Variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: QTP allows configuring of the test using environment variables. QTP provides
    built-in variables and allows the user to define variables as well. In-built environment
    variables can be viewed by navigating to **Test** | **Setting** | **Environment**
    | **Select Built-in** from the drop down.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example creates a new user-defined variable named `MyVariable`
    with a value of `15`, and then retrieves the variable value and stores it in the
    `MyValue` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We can create the `Environment` variable using XML as shown in the following
    code and add it by navigating to **Test** | **Setting** | **Environment** | **Select
    the user define option**. Set the export file from the load variable and XML from
    an external file. Use the **Browse** option to add it. The environment variable
    file must be an XML file; use the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: QTP allows loading the specified environment variable file using the command
    `Environment.LoadFromFile(Path)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example loads the `Environment.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The key theme of this chapter was to learn how to create scripts and concepts
    that are reliable and reusable. The smaller code examples demonstrate the usage
    of these concepts. This chapter covered the steps required to create scripts and
    enhance the scripts using checkpoints, parameterization, environment variables
    splitting the actions, and adding the reporter object to notify the results in
    the **Run Result** window. In the next chapter, the key discussion will be around
    building the key features using code that can be utilized to develop the components
    that can be used in frameworks.
  prefs: []
  type: TYPE_NORMAL
