["```js\n<div style=\"color: blue;\" />\n```", "```js\n<div style=\"color: blue; font-size: 2rem;\" />\n```", "```js\n<div style=\"color: {color};\" />\n```", "```js\n<div style=\"color: {color}; font-size: {fontSize}; background: {background}; border-top: {borderTop};\" />\n```", "```js\n<div\n  style:color={color}\n  style:font-size={fontSize}\n  style:background={background}\n  style:border-top={borderTop}\n/>\n```", "```js\nstyle:css-property-name={value}\n```", "```js\n<div style:--main-color={color} />\n```", "```js\n<div\n  style:color\n  style:font-size={fontSize}\n  style:background\n  style:border-top={borderTop}\n/>\n```", "```js\n<div style:color=\"red\" style=\"color: blue;\" />\n```", "```js\n<div>First div</div>\n<div>Second div</div>\n<style>\n  div {\n    color: blue;\n  }\n</style>\n```", "```js\n<div>row</div>\n<style>\n  div { color: red; }\n</style>\n```", "```js\n<div class=\"svelte-q5jdbb\">row</div>\n<style>\n  div.svelte-q5jdbb { color: red; }\n</style>\n```", "```js\n<div>First div</div>\n<div class=\"highlight\">Second div</div>\n<style>\n  .highlight {\n    background-color: yellow;\n  }\n</style>\n```", "```js\n<div class=\"{toHighlight ? \"highlight\" : \"\"} {toBold ? \"bold\" : \"\"}\" />\n```", "```js\nclass:class-name={condition}\n```", "```js\n<div class:highlight={toHighlight} class:bold={toBold} />\n```", "```js\n<div class:highlight />\n```", "```js\n<script>\n  export let highlight = true;\n</script>\n<div class:highlight />\n<style>\n  .highlight {\n    background-color: yellow;\n  }\n</style>\n```", "```js\n<html>\n  <head>\n    <style>.title { color: blue }</style>\n  </head>\n</html>\n```", "```js\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"external.css\">\n  <head>\n</html>\n```", "```js\nimport './style.css';\n```", "```js\n/* filename: style.module.css */\n.highlight {\n  background-color: yellow;\n}\n```", "```js\n/* the class name 'highlight' transformed into 'q3tu41d' */\n.q3tu41d {\n  background-color: yellow;\n}\n```", "```js\nimport styles from './style.module.css';\nstyles.highlight; // 'q3tu41d'\n```", "```js\n<script>\n  import styles from './style.module.css';\n</script>\n<div class=\"{styles.highlight}\" />\n```", "```js\n<div class=\"flex pt-4 text-center\" />\n```", "```js\n    my-project-name containing the basic files necessary for a Svelte project.\n    ```", "```js\n    cd my-project-name\n    npm install\n    ```", "```js\n    npm run dev\n    ```", "```js\n    @tailwind directive – a Tailwind CSS directive, which you’ll see later.\n    ```", "```js\n    tailwind.config.js file keeps the configuration for Tailwind CSS. Tailwind CSS works by scanning template files for class names and generating the corresponding styles into a CSS file.\n    ```", "```js\n    module.exports = {\n      content: [\n        // all files ends with .svelte in the src folder\n        \"./src/**/*.svelte\"\n      ],\n    };\n    ```", "```js\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n    ```", "```js\n    import './src/main.css';\n    ```", "```js\n    text-center and text-sky-400 Tailwind CSS classes onto the elements in your Svelte component.For example, head over to `./src/App.svelte` and add the following: `<h1 class=\"text-center` `text-sky-400\">Hello World</h1>`\n    ```", "```js\n<script>\n  export let condition = false;\n</script>\n<h1 class=\"text-center\">Center aligned title</h1>\n<h1 class:text-center={condition}>\n  Conditionally center aligned\n</h1>\n```", "```js\n    --text-color: blue;\n    ```", "```js\n    color: var(--text-color);\n    ```", "```js\n    .foo {\n      --text-color: blue;\n    }\n    div {\n      --text-color: red;\n    }\n    ```", "```js\n    <div>\n      <span />\n    </div>\n    ```", "```js\n<div>\n <ChildComponent />\n</div>\n<style>\n div {\n  --text-color: #eee;\n  --background-color: #333;\n  --text-size: 14px;\n }\n</style>\n```", "```js\n<style>\n  :root {\n    --text-color: #eee;\n    --background-color: #333;\n    --text-size: 14px;\n  }\n</style>\n```", "```js\n<div style=\"--text-color: #eee; --background-color: #333; --text-size: 14px;\">\n  <ChildComponent />\n</div>\n```", "```js\n<div\n  style:--text-color=\"#eee\"\n  style:--background-color=\"#333\"\n  style:--text-size=\"14px\">\n  <ChildComponent />\n</div>\n```", "```js\n<style>\n  div {\n   color: var(--text-color);\n  }\n</style>\n```", "```js\n<script>\n  export let condition = false;\n</script>\n<div style:--text-color={condition ? '#222' : '#eee'} >\n  <ChildComponent />\n</div>\n```", "```js\n@media (prefers-color-scheme: dark) {\n  /* Dark theme styles go here */\n}\n@media (prefers-color-scheme: light) {\n  /* Light theme styles go here */\n}\n```", "```js\n<style>\n  @media (prefers-color-scheme: dark) {\n    :root {\n      --background-color: black;\n      --text-color: white;\n    }\n  }\n  @media (prefers-color-scheme: light) {\n    :root {\n      --background-color: white;\n      --text-color: black;\n    }\n  }\n</style>\n```", "```js\n<style>\n  * {\n    color: var(--text-color);\n  }\n</style>\n```", "```js\n<p>Hello World</p>\n<style>\n  p {\n   color: red;\n  }\n</style>\n```", "```js\n    <div>\n      <Component />\n    </div>\n    <style>\n      div :global(p) {\n        color: blue;\n      }\n    </style>\n    ```", "```js\n    <p>Hello World</p>\n    <style>\n      p {\n       color: var(--text-color, red);\n      }\n    </style>\n    ```", "```js\n    <div>\n      <Component />\n    </div>\n\n    ```", "```js\n\n    ```", "```js\n<p>Hello World</p>\n<style>\n  p {\n    --fallback-color: red;\n    color: var(--text-color, var(--fallback-color));\n  }\n</style>\n```", "```js\n<style>\n  p {\n   --internal-text-color: var(--text-color, red);\n   color: var(--internal-text-color);\n  }\n</style>\n```"]