- en: Chapter 7. Input Field with Clear Button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we will go through Stephen Friedrich's `ClearButton` plugin.
    This plugin is targeted for text components that show a "clear" button over the
    text field. When the clear button is clicked on, the text field is emptied. Also,
    the icon image and its positioning can be controlled using CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics covered are:'
  prefs: []
  type: TYPE_NORMAL
- en: Functional requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Planning and coding of the clear button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We want a plugin that will help users to clear the text within the text components,
    such as `Ext.form.field.Text`, `Ext.form.field.TextArea`, `Ext.form.field.ComboBox`,
    and `Ext.form.field.Date`. The plugin should provide a button to click on in order
    to clear the text within a text component. This plugin should have several useful
    configuration options and CSS styles, where we can set our requirements, such
    as the clear button should always/only show up when the mouse enters within the
    input field, or it should be shown when the input field is empty or is cleared
    when the user presses *Esc*. The clear button can be customized for button image/position
    via CSS, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Planning and coding of the clear button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To develop this plugin we will first create the clear button that will be rendered
    over the text component, and will apply the CSS styles according to the configuration
    options. After that, we need to add several event handlers for the clear button,
    such as `click`, `mouseover`, `mouseout`, `mouseup`, and `mousedown`, and also,
    several event handlers for the text component, such as `destroy`, `resize`, `change`,
    `mouseover`, and `mouseout`. Let us now start coding:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, you can see that we have defined several configuration
    options, and the required `init` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let us define the `handleAfterRender` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Within this `handleAfterRender` function, at first, we are checking whether
    the textfield is a `textarea` or not, as we need to handle `textarea` with custom
    functionality since this field may have a scrollbar. And then we call the `createClearButtonEl`
    function to create the element and the DOM for the clear button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let us define the `createClearButtonEl` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding function the clear button has been created and assigned an
    animation, based on the configuration options. In this function we also checked
    whether the browser supports CSS3 transitions or not, by calling the `supportsCssTransition`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let us define the `supportsCssTransition` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The next function we are calling within the `handleAfterRender` function is
    the `addListeners` function to add listeners to the field, its input element,
    and the clear button to handle resizing events such as `mouseover`, `mouseout`,
    and `click`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let us define the `addListeners` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next we define the `mouseover` event handler – `handleMouseOverInputField`,
    and the `mouseout` event handler – `handleMouseOutOfInputField`, for `bodyEl`
    of `textField`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let us define the "destroy" event handler of `textField` since when the
    field is destroyed, we also need to destroy the clear button element to prevent
    memory leaks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let us start defining the handlers for the clear button''s `mouseover`,
    `mouseout`, `mousedown`, `mouseup`, and `click` events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The next function we will call within the `handleAfterRender` function is the
    `repositionClearButton` function, to reposition the clear button element based
    on the `inputEl` element of `textField`. Now, let us define this function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that we get the clear button''s position value by calling the `calculateClearButtonPosition`
    function. This function calculates the position of the clear button, based on
    the `inputEl` element of `textField`. Now, let us define this function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that we checked whether the field has a scrollbar or not, and if
    the field has a scrollbar, we add the value of the `Ext.getScrollBarWidth` function
    to the `right` position. Now, let us define the `fieldHasScrollBar` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'And then we called the `updateClearButtonVisibility` function within the `handleAfterRender`
    function for fixing the clear button''s visibility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that we took the value of the current visible state, and what will
    be the new visible state, by calling the `isButtonCurrentlyVisible` and `shouldButtonBeVisible`
    functions. The `isButtonCurrentlyVisible` function is a wrapper around `clearButtonEl.isVisible()`
    to handle the `setVisible` animation that may still be in progress, and the `shouldButtonBeVisible`
    function checks the configuration options and the current mouse status to determine
    whether the clear button should be visible or not. Now, let us define these functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'And the last function that we called within the `handleAfterRender` function
    is the `addEscListener` function. What we need to do is, if the configuration
    option `clearOnEscape` is set to `true`, add a key listener that will clear this
    field. Now, let us define this function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot is the output where we''ve used this plugin for **textfield**,
    **textareafield**, **combobox**, and the date field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Planning and coding of the clear button](img/3725OS_7_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see that on hovering over the **textfield** component, the clear button
    is visible and clicking on this button will clear the respective field.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we've gone through an Ext JS plugin, which provides a clear
    button for text components to clear the content within it. We can see that developing
    a single plugin can be used in several types of components, and how easily we
    can inject the functionality of the plugin.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we will develop an Ext JS extension for a fancy animated
    message bar. The message bar will provide a facility to have a configurable duration
    timer for showing a message. It will have a close button, and it will also be
    able to show an "error" and a "successful" icon, beside the message.
  prefs: []
  type: TYPE_NORMAL
