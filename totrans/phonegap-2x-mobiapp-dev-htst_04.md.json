["```js\n    self.renameDocumentAtIndexTo = function ( idx, newName, completion, failure )\n    {\n        self.completion = completion;\n        self.failure = failure;\n        self.state = \"Renaming a Document\";\n        for (var i=0; i<self.documents.length;i++)\n        {\n          if (self.documents[i].name.toLowerCase().trim() == newName.toLowerCase().trim())\n            {\n              self.dispatchFailure ( { \"error\": \"The file already exists\" } );\n              return;\n            }\n        }\n        self.documents [ idx ].moveTo ( self.fileSystem.root, newName.trim(), self.renameDocumentAtIndexToSuccess, self.dispatchFailure);\n    }\n```", "```js\nvar DOC = DOC || {};\n\nDOC.PathRecDocumentItem = function ( position )\n{\n    var self = this;\n\n    self.timestamp = {};\n    self.latitude = 0;\n    self.longitude = 0;\n    self.altitude = 0;\n    self.heading = 0;\n    self.speed = 0;\n```", "```js\n    self.setPosition = function ( position )\n    {\n        self.timestamp = position.timestamp;\n\n        if (position.coords)\n        {\n            self.latitude = position.coords.latitude;\n            self.longitude = position.coords.longitude;\n            self.altitude = position.coords.altitude;\n            self.heading = position.coords.heading;\n            self.speed = position.coords.speed;\n        }\n        else\n        {\n            self.latitude = position.latitude;\n            self.longitude = position.longitude;\n            self.altitude = position.altitude;\n            self.heading = position.heading;\n            self.speed = position.speed;\n        }\n    }\n```", "```js\n    self.getLatitude = function ()\n    {\n        return self.latitude;\n    }\n```", "```js\n    self.getLatLong = function ()\n    {\n      return self.latitude + \",\" + self.longitude;\n    }\n\n    self.getGoogleLatLng = function ()\n    {\n      return new google.maps.LatLng( self.latitude, self.longitude );\n    }\n```", "```js\n    self.getGoogleMarker = function ( withMap )\n    {\n      return new google.maps.Marker(\n        {\n            map:withMap,\n            title:self.getLatLong(),\n            draggable:false,\n            position:self.getGoogleLatLng()\n          }\n        );\n    }\n```", "```js\n    self.serialize = function ()\n    {\n      return {\n        \"timestamp\": self.timestamp,\n        \"latitude\": self.latitude,\n        \"longitude\": self.longitude,\n        \"altitude\": self.altitude,\n        \"heading\": self.heading,\n        \"speed\": self.speed\n        };\n    }\n```", "```js\n    if (position)\n    {\n        self.setPosition ( position );\n    }\n}\n```", "```js\nDOC.PathRecDocument = function ( theFileEntry, completion, failure )\n{\n\n    self.title = \"My Path\";\n    self.nodes = []; \n```", "```js\n    self.getNodes = function ()\n    {\n      return self.nodes;\n    }\n\n    self.setNodes = function ( theNodes )\n    {\n      self.nodes = theNodes;\n    }\n```", "```js\n    self.addNode = function ( aNode )\n    {\n      self.nodes.push ( aNode );\n    }\n```", "```js\n    self.getNodeAtIndex = function ( idx )\n    {\n      return self.nodes[idx];\n    }\n\n      self.getNodeCount = function ()\n    {\n      return self.nodes.length;\n    }\n```", "```js\n    self.finishedReadingFile = function ( e )\n    {\n      var theFileContents = e.target.result;\n      if (!theFileContents)\n      {\n        theFileContents = '{\"title\":\"New File\",\"nodes\":[]}';\n      }\n```", "```js\n        try\n        {\n          var data = JSON.parse ( theFileContents );\n          self.title = data.title;\n          for (var i=0; i<data.nodes.length; i++)\n          {\n            self.addNode ( new DOC.PathRecDocumentItem ( data.nodes[i] ) );\n          }\n        }\n```", "```js\n    self.serialize = function ()\n    {\n      var serializedNodes = [];\n      for (var i=0; i<self.nodes.length; i++)\n      {\n        serializedNodes.push ( self.nodes[i].serialize() );\n      }\n      return { \"title\": self.title, \"nodes\": serializedNodes };\n    }\n```", "```js\n<div id=\"documentsView_documentTemplate\" class=\"hidden\">\n  <div class=\"documentContainer\">\n <div class=\"documentTapArea\" onclick=\"documentsView.documentContainerTapped(%INDEX%)\"></div>\n  <div class=\"documentImage\">\n <img src=\"img/DocumentImage.png\" border=0 onclick=\"documentsView.documentIconTapped(%INDEX%)\"/>\n  </div>\n <div class=\"documentTitle\" onclick=\"documentsView.documentNameTapped(%INDEX%)\">\n    <span >%TITLE%</span>\n  </div>\n  <div class=\"documentActions\">\n    <img src=\"img/Copy.png\" width=28 height=28 border=0 onclick=\"documentsView.copyDocument(%INDEX%)\" />\n    <img src=\"img/Share.png\" width=27 height=28  border=0 onclick=\"documentsView.shareDocument(%INDEX%)\" />\n    <img src=\"img/Trash.png\" width=28 height=28  border=0 onclick=\"documentsView.deleteDocument(%INDEX%)\" />\n  </div>\n  </div>\n</div>\n```", "```js\n  documentsView.documentIconTapped = function ( idx )\n  {\n    if (PKDEVICE.platform() == \"ios\")\n    {\n      documentsView.openDocument(idx);\n    }\n    else\n    {\n      documentsView.renameDocument(idx);\n    }\n  }\n\n  documentsView.documentNameTapped = function ( idx )\n  {\n    if (PKDEVICE.platform() == \"ios\")\n    {\n      documentsView.renameDocument(idx);\n    }\n    else\n    {\n      documentsView.openDocument(idx);\n    }\n  }\n\n  documentsView.documentContainerTapped = function ( idx )\n  {\n    if (PKDEVICE.platform() == \"ios\")\n    {\n      return;\n    }\n    else\n    {\n      documentsView.openDocument(idx);\n    }\n  }\n```", "```js\n<div class=\"viewBackground\">\n  <div class=\"navigationBar\">\n    <div id=\"mapView_title\"></div>\n    <span style=\"display: block; position: absolute; right:10px; top: 6px; width:auto; text-align: right;\">\n    <span class=\"iconButton \" id=\"mapView_trackButton\" style=\"margin-right: 10px;\" ></span>\n    <span class=\"iconButton \" id=\"mapView_actionButton\" ></span>\n    </span>\n    <button class=\"barButton backButton\" id=\"mapView_backButton\" style=\"left:10px;\" ></button>\n  </div>\n```", "```js\n  <div class=\"content avoidNavigationBar\" style=\"padding:0; overflow:hidden; \" id=\"mapView_scroller\">\n    <div id=\"mapView_contentArea\">\n    <div id=\"mapView_mapCanvas\" style=\"width:100%; height:100%;\">\n    </div>\n    </div>\n  </div>\n</div>\n```", "```js\n  var mapView = $ge(\"mapView\") || {};\n\n  mapView.theFirstTime = true;\n  mapView.theFileEntry = {};\n  mapView.thePathDocument = {};\n  mapView.theSaveTimer = -1;\n\n  mapView.map = {};\n  mapView.watchID = -1;\n  mapView.polyline;\n  mapView.currentPositionMarker = {};\n  mapView.keepMapCentered = true;\n  mapView.lastKnownPosition = {};\n  mapView.recordingPath = false;\n```", "```js\n      mapView.actionButtonPressed = function ()\n      {\n        mapView.recordingPath = !mapView.recordingPath;\n        if (mapView.recordingPath)\n        {\n          mapView.actionButton.innerHTML = __T(\"STOP\");\n    ```", "```js\n        }\n        else\n        {\n          mapView.actionButton.innerHTML = __T(\"RECORD\");\n        }\n        mapView.geolocationUpdate ( mapView.lastKnownPosition );\n      }\n    ```", "```js\n  mapView.trackButtonPressed = function ()\n  {\n    mapView.keepMapCentered = true;\n    mapView.geolocationUpdate ( mapView.lastKnownPosition );\n  }\n```", "```js\n  mapView.geolocationUpdate = function ( position )\n  {\n    var theLatLng = new google.maps.LatLng ( \n      position.coords.latitude,\n        position.coords.longitude );\n\n    mapView.lastKnownPosition = position;\n\n    if (mapView.keepMapCentered)\n    {\n      mapView.map.panTo ( theLatLng );\n    }\n\n    mapView.currentPositionMarker.setPosition (theLatLng);\n\n    if (mapView.recordingPath)\n    {\n      mapView.polyline.getPath().push ( theLatLng );\n      mapView.thePathDocument.addNode ( new \n         DOC.PathRecDocumentItem ( position ) );\n    }\n  }\n```", "```js\n  mapView.geolocationError = function ( error )\n  { \n    var anAlert =\n      new PKUI.MESSAGE.Alert (\n        __T(\"Geolocation Error\"),\n        __T(error.message) );\n    anAlert.show();\n  }\n```", "```js\n...\n  mapView.loadDocument = function ()\n  {\n    mapView.viewTitle = $ge(\"mapView_title\");\n    mapView.viewTitle.innerHTML =  mapView.theFileEntry.name.substr(0,mapView.theFileEntry.name.length-4);\n\n    mapView.thePathDocument = new DOC.PathRecDocument (mapView.theFileEntry,function ()\n        { \n          mapView.viewTitle.innerHTML = mapView.thePathDocument.getTitle();\n          mapView.theSaveTimer = setInterval ( mapView.saveDocument, 5000 );\n          for (var i=0; i<mapView.thePathDocument.getNodeCount(); i++)\n            {\n              var theNode = mapView.thePathDocument.getNodeAtIndex ( i );\n              mapView.polyline.getPath().push ( new google.maps.LatLng ( theNode.latitude, theNode.longitude ) );\n            }\n        },\n        function (e)\n        {\n          PKUI.CORE.popView();\n          var anAlert = new PKUI.MESSAGE.Alert (__T(\"Oops!\"),__T(\"Couldn't open the file.\") );\n          anAlert.show();\n        }\n      );\n\n    mapView.polyline = new google.maps.Polyline ( { strokeColor: '#80A0C0', strokeOpacity:0.85, strokeWeight:5 } );\n    mapView.polyline.setMap ( mapView.map );\n  }\n```", "```js\nâ€¦\n  mapView.viewWillAppear = function ()\n  {\n    document.addEventListener(\"backbutton\", mapView.backButtonPressed, false );\n    mapView.actionButton.innerHTML = __T(\"RECORD\");\n    mapView.trackButton.innerHTML = __T(\"CENTER\");\n  }\n  mapView.viewDidAppear = function ()\n  {\n\n    if (mapView.theFirstTime)\n    {\n      mapView.map = new google.maps.Map ( $ge(\"mapView_mapCanvas\"),\n        {  disableDefaultUI: true,\n              center: new google.maps.LatLng(40,-90),\n              zoom: 15,\n              mapTypeId: google.maps.MapTypeId.ROADMAP\n         }\n        );\n        google.maps.event.addListener ( mapView.map, 'dragstart', function () { \n        mapView.keepMapCentered = false; } );\n        mapView.currentPositionMarker = new \n        google.maps.Marker(\n          {\n            map:mapView.map,\n            title: \"Current Position\"\n          }\n        );\n    }\n        mapView.watchID = navigator.geolocation.watchPosition (         mapView.geolocationUpdate, mapView.geolocationError,\n        {\n          enableHighAccuracy: true\n        }\n    );\n\n    mapView.loadDocument(); \n  }\n```", "```js\n  mapView.viewWillHide = function ()\n  {\n    navigator.geolocation.clearWatch ( mapView.watchID );\n    mapView.recordingPath = false;\n    mapView.keepMapCentered = true;\n    mapView.polyline.setMap (null); // remove from the map.\n    mapView.polyline = null; // and destroy.\n\n  }\n```"]