["```js\nconst s = Symbol();\n```", "```js\nlet s1 = Symbol(\"My Symbol\");\nlet s2 = Symbol(\"My Symbol\");\nconsole.log(s1 === s2); // Outputs false\n```", "```js\nconst s = Symbol();\nconsole.log(typeof s); //Outputs \"symbol\"\n```", "```js\ntry {\n  let s = new Symbol(); //\"TypeError\" exception\n}\ncatch(e) {\n  console.log(e.message); //Output \"Symbol is not a constructor\"\n}\n```", "```js\nlet obj = null;\nlet s1 = null;\n(function(){\n let s2 = Symbol();\n s1 = s2;\n obj = {[s2]: \"mySymbol\"}\n console.log(obj[s2]);\n console.log(obj[s2] == obj[s1]);\n})();\nconsole.log(obj[s1]);\n```", "```js\nmySymbol\ntrue\nmySymbol\n```", "```js\nlet obj = {a: 12};\nlet s1 = Symbol(\"mySymbol\");\nlet s2 = Symbol(\"mySymbol\");\nObject.defineProperty(obj, s1, {\nenumerable: false\n});\nobj[s2] = \"\";\nconsole.log(Object.getOwnPropertySymbols(obj));\n```", "```js\nSymbol(mySymbol),Symbol(mySymbol)\n```", "```js\nlet obj = {};\n(function(){\n let s1 = Symbol(\"name\");\n obj[s1] = \"Eden\";\n})();\n//obj[s1] cannot be accessed here\n(function(){\n let s2 = Symbol.for(\"age\");\n obj[s2] = 27;\n})();\nconsole.log(obj[Symbol.for(\"age\")]); //Output \"27\"\n```", "```js\nlet obj = {\n array: [1, 2, 3, 4, 5],\n nextIndex: 0,\n next: function() {\n         return this.nextIndex < this.array.length ? {value: this.array[this.nextIndex++], done: false} : {done: true}\n       }\n};\nconsole.log(obj.next().value);\nconsole.log(obj.next().value);\nconsole.log(obj.next().value);\nconsole.log(obj.next().value);\nconsole.log(obj.next().value);\nconsole.log(obj.next().done);\n```", "```js\n1\n2\n3\n4\n5\ntrue\n```", "```js\nreturn this.nextIndex < this.array.length ? {value: this.array[this.nextIndex++], done: false} : {done: true}\n```", "```js\nif(this.nextIndex < this.array.length) {\n  this.nextIndex++;\n  return { value: this.array[this.nextIndex], done: false }\n} else {\n  return { done: true }\n}\n```", "```js\nlet obj = {\n  array: [1, 2, 3, 4, 5],\n  nextIndex: 0,\n  [Symbol.iterator]: function(){\n    return {\n     array: this.array,\n     nextIndex: this.nextIndex,\n     next: function(){\n       return this.nextIndex < this.array.length ?\n          {value: this.array[this.nextIndex++], done: false} :\n          {done: true};\n     }\n    }\n  }\n};\nlet iterable = obj[Symbol.iterator]()\nconsole.log(iterable.next().value);\nconsole.log(iterable.next().value);\nconsole.log(iterable.next().value);\nconsole.log(iterable.next().value);\nconsole.log(iterable.next().value);\nconsole.log(iterable.next().done);\n```", "```js\n1\n2\n3\n4\n5\ntrue\n```", "```js\nconst arr = [1, 2]\nconst iterator = arr[Symbol.iterator](); // returns you an iterator\nconsole.log(iterator.next())\nconsole.log(iterator.next())\nconsole.log(iterator.next())\n```", "```js\n{ value: 1, done: false }\n{ value: 2, done: false }\n{ value: undefined, done: true }\n```", "```js\nfunction* generator_function(){ \n  yield 1; \n  yield 2; \n  yield 3;\n  yield 4; \n  yield 5;\n}\nlet generator = generator_function();\nconsole.log(generator.next().value);\nconsole.log(generator.next().value);\nconsole.log(generator.next().value);\nconsole.log(generator.next().value);\nconsole.log(generator.next().value);\nconsole.log(generator.next().done);\n\ngenerator = generator_function();\n\nlet iterable = generator[Symbol.iterator]();\nconsole.log(iterable.next().value);\nconsole.log(iterable.next().value);\nconsole.log(iterable.next().value);\nconsole.log(iterable.next().value);\nconsole.log(iterable.next().value);\nconsole.log(iterable.next().done);\n```", "```js\n1\n2\n3\n4\n5\ntrue\n1\n2\n3\n4\n5\ntrue\n```", "```js\nfunction* generator_function(){ \n  const a = yield 12;\n  const b = yield a + 1; \n  const c = yield b + 2; \n  yield c + 3; // Final Line\n}\nconst generator = generator_function();\nconsole.log(generator.next().value);\nconsole.log(generator.next(5).value);\nconsole.log(generator.next(11).value);\nconsole.log(generator.next(78).value);\nconsole.log(generator.next().done);\n```", "```js\n12\n6\n13\n81\ntrue\n```", "```js\nfunction* generator_function(){ \n yield 1; \n yield 2; \n yield 3;\n}\nconst generator = generator_function();\nconsole.log(generator.next().value);\nconsole.log(generator.return(22).value);\nconsole.log(generator.next().done);\n```", "```js\n1\n22\ntrue\n```", "```js\nfunction* generator_function(){ \ntry { \n yield 1; \n} catch(e) { \n console.log(\"1st Exception\"); \n} \ntry { \n yield 2; \n} catch(e) { \n console.log(\"2nd Exception\"); \n}\n}\nconst generator = generator_function();\nconsole.log(generator.next().value);\nconsole.log(generator.throw(\"exception string\").value);\nconsole.log(generator.throw(\"exception string\").done);\n```", "```js\n1\n1st Exception\n2\n2nd Exception\ntrue\n```", "```js\nfunction* generator_function_1(){ \n yield 2; \n yield 3;\n}\nfunction* generator_function_2(){\n yield 1; \n yield* generator_function_1(); \n yield* [4, 5];\n}\nconst generator = generator_function_2();\nconsole.log(generator.next().value);\nconsole.log(generator.next().value);\nconsole.log(generator.next().value);\nconsole.log(generator.next().value);\nconsole.log(generator.next().value);\nconsole.log(generator.next().done);\n```", "```js\n1\n2\n3\n4\n5\ntrue\n```", "```js\nfunction* generator_function(){ \n yield 1; \n yield 2; \n yield 3; \n yield 4; \n yield 5;\n}\nlet arr = [1, 2, 3];\nfor(let value of generator_function()){ \n console.log(value);\n}\nfor(let value of arr){ \n console.log(value);\n}\n```", "```js\n1\n2\n3\n4\n5\n1\n2\n3\n```", "```js\n\"use strict\";\nfunction _add(x, y){ \n    return x + y;\n}\nfunction add1(x, y){ \n    x = parseInt(x); \n    y = parseInt(y); //tail call \n    return _add(x, y);\n}\nfunction add2(x, y) {\n    x = parseInt(x);\n    y = parseInt(y);\n    //not tail call\n    return 0 + _add(x, y);\n}\nconsole.log(add1(1, '1')); //2\nconsole.log(add2(1, '2')); //3\n```", "```js\n\"use strict\";\nfunction _add(x, y) {\n    return x + y; \n}\n\nfunction add(x, y) {\n x = parseInt(x);\n y = parseInt(y);\n const result = _add(x, y);\n return result;\n}\n\nconsole.log(add(1, '1'));\n```", "```js\nfunction add(x, y){ \n    x = parseInt(x); \n    y = parseInt(y); \n    return _add(x, y);\n}\n```"]