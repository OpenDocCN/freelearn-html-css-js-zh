- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Enhancing Accessibility and Optimizing SEO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to building web applications, we cannot disregard how important
    it is to ensure the applications are accessible to all users. By empowering those
    who rely on assistive technologies such as screen readers, we can further the
    impact our applications have. Not only does making an application available to
    a wider audience bring in more users, but it can also affect **Search Engine Optimization**
    (**SEO**). Therefore, it would be negligent to disregard how SvelteKit can help
    us make our applications accessible from the start.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand how we can best empower our users and how doing so can help boost
    our SEO, we should examine a few concepts. Firstly, we’ll see how the built-in
    compile-time checks can improve the accessibility of our application with little
    configuration on our end. We’ll also see how to best announce route changes, which
    can benefit tools such as screen readers. We’ll then briefly cover a few more
    tips that can benefit accessibility and wrap up with some simple tips for improving
    SEO. We’ll break it all apart into the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Compile-time checks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Announcing routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessibility enhancements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SEO tips
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upon completing this chapter, we’ll have covered the essentials for ensuring
    your SvelteKit applications are accessible to a wide audience. Following the best
    practices outlined here will have the added benefit of improving SEO rankings.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The complete code for this chapter is available on GitHub at: [https://github.com/PacktPublishing/SvelteKit-Up-and-Running/tree/main/chapters/chapter12](https://github.com/PacktPublishing/SvelteKit-Up-and-Running/tree/main/chapters/chapter12)'
  prefs: []
  type: TYPE_NORMAL
- en: Compile-Time Checks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we installed our SvelteKit project, it came with a few opinionated enhancements
    out of the box. Of those enhancements, the compile-time checks can be of particular
    use to warn us of elements that have been poorly formed or are missing attributes.
    Upon making the suggested changes, we’ll notice that these warnings go away.
  prefs: []
  type: TYPE_NORMAL
- en: If you’ve paid attention to the recommendations from `eslint` or the output
    from builds, you may have noticed some warnings referring to `A11y`. This is the
    abbreviated term used for *Accessibility*. It refers to the *A*, the following
    11 characters, and the *y*. In recognizing the importance of making applications
    accessible, the Svelte developers have opted to include sane behaviors by default
    as it contributes to a more open web. Before becoming frustrated with regular
    warnings, consider the convenience of having the application checked for a11y
    errors while not having to seek out our own solutions. Not only does building
    with a11y in mind help users but it also helps developers become better by recognizing
    which patterns are accessible and which are not.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’ve yet to see any of these issues, we can go back to one of our earliest
    examples and remove an `alt` attribute from an `<``img>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: src/routes/+page.svelte
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the only change made is the removal of the `alt` attribute
    from the `<img>` tag at the very end. Most modern editors should alert you directly
    in the file, but if you’re not seeing this warning, you can view it directly in
    the output from the build by running `npm run build` in your terminal. Upon observing
    the `build` output, we will be able to discern the exact location of the problem
    and view a recommended fix.
  prefs: []
  type: TYPE_NORMAL
- en: These warnings don’t only apply to missing attributes on HTML elements either.
    We’ll also be alerted if form labels are associated with a control, if certain
    media types have captions, if attributes are given improper values, and more warnings
    than can be reasonably listed here. For a full list, see the resources at the
    end of this chapter. As we can see, the compile-time a11y checks can be incredibly
    useful in helping developers deliver accessible applications to as many users
    as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Following the advice of compile-time check warnings is not the only way that
    we can improve a11y in our applications. We can also inform users of navigation
    events by updating the title of each page. By announcing route changes in the
    following way, we have the benefit of alerting users of screen readers while maintaining
    client-side navigation.
  prefs: []
  type: TYPE_NORMAL
- en: Announcing routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another strategy for ensuring a11y of our applications includes announcing our
    routes. This effectively means that all of our pages include a title so that screen
    readers can announce the new page to their users. With typical SSR applications,
    navigation consists of each new page being loaded when navigated to. With SvelteKit,
    navigation is handled by the client and so full-page reloads are not always necessary.
    This presents a dilemma for screen readers as they rely on a new title element
    to be present with each link clicked so that the page may be announced to users.
  prefs: []
  type: TYPE_NORMAL
- en: 'To play better with screen readers, we can insert a title into each new page
    we create using the `<``svelte:head>` directive:'
  prefs: []
  type: TYPE_NORMAL
- en: src/routes/+page.svelte
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'On our application landing page, we’ve re-added the `alt` attribute to our
    `<img>` tag, but more importantly, we’ve set the page title to `<svelte:head>`
    tag. Let’s make a similar change in another file so we can observe how this affects
    the browsing experience:'
  prefs: []
  type: TYPE_NORMAL
- en: src/routes/(site)/about/+page.svelte
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In our application’s `<title>` element with the appropriate text and surrounding
    it with `<svelte:head>` tags. These tags place the content within the document
    head. To see how this can affect the browsing experience, open the development
    version of the application and take note of the page title shown in your browser
    on the home page. Then, click **About** and observe how the title shown in the
    browser tab changes.
  prefs: []
  type: TYPE_NORMAL
- en: For screen reader applications, this small change allows them to alert users
    that they have navigated to a new route. Even for users who are not utilizing
    a screen reader, this is a noticeable improvement over the previous text showing
    only the site name. If a user were to bookmark a page on this site, the default
    text would now more accurately reflect the page in question. Not only is this
    helpful addition for all human users but it can also be a big boost to our application’s
    SEO, as many search engines will take into account page titles when indexing posts.
  prefs: []
  type: TYPE_NORMAL
- en: By announcing routes, we can greatly improve the experience of our application
    for its users. Next, let’s take a look at some other small adjustments that can
    make big improvements.
  prefs: []
  type: TYPE_NORMAL
- en: Accessibility enhancements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Not all developers nor all of those who utilize screen readers speak English
    as their primary language. As such, we should be able to adjust our application
    accordingly. Doing so is fairly straightforward and we can vastly improve the
    experience for users of assistive technology around the world by making a small
    note about the language our content is served in. By default, SvelteKit sets the
    language to English but we can quickly adjust it by changing the `lang` attribute
    on the `<html>` element in `src/app.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: src/app.html
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note the `<html>` element at the top of the file with the `lang` attribute set.
    Setting the `lang` attribute to the appropriate language, such as `fr` for French
    or `ar` for Arabic, ensures that screen readers can correctly pronounce or translate
    the content.
  prefs: []
  type: TYPE_NORMAL
- en: One final a11y improvement we can make in our applications is allowing SvelteKit
    to manipulate the focus on HTML elements. Normally, when an application is rendered
    on the server, each new navigation event resets the focus. But in client-side
    rendered applications, the browser may not detect that a navigation event has
    occurred and therefore, focus will persist on whatever the currently focused element
    happens to be. To manage this with a11y in mind, SvelteKit resets focus to the
    `<body>` element – that is, unless an element has the `autofocus` attribute set,
    at which point that element will be given focus. Letting SvelteKit’s behavior
    take control of focus comes with the benefit of letting users of screen readers
    know that a navigation event has occurred.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to making our applications more accessible to a wider audience,
    it doesn’t take much effort on our part. Doing so improves the user experience,
    and all of the aforementioned improvements can also boost SEO rankings.
  prefs: []
  type: TYPE_NORMAL
- en: SEO Tips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Aside from making some small a11y improvements in our application, we can keep
    some other suggestions in mind. Firstly, we should make use of SvelteKit’s **Server-Side
    Rendering** (**SSR**) whenever possible. Doing so ensures the quick delivery of
    the application as well as makes content easier for search engines to parse. Of
    course, many search engines now have the capabilities to index client-side rendered
    content, but the speed and reliability of SSR cannot be discounted. We should
    only disable SSR if we have a valid reason to.
  prefs: []
  type: TYPE_NORMAL
- en: Another useful tip to consider is the performance of our application. For the
    most part, we can rely on Vite to tree-shake unused code out of our builds. Smaller
    bundle sizes mean fewer lines of code to deliver to the client and many search
    engines rank results based on asset delivery times. See the *Resources* section
    at the end of this chapter for tools that can deliver insights into your page
    speeds.
  prefs: []
  type: TYPE_NORMAL
- en: The final useful tip for improving SEO is to leave trailing slashes off route
    names. Having extra slashes can negatively impact page ranks, so unless you have
    a valid reason to, consider leaving the page option `trailingSlash` property alone.
    By following these few tips, we can be sure our SvelteKit application will rank
    highly in search engine results.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to building a successful web application, we must strive to make
    it accessible to all. The reasons for doing so may be purely selfish by attempting
    to capture as much of the market as possible, or egalitarian by trying to include
    users from all walks of the web. It could be that you simply want to be highly
    ranked in search engine results. Whatever the reasons may be, it’s a fairly straightforward
    process with SvelteKit. We’ve seen the warnings provided at compile time and we’ve
    learned about the benefits of both SEO and a11y when it comes to creating unique
    page titles. With a few SEO tips to keep in mind, it’s easy for our accessible
    apps to become known to the world.
  prefs: []
  type: TYPE_NORMAL
- en: Having wrapped up this chapter, we’ve covered nearly everything there is to
    discuss about SvelteKit. However, technology moves quickly so we can never truly
    be finished learning. By the time this book is published, there will likely have
    been more improvements and changes introduced into SvelteKit. To ensure you have
    the latest information, the next chapter will provide more resources, communities,
    and examples that are well worth your time to explore.
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*The A11y Project* – [https://www.a11yproject.com/](https://www.a11yproject.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*MDN Web Docs: Accessibility* – [https://developer.mozilla.org/en-US/docs/Web/Accessibility](https://developer.mozilla.org/en-US/docs/Web/Accessibility)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Svelte Accessibility Warnings* – [https://svelte.dev/docs#accessibility-warnings](https://svelte.dev/docs#accessibility-warnings)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*PageSpeed Insights* – [https://pagespeed.web.dev/](https://pagespeed.web.dev/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Appendix: Examples and Support'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Because learning is a never-ending process and technology moves quickly, this
    final chapter aims to provide you with the resources you’ll need to continue your
    journey with SvelteKit. In the world of web development, it’s rare to see a project
    that doesn’t integrate multiple tools and technologies, so we’ll address how we
    can easily integrate SvelteKit with other frontend tooling. We’ll also see some
    official and community-based resources that are invaluable when it comes to troubleshooting,
    advancing our knowledge, or discovering new components. After that, we’ll wrap
    things up with a thank-you from the author. Let’s finish this book with the following
    sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Integrations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More Reading and Resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrapping up
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Afterward, you’ll have all the tools and knowledge necessary to go forth and
    build cool SvelteKit projects.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The complete code for this chapter is available on GitHub at: [https://github.com/PacktPublishing/SvelteKit-Up-and-Running/tree/tailwind](https://github.com/PacktPublishing/SvelteKit-Up-and-Running/tree/tailwind).'
  prefs: []
  type: TYPE_NORMAL
- en: Integrations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to building modern web applications, it’s not uncommon to use
    a plethora of technologies. Each tool has its place, and it may be the case that
    a developer is more comfortable with a particular frontend framework than they
    are with standard CSS. This is fine, as it can speed up development so long as
    the tools integrate nicely with others. Fortunately for us, SvelteKit works quite
    well with others.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing, Tailwind CSS has become incredibly popular. Tailwind
    CSS aims to reduce the amount of shipped CSS by only extracting that which is
    used. This is great to reduce the amount of assets delivered to clients and speed
    up load times. To showcase how simple it is to integrate a tool such as Tailwind
    CSS in our existing SvelteKit project, let’s work through it. These steps can
    also be found in the official Tailwind CSS documentation. It’s recommended to
    create a new branch in your repository before starting this process, as it will
    break some of our existing styles. If you’re following along with this book’s
    repository, these examples are available on the `tailwind` branch. To begin, we
    can install Tailwind along with a couple of other dependencies using the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, `tailwindcss` will include the necessary tooling to use Tailwind
    CSS within our project. The `postcss` dependency will allow us to manipulate CSS
    files, and `autoprefixer` is a `postcss` plugin that will automatically inject
    the appropriate vendor prefixes into our generated CSS. Once we have added the
    dependencies to our development environment, we can use the following command
    to initialize our Tailwind project. It will create the necessary `tailwind.config.js`
    and `postcss.config.js` files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'After initializing `tailwindcss`, we can open `svelte.config.js` and import
    the `vitePreprocess` module. This will enable us to process `<style>` tags throughout
    our Svelte components:'
  prefs: []
  type: TYPE_NORMAL
- en: svelte.config.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have imported `vitePreprocess`, we can ensure that Tailwind CSS
    knows about the paths to our components. We can do this by updating `tailwind.config.js`,
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: tailwind.config.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Noticeably, we only need to change the paths available in the `content` array
    property to point to our `src/` directory and ensure that the `.svelte` file type
    is recognized, along with other standard file types.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can then create a singular `app.css` file, where we can import all of Tailwind’s
    functionality using the `@``tailwind` directive:'
  prefs: []
  type: TYPE_NORMAL
- en: src/app.css
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If you’ve been paying attention, the next step should be straightforward. We
    then import `src/app.css` into our root layout component:'
  prefs: []
  type: TYPE_NORMAL
- en: src/routes/+layout.svelte
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Of course, we’ve already imported `reset.css`, so there will be conflicts with
    the existing CSS throughout our project. Ensure your development environment is
    running with `npm run dev`. To prevent completely breaking our project, we’ve
    only set the background on the `.content` element to a light orange color provided
    by Tailwind CSS, but we’ll definitely notice other changes applied throughout
    the project. Now would be an excellent time to explore the practice of utility-first
    CSS if you have not yet done so.
  prefs: []
  type: TYPE_NORMAL
- en: 'We saw the manual way of integrating another tool such as Tailwind CSS, but
    we’re talking about SvelteKit, where things just work. If these steps are too
    much to remember, there is a simpler way. Try creating yet another branch based
    off of `main` in your project repository and use the following command to do essentially
    the same thing we just did. Again, if you’re following along with the book repository,
    this code can be found in the `tailwind-add` branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We can follow along with the prompts, and once we’ve installed the dependencies
    with `npm install`, our project will have Tailwind CSS integrated! By using the
    community-maintained `svelte-add` project, we can quickly and easily import templates
    that integrate various technologies with our SvelteKit project. For instance,
    if you prefer to use SCSS/Sass flavors when writing CSS, you can use the `scss`
    custom adder, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, it’s not difficult to incorporate different technologies with
    SvelteKit. While we can incorporate these other toolchains manually, it’s also
    easily done with community-provided resources. Let’s take a look at more community
    resources to see what else is out there!
  prefs: []
  type: TYPE_NORMAL
- en: More Reading and Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As previously demonstrated, the community resources surrounding SvelteKit can
    be excellent to save us time and mental overhead, allowing us to focus on building
    our applications. This book would not have been possible without the community
    around SvelteKit. If you’re looking to expand on your SvelteKit knowledge, assist
    others, or create your own SvelteKit extensions, consider the various resources
    listed next!
  prefs: []
  type: TYPE_NORMAL
- en: SvelteKit Documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The documentation provided on the official SvelteKit website will likely be
    the best resource you’ll find for information about the framework. It’s incredibly
    thorough and constantly updated to reflect changes within the framework. Be sure
    to start here for any questions you may have about SvelteKit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://kit.svelte.dev](https://kit.svelte.dev)'
  prefs: []
  type: TYPE_NORMAL
- en: SvelteKit Tutorial
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To thoroughly test your SvelteKit knowledge and learn more than this book could
    cover, check out the official SvelteKit tutorial:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://learn.svelte.dev/tutorial](https://learn.svelte.dev/tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: Svelte and SvelteKit chat
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a question or just want to chat with others that are using SvelteKit?
    The official Discord server is the place to go:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://svelte.dev/chat](https://svelte.dev/chat)'
  prefs: []
  type: TYPE_NORMAL
- en: Independent Creators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are too many great writers and creators working with SvelteKit to list
    here, but a couple of this author’s favorites are Rodney Johnson and Josh Collinsworth.
    Collinsworth provides the excellent SvelteKit static blog starter template we
    saw in [*Chapter 8*](B19024_08_Final_AM.xhtml#_idTextAnchor106), and Johnson creates
    informative tutorial videos and articles:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Rodney Johnson: https://rodneylab.com/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Josh Collinsworth: [https://joshcollinsworth.com/](https://joshcollinsworth.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Svelte Society
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When it comes to finding Svelte and SvelteKit community resources, Svelte Society
    has you covered, whether you’re looking for templates, components, adders, or
    more. They even organize Svelte events, so if you’re looking to meet other Svelte
    developers in your area, you should start here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://sveltesociety.dev/](https://sveltesociety.dev/)'
  prefs: []
  type: TYPE_NORMAL
- en: SvelteKit Repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As with many open source projects, the code behind SvelteKit is freely available
    to view on GitHub. If you believe you’ve found a bug specific to the framework,
    consider searching the issues here, and if you don’t see your problem listed,
    contribute by submitting it! SvelteKit developers constantly accept pull requests
    and appreciate any help they can get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/sveltejs/kit](https://github.com/sveltejs/kit)'
  prefs: []
  type: TYPE_NORMAL
- en: As with many open source projects, the community and documentation can make
    or break a project. Because of the excellent support behind SvelteKit, it’s hard
    to imagine a future where people don’t constantly evangelize about SvelteKit and
    Svelte.
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you’ve made it this far, then thank you for staying with me. I hope the material
    and knowledge provided here can be of assistance with your SvelteKit projects.
    If you’ve enjoyed this book, then do share it with friends, colleagues, and acquaintances
    who are interested in learning a new JS framework. As this is my first book, it’s
    certainly been a journey for me, and I’ve learned much about the writing process.
    If you’re interested in finding more technical texts by me, I write at https://www.closingtags.com
    about web development and web-adjacent technologies. If you build something cool
    with SvelteKit, I’d love to hear about it. I can be reached via the contact form
    on my website. Thanks again, and I look forward to seeing what you build.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That’s it, you’ve finished the book! If you still have questions about the various
    workings of SvelteKit, look into the previously provided community resources.
    You’ll find everything necessary to expand your SvelteKit knowledge and see what
    others in the community are doing. Because SvelteKit integrates so well with many
    other tools, it should be a breeze to incorporate it with your existing workflows.
    I look forward to seeing what you build with it. Thanks again!
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tailwind CSS: [https://tailwindcss.com](https://tailwindcss.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Svelte Add: [https://github.com/svelte-add/svelte-add](https://github.com/svelte-add/svelte-add)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
