- en: 'Chapter 11. Finishing Up: Debugging Your App'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The debugging process can require a considerable amount of time during the development
    process. There may be unforeseen behavior, edge cases, and even typos that need
    to be found and resolved. For that reason, it is necessary to optimize as much
    as possible and the most important first step is in selecting the right tools.
    Any development process has to involve testing and debugging; even if your application
    is working perfectly as expected you should execute test cases and analyze performance
    to ensure its integrity as you make it evolve and introduce new features. This
    chapter covers a series of tools for debugging and analyzing performance in your
    enterprise applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What to look for
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which tools to use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing with HTML and CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step by step with JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile debugging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web debugging proxies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What to look for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The debugging process on the client focuses on elements interpreted by a browser.
    Unless we are using an external plugin (like the Adobe Flash Player), we need
    to debug:'
  prefs: []
  type: TYPE_NORMAL
- en: HTML to find incorrect styles or test changes in our tag structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS to verify correctness of styles or test changes on them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript to validate code execution, find possible errors, or test changes
    in our code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, we should test the load time of assets (`media`, `html`, `css`,
    and `js` files) and execution time of JavaScript (profiling).
  prefs: []
  type: TYPE_NORMAL
- en: Which tools to use
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most modern browsers now provide tools for debugging web applications. Because
    cross-browser compatibility is important, we need to know how they work. In general,
    every debugger gives you the ability to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Inspect and modify HTML in real time and select visual elements on the page
    and show its equivalents in HTML code (**HTML** | **Elements**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inspect and modify CSS in real time (**HTML** |**Elements** or **CSS** | **Resources**
    | **Style**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inspect and modify (or declare) JavaScript in real time and create breakpoints
    to stop code execution and inspect step by step (**Console** | **Script** | **Sources**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analysis of loading time of each asset (**Network** | **Net** | **Timeline**
    | **Instrument**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let us take a look at some of the most popular browsers'' debugging tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Which tools to use](img/5689_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Firefox 15.0.1 Firebug (plugin)
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Firebug plugin is not installed by default on Firefox. You will need to
    go to [http://getfirebug.com/](http://getfirebug.com/) and click on **Install
    Firebug** from Firefox.
  prefs: []
  type: TYPE_NORMAL
- en: '![Which tools to use](img/5689_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Chrome 22.0.1229.79 Developer Tools
  prefs: []
  type: TYPE_NORMAL
- en: For our purposes and because it is one of the most robust tools, we are going
    to walk through the Firebug plugin for Firefox. Many of the same basic concepts
    (HTML inspection, script debugging, use of the console) exist in the developer
    tools provided in other browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are many debugging tools available for Internet Explorer in particular.
    In addition to the Developer Tools included in Internet Explorer 8 and 9, there
    is DebugBar ([http://www.debugbar.com/](http://www.debugbar.com/)) and dynaTrace
    ([http://www.compuware.com/application-performance-management/ajax-performance-testing.html](http://www.compuware.com/application-performance-management/ajax-performance-testing.html)).
  prefs: []
  type: TYPE_NORMAL
- en: Playing with HTML and CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Firebug, you can explore your HTML DOM objects using the **HTML** tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Playing with HTML and CSS](img/5689_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Hovering on each tag, it is possible to see its corresponding rendered element
    highlighted. If you decide to navigate through the rendered page, you can click
    on the Inspect button.
  prefs: []
  type: TYPE_NORMAL
- en: '![Playing with HTML and CSS](img/5689_11_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Inspect button allows you to select areas of the rendered page to see the
    corresponding HTML code.
  prefs: []
  type: TYPE_NORMAL
- en: '![Playing with HTML and CSS](img/5689_11_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By clicking on **Edit**, it is possible to modify your HTML code within the
    browser itself. Of course, you are not modifying the page itself but rather the
    browser's local copy. The rendered page changes automatically as a result of the
    modifications. This is very useful in trying out changes to your HTML structure
    and getting instant feedback before implementing them in your code.
  prefs: []
  type: TYPE_NORMAL
- en: The right-hand side panel allows us to view styles of the DOM object selected,
    including references to the file and line number (in the right-hand side highlighted
    in blue). The **Style** tab groups the styles by priority; you can modify or create
    properties or modify selectors in this tab with a double-click.
  prefs: []
  type: TYPE_NORMAL
- en: '![Playing with HTML and CSS](img/5689_11_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Computed** lists the computed styles, which are a merger of browser, user,
    and author-applied styles where relative values are calculated. For example, if
    a `div` tag has a style of `width:50%`, and it is surrounded by a `div` set to
    `width:760px`, then the computed style will be `width:380px`.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Playing with HTML and CSS](img/5689_11_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Layout** displays a graphic representation of the padding, border, and margin
    applied based on the CSS box model.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Playing with HTML and CSS](img/5689_11_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**DOM** shows the selected DOM''s object properties. There is a wealth of information
    here including the `document` object as a "browseable" tree and the ability to
    see the JavaScript global namespace to see which objects have been loaded.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Playing with HTML and CSS](img/5689_11_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use the **CSS** tab to modify your styles as they are in each `css`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Step by step with JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Script** tab allows you to inspect all JavaScript files used.
  prefs: []
  type: TYPE_NORMAL
- en: '![Step by step with JavaScript](img/5689_11_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After selecting the file that you wish to inspect, you can execute a step-by-step
    execution of your JavaScript code. Find the line where you want to stop and click
    on the line number to create a breakpoint. A graphic representing the breakpoint
    will appear.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Minified JavaScript files will generally show up as a single line when viewed
    in the **Script** tab. It is useful to include "unminified" files in debug versions
    of your page.
  prefs: []
  type: TYPE_NORMAL
- en: '![Step by step with JavaScript](img/5689_11_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now refresh the browser and you will see how the execution stops on that line.
  prefs: []
  type: TYPE_NORMAL
- en: '![Step by step with JavaScript](img/5689_11_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The right-hand side panel will show you variables available in the present scope.
    You can use this to change variable values, input your own variables, or check
    expressions.
  prefs: []
  type: TYPE_NORMAL
- en: '![Step by step with JavaScript](img/5689_11_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the top-right corner you will find controls to continue code execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step by step with JavaScript](img/5689_11_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The play symbol continues the code execution, the small yellow arrow pointing
    down continues execution to the next line and will enter a function if one is
    invoked, the large yellow arrow pointing down continues execution to the next
    line in the current execution context and passes over functions that are invoked,
    and the last yellow arrow steps out of a function. Of course, you can always hover
    over each button to get this information as there is usually a tool tip for each
    button. This allows you to control how you want to step through your code. You
    can stop by placing a breakpoint where you want to understand how a particular
    block of code is evaluating. You can then step through each line of code thereafter,
    executing method invocations you are not concerned about or stepping out entirely
    to a calling method. At each step, you can see what variables get set, what is
    available in the current scope, and really get a sense for what your code is doing.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript console
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Console** tab logs JavaScript errors, warnings, and Ajax calls. You can
    force your code to write to the console using the following in your JavaScript
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This is particularly useful for writing messages out to understand how your
    code is executing. You can write debug statements to show particular variable
    values or just indicate that a specific block is executing. You can print objects
    too and inspect them in Firebug.
  prefs: []
  type: TYPE_NORMAL
- en: The console object includes other useful debugging methods such as `info()`,
    `warn()`, and `error()` to give you more enhanced debugging feedback.
  prefs: []
  type: TYPE_NORMAL
- en: '![JavaScript console](img/5689_11_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is good practice to remove or comment out all `console` calls in your code
    when you deploy to production as some browsers do not support it and will break
    and stop execution entirely. One solution for this is to create a script that
    removes these lines and include it in your build process. Oftentimes, such a script
    also packages and minifies your code.
  prefs: []
  type: TYPE_NORMAL
- en: An interesting feature of the console is that it lets you write code and execute
    it in real time. You can find a prompt at the bottom that allows you to enter
    code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us say you want to print all images inside the object with the `movies-near-me`
    ID, you can write this in your console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![JavaScript console](img/5689_11_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Analyzing load times
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Net** tab compiles all network calls including status, domain, file size,
    IP, and load time. You can use this section to verify where performance problems
    lie.
  prefs: []
  type: TYPE_NORMAL
- en: '![Analyzing load times](img/5689_11_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: JavaScript profiling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Console** tab provides a profile tool to analyze performance of our JavaScript
    code. To execute a profile, click on the **Profile** button, then execute your
    JavaScript action (or refresh the page if you want to profile the main JavaScript
    execution) and click on the **Profile** button again.
  prefs: []
  type: TYPE_NORMAL
- en: '![JavaScript profiling](img/5689_11_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: No need to worry if the functions are registered as **anonymous**. The **File**
    field gives the exact line of code.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Debugging HTML, CSS, and JavaScript can be painful in mobile web applications,
    particularly if we are using a touch device. Remote debugging provides a way to
    test your enterprise web applications in mobile devices using your desktop or
    laptop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chrome supports remote debugging via USB for Android devices: [https://developers.google.com/chrome/mobile/docs/debugging](https://developers.google.com/chrome/mobile/docs/debugging).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Firefox 15 introduces remote debugging for Android too: [https://hacks.mozilla.org/2012/08/remote-debugging-on-firefox-for-android/](https://hacks.mozilla.org/2012/08/remote-debugging-on-firefox-for-android/)'
  prefs: []
  type: TYPE_NORMAL
- en: Previous to Version 6, iOS devices had a simple interface inside the device
    for debugging.
  prefs: []
  type: TYPE_NORMAL
- en: '![Mobile debugging](img/5689_11_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Safari 6.0.1 (Mac only) and iOS 6 support remote debugging. To start remote
    debugging in any iOS 6:'
  prefs: []
  type: TYPE_NORMAL
- en: In the device (iPhone, iPad, or iPod) go to **Settings** | **Safari** | **Advanced**
    and enable the **Web Inspector** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open Safari in a Mac computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the web application to debug using Safari in your iOS device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the device to your Mac computer using a USB cable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you don't have the **Develop** menu item on Safari (Mac), open **Safari**
    | **Preferences** | **Advanced** and check **Show Develop menu in the menu bar**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Go to Develop** | **Device name** and then choose the **web application**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now see a web inspector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is also an online tool called JConsole, which allows you to remotely control
    and debug browsers in other windows and even devices. It works by giving you a
    script reference to include in the application you are debugging. It then provides
    a console to which you can send `console.log` messages and other debugging information.
    More information can be found at [http://jsconsole.com/remote-debugging.html](http://jsconsole.com/remote-debugging.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Web debugging proxies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A proxy is a piece of hardware that acts as an intermediary between the client
    and server. Application of software proxies as a way to debug web applications
    is a widely used practice, the main purpose of which involves inspecting data
    from requests and viewing the server responses.
  prefs: []
  type: TYPE_NORMAL
- en: On the Windows platform, we recommend Fiddler. It can be found at [http://www.fiddler2.com/fiddler2/](http://www.fiddler2.com/fiddler2/).
    If you are using a Mac, you can use Charles, which is found at [http://www.charlesproxy.com/](http://www.charlesproxy.com/).
    Both are web proxies that record the communication between server and client.
  prefs: []
  type: TYPE_NORMAL
- en: 'Simply open the application, turn on the capture, and load your web application.
    Here you can see Charles capturing MovieNow requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Web debugging proxies](img/5689_11_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It is possible to simulate responses using proxies as well. For example, in
    Charles you can go to **Tools** and then **Map Local...** to use local files or
    services as the response to your application. You can use **Rewrite...** in the
    same menu to modify part of a response and send it back to your application. This
    is a valuable feature for testing edge cases.
  prefs: []
  type: TYPE_NORMAL
- en: '![Web debugging proxies](img/5689_11_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want to use Charles with an iOS device and carry out remote debugging,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Get your Mac IP using the `ipconfig getifaddr en1.` command in Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate the option **Enable Mac OS X Proxy** in the **Proxy** menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect your iOS device to the same network used by your Mac computer running
    Charles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In your iOS device, go to **Settings** | **Wi-Fi** and click on the blue arrow
    for your connection and in the **HTTP Proxy** section insert your Mac IP and the
    port used by Charles (by default it is 8888).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to Safari in your iOS device and navigate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A warning should show in Charles informing you that a new connection has been
    attempted. Click on **Allow**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you should be able to record your traffic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered useful debugging tools including mobile and web
    proxies as well as ways of manipulating HTML, CSS, and JavaScript in the browser
    in order to debug our applications. As developers, it is good practice for us
    to understand all the available options for debugging our code. While debugging
    errors that happen only in one browser, we must pay special attention to the technical
    restrictions and features of that browser because these limitations are often
    the cause. For example, complicated JavaScript code can be slow in browsers like
    Internet Explorer 7\. Using the tools available for that browser gives us insight
    into the internals of that browser and thus knowledge about preventing bugs in
    the future.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will go over testing tools and frameworks for enterprise
    application projects and the advantages of automated functional testing.
  prefs: []
  type: TYPE_NORMAL
