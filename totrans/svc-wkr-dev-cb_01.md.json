["```js\ntry {\n  var value = Fn();\n  console.log(value);\n} catch(err) {\n  console.log(err);\n}\n```", "```js\nFn().then(function(value) {\n  console.log(value);\n  }).catch(function(err) {\n  console.log(err);\n});\n```", "```js\n    Inetmgr\n\n    ```", "```js\n    $ sudo apachectl start\n\n    ```", "```js\n    $ sudo vim /etc/apache2/httpd.conf\n\n    ```", "```js\n    LoadModule socache_shmcb_module libexec/apache2/mod_socache_shmcb.so\n    ...\n    LoadModule ssl_module libexec/apache2/mod_ssl.so\n    ...\n    Include /private/etc/apache2/extra/httpd-ssl.conf\n    ```", "```js\n    $ sudo vim /etc/apache2/extra/httpd-vhosts.conf\n\n    ```", "```js\n    <VirtualHost *:80>\n           DocumentRoot \"/Library/WebServer/Documents\"\n        ServerName localhost\n        SSLEngine on\n        SSLCertificateFile \"/private/etc/apache2/localhost.crt\"\n        SSLCertificateKeyFile \"/private/etc/apache2/localhost.key\"\n    </VirtualHost>\n    ```", "```js\n    $ cd /etc/apache2\n\n    ```", "```js\n    $ sudo openssl genrsa -out localhost-key.pem 1024\n\n    ```", "```js\n    $ sudo openssl req -new -key localhost-key.pem -out localhost.csr\n\n    ```", "```js\n    $ sudo openssl x509 -req -days 365 -in localhost.csr -signkey \n    localhost-key.pem -out localhost.crt\n\n    ```", "```js\n    $ sudo openssl rsa -in localhost-key.pem -out localhost.key\n\n    ```", "```js\n    $ sudo vim /etc/apache2/extra/httpd-ssl.conf\n\n    ```", "```js\n    $ sudo apachectl configtest\n\n    ```", "```js\n    $ sudo apachectl -k restart\n\n    ```", "```js\n    $ git  clone https://github.com/username/username.github.io\n\n    ```", "```js\n    $ cd username.github.io\n\n    ```", "```js\n    $ mkdir service-workers\n\n    ```", "```js\n    $ echo \"Service Workers\" > index.html\n\n    ```", "```js\n    $ git add --all\n    $ git commit -m \"initial commit\"\n    $ git push -u origin master\n\n    ```", "```js\n    <!DOCTYPE html>\n      <html lang=\"en\">\n       <head></head>\n           <body>\n           <p>Registration status: <strong id=\"status\"></strong></p>\n           <script>\n              if ('serviceWorker' in navigator) {\n               navigator.serviceWorker.register(\n                  'service-worker.js',\n                  { scope: './' }\n                ).then( function(serviceWorker) {\n                  document.getElementById('status').innerHTML =\n                        'successful';\n                  }).catch(function(error) {\n                      document.getElementById('status').innerHTML = error;\n                  });\n              } else {\n                    document.getElementById('status').innerHTML = \n               'unavailable';\n                }\n    </script>\n    </body>\n    </html>\n    ```", "```js\nserviceWorker.unregister().then(function() {\n    document.getElementById('status').innerHTML = 'unregistered';\n})\n```", "```js\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Detailed Registration</title>\n    </head>\n    <body>\n      <p>Registration status: <strong id=\"status\"></strong></p>\n      <p>State: <strong id=\"state\"></strong></p>\n\n      <script>\n        function printState(state) {\n          document.getElementById('state').innerHTML = state;\n        }\n\n        if ('serviceWorker' in navigator) {\n\n          navigator.serviceWorker.register(\n            'service-worker.js',\n            { scope: './' }\n          ).then( function(registration) {\n            var serviceWorker;\n\n            document.getElementById('status').innerHTML = 'successful';\n\n            if (registration.installing) {\n              serviceWorker = registration.installing;\n              printState('installing');\n            } else if (registration.waiting) {\n              serviceWorker = registration.waiting;\n              printState('waiting');\n            } else if (registration.active) {\n              serviceWorker = registration.active;\n              printState('active');\n            }\n\n            if (serviceWorker) {\n              printState(serviceWorker.state);\n\n              serviceWorker.addEventListener('statechange', function(e) {\n                printState(e.target.state);\n              });\n            }\n          }).catch(function(error) {\n            document.getElementById('status').innerHTML = error;\n          });\n        } else {\n            document.getElementById('status').innerHTML = 'unavailable';\n          }\n      </script>\n    </body>\n    </html>\n    ```", "```js\n    self.addEventListener('install', function(e) {\n      console.log('Install Event:', e);\n    });\n\n    self.addEventListener('activate', function(e) {\n      console.log('Activate Event:', e);\n    });\n    ```", "```js\n if (registration.installing) {\n          serviceWorker = registration.installing;\n          printState('installing');\n        } else if (registration.waiting) {\n          serviceWorker = registration.waiting;\n          printState('waiting');\n        } else if (registration.active) {\n          serviceWorker = registration.active;\n          printState('active');\n        }\n```", "```js\nif (serviceWorker) {\n          printState(serviceWorker.state);\n\n          serviceWorker.addEventListener('statechange', function(e) {\n            printState(e.target.state);\n          });\n        }\n```", "```js\nself.addEventListener('install', function(e) {\n  console.log('Install Event:', e);\n});\n\nself.addEventListener('activate', function(e) {\n  console.log('Activate Event:', e);\n});\n```", "```js\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Stale on Error</title>\n    </head>\n    <body>\n      <p>Registration status: <strong id=\"status\"></strong></p>\n      <script>\n        if ('serviceWorker' in navigator) {\n          navigator.serviceWorker.register(\n            'service-worker.js',\n            { scope: './' }\n          ).then( function(serviceWorker) {\n            document.getElementById('status').innerHTML = \n            'successful';\n          }).catch(function(error) {\n            document.getElementById('status').innerHTML = error;\n          });\n\n        } else {\n            document.getElementById('status').innerHTML = \n            'unavailable';\n          }\n      </script>\n    </body>\n    </html>\n    ```", "```js\n    var version = 1;\n    var cacheName = 'stale- ' + version;\n\n    self.addEventListener('install', function(event) {\n        self.skipWaiting();\n    });\n\n    self.addEventListener('activate', function(event) {\n        if (self.clients && clients.claim) {\n            clients.claim();\n        }\n    });\n\n    self.addEventListener('fetch', function(event) {\n\n        event.respondWith(\n            fetch(event.request).then(function(response) {\n                caches.open(cacheName).then(function(cache) {\n\n                    if(response.status >= 500) {\n                        cache.match(event.request).\n    \t\t\t\t\tthen(function(response) {\n\n                            return response;\n                        }).catch(function() {\n\n                            return response;\n                        });\n                    } else {\n                          cache.put(event.request, response.clone());\n                        return response;\n                    }\n                });\n            })\n        );\n    });\n    ```", "```js\nevent.respondWith(\n        fetch(event.request).then(function(response) {\n```", "```js\nif(response.status >= 500) {\n                    cache.match(event.request).\n\t\t\t\t\tthen(function(response) {\n                        // Return stale version from cache\n                        return response;\n})\n```", "```js\n}).catch(function() {\n\nreturn response;\n});\n```", "```js\n} else {\ncache.put(event.request, response.clone());\n   return response;\n}\n```", "```js\nfetch(url).then(function (response) {\n  return cache.put(url, response);\n});\n```", "```js\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Detailed Registration</title>\n    </head>\n    <body>\n      <p>Network status: <strong id=\"status\"></strong></p>\n      <div id=\"request\" style=\"display: none\">\n        <input id=\"long-url\" value=\"https://www.packtpub.com/\" size=\"50\">\n          <input type=\"button\" id=\"url-shorten-btn\" value=\"Shorten URL\" />\n        </div>\n        <div>\n          <input type=\"checkbox\" id=\"mock-checkbox\" checked>Mock Response</input>\n        </div>\n        <div>\n          <br />\n          <a href=\"\" id=\"short-url\"></a>\n        </div>\n      </div>\n\n      <script>\n        function printStatus(status) {\n          document.getElementById('status').innerHTML = status;\n        }\n\n        function showRequest() {\n          document.getElementById('url-shorten-btn')\n          .addEventListener('click', sendRequest);\n          document.getElementById('request').style.display = 'block';\n        }\n\n        function sendRequest() {\n          var xhr = new XMLHttpRequest(),\n            request;\n\n                xhr.open('POST',\n                'https://www.googleapis.com/urlshortener/v1/url?' +\n                'key=[Your API Key]');\n          xhr.setRequestHeader('Content-Type', 'application/json');\n\n          if (document.getElementById('mock-checkbox').checked) {\n                    xhr.setRequestHeader('X-Mock-Response', 'yes');\n          }\n\n          xhr.addEventListener('load', function() {\n            var response = JSON.parse(xhr.response);\n            var el = document.getElementById('short-url');\n\n            el.href = response.id;\n            el.innerHTML = response.id;\n          });\n\n          request = {\n            longUrl: document.getElementById('long-url').value\n          };\n\n          xhr.send(JSON.stringify(request));\n        }\n\n        if ('serviceWorker' in navigator) {\n\n          navigator.serviceWorker.register(\n            'service-worker.js',\n            { scope: './' }\n          ).then( function(registration) {\n            if (navigator.serviceWorker.controller) {\n                printStatus('The service worker is currently handling ' + \n                'network operations.');\n                showRequest();\n            } else {\n                printStatus('Please reload this page to allow the ' + 'service worker to handle network operations.');\n                  }\n          }).catch(function(error) {\n            document.getElementById('status').innerHTML = error;\n          });\n        } else {\n                   document.getElementById('status').innerHTML = 'unavailable';\n              }\n      </script>\n    </body>\n    </html>\n    ```", "```js\n    self.addEventListener('fetch', function(event) {\n      console.log('Handling fetch event for', event.request.url);\n      var requestUrl = new URL(event.request.url);\n\n      if (requestUrl.pathname === '/urlshortener/v1/url' &&\n          event.request.headers.has('X-Mock-Response')) {\n\n        var response = {\n          body: {\n            kind: 'urlshortener#url',\n            id: 'http://goo.gl/IKyjuU',\n            longUrl: 'https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html'\n          },\n          init: {\n            status: 200,\n            statusText: 'OK',\n            headers: {\n              'Content-Type': 'application/json',\n              'X-Mock-Response': 'yes'\n            }\n          }\n        };\n\n        var mockResponse = new Response(JSON.stringify(response.body),  \n            response.init);\n\n        console.log('Responding with a mock response body:', \n            response.body);\n        event.respondWith(mockResponse);\n      }\n    });\n    ```", "```js\nif (navigator.serviceWorker.controller) {\nprintStatus('The service worker is currently handling \nnetwork operations.');\n…\n}\n```", "```js\nfunction showRequest() {\n   document.getElementById('url-shorten-btn')\n.addEventListener('click', sendRequest);\n   document.getElementById('request').style.display = 'block';\n}\n```", "```js\nxhr.open('POST',\n        'https://www.googleapis.com/urlshortener/v1/url?' +\n  'key=[Your API Key]');\n```", "```js\nif (document.getElementById('mock-checkbox').checked) {\n      xhr.setRequestHeader('X-Mock-Response', 'yes');\n    }\n```", "```js\nxhr.addEventListener('load', function() {\nvar response = JSON.parse(xhr.response);\nvar el = document.getElementById('short-url');\n\n   el.href = response.id;\n   el.innerHTML = response.id;\n});\n```", "```js\nrequest = {\n        longUrl: document.getElementById('long-url').value\n      };\nxhr.send(JSON.stringify(request));\n```", "```js\nif (requestUrl.pathname === '/urlshortener/v1/url' &&\n    event.request.headers.has('X-Mock-Response')) {\n…\n   }\n```", "```js\n   var response = {\n      body: {\n        kind: 'urlshortener#url',\n        id: 'https://goo.gl/KqR3lJ',\n        longUrl: 'https://www.packtpub.com/books/info/packt/about'\n      },\n      init: {\n        status: 200,\n        statusText: 'OK',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Mock-Response': 'yes'\n        }\n      }\n    };\n```", "```js\nvar mockResponse = new Response(\nJSON.stringify(response.body), response.init);\n\nconsole.log('Mock Response: ', response.body);\nevent.respondWith(mockResponse);\n```", "```js\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Request Timeouts</title>\n    </head>\n    <body>\n      <p>Registration status: <strong id=\"status\"></strong></p>\n\n      <script>\n        if ('serviceWorker' in navigator) {\n          navigator.serviceWorker.register(\n            'service-worker.js',\n            { scope: './' }\n          ).then(function(serviceWorker) {\n            document.getElementById('status').innerHTML = 'successful';\n    });\n        } else {\n          document.getElementById('status').innerHTML = 'unavailable';\n        }\n      </script>\n      <script src=\"img/jquery-2.2.0.js\"></script>\n    </body>\n    </html>\n    ```", "```js\n    function timeout(delay) {\n        return new Promise(function(resolve, reject) {\n            setTimeout(function() {\n                resolve(new Response('', {\n                    status: 408,\n                    statusText: 'Request timed out.'\n                }));\n            }, delay);\n        });\n    }\n\n    self.addEventListener('install', function(event) {\n        self.skipWaiting();\n    });\n\n    self.addEventListener('activate', function(event) {\n        if (self.clients && clients.claim) {\n            clients.claim();\n        }\n    });\n\n    self.addEventListener('fetch', function(event) {\n      if (/\\.js$/.test(event.request.url)) {\n        event.respondWith(Promise.race([timeout(400), fetch(event.request.url)]));\n      } else {\n        event.respondWith(fetch(event.request));\n      }\n    });\n    ```", "```js\n<script src=\"img/jquery-2.2.0.js\"></script>\n```", "```js\nself.addEventListener('install', function(event) {\n    self.skipWaiting();\n});\n```", "```js\nself.addEventListener('activate', function(event) {\n    if (self.clients && clients.claim) {\n        clients.claim();\n    }\n});\n```", "```js\nself.addEventListener('fetch', function(event) {\n  if (/\\.js$/.test(event.request.url)) {\n    event.respondWith(Promise.race([timeout(400), fetch(event.request.url)]));\n  } else {\n    event.respondWith(fetch(event.request));\n  }\n});\n```", "```js\nvar p1 = new Promise(function(resolve, reject) { \n    setTimeout(resolve, 400, \"one\"); \n});\nvar p2 = new Promise(function(resolve, reject) { \n    setTimeout(reject, 100, \"two\");\n});\n\nPromise.race([p1, p2]).then(function(value) {\n  // Not called              \n}, function(reason) {\n  console.log(reason); // \"two\"\n  // p2 is faster, so it rejects\n});\n```"]