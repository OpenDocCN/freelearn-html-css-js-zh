- en: 'Chapter 5. The App: Displaying Movie Data via CSS3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We already added some styles to our enterprise application using CSS in [Chapter
    3](ch03.html "Chapter 3. The App: Structure and Semantics"), *The App: Structure
    and Semantics*, but we have not introduced the properties that make CSS3 a game
    changer. In this chapter, we will run through some useful CSS3 properties and
    practical implementations for our application explaining the scope of them in
    any web application.'
  prefs: []
  type: TYPE_NORMAL
- en: Each example will feature support (and fallback when it is needed) for the most
    popular web browsers in the market.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main topics covered in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Back to the browsers' babel tower
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CSS Magic: Adding more styles to MovieNow (rounded corners, color, gradients,
    box shadows, text shadows)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Movies and styles (transitions and animations)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing between transitions and animations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using media queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying CSS3 selectors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Back to the browsers' babel tower
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever you start using a new CSS property, it is necessary to check the list
    of browsers that support it. If it is supported, you need to verify how to implement
    it and if it requires a prefix or a special form such as `filter` in Internet
    Explorer.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the most common prefixes for CSS properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-moz-` Firefox'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-webkit-` Safari, Safari iOS, and Chrome'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-o-` Opera'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-ms-` Internet Explorer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Workarounds when you do not have support of any property include use of images
    and removal of some visuals (following graceful degradation and trying to avoid
    the removal of features).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We could use a JavaScript library such as Lea Verou's -prefix-free ([http://leaverou.github.com/prefixfree/](http://leaverou.github.com/prefixfree/))
    to avoid the use of multiple vendor prefixes, but this can affect our application's
    performance. As a general rule CSS is almost always faster (execution time) than
    JavaScript, so performance-wise a couple of lines more in our stylesheet is worth
    the effort.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we saw in [Chapter 3](ch03.html "Chapter 3. The App: Structure and Semantics"),
    *The App: Structure and Semantics*, it is possible to add conditional CSS imports.
    This technique only works for Internet Explorer and you can compare versions using
    the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '`lt` (less than)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lte` (less than or equal to)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gt` (greater than)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gte` (greater than or equal to)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, if you want to add a specific CSS file for Internet Explorer 7
    and previous versions, you can use the following declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: It is good practice to include Internet Explorer specific hacks and fallbacks
    in a separate stylesheet in order to achieve clear coding and avoid extra loading
    time in other browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To add support for common CSS3 features such as border-radius and box-shadow,
    you can include CSS3 Pie ([http://css3pie.com](http://css3pie.com)), a JavaScript
    library that adds support to these features for Internet Explorer 6 to 9.
  prefs: []
  type: TYPE_NORMAL
- en: CSS3 Magic – adding more styles to MovieNow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us continue with our movie application development. As a general rule, you
    should plan in advance or, in other words, have a visual design before beginning
    to mess around with styles. A benefit of following this rule (and preferably having
    a style guide as well) is that your application will reflect a unified visual
    identity. Let us start styling some elements that we already know in our enterprise
    application.
  prefs: []
  type: TYPE_NORMAL
- en: We removed our **Find Movies** button to make an automatic call later.
  prefs: []
  type: TYPE_NORMAL
- en: Adding rounded corners
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you had to create rounded corners with CSS1 and CSS2, you should know how
    complicated the possible solutions for rounded corners were. Generally, they involve
    images or heavy processing JavaScript affecting the performance of your enterprise
    application.
  prefs: []
  type: TYPE_NORMAL
- en: In CSS3, we have the `border-radius` property that allows us to specify rounded
    shapes for the four borders of the element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax of this property is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can specify `%`, `em`, and `px` as units for each corner.
  prefs: []
  type: TYPE_NORMAL
- en: Supposing that we need to add rounded borders to the bottom of our **Top 5 Box
    Office** section. We can use the `border-radius` property (and its equivalents
    with prefixes for each browser) using `0` for `top left` and `right`, and `8px`
    for `bottom left` and `right`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Applying this, we can see the difference between the original Box Office (left)
    and the `border-radius` one (right).
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding rounded corners](img/5689_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that if we use shorthand `border-radius:0 8px`, it adds round borders
    for top-right and bottom-left corners only.
  prefs: []
  type: TYPE_NORMAL
- en: This property is shorthand for `border-top-left-radius`, `border-top-right-radius`,
    `border-bottom-left-radius`, and `border-bottom-right-radius` properties.
  prefs: []
  type: TYPE_NORMAL
- en: Sadly, in the case of Internet Explorer, the property is supported only since
    IE9.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As an alternative, you can use CSS3 Pie ([http://css3pie.com](http://css3pie.com))
    or Curved Corner ([http://code.google.com/p/curved-corner/)](http://code.google.com/p/curved-corner/))
    to give support for previous versions of Internet Explorer.
  prefs: []
  type: TYPE_NORMAL
- en: Setting color
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are multiple ways to describe colors inside our stylesheets; the most
    common one is the hexadecimal `#rrggbb` where the first pair represents the numeric
    value of red, the second pair represents green, and the last one blue. Additionally,
    we can use a shorthand notation `#rgb` that will convert our value to `#rrggbb`,
    for example, if we use `#123` that will be recognized as `#112233`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us go over other ways to describe colors:'
  prefs: []
  type: TYPE_NORMAL
- en: Red, green, and blue
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can define a color using the syntax `rgb(R,G,B)` where R, G, and B indicate
    the intensity of the colors red, green, and blue and can be:'
  prefs: []
  type: TYPE_NORMAL
- en: An integer from 0 (no color) to 255 (max intensity)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A float 0.0% (no color) to 100.0% (max intensity)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You must use the same units inside the declaration. It is supported in all
    modern browsers. Here is a class `title` with red fonts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Red, green, blue, and alpha
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'An extended specification of `rgb` that adds a value at the end for alpha transparency
    uses values from `0.0` (invisible) to `1.0` (completely visible). It is supported
    in all modern browsers and Internet Explorer since Version 9\. We can define a
    red color for fonts in our class `title` with 50 percent of alpha transparency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Hue, saturation, and lightness
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'HSL is a cylindrical-coordinate representation of colors. `vHue` is a floating
    point representation of an angle; this value defines the color on which saturation
    and lightness will be applied and its values range from `0` to `360`. Saturation
    is a percentage that goes from `0` (white) to `100%` (full color) and defines
    the colorfulness. Finally, lightness defines the amount of light and goes from
    `0%` (no light, total black) to `100%` (full color). The syntax is `hsl(H,S,L)`.
    It is supported in all modern browsers and Internet Explorer since Version 9\.
    If we want to apply red fonts in our class `title`, we can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Hue, saturation, lightness, and alpha
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is an extended specification of `hsl` that adds a value at the end for
    alpha transparency in the same way `rgba` does for `rgb`. It is supported in all
    modern browsers and Internet Explorer since Version 9\. We can define a red color
    for fonts in our class `title` with 50 percent of alpha transparency as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use a conditional CSS import for older versions of Internet Explorer
    and apply opacity and an alpha filter to get the same effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Adding gradients
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: New applications in the market have adopted a plain design not because of technical
    restrictions but for the sake of simplicity. Even though it is sometimes necessary
    to add some styling to simulate depth, gradients make the process much easier.
  prefs: []
  type: TYPE_NORMAL
- en: CSS3 introduces `linear-gradient` and `radial-gradient` to `background` values.
    You can apply `gradients` to `background` or `background-image` properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'A possible syntax for this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You can add as many `color position` pairs as you want. Although it is possible
    to use hexadecimal colors, in this example we are going to use `rgb`.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we add a gradient that goes from `top` to `bottom` to our navigation
    bar. It starts with light grey and ends with light grey, so we only need two points:
    `0%` and `100%`. The initial color will be `rgb(102,102,102)` and the final one
    will be `rgb(70,70,70)`. Adding this to `nav` with pertinent prefixes we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'As a result we can see the right image compared with the original one at the
    left:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding gradients](img/5689_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you do not want to deal with every vendor prefix, an option is to use a generator
    such as Colorzilla Gradient Generator ([http://www.colorzilla.com/gradient-editor/](http://www.colorzilla.com/gradient-editor/)).
    You only need to define your gradient with a visual tool and then copy the code
    generated into your CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'To show that we can add multiple points, let us apply a more complex effect
    to our **Top 5 Box Office** area. In this case, we apply the effect from `bottom`
    to `top`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As in our previous example, we use percentages to define positions. In this
    case, we use `35%`, `68%`, and `98%`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we can compare the original area (left) with the final one (right),
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding gradients](img/5689_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can apply the same principles to our header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We get a more interesting header (bottom) compared to the original one (top):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding gradients](img/5689_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The prefix `-ms-` for gradients in Internet Explorer was deprecated by Microsoft.
    Refer to the following link: [http://msdn.microsoft.com/en-us/library/windows/apps/hh453527.aspx](http://msdn.microsoft.com/en-us/library/windows/apps/hh453527.aspx).'
  prefs: []
  type: TYPE_NORMAL
- en: It is always possible to fallback gradients using images in tile and the `background-image`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: Adding box shadows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can use shadows to simulate depth giving the effect of inset and outset visuals.
    The property `box-shadow` allows us to create shadows based on the borders of
    the element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for `box-shadow` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Only `horizontal-shadow` and `vertical-shadow` are required. `inset` specifies
    if the shadow is applied inside the element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us add a bottom drop shadow to our `nav`. We can specify `0` for `horizontal-shadow`,
    `1px` for `vertical-shadow` to show our shadow below the element, `3px` to give
    some `blur`, and color as `#999`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We can compare the `nav` menu without the shadow (left) and with the shadow
    (right):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding box shadows](img/5689_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To demonstrate `inset`, we can add an inner shadow to our **Top 5 Box Office**
    area. Here we apply negative positioning, `-1px`, for `vertical-shadow` to show
    a part of the shadow in the bottom, `1px` for `blur`, `1px` for `spread` (as we
    want to modify the size of our shadow), color `#aaa`, and finally `inset` to have
    an inner shadow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'As a result, our **Top 5 Box Office** area looks deeper than before:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding box shadows](img/5689_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can apply this to our wrapper to have shadows on the left and right borders:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'While it is difficult to notice, the sum of these small details helps to reflect
    the visual richness of the enterprise application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding box shadows](img/5689_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '`box-shadow` is supported by all modern browsers except Internet Explorer,
    which only supports it from IE9 onwards.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unfortunately, fake flexible drop shadows are hard to create or expensive because
    sometimes it is better to not use shadows in old browsers, following the principles
    of graceful degradation.
  prefs: []
  type: TYPE_NORMAL
- en: Adding text shadows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To add shadows to text we cannot use `box-shadow` because it applies the shadow
    to a square container. If we want to add shadows to any text, we should use the
    `text-shadow` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for `text-shadow` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '`text-shadow` is not supported by Internet Explorer, but for that case it is
    possible to use `filter:dropshadow` instead. The only downside (apart from compatibility)
    is that it is not possible to specify blur.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for `filter:dropshadow` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Even shadow effects are thought of as a way to pop out text. We can change
    the `color` property and fake `inset` elements. We use a light gray and 1px displacement
    horizontally and vertically with no blur in our **Top 5 Box Office** title:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You can check the `inset` element (right):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding text shadows](img/5689_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will use a more traditional approach in our navigation bar, including `blur`
    on `hover`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![Adding text shadows](img/5689_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Some tricks to fake 3D
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some depth effects can be simulated by using CSS previous to Version 3\. For
    example, we can use borders to simulate depth by placing a dark color border over
    a light color one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We can do this by applying this to our **Top 5 Box Office** area:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Some tricks to fake 3D](img/5689_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In some cases, the effect is not obvious but helps to give depth as a part
    of other effects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Applying this to the top of the navigation menu, we get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Some tricks to fake 3D](img/5689_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'With all of our effects applied to our initial layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Some tricks to fake 3D](img/5689_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Some tricks to fake 3D](img/5689_05_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Movies and styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Suppose that we have a requirement for the creation of a movie list with simple
    information, where every element shows more details when you click. Because of
    the tight deadline, the client decides to have a simple implementation, so that
    the requirement goes to a web designer and as a result we have an initial design:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Movies and styles](img/5689_05_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In a meeting with our web designer and our final client, we decide to show the
    movie synopsis on the click of the movie poster. Based on this, let us build a
    first approach to our structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a list where the order does not mean anything, we can use an unordered
    list `ul`. We first add movie posters to identify each element easily (using `img`),
    and then we define two blocks using the `main-info` (to show as a default) and
    `description` (to show on click) sections. In `main-info`, we add the title as
    `h3`, genre and rate as `p` with the `details` class, movie theater with tag `p`
    and the `theater` class, and actors as `p` with the `actors` class. In the details,
    we add the title as `h3` and the description as `p`. Now, our structure looks
    like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'First, we add the AJAX call to the end of `movienow.geolocation.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we modify the structure of the AJAX callback with our structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: We are creating our DOM structure concatenating a string, but if you want to
    use a more elegant solution you can use a client-side template library such as
    jQuery tmpl ([http://api.jquery.com/category/plugins/templates/](http://api.jquery.com/category/plugins/templates/)),
    Mustache ([http://mustache.github.com/](http://mustache.github.com/)), Underscore
    ([http://documentcloud.github.com/underscore/](http://documentcloud.github.com/underscore/)),
    or Pure ([http://beebole.com/pure/](http://beebole.com/pure/)). Template libraries
    allow you to separate the DOM structure from data. Some of them, such as Underscore,
    include logic.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that we limit the size of `movie.synopsys` using `substr`.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we want to add some highlights in white, we should change the `wrapper`
    and `main-info` `background-color` structures to a light gray as we saw in the
    original design, so we can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Our Top 5 box is floated right, so we can give some `margin` to our movies
    container allowing for a more flexible design. We will change the original width
    of our `wrapper` structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Styling our list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We want to apply some animations later, so we will add `position:relative`
    to move the absolute positioned elements inside, using `li` as our point of reference.
    We add `overflow:hidden` to account for any elements out of our `li` area. We
    use `borders top` and `bottom` with light and dark colors respectively to add
    a sensation of depth. Finally, we add dark gray as `background-color` (not in
    the original design, but this will be covered with `main-info` and `img`) and
    we set the mouse `cursor` attribute to `pointer` to indicate that the element
    is clickable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s float `img` to show `main-info` at its side and not below it. Oh, and
    some `margin` to leave a space between `img` and description text (that will be
    hidden for now):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We will be defining size, weight, and spacing for our titles as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We will add padding for each information inside `p` tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a different text color and size for some details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We will define a different text color and size for the movie theater and italic
    style using the following declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Applying a new style for actors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'We define a static height that is the same as each movie poster image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Absolute positioning is applied to `main-info` (to animate it later). We add
    `margin` equal to the `width` attribute of our movie poster image and some padding
    for our text inside:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we will be adding some styles for our hidden description, including
    an `inset box-shadow` attribute to simulate depth:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: At this point our design looks the same as the image supplied by our web designer,
    but we still cannot see movie details. Before we satisfy this requirement, let
    us talk about transitions and animations.
  prefs: []
  type: TYPE_NORMAL
- en: Transitions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Usually we change classes of HTML elements based on interactions. For example,
    link styles on hover, show, and hiding of blocks of text on click for tabbed panels,
    and so on. Before CSS3, if we wanted to animate these changes, the only way to
    do it was with JavaScript. With CSS3, a simple way to do this is with `transition`.
    Having an initial class and a pseudo class triggered on an interaction, we can
    add a `transition` element with the properties that change between class and pseudo
    class to animate them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for shorthand `transition` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '`transition-timing-function` specifies how fast transition occurs. Possible
    values for this are: `linear`, `ease`, `ease-in`, `ease-out`, `ease-in-out`, and
    `cubic-bezier(n,n,n,n)`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`transition-delay` is used if we wanted to start our animation in another point
    in time other than initial state (0s).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use multiple transitions at the same time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Transitions are triggered with interactions and have only two states: initial
    and final.'
  prefs: []
  type: TYPE_NORMAL
- en: Animations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we want to implement complex movement that involves multiple states, it is
    not possible to use transitions. For this, we have animations. Moreover, you do
    not need to trigger an interaction to start an animation (but we shall keep this
    a secret so as to avoid a new animated GIF boom in this era).
  prefs: []
  type: TYPE_NORMAL
- en: Animations rely on `@keyframes`. Similar to their counterpart in animation tools
    (including Adobe Flash), a keyframe allows you to define states and the values
    of the properties in them.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Or more complex constructs using percentages and multiple properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: We can specify as many steps as we want. `animation-name` is used later to call
    our keyframe.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax used for animation is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Most of the properties have the same meaning as transitions. `animation-iteration-count`
    specifies the number of times that the animation will repeat (or `infinite` if
    it never stops), `animation-direction` allows the animation to run normally (`normal`),
    or alternate back and forward (`alternate`).
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we have `animation-play-state` that is not on the shorthand mode.
    This property allows us to stop (`paused`) and start again (`running`) our animation.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing between transitions and animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our case we have only two states, one that shows the general details of the
    movie and a pseudo class state that shows the description of the movie. This should
    be triggered on click, so the simplest solution is to use a transition.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although it is possible to use `animation` in every situation, it is better
    to rely on `transition` for simple requirements related to common interactions.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, we want to animate the `main-info` `left` and `right` properties.
    The initial state s `0` for both:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The final state will be `left:100%` (`li` right side) and `right:-100%` (`100%`
    to the right from `li` right side). We create a pseudo state with class `open`
    for `li`:.
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the class on click, we add a `toggleClass` call on click for each
    `li` using jQuery on `movienow.js`. `toggleClass` adds and removes the `open`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: If you click on each element, you will notice the change that shows and hides
    each description.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add our `transition`, we specify the `left` and `right` properties and a
    duration of `.3` seconds for each one. Using multiple browser prefixes we have
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Testing again, we should see a fluid movement that goes from one state to another.
  prefs: []
  type: TYPE_NORMAL
- en: '![Choosing between transitions and animations](img/5689_05_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If we click on **Brave**, we will see an animation and then the movie synopsis,
    as partially depicted in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Choosing between transitions and animations](img/5689_05_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let us add an animation to our header to test the `animation` property. Our
    header shows a movie roll film decoration. If we want to roll the roll film, we
    need to define some keyframes. In this case, we specify only two states: `from`
    and `to`. Because of our design, we move the roll horizontally from 0 to -19px
    (the space between white rectangles, to create the same initial and end state
    to our loop). We will add this with the respective browser prefixes and naming
    our `keyframe`with `movierolling`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'We add `movierolling` as `animation` in our header specifying `.5 segs` `animation:movierolling
    .5s`, an infinite loop `animation-iteration-count:infinite`, and a linear easing
    to make a fluid loop `animation-timing-function:linear`. As a result, we have
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: And the roll is rolling!
  prefs: []
  type: TYPE_NORMAL
- en: Let us comment out this animation code for now and get back to our application.
  prefs: []
  type: TYPE_NORMAL
- en: Using media queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The transition that we added to visualize the synopses works nicely, but on
    mobile devices we do not have enough space to show the complete synopsis for each
    movie. A possible solution could be to hide the movie posters images for mobile
    devices, that should give us at least an additional 120 px.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we saw in previous chapters, we can use media queries to specify different
    behaviors for different screen sizes. We can add a case for devices until 737
    px:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Let us apply a transition with the same time of our `main-info` one, but in
    this case only for `margin-left`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'The final position should have a negative `margin` value to move our images
    outside of the `li` area:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, let us hide actors and genres to have more space inside `main-info`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can see a different interaction in small devices, allowing us to see
    the complete description:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using media queries](img/5689_05_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If we click on **The Bourne Legacy**, we will see an animation and then the
    movie synopsis.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using media queries](img/5689_05_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Applying CSS3 selectors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have been using common selectors, but CSS3 introduces a new set that opens
    styling to new possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most of these selectors are not supported in Internet Explorer 8 or the previous
    versions; you can verify support using the compatibility tables mentioned at the
    following link: [http://www.quirksmode.org/css/contents.html#CSS3](http://www.quirksmode.org/css/contents.html#CSS3).
    You can always substitute these selectors for class declarations on your CSS and
    add these classes in your HTML using conditionals in your code.'
  prefs: []
  type: TYPE_NORMAL
- en: We will not include this code as a part of our project, but you can test it
    using `styles.css` (code commented) in the `3.- selectors` folder to visualize
    the results.
  prefs: []
  type: TYPE_NORMAL
- en: '`:first-of-type`: This selects the first element with the selector''s type.
    Let us say we want to apply a different `background-color` to the first element
    inside our movie list. We can select the first appearance of `li` followed by
    the selector that indicates which element must change its background color:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`:last-of-type`: This is similar to the previous selector, but it selects the
    last element. Applying the same case as before:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`:only-of-type`: This selects only unique elements of the type indicated. Using
    our movie''s details, if we apply the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can add `background-color` to `h3` since it is only `h3` contained by its
    parent, but if we use the following, nothing is selected because there are multiple
    `p` elements inside:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`:only-child`: This selects elements whose parents only contain them. For example,
    using this selector we can change `article` `background-color` because it is the
    only element contained by its parent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: But if we select `section`, nothing will be selected because there are multiple
    children in its parent.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`:nth-child(n)`: This allows us to specify the element we want to select using
    positions. If we want to select the third element in our list:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`:nth-last-child(n)`: This applies the same principle as the prior selector,
    but counting from the last element:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`:nth-of-type(n)`: This uses the same principle as before, but it will count
    only elements of the same type. For example, if we apply `p:nth-of-type(2)` to
    select the second element, it will ignore any differences to `p`. Selecting the
    second `p` element, we have:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`:nth-last-of-type(n)`: This does the same, but counts from the last element:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`:last-child`: This selects the element that is the last child of its parent.
    Selecting the last movie, we have the following code snippet:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`:root`: This allows us to select the `html` root tag. Let us change the `background-color`
    value of `html`, but first we reset the already defined `background-color` attribute
    for `html` and `body` tags:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `background-color` to `root` (`html`):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`:empty`: This selects elements with no children or text. Let us show in red
    `div` elements with no content in our application:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should see the logo area and `div.push` in red.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`:target`: This selects elements with the `id` value equal to the active `anchor`.
    To test this we can define a link with an anchor and an `id` attribute to mark
    the link as active:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can define the style to mark the text in yellow:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you click the link, you will see the color change.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`:not(selector)`: This selects all elements that do not fulfill the conditions
    of the selector. For example, if we want to select all `p` elements except the
    ones with the `theater` class:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`:enabled`: This selects input fields with no disabled property. If we have,
    `<input type="button" value="enable" />`, we can define an orange border using
    the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`:disabled`: This selects input fields with the `disabled` property. As before
    we can have:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`:checked`: This selects `input` with `type` `checkbox` that are `checked`.
    If we have the following code, we can see that the element changes style when
    it is checked:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`element1~element2`: This selects `element2` preceded by `element1`. If we
    want to select `p` elements preceded by `h3`, we can apply the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`[attribute^=value]`: This selects elements whose "attribute" begins with a
    particular "value". For example, let us hide the poster''s images for every image
    whose `alt` attribute starts with `Dark`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`[attribute$=value]`: This selects elements whose "attribute" ends with a particular
    "value". For example, let us hide the poster''s images for every image whose `alt`
    attribute ends with `s`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`[attribute*=value]`: This selects elements whose "attribute" contains a "value".
    For example, let us hide the poster''s images for every image whose `alt` attribute
    contains `ar`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: New CSS3 features are not a new introduction to web development; they are a
    simplification of the execution. Before CSS3, it was possible to use gradients,
    drop shadows, rounded corners and even animations, but implementations were expensive
    and the scalability intricate. With all these possibilities, we should not forget
    old techniques that rely on images and complex JavaScript because even though
    we all hope for a simpler future based only in new generation browsers, we must
    face the problems of old generation browsers.
  prefs: []
  type: TYPE_NORMAL
- en: We have shown how to apply the most used CSS3 properties to our enterprise applications
    and how to manage compatibility issues related with styles across the browsers.
    Additionally, we introduced CSS3 animations and transitions, so now we are capable
    of selecting the right solution for our projects. Finally, we can apply media
    queries and selectors to our stylesheets for more complex and elegant solutions.
  prefs: []
  type: TYPE_NORMAL
- en: The following chapter will introduce HTML5 video and audio management, JavaScript
    control of media reproduction, and basic strategies to grant backward compatibility.
  prefs: []
  type: TYPE_NORMAL
