["```js\n<script>\n  import { onMount, beforeUpdate, afterUpdate, onDestroy } from 'svelte';\n  let count = 0;\n  onMount(() => { console.log('onMount!'); });\n  beforeUpdate(() => { console.log('beforeUpdate!'); });\n  afterUpdate(() => { console.log('afterUpdate!'); });\n  onDestroy(() => { console.log('onDestroy!'); });\n</script>\n<button on:click={() => { count ++; }}>\n  Counter: {count}\n</button>\n```", "```js\n<script>\n  function action(node) {}\n</script>\n<div use:action>\n```", "```js\n<script>\n  let element;\n</script>\n<div bind:this={element} />\n```", "```js\n<div in:fade />\n```", "```js\n<script>\n  import { onMount } from 'svelte';\n  function buttonClicked() {\n    onMount(() => console.log('onMount!'));\n  }\n</script>\n<button on:click={buttonClicked} />\n```", "```js\nError: Function called outside component initialization\n```", "```js\n<script>\n  import { onMount } from 'svelte';\n  setup();\n  function setup() {\n    onMount(() => console.log('onMount!'));\n  }\n</script>\n```", "```js\n// file-a.js\nimport { onMount } from 'svelte';\nexport function setup() {\n  onMount(() => console.log('onMount!'));\n}\n```", "```js\n<script>\n  import { setup } from './file-a.js';\n  setup();\n</script>\n```", "```js\n<script>\n  import { onMount } from 'svelte';\n  import { showPopup } from './popup';\n  onMount(() => {\n    const timeoutId = setTimeout(() => {\n      showPopup();\n    }, 5000);\n    return () => clearTimeout(timeoutId);\n  });\n</script>\n```", "```js\n// popup-on-mount.js\nimport { onMount } from 'svelte';\nimport { showPopup } from './popup';\nexport function showPopupOnMount() {\n  onMount(() => {\n    const timeoutId = setTimeout(() => {\n      showPopup();\n    }, 5000);\n    return () => clearTimeout(timeoutId);\n  });\n}\n```", "```js\n<script>\n  import { showPopupOnMount } from './popup-on-mount';\n  showPopupOnMount();\n</script>\n```", "```js\n// popup-on-mount.js\nimport { showPopup } from './popup';\nexport function showPopupOnMount() {\n  const timeoutId = setTimeout(() => {\n    showPopup();\n  }, 5000);\n  return () => clearTimeout(timeoutId);\n}\n```", "```js\n<script>\n  import { onMount } from 'svelte';\n  import { showPopupOnMount } from './popup-on-mount';\n  onMount(showPopupOnMount);\n</script>\n```", "```js\n    <script>\n      import { showPopupOnMount } from './popup-on-mount';\n      showPopupOnMount(2000); // change it to 2s\n    </script>\n    ```", "```js\n    <script>\n      import { showPopupOnMount } from './popup-on-mount';\n      const timeoutId = showPopupOnMount(2000);\n    </script>\n    <button on:click={() => clearTimeout(timeoutId)} />\n    ```", "```js\n    // popup-on-mount.js\n    export function showPopupOnMount(duration) {\n      let timeoutId;\n      onMount(() => {\n        timeoutId = setTimeout(() => {\n          showPopup();\n        }, duration ?? 5000);\n        return () => clearTimeout(timeoutId);\n      });\n      return timeoutId;\n    }\n    ```", "```js\n    <script>\n      import { onMount } from 'svelte';\n      let counter = 0;\n      onMount(() => {\n        const intervalId = setInterval(() => counter++, 1000);\n        return () => clearInterval(intervalId);\n      });\n    </script>\n    <span>{counter}</span>\n    ```", "```js\n    import { writable } from 'svelte/store';\n    import { onMount } from 'svelte';\n    export function startCounterOnMount() {\n      const counter = writable(0);\n      onMount(() => {\n        const intervalId = setInterval(() => counter.update($counter => $counter + 1), 1000);\n        return () => clearInterval(intervalId);\n      });\n      return counter;\n    }\n    ```", "```js\n    <script>\n      import { startCounterOnMount } from './counter';\n      const counter = startCounterOnMount();\n    </script>\n    <span>{$counter}</span>\n    ```", "```js\n<script>\n  import { afterUpdate } from 'svelte';\n  let updateCount = 0;\n  let measuring = false;\n  afterUpdate(() => {\n    if (measuring) {\n      updateCount ++;\n    }\n  });\n  function startMeasuring() {\n    updateCount = 0;\n    measuring = true;\n  }\n  function stopMeasuring() {\n    measuring = false;\n  }\n</script>\n<button on:click={startMeasuring}>Measure</button>\n<button on:click={stopMeasuring}>Stop</button>\n<span>Updated {updateCount} times</span>\n```", "```js\n<script>\n  import { createUpdateCounter } from './update-counter';\n  const { updateCount, startMeasuring, stopMeasuring } = createUpdateCounter();\n</script>\n<button on:click={startMeasuring}>Measure</button>\n<button on:click={stopMeasuring}>Stop</button>\n<span>Updated {$updateCount} times</span>\n```", "```js\n<script>\n  import { beforeUpdate, afterUpdate } from 'svelte';\n  let div;\n  let autoscroll;\n  beforeUpdate(() => {\n    autoscroll = div && (div.offsetHeight + div.scrollTop) > (div.scrollHeight - 20);\n  });\n  afterUpdate(() => {\n    if (autoscroll) div.scrollTo(0, div.scrollHeight);\n  });\n</script>\n<div bind:this={div} />\n```", "```js\nexport function setupAutoscroll() {\n  let div;\n  let autoscroll;\n  beforeUpdate(() => {\n    autoscroll = div && (div.offsetHeight + div.scrollTop) > (div.scrollHeight - 20);\n  });\n  afterUpdate(() => {\n    if (autoscroll) div.scrollTo(0, div.scrollHeight);\n  });\n  return {\n  setDiv(_div) {\n  div = _div;\n    },\n  };\n}\n```", "```js\n<script>\n  import { setupAutoscroll } from './autoscroll';\n  const { setDiv } = setupAutoscroll();\n  let div;\n  $: setDiv(div);\n</script>\n<div bind:this={div} />\n```", "```js\nexport function setupAutoscroll() {\n  let div;\n  // ...\n  return function (node) {\n    div = node;\n    return {\n      destroy() {\n        div = undefined;\n      },\n    };\n  };\n}\n```", "```js\n<script>\n  import { setupAutoscroll } from './autoscroll';\n  const autoscroll = setupAutoscroll();\n</script>\n<div use:autoscroll />\n```", "```js\nimport { onMount, onDestroy } from 'svelte';\nimport { writable } from 'svelte/store';\nlet counter = writable(0);\nexport function setupGlobalCounter() {\n  onMount(() => counter.update($counter => $counter + 1));\n  onDestroy(() => counter.update($counter => $counter - 1));\n  return counter;\n}\n```"]