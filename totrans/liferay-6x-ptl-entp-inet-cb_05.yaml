- en: Chapter 5. Roles and Permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating and configuring roles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assigning user roles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating role-dependent portlet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking permissions in a custom portlet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like employees of companies in the real world, users in the system can
    carry out different tasks. Some of them may deal with the management of the entire
    intranet—creating new organizations, locations, user groups, and sites; assigning
    users; and setting permissions. The others may be responsible for the configuration
    of specific sites and their pages, and managing portlets. There can also be a
    group of users who are responsible for creating and posting content. What is more,
    it is also possible that the same user can be an administrator of one of the sites,
    but at the same time, not be able to do anything except view the content of another.
    To enable the management of such a complex net of allowances, Liferay introduced
    the role functionality, which allows us to define what actions can be performed
    by which users in defined places.
  prefs: []
  type: TYPE_NORMAL
- en: 'A role is a collection of actions that can be performed by users assigned to
    that particular role. There are three types of roles defined at the portal level
    available in Liferay: regular roles, site roles, and organization roles. Regular
    roles define a list of actions that can be performed in areas (scopes) of the
    system specified in its definition. Using the regular role allows us to perform
    actions within one particular scope only. Site roles include actions performed
    within the site. Organization roles group actions that can be performed within
    an organization (for more information about organizations and sites, refer to
    [Chapter 3](part0030.xhtml#aid-SJGS1 "Chapter 3. Working with a Liferay User /
    User Group / Organization"), *Working with a Liferay User / User Group / Organization*,
    and [Chapter 4](part0037.xhtml#aid-1394Q1 "Chapter 4. Liferay Site Configuration"),
    *Liferay Site Configuration*).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating and configuring roles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Regardless of the type of the role with which we are dealing, the process of
    creating a new role consists of two steps—creating a new, empty role and defining
    a set of permissions for the role.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will show you how to create a new regular site and organization
    roles and how to define a set of permissions for them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to create a new regular role, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Admin** | **Control Panel** | **Roles**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the **Regular Role**, **Site Role** or **Organization Role** option.![How
    to do it…](img/image00325.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide **Name (Required)**, **Title**, and **Description** for the role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save** button, and you will come back to a list containing all
    the roles defined.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Actions** button next to the newly created role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the **Edit** action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Define Permissions** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the left column navigation menu, choose the categories (such as **Site
    Administration** | **Pages** | **Site Pages**) for which you want to define permissions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For each chosen category, mark the checkboxes next to the permissions for which
    you'd like to add the role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you already know what categories you are searching for, then you could use
    the **Search** text field to filter functionalities accordingly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00326.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: When setting regular role permissions for categories within the **Site Administration**
    group, you additionally need to choose the list of sites for which this role will
    be able to perform the action.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the first part of the recipe, we showed you how to create a new empty role.
    In the second part, we described how to define permissions for this newly created
    role.
  prefs: []
  type: TYPE_NORMAL
- en: Role parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each role has a name, title, and description. The description identifies the
    role in the system and consists of permissions. These permissions define what
    actions can be performed by users assigned to this role. Regular roles also have
    a list of users assigned to them.
  prefs: []
  type: TYPE_NORMAL
- en: The regular role may contain permissions for the **Control Panel**, **Site Administration**,
    and **My Account** functionalities. The organization role consists of the **Users
    and Organizations** and **Site Administration** permissions. Site roles may only
    define the **Site Administration** permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Control Panel, Site Administration, and My Account permissions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The majority of **Control Panel** category permissions are divided into two
    groups: **General Permissions** and **Resource Permissions**. For example, when
    configuring permissions for the **Users and Organizations** functionality, we
    can define what actions can be performed for all applications in this group—whether
    they can be viewed, accessed in the **Control Panel**, configured, whether users
    assigned to the role can perform user export action or set permissions for the
    **Users and Organizations** functionality, and so on. All these are general permissions.
    Additionally, for the **Users and Organizations** functionality, it is also possible
    to set **Resource Permissions**. This defines which actions users having this
    role can perform on users and organizations, for instance, whether they can delete,
    impersonate, update, or view users; add organizations; assign members; manage
    suborganizations using the **Users and Organization** section; and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Site Administration** permissions, in most cases, are also divided into
    **General Permissions** and **Resource Permissions**. However, in addition, when
    defining the **Site Administration** permissions, we can decide for which sites
    users having this role may perform actions. For example, it is possible to set
    the regular role, which allows users to manage pages or add content only for chosen
    sites.'
  prefs: []
  type: TYPE_NORMAL
- en: The **My Account** permissions are concerned with application actions only.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is also possible to manage a role using actions available in the **Roles**
    actions menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several possible actions that can be performed on a role:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Edit** action allows us to change the **Name**, **Title**, and **Description**
    of the role, define permissions, and assign members for the role.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Permissions** action allows us to set permissions for actions that can
    be performed on this role.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Define** permissions action allows us to define permissions for the role.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Assign Members** action allows us to assign the role for users. It is
    available for regular roles only.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **View Users** action opens the list of all users having this particular
    role. It is available for regular roles only.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Delete** action allows us to delete a role. Out-of-the-box Liferay roles
    cannot be deleted.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In order to perform one of the preceding actions, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Control Panel** | **Roles**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Actions** button located near the name of the role you want to
    modify:![There's more…](img/image00327.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the name of the chosen action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information on organizations and sites, refer to the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Managing an organization structure* recipe in [Chapter 3](part0030.xhtml#aid-SJGS1
    "Chapter 3. Working with a Liferay User / User Group / Organization"), *Working
    with a Liferay User / User Group / Organization*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating an organization and a standalone site* in [Chapter 4](part0037.xhtml#aid-1394Q1
    "Chapter 4. Liferay Site Configuration"), *Liferay Site Configuration*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assigning user roles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to define what users can do, you need to assign roles for them. Each
    user can have multiple roles, including regular, site, and organization roles.
    Each role assigned to a user is available in the roles section of the user account.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will show you how to assign members to regular roles.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to assign members for a regular role, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Admin** | **Control Panel** | **Roles**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Actions** button located near the name of the role to which you
    want to assign users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Assign Members** action, and you will see a list of the current
    members of this role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Available** tab:![How to do it…](img/image00328.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the **Users**, **Sites**, **Organizations**, or **User Groups** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mark users, sites, organizations, or user groups to which you want to assign
    the role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Update Associations** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Regular roles can be assigned to users or collections of users, such as **Organizations**,
    **Sites**, and **User Groups**. If the role is assigned to a user, this user gains
    all the permissions defined for this role. You can see the role by going to **Roles**
    | **Regular Roles** in the edit user form (to enter the edit user form go to **Users
    and Organizations** | **All Users** and click on the name of the user whose account
    you want to see). If a role is assigned to a collection of users, each member
    of that site, organization, or user group inherits this role. You can see this
    information by navigating to **Roles** | **Inherited Roles** in the edit user
    form.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00329.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The **Roles** section in **Control Panel** allows us to assign users or a collection
    of users to **Regular Roles** only. **Organization Roles** can be assigned using
    the **Assign Organization Roles** action available in the **Organization** action
    menu. **Site Roles** can be assigned in the **Site Membership** section of **Site
    Administration**. It is important to remember that it is not possible to assign
    organization and site roles to collections of users.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information on assigning organization roles and site roles, refer
    to the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Managing an organization structure* in [Chapter 3](part0030.xhtml#aid-SJGS1
    "Chapter 3. Working with a Liferay User / User Group / Organization"), *Working
    with a Liferay User / User Group / Organization*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating an organization and a standalone site* in [Chapter 4](part0037.xhtml#aid-1394Q1
    "Chapter 4. Liferay Site Configuration"), *Liferay Site Configuration*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a role-dependent portlet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Liferay provides two ways to check permissions. The first mechanism implements
    the **Java Portlet Specification 2.0** (**JSR 286**) and provides an XML definition
    to map a Liferay role and portlet role. The second mechanism uses the Liferay
    permission checker to verify users and the actions that they perform. In this
    recipe, we will show you how the Java Portlet Specification and Liferay work together.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Generate or create an empty portlet using the Maven archetype generator. We
    described it in [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Installation
    and Basic Configuration"), *Installation and Basic Configuration*. It is not important
    which `PortletBridge` will be used. We will decide to use a simple one called
    `MVCPortlet`.
  prefs: []
  type: TYPE_NORMAL
- en: Let's assume that our goal is to write a greeting portlet that can recognize
    whether the current user is logged in as a user or a guest. In every situation,
    our portlet should display the greeting, **Welcome Guest!** or **Welcome User**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our concept is based on the approach that every kind of greeting will be in
    a different `JSP` file and that our controller will decide which `JSP` file should
    be used. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `portlet.xml`, which is located in the `src/main/webapp/WEB-INF` folder,
    and add `init` parameters to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `src/main/webapp/html` folder and add two files, `user.jsp` and
    `guest.jsp`. In each file, define the greeting. In the `guest.jsp` file, add the
    following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `user.jsp` file, add this line:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define roles in the `<security-role-ref>` tag in `portlet.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: We have changed the default role names on purpose to show you that the previous
    roles are different from the Liferay ones.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open `liferay-portlet.xml` and map portlet roles into Liferay roles as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the portlet render method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and deploy the portlet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Put our portlet on the welcome site and test it. Our greeting should be on the
    site depending on whether the user is authenticated or not.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Portlet specification JSR-286 defines a set of the methods of the `PortletRequest`
    interface. These methods allow us to check the user''s principal name or role:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getUserPrincipal`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getRemoteUser`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isUserInRole`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `getUserPrincipal` method returns the principal name of the current authenticated
    user and returns the `java.security.Principal` object. Similarly, `getRemoteUser`
    returns the name of the logged-in user. As a matter of fact, both methods return
    the same value, which is the `userId`, in the Liferay implementation. If a user
    is not authenticated, both methods return null. The third method expects a string
    parameter with the role name that is defined in `portlet.xml`. It checks the current
    user role and returns a `boolean` value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The JSR-286 specification determines that every `security-role-ref` definition
    should be mapping into the internal system roles depending on the portlet container
    implementation. This mapping can be specified in `web.xml` as a pair of tags:
    `role-name` and `role-link`. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Liferay specifies these mappings in `liferay-portlet.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, this approach has a limitation. JSR-286 documents contain the following
    sentence:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"The developer must be aware that the use of this default mechanism may limit
    the flexibility in changing role-names in the application without having to recompile
    the portlet making the call."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to learn how to create new portlets or hooks, refer to these recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Creating a custom portlet* in [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Installation
    and Basic Configuration"), *Installation and Basic Configuration*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*The language properties hook* in [Chapter 11](part0080.xhtml#aid-2C9D01 "Chapter 11. Quick
    Tricks and Advanced Knowledge"), *Quick Tricks and Advanced Knowledge*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Using Liferay Service Bus for communication between portlets* in [Chapter
    11](part0080.xhtml#aid-2C9D01 "Chapter 11. Quick Tricks and Advanced Knowledge"),
    *Quick Tricks and Advanced Knowledge*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking permissions in a custom portlet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Permissions in Liferay are very flexible but very complex to understand. In
    this recipe, we will show you only the basic use of permissions, but we hope this
    tutorial will be a start-up to implement more complex permissions. Let's assume
    that our goal is extending the previous portlet to display a secret message only
    for the users who have a specific permission. This permission should be configurable
    in the portlet permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We assume that you have a ready-to-use Maven portlet generated from Maven archetypes.
    In [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Installation and Basic Configuration"),
    *Installation and Basic Configuration*, we described how to achieve this.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To achieve our goal, we have to define and add a specific permission to our
    portlet from the previous recipe. Next, we should register our list of permissions.
    At the end, we will use those permissions to display the secret area in our portlet.
    Perform these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the `src/main/resources/resource-actions` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called `roles.xml` in the `resource-actions` folder with the
    following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `default.xml` file in the `resource-actions` folder with the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `portlet.properties` file in the `src/main/resources` folder (if
    it doesn''t exist yet) and set the following property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `liferay-portlet.xml` and add the following tag in the `<portlet>` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile and deploy the portlet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Put the portlet on the layout and go to **Options** | **Configuration menu**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `action.ADD_SECTION` permission for **Power User**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go back to the Eclipse IDE. In the portlet render method, add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In our example, the render method is placed in the `com.packtpub.portlet.RolesPortlet`
    class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the `secret.jspf` file in the `src/main/webapp/html` folder with the
    following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Include this file in `guest.jsp` and `user.jsp`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compile, deploy, and run your portlet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You have to also define `c.tld` in both JSP files and in `liferay-plugin-package.properties`.
    A ready-to-use portlet is included in this book.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In general, Liferay divides permissions as `portlet-resources` and `model-resources`.
    Portlet resources are connected with the portlet and possible operations on the
    portlet itself (for instance, view, configuration). Model resources describe the
    possible permissions on the specific model (for instance, create, update, and
    delete). In this example, we showed only the `portlet-resources` definition, but
    `model-resources` is similar.
  prefs: []
  type: TYPE_NORMAL
- en: 'Portlet resources and model resources should be defined in the XML file and
    put in the classpath. In this recipe, we created two files: `default.xml` and
    `roles.xml`. This is the typical notation that Liferay applies in the core implementation.
    The first file lists all the resources where permissions are defined. The second
    one defines real permissions. It is possible to have just one file including the
    content of `roles.xml`. Typical resource action mapping consists of:'
  prefs: []
  type: TYPE_NORMAL
- en: The portlet name, whose definition should be the same as in the `portlet.xml`
    file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `portlet-resource` section, which specifies supported permissions in our
    portlet, default permissions for a specific role, and unsupported permissions
    for a specific role
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `model-resource` section, which was not used in this recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A very useful option is `<add-default-resource>true</add-default-resource>`,
    which we added in `liferay-portlet.xml`. The Liferay DTD definition explains this
    tag as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"If the add-default-resource value is set to false and the portlet does not
    belong to the page but has been dynamically added, then the user will not have
    permissions to view the portlet. If the add-default-resource value is set to true,
    the default portlet resources and permissions are added to the page, and the user
    can then view the portlet. This is useful (and necessary) for portlets that need
    to be dynamically added to a page. However, to prevent security loopholes, the
    default value is false."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The last thing is checking permissions. Liferay gives us a class called `PermissionChecker`,
    which is enabled in every portlet. `ThemeDisplay` aggregates this implementation.
    To check for permissions, Liferay provides a method that implements the `PermissionChecker`
    interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Arguments of this method are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`groupId`: This is the primary key of the group containing the resource'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: This is the resource''s name, which can be either a class name or a
    portlet ID'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`primKey`: This is the primary key of the resource'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`actionId`: This is the action ID'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is possible to use this type of checking in a direct way or to invoke the
    permission checker from `PortletPermissionUtil`. The second way is recommended
    by Liferay. The utility class has at least nine static methods called `check`
    with many variations of arguments depending on the situation. The `check` method
    doesn't return any value. If there is no permission, the method throws `PrincipalException`.
  prefs: []
  type: TYPE_NORMAL
- en: The second static method is `contain`, which returns `true` if a specific permission
    is enabled or `false` if the permission is disabled.
  prefs: []
  type: TYPE_NORMAL
- en: As a matter of fact, this recipe only touched upon the basics of permissions
    in Liferay. On the Internet, there are a lot of tutorials on how to use Liferay
    permissions and how to implement new functionalities. If we use a *service builder*
    mechanism with a Liferay-based model, it is quite simple to implement the correct
    permissions. Liferay adds many things by default.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to learn how to create new portlets or hooks, refer to these recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: The *Creating a custom portlet* in [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Installation
    and Basic Configuration"), *Installation and Basic Configuration*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *language properties hook* and *Using Liferay Service Bus for communication
    between portlets* in [Chapter 11](part0080.xhtml#aid-2C9D01 "Chapter 11. Quick
    Tricks and Advanced Knowledge"), *Quick Tricks and Advanced Knowledge*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
