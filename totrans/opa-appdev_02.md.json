["```js\ntype Student = {string name, int age, float score}\nStudent stu = { name:\"li\", age:28, score:80.0}\n```", "```js\nx = 10        // the same as: int x = 10\nx = {a:1,b:2} // the type of x is: {a:int, b:int}\n```", "```js\nx = 10     // 10 in base 10\nx = 0xA    // 10 in base 16, any case works (0Xa, 0XA, Oxa)\nx = 0o12   // 10 in base 8\nx = 0b1010 // 10 in base 2\n```", "```js\ni1 = Int.abs(-10)        // i1 = 10\ni2 = Int.max(10,8)       // i2 = 10\n```", "```js\ni3 = Int.of_float(10.6)      // i3 = 10\ni4 = Int.of_string(\"0xA\")    // i4 = 10, 0xA is 10 in dec\nf1 = Int.to_float(10) \t       // f1 = 10.0, f1 is a float\ns1 = Int.to_string(10)       // s1 = \"10\", s1 is a string\n```", "```js\nx = 12.21   // the normal one\nx = .12     // omitting the leading zero\nx = 12\\.     // to indicate this is a float, not an integer\nx = 12.5e10 // scientific notation\n```", "```js\nf1 = Float.abs(-10.0)        //f1 = 10.0\nf2 = Float.ceil(10.5)        //f2 = 11.0\nf3 = Float.floor(10.5)\t       //f3 = 10.0\nf4 = Float.round(10.5)       //f4 = 11.0\nf5 = Float.of_int(10)        //f5 = 10.0\nf6 = Float.of_string(\"10.5\") //f6 = 10.5\ni1 = Float.to_int(10.5)      //i1 = 10, i1 is an integer\ns1 = Float.to_string(10.5)   //s1 = \"10.5\", s1 is a string\n```", "```js\nx = \"hello!\"\nx = \"\\\"\" // special characters can be escaped with backslashes\n```", "```js\nx = \"1 + 2 = {1+2}\"   //will produce \"1 + 2 = 3\"\nlang = \"Opa\"\ny = \"I love {lang}!\"  //will produce \"I love Opa!\"\n```", "```js\ns = \"I love Opa! \"              //Note there is a space at the end.\nlen = String.length(s)          //get length, len = 12\nisEmpty = String.is_empty(s)    //test if a string is empty, false\nisBlank = String.is_blank(s)    //test if a string is blank, false\ncont = String.contains(s,\"Opa\") //check if a string contains a \n                                 //substring,true\nidx1 = String.index(\"love\",s)   //found, idx1 = {some:2}\nidx2 = String.index(\"loving\",s) //not found, idx2 = {none}\nch = String.get(0,s)            //get nth char, ch = 'I'\ns2 = String.trim(s)             //do trim, s2 = \"I love Opa!\"\ns3 = String.replace(\"I\",\"We\",s2)//s3 = \"We love Opa!\"\n```", "```js\ntype bool = {true} or {false}\n```", "```js\ntype option('a) = {none} or {'a some}\n```", "```js\nidx1 = String.index(\"love\",\"I love Opa!\")   //idx1 = {some:2}\nidx2 = String.index(\"loving\",\"I love Opa!\") //idx2 = {none}\n```", "```js\nfunction f(x,y){      // function f with the two parameters x and y\n  x + y + 1\n}\nfunction int f(x,y){  // explicitly indicates the return type\n  x + y + 1\n}\n```", "```js\nfunction max(x,y){\n  if(x >= y) x else y\n}\n```", "```js\nmodule  M {\n  x = 1\n  y = x\n  function test(){ jlog(\"testing\") }\n}\n```", "```js\nx = {} // the empty record\nx = {a:2,b:3} //a record with field \"a\" and \"b\"\n```", "```js\nx = {a}      // means {a:void}\nx = {a, b:2} // means {a:void b:2}\n```", "```js\nx = {~a, b:2}    // means {a:a, b:2}\nx = ~{a, b}      // means {a:a, b:b}\nx = ~{a, b, c:4} // means {a:a, b:b, c:4}\nx = ~{a:{b}, c}  // means {a:{b:void}, c:c}, NOT {a:{b:b}, c:c}\n//Consider this more meaningful example\nname = \"Li\"; sex  = \"Male\"; age  = 28; \nperson = ~{name, sex, age} //means {name:\"Li\", sex:\"Male\", age: 28}\n```", "```js\nx = {a:1,b:2,c:3}\ny = {x with a:\"1\",b:5} // y = {a:\"1\", b:5, c:3}\n```", "```js\nX = {a:1, b:{c:\"2\", d:3.0}}\n// you can update fields deep in the record\ny = {x with b.c:\"200\"}  // y = {a:1, b:{c:\"200\", d:3.0}}\n// you can use the same syntactic shortcuts as used before\ny = {x with a}          // means {x with a:void}\ny = {x with ~a}         // means {x with a:a}\ny = ~{x with a, b:{e}}  // means {x with a:a, b:{e}}\n```", "```js\nx = (1,)          // a tuple of size 1, the same as {f1:1}\nx = (1,\"2\",{a:3}) // a size 3 tuple, the same as {f1:1, f2:\"2\", f3:{a:3}} \ny = {x with f1:2} // we can manipulate a tuple the same way as a \n                    //record\n// y = {f1:2, f2:\"2\", f3:{a:3}}\n```", "```js\ntype list('a) = {nil} or {'a hd, list('a) tl}\n```", "```js\nx = []      // the empty list, equals to {nil}\nx = [2,3,4] // a three element list, the same as a record: \n             // {hd:2, tl:{hd:3, tl:{hd:4, tl:{nil}}}}\ny = [0,1|x] // this will put 0,1 on top of x: [0,1,2,3,4]\n```", "```js\nl = [1,2,3]\nlen = List.length(l)       // return the length of a list\nisEmpty = List.is_empty(l) // test if a list is empty\nhead = List.head(l)        // get the first element, will fail if \n                             // the list is empty\nelement = List.get(0,l)    // get nth element, return option('a)\nl1 = List.add(4,l)         // adding an element at the head of a \n                             //list\nl2 = 4 +> l                // a shortcut for List.add\nl3 = List.remove(3,l)      // removing an element\nl4 = List.drop(2,l)        // drop the first n elements\n```", "```js\nint[] numbers = [1,2,3,4,5]\nfor(int i=0; i<numbers.length; i++){ //do something }\n```", "```js\nlen = List.fold(function(_,i){ i+1 }, [\"a\",\"b\",\"c\"], 0)\n```", "```js\nlen = f(\"c\", f(\"b\", f(\"a\",0)))\n```", "```js\n//find the max natural number in the list\nmax = List.fold(function(x,a){ \n  if(x > a) x else a\n},[1,4,3,2,7,8,5],0)\n```", "```js\nl = [\"a\",\"b\",\"c\"]\nr1 = List.index(\"b\",l)                      // r1 = {some:1}\nr2 = List.index(\"x\",l)                      // r2 = {none}\nr3 = List.index_p(function(x){ x == \"b\"},l) // r3 = {some:1}\nr4 = List.find(function(x){ x == \"b\"},l)    // r4 = {some:\"b\"}\n```", "```js\nl1 = [1,2,3,4,5]\nl2 = List.map(function(x){ 2*x }, l1); //l2 = [2,4,6,8,10]\nl3 = List.filter(function(x){mod(x,2) == 0},l1); // l3 = [2,4]\n```", "```js\nl1 = List.sort([\"by\",\"as\",\"of\",\"At\"]) //l1 = [\"At\",\"as\",\"by\",\"of\"]\nl2 = List.sort([1,3,4,6,2])           //l2 = [1,2,3,4,6]\n```", "```js\np = [{x:1,y:3},{x:3,y:2},{x:2,y:1}]\nl1 = List.sort_with(function(p1,p2){  // sort by Y corordination\n  if(p1.y >= p2.y) {gt} else {lt}\n},p)\nl2 = List.sort_by(function(p){        //sort by distance\n  p.x*p.x + p.y*p.y    \n},p)\n```", "```js\nm1 = Map.empty                 // create an empty map\nm2 = StringMap.empty           // create an empty stringmap\nm3 = IntMap.empty              // create an empty intmap\nm4 = Map.add(\"key1\",\"val1\",m1) // adding a key-val pair\nv1 = Map.get(\"key1\",m4)        // getting a value\nm5 = Map.remove(\"key1\",m4)     // removing a key\n```", "```js\nmatch(<expr>){\ncase <case_1>: <expression_1>\ncase <case_2>: <expression_2>\ncase <case_n>: < expression_n>\n}\n```", "```js\nif (case_1 matched) expression_1 else {\n  if (case_2 matched) expression_2 else {\n    ...\n         if (case_n matched) expression_n else no_matches\n         ...\n  }\n}\n```", "```js\nmatch(y){\ncase 0:       //if y == 0, match [rule 3]\ncase 1 as x:  //if y == 1, match and 1 is bound to x [rule 6]\ncase 2 | 3 :  //if y is 2 or 3, match [rule 7]\ncase x:       //any value will match and the value is bound\n                //to x [rule 2]\ncase _:       //match, we do not care about the value.\n}\n```", "```js\nx = {a:1, b:2, c:3}\nmatch(x){\ncase {a:1,b:2}:     //a close record pattern, but will not match //cause they do not have the same fields [rule 4]\ncase {a:1,b:2,c:2}: //a close record pattern, still will not match //cause c is not equal [rule 4]\ncase {a:1,b:2,...}: //An open record pattern, matches [rule 5]\n}\n```", "```js\nt = (1,\"2\",3.0)\nmatch(t){         //matching a tuple\ncase (1,\"2\",3.1): //not match, 3.1 != 3.0\ncase (1,\"2\",_):   //match, _ matches anything\ncase (1,\"2\",x):   //match, now x = 3.0\ncase {f1:1 ...}:  //match, remember tuples are just records\n}\ny = [1,2,3]\nmatch(y){         //matching a list\ncase [1,2]:       //not match\ncase [1,2,_]:     //match, _ matches anything\ncase [1,2,x]:     //match, now x = 3\ncase [2,|_]:      //not match, '|_' means the rest of the list\ncase [1,|_]:      //match \ncase [1,2,|_]:    //match\ncase [1,x|_]:     //match, now x = 2\n}\n```", "```js\nfirst_parser = parser { \ncase \"Opa\"  : 1 \n}\n```", "```js\nParser.try_parse : Parser.general_parser('a), string -> option('a)\n```", "```js\nx = Parser.try_parse(parser1,\"Opa\")  //x = {some: 1}\ny = Parser.try_parse(parser1,\"Java\") //y = {none}\n```", "```js\ndigit1 = parser { case x=[0-9]+: x }\ndigit2 = parser { case x=([0-9]+): x }\n```", "```js\nabs_parser = parser{\n  case x=(\"+\"?[0-9]+): Int.of_string(\"{x}\")\n  case x=(\"-\"[0-9]+) : 0 â€“ Int.of_string(\"{x}\")\n}\nx = Parser.try_parse(abs_parser,\"-100\") // x = {some: 100}\n```"]