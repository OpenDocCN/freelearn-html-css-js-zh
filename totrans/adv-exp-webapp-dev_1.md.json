["```js\nFeature: Heartbeat\nAs an administrator\nI want to visit an endpoint\nSo that I can confirm the server is responding\n\nFeature: List projects\nAs a vision user\nI want to see a list of projects\nSo that I can select a project I want to monitor\n\nFeature: Create project\nAs a vision user\nI want to create a new project\nSo that I can monitor the activity of multiple repositories\n\nFeature: Get a project\nAs a vision user\nI want to get a project\nSo that I can monitor the activity of selected repositories\n\nFeature: Edit a project\nAs a vision user\nI want to update a project\nSo that I can change the repositories I monitor\n\nFeature: Delete a project\nAs a vision user\nI want to delete a project\nSo that I can remove projects no longer in use\n\nFeature: List repositories\nAs a vision user\nI want to see a list of all repositories for a GitHub account\nSo that I can select and monitor repositories for my project\n\nFeature: List issues\nAs a vision user\nI want to see a list of multiple repository issues in real time\nSo that I can review and fix issues\n\nFeature: List commits\nAs a vision user\nI want to see a list of multiple repository commits in real time\nSo that I can review those commits\n\nFeature: Master Page\nAs a vision user  \nI want the vision application served as a single page\nSo that I can spend less time waiting for page loads\n\nFeature: Authentication\nAs a vision user\nI want to be able to authenticate via Github\nSo that I can view project activity\n```", "```js\nnpm install -g express\n\n```", "```js\nnpm install\n\n```", "```js\n{\n  \"name\": \"chapter-1\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"node app.js\"\n  }\n  \"dependencies\": {\n    \"express\": \"3.x\"\n  }\n}\n```", "```js\nnpm install -g mocha –-save-dev\n\n```", "```js\nnpm install supertest –-save-dev\n\n```", "```js\nAs an administrator\nI want to visit an endpoint\nSo that I can confirm the server is responding\n```", "```js\nvar app = require('../app')\n, request = require('supertest');\n\ndescribe('vision heartbeat api', function(){\n  describe('when requesting resource /heartbeat', function(){\n    it('should respond with 200', function(done){\n      request(app)\n      .get('/heartbeat')\n      .expect('Content-Type', /json/)\n      .expect(200, done);\n    });\n  });\n});\n```", "```js\nvar express = require('express')\n  , http = require('http')\n  , app = express();\n\napp.set('port', 3000);\n\napp.get('/heartbeat', function(req, res){\n  res.json(200, 'OK')\n});\n\nhttp.createServer(app).listen(app.get('port'));\nmodule.exports = app;\n```", "```js\nmodule.exports = require('./lib/express');\n```", "```js\nmocha\n\n```", "```js\n1 tests complete (14 ms)\n\n```", "```js\nnpm start\n\n```", "```js\ncurl -i http://127.0.0.1:3000/heartbeat\n\nHTTP/1.1 200 OK\nX-Powered-By: Express\nContent-Type: application/json; charset=utf-8\nContent-Length: 4\nDate: Fri, 14 Jun 2013 08:28:50 GMT\nConnection: keep-alive\n\n```", "```js\nmocha -w\n\n```", "```js\nmodule.exports = (process.env['NODE_ENV'] === \"COVERAGE\")\n ? require('./lib-cov/express')\n : require('./lib/express');\n```", "```js\njscoverage lib lib-cov\n\n```", "```js\njscoverage lib lib-cov --no-highlight\n\n```", "```js\nNODE_ENV=COVERAGE mocha -R html-cov > coverage.html\n\n```", "```js\nnpm install nconf --save\n\n```", "```js\napp.set('port', 3000);\n```", "```js\nvar nconf = require('nconf');\n\nfunction Config(){\n  nconf.argv().env(\"_\");\n  var environment = nconf.get(\"NODE:ENV\") || \"development\";\n  nconf.file(environment, \"config/\" + environment + \".json\");\n  nconf.file(\"default\", \"config/default.json\");\n}\n\nConfig.prototype.get = function(key) {\n  return nconf.get(key);\n};\n\nmodule.exports = new Config();\n```", "```js\n{\n  \"application\": {\n    \"name\": \"vision\"\n  }\n}\n```", "```js\n{\n  \"express\": {\n    \"port\": 3000\n  }\n}\n```", "```js\nvar express = require('express')\n  , http = require('http')\n , config = require('../configuration')\n  , app = express();\n\napp.set('port', config.get(\"express:port\"));\n\napp.get('/hearbeat', function(req, res){\n  res.json(200, 'OK');\n});\n\nhttp.createServer(app).listen(app.get('port'));\n\nmodule.exports = app;\n```", "```js\nexports.index = function(req, res){\n  res.json(200, 'OK');\n};\n```", "```js\nvar express = require('express')\n  , http = require('http')\n  , config = require('../configuration')\n , heartbeat = require('../routes/heartbeat')\n  , app = express();\n\napp.set('port', config.get('express:port'));\napp.get('/heartbeat', heartbeat.index);\n\nhttp.createServer(app).listen(app.get('port'));\nmodule.exports = app;\n```", "```js\ndescribe('vision heartbeat api', function(){\n  describe('when requesting resource /missing', function(){\n    it('should respond with 404', function(done){\n      request(app)\n      .get('/missing')\n      .expect('Content-Type', /json/)\n      .expect(404, done);\n    })\n  });\n});\n```", "```js\nexports.index = function(req, res, next){\n    res.json(404, 'Not Found.');\n};\n```", "```js\nvar express = require('express')\n  , http = require('http')\n  , config = require('../configuration')\n  , heartbeat = require('../routes/heartbeat')\n , notFound = require('../middleware/notFound')\n  , app = express();\n\napp.set('port', config.get('express:port'));\napp.get('/heartbeat', heartbeat.index);\napp.use(notFound.index);\n\nhttp.createServer(app).listen(app.get('port'));\nmodule.exports = app;\n```", "```js\nvar express = require('express')\n  , http = require('http')\n  , config = require('../configuration')\n  , heartbeat = require('../routes/heartbeat')\n  , notFound = require('../middleware/notFound')\n  , app = express();\n\napp.set('port', config.get('express:port'));\napp.use(express.logger({ immediate: true, format: 'dev' }));\napp.get('/heartbeat', heartbeat.index);\napp.use(notFound.index);\n\nhttp.createServer(app).listen(app.get('port'));\nmodule.exports = app;\n```", "```js\nnpm install winston --save\n\n```", "```js\nvar winston = require('winston')\n , config = require('../configuration');\n\nfunction Logger(){\n  return winston.add(winston.transports.File, {\n    filename: config.get('logger:filename'),\n    maxsize: 1048576,\n    maxFiles: 3,\n    level: config.get('logger:level')\n  });\n}\n\nmodule.exports = new Logger();\n```", "```js\n{\n  \"express\": {\n    \"port\": 3000\n  },\n \"logger\" : {\n \"filename\": \"logs/run.log\",\n \"level\": \"silly\",\n }\n}\n```", "```js\nvar logger = require(\"../logger\");\n\nexports.index = function(req, res, next){\n logger.error('Not Found');\n  res.json(404, 'Not Found');\n};\n```", "```js\nnpm install -g grunt-cli\nnpm install grunt –-save-dev\n\n```", "```js\nnpm install grunt-cafe-mocha –-save-dev\n\n```", "```js\nnpm install grunt-jscoverage –-save-dev \n\n```", "```js\nnpm install grunt-env  –-save-dev\n\n```", "```js\nmodule.exports = function(grunt) {\n  grunt.loadNpmTasks('grunt-jscoverage');\n  grunt.loadNpmTasks('grunt-cafe-mocha');\n  grunt.loadNpmTasks('grunt-env');\n\n  grunt.initConfig({\n    env: {\n      test: { NODE_ENV: 'TEST' },\n      coverage: { NODE_ENV: 'COVERAGE' }\n    },\n    cafemocha: {\n      test: {\n        src: 'test/*.js',\n        options: {\n          ui: 'bdd',\n          reporter: 'spec',\n        },\n    },\n    coverage: {\n      src: 'test/*.js',\n      options: {\n        ui: 'bdd',\n        reporter: 'html-cov',\n        coverage: {\n          output: 'coverage.html'\n        }\n      }\n    },\n  },\n  jscoverage: {\n    options: {\n      inputDirectory: 'lib',\n      outputDirectory: 'lib-cov',\n      highlight: false\n    }\n  }\n  });\n  grunt.registerTask('test', [ 'env:test', 'cafemocha:test' ]);\n  grunt.registerTask('coverage', [ 'env:coverage', 'jscoverage', 'cafemocha:coverage' ]);\n};\n```", "```js\ngrunt test \n\n```", "```js\ngrunt.registerTask('coverage', [ 'env:coverage', 'jscoverage', 'cafemocha:coverage' ]);\n```", "```js\ngrunt coverage\n\n```"]