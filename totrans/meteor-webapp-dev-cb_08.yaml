- en: Chapter 8. Integrating Third-party Libraries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章。集成第三方库
- en: 'In this chapter, you will learn the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下主题：
- en: Using npm packages directly
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接使用 npm 包
- en: Building graphs with D3.js
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 D3.js 构建图表
- en: Creating cutting-edge UIs with Polymer
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Polymer 创建前沿的 UI
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: With so many third-party packages available via Atmosphere it's very easy to
    build, basically, anything! If you have a specific development need—some type
    of logic or library—chances are someone else has already packaged it up for you
    (and if they haven't, what a great opportunity for you!).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Atmosphere 提供了如此多的第三方包，因此构建任何东西都非常容易！如果您有特定的开发需求——某种类型的逻辑或库——很可能其他人已经为您打包好了（如果还没有，那将是一个很好的机会！）。
- en: That being said, not all packages are created equal. Some will have fantastic
    documentation, with samples and tutorials on how to implement a library inside
    Meteor. Others, not so much. In either case, you will at some point need to roll
    up your sleeves and do a bit of work yourself. In this chapter, we will go over
    a few of the more popular third-party libraries, and show you how to implement
    them in Meteor.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，并非所有包都是平等的。一些将拥有出色的文档，包括如何在 Meteor 中实现库的示例和教程。而另一些则不然。在任何情况下，您最终都需要自己动手做一些工作。在本章中，我们将介绍一些更受欢迎的第三方库，并展示如何在
    Meteor 中实现它们。
- en: Using npm packages directly
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直接使用 npm 包
- en: We have seen from the *Using npm modules* recipe in [Chapter 2](part0028.xhtml#aid-QMFO1
    "Chapter 2. Customizing with Packages"), *Customizing with Packages*, how to wrap
    npm packages inside your own personal package, using the `Npm.depends()` directive.
    That's all well and good, but what if we want to just use npm directly, without
    creating a custom package? Arunoda Susiripala — one of the most prolific (and
    brilliant) Meteor community developers, has written a package that helps us do
    just that. In this recipe, you will learn how to use the `meteorhacks:npm` package
    to implement a npm module directly in your code. Specifically, we will use the
    `Highlight.js` module on the server to properly format JavaScript code, as you
    might see in markdown or in an online code editor.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 2 章](part0028.xhtml#aid-QMFO1 "第 2 章。使用包进行自定义")中，我们通过“使用 npm 模块”配方了解了如何使用
    `Npm.depends()` 指令将 npm 包封装到您自己的个人包中，这是在“使用包进行自定义”部分的内容。这当然很好，但如果我们只想直接使用 npm，而不创建自定义包呢？Arunoda
    Susiripala——最富有创造力（且才华横溢）的 Meteor 社区开发者之一，已经编写了一个包，可以帮助我们实现这一点。在本配方中，您将学习如何使用
    `meteorhacks:npm` 包直接在您的代码中实现 npm 模块。具体来说，我们将使用 `Highlight.js` 模块在服务器上正确格式化 JavaScript
    代码，就像您在 Markdown 或在线代码编辑器中看到的那样。
- en: Getting ready
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will be using a default project installation, with the `client`, `server`,
    and `both` folders, to keep the code clean and readable. We will also use the
    `private` folder for some static content, so let''s add that while we''re at it.
    In a terminal window, navigate to where you would like your project to reside,
    and execute the following commands:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用默认项目安装，包括 `client`、`server` 和 `both` 文件夹，以保持代码的整洁和可读性。我们还将使用 `private`
    文件夹来存储一些静态内容，所以让我们在此时添加它。在终端窗口中，导航到您希望项目驻留的位置，并执行以下命令：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We also want to make use of the `meteorhacks:npm` package, so let''s do that
    now. Run the following commands in the terminal:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还希望使用 `meteorhacks:npm` 包，所以现在就让我们来做吧。在终端中运行以下命令：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Lastly, we will want to open a browser to `http://localhost:3000`, so we can
    watch the fun! We're now ready to start creating our direct npm integrations.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们希望打开浏览器到 `http://localhost:3000`，这样我们就可以观看有趣的内容了！我们现在已经准备好开始创建我们的直接 npm
    集成。
- en: How to do it...
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We will be adding the `Highlight.js` Node module and adding some sample code
    to leverage the module, using an inline template as our work area. Proceed with
    the following steps to use npm packages directly:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加 `Highlight.js` Node 模块，并添加一些示例代码来利用该模块，使用内联模板作为我们的工作区域。按照以下步骤直接使用 npm
    包：
- en: 'We will first add the `Highlight.js` Node module. To add a direct-use npm module,
    we will make a simple declaration in the `packages.json` file that was automatically
    added to our project when we added `meteorhacks:npm`. Open `[project root]/packages.json`
    and add the following declaration:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先将添加 `Highlight.js` Node 模块。为了添加直接使用的 npm 模块，我们将在 `packages.json` 文件中进行简单的声明，该文件是在我们添加
    `meteorhacks:npm` 时自动添加到我们的项目中的。打开 `[项目根目录]/packages.json` 并添加以下声明：
- en: '[PRE2]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you look in the terminal window where Meteor is running, you will see something
    similar to the following text:'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您查看运行 Meteor 的终端窗口，您将看到类似以下文本的内容：
- en: '[PRE3]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Our `Highlight.js` module is now ready to use!
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们的 `Highlight.js` 模块现在可以使用了！
- en: 'We will now create the server logic needed to use `Highlight.js`. Create a
    file named `server.js` in the `[project root]/server/` directory. Open that file
    for editing and add the following code:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将创建使用 `Highlight.js` 所需的服务器逻辑。在 `[项目根目录]/server/` 目录中创建一个名为 `server.js`
    的文件。打开该文件进行编辑，并添加以下代码：
- en: '[PRE4]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Next, let's create a sample code file in the `private` folder. We are going
    to use a base text file for the code we will highlight to make the syntax much
    easier (rather than try to do it in a JavaScript `var`, which can be messy with
    escape sequences). Meteor lets us use the `[project root]/private/` folder to
    store static files only visible on the server. Create a file in the `private`
    folder, called `code.txt`, and add some (valid) JavaScript to the file. We will
    reuse the `var setC = …` function from the preceding step, but you can put anything
    you want inside there, provided it's valid JavaScript. Once you've added some
    code, save your changes.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们在 `private` 文件夹中创建一个示例代码文件。我们将使用一个基础文本文件来突出显示代码，以便使语法更加简单（而不是尝试在 JavaScript
    `var` 中完成，这可能会因为转义序列而变得混乱）。Meteor 允许我们使用 `[项目根目录]/private/` 文件夹来存储仅在服务器上可见的静态文件。在
    `private` 文件夹中创建一个名为 `code.txt` 的文件，并在文件中添加一些（有效的）JavaScript 代码。我们将重用前一步中的 `var
    setC = …` 函数，但你可以放入任何你想要的，只要它是有效的 JavaScript。一旦添加了代码，保存你的更改。
- en: 'We now need to create a simple code panel template. Create a file in `[project
    root]/client/` named `main.html`. Open that file for editing, and add the following
    code:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在需要创建一个简单的代码面板模板。在 `[项目根目录]/client/` 中创建一个名为 `main.html` 的文件。打开该文件进行编辑，并添加以下代码：
- en: '[PRE5]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'With the template in place, we can add `Template.code.helpers`, and use `Meteor.call()`.
    Create a file in `[project root]/client/` called `tmpl-code.js` and add the following
    code:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模板就位后，我们可以添加 `Template.code.helpers` 并使用 `Meteor.call()`。在 `[项目根目录]/client/`
    中创建一个名为 `tmpl-code.js` 的文件，并添加以下代码：
- en: '[PRE6]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After saving these changes, your code from the `code.js` file will be visible,
    albeit with little/no CSS formatting. If you check your browser, you should see
    something similar to the following screenshot:'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 保存这些更改后，你的 `code.js` 文件中的代码将可见，尽管几乎没有 CSS 格式化。如果你检查浏览器，你应该会看到以下类似的截图：
- en: '![How to do it...](img/image00393.jpeg)'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image00393.jpeg)'
- en: Well, that's not all that impressive, is it? Let's really highlight what is
    happening with some custom CSS. In a browser, navigate to the official list of
    `Highlights.js` themes, found at [https://github.com/isagalaev/highlight.js/tree/master/src/styles](https://github.com/isagalaev/highlight.js/tree/master/src/styles)
    and pick any theme you like. Simply click on the name of the theme, click on the
    button labeled **Raw**, and copy the corresponding CSS code. Then, create a file
    named `style.css` in your `[project root]/client/` folder, paste the code you
    copied, and save the file. Your formatted text should now have some noticeable
    formatting and coloring, similar to the following screenshot (this is the `Solarized
    Light` theme, copied from `solarized_light.css` at the link that we mentioned
    previously):![How to do it...](img/image00394.jpeg)
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 嗯，这并不那么令人印象深刻，对吧？让我们通过一些自定义 CSS 真正突出显示正在发生的事情。在浏览器中，导航到官方的 `Highlights.js` 主题列表，位于
    [https://github.com/isagalaev/highlight.js/tree/master/src/styles](https://github.com/isagalaev/highlight.js/tree/master/src/styles)，并选择你喜欢的任何主题。只需单击主题名称，然后单击标有
    **Raw** 的按钮，并复制相应的 CSS 代码。然后，在你的 `[项目根目录]/client/` 文件夹中创建一个名为 `style.css` 的文件，粘贴你复制的代码，并保存文件。你的格式化文本现在应该有一些明显的格式化和着色，类似于以下截图（这是
    `Solarized Light` 主题，从我们之前提到的链接中的 `solarized_light.css` 复制而来）:![如何操作...](img/image00394.jpeg)
- en: How it works...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Inside of our `server.js` file, we created a simple `Meteor` method, available
    on (and called by) the client via `Meteor.call()`. We created a separate function
    that is called inside of the method even though we didn''t have to (we could have
    just put the logic directly in the method call), because we wanted to keep our
    code clean and illustrative. Inside the `setC()` function, we make direct use
    of a npm module by using `Meteor.npmRequire()`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 `server.js` 文件中，我们创建了一个简单的 `Meteor` 方法，该方法通过 `Meteor.call()` 在客户端可用并被调用。我们创建了一个单独的函数，即使在方法内部调用也不必要（我们本可以直接在方法调用中放置逻辑），因为我们希望保持代码的整洁和易于理解。在
    `setC()` 函数内部，我们通过使用 `Meteor.npmRequire()` 直接使用一个 npm 模块：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Quickly referencing our text file via `Assets.getText()`, we pipe our sample
    code into the `Highlights.js` file in the `.highlight()` method, which takes the
    language (`''javascript''`) as an argument, to let the module know what language
    highlighting we would like to see in the resultant formatted text:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`Assets.getText()`快速引用我们的文本文件，我们将示例代码通过`.highlight()`方法管道输入到`Highlights.js`文件中，该方法以语言(`'javascript'`)作为参数，让模块知道我们希望在结果格式化文本中看到哪种语言高亮：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We return the formatted text, which is subsequently updated in the client UI,
    through the `Session.get('code')` variable. The template renders the raw HTML
    string, thanks to the use of `{{{triple moustaches}}}` rather than double, and
    the CSS file we added takes care of the eye candy for us.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们返回格式化后的文本，随后通过`Session.get('code')`变量更新客户端UI。模板渲染原始HTML字符串，多亏了使用`{{{triple
    moustaches}}}`而不是双大括号，我们添加的CSS文件则负责美化。
- en: In a nutshell, it really is that simple — by adding the `meteorhacks:npm` package,
    we can simply declare which npm modules we would like to use in our `packages.json`
    file, and then use them directly in Meteor, via the `Meteor.npmRequire()` function.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，这确实非常简单——通过添加`meteorhacks:npm`包，我们可以在`packages.json`文件中简单地声明我们希望使用的npm模块，然后在Meteor中通过`Meteor.npmRequire()`函数直接使用它们。
- en: There's more...
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: As you may be aware, npm runs strictly asynchronously and is non-blocking. This
    means that a lot of the times when you want to use an npm module in Meteor, and
    want to do so synchronously, you need to wrap the call in an `Async` wrapper.
    We will explore how to do this in more depth in [Chapter 11](part0083.xhtml#aid-2F4UM1
    "Chapter 11. Leveraging Advanced Features"), *Leveraging Advanced Features,* but
    the `meteorhacks:npm` package allows us to do this quickly/easily as well, via
    the `Async.wrap()` and `Async.runSync()` methods.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所知，npm严格异步运行且非阻塞。这意味着在许多情况下，当您想在Meteor中使用npm模块，并希望同步使用时，您需要将调用包装在`Async`包装器中。我们将在第11章（*利用高级功能*）中更深入地探讨如何做到这一点，但`meteorhacks:npm`包允许我们通过`Async.wrap()`和`Async.runSync()`方法快速/轻松地做到这一点。
- en: Tip
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: To learn more about `Async.wrap` and other methods available in `meteorhacks:npm`,
    please see the introduction available at [https://atmospherejs.com/meteorhacks/npm](https://atmospherejs.com/meteorhacks/npm).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于`Async.wrap`和其他在`meteorhacks:npm`中可用的方法，请参阅[https://atmospherejs.com/meteorhacks/npm](https://atmospherejs.com/meteorhacks/npm)上的介绍。
- en: 'Lastly, even though it''s undocumented (and therefore not officially supported/subject
    to change), there are some npm modules used by the core Meteor server libraries
    that are exposed and usable on the server side. To use any of these, simply use
    `Npm.require()` in your server code, and you don''t need to implement anything
    else. You can use them directly. The current list, as of `v1.0.2`, is as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，尽管它没有文档说明（因此不是官方支持/可能更改），核心Meteor服务器库中使用了某些npm模块，这些模块在服务器端是公开和可用的。要使用这些模块中的任何一个，只需在您的服务器代码中使用`Npm.require()`，您不需要实现任何其他内容。您可以直接使用它们。截至`v1.0.2`的当前列表如下：
- en: '`child_process`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`child_process`'
- en: '`crypto`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`crypto`'
- en: '`fibers`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fibers`'
- en: '`fibers/future`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fibers/future`'
- en: '`fs`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fs`'
- en: '`http`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http`'
- en: '`os`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`os`'
- en: '`path`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path`'
- en: '`semver`'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`semver`'
- en: '`source-map-support`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`source-map-support`'
- en: '`underscore`'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`underscore`'
- en: '`url`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url`'
- en: See also
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Using npm modules* recipe in [Chapter 2](part0028.xhtml#aid-QMFO1 "Chapter 2. Customizing
    with Packages"), *Customizing with Packages*
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第2章（*使用包进行自定义*）的*使用npm模块*食谱中，*使用包进行自定义*
- en: The *Inserting raw HTML using triple braces* recipe in [Chapter 3](part0036.xhtml#aid-12AK81
    "Chapter 3. Building Great User Interfaces"), *Building Great User Interfaces*
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第3章（*构建出色的用户界面*）的*使用三重大括号插入原始HTML*食谱中，*构建出色的用户界面*
- en: The *Handling asynchronous events* and *Using asynchronous functions* recipes
    in [Chapter 11](part0083.xhtml#aid-2F4UM1 "Chapter 11. Leveraging Advanced Features"),
    *Leveraging Advanced Features*
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第11章（*利用高级功能*）的*处理异步事件*和*使用异步函数*食谱中，*利用高级功能*
- en: Building graphs with D3.js
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用D3.js构建图表
- en: Using third-party libraries to render content inside Meteor is simple and easy
    to do, and there are a lot of great libraries out there. One of our personal favorites
    is the `D3.js` library ([http://d3js.org/](http://d3js.org/)). It's well-documented,
    well-supported, and is a representative example of how to implement other (mostly)
    self-contained graphics rendering libraries. In this recipe we will create a demo
    graph application, complete with animations, using `D3.js.`
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Meteor 中使用第三方库来渲染内容非常简单且易于操作，而且市面上有很多优秀的库。我们个人非常喜欢的一个库是 `D3.js` 库([http://d3js.org/](http://d3js.org/))。它有很好的文档支持，并且是其他（大多数）自包含图形渲染库实现的一个典型例子。在这个菜谱中，我们将创建一个包含动画的演示图形应用程序，使用
    `D3.js`。
- en: Getting ready
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will be using a default project installation, with the `client`, `server`,
    and `both` folders, and we will of course need the official `D3.js` package. In
    a terminal window, navigate to where you would like your project to reside, and
    execute the following commands:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用默认的项目安装，包括 `client`、`server` 和 `both` 文件夹，并且当然需要官方的 `D3.js` 包。在一个终端窗口中，导航到你希望项目存放的位置，并执行以下命令：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: With that out of the way, let's build us some sample graphs in D3!
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以开始构建一些 D3 的示例图形了！
- en: How to do it…
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Normally, the `D3.js` data sources are updated manually, or as the result of
    a feed, with an `update` statement of some kind being called. Because Meteor enables
    reactive computations (see the *Creating and consuming a reactive value* recipe
    in [Chapter 6](part0058.xhtml#aid-1NA0K1 "Chapter 6. Mastering Reactivity"), *Mastering
    Reactivity*), we are going to put the `D3.js` rendering logic right into a `Tracker.autorun()`
    computation instead. Let's set up our reactive data source, throw that rendering
    logic into an `autorun`, and add some animations for good measure!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，`D3.js` 数据源是手动更新，或者作为某种类型的数据源的结果进行更新，调用某种类型的 `update` 语句。由于 Meteor 允许反应式计算（参见第
    6 章 *掌握反应性* 中的 *创建和消费反应性值* 菜谱），我们将把 `D3.js` 渲染逻辑直接放入一个 `Tracker.autorun()` 计算中。让我们设置我们的反应性数据源，将渲染逻辑放入一个
    `autorun` 中，并且为了增加效果，添加一些动画！
- en: 'We first need to create and initialize the `Letters` collection. Create a file
    named `model.js` in your `[project root]/both/` folder, and add the following
    code:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先需要创建和初始化 `Letters` 集合。在你的 `[项目根目录]/both/` 文件夹中创建一个名为 `model.js` 的文件，并添加以下代码：
- en: '[PRE10]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s add an initialization of that collection as well. In your `[project
    root]/server/` folder, create a file named `server.js` and add the following `Meteor.startup`
    function code:'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们同时添加这个集合的初始化。在你的 `[项目根目录]/server/` 文件夹中，创建一个名为 `server.js` 的文件，并添加以下 `Meteor.startup`
    函数代码：
- en: '[PRE11]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'While we have `server.js` open, let''s add a quick helper method to update
    the frequency, which we will use a bit later. Add the following code to `server.js`:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们打开 `server.js` 文件时，让我们快速添加一个更新频率的辅助方法，稍后我们会用到。将以下代码添加到 `server.js` 文件中：
- en: '[PRE12]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, we will add some simple scaffolding and styling. Our HTML is extremely
    simple, because `D3.js` is doing the heavy lifting. That said, we do want to put
    our `svg` element into a Meteor Template. Navigate to your `[project root]/client/`
    folder, create a file named `client.html`, and add the following code:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将添加一些简单的脚手架和样式。我们的 HTML 非常简单，因为 `D3.js` 正在执行繁重的工作。尽管如此，我们仍然希望将我们的 `svg`
    元素放入一个 Meteor 模板中。导航到你的 `[项目根目录]/client/` 文件夹，创建一个名为 `client.html` 的文件，并添加以下代码：
- en: '[PRE13]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s add some simple styling to adjust fonts and colors, and so on. Create
    a file named `[project root]/client/style.css` and add the following CSS declarations:'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们添加一些简单的样式来调整字体和颜色等。创建一个名为 `[项目根目录]/client/style.css` 的文件，并添加以下 CSS 声明：
- en: '[PRE14]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We are now ready to add the `D3.js` rendering logic, inside `rendered`/`autorun`.
    The following code is taken almost line-for-line from Mike Bostock's awesome introductory
    tutorial on `D3.js`. The easiest thing to do would be to take the existing code
    base from that tutorial, copy and paste it into a local file, and then modify
    it. To do this, navigate in a browser to [http://bl.ocks.org/mbostock/3885304](http://bl.ocks.org/mbostock/3885304)
    and copy everything inside the `<script>` tag to the ending `</script>` tag. Create
    a file named `client.js` in your `[project root]/client/` folder, and paste the
    code into the new file (about 60 lines of code).
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们现在准备好在 `rendered`/`autorun` 中添加 `D3.js` 渲染逻辑。以下代码几乎逐行来自 Mike Bostock 的关于 `D3.js`
    的出色入门教程。最简单的事情就是从该教程的现有代码库中复制粘贴到本地文件，然后进行修改。要做到这一点，请在浏览器中导航到 [http://bl.ocks.org/mbostock/3885304](http://bl.ocks.org/mbostock/3885304)，并将
    `<script>` 标签内的所有内容复制到结束的 `</script>` 标签。在您的 `[项目根]/client/` 文件夹中创建一个名为 `client.js`
    的文件，并将代码粘贴到新文件中（大约 60 行代码）。
- en: 'We will now modify the code from that page in the following four ways:'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们现在将以以下四种方式修改该页面的代码：
- en: Wrap all of the code inside a `Template.rendered` callback
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将所有代码包裹在 `Template.rendered` 回调中
- en: Wrap and extend the `d3.selectAll` rendering code inside an `autorun` computation
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `autorun` 计算中包裹和扩展 `d3.selectAll` 渲染代码
- en: Move and modify the axes rendering code outside the `autorun`
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将轴渲染代码移出 `autorun`
- en: Change data to point to our `Letters.find()` Mongo query
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据更改为指向我们的 `Letters.find()` MongoDB 查询
- en: 'The completed `Template.diagram.rendered` callback is listed in the following
    code. It mainly consists of the `D3.js` sample code, with the preceding four modifications
    highlighted. If it''s easier, you can simply copy and paste from below, rather
    than making the modifications yourself. However, it''s worthwhile to at least
    go over the changes, to see how the code was modified. In your `client.js` file,
    make the following modifications to the existing code:'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完成的 `Template.diagram.rendered` 回调如下所示。它主要由 `D3.js` 示例代码组成，前四个修改已突出显示。如果更容易，您可以直接从下面复制粘贴，而不是自己进行修改。然而，至少浏览一下这些更改，看看代码是如何修改的。在您的
    `client.js` 文件中，对现有代码进行以下修改：
- en: '[PRE15]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can now create and call the `randomize` function. Our page should be rendering
    correctly now (check at `http://localhost:3000` and see for yourself), but it''s
    not moving or doing anything else. Let''s change that by changing to random frequency
    values for our letters. Towards the bottom of `client.js`, just after the `autorun`
    block, and just before the ending bracket for the rendered `callback` block, add
    the following timer call:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以创建和调用 `randomize` 函数。我们的页面现在应该可以正确渲染了（请在 `http://localhost:3000` 上检查并亲自验证），但它没有移动或做任何其他事情。让我们通过为我们的字母更改随机频率值来改变这一点。在
    `client.js` 的底部，`autorun` 块之后，以及渲染的 `callback` 块的结束括号之前，添加以下定时器调用：
- en: '[PRE16]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally, add the `randomize()` function at the very bottom of the file, after
    everything else:'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，在文件的底部添加 `randomize()` 函数，在所有其他内容之后：
- en: '[PRE17]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Save all of your changes, and your bar chart should be hopping along happily,
    similar to the following screenshot:'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 保存所有更改，您的条形图应该会快乐地跳跃，类似于以下截图：
- en: '![How to do it…](img/image00395.jpeg)'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做到这一点…](img/image00395.jpeg)'
- en: How it works…
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'There are two key rules to remember when integrating `D3.js` (and, by extension,
    any other rendering engine):'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在整合 `D3.js`（以及由此扩展的任何其他渲染引擎）时，有两个关键规则需要记住：
- en: Put all your DOM/SVG manipulation logic inside `Template.rendered()`
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有您的 DOM/SVG 操作逻辑放在 `Template.rendered()` 内
- en: Make the data source reactive, and wrap the rendering logic inside `Tracker.autorun()`
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使数据源具有反应性，并将渲染逻辑包裹在 `Tracker.autorun()` 内
- en: 'We followed rule #1 when we added the entire `D3.js` logic from the tutorial
    inside of `Template.diagram.rendered()`. This tells Blaze to keep its (awesome,
    yet grubby) hands off everything we''ll be doing. We''re essentially telling Blaze
    to go have a smoke break, while we implement some good ol'' fashioned DOM/SVG
    manipulation (and animations!).'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '当我们将整个 `D3.js` 逻辑从教程中添加到 `Template.diagram.rendered()` 中时，我们遵循了规则 #1。这告诉 Blaze
    不要干涉我们将要做的任何事情。我们实际上是在告诉 Blaze 去抽根烟休息一下，同时我们实现一些传统的 DOM/SVG 操作（以及动画！）。'
- en: Then, instead of relying on a non-reactive data source, where we would have
    to periodically check for updates and/or call an `update()` function whenever
    results change, we used Meteor's declarative, reactive programming style by wrapping
    the `D3.js` logic inside an `autorun` function. That `autorun` function will re-run
    every time there's a change to the `Letters` collection, thanks to `var data =
    Letters.find().fetch()`; which is a reactive data source.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们不是依赖于非响应式数据源，在那里我们不得不定期检查更新和/或每当结果更改时调用`update()`函数，而是通过在`autorun`函数中包装`D3.js`逻辑来使用Meteor的声明式、响应式编程风格。由于`var
    data = Letters.find().fetch()`是一个响应式数据源，这个`autorun`函数将在`Letters`集合有更改时重新运行。
- en: 'In other words, we followed rule #2 by creating a `D3.js`-friendly reactive
    computation, instead of using a functional (non-reactive) data model, like a hobo.
    Mike Bostock would be proud of us, as the avoidance of functional programming
    is one of the core tenets of `D3.js`.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，我们通过创建一个`D3.js`友好的响应式计算来遵循规则#2，而不是使用像流浪汉一样的功能（非响应式）数据模型。Mike Bostock会为我们感到骄傲，因为避免使用函数式编程是`D3.js`的核心原则之一。
- en: 'It seems like we wrote a lot of code because of the `D3.js` sample code, and
    there are some details we''re leaving out, such as moving the `y` and `x` axes
    rendering logic outside the `autorun` function (because we don''t want to re-render
    it every time), but it really is that simple. Notice how incredibly simple (and
    loosely-coupled) our update statement is, inside the `randomize()` function: one.
    single. line.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`D3.js`示例代码，我们似乎写了大量的代码，而且我们省略了一些细节，例如将`y`和`x`轴渲染逻辑移出`autorun`函数（因为我们不希望每次都重新渲染），但实际上真的很简单。注意在`randomize()`函数内，我们的更新语句是多么的简单（并且松散耦合）：一行。
- en: When it comes to third-party renderers, wrap using `rendered()` and be reactive
    using `autorun()`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到第三方渲染器时，使用 `rendered()` 进行包装，并使用 `autorun()` 进行响应式处理。
- en: Tip
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Wrap using `rendered()`, be reactive using `autorun()`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `rendered()` 进行包装，使用 `autorun()` 进行响应式处理。
- en: There's more…
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: We strongly encourage you to look deeper into `D3.js`, which (as mentioned)
    runs on the same declarative programming principle as Meteor. There's a reason
    it integrates so cleanly, and for SVG graphs and animations, it really is top
    notch.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们强烈建议您深入了解`D3.js`，正如之前提到的，它运行在相同的声明式编程原则之上，正如它与Meteor的集成如此干净一样，这确实有原因，对于SVG图表和动画来说，它确实是顶级的。
- en: Tip
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Tutorials for `D3.js` can be found at [https://github.com/mbostock/d3/wiki/Tutorials](https://github.com/mbostock/d3/wiki/Tutorials).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`D3.js`的教程可以在[https://github.com/mbostock/d3/wiki/Tutorials](https://github.com/mbostock/d3/wiki/Tutorials)找到。'
- en: See also
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考以下内容
- en: The *Creating dynamic lists* recipe in [Chapter 3](part0036.xhtml#aid-12AK81
    "Chapter 3. Building Great User Interfaces"), *Building Great User Interfaces*
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第3章](part0036.xhtml#aid-12AK81 "第3章。构建出色的用户界面")的*创建动态列表*食谱中，*构建出色的用户界面*。
- en: The *Creating dynamic graphs with SVG and Ajax* recipe in [Chapter 7](part0065.xhtml#aid-1TVKI1
    "Chapter 7. Using Client Methods"), *Using Client Methods*
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第7章](part0065.xhtml#aid-1TVKI1 "第7章。使用客户端方法")的*使用SVG和Ajax创建动态图表*食谱中，*使用客户端方法*，创建前沿的UI。
- en: Creating cutting-edge UIs with Polymer
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Polymer创建尖端UI。
- en: Polymer ([https://www.polymer-project.org/](https://www.polymer-project.org/))
    is ambitious. It is ambitious in the very best possible way, in that, if it succeeds,
    it will make our development lives so much better.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Polymer ([https://www.polymer-project.org/](https://www.polymer-project.org/))是雄心勃勃的。它以最好的方式雄心勃勃，如果它成功，它将使我们的开发生活变得更好。
- en: One of the largest time-wasting activities we as web developers go through is
    tweaking CSS, repositioning DOM elements, and trying to manually code animations.
    It's not that those things are bad (some of us quite enjoy well-designed components);
    It's that nearly every time, our efforts are thrown away when a new project or
    design theme is introduced.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 作为网络开发者，我们经历的最大浪费时间活动之一是调整CSS，重新定位DOM元素，并尝试手动编写动画。并不是说这些事情不好（我们中的一些人非常喜欢设计良好的组件）；而是几乎每次，当引入新的项目或设计主题时，我们的努力都会付诸东流。
- en: Through the use of reusable, reliable components that work the same on every
    modern browser (or at least that's the goal — ambitious, right?), Polymer intends
    to abstract the design from the development, allowing developers to focus on development,
    and designers to focus on design.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用在所有现代浏览器上（至少目标是这样的——雄心勃勃，对吧？）都能正常工作的可重用、可靠的组件，Polymer旨在将设计从开发中抽象出来，让开发者专注于开发，设计师专注于设计。
- en: This recipe will show you how to use Polymer components inside a Meteor application.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱将向您展示如何在Meteor应用程序中使用Polymer组件。
- en: Getting ready
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We are going to break down the actual recipe into two parts: configuring Meteor
    and Polymer and adding Polymer elements to our app. Because of this, we are going
    to handle the configuration and setup in the *Getting ready* step to keep the
    code and explanation of the code easier to understand.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把实际的步骤分解为两部分：配置 Meteor 和 Polymer 以及将 Polymer 元素添加到我们的应用中。因此，我们将把配置和设置放在 *准备工作*
    步骤中，以使代码和代码的解释更容易理解。
- en: Creating your app and folders
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建你的应用和文件夹
- en: 'We will need several folders and subfolders we don''t normally use, so let''s
    get our entire file structure out of the way. Open a terminal window, navigate
    to where you would like to create your root project, and execute the following
    commands:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将需要一些我们通常不使用的文件夹和子文件夹，所以让我们先整理好整个文件结构。打开终端窗口，导航到你想要创建根项目的地方，并执行以下命令：
- en: '[PRE18]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Creating your files
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建你的文件
- en: 'To save time creating files one by one later on, let''s create them all right
    now. In the same terminal window, in your `[project root]` folder, execute the
    following commands:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 为了节省以后逐个创建文件的时间，我们现在就一次性创建它们。在同一个终端窗口中，在你的 `[项目根目录]` 文件夹中，执行以下命令：
- en: '[PRE19]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Configuring Bower and installing Polymer
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 Bower 和安装 Polymer
- en: '**Bower** is the safest and best way to install the Polymer libraries, as it
    makes sure we have the latest and greatest. You will want to make sure that you
    have Bower installed. If you don''t, in your terminal window run the following
    command:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bower** 是安装 Polymer 库最安全、最好的方式，因为它确保我们拥有最新和最好的版本。你需要确保已经安装了 Bower。如果没有，在你的终端窗口中运行以下命令：'
- en: '[PRE20]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Tip
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'You may need to run npm as `sudo` because you''re installing globally. If so,
    run the following command:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要以 `sudo` 运行 npm，因为你正在全局安装。如果是这样，请运行以下命令：
- en: '[PRE21]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'With Bower installed, we want to tell Bower where we would like the Polymer
    components installed. In Meteor, that is in the `public`/`components` folder.
    In a text editor, open the `[project root]/.bowerrc` file, add the following line
    and save your changes:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Bower 后，我们想要告诉 Bower 我们希望将 Polymer 组件安装在哪里。在 Meteor 中，那就是在 `public`/`components`
    文件夹中。在文本编辑器中打开 `[项目根目录]/.bowerrc` 文件，添加以下行并保存更改：
- en: '[PRE22]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We are now ready to initialize our project using Bower. In a terminal window,
    in your `[project root]/` directory, enter the following command:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已准备好使用 Bower 初始化我们的项目。在终端窗口中，在你的 `[项目根目录]/` 目录中，输入以下命令：
- en: '[PRE23]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Bower is about to ask you a lot of questions! The good news is the answer to
    most of them is the *return* key, or a *space* and then the *return* key. Even
    better news is that most of the answers don''t really matter. But, you do need
    to go through this, so that Bower will generate the `bower.json` file for you,
    which will keep track of which Polymer libraries we install (more on that in a
    minute), so answer the questions similar to the following example:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Bower 即将问你很多问题！好消息是大多数问题的答案是 *回车键*，或者 *空格键然后回车键*。更好的消息是，大多数答案并不真正重要。但是，你需要完成这个过程，这样
    Bower 才会为你生成 `bower.json` 文件，该文件将跟踪我们安装了哪些 Polymer 库（关于这一点稍后详细说明），所以回答问题时可以参考以下示例：
- en: '[PRE24]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You will then get a preview of your `bower.json` file, as shown in the following
    screenshot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你将看到你的 `bower.json` 文件的预览，如下面的截图所示：
- en: '![Configuring Bower and installing Polymer](img/image00396.jpeg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![配置 Bower 和安装 Polymer](img/image00396.jpeg)'
- en: Provided that `private:true`, and `ignore:[…]` are in place, type *Y* and hit
    *Enter*. Your Bower configuration is now complete!
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 假设 `private:true` 和 `ignore:[...]` 已经设置好，输入 *Y* 并按 *Enter*。你的 Bower 配置现在已完成！
- en: 'We are now ready to install the Polymer libraries. In the same terminal window,
    enter the following commands, one after another, allowing one to complete before
    moving on to the next:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已准备好安装 Polymer 库。在同一个终端窗口中，依次输入以下命令，完成一个后再进行下一个：
- en: '[PRE25]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: On the last install, Bower will ask you what version of `polymer` and `core-components`
    will be supporting `polymer-github-card`. Select the version that the other components
    are dependent upon (as of this writing, this is `[library]#^0.5.0`).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后的安装中，Bower 将询问 `polymer` 和 `core-components` 的哪个版本将支持 `polymer-github-card`。选择其他组件所依赖的版本（截至本文撰写时，这是
    `[library]#^0.5.0`）。
- en: Adding helper Meteor packages
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加辅助 Meteor 包
- en: 'There are three third-party packages we need to add. One of them, (`voodoohop:masonrify`),
    will assist with our layout, and the other two, (`meteorhacks:inject-initial`
    and `differential:vulcanize`), will allow Polymer elements to be added to our
    Meteor project with the least amount of pain (we suspect that this will get better
    in the future, but for now this is the workaround; and honestly it''s not really
    so bad). In a terminal window, in your `[project root]/` folder, enter the following
    commands:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加三个第三方包。其中之一（`voodoohop:masonrify`）将帮助我们布局，另外两个（`meteorhacks:inject-initial`和`differential:vulcanize`）将允许以最小的痛苦将Polymer元素添加到我们的Meteor项目中（我们怀疑这将在未来变得更好，但现在这是一个解决方案；而且说实话，这并不真的很糟糕）。在终端窗口中，在您的`[项目根目录]/`文件夹中，输入以下命令：
- en: '[PRE26]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Configuring Meteor
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置Meteor
- en: Setup is almost done! Meteor generally gets along with other frameworks, but
    because Polymer has some pre-rendering DOM manipulations (which are really cool,
    but mess with Meteor's mojo…) we have to be able to inject an attribute into the
    `<body>` tag, and we also need to ensure that the base `polymer` and `webcomponents`
    files are referenced properly.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 设置几乎完成！Meteor通常与其他框架相处得很好，但由于Polymer有一些预渲染DOM操作（这真的很酷，但会干扰Meteor的魔力...）我们必须能够向`<body>`标签注入一个属性，我们还需要确保基本`polymer`和`webcomponents`文件被正确引用。
- en: 'In an editor, open the `[project root]/server/server.js` file, and add the
    following HTML injection code:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑器中打开`[项目根目录]/server/server.js`文件，并添加以下HTML注入代码：
- en: '[PRE27]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now we will take care of the baseline file references. Open `[project root]/client/templates/init/head.html`
    and add the following code:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将处理基本文件引用。打开`[项目根目录]/client/templates/init/head.html`文件，并添加以下代码：
- en: '[PRE28]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'One last step (this is for `vulcanize` to be able to consolidate all the component
    references), open `[project root]/client/imports.html` and add the following lines:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步（这是为了让`vulcanize`能够合并所有组件引用），打开`[项目根目录]/client/imports.html`文件，并添加以下行：
- en: '[PRE29]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Setup is complete! Let's start Meteor (run the `meteor` command in the terminal),
    open a browser to `http://localhost:3000`, and start using Polymer components!
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 设置已完成！让我们启动Meteor（在终端中运行`meteor`命令），打开浏览器到`http://localhost:3000`，并开始使用Polymer组件！
- en: How to do it…
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Two caveats to what we''re about to do: first, currently Polymer plays best
    with the Chrome browser. The samples below will work in other browsers, but there
    are some idiosyncrasies, such as `click` or `keypress` events, that may cause
    a little bit of frustration. Second, due to timing issues, as you''re making changes
    to your code, there may be some instances where you will need to manually refresh
    your browser (which is a very rare thing when using Meteor!).'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们即将要做的事情有两个注意事项：首先，目前Polymer与Chrome浏览器配合得最好。下面的示例在其他浏览器中也能工作，但有一些特性，如`click`或`keypress`事件，可能会引起一些挫败感。其次，由于时间问题，当您修改代码时，可能需要手动刷新浏览器（这在使用Meteor时是非常罕见的）。
- en: Keep in mind that Polymer is nowhere near being a `1.0` product — you are on
    the cutting edge with this recipe — so you'll have to bear with us, as we go through
    the fundamentals of using Polymer inside Meteor. Optimizing the timing and events
    and other behaviors across all other browsers would be a book in itself, so let's
    focus on the foundational part, and as Meteor and Polymer progress, these issues
    will work themselves out.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Polymer还远未达到`1.0`版本——您使用这个配方正处于前沿——所以您需要耐心等待，因为我们将在Meteor中使用Polymer的基础知识。优化所有其他浏览器的时间、事件和其他行为本身就是一本书的内容，所以让我们专注于基础部分，随着Meteor和Polymer的发展，这些问题将自行解决。
- en: 'We will first add our CSS styling. Polymer does the heavy lifting here, so
    let''s get what little CSS we have to contribute out of the way. Open `[project
    root]/client/styles.css` and add the following CSS declarations:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先添加我们的CSS样式。Polymer在这里做了大部分工作，所以让我们先处理我们必须要贡献的少量CSS。打开`[项目根目录]/client/styles.css`文件，并添加以下CSS声明：
- en: '[PRE30]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Let''s take a look at the `polymer-github-card` component, using a static representation,
    just to see what we''re playing around with. Open `[project root]/client/imports.html`,
    and add the following line just below the `"…polymer.html"` entry in the `C``omponents`
    section:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们看看`polymer-github-card`组件，使用静态表示，只是为了看看我们在玩什么。打开`[项目根目录]/client/imports.html`文件，并在`Components`部分的`"…polymer.html"`条目下方添加以下行：
- en: '[PRE31]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now open `main.html`, found in the same folder, and add the following code:'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在打开与文件夹相同的`main.html`文件，并添加以下代码：
- en: '[PRE32]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In your browser, after `vulcanize` recompiles your `<header>`, you should see
    something similar to the following screenshot:'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在你的浏览器中，在`vulcanize`重新编译你的`<header>`之后，你应该会看到以下截图类似的内容：
- en: '![How to do it…](img/image00397.jpeg)'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做…](img/image00397.jpeg)'
- en: 'Now that we have confirmed that Polymer is working correctly, let''s put the
    `polymer-github-card` component into a Meteor template, and create the ability
    to add multiple cards, based on a Mongo collection. Open `[project root]/both/model.js`
    and add the following line:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 既然我们已经确认Polymer运行正常，让我们将`polymer-github-card`组件放入Meteor模板中，并创建基于Mongo集合添加多个卡片的能力。打开`[项目根目录]/both/model.js`并添加以下行：
- en: '[PRE33]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now let''s create our template. You''ll remember that we''re using `voodoohop:masonrify`
    to control the layout, so we will need to wrap our template declarations inside
    the `{{#masonry…}}` blocks, as appropriate. Open `[project root]/client/templates/tmpl-authors.html`
    and add the following code:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们创建我们的模板。你会记得我们正在使用`voodoohop:masonrify`来控制布局，因此我们需要将模板声明包裹在适当的`{{#masonry…}}`块中。打开`[项目根目录]/client/templates/tmpl-authors.html`并添加以下代码：
- en: '[PRE34]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Again, the majority of the previous code relates to layout. The actual call
    to dynamically populate `polymer-github-card` components is found in the `authorCard`
    template, and references `{{userid}}` in the `user` attribute. `userid` comes
    free, as it will be a property for each record in the `Authors` collection.
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 再次强调，前面的代码的大部分与布局有关。实际调用动态填充`polymer-github-card`组件的代码位于`authorCard`模板中，并引用了`user`属性中的`{{userid}}`。`userid`是免费的，因为它是`Authors`集合中每条记录的属性。
- en: 'Let''s now create the `Template.helper` function for passing the `Authors`
    collection, via the `Collection.find()` function. Open `[project root]/client/templates/tmpl-authors.js`
    and add the following code:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们创建`Template.helper`函数，通过`Collection.find()`函数传递`Authors`集合。打开`[项目根目录]/client/templates/tmpl-authors.js`并添加以下代码：
- en: '[PRE35]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'While we''re at it, lets make deleting records very simple. In `tmpl-authors.js`,
    add the following event handler at the bottom:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们做这件事的时候，让我们使删除记录变得非常简单。在`tmpl-authors.js`中，在底部添加以下事件处理程序：
- en: '[PRE36]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We now need to modify our main template to reference our new dynamic template.
    Open `main.html` and modify the contents to look like the following:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在需要修改我们的主模板以引用我们新的动态模板。打开`main.html`并修改内容，使其看起来如下：
- en: '[PRE37]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Save all your changes, look in your browser (give `vulcanize` a second to do
    its thing), and you should see a completely blank page. Wow! That''s only because
    our `Authors` collection is empty. Let''s fix that. In your browser console, execute
    the following commands:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存所有更改，查看你的浏览器（给`vulcanize`一点时间来完成其任务），你应该会看到一个完全空白的页面。哇！这仅仅是因为我们的`Authors`集合是空的。让我们来修复这个问题。在你的浏览器控制台中，执行以下命令：
- en: '[PRE38]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'As you enter each command, a new card will pop into place, with the Meteor
    logo, and David Glasser''s smiling happy childhood picture, as shown in the following
    screenshot:'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当你输入每个命令时，一个新的卡片会出现在适当的位置，带有Meteor标志和David Glasser微笑快乐的童年照片，如下截图所示：
- en: '![How to do it…](img/image00398.jpeg)'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做…](img/image00398.jpeg)'
- en: The command line is so 1960's! Let's update our page to use some paper-elements
    components, and give us an easy way to add more GitHub authors.
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 命令行已经过时了！让我们更新我们的页面，使用一些纸张元素组件，并给我们一个简单的方法来添加更多的GitHub作者。
- en: 'Open `[project root]/imports.html` and add links for the components we will
    be using (which are found in our `public/components/` folder, by the way…) just
    below the `"…polymer.html"` declaration. When finished, your file should look
    like the following:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`[项目根目录]/imports.html`并为我们将要使用的组件添加链接（顺便说一下，这些组件位于我们的`public/components/`文件夹中…）在`"…polymer.html"`声明下方。完成后，你的文件应该看起来如下：
- en: '[PRE39]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Let''s create our `search` template, which will contain a `paper-input` component,
    and a `paper-button` component. Open `[project root]/client/templates/tmpl-search.html`
    and add the following code:'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们创建我们的`search`模板，它将包含一个`paper-input`组件和一个`paper-button`组件。打开`[项目根目录]/client/templates/tmpl-search.html`并添加以下代码：
- en: '[PRE40]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: There's nothing special about the preceding code, Meteor-wise. It's all just
    straight up Polymer formatting and configuration.
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Meteor方面，前面的代码没有什么特别之处。它只是直接的Polymer格式化和配置。
- en: Tip
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'To learn more about Polymer components, please visit:'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要了解更多关于Polymer组件的信息，请访问：
- en: '[https://www.polymer-project.org/docs/polymer/polymer.html](https://www.polymer-project.org/docs/polymer/polymer.html).'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.polymer-project.org/docs/polymer/polymer.html](https://www.polymer-project.org/docs/polymer/polymer.html).'
- en: 'We will want to add a new card whenever we perform a search, that is, whenever
    we hit *Enter* inside our `paper-input` component, or click on our `paper-button`
    component. Open `tmpl-search.js`, found in the same `client/templates/` folder,
    and add the following code:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们希望在执行搜索时添加新卡片，也就是说，在我们`paper-input`组件内部按下*Enter*键或点击我们的`paper-button`组件时。打开位于同一`client/templates/`文件夹中的`tmpl-search.js`，并添加以下代码：
- en: '[PRE41]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The very last step is to add a template inclusion for our `search` template
    to `main.html`. Open `[project root]/client/main.html` and add the following highlighted
    code:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是为我们的`search`模板在`main.html`中添加一个模板包含。打开`[项目根]/client/main.html`并添加以下高亮代码：
- en: '[PRE42]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'All done! Check out your app in the browser, allowing for refresh/recompiling,
    and you should be able to add as many GitHub author cards as you would like. Add
    some authors (suggestions: `meteorhacks` , `arunoda` , `d3` , `mbostock` , `voodoohop`
    , `pazguille` , `polymer` , `addyosmani` ) and new cards will appear after each
    entry, as shown in the following screenshot:'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完成了！在浏览器中查看您的应用程序，允许刷新/重新编译，您应该能够添加您想要的任何GitHub作者卡片。添加一些作者（建议：`meteorhacks`
    , `arunoda` , `d3` , `mbostock` , `voodoohop` , `pazguille` , `polymer` , `addyosmani`），在每次输入后都会出现新卡片，如下面的截图所示：
- en: '![How to do it…](img/image00399.jpeg)'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/image00399.jpeg)'
- en: How it works…
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Very rarely do we need to refer to the *Getting ready* section to fully understand
    what's going on, but the context around where and how to place Polymer files is
    important, so let's start there. We directed Bower to put any and all Polymer
    files into a subfolder belonging to `[project root]/public/`. Meteor treats files
    in the `public` folder differently than other folders—it treats them as static,
    and will not process the `.js` or `.html` files found inside.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们很少需要参考“准备就绪”部分来完全理解正在发生的事情，但关于在哪里以及如何放置Polymer文件的环境很重要，所以让我们从这里开始。我们将Bower指向将所有Polymer文件放入属于`[项目根]/public/`的子文件夹。Meteor对待`public`文件夹中的文件与其他文件夹不同——它将它们视为静态文件，并且不会处理其中找到的`.js`或`.html`文件。
- en: This is to our advantage, because there are currently some pretty nasty conflicts
    between the Polymer and Meteor renderers. Specifically, both use the `{{double-stache}}`
    notation and the `<template>` tag, and interpret them differently. To resolve
    these conflicts (Nobel peace prize incoming!...) we "fence off" each framework,
    allowing Polymer to link to anything in the `public` folder, and having Meteor
    ignore everything in the same place. It's almost like the **Meteor Development
    Group** (**MDG**) planned it that way! Of course they did, anticipating and encouraging
    the use of other opinionated frameworks. MDG truly does want Meteor to play well
    with others, and in this case, it allows us to use Polymer in our applications.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这对我们有利，因为目前Polymer和Meteor渲染器之间存在一些相当棘手的冲突。具体来说，两者都使用`{{double-stache}}`符号和`<template>`标签，但它们的解释不同。为了解决这些冲突（诺贝尔和平奖即将到来！...）我们“隔离”每个框架，允许Polymer链接到`public`文件夹中的任何内容，并让Meteor忽略同一位置的所有内容。这几乎就像**Meteor开发组**（**MDG**）有意这样设计的一样！当然，他们是这样的，预计并鼓励使用其他有偏见的框架。MDG确实希望Meteor与其他人良好地协作，在这种情况下，它允许我们在应用程序中使用Polymer。
- en: A couple of other adjustments had to be made, such as inserting link elements
    into our `<head>` block, and injecting the unresolved attribute into the `<body>`
    element, but these are small, one-time issues, and once they're complete, we are
    free to use Polymer components to our heart's content.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要进行一些其他调整，例如在`<head>`块中插入链接元素，并将未解析的属性注入到`<body>`元素中，但这些只是小问题，只需一次性解决，一旦完成，我们就可以随心所欲地使用Polymer组件。
- en: 'As for the use of the Polymer components themselves, we can either use them
    directly (as shown in step #2) with no involvement from Meteor, or we can incorporate
    them into our `{{#each…}}` template or other template inclusions. We then have
    access to the normal Meteor `Template.helpers` and `Template.events`, which gives
    us easy, declarative-style access to reactive data.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 至于Polymer组件的使用，我们既可以直接使用它们（如步骤#2所示），无需Meteor的参与，也可以将它们整合到我们的`{{#each…}}`模板或其他模板中。这样我们就有了访问正常的Meteor
    `Template.helpers`和`Template.events`的权限，这为我们提供了对反应性数据的简单、声明式访问。
- en: 'Specifically, if we look at the `tmpl-authors.html` file, we will see that
    we are using the `{{#each authors}}` and `{{userid}}` template helpers, to iterate
    and render `polymer-github-card` components on the fly:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，如果我们查看`tmpl-authors.html`文件，我们会看到我们正在使用`{{#each authors}}`和`{{userid}}`模板助手，动态地迭代和渲染`polymer-github-card`组件：
- en: '[PRE43]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'In `tmpl-authors.js` and `tmpl-search.js`, we make use of `Template.events`
    to interpret `keypressed`, `click`, and `dblclick`, and are able to use the in-context
    (inline) data to modify records, such as when we delete a record, using the `Authors.remove({_id:this._id})`
    statement:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在`tmpl-authors.js`和`tmpl-search.js`中，我们使用`Template.events`来解析`keypressed`、`click`和`dblclick`事件，并能够使用上下文（内联）数据来修改记录，例如当我们使用`Authors.remove({_id:this._id})`语句删除记录时：
- en: '[PRE44]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: There's more…
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: There are a very large number of interaction and compatibility/performance nuances
    between Polymer and Meteor, which are beyond the scope of this recipe (and this
    book). We recommend perusing Stack Overflow ([http://stackoverflow.com/questions/tagged/meteor](http://stackoverflow.com/questions/tagged/meteor)),
    the Meteor forums ([https://forums.meteor.com/](https://forums.meteor.com/)),
    or just lifting the hood and experimenting, to gain more experience in properly
    integrating Polymer and Meteor.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: Polymer和Meteor之间存在大量交互和兼容性/性能的细微差别，这些内容超出了本食谱（以及本书）的范围。我们建议浏览Stack Overflow
    ([http://stackoverflow.com/questions/tagged/meteor](http://stackoverflow.com/questions/tagged/meteor))、气象论坛([https://forums.meteor.com/](https://forums.meteor.com/))，或者直接打开
    hood 进行实验，以获得更多关于正确集成Polymer和Meteor的经验。
- en: See also
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Adding Meteor packages* recipe in [Chapter 2](part0028.xhtml#aid-QMFO1
    "Chapter 2. Customizing with Packages"), *Customizing with Packages*
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第2章](part0028.xhtml#aid-QMFO1 "第2章. 使用包进行自定义")的*添加气象包*食谱，*使用包进行自定义*
- en: The *Creating custom components* recipe in [Chapter 3](part0036.xhtml#aid-12AK81
    "Chapter 3. Building Great User Interfaces"), *Building Great User Interfaces*
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第3章](part0036.xhtml#aid-12AK81 "第3章. 构建出色的用户界面")的*创建自定义组件*食谱中，*构建出色的用户界面*
- en: The *Implementing a simple collection* recipe in [Chapter 4](part0046.xhtml#aid-1BRPS1
    "Chapter 4. Creating Models"), *Creating Models*
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第4章](part0046.xhtml#aid-1BRPS1 "第4章. 创建模型")的*实现简单集合*食谱中，*创建模型*
