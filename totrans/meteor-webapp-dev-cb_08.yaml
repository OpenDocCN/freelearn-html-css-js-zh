- en: Chapter 8. Integrating Third-party Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using npm packages directly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building graphs with D3.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating cutting-edge UIs with Polymer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With so many third-party packages available via Atmosphere it's very easy to
    build, basically, anything! If you have a specific development need—some type
    of logic or library—chances are someone else has already packaged it up for you
    (and if they haven't, what a great opportunity for you!).
  prefs: []
  type: TYPE_NORMAL
- en: That being said, not all packages are created equal. Some will have fantastic
    documentation, with samples and tutorials on how to implement a library inside
    Meteor. Others, not so much. In either case, you will at some point need to roll
    up your sleeves and do a bit of work yourself. In this chapter, we will go over
    a few of the more popular third-party libraries, and show you how to implement
    them in Meteor.
  prefs: []
  type: TYPE_NORMAL
- en: Using npm packages directly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen from the *Using npm modules* recipe in [Chapter 2](part0028.xhtml#aid-QMFO1
    "Chapter 2. Customizing with Packages"), *Customizing with Packages*, how to wrap
    npm packages inside your own personal package, using the `Npm.depends()` directive.
    That's all well and good, but what if we want to just use npm directly, without
    creating a custom package? Arunoda Susiripala — one of the most prolific (and
    brilliant) Meteor community developers, has written a package that helps us do
    just that. In this recipe, you will learn how to use the `meteorhacks:npm` package
    to implement a npm module directly in your code. Specifically, we will use the
    `Highlight.js` module on the server to properly format JavaScript code, as you
    might see in markdown or in an online code editor.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will be using a default project installation, with the `client`, `server`,
    and `both` folders, to keep the code clean and readable. We will also use the
    `private` folder for some static content, so let''s add that while we''re at it.
    In a terminal window, navigate to where you would like your project to reside,
    and execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We also want to make use of the `meteorhacks:npm` package, so let''s do that
    now. Run the following commands in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Lastly, we will want to open a browser to `http://localhost:3000`, so we can
    watch the fun! We're now ready to start creating our direct npm integrations.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will be adding the `Highlight.js` Node module and adding some sample code
    to leverage the module, using an inline template as our work area. Proceed with
    the following steps to use npm packages directly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will first add the `Highlight.js` Node module. To add a direct-use npm module,
    we will make a simple declaration in the `packages.json` file that was automatically
    added to our project when we added `meteorhacks:npm`. Open `[project root]/packages.json`
    and add the following declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you look in the terminal window where Meteor is running, you will see something
    similar to the following text:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Our `Highlight.js` module is now ready to use!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We will now create the server logic needed to use `Highlight.js`. Create a
    file named `server.js` in the `[project root]/server/` directory. Open that file
    for editing and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, let's create a sample code file in the `private` folder. We are going
    to use a base text file for the code we will highlight to make the syntax much
    easier (rather than try to do it in a JavaScript `var`, which can be messy with
    escape sequences). Meteor lets us use the `[project root]/private/` folder to
    store static files only visible on the server. Create a file in the `private`
    folder, called `code.txt`, and add some (valid) JavaScript to the file. We will
    reuse the `var setC = …` function from the preceding step, but you can put anything
    you want inside there, provided it's valid JavaScript. Once you've added some
    code, save your changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We now need to create a simple code panel template. Create a file in `[project
    root]/client/` named `main.html`. Open that file for editing, and add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the template in place, we can add `Template.code.helpers`, and use `Meteor.call()`.
    Create a file in `[project root]/client/` called `tmpl-code.js` and add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After saving these changes, your code from the `code.js` file will be visible,
    albeit with little/no CSS formatting. If you check your browser, you should see
    something similar to the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00393.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Well, that's not all that impressive, is it? Let's really highlight what is
    happening with some custom CSS. In a browser, navigate to the official list of
    `Highlights.js` themes, found at [https://github.com/isagalaev/highlight.js/tree/master/src/styles](https://github.com/isagalaev/highlight.js/tree/master/src/styles)
    and pick any theme you like. Simply click on the name of the theme, click on the
    button labeled **Raw**, and copy the corresponding CSS code. Then, create a file
    named `style.css` in your `[project root]/client/` folder, paste the code you
    copied, and save the file. Your formatted text should now have some noticeable
    formatting and coloring, similar to the following screenshot (this is the `Solarized
    Light` theme, copied from `solarized_light.css` at the link that we mentioned
    previously):![How to do it...](img/image00394.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Inside of our `server.js` file, we created a simple `Meteor` method, available
    on (and called by) the client via `Meteor.call()`. We created a separate function
    that is called inside of the method even though we didn''t have to (we could have
    just put the logic directly in the method call), because we wanted to keep our
    code clean and illustrative. Inside the `setC()` function, we make direct use
    of a npm module by using `Meteor.npmRequire()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Quickly referencing our text file via `Assets.getText()`, we pipe our sample
    code into the `Highlights.js` file in the `.highlight()` method, which takes the
    language (`''javascript''`) as an argument, to let the module know what language
    highlighting we would like to see in the resultant formatted text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We return the formatted text, which is subsequently updated in the client UI,
    through the `Session.get('code')` variable. The template renders the raw HTML
    string, thanks to the use of `{{{triple moustaches}}}` rather than double, and
    the CSS file we added takes care of the eye candy for us.
  prefs: []
  type: TYPE_NORMAL
- en: In a nutshell, it really is that simple — by adding the `meteorhacks:npm` package,
    we can simply declare which npm modules we would like to use in our `packages.json`
    file, and then use them directly in Meteor, via the `Meteor.npmRequire()` function.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you may be aware, npm runs strictly asynchronously and is non-blocking. This
    means that a lot of the times when you want to use an npm module in Meteor, and
    want to do so synchronously, you need to wrap the call in an `Async` wrapper.
    We will explore how to do this in more depth in [Chapter 11](part0083.xhtml#aid-2F4UM1
    "Chapter 11. Leveraging Advanced Features"), *Leveraging Advanced Features,* but
    the `meteorhacks:npm` package allows us to do this quickly/easily as well, via
    the `Async.wrap()` and `Async.runSync()` methods.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To learn more about `Async.wrap` and other methods available in `meteorhacks:npm`,
    please see the introduction available at [https://atmospherejs.com/meteorhacks/npm](https://atmospherejs.com/meteorhacks/npm).
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, even though it''s undocumented (and therefore not officially supported/subject
    to change), there are some npm modules used by the core Meteor server libraries
    that are exposed and usable on the server side. To use any of these, simply use
    `Npm.require()` in your server code, and you don''t need to implement anything
    else. You can use them directly. The current list, as of `v1.0.2`, is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`child_process`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`crypto`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fibers`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fibers/future`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`os`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`semver`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`source-map-support`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`underscore`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`url`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using npm modules* recipe in [Chapter 2](part0028.xhtml#aid-QMFO1 "Chapter 2. Customizing
    with Packages"), *Customizing with Packages*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Inserting raw HTML using triple braces* recipe in [Chapter 3](part0036.xhtml#aid-12AK81
    "Chapter 3. Building Great User Interfaces"), *Building Great User Interfaces*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Handling asynchronous events* and *Using asynchronous functions* recipes
    in [Chapter 11](part0083.xhtml#aid-2F4UM1 "Chapter 11. Leveraging Advanced Features"),
    *Leveraging Advanced Features*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building graphs with D3.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using third-party libraries to render content inside Meteor is simple and easy
    to do, and there are a lot of great libraries out there. One of our personal favorites
    is the `D3.js` library ([http://d3js.org/](http://d3js.org/)). It's well-documented,
    well-supported, and is a representative example of how to implement other (mostly)
    self-contained graphics rendering libraries. In this recipe we will create a demo
    graph application, complete with animations, using `D3.js.`
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will be using a default project installation, with the `client`, `server`,
    and `both` folders, and we will of course need the official `D3.js` package. In
    a terminal window, navigate to where you would like your project to reside, and
    execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: With that out of the way, let's build us some sample graphs in D3!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Normally, the `D3.js` data sources are updated manually, or as the result of
    a feed, with an `update` statement of some kind being called. Because Meteor enables
    reactive computations (see the *Creating and consuming a reactive value* recipe
    in [Chapter 6](part0058.xhtml#aid-1NA0K1 "Chapter 6. Mastering Reactivity"), *Mastering
    Reactivity*), we are going to put the `D3.js` rendering logic right into a `Tracker.autorun()`
    computation instead. Let's set up our reactive data source, throw that rendering
    logic into an `autorun`, and add some animations for good measure!
  prefs: []
  type: TYPE_NORMAL
- en: 'We first need to create and initialize the `Letters` collection. Create a file
    named `model.js` in your `[project root]/both/` folder, and add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s add an initialization of that collection as well. In your `[project
    root]/server/` folder, create a file named `server.js` and add the following `Meteor.startup`
    function code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'While we have `server.js` open, let''s add a quick helper method to update
    the frequency, which we will use a bit later. Add the following code to `server.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we will add some simple scaffolding and styling. Our HTML is extremely
    simple, because `D3.js` is doing the heavy lifting. That said, we do want to put
    our `svg` element into a Meteor Template. Navigate to your `[project root]/client/`
    folder, create a file named `client.html`, and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s add some simple styling to adjust fonts and colors, and so on. Create
    a file named `[project root]/client/style.css` and add the following CSS declarations:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We are now ready to add the `D3.js` rendering logic, inside `rendered`/`autorun`.
    The following code is taken almost line-for-line from Mike Bostock's awesome introductory
    tutorial on `D3.js`. The easiest thing to do would be to take the existing code
    base from that tutorial, copy and paste it into a local file, and then modify
    it. To do this, navigate in a browser to [http://bl.ocks.org/mbostock/3885304](http://bl.ocks.org/mbostock/3885304)
    and copy everything inside the `<script>` tag to the ending `</script>` tag. Create
    a file named `client.js` in your `[project root]/client/` folder, and paste the
    code into the new file (about 60 lines of code).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We will now modify the code from that page in the following four ways:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Wrap all of the code inside a `Template.rendered` callback
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrap and extend the `d3.selectAll` rendering code inside an `autorun` computation
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Move and modify the axes rendering code outside the `autorun`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Change data to point to our `Letters.find()` Mongo query
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The completed `Template.diagram.rendered` callback is listed in the following
    code. It mainly consists of the `D3.js` sample code, with the preceding four modifications
    highlighted. If it''s easier, you can simply copy and paste from below, rather
    than making the modifications yourself. However, it''s worthwhile to at least
    go over the changes, to see how the code was modified. In your `client.js` file,
    make the following modifications to the existing code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now create and call the `randomize` function. Our page should be rendering
    correctly now (check at `http://localhost:3000` and see for yourself), but it''s
    not moving or doing anything else. Let''s change that by changing to random frequency
    values for our letters. Towards the bottom of `client.js`, just after the `autorun`
    block, and just before the ending bracket for the rendered `callback` block, add
    the following timer call:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add the `randomize()` function at the very bottom of the file, after
    everything else:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save all of your changes, and your bar chart should be hopping along happily,
    similar to the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00395.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two key rules to remember when integrating `D3.js` (and, by extension,
    any other rendering engine):'
  prefs: []
  type: TYPE_NORMAL
- en: Put all your DOM/SVG manipulation logic inside `Template.rendered()`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make the data source reactive, and wrap the rendering logic inside `Tracker.autorun()`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We followed rule #1 when we added the entire `D3.js` logic from the tutorial
    inside of `Template.diagram.rendered()`. This tells Blaze to keep its (awesome,
    yet grubby) hands off everything we''ll be doing. We''re essentially telling Blaze
    to go have a smoke break, while we implement some good ol'' fashioned DOM/SVG
    manipulation (and animations!).'
  prefs: []
  type: TYPE_NORMAL
- en: Then, instead of relying on a non-reactive data source, where we would have
    to periodically check for updates and/or call an `update()` function whenever
    results change, we used Meteor's declarative, reactive programming style by wrapping
    the `D3.js` logic inside an `autorun` function. That `autorun` function will re-run
    every time there's a change to the `Letters` collection, thanks to `var data =
    Letters.find().fetch()`; which is a reactive data source.
  prefs: []
  type: TYPE_NORMAL
- en: 'In other words, we followed rule #2 by creating a `D3.js`-friendly reactive
    computation, instead of using a functional (non-reactive) data model, like a hobo.
    Mike Bostock would be proud of us, as the avoidance of functional programming
    is one of the core tenets of `D3.js`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It seems like we wrote a lot of code because of the `D3.js` sample code, and
    there are some details we''re leaving out, such as moving the `y` and `x` axes
    rendering logic outside the `autorun` function (because we don''t want to re-render
    it every time), but it really is that simple. Notice how incredibly simple (and
    loosely-coupled) our update statement is, inside the `randomize()` function: one.
    single. line.'
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to third-party renderers, wrap using `rendered()` and be reactive
    using `autorun()`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Wrap using `rendered()`, be reactive using `autorun()`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We strongly encourage you to look deeper into `D3.js`, which (as mentioned)
    runs on the same declarative programming principle as Meteor. There's a reason
    it integrates so cleanly, and for SVG graphs and animations, it really is top
    notch.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tutorials for `D3.js` can be found at [https://github.com/mbostock/d3/wiki/Tutorials](https://github.com/mbostock/d3/wiki/Tutorials).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating dynamic lists* recipe in [Chapter 3](part0036.xhtml#aid-12AK81
    "Chapter 3. Building Great User Interfaces"), *Building Great User Interfaces*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating dynamic graphs with SVG and Ajax* recipe in [Chapter 7](part0065.xhtml#aid-1TVKI1
    "Chapter 7. Using Client Methods"), *Using Client Methods*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating cutting-edge UIs with Polymer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Polymer ([https://www.polymer-project.org/](https://www.polymer-project.org/))
    is ambitious. It is ambitious in the very best possible way, in that, if it succeeds,
    it will make our development lives so much better.
  prefs: []
  type: TYPE_NORMAL
- en: One of the largest time-wasting activities we as web developers go through is
    tweaking CSS, repositioning DOM elements, and trying to manually code animations.
    It's not that those things are bad (some of us quite enjoy well-designed components);
    It's that nearly every time, our efforts are thrown away when a new project or
    design theme is introduced.
  prefs: []
  type: TYPE_NORMAL
- en: Through the use of reusable, reliable components that work the same on every
    modern browser (or at least that's the goal — ambitious, right?), Polymer intends
    to abstract the design from the development, allowing developers to focus on development,
    and designers to focus on design.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to use Polymer components inside a Meteor application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to break down the actual recipe into two parts: configuring Meteor
    and Polymer and adding Polymer elements to our app. Because of this, we are going
    to handle the configuration and setup in the *Getting ready* step to keep the
    code and explanation of the code easier to understand.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating your app and folders
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will need several folders and subfolders we don''t normally use, so let''s
    get our entire file structure out of the way. Open a terminal window, navigate
    to where you would like to create your root project, and execute the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Creating your files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To save time creating files one by one later on, let''s create them all right
    now. In the same terminal window, in your `[project root]` folder, execute the
    following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Configuring Bower and installing Polymer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Bower** is the safest and best way to install the Polymer libraries, as it
    makes sure we have the latest and greatest. You will want to make sure that you
    have Bower installed. If you don''t, in your terminal window run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You may need to run npm as `sudo` because you''re installing globally. If so,
    run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'With Bower installed, we want to tell Bower where we would like the Polymer
    components installed. In Meteor, that is in the `public`/`components` folder.
    In a text editor, open the `[project root]/.bowerrc` file, add the following line
    and save your changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We are now ready to initialize our project using Bower. In a terminal window,
    in your `[project root]/` directory, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Bower is about to ask you a lot of questions! The good news is the answer to
    most of them is the *return* key, or a *space* and then the *return* key. Even
    better news is that most of the answers don''t really matter. But, you do need
    to go through this, so that Bower will generate the `bower.json` file for you,
    which will keep track of which Polymer libraries we install (more on that in a
    minute), so answer the questions similar to the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'You will then get a preview of your `bower.json` file, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring Bower and installing Polymer](img/image00396.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Provided that `private:true`, and `ignore:[…]` are in place, type *Y* and hit
    *Enter*. Your Bower configuration is now complete!
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now ready to install the Polymer libraries. In the same terminal window,
    enter the following commands, one after another, allowing one to complete before
    moving on to the next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: On the last install, Bower will ask you what version of `polymer` and `core-components`
    will be supporting `polymer-github-card`. Select the version that the other components
    are dependent upon (as of this writing, this is `[library]#^0.5.0`).
  prefs: []
  type: TYPE_NORMAL
- en: Adding helper Meteor packages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are three third-party packages we need to add. One of them, (`voodoohop:masonrify`),
    will assist with our layout, and the other two, (`meteorhacks:inject-initial`
    and `differential:vulcanize`), will allow Polymer elements to be added to our
    Meteor project with the least amount of pain (we suspect that this will get better
    in the future, but for now this is the workaround; and honestly it''s not really
    so bad). In a terminal window, in your `[project root]/` folder, enter the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Configuring Meteor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Setup is almost done! Meteor generally gets along with other frameworks, but
    because Polymer has some pre-rendering DOM manipulations (which are really cool,
    but mess with Meteor's mojo…) we have to be able to inject an attribute into the
    `<body>` tag, and we also need to ensure that the base `polymer` and `webcomponents`
    files are referenced properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'In an editor, open the `[project root]/server/server.js` file, and add the
    following HTML injection code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will take care of the baseline file references. Open `[project root]/client/templates/init/head.html`
    and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'One last step (this is for `vulcanize` to be able to consolidate all the component
    references), open `[project root]/client/imports.html` and add the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Setup is complete! Let's start Meteor (run the `meteor` command in the terminal),
    open a browser to `http://localhost:3000`, and start using Polymer components!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Two caveats to what we''re about to do: first, currently Polymer plays best
    with the Chrome browser. The samples below will work in other browsers, but there
    are some idiosyncrasies, such as `click` or `keypress` events, that may cause
    a little bit of frustration. Second, due to timing issues, as you''re making changes
    to your code, there may be some instances where you will need to manually refresh
    your browser (which is a very rare thing when using Meteor!).'
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that Polymer is nowhere near being a `1.0` product — you are on
    the cutting edge with this recipe — so you'll have to bear with us, as we go through
    the fundamentals of using Polymer inside Meteor. Optimizing the timing and events
    and other behaviors across all other browsers would be a book in itself, so let's
    focus on the foundational part, and as Meteor and Polymer progress, these issues
    will work themselves out.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will first add our CSS styling. Polymer does the heavy lifting here, so
    let''s get what little CSS we have to contribute out of the way. Open `[project
    root]/client/styles.css` and add the following CSS declarations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s take a look at the `polymer-github-card` component, using a static representation,
    just to see what we''re playing around with. Open `[project root]/client/imports.html`,
    and add the following line just below the `"…polymer.html"` entry in the `C``omponents`
    section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now open `main.html`, found in the same folder, and add the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In your browser, after `vulcanize` recompiles your `<header>`, you should see
    something similar to the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00397.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Now that we have confirmed that Polymer is working correctly, let''s put the
    `polymer-github-card` component into a Meteor template, and create the ability
    to add multiple cards, based on a Mongo collection. Open `[project root]/both/model.js`
    and add the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now let''s create our template. You''ll remember that we''re using `voodoohop:masonrify`
    to control the layout, so we will need to wrap our template declarations inside
    the `{{#masonry…}}` blocks, as appropriate. Open `[project root]/client/templates/tmpl-authors.html`
    and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Again, the majority of the previous code relates to layout. The actual call
    to dynamically populate `polymer-github-card` components is found in the `authorCard`
    template, and references `{{userid}}` in the `user` attribute. `userid` comes
    free, as it will be a property for each record in the `Authors` collection.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s now create the `Template.helper` function for passing the `Authors`
    collection, via the `Collection.find()` function. Open `[project root]/client/templates/tmpl-authors.js`
    and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'While we''re at it, lets make deleting records very simple. In `tmpl-authors.js`,
    add the following event handler at the bottom:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now need to modify our main template to reference our new dynamic template.
    Open `main.html` and modify the contents to look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save all your changes, look in your browser (give `vulcanize` a second to do
    its thing), and you should see a completely blank page. Wow! That''s only because
    our `Authors` collection is empty. Let''s fix that. In your browser console, execute
    the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As you enter each command, a new card will pop into place, with the Meteor
    logo, and David Glasser''s smiling happy childhood picture, as shown in the following
    screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00398.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The command line is so 1960's! Let's update our page to use some paper-elements
    components, and give us an easy way to add more GitHub authors.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open `[project root]/imports.html` and add links for the components we will
    be using (which are found in our `public/components/` folder, by the way…) just
    below the `"…polymer.html"` declaration. When finished, your file should look
    like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s create our `search` template, which will contain a `paper-input` component,
    and a `paper-button` component. Open `[project root]/client/templates/tmpl-search.html`
    and add the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's nothing special about the preceding code, Meteor-wise. It's all just
    straight up Polymer formatting and configuration.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To learn more about Polymer components, please visit:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[https://www.polymer-project.org/docs/polymer/polymer.html](https://www.polymer-project.org/docs/polymer/polymer.html).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We will want to add a new card whenever we perform a search, that is, whenever
    we hit *Enter* inside our `paper-input` component, or click on our `paper-button`
    component. Open `tmpl-search.js`, found in the same `client/templates/` folder,
    and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The very last step is to add a template inclusion for our `search` template
    to `main.html`. Open `[project root]/client/main.html` and add the following highlighted
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'All done! Check out your app in the browser, allowing for refresh/recompiling,
    and you should be able to add as many GitHub author cards as you would like. Add
    some authors (suggestions: `meteorhacks` , `arunoda` , `d3` , `mbostock` , `voodoohop`
    , `pazguille` , `polymer` , `addyosmani` ) and new cards will appear after each
    entry, as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00399.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Very rarely do we need to refer to the *Getting ready* section to fully understand
    what's going on, but the context around where and how to place Polymer files is
    important, so let's start there. We directed Bower to put any and all Polymer
    files into a subfolder belonging to `[project root]/public/`. Meteor treats files
    in the `public` folder differently than other folders—it treats them as static,
    and will not process the `.js` or `.html` files found inside.
  prefs: []
  type: TYPE_NORMAL
- en: This is to our advantage, because there are currently some pretty nasty conflicts
    between the Polymer and Meteor renderers. Specifically, both use the `{{double-stache}}`
    notation and the `<template>` tag, and interpret them differently. To resolve
    these conflicts (Nobel peace prize incoming!...) we "fence off" each framework,
    allowing Polymer to link to anything in the `public` folder, and having Meteor
    ignore everything in the same place. It's almost like the **Meteor Development
    Group** (**MDG**) planned it that way! Of course they did, anticipating and encouraging
    the use of other opinionated frameworks. MDG truly does want Meteor to play well
    with others, and in this case, it allows us to use Polymer in our applications.
  prefs: []
  type: TYPE_NORMAL
- en: A couple of other adjustments had to be made, such as inserting link elements
    into our `<head>` block, and injecting the unresolved attribute into the `<body>`
    element, but these are small, one-time issues, and once they're complete, we are
    free to use Polymer components to our heart's content.
  prefs: []
  type: TYPE_NORMAL
- en: 'As for the use of the Polymer components themselves, we can either use them
    directly (as shown in step #2) with no involvement from Meteor, or we can incorporate
    them into our `{{#each…}}` template or other template inclusions. We then have
    access to the normal Meteor `Template.helpers` and `Template.events`, which gives
    us easy, declarative-style access to reactive data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, if we look at the `tmpl-authors.html` file, we will see that
    we are using the `{{#each authors}}` and `{{userid}}` template helpers, to iterate
    and render `polymer-github-card` components on the fly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'In `tmpl-authors.js` and `tmpl-search.js`, we make use of `Template.events`
    to interpret `keypressed`, `click`, and `dblclick`, and are able to use the in-context
    (inline) data to modify records, such as when we delete a record, using the `Authors.remove({_id:this._id})`
    statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a very large number of interaction and compatibility/performance nuances
    between Polymer and Meteor, which are beyond the scope of this recipe (and this
    book). We recommend perusing Stack Overflow ([http://stackoverflow.com/questions/tagged/meteor](http://stackoverflow.com/questions/tagged/meteor)),
    the Meteor forums ([https://forums.meteor.com/](https://forums.meteor.com/)),
    or just lifting the hood and experimenting, to gain more experience in properly
    integrating Polymer and Meteor.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding Meteor packages* recipe in [Chapter 2](part0028.xhtml#aid-QMFO1
    "Chapter 2. Customizing with Packages"), *Customizing with Packages*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating custom components* recipe in [Chapter 3](part0036.xhtml#aid-12AK81
    "Chapter 3. Building Great User Interfaces"), *Building Great User Interfaces*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Implementing a simple collection* recipe in [Chapter 4](part0046.xhtml#aid-1BRPS1
    "Chapter 4. Creating Models"), *Creating Models*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
