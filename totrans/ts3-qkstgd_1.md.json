["```js\nnpm install -g typescript\n```", "```js\nnode -v\nnpm -v\ntsc -v\n```", "```js\nnpm install -g grunt-cli\n```", "```js\nnpm install grunt --save-dev\n```", "```js\nnpm install grunt-ts --save-dev\n```", "```js\nnpm install typescript --save-dev\n```", "```js\nmodule.exports = function(grunt) {\n grunt.initConfig({\n   ts: {\n    default : {\n     tsconfig: './tsconfig.json'\n    }\n   }\n });\n grunt.loadNpmTasks(\"grunt-ts\");\n grunt.registerTask(\"default\", [\"ts\"]);\n};\n```", "```js\n{\n \"compilerOptions\": {\n   \"rootDir\": \"src\",\n   \"outDir\": \"build\",\n }\n}\n```", "```js\ntsconfig error: \"Error parsing \\\"./tsconfig.json\\\".  It may not be valid JSON in UTF-8.\"\n```", "```js\nmodule.exports = function (grunt) {\n grunt.initConfig({\n  ts: {\n   default: {\n    src: [\"src/**/*.ts\"],\n     outDir: \"build\",\n     options: {\n     rootDir: \"src\"\n    }\n   }\n  }\n });\n grunt.loadNpmTasks(\"grunt-ts\");\n grunt.registerTask(\"default\", [\"ts\"]);\n};\n```", "```js\nnpm install -g gulp\nnpm install --save-dev gulp-typescript\n```", "```js\nvar gulp = require(\"gulp\");\nvar ts = require(\"gulp-typescript\");\n\ngulp.task(\"default\", function () {\n var tsResult = gulp.src(\"src/**/*.ts\")\n .pipe(ts());\n return tsResult.js.pipe(gulp.dest(\"build\"));\n});\n```", "```js\nvar gulp = require('gulp');\nvar ts = require('gulp-typescript');\nvar tsProject = ts.createProject('tsconfig.json');\n\ngulp.task('scripts', function() {\n return gulp.src('src/**/*.ts')\n .pipe(tsProject())\n .pipe(gulp.dest('build'));\n});\ngulp.task('watch', ['scripts'], function() {\n gulp.watch('src/**/*.ts', ['scripts']);\n});\n```", "```js\nnpm install --save-dev gulp-sourcemaps\n```", "```js\nvar sourcemaps = require('gulp-sourcemaps');\ngulp.task('scriptswithsourcemap', function () {\n return gulp.src('src/**/*.ts')\n .pipe(sourcemaps.init())\n .pipe(tsProject())\n .pipe(sourcemaps.write('.', { includeContent: false, sourceRoot: '.'}))\n .pipe(gulp.dest('build'));\n});\n```", "```js\nnpm install --save-dev webpack\nnpm install --save-dev webpack-cli\n```", "```js\nnpm install --save-dev ts-loader\n```", "```js\nmodule.exports = {\n mode: \"development\",\n devtool: \"source-map\",\n entry: \"./src/index.ts\",\n output: {\n  path: __dirname + \"/build\",\n  filename: \"bundle.js\"\n },\n resolve: {\n  extensions: [\".ts\"]\n },\n module: {\n  rules: [\n  { test: /\\.ts$/, loader: \"ts-loader\" }\n  ]\n }\n};\n```", "```js\nnode node-modules/webpack-cli/bin/cli.js\n```", "```js\nrules: [\n {\n test: /\\.ts$/,\n use: [\n  {\n   loader: 'ts-loader',\n   options: {\n    transpileOnly: true,\n    experimentalWatchApi: true,\n   },\n  },\n ],\n }\n]\n```", "```js\n\"scripts\": {\n\"build\": \"node_modules/typescript/bin/tsc\"\n},\n```", "```js\n{\n \"compilerOptions\": {\n \"rootDir\": \"src\",\n \"outDir\": \"build\",\n \"sourceMap\": true\n }\n}\n```", "```js\nrootDir:src\noutDir:build\n```", "```js\n{\n \"compilerOptions\": {\n \"baseUrl\": \".\", // This must be specified if \"paths\" is.\n \"paths\": {\n \"jquery\": [\"node_modules/jquery/dist/jquery\"] // This mapping is relative to \"baseUrl\"\n }\n }\n}\n```", "```js\nImport * from \"jquery\"\n```", "```js\nconst text = \"Text for test1\";\nconsole.log(text);\n//# sourceMappingURL=index.js.map\n```", "```js\n{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/index.ts\"]......\n```", "```js\n\"include\": [\n \"src/**/*\"\n ],\n \"exclude\": [\n \"node_modules\",\n \"dont/compile/*.mock.ts\"\n ]\n```", "```js\n{\n \"compilerOptions\": {\n \"rootDir\": \"src\",\n \"outDir\": \"build\",\n \"target\": \"es6\",\n \"sourceMap\": true,\n \"outFile\": \"build/mySingleFile.js\"\n }\n}\n```", "```js\n{\n \"compilerOptions\": {\n \"typeRoots\" : [\"./typings\", “./node_modules”]\n }\n}\n```", "```js\n{\n \"compilerOptions\": {\n \"declaration\" : true\n }\n}\n```", "```js\n{\n \"compilerOptions\": {\n \"declaration\" : true,\n \"declarationDir\": \"definitionfiles/here\"\n }\n}\n```", "```js\nerror TS5053: Option 'declarationDir' cannot be specified with option 'outFile'.\n```", "```js\ntsc\ntsc -p tsconfig.json\ntsc -p tsconfig.test.json\n```", "```js\n{\n \"extends\": \"./tsconfig.json\",\n \"compilerOptions\": {\n \"outDir\": \"buildtest\",\n \"sourceMap\": false,\n \"declaration\": false\n }\n}\n```", "```js\ntsc -p tsconfig.test.json\n```", "```js\n\"None\", \"CommonJS\", \"AMD\", \"System\", \"UMD\", \"ES6\", \"ES2015\" or \"ESNext\".\n```", "```js\nimport x from \"./sameFolder\";\nimport y from \"../parent/folder\";\nimport z from \"../../../deeper/\";\n```", "```js\nimport a from \"module123\";\n```", "```js\n\"ES3\", \"ES5\", \"ES6\"/\"ES2015\", \"ES2016\", \"ES2017\" or \"ESNext\"\n```", "```js\ninterface A {\n name: string;\n}\n\ninterface B extends A {\n firstName: string;\n}\n\ndeclare let f1: (x: A) => void;\ndeclare let f2: (x: B) => void;\n\nf1 = f2; // DOESNT COMPILE\nf2 = f1;\n```", "```js\nError message :  Type 'A' is not assignable to type 'B'. Property 'firstName' is missing in type 'A'.\n```", "```js\nclass A {\n public field1: number;\n}\n```", "```js\nclass A {\n public field1: number = 1;\n}\n```", "```js\nclass A {\n public field1: number;\n constructor(p:number){\n   This.field1 = p;\n }\n}\n```"]