- en: Chapter 3. Twitter as a Flight Information Agent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Twitter** is an online social networking service that enables users to send
    and read short 140 character messages called *tweets*, and has become one of the
    most prominent ways for people to exchange news and information all over the world.'
  prefs: []
  type: TYPE_NORMAL
- en: Twitter's popularity has exploded since its creation, and now it is used for
    all sorts of things, such as customer service, marketing, news coverage, and many
    others. It is one of the most popular websites that exist, and it is considered
    to be the *SMS gateway* of the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: One of Twitter's main uses is for companies to communicate information to their
    followers. For example, airlines usually tweet about events that are related to
    the company, as well as those that could affect passengers or their plans.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll focus our attention on creating a Twitter bot that is
    able to provide flight information to passengers, acting like an automated flight
    information agent.
  prefs: []
  type: TYPE_NORMAL
- en: The examples should be a lot of fun, as well as easy to follow, so let's not
    wait any longer and get started!
  prefs: []
  type: TYPE_NORMAL
- en: How a Twitter bot works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like any other bot, a Twitter bot is, in essence, just another Twitter
    user account-the difference is that, instead of being manned by another person,
    the account is controlled by an automated process that knows how to reply to the
    input you provide. This is possible because Twitter provides an API that allows
    you to interact programmatically with the service through code.
  prefs: []
  type: TYPE_NORMAL
- en: In essence, anything that can be turned into a service could be converted into
    an automated conversation by using a bot, and Twitter is no different. Bots can
    have interactive conversations on nearly every platform, at any time, and from
    anywhere.
  prefs: []
  type: TYPE_NORMAL
- en: A Twitter bot is typically an application that you write that listens for something
    to happen on Twitter and then does something in response. In our case, we'll be
    listening for someone to tweet with a certain hashtag and then tweeting something
    when that happens. That hashtag will be a flight number, and the bot will be able
    to provide some feedback based on it.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's get our feet on the ground and get started in building our Twitter
    bot.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Twitter app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first and foremost step in creating a Twitter bot is to actually create
    a Twitter application. The bot is just a designation we'll be using, but in reality
    it's really a Twitter application behind the scenes that is able to interact with
    the Twitter API.
  prefs: []
  type: TYPE_NORMAL
- en: In order to be able to interact with the Twitter API, it is necessary to have
    a registered Twitter account. Go to the Twitter web page and sign up if you don't
    have an account. If you have one, sign in.
  prefs: []
  type: TYPE_NORMAL
- en: Once you are signed in, navigate to [https://apps.twitter.com/](https://apps.twitter.com/)
    . This is where we will register our Twitter application. You'll then see the
    Twitter **Application Management** welcome page which has a button to create a
    new application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the Twitter bot, click on the **Create New App** button. Refer to
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ Creating a Twitter app](img/image00213.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Having done that, the following screen will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ Creating a Twitter app](img/image00214.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Fill in the required information. Give the application a distinctive name and
    a description. You are also required to enter a website that will be used as the
    bot''s publicly accessible home page. Once you have entered this data, scroll
    down and accept the Twitter **Developer Agreement**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ Creating a Twitter app](img/image00215.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you''ve read the developer agreement, you can click on the **Create your
    Twitter application** in order to proceed. This will allow Twitter to create your
    application, and you''ll be presented with the following screen once the creation
    process has finalized:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ Creating a Twitter app](img/image00216.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you scroll a bit, there are also application settings provided that will
    be needed as soon as we start coding. With the Twitter app created, let's focus
    on writing some code. So far throughout this book we've been using the Atom editor;
    however, you are free to use any other editor that you might be comfortable with.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the editor and create a new `app.js` file inside a `FlightBot` folder
    anywhere on your drive. For now, simply add this instruction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Assuming we have Node.js and npm installed (if not, please refer to the steps
    in [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. The Rise of Bots – Getting
    the Message Across"), *The Rise of Bots – Getting the Message Across*), let's
    get some necessary dependencies installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s copy the `package.json` (that we used in the previous chapter) and
    place it in the `FlightBot` folder. Then let''s modify it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ Creating a Twitter app](img/image00217.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s get the dependencies installed, so we can start coding within the
    `app.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This will install the Twitter Node.js SDK, which we will be using to write
    our app. This will be installed on the `FlightBot` folder as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ Creating a Twitter app](img/image00218.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You''ll see the updated `package.json` file in your project folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ Creating a Twitter app](img/image00219.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We are now ready to start adding some code in our `app.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'What we''ve done here is to load and import the Twitter package. First, let''s
    get these consumer keys and tokens from the Twitter **Application Management**
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ Creating a Twitter app](img/image00220.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note how the **Consumer Key** and **Consumer Secret** are available by default,
    but not the **Your Access Tokens**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to get the **Your Access Tokens**, click on the **Create my access
    token** button at the bottom of the screen. Once you''ve done that, you''ll see
    the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ Creating a Twitter app](img/image00221.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: With this done, you can now add the consumer and access tokens to the secret
    object variable in the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can do this by defining an object variable that will contain the consumer
    key and secret object, along with the access tokens, as shown in the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Later, we'll store these in a separate `.json` file, but for now let's keep
    them within our `app.js` file. These will be required in order to authenticate
    to Twitter.
  prefs: []
  type: TYPE_NORMAL
- en: So at this point, we've pretty much created the app on Twitter and have a very
    basic structure with tokens and access codes that we can use to authenticate to
    the Twitter service and start using the API.
  prefs: []
  type: TYPE_NORMAL
- en: With this out of the way, let's move on and start adding some logic to our application.
  prefs: []
  type: TYPE_NORMAL
- en: Posting to Twitter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to add our own custom logic, we'll need to make use of Twitter's `REST`
    API, which will allow us to do several things. One of the things it can do is
    allow us to post a tweet.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be achieved as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: So let's take a moment to examine this. `Twitter.post` means that we are calling
    the `post` function in the Twitter object. We pass the `post` function several
    things-`'statuses/update'` means we want to post a status update (a tweet).
  prefs: []
  type: TYPE_NORMAL
- en: '`{status: ''This is a sample automated Tweet''}` is a JavaScript object that
    we are passing in to this function where we set the status of the tweet being
    sent out.'
  prefs: []
  type: TYPE_NORMAL
- en: Although this contains just the text of the tweet we want to send, there are
    a whole bunch of other options to set depending on what we want to post to Twitter
    (such as images, location, and so on). In this case, we are just interested in
    posting a simple status just so we are familiar with setting the status property.
  prefs: []
  type: TYPE_NORMAL
- en: The last thing we pass in is a function. In JavaScript, you can actually pass
    functions in to other functions; it is one of the things that makes JavaScript
    a functional programming language.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Twitter.post` function, you''re expected to pass a function in that
    will be executed after Twitter tries to post the tweet. This is what is known
    as a callback function. In that function, you''ll notice three parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`error`: This indicates whether there''s an error in the process of posting
    the tweet, in which case this variable will contain an object with information
    about the error that occurred'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tweet`: An object that contains all the tweet data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`response`: An object of the actual response Twitter sends back when you post
    a tweet'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our code, we'll just post our tweet and then print it out in the console.
    Now go ahead and remove the `'Hi, this is FlightBot'` line. We don't need it any
    longer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, save the modified `app.js` file. It should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s go and run the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This will produce the following result on the command line console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Posting to Twitter](img/image00222.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we then inspect Twitter itself, we can see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Posting to Twitter](img/image00223.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Really cool! We now have a way to send automatic tweets. However, we don't have
    a full blown bot yet. Let's explore how we can achieve that.
  prefs: []
  type: TYPE_NORMAL
- en: Listening to tweets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to create a functional Twitter bot, it is not enough to be able to
    simply post something to Twitter. We also need to be able to listen to what gets
    posted on Twitter.
  prefs: []
  type: TYPE_NORMAL
- en: Twitter has a very useful API called `Streaming` which gives us information
    about tweets in real time. In other words, when someone tweets something that
    we care about, we get all the data about that tweet. This is both really useful
    and really awesome.
  prefs: []
  type: TYPE_NORMAL
- en: 'So let''s re-implement a bit of our code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze this. The `Twitter.stream` function takes in three parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The first parameter is a string that tells Twitter that we want to listen for
    statuses with a certain filter. In this case, we are filtering by using a hashtag.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second parameter is where we define that filter with an object. That object
    contains the property `track` which lets us define a word, hashtag, or phrase
    that we care to listen for. For this, we will be tracking when someone tweets
    with the hashtag `'#FlightBot'`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last parameter is a function that gets called when Twitter is done setting
    up our stream. When it's done setting up our stream, it then passes that stream
    object in to the function. Within this function, we can set up what happens when
    we receive a tweet, along with other things, such as error handling, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now let''s take a closer look at what happens when we receive data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: So, using the `stream` object, it calls the `on` function. Now, with the `on`
    function, you pass in a string and a function. This means that when a tweet occurs,
    we call this function with that data. At the moment, we just print out `tweet.text`,
    which is how you access the actual text of the tweet that was received that used
    the hashtag `'#FlightBot'`.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now go ahead and comment the `Twitter.post` code so we don't post the
    same tweet twice. Then, if we save the `app.js` file and then call `node app.js`
    in the command line, you'll notice that the command line no longer shows you a
    prompt.
  prefs: []
  type: TYPE_NORMAL
- en: This is because it's running and listening for some sort of data to come in
    from that stream. If you need to stop it, press ***Ctrl*** + ***C*** a few times
    to return to the prompt.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to test this, go to Twitter and tweet something with `''#FlightBot''`,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Listening to tweets](img/image00224.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now check your running command line. You should see the text of your tweet
    printed out:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Listening to tweets](img/image00225.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Awesome! We've now implemented a mechanism that can listen to tweets.
  prefs: []
  type: TYPE_NORMAL
- en: 'The update `app.js` code now looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Replying to who tweeted
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've managed to write some code that posts a tweet and we've also written
    code that acts on tweets that have been written. So what's next?
  prefs: []
  type: TYPE_NORMAL
- en: The next thing to do is to basically combine both parts together into a single
    code base, as this will be the basic layer of our bot.
  prefs: []
  type: TYPE_NORMAL
- en: One of the things you might want to do is to give the bot the ability to reply
    to the person who tweeted with your hashtag. To do this, the bot needs to mention
    them.
  prefs: []
  type: TYPE_NORMAL
- en: You can access the username of the person who tweeted with your hashtag by using
     `tweet.user.screen_name`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to mention them, concatenate a `''@''` symbol at the beginning by
    doing this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Then just concatenate that to the string you want to tweet out. We're now replying
    to the person who tweeted. Cool!
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s now look at the complete source code to get a full picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If we now execute the app with `node app.js`, we should be able to pick up
    any hashtags with the keyword `''#FlightBot''`. Let''s have a look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Replying to who tweeted](img/image00226.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We now get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Replying to who tweeted](img/image00227.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This is really awesome. With just a few lines of code we were able to create
    a simple Twitter bot. But we are still not done. We haven't added any logic on
    how to provide basic flight details or data yet .
  prefs: []
  type: TYPE_NORMAL
- en: But before we do that, let's put the `secret` variable object into a `secret.json`
    file, so we can avoid having the access codes and tokens within our code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `secret.json` file and save it in the same folder as the `app.js`
    file. The `secret.json` file should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This `secret.json` file is then referenced from the code, and it now looks
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have the updated code, let's add the necessary logic to send information
    about flights statuses and information.
  prefs: []
  type: TYPE_NORMAL
- en: Flight APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to get some flight information, we'll have to rely on a flight API.
    One that is free and really useful is the one from **Air France-KLM**, which is
    available at [https://developer.airfranceklm.com/](https://developer.airfranceklm.com/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '![Flight APIs](img/image00228.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: So let's sign up and register an account. There are several APIs (found at [https://developer.airfranceklm.com/Our_Apis](https://developer.airfranceklm.com/Our_Apis)
    ) provided by Air France-KLM such as Reservations, Order, Flight Offer, Flight
    Status, Location, Contact Information, Ancillary Shop, and Check-in.
  prefs: []
  type: TYPE_NORMAL
- en: We are interested in using the **Flight Status API** ( [https://developer.airfranceklm.com/page/Flight_status_API](https://developer.airfranceklm.com/page/Flight_status_API)
    ), which will provided up-to-date and accurate information about specific flight
    numbers. Let's explore this API a bit.
  prefs: []
  type: TYPE_NORMAL
- en: The Flight Status API provides flight status information-such as scheduled and
    actual arrival and departure times-of KLM-operated flights, or Delta and Air France-operated
    flights with a KLM codeshare, flying to and from the Air France-KLM hub in Amsterdam.
  prefs: []
  type: TYPE_NORMAL
- en: The API supports operational decision making, such as notification in case of
    exceptional situations, like extreme weather conditions.
  prefs: []
  type: TYPE_NORMAL
- en: The great thing about this API is that it doesn't require API keys, and it is
    available for free. The catch is that it only returns data from the day that you
    execute the query-that is, it only returns today's data and doesn't return any
    past flight status information.
  prefs: []
  type: TYPE_NORMAL
- en: There are two ways to search with this API. One is to search using a flight
    number and the other is to use a route.
  prefs: []
  type: TYPE_NORMAL
- en: Flight status API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When searching using a flight number, the `REST` endpoint will provide the
    flight status for a given flight, and you must specify the day''s date; for example,
    flight KL1699 on  September 16, 2016\. The request would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://fox.klm.com/fox/json/flightstatuses?flightNumber=KL1699&departureDate=2016-09-16](http://fox.klm.com/fox/json/flightstatuses?flightNumber=KL1699&departureDate=2016-09-16)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This would return the following JSON response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: That was easy and fun! Now let's explore the route search API.
  prefs: []
  type: TYPE_NORMAL
- en: Route search API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Route Search REST endpoint provides a summary of flight statuses for all
    applicable flights in a given route, such as Amsterdam (AMS) and Paris Charles
    de Gaulle (CDG).
  prefs: []
  type: TYPE_NORMAL
- en: 'The request would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://fox.klm.com/fox/json/flightstatuses?originAirportCode=AMS&destinationAirportCode=CDG](http://fox.klm.com/fox/json/flightstatuses?originAirportCode=AMS&destinationAirportCode=CDG)'
  prefs: []
  type: TYPE_NORMAL
- en: The JSON result would be as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The response includes the following information--Scheduled Departure Date Time,
    Scheduled Arrival Date Time, Flight Status, Marketing Flights, Remaining Fly Time,
    Arrival, and Departure information.
  prefs: []
  type: TYPE_NORMAL
- en: So now that we have an API to query, let's make our bot a bit smarter and allow
    it to retrieve flight status and route details.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a REST client library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the code we already have, which is able to respond back to the person
    that actually tweeted the `'#FlightBot'` hashtag, let's make some modifications
    so that it can provide status details about flights and routes using the Air France-KLM
    APIs.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing that we need to do in order to communicate to the Air France-KLM
    endpoints is to include a `REST` client library for Node.js in our app.
  prefs: []
  type: TYPE_NORMAL
- en: There are various Node.js REST client libraries out there, and you can choose
    whichever makes you feel more comfortable. For our example, however, we'll be
    using the library found at [https://www.npmjs.com/package/request](https://www.npmjs.com/package/request)
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we need to do is to install it. We can do this from the command
    line by executing this instruction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'After doing this, our `package.json` file will be updated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a REST client library](img/image00229.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note how a reference to `request` has been added. This is because we have used
    the save option when executing the previous instruction.
  prefs: []
  type: TYPE_NORMAL
- en: Making the bot a bit smarter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have added a `REST` client library, it's time to add some logic
    to our application in order to interact with the Air France-KLM APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Our bot should be able to provide feedback about flights and routes using the
    API endpoints previously described.
  prefs: []
  type: TYPE_NORMAL
- en: Let's make some changes to our code to accommodate this. In order to do that,
    let's add some logic to make sure that the bot is able to process not only the
    Twitter hashtag but also a flight number.
  prefs: []
  type: TYPE_NORMAL
- en: So we will essentially automate the call to this REST endpoint and parse the
    response associated with it, returning just some essential bits of that data,
    but not all of it. Sounds exciting, so let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to automate this endpoint through a `REST` call. We need to make sure
    that, besides the hashtag, a flight number is also passed as part of the message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://fox.klm.com/fox/json/flightstatuses?flightNumber=KL1699&departureDate=2016-09-16](http://fox.klm.com/fox/json/flightstatuses?flightNumber=KL1699&departureDate=2016-09-16)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the full updated code. Let''s have a complete look at it and then dissect
    it bit by bit to understand the changes that were made:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'OK, so there are some changes. The first one is that we have added a reference
    to the `request` library which we will be using to make the requests to the REST
    API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Following that, we''ve added a `GetDate` function which will return today''s
    date so it can be passed onto the `REST` endpoint as the `departureDate` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This `GetDate` function uses a `padLeft` function that is responsible for correctly
    formatting each of the parts of the date as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: These two functions cover the `departureDate` part of the REST endpoint. So
    now let's focus on the `flightNumber` part.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, we''ve written a function called `FlightNumberOk`, which does a quick
    check to ensure that the flight number is correct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'With the flight number correct, we can then use another function called `GetFlightDetails`
    to actually perform the call to the `REST` endpoint. The JSON response is represented
    by the variable `body`, which is then assigned to the `fd` variable, which is
    later used to tweet a response back to the user. Refer to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Because the `GetFlightDetails` uses the request library to perform an asynchronous
    request to the `REST` endpoint, we cannot tweet the response until the JSON response
    is obtained, and to ensure that, the tweet response is executed within a `setTimeout`
    JavaScript function 1,500 milliseconds after the execution of the `GetFlightDetails`
    takes place.
  prefs: []
  type: TYPE_NORMAL
- en: 'So basically our `Twitter.stream` function now looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Note how `FlightNumberOk` and `GetFlightDetails` are called before the `Twitter.Post`
    is called by the `setTimeout` function. This is done to ensure that the flight
    number is OK, and that the JSON response containing the flight details exists,
    before sending out the tweet to the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tweet response basically sends out `scheduledArrivalDateTime`, which is
    obtained by parsing the JSON response using `JSON.parse`. This is accessed as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'If we execute the program now and tweet `#FlightBot KL1699`, we''ll get the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making the bot a bit smarter](img/image00230.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: So that's cool, isn't it? Really cool!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this chapter, we've seen how to interact with Twitter and also how
    to query the Air France-KLM API in order to retrieve flight details and respond
    to tweets.
  prefs: []
  type: TYPE_NORMAL
- en: We've barely scratched the surface of what can be done with these APIs; the
    possibilities are, frankly, quite endless. All you need is time and a good dose
    of imagination!
  prefs: []
  type: TYPE_NORMAL
- en: You are encouraged to keep exploring both the Twitter and also the Air France-KLM
    APIs, as well as other flight data APIs out there. It's definitely an interesting
    area, and one worth exploring further.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you have enjoyed following these examples. The next chapters will look
    at other fascinating topics. Have fun!
  prefs: []
  type: TYPE_NORMAL
