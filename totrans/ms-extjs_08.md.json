["```js\nExt.define('Packt.model.film.Film', {\n    extend: 'Packt.model.staticData.Base', //#1\n\n    entityName: 'Film',\n\n    idProperty: 'film_id',\n\n    fields: [\n        { name: 'film_id' },\n        { name: 'title'},\n        { name: 'description'},\n        { name: 'release_year', type: 'int'},\n        { name: 'language_id'},\n        { name: 'original_language_id'},\n        { name: 'rental_duration', type: 'int'},\n        { name: 'rental_rate', type: 'float'},\n        { name: 'length', type: 'int'},\n        { name: 'replacement_cost', type: 'float'},\n        { name: 'rating'},\n        { name: 'special_features'}\n    ]\n});\n```", "```js\nExt.define('Packt.view.film.FilmsModel', {\n    extend: 'Ext.app.ViewModel',\n\n    alias: 'viewmodel.films',\n\n    stores: {\n        films: {\n            model: 'Packt.model.film.Film', //#1\n            pageSize: 15,   //#2\n            autoLoad: true, //#3\n            session: true   //#4\n        }\n    }\n});\n```", "```js\nExt.define('Packt.view.film.FilmsGrid', {\n    extend: 'Packt.view.base.Grid', //#1\n    xtype: 'films-grid',\n\n    bind : '{films}',  //#2\n\n    reference: 'filmsGrid', //#3\n\n    columns: [{\n        text: 'Film Id',\n        width: 80,\n        dataIndex: 'film_id'\n    },{\n        text: 'Title',\n        flex: 1,\n        dataIndex: 'title',\n     renderer: function(value, metaData, record ){  //#4\n            metaData['tdAttr'] = 'data-qtip=\"' +\n                    record.get('description') + '\"'; //#5\n            return value;\n        }\n    },{\n        text: 'Language',\n        width: 100,\n        dataIndex: 'language_id'\n    },{\n        text: 'Release Year',\n        width: 110,\n        dataIndex: 'release_year'\n    },{\n        text: 'Length',\n        width: 100,\n        dataIndex: 'length',\n        renderer: function(value, metaData, record ){ //#6\n            return value + ' min';\n        }\n    },{\n        text: 'Rating',\n        width: 70,\n        dataIndex: 'rating'\n    }]\n});\n```", "```js\nExt.define('Packt.view.base.Grid', {\n    extend: 'Ext.grid.Panel',\n\n    requires: [\n        'Packt.util.Glyphs'\n    ],\n\n    columnLines: true,\n    viewConfig: {\n        stripeRows: true\n    },\n\n    initComponent: function() {\n        var me = this;\n\n        me.columns = Ext.Array.merge(\n            me.columns,\n            [{\n                xtype    : 'datecolumn',\n                text     : 'Last Update',\n                width    : 150,\n                dataIndex: 'last_update',\n                format: 'Y-m-j H:i:s',\n                filter: true\n            },{\n                xtype: 'widgetcolumn',\n                width: 50,\n                sortable: false,\n                menuDisabled: true,\n                widget: {\n                    xtype: 'button',\n                    glyph: Packt.util.Glyphs.getGlyph('edit'),\n                    tooltip: 'Edit',\n handler: 'onEdit'   //#1\n                }\n            },{\n                xtype: 'widgetcolumn',\n                width: 50,\n                sortable: false,\n                menuDisabled: true,\n                widget: {\n                    xtype: 'button',\n                    glyph: Packt.util.Glyphs.getGlyph('destroy'),\n                    tooltip: 'Delete',\n handler: 'onDelete'  //#2\n                }\n            }]\n        );\n\n        me.callParent(arguments);\n    }\n});\n```", "```js\nplugins: [{\n    ptype: 'rowexpander',\n    rowBodyTpl: [\n        '<b>Description:</b> {description}</br>',\n        '<b>Special Features:</b> {special_features}</br>',\n        '<b>Rental Duration:</b> {rental_duration}</br>',\n        '<b>Rental Rate:</b> {rental_rate}</br>',\n        '<b>Replacement Cost:</b> {replacement_cost}</br>'\n    ]\n}]\n```", "```js\ndataIndex: 'language_id',\nrenderer: function(value, metaData, record ){\n   var languagesStore = Ext.getStore('staticData.Languages'); //#1\n   var lang = languagesStore.findRecord('language_id', value);//#2\n   return lang != null ? lang.get('name') : value;            //#3\n} \n```", "```js\ndockedItems: [{\n    dock: 'bottom',\n    xtype: 'pagingtoolbar',\n    bind : {\n        store: '{films}' //#1\n    },\n    displayInfo: true,\n    displayMsg: 'Displaying films {0} - {1} of {2}',\n    emptyMsg: \"No films to display\"\n}]\n```", "```js\n$start = $_REQUEST['start'];\n$limit = $_REQUEST['limit'];\n```", "```js\n$sql = \"SELECT * FROM film LIMIT $start,  $limit\";\n```", "```js\n$sql = \"SELECT count(*) as num FROM film\";\n```", "```js\necho json_encode(array(\n  \"success\" => $mysqli->connect_errno == 0,\n  \"data\" => $result,\n  \"total\" => $total\n));\n```", "```js\nSELECT * FROM\n  (select rownum as rn, f.* from\n    (select * from film order by film_id) as f\n  ) WHERE rn > $start  and rn <= ($start + $limit)\n```", "```js\nSELECT  *\nFROM ( SELECT ROW_NUMBER() OVER ( ORDER BY film_id ) AS RowNum, *\n          FROM films\n        ) AS RowConstrainedResult\nWHERE   RowNum > $start\n    AND RowNum <= ($start + $limit)\nORDER BY RowNum\n```", "```js\nSELECT * FROM film\nORDER BY film_id\nOFFSET $start ROWS\nFETCH NEXT $limit ROWS ONLY\n```", "```js\nSELECT FIRST $limit SKIP $start * FROM film\n```", "```js\nExt.define('Packt.view.film.Films', {\n    extend: 'Ext.panel.Panel',\n    xtype: 'films',\n\n    requires: [\n        'Packt.view.base.TopToolBar',\n        'Packt.view.film.FilmsGrid',\n        'Packt.view.film.FilmActorsGrid',\n        'Packt.view.film.FilmCategoriesGrid',\n        'Packt.view.film.FilmsModel',\n        'Packt.view.film.FilmsController'\n    ],\n\n    controller: 'films', //#1\n    viewModel: {\n        type: 'films'    //#2\n    },\n\n    session: true,       //#3\n\n    layout: {\n        type: 'vbox',\n        align: 'stretch'\n    },\n\n    items: [{\n        xtype: 'films-grid',  //#4\n        flex: 1\n    },{\n        xtype: 'container',\n        split: true,\n        layout: {\n            type: 'hbox',\n            align: 'stretch'\n        },\n        height: 150,\n        items: [{\n            xtype: 'film-categories', //#5\n            flex: 1\n        },{\n            xtype: 'film-actors',    //#6\n            flex: 2\n        }]\n    }],\n\n    dockedItems: [{\n        xtype: 'top-tool-bar'    //#7\n    }]\n});\n```", "```js\nExt.define('Packt.view.base.TopToolBar', {\n    extend: 'Ext.toolbar.Toolbar',\n    xtype: 'top-tool-bar',\n\n    requires: [\n        'Packt.util.Glyphs'\n    ],\n\n    dock: 'top',\n    items: [\n        {\n            xtype: 'button',\n            text: 'Add',\n            itemId: 'add',\n            glyph: Packt.util.Glyphs.getGlyph('add'),\n            listeners: {\n                click: 'onAdd'\n            }\n        }\n    ]\n});\n```", "```js\nUPDATE `sakila`.`menu` SET `className`='films' WHERE `id`='11';\n```", "```js\nmanyToMany: {\n    FilmCategories: {         //#1\n        type: 'Category',     //#2\n        role: 'categories',   //#3\n        field: 'category_id', //#4\n        right: {\n            field: 'film_id', //#5\n            role: 'films'     //#6\n        }\n    },\n    FilmActors: {\n        type: 'Actor',\n        role: 'actors',\n        field: 'actor_id',\n        right: {\n            field: 'film_id',\n            role: 'films'\n        }\n    }\n}\n```", "```js\nmanyToMany: {\n    CategoryFilms: {\n        type: 'Film',\n        role: 'films',\n        field: 'film_id',\n        right: {\n            field: 'category_id',\n            role: 'categories'\n        }\n    }\n}\n```", "```js\nmanyToMany: {\n    ActorFilms: {\n        type: 'Film',\n        role: 'films',\n        field: 'film_id',\n        right: {\n            field: 'actor_id',\n            role: 'actors'\n        }\n    }\n}\n```", "```js\n{\n   \"success\":true,\n   \"data\":[\n      {\n         \"film_id\":\"1\",\n         \"title\":\"ACADEMY DINOSAUR\",\n         \"description\":\"A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies\",\n         \"release_year\":\"2006\",\n         \"language_id\":\"1\",\n         \"original_language_id\":null,\n         \"rental_duration\":\"6\",\n         \"rental_rate\":\"0.99\",\n         \"length\":\"86\",\n         \"replacement_cost\":\"20.99\",\n         \"rating\":\"PG\",\n         \"special_features\":\"Deleted Scenes,Behind the Scenes\",\n         \"last_update\":\"2006-02-15 05:03:42\",\n         \"categories\":[\n            {\n               \"category_id\":\"6\",\n               \"name\":\"Documentary\",\n               \"last_update\":\"2006-02-15 04:46:27\"\n            }\n         ],\n         \"actors\":[\n            {\n               \"actor_id\":\"1\",\n               \"first_name\":\"PENELOPE\",\n               \"last_name\":\"GUINESS\",\n               \"last_update\":\"2006-02-15 04:34:33\"\n            },\n            {\n               \"actor_id\":\"10\",\n               \"first_name\":\"CHRISTIAN\",\n               \"last_name\":\"GABLE\",\n               \"last_update\":\"2006-02-15 04:34:33\"\n            }\n         ]\n      }\n   ],\n   \"total\":\"1000\"\n}\n```", "```js\ncategories: {\n source: 'staticData.Categories',\n    autoLoad: true,\n    session: true\n},\nactors: {\n source: 'staticData.Actors',\n    autoLoad: true,\n    session: true\n}\n```", "```js\nExt.define('Packt.view.film.FilmActorsGrid', {\n    extend: 'Ext.grid.Panel',\n    xtype: 'film-actors',\n\n    requires: [\n        'Packt.util.Glyphs'\n    ],\n\n bind : '{filmsGrid.selection.actors}', //#1\n    border: true,\n\n    title: 'Film Actors',\n    glyph: Packt.util.Glyphs.getGlyph('actor'),\n\n    columns: [\n        {\n            text: 'Actor Id',\n            width: 80,\n            dataIndex: 'actor_id'\n        },\n        {\n            xtype: 'templatecolumn',\n            text: 'Actor Name',\n            flex: 1,\n            tpl: '{first_name} {last_name}' //#2\n        }\n    ]\n});\n```", "```js\nExt.define('Packt.view.film.FilmCategoriesGrid', {\n    extend: 'Ext.grid.Panel',\n    xtype: 'film-categories',\n\n    requires: [\n        'Packt.util.Glyphs'\n    ],\n\n bind : '{filmsGrid.selection.categories}', //#1\n    border: true,\n\n    title: 'Film Categories',\n    glyph: Packt.util.Glyphs.getGlyph('category'),\n\n    columns: [\n        {\n            text: 'Category Id',\n            width: 100,\n            dataIndex: 'category_id'\n        },\n        {\n            text: 'Category Name',\n            flex: 1,\n            dataIndex: 'name'\n        }\n    ]\n});\n```", "```js\nExt.define('Packt.view.base.ViewController', {\n    extend: 'Ext.app.ViewController',\n\n    requires: [\n        'Packt.util.Util',\n        'Packt.util.Glyphs'\n    ],\n\n    onAdd: function(button, e, options){ //#1\n        this.createDialog(null);\n    },\n\n    onEdit: function(button){ //#2\n        this.createDialog(button.getWidgetRecord());\n    },\n\n    onCancel: function(button, e, options){ //#3\n        var me = this;\n        me.dialog = Ext.destroy(me.dialog);\n    },\n\n    onDelete: function(button, e, options){ //#4\n        var record = button.getWidgetRecord();\n        Ext.Msg.show({\n            title:'Delete?',\n            msg: 'Are you sure you want to delete?',\n            buttons: Ext.Msg.YESNO,\n            icon: Ext.Msg.QUESTION,\n            fn: function (buttonId){\n                if (buttonId == 'yes'){\n                    record.drop();\n                }\n            }\n        });\n    }\n});\n```", "```js\nExt.define('Packt.view.film.FilmsController', {\n    extend: 'Packt.view.base.ViewController',\n\n    alias: 'controller.films'\n});\n```", "```js\nExt.define('Packt.view.film.FilmWindow', {\n    extend: 'Packt.view.base.WindowForm', //#1\n    xtype: 'film-window',                 //#2\n\n    requires: [\n        'Packt.view.film.FilmFormContainer',\n        'Packt.view.film.FilmActorsGrid',\n        'Packt.view.film.FilmFormCategories'\n    ],\n\n    width: 537,\n\n    items: [\n        {\n            xtype: 'form',\n            reference: 'filmForm',  //#3\n            layout: {\n                type: 'fit'\n            },\n            items: [{\n                xtype: 'tabpanel', //#4\n                activeTab: 0,\n                items: [{\n                    xtype: 'film-form-container', //#5\n                    glyph: Packt.util.Glyphs.getGlyph('film')\n                },{\n                    xtype: 'film-categories-form', //#6\n                    glyph: Packt.util.Glyphs.getGlyph('category')\n                }\n                //film actors here\n            ]\n        }\n    ]\n});\n```", "```js\n{\n    xtype: 'film-actors',    //#7\n    reference: 'actorsGrid', //#8\n    dockedItems: [{\n        dock: 'top',\n        items: [\n            {\n                xtype: 'button',\n                text: 'Search and Add',\n                glyph: Packt.util.Glyphs.getGlyph('searchAndAdd'),\n                listeners: {\n                    click: 'onAddActor' //#9\n                }\n            },\n            {\n                xtype: 'button',\n                text: 'Delete',\n                glyph: Packt.util.Glyphs.getGlyph('destroy'),\n                listeners: {\n                    click: 'onDeleteActor' //#10\n                }\n            }\n        ]\n    }]\n}\n```", "```js\nExt.define('Packt.view.base.WindowForm', {\n    extend: 'Ext.window.Window',\n    alias: 'widget.windowform',\n\n    requires: [\n        'Packt.util.Util',\n        'Packt.util.Glyphs',\n        'Packt.view.base.CancelSaveToolbar'\n    ],\n\n    height: 400,\n    width: 550,\n    autoScroll: true,\n    layout: {\n        type: 'fit'\n    },\n    modal: true,\n    closable: false,\n\n    bind: {\n        title: '{title}', //#1\n        glyph: '{glyph}'  //#2\n    },\n\n    dockedItems: [{\n        xtype: 'cancel-save-toolbar'\n    }]\n});\n```", "```js\nExt.define('Packt.view.base.CancelSaveToolbar', {\n    extend: 'Ext.toolbar.Toolbar',\n    xtype: 'cancel-save-toolbar',\n\n    requires: [\n        'Packt.util.Glyphs'\n    ],\n\n    dock: 'bottom',\n    ui: 'footer',\n    layout: {\n        pack: 'end',\n        type: 'hbox'\n    },\n    items: [\n        {\n            xtype: 'button',\n            text: 'Save',\n            glyph: Packt.util.Glyphs.getGlyph('save'),\n            listeners: {\n                click: 'onSave' //#3\n            }\n        },\n        {\n            xtype: 'button',\n            text: 'Cancel',\n            glyph: Packt.util.Glyphs.getGlyph('cancel'),\n            listeners: { \n                click: 'onCancel' //#4\n            }\n        }\n    ]\n});\n```", "```js\nExt.define('Packt.view.film.FilmFormContainer', {\n    extend: 'Ext.panel.Panel',\n    xtype: 'film-form-container',\n\n    requires: [\n        'Packt.util.Util',\n        'Packt.util.Glyphs'\n    ],\n\n    bodyPadding: 10,\n    layout: {\n        type: 'anchor'\n    },\n    title: 'Film Information',\n    defaults: {\n        anchor: '100%',\n        msgTarget: 'side',\n        labelWidth: 105\n    },\n\n    items: [\n        //fields\n    ]\n});\n```", "```js\n{\n    xtype: 'textfield',\n    fieldLabel: 'Title',\n    afterLabelTextTpl: Packt.util.Util.required,\n    bind : '{currentFilm.title}' //#1\n},\n{\n    xtype: 'numberfield',\n    fieldLabel: 'Release Year',\n    allowDecimals: false,               //#2\n    bind : '{currentFilm.release_year}' //#3\n},\n```", "```js\n{\n    xtype: 'combobox',\n    fieldLabel: 'Language',\n    displayField: 'name',\n    valueField: 'language_id',\n    queryMode: 'local',\n    store: 'staticData.Languages', //#4\n    afterLabelTextTpl: Packt.util.Util.required,\n    bind : '{currentFilm.language_id}' //#5\n},\n{\n    xtype: 'combobox',\n    fieldLabel: 'Original Language',\n    displayField: 'name',\n    valueField: 'language_id',\n    queryMode: 'local',\n    store: 'staticData.Languages',\n    bind : '{currentFilm.original_language_id}' //#6\n},\n```", "```js\n{\n    xtype: 'numberfield',\n    fieldLabel: 'Rental Duration',\n    allowDecimals: false,\n    afterLabelTextTpl: Packt.util.Util.required,\n    bind : '{currentFilm.rental_duration}'\n},\n{\n    xtype: 'numberfield',\n    fieldLabel: 'Rental Rate',\n    step: 0.1,\n    afterLabelTextTpl: Packt.util.Util.required,\n    bind : '{currentFilm.rental_rate}'\n},\n{\n    xtype: 'numberfield',\n    fieldLabel: 'Length (min)',\n    allowDecimals: false,\n    bind : '{currentFilm.length}'\n\n},\n{\n    xtype: 'numberfield',\n    name: 'replacement_cost',\n    fieldLabel: 'Replacement Cost',\n    step: 0.1,\n    afterLabelTextTpl: Packt.util.Util.required,\n    bind : '{currentFilm.replacement_cost}'\n},\n```", "```js\n{\n    xtype: 'combobox',\n    fieldLabel: 'Rating',\n    displayField: 'text',\n    valueField: 'text',\n    queryMode: 'local',\n    bind: {\n        value: '{currentFilm.rating}', //#6\n        store: '{ratings}'             //#7\n    }\n},\n```", "```js\n{\n    xtype: 'tagfield',\n    fieldLabel: 'Special Features',\n    displayField: 'text',\n    valueField: 'text',\n    filterPickList: true,\n    queryMode: 'local',\n    publishes: 'value',\n    stacked: true,\n    bind: {\n        value: '{specialFeatures}', //#8\n        store: '{special_features}' //#9\n    }\n},\n{\n    xtype: 'textareafield',\n    fieldLabel: 'Description',\n    bind : '{currentFilm.description}'\n}\n```", "```js\nExt.define('Packt.view.film.FilmFormCategories', {\n    extend: 'Ext.container.Container',\n\n    xtype: 'film-categories-form',\n\n    requires: [\n        'Ext.view.MultiSelector'\n    ],\n\n    title: 'Film Categories',\n\n    layout: 'fit',\n\n    items: [{\n        xtype: 'multiselector',\n        title: 'Selected Categories',\n        reference: 'categoriesMultiSelector',\n\n        fieldName: 'name',\n\n        viewConfig: {\n            deferEmptyText: false,\n            emptyText: 'No categories selected'\n        },\n\n        bind: '{currentFilm.categories}', //#1\n\n        search: {\n            field: 'name',\n            store: {\n                type: 'categories', //#2\n                autoLoad: true\n            }\n        }\n    }]\n});\n```", "```js\nExt.define('Packt.model.film.SearchActor', {\n    extend: 'Packt.model.staticData.Actor',\n\n    fields: [\n        { name: 'film_info' }\n    ]\n});\n```", "```js\nExt.define('Packt.store.film.SearchActors', {\n    extend: 'Ext.data.Store',\n\n    requires: [\n        'Packt.model.film.SearchActor'\n    ],\n\n    alias: 'store.search-actors',\n\n    model: 'Packt.model.film.SearchActor',\n\n    pageSize: 2,\n\n    proxy: {\n        type: 'ajax',\n        url: 'php/actor/searchActors.php',\n\n        reader: {\n            type: 'json',\n            rootProperty: 'data'\n        }\n    }\n});\n```", "```js\n$start = $_REQUEST['start'];\n$limit = $_REQUEST['limit'];\n$query = $_REQUEST['query'];\n\n//select the information\n$sql = \"SELECT * FROM actor_info \";\n$sql .= \"WHERE first_name LIKE '%\" . $query . \"%' OR \";\n$sql .= \"last_name LIKE '%\" . $query . \"%' \";\n$sql .= \"LIMIT $start,  $limit\";\n```", "```js\n$sql = \"SELECT count(*) as num FROM actor_info \";\n$sql .= \"WHERE first_name LIKE '%\" . $query . \"%' OR \";\n$sql .= \"last_name LIKE '%\" . $query . \"%' \";\n```", "```js\nExt.define('Packt.view.film.FilmSearchActor', {\n    extend: 'Ext.window.Window',\n    xtype: 'search-actor',\n\n    requires: [\n        'Packt.store.film.SearchActors'\n    ],\n\n    width: 600,\n    bodyPadding: 10,\n    layout: {\n        type: 'anchor'\n    },\n    title: 'Search and Add Actor',\n    autoShow: true,\n    closable: false,\n    glyph: Packt.util.Glyphs.getGlyph('searchAndAdd'),\n    reference: 'search-actor',\n\n    items: [\n        {\n            //combobox // #1\n        }, {\n            xtype: 'component',\n            style: 'margin-top:10px',\n            html: 'Live search requires a minimum of 2 characters.'\n        }\n    ]\n});\n```", "```js\nxtype: 'combo',\nreference: 'comboActors',   //#2\ndisplayField: 'first_name', //#3\nvalueField: 'actor_id',     //#4\ntypeAhead: false,\nhideLabel: true,\nhideTrigger:true,           //#5\nanchor: '100%',\nminChars: 2,                //#6\npageSize: 2,                //#7\nstore: {\n    type: 'search-actors'   //#8\n},\n\ndisplayTpl: new Ext.XTemplate( //#9\n        '<tpl for=\".\">' +\n        '{[typeof values === \"string\" ? values : values[\"last_name\"]]}, ' +\n        '{[typeof values === \"string\" ? values : values[\"first_name\"]]}' +\n        '</tpl>'\n),\n\nlistConfig: {                //#10\n    loadingText: 'Searching...',\n    emptyText: 'No matching posts found.',\n\n    // Custom rendering template for each item\n    getInnerTpl: function() {\n        return '<h3><span>{last_name}, {first_name}</span></h3></br>' +\n            '{film_info}';\n    }\n}\n```", "```js\nratings: {\n    model: 'Packt.model.TextCombo',\n    data : [ // ENUM('G','PG','PG-13','R','NC-17')\n        ['G'],\n        ['PG'],\n        ['PG-13'],\n        ['R'],\n        ['NC-17']\n    ],\n    session: true\n},\nspecial_features: {\n    model: 'Packt.model.TextCombo',\n    data : [\n        ['Trailers'],\n        ['Commentaries'],\n        ['Deleted Scenes'],\n        ['Behind the Scenes']\n    ],\n    session: true\n}\n```", "```js\nExt.define('Packt.model.TextCombo', {\n    extend: 'Ext.data.Model',\n\n    idProperty: 'text',\n\n    fields: [\n        { name: 'text' }\n    ]\n});\n```", "```js\nformulas: {\n    specialFeatures : { //#1\n\n        bind: {\n            bindTo: '{currentFilm.special_features}', //#2\n            deep: true                                //#3\n        },\n\n        get: function(value){ //#4\n            var values = value ? value.split(',') : [],\n                texts = [];\n            values.forEach(function(item){\n                texts.push(Ext.create('Packt.model.TextCombo',{\n                    text: item\n                }));\n            });\n            return texts;\n        },\n\n        set: function(value){ //#5\n            if (value){\n                this.get('currentFilm').set('special_features', value.join());\n            }\n        }\n    }\n}\n```", "```js\ncreateDialog: function(record){\n\n    var me = this,\n        view = me.getView(),        //#1\n        glyphs = Packt.util.Glyphs;\n\n    me.isEdit = !!record;           //#2\n    me.dialog = view.add({          //#3\n        xtype: 'film-window',\n        viewModel: {                //#4\n            data: {                 //#5\n                title: record ? 'Edit: ' + record.get('title') : 'Add Film',\n                glyph: record ? glyphs.getGlyph('edit') : glyphs.getGlyph('add')\n            },\n            links: {                     //#6\n                currentFilm: record || { //#7\n                    type: 'Film',\n                    create: true\n                }\n            }\n        },\n        session: true //#8\n    });\n\n    me.dialog.show(); //#9\n}\n```", "```js\nonSaveActors: function(button, e, options){\n    var me = this,\n        value = me.lookupReference('comboActors').getValue(), //#1\n        store = me.getStore('actors'),                        //#2\n        model = store.findRecord('actor_id', value),          //#3\n        actorsGrid = me.lookupReference('actorsGrid'),        //#4\n        actorsStore = actorsGrid.getStore();                  //#5\n\n    if (model){\n        actorsStore.add(model); //#6\n    }\n\n    me.onCancelActors(); //#7\n}  \n```", "```js\nonCancelActors: function(button, e, options){\n    var me = this;\n    me.searchActors = Ext.destroy(me.searchActors);\n}\n```", "```js\nonSave: function(button, e, options){\n    var me = this,\n        dialog = me.dialog,\n        form = me.lookupReference('filmForm'),\n        isEdit = me.isEdit,\n        session = me.getSession(), //#1\n        id;\n\n    if (form.isValid()) {\n        if (!isEdit) {\n            id = dialog.getViewModel().get('currentFilm').id; //#2\n        }\n        dialog.getSession().save(); //#3\n        if (!isEdit) {\n            me.getStore('films').add(session.getRecord('Film', id)); //#4\n        }\n        me.onCancel();\n    }\n\n    var batch = session.getSaveBatch(); //#5\n    if (batch){\n        batch.start();                  //#6\n    }\n}\n```", "```js\nExt.define('Packt.ux.data.writer.AssociatedWriter', {\n    extend: 'Ext.data.writer.Json',\n    alias: 'writer.associatedjson',\n\n    constructor: function(config) {\n        this.callParent(arguments);\n    },\n\n    getRecordData: function (record, operation) {\n        record.data = this.callParent(arguments);\n        Ext.apply(record.data, record.getAssociatedData());\n        return record.data;\n    }\n});\n```", "```js\nwriter: {\n type: 'associatedjson',\n    //...\n},\n```", "```js\n{\n    \"Film\": {\n        \"U\": [\n            {\n                \"title\": \"ACADEMY DINOSAUR - edit\",\n                \"language_id\": \"2\",\n                \"original_language_id\": \"3\",\n                \"film_id\": \"1\",\n                \"id\": null\n            }\n        ],\n        \"categories\": {\n            \"D\": {\n                \"1\": [\n                    \"6\"\n                ]\n            },\n            \"C\": {\n                \"1\": [\n                    \"7\",\n                    \"8\",\n                    \"9\"\n                ]\n            }\n        },\n        \"actors\": {\n            \"D\": {\n                \"1\": [\n                    \"1\"\n                ]\n            },\n            \"C\": {\n                \"1\": [\n                    \"71\"\n                ]\n            }\n        }\n    }\n}\n```"]