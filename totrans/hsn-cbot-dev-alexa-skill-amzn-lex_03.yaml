- en: Creating Your First Alexa Skill
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will introduce you to the process required to build Alexa Skills,
    and together we will create our first Alexa Skill. We'll learn how to build and
    test our skill to make sure that everything is working.
  prefs: []
  type: TYPE_NORMAL
- en: We'll then create a second Alexa Skill that has a more realistic conversation
    with the user. This skill will go through a series of questions to gather a set
    of information, which we'll use to decide which car is best suited to the user.
    This will also cover accessing data from remote storage.
  prefs: []
  type: TYPE_NORMAL
- en: The last thing we will cover in this chapter is deploying your skill, allowing
    you to publish your skills for the world to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first Alexa Skill
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Alexa SDK in a Lambda to handle the requests from Alexa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing your Lambda
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a more complex Alexa Skill that uses data stored on S3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying your Alexa Skill
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be creating a Lambda function for our skill and we'll
    be creating and deploying it using the local development setup that we created
    in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: All of the code used in this chapter is available at [http://bit.ly/chatbot-ch3](http://bit.ly/chatbot-ch3).
  prefs: []
  type: TYPE_NORMAL
- en: Alexa Skills Kit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create our first Alexa Skill, we''re going to use Alexa Skills Kit. Search
    for Alexa Skills Kit or go to [www.developer.amazon.com/alexa-skills-kit](https://developer.amazon.com/alexa-skills-kit)
    and you should see a screen with a Create Skill or Start a Skill button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/518da09d-b61e-447e-8d57-fc02cfd92b93.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating your first skill
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by giving your skill a name. This should be something that describes
    what the skill does. For this, we can call it `Hi`. Click Next and you''ll be
    able to select a model for your skill. We want to choose Custom so we can create
    the skill exactly how we want:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a00fc3f5-ffe4-4951-8463-f069c0f08d5a.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a custom skill
  prefs: []
  type: TYPE_NORMAL
- en: 'Click Create skill and once the setup has finished, you''ll end up on the Alexa
    Skill builder page. To get started, we need to click on Invocation Name in the
    left-hand menu. This is where we set up the command that starts our skill. I''m
    going to use `sams demo bot` for this first skill. When you create bigger skills,
    it is a good idea to spend some time thinking about what you use as your invocation
    phrase and practice saying it out loud:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fabd8c1a-b5db-43d7-8772-59ab22838ff0.png)'
  prefs: []
  type: TYPE_IMG
- en: Skill invocation
  prefs: []
  type: TYPE_NORMAL
- en: Now that we can start our skill, we need to create an intent so that our skill
    does something. Click the Add button, next to the intents in the left-hand menu,
    to create a new intent. Here, you have the option to Create custom intent or to
    use an existing intent from Amazon's library. Most of Amazon's intents are to
    do with page navigation or music control, so we're going with a custom intent.
  prefs: []
  type: TYPE_NORMAL
- en: Give your intent a name that describes what the intent is going to do. In our
    case, it is to say `Hello`, so that is what it can be called. Click Create custom
    intent to start editing the intent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we''re in the intent window for our `Hello` intent, we need to add
    some utterances. As we talked about in [Chapter 1](90c77e09-3c38-4162-bd4e-6935a897df50.xhtml),
    *Understanding Chatbots*, these are phrases the user might say to trigger this
    intent. For this intent, those utterances might be `hi`, `hello`, or `hey`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4784caae-8dd3-4f92-a7fd-78ba2f89bc07.png)'
  prefs: []
  type: TYPE_IMG
- en: Hello utterances
  prefs: []
  type: TYPE_NORMAL
- en: We have completed our first Alexa intent, so we need to save and build this
    model. At the top of the intents window is a Save Model button and a Build Model
    button, so save it and then build it. Building the model sometimes takes a while,
    so just wait for that to finish.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Lambda to handle the request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To handle the intents inside our new Alexa Skill, we need to create a Lambda
    function. This will contain all of the logic we need to understand the intent
    and send a reply to the user.
  prefs: []
  type: TYPE_NORMAL
- en: To create a Lambda, we can use any of the methods described in [Chapter 2](ac448944-0559-408e-a9c4-972933a03611.xhtml),
    *Getting Started with AWS and Amazon CLI*, but we're going to be using our local
    development setup. Navigate to your base Lambda folder and create a new folder
    called `hello-alexa-skill`. Inside that folder, we need to create a new `index.js`
    file and open it to create our function.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start, we need to `require` in the `alexa-sdk`, which makes creating the
    logic for Alexa a lot easier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Because we are requiring it, we also need to make sure that we have it installed.
    In the command-line interface, navigate into your `hello-alexa-skill` folder and
    run the `npm init` command. This process creates a package information and allows
    you to install other packages in the folder. You can set the values as you go
    through the setup or use the defaults by hitting *Enter*. Once you've finished
    the setup, you'll have a file called `package.json`, which contains the configuration
    for this folder.
  prefs: []
  type: TYPE_NORMAL
- en: To install a new package and add it to our `package.json` file, we can run the
    `npm install --save package-name` command. We want to install `ask-sdk`, so we
    need to run `npm install --save ask-sdk`. When this command runs, you'll see a
    new folder is created, called `node_modules`, which contains all of the code in
    the installed npm packages.
  prefs: []
  type: TYPE_NORMAL
- en: Creating handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When our intents are triggered by a user saying one of our utterances, we need
    to handle that inside our code. To do this, we create an object containing a method
    for each of our intents. Currently, we only have one `hello` intent, so we only
    need to create one handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This `hello` handler has two parts: `canHandle` and `handle`. The `canHandle`
    function decides whether this handler can deal with this request, returning true
    if it can and false if it can''t. This is calculated using the request type and
    intent name. If both match, then this is the correct handler. `handle` is telling
    Alexa how to respond. For this intent, all we want Alexa to do is to say *Hello
    from Sam''s new intent!* and then get the user''s next message.'
  prefs: []
  type: TYPE_NORMAL
- en: Now we need to add our `helloHandler` to our skill.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can add multiple handlers by passing them as multiple parameters to the
    `.addRequestHandlers` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Building and configuring the Lambda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that the function is completed, we can use the build script that we made
    in [Chapter 2](ac448944-0559-408e-a9c4-972933a03611.xhtml), *Getting Started with
    AWS and Amazon CLI*. Run the `./build.sh hello-alexa-skill` command to create
    our Lambda and deploy it to AWS.
  prefs: []
  type: TYPE_NORMAL
- en: When the build script finishes, navigate to your Lambda console in AWS and you
    should now see your newly created function. Click on this new `hello-alexa-skill`
    Lambda to open up the editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'To allow this Lambda to be triggered by an Alexa Skill, we need to add Alexa
    Skills Kit as a trigger. This is done by clicking on Alexa Skills Kit in the designer
    under Add triggers, creating an Alexa Skills Kit trigger appears in the main designer
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2967f443-696c-4964-a91d-dd913e5961eb.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding an Alexa Skills Kit trigger
  prefs: []
  type: TYPE_NORMAL
- en: 'This also opens the Alexa Skills Kit configuration section. Here, we need to
    provide the Alexa App ID for our skill. To find this, open the Alexa Skill Kit
    console, go to Endpoint, and choose Lambda. This will open up a few extra details
    and options. Our `Skill ID` is the first bit of information and can be copied
    to our clipboard and inserted into our Lambda configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d63f20f5-e6f6-432b-af7a-d6183df3e19c.png)'
  prefs: []
  type: TYPE_IMG
- en: Skill endpoint configuration
  prefs: []
  type: TYPE_NORMAL
- en: Before exiting the Lambda editor, we should find the ARN in the upper-right
    corner of the editor screen. Copy this as we'll need it for the last step in configuring
    the skill.
  prefs: []
  type: TYPE_NORMAL
- en: Finishing skill configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have the Lambda configured and the ARN in our clipboard, we can
    go back to our Skill console. Under Endpoint, we can insert our Lambda ARN into
    the textbox next to Default Region. This makes sure that the skill is triggering
    the correct Lambda. You can also create different Lambdas for different regions,
    allowing you to serve specific responses to different groups of people.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Save Endpoints** to save your skill and you have completed your first
    Alexa Skill. Now comes the fun part: trying out your skill!'
  prefs: []
  type: TYPE_NORMAL
- en: Testing your skills
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we''ve built and deployed our new Alexa Skill, we need to test it
    out and see whether it works. At the top of the page, there are four tabs: Build,
    Test, Launch, and Measure. We''ve finished with Build, so we can click on Test.
    Click the toggle at the top of the page to enable testing for this skill:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2fb7de44-b67b-46a0-b635-dce7630dc62e.png)'
  prefs: []
  type: TYPE_IMG
- en: Test screen
  prefs: []
  type: TYPE_NORMAL
- en: 'To interact with your new skill, you can either type your messages or click
    and hold the microphone button and talk to your computer like you would with Alexa.
    To test your skill by talking to it, you will need a microphone on your laptop
    or PC, and have allowed the web page to access that microphone. As soon as you
    hit *Enter* or let go of the microphone button, you''ll see Alexa loading and
    then she''ll reply with your intent and add the message to the chat window. As
    well as the response from Alexa, you also get information in the Skill I/O section
    of the screen. If the intent was successfully triggered, you''ll get the full
    JSON Input that is sent to your Lambda as well as the response that it has given:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/475161db-d78a-42f7-98ce-06ceaf7e6ced.png)'
  prefs: []
  type: TYPE_IMG
- en: Working hello test
  prefs: []
  type: TYPE_NORMAL
- en: This is what you should get when you chat with your bot. Make sure that you
    are saying the correct utterances.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting your skill
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having a few bugs when you first make a skill or Lambda is very normal. The
    key is to learn how to find the bugs and fix them.
  prefs: []
  type: TYPE_NORMAL
- en: In the *Appendix* of this book is a helpful guide for finding the bugs in Lambdas.
    Follow those processes and you should have your skill working soon.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a more useful skill
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a skill that says *hello* when you say *hi* is great to see working
    but it's not very useful. The next skill that we're going to make is going to
    be a lot more useful.
  prefs: []
  type: TYPE_NORMAL
- en: We're going to create a skill that suggests a model of car to buy, and can provide
    the user with details about the cars that it suggests.
  prefs: []
  type: TYPE_NORMAL
- en: The data that we will use will contain three sizes of car, two price groups,
    and an extra category for small cars (number of doors) and for large cars (manual
    or automatic transmission).
  prefs: []
  type: TYPE_NORMAL
- en: Conversational flow diagram
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To make sure that we make an effective chatbot, we need to create our conversational
    flow diagram. This starts with our perfect conversation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a439a5a1-0d18-463a-bad6-c7f2c5059a4f.png)'
  prefs: []
  type: TYPE_IMG
- en: Car conversation
  prefs: []
  type: TYPE_NORMAL
- en: The user chose a large car, therefore, we had to ask them the price group as
    well as what type of transmission they want. This logic is going to become apparent
    in the conversation flow diagram. We can create similar conversations for users
    who choose medium or small cars, where all of the conversations would be slightly
    different. When there are different questions based on what the user has previously
    said, you can end up with hundreds of different conversations. This is where conversation
    flow diagrams really become useful.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this conversation flow diagram, we have a very important *logic* component.
    It sees whether the user has chosen a small, medium, or large car, and directs
    the conversation based on that. This means that we can now show lots of different
    conversation options in one diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e7bc11a0-73ec-4798-b394-c936e0d4db01.png)'
  prefs: []
  type: TYPE_IMG
- en: Car flow diagram
  prefs: []
  type: TYPE_NORMAL
- en: Toward the end of the flow, we also have a lookup to find the ideal car for
    the user. This is something completely new that we'll cover in detail later in
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Alexa Skill
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We start making this skill in the same way as before. Go into your Alexa Skills
    Kit developer console and choose Create Skill. Choose a suitable name, such as
    `carHelper`, and select a Custom skill.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we're in the skill console again, we need to start at the top by setting
    the invocation utterance. Enter `Car Helper` or something similar that is memorable
    and easy to say.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Intent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we can move on to the main part of the skill—adding the intent. For this,
    we add a new intent and we can call it `whichCar`, as we are trying to help the
    user choose *which car* to get.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing this intent needs is utterances. Add in phrases that the user
    might say if they are wanting to find out which car to buy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/73d81841-a0bb-4439-8a0e-2e6e6d0ceb5a.png)'
  prefs: []
  type: TYPE_IMG
- en: Intent utterances
  prefs: []
  type: TYPE_NORMAL
- en: Internal Slots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is where we need to start making the skill more advanced than last time.
    We need to store information such as the size, cost, doors, and whether the user
    wants to have automatic or manual gears. To add a new slot, scroll down to Intent
    Slots and click on Create a new slot. In here, you can name your slot and then
    add that to your intent by pressing *Enter* or clicking the + icon. Do this for
    size, cost, doors, and gears:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8cd4848c-c09b-417a-9f18-b69bad7333d8.png)'
  prefs: []
  type: TYPE_IMG
- en: Intent Slots
  prefs: []
  type: TYPE_NORMAL
- en: Before we can store any information in these slots, we need to set their SLOT
    TYPE. The number of doors is simple as it is just a number, so AMAZON.NUMBER can
    be chosen as its slot type. For the other three slots, it's a bit more complicated.
  prefs: []
  type: TYPE_NORMAL
- en: We need to create custom slot types for these three slots. To create a new slot
    type, click the + next to Slot Types, which will take you to the Add Slot Type
    screen. Enter the name for your new slot type and click Create custom slot type.
    We will start with a slot type called `carSize`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you are in the slot type editing screen, and you''ll see your new slot
    type in the menu on the left. We need to add the three values that the user can
    select: `large`, `medium`, and `small`. This would work as it is, but what if
    a user says `big` instead of `large`? We can capture these too using synonyms.
    We can enter as many new values as we want, and if a user says them, it will be
    registered as the main value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3d32a1fc-047e-4723-bfe7-0927496aa35e.png)'
  prefs: []
  type: TYPE_IMG
- en: Car size slot type
  prefs: []
  type: TYPE_NORMAL
- en: This process needs to be repeated to create a `carCost` slot type with values
    of `luxury` and `value`, and a `carGear` slot type with values of `automatic`
    and `manual`. You should also add synonyms for each of these values to improve
    the flexibility of your bot.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have created the three new slot types, we can add them to our slots.
    You should now find your new slot types in the slot type drop-down menu. Make
    sure each of the slots has the correct slot type, and we're almost finished with
    the skill editor.
  prefs: []
  type: TYPE_NORMAL
- en: We know that the user is always going to be asked for their choice in `size`
    and `cost`, so we can set these two slots to be required. Clicking on the slot
    name under the intent will take you to the slot config screen where we have the
    Slot Type, Slot Filling, and Slot Confirmation sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Slot Filling section, there is a toggle to change the slot to being
    required. When we click that toggle, it opens more settings for us to configure.
    The first is the Alexa speech prompts where we can type a prompt that will get
    the user to fill in the slot correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8d9b3c20-3f91-42f8-93c4-102b02c9f3e6.png)'
  prefs: []
  type: TYPE_IMG
- en: Required slot
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also enter utterances that the user might reply with. The first one
    can simply be the size, so we need to type the slot name wrapped in curly braces.
    As well as just saying `large`, the user might say `I want a large car` or `I''m
    looking for a medium car`. To deal with these, we type those utterances but change
    large and medium for {size}:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/48fdd45d-afa8-43dd-b228-0f64ef9b6e7d.png)'
  prefs: []
  type: TYPE_IMG
- en: Slot utterances
  prefs: []
  type: TYPE_NORMAL
- en: Do the same process for *cost*, using utterances such as I want a {cost} car.
    Add a few other utterances if you want to.
  prefs: []
  type: TYPE_NORMAL
- en: We don't need to do this for gears or doors as they aren't required in every
    conversation, but we'll be able to ask for them from our Lambda.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have created the three custom slots and added the slot types to all
    of your slots, you should have intent slots that look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c154f782-24e0-445f-a3c6-d83fae5fc46f.png)'
  prefs: []
  type: TYPE_IMG
- en: Slot types completed
  prefs: []
  type: TYPE_NORMAL
- en: Finding the Skill ID
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last thing to do is find and copy the Skill ID so we can use it in our Lambda.
    Select Endpoint in the left-hand menu and choose AWS Lambda ARN as the service
    endpoint method. This will expose the Skill ID that we need to copy.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Lambda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have done the console setup, we can build the Lambda that will handle
    the logic behind the skill.
  prefs: []
  type: TYPE_NORMAL
- en: Start by creating a new folder in your `lambdas` folder, naming it something
    appropriate, such as `carHelper`. Inside, we need to create an `index.js` file
    and run `npm init`. We are using `alexa-sdk` again so we need to run `npm install
    --save alexa-sdk`.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the setup ready, we can start writing the Lambda. We can start with a
    Lambda that looks very similar to the Lambda we created in our first function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The first handler we are going to create is to handle a launch request. This
    is when a user says something like `"Alexa start car helper"`; our skill is launched
    but no intent is triggered. We need to help them trigger one of our intents by
    telling them what to say to trigger our intent. We can then add this as our first
    handler in `.addRequestHandlers()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Handling the whichCar Intent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can start dealing with our `whichCar` intent. We start by creating the `WhichCarHandler`
    and adding it to the list in `addRequestHandlers()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside this `handler` function, the first thing that we need to do is to get
    the slots from the event. We can use `es6` destructuring to simplify our code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We now have access to all four of our slot variables. Even though we created
    our slot types, we need to check that we have valid values. We''ll start with
    size and cost as we know that we always need values for those slots:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: These two blocks of code check that the slots exist and then check that they
    equal one of the expected responses. If the slot isn't filled or doesn't equal
    one of the expected values, we get Alexa to ask for the slot again using `.addElicitSlotDirective`.
  prefs: []
  type: TYPE_NORMAL
- en: If the request has got past these two blocks, we know that we have a valid size
    and cost. In our flow diagram, this is where we had a logic step to decide which
    path to send them down, so that is what we need to implement now.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the user chose a large car, we need to see whether they have chosen a gear
    yet. If they haven''t, we ask them whether they want to have an automatic or manual
    transmission. We do the same process for small cars and the number of doors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If the request has got past this point, there are three possibilities:'
  prefs: []
  type: TYPE_NORMAL
- en: They chose a small car and have selected the number of doors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They chose a medium car so didn't need to choose doors or gears
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They chose a large car and have chosen their gears
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The next step is to find the best car based on the user choices. To choose
    the best car, we need to have a selection of cars to sort from. We can create
    an object outside of the handler to store the data we need to sort the cars:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'With this object containing all of the car options we want, we need to find
    the car that is best for the user. To do this, we can use the `Array.filter()`
    function. This function goes through each item in an array and applies a function
    to it. If the function returns true, the item is kept in the array, otherwise,
    it is removed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: To find the best car for the user, this filter function checks that `car.size`
    and `car.cost` equal what the user selected, and then uses ternary expressions
    to check the gears and doors. If the user has selected a gear type or a number
    of doors, it checks whether the car information matches the user's choice, otherwise
    it returns `true`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we run this function, we get back the car that matches the user''s choices.
    If the user has chosen a `small`, `luxury` car with `3` doors, then the `chosenCar`
    will equal `[{name: ''fiat500'', size:''small'', cost: ''luxury'', doors: 3, gears:
    ''manual''}]`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we get more details on the chosen car, we need to check that our function
    chose a car. This can be done by checking that our new `chosenCar` array has a
    length of `1`. If it doesn''t, there has been some sort of error and we need to
    let the user know. Add this code after our filter method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Amazon S3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have the chosen car, we can get some more information on that car
    from an S3 bucket. S3 buckets allow us to store objects and access them from wherever
    we want.
  prefs: []
  type: TYPE_NORMAL
- en: To create an S3 bucket, search for S3 in the AWS console. On the S3 page, click
    the Create bucket button to start the creation process. Choose a name for your
    bucket, noting that the name has to be unique across all buckets on S3\. Adding
    your name or an alias onto the start or end of the bucket name can help make your
    bucket unique. For this example, we don't need to set up any other properties
    or permissions on the bucket, so we can just click on Next until we get to the
    end.
  prefs: []
  type: TYPE_NORMAL
- en: With your new bucket created, we can start to create data that will be uploaded
    into it. Uploading data to an S3 bucket is really easy; click on the bucket that
    you want to upload into and click the Upload button. You can then either drag
    and drop your files in or click Add files to upload your files in a more traditional
    way. For this project, we don't need to set any of the permissions or properties
    for these files.
  prefs: []
  type: TYPE_NORMAL
- en: 'All of the data that we''re going to upload is available at [http://bit.ly/chatbot-ch3](http://bit.ly/chatbot-ch3)
    in the `car-data` folder. We''ll have a look at one example file to see what data
    we are going to access:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: With this information, we can give the user a good summary of the car that our
    chatbot has suggested for them. This could be expanded, but providing too much
    data to the user may make the interaction too complicated.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing our S3 data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have all of our data in our S3 bucket and have chosen a car based
    on the user's choices, we need to get the relevant data. To do this, we can use
    `aws-sdk` to interact with `S3` from our Lambda.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top of our Lambda, we need to require in *AWS* so that we can use the
    *S3* method. Add these two lines to the top of this Lambda:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have access to the S3 methods on AWS, we can get the JSON for our
    chosen car. At the end of our `whichCar` handler, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The first part of this code snippet is choosing where and what data we are trying
    to access. Make sure that you put in your bucket name. The key is generated using
    a template string so that we get the file related to the car we chose for the
    user.
  prefs: []
  type: TYPE_NORMAL
- en: We then return a promise that contains the `s3.getObject()` method, passing
    in our `params` and a `callback` function. The callback from the `.getObject()`
    method passes the `err` and `data` parameters. If there is an error, we will `reject`
    a function called `handleS3Error`. If it succeeds, we'll `resolve` the `handleS3Data`
    function. We'll create these functions later.
  prefs: []
  type: TYPE_NORMAL
- en: Adding S3 permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because we are now accessing data from S3, we also need to update the Execution
    role to include S3 read-only. In your AWS console, navigate to IAM which is where
    you control your users, roles, and policies.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the menu on the left, select Roles and you should see a list of your roles.
    If this is your first time using AWS, you''ll only have one role: *LambdaBasic*.
    When you select it, you are taken to a summary page where there is an Attach policy
    button. We need to attach *S3* permissions so we can click that button.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This opens up a list of all of the policies that are available on your account.
    Amazon has made hundreds of default policies for almost every scenario. We''re
    going to search for `S3`. We should get at least four options, which include *Redshift*,
    *FullAccess*, *ReadOnly*, and *QuickSight*. As we''re only going to be getting
    data from S3, we can tick the AmazonS3ReadOnlyAccess tickbox and then the Attach
    policy button in the lower-right corner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dcdc7ba4-2613-4457-870a-ea47988e23e2.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding Amazon S3 permissions
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with our data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Having done the request to S3, we have received our data or an error. Either
    way, we need to deal with it and send a response to the user. We''ll create two
    new functions that deal with either the data or an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The error function tells the user that we couldn't find the best car for them,
    while the data function creates a short description of the car using the data.
    We need to parse the body of the data because the data comes down as a buffer.
    We need to convert the buffer to a format that we can use.
  prefs: []
  type: TYPE_NORMAL
- en: Testing our Lambda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the last skill, the Lambda was simple enough that we could get away with
    not testing it. This Lambda is more complicated, with multiple places where we
    could have an error, so we're going test it properly.
  prefs: []
  type: TYPE_NORMAL
- en: In the Lambda console, find your function and open it up. Once inside, click
    on the dropdown next to Test and choose Configure test events. Make sure that
    the Create new test event option is selected and we can use a template of Alexa
    Intent - GetNewFact.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most of the template can be left as default, but we need to change the slots
    and `intentName` (lines 20 and 21) as well as the application IDs (lines 10 and
    35). Start by changing `intentName` to equal the intent that we created (`whichCar`).
    Next, we can add the slots that we have available. For now, we can set all of
    them to *null* as that is what they will be when they haven''t been populated
    yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Using the ARN that you got from the Alexa Skill console Endpoint section, change
    the value for `applicationId` at line 10 and 40.
  prefs: []
  type: TYPE_NORMAL
- en: Call this intent `whichCarEmpty` and click Create.
  prefs: []
  type: TYPE_NORMAL
- en: Before we run this test, we can think about what we expect to happen. Because
    there are no slots filled, we expect that it will fail at the `size` check, therefore
    we will get a response asking us what size of car we want. It is always good to
    work out what you expect to happen before running a test. It helps you build your
    code understanding, and if you don't get that response, it raises a red flag in
    your mind.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can click Test and we should get Execution result: succeeded and a response
    with an output speech of "What size car do you want? Please say either small,
    medium or large".'
  prefs: []
  type: TYPE_NORMAL
- en: This is what we expected so that is great! If you didn't get this response,
    look at the error message and use that to figure out what may have gone wrong.
    There is a helpful section in the *Appendix* that can be used to debug common
    Lambda errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this test working, we can create another test that has some filled slots.
    Click the testing dropdown and select Configure test events again. Make sure that
    Create new test event is selected, but this time choose whichCarEmpty as the template.
    This means that we know the application IDs are correct and the only things we
    need to change are the slots. Change the slots to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this test as whichCarLargeLuxuryAuto. When you run this test, you should
    get a successful response of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '"I think that a Mercedes-Benz would be a good car for you. They''re available
    from 35,150 pounds, get 32-66 mpg and have a 425 litre boot."'
  prefs: []
  type: TYPE_NORMAL
- en: You can create tests for each of the possible combinations of results, but since
    we know that our Lambda is responding and is accessing S3, we know that all of
    the code is working.
  prefs: []
  type: TYPE_NORMAL
- en: Finishing the Alexa Skills Kit Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To finish the configuration of our skill, we need to get the ARN of our Lambda.
    Copy that from the top of the Lambda page or from the result of your build script
    and go to the Alexa Skills Kit console. Paste it into Default Region and save
    the endpoint. That is all we need to do before we can start testing our skill.
  prefs: []
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we can try out our new skill. Here you can see a conversation that I had
    with my car helper bot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/853d679c-ea8e-4da5-9472-0aa5143a13ad.png)'
  prefs: []
  type: TYPE_IMG
- en: Testing the car helper skill
  prefs: []
  type: TYPE_NORMAL
- en: This skill isn't perfect – it doesn't respond to every utterance that you might
    say and there is a lot more the skill could do. The good thing is you now know
    everything you need to fix all of those issues.
  prefs: []
  type: TYPE_NORMAL
- en: Launching your skill
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To launch your skill to the Alexa Skill Store, we need to move to the next tab.
    This is where you will set up the information that will be present on the Alexa
    Skill Store. You need to give your skill a unique name, short and long descriptions,
    and example utterances. Then you get to upload an icon and select the category
    and keywords for your skill. The category and keywords should be carefully considered
    as this is probably how users are going to find your skills.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last part on this page is the *privacy policy* and *terms of use* URLs.
    You need to have these if you are going to have a skill in the skills store. There
    are lots of examples out there and they shouldn''t be very complicated for skills
    that don''t store or even ask for user information. Any app that does use and
    store user information will need a more detailed privacy policy and it may be
    worth contacting a lawyer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5a8b4bd8-173c-447d-8d55-216130f0d2df.png)'
  prefs: []
  type: TYPE_IMG
- en: Launch setup
  prefs: []
  type: TYPE_NORMAL
- en: The next page asks you a number of privacy and compliance questions about your
    skill. Answer these honestly and then provide some information to the person who
    will be testing your skill before it gets deployed.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we have to choose the availability of our skill. We can use this to only
    allow certain organizations to access the skill. This can be useful if you've
    created a specialized skill for a company and don't want other people using it.
    You can also select the countries where the skill will be available. You could
    limit it to one or two countries or let everyone use it.
  prefs: []
  type: TYPE_NORMAL
- en: The last page is a review page where it tells you whether there is anything
    that your submission is missing. When you fix everything, you can click Submit
    for review. While the skill is in testing, you won't be able to edit the configuration
    of the skill. You can still edit your Lambdas, but doing so can cause your skill
    to be rejected.
  prefs: []
  type: TYPE_NORMAL
- en: Once it's been tested and approved, you'll have a live Alexa Skill!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter showed us how to do a lot of new things. We started by creating
    our first Alexa Skill using Alexa Skills Kit. This involved learning about and
    creating intents, slots, and utterances. With the configuration completed, we
    created a Lambda to handle the request using Alexa-SDK. This Lambda is where we
    defined the response that would be sent to the user. Finally, we built and tested
    our new Alexa Skill using the built-in testing tools.
  prefs: []
  type: TYPE_NORMAL
- en: Having made a basic first skill, we started to create a more useful second skill.
    We used a custom slot type and applied it to slots in our intents. We then used
    Amazon's S3 service to store the data we needed before using AWS SDK to easily
    get the data and use it in our Lambda.
  prefs: []
  type: TYPE_NORMAL
- en: Using the skills learned in this chapter, you can go build a huge range of powerful
    skills for Alexa.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we'll learn to access APIs, allowing us to create much more
    powerful skills.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the tool we use in Lambdas for dealing with Alexa requests?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What three things do we need to do to connect a Lambda to an Alexa Skill?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the method we use to get information from our S3 bucket?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What do we have to do to the body response from S3 and why?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we create a Lambda test?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to try out different types of response, have a look through the
    Alexa SDK response builder docs: [https://ask-sdk-for-nodejs.readthedocs.io/en/latest/Building-Response.html](https://ask-sdk-for-nodejs.readthedocs.io/en/latest/Building-Response.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We have only used S3 to get data that we manually stored; there are other methods
    that allow more S3 functionality: [https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html](https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html).'
  prefs: []
  type: TYPE_NORMAL
