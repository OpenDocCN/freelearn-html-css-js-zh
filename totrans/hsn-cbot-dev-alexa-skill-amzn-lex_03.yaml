- en: Creating Your First Alexa Skill
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的第一个Alexa技能
- en: This chapter will introduce you to the process required to build Alexa Skills,
    and together we will create our first Alexa Skill. We'll learn how to build and
    test our skill to make sure that everything is working.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将向您介绍构建Alexa技能所需的过程，我们将一起创建我们的第一个Alexa技能。我们将学习如何构建和测试我们的技能，以确保一切正常工作。
- en: We'll then create a second Alexa Skill that has a more realistic conversation
    with the user. This skill will go through a series of questions to gather a set
    of information, which we'll use to decide which car is best suited to the user.
    This will also cover accessing data from remote storage.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将创建第二个Alexa技能，它将与用户进行更真实的对话。这个技能将通过一系列问题收集一组信息，我们将使用这些信息来决定哪辆车最适合用户。这还将涵盖从远程存储访问数据。
- en: The last thing we will cover in this chapter is deploying your skill, allowing
    you to publish your skills for the world to use.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章最后我们将介绍部署您的技能，让您能够发布您的技能供全世界使用。
- en: 'This chapter will cover the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Creating our first Alexa Skill
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的第一个Alexa技能
- en: Using Alexa SDK in a Lambda to handle the requests from Alexa
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Lambda中使用Alexa SDK处理来自Alexa的请求
- en: Testing your Lambda
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试您的Lambda
- en: Creating a more complex Alexa Skill that uses data stored on S3
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个使用存储在S3上的数据的更复杂的Alexa技能
- en: Deploying your Alexa Skill
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署您的Alexa技能
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, we will be creating a Lambda function for our skill and we'll
    be creating and deploying it using the local development setup that we created
    in the previous chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将为我们的技能创建一个Lambda函数，并使用我们在上一章中创建的本地开发设置来创建和部署它。
- en: All of the code used in this chapter is available at [http://bit.ly/chatbot-ch3](http://bit.ly/chatbot-ch3).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的所有代码都可在[http://bit.ly/chatbot-ch3](http://bit.ly/chatbot-ch3)找到。
- en: Alexa Skills Kit
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Alexa技能套件
- en: 'To create our first Alexa Skill, we''re going to use Alexa Skills Kit. Search
    for Alexa Skills Kit or go to [www.developer.amazon.com/alexa-skills-kit](https://developer.amazon.com/alexa-skills-kit)
    and you should see a screen with a Create Skill or Start a Skill button:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建我们的第一个Alexa技能，我们将使用Alexa技能套件。搜索Alexa技能套件或访问[www.developer.amazon.com/alexa-skills-kit](https://developer.amazon.com/alexa-skills-kit)，你应该会看到一个带有“创建技能”或“开始技能”按钮的屏幕：
- en: '![](img/518da09d-b61e-447e-8d57-fc02cfd92b93.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/518da09d-b61e-447e-8d57-fc02cfd92b93.png)'
- en: Creating your first skill
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 创建您的第一个技能
- en: 'Start by giving your skill a name. This should be something that describes
    what the skill does. For this, we can call it `Hi`. Click Next and you''ll be
    able to select a model for your skill. We want to choose Custom so we can create
    the skill exactly how we want:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，给您的技能起一个名字。这应该是描述技能做什么的东西。为此，我们可以称之为“Hi”。点击下一步，您将能够选择技能的模型。我们想选择自定义，这样我们就可以创建我们想要的技能：
- en: '![](img/a00fc3f5-ffe4-4951-8463-f069c0f08d5a.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a00fc3f5-ffe4-4951-8463-f069c0f08d5a.png)'
- en: Creating a custom skill
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个自定义技能
- en: 'Click Create skill and once the setup has finished, you''ll end up on the Alexa
    Skill builder page. To get started, we need to click on Invocation Name in the
    left-hand menu. This is where we set up the command that starts our skill. I''m
    going to use `sams demo bot` for this first skill. When you create bigger skills,
    it is a good idea to spend some time thinking about what you use as your invocation
    phrase and practice saying it out loud:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 点击创建技能，一旦设置完成，您将进入Alexa技能构建页面。要开始，我们需要点击左侧菜单中的“触发名称”。这就是我们设置启动技能的命令的地方。我将为这个第一个技能使用`sams
    demo bot`。当你创建更大的技能时，花些时间思考你将使用什么作为你的触发短语，并大声练习说它是个好主意：
- en: '![](img/fabd8c1a-b5db-43d7-8772-59ab22838ff0.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fabd8c1a-b5db-43d7-8772-59ab22838ff0.png)'
- en: Skill invocation
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 技能触发
- en: Now that we can start our skill, we need to create an intent so that our skill
    does something. Click the Add button, next to the intents in the left-hand menu,
    to create a new intent. Here, you have the option to Create custom intent or to
    use an existing intent from Amazon's library. Most of Amazon's intents are to
    do with page navigation or music control, so we're going with a custom intent.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以开始我们的技能了，我们需要创建一个意图，以便我们的技能做些事情。点击左侧菜单中意图旁边的“添加”按钮来创建一个新的意图。在这里，您可以选择创建自定义意图或使用亚马逊库中的现有意图。亚马逊的大多数意图都与页面导航或音乐控制有关，所以我们选择自定义意图。
- en: Give your intent a name that describes what the intent is going to do. In our
    case, it is to say `Hello`, so that is what it can be called. Click Create custom
    intent to start editing the intent.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 给你的意图起一个名字，描述它将要做什么。在我们的例子中，它是说`Hello`，所以这就是它的名字。点击创建自定义意图以开始编辑意图。
- en: 'Now that we''re in the intent window for our `Hello` intent, we need to add
    some utterances. As we talked about in [Chapter 1](90c77e09-3c38-4162-bd4e-6935a897df50.xhtml),
    *Understanding Chatbots*, these are phrases the user might say to trigger this
    intent. For this intent, those utterances might be `hi`, `hello`, or `hey`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经进入了`Hello`意图的意图窗口，我们需要添加一些语句。正如我们在[第1章](90c77e09-3c38-4162-bd4e-6935a897df50.xhtml)，“理解聊天机器人”中讨论的那样，这些是用户可能会说的以触发此意图的短语。对于这个意图，这些语句可能是`hi`、`hello`或`hey`：
- en: '![](img/4784caae-8dd3-4f92-a7fd-78ba2f89bc07.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4784caae-8dd3-4f92-a7fd-78ba2f89bc07.png)'
- en: Hello utterances
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Hello语句
- en: We have completed our first Alexa intent, so we need to save and build this
    model. At the top of the intents window is a Save Model button and a Build Model
    button, so save it and then build it. Building the model sometimes takes a while,
    so just wait for that to finish.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了我们的第一个Alexa意图，所以我们需要保存并构建这个模型。在意图窗口的顶部是保存模型按钮和构建模型按钮，所以保存它然后构建它。构建模型有时需要一段时间，所以只需等待它完成。
- en: Creating a Lambda to handle the request
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Lambda来处理请求
- en: To handle the intents inside our new Alexa Skill, we need to create a Lambda
    function. This will contain all of the logic we need to understand the intent
    and send a reply to the user.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要处理我们新的Alexa技能中的意图，我们需要创建一个Lambda函数。这将包含我们理解意图并向用户发送回复所需的所有逻辑。
- en: To create a Lambda, we can use any of the methods described in [Chapter 2](ac448944-0559-408e-a9c4-972933a03611.xhtml),
    *Getting Started with AWS and Amazon CLI*, but we're going to be using our local
    development setup. Navigate to your base Lambda folder and create a new folder
    called `hello-alexa-skill`. Inside that folder, we need to create a new `index.js`
    file and open it to create our function.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个Lambda，我们可以使用[第2章](ac448944-0559-408e-a9c4-972933a03611.xhtml)，“AWS和Amazon
    CLI入门”中描述的任何方法，但我们将使用我们的本地开发设置。导航到你的基本Lambda文件夹，创建一个名为`hello-alexa-skill`的新文件夹。在那个文件夹内，我们需要创建一个新的`index.js`文件并打开它以创建我们的函数。
- en: 'To start, we need to `require` in the `alexa-sdk`, which makes creating the
    logic for Alexa a lot easier:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要`require`在`alexa-sdk`中，这使得创建Alexa的逻辑变得容易很多：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Because we are requiring it, we also need to make sure that we have it installed.
    In the command-line interface, navigate into your `hello-alexa-skill` folder and
    run the `npm init` command. This process creates a package information and allows
    you to install other packages in the folder. You can set the values as you go
    through the setup or use the defaults by hitting *Enter*. Once you've finished
    the setup, you'll have a file called `package.json`, which contains the configuration
    for this folder.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们需要它，我们还需要确保我们已经安装了它。在命令行界面中，导航到你的`hello-alexa-skill`文件夹，并运行`npm init`命令。这个过程会创建一个包信息，并允许你在文件夹中安装其他包。你可以边设置边设置值，或者通过按*Enter*使用默认值。一旦完成设置，你将有一个名为`package.json`的文件，其中包含此文件夹的配置。
- en: To install a new package and add it to our `package.json` file, we can run the
    `npm install --save package-name` command. We want to install `ask-sdk`, so we
    need to run `npm install --save ask-sdk`. When this command runs, you'll see a
    new folder is created, called `node_modules`, which contains all of the code in
    the installed npm packages.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装一个新的包并将其添加到我们的`package.json`文件中，我们可以运行`npm install --save package-name`命令。我们想安装`ask-sdk`，所以我们需要运行`npm
    install --save ask-sdk`。当这个命令运行时，你会看到一个新文件夹被创建，名为`node_modules`，其中包含所有已安装的npm包中的代码。
- en: Creating handlers
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建处理程序
- en: 'When our intents are triggered by a user saying one of our utterances, we need
    to handle that inside our code. To do this, we create an object containing a method
    for each of our intents. Currently, we only have one `hello` intent, so we only
    need to create one handler:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户的意图被我们的某个语句触发时，我们需要在代码内部处理它。为此，我们创建一个对象，其中包含针对我们每个意图的方法。目前，我们只有一个`hello`意图，所以我们只需要创建一个处理程序：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This `hello` handler has two parts: `canHandle` and `handle`. The `canHandle`
    function decides whether this handler can deal with this request, returning true
    if it can and false if it can''t. This is calculated using the request type and
    intent name. If both match, then this is the correct handler. `handle` is telling
    Alexa how to respond. For this intent, all we want Alexa to do is to say *Hello
    from Sam''s new intent!* and then get the user''s next message.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`hello`处理程序有两个部分：`canHandle`和`handle`。`canHandle`函数决定此处理程序是否可以处理此请求，如果可以则返回true，如果不能则返回false。这是通过请求类型和意图名称来计算的。如果两者匹配，则这是正确的处理程序。`handle`告诉Alexa如何响应。对于这个意图，我们只想让Alexa说出*来自Sam的新意图的问候！*然后获取用户的下一条消息。
- en: Now we need to add our `helloHandler` to our skill.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要将我们的`helloHandler`添加到我们的技能中。
- en: 'We can add multiple handlers by passing them as multiple parameters to the
    `.addRequestHandlers` method:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将多个处理程序作为多个参数传递给`.addRequestHandlers`方法来添加多个处理程序：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Building and configuring the Lambda
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 和 配置Lambda
- en: Now that the function is completed, we can use the build script that we made
    in [Chapter 2](ac448944-0559-408e-a9c4-972933a03611.xhtml), *Getting Started with
    AWS and Amazon CLI*. Run the `./build.sh hello-alexa-skill` command to create
    our Lambda and deploy it to AWS.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在函数已完成，我们可以使用我们在[第2章](ac448944-0559-408e-a9c4-972933a03611.xhtml)，*AWS和Amazon
    CLI入门*中制作的构建脚本。运行`./build.sh hello-alexa-skill`命令来创建我们的Lambda并将其部署到AWS。
- en: When the build script finishes, navigate to your Lambda console in AWS and you
    should now see your newly created function. Click on this new `hello-alexa-skill`
    Lambda to open up the editor.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当构建脚本完成后，导航到AWS中的Lambda控制台，你现在应该能看到你新创建的函数。点击这个新的`hello-alexa-skill` Lambda以打开编辑器。
- en: 'To allow this Lambda to be triggered by an Alexa Skill, we need to add Alexa
    Skills Kit as a trigger. This is done by clicking on Alexa Skills Kit in the designer
    under Add triggers, creating an Alexa Skills Kit trigger appears in the main designer
    screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要使此Lambda能够通过Alexa技能触发，我们需要将Alexa技能套件添加为触发器。这通过在设计师中的“添加触发器”下点击Alexa技能套件来完成，创建的Alexa技能套件触发器将出现在主设计师截图：
- en: '![](img/2967f443-696c-4964-a91d-dd913e5961eb.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2967f443-696c-4964-a91d-dd913e5961eb.png)'
- en: Adding an Alexa Skills Kit trigger
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 添加Alexa技能套件触发器
- en: 'This also opens the Alexa Skills Kit configuration section. Here, we need to
    provide the Alexa App ID for our skill. To find this, open the Alexa Skill Kit
    console, go to Endpoint, and choose Lambda. This will open up a few extra details
    and options. Our `Skill ID` is the first bit of information and can be copied
    to our clipboard and inserted into our Lambda configuration:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这也打开了Alexa技能套件配置部分。在这里，我们需要提供我们技能的Alexa应用ID。要找到这个，请打开Alexa技能套件控制台，转到端点，并选择Lambda。这将打开一些额外的详细信息和选项。我们的`Skill
    ID`是第一条信息，可以复制到剪贴板并插入到Lambda配置中：
- en: '![](img/d63f20f5-e6f6-432b-af7a-d6183df3e19c.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d63f20f5-e6f6-432b-af7a-d6183df3e19c.png)'
- en: Skill endpoint configuration
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 技能端点配置
- en: Before exiting the Lambda editor, we should find the ARN in the upper-right
    corner of the editor screen. Copy this as we'll need it for the last step in configuring
    the skill.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在退出Lambda编辑器之前，我们应该在编辑器屏幕的右上角找到ARN。复制它，因为我们将在配置技能的最后一步需要它。
- en: Finishing skill configuration
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成技能配置
- en: Now that we have the Lambda configured and the ARN in our clipboard, we can
    go back to our Skill console. Under Endpoint, we can insert our Lambda ARN into
    the textbox next to Default Region. This makes sure that the skill is triggering
    the correct Lambda. You can also create different Lambdas for different regions,
    allowing you to serve specific responses to different groups of people.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置了Lambda并且ARN已经复制到剪贴板，我们可以回到我们的技能控制台。在端点下，我们可以在默认区域旁边的文本框中插入我们的Lambda
    ARN。这确保了技能正在触发正确的Lambda。您也可以为不同的区域创建不同的Lambda，这样您可以为不同的人群提供特定的响应。
- en: 'Click **Save Endpoints** to save your skill and you have completed your first
    Alexa Skill. Now comes the fun part: trying out your skill!'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**保存端点**以保存您的技能，您已经完成了您的第一个Alexa技能。现在到了有趣的部分：尝试您的技能！
- en: Testing your skills
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试您的技能
- en: 'Now that we''ve built and deployed our new Alexa Skill, we need to test it
    out and see whether it works. At the top of the page, there are four tabs: Build,
    Test, Launch, and Measure. We''ve finished with Build, so we can click on Test.
    Click the toggle at the top of the page to enable testing for this skill:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经构建和部署了新的Alexa技能，我们需要测试它看看是否工作。在页面顶部，有四个标签：构建、测试、发布和衡量。我们已经完成了构建，所以我们可以点击测试。点击页面顶部的切换按钮以启用此技能的测试：
- en: '![](img/2fb7de44-b67b-46a0-b635-dce7630dc62e.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2fb7de44-b67b-46a0-b635-dce7630dc62e.png)'
- en: Test screen
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 测试屏幕
- en: 'To interact with your new skill, you can either type your messages or click
    and hold the microphone button and talk to your computer like you would with Alexa.
    To test your skill by talking to it, you will need a microphone on your laptop
    or PC, and have allowed the web page to access that microphone. As soon as you
    hit *Enter* or let go of the microphone button, you''ll see Alexa loading and
    then she''ll reply with your intent and add the message to the chat window. As
    well as the response from Alexa, you also get information in the Skill I/O section
    of the screen. If the intent was successfully triggered, you''ll get the full
    JSON Input that is sent to your Lambda as well as the response that it has given:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要与你的新技能互动，你可以键入你的消息，或者点击并按住麦克风按钮，像与Alexa交谈一样与你的电脑交谈。要通过与它交谈来测试你的技能，你需要在笔记本电脑或PC上有一个麦克风，并且已经允许网页访问该麦克风。一旦你按下*Enter*或松开麦克风按钮，你将看到Alexa正在加载，然后她会根据你的意图回复并添加消息到聊天窗口。除了Alexa的回复外，你还可以在屏幕的技能I/O部分获得信息。如果意图被成功触发，你将得到发送到你的Lambda的完整JSON输入以及它给出的响应：
- en: '![](img/475161db-d78a-42f7-98ce-06ceaf7e6ced.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/475161db-d78a-42f7-98ce-06ceaf7e6ced.png)'
- en: Working hello test
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 工作中的hello测试
- en: This is what you should get when you chat with your bot. Make sure that you
    are saying the correct utterances.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你与你的机器人聊天时应得到的内容。确保你正在说正确的表述。
- en: Troubleshooting your skill
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除你的技能
- en: Having a few bugs when you first make a skill or Lambda is very normal. The
    key is to learn how to find the bugs and fix them.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在最初制作技能或Lambda时出现一些错误是非常正常的。关键是学习如何查找错误并修复它们。
- en: In the *Appendix* of this book is a helpful guide for finding the bugs in Lambdas.
    Follow those processes and you should have your skill working soon.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书的*附录*中有一个有用的指南，用于在Lambdas中查找错误。遵循那些流程，你应该很快就能让你的技能工作。
- en: Creating a more useful skill
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个更有用的技能
- en: Creating a skill that says *hello* when you say *hi* is great to see working
    but it's not very useful. The next skill that we're going to make is going to
    be a lot more useful.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当你说*hi*时，技能会回复*hello*，看到它工作是非常好的，但它并不很有用。接下来我们要制作的下一个技能将会更有用。
- en: We're going to create a skill that suggests a model of car to buy, and can provide
    the user with details about the cars that it suggests.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个建议购买车型并能够提供所建议车型详细信息的技能。
- en: The data that we will use will contain three sizes of car, two price groups,
    and an extra category for small cars (number of doors) and for large cars (manual
    or automatic transmission).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的数据将包含三种车型尺寸、两个价格区间，以及小型车（车门数量）和大车型（手动或自动传动）的额外类别。
- en: Conversational flow diagram
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对话流程图
- en: 'To make sure that we make an effective chatbot, we need to create our conversational
    flow diagram. This starts with our perfect conversation:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保我们制作一个有效的聊天机器人，我们需要创建我们的对话流程图。这从我们的完美对话开始：
- en: '![](img/a439a5a1-0d18-463a-bad6-c7f2c5059a4f.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a439a5a1-0d18-463a-bad6-c7f2c5059a4f.png)'
- en: Car conversation
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 车辆对话
- en: The user chose a large car, therefore, we had to ask them the price group as
    well as what type of transmission they want. This logic is going to become apparent
    in the conversation flow diagram. We can create similar conversations for users
    who choose medium or small cars, where all of the conversations would be slightly
    different. When there are different questions based on what the user has previously
    said, you can end up with hundreds of different conversations. This is where conversation
    flow diagrams really become useful.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 用户选择了一款大型车，因此，我们不得不询问他们想要的价格区间以及他们想要的传动类型。这种逻辑将在对话流程图中变得明显。我们可以为选择中型或小型车的用户创建类似的对话，其中所有对话都会略有不同。当根据用户之前所说的问题不同时，你可能会得到数百种不同的对话。这就是对话流程图真正变得有用之处。
- en: 'In this conversation flow diagram, we have a very important *logic* component.
    It sees whether the user has chosen a small, medium, or large car, and directs
    the conversation based on that. This means that we can now show lots of different
    conversation options in one diagram:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个对话流程图中，我们有一个非常重要的*逻辑*组件。它检查用户是否选择小型、中型或大型车，并根据这一点引导对话。这意味着我们现在可以在一个图中展示许多不同的对话选项：
- en: '![](img/e7bc11a0-73ec-4798-b394-c936e0d4db01.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e7bc11a0-73ec-4798-b394-c936e0d4db01.png)'
- en: Car flow diagram
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 车辆流程图
- en: Toward the end of the flow, we also have a lookup to find the ideal car for
    the user. This is something completely new that we'll cover in detail later in
    this chapter.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在流程的末尾，我们还有一个查找功能，以找到适合用户的理想车型。这是本章后面将详细讨论的全新内容。
- en: Creating the Alexa Skill
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Alexa技能
- en: We start making this skill in the same way as before. Go into your Alexa Skills
    Kit developer console and choose Create Skill. Choose a suitable name, such as
    `carHelper`, and select a Custom skill.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以之前相同的方式开始创建这个技能。进入你的Alexa技能套件开发者控制台，选择创建技能。选择一个合适的名称，例如`carHelper`，并选择自定义技能。
- en: Now that we're in the skill console again, we need to start at the top by setting
    the invocation utterance. Enter `Car Helper` or something similar that is memorable
    and easy to say.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们再次进入技能控制台，我们需要从顶部开始设置唤醒词。输入`Car Helper`或类似的好记且容易说的名称。
- en: Creating an Intent
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建意图
- en: Now we can move on to the main part of the skill—adding the intent. For this,
    we add a new intent and we can call it `whichCar`, as we are trying to help the
    user choose *which car* to get.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以继续到技能的主要部分——添加意图。为此，我们添加一个新的意图，我们可以将其命名为`whichCar`，因为我们试图帮助用户选择*哪辆车*。
- en: 'The first thing this intent needs is utterances. Add in phrases that the user
    might say if they are wanting to find out which car to buy:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这个意图首先需要的是表述。添加用户可能会说的短语，如果他们想知道要买什么车：
- en: '![](img/73d81841-a0bb-4439-8a0e-2e6e6d0ceb5a.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/73d81841-a0bb-4439-8a0e-2e6e6d0ceb5a.png)'
- en: Intent utterances
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 意图表述
- en: Internal Slots
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内部槽位
- en: 'This is where we need to start making the skill more advanced than last time.
    We need to store information such as the size, cost, doors, and whether the user
    wants to have automatic or manual gears. To add a new slot, scroll down to Intent
    Slots and click on Create a new slot. In here, you can name your slot and then
    add that to your intent by pressing *Enter* or clicking the + icon. Do this for
    size, cost, doors, and gears:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们需要开始使技能比上次更高级的地方。我们需要存储有关尺寸、成本、车门以及用户是否想要自动或手动变速器的信息。要添加一个新的槽位，滚动到意图槽位并点击创建新槽位。在这里，您可以命名您的槽位，然后通过按*Enter*键或点击+图标将其添加到意图中。为尺寸、成本、车门和变速器都这样做：
- en: '![](img/8cd4848c-c09b-417a-9f18-b69bad7333d8.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8cd4848c-c09b-417a-9f18-b69bad7333d8.png)'
- en: Intent Slots
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 意图槽位
- en: Before we can store any information in these slots, we need to set their SLOT
    TYPE. The number of doors is simple as it is just a number, so AMAZON.NUMBER can
    be chosen as its slot type. For the other three slots, it's a bit more complicated.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够将这些信息存储在这些槽位之前，我们需要设置它们的槽位类型。门的数量很简单，因为它只是一个数字，所以可以选择AMAZON.NUMBER作为其槽位类型。对于其他三个槽位，情况要复杂一些。
- en: We need to create custom slot types for these three slots. To create a new slot
    type, click the + next to Slot Types, which will take you to the Add Slot Type
    screen. Enter the name for your new slot type and click Create custom slot type.
    We will start with a slot type called `carSize`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为这三个槽位创建自定义槽位类型。要创建一个新的槽位类型，点击槽位类型旁边的+号，这将带您进入添加槽位类型屏幕。输入您新槽位类型的名称，然后点击创建自定义槽位类型。我们将从一个名为`carSize`的槽位类型开始。
- en: 'Now you are in the slot type editing screen, and you''ll see your new slot
    type in the menu on the left. We need to add the three values that the user can
    select: `large`, `medium`, and `small`. This would work as it is, but what if
    a user says `big` instead of `large`? We can capture these too using synonyms.
    We can enter as many new values as we want, and if a user says them, it will be
    registered as the main value:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经进入了槽位类型编辑屏幕，您将在左侧菜单中看到您的新槽位类型。我们需要添加用户可以选择的三个值：`large`、`medium`和`small`。这样就可以正常工作，但如果用户说的是`big`而不是`large`怎么办？我们可以通过同义词捕获这些表述。我们可以输入尽可能多的新值，如果用户说了这些值，它们将被注册为主要值：
- en: '![](img/3d32a1fc-047e-4723-bfe7-0927496aa35e.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3d32a1fc-047e-4723-bfe7-0927496aa35e.png)'
- en: Car size slot type
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 车辆尺寸槽位类型
- en: This process needs to be repeated to create a `carCost` slot type with values
    of `luxury` and `value`, and a `carGear` slot type with values of `automatic`
    and `manual`. You should also add synonyms for each of these values to improve
    the flexibility of your bot.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程需要重复进行，以创建一个具有`luxury`和`value`值的`carCost`槽位类型，以及一个具有`automatic`和`manual`值的`carGear`槽位类型。你还应该为这些值中的每一个添加同义词，以提高你机器人的灵活性。
- en: Now that we have created the three new slot types, we can add them to our slots.
    You should now find your new slot types in the slot type drop-down menu. Make
    sure each of the slots has the correct slot type, and we're almost finished with
    the skill editor.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了三个新的槽位类型，我们可以将它们添加到我们的槽位中。您现在应该在槽位类型下拉菜单中找到您的新槽位类型。确保每个槽位都有正确的槽位类型，我们几乎完成了技能编辑器。
- en: We know that the user is always going to be asked for their choice in `size`
    and `cost`, so we can set these two slots to be required. Clicking on the slot
    name under the intent will take you to the slot config screen where we have the
    Slot Type, Slot Filling, and Slot Confirmation sections.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道用户总是会要求选择 `size` 和 `cost`，因此我们可以将这些槽位设置为必需。点击意图下的槽位名称将带您进入槽位配置屏幕，在那里我们有槽位类型、槽位填充和槽位确认部分。
- en: 'In the Slot Filling section, there is a toggle to change the slot to being
    required. When we click that toggle, it opens more settings for us to configure.
    The first is the Alexa speech prompts where we can type a prompt that will get
    the user to fill in the slot correctly:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在槽位填充部分，有一个切换按钮可以更改槽位为必需。当我们点击这个切换按钮时，它会为我们打开更多设置，以便我们进行配置。第一个是 Alexa 语音提示，我们可以输入一个提示，让用户正确填写槽位：
- en: '![](img/8d9b3c20-3f91-42f8-93c4-102b02c9f3e6.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d9b3c20-3f91-42f8-93c4-102b02c9f3e6.png)'
- en: Required slot
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 必需的槽位
- en: 'We can also enter utterances that the user might reply with. The first one
    can simply be the size, so we need to type the slot name wrapped in curly braces.
    As well as just saying `large`, the user might say `I want a large car` or `I''m
    looking for a medium car`. To deal with these, we type those utterances but change
    large and medium for {size}:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以输入用户可能会回复的语句。第一个可以是大小，因此我们需要输入用大括号括起来的槽位名称。除了简单地说出“大”，用户还可能说“我想买一辆大车”或“我在找一辆中档车”。为了处理这些，我们输入这些语句，但将大和中改为
    {size}：
- en: '![](img/48fdd45d-afa8-43dd-b228-0f64ef9b6e7d.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/48fdd45d-afa8-43dd-b228-0f64ef9b6e7d.png)'
- en: Slot utterances
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 槽位语句
- en: Do the same process for *cost*, using utterances such as I want a {cost} car.
    Add a few other utterances if you want to.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 *cost*，使用类似“我想买一辆 {cost} 的车”的语句进行相同的过程。如果您想的话，可以添加一些其他语句。
- en: We don't need to do this for gears or doors as they aren't required in every
    conversation, but we'll be able to ask for them from our Lambda.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 对于齿轮或车门，我们不需要这样做，因为它们不是每次对话都必须的，但我们将能够从我们的 Lambda 中请求它们。
- en: 'Once you have created the three custom slots and added the slot types to all
    of your slots, you should have intent slots that look like this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您创建了三个自定义槽位并将槽位类型添加到所有槽位中，您应该会有看起来像这样的意图槽位：
- en: '![](img/c154f782-24e0-445f-a3c6-d83fae5fc46f.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c154f782-24e0-445f-a3c6-d83fae5fc46f.png)'
- en: Slot types completed
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 槽位类型完成
- en: Finding the Skill ID
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找技能 ID
- en: The last thing to do is find and copy the Skill ID so we can use it in our Lambda.
    Select Endpoint in the left-hand menu and choose AWS Lambda ARN as the service
    endpoint method. This will expose the Skill ID that we need to copy.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一件要做的事情是找到并复制技能 ID，以便我们可以在 Lambda 中使用它。在左侧菜单中选择“端点”，然后选择 AWS Lambda ARN 作为服务端点方法。这将暴露我们需要复制的技能
    ID。
- en: Creating the Lambda
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Lambda
- en: Now that we have done the console setup, we can build the Lambda that will handle
    the logic behind the skill.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了控制台设置，我们可以构建一个 Lambda，它将处理技能背后的逻辑。
- en: Start by creating a new folder in your `lambdas` folder, naming it something
    appropriate, such as `carHelper`. Inside, we need to create an `index.js` file
    and run `npm init`. We are using `alexa-sdk` again so we need to run `npm install
    --save alexa-sdk`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在您的 `lambdas` 文件夹中创建一个新的文件夹，取一个合适的名字，例如 `carHelper`。在里面，我们需要创建一个 `index.js`
    文件并运行 `npm init`。我们再次使用 `alexa-sdk`，因此需要运行 `npm install --save alexa-sdk`。
- en: 'With the setup ready, we can start writing the Lambda. We can start with a
    Lambda that looks very similar to the Lambda we created in our first function:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 设置就绪后，我们可以开始编写 Lambda。我们可以从一个与我们在第一个函数中创建的 Lambda 非常相似的 Lambda 开始：
- en: '[PRE3]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The first handler we are going to create is to handle a launch request. This
    is when a user says something like `"Alexa start car helper"`; our skill is launched
    but no intent is triggered. We need to help them trigger one of our intents by
    telling them what to say to trigger our intent. We can then add this as our first
    handler in `.addRequestHandlers()`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要创建的第一个处理程序是用来处理启动请求的。这是当用户说类似“Alexa 启动车助手”的话时；我们的技能被启动，但没有触发任何意图。我们需要通过告诉他们如何触发我们的意图来帮助他们触发我们的意图之一。然后我们可以将其添加为
    `.addRequestHandlers()` 中的第一个处理程序：
- en: '[PRE4]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Handling the whichCar Intent
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理 whichCar 意图
- en: 'We can start dealing with our `whichCar` intent. We start by creating the `WhichCarHandler`
    and adding it to the list in `addRequestHandlers()`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以开始处理我们的`whichCar`意图。我们首先创建`WhichCarHandler`并将其添加到`addRequestHandlers()`中的列表：
- en: '[PRE5]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Inside this `handler` function, the first thing that we need to do is to get
    the slots from the event. We can use `es6` destructuring to simplify our code:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个`handler`函数内部，我们首先需要做的是从事件中获取槽。我们可以使用`es6`解构来简化我们的代码：
- en: '[PRE6]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We now have access to all four of our slot variables. Even though we created
    our slot types, we need to check that we have valid values. We''ll start with
    size and cost as we know that we always need values for those slots:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有权访问所有四个槽变量。尽管我们创建了槽类型，但我们需要检查我们是否有有效的值。我们将从大小和成本开始，因为我们知道我们总是需要这些槽的值：
- en: '[PRE7]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: These two blocks of code check that the slots exist and then check that they
    equal one of the expected responses. If the slot isn't filled or doesn't equal
    one of the expected values, we get Alexa to ask for the slot again using `.addElicitSlotDirective`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这两段代码检查槽是否存在，然后检查它们是否等于预期的响应之一。如果槽未填写或与预期值不匹配，我们使用`.addElicitSlotDirective`让Alexa再次请求该槽。
- en: If the request has got past these two blocks, we know that we have a valid size
    and cost. In our flow diagram, this is where we had a logic step to decide which
    path to send them down, so that is what we need to implement now.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果请求已经超过这两个块，我们知道我们有一个有效的大小和成本。在我们的流程图中，这就是我们有一个逻辑步骤来决定将他们引导到哪个路径的地方，所以这就是我们现在需要实现的内容。
- en: 'If the user chose a large car, we need to see whether they have chosen a gear
    yet. If they haven''t, we ask them whether they want to have an automatic or manual
    transmission. We do the same process for small cars and the number of doors:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户选择了一辆大车，我们需要看看他们是否已经选择了档位。如果没有，我们会询问他们是否想要自动或手动变速箱。对于小车和车门数量，我们执行同样的过程：
- en: '[PRE8]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If the request has got past this point, there are three possibilities:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果请求已经超过这个点，有三种可能性：
- en: They chose a small car and have selected the number of doors
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们选择了一辆小车，并选择了车门数量
- en: They chose a medium car so didn't need to choose doors or gears
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们选择了一辆中型车，因此不需要选择车门或档位
- en: They chose a large car and have chosen their gears
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们选择了一辆大车，并选择了他们的档位
- en: 'The next step is to find the best car based on the user choices. To choose
    the best car, we need to have a selection of cars to sort from. We can create
    an object outside of the handler to store the data we need to sort the cars:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是根据用户选择找到最好的汽车。为了选择最好的汽车，我们需要有一个排序的汽车选择。我们可以在处理程序外部创建一个对象来存储我们需要的排序汽车的数据：
- en: '[PRE9]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'With this object containing all of the car options we want, we need to find
    the car that is best for the user. To do this, we can use the `Array.filter()`
    function. This function goes through each item in an array and applies a function
    to it. If the function returns true, the item is kept in the array, otherwise,
    it is removed:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个对象包含我们想要的全部汽车选项的情况下，我们需要找到最适合用户的汽车。为此，我们可以使用`Array.filter()`函数。这个函数会遍历数组中的每个项目并对其应用一个函数。如果函数返回true，则该项目保留在数组中，否则，它将被移除：
- en: '[PRE10]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: To find the best car for the user, this filter function checks that `car.size`
    and `car.cost` equal what the user selected, and then uses ternary expressions
    to check the gears and doors. If the user has selected a gear type or a number
    of doors, it checks whether the car information matches the user's choice, otherwise
    it returns `true`.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 为了找到最适合用户的汽车，这个过滤函数会检查`car.size`和`car.cost`是否等于用户选择的内容，然后使用三元表达式来检查档位和车门。如果用户选择了档位类型或车门数量，它会检查汽车信息是否与用户的选择匹配，否则返回`true`。
- en: 'When we run this function, we get back the car that matches the user''s choices.
    If the user has chosen a `small`, `luxury` car with `3` doors, then the `chosenCar`
    will equal `[{name: ''fiat500'', size:''small'', cost: ''luxury'', doors: 3, gears:
    ''manual''}]`.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '当我们运行这个函数时，我们会得到匹配用户选择的汽车。如果用户选择了一辆`small`、`luxury`的`3`门车，那么`chosenCar`将等于`[{name:
    ''fiat500'', size:''small'', cost: ''luxury'', doors: 3, gears: ''manual''}]`。'
- en: 'Before we get more details on the chosen car, we need to check that our function
    chose a car. This can be done by checking that our new `chosenCar` array has a
    length of `1`. If it doesn''t, there has been some sort of error and we need to
    let the user know. Add this code after our filter method:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们获取所选汽车更多详细信息之前，我们需要检查我们的函数是否选择了一辆汽车。这可以通过检查我们的新`chosenCar`数组长度为`1`来完成。如果不为`1`，则表示出现了某种错误，我们需要让用户知道。在过滤方法之后添加此代码：
- en: '[PRE11]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Amazon S3
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 亚马逊S3
- en: Now that we have the chosen car, we can get some more information on that car
    from an S3 bucket. S3 buckets allow us to store objects and access them from wherever
    we want.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经选择了车辆，我们可以从S3存储桶中获取更多关于该车辆的信息。S3存储桶允许我们在任何我们想要的地方存储对象并访问它们。
- en: To create an S3 bucket, search for S3 in the AWS console. On the S3 page, click
    the Create bucket button to start the creation process. Choose a name for your
    bucket, noting that the name has to be unique across all buckets on S3\. Adding
    your name or an alias onto the start or end of the bucket name can help make your
    bucket unique. For this example, we don't need to set up any other properties
    or permissions on the bucket, so we can just click on Next until we get to the
    end.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个S3存储桶，在AWS控制台中搜索S3。在S3页面，点击创建存储桶按钮开始创建过程。为你的存储桶选择一个名称，注意该名称必须在S3的所有存储桶中是唯一的。在存储桶名称的开头或结尾添加你的名字或别名可以帮助使你的存储桶独一无二。在这个例子中，我们不需要在存储桶上设置任何其他属性或权限，所以我们可以直接点击下一步，直到到达最后。
- en: With your new bucket created, we can start to create data that will be uploaded
    into it. Uploading data to an S3 bucket is really easy; click on the bucket that
    you want to upload into and click the Upload button. You can then either drag
    and drop your files in or click Add files to upload your files in a more traditional
    way. For this project, we don't need to set any of the permissions or properties
    for these files.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建好新的存储桶后，我们可以开始创建将要上传到其中的数据。上传数据到S3存储桶非常简单；点击你想要上传的存储桶，然后点击上传按钮。然后你可以拖放文件或点击添加文件以更传统的方式上传文件。对于这个项目，我们不需要为这些文件设置任何权限或属性。
- en: 'All of the data that we''re going to upload is available at [http://bit.ly/chatbot-ch3](http://bit.ly/chatbot-ch3)
    in the `car-data` folder. We''ll have a look at one example file to see what data
    we are going to access:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要上传的所有数据都可在[http://bit.ly/chatbot-ch3](http://bit.ly/chatbot-ch3)的`car-data`文件夹中找到。我们将查看一个示例文件，以了解我们将要访问哪些数据：
- en: '[PRE12]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: With this information, we can give the user a good summary of the car that our
    chatbot has suggested for them. This could be expanded, but providing too much
    data to the user may make the interaction too complicated.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些信息，我们可以为用户提供一个关于我们的聊天机器人为他们推荐的汽车的简要总结。这可以进一步扩展，但向用户提供过多的数据可能会使交互变得过于复杂。
- en: Accessing our S3 data
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问我们的S3数据
- en: Now that we have all of our data in our S3 bucket and have chosen a car based
    on the user's choices, we need to get the relevant data. To do this, we can use
    `aws-sdk` to interact with `S3` from our Lambda.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将所有数据存储在我们的S3存储桶中，并且根据用户的选择选择了一辆车，我们需要获取相关数据。为此，我们可以使用`aws-sdk`与我们的Lambda交互来访问`S3`。
- en: 'At the top of our Lambda, we need to require in *AWS* so that we can use the
    *S3* method. Add these two lines to the top of this Lambda:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的Lambda顶部，我们需要引入*AWS*以便我们可以使用*S3*方法。将这两行代码添加到Lambda的顶部：
- en: '[PRE13]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now that we have access to the S3 methods on AWS, we can get the JSON for our
    chosen car. At the end of our `whichCar` handler, add the following code:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经可以访问AWS上的S3方法，我们可以获取我们选择的车辆的JSON数据。在`whichCar`处理器的末尾，添加以下代码：
- en: '[PRE14]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The first part of this code snippet is choosing where and what data we are trying
    to access. Make sure that you put in your bucket name. The key is generated using
    a template string so that we get the file related to the car we chose for the
    user.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码片段的第一部分是选择我们要访问的数据的位置和内容。确保你输入你的存储桶名称。密钥是通过使用模板字符串生成的，这样我们就能获取到与用户选择的车辆相关的文件。
- en: We then return a promise that contains the `s3.getObject()` method, passing
    in our `params` and a `callback` function. The callback from the `.getObject()`
    method passes the `err` and `data` parameters. If there is an error, we will `reject`
    a function called `handleS3Error`. If it succeeds, we'll `resolve` the `handleS3Data`
    function. We'll create these functions later.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们返回一个包含`s3.getObject()`方法的promise，传递我们的`params`和一个`callback`函数。`.getObject()`方法的回调传递`err`和`data`参数。如果有错误，我们将`reject`一个名为`handleS3Error`的函数。如果成功，我们将`resolve`名为`handleS3Data`的函数。我们稍后会创建这些函数。
- en: Adding S3 permissions
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加S3权限
- en: Because we are now accessing data from S3, we also need to update the Execution
    role to include S3 read-only. In your AWS console, navigate to IAM which is where
    you control your users, roles, and policies.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们现在正在从S3访问数据，我们还需要更新执行角色以包括S3只读权限。在你的AWS控制台中，导航到IAM，这是你控制你的用户、角色和策略的地方。
- en: 'In the menu on the left, select Roles and you should see a list of your roles.
    If this is your first time using AWS, you''ll only have one role: *LambdaBasic*.
    When you select it, you are taken to a summary page where there is an Attach policy
    button. We need to attach *S3* permissions so we can click that button.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧菜单中选择“角色”，你应该会看到一个角色列表。如果你是第一次使用 AWS，你将只有一个角色：*LambdaBasic*。当你选择它时，你会进入一个摘要页面，其中有一个“附加策略”按钮。我们需要附加
    *S3* 权限，以便我们可以点击该按钮。
- en: 'This opens up a list of all of the policies that are available on your account.
    Amazon has made hundreds of default policies for almost every scenario. We''re
    going to search for `S3`. We should get at least four options, which include *Redshift*,
    *FullAccess*, *ReadOnly*, and *QuickSight*. As we''re only going to be getting
    data from S3, we can tick the AmazonS3ReadOnlyAccess tickbox and then the Attach
    policy button in the lower-right corner:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开一个列表，显示您账户上可用的所有策略。亚马逊为几乎所有场景都创建了数百个默认策略。我们将搜索 `S3`。我们应该至少得到四个选项，包括 *Redshift*、*FullAccess*、*ReadOnly*
    和 *QuickSight*。由于我们只从 S3 获取数据，我们可以勾选 AmazonS3ReadOnlyAccess 复选框，然后点击右下角的“附加策略”按钮：
- en: '![](img/dcdc7ba4-2613-4457-870a-ea47988e23e2.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dcdc7ba4-2613-4457-870a-ea47988e23e2.png)'
- en: Adding Amazon S3 permissions
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 添加 Amazon S3 权限
- en: Dealing with our data
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理我们的数据
- en: 'Having done the request to S3, we have received our data or an error. Either
    way, we need to deal with it and send a response to the user. We''ll create two
    new functions that deal with either the data or an error:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 完成对 S3 的请求后，我们收到了数据或错误。无论哪种情况，我们都需要处理它并向用户发送响应。我们将创建两个新函数来处理数据或错误：
- en: '[PRE15]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The error function tells the user that we couldn't find the best car for them,
    while the data function creates a short description of the car using the data.
    We need to parse the body of the data because the data comes down as a buffer.
    We need to convert the buffer to a format that we can use.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 错误函数会告诉用户我们找不到最适合他们的车，而数据函数会使用数据创建一个简短的车辆描述。我们需要解析数据的主体，因为数据以缓冲区形式下传。我们需要将缓冲区转换为我们可以使用的格式。
- en: Testing our Lambda
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试我们的 Lambda
- en: With the last skill, the Lambda was simple enough that we could get away with
    not testing it. This Lambda is more complicated, with multiple places where we
    could have an error, so we're going test it properly.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 使用最后一个技能，Lambda 简单到我们甚至可以不对其进行测试。这个 Lambda 更复杂，有多个可能出错的地方，所以我们将正确地对其进行测试。
- en: In the Lambda console, find your function and open it up. Once inside, click
    on the dropdown next to Test and choose Configure test events. Make sure that
    the Create new test event option is selected and we can use a template of Alexa
    Intent - GetNewFact.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Lambda 控制台中，找到你的函数并打开它。一旦进入，点击测试旁边的下拉菜单，选择配置测试事件。确保选择了“创建新测试事件”选项，我们可以使用 Alexa
    Intent - GetNewFact 模板。
- en: 'Most of the template can be left as default, but we need to change the slots
    and `intentName` (lines 20 and 21) as well as the application IDs (lines 10 and
    35). Start by changing `intentName` to equal the intent that we created (`whichCar`).
    Next, we can add the slots that we have available. For now, we can set all of
    them to *null* as that is what they will be when they haven''t been populated
    yet:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数模板可以保持默认设置，但我们需要更改槽位和 `intentName`（第 20 和 21 行）以及应用程序 ID（第 10 和 35 行）。首先，将
    `intentName` 更改为等于我们创建的意图（`whichCar`）。接下来，我们可以添加我们可用的槽位。目前，我们可以将它们都设置为 *null*，因为它们在尚未填充时就是这样：
- en: '[PRE16]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Using the ARN that you got from the Alexa Skill console Endpoint section, change
    the value for `applicationId` at line 10 and 40.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你在 Alexa 技能控制台端点部分获得的 ARN，更改第 10 和 40 行的 `applicationId` 值。
- en: Call this intent `whichCarEmpty` and click Create.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 将此意图命名为 `whichCarEmpty` 并点击创建。
- en: Before we run this test, we can think about what we expect to happen. Because
    there are no slots filled, we expect that it will fail at the `size` check, therefore
    we will get a response asking us what size of car we want. It is always good to
    work out what you expect to happen before running a test. It helps you build your
    code understanding, and if you don't get that response, it raises a red flag in
    your mind.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们运行此测试之前，我们可以考虑我们期望发生什么。因为没有槽位被填充，我们预计它将在 `size` 检查处失败，因此我们将得到一个询问我们想要什么尺寸的车的响应。在运行测试之前考虑你期望发生的事情总是好的。这有助于你构建代码理解，如果你没有得到那个响应，它会在你的脑海中拉响一个红灯。
- en: 'Now we can click Test and we should get Execution result: succeeded and a response
    with an output speech of "What size car do you want? Please say either small,
    medium or large".'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以点击测试，我们应该得到执行结果：成功，并带有输出语音"你想要什么尺寸的汽车？请说出小型、中型或大型"的响应。
- en: This is what we expected so that is great! If you didn't get this response,
    look at the error message and use that to figure out what may have gone wrong.
    There is a helpful section in the *Appendix* that can be used to debug common
    Lambda errors.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是我们预期的，所以太好了！如果你没有收到这个响应，请查看错误消息，并使用它来找出可能出了什么问题。*附录*中有一个有用的部分，可以用来调试常见的Lambda错误。
- en: 'With this test working, we can create another test that has some filled slots.
    Click the testing dropdown and select Configure test events again. Make sure that
    Create new test event is selected, but this time choose whichCarEmpty as the template.
    This means that we know the application IDs are correct and the only things we
    need to change are the slots. Change the slots to the following code:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个测试工作之后，我们可以创建另一个包含一些填充槽位的测试。点击测试下拉菜单，再次选择配置测试事件。确保选择创建新测试事件，但这次选择whichCarEmpty作为模板。这意味着我们知道应用程序ID是正确的，我们唯一需要更改的是槽位。将槽位更改为以下代码：
- en: '[PRE17]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Save this test as whichCarLargeLuxuryAuto. When you run this test, you should
    get a successful response of the following:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 将此测试保存为whichCarLargeLuxuryAuto。当你运行这个测试时，你应该得到以下成功的响应：
- en: '"I think that a Mercedes-Benz would be a good car for you. They''re available
    from 35,150 pounds, get 32-66 mpg and have a 425 litre boot."'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '"我认为奔驰对你来说是一辆好车。它们的价格从35,150英镑起，油耗为32-66 mpg，后备箱容量为425升。"'
- en: You can create tests for each of the possible combinations of results, but since
    we know that our Lambda is responding and is accessing S3, we know that all of
    the code is working.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以为每种可能的结果组合创建测试，但由于我们知道我们的Lambda正在响应并访问S3，我们知道所有代码都在正常工作。
- en: Finishing the Alexa Skills Kit Configuration
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成Alexa技能套件配置
- en: To finish the configuration of our skill, we need to get the ARN of our Lambda.
    Copy that from the top of the Lambda page or from the result of your build script
    and go to the Alexa Skills Kit console. Paste it into Default Region and save
    the endpoint. That is all we need to do before we can start testing our skill.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成我们技能的配置，我们需要获取我们的Lambda的ARN。从Lambda页面的顶部或从你的构建脚本的结果中复制它，然后转到Alexa技能套件控制台。将其粘贴到默认区域并保存端点。在我们开始测试我们的技能之前，我们只需要做这些。
- en: Testing
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试
- en: 'Now we can try out our new skill. Here you can see a conversation that I had
    with my car helper bot:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以尝试我们的新技能。在这里，你可以看到我与我的汽车助手机器人之间的对话：
- en: '![](img/853d679c-ea8e-4da5-9472-0aa5143a13ad.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/853d679c-ea8e-4da5-9472-0aa5143a13ad.png)'
- en: Testing the car helper skill
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 测试汽车助手技能
- en: This skill isn't perfect – it doesn't respond to every utterance that you might
    say and there is a lot more the skill could do. The good thing is you now know
    everything you need to fix all of those issues.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这个技能并不完美——它不会对你说出的每一个话语都做出响应，而且这个技能还能做更多的事情。好事是，你现在知道你需要的一切来修复所有这些问题。
- en: Launching your skill
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动你的技能
- en: To launch your skill to the Alexa Skill Store, we need to move to the next tab.
    This is where you will set up the information that will be present on the Alexa
    Skill Store. You need to give your skill a unique name, short and long descriptions,
    and example utterances. Then you get to upload an icon and select the category
    and keywords for your skill. The category and keywords should be carefully considered
    as this is probably how users are going to find your skills.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 要将你的技能发布到Alexa技能商店，我们需要切换到下一个标签页。这是你将设置将在Alexa技能商店中显示的信息的地方。你需要给你的技能起一个独特的名字，简短和长描述，以及示例话语。然后你可以上传一个图标，并选择你的技能的类别和关键词。类别和关键词应该仔细考虑，因为这可能是用户找到你的技能的方式。
- en: 'The last part on this page is the *privacy policy* and *terms of use* URLs.
    You need to have these if you are going to have a skill in the skills store. There
    are lots of examples out there and they shouldn''t be very complicated for skills
    that don''t store or even ask for user information. Any app that does use and
    store user information will need a more detailed privacy policy and it may be
    worth contacting a lawyer:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 本页的最后一部分是*隐私政策*和*使用条款*的URL。如果你想在技能商店中拥有一个技能，你需要这些。外面有很多例子，对于不存储或甚至不要求用户提供信息的技能来说，它们不应该很复杂。任何使用并存储用户信息的应用程序都需要一个更详细的隐私政策，并且可能值得联系律师：
- en: '![](img/5a8b4bd8-173c-447d-8d55-216130f0d2df.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5a8b4bd8-173c-447d-8d55-216130f0d2df.png)'
- en: Launch setup
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 启动设置
- en: The next page asks you a number of privacy and compliance questions about your
    skill. Answer these honestly and then provide some information to the person who
    will be testing your skill before it gets deployed.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 下一页会问你关于你的技能的许多隐私和合规性问题。诚实地回答这些问题，然后在部署之前向将测试你的技能的人提供一些信息。
- en: Next, we have to choose the availability of our skill. We can use this to only
    allow certain organizations to access the skill. This can be useful if you've
    created a specialized skill for a company and don't want other people using it.
    You can also select the countries where the skill will be available. You could
    limit it to one or two countries or let everyone use it.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须选择我们技能的可用性。我们可以使用它来仅允许某些组织访问该技能。如果你为一家公司创建了一个专门的技能并且不希望其他人使用它，这可能会很有用。你还可以选择技能可用的国家。你可以将其限制在一两个国家，或者让每个人都可以使用。
- en: The last page is a review page where it tells you whether there is anything
    that your submission is missing. When you fix everything, you can click Submit
    for review. While the skill is in testing, you won't be able to edit the configuration
    of the skill. You can still edit your Lambdas, but doing so can cause your skill
    to be rejected.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一页是一个审阅页面，它会告诉你你的提交是否缺少任何内容。当你修复了一切之后，你可以点击提交以供审查。在技能处于测试状态时，你将无法编辑技能的配置。你仍然可以编辑你的
    Lambda，但这样做可能会导致你的技能被拒绝。
- en: Once it's been tested and approved, you'll have a live Alexa Skill!
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦经过测试并获得批准，你将拥有一个实时的 Alexa 技能！
- en: Summary
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter showed us how to do a lot of new things. We started by creating
    our first Alexa Skill using Alexa Skills Kit. This involved learning about and
    creating intents, slots, and utterances. With the configuration completed, we
    created a Lambda to handle the request using Alexa-SDK. This Lambda is where we
    defined the response that would be sent to the user. Finally, we built and tested
    our new Alexa Skill using the built-in testing tools.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向我们展示了如何做很多事情。我们首先使用 Alexa Skills Kit 创建了我们第一个 Alexa 技能。这包括了解和创建意图、槽位和语音。配置完成后，我们使用
    Alexa-SDK 创建了一个 Lambda 来处理请求。这个 Lambda 是我们定义将发送给用户的响应的地方。最后，我们使用内置的测试工具构建和测试了我们的新
    Alexa 技能。
- en: Having made a basic first skill, we started to create a more useful second skill.
    We used a custom slot type and applied it to slots in our intents. We then used
    Amazon's S3 service to store the data we needed before using AWS SDK to easily
    get the data and use it in our Lambda.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建了一个基本的第一个技能之后，我们开始创建一个更有用的第二个技能。我们使用了一个自定义槽位类型并将其应用于意图中的槽位。然后我们使用亚马逊的 S3
    服务来存储我们需要的在 AWS SDK 中使用之前的数据，以便轻松获取数据并在我们的 Lambda 中使用它。
- en: Using the skills learned in this chapter, you can go build a huge range of powerful
    skills for Alexa.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 使用本章学到的技能，你可以为 Alexa 构建一大系列强大的技能。
- en: In the next chapter we'll learn to access APIs, allowing us to create much more
    powerful skills.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何访问 API，这将使我们能够创建更强大的技能。
- en: Questions
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the tool we use in Lambdas for dealing with Alexa requests?
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在 Lambda 中用于处理 Alexa 请求的工具是什么？
- en: What three things do we need to do to connect a Lambda to an Alexa Skill?
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要做哪三件事才能将 Lambda 连接到 Alexa 技能？
- en: What is the method we use to get information from our S3 bucket?
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从我们的 S3 存储桶获取信息的方法是什么？
- en: What do we have to do to the body response from S3 and why?
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要对 S3 的响应体进行什么操作，以及为什么？
- en: How do we create a Lambda test?
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何创建一个 Lambda 测试？
- en: Further reading
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'If you want to try out different types of response, have a look through the
    Alexa SDK response builder docs: [https://ask-sdk-for-nodejs.readthedocs.io/en/latest/Building-Response.html](https://ask-sdk-for-nodejs.readthedocs.io/en/latest/Building-Response.html).'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想尝试不同的响应类型，请查阅 Alexa SDK 响应构建器文档：[https://ask-sdk-for-nodejs.readthedocs.io/en/latest/Building-Response.html](https://ask-sdk-for-nodejs.readthedocs.io/en/latest/Building-Response.html)。
- en: 'We have only used S3 to get data that we manually stored; there are other methods
    that allow more S3 functionality: [https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html](https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html).'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只使用了 S3 来获取我们手动存储的数据；还有其他方法可以提供更多 S3 功能：[https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html](https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html)。
