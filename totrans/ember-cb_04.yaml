- en: Chapter 4. Ember Router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining an application route
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a route model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling dynamic segments inside routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining routes with templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using redirection with routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with asynchronous routing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading and error handling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using query parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The router in Ember is responsible for changing the state of the application
    when a user performs an action. This can be anything from the user changing the
    URL to hitting the back button in the application. Regardless of what action is
    performed, the route handler is responsible. It takes the current URL and maps
    it to the correct route so that it can be displayed to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Route handlers take care of rendering templates, loading up the model, and redirecting
    and transitioning from one route to another. They can also handle actions that
    occur when the model changes.
  prefs: []
  type: TYPE_NORMAL
- en: Defining an application route
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When loading your application, the router looks at the URL and matches it to
    the route. We'll go over some basics on how this works.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The route map is used to define the URL mappings. Let's take a look at adding
    a new route using `this.route`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new application, open the `router.js` file in the `app` folder. To begin,
    we''ll create a new route called `about`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`Router.map` in the preceding code handles the routing of the program. The
    `this.route` creates the `about` route. By default, the name of the route will
    be the same as the path to it. For example, the `about` route path would be located
    at `/about`. We can specifically set the path using `path`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Instead of having all requests go to `/about`, let''s change the path so that
    they go to `/me`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The new route `about` will be mapped to the URL `/aboutme now`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To test this, we can create a new template and add a `link-to` helper to our
    application route. First, we''ll create the template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The Ember CLI generated will create the template for us. This will create the
    `about.hbs` file in the `app/templates` folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the `link-to` helper to the `application.hbs` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The code creates a new link to the `about` template in the main application
    template.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a new message to the `about` template that we just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This text will be displayed only when we navigate to this new route.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We can now run the server and check the output. Run `ember server` and click
    on the **about template** link. The about route will load and will look as follows:![How
    to do it...](img/00008.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Application route**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When your app first boots up, the application route is loaded. Just like any
    other route, the application template will load by default. The application route
    is given for free and does not need to be added to the `app/router.js` file. The
    `{{outlet}}` will be used to render all other routes. It's a good idea to put
    the header, footer, and other decorative content here.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Working with nested routes in your application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At times, you may need multiple levels of routes. You might need templates within
    other templates. This can be accomplished using nested routes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say that we had `about` with a nested `location` and `job` route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The router `map` has the highest-level route called `about`. Underneath this
    route is the `location` and `job`. Create two templates needed for `location`
    and `job`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will create the correct `location.hbs` and `job.hbs` files in the `app/templates/about`
    folder as well as the `about.hbs` file in the `app/templates` folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For us to be able to access nested routes, we''ll need to edit `about.hbs`
    and add `outlet` for the `location` and `job` nested routes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note how the `link-to` helpers route to `about.location`. You can link nested
    routes with the dot notation. The `location` and `job` nested routes will render
    in `{{outlet}}`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Just to make things interesting, we''ll update the `job` and `location` route
    templates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we''ll add a `link-to` helper to the application route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `link-to` helper will route to about. This will be rendered in `outlet`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After running `ember server`, you'll have access to click on the links and go
    between the routes. It should look similar to the following image:![Working with
    nested routes in your application](img/00009.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we click on the **job** link, the URL changes to `http://localhost:4200/about/job`.
    The `{{outlet}}` in the `about` template will then display the `job` template
    information.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Adding a wildcard
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use wildcards in your routes. This allows you to create URLs that match
    multiple segments. Let's create a wildcard for any URL that isn't found.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new project, update the `router.js` file in the `app` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `/*wildcard` path will catch all the undefined routes and route them to
    `page-not-found`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a new `page-not-found` template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This route will render in the `application.hbs` outlet whenever a user navigates
    to a URL that matches `/*` and no existing routes match.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Adding dynamic segments to our about application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One important responsibility of the route is to load a model. In this example,
    we'll create a simple dynamic segment in the router that lists multiple jobs for
    the about route.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new project, edit the `router.js` file and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: View the output, and we can see that the router map shows an `about` route and
    a nested `location` route below it. The `location` route is a dynamic segment
    that starts with `:` and is followed by an identifier. The `:location_id` identifier
    will retrieve the model information from the `location` model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For example, if a user navigates to `/about/5`, the route will set `location_id`
    of `5` so that the `location` model with the ID of `5` is loaded. We'll be going
    over the `about` routes in more detail in the next section.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Index routes**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: At every level of nesting, including the application layer, Ember.js automatically
    creates a route called **index**. You don't need to map this in `router.js`. Similar
    to the application route, it's already there. The index route will automatically
    be rendered in the outlet of its parent's template. For example, if you created
    an `index.hbs` file in the `app/templates` folder, it would automatically be rendered
    in the `application.hbs` outlet. Keep this in mind when you create routes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Routes in Ember.js are defined in the `app/router.js` file. The router map is
    used to define each route, and it tells the Ember application what path should
    be used in the URL. By convention, each route has a corresponding template with
    the same name. Wildcards and dynamic segments can make routes more versatile so
    that they can load specific data.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a route model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Occasionally, you'll need to retrieve data from a model for a template. The
    route is responsible for loading the appropriate model. This recipe will go over
    how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a new application, open the `router.js` file and add a new route. We''ll
    call this route `students`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `students` route will retrieve data from the `students` route handler.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Generate the `students` route. This will create the `students` route handler
    and template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `students.js` file, add a new model that returns a JavaScript object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `model` hook normally returns an Ember Data record. However, it can also
    return any promise objects, plain JavaScript objects, or arrays. Ember will wait
    until the data is loaded or the promise is resolved before rending the template.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For simplicity in our example, we returned an array.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a simple `each` loop in the template to display the data from `model`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `each` loop will display each `number` in the array. The model data is returned
    from the route that we created earlier.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run `ember server` and load the route at `http://localhost:4200/students`. It
    will look like the following image after it is rendered:![How to do it...](img/00010.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A very important job of a route is loading the model. Models are objects that
    represent data that your application may present to the user. The route can return
    an Ember Data record, array, or object.
  prefs: []
  type: TYPE_NORMAL
- en: Handling dynamic segments inside routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using dynamic segments and dynamic models is an important aspect of routes.
    The following recipe will go over how this can be accomplished.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we begin our recipes, we'll need to set up a plugin called **Ember CLI
    Mirage**. Ember plugins, also known as **add-ons**, make it easy to share common
    code between applications. The Ember CLI Mirage plugin makes it easy to create
    a mock server so that we can develop, test, and prototype our data. We won't cover
    too much of this add-on in this chapter. If you'd like more information, you can
    download it at [https://github.com/samselikoff/ember-cli-mirage](https://github.com/samselikoff/ember-cli-mirage).
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we'll use the **Ember Data's RESTAdapter**, not the new **JSON
    API** adapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new project, run this installation command in the `application` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will install version `0.1.11` of Ember CLI Mirage, Bower, and `npm` packages
    in the application. We'll be using this version for all the examples in the book.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `config.js` file in the `app/mirage` folder. Add a couple of new routes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first fake route, `/students`, will return all the student data from our
    Mirage in the memory database. The second fake route, `/students/:id`, will return
    only the data that matches the ID in the URL. This will be used later when we
    try out dynamic segments with our models.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a new set of fixture data for `students`. Create a new file called `students.js`
    in the `app/mirage/fixtures` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This file name, `students.js`, matches the route and will be used to load the
    data in Mirages in the memory database. Be aware that Mirage also supports factories.
    Factories is an immensely powerful feature that makes it extremely easy to load
    lots of fake data. The factories can be used in test cases as well.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For simplicity's sake, we'll just use fixture data.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Load a new scenario for our application. Update the `app/mirage/scenarios/default.js`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `default.js` file in the `scenarios` folder is used to seed the database
    in development. The `server.loadFixtures()` method loads all the fixture data
    so that it can be accessible to the `/students` route.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Data in our model may never change. On the other hand, that data might change
    many times depending on interactions with the user. This recipe will cover how
    to use dynamic segments with your routes and return data from the model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by creating a new resource called `students`. Then generate an adapter
    named `application` and finally, a route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will generate the routes, adapter, and template files needed for this recipe.
    Keep in mind that by generating the `application` route, you will be prompted
    to overwrite the `application.hbs` file. You can select *n*, for no, when this
    occurs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `router.js` file with the new dynamic segment route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This new route has a path of `/students/:student_id`. This route will extract
    `:student_id` from the URL and pass it to the model hook as the first argument.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For example, let's say that we have a list of `students` and we wanted to be
    able to access each student's data by visiting `/students/1` and `/students/2`.
    Each URL would then return the data for that student.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `application.js` file in the `app/adapters` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will create a new `RESTAdapter` that Ember will use for this example. This
    will be covered more in the models chapter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `students.js` file in the `app/models` folder. This file is our model
    and will be used to retrieve data from the Mirage mock server that we created
    earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This creates a new model with two attributes, `name` and `age`. The model file
    defines what the data will look like. We'll be covering this more in the *Chapter
    7*, *Ember Models and Ember Data*. For now, we will be retrieving this data from
    the mock server.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `students.js` file in the `app/routes` folder. Add the Ember Data
    `findRecord` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `model` hook here has one argument, `param`. The `param` argument is `student_id`
    that is passed from the route's URL. Ember Data has a `findRecord` method that
    takes two parameters. The first parameter is the name of the model and the second
    is the ID.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This model will return the student record with the ID passed to it. We can now
    use this in our template.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `students.hbs` file in the `app/templates` folder. Add the model information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `{{model.name}}` and `{{model.age}}` properties will retrieve the model
    information passed to the template from the route.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: At this point, we should be able to run `ember server` and see data when we
    access `http://localhost:4200/students/1`. To make things a little easier, we'll
    go ahead and create a new route handler for the main application route.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `application.js` file in the `app/routes` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Multiple models**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'At times, you may want to use multiple models in one route. This can be accomplished
    using `Ember.RSVP.hash`. The hash takes parameters that return promises. When
    all the parameters are resolved, then `Ember.RSVP.hash` is resolved. In the model,
    it may look like this: return `Ember.RSVP.hash({ students: this.store.findAll(''student'')`,
    books: `this.store.findAll(''book'')})`. Each model is separated by a comma.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This will allow our application to retrieve all the records from our student
    model.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `application.hbs` file in the `app/templates` folder. We''ll add an
    `each` iterator that will link to each student''s information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this template, we are iterating through all the records in the `student`
    model. We are using each individual student's name as a link to our dynamic segment.
    The `student.id` argument is passed to the `link-to` helper.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After starting the server, you'll see a list of the students and a link to each
    student's information. After clicking on the student's name, the `student.hbs`
    template will load with the student's information. It will look like the following
    image:![How to do it...](img/00011.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dynamic models allow data to change depending on the user action. This data
    will depend on the dynamic segment setup in the `router.js` file. The segment
    is defined in the `router` file and passed from the URL to the model hook as its
    first argument. Ember Data uses the `findRecord` method to find the correct record
    and return it to the template so that it's available for use.
  prefs: []
  type: TYPE_NORMAL
- en: Defining routes with templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another job of the route handler is rendering the appropriate template. Here
    is a recipe that goes over this.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we'll create a few nested routes and check where they get rendered.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new project, create a new `students` and `schools` route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will create the nested `students` and `schools` route.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s take a look at the `router.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The generated command already created the routes that we need. The `schools`
    route has a nested route called `students`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: By convention, the route will render the template with the same name. Therefore,
    the `schools` route will render to the `schools.hbs` file while the `students`
    route will be rendered to the `schools/students.hbs` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `schools.hbs` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `{{outlet}}` will render the `students.hbs` file in the `schools` folder.
    Every template will be rendered to `{{outlet}}` of its parent route's template.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `students.hbs` file in the `app/templates/schools` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run `ember server` and you should see this result:![How to do it...](img/00012.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By visiting `http://localhost:4200/schools/students`, both the templates are
    displayed. The application `{{outlet}}` renders the school template. The school
    template's `{{outlet}}` renders the students template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If required, you can change where the route renders. Instead of rendering in
    the template with the same name, you can set it to anything using the `renderTemplate()`
    method in the route handler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The school route will now render to the `anotherSchool` template.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Routes, by default, will render a template based on the same name as the route.
    Ember does this by convention. On the other hand, using `renderTemplate` in the
    route handler can change this default. This is all done under the hood by the
    Ember API.
  prefs: []
  type: TYPE_NORMAL
- en: Using redirection with routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A very important feature of routes is redirection. This recipe will go over
    using the `transitionTo` method.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our route handler, we have special hooks called `beforeModel` and `afterModel`.
    We can use these hooks to perform actions before the model is loaded or after
    the model is loaded. The `transitionTo` method can be used to redirect the application
    to different routes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new application, create a new `students` route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will generate the `students` route and template files.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For the sake of simplicity, we''ll have the route handler return a simple array
    of numbers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the `routes/students.js` file again. This time, we''ll add a before hook
    and a transition to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `transitionTo` method will redirect from one route to another. This option
    will redirect before the model is loaded and transition to the teacher's route.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can also transition after the model is loaded using the `afterModel()` hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will wait until the model is fully loaded before transitioning to the new
    route. You can check the loaded route before transitioning, if needed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Redirect**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When transitioning to nested routes, it's a good idea to use the `redirect`
    method instead of the `afterModel` or `beforeModel` hooks. This will prevent `beforeModel`,
    `afterModel`, and model from firing again after redirecting. Keep this in mind
    when dealing with `transitionTo` in nested routes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `afterModel` and `beforeModel` hooks occur after or before a model is loaded.
    The `transitionTo` method is used to redirect from one route to another. It can
    be used in the route handler or anywhere else in the application.
  prefs: []
  type: TYPE_NORMAL
- en: Working with asynchronous routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A more advanced feature of the router is dealing with asynchronous logic. The
    following recipes explain this concept using promises.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the route, Ember makes heavy use of promises. Promises are objects that represent
    an eventual value. We can use promises in our model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new router for the application route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If prompted to overwrite the template, type `Y`. This will generate the router
    file for the default application route.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a new model to the `application.js` file in the `app/router` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the router, we created a new model. This model will be accessible to our
    application template. In this model, we are returning `Ember.RSVP.Promise`, which
    is Ember's way of dealing with a promise. It can either resolve or reject. For
    the sake of simplicity, we are having it return a message.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `setupController` hook to set up the controller for the current route. As
    we are overwriting `setupController`, it also overwrites its default behavior.
    Therefore, we must call `super` on it. Otherwise it may effect how it normally
    behaves. We can use `console.log` to output the model message to the console.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Asynchronous routing**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: During a transition, the model hook is fired in the router. If, during this
    transition, the model is returning an array, it will return immediately. On the
    other hand, if the model is returning a promise, it must wait for this promise
    to fulfill or reject. The router will consider any object with a `then` method
    defined on it to be a promise. After the promise fulfills, the transition will
    continue from where it left off. It's possible to chain multiple promises, so
    the next promise or model must be fulfilled before the transition will be complete.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s edit the application router one more time and set it to reject:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, the model returns a rejected promise. As described in
    the *Loading and error handling* recipe, there is something called an `error`
    event. This will fire only when an error occurs in the model. We can then log
    the error to the console.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can test this by editing the `application.hbs` file in the `app/templates`
    folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the promise doesn't reject, the model message will be displayed. If the model
    rejects, then nothing will be displayed; the route halts the loading and the console
    will show the message, **error**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Error events bubble upwards. In this case, we are already on the application
    route and it can't bubble up any further. If we were in another route, we could
    have returned true and that error would have bubbled up to the application error
    event.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `application.js` file again in the `app/router` folder. Let''s deal
    with the rejection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, the `RSVP` promise rejects. However, we then return the
    message anyway, by chaining another promise at the end. This way the transition
    won't halt and will continue.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run `ember server` and open a web page. You should see this message:![How to
    do it...](img/00013.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This message shows **Returned from rejection** because we handled the promise
    reject callback and returned a message anyway.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Promises are a way for Ember to handle asynchronous logic. A promise is an object
    that represents an eventual value. The promise can either reject or fullfill,
    as in resolve a value. To retrieve the value or handle when it rejects, you can
    use the then method, which can accept two different callbacks. The first is for
    fulfillment and the second is for rejection. For example, you might use the rejection
    to retry or return different data.
  prefs: []
  type: TYPE_NORMAL
- en: Loading and error handling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When routes are loading or there's an error, we have the ability to let the
    user know what's happening. This recipe will go over the basics on how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a new project, create a new `students` route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `ember generate` command will create all the necessary files for the `students`
    route.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `students.js` file in the `app/routes` folder. Add a new model to
    return:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In our route file, we are returning an Ember `RSVP` promise. This promise resolves
    to a simple array that will be returned. `Ember.run.later` is a built-in Ember
    method that is a part of the Ember run loop. It acts like the JavaScript's `setTimeout()`.
    In this case, we are setting the timeout for 2,000 milliseconds so that we can
    simulate what might occur if the model was slow to load. After two seconds pass,
    the resolve will return with the array.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a loading substate template in the `app/templates` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This substate will be loaded while the students route is loading. A loading
    substate is created by adding a template with the name of the route and a dash
    loading at the end. For example, for the students route in our example, we called
    the `students-loading.hbs` substate. The application loading the substate would
    be `application-loading.hbs`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As an alternative to substates, we can use a loading event in the route. If
    the `beforeModel`, `model`, and `afterModel` hooks don''t resolve immediately,
    the loading event will be fired. Add a new loading action that displays an alert
    box while the model loads and transitions to the application route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The alert box will fire while the route is loading.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Navigate to `http://localhost:4200/students` and you'll see the alert box while
    the model is loading.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating an error substate
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Error substates occur whenever an error is encountered. It's very similar to
    the loading substate.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new application, create a `teachers` route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will create all the necessary files for the `teachers` route.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `teachers.js` file in the `app/routes` folder. Add a new `Ember.RSVP.Promise`
    with a reject:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this example, we return a new `Ember.RSVP.Promise` that will reject. This
    will cause an error to occur.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a new `teachers-error.hbs` file in the `app/templates` folder. This
    will be displayed when an error occurs in the `teachers` route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Error substates, like loading substates, must be named after the route with
    a dash loading at the end. The template will be displayed during an error and
    doesn't need any other logic to occur.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Alternatively, you can also use the error event in the route to display an
    error and redirect to a different route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using the error event is just another way to handle errors. We could certainly
    have created an error route to transition to.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Ember route has built-in methods and events to handle errors and loading.
    When loading information, the model hook is waiting for the query to get completed.
    During this time, a template with the name dash loading at the end will be transitioned
    to immediately and synchronously. The URL will not be effected. After the query
    completes, the loading route will be exited and the original route will continue.
  prefs: []
  type: TYPE_NORMAL
- en: When dealing with errors, the error template will be loaded. Once again, the
    URL will not change to the error route. The error will be passed to the error
    state as it's model.
  prefs: []
  type: TYPE_NORMAL
- en: Using query parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Query parameters allow you to use the URL for the application state. In these
    recipes, we'll use query parameters in several different ways to show how it works.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Query parameters are optional key-value pairs. They will appear to the right
    of ? in a URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new project, generate a new `application` controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `application` controller will be generated in the `app/controllers` folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the application controller with a new `queryParams` for `student`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will set up the binding between the `student` query parameter in the URL
    and the `student` property in the controller. If either one changes, the other
    will change as well.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If the `student` property was set to anything other than null, then the `student`
    property will have a default value. This is important to remember because query
    parameter values are cast to the same datatype as the default value. In other
    words, if the student property was defaulted to the number *1* and you changed
    the URL to `/?student=2`, the property would be set to the number `2`, not the
    string `"2"`. Additionally, remember that default values will not be serialized
    in the URL.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `application.hbs` file in the `app/templates` folder. We''ll add
    the `student` property to test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is a very simple template that just displays the `student` information
    from the controller.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start Ember server and try changing the URL. Navigate to `http://localhost:4200?students=Erik`.
    The template will be updated in order to display the new student information:![How
    to do it...](img/00014.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Everything to the right of the question mark ? in the URL can be used in the
    query parameter. Each parameter is separated by an ampersand. In this case, the
    student property is set to Erik. This will be updated in the template.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a link-to helper with a query parameter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's important to realize that we can pass query parameters using the `link-to`
    helper.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new project, create a new `application.js` controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will generate the `application` controller that we can use for our query
    parameter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the application controller and add a new query parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this example, we created a simple query parameter called `student`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `application.hbs` file in the `app/templates` folder. Add the `student`
    property and new `link-to` helper with a query parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can add a query parameter to `link-to` by surrounding it with parentheses
    and using the `query-params` sub-expression helper. After the sub-expression comes
    the key-value pair. In this case, we have a `student` key.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start Ember server and click on the **Jane Query** link. The following page
    should appear:![Adding a link-to helper with a query parameter](img/00015.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Using TransitionTo with query parameters**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Query parameters can be used when transitioning routes with the `transitionTo`
    method. You can add the query parameter as the final argument with the object
    key, `queryParmams`. For example, if you need to transition to the application
    route and you need to pass the query parameter for student, it might look like
    this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`this.transitionTo(''application'', { queryParams: { student: ''Erik'' }});`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Resetting a controller's query parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, query parameters are sticky. In other words, they are preserved
    when you move in and out of the route. They will also preserve the model loaded
    in the route.
  prefs: []
  type: TYPE_NORMAL
- en: You can override this behavior in a couple of ways. One is to pass the default
    query parameter to the `link-to` helper or use `transitionTo`. The other way is
    to use the `Route.resetController` hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new project and generate a new route called `route1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will create a new route and controller for `route1`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `route1.js` file in the `app/controllers` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Just like our previous example, we are using a simple query parameter called
    `student`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `route1.js` file in the `app/routes` folder. Add a new `resetController`
    hook to the route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this route, we are using the `resetController` hook. This will fire whenever
    someone exits or transitions from the route. As before, we must call super so
    that we don't prevent the default behavior. The `isExiting` argument will be false
    only if the route's model is changing, otherwise it will fire.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `controller.set` method is a way in which we can access the student property.
    We'll set it to null so that when we move away from route1, it will not be preserved.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `application.hbs` file in the `app/templates` folder. Add a `link-to`
    helper to the new `route1` route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This template is very simple. All we are doing is creating a link to the new
    `route1`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `route1.hbs` file in the `app/templates` folder. Add the `student`
    property and a link back to the main `application` route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This template displays the `student` property that we can set via query parameters.
    It then has a link back to the main `application` route.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run `ember server` and load the application. Enter the URL, `http://localhost:4200/route1?student=Erik`.
    This will display `route1` with the query parameter for student. If you click
    on the app link, it will bring you back to the main application. If you click
    on the **Route 1** link again, it will not preserve the query parameter and will
    be reset. It will look like the following image:![Resetting a controller's query
    parameters](img/00016.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Query parameters are key-value pairs that appear to the right of ? in the URL
    of the application. They help define an additional application state by serializing
    data in the URL. They are set in the route-driven controllers. We can use `transitionTo`
    and `link-to` helpers to navigate to them easily.
  prefs: []
  type: TYPE_NORMAL
