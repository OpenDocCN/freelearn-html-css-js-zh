- en: Chapter 2. Jumping into Flexbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Alright, now that we have finished setting up all the Bootstrap build tools,
    let's jump into an actual great new feature of Bootstrap 4\. The latest version
    of the framework comes with CSS Flexbox support. The goal of the Flexbox layout
    module is to create a more effective way of designing a layout for a website or
    web application. The grid of boxes is aligned in a way that distributes them across
    their container even if their size is unknown. This is where the "Flex" in Flexbox
    comes from.
  prefs: []
  type: TYPE_NORMAL
- en: The motivation for a flexible box arose from a web design for mobiles. A way
    to have a section grow or shrink to best fill the available space was needed when
    building responsive web applications or websites. Flexbox is the opposite of block
    layouts that are either vertically or horizontally driven. It's important to note
    that Flexbox is generally best suited for use when designing web applications.
    The traditional grid method still works best for larger websites.
  prefs: []
  type: TYPE_NORMAL
- en: In our blog project, we're going to use Flexbox to create a homepage. There
    will be several rows of blocks, each being a post. I'll show you a few ways to
    lay the blocks out and different ways you can customize the contents of each block,
    all using the new Flexbox layout in Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Flexbox basics and terminology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we go too far, we should define a few Flexbox basics and some terminology
    that I'll use throughout the chapter. Every Flexbox layout is dependent on an
    outer container. As we move through the chapter, I'll refer to this container
    as the **parent**. Within the parent container there will always be a collection
    of boxes or blocks. I'll refer to these boxes as **children** or **child** elements
    of the parent. Why don't we start by talking a little bit more about why you would
    want to use Flexbox? The main purpose of Flexbox is to allow for the dynamic resizing
    of child boxes within their parent container.
  prefs: []
  type: TYPE_NORMAL
- en: 'This works for the resizing of both width and height properties on-the-fly.
    Many designers and developers prefer this technique as it allows for easier layouts
    with less code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flexbox basics and terminology](img/00004.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Ordering your Flexbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Flexbox is a really powerful module as it comes with several properties that
    you can customize. Let''s quickly go over some more basics before we fully take
    the plunge and use Flexbox in Bootstrap. Let''s start by talking about the order
    of child boxes. By default, they will appear in the order that you insert them
    in the HTML file. Consider the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'A proper CSS will produce a layout that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Ordering your Flexbox](img/00005.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s the CSS to produce this layout if you are following along at home:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now using an `order` property we can reorder the children using some CSS. Let''s
    put the third box at the beginning. If you are reordering some blocks, you need
    to define the position for each one; you can''t simply enter the value for a single
    block. Add the following CSS to your style sheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'I''m using the `nth-of-type` pseudo selector to target each of the three boxes.
    I''ve then used the `order` property to set the third box to the first position.
    I''ve also adjusted the other two boxes to move them over one space. Save the
    file and your boxes should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Ordering your Flexbox](img/00006.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the third box has moved to the first position. It's as easy
    as that to rearrange blocks on boxes on a page. I think you'll likely see how
    this could be useful for coding up a web application dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Stretching your child sections to fit the parent container
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another important Flexbox feature is the ability to stretch the width of the
    child boxes to fit the full-width of the containing parent. If you look at the
    preceding CSS you''ll notice a `flex-grow` property on the `.child` class. The
    property is set to 1 which means that the child boxes will stretch to equally
    fill their parent. You could also do something where one box is set to a different
    value, using the `nth-of-type` selector, and then it would be wider than the others.
    Here''s the code to create equal-width columns as that is what you''ll likely
    do in most cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Changing the direction of the boxes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default in Flexbox, the child boxes will be in a row going left to right.
    If you like, you can change the direction using the `flex-direction` property.
    Let''s try out a few different directions. First let''s review our base HTML code
    again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the base CSS we wrote a little earlier. However, this time we''ll add
    the `flex-direction` property (with a value of `row-reverse`)to the `.parent`
    class. This will reverse the order of the boxes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If you save the file and view it in a browser it should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the direction of the boxes](img/00007.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'What if we wanted to order the boxes vertically so they were stacked on top
    of each other in descending order? We can do that by changing the `flex-direction`
    property to `column`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'That configuration will produce a grid that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the direction of the boxes](img/00008.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally there is one more direction we can try. Let''s do the same vertically
    stacked grid but this time we''ll reverse it. We do that by switching the `flex-direction`
    property to `column-reverse`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'That will produce a grid that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the direction of the boxes](img/00009.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Wrapping your Flexbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default all of your child boxes will try to fit onto one line. If you have
    a layout with several boxes, this may not be the look you want. If this is the
    case, you can use the `flex-wrap` property to wrap the child boxes as needed.
    Let''s add more boxes to our original code with the following HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We now have nine boxes in our parent container. That should give us enough
    to work with to create a nice wrapping effect. Before we see what this looks like,
    we need to add some more CSS. Add the following properties to your CSS file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'I''ve added two new properties to achieve the layout we want. Let me break-down
    what is happening:'
  prefs: []
  type: TYPE_NORMAL
- en: I've added the `flex-wrap` property to the `.parent` class and set the value
    to `wrap`. This will wrap the boxes when it's appropriate.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the `.child` class I added a `min-width` of `100px`. I've done this so we
    can have some control on when the child boxes will break. If we don't add this,
    the width of the columns may get too thin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you''ve added those properties to the existing code, save the file and
    test it. Your layout should now look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wrapping your Flexbox](img/00010.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we now have a two-row layout with six boxes on top and three
    below. Remember we added the `flex-grow` property previously, so the second row
    is stretching or growing to fit. If you want your boxes to always be equal you
    should use an even number, in this case 12\. You could also remove the `flex-grow`
    property; then all the boxes would be the same width but they would not fill the
    layout the same way.
  prefs: []
  type: TYPE_NORMAL
- en: Creating equal-height columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the best features of Flexbox is the ability to easily create equal height
    columns. In a regular horizontal layout, if your content is not the exact same
    length, each column will be a different height. This can be problematic for a
    web application layout because you usually want your boxes to be more uniform.
    Let''s check out some regular layout code and what it looks like in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'I''ve created three columns with different amounts of text in each of them.
    Let''s add some basic styling to these columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'I''ve created a similar look and feel for this regular layout like our Flexbox.
    Let''s see what this looks like if we view it in a browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating equal-height columns](img/00011.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'That doesn''t look very good does it? What would be better is if the two smaller
    columns stretched vertically to match the height of the longest column. The good
    news is this is really easy to do with Flexbox. Leave the HTML as it is but let''s
    go and change our CSS to use a Flexbox approach:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code is actually very similar to one of the first examples. Therefore,
    an equal height column comes standard right out of the Flexbox. I have added a
    `min-width` of `200px` to each column so that the text is readable. With the preceding
    CSS our layout will now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating equal-height columns](img/00012.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Perfect! Now the white background of each column has extended vertically to
    match the height of the tallest child. This looks much better and will allow for
    nicer horizontal alignment if you add additional rows of content. What''s happening
    here is that the `align-items` property is defaulting to the `stretch` value.
    This value is what stretches the height of the columns to fit. There are some
    additional alignment values you can also try out. To continue, let''s try out
    the `flex-start` value. Add the following CSS to the `.parent` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This configuration will actually undo the equal height columns and appear like
    a regular grid. Here''s the image to refresh your memory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating equal-height columns](img/00013.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'A more useful value is the `flex-end` option, which will align the boxes to
    the bottom of the browser window. Change your CSS to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This setup will produce a grid that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating equal-height columns](img/00014.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you''d like to center your columns vertically in the layout, you can do
    that with the `center` value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If you go for this setup, your grid will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating equal-height columns](img/00015.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This is a just a taste of the properties you can use to customize the Flexbox
    grid. As I mentioned previously, I just wanted to give you a quick introduction
    to using Flexbox and some of the terminology that is needed. Let's take what we've
    learned and build on that by building a Flexbox grid in Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Bootstrap Flexbox layout grid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whether your are using Flexbox or not, the grid is based on Bootstrap's regular
    row and column classes. If you are familiar with the Bootstrap grid, this will
    work exactly as you expect it to. Before you start any Bootstrap project, you
    need to decide if you want to use a Flexbox or regular grid. Unfortunately, you
    can't use both at the same time in a Bootstrap project. Since the focus of this
    chapter is on Flexbox, we'll be using the appropriate grid configuration. By default
    Bootstrap is set up to use the regular grid. Therefore, we are going to need to
    edit the source files to activate the Flexbox grid. Let's start by downloading
    the source files again from [http://v4-alpha.getbootstrap.com/](http://v4-alpha.getbootstrap.com/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Once you've downloaded the ZIP file, expand it and rename it so you don't get
    confused. Call it something like `Flexbox Bootstrap`. Next we'll need to edit
    a file and recompile the source files to apply the changes.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the Sass variable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use the Flexbox grid, we need to edit a Sass variable in the `_variables.scss`
    file. The way Sass variables work is that you set a single value in the `_variables.scss`
    file. When you run the built-in compiler, that value is written into every component
    of the Bootstrap framework where it is needed. You can then grab the compiled
    `bootstrap.min.css` file and it will have all the required code you need to use
    the Flexbox grid:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In your new source file directory, using the Terminal, navigate to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the file in a text editor such as Sublime Text 2 or Notepad and find the
    following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the `false` value to `true`. The line of code should now read:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the file and close it. Before this change is applied, we need to recompile
    the source files. Since we downloaded a new version of the source files, we''ll
    need to reinstall the project dependencies. Navigate to the root of the new Flexbox
    source files in the Terminal and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will likely take a couple minutes and you can follow the progress in the
    Terminal. Once it''s done we need to compile the project. To do this we use Grunt.
    To run the compiler, simply enter the following command into the Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Again this will take a minute or two and you can follow the progress in the
    Terminal. Once it completes, the source files will have been compiled into the
    `/dist` directory. If it isn't clear, the production files that you want to use
    in your actual project will be compiled into the `/dist` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Before we move onto our project, it would be a good idea to confirm that everything
    worked. Go back to your text editor and open the `dist/css/bootstrap.css` file
    from the root of your source files.
  prefs: []
  type: TYPE_NORMAL
- en: This is the un-minified version of the compiled Bootstrap CSS framework file.
    Once it's open do a quick find (*cmd* + *f* on Mac or *Ctrl* + *f* on Windows)
    and search for `flex`. If everything worked, it should quickly find an instance
    of `flex` in the file. This confirms that your compile worked.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Flexbox project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Flexbox project is structured exactly like a regular one. You just have to
    be sure to replace the `bootstrap.min.css` file in the `/css` directory with the
    new Flexbox version. Copy the project we made in the last chapter and paste it
    wherever you want on your computer. Rename the project to something like `Flexbox
    project`. Now open up that project and navigate to the `/css` directory. In a
    new window, open up the Flexbox sources files directory and navigate to the /`dist/css/`
    directory. Copy the `bootstrap.min.css` file from `/dist/css` into the `/css`
    directory in your new `Flexbox project`. You'll be prompted to overwrite the file
    and you should choose **Yes**. That's it, your new Flexbox project is ready to
    roll.
  prefs: []
  type: TYPE_NORMAL
- en: It would be a good idea to keep the Flexbox source files somewhere on your computer.
    In future projects, you can simply copy the compiled Flexbox version of the Bootstrap
    CSS over, saving you the trouble of having to recompile the source files each
    time you want a Flexbox layout.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a custom theme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we code our first Flexbox grid, we need to add a custom CSS theme to
    our project. We're going to do this to add any custom look and feel styles on
    top of Bootstrap. In Bootstrap you never want to edit the actual framework CSS.
    You should use the cascading power of CSS to insert a theme for additional custom
    CSS or to overwrite existing Bootstrap styles. In a later chapter, I'll go into
    more depth on custom themes but for now let's set up a basic one that we can use
    for our Flexbox grid. First, let's start by creating a new file in the `/css`
    directory of our project called `theme.css`. For now, the file can be blank; just
    make sure you create it and save it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next we need to update our `_layout.ejs` file to include the theme file in
    our page. Open up `_layout.ejs` in a text editor and make sure it matches the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'I''ve added one line of code to the template that loads in `theme.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that this line of code is after `bootstrap.min.css`. This is important
    as our theme needs to be loaded last so that we can overwrite Bootstrap default
    styles if we want to. Our template is now up-to-date and we are ready to start
    with our first grid. Feel free to keep `theme.css` open as we'll be adding some
    styles to it in the next step.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic three-column grid
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we've set up our project, let's go ahead and start doing some Bootstrap
    coding. The good news is that the Bootstrap column classes used with the Flexbox
    grid are exactly the same as the ones used in a regular grid. There is no need
    to learn any new class names. In your project folder, create a new file and name
    it `flexbox.ejs`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you go any further, you need to add an instance for this page to `_data.json`.
    Otherwise your `harp compile` command will fail. Open up `_data.json` and add
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'I''ve added a second entry for `flexbox.ejs` and given it this page title:
    Flexbox. Now we can safely start working on `flexbox.ejs` and the compile will
    work. Let''s start with a simple three-column grid. Enter the following HTML code
    into `flexbox.ejs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Let me breakdown what is happening here:'
  prefs: []
  type: TYPE_NORMAL
- en: Like in the earlier example, I've created three equal columns. Each one has
    a different amount of text in it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I'm using the `col-md-4` column class, as I want the three-column horizontal
    layout to be used for medium-size devices and upwards. Smaller devices will default
    to a single column width layout.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I've also added a `.child` class to each of the column `<div>`s so that I can
    style them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now let''s add a little CSS to `theme.css` so we can more easily see what is
    going on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what is happening with the `.child` class:'
  prefs: []
  type: TYPE_NORMAL
- en: I've added a light gray background color so we can easily see the child box.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I've added some padding. Note that you can add padding to a Flexbox grid without
    worrying about breaking the grid. In a regular layout, this would break your box
    model and add extra width to the layout.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s what the finished layout should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a basic three-column grid](img/00016.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see the light gray background has stretched to fit the height of
    the tallest column. An equal height column with almost no effort is awesome! You'll
    also notice that there is some padding on each column but our layout is not broken.
  prefs: []
  type: TYPE_NORMAL
- en: You may have noticed that I used the regular `.container` class to wrap this
    entire page layout. What if we want the layout to stretch the entire width of
    the browser?
  prefs: []
  type: TYPE_NORMAL
- en: Creating full-width layouts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating a full-width layout with no horizontal padding is actually really
    easy. Just remove the container class. The HTML for that type of layout would
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, I''ve simply removed the `<div>` with the `.container` class
    on it. Let''s take a look at what the layout looks like now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating full-width layouts](img/00017.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: There we go, the columns are stretching right to the edges of the browser now.
    We've easily created a full-width layout that has equal height columns. Let's
    improve on this design by making each column an actual blog post and we'll also
    add more rows of posts.
  prefs: []
  type: TYPE_NORMAL
- en: Designing a single blog post
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by designing the layout and content for a single blog post. At
    the very least, a blog post should have: a title, post-meta, description, and
    a read more link. Open up the `flexbox.ejs` file and replace the first column''s
    code with this new code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Let me breakdown what is happening here:'
  prefs: []
  type: TYPE_NORMAL
- en: I've added an `<h3>` tag with a link for the post title
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I've added some post-meta and wrapped it in a `<small>` tag so it is subtle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I've left our description and added a read more link at the bottom
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now go ahead and copy and paste this code into the other two columns. If you
    want to play around with the length of the description text, feel free. For this
    example I''m going to keep it the same. When you''re done, the entire page code
    should look like this. Note, I added the container `<div>` back in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Save your file, do a harp compile if you haven''t done so for in a while. Then
    do a harp server to launch the web server and head to `http://localhost:9000`
    to preview the page. It should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Designing a single blog post](img/00018.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Great, now we have a decent-looking blog homepage. However, we need to add
    more posts to fill this out. Let''s go ahead and add more column `<div>`s inside
    the same row. Since this is Flexbox, we don''t need to start a new `<div>` with
    a row class for each row of posts. Let''s add three more posts in then see what
    it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Designing a single blog post](img/00019.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Perfect. Now our homepage is starting to take shape. Continue adding more posts
    until you have a number that you are happy with. At this point you should have
    a decent understanding of the Flexbox grid.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We started by reviewing the basic functionality of the Flexbox module and the
    terminology that goes along with it. Next, I showed you how to activate the Flexbox
    grid in Bootstrap by editing the Sass variable and recompiling the source files.
    Finally we got our hands dirty by learning how to build a blog homepage and feed
    using the Bootstrap Flexbox grid. In the next chapter, we'll move further into
    layouts and how you can set up your pages with Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the goal of flexbox layout module?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To shrink to best fill the available space when needed when building responsive
    web applications or websites
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: To create a more effective way of designing a layout for a website or web application
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: To create a homepage
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: By default in Flexbox, the child boxes will be in a row going?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Left to right
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Right to left
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Top to bottom
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Diagonal
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the following code outputs?![Assessments](img/00020.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Orders the boxes vertically so they were stacked on top of each other in descending
    order
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Orders the boxes vertically so they were stacked on top of each other in ascending
    order
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Reverses the order of boxes
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: There will be no output
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference of output between the following code snippets?![Assessments](img/00021.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first snippet will align the boxes to the bottom of the browser window,
    the second snippet will center your columns vertically in the layout and the third
    will undo the equal height columns and appear like a regular grid
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The first snippet will center your columns vertically in the layout, the second
    snippet will align the boxes to the bottom of the browser window and the third
    will align the boxes to the bottom of the browser window
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The first snippet will undo the equal height columns and appear like a regular
    grid, the second snippet will align the boxes to the bottom of the browser window
    and the third will center your columns vertically in the layout
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you use both Flexbox and regular grid at the same time in a Bootstrap project?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yes'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'No'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: How to create a `full-width` layout with no horizontal padding?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use columns instead of rows
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the `.container` class
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove all the `<div>` elements
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Simply remove the `<div>` with the .container class on it
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
