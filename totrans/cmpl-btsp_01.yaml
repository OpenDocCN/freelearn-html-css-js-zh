- en: Chapter 2. Jumping into Flexbox
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章：Flexbox 入门
- en: Alright, now that we have finished setting up all the Bootstrap build tools,
    let's jump into an actual great new feature of Bootstrap 4\. The latest version
    of the framework comes with CSS Flexbox support. The goal of the Flexbox layout
    module is to create a more effective way of designing a layout for a website or
    web application. The grid of boxes is aligned in a way that distributes them across
    their container even if their size is unknown. This is where the "Flex" in Flexbox
    comes from.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们已经完成了所有 Bootstrap 构建工具的设置，让我们跳入 Bootstrap 4 的一个真正的新特性。框架的最新版本包含了 CSS
    Flexbox 支持。Flexbox 布局模块的目标是创建一种更有效的设计网站或网页应用布局的方法。盒子网格以这种方式对齐，即使在它们的大小未知的情况下，也会将它们分布在其容器中。这就是
    Flexbox 中的“Flex”一词的由来。
- en: The motivation for a flexible box arose from a web design for mobiles. A way
    to have a section grow or shrink to best fill the available space was needed when
    building responsive web applications or websites. Flexbox is the opposite of block
    layouts that are either vertically or horizontally driven. It's important to note
    that Flexbox is generally best suited for use when designing web applications.
    The traditional grid method still works best for larger websites.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 弹性盒子的动机源于为移动设备设计的网页。在构建响应式网页应用或网站时，需要一种让某个部分能够根据可用空间增长或收缩以最佳填充空间的方法。Flexbox
    与垂直或水平驱动的块布局相反。需要注意的是，Flexbox 通常最适合用于设计网页应用。传统的网格方法对于大型网站仍然是最有效的。
- en: In our blog project, we're going to use Flexbox to create a homepage. There
    will be several rows of blocks, each being a post. I'll show you a few ways to
    lay the blocks out and different ways you can customize the contents of each block,
    all using the new Flexbox layout in Bootstrap.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的博客项目中，我们将使用 Flexbox 来创建主页。将有几行块，每行都是一个帖子。我会向你展示几种布局块的方法以及你可以自定义每个块内容的不同方式，所有这些都将使用
    Bootstrap 中的新 Flexbox 布局。
- en: Flexbox basics and terminology
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flexbox 基础知识和术语
- en: Before we go too far, we should define a few Flexbox basics and some terminology
    that I'll use throughout the chapter. Every Flexbox layout is dependent on an
    outer container. As we move through the chapter, I'll refer to this container
    as the **parent**. Within the parent container there will always be a collection
    of boxes or blocks. I'll refer to these boxes as **children** or **child** elements
    of the parent. Why don't we start by talking a little bit more about why you would
    want to use Flexbox? The main purpose of Flexbox is to allow for the dynamic resizing
    of child boxes within their parent container.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们走得太远之前，我们应该定义一些 Flexbox 基础知识和我在本章中会使用的术语。每个 Flexbox 布局都依赖于一个外部容器。随着我们进入本章，我会将这个容器称为
    **父容器**。在父容器内，将始终有一组盒子或块。我将把这些盒子称为 **子盒子** 或 **子元素**。那么，我们为什么不先谈谈为什么你想使用 Flexbox
    呢？Flexbox 的主要目的是允许在父容器内动态调整子盒子的尺寸。
- en: 'This works for the resizing of both width and height properties on-the-fly.
    Many designers and developers prefer this technique as it allows for easier layouts
    with less code:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这适用于动态调整宽度和高度属性。许多设计师和开发者更喜欢这种技术，因为它允许用更少的代码实现更简单的布局：
- en: '![Flexbox basics and terminology](img/00004.jpeg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![Flexbox 基础知识和术语](img/00004.jpeg)'
- en: Ordering your Flexbox
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flexbox 的排序
- en: 'Flexbox is a really powerful module as it comes with several properties that
    you can customize. Let''s quickly go over some more basics before we fully take
    the plunge and use Flexbox in Bootstrap. Let''s start by talking about the order
    of child boxes. By default, they will appear in the order that you insert them
    in the HTML file. Consider the following code:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Flexbox 是一个非常强大的模块，因为它包含了许多你可以自定义的属性。在我们完全深入使用 Bootstrap 中的 Flexbox 之前，让我们快速回顾一些基础知识。首先，我们来谈谈子盒子的顺序。默认情况下，它们将以你在
    HTML 文件中插入它们的顺序出现。考虑以下代码：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'A proper CSS will produce a layout that looks like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 适当的 CSS 将产生如下布局：
- en: '![Ordering your Flexbox](img/00005.jpeg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![Flexbox 排序](img/00005.jpeg)'
- en: 'Here''s the CSS to produce this layout if you are following along at home:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在家跟随，以下是产生此布局的 CSS 代码：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now using an `order` property we can reorder the children using some CSS. Let''s
    put the third box at the beginning. If you are reordering some blocks, you need
    to define the position for each one; you can''t simply enter the value for a single
    block. Add the following CSS to your style sheet:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用`order`属性通过一些CSS重新排序子元素。让我们将第三个盒子放在开始位置。如果你正在重新排序一些块，你需要为每个块定义位置；你不能简单地为一个单独的块输入值。将以下CSS添加到你的样式表中：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'I''m using the `nth-of-type` pseudo selector to target each of the three boxes.
    I''ve then used the `order` property to set the third box to the first position.
    I''ve also adjusted the other two boxes to move them over one space. Save the
    file and your boxes should now look like this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在使用`nth-of-type`伪选择器来针对每个三个盒子。然后我使用了`order`属性将第三个盒子设置为第一个位置。我还调整了其他两个盒子，将它们移动一个空间。保存文件，你的盒子现在应该看起来像这样：
- en: '![Ordering your Flexbox](img/00006.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![排序你的Flexbox](img/00006.jpeg)'
- en: As you can see, the third box has moved to the first position. It's as easy
    as that to rearrange blocks on boxes on a page. I think you'll likely see how
    this could be useful for coding up a web application dashboard.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，第三个盒子已经移动到了第一个位置。重新排列页面上的块就这么简单。我认为你可能会看到这如何有助于编写一个网络应用程序仪表板。
- en: Stretching your child sections to fit the parent container
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将子部分拉伸以适应父容器
- en: 'Another important Flexbox feature is the ability to stretch the width of the
    child boxes to fit the full-width of the containing parent. If you look at the
    preceding CSS you''ll notice a `flex-grow` property on the `.child` class. The
    property is set to 1 which means that the child boxes will stretch to equally
    fill their parent. You could also do something where one box is set to a different
    value, using the `nth-of-type` selector, and then it would be wider than the others.
    Here''s the code to create equal-width columns as that is what you''ll likely
    do in most cases:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的Flexbox特性是能够拉伸子盒子的宽度以适应包含父容器的全宽。如果你查看前面的CSS，你会注意到`.child`类上的`flex-grow`属性。该属性设置为1，这意味着子盒子将拉伸以均匀填充其父容器。你也可以通过使用`nth-of-type`选择器为其中一个盒子设置不同的值，然后它将比其他盒子更宽。以下是如何创建等宽列的代码，因为你很可能会在大多数情况下这样做：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Changing the direction of the boxes
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改变盒子的方向
- en: 'By default in Flexbox, the child boxes will be in a row going left to right.
    If you like, you can change the direction using the `flex-direction` property.
    Let''s try out a few different directions. First let''s review our base HTML code
    again:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在Flexbox中默认情况下，子盒子将按从左到右的行排列。如果你愿意，你可以使用`flex-direction`属性来改变方向。让我们尝试几种不同的方向。首先，让我们再次回顾我们的基础HTML代码：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here''s the base CSS we wrote a little earlier. However, this time we''ll add
    the `flex-direction` property (with a value of `row-reverse`)to the `.parent`
    class. This will reverse the order of the boxes:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在稍早之前编写的基CSS。然而，这次我们将向`.parent`类添加`flex-direction`属性（值为`row-reverse`），这将反转盒子的顺序：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you save the file and view it in a browser it should now look like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你保存文件并在浏览器中查看，它现在应该看起来像这样：
- en: '![Changing the direction of the boxes](img/00007.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![改变盒子的方向](img/00007.jpeg)'
- en: 'What if we wanted to order the boxes vertically so they were stacked on top
    of each other in descending order? We can do that by changing the `flex-direction`
    property to `column`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要垂直排列这些盒子，使它们按降序堆叠在彼此之上，我们可以通过将`flex-direction`属性更改为`column`来实现：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'That configuration will produce a grid that looks like this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这种配置将产生一个看起来像这样的网格：
- en: '![Changing the direction of the boxes](img/00008.jpeg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![改变盒子的方向](img/00008.jpeg)'
- en: 'Finally there is one more direction we can try. Let''s do the same vertically
    stacked grid but this time we''ll reverse it. We do that by switching the `flex-direction`
    property to `column-reverse`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还可以尝试另一个方向。让我们做同样的垂直堆叠网格，但这次我们将它反转。我们通过将`flex-direction`属性切换到`column-reverse`来实现这一点：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'That will produce a grid that looks like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生一个看起来像这样的网格：
- en: '![Changing the direction of the boxes](img/00009.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![改变盒子的方向](img/00009.jpeg)'
- en: Wrapping your Flexbox
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包装你的Flexbox
- en: 'By default all of your child boxes will try to fit onto one line. If you have
    a layout with several boxes, this may not be the look you want. If this is the
    case, you can use the `flex-wrap` property to wrap the child boxes as needed.
    Let''s add more boxes to our original code with the following HTML:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，所有的子盒子都会尝试适应一行。如果你有一个包含多个盒子的布局，这可能不是你想要的外观。如果是这种情况，你可以使用`flex-wrap`属性根据需要包装子盒子。让我们用以下HTML添加更多盒子到我们的原始代码中：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We now have nine boxes in our parent container. That should give us enough
    to work with to create a nice wrapping effect. Before we see what this looks like,
    we need to add some more CSS. Add the following properties to your CSS file:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们父容器中有九个盒子。这应该足够我们创建一个很好的包裹效果。在我们看到这个效果之前，我们需要添加更多的 CSS。将以下属性添加到你的 CSS 文件中：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'I''ve added two new properties to achieve the layout we want. Let me break-down
    what is happening:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我添加了两个新属性来实现我们想要的布局。让我来分解一下发生了什么：
- en: I've added the `flex-wrap` property to the `.parent` class and set the value
    to `wrap`. This will wrap the boxes when it's appropriate.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我在 `.parent` 类中添加了 `flex-wrap` 属性，并将其值设置为 `wrap`。这将根据需要包裹盒子。
- en: On the `.child` class I added a `min-width` of `100px`. I've done this so we
    can have some control on when the child boxes will break. If we don't add this,
    the width of the columns may get too thin.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `.child` 类中，我添加了 `min-width` 为 `100px`。我这样做是为了能够控制子盒子何时会断行。如果我们不添加这个属性，列的宽度可能会变得太窄。
- en: 'Once you''ve added those properties to the existing code, save the file and
    test it. Your layout should now look something like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你将那些属性添加到现有代码中，保存文件并测试它。你的布局现在应该看起来像这样：
- en: '![Wrapping your Flexbox](img/00010.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![包裹你的 Flexbox](img/00010.jpeg)'
- en: As you can see, we now have a two-row layout with six boxes on top and three
    below. Remember we added the `flex-grow` property previously, so the second row
    is stretching or growing to fit. If you want your boxes to always be equal you
    should use an even number, in this case 12\. You could also remove the `flex-grow`
    property; then all the boxes would be the same width but they would not fill the
    layout the same way.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们现在有一个两行布局，上面有六个盒子，下面有三个。记住我们之前添加了 `flex-grow` 属性，所以第二行正在拉伸或增长以适应。如果你想让你的盒子始终相等，你应该使用偶数，在这种情况下是
    12。你也可以移除 `flex-grow` 属性；那么所有盒子都会有相同的宽度，但它们不会以相同的方式填充布局。
- en: Creating equal-height columns
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建等高列
- en: 'One of the best features of Flexbox is the ability to easily create equal height
    columns. In a regular horizontal layout, if your content is not the exact same
    length, each column will be a different height. This can be problematic for a
    web application layout because you usually want your boxes to be more uniform.
    Let''s check out some regular layout code and what it looks like in the browser:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Flexbox 最好的特性之一是能够轻松创建等高列。在常规的水平布局中，如果你的内容长度不完全相同，每一列的高度都会不同。这对于网页应用布局来说可能是个问题，因为你通常希望你的盒子更加统一。让我们检查一下常规布局的代码，以及它在浏览器中的样子：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'I''ve created three columns with different amounts of text in each of them.
    Let''s add some basic styling to these columns:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建了三个列，每个列中的文本量不同。让我们给这些列添加一些基本的样式：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'I''ve created a similar look and feel for this regular layout like our Flexbox.
    Let''s see what this looks like if we view it in a browser:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我为这个常规布局创建了一个类似于 Flexbox 的外观和感觉。让我们看看在浏览器中看起来是什么样子：
- en: '![Creating equal-height columns](img/00011.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![创建等高列](img/00011.jpeg)'
- en: 'That doesn''t look very good does it? What would be better is if the two smaller
    columns stretched vertically to match the height of the longest column. The good
    news is this is really easy to do with Flexbox. Leave the HTML as it is but let''s
    go and change our CSS to use a Flexbox approach:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来不太好，不是吗？更好的做法是让两个较短的列垂直拉伸以匹配最长列的高度。好消息是这用 Flexbox 来做非常容易。保持 HTML 不变，但让我们去改变我们的
    CSS 以使用 Flexbox 方法：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The preceding code is actually very similar to one of the first examples. Therefore,
    an equal height column comes standard right out of the Flexbox. I have added a
    `min-width` of `200px` to each column so that the text is readable. With the preceding
    CSS our layout will now look like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码实际上与第一个例子非常相似。因此，等高列在 Flexbox 中是标准配置。我为每个列添加了 `min-width` 为 `200px`，以便文本可读。有了前面的
    CSS，我们的布局现在将看起来像这样：
- en: '![Creating equal-height columns](img/00012.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![创建等高列](img/00012.jpeg)'
- en: 'Perfect! Now the white background of each column has extended vertically to
    match the height of the tallest child. This looks much better and will allow for
    nicer horizontal alignment if you add additional rows of content. What''s happening
    here is that the `align-items` property is defaulting to the `stretch` value.
    This value is what stretches the height of the columns to fit. There are some
    additional alignment values you can also try out. To continue, let''s try out
    the `flex-start` value. Add the following CSS to the `.parent` class:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 完美！现在每个列的白色背景已经垂直扩展，以匹配最高子元素的高度。这样看起来更好，如果你添加额外的内容行，将允许更佳的水平对齐。这里发生的事情是，`align-items`
    属性默认为 `stretch` 值。这个值就是拉伸列的高度以适应。还有一些其他的对齐值你也可以尝试。为了继续，让我们尝试 `flex-start` 值。向
    `.parent` 类添加以下 CSS：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This configuration will actually undo the equal height columns and appear like
    a regular grid. Here''s the image to refresh your memory:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这种配置实际上会取消等高列，看起来像是一个常规网格。以下是刷新你记忆的图片：
- en: '![Creating equal-height columns](img/00013.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![创建等高列](img/00013.jpeg)'
- en: 'A more useful value is the `flex-end` option, which will align the boxes to
    the bottom of the browser window. Change your CSS to:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更有用的值是 `flex-end` 选项，它将框对齐到浏览器窗口的底部。更改你的 CSS 为：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This setup will produce a grid that looks like this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这种设置将产生如下网格：
- en: '![Creating equal-height columns](img/00014.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![创建等高列](img/00014.jpeg)'
- en: 'If you''d like to center your columns vertically in the layout, you can do
    that with the `center` value:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在布局中垂直居中列，你可以使用 `center` 值：
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If you go for this setup, your grid will look like this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择这种设置，你的网格将看起来像这样：
- en: '![Creating equal-height columns](img/00015.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![创建等高列](img/00015.jpeg)'
- en: This is a just a taste of the properties you can use to customize the Flexbox
    grid. As I mentioned previously, I just wanted to give you a quick introduction
    to using Flexbox and some of the terminology that is needed. Let's take what we've
    learned and build on that by building a Flexbox grid in Bootstrap.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是你可以用来自定义 Flexbox 网格的一些属性的一个例子。正如我之前提到的，我只是想快速介绍如何使用 Flexbox 以及一些必要的术语。让我们利用所学知识，通过在
    Bootstrap 中构建 Flexbox 网格来进一步学习。
- en: Setting up the Bootstrap Flexbox layout grid
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Bootstrap 弹性盒布局网格
- en: Whether your are using Flexbox or not, the grid is based on Bootstrap's regular
    row and column classes. If you are familiar with the Bootstrap grid, this will
    work exactly as you expect it to. Before you start any Bootstrap project, you
    need to decide if you want to use a Flexbox or regular grid. Unfortunately, you
    can't use both at the same time in a Bootstrap project. Since the focus of this
    chapter is on Flexbox, we'll be using the appropriate grid configuration. By default
    Bootstrap is set up to use the regular grid. Therefore, we are going to need to
    edit the source files to activate the Flexbox grid. Let's start by downloading
    the source files again from [http://v4-alpha.getbootstrap.com/](http://v4-alpha.getbootstrap.com/)
    .
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是否使用 Flexbox，网格都是基于 Bootstrap 的常规行和列类。如果你熟悉 Bootstrap 网格，这将按预期工作。在你开始任何 Bootstrap
    项目之前，你需要决定是否想使用 Flexbox 或常规网格。不幸的是，你无法在 Bootstrap 项目中同时使用两者。由于本章的重点是 Flexbox，我们将使用适当的网格配置。默认情况下，Bootstrap
    设置为使用常规网格。因此，我们需要编辑源文件以激活 Flexbox 网格。让我们先从 [http://v4-alpha.getbootstrap.com/](http://v4-alpha.getbootstrap.com/)
    重新下载源文件开始。
- en: Once you've downloaded the ZIP file, expand it and rename it so you don't get
    confused. Call it something like `Flexbox Bootstrap`. Next we'll need to edit
    a file and recompile the source files to apply the changes.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 下载 ZIP 文件后，展开它并重命名，以免混淆。可以将其命名为 `Flexbox Bootstrap`。接下来，我们需要编辑一个文件并重新编译源文件以应用更改。
- en: Updating the Sass variable
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新 Sass 变量
- en: 'To use the Flexbox grid, we need to edit a Sass variable in the `_variables.scss`
    file. The way Sass variables work is that you set a single value in the `_variables.scss`
    file. When you run the built-in compiler, that value is written into every component
    of the Bootstrap framework where it is needed. You can then grab the compiled
    `bootstrap.min.css` file and it will have all the required code you need to use
    the Flexbox grid:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Flexbox 网格，我们需要在 `_variables.scss` 文件中编辑一个 Sass 变量。Sass 变量的工作方式是在 `_variables.scss`
    文件中设置一个单一值。当你运行内置编译器时，这个值会被写入到 Bootstrap 框架中需要它的每个组件。然后你可以获取编译后的 `bootstrap.min.css`
    文件，它将包含你使用 Flexbox 网格所需的所有代码：
- en: 'In your new source file directory, using the Terminal, navigate to:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的新源文件目录中，使用终端，导航到：
- en: '[PRE16]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Open the file in a text editor such as Sublime Text 2 or Notepad and find the
    following line of code:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器（如 Sublime Text 2 或记事本）中打开文件，并找到以下代码行：
- en: '[PRE17]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Change the `false` value to `true`. The line of code should now read:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `false` 值更改为 `true`。代码行现在应该读取：
- en: '[PRE18]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Save the file and close it. Before this change is applied, we need to recompile
    the source files. Since we downloaded a new version of the source files, we''ll
    need to reinstall the project dependencies. Navigate to the root of the new Flexbox
    source files in the Terminal and run the following command:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并关闭它。在应用此更改之前，我们需要重新编译源文件。由于我们下载了新的源文件版本，我们需要重新安装项目依赖项。在终端中导航到新 Flexbox
    源文件根目录，并运行以下命令：
- en: '[PRE19]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This will likely take a couple minutes and you can follow the progress in the
    Terminal. Once it''s done we need to compile the project. To do this we use Grunt.
    To run the compiler, simply enter the following command into the Terminal:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这可能需要几分钟，你可以在终端中跟踪进度。一旦完成，我们需要编译项目。为此，我们使用 Grunt。要运行编译器，只需在终端中输入以下命令：
- en: '[PRE20]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Again this will take a minute or two and you can follow the progress in the
    Terminal. Once it completes, the source files will have been compiled into the
    `/dist` directory. If it isn't clear, the production files that you want to use
    in your actual project will be compiled into the `/dist` directory.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能需要一两分钟，你可以在终端中跟踪进度。一旦完成，源文件将被编译到 `/dist` 目录。如果还不清楚，你将在实际项目中使用的生产文件将被编译到 `/dist`
    目录。
- en: Before we move onto our project, it would be a good idea to confirm that everything
    worked. Go back to your text editor and open the `dist/css/bootstrap.css` file
    from the root of your source files.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始我们的项目之前，确认一切正常是个好主意。回到你的文本编辑器，并打开源文件根目录中的 `dist/css/bootstrap.css` 文件。
- en: This is the un-minified version of the compiled Bootstrap CSS framework file.
    Once it's open do a quick find (*cmd* + *f* on Mac or *Ctrl* + *f* on Windows)
    and search for `flex`. If everything worked, it should quickly find an instance
    of `flex` in the file. This confirms that your compile worked.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这是编译后的 Bootstrap CSS 框架文件的未压缩版本。一旦打开，快速查找（Mac 上为 *cmd* + *f*，Windows 上为 *Ctrl*
    + *f*）并搜索 `flex`。如果一切正常，它应该会快速找到文件中的一个 `flex` 实例。这证实了你的编译是成功的。
- en: Setting up a Flexbox project
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Flexbox 项目
- en: A Flexbox project is structured exactly like a regular one. You just have to
    be sure to replace the `bootstrap.min.css` file in the `/css` directory with the
    new Flexbox version. Copy the project we made in the last chapter and paste it
    wherever you want on your computer. Rename the project to something like `Flexbox
    project`. Now open up that project and navigate to the `/css` directory. In a
    new window, open up the Flexbox sources files directory and navigate to the /`dist/css/`
    directory. Copy the `bootstrap.min.css` file from `/dist/css` into the `/css`
    directory in your new `Flexbox project`. You'll be prompted to overwrite the file
    and you should choose **Yes**. That's it, your new Flexbox project is ready to
    roll.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Flexbox 项目结构与常规项目完全相同。你只需确保将 `/css` 目录中的 `bootstrap.min.css` 文件替换为新的 Flexbox
    版本。复制我们在上一章中创建的项目，并将其粘贴到你的电脑上的任何位置。将项目重命名为类似 `Flexbox project` 的名称。现在打开该项目，导航到
    `/css` 目录。在新的窗口中，打开 Flexbox 源文件目录，并导航到 `/dist/css/` 目录。将 `/dist/css` 中的 `bootstrap.min.css`
    文件复制到你的新 `Flexbox project` 的 `/css` 目录中。你将收到覆盖文件的提示，你应该选择 **是**。就这样，你的新 Flexbox
    项目就准备好了。
- en: It would be a good idea to keep the Flexbox source files somewhere on your computer.
    In future projects, you can simply copy the compiled Flexbox version of the Bootstrap
    CSS over, saving you the trouble of having to recompile the source files each
    time you want a Flexbox layout.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Flexbox 源文件保存在你的电脑上的某个位置是个好主意。在未来的项目中，你可以简单地复制编译后的 Flexbox 版本的 Bootstrap CSS，这样每次你想使用
    Flexbox 布局时就不必重新编译源文件。
- en: Adding a custom theme
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加自定义主题
- en: Before we code our first Flexbox grid, we need to add a custom CSS theme to
    our project. We're going to do this to add any custom look and feel styles on
    top of Bootstrap. In Bootstrap you never want to edit the actual framework CSS.
    You should use the cascading power of CSS to insert a theme for additional custom
    CSS or to overwrite existing Bootstrap styles. In a later chapter, I'll go into
    more depth on custom themes but for now let's set up a basic one that we can use
    for our Flexbox grid. First, let's start by creating a new file in the `/css`
    directory of our project called `theme.css`. For now, the file can be blank; just
    make sure you create it and save it.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们编写第一个 Flexbox 网格之前，我们需要给我们的项目添加一个自定义 CSS 主题。我们将这样做是为了在 Bootstrap 之上添加任何自定义的外观和感觉样式。在
    Bootstrap 中，你永远不想编辑实际的框架 CSS。你应该使用 CSS 的级联功能来插入一个主题，用于额外的自定义 CSS 或覆盖现有的 Bootstrap
    样式。在后面的章节中，我会更深入地介绍自定义主题，但现在让我们设置一个基本的主题，我们可以用它来构建我们的 Flexbox 网格。首先，让我们在我们的项目
    `/css` 目录中创建一个新文件，命名为 `theme.css`。现在，文件可以是空的；只需确保你创建了它并保存了。
- en: 'Next we need to update our `_layout.ejs` file to include the theme file in
    our page. Open up `_layout.ejs` in a text editor and make sure it matches the
    following code:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要更新我们的 `_layout.ejs` 文件，以便在页面中包含主题文件。在文本编辑器中打开 `_layout.ejs`，确保它与以下代码匹配：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'I''ve added one line of code to the template that loads in `theme.css`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我在模板中添加了一行代码来加载 `theme.css`：
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that this line of code is after `bootstrap.min.css`. This is important
    as our theme needs to be loaded last so that we can overwrite Bootstrap default
    styles if we want to. Our template is now up-to-date and we are ready to start
    with our first grid. Feel free to keep `theme.css` open as we'll be adding some
    styles to it in the next step.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这一行代码在 `bootstrap.min.css` 之后。这很重要，因为我们的主题需要最后加载，这样我们就可以覆盖 Bootstrap 默认样式，如果我们想的话。我们的模板现在是最新的，我们准备好开始我们的第一个网格。请随意保持
    `theme.css` 打开，因为我们将在下一步中添加一些样式。
- en: Creating a basic three-column grid
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个基本的三个列网格
- en: Now that we've set up our project, let's go ahead and start doing some Bootstrap
    coding. The good news is that the Bootstrap column classes used with the Flexbox
    grid are exactly the same as the ones used in a regular grid. There is no need
    to learn any new class names. In your project folder, create a new file and name
    it `flexbox.ejs`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了我们的项目，让我们开始做一些 Bootstrap 编码。好消息是，与 Flexbox 网格一起使用的 Bootstrap 列类与常规网格中使用的完全相同。没有必要学习任何新的类名。在你的项目文件夹中，创建一个新文件，并将其命名为
    `flexbox.ejs`。
- en: 'Before you go any further, you need to add an instance for this page to `_data.json`.
    Otherwise your `harp compile` command will fail. Open up `_data.json` and add
    the following code:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在你继续之前，你需要为这个页面在 `_data.json` 中添加一个实例。否则，你的 `harp compile` 命令将失败。打开 `_data.json`
    并添加以下代码：
- en: '[PRE23]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'I''ve added a second entry for `flexbox.ejs` and given it this page title:
    Flexbox. Now we can safely start working on `flexbox.ejs` and the compile will
    work. Let''s start with a simple three-column grid. Enter the following HTML code
    into `flexbox.ejs`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我为 `flexbox.ejs` 添加了第二个条目，并给它这个页面标题：Flexbox。现在我们可以安全地开始对 `flexbox.ejs` 进行工作，编译将正常进行。让我们从一个简单的三列网格开始。将以下
    HTML 代码输入到 `flexbox.ejs` 中：
- en: '[PRE24]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Let me breakdown what is happening here:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我分解一下这里发生的事情：
- en: Like in the earlier example, I've created three equal columns. Each one has
    a different amount of text in it.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 就像在先前的例子中一样，我创建了三个相等的列。每个列中都有不同数量的文本。
- en: I'm using the `col-md-4` column class, as I want the three-column horizontal
    layout to be used for medium-size devices and upwards. Smaller devices will default
    to a single column width layout.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我使用 `col-md-4` 列类，因为我希望三列水平布局适用于中等尺寸的设备及以上。较小的设备将默认为单列宽度布局。
- en: I've also added a `.child` class to each of the column `<div>`s so that I can
    style them.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我还为每个列 `<div>` 添加了一个 `.child` 类，这样我就可以对它们进行样式化。
- en: 'Now let''s add a little CSS to `theme.css` so we can more easily see what is
    going on:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们给 `theme.css` 添加一点 CSS，这样我们就可以更容易地看到发生了什么：
- en: '[PRE25]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Here''s what is happening with the `.child` class:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 `.child` 类发生的情况：
- en: I've added a light gray background color so we can easily see the child box.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我添加了一个浅灰色背景色，这样我们就可以轻松地看到子框。
- en: I've added some padding. Note that you can add padding to a Flexbox grid without
    worrying about breaking the grid. In a regular layout, this would break your box
    model and add extra width to the layout.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我添加了一些填充。请注意，你可以在 Flexbox 网格中添加填充而不用担心破坏网格。在常规布局中，这将破坏你的盒模型并给布局添加额外的宽度。
- en: 'Here''s what the finished layout should look like:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后的布局应该看起来像这样：
- en: '![Creating a basic three-column grid](img/00016.jpeg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![创建基本的三个列网格](img/00016.jpeg)'
- en: As you can see the light gray background has stretched to fit the height of
    the tallest column. An equal height column with almost no effort is awesome! You'll
    also notice that there is some padding on each column but our layout is not broken.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，浅灰色背景已经拉伸以适应最高列的高度。几乎不需要努力就能实现等高列真是太棒了！您还会注意到每个列都有一些填充，但我们的布局并没有被破坏。
- en: You may have noticed that I used the regular `.container` class to wrap this
    entire page layout. What if we want the layout to stretch the entire width of
    the browser?
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，我使用了常规的`.container`类来包裹整个页面布局。如果我们想让布局扩展到浏览器整个宽度怎么办？
- en: Creating full-width layouts
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建全宽布局
- en: 'Creating a full-width layout with no horizontal padding is actually really
    easy. Just remove the container class. The HTML for that type of layout would
    look like this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个没有水平填充的全宽布局实际上非常简单。只需移除容器类。这种布局的HTML代码如下所示：
- en: '[PRE26]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'As you can see, I''ve simply removed the `<div>` with the `.container` class
    on it. Let''s take a look at what the layout looks like now:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我只是简单地移除了带有`.container`类的`<div>`。让我们看看现在的布局看起来像什么：
- en: '![Creating full-width layouts](img/00017.jpeg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![创建全宽布局](img/00017.jpeg)'
- en: There we go, the columns are stretching right to the edges of the browser now.
    We've easily created a full-width layout that has equal height columns. Let's
    improve on this design by making each column an actual blog post and we'll also
    add more rows of posts.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在列已经拉伸到了浏览器的边缘。我们轻松地创建了一个具有等高列的全宽布局。让我们通过将每个列实际变成一篇博客文章并添加更多行来改进这个设计。
- en: Designing a single blog post
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计单个博客文章
- en: 'Let''s start by designing the layout and content for a single blog post. At
    the very least, a blog post should have: a title, post-meta, description, and
    a read more link. Open up the `flexbox.ejs` file and replace the first column''s
    code with this new code:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从设计单个博客文章的布局和内容开始。至少，一篇文章应该有：标题、文章元数据、描述和“阅读更多”链接。打开`flexbox.ejs`文件，将第一列的代码替换为以下新代码：
- en: '[PRE27]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Let me breakdown what is happening here:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 让我分析一下这里发生了什么：
- en: I've added an `<h3>` tag with a link for the post title
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我添加了一个带有链接的`<h3>`标签作为文章标题
- en: I've added some post-meta and wrapped it in a `<small>` tag so it is subtle
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我添加了一些文章元数据，并用`<small>`标签包裹起来，使其不那么显眼
- en: I've left our description and added a read more link at the bottom
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我保留了我们的描述并在底部添加了一个“阅读更多”链接
- en: 'Now go ahead and copy and paste this code into the other two columns. If you
    want to play around with the length of the description text, feel free. For this
    example I''m going to keep it the same. When you''re done, the entire page code
    should look like this. Note, I added the container `<div>` back in:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在请将此代码复制并粘贴到其他两列中。如果您想调整描述文本的长度，请随意。在这个例子中，我将保持不变。完成之后，整个页面的代码应该看起来像这样。注意，我重新添加了容器`<div>`：
- en: '[PRE28]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Save your file, do a harp compile if you haven''t done so for in a while. Then
    do a harp server to launch the web server and head to `http://localhost:9000`
    to preview the page. It should look like this:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 保存您的文件，如果您已经有一段时间没有编译了，请执行harp compile。然后运行harp server来启动Web服务器，并转到`http://localhost:9000`预览页面。它应该看起来像这样：
- en: '![Designing a single blog post](img/00018.jpeg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![设计单个博客文章](img/00018.jpeg)'
- en: 'Great, now we have a decent-looking blog homepage. However, we need to add
    more posts to fill this out. Let''s go ahead and add more column `<div>`s inside
    the same row. Since this is Flexbox, we don''t need to start a new `<div>` with
    a row class for each row of posts. Let''s add three more posts in then see what
    it looks like:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了，现在我们有一个看起来不错的博客主页。然而，我们需要添加更多文章来填充它。让我们继续在同一个行内添加更多的列`<div>`。由于这是Flexbox，我们不需要为每行文章的每一行都开始一个新的带有行类的`<div>`。让我们添加三个更多的文章，看看它看起来像什么：
- en: '![Designing a single blog post](img/00019.jpeg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![设计单个博客文章](img/00019.jpeg)'
- en: Perfect. Now our homepage is starting to take shape. Continue adding more posts
    until you have a number that you are happy with. At this point you should have
    a decent understanding of the Flexbox grid.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 完美。现在我们的主页开始成形了。继续添加更多文章，直到您满意的数量。在这个时候，您应该对Flexbox网格有相当的了解。
- en: Summary
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We started by reviewing the basic functionality of the Flexbox module and the
    terminology that goes along with it. Next, I showed you how to activate the Flexbox
    grid in Bootstrap by editing the Sass variable and recompiling the source files.
    Finally we got our hands dirty by learning how to build a blog homepage and feed
    using the Bootstrap Flexbox grid. In the next chapter, we'll move further into
    layouts and how you can set up your pages with Bootstrap.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先回顾了Flexbox模块的基本功能及其相关术语。接下来，我向你展示了如何通过编辑Sass变量和重新编译源文件来在Bootstrap中激活Flexbox网格。最后，我们通过学习如何使用Bootstrap
    Flexbox网格构建博客主页和源来亲自动手。在下一章中，我们将进一步探讨布局以及如何使用Bootstrap设置你的页面。
- en: Assessments
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估
- en: What is the goal of flexbox layout module?
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Flexbox布局模块的目标是什么？
- en: To shrink to best fill the available space when needed when building responsive
    web applications or websites
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构建响应式Web应用程序或网站时，当需要缩放以最佳填充可用空间时使用
- en: To create a more effective way of designing a layout for a website or web application
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了创建一个更有效的为网站或Web应用程序设计布局的方法
- en: To create a homepage
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了创建一个主页
- en: All of the above
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以上都是
- en: By default in Flexbox, the child boxes will be in a row going?
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，在Flexbox中，子盒子将按什么顺序排列？
- en: Left to right
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左到右
- en: Right to left
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从右到左
- en: Top to bottom
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从上到下
- en: Diagonal
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对角线
- en: What does the following code outputs?![Assessments](img/00020.jpeg)
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码输出什么？![评估](img/00020.jpeg)
- en: Orders the boxes vertically so they were stacked on top of each other in descending
    order
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将盒子垂直排序，以便它们按降序堆叠在一起
- en: Orders the boxes vertically so they were stacked on top of each other in ascending
    order
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将盒子垂直排序，以便它们按升序堆叠在一起
- en: Reverses the order of boxes
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 反转盒子的顺序
- en: There will be no output
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将没有输出
- en: What is the difference of output between the following code snippets?![Assessments](img/00021.jpeg)
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码片段的输出有什么区别？![评估](img/00021.jpeg)
- en: The first snippet will align the boxes to the bottom of the browser window,
    the second snippet will center your columns vertically in the layout and the third
    will undo the equal height columns and appear like a regular grid
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一段代码将使盒子对齐到浏览器窗口的底部，第二段代码将使你的列在布局中垂直居中，第三段代码将取消等高列，看起来像是一个常规的网格
- en: The first snippet will center your columns vertically in the layout, the second
    snippet will align the boxes to the bottom of the browser window and the third
    will align the boxes to the bottom of the browser window
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一段代码将使你的列在布局中垂直居中，第二段代码将盒子对齐到浏览器窗口的底部，第三段代码将取消等高列，看起来像是一个常规的网格
- en: The first snippet will undo the equal height columns and appear like a regular
    grid, the second snippet will align the boxes to the bottom of the browser window
    and the third will center your columns vertically in the layout
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一段代码将取消等高列，看起来像是一个常规的网格，第二段代码将盒子对齐到浏览器窗口的底部，第三段代码将使你的列在布局中垂直居中
- en: None of the above
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以上都不是
- en: Can you use both Flexbox and regular grid at the same time in a Bootstrap project?
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Bootstrap项目中，你可以在同一时间同时使用Flexbox和常规网格吗？
- en: 'Yes'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是
- en: 'No'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不
- en: How to create a `full-width` layout with no horizontal padding?
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何创建没有水平填充的`full-width`布局？
- en: Use columns instead of rows
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用列而不是行
- en: Rename the `.container` class
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重命名`.container`类
- en: Remove all the `<div>` elements
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除所有的`<div>`元素
- en: Simply remove the `<div>` with the .container class on it
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 简单地移除具有`.container`类的`<div>`元素
