- en: Chapter 5. Understanding Google Maps JavaScript API Events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating two synced maps side by side
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the coordinates of a mouse click
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a context menu on a map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricting the map extent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a control that shows coordinates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your own events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have ever worked on JavaScript programming, you should know the importance
    of events. Events are the core of JavaScript. There are events behind interactions
    in web pages. There can be user interactions or browser actions that can be handled
    with the help of events.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in every code from the beginning of this book, we have wrote something
    like the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This line is a simple form of event definition. This line tells the browser
    to call the `initMap()` function when all the contents are loaded. This event
    is required to start mapping functions after loading all DOM elements.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is about using events in the Google Maps JavaScript API to interact
    with maps in different ways. The Google Maps JavaScript API has the `google.maps.event`
    namespace to work with events. This namespace has static methods to listen to
    events defined in the API. You should check the supported event types of objects
    in the API via the Google Maps API reference documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Creating two synced maps side by side
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maps are useful to human beings. With the help of maps, people explore or compare
    their surrounding area. Sometimes they need to compare two maps side by side to
    see the difference in real time. For example, you might want to check a satellite
    imagery side by side with terrain maps to see where the mountains are.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows you how to add two maps in the same page and sync them together
    to show the same area and compare them with the help of Google Maps JavaScript
    API events.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You already know how to create a map from the previous chapters. So, only additional
    code lines are written.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source code at `Chapter 5/ch05_sync_maps.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to create two maps that are synced together, you should perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, add the CSS styles of the `div` objects in the header to show them side
    by side:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then define two global map variables to access them within event callbacks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next create the function that initializes the left map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, add the second function that initializes the right map. The contents of
    the functions created before are almost the same, except for variable names, the
    `div` ID, the map type, and timers in event handlers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now have two maps, and we must initialize both of them at the start, so
    we need a single function to call the previous functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `initMaps()` function when everything has been loaded on the `load`
    event of the `window` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Do not forget to add the two `div` objects in HTML tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to your local URL where your HTML file is stored in your favorite browser
    and see the result. You will see two maps side by side. When you drag or zoom
    in on one map, then the other map is also changed based on the changed one. The
    final map will look like the following screenshot:![How to do it…](img/8825OT_05_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As a result of the recipe, we can create two maps that are synced together to
    show the same area of different map types.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The important point in this recipe is to keep two maps in synchronization at
    the same position and zoom level. To achieve this goal, we need to know when the
    map has moved and when the zoom level has changed.
  prefs: []
  type: TYPE_NORMAL
- en: The `map` object has different events to trigger. The `center_changed` and `zoom_changed`
    events are two of those events. The `center_changed` event is triggered every
    time the map center is changed. There are also `bounds_changed`, `drag`, `dragstart`,
    and `dragend` events that can be used to achieve our goal, but `center_changed`
    is the simplest one to handle. The `zoom_changed` event is triggered when there
    is a change in the zoom level.
  prefs: []
  type: TYPE_NORMAL
- en: 'To listen for the events, we need to register these events with the `google.maps.event`
    namespace as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `addListener()` method gets three parameters; an object to listen, an event
    type, and an event handler. The event handler can be a function that has been
    defined earlier or an anonymous function used only here. In this example, we listen
    for the left map object—`map1`—for the `center_changed` event and set the center
    of the right map to the center of the left map. The zoom part also works in the
    same way. When the zoom level of the left map changes, the event handler of `zoom_changed`
    sets the zoom level of the right map to the zoom level of the left map.
  prefs: []
  type: TYPE_NORMAL
- en: 'This should be the same for the right map, but the code used for event handling
    in the right map is a bit different from that of the left one because of an infinite
    event loop. If we use the same code for event handling, we create an infinite
    loop between the two maps. This loop will cause your browser to crash in most
    cases. To avoid this infinite loop, we create a small break (10 milliseconds)
    between events. This break will solve all the problems and users will not recognize
    the difference. This break is created with the `setTimeout()` function of JavaScript.
    There is also a better version to use instead of using timeouts, which is explained
    in the *There''s more...* section of this recipe. The recipe covers the ways to
    use map events in these cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, our events are being listened for continuously, which is as
    expected. But what if you need to listen for an event for a limited time? There
    are two options. One option is that of storing the returning `google.maps.MapEventListener`
    object of the `addListener()` function and removing it when needed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Another option to remove event listeners is to use the `clearInstanceListeners()`
    or `clearListeners()` functions of the `google.maps.event` namespace, which are
    used for removing all listeners for all events for the given instance or removing
    all listeners for the given event for the given instance, respectively. You can
    look at the following code for example usages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The Google Maps JavaScript API also provides other methods to listen for DOM
    events, named `addDomListener()` under the `google.maps.event` namespace. There
    is also the `addListenerOnce()` method to listen for events once.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also an alternate method to sync maps. The following code block just
    syncs two maps'' events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a simple map in a custom DIV element* recipe of [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the coordinates of a mouse click
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The mouse has been the most effective input device for computers for a long
    time. Nowadays, there is an attempt to change it with touchscreens, but nothing
    can be compared to the ease of use that a mouse provides.
  prefs: []
  type: TYPE_NORMAL
- en: The mouse has different interactions on maps, such as click, double-click, right-click,
    move, and drag. These events can be handled in different ways to interact with
    users.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we will get the coordinates of a mouse click on any point on
    the map. Users will see an info window upon a mouse click, which can be seen in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting the coordinates of a mouse click](img/8825OT_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is how we achieve the creation of a map that is listening for each mouse
    click to get coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We assume that you already know how to create a simple map. We will only cover
    the code that is needed for showing an info window upon mouse clicks.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source code at `Chapter 5/ch05_getting_coordinates.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you perform the following steps, you can get the coordinates of each mouse
    click on the map:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we must add an `infowindow` variable at the beginning of the JavaScript
    code to use as a global object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add the following lines to the `initMap()` function after the initialization
    of the `map` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to your local URL where your HTML is stored in your favorite browser and
    click on the map to see the result. Each mouse click opens an info window with
    the coordinate information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After initializing the map, we create an event listener to handle mouse clicks
    on the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `click` event type has a different handler than other events. The handler
    has an input parameter that is an object derived from the `google.maps.MouseEvent`
    class. This object has a property named `LatLng`, which is an instance of the
    `google.maps.latLng` class. This property gives us the coordinates of the mouse
    click.
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to show an info window upon each mouse click, and we want to see only
    one info window. To achieve this, we create `infowindow` as a global variable
    at the beginning of the JavaScript code and check whether it is still defined
    or not. If there is an `infowindow` object from previous clicks, then we will
    close it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon each mouse click, we will create a new `infowindow` object with new contents,
    coordinates, and position from the `e.latLng` object. After creating `infowindow`,
    we will just open it on the map defined previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As already mentioned, some event types have different event handlers that can
    get a parameter. This parameter is an object derived from the `google.maps.MouseEvent`
    class. The `google.maps.Map` class has the following events that return `MouseEvent`
    objects to the handlers: `click`, `dblclick`, `mousemove`, `mouseout`, `mouseover`,
    and `rightclick`.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a simple map in a custom DIV element* recipe of [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a context menu on a map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using menus in a user interface is a way to communicate with users. Users select
    a menu item to interact with web applications. Some of the menu types can be accessible
    from a visible place, but some of them can be accessible with some extra actions,
    such as **context menus**. Context menus usually appear on applications with a
    right-click of the mouse.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a context menu on the map that opens when we
    right-click on the map. This menu includes zoom in, zoom out, and add marker functions.
    You will also get the position of the right-click to use it in some geo methods
    such as adding a marker in this example.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is also like the other recipes in that we assume you already know
    how to create a simple map. So, we will only show extra lines of code to add the
    context menu.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source code at `Chapter 5/ch05_context_menu.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps we need to create a map with a context menu to
    show extra commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by adding CSS styles of the context menu to the header of HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next step is to define the global variables for the context menu and coordinates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we will add lines that define the context menu class. The details will
    be explained later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, add the functions to be used in the context menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code block after initializing the `map` object. This block
    will create an object from the `ContextMenuClass` class and start listening in
    the `map` object for the right-click to show the `contextMenu` object created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to your local URL where your HTML is stored in your favorite browser and
    right-click to see the context menu.![How to do it…](img/8825OT_05_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As it can be seen in the preceding screenshot, we created our simple map with
    the context menu.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JavaScript is a prototype-based scripting language that supports object-oriented
    programming in a different way compared to classical server-side programming languages.
    There isn't any classic class definition, but you have prototypes to create classes
    or inherit other classes. This book is not a JavaScript book. If you have any
    questions about these concepts of JavaScript, you should google it to learn the
    details.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Google Maps JavaScript API has a `google.maps.OverlayView` class to create
    your own custom types of overlay objects on the map. We will inherit this class
    to create our own context menu class. First, we will define the `ContextMenu`
    class with its constructor as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we will set a prototype of the `ContextMenu` class to an object created
    from the `google.maps.OverlayView` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The `google.maps.OverlayView` class has three methods to be implemented in
    our newly created class: `onAdd()`, `draw()`, and `onRemove()`. In addition to
    these methods, we add two methods to show or hide the context menu. Each method''s
    mission is explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`onAdd()`: The creation of DOM objects and appending them as children of the
    panes is done in this method. We will create a `div` object with the CSS class
    defined at the top of the HTML. Menu items are also added to this `div` object
    with the `innerHTML` property. We will also create an event listener of map clicks
    to remove the context menu from other actions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`draw()`: The positioning of created elements is done via this method, but
    we skip steps to fill this method. We create `show()` and `hide()` methods instead
    of adding or removing the context menu each time:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`onRemove()`: Removing the created elements is done in this method:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`show(coord)`: Showing the context menu when we right-click on the mouse is
    done in this method. The input parameter is a `latLng` object, so we have to convert
    it to pixel coordinates in the `div` element. To achieve this, we need extra objects
    created from the `google.maps.MapCanvasProjection` class. This class has a method
    named `fromLatLngToDivPixel` to convert the `latLng` object to simple `google.maps.Point`
    objects. This object is used to set the `x` and `y` coordinates of the context
    menu from the top-left corner of the map. We also change the visibility style
    of `div` to show on the map:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`hide()`: Hiding the context menu is done in this method. We just change the
    visibility property of the context menu `div` to `hidden` to hide it:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `ContextMenuClass` class has been defined earlier, but there isn''t any
    object created from this class. We created a `contextMenu` object from our new
    class as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to use this `contextMenu` object, we should listen for the `map` object''s
    `rightclick` event and show the context menu in its handler. We will also update
    the global variable `lastCoordinate` to keep the last right-click coordinate to
    use it in the `createMarker()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Context menu functions are covered in previous chapters, so they are not explained
    here. You can also create other types of overlays like in this recipe with the
    help of the `google.maps.OverlayView` class.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**More on JavaScript prototype-based inheritance**'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are interested in the details of JavaScript prototype-based inheritance,
    please get more details from the following page: [http://javascript.crockford.com/prototypal.html](http://javascript.crockford.com/prototypal.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'This article is written by *Douglas Crockford*, who is the guru of JavaScript
    and the father of the JSON format. I suggest you read his popular JavaScript book
    *JavaScript: The Good Parts* to delve deeper into JavaScript.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a simple map in a custom DIV element* recipe of [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Changing map properties programmatically* recipe of [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding markers to maps* recipe of [Chapter 3](ch03.html "Chapter 3. Adding
    Vector Layers"), *Adding Vector Layers*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricting the map extent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google Maps has a worldwide extent that shows almost every street on the earth.
    You can use the Google Maps JavaScript API for the whole earth, but sometimes
    you need to show only the related area in the mapping application. You can zoom
    to a fixed location, but this doesn't stop users from moving to another place
    that is not in the extent of your application.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will listen for map events to check if we are in an allowed
    extent. If we are not in the allowed extent, then we move the map to the allowed
    center within the extent. We used Turkey's geographic extent in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is still using the same map creation process defined in [Chapter
    1](ch01.html "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript
    API Basics*, but there are some additional code blocks to listen for map events
    and to check for the restricted extent.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source code at `Chapter 5/ch05_restrict_extent.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Restricting the map extent is quite easy if you perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we must add the `allowedMapBounds` and `allowedZoomLevel` variables
    as global variables after defining the `map` variable. This is the geographic
    boundary of Turkey:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next step is to listen for the `drag` and `zoom_changed` events of the
    map after initializing the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we create a `checkBounds()` function to handle events when they are fired.
    The first part of the function is to check for zoom levels. We choose `6` to minimize
    the zoom level of the map for this recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following lines of code will add to the `checkBounds()` function to get
    the allowed bounds, recent bounds, and recent center of the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The important part of the `checkBounds()` function is the comparing of allowed
    bounds with recent bounds. If there is a difference between `centerX` and `centerY`
    with the `nCenterX` and `nCenterY` variables, then we move the map to the center
    that is within the allowed bounds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to your local URL where your HTML is stored in your favorite browser and
    try to move the map of other countries near Turkey. You will see that the map
    moves back to its previous position that is allowed within the boundaries defined
    at the top.![How to do it…](img/8825OT_05_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As it can be seen in the preceding screenshot, you can easily restrict the map
    extent by events provided by the Google Maps JavaScript API.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As it is stated in previous event recipes, the Google Maps JavaScript API gives
    the developer many events that are related to mapping activities. The `drag` and
    `zoom_changed` events are the ones we are using in this recipe to listen for.
    This time, we do not create anonymous event handlers because we use the same event
    handler for two event listeners, named `checkBounds()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The Google Maps JavaScript API has the `google.maps.LatLngBounds` class for
    defining geographical bounds. This class'' constructor gets two objects as parameters
    created from the `google.maps.LatLng` class. The parameters are the geographical
    coordinates of the south-west and north-east corners respectively. This creates
    a geographical boundary for our application. South-west has the minimum latitude
    and longitude while on the other side, north-east has the maximum latitude and
    longitude:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The main trick in this recipe is in the `checkBounds()` function. First, we
    get the minimum and maximum latitudes and longitudes of the allowed bounds and
    recent bounds. The `NE` label is the maximum value and the `SW` label is the minimum
    value of latitudes and longitudes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The center of the map is used for both checking the difference and centering
    the map according to this value. The `nCenterX` and `nCenterY` values are used
    for checking if there is a change in the `centerX` and `centerY` values. The `if`
    statement checks for the recent values and allowed values. If the map is going
    out of the allowed bounds, it will change the `centerX` or `centerY` values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'If there is a change in the `centerX` or `centerY` values, then we must keep
    the map in the bounds with the help of the `panTo()` method; otherwise, do nothing
    using `return`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: There may be different ways to check the allowed bounds, such as only checking
    the center of the map, but this method will not limit the exact bounds you want.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a simple map in a custom DIV element* recipe of [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Changing map properties programmatically* recipe of [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a control that shows coordinates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Geographical coordinates are very important for showing where you are on the
    earth. Latitudes and longitudes come together to create a two-dimensional grid
    that simulates the earth's surface. Showing the latitude and longitude in a control
    on the map while you are moving the mouse can be a good usage of controls and
    events together.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 4](ch04.html "Chapter 4. Working with Controls"), *Working with
    Controls*, we have seen recipes such as *Adding your own logo as a control*, and
    we have also seen how to use map events in this chapter. In this recipe, we will
    create a control with the help of the `mousemove` event of the map that shows
    the coordinates in real time.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will use the first recipe defined in [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*
    as a template in order to skip the map creation.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source code at `Chapter 5/ch05_coordinate_control.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can easily create a simple control to show the coordinates on mouse moves
    by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will add a CSS class at the style part of the head section. This
    will decorate the coordinate control:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After initializing the map, we will define the control parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add a control to the map with the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we add an event listener to the map to handle the `mousemove` event and
    update the coordinates on each `mousemove` event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to your local URL where your HTML is stored in your favorite browser and
    try to move the mouse. You will see the coordinate control changes in the left-bottom
    corner of the map.![How to do it…](img/8825OT_05_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have successfully created a simple control that shows coordinates on mouse
    moves.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe is a combination of two chapters: [Chapter 4](ch04.html "Chapter 4. Working
    with Controls"), *Working with Controls*, and this chapter. More detailed information
    about controls can be gathered from [Chapter 4](ch04.html "Chapter 4. Working
    with Controls"), *Working with Controls*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As it has been stated earlier, the Google Maps JavaScript API gives us different
    events to listen for, for different purposes. In this recipe, we will use the
    `mousemove` event of the map to get the coordinates of the mouse. The `mousemove`
    event handler has an input parameter to get coordinates. We will get the latitude
    and longitude from the `e.latLng` object with the help of the `lat()` and `lng()`
    functions, respectively. Then, we will fix their decimals to `6` digits in order
    to make an ordered view in the coordinate control with the Math function `toFixed()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: The remaining part of the code is related to simple map creation and creating
    a custom control, which is not the scope of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a simple map in a custom DIV element* recipe of [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding your own logo as a control* recipe of [Chapter 4](ch04.html "Chapter 4. Working
    with Controls"), *Working with Controls*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your own events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Events are very important for JavaScript programming, and all JavaScript frameworks
    and APIs give developers access to some predefined event types related to their
    classes. The Google Maps JavaScript API is doing the same, and it gives us the
    most used event types with their classes. But what if you need a custom event
    type?
  prefs: []
  type: TYPE_NORMAL
- en: The Google Maps JavaScript API has a base class named `google.maps.MVCObject`
    that is the top class that most of the classes inherit. The class is ready for
    using in custom events with the `google.maps.event` namespace.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a custom object with the `google.maps.MVCObject`
    class and bind it to a custom event to create your own events. The usage of the
    custom event cannot be a real-world case, but it will give you an idea about listening
    and firing your own events.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is still using the same map creation process defined in [Chapter
    1](ch01.html "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript
    API Basics*, but there are some additional code blocks to create a table of contents
    (ToC) control and the custom event.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source code at `Chapter 5/ch05_custom_events.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you perform the following steps, you can add and create your own types of
    events:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we add the CSS class of our custom control:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we create a `customObject` variable as a global variable after the `map`
    variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we create `createTOCControl()` to create our table of contents control
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next step is adding another function, named `checkLayers()`, that is the
    function calling from the `onclick` event of the checkboxes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'All the functions are ready to be added to the `initMap()` function. Add the
    following lines after initialization of the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to your local URL where your HTML is stored in your favorite browser and
    see the map. When you click on one of the checkboxes in the table of contents
    control, you will see an alert box with the name of the layer and its status as
    to whether it has been added or removed.![How to do it…](img/8825OT_05_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is the result of the recipe that shows both triggering and listening for
    the custom events defined by yourself.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JavaScript has an inheritance that is one of the core concepts of object-oriented
    programming. This makes your life easier in order not to write the same methods
    again and again.
  prefs: []
  type: TYPE_NORMAL
- en: The Google Maps JavaScript API uses the inheritance of JavaScript both for itself
    and API developers. There are core classes that are the bases for other classes.
    The Google Maps JavaScript API has a base class named `google.maps.MVCObject`
    that all other classes are produced from.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to create a custom class as in previous recipes, you should create
    a class from the `google.maps.MVCObject` class. In this recipe, we just create
    an object from the `MVCObject` class instead of creating a new class. Then, we
    will listen for `customEvent` of this created object just like other events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Firing the custom event is much easier than listening for it. We use the `google.maps.event.trigger()`
    function to fire the event with additional parameters. Parameters should be in
    the JSON object format to send it to the event handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Creating a custom event in this recipe cannot be directly used in real-life
    cases, but this should give you an idea about how to use them. Events should be
    used carefully in order to use memory efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a simple map in a custom DIV element* recipe of [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding your own logo as a control* recipe of [Chapter 4](ch04.html "Chapter 4. Working
    with Controls"), *Working with Controls*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
