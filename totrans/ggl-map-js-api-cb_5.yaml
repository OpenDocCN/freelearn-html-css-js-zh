- en: Chapter 5. Understanding Google Maps JavaScript API Events
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。理解Google Maps JavaScript API事件
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍：
- en: Creating two synced maps side by side
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建两个并排同步的地图
- en: Getting the coordinates of a mouse click
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取鼠标点击的坐标
- en: Creating a context menu on a map
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在地图上创建上下文菜单
- en: Restricting the map extent
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制地图范围
- en: Creating a control that shows coordinates
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个显示坐标的控制面板
- en: Creating your own events
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建您自己的事件
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: If you have ever worked on JavaScript programming, you should know the importance
    of events. Events are the core of JavaScript. There are events behind interactions
    in web pages. There can be user interactions or browser actions that can be handled
    with the help of events.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您曾经从事JavaScript编程工作，您应该知道事件的重要性。事件是JavaScript的核心。网页交互背后都有事件。可能有用户交互或浏览器操作可以通过事件来处理。
- en: 'For example, in every code from the beginning of this book, we have wrote something
    like the following line of code:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在这本书的开头每个代码中，我们都写了一些像以下这样的代码行：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This line is a simple form of event definition. This line tells the browser
    to call the `initMap()` function when all the contents are loaded. This event
    is required to start mapping functions after loading all DOM elements.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这行是一个简单的事件定义形式。这行代码告诉浏览器在所有内容加载后调用`initMap()`函数。此事件在加载所有DOM元素后启动映射函数是必需的。
- en: This chapter is about using events in the Google Maps JavaScript API to interact
    with maps in different ways. The Google Maps JavaScript API has the `google.maps.event`
    namespace to work with events. This namespace has static methods to listen to
    events defined in the API. You should check the supported event types of objects
    in the API via the Google Maps API reference documentation.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍如何使用Google Maps JavaScript API中的事件以不同方式与地图交互。Google Maps JavaScript API具有`google.maps.event`命名空间来处理事件。此命名空间具有静态方法来监听API中定义的事件。您应通过Google
    Maps API参考文档检查API中对象的受支持事件类型。
- en: Creating two synced maps side by side
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建两个并排同步的地图
- en: Maps are useful to human beings. With the help of maps, people explore or compare
    their surrounding area. Sometimes they need to compare two maps side by side to
    see the difference in real time. For example, you might want to check a satellite
    imagery side by side with terrain maps to see where the mountains are.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 地图对人类很有用。借助地图，人们可以探索或比较他们周围的环境。有时他们需要并排比较两个地图以实时查看差异。例如，您可能想并排检查卫星图像和地形图，以查看山脉的位置。
- en: This recipe shows you how to add two maps in the same page and sync them together
    to show the same area and compare them with the help of Google Maps JavaScript
    API events.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱向您展示如何在同一页面上添加两个地图并将它们同步，以显示相同区域，并通过Google Maps JavaScript API事件进行比较。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You already know how to create a map from the previous chapters. So, only additional
    code lines are written.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经知道如何从前面的章节创建地图。因此，只需编写额外的代码行。
- en: You can find the source code at `Chapter 5/ch05_sync_maps.html`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`Chapter 5/ch05_sync_maps.html`中找到源代码。
- en: How to do it…
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'If you want to create two maps that are synced together, you should perform
    the following steps:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想创建两个同步的地图，您应该执行以下步骤：
- en: 'First, add the CSS styles of the `div` objects in the header to show them side
    by side:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在标题中添加`div`对象的CSS样式以显示它们并排：
- en: '[PRE1]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then define two global map variables to access them within event callbacks:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后定义两个全局地图变量以在事件回调中访问它们：
- en: '[PRE2]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next create the function that initializes the left map:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来创建初始化左侧地图的函数：
- en: '[PRE3]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, add the second function that initializes the right map. The contents of
    the functions created before are almost the same, except for variable names, the
    `div` ID, the map type, and timers in event handlers:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加第二个初始化右侧地图的函数。之前创建的函数内容几乎相同，只是变量名、`div` ID、地图类型和事件处理程序中的计时器不同：
- en: '[PRE4]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We now have two maps, and we must initialize both of them at the start, so
    we need a single function to call the previous functions:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在有两个地图，我们必须在开始时初始化它们，因此我们需要一个调用之前函数的单个函数：
- en: '[PRE5]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Call the `initMaps()` function when everything has been loaded on the `load`
    event of the `window` element:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当`window`元素的`load`事件上所有内容都已加载时，调用`initMaps()`函数：
- en: '[PRE6]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Do not forget to add the two `div` objects in HTML tags:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要忘记在HTML标签中添加两个`div`对象：
- en: '[PRE7]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Go to your local URL where your HTML file is stored in your favorite browser
    and see the result. You will see two maps side by side. When you drag or zoom
    in on one map, then the other map is also changed based on the changed one. The
    final map will look like the following screenshot:![How to do it…](img/8825OT_05_01.jpg)
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往你最喜欢的浏览器中存储你的 HTML 文件的本地区址，查看结果。你会看到两个并排的地图。当你拖动或缩放一个地图时，另一个地图也会根据变化而改变。最终的地图将看起来像以下截图：![如何操作…](img/8825OT_05_01.jpg)
- en: As a result of the recipe, we can create two maps that are synced together to
    show the same area of different map types.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个菜谱的结果，我们可以创建两个同步显示不同地图类型相同区域的地图。
- en: How it works...
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The important point in this recipe is to keep two maps in synchronization at
    the same position and zoom level. To achieve this goal, we need to know when the
    map has moved and when the zoom level has changed.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱中的重要点是保持两个地图在相同的位置和缩放级别上同步。为了实现这个目标，我们需要知道地图何时移动以及缩放级别何时发生变化。
- en: The `map` object has different events to trigger. The `center_changed` and `zoom_changed`
    events are two of those events. The `center_changed` event is triggered every
    time the map center is changed. There are also `bounds_changed`, `drag`, `dragstart`,
    and `dragend` events that can be used to achieve our goal, but `center_changed`
    is the simplest one to handle. The `zoom_changed` event is triggered when there
    is a change in the zoom level.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`map` 对象有不同的触发事件。`center_changed` 和 `zoom_changed` 事件是其中两个事件。`center_changed`
    事件在地图中心每次改变时都会触发。还有 `bounds_changed`、`drag`、`dragstart` 和 `dragend` 事件，这些事件也可以用来实现我们的目标，但
    `center_changed` 是处理起来最简单的一个。`zoom_changed` 事件在缩放级别发生变化时触发。'
- en: 'To listen for the events, we need to register these events with the `google.maps.event`
    namespace as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要监听事件，我们需要将这些事件注册到 `google.maps.event` 命名空间中，如下所示：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `addListener()` method gets three parameters; an object to listen, an event
    type, and an event handler. The event handler can be a function that has been
    defined earlier or an anonymous function used only here. In this example, we listen
    for the left map object—`map1`—for the `center_changed` event and set the center
    of the right map to the center of the left map. The zoom part also works in the
    same way. When the zoom level of the left map changes, the event handler of `zoom_changed`
    sets the zoom level of the right map to the zoom level of the left map.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`addListener()` 方法接收三个参数；一个要监听的对象、一个事件类型和一个事件处理器。事件处理器可以是一个之前定义过的函数或者仅在此处使用的匿名函数。在这个例子中，我们监听左地图对象——`map1`——的
    `center_changed` 事件，并将右地图的中心设置为左地图的中心。缩放部分也是以同样的方式工作。当左地图的缩放级别发生变化时，`zoom_changed`
    事件的处理器将右地图的缩放级别设置为左地图的缩放级别。'
- en: 'This should be the same for the right map, but the code used for event handling
    in the right map is a bit different from that of the left one because of an infinite
    event loop. If we use the same code for event handling, we create an infinite
    loop between the two maps. This loop will cause your browser to crash in most
    cases. To avoid this infinite loop, we create a small break (10 milliseconds)
    between events. This break will solve all the problems and users will not recognize
    the difference. This break is created with the `setTimeout()` function of JavaScript.
    There is also a better version to use instead of using timeouts, which is explained
    in the *There''s more...* section of this recipe. The recipe covers the ways to
    use map events in these cases:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于右地图也应该是一样的，但由于无限事件循环，用于右地图的事件处理代码与左地图的代码略有不同。如果我们使用相同的事件处理代码，会在两个地图之间创建一个无限循环。这个循环会导致你的浏览器在大多数情况下崩溃。为了避免这个无限循环，我们在事件之间创建一个小的中断（10
    毫秒）。这个中断将解决所有问题，用户不会注意到差异。这个中断是通过 JavaScript 的 `setTimeout()` 函数创建的。此外，还有更好的版本可以使用，这在本菜谱的
    *还有更多…* 部分中解释。这个菜谱涵盖了在这些情况下使用地图事件的方法：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: There's more…
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'In this recipe, our events are being listened for continuously, which is as
    expected. But what if you need to listen for an event for a limited time? There
    are two options. One option is that of storing the returning `google.maps.MapEventListener`
    object of the `addListener()` function and removing it when needed as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们的事件正在持续监听，这是预期的。但如果你需要监听一个有限时间的事件呢？有两种选择。一种选择是存储 `addListener()` 函数返回的
    `google.maps.MapEventListener` 对象，并在需要时移除它，如下所示：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Another option to remove event listeners is to use the `clearInstanceListeners()`
    or `clearListeners()` functions of the `google.maps.event` namespace, which are
    used for removing all listeners for all events for the given instance or removing
    all listeners for the given event for the given instance, respectively. You can
    look at the following code for example usages:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种移除事件监听器的方法是使用`google.maps.event`命名空间中的`clearInstanceListeners()`或`clearListeners()`函数，分别用于移除给定实例的所有事件监听器或移除给定实例的指定事件监听器。以下代码示例了如何使用：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The Google Maps JavaScript API also provides other methods to listen for DOM
    events, named `addDomListener()` under the `google.maps.event` namespace. There
    is also the `addListenerOnce()` method to listen for events once.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps JavaScript API还提供了其他方法来监听DOM事件，在`google.maps.event`命名空间下命名为`addDomListener()`。还有一个`addListenerOnce()`方法用于监听一次事件。
- en: 'There is also an alternate method to sync maps. The following code block just
    syncs two maps'' events:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 同步地图还有另一种方法。以下代码块仅同步两个地图的事件：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: See also
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a simple map in a custom DIV element* recipe of [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章. Google Maps JavaScript API基础知识")的*在自定义DIV元素中创建简单地图*食谱中，*Google
    Maps JavaScript API基础知识*
- en: Getting the coordinates of a mouse click
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取鼠标点击的坐标
- en: The mouse has been the most effective input device for computers for a long
    time. Nowadays, there is an attempt to change it with touchscreens, but nothing
    can be compared to the ease of use that a mouse provides.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 鼠标长期以来一直是计算机最有效的输入设备。如今，有人试图用触摸屏来改变它，但没有任何东西能比得上鼠标提供的易用性。
- en: The mouse has different interactions on maps, such as click, double-click, right-click,
    move, and drag. These events can be handled in different ways to interact with
    users.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 鼠标在地图上有不同的交互方式，如点击、双击、右键点击、移动和拖动。这些事件可以通过不同的方式处理，以与用户交互。
- en: 'In this recipe, we will get the coordinates of a mouse click on any point on
    the map. Users will see an info window upon a mouse click, which can be seen in
    the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将获取地图上任何点的鼠标点击坐标。用户在鼠标点击时将看到一个信息窗口，如下面的截图所示：
- en: '![Getting the coordinates of a mouse click](img/8825OT_05_02.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![获取鼠标点击的坐标](img/8825OT_05_02.jpg)'
- en: This is how we achieve the creation of a map that is listening for each mouse
    click to get coordinates.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们实现创建一个地图，该地图可以监听每个鼠标点击以获取坐标的方法。
- en: Getting ready
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We assume that you already know how to create a simple map. We will only cover
    the code that is needed for showing an info window upon mouse clicks.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设您已经知道如何创建一个简单的地图。我们只会介绍在鼠标点击时显示信息窗口所需的代码。
- en: You can find the source code at `Chapter 5/ch05_getting_coordinates.html`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`第5章/ch05_getting_coordinates.html`中找到源代码。
- en: How to do it…
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'If you perform the following steps, you can get the coordinates of each mouse
    click on the map:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您执行以下步骤，您就可以获取地图上每个鼠标点击的坐标：
- en: 'First, we must add an `infowindow` variable at the beginning of the JavaScript
    code to use as a global object:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们必须在JavaScript代码的开头添加一个`infowindow`变量，用作全局对象：
- en: '[PRE13]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, add the following lines to the `initMap()` function after the initialization
    of the `map` object:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`map`对象初始化之后，将以下行添加到`initMap()`函数中：
- en: '[PRE14]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Go to your local URL where your HTML is stored in your favorite browser and
    click on the map to see the result. Each mouse click opens an info window with
    the coordinate information.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您最喜欢的浏览器中访问本地URL，其中存储着您的HTML文件，并点击地图以查看结果。每次鼠标点击都会打开一个包含坐标信息的信息窗口。
- en: How it works...
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'After initializing the map, we create an event listener to handle mouse clicks
    on the map:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始化地图后，我们创建一个事件监听器来处理地图上的鼠标点击事件：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `click` event type has a different handler than other events. The handler
    has an input parameter that is an object derived from the `google.maps.MouseEvent`
    class. This object has a property named `LatLng`, which is an instance of the
    `google.maps.latLng` class. This property gives us the coordinates of the mouse
    click.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`click`事件类型与其他事件有不同的处理程序。处理程序有一个输入参数，是一个从`google.maps.MouseEvent`类派生的对象。该对象有一个名为`LatLng`的属性，它是`google.maps.latLng`类的实例。该属性给出了鼠标点击的坐标。'
- en: 'We want to show an info window upon each mouse click, and we want to see only
    one info window. To achieve this, we create `infowindow` as a global variable
    at the beginning of the JavaScript code and check whether it is still defined
    or not. If there is an `infowindow` object from previous clicks, then we will
    close it as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望在每次鼠标点击时显示一个信息窗口，并且只想看到一个信息窗口。为了实现这一点，我们在JavaScript代码的开头创建一个全局变量`infowindow`，并检查它是否仍然被定义。如果之前点击有一个`infowindow`对象，那么我们将按照以下方式关闭它：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Upon each mouse click, we will create a new `infowindow` object with new contents,
    coordinates, and position from the `e.latLng` object. After creating `infowindow`,
    we will just open it on the map defined previously:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次鼠标点击时，我们将从`e.latLng`对象创建一个新的`infowindow`对象，包含新的内容、坐标和位置。创建`infowindow`后，我们只需在之前定义的地图上打开它：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: There's more…
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: 'As already mentioned, some event types have different event handlers that can
    get a parameter. This parameter is an object derived from the `google.maps.MouseEvent`
    class. The `google.maps.Map` class has the following events that return `MouseEvent`
    objects to the handlers: `click`, `dblclick`, `mousemove`, `mouseout`, `mouseover`,
    and `rightclick`.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，某些事件类型有不同的事件处理程序，可以获取一个参数。这个参数是从`google.maps.MouseEvent`类派生出的一个对象。`google.maps.Map`类有以下事件，它们将`MouseEvent`对象返回给处理程序：`click`、`dblclick`、`mousemove`、`mouseout`、`mouseover`和`rightclick`。
- en: See also
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a simple map in a custom DIV element* recipe of [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html "第1章. Google Maps JavaScript API基础知识")中“在自定义DIV元素中创建简单地图”的配方，*Google
    Maps JavaScript API基础知识*'
- en: Creating a context menu on a map
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在地图上创建上下文菜单
- en: Using menus in a user interface is a way to communicate with users. Users select
    a menu item to interact with web applications. Some of the menu types can be accessible
    from a visible place, but some of them can be accessible with some extra actions,
    such as **context menus**. Context menus usually appear on applications with a
    right-click of the mouse.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户界面中使用菜单是与用户沟通的一种方式。用户选择菜单项以与Web应用程序交互。某些菜单类型可以从可见位置访问，但某些菜单类型需要一些额外操作才能访问，例如**上下文菜单**。上下文菜单通常在鼠标右键单击的应用程序中显示。
- en: In this recipe, we will create a context menu on the map that opens when we
    right-click on the map. This menu includes zoom in, zoom out, and add marker functions.
    You will also get the position of the right-click to use it in some geo methods
    such as adding a marker in this example.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将在地图上创建一个上下文菜单，当我们右键单击地图时，该菜单将打开。此菜单包括放大、缩小和添加标记功能。您还将获得右键单击的位置，以便在例如添加标记的某些地理方法中使用它。
- en: Getting ready
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe is also like the other recipes in that we assume you already know
    how to create a simple map. So, we will only show extra lines of code to add the
    context menu.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方与其他配方类似，我们假设您已经知道如何创建一个简单的地图。因此，我们只会显示添加上下文菜单的额外代码行。
- en: You can find the source code at `Chapter 5/ch05_context_menu.html`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`Chapter 5/ch05_context_menu.html`中找到源代码。
- en: How to do it…
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'The following are the steps we need to create a map with a context menu to
    show extra commands:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们需要创建一个带有上下文菜单以显示额外命令的地图的步骤：
- en: 'Let''s start by adding CSS styles of the context menu to the header of HTML:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从向HTML的标题中添加上下文菜单的CSS样式开始：
- en: '[PRE18]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The next step is to define the global variables for the context menu and coordinates:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是定义上下文菜单和坐标的全局变量：
- en: '[PRE19]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then, we will add lines that define the context menu class. The details will
    be explained later:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将添加定义上下文菜单类的行。详细信息将在稍后解释：
- en: '[PRE20]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, add the functions to be used in the context menu:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加上下文菜单中要使用的函数：
- en: '[PRE21]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add the following code block after initializing the `map` object. This block
    will create an object from the `ContextMenuClass` class and start listening in
    the `map` object for the right-click to show the `contextMenu` object created:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在初始化`map`对象后添加以下代码块。此块将从`ContextMenuClass`类创建一个对象，并在`map`对象中监听右键单击以显示创建的`contextMenu`对象：
- en: '[PRE22]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Go to your local URL where your HTML is stored in your favorite browser and
    right-click to see the context menu.![How to do it…](img/8825OT_05_03.jpg)
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往您在最喜欢的浏览器中存储HTML的本地URL，并右键单击以查看上下文菜单。![如何操作…](img/8825OT_05_03.jpg)
- en: As it can be seen in the preceding screenshot, we created our simple map with
    the context menu.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述截图所示，我们已创建带有上下文菜单的简单地图。
- en: How it works...
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: JavaScript is a prototype-based scripting language that supports object-oriented
    programming in a different way compared to classical server-side programming languages.
    There isn't any classic class definition, but you have prototypes to create classes
    or inherit other classes. This book is not a JavaScript book. If you have any
    questions about these concepts of JavaScript, you should google it to learn the
    details.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 是一种基于原型的脚本语言，它以不同于经典服务器端编程语言的方式支持面向对象编程。没有经典的类定义，但你可以使用原型来创建类或继承其他类。这本书不是一本
    JavaScript 书。如果你对 JavaScript 的这些概念有任何疑问，你应该通过 google 搜索来学习详细信息。
- en: 'The Google Maps JavaScript API has a `google.maps.OverlayView` class to create
    your own custom types of overlay objects on the map. We will inherit this class
    to create our own context menu class. First, we will define the `ContextMenu`
    class with its constructor as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps JavaScript API 有一个 `google.maps.OverlayView` 类，用于在地图上创建你自己的自定义类型的覆盖对象。我们将继承这个类来创建我们自己的上下文菜单类。首先，我们将定义
    `ContextMenu` 类及其构造函数如下：
- en: '[PRE23]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then, we will set a prototype of the `ContextMenu` class to an object created
    from the `google.maps.OverlayView` class:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将 `ContextMenu` 类的原型设置为从 `google.maps.OverlayView` 类创建的对象：
- en: '[PRE24]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The `google.maps.OverlayView` class has three methods to be implemented in
    our newly created class: `onAdd()`, `draw()`, and `onRemove()`. In addition to
    these methods, we add two methods to show or hide the context menu. Each method''s
    mission is explained as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`google.maps.OverlayView` 类在我们新创建的类中需要实现三个方法：`onAdd()`、`draw()` 和 `onRemove()`。除此之外，我们添加了两个方法来显示或隐藏上下文菜单。每个方法的任务如下所述：'
- en: '`onAdd()`: The creation of DOM objects and appending them as children of the
    panes is done in this method. We will create a `div` object with the CSS class
    defined at the top of the HTML. Menu items are also added to this `div` object
    with the `innerHTML` property. We will also create an event listener of map clicks
    to remove the context menu from other actions:'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onAdd()`：在这个方法中完成 DOM 对象的创建并将它们作为 panes 的子元素添加。我们将创建一个具有在 HTML 顶部定义的 CSS 类的
    `div` 对象。菜单项也通过 `innerHTML` 属性添加到这个 `div` 对象中。我们还将创建一个地图点击的事件监听器，以从其他操作中移除上下文菜单：'
- en: '[PRE25]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`draw()`: The positioning of created elements is done via this method, but
    we skip steps to fill this method. We create `show()` and `hide()` methods instead
    of adding or removing the context menu each time:'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`draw()`：通过这个方法完成创建的元素的位置设置，但我们跳过填充这个方法的步骤。我们创建 `show()` 和 `hide()` 方法，而不是每次添加或移除上下文菜单：'
- en: '[PRE26]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '`onRemove()`: Removing the created elements is done in this method:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onRemove()`：在这个方法中完成创建的元素的移除：'
- en: '[PRE27]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '`show(coord)`: Showing the context menu when we right-click on the mouse is
    done in this method. The input parameter is a `latLng` object, so we have to convert
    it to pixel coordinates in the `div` element. To achieve this, we need extra objects
    created from the `google.maps.MapCanvasProjection` class. This class has a method
    named `fromLatLngToDivPixel` to convert the `latLng` object to simple `google.maps.Point`
    objects. This object is used to set the `x` and `y` coordinates of the context
    menu from the top-left corner of the map. We also change the visibility style
    of `div` to show on the map:'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`show(coord)`：在这个方法中完成在鼠标右键点击时显示上下文菜单。输入参数是一个 `latLng` 对象，因此我们必须将其转换为 `div`
    元素中的像素坐标。为了实现这一点，我们需要从 `google.maps.MapCanvasProjection` 类创建额外的对象。这个类有一个名为 `fromLatLngToDivPixel`
    的方法，可以将 `latLng` 对象转换为简单的 `google.maps.Point` 对象。这个对象用于设置从地图左上角开始的上下文菜单的 `x` 和
    `y` 坐标。我们还将 `div` 的可见性样式更改为在地图上显示：'
- en: '[PRE28]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '`hide()`: Hiding the context menu is done in this method. We just change the
    visibility property of the context menu `div` to `hidden` to hide it:'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hide()`：在这个方法中完成上下文菜单的隐藏。我们只需将上下文菜单 `div` 的可见性属性更改为 `hidden` 以隐藏它：'
- en: '[PRE29]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The `ContextMenuClass` class has been defined earlier, but there isn''t any
    object created from this class. We created a `contextMenu` object from our new
    class as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`ContextMenuClass` 类已经定义，但还没有从这个类创建任何对象。我们根据新类创建了一个 `contextMenu` 对象，如下所示：'
- en: '[PRE30]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In order to use this `contextMenu` object, we should listen for the `map` object''s
    `rightclick` event and show the context menu in its handler. We will also update
    the global variable `lastCoordinate` to keep the last right-click coordinate to
    use it in the `createMarker()` function:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用这个 `contextMenu` 对象，我们应该监听 `map` 对象的 `rightclick` 事件并在其处理程序中显示上下文菜单。我们还将更新全局变量
    `lastCoordinate` 以保持最后一次右键点击的坐标，以便在 `createMarker()` 函数中使用：
- en: '[PRE31]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Context menu functions are covered in previous chapters, so they are not explained
    here. You can also create other types of overlays like in this recipe with the
    help of the `google.maps.OverlayView` class.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文菜单功能在之前的章节中已有介绍，因此这里不再解释。你还可以借助`google.maps.OverlayView`类创建其他类型的覆盖层，就像本食谱中这样。
- en: Note
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**More on JavaScript prototype-based inheritance**'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多关于JavaScript基于原型的继承**'
- en: 'If you are interested in the details of JavaScript prototype-based inheritance,
    please get more details from the following page: [http://javascript.crockford.com/prototypal.html](http://javascript.crockford.com/prototypal.html).'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对JavaScript基于原型的继承细节感兴趣，请从以下页面获取更多详细信息：[http://javascript.crockford.com/prototypal.html](http://javascript.crockford.com/prototypal.html)。
- en: 'This article is written by *Douglas Crockford*, who is the guru of JavaScript
    and the father of the JSON format. I suggest you read his popular JavaScript book
    *JavaScript: The Good Parts* to delve deeper into JavaScript.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '本文由*道格拉斯·克罗克福德*撰写，他是JavaScript的大师和JSON格式的创始人。我建议你阅读他的流行JavaScript书籍 *JavaScript:
    The Good Parts*，以深入了解JavaScript。'
- en: See also
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a simple map in a custom DIV element* recipe of [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html "第1章. Google Maps JavaScript API基础知识") *Google Maps JavaScript
    API基础知识* 的 *在自定义DIV元素中创建简单地图* 食谱'
- en: The *Changing map properties programmatically* recipe of [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html "第1章. Google Maps JavaScript API基础知识") *Google Maps JavaScript
    API基础知识* 的 *通过编程更改地图属性* 食谱'
- en: The *Adding markers to maps* recipe of [Chapter 3](ch03.html "Chapter 3. Adding
    Vector Layers"), *Adding Vector Layers*
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第3章](ch03.html "第3章. 添加矢量图层") *添加矢量图层* 的 *向地图添加标记* 食谱'
- en: Restricting the map extent
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限制地图范围
- en: Google Maps has a worldwide extent that shows almost every street on the earth.
    You can use the Google Maps JavaScript API for the whole earth, but sometimes
    you need to show only the related area in the mapping application. You can zoom
    to a fixed location, but this doesn't stop users from moving to another place
    that is not in the extent of your application.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps拥有全球范围，几乎显示了地球上每一条街道。你可以使用Google Maps JavaScript API覆盖整个地球，但有时你需要在地图应用程序中仅显示相关区域。你可以放大到固定位置，但这并不能阻止用户移动到应用程序范围之外的其他地方。
- en: In this recipe, we will listen for map events to check if we are in an allowed
    extent. If we are not in the allowed extent, then we move the map to the allowed
    center within the extent. We used Turkey's geographic extent in this recipe.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将监听地图事件以检查我们是否在允许的范围内。如果我们不在允许的范围内，那么我们将地图移动到该范围内的允许中心。本食谱中我们使用了土耳其的地理范围。
- en: Getting ready
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe is still using the same map creation process defined in [Chapter
    1](ch01.html "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript
    API Basics*, but there are some additional code blocks to listen for map events
    and to check for the restricted extent.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱仍在使用[第1章](ch01.html "第1章. Google Maps JavaScript API基础知识")中定义的相同地图创建过程，*Google
    Maps JavaScript API基础知识*，但有一些额外的代码块用于监听地图事件和检查受限范围。
- en: You can find the source code at `Chapter 5/ch05_restrict_extent.html`.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`Chapter 5/ch05_restrict_extent.html`找到源代码。
- en: How to do it…
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Restricting the map extent is quite easy if you perform the following steps:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你执行以下步骤，限制地图范围相当简单：
- en: 'First, we must add the `allowedMapBounds` and `allowedZoomLevel` variables
    as global variables after defining the `map` variable. This is the geographic
    boundary of Turkey:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们必须在定义`map`变量后将`allowedMapBounds`和`allowedZoomLevel`变量作为全局变量添加。这是土耳其的地理边界：
- en: '[PRE32]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The next step is to listen for the `drag` and `zoom_changed` events of the
    map after initializing the map:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是在初始化地图后监听地图的`drag`和`zoom_changed`事件：
- en: '[PRE33]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Then, we create a `checkBounds()` function to handle events when they are fired.
    The first part of the function is to check for zoom levels. We choose `6` to minimize
    the zoom level of the map for this recipe:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们创建一个`checkBounds()`函数来处理事件触发时的情况。函数的第一部分是检查缩放级别。我们选择`6`以最小化本食谱中地图的缩放级别：
- en: '[PRE34]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The following lines of code will add to the `checkBounds()` function to get
    the allowed bounds, recent bounds, and recent center of the map:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码行将添加到`checkBounds()`函数中，以获取允许的范围、最近的范围和地图的最近中心：
- en: '[PRE35]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The important part of the `checkBounds()` function is the comparing of allowed
    bounds with recent bounds. If there is a difference between `centerX` and `centerY`
    with the `nCenterX` and `nCenterY` variables, then we move the map to the center
    that is within the allowed bounds:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`checkBounds()` 函数的重要部分是允许边界与最近边界的比较。如果 `centerX` 和 `centerY` 与 `nCenterX`
    和 `nCenterY` 变量之间存在差异，则我们将地图移动到允许边界内的中心位置：'
- en: '[PRE36]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Go to your local URL where your HTML is stored in your favorite browser and
    try to move the map of other countries near Turkey. You will see that the map
    moves back to its previous position that is allowed within the boundaries defined
    at the top.![How to do it…](img/8825OT_05_04.jpg)
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往您在最喜欢的浏览器中存储 HTML 的本地 URL，并尝试移动土耳其附近的其他国家地图。您会看到地图会回到顶部定义的边界内允许的先前位置。![如何操作…](img/8825OT_05_04.jpg)
- en: As it can be seen in the preceding screenshot, you can easily restrict the map
    extent by events provided by the Google Maps JavaScript API.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述截图所示，您可以通过 Google Maps JavaScript API 提供的事件轻松限制地图范围。
- en: How it works...
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'As it is stated in previous event recipes, the Google Maps JavaScript API gives
    the developer many events that are related to mapping activities. The `drag` and
    `zoom_changed` events are the ones we are using in this recipe to listen for.
    This time, we do not create anonymous event handlers because we use the same event
    handler for two event listeners, named `checkBounds()`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述事件配方所述，Google Maps JavaScript API 为开发者提供了许多与地图活动相关的事件。我们在这个配方中使用 `drag` 和
    `zoom_changed` 事件来监听。这次，我们并没有创建匿名事件处理器，因为我们为两个事件监听器使用相同的事件处理器，名为 `checkBounds()`：
- en: '[PRE37]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The Google Maps JavaScript API has the `google.maps.LatLngBounds` class for
    defining geographical bounds. This class'' constructor gets two objects as parameters
    created from the `google.maps.LatLng` class. The parameters are the geographical
    coordinates of the south-west and north-east corners respectively. This creates
    a geographical boundary for our application. South-west has the minimum latitude
    and longitude while on the other side, north-east has the maximum latitude and
    longitude:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps JavaScript API 有 `google.maps.LatLngBounds` 类用于定义地理边界。该类的构造函数接收两个参数，这两个参数是由
    `google.maps.LatLng` 类创建的对象。参数分别是西南角和东北角的地理坐标。这为我们应用程序创建了一个地理边界。西南角具有最低的纬度和经度，而东北角则具有最高的纬度和经度：
- en: '[PRE38]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The main trick in this recipe is in the `checkBounds()` function. First, we
    get the minimum and maximum latitudes and longitudes of the allowed bounds and
    recent bounds. The `NE` label is the maximum value and the `SW` label is the minimum
    value of latitudes and longitudes:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方中的主要技巧在于 `checkBounds()` 函数。首先，我们获取允许边界和最近边界的最小和最大纬度和经度。`NE` 标签是纬度和经度的最大值，而
    `SW` 标签是纬度和经度的最小值：
- en: '[PRE39]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The center of the map is used for both checking the difference and centering
    the map according to this value. The `nCenterX` and `nCenterY` values are used
    for checking if there is a change in the `centerX` and `centerY` values. The `if`
    statement checks for the recent values and allowed values. If the map is going
    out of the allowed bounds, it will change the `centerX` or `centerY` values:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 地图的中心用于检查差异并根据此值定位地图。`nCenterX` 和 `nCenterY` 值用于检查 `centerX` 和 `centerY` 值是否有变化。`if`
    语句检查最近值和允许值。如果地图超出允许的范围，它将改变 `centerX` 或 `centerY` 值：
- en: '[PRE40]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'If there is a change in the `centerX` or `centerY` values, then we must keep
    the map in the bounds with the help of the `panTo()` method; otherwise, do nothing
    using `return`:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `centerX` 或 `centerY` 值发生变化，则我们必须使用 `panTo()` 方法将地图保持在边界内；否则，使用 `return`
    不做任何操作：
- en: '[PRE41]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: There may be different ways to check the allowed bounds, such as only checking
    the center of the map, but this method will not limit the exact bounds you want.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 检查允许范围可能有不同的方法，例如只检查地图的中心，但这种方法不会限制你想要的精确范围。
- en: See also
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a simple map in a custom DIV element* recipe of [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html "第1章。Google Maps JavaScript API 基础")中 *“在自定义 DIV 元素中创建简单地图”*
    的配方，*Google Maps JavaScript API 基础*'
- en: The *Changing map properties programmatically* recipe of [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html "第1章。Google Maps JavaScript API 基础")中 *“通过编程更改地图属性”* 的配方，*Google
    Maps JavaScript API 基础*'
- en: Creating a control that shows coordinates
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建显示坐标的控制
- en: Geographical coordinates are very important for showing where you are on the
    earth. Latitudes and longitudes come together to create a two-dimensional grid
    that simulates the earth's surface. Showing the latitude and longitude in a control
    on the map while you are moving the mouse can be a good usage of controls and
    events together.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 地理坐标对于显示你在地球上的位置非常重要。纬度和经度结合在一起形成一个二维网格，模拟地球表面。当你移动鼠标时，在地图上的控件中显示纬度和经度可以是一个很好的控件和事件结合的用法。
- en: In [Chapter 4](ch04.html "Chapter 4. Working with Controls"), *Working with
    Controls*, we have seen recipes such as *Adding your own logo as a control*, and
    we have also seen how to use map events in this chapter. In this recipe, we will
    create a control with the help of the `mousemove` event of the map that shows
    the coordinates in real time.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](ch04.html "第4章。使用控件")，*使用控件*中，我们看到了如*将自定义标志作为控件添加*的配方，并且我们也在本章中看到了如何使用地图事件。在这个配方中，我们将利用地图的`mousemove`事件创建一个显示实时坐标的控件。
- en: Getting ready
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will use the first recipe defined in [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*
    as a template in order to skip the map creation.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将使用[第1章](ch01.html "第1章。Google Maps JavaScript API基础知识")，*Google Maps
    JavaScript API基础知识*中定义的第一个配方作为模板，以跳过地图创建。
- en: You can find the source code at `Chapter 5/ch05_coordinate_control.html`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`第5章/ch05_coordinate_control.html`中找到源代码。
- en: How to do it…
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'You can easily create a simple control to show the coordinates on mouse moves
    by performing the following steps:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过以下步骤轻松创建一个简单的控件，在鼠标移动时显示坐标：
- en: 'First, we will add a CSS class at the style part of the head section. This
    will decorate the coordinate control:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将在head部分的样式部分添加一个CSS类，这将装饰坐标控件：
- en: '[PRE42]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'After initializing the map, we will define the control parameters:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在初始化地图后，我们将定义控件参数：
- en: '[PRE43]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Then, add a control to the map with the following line:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用以下行向地图添加控件：
- en: '[PRE44]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now, we add an event listener to the map to handle the `mousemove` event and
    update the coordinates on each `mousemove` event:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们向地图添加一个事件监听器来处理`mousemove`事件并在每次`mousemove`事件中更新坐标：
- en: '[PRE45]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Go to your local URL where your HTML is stored in your favorite browser and
    try to move the mouse. You will see the coordinate control changes in the left-bottom
    corner of the map.![How to do it…](img/8825OT_05_05.jpg)
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往您在最喜欢的浏览器中存储HTML的本地URL，并尝试移动鼠标。您将看到坐标控件在地图的左下角发生变化。![如何做到这一点…](img/8825OT_05_05.jpg)
- en: We have successfully created a simple control that shows coordinates on mouse
    moves.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功创建了一个简单的控件，可以在鼠标移动时显示坐标。
- en: How it works...
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'This recipe is a combination of two chapters: [Chapter 4](ch04.html "Chapter 4. Working
    with Controls"), *Working with Controls*, and this chapter. More detailed information
    about controls can be gathered from [Chapter 4](ch04.html "Chapter 4. Working
    with Controls"), *Working with Controls*.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方是两个章节的结合：[第4章](ch04.html "第4章。使用控件")，*使用控件*，以及本章。更多关于控件的信息可以从[第4章](ch04.html
    "第4章。使用控件")，*使用控件*中获得。
- en: 'As it has been stated earlier, the Google Maps JavaScript API gives us different
    events to listen for, for different purposes. In this recipe, we will use the
    `mousemove` event of the map to get the coordinates of the mouse. The `mousemove`
    event handler has an input parameter to get coordinates. We will get the latitude
    and longitude from the `e.latLng` object with the help of the `lat()` and `lng()`
    functions, respectively. Then, we will fix their decimals to `6` digits in order
    to make an ordered view in the coordinate control with the Math function `toFixed()`:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Google Maps JavaScript API为我们提供了不同的事件来监听，用于不同的目的。在这个配方中，我们将使用地图的`mousemove`事件来获取鼠标的坐标。`mousemove`事件处理程序有一个输入参数来获取坐标。我们将使用`lat()`和`lng()`函数分别从`e.latLng`对象中获取纬度和经度。然后，我们将使用Math函数`toFixed()`将它们的十进制数固定为`6`位，以便在坐标控件中有一个有序的视图：
- en: '[PRE46]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The remaining part of the code is related to simple map creation and creating
    a custom control, which is not the scope of this chapter.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的剩余部分与简单地图创建和创建自定义控件有关，但这不是本章的范围。
- en: See also
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考信息
- en: The *Creating a simple map in a custom DIV element* recipe of [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在自定义DIV元素中创建简单地图的配方](ch01.html "第1章。Google Maps JavaScript API基础知识")，*Google
    Maps JavaScript API基础知识*中的*创建简单地图*配方'
- en: The *Adding your own logo as a control* recipe of [Chapter 4](ch04.html "Chapter 4. Working
    with Controls"), *Working with Controls*
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第4章](ch04.html "第4章。使用控件")，“使用控件”中的*添加您的自定义徽标作为控件*菜谱'
- en: Creating your own events
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您自己的事件
- en: Events are very important for JavaScript programming, and all JavaScript frameworks
    and APIs give developers access to some predefined event types related to their
    classes. The Google Maps JavaScript API is doing the same, and it gives us the
    most used event types with their classes. But what if you need a custom event
    type?
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 事件对于JavaScript编程非常重要，所有的JavaScript框架和API都为开发者提供了访问与其类相关的预定义事件类型的权限。Google Maps
    JavaScript API也在做同样的事情，它为我们提供了最常用的与类相关的事件类型。但如果你需要一个自定义事件类型呢？
- en: The Google Maps JavaScript API has a base class named `google.maps.MVCObject`
    that is the top class that most of the classes inherit. The class is ready for
    using in custom events with the `google.maps.event` namespace.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps JavaScript API有一个名为 `google.maps.MVCObject` 的基类，这是大多数类继承的顶级类。该类已准备好在
    `google.maps.event` 命名空间中用于自定义事件。
- en: In this recipe, we will create a custom object with the `google.maps.MVCObject`
    class and bind it to a custom event to create your own events. The usage of the
    custom event cannot be a real-world case, but it will give you an idea about listening
    and firing your own events.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用 `google.maps.MVCObject` 类创建一个自定义对象，并将其绑定到自定义事件以创建您自己的事件。自定义事件的用法可能不是一个真实世界的案例，但它会给你一个关于监听和触发您自己的事件的思路。
- en: Getting ready
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe is still using the same map creation process defined in [Chapter
    1](ch01.html "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript
    API Basics*, but there are some additional code blocks to create a table of contents
    (ToC) control and the custom event.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱仍然使用在[第1章](ch01.html "第1章。Google Maps JavaScript API基础知识")，“Google Maps
    JavaScript API基础知识”中定义的相同的地图创建过程，但有一些额外的代码块用于创建目录（ToC）控件和自定义事件。
- en: You can find the source code at `Chapter 5/ch05_custom_events.html`.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 `Chapter 5/ch05_custom_events.html` 找到源代码。
- en: How to do it…
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'If you perform the following steps, you can add and create your own types of
    events:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你执行以下步骤，你可以添加和创建你自己的事件类型：
- en: 'First, we add the CSS class of our custom control:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们添加我们自定义控件的CSS类：
- en: '[PRE47]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Now, we create a `customObject` variable as a global variable after the `map`
    variable:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们在 `map` 变量之后创建一个 `customObject` 变量作为全局变量：
- en: '[PRE48]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Then, we create `createTOCControl()` to create our table of contents control
    as follows:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们创建 `createTOCControl()` 来创建我们的目录控件，如下所示：
- en: '[PRE49]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The next step is adding another function, named `checkLayers()`, that is the
    function calling from the `onclick` event of the checkboxes:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是添加另一个名为 `checkLayers()` 的函数，该函数是从复选框的 `onclick` 事件中调用的函数：
- en: '[PRE50]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'All the functions are ready to be added to the `initMap()` function. Add the
    following lines after initialization of the map:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有函数都准备好添加到 `initMap()` 函数中。在初始化地图后添加以下行：
- en: '[PRE51]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Go to your local URL where your HTML is stored in your favorite browser and
    see the map. When you click on one of the checkboxes in the table of contents
    control, you will see an alert box with the name of the layer and its status as
    to whether it has been added or removed.![How to do it…](img/8825OT_05_06.jpg)
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往您在最喜欢的浏览器中存储HTML的本地URL，查看地图。当你点击内容表中的任何一个复选框时，你会看到一个包含图层名称及其状态的警告框，显示该图层是否已被添加或删除。![如何操作…](img/8825OT_05_06.jpg)
- en: This is the result of the recipe that shows both triggering and listening for
    the custom events defined by yourself.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这是菜谱的结果，展示了触发和监听您自己定义的自定义事件。
- en: How it works...
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: JavaScript has an inheritance that is one of the core concepts of object-oriented
    programming. This makes your life easier in order not to write the same methods
    again and again.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript有一个继承，这是面向对象编程的核心概念之一。这使得你的生活更轻松，以便不必一次又一次地编写相同的方法。
- en: The Google Maps JavaScript API uses the inheritance of JavaScript both for itself
    and API developers. There are core classes that are the bases for other classes.
    The Google Maps JavaScript API has a base class named `google.maps.MVCObject`
    that all other classes are produced from.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps JavaScript API既用于自身也用于API开发者，它使用了JavaScript的继承。有一些核心类是其他类的基类。Google
    Maps JavaScript API有一个名为 `google.maps.MVCObject` 的基类，所有其他类都是从它产生的。
- en: 'If you want to create a custom class as in previous recipes, you should create
    a class from the `google.maps.MVCObject` class. In this recipe, we just create
    an object from the `MVCObject` class instead of creating a new class. Then, we
    will listen for `customEvent` of this created object just like other events:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想创建一个像之前食谱中那样的自定义类，您应该从`google.maps.MVCObject`类创建一个类。在本食谱中，我们只是从`MVCObject`类创建一个对象，而不是创建一个新的类。然后，我们将像监听其他事件一样监听这个创建的对象的`customEvent`：
- en: '[PRE52]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Firing the custom event is much easier than listening for it. We use the `google.maps.event.trigger()`
    function to fire the event with additional parameters. Parameters should be in
    the JSON object format to send it to the event handler:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 触发自定义事件比监听它要容易得多。我们使用`google.maps.event.trigger()`函数来触发事件，并附带额外的参数。参数应以JSON对象格式发送到事件处理器：
- en: '[PRE53]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Creating a custom event in this recipe cannot be directly used in real-life
    cases, but this should give you an idea about how to use them. Events should be
    used carefully in order to use memory efficiently.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中创建自定义事件不能直接用于实际案例，但这应该能给你一个关于如何使用它们的想法。为了高效使用内存，事件应该谨慎使用。
- en: See also
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a simple map in a custom DIV element* recipe of [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html "第1章。Google Maps JavaScript API基础知识")的*在自定义DIV元素中创建简单地图*食谱，*Google
    Maps JavaScript API基础知识*'
- en: The *Adding your own logo as a control* recipe of [Chapter 4](ch04.html "Chapter 4. Working
    with Controls"), *Working with Controls*
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第4章](ch04.html "第4章。使用控件")的*将您的自有标志作为控件添加*食谱，*使用控件*'
