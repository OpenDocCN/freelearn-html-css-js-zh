["```js\nfunction apiCollectionFunction(collection) {\n    if (_.isArray(collection)) {\n        return baseArray(collection);\n    } else {\n        return baseGeneric(collection)\n    }\n}\n```", "```js\nvar collection = _.range(10000000),\n    length = collection.length,\n    i = 0;\n\nconsole.time('for');\nfor (; i < length; i++) {\n    collection[i];\n}\nconsole.timeEnd('for');\n\ni = 0;\n\nconsole.time('while');\nwhile (++i < length) {\n    collection[i];\n}\nconsole.timeEnd('while');\n// →\n// for: 13.459ms\n// while: 10.670ms\n```", "```js\nfunction baseCallback(func, thisArg, argCount) {\n    if (!thisArg) {\n        return func;\n    }\n\n    if (alreadyBound(func)) {\n        return func;\n    }\n\n    if (argCount == 1) {\n        return function(collection) {\n            return func.call(thisArg, collection);\n        }\n    }\n\n    return function() {\n        return func.apply(thisArg, arguments);\n    }\n}\n```", "```js\nvar collection = _.map(_.range(100), function(item) {\n    return {\n        id: item,\n        enabled: !!_.random()\n    };\n});\n\nvar cnt = 1000;\n\nconsole.time('first');\nwhile (--cnt) {\n    _(collection)\n        .filter('enabled')\n        .filter(function(item) {\n            return item.id > 75;\n        })\n        .value();\n}\nconsole.timeEnd('first');\n\ncnt = 1000;\n\nconsole.time('second');\nwhile (--cnt) {\n    _(collection)\n        .filter(function(item) {\n            return item.id > 75;\n        })\n        .filter('enabled')\n        .value();\n}\nconsole.timeEnd('second');\n\ncnt = 1000;\n\nconsole.time('third');\nwhile (--cnt) {\n    _(collection)\n        .filter(function(item) {\n            return item.enabled && item.id > 75;\n        })\n        .value();\n}\nconsole.timeEnd('third');\n// → \n// first: 13.368ms\n// second: 6.263ms\n// third: 3.198ms\n```", "```js\n_.mixin({ sortedFilter: function(collection, value, iteratee) {\n    iteratee = _.callback(iteratee);\n    var index = _.sortedIndex(collection, value, iteratee),\n        result = [],\n        item;\n    while (true) {\n        item = collection[index++];\n        if (_.isEqual(iteratee(item), iteratee(value))) {\n            result.push(item);\n        } else {\n            break;\n        }\n    }\n    return result;\n}});\n\nvar collection = _.map(_.range(100), function(item) {\n    return {\n        id: item,\n        age: _.random(50)\n    };\n});\n\nvar shuffled = _.shuffle(collection),\n    sorted = _.sortBy(shuffled, 'age');\n\nconsole.time('shuffled');\nconsole.log(_.filter(shuffled, { age: 25 }));\nconsole.timeEnd('shuffled');\n// → \n// [\n//   { id: 63, age: 25 },\n//   { id: 6, age: 25 },\n//   { id: 89, age: 25 }\n// ]\n// shuffled: 4.936ms\n\nconsole.time('sorted');\nconsole.log(_.sortedFilter(sorted, { age: 25 }, 'age'));\nconsole.timeEnd('sorted');\n// → \n// [\n//   { id: 63, age: 25 },\n//   { id: 6, age: 25 },\n//   { id: 89, age: 25 }\n// ]\n// sorted: 0.831ms\n```", "```js\nvar collection = _.map(_.range(100), function(item) {\n    return {\n        id: item,\n        age: _.random(50),\n        enabled: !!_.random()\n    };\n});\n\nvar indexed = _.groupBy(collection, function(item) {\n    return +item.enabled * item.age;\n});\n\nconsole.time('where');\nconsole.log(_.where(collection, { age: 25, enabled: true }));\nconsole.timeEnd('where');\n// → \n// [\n//   { id: 23, age: 25, enabled: true },\n//   { id: 89, age: 25, enabled: true }\n// ]\n// where: 5.528ms\n\nconsole.time('indexed');\nconsole.log(indexed[25] || []);\nconsole.timeEnd('indexed');\n// → \n// [\n//   { id: 23, age: 25, enabled: true },\n//   { id: 89, age: 25, enabled: true }\n// ]\n// indexed: 0.712ms\n```", "```js\nfunction callback(item) {\n    return _.extend({\n        version: this.version\n    }, item);\n}\n\nfunction unbound(item) {\n    return _.extend({\n        version: 2.0\n    }, item);\n}\n\nvar cnt = 1000,\n    app = { version: 2.0 },\n    boundCallback = _.callback(callback, app),\n    collection = _.map(_.range(1000), function(item) {\n        return { id: item };\n    });\n\nconsole.time('bound');\nwhile (--cnt) {\n    _.map(collection, boundCallback);\n}\nconsole.timeEnd('bound');\n\ncnt = 1000;\n\nconsole.time('unbound');\nwhile (--cnt) {\n    _.map(collection, unbound);\n}\nconsole.timeEnd('unbound');\n// → \n// bound: 662.418ms\n// unbound: 594.799ms\n```", "```js\nvar collection = _.range(10);\n\n_(collection)\n    .reject(function(item) {\n        console.log('checking ' + item);\n        return item % 2;\n    })\n    .map(function(item) {\n        console.log('mapping ' + item);\n        return item * item;\n     })\n    .value();\n// → \n// checking 1\n// checking 2\n// mapping 2\n// checking 3\n```", "```js\nvar collection = _.range(1000000).reverse();\n\nconsole.time('motivated');\n_.take(_.filter(collection, function(item) {\n    return !(item % 10);\n}), 10);\nconsole.timeEnd('motivated');\n\nconsole.time('lazy');\n_(collection)\n    .filter(function(item) {\n        return !(item % 10);\n    })\n    .take(100)\n    .value();\nconsole.timeEnd('lazy');\n// → \n// motivated: 8.454ms\n// lazy: 0.889ms\n```", "```js\nfunction primeFactors(number) {\n    var factors = [],\n        divisor = 2;\n\n    while (number > 1) {\n        while (number % divisor === 0) {\n            factors.push(divisor);\n            number /= divisor;\n         }\n        divisor += 1;\n        if (divisor * divisor > number) {\n            if (number > 1) {\n                factors.push(number);\n            }\n            break;\n        }\n    }\n    return factors;\n}\n\nvar collection = _.map(_.range(10000), function() {\n        return _.random(1000000, 1000010);\n    }),\n    primes = _.memoize(primeFactors);\n\nconsole.time('primes');\n_.each(collection, function(item) {\n    primeFactors(item);\n});\nconsole.timeEnd('primes');\n\nconsole.time('cached');\n_.each(collection, function(item) {\n    primes(item);\n});\nconsole.timeEnd('cached');\n// → \n// primes: 17.564ms\n// cached: 4.930ms\n```", "```js\nfunction mapAges(collection) {\n    return _.map(collection, 'age');\n}\n\nvar collection = _.map(_.range(100), function(item) {\n        return {\n            id: item,\n            age: _.random(50)\n        };\n    }),\n    ages = _.memoize(mapAges, function(collection) {\n        if (_.has(collection, 'mapAges')) {\n            return collection.mapAges;\n        } else {\n            collection.mapAges = _.uniqueId();\n        }\n    }),\n    cnt = 1000;\n\nconsole.time('mapAges');\nwhile (--cnt) {\n    _.reduce(mapAges(collection), function(result, item) {\n        return result + item;\n    }) / collection.length;\n}\nconsole.timeEnd('mapAges');\n\ncnt = 1000;\n\nconsole.time('ages');\nwhile (--cnt) {\n    _.reduce(ages(collection), function(result, item) {\n        return result + item;\n    }) / collection.length;\n}\nconsole.timeEnd('ages');\n// → \n// mapAges: 6.878ms\n// ages: 3.535ms\n```"]