- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using and Creating Adapters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After developing for several years, you may have a set of common utility functions,
    a collection of other frameworks, and a library of your own scripts. Maintaining
    all of these moving parts may become too entropic for an enterprise project or
    a fleet of microservices. We can restructure our common code into a more generic
    interface, or pattern, and reclassify those scripts as an “adapter” (also known
    as a “plugin”).
  prefs: []
  type: TYPE_NORMAL
- en: Using adapters can save us development time, prevent us from repeating ourselves,
    and help centralize collaboration by maintaining its code base. A few examples
    of an adapter would be transforming text into a specific character ruleset, scaffolding
    a sidecar project such as an administrative dashboard, or providing a caching
    layer.
  prefs: []
  type: TYPE_NORMAL
- en: Sequelize offers a way to extend its behavior by allowing the integration of
    adapters and plugins through a mixture of object prototyping and its lifecycle
    events. Once we become familiar with using pre-existing adapters, we will create
    our own adapter/extension for Sequelize that will generate “slug URLs” for each
    instance within a model.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing, configuring, and integrating AdminJS with Sequelize
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Sequelize with GraphQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our own adapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find the code files of this chapter on GitHub at [https://github.com/PacktPublishing/Supercharging-Node.js-Applications-with-Sequelize/tree/main/ch9](https://github.com/PacktPublishing/Supercharging-Node.js-Applications-with-Sequelize/tree/main/ch9)
  prefs: []
  type: TYPE_NORMAL
- en: Installing, configuring, and integrating AdminJS with Sequelize
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AdminJS is an administrative dashboard that can integrate into various database
    management systems, ORMs, and web frameworks. In addition to AdminJS being able
    to generate charts and tables for your data, it can also create roles and access
    control lists, export reports, and centralize the modeling of **Create, Read,
    Update, Delete** (**CRUD**) operations.
  prefs: []
  type: TYPE_NORMAL
- en: Avalon Airline’s investors want us to have a dashboard that allows us to manage
    flights and tickets, and show basic reporting numbers, such as the total number
    of planes and gross profit. AdminJS seems to be a perfect fit here; we can begin
    by installing the necessary components within Avalon Airline’s root directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the terminal, we can install the packages by executing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `express-formidable` module is required as a peer dependency for the `@adminjs/express`
    package. The `formidable` module is a fast-streaming multipart parser with a low
    memory footprint. For more information on formidable and its capabilities, you
    can refer to its GitHub repository, located at [https://github.com/node-formidable/formidable](https://github.com/node-formidable/formidable).
  prefs: []
  type: TYPE_NORMAL
- en: Depending on which version of `npm` you have installed (eight or above), and
    which version of `@adminjs/sequelize` is installed, you may run into legacy peer
    dependency issues. Due to one of our packages (`@adminjs/sequelize`) requiring
    an old module path for Sequelize (`sequelize` versus `@sequelize/core`) we will
    run into missing dependency issues which could be resolved by enabling `legacy-peer-deps`
    or using the `override` option.
  prefs: []
  type: TYPE_NORMAL
- en: 'Typically, we would want to avoid using the `legacy-peer-deps` option to avoid
    breaking changes. We could use the `override` option in *package.json* for resolving
    packages which is explained more at [https://docs.npmjs.com/cli/v8/configuring-npm/package-json#overrides](https://docs.npmjs.com/cli/v8/configuring-npm/package-json#overrides).
    Within the *package.json* file, below the `scripts` block, we will want to add
    another block with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If the previous npm installation step failed, we can retry after the *package.json*
    updates which will resolve `@adminjs/sequelize` package’s `sequelize` version
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can start integrating AdminJS into our application. Within the `index.js`
    file, at the very top, we can add the following lines, which will load the necessary
    AdminJS modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Below the `const models = require("./models");` line, we can now add the following
    line, which will register the Sequelize adapter for AdminJS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Below that line, we can add our AdminJS instance and build the Express router:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`model.sequelize` is the instance that we created from `models/index.js`. This
    will instruct AdminJS to use Sequelize for our connection. The `resources` key
    holds a list of all of the models that should be exposed/applicable to AdminJS.
    `rootPath` will be AdminJS’ URL prefix for our web application.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Within `index.js`, below the `app.use(bodyParser.json({ type: ''application/json''
    }));` line, we can now add the AdminJS middleware to help integrate into Express:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now, when we launch our browser to `http://localhost:3000/admin`, we should
    see a similar page to *Figure 9.1*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, *Deploying a Sequelize Application*, we will cover how
    to password-protect your application to prevent an unwanted guest from modifying
    the database.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1 – AdminJS welcome dashboard ](img/Figure_9.01_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.1 – AdminJS welcome dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'On the left-side navigation, we should see our database labeled as **airline**.
    Clicking on that link will reveal our exposed Sequelize models. Clicking on **Airplanes**
    will show a brief table with our model’s data, similar to *Figure 9.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2 – The Airplanes model table ](img/Figure_9.02_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.2 – The Airplanes model table
  prefs: []
  type: TYPE_NORMAL
- en: There is a small caveat with AdminJS; at the time of writing, AdminJS does not
    support Sequelize’s virtual data types, which are not text values. Our `BoardingTickets`
    model contains a virtual type as a Boolean value. When we click on the **Boarding
    Tickets** menu item, we will be greeted with an error similar to *Figure 9.3*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.3 – AdminJS Displaying an Error From Virtual Types ](img/Figure_9.03_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.3 – AdminJS Displaying an Error From Virtual Types
  prefs: []
  type: TYPE_NORMAL
- en: 'To fix this issue, we can remove the property’s visibility by extending our
    options for AdminJS’ resources. In the new `AdminJS(…)` block, under the resources
    key, replace the `models.BoardingTicket` line with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This will instruct AdminJS to disable the `isEmployee` attribute’s visibility
    to `false`. Now, when we refresh the page, the error should no longer be displayed,
    as shown in *Figure 9.4*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4 – Resolving AdminJS’ error with virtual types ](img/Figure_9.04_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.4 – Resolving AdminJS’ error with virtual types
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'For a complete reference on what kind of settings are tunable for AdminJS’
    property configuration, you can refer to the API documentation here: [https://docs.adminjs.co/PropertyOptions.xhtml](https://docs.adminjs.co/PropertyOptions.xhtml).'
  prefs: []
  type: TYPE_NORMAL
- en: AdminJS will also automatically integrate into Sequelize’s validation system.
    So, if we were to edit one of our flight schedules and entered an invalid airport,
    we would be presented with an error like the one shown in *Figure 9.5*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.5 – AdminJS validation integration ](img/Figure_9.05_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.5 – AdminJS validation integration
  prefs: []
  type: TYPE_NORMAL
- en: When we initialized our application with AdminJS, you may have noticed a new
    folder was automatically created called `.adminjs` within the project’s root directory.
    The files within this directory are local to your instance only and are neither
    applicable to deployments nor to other team members.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You may have noticed a `.gitignore` file that contains `.adminjs` as part of
    its content. The `.gitignore` file is for preventing folders, files, matching
    paths, and so on from being committed within the git’s object space. If you are
    working within a project using version control, such as Git, then it is recommended
    to ignore the `.adminjs` directory from being committed.
  prefs: []
  type: TYPE_NORMAL
- en: Whether adding, deleting, modifying, or validating records, AdminJS offers a
    very convenient way of managing models. Sometimes, convenience can get in the
    way, and we would need to view or modify our records in ways that AdminJS cannot.
    One way to achieve this is to use a GraphQL library.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Sequelize with GraphQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GraphQL offers a few advantages over alternatives such as REST. We can declare
    data shapes with strong types, associate relational hierarchies, and reduce the
    number of requests required when querying data.
  prefs: []
  type: TYPE_NORMAL
- en: GraphQL is a query language that is data storage-agnostic. You can associate
    a GraphQL model with a typical **Database Management System** (**DBMS**), or just
    as an abstraction for model validation and shaping.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a GraphQL schema definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `User` type has three attributes, with the `name` and `roles` being required
    (indicated with the exclamation mark), while the `bio` definition is an optional
    string. Within this example, the `User` type’s roles attributes will always return
    an array with zero or more items from the exclamation mark that sits outside of
    the brackets (`[…]!`), and the other exclamation mark indicates that each item
    within the set will be non-nullable and return a `Role` type.
  prefs: []
  type: TYPE_NORMAL
- en: A type just references an object, but there are two types that are reserved
    for GraphQL itself, the `Query` and the `Mutation` type. The query types are reserved
    for defining input parameters and relations, and associations, of a collection
    of types. `Mutation` types are utilized when we want to modify our data. You can
    think of queries as `GET` requests and mutation queries as a combination of `POST`
    and `PUT` HTTP methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'To query the previous example’s types, we will invoke a query type like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This example will generate a function called `usersByName` with an input parameter
    of a required string. The function would yield any `User` types whose name matches
    the `$name` variable. Each record would return the name, bio, and an array of
    roles associated with that user. The data shape that is returned would look similar
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Mick Hansen, one of the original maintainers of Sequelize, created an NPM package
    called sequelize-graphql that will help bridge our models with a GraphQL type
    definition. To get started on using GraphQL with Sequelize in our current project,
    we will need to install the following NPM modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `graphql-sequelize` library may require old, or conflicting, versions for
    the `graphql` and `graphql-relay` library. We would need to modify our `override`
    object within the *package.json* file to the following to resolve those issues:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The `graphql-yoga` package is a GraphQL server framework dedicated to performance
    and ease of use. Its GitHub repository can be found here: [https://github.com/dotansimha/graphql-yoga](https://github.com/dotansimha/graphql-yoga).'
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to add a static constant called `tableName` for each model,
    with the value being the model’s table name for the `sequelize-graphql` plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start with the `models/airplane.js` file; under the `class Airplane
    extends Model` line, add the following variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Within `models/boardingticket.js`, under the `class BoardingTicket extends
    Model` line, add the following variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Within `models/customer.js`, under the `class Customer extends Model` line,
    add the following variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Within `models/flightschedule.js`, under the `class FlightSchedule extends
    Model` line, add the following variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Within `models/receipts.js`, under the `class Receipts extends Model` line,
    add the following variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can begin with declaring our type definitions and query resolver patterns
    for the GraphQL server. Within the project’s root directory, add a new file called
    `graphql.js`, starting with the following `require` commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we want to start defining our query interface for when we want to execute
    queries later. You may think of this as something similar to a header file in
    a “C” language project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'While keeping the `typeDef` variable open, we can add a simple `Mutation` query
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we can add our model schematics to the definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will want to set our resolvers to associate the type definitions with
    the correct Sequelize model associations. Let’s start with the query resolvers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we can add a `Mutation` resolver example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we can resolve our model associations and close the variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can create our server with the schema definitions and export it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the `index.js` file, in the project’s root directory, we can add the
    following line under our `var models = require("./models")` line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'After we have mounted the AdminJS router, `app.use(adminJs.options.rootPath,
    router)`, add the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'After we have finished our `index.js` modifications, we can start our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the server is up and running, we can access GraphQL Yoga’s dashboard interface
    (*Figure 9.6*) by visiting the following URL within a browser: [`http://localhost:3000/graphql`](http://localhost:3000/graphql):'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In a production deployment, we would either want to disable this route based
    on the value of `process.env.NODE_ENV` or add authentication-based middleware
    to the `/graphql` route in `index.js`.
  prefs: []
  type: TYPE_NORMAL
- en: '![ Figure 9.6 – The GraphQL Yoga dashboard ](img/Figure_9.06_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.6 – The GraphQL Yoga dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'We can test our queries and resolvers by executing queries within this dashboard.
    Remove all of the current content on the notepad section of the dashboard and
    enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'There should be a “play button” at the top that will execute your query (alternatively,
    hitting the *Ctrl* and *Enter* keys simultaneously will do the same), which should
    yield results similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'If we wanted to update our airplane’s model name, we could use a `mutation`
    query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'This will return the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Within the GraphQL Yoga dashboard, there should be a **< Docs** link at the
    top right (refer to *Figure 9.6*), which will open a drawer panel. There will
    then be a **Query** link, which will expose our queries and type definitions.
    This should help make queries easier within the dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have established a connection between a GraphQL server and our Sequelize
    models and integrated another adapter that provides an easy-to-use admin dashboard,
    it is time for us to build our own adapter for Sequelize.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our own adapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sequelize is fairly extensible through its class properties, lifecycle events,
    and configurations. For the example of creating our own adapter for Sequelize,
    we will integrate a new data type that will automatically convert values, using
    a specific set of rules, to what is called a “slug URL.” A slug URL usually consists
    of hyphens instead of spaces, lowercase lettering, and removes all special characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at the steps to create our adapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll begin by installing any necessary packages. Keeping a copy of a character
    map of special characters can be a daunting task, so we will use an `npm` package
    called, `github-slugger` to help us:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we will want to create a couple of directories and a file with `plugins/slug/index.js`
    as the path from the project’s root directory. Before we can begin coding within
    that file, we will need to add the `slug` column to a table within the database.
    We will use the Airplane model for this example; using the `sequelize-cli` command,
    we can create a new migration event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command should generate a new file within the `migrations` directory ending
    in `add_slug_to_airplanes.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the file’s contents with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will instruct Sequelize to create a new column in the `Airplanes` table
    called `slug` as a text value, along with a unique index that is associated with
    that column.
  prefs: []
  type: TYPE_NORMAL
- en: 'To perform the latest migration, we will run the `db:migrate` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After the column has been added to the Airplanes table, we will need to add
    the attribute manually to the `models/airplanes.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the `totalSeats` attribute block with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `graphql.js` file, we will want to add the `slug` column to the `Airplane`
    type definition as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can begin editing the `plugins/slug/index.js` file, starting with the
    following lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will create a `SlugPlugin` class with one method called `use`. The input
    parameters are the `model` class, a couple of options, and their defaults.
  prefs: []
  type: TYPE_NORMAL
- en: 'Underneath those blocks, we will create our `generateSlug` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we will want to ensure that a slug does not exist prior to updating.
    We will want to create some sort of finder method and an increment method for
    funding a unique value. We can start with the finder method shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now for the incremental method; this function will run in a loop until a unique
    match is found using a combination of the slug’s value and an integer. Ideally,
    in a real production environment, we would come up with a cleverer way of finding
    unique values (for example, appending a hash instead of an incremental variable),
    but for brevity, we will create this function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now begin creating the main event function. First, we will check whether
    our slug’s applicable attributes (the `planeModel` attribute, in this example)
    have been modified. If they have not been changed, then we will skip the entire
    event, since there is nothing to be done:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we will compare the current value with the newly generated value. If
    they are the same (for example, a letter casing change), then simply skip the
    event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can check and see whether the newly generated value is unique and,
    if so, set the instance’s `slug` attribute to that value and return the instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Otherwise, we will want to use our `incrementSuffix` method and return the
    instance afterward:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Afterward, we can close our `event` method, attach the method to the model’s
    lifecycle events, and close the `SlugPlugin` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we can export an instance of our plugin as well as the class definition
    itself:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the `models/airplanes.js` file, we will want to integrate our new plugin
    with the model. At the top of the file, we can include the plugin like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After the model’s definition, and before the `return Airplane` line, we can
    associate the `slug` plugin with the model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will tell our plugin to use the `planeModel` attribute as the source field
    when generating the slug’s value.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to test our plugin, we can go to our GraphQL dashboard located at
    `http://localhost:3000/graphql` and enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will find, and update, our A321 airplane’s `planeModel` value along with
    setting a `slug` value, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'This finalizes our custom Sequelize adapter section. You can use the `plugins/slug/index.js`
    adapter in any other project using Sequelize. Feel free to add `slug` columns
    to other models, but make sure to follow the necessary steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Generate a migration file and migrate the column changes to the database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the `graphql.js` file with the appropriate type definitions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Include the `plugin` library within the applicable models’ files and associate
    the plugin with the models using the `use` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we went through the process of installing a dashboard that
    integrates with a database, integrating GraphQL using a third-party library, and
    creating our own Sequelize adapter that will automatically add slug values.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will start developing our website to be more production-ready
    and feature-complete. Some of these features include listing schedules, ordering
    tickets, and entering customer information.
  prefs: []
  type: TYPE_NORMAL
