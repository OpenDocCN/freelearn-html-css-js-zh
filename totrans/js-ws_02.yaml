- en: 2\. Working with JavaScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2. 使用JavaScript
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: By the end of this chapter, you will be able to operate a modern **integrated
    development environment** (**IDE**); identify and describe basic JavaScript structures;
    describe different JavaScript environments; recognize the major views and their
    uses within the popular web browser developer tools and construct HTML elements
    and modify their various attributes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够操作现代**集成开发环境**（**IDE**）；识别和描述基本的JavaScript结构；描述不同的JavaScript环境；识别流行网络浏览器开发者工具中的主要视图及其用途，并构建HTML元素以及修改它们的各种属性。
- en: In this chapter, you will get an overview of some popular tools for writing
    JavaScript and the various available runtimes for executing code with a modern
    web browser and beyond.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解一些流行的JavaScript编写工具，以及使用现代网络浏览器执行代码的各种可用运行时。
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In the previous chapter, we explored a historical overview of JavaScript and
    examined the language's relationship with the Standard ECMAScript. We then explored
    JavaScript by accessing the developer tools of various browsers to provide a basic
    introduction to how JavaScript can be accessed.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，我们探讨了JavaScript的历史概述，并考察了该语言与标准ECMAScript的关系。然后，我们通过访问各种浏览器的开发者工具来探索JavaScript。
- en: Now that we are familiar with JavaScript in a more cerebral way, it's time for
    some hands-on work with the language. First, we'll provide an overview of some
    popular tools for writing JavaScript and of the various runtimes available for
    executing code. With those installed, we can begin writing some JavaScript in
    order to gain some familiarity with the language's syntax and structure—how to
    write code in a meaningful way and how to include it in a web environment.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经以更深入的方式熟悉了JavaScript，是时候通过实际操作来学习这门语言了。首先，我们将概述一些流行的JavaScript编写工具和可用于执行代码的各种运行时。安装这些工具后，我们可以开始编写一些JavaScript代码，以便熟悉语言的语法和结构——如何以有意义的方式编写代码以及如何在网络环境中包含它。
- en: Within this chapter, we will pay particular attention to the primary target
    for most JavaScript environments and a great tool in itself—the modern web browser.
    In the previous chapter, we looked at an overview of how to access developer tools
    in various web browsers. In this chapter, we will further explore how these tools
    can be used in JavaScript development.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将特别关注大多数JavaScript环境的主要目标，以及本身就是一个伟大工具的现代网络浏览器。在前一章中，我们探讨了如何在不同网络浏览器中访问开发者工具的概述。在本章中，我们将进一步探讨这些工具如何在JavaScript开发中得以应用。
- en: Finally, we'll dig more deeply into web browser interactions and look at how
    we can control both the style and content of elements within the web browser with
    the use of common JavaScript functions. All the code in this chapter will be written
    using the editor that we are about to introduce.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将更深入地研究网络浏览器交互，并探讨如何使用常见的JavaScript函数来控制网络浏览器中元素的样式和内容。本章中的所有代码都将使用我们即将介绍的编辑器编写。
- en: Integrated Development Environments (IDE)
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成开发环境（IDE）
- en: JavaScript is a language that is interpreted at runtime as there is no need
    for us to compile it beforehand. There are other ways of writing JavaScript in
    a non-direct way, such as through transpilation or compilation, but we'll review
    those later. Before we get too far into working with JavaScript and writing code,
    we should examine the benefits of using a dedicated development environment to
    write and manage our JavaScript code.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是一种在运行时解释的语言，因为我们不需要事先编译它。还有其他非直接编写JavaScript的方法，例如通过转译或编译，但我们将稍后回顾这些内容。在我们深入到与JavaScript一起工作和编写代码之前，我们应该检查使用专用开发环境来编写和管理我们的JavaScript代码的好处。
- en: 'Using an IDE aligned with the platform and languages you work with provides
    a number of benefits over a simple text editor. For example, IDEs usually include
    the following features:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用与您所使用的平台和语言相匹配的IDE，与简单的文本编辑器相比，可以提供许多好处。例如，IDE通常包括以下功能：
- en: Linting, formatting, and other cleanup utilities
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查、格式化和其他清理工具
- en: Integrated **Terminal** and command-line access
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成**终端**和命令行访问
- en: Programming language **debugging tools**
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编程语言**调试工具**
- en: Robust code completion and hinting as you type
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入时提供强大的代码补全和提示
- en: Snippets and preformed code content
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码片段和预定义的代码内容
- en: Built-in compilers (depending on the language and platform)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置编译器（取决于语言和平台）
- en: Potential **emulation features**—especially when dealing with mobile development
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub's Atom
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A free and open-source editor, Atom is maintained by GitHub and is available
    for Microsoft Windows, Apple macOS, and various Linux distributions. Since this
    editor was created by GitHub, one of its main features is tight integration along
    with the other services they provide within the editor:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1: GitHub for Atom'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_02_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.1: GitHub for Atom'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: The editor features a plugin system that allows users to add support for various
    languages and themes. Atom can be downloaded and installed for free from https://atom.io/.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Sublime Text
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Though a very popular editor some years back, it''s still worth noting here
    as many developers use this IDE for JavaScript and more. Sublime Text supports
    Microsoft Windows, Apple macOS, and various Linux distributions. The latest version
    was released in 2019:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2: Sublime Text'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_02_02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.2: Sublime Text'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Sublime Text can be downloaded and installed from [https://www.sublimetext.com/](https://www.sublimetext.com/)
    as a free evaluation tool; however, it requires you to purchase it for long-time
    use.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Adobe Dreamweaver
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Previously the property of Macromedia, Adobe acquired that company and ceased
    the development of their existing web editing product, Adobe GoLive, and instead
    strengthened the support for Dreamweaver. In the years since then, the application
    has gone through several rewrites and adjustments, but the focus has always been
    split between a visual editing view and one targeted at developers in the form
    of bare code. The code editor within Dreamweaver is based on Adobe''s open-source
    Brackets ([https://packt.live/2WWMUH6](https://packt.live/2WWMUH6)) project:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3: Adobe Dreamweaver'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_02_03.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.3: Adobe Dreamweaver'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Dreamweaver can be downloaded and installed from [https://www.adobe.com/products/dreamweaver.html](https://www.adobe.com/products/dreamweaver.html)
    as a trial but must be purchased for continued use.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: JetBrains WebStorm
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A variety of editors and other tools are available from JetBrains. Many of
    these build upon one another in terms of complexity and functionality. When looking
    primarily for a web editor for authoring JavaScript, HTML, and CSS, JetBrains
    WebStorm is a good choice, but it does have a bit of a learning curve in the way
    that it handles the management of projects and associated files:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4: JetBrains WebStorm'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_02_04.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.4: JetBrains WebStorm'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: WebStorm can be downloaded and installed from [https://www.jetbrains.com/webstorm/](https://www.jetbrains.com/webstorm/)
    as a free trial, with various purchase options available afterward. Those affiliated
    with educational institutions can apply for a free license with yearly renewal.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Visual Studio Code
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this module, we''ll be using the Visual Studio Code as our IDE. This software
    application is a free, cross-platform IDE from Microsoft that is updated every
    month. It allows you to work with native web technologies in a very capable way—but
    also has the ability to support other languages and features through extensions.
    Visual Studio Code is very popular with developers of all sorts:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本模块，我们将使用Visual Studio Code作为我们的IDE。这个软件应用是来自微软的免费、跨平台IDE，每月都会更新。它允许你以非常有效的方式使用原生Web技术——同时也有通过扩展支持其他语言和功能的能力。Visual
    Studio Code在所有类型的开发者中都非常受欢迎：
- en: '![Figure 2.5: Microsoft Visual Studio Code'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.5：Microsoft Visual Studio Code'
- en: '](img/C14377_02_05.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_02_05.jpg)'
- en: 'Figure 2.5: Microsoft Visual Studio Code'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.5：Microsoft Visual Studio Code
- en: Visual Studio Code can be downloaded and installed for free from [https://code.visualstudio.com/](https://code.visualstudio.com/).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code可以从[https://code.visualstudio.com/](https://code.visualstudio.com/)免费下载和安装。
- en: Note
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The process of downloading and installing an IDE can be found in the *Preface*
    of this book.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 下载和安装IDE的过程可以在本书的*前言*中找到。
- en: JavaScript Project and File Management
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript项目和文件管理
- en: Now that we have our development environment installed, we need to consider
    some best practices in terms of where we should store projects on our local machine,
    and how we should organize folders and files within each project. We'll also walk
    through a small exercise that will demonstrate how to load a project (including
    all associated files) into Visual Studio Code.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了开发环境，我们需要考虑一些最佳实践，关于我们在本地机器上存储项目的地方，以及如何在每个项目中组织文件夹和文件。我们还将通过一个小练习来演示如何将项目（包括所有相关文件）加载到Visual
    Studio Code中。
- en: Project Folders and Files
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目文件夹和文件
- en: 'It is advisable to set aside a directory on your local machine where you will
    place all the projects that you may be working on. For instance, you could create
    a directory called `Projects` on your local disk and then create specific project
    folders within it—one for each distinct project. This way, you can be sure of
    where all your projects are located. You can even create a shortcut to your `Projects`
    folder to get at it easily whenever you like:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 建议在你的本地机器上留出一个目录，用于放置你可能正在工作的所有项目。例如，你可以在本地磁盘上创建一个名为`Projects`的目录，然后在其中创建特定的项目文件夹——每个项目一个。这样，你可以确保所有项目都位于一个地方。你甚至可以创建一个到`Projects`文件夹的快捷方式，以便随时轻松访问：
- en: '![Figure 2.6: Example of a Projects directory on macOS'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.6：macOS上的项目目录示例'
- en: '](img/C14377_02_06.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_02_06.jpg)'
- en: 'Figure 2.6: Example of a Projects directory on macOS'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.6：macOS上的项目目录示例
- en: Individual projects will exist in specific folders within your main `Projects`
    directory. Depending on how many projects you work on, you may have to create
    many subfolders. Each project should be clearly named for ease of identification.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 个体项目将存在于主`Projects`目录中的特定文件夹中。根据你工作的项目数量，你可能需要创建许多子文件夹。每个项目都应该有一个清晰的名字，以便于识别。
- en: 'Exercise 2.01: Creating a Working Project Directory'
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习2.01：创建工作项目目录
- en: 'Let''s look at how to create a directory so that we can contain our working
    project and all its associated files and subfolders:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何创建一个目录，以便我们可以包含我们的工作项目以及所有相关的文件和子文件夹：
- en: In your `filesystem`, locate a place that is easily accessible and to which
    your account has full read/write rights, as you'll be writing files at this location.
    If you already have a preexisting `Projects` directory, this is likely to be an
    ideal location.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的`文件系统`中，找到一个易于访问并且你的账户有完全读写权限的地方，因为你将在这个位置写入文件。如果你已经有一个现有的`Projects`目录，这很可能是一个理想的位置。
- en: 'Within this folder, create a new folder and name it `JavaScript`, or another
    name of your choice, like so:![Figure 2.7: Creating a new folder on macOS'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个文件夹中，创建一个新的文件夹，并将其命名为`JavaScript`，或者你选择的任何其他名字，如下所示：![图2.7：在macOS上创建新文件夹
- en: '](img/C14377_02_07.jpg)'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C14377_02_07.jpg)'
- en: 'Figure 2.7: Creating a new folder on macOS'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.7：在macOS上创建新文件夹
- en: With your new project folder created, navigate to its parent directory. You
    may be there already or may need to go up one level in the `filesystem`. This
    all depends on your operating system and how you've created the folder.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建好新的项目文件夹后，导航到其父目录。你可能已经在那里，或者可能需要在上一个级别在`文件系统`中向上移动。这完全取决于你的操作系统以及你如何创建文件夹。
- en: 'Using your mouse, stylus, or touchpad, drag the working project folder from
    the file explorer into the Visual Studio Code application window:![Figure 2.8:
    Loading the project into Visual Studio Code'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你的鼠标、触控笔或触摸板，将工作项目文件夹从文件资源管理器拖动到Visual Studio Code应用程序窗口中：![图2.8：将项目加载到Visual
    Studio Code中
- en: '](img/C14377_02_08.jpg)'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C14377_02_08.jpg)'
- en: 'Figure 2.8: Loading the project into Visual Studio Code'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.8：将项目加载到Visual Studio Code中
- en: The current tab's content within Visual Studio Code will become obscured, indicating
    that you can release the folder onto it. Go ahead and do this.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Visual Studio Code中当前标签页的内容将被遮挡，这表明你可以将文件夹释放到上面。请继续这样做。
- en: 'This will effectively set the folder you dragged onto the Visual Studio Code
    interface as your working project folder. Look to the left-hand pane and navigate
    the files and folders in it:![Figure 2.9: The declared working project folder'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将有效地将你拖放到Visual Studio Code界面的文件夹设置为你的工作项目文件夹。查看左侧窗格并导航其中的文件和文件夹：![图2.9：声明的当前工作项目文件夹
- en: '](img/C14377_02_09.jpg)'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C14377_02_09.jpg)'
- en: 'Figure 2.9: The declared working project folder'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.9：声明的当前工作项目文件夹
- en: The newly created folder is now the working project folder within Visual Studio
    Code. Normally, you'd see a list of files and folders in the leftmost sidebar.
    We haven't created any files or folders yet, so there is nothing there.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 新创建的文件夹现在是Visual Studio Code中的工作项目文件夹。通常，你会在最左侧的侧边栏中看到文件和文件夹的列表。我们还没有创建任何文件或文件夹，所以那里什么也没有。
- en: Note
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can also declare the working project folder by choosing **File** | **Open**
    from the application menu and browsing for the folder.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过从应用程序菜单中选择**文件** | **打开**来声明工作项目文件夹，并浏览到该文件夹。
- en: Visual Studio Code, like many other editors, will remember projects you've opened
    within it and present a list of them when you next open the application.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code，就像许多其他编辑器一样，会记住你在其中打开的项目，并在你下次打开应用程序时显示它们的列表。
- en: In this section, you learned about the importance of having an organized folder
    structure on your local machine for managing all your projects. We also saw how
    to create a new working folder for a project and then opened it within our code
    editor.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你了解了在你的本地机器上保持有组织的文件夹结构对于管理所有项目的重要性。我们还看到了如何为项目创建一个新的工作文件夹，然后在我们的代码编辑器中打开它。
- en: In the next section, we'll use the project we just created to start writing
    and examining JavaScript syntax and common structural elements.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将使用我们刚刚创建的项目来开始编写和检查JavaScript语法和常见结构元素。
- en: JavaScript Syntax and Structure
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript语法和结构
- en: Now that we've installed an IDE and established how to manage a working project
    folder within our code editor, it's time to look at how JavaScript code is written
    and ordered within such an environment. The first thing we need to do is create
    a set of files within the `Project` folder because we will write our JavaScript
    instructions in these. We will create a set of files within the working project
    folder and then bind them to one another.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了IDE并确定了如何在代码编辑器中管理工作项目文件夹，是时候看看如何在这样的环境中编写和排序JavaScript代码了。我们首先需要做的是在`Project`文件夹中创建一组文件，因为我们将在这里编写我们的JavaScript指令。我们将在工作项目文件夹中创建一组文件，并将它们相互绑定。
- en: 'Exercise 2.02: Creating Project Boilerplate'
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习2.02：创建项目模板
- en: 'The most common environment where JavaScript runs is inside a web browser.
    For JavaScript to run within this environment, it must be included within a host
    HTML file in some way. Let''s create a basic HTML file and a JavaScript file and
    instruct the web browser to load our JavaScript file within the HTML at runtime.
    Let''s get started:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript最常运行的环境是在网页浏览器中。为了在这个环境中运行JavaScript，它必须以某种方式包含在宿主HTML文件中。让我们创建一个基本的HTML文件和一个JavaScript文件，并指示浏览器在运行时在HTML中加载我们的JavaScript文件。让我们开始吧：
- en: 'Open the working project folder you created previously within your IDE (Visual
    Studio Code). No files will be listed in the leftmost pane since we haven''t created
    any yet:![Figure 2.10: The current project contains no files'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的IDE（Visual Studio Code）中打开你之前创建的工作项目文件夹。由于我们还没有创建任何文件，所以最左侧的窗格中不会列出任何文件：![图2.10：当前项目不包含文件
- en: '](img/C14377_02_10.jpg)'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C14377_02_10.jpg)'
- en: 'Figure 2.10: The current project contains no files'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.10：当前项目不包含文件
- en: 'If you hover your mouse cursor over this leftmost area, you will notice a number
    of icons appear to the right of the project name. The leftmost of these icons
    allows for the creation of new files. The one next to it allows the creation of
    new folders. Click the `index.html` for the name of the extension of the newly
    created file. The name `index` tells us that this file is the *root* or *index*
    HTML file for our project. The `.html` extension informs both us and the computer
    as to the nature of this file:![Figure 2.12: Naming the file index.html'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_02_12.jpg)'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.12: Naming the file index.html'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once complete, hit *Enter*/*Return* on your keyboard to commit the change.
    The file will immediately open in the editing pane of your editor. As you can
    see, it is completely blank:![Figure 2.13: The file exists and is open, but it
    is empty'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_02_13.jpg)'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.13: The file exists and is open, but it is empty'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Type in the following boilerplate HTML code to set up the file''s structure:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We declare the file as HTML and establish a `<head>` tag and a `<body>` tag.
    The head of an HTML document includes invisible data such as declaring the character
    set and title. The body of an HTML document contains visible elements such as
    text and images. Notice that you must save the file using **File** | **Save**
    or by using *Command*/*Ctrl* + *S*:![Figure 2.14: Our initial HTML markup structure'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_02_14.jpg)'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.14: Our initial HTML markup structure'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a new file once again, this time naming it `app.js`. This will signify
    that this is the main JavaScript file for the application. The `.js` file extension
    indicates an external JavaScript file.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The new JavaScript file will open just like the HTML file did. As you can see,
    it is also initially empty. Type in the following JavaScript code:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Ensure that you save the JavaScript file again by navigating to `File` | `Save`
    from the application menu or by using the keyboard shortcut `Command`/`Ctrl` +
    `S`:![Figure 2.15: You should now have both a JavaScript file and an HTML file'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_02_15.jpg)'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.15: You should now have both a JavaScript file and an HTML file'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In order to bind the newly created JavaScript file to our HTML so that it can
    run in the web browser, we must reference it within the HTML file itself. Switch
    to the HTML file titled `<title>` tag and before the closing tag of the `<head>`
    element:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `<script>` tag is used to either include an external `.js` file, as we
    are doing here, or it can be used to denote a block of JavaScript code directly
    within HTML. The full HTML file code should now appear as follows:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'With the new line of code added to the HTML, save the file once again. In Visual
    Studio Code, a file with unsaved changes is signified with a small, filled disc
    in the `File` tab within the project explorer:![Figure 2.16: A file with unsaved
    changes'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_02_16.jpg)'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.16: A file with unsaved changes'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run the `index.html` file within a web browser. Open **developer tools** and
    activate the **Console** view. If all goes well, you will see the message we instructed
    JavaScript to output:![Figure 2.17: The resulting console output'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网络浏览器中运行 `index.html` 文件。打开**开发者工具**并激活**控制台**视图。如果一切顺利，你将看到我们指示 JavaScript
    输出的消息：![图 2.17：生成的控制台输出
- en: '](img/C14377_02_17.jpg)'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C14377_02_17.jpg)'
- en: 'Figure 2.17: The resulting console output'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.17：生成的控制台输出
- en: We now know that our project boilerplate has been configured correctly since
    the HTML is running and has effectively called code from within the JavaScript
    file. We now have the beginnings of a web application—complete with structure
    (HTML) and logic (JavaScript) components.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道我们的项目模板已经配置正确，因为 HTML 正在运行并且有效地调用了 JavaScript 文件中的代码。我们现在有了网络应用程序的起点——包括结构（HTML）和逻辑（JavaScript）组件。
- en: Basic JavaScript Syntax
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本JavaScript语法
- en: It is important to know the basic syntax of any programming language in order
    to write it correctly. To begin writing JavaScript, you'll need to know how to
    declare variables, assign data to variables, and terminate commands properly.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 了解任何编程语言的基本语法对于正确编写它来说非常重要。要开始编写 JavaScript，你需要知道如何声明变量、将数据赋给变量以及正确地终止命令。
- en: 'A variable in JavaScript is an `var` keyword. Here is an example of a variable
    declaration:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 中的变量是一个 `var` 关键字。以下是一个变量声明的例子：
- en: '[PRE4]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To actually assign a value to this variable and give it something useful to
    do, we must use the assignment operator, `=`. Here is the same statement with
    a value assigned to the variable:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要实际给这个变量赋值并让它做一些有用的事情，我们必须使用赋值运算符，`=`。以下是给变量赋值的相同语句：
- en: '[PRE5]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In this instance, we are assigning a string value to the variable. There are
    many different *types* of values, or data, that we can assign to variables, and
    we'll learn more about these in the next chapter.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们正在将一个字符串值赋给变量。我们可以将许多不同类型的值或数据赋给变量，我们将在下一章中了解更多关于这些内容。
- en: 'You will note that we also place a **semicolon** after each variable declaration,
    whether we assign a value to it or not. While it is not absolutely necessary to
    do this, the use of a semicolon in this manner terminates a command. Multiple
    commands should, however, be placed across multiple lines, as demonstrated here:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，我们在每个变量声明后也放置了一个**分号**，无论我们是否给它赋值。虽然这样做并不是绝对必要的，但以这种方式使用分号可以终止一个命令。然而，多个命令应该放在多行中，如下所示：
- en: '[PRE6]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We assign string values to both a `firstName` and `lastName` variable, and
    then employ the `console.log()` method along with some string concatenation using
    the `+` operator to form a message and output it to the browser console. When
    executed in the browser, it appears like this:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将字符串值赋给 `firstName` 和 `lastName` 变量，然后使用 `console.log()` 方法以及一些使用 `+` 运算符的字符串连接来形成一个消息并将其输出到浏览器控制台。在浏览器中执行时，它看起来像这样：
- en: '![Figure 2.18: The resulting output message'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.18：生成的输出信息'
- en: '](img/C14377_02_18.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_02_18.jpg)'
- en: 'Figure 2.18: The resulting output message'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.18：生成的输出信息
- en: Note
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The term **concatenation** simply refers to joining plain strings and string
    variable values together, as we've done here.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 术语**连接**简单地指的是将普通字符串和字符串变量值连接在一起，就像我们在这里所做的那样。
- en: That's about all you need to know regarding syntax to get started. Don't worry—there
    will be much more information around syntax when you reach *Chapter 5*, *Beyond
    the Fundamentals*.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 关于语法，你需要知道的就是这些，以开始学习。不用担心——当你到达第 5 章，即“超越基础”时，会有更多关于语法的详细信息。
- en: JavaScript Execution Order
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript 执行顺序
- en: 'This section hearkens back to an example from the previous chapter in terms
    of the various ways JavaScript can be included within a web document. There are
    two choices here: either include an external JavaScript file somewhere within
    the `<head>` tag or the `<body>` tag of your HTML document or embed the code directly
    within the document itself, again at either location.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这一节在某种程度上回顾了上一章中的例子，说明了 JavaScript 可以在网页文档中的各种包含方式。这里有两种选择：要么在 HTML 文档的 `<head>`
    标签或 `<body>` 标签中包含一个外部 JavaScript 文件，要么直接在文档本身中嵌入代码，同样在上述位置之一。
- en: No matter how you include JavaScript within your HTML document, the web browser
    will always execute from top to bottom. Any JavaScript within the `<head>` tag
    of a document will execute before anything within the `<body>` tag of the document.
    Of course, you can compartmentalize blocks of JavaScript code within functions
    to execute when invoked as well, which effectively gets around this rule in some
    ways.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 2.03: Verifying an Execution Order'
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s conduct a small exercise to see whether, for any JavaScript, the `<head>`
    of a document will execute before anything with the `<body>` tag of the document.
    Let''s get started:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 'In the exercise files for this chapter, you will find a document named `order.html`.
    Open this within Visual Studio Code to inspect it. You will see the following
    HTML code:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You''ll notice there is no JavaScript just yet, so let''s insert some bits
    of code in various places for this demonstration. Add the following code beneath
    the `<title>` element within the document''s `<head>` tag:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, add this snippet directly above the `<h1>` element within the `<body>`
    tag of our document:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, we''ll add another line of code just before the `<body>` tag closes:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The document should now appear as follows:'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Run this document within your web browser with the developer tools Console
    view open. You will be able to verify that yes—the code is certainly processed
    from top to bottom, as we explained:![Figure 2.19: Verification of the execution
    order'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_02_19.jpg)'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.19: Verification of the execution order'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: The `console.log()` command in JavaScript will write any data within parentheses
    to the console. This is the simplest way of debugging JavaScript, though this
    will be explored further in the next chapter.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we've learned about several important fundamentals regarding
    the structure and syntax of JavaScript—particularly when it comes to the web browser
    environment.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll explore other environments in which JavaScript can
    run.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Overview of JavaScript Environments
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in our journey, we've only been exposed to the modern web browser as
    a JavaScript runtime, but even within browsers, there are a variety of JavaScript
    engines that serve as different runtimes for JavaScript. For instance, Chrome
    has the **V8 engine**, while Firefox runs JavaScript through **SpiderMonkey**.
    Just about every browser has its own distinct engine.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: There are also other runtimes aside from those that are browser-based. We'll
    have a look at the variety of runtimes available to us now.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: Browser-Based JavaScript
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By far, the most common environment for using JavaScript throughout its entire
    history as a language is within the web browser. We''ve already spoken of this
    particular runtime quite a lot, so we will not spend time going over all of this
    again:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.20: V8—JavaScript in the web browser'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_02_20.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.20: V8—JavaScript in the web browser'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the benefits of using the web browser as a JavaScript runtime are as
    follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Web browsers are one of the most distributed software platforms in the world.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browsers include a set of built-in developer tools for debugging and monitoring
    JavaScript.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browsers are the absolute primary runtime for JavaScript and all others follow
    it.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can learn more about each browser runtime at their respective websites.
    To learn more about V8, the runtime engine powering Chrome, visit [https://v8.dev/](https://v8.dev/).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: Server-Based JavaScript
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the improvement in the performance of JavaScript engines in the web browser,
    people began wondering whether there may be other applications for the language
    and specific runtimes—particularly in terms of a server-based environment. In
    2009, this became a reality with the creation of **Node.js**. A year before this,
    Google had open-sourced its powerful V8 JavaScript engine. This allowed developers
    to implement V8, along with specific operating system bindings, to produce the
    first version of Node.js:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.21: Node.js—JavaScript on the server'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_02_21.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.21: Node.js—JavaScript on the server'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: 'The benefits of using a server-based JavaScript runtime include the following:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Threadless execution of code.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Events are completely non-blocking.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Efficiency and performance are separated from the client.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can learn more about Node.js at [https://nodejs.org/](https://nodejs.org/).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: Desktop JavaScript
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While not exactly a new environment for JavaScript to run with, desktop applications
    are a segment that ripe for growth as additional runtimes and libraries mature.
    The most popular solution for building desktop applications is Electron. Like
    similar frameworks, when developing applications for Electron, you will be using
    native web technologies that end up being wrapped in a native-focused container
    for any target desktop operating system.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: 'Electron apps can target Apple macOS, Microsoft Windows, or Linux, and are
    all built-in JavaScript:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.22: Electron—JavaScript on the desktop'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_02_22.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.22: Electron—JavaScript on the desktop'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: 'The benefits of using a desktop-focused JavaScript runtime include the following:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: The ability to use native web technologies to write desktop applications.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most functionality is platform-agnostic, so, often, no specific operating system
    commands are needed.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can learn more about Electron at [https://electronjs.org/](https://electronjs.org/).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: Mobile JavaScript
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Mobile devices have been huge since iPhone and Android first made their debuts
    nearly a decade ago. Of course, developers want to tap into this segment of the
    market and, thankfully, there have been a lot of pretty good solutions over the
    years that make use of JavaScript. For quite some time, Apache Cordova and Adobe
    PhoneGap were the primary frameworks that were used to translate web technologies
    into functional mobile applications. More recently, technologies such as **Ionic**
    have become incredibly popular for those using common JavaScript-based frameworks
    such as Angular, React, and Vue. With many of these tools, you can also use plain
    vanilla JavaScript as well:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 自从 iPhone 和 Android 几年前首次亮相以来，移动设备已经变得非常庞大。当然，开发者们希望进入这个市场份额，幸运的是，多年来已经出现了很多相当不错的解决方案，这些解决方案利用了
    JavaScript。在相当长的一段时间里，Apache Cordova 和 Adobe PhoneGap 是将网络技术转化为功能型移动应用的主要框架。最近，像
    **Ionic** 这样的技术对于使用 Angular、React 和 Vue 等基于 JavaScript 的常见框架的人来说变得极其流行。使用许多这些工具，你还可以使用纯
    JavaScript：
- en: '![Figure 2.23: Ionic—JavaScript on mobile devices'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.23：Ionic——移动设备上的 JavaScript'
- en: '](img/C14377_02_23.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 C14377_02_23.jpg](img/C14377_02_23.jpg)'
- en: 'Figure 2.23: Ionic—JavaScript on mobile devices'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.23：Ionic——移动设备上的 JavaScript'
- en: 'The benefits of using a mobile-focused JavaScript runtime include the following:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以移动为中心的 JavaScript 运行时的好处包括以下内容：
- en: The ability to use native web technologies to write iOS and Android applications.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用原生网络技术编写 iOS 和 Android 应用的能力。
- en: Most functionality is platform-agnostic, so, often, no specific mobile operating
    system commands are needed.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大多数功能都是平台无关的，所以，通常不需要特定的移动操作系统命令。
- en: You can learn more about Ionic at [https://ionicframework.com/](https://ionicframework.com/).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://ionicframework.com/](https://ionicframework.com/) 上了解更多关于 Ionic
    的信息。
- en: So far, we've had a brief overview of the various primary runtime environments
    for modern JavaScript.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经简要概述了现代 JavaScript 的各种主要运行环境。
- en: In the next section, we'll focus once more on the web browsers that we introduced
    in the first chapter while paying more attention to the specific functions of
    some of the more useful views within their tools.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将再次关注我们在第一章中介绍的网络浏览器，同时更加关注它们工具中一些更有用视图的特定功能。
- en: A Closer Look at Web Browser Developer Tools
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入了解网页浏览器开发者工具
- en: In the previous chapter, we had a brief introduction to working with browser
    developer tools. We'll expand on our exploration of browser developer tools and
    examine a sample of the most used views when it comes to working with JavaScript
    in the web browser.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们简要介绍了使用浏览器开发者工具的工作方式。我们将扩展我们对浏览器开发者工具的探索，并检查在网页浏览器中处理 JavaScript 时最常用的视图样本。
- en: Of course, there are many other views and options than what will be mentioned
    here and, while we are examining these from within Google Chrome, they will differ
    in both overall look and functional use from browser to browser. This should give
    you a good idea of what is possible, though, no matter what your preferred browser
    is.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，还有许多其他视图和选项，这里没有提及，而且当我们从 Google Chrome 内部检查这些时，它们在整体外观和功能使用上会因浏览器而异。不过，这应该能给你一个很好的想法，无论你首选的浏览器是什么。
- en: Note
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To access Developer Tools in Google Chrome, press the `F12` key.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问 Google Chrome 中的开发者工具，请按 `F12` 键。
- en: The Elements View
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 元素视图
- en: 'The primary view that you''ll be presented with when exploring browser developer
    tools for the first time will most likely be the Elements view. This view is super
    useful as it presents all the elements of a web document and the associated content
    and attributes in a very structured way. You will also notice that the various
    styles and event listeners will be available for you to explore within this view.
    Selecting an element will display both the CSS rules and any associated event
    listeners:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 当你第一次探索浏览器开发者工具时，你可能会看到的主要视图很可能是元素视图。这个视图非常有用，因为它以非常结构化的方式展示了网页文档的所有元素以及相关的内容和属性。你还会注意到，在这个视图中，你可以探索各种样式和事件监听器。选择一个元素将显示
    CSS 规则和任何相关的事件监听器：
- en: '![Figure 2.24: Web document Elements view'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.24：网页文档元素视图'
- en: '](img/C14377_02_24.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 C14377_02_24.jpg](img/C14377_02_24.jpg)'
- en: 'Figure 2.24: Web document Elements view'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.24：网页文档元素视图
- en: While you may think that there is no useful content being displayed in this
    view in terms of JavaScript, you actually have access to the entire **DOM** structure
    here and can monitor this structure and the associated attributes to verify and
    explore changes you are making via code.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然从 JavaScript 的角度来看，你可能认为在这个视图中没有显示任何有用的内容，但实际上你可以访问整个 **DOM** 结构，并可以监控这个结构和相关的属性，以验证和探索你通过代码所做的更改。
- en: The Console View
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制台视图
- en: 'This is the developer tools view that we''ve had the most interaction with
    thus far and is likely to be the most important view when writing and testing
    JavaScript code. Any errors and warnings will be displayed within this view and
    you can also get the output on whatever data you wish as your code executes within
    the document. Using a JavaScript method such as `console.log()` will display output
    of all sorts of useful data for you to explore within the Console view, and you
    can even customize exactly the sort of data that is shown through various options
    associated with the view itself:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这是迄今为止我们互动最多的开发者工具视图，可能是编写和测试 JavaScript 代码时最重要的视图。任何错误和警告都将在此视图中显示，你还可以在代码在文档中执行时获取你想要的数据的输出。使用
    JavaScript 方法 `console.log()` 将在控制台视图中显示各种有用的数据，供你探索，你甚至可以通过与视图本身相关的各种选项来定制显示的数据类型：
- en: '![Figure 2.25: Browser console output'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.25：浏览器控制台输出'
- en: '](img/C14377_02_25.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_02_25.jpg)'
- en: 'Figure 2.25: Browser console output'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.25：浏览器控制台输出
- en: Every web browser has a Console view and even though specific use of this view
    may differ between browsers, the fundamental usage remains the same.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 每个网络浏览器都有一个控制台视图，尽管不同浏览器中此视图的具体使用可能不同，但基本用法保持不变。
- en: The Sources View
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 源视图
- en: When it comes to any sort of programming, the ability to set breakpoints to
    effectively pause code execution and debug your program at a certain state is
    critical. Using the source view, we can do this effectively, right within the
    web browser itself.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何类型的编程中，设置断点以有效地暂停代码执行并在特定状态下调试程序的能力是至关重要的。使用源视图，我们可以在网页浏览器本身内有效地做到这一点。
- en: 'This view provides a way for us to choose to view the source code for any HTML
    or JavaScript files that are currently running and set breakpoints at specific
    lines in order to cause the runtime to pause when the breakpoint is encountered.
    Once paused, we can then use additional tools within the source''s view to examine
    our code in certain ways:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这个视图为我们提供了一种选择，可以查看当前运行的任何 HTML 或 JavaScript 文件的源代码，并在特定行设置断点，以便在遇到断点时使运行时暂停。一旦暂停，我们就可以使用源视图中的其他工具以某种方式检查我们的代码：
- en: '![Figure 2.26: Debugging JavaScript in the web browser'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.26：在网页浏览器中调试 JavaScript'
- en: '](img/C14377_02_26.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_02_26.jpg)'
- en: 'Figure 2.26: Debugging JavaScript in the web browser'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.26：在网页浏览器中调试 JavaScript
- en: In the preceding screenshot, we have set a breakpoint at line 39 of our HTML
    file, which includes embedded JavaScript code. With the code execution paused
    at this specific line, we can examine the state of our program in a very detailed
    way.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，我们在 HTML 文件的第 39 行设置了断点，该行包含嵌入的 JavaScript 代码。当代码执行暂停在此特定行时，我们可以非常详细地检查程序的状态。
- en: The Network View
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络视图
- en: 'The final developer tools view that we''ll look at before moving on is the
    Network view. This allows you to keep tabs on everything being transferred as
    part of your application. HTML documents, JavaScript files, CSS files, and even
    invisible content such as **XMLHttpRequests (XHR)** and other behind the scenes
    data transmissions are all logged and measured here for you to inspect. If you
    want to see a specific type of network activity and hide all the others, there
    is even a handy filter along the top:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，我们将查看的最后一个开发者工具视图是网络视图。这个视图允许你跟踪应用程序中传输的所有内容。HTML 文档、JavaScript 文件、CSS
    文件，甚至是不可见的内容，如 **XMLHttpRequests (XHR)** 和其他幕后数据传输，都会在这里为你记录和测量，以便你检查。如果你想查看特定类型的网络活动并隐藏其他所有内容，顶部甚至有一个方便的过滤器：
- en: '![Figure 2.27: Viewing network activity in the web browser'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.27：在网页浏览器中查看网络活动'
- en: '](img/C14377_02_27.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_02_27.jpg)'
- en: 'Figure 2.27: Viewing network activity in the web browser'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.27：在网页浏览器中查看网络活动
- en: One of the important aspects of the **Network** view that you'll want to note
    is that **Disable cache** is a tool option. Disabling the browser cache is an
    especially good idea if you are making many changes to externally loaded **.js**
    files while testing your program as it will prevent these files from being cached
    by the browser while testing.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要注意**网络**视图的一个重要方面是**禁用缓存**是一个工具选项。在测试程序时，如果你正在对外部加载的**.js**文件进行许多更改，禁用浏览器缓存是一个特别好的主意，因为它将防止这些文件在测试时被浏览器缓存。
- en: In this section, we spent some more time getting familiar with some of the helpful
    views within web browser developer tools.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们花了更多的时间熟悉一些网络浏览器开发者工具中的有用视图。
- en: In the next section, we'll look at a hands-on activity that allows for the direct
    manipulation of HTML elements and their attributes through JavaScript code.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将查看一个实际操作活动，它允许通过JavaScript代码直接操作HTML元素及其属性。
- en: HTML Element Manipulation with JavaScript
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JavaScript进行HTML元素操作
- en: We have alluded to the ability of JavaScript to directly manipulate elements
    within an HTML document a number of times. We'll now go ahead and see firsthand
    exactly how the language can be leveraged to perform this sort of manipulation.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们多次提到了JavaScript直接操作HTML文档中元素的能力。现在，我们将亲自看看这种语言是如何被利用来执行这种操作的。
- en: Before moving on to the activity, there are a couple of concepts to understand
    so that you know how HTML elements function. As you've seen through example, elements
    in HTML generally consist of an opening and closing tag, within which there is
    often text data. If you think of a `<p>` tag or paragraph element in HTML, the
    text within that element, between the opening and closing tags, is the text displayed
    to the user.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行活动之前，有几个概念需要理解，这样你才知道HTML元素是如何工作的。正如你通过示例所看到的，HTML中的元素通常由一个开始标签和一个结束标签组成，其中通常包含文本数据。如果你想到HTML中的`<p>`标签或段落元素，该元素内的文本，即在开始和结束标签之间，是显示给用户的文本。
- en: If we need to address a specific HTML element to manipulate, the best way to
    do so is with the `getElementById()` JavaScript method. Of course, the element
    in question must contain an ID attribute for this to function as expected.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要定位一个特定的HTML元素来操作，使用`getElementById()` JavaScript方法是最佳选择。当然，相关的元素必须包含一个ID属性，这样它才能按预期工作。
- en: 'For example, maybe we have a simple HTML unordered list that contains a set
    of three list items:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可能有一个简单的HTML无序列表，其中包含一组三个列表项：
- en: '[PRE12]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'What if we wanted to manipulate this list through code? We can do so with some
    simple JavaScript. First, we have to store a reference to our list itself. Since
    the list element has an `id` attribute with a value of `frameworks`, we can store
    a reference to this element using the following code:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想通过代码来操作这个列表，我们可以用一些简单的JavaScript来实现。首先，我们必须存储对列表本身的引用。由于列表元素有一个值为`frameworks`的`id`属性，我们可以使用以下代码来存储对这个元素的引用：
- en: '[PRE13]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'With a reference created, we can now easily create and add a new child element:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了引用后，我们现在可以轻松地创建和添加一个新的子元素：
- en: '[PRE14]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can even adjust the style properties of our newly added element:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以调整新添加元素的样式属性：
- en: '[PRE15]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`getElementById()` is a JavaScript function that returns an element that has
    been granted a certain ID attribute and is an exact match for the specific string.
    An HTML element ID attribute must be unique.'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`getElementById()`是一个JavaScript函数，它返回一个具有特定ID属性且与特定字符串完全匹配的元素。HTML元素的ID属性必须是唯一的。'
- en: Once we have a reference to any element in JavaScript through the use of `getElementById()`,
    we can then get a reference to its child elements through the `children.length`
    child attribute and finally get a count of how many child elements exist by invoking
    the length property.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们通过使用`getElementById()`在JavaScript中获得了对任何元素的引用，我们就可以通过`children.length`子属性来获取其子元素的引用，并最终通过调用长度属性来获取存在的子元素数量。
- en: Additionally, any attributes that are defined as part of these elements can
    also be manipulated with JavaScript code. In this activity, we'll make adjustments
    to the `style` attribute—effectively modifying the visual appearance of the specific
    element content.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，任何作为这些元素一部分定义的属性也可以用JavaScript代码来操作。在这个活动中，我们将调整`style`属性——实际上修改了特定元素内容的视觉外观。
- en: In this section, we've seen how to directly manipulate HTML elements and associated
    attributes using pure JavaScript code. You should now have a good idea of what
    this language is capable of.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们看到了如何使用纯 JavaScript 代码直接操作 HTML 元素及其相关属性。现在您应该对这种语言的能力有了一个很好的了解。
- en: 'Activity 2.01: Adding and Modifying an Item to/in the To-Do List'
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动 2.01：向/在待办事项列表中添加和修改项目
- en: In this activity, we will be examining the beginnings of a small web-based view
    that is meant to list a set of to-do items. You need to create some boilerplate
    for the following code, which is currently static HTML and CSS with a placeholder
    `<script>` tag. You then need to add an item, `Research Wines`, to the to-do list
    and change the font color of the newly added item to crimson. Lastly, you need
    to verify the order that this code will be executed in.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在此活动中，我们将检查一个小型基于网页视图的起始部分，该视图旨在列出一系列待办事项。您需要为以下代码创建一些模板，这些代码目前是静态的 HTML 和 CSS，并带有占位符
    `<script>` 标签。然后您需要向待办事项列表中添加一个项目“研究葡萄酒”，并将新添加的项目字体颜色改为猩红色。最后，您需要验证此代码的执行顺序。
- en: 'This activity will help cement the relationship that exists between HTML, CSS,
    and JavaScript. The following code shows how JavaScript can impact the visual
    display styles and even the elemental content of HTML nodes:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动将有助于巩固 HTML、CSS 和 JavaScript 之间的联系。以下代码展示了 JavaScript 如何影响 HTML 节点的视觉显示样式，甚至影响其元素内容：
- en: '[PRE16]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The steps for this activity are as follows:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的步骤如下：
- en: You will create the HTML file yourself and paste in the preceding boilerplate
    HTML code to get started. This file conforms to a standard HTML document targeting
    the HTML5 specification. It is structured with a `<head>` tag and a `<body>` tag,
    and nested within the `<body>` tag exists the visual elements and the data a user
    would be able to see within their web browser. Additionally, within this file,
    you will see a set of CSS style rules within the `<style>` tags, which provide
    visual HTML elements with some additional specific colors, fonts, and sizes. The
    CSS refers to additional stylistic font information being loaded from remote Google
    Fonts ([https://fonts.google.com/](https://fonts.google.com/)) services.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将自行创建 HTML 文件，并将前面的模板 HTML 代码粘贴进去以开始。此文件符合针对 HTML5 规范的标准 HTML 文档。它由 `<head>`
    标签和 `<body>` 标签组成，并且 `<body>` 标签内部嵌套着用户在网页浏览器中可以看到的视觉元素和数据。此外，在此文件中，您将看到一组在 `<style>`
    标签内的 CSS 样式规则，这些规则为视觉 HTML 元素提供了额外的特定颜色、字体和大小。CSS 引用了从远程 Google Fonts ([https://fonts.google.com/](https://fonts.google.com/))
    服务加载的额外样式字体信息。
- en: Assign an ID to our list in order to identify it via code.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为我们的列表分配一个 ID，以便通过代码识别它。
- en: Create a new variable and use the ID to address this element directly by the
    use of the `getElementById()` method.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的变量，并使用 ID 通过 `getElementById()` 方法直接引用此元素。
- en: Create a new HTML list item element.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 HTML 列表项元素。
- en: Populate the list item with a data value.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在列表项中填充一个数据值。
- en: Add it to the visual document by appending it to a chosen parent container that
    already exists.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将其附加到已存在的选择父容器中，将其添加到视觉文档中。
- en: Change the color of the existing element.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 改变现有元素的颜色。
- en: Verify the execution order of our commands by counting the initial number of
    list items.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过计算列表项的初始数量来验证我们命令的执行顺序。
- en: Then, count the final number of list items after code execution.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在代码执行后，计算列表项的最终数量。
- en: Refresh the browser view and watch the console.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新浏览器视图并观察控制台。
- en: Note
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The solution to this activity can be found on page 712.
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此活动的解决方案可以在第 712 页找到。
- en: Summary
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we had a look at different popular IDEs for writing and maintaining
    JavaScript code and chose Visual Studio Code as our primary editor for this portion
    of this book. We then used this editor to examine JavaScript file structures,
    syntax, and project management tasks. Following that, we had a brief overview
    of different JavaScript runtime environments—from the browser to the desktop,
    remote servers, and mobile devices. Finally, we had a better look at the various
    web browser developer tools available to us and performed an activity that allowed
    for the manipulation of HTML elements and their various attributes.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了不同的流行 IDE 用于编写和维护 JavaScript 代码，并选择了 Visual Studio Code 作为本书此部分的默认编辑器。然后我们使用此编辑器来检查
    JavaScript 文件结构、语法和项目管理任务。随后，我们对不同的 JavaScript 运行时环境进行了简要概述——从浏览器到桌面、远程服务器和移动设备。最后，我们更详细地了解了可用的各种网络浏览器开发者工具，并进行了允许操作
    HTML 元素及其各种属性的活动的操作。
- en: In the next chapter, we will explore fundamental concepts and structures that
    are involved when we're working in JavaScript, cover the basics from object types
    to conditionals and looping structures, how to go about writing and invoking functions,
    and even commenting out and debugging code.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨在JavaScript中工作时涉及的基本概念和结构，从对象类型到条件语句和循环结构的基础知识，如何编写和调用函数，甚至如何注释和调试代码。
