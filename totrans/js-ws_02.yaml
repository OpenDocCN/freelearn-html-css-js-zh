- en: 2\. Working with JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be able to operate a modern **integrated
    development environment** (**IDE**); identify and describe basic JavaScript structures;
    describe different JavaScript environments; recognize the major views and their
    uses within the popular web browser developer tools and construct HTML elements
    and modify their various attributes.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will get an overview of some popular tools for writing
    JavaScript and the various available runtimes for executing code with a modern
    web browser and beyond.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we explored a historical overview of JavaScript and
    examined the language's relationship with the Standard ECMAScript. We then explored
    JavaScript by accessing the developer tools of various browsers to provide a basic
    introduction to how JavaScript can be accessed.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we are familiar with JavaScript in a more cerebral way, it's time for
    some hands-on work with the language. First, we'll provide an overview of some
    popular tools for writing JavaScript and of the various runtimes available for
    executing code. With those installed, we can begin writing some JavaScript in
    order to gain some familiarity with the language's syntax and structure—how to
    write code in a meaningful way and how to include it in a web environment.
  prefs: []
  type: TYPE_NORMAL
- en: Within this chapter, we will pay particular attention to the primary target
    for most JavaScript environments and a great tool in itself—the modern web browser.
    In the previous chapter, we looked at an overview of how to access developer tools
    in various web browsers. In this chapter, we will further explore how these tools
    can be used in JavaScript development.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we'll dig more deeply into web browser interactions and look at how
    we can control both the style and content of elements within the web browser with
    the use of common JavaScript functions. All the code in this chapter will be written
    using the editor that we are about to introduce.
  prefs: []
  type: TYPE_NORMAL
- en: Integrated Development Environments (IDE)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript is a language that is interpreted at runtime as there is no need
    for us to compile it beforehand. There are other ways of writing JavaScript in
    a non-direct way, such as through transpilation or compilation, but we'll review
    those later. Before we get too far into working with JavaScript and writing code,
    we should examine the benefits of using a dedicated development environment to
    write and manage our JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using an IDE aligned with the platform and languages you work with provides
    a number of benefits over a simple text editor. For example, IDEs usually include
    the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: Linting, formatting, and other cleanup utilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrated **Terminal** and command-line access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Programming language **debugging tools**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Robust code completion and hinting as you type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Snippets and preformed code content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built-in compilers (depending on the language and platform)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Potential **emulation features**—especially when dealing with mobile development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub's Atom
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A free and open-source editor, Atom is maintained by GitHub and is available
    for Microsoft Windows, Apple macOS, and various Linux distributions. Since this
    editor was created by GitHub, one of its main features is tight integration along
    with the other services they provide within the editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1: GitHub for Atom'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_02_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.1: GitHub for Atom'
  prefs: []
  type: TYPE_NORMAL
- en: The editor features a plugin system that allows users to add support for various
    languages and themes. Atom can be downloaded and installed for free from https://atom.io/.
  prefs: []
  type: TYPE_NORMAL
- en: Sublime Text
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Though a very popular editor some years back, it''s still worth noting here
    as many developers use this IDE for JavaScript and more. Sublime Text supports
    Microsoft Windows, Apple macOS, and various Linux distributions. The latest version
    was released in 2019:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2: Sublime Text'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_02_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.2: Sublime Text'
  prefs: []
  type: TYPE_NORMAL
- en: Sublime Text can be downloaded and installed from [https://www.sublimetext.com/](https://www.sublimetext.com/)
    as a free evaluation tool; however, it requires you to purchase it for long-time
    use.
  prefs: []
  type: TYPE_NORMAL
- en: Adobe Dreamweaver
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Previously the property of Macromedia, Adobe acquired that company and ceased
    the development of their existing web editing product, Adobe GoLive, and instead
    strengthened the support for Dreamweaver. In the years since then, the application
    has gone through several rewrites and adjustments, but the focus has always been
    split between a visual editing view and one targeted at developers in the form
    of bare code. The code editor within Dreamweaver is based on Adobe''s open-source
    Brackets ([https://packt.live/2WWMUH6](https://packt.live/2WWMUH6)) project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3: Adobe Dreamweaver'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_02_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.3: Adobe Dreamweaver'
  prefs: []
  type: TYPE_NORMAL
- en: Dreamweaver can be downloaded and installed from [https://www.adobe.com/products/dreamweaver.html](https://www.adobe.com/products/dreamweaver.html)
    as a trial but must be purchased for continued use.
  prefs: []
  type: TYPE_NORMAL
- en: JetBrains WebStorm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A variety of editors and other tools are available from JetBrains. Many of
    these build upon one another in terms of complexity and functionality. When looking
    primarily for a web editor for authoring JavaScript, HTML, and CSS, JetBrains
    WebStorm is a good choice, but it does have a bit of a learning curve in the way
    that it handles the management of projects and associated files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4: JetBrains WebStorm'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_02_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.4: JetBrains WebStorm'
  prefs: []
  type: TYPE_NORMAL
- en: WebStorm can be downloaded and installed from [https://www.jetbrains.com/webstorm/](https://www.jetbrains.com/webstorm/)
    as a free trial, with various purchase options available afterward. Those affiliated
    with educational institutions can apply for a free license with yearly renewal.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Visual Studio Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this module, we''ll be using the Visual Studio Code as our IDE. This software
    application is a free, cross-platform IDE from Microsoft that is updated every
    month. It allows you to work with native web technologies in a very capable way—but
    also has the ability to support other languages and features through extensions.
    Visual Studio Code is very popular with developers of all sorts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5: Microsoft Visual Studio Code'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_02_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.5: Microsoft Visual Studio Code'
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio Code can be downloaded and installed for free from [https://code.visualstudio.com/](https://code.visualstudio.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The process of downloading and installing an IDE can be found in the *Preface*
    of this book.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript Project and File Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have our development environment installed, we need to consider
    some best practices in terms of where we should store projects on our local machine,
    and how we should organize folders and files within each project. We'll also walk
    through a small exercise that will demonstrate how to load a project (including
    all associated files) into Visual Studio Code.
  prefs: []
  type: TYPE_NORMAL
- en: Project Folders and Files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is advisable to set aside a directory on your local machine where you will
    place all the projects that you may be working on. For instance, you could create
    a directory called `Projects` on your local disk and then create specific project
    folders within it—one for each distinct project. This way, you can be sure of
    where all your projects are located. You can even create a shortcut to your `Projects`
    folder to get at it easily whenever you like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6: Example of a Projects directory on macOS'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_02_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.6: Example of a Projects directory on macOS'
  prefs: []
  type: TYPE_NORMAL
- en: Individual projects will exist in specific folders within your main `Projects`
    directory. Depending on how many projects you work on, you may have to create
    many subfolders. Each project should be clearly named for ease of identification.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 2.01: Creating a Working Project Directory'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s look at how to create a directory so that we can contain our working
    project and all its associated files and subfolders:'
  prefs: []
  type: TYPE_NORMAL
- en: In your `filesystem`, locate a place that is easily accessible and to which
    your account has full read/write rights, as you'll be writing files at this location.
    If you already have a preexisting `Projects` directory, this is likely to be an
    ideal location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Within this folder, create a new folder and name it `JavaScript`, or another
    name of your choice, like so:![Figure 2.7: Creating a new folder on macOS'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_02_07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.7: Creating a new folder on macOS'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With your new project folder created, navigate to its parent directory. You
    may be there already or may need to go up one level in the `filesystem`. This
    all depends on your operating system and how you've created the folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using your mouse, stylus, or touchpad, drag the working project folder from
    the file explorer into the Visual Studio Code application window:![Figure 2.8:
    Loading the project into Visual Studio Code'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_02_08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.8: Loading the project into Visual Studio Code'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The current tab's content within Visual Studio Code will become obscured, indicating
    that you can release the folder onto it. Go ahead and do this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will effectively set the folder you dragged onto the Visual Studio Code
    interface as your working project folder. Look to the left-hand pane and navigate
    the files and folders in it:![Figure 2.9: The declared working project folder'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_02_09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.9: The declared working project folder'
  prefs: []
  type: TYPE_NORMAL
- en: The newly created folder is now the working project folder within Visual Studio
    Code. Normally, you'd see a list of files and folders in the leftmost sidebar.
    We haven't created any files or folders yet, so there is nothing there.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can also declare the working project folder by choosing **File** | **Open**
    from the application menu and browsing for the folder.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio Code, like many other editors, will remember projects you've opened
    within it and present a list of them when you next open the application.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned about the importance of having an organized folder
    structure on your local machine for managing all your projects. We also saw how
    to create a new working folder for a project and then opened it within our code
    editor.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll use the project we just created to start writing
    and examining JavaScript syntax and common structural elements.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript Syntax and Structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've installed an IDE and established how to manage a working project
    folder within our code editor, it's time to look at how JavaScript code is written
    and ordered within such an environment. The first thing we need to do is create
    a set of files within the `Project` folder because we will write our JavaScript
    instructions in these. We will create a set of files within the working project
    folder and then bind them to one another.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 2.02: Creating Project Boilerplate'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The most common environment where JavaScript runs is inside a web browser.
    For JavaScript to run within this environment, it must be included within a host
    HTML file in some way. Let''s create a basic HTML file and a JavaScript file and
    instruct the web browser to load our JavaScript file within the HTML at runtime.
    Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the working project folder you created previously within your IDE (Visual
    Studio Code). No files will be listed in the leftmost pane since we haven''t created
    any yet:![Figure 2.10: The current project contains no files'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_02_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.10: The current project contains no files'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you hover your mouse cursor over this leftmost area, you will notice a number
    of icons appear to the right of the project name. The leftmost of these icons
    allows for the creation of new files. The one next to it allows the creation of
    new folders. Click the `index.html` for the name of the extension of the newly
    created file. The name `index` tells us that this file is the *root* or *index*
    HTML file for our project. The `.html` extension informs both us and the computer
    as to the nature of this file:![Figure 2.12: Naming the file index.html'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_02_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.12: Naming the file index.html'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once complete, hit *Enter*/*Return* on your keyboard to commit the change.
    The file will immediately open in the editing pane of your editor. As you can
    see, it is completely blank:![Figure 2.13: The file exists and is open, but it
    is empty'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_02_13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.13: The file exists and is open, but it is empty'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Type in the following boilerplate HTML code to set up the file''s structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We declare the file as HTML and establish a `<head>` tag and a `<body>` tag.
    The head of an HTML document includes invisible data such as declaring the character
    set and title. The body of an HTML document contains visible elements such as
    text and images. Notice that you must save the file using **File** | **Save**
    or by using *Command*/*Ctrl* + *S*:![Figure 2.14: Our initial HTML markup structure'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_02_14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.14: Our initial HTML markup structure'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a new file once again, this time naming it `app.js`. This will signify
    that this is the main JavaScript file for the application. The `.js` file extension
    indicates an external JavaScript file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The new JavaScript file will open just like the HTML file did. As you can see,
    it is also initially empty. Type in the following JavaScript code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ensure that you save the JavaScript file again by navigating to `File` | `Save`
    from the application menu or by using the keyboard shortcut `Command`/`Ctrl` +
    `S`:![Figure 2.15: You should now have both a JavaScript file and an HTML file'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_02_15.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.15: You should now have both a JavaScript file and an HTML file'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In order to bind the newly created JavaScript file to our HTML so that it can
    run in the web browser, we must reference it within the HTML file itself. Switch
    to the HTML file titled `<title>` tag and before the closing tag of the `<head>`
    element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `<script>` tag is used to either include an external `.js` file, as we
    are doing here, or it can be used to denote a block of JavaScript code directly
    within HTML. The full HTML file code should now appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the new line of code added to the HTML, save the file once again. In Visual
    Studio Code, a file with unsaved changes is signified with a small, filled disc
    in the `File` tab within the project explorer:![Figure 2.16: A file with unsaved
    changes'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_02_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.16: A file with unsaved changes'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run the `index.html` file within a web browser. Open **developer tools** and
    activate the **Console** view. If all goes well, you will see the message we instructed
    JavaScript to output:![Figure 2.17: The resulting console output'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_02_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.17: The resulting console output'
  prefs: []
  type: TYPE_NORMAL
- en: We now know that our project boilerplate has been configured correctly since
    the HTML is running and has effectively called code from within the JavaScript
    file. We now have the beginnings of a web application—complete with structure
    (HTML) and logic (JavaScript) components.
  prefs: []
  type: TYPE_NORMAL
- en: Basic JavaScript Syntax
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is important to know the basic syntax of any programming language in order
    to write it correctly. To begin writing JavaScript, you'll need to know how to
    declare variables, assign data to variables, and terminate commands properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'A variable in JavaScript is an `var` keyword. Here is an example of a variable
    declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To actually assign a value to this variable and give it something useful to
    do, we must use the assignment operator, `=`. Here is the same statement with
    a value assigned to the variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In this instance, we are assigning a string value to the variable. There are
    many different *types* of values, or data, that we can assign to variables, and
    we'll learn more about these in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will note that we also place a **semicolon** after each variable declaration,
    whether we assign a value to it or not. While it is not absolutely necessary to
    do this, the use of a semicolon in this manner terminates a command. Multiple
    commands should, however, be placed across multiple lines, as demonstrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We assign string values to both a `firstName` and `lastName` variable, and
    then employ the `console.log()` method along with some string concatenation using
    the `+` operator to form a message and output it to the browser console. When
    executed in the browser, it appears like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.18: The resulting output message'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_02_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.18: The resulting output message'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The term **concatenation** simply refers to joining plain strings and string
    variable values together, as we've done here.
  prefs: []
  type: TYPE_NORMAL
- en: That's about all you need to know regarding syntax to get started. Don't worry—there
    will be much more information around syntax when you reach *Chapter 5*, *Beyond
    the Fundamentals*.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript Execution Order
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section hearkens back to an example from the previous chapter in terms
    of the various ways JavaScript can be included within a web document. There are
    two choices here: either include an external JavaScript file somewhere within
    the `<head>` tag or the `<body>` tag of your HTML document or embed the code directly
    within the document itself, again at either location.'
  prefs: []
  type: TYPE_NORMAL
- en: No matter how you include JavaScript within your HTML document, the web browser
    will always execute from top to bottom. Any JavaScript within the `<head>` tag
    of a document will execute before anything within the `<body>` tag of the document.
    Of course, you can compartmentalize blocks of JavaScript code within functions
    to execute when invoked as well, which effectively gets around this rule in some
    ways.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 2.03: Verifying an Execution Order'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s conduct a small exercise to see whether, for any JavaScript, the `<head>`
    of a document will execute before anything with the `<body>` tag of the document.
    Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the exercise files for this chapter, you will find a document named `order.html`.
    Open this within Visual Studio Code to inspect it. You will see the following
    HTML code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You''ll notice there is no JavaScript just yet, so let''s insert some bits
    of code in various places for this demonstration. Add the following code beneath
    the `<title>` element within the document''s `<head>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, add this snippet directly above the `<h1>` element within the `<body>`
    tag of our document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we''ll add another line of code just before the `<body>` tag closes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The document should now appear as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run this document within your web browser with the developer tools Console
    view open. You will be able to verify that yes—the code is certainly processed
    from top to bottom, as we explained:![Figure 2.19: Verification of the execution
    order'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_02_19.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.19: Verification of the execution order'
  prefs: []
  type: TYPE_NORMAL
- en: The `console.log()` command in JavaScript will write any data within parentheses
    to the console. This is the simplest way of debugging JavaScript, though this
    will be explored further in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we've learned about several important fundamentals regarding
    the structure and syntax of JavaScript—particularly when it comes to the web browser
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll explore other environments in which JavaScript can
    run.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of JavaScript Environments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in our journey, we've only been exposed to the modern web browser as
    a JavaScript runtime, but even within browsers, there are a variety of JavaScript
    engines that serve as different runtimes for JavaScript. For instance, Chrome
    has the **V8 engine**, while Firefox runs JavaScript through **SpiderMonkey**.
    Just about every browser has its own distinct engine.
  prefs: []
  type: TYPE_NORMAL
- en: There are also other runtimes aside from those that are browser-based. We'll
    have a look at the variety of runtimes available to us now.
  prefs: []
  type: TYPE_NORMAL
- en: Browser-Based JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By far, the most common environment for using JavaScript throughout its entire
    history as a language is within the web browser. We''ve already spoken of this
    particular runtime quite a lot, so we will not spend time going over all of this
    again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.20: V8—JavaScript in the web browser'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_02_20.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.20: V8—JavaScript in the web browser'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the benefits of using the web browser as a JavaScript runtime are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Web browsers are one of the most distributed software platforms in the world.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browsers include a set of built-in developer tools for debugging and monitoring
    JavaScript.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browsers are the absolute primary runtime for JavaScript and all others follow
    it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can learn more about each browser runtime at their respective websites.
    To learn more about V8, the runtime engine powering Chrome, visit [https://v8.dev/](https://v8.dev/).
  prefs: []
  type: TYPE_NORMAL
- en: Server-Based JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the improvement in the performance of JavaScript engines in the web browser,
    people began wondering whether there may be other applications for the language
    and specific runtimes—particularly in terms of a server-based environment. In
    2009, this became a reality with the creation of **Node.js**. A year before this,
    Google had open-sourced its powerful V8 JavaScript engine. This allowed developers
    to implement V8, along with specific operating system bindings, to produce the
    first version of Node.js:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.21: Node.js—JavaScript on the server'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_02_21.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.21: Node.js—JavaScript on the server'
  prefs: []
  type: TYPE_NORMAL
- en: 'The benefits of using a server-based JavaScript runtime include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Threadless execution of code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Events are completely non-blocking.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Efficiency and performance are separated from the client.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can learn more about Node.js at [https://nodejs.org/](https://nodejs.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Desktop JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While not exactly a new environment for JavaScript to run with, desktop applications
    are a segment that ripe for growth as additional runtimes and libraries mature.
    The most popular solution for building desktop applications is Electron. Like
    similar frameworks, when developing applications for Electron, you will be using
    native web technologies that end up being wrapped in a native-focused container
    for any target desktop operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Electron apps can target Apple macOS, Microsoft Windows, or Linux, and are
    all built-in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.22: Electron—JavaScript on the desktop'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_02_22.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.22: Electron—JavaScript on the desktop'
  prefs: []
  type: TYPE_NORMAL
- en: 'The benefits of using a desktop-focused JavaScript runtime include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The ability to use native web technologies to write desktop applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most functionality is platform-agnostic, so, often, no specific operating system
    commands are needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can learn more about Electron at [https://electronjs.org/](https://electronjs.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Mobile JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Mobile devices have been huge since iPhone and Android first made their debuts
    nearly a decade ago. Of course, developers want to tap into this segment of the
    market and, thankfully, there have been a lot of pretty good solutions over the
    years that make use of JavaScript. For quite some time, Apache Cordova and Adobe
    PhoneGap were the primary frameworks that were used to translate web technologies
    into functional mobile applications. More recently, technologies such as **Ionic**
    have become incredibly popular for those using common JavaScript-based frameworks
    such as Angular, React, and Vue. With many of these tools, you can also use plain
    vanilla JavaScript as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.23: Ionic—JavaScript on mobile devices'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_02_23.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.23: Ionic—JavaScript on mobile devices'
  prefs: []
  type: TYPE_NORMAL
- en: 'The benefits of using a mobile-focused JavaScript runtime include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The ability to use native web technologies to write iOS and Android applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most functionality is platform-agnostic, so, often, no specific mobile operating
    system commands are needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can learn more about Ionic at [https://ionicframework.com/](https://ionicframework.com/).
  prefs: []
  type: TYPE_NORMAL
- en: So far, we've had a brief overview of the various primary runtime environments
    for modern JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll focus once more on the web browsers that we introduced
    in the first chapter while paying more attention to the specific functions of
    some of the more useful views within their tools.
  prefs: []
  type: TYPE_NORMAL
- en: A Closer Look at Web Browser Developer Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we had a brief introduction to working with browser
    developer tools. We'll expand on our exploration of browser developer tools and
    examine a sample of the most used views when it comes to working with JavaScript
    in the web browser.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, there are many other views and options than what will be mentioned
    here and, while we are examining these from within Google Chrome, they will differ
    in both overall look and functional use from browser to browser. This should give
    you a good idea of what is possible, though, no matter what your preferred browser
    is.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To access Developer Tools in Google Chrome, press the `F12` key.
  prefs: []
  type: TYPE_NORMAL
- en: The Elements View
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The primary view that you''ll be presented with when exploring browser developer
    tools for the first time will most likely be the Elements view. This view is super
    useful as it presents all the elements of a web document and the associated content
    and attributes in a very structured way. You will also notice that the various
    styles and event listeners will be available for you to explore within this view.
    Selecting an element will display both the CSS rules and any associated event
    listeners:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.24: Web document Elements view'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_02_24.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.24: Web document Elements view'
  prefs: []
  type: TYPE_NORMAL
- en: While you may think that there is no useful content being displayed in this
    view in terms of JavaScript, you actually have access to the entire **DOM** structure
    here and can monitor this structure and the associated attributes to verify and
    explore changes you are making via code.
  prefs: []
  type: TYPE_NORMAL
- en: The Console View
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is the developer tools view that we''ve had the most interaction with
    thus far and is likely to be the most important view when writing and testing
    JavaScript code. Any errors and warnings will be displayed within this view and
    you can also get the output on whatever data you wish as your code executes within
    the document. Using a JavaScript method such as `console.log()` will display output
    of all sorts of useful data for you to explore within the Console view, and you
    can even customize exactly the sort of data that is shown through various options
    associated with the view itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.25: Browser console output'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_02_25.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.25: Browser console output'
  prefs: []
  type: TYPE_NORMAL
- en: Every web browser has a Console view and even though specific use of this view
    may differ between browsers, the fundamental usage remains the same.
  prefs: []
  type: TYPE_NORMAL
- en: The Sources View
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When it comes to any sort of programming, the ability to set breakpoints to
    effectively pause code execution and debug your program at a certain state is
    critical. Using the source view, we can do this effectively, right within the
    web browser itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'This view provides a way for us to choose to view the source code for any HTML
    or JavaScript files that are currently running and set breakpoints at specific
    lines in order to cause the runtime to pause when the breakpoint is encountered.
    Once paused, we can then use additional tools within the source''s view to examine
    our code in certain ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.26: Debugging JavaScript in the web browser'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_02_26.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.26: Debugging JavaScript in the web browser'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, we have set a breakpoint at line 39 of our HTML
    file, which includes embedded JavaScript code. With the code execution paused
    at this specific line, we can examine the state of our program in a very detailed
    way.
  prefs: []
  type: TYPE_NORMAL
- en: The Network View
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The final developer tools view that we''ll look at before moving on is the
    Network view. This allows you to keep tabs on everything being transferred as
    part of your application. HTML documents, JavaScript files, CSS files, and even
    invisible content such as **XMLHttpRequests (XHR)** and other behind the scenes
    data transmissions are all logged and measured here for you to inspect. If you
    want to see a specific type of network activity and hide all the others, there
    is even a handy filter along the top:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.27: Viewing network activity in the web browser'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_02_27.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.27: Viewing network activity in the web browser'
  prefs: []
  type: TYPE_NORMAL
- en: One of the important aspects of the **Network** view that you'll want to note
    is that **Disable cache** is a tool option. Disabling the browser cache is an
    especially good idea if you are making many changes to externally loaded **.js**
    files while testing your program as it will prevent these files from being cached
    by the browser while testing.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we spent some more time getting familiar with some of the helpful
    views within web browser developer tools.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll look at a hands-on activity that allows for the direct
    manipulation of HTML elements and their attributes through JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: HTML Element Manipulation with JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have alluded to the ability of JavaScript to directly manipulate elements
    within an HTML document a number of times. We'll now go ahead and see firsthand
    exactly how the language can be leveraged to perform this sort of manipulation.
  prefs: []
  type: TYPE_NORMAL
- en: Before moving on to the activity, there are a couple of concepts to understand
    so that you know how HTML elements function. As you've seen through example, elements
    in HTML generally consist of an opening and closing tag, within which there is
    often text data. If you think of a `<p>` tag or paragraph element in HTML, the
    text within that element, between the opening and closing tags, is the text displayed
    to the user.
  prefs: []
  type: TYPE_NORMAL
- en: If we need to address a specific HTML element to manipulate, the best way to
    do so is with the `getElementById()` JavaScript method. Of course, the element
    in question must contain an ID attribute for this to function as expected.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, maybe we have a simple HTML unordered list that contains a set
    of three list items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'What if we wanted to manipulate this list through code? We can do so with some
    simple JavaScript. First, we have to store a reference to our list itself. Since
    the list element has an `id` attribute with a value of `frameworks`, we can store
    a reference to this element using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'With a reference created, we can now easily create and add a new child element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We can even adjust the style properties of our newly added element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '`getElementById()` is a JavaScript function that returns an element that has
    been granted a certain ID attribute and is an exact match for the specific string.
    An HTML element ID attribute must be unique.'
  prefs: []
  type: TYPE_NORMAL
- en: Once we have a reference to any element in JavaScript through the use of `getElementById()`,
    we can then get a reference to its child elements through the `children.length`
    child attribute and finally get a count of how many child elements exist by invoking
    the length property.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, any attributes that are defined as part of these elements can
    also be manipulated with JavaScript code. In this activity, we'll make adjustments
    to the `style` attribute—effectively modifying the visual appearance of the specific
    element content.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we've seen how to directly manipulate HTML elements and associated
    attributes using pure JavaScript code. You should now have a good idea of what
    this language is capable of.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 2.01: Adding and Modifying an Item to/in the To-Do List'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this activity, we will be examining the beginnings of a small web-based view
    that is meant to list a set of to-do items. You need to create some boilerplate
    for the following code, which is currently static HTML and CSS with a placeholder
    `<script>` tag. You then need to add an item, `Research Wines`, to the to-do list
    and change the font color of the newly added item to crimson. Lastly, you need
    to verify the order that this code will be executed in.
  prefs: []
  type: TYPE_NORMAL
- en: 'This activity will help cement the relationship that exists between HTML, CSS,
    and JavaScript. The following code shows how JavaScript can impact the visual
    display styles and even the elemental content of HTML nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The steps for this activity are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: You will create the HTML file yourself and paste in the preceding boilerplate
    HTML code to get started. This file conforms to a standard HTML document targeting
    the HTML5 specification. It is structured with a `<head>` tag and a `<body>` tag,
    and nested within the `<body>` tag exists the visual elements and the data a user
    would be able to see within their web browser. Additionally, within this file,
    you will see a set of CSS style rules within the `<style>` tags, which provide
    visual HTML elements with some additional specific colors, fonts, and sizes. The
    CSS refers to additional stylistic font information being loaded from remote Google
    Fonts ([https://fonts.google.com/](https://fonts.google.com/)) services.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign an ID to our list in order to identify it via code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new variable and use the ID to address this element directly by the
    use of the `getElementById()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new HTML list item element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Populate the list item with a data value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add it to the visual document by appending it to a chosen parent container that
    already exists.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the color of the existing element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify the execution order of our commands by counting the initial number of
    list items.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, count the final number of list items after code execution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Refresh the browser view and watch the console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The solution to this activity can be found on page 712.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we had a look at different popular IDEs for writing and maintaining
    JavaScript code and chose Visual Studio Code as our primary editor for this portion
    of this book. We then used this editor to examine JavaScript file structures,
    syntax, and project management tasks. Following that, we had a brief overview
    of different JavaScript runtime environments—from the browser to the desktop,
    remote servers, and mobile devices. Finally, we had a better look at the various
    web browser developer tools available to us and performed an activity that allowed
    for the manipulation of HTML elements and their various attributes.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore fundamental concepts and structures that
    are involved when we're working in JavaScript, cover the basics from object types
    to conditionals and looping structures, how to go about writing and invoking functions,
    and even commenting out and debugging code.
  prefs: []
  type: TYPE_NORMAL
