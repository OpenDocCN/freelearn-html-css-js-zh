- en: Chapter 9. Create and Play Animations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 9 章。创建和播放动画
- en: In the previous chapters, you learned everything that is required to create
    cool, beautiful, and complete 3D applications. This is the last chapter and the
    last thing that you need to learn is how to animate objects in your scene. Then,
    finally, you will get a fully dynamic scene.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，您学习了创建酷炫、美观和完整的 3D 应用程序所需的所有内容。这是最后一章，您需要学习的最后一件事是如何在场景中动画化对象。然后，最终，您将获得一个完全动态的场景。
- en: 'The Babylon.js framework provides a way to create animations without managing
    them with code. For example, you want to create a rotation animation that will
    affect five objects (nodes) in your scene; Babylon.js will allow you to create
    an animation object that you can share easily between your five nodes. In this
    chapter, we''ll cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Babylon.js 框架提供了一种无需通过代码管理即可创建动画的方法。例如，您想创建一个旋转动画，该动画将影响场景中的五个对象（节点）；Babylon.js
    将允许您创建一个动画对象，您可以在五个节点之间轻松共享。在本章中，我们将涵盖以下主题：
- en: Creating animations using Babylon.js
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Babylon.js 创建动画
- en: Smooth animations using easing functions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用缓动函数实现平滑动画
- en: Importing and managing animated models
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入和管理动画模型
- en: Creating animations using Babylon.js
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Babylon.js 创建动画
- en: For this first topic, let's discuss how to simply animate a box with code and
    how to create an animation using the Babylon.js tools such as the `BABYLON.Animation`
    class. You'll quickly understand the importance of using the provided tools instead
    of handling animations with code.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个第一个主题，让我们讨论如何简单地使用代码动画化一个盒子，以及如何使用 Babylon.js 工具（如 `BABYLON.Animation` 类）创建动画。您将很快理解使用提供的工具而不是用代码处理动画的重要性。
- en: Animating an object with code
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用代码动画化对象
- en: 'Let''s start with the following scene (a plane and a box):'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从以下场景开始（一个平面和一个盒子）：
- en: '![Animating an object with code](img/image_09_001.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![使用代码动画化对象](img/image_09_001.png)'
- en: Let's animate the box to turn around its center (x = 0, y = 0, and z = 0). The
    process should be to increment a value (angle) in time and set the new position
    of the box.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们让盒子围绕其中心（x = 0, y = 0, 和 z = 0）旋转。这个过程应该是增加一个值（角度）随时间变化，并设置盒子的新位置。
- en: Typically, (*x = Radius*Cos(angle)*, *y = 0*, and *z = Radius*Sin(angle)*).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，(*x = 半径 * Cos(角度)*, *y = 0*, 和 *z = 半径 * Sin(角度)*)。
- en: 'To perform this action, you can call a `.registerBeforeRender` function on
    the scene. This function takes an anonymous function as the parameter and this
    anonymous function will be automatically called for every frame, as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行此操作，您可以在场景上调用一个 `.registerBeforeRender` 函数。此函数接受一个匿名函数作为参数，并且这个匿名函数将自动在每一帧被调用，如下所示：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This function is pretty simple; however, it is applied only to the box. What
    if you want to animate another object by sharing the same code? The solution is
    simple; just pass the node as a parameter to a function that will register a new
    function at each call before render, as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数相当简单；然而，它仅应用于盒子。如果您想通过共享相同的代码来动画化另一个对象怎么办？解决方案很简单；只需将节点作为参数传递给一个函数，该函数将在每次渲染前注册一个新的函数，如下所示：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, it is not necessarily a problem to manage the animations through
    code. The real problem occurs when you have to synchronize the animation with
    time (manage the speed of animation), stop or pause animations, and so on. These
    functions require you to create a complete manager and it is not necessary what
    you want to do.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，通过代码管理动画并不一定是个问题。真正的问题出现在您需要将动画与时间同步（管理动画速度）、停止或暂停动画等情况。这些功能要求您创建一个完整的管理器，而这并不是您想要做的。
- en: The next sub-topic will show you how to use the animation manager of Babylon.js
    and don't worry about the time, stop and pause functions, and so on.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个子主题将向您展示如何使用 Babylon.js 的动画管理器，并且不用担心时间、停止和暂停功能等。
- en: Using the animation manager of Babylon.js
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Babylon.js 的动画管理器
- en: 'Let''s take the same scene and create a simple animation only using the animation
    manager of Babylon.js. You need to understand only one thing: the frame keys of
    an animation.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用相同的场景，仅使用 Babylon.js 的动画管理器创建一个简单的动画。您只需要理解一件事：动画的帧键。
- en: 'To create an animation, just use the `BABYLON.Animation` class and attach it
    to a node (or several nodes). The `BABYLON.Animation` class isn''t difficult to
    understand, it takes a name, a property to animate on a node (and not necessarily
    a property of a node), number of frames per second, data type, and loop mode,
    as shown in the following snippet:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `rotation` parameter says that the animation manager will animate the `.rotation`
    property of the object attached to the animation. A rotation is of the `BABYLON.Vector3` type,
    this is the reason why the data type is `BABYLON.Animation.ANIMATIONTYPE_VECTOR3`.
    Finally, we want the animation to loop.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'According to the property you are animating (*rotation* in the previous example
    that is a `BABYLON.Vector3` object), you have to provide a valid data type which
    can be one of the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '`ANIMATIONTYPE_FLOAT`: When the property is of the `float` type.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ANIMATIONTYPE_VECTOR2`: When the property is of the `BABYLON.Vector2` type.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ANIMATIONTYPE_VECTOR3`: When the property is of the `BABYLON.Vector3` type.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ANIMATIONTYPE_QUATERNION`: When the property is of the `BABYLON.Quaternion` type.
    A mathematical object that can be used to represent the rotation of a node (`node.rotationQuaternion`)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ANIMATIONTYPE_MATRIX`: When the property is of the `BABYLON.Matrix` type.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ANIMATIONTYPE_COLOR3`: When the property is of the `BABYLON.Color3` type.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this case, we use the `Vector3` data type as the `.rotation` property is
    `BABYLON.Vector3`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step consists of creating an array of keys. The keys (or key frames)
    represent the state of the animated property at specific frames. In the previously
    created animation, the number of frames per second was set to `1`. Then, each
    second, a key, in the array of keys, is reached. The keys of an animation is simply
    an array of objects, objects each composed of two properties: the frame number
    and, according to the animated property, the associated value (of type `float`,
    `BABYLON.Vector2`, or `BABYLON.Vector3`, and so on.), as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s create two keys that will translate the box from the position (`x =
    0`, `y = 2.5`, and `z = 0`) to (`x = 10`, `y = 10`, and `z = 10`) at frame 20,
    as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If the number of frames per second is set to `1`, the second key (`frame = 20`)
    means that the box position will be at (`x = 10`, `y = 10`, and `z = 10`) 20 seconds
    later.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s set the keys for the `simpleAnimation` animation manager, as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, let''s attach the animation manager to the box and start the animation
    in the scene, as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The result looks similar to the following at the beginning:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the animation manager of Babylon.js](img/image_09_002.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
- en: 'Finally, once the animation has finished, the result looks like:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the animation manager of Babylon.js](img/image_09_003.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
- en: 'To reproduce the previous example (the box that turns around the center), the
    solution is pretty simple; just add 360 keys that represent every degree of a
    circle, as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To control your animations (start, pause, restart, and stop), the `.beginAnimation`
    function returns an object of the `BABYLON.Animatable` type. The returned object
    is created on the fly and allows you to control your animations. Let''s consider
    the same example as earlier:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Create a simple animation
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first example, with only two frames, can be heavy as I know that you''ll
    quickly create a helper, once and for all. Babylon.js thought about this and provides
    a static `CreateAndStartAnimation` function that creates two frames and starts
    the animation for you. Let''s create the same animation only using the following
    function:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can guess, this method is used by Babylon.js to create `BABYLON.InterpolateValueAction`
    ([Chapter 7](ch07.html "Chapter 7. Defining Actions on Objects"), *Defining Actions
    on Objects*).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Managing events
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An advanced use of the Babylon.js animations is to call a function when a specific
    frame is reached. The `BABYLON.AnimationEvent` class exists to allow you to attach
    one or more events to a specific frame. For example, consider the previous example
    (`complexAnimation`), as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Using easing functions to smooth animations
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the advanced features of the Babylon.js animations management is to use
    easing functions to smooth well and add behaviors to your animations.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: To take a quick look at the appearance of the easing functions (we do not necessarily
    remember every type of easing functions), you should follow this link ([http://easings.net/en](http://easings.net/en)).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Applying an easing function to an animation
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To apply an easing function to an animation, the method only consists of customizing
    an already created animation. You'll just have to call the `.setEasingFunction`
    method for an animation with an easing function as the parameter.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'The available easing functions are (with the associated curve in time) as shown
    in the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Circle ease: `BABYLON.CircleEase()`
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Applying an easing function to an animation](img/image_09_004.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
- en: Back ease: `BABYLON.BackEase(amplitude)`
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Applying an easing function to an animation](img/image_09_005.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
- en: Bounce ease: `BABYLON.BounceEase(bounces, bounciness)`
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Applying an easing function to an animation](img/image_09_006.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
- en: Cubic ease: `BABYLON.CubicEase()`
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Applying an easing function to an animation](img/image_09_007.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
- en: Elastic ease: `BABYLON.ElasticEase(oscillations, springiness)`
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Applying an easing function to an animation](img/image_09_008.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
- en: Exponential ease: `BABYLON.ExponentialEase(exponent)`
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Applying an easing function to an animation](img/image_09_009.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: Quadratic ease:`BABYLON.QuadraticEase()`
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Applying an easing function to an animation](img/image_09_010.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
- en: Quartic ease: `BABYLON.QuarticEase()`
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Applying an easing function to an animation](img/image_09_011.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
- en: Quintic ease: `BABYLON.QuinticEase()`
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Applying an easing function to an animation](img/image_09_013.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
- en: Sine ease: `BABYLON.SineEase()`
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Applying an easing function to an animation](img/image_09_012.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
- en: 'Let''s start with the following simple example (animate the .x property of
    the box''s rotation using a circle easing function):'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'That''s all, the animation will now follow the formula of the circle easing
    function, as shown in the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As it is hard to represent an animation by taking screenshots, you can try the
    different easing functions by yourself. The method is the same for all the easing
    functions, except that several easing function constructors will need some arguments
    for more customization.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s modify the behavior of the easing function. An easing function
    consists of modes, as shown in the following:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '`In`, when the animation starts (enters): `BABYLON.EasingFunction.EASINGMODE_EASEIN`'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Out`, when the animation is completed (exits): `BABYLON.EasingFunction.EASINGMODE_EASEOUT`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`In & Out`, when the animation starts and finishes (both enter and exit): `BABYLON.EasingFunction.EASINGMODE_EASEINOUT`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, the easing mode is set to `In` (`BABYLON.EasingFunction.EASINGMODE_EASEIN`).
    The website [http://easings.net/en](http://easings.net/en) shows exactly how the
    easing functions look in these three modes.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'To specify the easing mode, just call the `.setEasingMode` method on an animation,
    as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Creating your own easing function
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the last sub-topic about easing functions, let's discuss how to create your
    own easing function if it is not available in Babylon.js. The process is really
    simple (except the possible difficult mathematical formula(s) associated with your
    easing function).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'Just create a class that inherits from the `BABYLON.EasingFunction` class that
    implements the `BABYLON.IEasingFunction` interface. The only thing to do is to
    implement the `.easeInCore(gradient: number)` function that takes the interpolated
    value as the parameter.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create an example with a Power easing function, as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Importing and managing animated models
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To finish this chapter with a cool demo, let's discuss how to animate characters
    or 3D models, in general.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: How 3D animated models work
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you remember, each vertex of a 3D model is computed to be projected on the
    screen by a vertex shader. In fact, the animated 3D models (such as a character)
    are also animated with the associated hierarchy of bones (the hierarchy is called **Skeleton**).
    Animated 3D models are also called **Skinned Meshes**. In 3D engines, the bones
    are invisible nodes that are animated (`BABYLON.Animation`) to be sent to the
    vertex shader associated with the 3D model. In other words, the transformation
    of each bone is sent to the vertex shader and is applied to the associated vertices.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: 'To go further in the theory, the vertex shader contains the following two additional
    buffers:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: The bones' matrices weights (Vector4, represents the *intensity* of the influence
    of each bone on the current vertex).
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The bones' matrices indices (Vector4, until four bone influences per vertex)
    work like the indices buffer, but for bones. In other words, for each vertex,
    which bones influence the vertex (indices in the array of bones' transformations).
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note:** The common buffers for static 3D models are the positions (required),
    indices (required), normals (not required), UVs (texture coordinates, not required),
    and colors (not required).'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, for each vertex, the formula (in GLSL) is as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: When artists export their 3D models (animated with the tools provided by the
    modeling software), the Babylon.js exporters (3ds Max and Blender) explicitly
    write the bones' weights' buffers and the bones' matrices indices buffers in the
    exported file, which arrays of numbers. In conclusion, for animated 3D models,
    you don't have to specify the animations through code, the exporters can do everything
    for you. Let's wait until the next sub-topic to learn how to animate the 3D models.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Importing and playing animations of an animated 3D model
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To import an animated 3D model, you have to use the `BABYLON.SceneLoader` class
    for the static 3D models ([Chapter 3](ch03.html "Chapter 3. Create, Load, and
    Draw 3D Objects on the Screen"), *Create, Load, and Draw 3D Objects on the Screen*)
    to import an animated 3D model. In fact, the `.Load` (and `.Append`) function
    automatically loads the animated 3D models with the associated skeletons (hierarchy
    of nodes) with the difference that the `.ImportMesh` function''s callback provides
    the loaded meshes, particle systems, and skeletons, as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Concretely, as the animated nodes are the skeletons'' bones, the target of
    the `.beginAnimation` function is only the skeleton associated with your animated
    3D model and not the node itself, as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let''s start an example (available in the example files) using the `.ImportMesh`
    function, as shown in the following snippet:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note:** An animated 3D model can contain multiple meshes. This is the reason
    the `ImportMesh` function can return an array of multiple meshes and only one
    skeleton in the array of skeletons.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: 'The result (the man is walking and the animation played from frame 0 to 150)
    is as shown in the following image:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '![Importing and playing animations of an animated 3D model](img/image_09_014.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
- en: 'Using the `.Load` function, the method is pretty different. As the success
    callback provides only the loaded scene, you''ll have to find the skeletons stored
    in the scene. To do this, simple use the `.getSkeletonByName` function on the
    scene, as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The result with the `dude.babylon` scene using the `.Load` function is as shown
    in the following image:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '![Importing and playing animations of an animated 3D model](img/image_09_015.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
- en: Summary
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Creating animations using Babylon.js can really make your scenes more alive.
    As you can see, these features are also pretty simple to use, following the principle
    of Babylon.js: the KISS principle (Keep It Simple, Stupid).'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Now, at the end of this book, you are ready to work with the artists and combine
    all the learned features of Babylon.js. Using post-processes, manage and customize
    materials, create and manage animations, load scenes, manage actions, and so on!
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在本书的结尾，你已准备好与艺术家们合作，结合 Babylon.js 所学到的所有特性。使用后处理技术，管理和定制材质，创建和管理动画，加载场景，管理动作等等！
- en: To go further, you can have a look at the new features (recently released) such
    as the materials library (a library of specific easy-to-use materials like the
    standard material, such as water, terrain material, PBR, lava, and so on!). One
    of the new features should be the procedural textures automatically handled by
    Babylon.js such as fire, ground, grass, and so on. Also, to go further, you can
    take a look at the particle systems and shadows generator for specific projects
    that need to create some smoke or fire, and more beautiful (but more expansive)
    scenes.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 若要更进一步，你可以查看新特性（最近发布），例如材质库（一个包含特定易于使用的材质的库，如标准材质，例如水、地形材质、PBR、熔岩等！）！其中之一的新特性应该是
    Babylon.js 自动处理的程序纹理，如火焰、地面、草地等。此外，若要更进一步，你还可以查看用于特定项目（需要创建一些烟雾或火焰，以及更美丽但更昂贵的场景）的粒子系统和阴影生成器。
- en: Have fun with Babylon.js!
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Babylon.js 中享受乐趣！
