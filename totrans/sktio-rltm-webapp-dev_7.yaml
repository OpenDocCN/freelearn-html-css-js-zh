- en: Appendix A. Socket.IO Quick Reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this appendix we will take a look at the APIs provided by socket.io. The
    intention is to have a cursory glance through all the APIs so we know if there
    is a function that can help us while we are working. Socket.io is under active
    development and the APIs themselves are subject to change. Although the documented
    methods may not change, there are always new functions and features being added
    to socket.io. So always check with the socket.io website and wiki for the availability
    of a function that does what you want.
  prefs: []
  type: TYPE_NORMAL
- en: The server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we already know by now, socket.io provides libraries to be used both in the
    server and the client. Let's first see the APIs provided for the server.
  prefs: []
  type: TYPE_NORMAL
- en: Instantiating socket
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `socket.io` module is instantiated, just like any other node module, by
    using `require` to import the module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Starting Socket.IO
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The socket.io server component is started by using the `listen` method, which
    attaches the socket.io to the node HTTP server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, `server` is the instance of the node HTTP server.
  prefs: []
  type: TYPE_NORMAL
- en: Listening to events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The event handlers are attached to socket using the `on` method. The `on` method
    takes the event name and the callback/handler function as parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here, `event` is the name of the event and `eventData` represents the event-specific
    data passed to the handler when it is invoked.
  prefs: []
  type: TYPE_NORMAL
- en: Emitting an event
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We use the `emit` method to trigger an event. This event will be handled on
    the client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, `event` is the name of the event to trigger, `event_data` is the event
    data as a JSON object, and `ack_callback` is the optional callback function that
    is invoked on the successful receipt of the event on the client.
  prefs: []
  type: TYPE_NORMAL
- en: Sending a message
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `send` method is used to send a message to the client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Where `message` is the message that will be sent to the client and `ack_callback`
    is the optional callback function that is invoked on the successful receipt of
    the message on the client.
  prefs: []
  type: TYPE_NORMAL
- en: Sending a JSON message
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A JSON message can be sent by using the `json` flag before the `send` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here, `message` is the message that will be sent to the client and `ack_callback`
    is the optional callback function that is invoked on the successful receipt of
    the message on the client.
  prefs: []
  type: TYPE_NORMAL
- en: Broadcasting a message/event
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A message or an event can be broadcasted to all the connected sockets using
    the `broadcast` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `event` is the name of event to emit and `event_data` is the JSON data
    that will be sent with the event. The following line of code shows how to broadcast
    a message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here, `message` is the message that will be sent to the client and `ack_callback`
    is the optional callback function that is invoked on the successful receipt of
    the message on the client.
  prefs: []
  type: TYPE_NORMAL
- en: Sending a volatile message
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes the message being sent is not important and can be ignored if not
    delivered. So these methods need not be queued or attempted to be redelivered.
    This is done with the `volatile` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here, `message` is the message that will be sent to the client and `ack_callback`
    is the optional callback function that is invoked on the successful receipt of
    the message on the client.
  prefs: []
  type: TYPE_NORMAL
- en: Storing socket data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can call the `set` method on the socket to store some data on the socket.
    This is an asynchronous method call and takes a key, value, and a callback function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here, `key` is the key name for this data and `value` is the value to store.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the socket data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We use the `get` method to fetch the value stored on a socket. This is an asynchronous
    method and takes a key and a callback function, which will get the value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here, `key` is the key of the data to fetch and `value` is the value if stored
    with the socket. This will be `null` if the value is not stored.
  prefs: []
  type: TYPE_NORMAL
- en: Restricting to a namespace
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can multiplex the socket and restrict messages/events to a namespace by
    using the `of` method. This method returns a socket, which can be used as any
    other socket, but the messages will be restricted to only the clients connected
    to this namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Here, `namespace` is the namespace we want to restrict the socket to.
  prefs: []
  type: TYPE_NORMAL
- en: Joining a room
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We use the `join` method of `socket` to join a room. It will create a new room
    if one doesn''t already exist:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Here, `room` is the name of the room to join.
  prefs: []
  type: TYPE_NORMAL
- en: Broadcasting messages/events in a room
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can send messages to all the connected clients in the room by using the
    `in` flag with `broadcast`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Here, `room` is the room to send the message in, `message` is the message to
    send, `event` is the event to emit, and `event_data` is the data to be sent with
    the event.
  prefs: []
  type: TYPE_NORMAL
- en: Leaving a room
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `leave` method is used to leave a room. We don''t need to do this explicitly
    if the socket is exiting. Also, an empty room will automatically be destroyed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Here, `room` is the room to exit from.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Socket.io is configured using the `set` method in the `configure` method''s
    callback handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Here, `environment` is the optional environment in which this configuration
    will be used, `property` is the property to be set, and `value` is the value for
    the property.
  prefs: []
  type: TYPE_NORMAL
- en: Server events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will discuss some server-related events in this section.
  prefs: []
  type: TYPE_NORMAL
- en: connection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This event is fired when an initial connection with a client is established:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Here, `socket` is used in further communication with the client.
  prefs: []
  type: TYPE_NORMAL
- en: message
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `message` event is emitted when a message sent with `socket.send` is received:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Here, `message` is the message sent and `ack_callback` is an optional acknowledgment
    function.
  prefs: []
  type: TYPE_NORMAL
- en: disconnect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This event is fired when the socket disconnects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we will get to know the client APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to a socket
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We connect to a socket using the `connect` method on the `io` object in the
    client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Here, `uri` is the server URI to connect to. It can be absolute or relative.
    If it is other than `/`, or an absolute equivalent of that, it will connect to
    the namespace.
  prefs: []
  type: TYPE_NORMAL
- en: Listening to events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can attach event handlers to a socket using the `on` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Here, `event` is the event to listen for, `event_data` is the data for the event,
    and `ack_callback` is the optional callback method to call to acknowledge the
    receipt of the event.
  prefs: []
  type: TYPE_NORMAL
- en: Emitting an event
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We use the `emit` method to trigger an event. This event will be handled on
    the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Here, `event` is the name of the event to trigger, `event_data` is the event
    data as a JSON object, and `ack_callback` is the optional callback function that
    is invoked on the successful receipt of the message on the server.
  prefs: []
  type: TYPE_NORMAL
- en: Sending a message
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `send` method is used to send a message to the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Here, `message` is the message that will be sent to the server and `ack_callback`
    is the optional callback function that is invoked on the successful receipt of
    the message on the server.
  prefs: []
  type: TYPE_NORMAL
- en: Client events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we will get to know some client-side events.
  prefs: []
  type: TYPE_NORMAL
- en: connect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `connect` event is emitted when the socket is connected successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: connecting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `connecting` event is emitted when the socket is attempting to connect
    with the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: disconnect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `disconnect` event is emitted when the socket is disconnected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: connect_failed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `connect_failed` event is emitted when socket.io fails to establish a connection
    to the server for reasons such as when none of the transports work or authorization
    failed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: error
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `error` event is emitted when an error occurs and it cannot be handled
    by the other event types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: message
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `message` event is emitted when a message sent with `socket.send` is received:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Here, `message` is the sent message and `ack_callback` is an optional acknowledgment
    function.
  prefs: []
  type: TYPE_NORMAL
- en: reconnect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `reconnect` event is emitted when socket.io successfully reconnects to
    the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: reconnecting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `reconnecting` event is emitted when the socket is attempting to reconnect
    with the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: reconnect_failed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `reconnect_failed` event is emitted when socket.io fails to reestablish
    a working connection after the connection was dropped:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
