["```js\nchapter2\n├── app.js\n├── package.json ├── node_modules\n│└── npm package folders ├── src\n│├── lib\n│├── models\n│├── routes\n└── test\n```", "```js\nvar bodyParser = require('body-parser');\nmodule;exports = function(app) {\n  app.use(bodyParser.json());\n  app.use(bodyParser.urlencoded({ extended: false }));\n   };\n```", "```js\nvar express = require('express'); var app = express();\nrequire('./parser')(app);\nmodule.exports = app;\n```", "```js\napp.get('/path/:id', function(req, res, next) {\nres.status(200).json({ hello: 'world'});\n});\n```", "```js\n{\nparams: { id: 1 }, query: { a: 1, b: 2 }\n}\n```", "```js\napp.get('/actors/:id', function(req, res, next) {\n//Find the actor object with this :id\n//Respond to the client\n});\n```", "```js\napp.get('/actors/:id/movies', function(req, res, next) {\n//Find all movies the actor with this :id is in\n//Respond to the client\n});\n```", "```js\n{\n\"_id\": \"551322589911fefa1f656cc5\", \"id\": 1,\n\"name\": \"AxiomZen\", \"birth_year\": 2012, \"__v\": 0, \"movies\": []\n}\n```", "```js\napp.post('/actors', function(req, res, next) {\n//Save new actor\n//Respond to the client\n});\n```", "```js\n{\n\"__v\": 0, \"id\": 1,\n\"name\": \"AxiomZen\", \"birth_year\": 2012,\n\"_id\": \"551322589911fefa1f656cc5\", \"movies\": []\n}\n```", "```js\napp.put('/actors/:id', function(req, res) {\n//Find and update the actor with this :id\n//Respond to the client\n});\n```", "```js\n{\n\"_id\": \"551322589911fefa1f656cc5\",\n\"id\": 1,\n\"name\": \"Axiomzen\", \"birth_year\": 99, \"__v\": 0, \"movies\": []\n}\n```", "```js\napp.delete('/actors/:id', function(req, res) {\n//Remove the actor with this :id\n//Respond to the client\n});\n```", "```js\n//Actor endpoints \napp.get('/actors', actors.getAll);\napp.post('/actors', actors.createOne); \napp.get('/actors/:id', actors.getOne); \napp.put('/actors/:id', actors.updateOne); \napp.delete('/actors/:id', actors.deleteOne) \napp.post('/actors/:id/movies', actors.addMovie); \napp.delete('/actors/:id/movies/:mid', actors.deleteMovie);\n//Movie endpoints\napp.get('/movies', movies.getAll); \napp.post('/movies', movies.createOne);\napp.get('/movies/:id', movies.getOne); \napp.put('/movies/:id', movies.updateOne); \napp.delete('/movies/:id', movies.deleteOne); \napp.post('/movies/:id/actors', movies.addActor); \napp.delete('/movies/:id/actors/:aid', movies.deleteActor);\n```", "```js\napp.route('/actors')\n.get(actors.getAll)\n.post(actors.createOne);\napp.route('/actors/:id')\n.get(actors.getOne)\n.put(actors.updateOne)\n.delete(actors.deleteOne);\napp.post('/actors/:id/movies', actors.addMovie); \napp.delete('/actors/:id/movies/:mid', actors.deleteMovie);\napp.route('/movies')\n.get(movies.getAll)\n.post(movies.createOne);\napp.route('/movies/:id')\n.get(movies.getOne)\n.put(movies.updateOne)\n.delete(movies.deleteOne);\napp.post('/movies/:id/actors', movies.addActor); \napp.delete('/movies/:id/actors/:aid', movies.deleteActor);\n```", "```js\nvar mongoose = require('mongoose');\nmodule.exports = function(app)\n{ \n  mongoose.connect('mongodb://localhost/movies', {\n  mongoose: { safe: true\n}\n}, function(err) { if (err) \n{\n  return console.log('Mongoose - connection error:', err);\n}\n});\nreturn mongoose; \n};\n```", "```js\n// /src/models/actor.js\nvar mongoose = require('mongoose');\nvar generateId = require('./plugins/generateId');\n\nvar actorSchema = new mongoose.Schema({ \n  id: {\n    type: Number, \n    required: true, \n    index: {\n      unique: true\n    }\n  },\n  name: {\n    type: String, \n    required: true\n  }, \n  birth_year: {\n    type: Number, \n    required: true\n\n  }, \n  movies: [{\n    type : mongoose.Schema.ObjectId,\n    ref : 'Movie'\n  }]\n});\nactorSchema.plugin(generateId());\nmodule.exports = mongoose.model('Actor', actorSchema);\n```", "```js\n// /src/models/movies.js\nvar movieSchema = new mongoose.Schema({ \n  id: {\n    type: Number, \n    required: true, \n    index: {\n      unique: true\n    }\n  }, \n  title: {\n    type: String, \n    required: true\n   }, \n   year: {\n     type: Number, \n     required: true\n   }, \n   actors: [{\n     type : mongoose.Schema.ObjectId, \n     ref : 'Actor'\n   }]\n});\n\nmovieSchema.plugin(generateId());\nmodule.exports = mongoose.model('Movie', movieSchema);\n```", "```js\n// /src/models/plugins/generateId.js \nmodule.exports = function() {\n\nreturn function generateId(schema){ \n  schema.pre('validate',function(next, done) {\n    var instance = this; \n    var model = instance.model(instance.constructor.modelName); \n\n    if( instance.id == null ) {\n     model.findOne().sort(\"-id\").exec(function(err,maxInstance) {\n       if (err){\n         return done(err);\n       } else {\n         var maxId = maxInstance.id || 0; \n         instance.id = maxId+1;\n         done();\n       }\n    })\n   } else { \n     done();\n    }\n  })\n }\n};\n```", "```js\nvar generateId = require('./plugins/generateId');\nactorSchema.plugin(generateId());\n```", "```js\nvar Actor = require('../models/actor');\n```", "```js\nvar Movie = require('../models/movie');\n```", "```js\ngetOne: function(req, res, next) { Actor.findOne({ id: req.params.id })\n.populate('movies')\n.exec(function(err, actor) {\nif (err) return res.status(400).json(err); if (!actor) return res.status(404).json(); res.status(200).json(actor);\n});\n},\n```", "```js\n// /src/routes/actors.js\nvar Actor = require('../models/actor'); \nvar Movie = require('../models/movie');\n\nmodule.exports = {\n\n  getAll: function(req, res, next) { \n    Actor.find(function(err, actors) {\n      if (err) return res.status(400).json(err);\n\n      res.status(200).json(actors); \n    });\n  },\n\n  createOne: function(req, res, next) { \n  Actor.create(req.body, function(err, actor) {\n    if (err) return res.status(400).json(err);\n\n    res.status(201).json(actor); \n  });\n  },\n\n  getOne: function(req, res, next) { \n    Actor.findOne({ id: req.params.id })\n    .populate('movies')\n.exec(function(err, actor) {\n      if (err) return res.status(400).json(err); \n      if (!actor) return res.status(404).json();\n\n      res.status(200).json(actor);\n    });\n  },\n\n  updateOne: function(req, res, next) { \n    Actor.findOneAndUpdate({ id: req.params.id }, req.body,function(err, actor) {\n      if (err) return res.status(400).json(err); \n      if (!actor) return res.status(404).json();\n\n      res.status(200).json(actor); \n    });\n  },\n\n  deleteOne: function(req, res, next) { \n    Actor.findOneAndRemove({ id: req.params.id }, function(err) {\n      if (err) return res.status(400).json(err);\n\n      res.status(204).json(); \n    });\n  },\n\n  addMovie: function(req, res, next) {\n    Actor.findOne({ id: req.params.id }, function(err, actor) { \n      if (err) return res.status(400).json(err);\n      if (!actor) return res.status(404).json();\n\n      Movie.findOne({ id: req.body.id }, function(err, movie) {\n        if (err) return res.status(400).json(err);\n        if (!movie) return res.status(404).json();\n\n        actor.movies.push(movie); \n        actor.save(function(err) {\n          if (err) return res.status(500).json(err);\n\n          res.status(201).json(actor); \n        });\n       })\n     });\n  },\n\n  deleteMovie: function(req, res, next) {\n    Actor.findOne({ id: req.params.id }, function(err, actor) { \n      if (err) return res.status(400).json(err);\n      if (!actor) return res.status(404).json();\n\n      actor.movies = []; \n      actor.save(function(err) {\n        if (err) return res.status(400).json(err);\n\n        res.status(204).json(actor);\n      })\n    });\n   }\n\n  };\n```", "```js\nrequire('../routes/movies'); require('../routes/actors');\n```", "```js\nvar should = require('should'); var assert = require('assert');\nvar request = require('supertest');\nvar app = require('../src/lib/app');\n```", "```js\n  describe('Actors', function() { \n\n  describe('POST actor', function(){\n    it('should create an actor', function(done){ \n      var actor = {\n        'id': '1',\n        'name': 'AxiomZen', 'birth_year': '2012',\n       };\n\n       request(app)\n       .post('/actors')\n       .send(actor)\n       .expect(201, done)\n    });\n```", "```js\n  describe('GET actor', function() {\n    it('should retrieve actor from db', function(done){ \n      request(app)\n      .get('/actors/1')\n      .expect(200, done);\n    });\n  describe('DELETE actor', function() {\n    it('should remove a actor', function(done) { \n      request(app)\n      .delete('/actors/1')\n     .expect(204, done);\n    });\n  });\n```", "```js\n  describe('PUT actor', function() {\n    it('should edit an actor', function(done) { \n      var actor = {\n        'name': 'ZenAxiom', \n        'birth_year': '2011'\n      };\n\n      request(app)\n      .put('/actors/1')\n      .send(actor)\n      .expect(200, done);\n    });\n\n    it('should have been edited', function(done) { \n      request(app)\n      .get('/actors/1')\n      .expect(200)\n      .end(function(err, res) { \n        res.body.name.should.eql('ZenAxiom');\n        res.body.birth_year.should.eql(2011);\n        done();\n      });\n     });\n  });\n```", "```js\n  describe('POST /actors/:id/movies', function() { \n    it('should successfully add a movie to the actor',function(done) { \n      var movie = {\n        'id': '1',\n        'title': 'Hello World', \n        'year': '2013'\n      }\n      request(app)\n      .post('/actors/1/movies')\n      .send(movie)\n      .expect(201, done)\n      });\n    });\n\n    it('actor should have array of movies now', function(done){ \n      request(app)\n      .get('/actors/1')\n      .expect(200)\n      .end(function(err, res) { \n      res.body.movies.should.eql(['1']); \n      done();\n     });\n    });\n  });\n```", "```js\n  describe('DELETE /actors/:id/movies/:movie_id', function() { \n    it('should successfully remove a movie from actor', function(done){\n      request(app)\n      .delete('/actors/1/movies/1')\n      .expect(200, done);\n    });\n\n    it('actor should no longer have that movie id', function(done){\n      request(app)\n      .get('/actors/1')\n      .expect(201)\n      .end(function(err, res) { \n        res.body.movies.should.eql([]); \n        done();\n      });\n    });\n  });\n```", "```js\n  it('should not allow you to create duplicate actors', function(done) {\n    var actor = { \n      'id': '1',\n      'name': 'AxiomZen', \n      'birth_year': '2012',\n    };\n\n    request(app)\n    .post('/actors')\n    .send(actor)\n    .expect(400, done);\n  });\n```"]