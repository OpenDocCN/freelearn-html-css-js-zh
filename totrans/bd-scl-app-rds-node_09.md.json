["```js `echo \"==> Extracting PMS Backend Server. <==\"`    `echo \"======================================\"`   `` `# Commands to be executed on the remote server`    `commands=(`    `\"tar xf pms_be*.tgz -C $PROJECT_DIR;\"`    `\"cd $PROJECT_DIR;\"`    `\"npm install;\"`    `\"pm2 restart main.js --name pms-api;\"`    `\"pm2 save;\"`    `)`    `ssh -i \"$SSH_KEY\" $USER@$HOST \"${commands[*]}\"`    `}`    `echo \"Do you wish to deploy PMS Backend Server?\"`    `select yn in \"Yes\"` `\"No\"; do`    `case $yn in`    `Yes)`    `process_pms_server`    `break;;`    `No)`    `echo \"Deployment cancelled.\"`    `break;;`    `*)`    `echo \"Invalid option. Please choose 1 for Yes or 2 for No.\"`    `;;`    `esac`    `done`    `echo \"\"`    `echo \"\"`    `echo \"===============================\"`    `echo \"==> The Deployment finished <==\"`    `echo \"===============================\"`    *   `**#!/bin/bash**`: Specifies that the script should be interpreted using Bash. *   **Configuration**: Define variables for SSH key, user, host, directories, and configuration file. *   **Function** - `**process_sensorapp_backend_server**`: Removes existing binary files. Executes the script (`**mkpackage.sh**`) to create the binary.          Displays the created files in the binaries directory.                    Removes existing server files, creates directories, and sets permissions on the remote server.                    Transfers binary files and the configuration file to the remote server.                    Extracts and deploys the PMS Backend Server on the remote server using pm2.           *   **User Confirmation**: Prompts the user for deployment confirmation using a select statement. *   **Completion Message**: Displays a message indicating the completion of the deployment process.    This script automates the deployment process of a Node.js application to a remote server using `**pm2**` for process management.    Run the script from the terminal with the root directory of the project.    `$ ./deploy.sh`  ![](img/10.11.jpg)  **Figure 10.11:** Output of Deployment Script    Using `**pm2**` logs you can monitor the application. Upon successful execution, the application will display the following output:    `**$ pm2 logs**`    `/home/ubuntu/.pm2/logs/pms-api-out.log last 15 lines:`    `0|pms-api  | Router : RoleRoutes - Connected`    `0|pms-api  | Router : UserRoutes - Connected`    `0|pms-api  | Router : ProjectRoutes - Connected`    `0|pms-api  | Router : TaskRoutes - Connected`    `0|pms-api  | Router : CommentRoutes - Connected`    `0|pms-api  | Server Routes started for server`    `0|pms-api  | Connected to the database`    `0|pms-api  | Connected to the database`    `0|pms-api  | Connected to the database`    `0|pms-api  | Connected to the database`    `0|pms-api  | Connected to the database`    `0|pms-api  | Connected to the database`    `0|pms-api  | Server is running on port 8080 with pid = 95988`    `0|pms-api  | Connected to the database`    `0|pms-api  | Connected to the database`    # [Other Methods For Deployment](toc.xhtml#s263a)    Apart from deploying on AWS EC2 instances as we followed in this chapter, there are many other ways to deploy a Node.Js application.    Amazon has other offerings for deployment such as AWS Lambda, AWS Elastic Beanstalk, and Amazon ECS/EKS. AWS lambda is ideal for event driven or microservices architecture applications. If you do not want to be worried about the underlying infrastructure and want to focus on just your application, Elastic Beanstalk is a great choice. It handles the deployment, load balancing, and auto scaling automatically.    Docker containers can also be used to containerize your application and deploy with help of Amazon ECS and EKS.    Similar to Amazon, Google Cloud Platform (GCP) also offers Google App Engine, Kubernetes Engine, and Cloud functions. Microsoft Azure offers Azure App Service, Azure Functions, and Azure Kubernetes Service (AKS).    Heroku is another cloud platform which offers straightforward deployment of Node.js applications. It can automatically detect that your application is a Node.js application and will install the dependencies using NPM.    # [Conclusion](toc.xhtml#s264a)    In this chapter, we delve into making our application code secure using obfuscation, construction, and deployment of a Node.js application, employing the widely recommended processes and adopting a straightforward approach to AWS integration. This involves manual deployment on AWS, but you have the option to explore various methods, including Jenkins, CI/CD, Git pipelines, AWS CodeBuild, and pipelines, among others. These options encompass various DevOps tasks, so we are not enhancing more here.    In summary, after the development phase, it is essential to ensure that your application reaches end-users. Deployment plays a crucial role in this process, as without it, everything remains in a state of readiness but lacks actual utilization.    The next chapter, “*The Journey Ahead*” is the last chapter of the book. We will briefly discuss what we learned and what can be done further.    # [Multiple Choice Questions](toc.xhtml#s265a)    1.  What is code obfuscation?     1.  Encryption technique for securing data.     2.  Process of transforming source code to make it harder to understand.     3.  Method for optimizing code performance.     4.  Technique for compressing code files. 2.  What are Anti-debugging techniques ?     1.  Embedding code for detecting debugging attempts.     2.  Changing representation of numerical constants.     3.  Splitting functions into smaller pieces.     4.  Compressing the overall code size. 3.  What TypeScript is primarily used for in Node.js development?     1.  Database management.     2.  Code obfuscation.     3.  Server-side scripting.     4.  Browser compatibility. 4.  What is the purpose of the command `tar czf pms_be_$VER.tgz *.js package.json` components routes tests utils?     1.  It installs npm packages.     2.  It compresses specific files and directories into a tarball.     3.  It initializes a new Node.js project.     4.  It extracts files from a tarball. 5.  Which npm script is commonly used to run a Node.js application after TypeScript compilation?     1.  `npm run build`     2.  `npm start`     3.  `npm install`     4.  `npm run compile` 6.  What is the significance of the variable `**$VER**` in the command?     1.  It represents the version of Node.js.     2.  It is used for encryption purposes.     3.  It is a placeholder for the actual version number.     4.  It specifies the compression format. 7.  What is the purpose of an EC2 instance in AWS?     1.  To store data in the cloud.     2.  To manage DNS records.     3.  To deploy and run applications on virtual servers.     4.  To route traffic to different services. 8.  Which file is used as the SSH key for connecting to the remote server in the script?     1.  `PMS_KEY.pem`     2.  `deploy.sh`     3.  `server_config.json`     4.  `mkpackage.sh` 9.  What does the `process_pms_server` function in the script do?     1.  Installs Node.js packages.     2.  Deploys the Node.js application.     3.  Configures the server’s security group.     4.  Uninstalls Node.js from the server. 10.  How does `**PM2**` help in managing Node.js applications?     1.  It automates the installation of Node.js.     2.  It monitors and manages the processes of Node.js applications.     3.  It provides a graphical user interface for Node.js development.     4.  It facilitates code profiling in Node.js.    # [Answers](toc.xhtml#s266a)    1.  b 2.  a 3.  c 4.  b 5.  b 6.  c 7.  c 8.  a 9.  b 10.  b    # [Further Reading](toc.xhtml#s267a)    [https://www.npmjs.com/package/pm2](https://www.npmjs.com/package/pm2)    [https://docs.aws.amazon.com/ec2/](https://docs.aws.amazon.com/ec2/)    [https://www.jenkins.io/](https://www.jenkins.io/)    [https://www.heroku.com/](https://www.heroku.com/)    [https://cloud.google.com](https://cloud.google.com)    [https://azure.microsoft.com/en-us](https://azure.microsoft.com/en-us)    [https://www.npmjs.com/package/javascript-obfuscator](https://www.npmjs.com/package/javascript-obfuscator) `` ```"]