- en: Chapter 10. A Sample PhoneGap Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Until now, we have seen how to create a PhoneGap project, use various APIs
    individually, and finally how to build the application. After learning these important
    things, we will need to package all our learning and create an actual app with
    all the APIs. Working on this demo app project will help you to understand the
    practical usage of the APIs and how to put them to use. I have tried to make the
    project as simple as possible, so that you can understand it without any difficulties.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new PhoneGap project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to include Bootstrap and other libraries in the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Develop the demo app using all the APIs provided by PhoneGap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build the application and try it in a real device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What's in the app?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The demo app that we are going to create will showcase all the features of the
    PhoneGap/Cordova APIs. The app will list all sections in a sliding menu and the
    user can choose which API they are interested in. The demo app is available in
    the Google Play Store at [https://play.google.com/store/apps/details?id=com.iyaffle.phonegap](https://play.google.com/store/apps/details?id=com.iyaffle.phonegap).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the benefit of everyone, the complete project source is available in the
    GitHub repository. Readers can view or download the entire source from [https://github.com/iYaffle/PhoneGap-Demo-App](https://github.com/iYaffle/PhoneGap-Demo-App).
    Happy learning!
  prefs: []
  type: TYPE_NORMAL
- en: Libraries used
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to use the following libraries in our demo app. We will find out
    why we are using each of these libraries in our demo.
  prefs: []
  type: TYPE_NORMAL
- en: Twitter Bootstrap
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bootstrap is the most popular HTML, CSS, and JS framework for developing responsive
    projects on the web. Bootstrap will be our primary UI framework of the project.
  prefs: []
  type: TYPE_NORMAL
- en: It can be downloaded from [http://www.getbootstrap.com/](http://www.getbootstrap.com/).
  prefs: []
  type: TYPE_NORMAL
- en: jQuery
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: jQuery is a JavaScript framework that has changed the life of many web developers.
    It has redefined the way JavaScript is coded. It provides an API to easily deal
    with DOM manipulation, event handling, animation, and AJAX.
  prefs: []
  type: TYPE_NORMAL
- en: It can be downloaded from [http://www.jquery.com/](http://www.jquery.com/).
  prefs: []
  type: TYPE_NORMAL
- en: mMenu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: mMenu is the famous jQuery plugin that creates sliding submenus for websites
    and web apps. It has a dependency of jQuery and we will be using it to create
    our sliding menu.
  prefs: []
  type: TYPE_NORMAL
- en: It can be downloaded from [http://www.mmenu.frebsite.nl/](http://www.mmenu.frebsite.nl/).
  prefs: []
  type: TYPE_NORMAL
- en: FastClick
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: FastClick is a tiny but useful library, which will help us to eliminate the
    300 ms delay in touch devices. For more information on this, refer to the *Handling
    click delays* section of [Chapter 8](ch08.html "Chapter 8. Advanced PhoneGap"),
    *Advanced PhoneGap*.
  prefs: []
  type: TYPE_NORMAL
- en: It can be downloaded from [https://github.com/ftlabs/fastclick](https://github.com/ftlabs/fastclick).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This chapter will be a basic one and it's highly recommended for the readers
    to read the previous chapters to understand the APIs before proceeding. We have
    covered only the critical aspects of the project and the rest is left to the readers
    to read and interpret in order to encourage development of the project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the first step of our activity, we need to create a new PhoneGap project.
    We will be using PhoneGap CLI tools to create a project and install various plugins.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s create a new project named `PhoneGap`, using PhoneGap CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After creating the project, as you know, a new directory with the project name
    will be created. Let''s make that our current directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add Android as our target platform. If you are interested, you
    can add other platforms too, if you have the required SDKs installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We should have the `fastclick.js`, `jquery.mmenu.min.all`, and `jquery-2.1.3.min.js`
    libraries downloaded in the `js` folder of the project's home `www` directory.
    Note that all CSS files of the jQuery and mMenu libraries should be placed in
    the `css` directory of the `www` directory. Now, we can kick off our project development.
  prefs: []
  type: TYPE_NORMAL
- en: Installing plugins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As our application is going to use almost all of the APIs, we will be installing
    them in our project. You can either install all of these plugins now or install
    them as and when required. The commands to install them are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cordova plugin add cordova-plugin-dialogs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cordova plugin add cordova-plugin-device`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cordova plugin add cordova-plugin-vibration`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cordova plugin add cordova-plugin-camera`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cordova plugin add cordova-plugin-network-information`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cordova plugin add cordova-plugin-contacts`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cordova plugin add cordova-plugin-splashscreen`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cordova plugin add cordova-plugin-device-motion`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cordova plugin add cordova-plugin-geolocation`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cordova plugin add cordova-plugin-media-capture`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cordova plugin add cordova-plugin-file`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cordova plugin add cordova-plugin-globalization`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cordova plugin add cordova-plugin-inappbrowser`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cordova plugin add cordova-plugin-media`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design of the homepage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For every app, the `index.html` page will be the homepage, and that''s where
    our application will start too. To begin from scratch, clear out the body contents
    of the file. Inside the `<body>` tag of the `index.html` file, we will add the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To understand each of the sections in the preceding code, we will need to understand
    the Bootstrap components. In Bootstrap, we can have a header for the page that
    is identified by the `header` class. The actual contents of the page are placed
    under the `div` element with the `content` class. These are standard Bootstrap
    techniques and you can easily understand them if you read the Bootstrap documents.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we''ll add the CSS file references to the `<head>` section of the page,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will add all the required JavaScript files that we are going to use
    above the `</body>` tag. Ensure that you are adding each file in the correct order,
    so that dependencies are resolved:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You may have noticed that we have added a button with the `id` value as `openMenu`.
    Now, we will add the event for it. We are trying to open the slide menu when the
    user clicks on the button. The slide menu has become a famous approach recently,
    as it is used in the Facebook mobile application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'With the provided CSS styling (refer to the `.css` files), you would see the
    app as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Design of the homepage](img/B03476_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s see the sliding menu. We have defined the menu content in a separate
    template file and we are going to include that in our page using AJAX. We will
    have the code in a separate JS file `main.js` so that we can include it in every
    page. The code snippet is provided here for your reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The `menu.html` file will have a plain list with links to all the pages that
    we have created. Check that out for yourself here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This code takes care of getting the content of `menu.html` and pushes that to
    the HTML document under the `div` element identified by the `id` value as `page`.
    Then, we apply the sliding option on the menu item that we have included.
  prefs: []
  type: TYPE_NORMAL
- en: 'After doing this correctly, when you click on the **Start Here** button, you
    will see the sliding menu open in front of you:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Design of the homepage](img/B03476_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With this, we have made our basic framework of the app ready. Next, we will
    learn about each API and their usage. Going forward, only the main snippet will
    be provided. It will be helpful for readers to learn and try the rest themselves.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Accelerometer API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are now going to use the Accelerometer API. Using this API, we are going
    to get the acceleration coordinates and display them in the application. For the
    same, we have defined some `div` elements, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we have two buttons to start and stop the acceleration watch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's come to the core JavaScript for this. We are instructing the app
    to watch the acceleration continuously for one second, using the `onDeviceReady()`
    function and update the values in the corresponding `div` elements.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for this will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Accelerometer API](img/B03476_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When we want to stop the watch, we trigger the `stopWatch()` function by clicking
    on the **Stop Watching** button. When we click on the **Start Watching** button,
    the watch will be started again, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Accelerometer API](img/B03476_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the Device API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the Device API, we are going to get the information about our device.
    We will define five `<p>` tags to hold the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We have the following script that will get the device information and put it
    in the DOM. You may have noticed that we are using the attribute ID value of the
    `<p>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Device API](img/B03476_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the Camera API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Camera API can be used to capture an image from the device camera and also
    to select an image from the image gallery. We will see both of these uses with
    an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You will now be able to take photos, using your device camera:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Camera API](img/B03476_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will now also be able to select images from your device album:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Camera API](img/B03476_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is the script used for this example and it''s recommended that
    you read about the Camera API before proceeding with this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are the screenshots of the example in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Camera API](img/B03476_10_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you shoot the picture, you will be asked to select or reject the taken
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Camera API](img/B03476_10_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have accepted the image, it will be shown in the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Camera API](img/B03476_10_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you select the option to choose from the image gallery, the Gallery application
    will be shown for image selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Camera API](img/B03476_10_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Again, once you''ve selected an image from the gallery, it will be shown in
    the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Camera API](img/B03476_10_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the Capture API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the help of the Capture API, we can capture audio, video, and camera images.
    We will see a simple code to perform all of these operations. The following code
    will add three buttons to the page and bind an event to each of those buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the JavaScript code snippet; each function is easy to understand:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Capture API](img/B03476_10_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Try recording your voice using the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Capture API](img/B03476_10_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the Connection API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Connection API is one of the simplest APIs to work with. We are going to
    find what kind of data connection the device has and then display it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To hold the data, we define a new element, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In the JavaScript function, we get the connection type and validate it using
    the `checkConnection()` method. Then, we display a friendly message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Connection API](img/B03476_10_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the Contacts API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let''s see some advanced concepts of the Contacts API. We are going to
    do the following three things:'
  prefs: []
  type: TYPE_NORMAL
- en: Fetch ten phone numbers from a device; we have limited it to ten for simplicity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for a contact and display their phone number, along with the contact
    name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new contact using the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is the HTML code; it looks big as we have used Bootstrap styles
    to create tab styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Coming to the JavaScript section, the following is the code for each operation.
    Reading the section about the Contacts API will help you to understand this. We
    have few jQuery-related statements too in the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Ten contacts will be fetched and displayed when you click on the **Fetch 10
    Contacts** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Contacts API](img/B03476_10_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The total count of the contacts in the device and 10 contacts will be displayed,
    along with the phone number:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Contacts API](img/B03476_10_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The contact names and numbers are hidden for the sake of privacy. You can also
    search for contacts, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Contacts API](img/B03476_10_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you enter the search text and click on the **OK** button, you will see
    the results for your search:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Contacts API](img/B03476_10_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the Files API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using the Files API, we can handle files and directories in the real device.
    This API makes it easy for the developers to handle all file-related operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the code to get all the directories in the device filesystem.
    You can extend the code to read all files, as well as read, edit, and delete a
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Files API](img/B03476_10_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the Globalization API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Globalization API helps you to customize content such as numbers, date,
    and currency based on your user's device locale, instead of showing them in a
    hardcoded format. With this API, you can truly create a real globalized application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the menu for each of the options we are going to try:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'With the preceding code, you will see the app as shown in the following screenshot;
    it has a drop-down menu for selecting the options to be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Globalization API](img/B03476_10_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, the complete script is provided here; we have assigned each function to
    the click event of each link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: When you click on the **Number Pattern** option, you can see the number pattern
    on the device that is decided based on the phone locale. Try out other menu options
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Globalization API](img/B03476_10_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the InApp Browser API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: InApp Browser is a web browser that can be controlled by the app. Your app can
    open the website in a browser and handle it as required.
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, we will have a button to launch InApp Browser. We have created a JavaScript
    function named `launchIAB` to get the URL and open it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the InApp Browser API](img/B03476_10_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we will see the JavaScript involved here. We have handled the load, start,
    and stop events of the InApp Browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The loading start screen will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the InApp Browser API](img/B03476_10_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the Notification API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the Notification API, we can make the phone beep, vibrate, show alerts,
    and input and confirm dialog windows. So for each of these five operations, we
    will have five buttons that each have a trigger event. We have styled the buttons
    using Bootstrap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Notification API](img/B03476_10_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following code is very much self-explanatory. Don''t forget to take note
    of the syntax of the alert, confirm, and prompt dialog boxes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding two functions will produce the default beep sound on your device
    three times and vibrate for one second, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how the alert window is shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Notification API](img/B03476_10_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The confirmation box is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Notification API](img/B03476_10_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can use the prompt dialog to get inputs from the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Notification API](img/B03476_10_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the Splash Screen API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Splash screens are the ones that you see when an application start. Although
    not all applications have it, it's available in some famous apps such as Microsoft
    Office Mobile. When the applications start, a fullscreen image shows up and closes
    automatically after a few seconds. This can be used to hide the backend loading
    of the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will have a button with a click event to show the splash screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Coming to the JavaScript, we use the `navigator.splashscreen.show()` method
    to show the splash screen, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Splash Screen API](img/B03476_10_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When the **Show Splash Screen** button is clicked, you will see the splash
    screen open and close after a few seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Splash Screen API](img/B03476_10_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that there is also a function of `hide()`, and I am leaving that to you
    to try out.
  prefs: []
  type: TYPE_NORMAL
- en: Using the GeoLocation API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the GeoLocation API, we are going to get the location coordinates and
    use Google Maps to plot them in a map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The `div` element with `id` as `geolocation` will hold the geolocation values.
    The `div` element, `googleMap`, will have the Google Map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the GeoLocation API](img/B03476_10_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Building the app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we have completed the development of the application, we can now build and
    try the app in a real device. You can either use a local build or build using
    the online PhoneGap services.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the local build using Cordova, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: After the build is complete, the app will be created for all the platforms you
    added when you created the project. You can see the Android app (`.apk`) inside
    the `platforms\android\ant-build\` directory and the iOS app (`.ipa`) inside `platforms/ios/build/device`,
    if you have added the iOS platform.
  prefs: []
  type: TYPE_NORMAL
- en: You can take the Android `.apk` file and directly install it in the device.
    However, for iOS, you need to perform provisioning. The details are covered in
    [Appendix B](apb.html "Appendix B. Publishing Your App"), *Publishing Your App*.
    Congratulations on creating our full-fledged app using PhoneGap. Now, install
    the app in your real device and enjoy the feel of using your first full-fledged
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Scope for improvements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The app that we saw is very basic and there is a lot of scope for improvements.
    The following are a few things that can be done to the app we just finished:'
  prefs: []
  type: TYPE_NORMAL
- en: Use a templating engine such as HandleBarJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the Ionic framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use RequireJS to dynamically load the required libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handle hardware-accelerated, GPU-based animations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compress source files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have learned how to create an app using PhoneGap and its API. This is just
    a start and there are many more challenges in creating a real-life app. We hope
    this tutorial will be a good foundation for your skills on hybrid app development.
    PhoneGap development is not limited to these APIs and there are several other
    useful plugins to be used. We wish you good luck for your PhoneGap development.
  prefs: []
  type: TYPE_NORMAL
