["```js\nmyuser:123456\n```", "```js\n$ echo myuser:123456 | base64\nbXl1c2VyOjEyMzQ1Ngo=\n\n```", "```js\nGET /api/contacts\nAuthorization: Basic bXl1c2VyOjEyMzQ1Ngo=\n```", "```js\n// server/basicAuthMiddleware.js\nvar basicAuth = require('basic-auth');\n\nvar authorizationRequired = function (req, res, next) {\n  var credentials = basicAuth(req) || {};\n\n  if (credentials.name === 'john' && credentials.pass === 'doe') {\n    return next();\n  } else {\n    return res.sendStatus(401);\n  }\n};\n\nmodule.exports = authorizationRequired;\n```", "```js\nvar controller = require('./controller');\nvar authorizationRequired = require('./basicAuthMiddleware');\n\nmodule.exports = routes = function(server) {\n  server.post('/api/contacts',\nauthorizationRequired, controller.createContact);\n  server.get('/api/contacts',\nauthorizationRequired, controller.showContacts);\n  server.get('/api/contacts/:contactId',\nauthorizationRequired, controller.findContactById);\n  server.put('/api/contacts/:contactId',\nauthorizationRequired, controller.updateContact);\n  server.delete('/api/contacts/:contactId',\nauthorizationRequired, controller.deleteContact);\n  server.post('/api/contacts/:contactId/avatar',\nauthorizationRequired, controller.uploadAvatar);\n};\n```", "```js\n<div class=\"col-xs-12 col-sm-offset-4 col-sm-4\">\n<div class=\"panel\">\n<div class=\"panel-body\">\n<h4>\nLogin required\n</h4>\n<p>\nUse 'john' as user and 'doe' as password.\n</p>\n<form>\n<div class=\"form-group\">\n<label for=\"username\">User</label>\n<input type=\"user\" class=\"form-control\" id=\"username\" placeholder=\"Username\">\n</div>\n<div class=\"form-group\">\n<label for=\"password\">Password</label>\n<input type=\"password\" class=\"form-control\" id=\"password\" placeholder=\"Password\">\n</div>\n<p id=\"message\" class=\"pull-left\"></p>\n<button type=\"submit\" class=\"btn btn-primary pull-right\">Login</button>\n</form>\n</div>\n</div>\n</div>\n```", "```js\n// apps/login/views/loginView.js\n'use strict';\n\nvar Common = require('../../../common');\nvar template = require('../templates/login.tpl');\n\nclass LoginView extends Common.ModelView {\n  constructor(options) {\n    super(options);\n    this.template = template;\n  }\n\n  get className() {\n    return 'row';\n  }\n\n  get events() {\n    return {\n      'click button': 'makeLogin'\n    };\n  }\n\n  makeLogin(event) {\n    event.preventDefault();\n\n    var username = this.$el.find('#username').val();\n    var password = this.$el.find('#password').val();\n\nconsole.log('Will login the user', username,\n                'with password', password);\n  }\n}\n\nmodule.exports = LoginView; \n```", "```js\n// apps/login/router.js\n'use strict';\n\nvar Backbone = require('backbone');\nvar LoginView = require('./views/loginView');\n\nclass LoginRouter extends Backbone.Router {\n  constructor(options) {\n    super(options);\n\n    this.routes = {\n      'login': 'showLogin'\n    };\n\n    this._bindRoutes();\n  }\n\n  showLogin() {\n    var App = require('../../app');\n    var login = new LoginView();\n\n    App.mainRegion.show(login);\n  }\n}\n\nmodule.exports = new LoginRouter();\n```", "```js\n// app.js\n// ...\n\n// Initialize all available routes\nrequire('./apps/contacts/router');\nrequire('./apps/login/router');\n\n// ...\n```", "```js\nBackbone.$.ajaxSetup({\n  statusCode: {\n    401: () =>{\n      window.location.replace('/#login');\n\n    }\n  }\n});\n```", "```js\nfunction unauthorized(res) {\n  // res.set('WWW-Authenticate', 'Basic realm=Authorization Required');\n  return res.sendStatus(401);\n};\n```", "```js\nclass LoginView extends Common.ModelView {\n  // ...\n\n  makeLogin(event) {\n    event.preventDefault();\n\n    var username = this.$el.find('#username').val();\n    var password = this.$el.find('#password').val();\n    var authString = this.buildAuthString(\n      username, password\n    );\n\n    console.log('Will use', authString);\n  }\n\n  buildAuthString(username, password) {\n    return btoa(username + ':' + password);\n  }\n}\n```", "```js\nclass LoginView extends Common.ModelView {\n  // ...\n\n  makeLogin(event) {\n    event.preventDefault();\n\n    var username = this.$el.find('#username').val();\n    var password = this.$el.find('#password').val();\n    var authString = this.buildAuthString(\n      username, password\n    );\n\n    Backbone.$.ajax({\n      url: '/api/contacts',\n      headers: {\n        Authorization: 'Basic ' + authString\n      },\n      success: () => {\n        var App = require('../../../app');\n        App.router.navigate('contacts', true);\n      },\n      error: jqxhr => {\n        if (jqxhr.status === 401) {\n          this.showError('User/Password are not valid');\n        } else {\n          this.showError('Oops... Unknown error happens');\n        }\n      }\n    });\n  }\n\n  buildAuthString(username, password) {\n    return btoa(username + ':' + password);\n  }\n\n  showError(message) {\n    this.$('#message').html(message);\n  }\n}\n```", "```js\nclass LoginView extends Common.ModelView {\n  // ...\n\n  makeLogin(event) {\n// ...\n\n    Backbone.$.ajax({\n      url: '/api/contacts',\n      headers: {\n        Authorization: 'Basic ' + authString\n      },\n      success: () => {\n        var App = require('../../../app');\n        App.saveAuth('Basic', authSting);\n        App.router.navigate('contacts', true);\n      },\n      error: jqxhr => {\n        if (jqxhr.status === 401) {\n          this.showError('User/Password are not valid');\n        } else {\n          this.showError('Oops... Unknown error happens');\n        }\n      }\n    });\n  }\n\n// ...\n}\n```", "```js\n// app.js\nvar App = {\n  // ...\n\n  // Save an authentication token\n  saveAuth(type, token) {\n    var authConfig = type + ':' + token;\n\n    sessionStorage.setItem('auth', authConfig);\n    this.setAuth(type, token);\n  },\n\n  // ...\n}\n```", "```js\n// app.js\nvar App = {\n  // ...\n\n  // Set an authorization token\n  setAuth(type, token) {\n    var authString = type + ' ' + token;\n    this.setupAjax(authString);\n  },\n\n  // Set Authorization header for authentication\n  setupAjax(authString) {\n    var headers = {};\n\n    if (authString) {\n      headers = {\n        Authorization: authString\n      };\n    }\n\n    Backbone.$.ajaxSetup({\n      statusCode: {\n        401: () => {\n          App.router.navigate('login', true);\n        }\n      },\n      headers: headers\n    });\n  }\n\n  // ...\n}\n```", "```js\n// app.js\nvar App = {\nstart() {\n    // The common place where sub-applications will be showed\n    App.mainRegion = new Region({el: '#main'});\n\n    this.initializePlugins();\n\n    // Load authentication data\n    this.initializeAuth();\n\n    // Create a global router to enable sub-applications\n    // to redirect to\n    // other URLs\n    App.router = new DefaultRouter();\n    Backbone.history.start();\n  },\n\n  // ...\n\n  // Load authorization data from sessionStorage\n  initializeAuth() {\n    var authConfig = sessionStorage.getItem('auth');\n\n    if (!authConfig) {\n      return window.location.replace('/#login');\n    }\n\n    var splittedAuth = authConfig.split(':');\n    var type = splittedAuth[0];\n    var token = splittedAuth[1];\n\n    this.setAuth(type, token);\n  },\n\n  // ...\n}\n```", "```js\n// app.js\n\n// General routes non sub-application dependant\nclass DefaultRouter extends Backbone.Router {\n  constructor(options) {\n    super(options);\n    this.routes = {\n      '': 'defaultRoute',\n      'logout': 'logout'\n    };\n    this._bindRoutes();\n  }\n\n  // Redirect to contacts app by default\n  defaultRoute() {\n    this.navigate('contacts', true);\n  }\n\n  // Drop session data\n  logout() {\n    App.dropAuth();\n    this.navigate('login', true);\n  }\n}\n```", "```js\nvar App = {\n  // ...\n\n  // Remove authorization token\n  dropAuth() {\n    sessionStorage.removeItem('auth');\n    this.setupAjax(null);\n  },\n\n  // â€¦\n}\n```", "```js\nPOST /api/oauth/token HTTP/1.1\nHost: example.com\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=password&username=john&password=doe\n```", "```js\nHTTP/1.1 200 OK\nContent-Type: application/json;charset=UTF-8\nCache-Control: no-store\nPragma: no-cache\n\n{\n    \"access_token\":\"2YotnFZFEjr1zCsicMWpAA\",\n    \"token_type\":\"example\",\n    \"expires_in\":3600,\n    \"refresh_token\":\"tGzv3JOkF0XG5Qx2TlKWIA\",\n    \"example_parameter\":\"example_value\"\n}\n```", "```js\nfunction authorize(data, callback) {\n  var grantType = data.grant_type;\n  var username = data.username;\n  var password = data.password;\n\n  if (grantType !== 'password') {\n    return callback({error: 'invalid_grant'});\n  }\n\n  if (!username || !password) {\n    return callback({error: 'invalid_request'});\n  }\n\n  if (username === 'john' && password === 'doe') {\n    issueAuthorization(username, callback);\n  } else {\n    callback({error: 'invalid_grant'});\n  }\n}\n```", "```js\nconst DEFAULT_EXPIRATION_TIME = 3600; // seconds (1 hour)\n\n// ...\n\nfunction issueAuthorization(username, callback) {\n  var accessToken = generateToken();\n  var refreshToken = generateToken();\n  var token = {\n    access_token: accessToken,\n    token_type: 'Bearer',\n    expires_in: DEFAULT_EXPIRATION_TIME,\n    refresh_token: refreshToken\n  };\n\n  saveValidToken(token, username);\n  callback(token);\n}\n```", "```js\nconst TOKEN_LENGTH = 20;\n\n// ...\n\nfunction generateToken() {\nreturn crispy.base32String(TOKEN_LENGTH);\n}\n```", "```js\nvar validTokens = {};\nvar refreshTokens = {};\n\n// ...\n\nfunction saveValidToken(token, username) {\n  var tokenCopy = _.clone(token);\n  tokenCopy.username = username;\n\n  validTokens[token.access_token] = tokenCopy;\n  refreshTokens[token.refresh_token] = tokenCopy;\n\n  setTimeout(function() {\n    expireToken(tokenCopy.access_token);\n  }, DEFAULT_EXPIRATION_TIME * 1000);\n}\n\nfunction expireToken(token) {\n  delete validTokens[token];\n}\n```", "```js\nfunction authenticate(token, callback) {\n  if (_.has(validTokens, token)) {\n    callback({valid: true, token: validTokens[token]});\n  } else {\n    callback({valid: false, token: null});\n  }\n}\n```", "```js\nvar controller = require('./controller');\nvar auth = require('./oauth2Middleware);\n\nmodule.exports = routes = function(server) {\n  server.post('/api/oauth/token', auth.authenticate);\n  server.post('/api/contacts', auth.requireAuthorization,\n    controller.createContact);\n  server.get('/api/contacts', auth.requireAuthorization,\n    controller.showContacts);\n  server.get('/api/contacts/:contactId',\n    auth.requireAuthorization, controller.findContactById);\n  server.put('/api/contacts/:contactId',\n    auth.requireAuthorization, controller.updateContact);\n  server.delete('/api/contacts/:contactId',\n    auth.requireAuthorization, controller.deleteContact);\n  server.post('/api/contacts/:contactId/avatar',\n    auth.requireAuthorization, controller.uploadAvatar);\n};\n```", "```js\nmodule.exports = {\n  authenticate(req, res) {\n    authorize(req.body || {}, _.bind(res.json, res));\n  }\n}\n```", "```js\nrequireAuthorization(req, res, next) {\n  var authorization = req.headers.authorization || '';\n\n  if (!authorization) {\n    return res.sendStatus(401);\n  }\n\n  var splitValues = authorization.split(' ');\n  var tokenType = splitValues[0];\n  var token = splitValues[1];\n\n  if (!tokenType || tokenType !== 'Bearer' || !token) {\n    return res.sendStatus(401);\n  }\n\n  authenticate(token, function(response) {\n    if (response.valid) {\n      next();\n    } else {\n      return res.sendStatus(401);\n    }\n  });\n}\n```", "```js\nclass LoginView extends Common.ModelView {\n  // ...\n\n  makeLogin(event) {\n    event.preventDefault();\n\n    var username = this.$el.find('#username').val();\n    var password = this.$el.find('#password').val();\n\n    Backbone.$.ajax({\n      method: 'POST',\n      url: '/api/oauth/token',\n      data: {\n        grant_type: 'password',\n        username: username,\n        password: password\n      },\n      success: response => {\n        var App = require('../../../app');\n        var accessToken = response.access_token;\n        var tokenType = response.token_type;\n\n        App.saveAuth(tokenType, accessToken);\n        App.router.navigate('contacts', true);\n      },\n      error: jqxhr => {\n        if (jqxhr.status === 401) {\n          this.showError('User/Password are not valid');\n        } else {\n          this.showError('Oops... Unknown error happens');\n        }\n      }\n    });\n  }\n\n  buildAuthenticationString(token) {\n    return 'Bearer ' + token;\n  }\n\n  showError(message) {\n    this.$('#message').html(message);\n  }\n}\n```"]