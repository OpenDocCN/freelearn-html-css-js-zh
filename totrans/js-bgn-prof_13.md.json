["```js\nfunction doSomething(callback) {  \n    callback();\n}\nfunction sayHi() {\n    console.log(\"Hi!\");\n}\ndoSomething(sayHi); \n```", "```js\nHi! printed to the console.\n```", "```js\nfunction judge(grade) {\n    switch (true) {\n        case grade == \"A\":\n            console.log(\"You got an\", grade, \": amazing!\");\n            break;\n        case grade == \"B\":\n            console.log(\"You got a\", grade, \": well done!\");\n            break;\n        case grade == \"C\":\n            console.log(\"You got a\", grade, \": alright.\");\n            break;\n        case grade == \"D\":\n            console.log(\"You got a\", grade, \": hmmm...\");\n            break;\n        default:\n            console.log(\"An\", grade, \"! What?!\");\n    }\n}\nfunction getGrade(score, callback) {\n    let grade;\n    switch (true) {\n        case score >= 90:\n            grade = \"A\";\n            break;\n        case score >= 80:\n            console.log(score);\n            grade = \"B\";\n            break;\n        case score >= 70:\n            grade = \"C\";\n            break;\n        case score >= 60:\n            grade = \"D\";\n            break;\n        default:\n            grade = \"F\";\n    }\n    callback(grade);\n}\ngetGrade(85, judge); \n```", "```js\nsetInterval(encourage, 500);\nfunction encourage() {\n    console.log(\"You're doing great, keep going!\");\n} \n```", "```js\nlet promise = new Promise(function (resolve, reject) {\n    // do something that might take a while\n    // let's just set x instead for this example  \n    let x = 20;\n    if (x > 10) {\n        resolve(x); // on success\n    } else {\n        reject(\"Too low\");  // on error\n    }\n});\npromise.then(\n    function (value) {\n        console.log(\"Success:\", value);\n    },\n    function (error) {\n        console.log(\"Error:\", error);\n    }\n); \n```", "```js\nconst promise = new Promise((resolve, reject) => {\n    resolve(\"success!\");\n})\n    .then(value => {\n        console.log(value);\n        return \"we\";\n    })\n    .then(value => {\n        console.log(value);\n        return \"can\";\n    })\n    .then(value => {\n        console.log(value);\n        return \"chain\";\n    })\n    .then(value => {\n        console.log(value);\n        return \"promises\";\n    })\n    .then(value => {\n        console.log(value);\n    })\n    .catch(value => {\n        console.log(value);\n    }) \n```", "```js\nsuccess!\nwe\ncan\nchain\npromises \n```", "```js\nconst promise = new Promise((resolve, reject) => {\n    reject(\"oops... \");\n})\n    .then(value => {\n        console.log(value);\n        return \"we\";\n    })\n    .then(value => {\n        console.log(value);\n        return \"can\";\n    })\n    .then(value => {\n        console.log(value);\n        return \"chain\";\n    })\n    .then(value => {\n        console.log(value);\n        return \"promises\";\n    })\n    .then(value => {\n        console.log(value);\n    })\n    .catch(value => {\n        console.log(value);\n    }) \n```", "```js\n    Start Counting\n    One\n    Two\n    Three \n    ```", "```js\nfunction saySomething(x) {\n    return new Promise(resolve => {\n        setTimeout(() => {\n            resolve(\"something\" + x);\n        }, 2000);\n    });\n}\nasync function talk(x) {\n    const words = await saySomething(x);\n    console.log(words);\n}\ntalk(2);\ntalk(4);\ntalk(8); \n```", "```js\nPromise { <pending> }\nPromise { <pending> }\nPromise { <pending> } \n```", "```js\nready 1 counter:0\nready 2 counter:0\nready 3 counter:0\nx value 1 counter:1\nx value 2 counter:2\nx value 3 counter:3 \n```", "```js\nconsole.log(\"Hi there\");\nadd(4,5);\nfunction add(x, y) {\n    return x + y;\n} \n```", "```js\nconsole.log(\"Hi there\");\nsetTimeout(() => console.log(\"Sorry I'm late\"), 1000);\nconsole.log(add(4, 5));\nfunction add(x, y) {\n    return x + y;\n} \n```", "```js\nHi there\n9\nSorry I'm late \n```", "```js\nconsole.log(\"Hi there\");\nsetTimeout(() => console.log(\"Sorry I'm late\"), 0);\nconsole.log(add(4,5));\nfunction add(x, y) {\n    return x + y;\n} \n```", "```js\n    function addOne(val){\n      return val + 1;\n    }\n    function total(a, b, callback){\n      const sum = a + b;\n      return callback(sum);\n    }\n    console.log(total(4, 5, addOne())); \n    ```", "```js\n    function checker(val) {\n      return new Promise((resolve, reject) => {\n        if (val > 5) {\n          resolve(\"Ready\");\n        } else {\n          reject(new Error(\"Oh no\"));\n        }\n      });\n    }\n    checker(5)\n      .then((data) => {console.log(data); })\n      .catch((err) => {console.error(err); }); \n    ```", "```js\n    function myFun() {\n      return \"Hello\";\n    }\n    myFun().then(\n      function(val) { console.log(val); },\n      function(err) { conole.log(err); }\n    ); \n    ```"]