["```js\nhttp = require('http')\n\nserver = http.createServer (req, res) ->\n  res.writeHead 200\n  res.end 'Hello World'\n\nserver.listen 8080\n```", "```js\ncoffee hello.coffee\n```", "```js\n{\n  \"name\": \"todo\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"node app\"\n  },\n  \"dependencies\": {\n    \"express\": \"3.0.0beta6\",\n    \"jade\": \"*\",\n    \"socket.io\": \"*\",\n    \"coffee-script\": \"*\",\n    \"connect-assets\": \"*\"\n  }\n}\n```", "```js\nnpm install\n```", "```js\nnpm ls\n```", "```js\nexpress = require 'express'\napp = express()\n\napp.get '/', (req, res) ->\n  res.send('Hello Express')\n\napp.listen(3000)\nconsole.log('Listening on port 3000')\n```", "```js\ncoffee app.coffee\n```", "```js\ndoctype 5\nhtml\n  head\n    title Our Jade view\n  body\n    p= message\n```", "```js\nexpress = require 'express'\npath = require 'path'\napp = express()\n\napp.set 'views', path.join __dirname, 'views'\napp.set 'view engine', 'jade'\n\napp.get '/', (req, res) ->\n res.render 'index', message: \"Now we're cooking with gas!\"\n\napp.listen(3000)\nconsole.log('Listening on port 3000')\n```", "```js\nnpm install supervisor -g\n```", "```js\nsupervisor app.coffee\n```", "```js\napp.get '/', (req, res) ->\n res.render 'index', message: \"Now we're cooking with supervisor!\"\n\n```", "```js\ndoctype 5\nhtml\n  head\n title Collaborative Todo\n  body\n section#todoapp\n header#header\n h1 todos\n input#new-todo(placeholder=\"What needs to be done?\", autofocus=true)\n section#main\n ul#todo-list\n footer#footer\n button#clear-completed Clear completed\n\n```", "```js\napp.get '/', (req, res) ->\n res.render 'index'\n\n```", "```js\nexpress = require 'express'\npath = require 'path'\n\napp = express()\n\napp.set 'views', path.join __dirname, 'views'\napp.set 'view engine', 'jade'\napp.use(express.static(path.join __dirname, 'public'))\n\n```", "```js\ndoctype 5\nhtml\n  head\n  title  Collaborative Todo\n link(rel=\"stylesheet\", href=\"css/todo.css\")\n  body\n```", "```js\napp.set 'views', path.join __dirname, 'views'\napp.set 'view engine', 'jade'\napp.use(express.static(path.join __dirname, 'public'))\napp.use require('connect-assets')()\n\n```", "```js\nStorage::setObj = (key, obj) ->\n  localStorage.setItem key, JSON.stringify(obj)\n\nStorage::getObj = (key) ->\n  JSON.parse this.getItem(key)\n\nclass TodoApp\n\n  constructor: ->\n    @cacheElements()\n    @bindEvents()\n    @displayItems()\n\n  cacheElements: ->\n    @$input = $('#new-todo')\n    @$todoList = $('#todo-list')\n    @$clearCompleted = $('#clear-completed')\n\n  bindEvents: ->\n    @$input.on 'keyup', (e) => @create e\n    @$todoList.on 'click', '.destroy', (e) => @destroy e.target\n    @$todoList.on 'change', '.toggle', (e) => @toggle e.target\n    @$clearCompleted.on 'click', (e) => @clearCompleted()\n\n  create: (e) ->\n    val = $.trim @$input.val()\n    return unless e.which == 13 and val\n\n    randomId = Math.floor Math.random()*999999\n\n    localStorage.setObj randomId,{\n      id: randomId\n      title: val\n        completed: false\n    }\n    @$input.val ''\n    @displayItems()\n\n  displayItems: ->\n    @clearItems()\n    @addItem(localStorage.getObj(id)) for id in Object.keys(localStorage)\n\n  clearItems: ->\n    @$todoList.empty()\n\n  addItem: (item) ->\n    html = \"\"\"\n      <li #{if item.completed then 'class=\"completed\"' else ''} data-id=\"#{item.id}\">\n        <div class=\"view\">\n          <input class=\"toggle\" type=\"checkbox\" #{if item.completed then 'checked' else ''}>\n          <label>#{item.title}</label>\n          <button class=\"destroy\"></button>\n        </div>\n     </li>\n    \"\"\"\n    @$todoList.append html\n\n  destroy: (elem) ->\n    id = ($(elem).closest 'li').data('id')\n    localStorage.removeItem id\n    @displayItems()\n\n  toggle: (elem) ->\n    id = $(elem).closest('li').data('id')\n    item = localStorage.getObj(id)\n    item.completed = !item.completed\n    localStorage.setObj(id, item)\n\n  clearCompleted: ->\n    (localStorage.removeItem id for id in Object.keys(localStorage) \\\n      when (localStorage.getObj id).completed)\n    @displayItems()\n\n$ ->\n  app = new TodoApp()\n```", "```js\nscript(src=\"img/jquery.min.js\")\n!= js('todo')\n```", "```js\n      footer#footer\n | Join list:\n input#join-list-name\n button#join Join\n        button#clear-completed Clear completed\n  script(src=\"img/jquery.min.js\")\n  != js('todo')\n```", "```js\ncacheElements: ->\n    @$input = $('#new-todo')\n    @$todoList = $('#todo-list')\n    @$clearCompleted = $('#clear-completed')\n @$joinListName = $(\"#join-list-name\")\n @$join = $('#join')\n\n  bindEvents: ->\n    @$input.on 'keyup', (e) => @create e\n    @$todoList.on 'click', '.destroy', (e) => @destroy e.target\n    @$todoList.on  'change', '.toggle', (e) => @toggle e.target\n    @$clearCompleted.on 'click', (e) => @clearCompleted()\n @$join.on 'click', (e) => @joinList()\n\n```", "```js\nclearCompleted: ->\n    (localStorage.removeItem id for id in Object.keys(localStorage) \\\n      when (localStorage.getObj id).completed)\n    @displayItems()\n\n joinList: ->\n @socket = io.connect('http://localhost:3000')\n\n @socket.on 'connect', =>\n@socket.emit 'joinList', @$joinListName.val()\n\n```", "```js\nscript(src=\"img/jquery.min.js\")\nscript(src=\"img/socket.io.js\")\n!= js('todo')\n```", "```js\nexpress = require 'express'\npath = require 'path'\n\napp = express()\nserver = (require 'http').createServer app\nio = (require 'socket.io').listen server\n\napp.set 'views', path.join __dirname, 'views'\napp.set 'view engine', 'jade'\napp.use(express.static(path.join __dirname, 'public'))\napp.use (require 'connect-assets')()\n\napp.get '/', (req, res) ->\n  res.render 'index'\n\nio.sockets.on 'connection', (socket) =>\n console.log('connected')\n socket.on 'joinList', (list) => console.log \"Joining list #{list}\"\n\nserver.listen(3000)\nconsole.log('Listening on port 3000')\n```", "```js\n@todos = {}\nio.sockets.on 'connection', (socket) =>\n  console.log('connected')\n  socket.on 'joinList', (list) =>\n    console.log \"Joining list #{list}\"\n socket.list = list\n socket.join(list)\n @todos[list] ?= []\n socket.emit 'syncItems', @todos[list]\n\n```", "```js\n  joinList: ->\n    @socket = io.connect('http://localhost:3000')\n    @socket.on 'connect', => \n   @socket.emit 'joinList', @$joinListName.val()\n\n @socket.on 'syncItems', (items) =>\n @syncItems(items)\n\n syncItems: (items) ->\n console.log 'syncing items'\n localStorage.clear()\n localStorage.setObj item.id, item for item in items\n @displayItems()\n\n```", "```js\ndoctype 5\nhtml\n  head\n  title  Collaborative Todo\n  link(rel=\"stylesheet\", href=\"css/todo.css\")\n  body\n    section#todoapp\n      header#header\n        h1 todos\n        input#new-todo(placeholder=\"What needs to be done?\", autofocus=true)\n      section#main\n        ul#todo-list\n footer#footer\n section#connect\n          | Join list:\n          input#join-list-name\n          button#join Join\n          button#clear-completed Clear completed\n section#disconnect.hidden\n | Joined list: &nbsp\n span#connected-list List name\n button#leave Leave\n    script(src=\"img/jquery.min.js\")\n    script(src=\"img/socket.io.js\")\n    != js('todo')\n```", "```js\ncacheElements: ->\n    @$input = $('#new-todo')\n    @$todoList = $('#todo-list')\n    @$clearCompleted = $('#clear-completed')\n @$joinListName = $(\"#join-list-name\")\n @$join = $('#join')\n @$connect = $('#connect')\n @$disconnect = $('#disconnect')\n @$connectedList = $('#connected-list')\n @$leave = $('#leave')\n\n```", "```js\n  joinList: ->\n    @socket = io.connect('http://localhost:3000')\n    @socket.on 'connect', =>\n @currentList = @$joinListName.val()\n      @socket.emit 'joinList', @currentList\n\n    @socket.on 'syncItems', (items) => @syncItems(items)\n\n  syncItems: (items) ->\n    console.log 'syncing items'\n    localStorage.clear()\n    localStorage.setObj item.id, item for item in items\n    @displayItems()\n @displayConnected(@currentList)\n\n displayConnected: (listName) ->\n @$disconnect.removeClass 'hidden'\n @$connectedList.text listName\n @$connect.addClass 'hidden'\n\n```", "```js\nbindEvents: ->\n    @$input.on 'keyup', (e) => @create e\n    @$todoList.on 'click', '.destroy', (e) => @destroy e.target\n    @$todoList.on  'change', '.toggle', (e) => @toggle e.target\n    @$clearCompleted.on 'click', (e) => @clearCompleted()\n    @$join.on 'click', (e) => @joinList()\n @$leave.on 'click', (e) => @leaveList()\n\n```", "```js\n leaveList: ->\n    @socket.disconnect() if @socket\n    @displayDisconnected()\n\n  displayDisconnected: () ->\n    @$disconnect.addClass 'hidden'\n    @$connect.removeClass 'hidden'\n```", "```js\ncreate: (e) ->\n    val = $.trim @$input.val()\n    return unless e.which == 13 and val\n\n    randomId = Math.floor Math.random()*999999\n\n newItem =\n id: randomId\n title: val\n completed: false\n\n localStorage.setObj randomId, newItem\n @socket.emit 'newItem', newItem if @socket\n    @$input.val ''\n    @displayItems()\n```", "```js\nio.sockets.on 'connection', (socket) =>\n  console.log(\"connected\")\n  socket.on 'joinList', (list) =>\n    console.log \"Joining list #{list}\"\n    socket.list = list\n    socket.join(list)\n    @todos[list] ?= []\n\n    socket.emit 'syncItems', @todos[list]\n\n socket.on 'newItem', (todo) =>\n console.log \"new todo #{todo.title}\"\n @todos[list].push todo\n io.sockets.in(socket.list).emit('itemAdded', todo)\n\n```", "```js\njoinList: ->\n    @socket = io.connect('http://localhost:3000')\n    @socket.on 'connect', =>\n      @currentList = @$joinListName.val()\n      @socket.emit 'joinList', @currentList\n\n    @socket.on 'syncItems', (items) => @syncItems(items)\n\n @socket.on 'itemAdded', (item) =>\n localStorage.setObj item.id, item\n @displayItems()\n\n```", "```js\ndestroy: (elem) ->\n    id = ($(elem).closest 'li').data('id')\n    localStorage.removeItem id\n @socket.emit 'removeItem', id if @socket\n    @displayItems()\n```", "```js\nio.sockets.on 'connection', (socket) =>\n  console.log(\"connected\")\n  socket.on 'joinList', (list) =>\n    console.log \"Joining list #{list}\"\n    socket.list = list\n    socket.join(list)\n    @todos[list] ?= []\n\n    socket.emit 'syncItems', @todos[list]\n\n    socket.on 'newItem', (todo) =>\n      console.log \"new todo #{todo.title}\"\n      @todos[list].push todo\n      io.sockets.in(socket.list).emit('itemAdded', todo)\n\n socket.on 'removeItem', (id) =>\n @todos[list] = @todos[list].filter (item) -> item.id isnt id\n io.sockets.in(socket.list).emit('itemRemoved', id)\n\n```", "```js\njoinList: ->\n    @socket = io.connect('http://localhost:3000')\n    @socket.on 'connect', =>\n      @currentList = @$joinListName.val()\n      @socket.emit 'joinList', @currentList\n\n    @socket.on 'syncItems', (items) => @syncItems(items)\n\n    @socket.on 'itemAdded', (item) =>\n      localStorage.setObj item.id, item\n      @displayItems()\n\n @socket.on 'itemRemoved', (id) =>\n localStorage.removeItem id\n @displayItems()\n\n```"]