["```js\nvar protocols = {\n  'https-acao': 'https://i942.photobucket.com/albums/ad261/szaranger/Packt/packt-logo.png',\n  'https': 'https://dz13w8afd47il.cloudfront.net/sites/all/themes/packt_v4/images/packtlib-logo-dark.png'\n};\n```", "```js\nnavigator.serviceWorker.getRegistration().then(function(registration) {\n  var fetchModes = ['cors', 'no-cors'];\n```", "```js\nif (!registration || !navigator.serviceWorker.controller) {  \n    navigator.serviceWorker.register(\n    './service-worker.js').then(function() {\n      console.log('Service worker registered, reloading the page');\n      window.location.reload();\n    });\n```", "```js\nfor (var protocol in protocols) {\n  if (protocols.hasOwnProperty(protocol)) {\n    buildImage(protocol, protocols[protocol]);\n\n    for (var i = 0; i < fetchModes.length; i++) {\n      var fetchMode = fetchModes[i],\n      init = { \n        method: 'GET',\n        mode: fetchMode,\n        cache: 'default' \n      };\n\n    }\n  }\n}\n```", "```js\nfunction buildImage(protocol, url) {\n  var element = protocol + '-image',\n    image = document.createElement('img');\n\n  image.src = url;\n  document.getElementById(element).appendChild(image);\n}\n```", "```js\n fetch(url, init).then(function(response) {\n    printSuccess(response, url, section);\n }).catch(function(error) {\n    printError(error, url, section);\n });\n```", "```js\nfunction log(id, message, type) {\n  var type = type || 'success',\n    sectionElement = document.getElementById(id),\n    logElement = document.createElement('p');\n\n  if (type) {\n    logElement.classList.add(type);\n  }\n  logElement.textContent = message;\n  sectionElement.appendChild(logElement);\n}\n```", "```js\n<style>\n.error {\n     color: #FF0000;\n   }\n   .success {\n     color: #00FF00;\n   }\n</style>\n```", "```js\nvar cacheName= 'fetch-event-cache';\n\nself.addEventListener('install', function(event) {\n  event.waitUntil(\n    caches.open(cacheName)\n      .then(function(cache) {\n        return cache.addAll([\n          'adobe-logo.png',\n          'style.css',\n          'index.html',\n          'index.js',\n          'style.css'\n        ]);\n      })\n      .then(function() {\n        return self.skipWaiting();\n      })\n  );\n});\n\nself.addEventListener('fetch', function(event) {\n  console.log('Handling fetch event for', event.request.url);\n\n  event.respondWith(\n    caches.match(event.request).then(function(res) {\n      if (res) {\n        console.log('Fetching from cache:', res);\n\n        return res;\n      }\n      console.log('No response from cache. Fetching from network...');\n\n      return fetch(event.request).then(function(res) {\n        console.log('Response from network:', res);\n\n        return res;\n      }).catch(function(error) {\n        console.error('ERROR: Fetching failed:', error);\n\n        throw error;\n      });\n    })\n  );\n});\n```", "```js\nvar cacheName= 'fetch-event-cache';\n```", "```js\n.then(function(cache) {\n        return cache.addAll([\n          'adobe-logo.png',\n          'style.css',\n          'index.html',\n          'index.js',\n          'style.css'\n        ]);\n      })\n```", "```js\nevent.respondWith(\n    caches.match(event.request).then(function(res) {\n```", "```js\nvar cacheName= 'fetch-json';\n\nself.addEventListener('install', function(event) {\n  event.waitUntil(\n    caches.open(cacheName)\n      .then(function(cache) {\n        return fetch('files.json').then(function(response) {\n          return response.json();\n        }).then(function(files) {\n          console.log('Installing files from JSON file: ', files);\n          return cache.addAll(files);\n        });\n      })\n      .then(function() {\n        console.log(\n          'All resources cached'\n        );\n\n        return self.skipWaiting();\n      })\n  );\n});\n```", "```js\nself.addEventListener('fetch', function(event) {\n  event.respondWith(\n    caches.match(event.request)\n      .then(function(response) {\n        if (response) {\n          console.log('Fetching from the cache: ', event.request.url);\n          return response;\n        } else {\n          console.log('Fetching from server: ', event.request.url);\n        }\n       return fetch(event.request);\n     }\n   )\n );\n});\n```", "```js\nself.addEventListener('activate', function(event) {\n   console.log('Activating the service worker!');\n   event.waitUntil(self.clients.claim());\n}); \n```", "```js\n[\n  \"adobe-logo.png\",\n  \"apple-logo.png\",\n  \"google-logo.png\",\n  \"style.css\",\n  \"index.html\",\n  \"index.js\",\n  \"style.css\"\n]\n```", "```js\n<section>\n    <h2>Assets from JSON</h2>\n    <img src=\"img/adobe-logo.png\" alt=\"adobe logo\">\n    <img src=\"img/apple-logo.png\" alt=\"apple logo\">\n    <img src=\"img/google-logo.png\" alt=\"google logo\">\n</section>\n```", "```js\n<section >\n    <h1>Proxy</h1>\n    <p>Click the links below for navigating to fetch handlers:</p>\n    <div class=\"links\">\n      <a href=\"/service-workers/07/04/hello\">/hello</a><br />\n      <a href=\"/service-workers/07/04/hello/world\">/hello/world</a>\n    </div>\n</section>\n```", "```js\nvar helloFetchHandler = function(event) {\n  if (event.request.url.indexOf('/hello') > 0) {\n    console.log('DEBUG: Inside the /hello handler.');\n    event.respondWith(new Response('Fetch handler for /hello'));\n  }\n};\n\nvar helloWorldFetchHandler = function(event) {\n  if (event.request.url.endsWith('/hello/world')) {\n    console.log('DEBUG: Inside the /hello/world handler.');\n    event.respondWith(new Response('Fetch handler for /hello/world'));\n  }\n};\n```", "```js\nvar fetchHandlers = [helloWorldFetchHandler, helloFetchHandler];\n\nfetchHandlers.forEach(function(fetchHandler) {\n  self.addEventListener('fetch', fetchHandler);\n}); \n```", "```js\n  <section id=\"prefetched\">\n    <ul>\n      <li><a href=\"prefetched.txt\" target=\"_blank\">prefetched.txt</a></li>\n      <li><a href=\"prefetched.html\" target=\"_blank\">prefetched.html</a></li>\n      <li><a href=\"apple-logo.png\" target=\"_blank\">apple-logo.png</a></li>\n    </ul>\n  </section>\n```", "```js\nvar cacheName= 'cache';\nvar currentCaches = {\n  prefetch: 'prefetch-' + cacheName\n};\n```", "```js\nvar prefetchedURLs = [\n    'prefetched.txt',\n    'prefetched.html',\n    'apple-logo.png'\n];\n```", "```js\n  var url = new URL(prefetchedURLs, location.href);\n```", "```js\nurl.search += (url.search ? '&' : '?') + 'cache-bust=' + Date.now();\n```", "```js\nvar request = new Request(url, {mode: 'no-cors'});\n```", "```js\nreturn fetch(request).then(function(res) {\n    if (res.status >= 400) {\n        throw new Error('FAIL: request for ' + prefetchedURLs +\n        ' failed, status ' + res.statusText);\n    }\n    console.log('CACHING: Caching');\n    return cache.put(prefetchedURLs, res);\n}).catch(function(err) {\n    console.error('CACHING: Not caching ' + prefetchedURLs + ' due to ' + err);\n});\n```", "```js\n    self.addEventListener('activate', function(evt) {\n        var expectedCacheNames = Object.keys(currentCaches).map(function(key) {\n            return currentCaches[key];\n        });\n\n        evt.waitUntil(\n            caches.keys().then(function(cacheNames) {\n              return Promise.all(\n                cacheNames.map(function(cacheName) {\n                  if (expectedCacheNames.indexOf(cacheName) === -1) {\n                    console.log('DELETE: out of date cache:', cacheName);\n                    return caches.delete(cacheName);\n                  }\n                })\n              );\n            })\n        );\n    });\n```", "```js\nself.addEventListener('fetch', function(evt) {\n  console.log('FETCH: Handling fetch event for ', evt.request.url);\n\n  evt.respondWith(\n    caches.match(evt.request).then(function(res) {\n      if (res) {\n        console.log('RESPONSE: found in cache:', res);\n\n        return res;\n      }\n\n      console.log('RESPONSE: not found in cache. Fetching from network.');\n\n      return fetch(evt.request).then(function(res) {\n        console.log('RESPONSE: from network:', res);\n\n        return res;\n      }).catch(function(error) {\n        console.error('FAIL: fetching :', error);\n\n        throw error;\n      });\n    })\n  );\n});\n```"]