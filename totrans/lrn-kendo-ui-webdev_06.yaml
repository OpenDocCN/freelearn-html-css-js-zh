- en: Chapter 6. Menu and ListView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Kendo UI Menu widget is designed to give you an easy way to implement an
    interactive JavaScript menu that opens and closes as the user commands and providers
    a rich visual display on a web page. These types of menus are available through
    other tricks as well, such as CSS, but the Kendo UI widget gives you a much more
    configurable framework and access to a simplified JavaScript API.
  prefs: []
  type: TYPE_NORMAL
- en: The Kendo UI ListView widget is a control for visualizing a collection of data
    elements in a graphically pleasing way, especially if the data contains images
    or special styles. Like all Kendo UI options, the configuration is consistent
    and sensible and allows you to create great-looking content, and provides display
    options for editing and selection.
  prefs: []
  type: TYPE_NORMAL
- en: These controls are a good addition to your toolset for creating modern web pages.
  prefs: []
  type: TYPE_NORMAL
- en: Learning the Menu widget basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Menu widget creates a fantastic drop-down menu with fly-out sections for
    the menu''s contents. It is functionally rich and requires very little code for
    most implementations. As an introduction, here is a code sample of a basic menu
    created from a static unordered HTML list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This is a menu showing different music styles, videos, and some other options
    just to demonstrate how the code looks. The top-level `<li>` elements in the unordered
    list all appear as actual menu headings in the output, in this example they are
    **Music**, **Videos**, **Events**, and **News**.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that each of these top-level elements contains its own name and then
    can optionally contain a nested unordered list (`<ul>`) within itself, which becomes
    the choices that appear when that top-level item is selected on the page.
  prefs: []
  type: TYPE_NORMAL
- en: Moving down the chain, each of the `<li>` elements in the nested list can also
    contain its own `<ul>` for a further nested menu of options. This creates a cascading
    effect where menu options can continue to expand as you move your mouse to different
    options. Also note that the final top-level `<li>` item, `News`, is marked with
    a disabled attribute which means that it will still display in the output but
    not be selectable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the output from this code as the page is first loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Learning the Menu widget basics](img/4346OT_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here is the Menu widget once the mouse is hovered over some of the elements
    in the menu. Try this on your own and see how fast and fluid the menu reacts to
    these events; it is very impressive.
  prefs: []
  type: TYPE_NORMAL
- en: '![Learning the Menu widget basics](img/4346OT_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Like most of the widgets in the Kendo UI framework, the Menu widget does not
    have to run from static HTML, it can be fuelled by a `DataSource` object of either
    local or remote data. Here is the code adapted to use a local `DataSource` object
    instead of static HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `DataSource` object can be configured with all the options that
    you have seen in the earlier chapters, and could just as easily be configured
    with a transport property for remote data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output is identical to the static HTML we used the first time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Learning the Menu widget basics](img/4346OT_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As is the case with most of the Kendo UI widgets, the interactive content on
    the page is identical whether the data comes from the page mark-up or from a JavaScript
    data source. To adapt this to use the MVC extension methods, we can create an
    MVC View with the following source code in the `cshtml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note, how in this code sample, I have declared the data statically. It could
    just as easily be gathered from a different source using logic within C# code,
    or even left as part of the JavaScript and retrieved from a remote source across
    HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output, as you can see from this screenshot, is identical to the other
    two code samples:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Learning the Menu widget basics](img/4346OT_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This illustrates three unique ways to create a Kendo UI Menu widget and the
    differences between them.
  prefs: []
  type: TYPE_NORMAL
- en: Menu items with images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Menu items so far have only included text. The Menu widget, however, can also
    contain an `imageUrl` property or a `spriteCssClass` property to display an image
    along with the text. The image or sprite will appear as an icon to the left of
    the menu item text.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of using the `imageUrl` property to show an icon for the
    `Videos` menu item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'By adding this property, the output now displays the image in the menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Menu items with images](img/4346OT_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is how the code sample would look in MVC:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Notice the `ImageUrl` extension method that adds the image to the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use a sprite, you would first set the background image of the menu items
    that should display the icons and then indicate a CSS class using the `spriteCssClass`
    property that will specify the pixel offset for each particular icon. Each menu
    item that has a `spriteCssClass` property specified will automatically be decorated
    with the `k-sprite` CSS class so that this is wired up properly. Here is a potential
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The CSS section of this sample shows assigning the `background-image` property
    for all of the `k-sprite` class-decorated elements and also designating two sprite
    pixel `background-position` styles. The script section shows the `spriteCssClass`
    property in use, which will assign that portion of the sprites image as the icon
    for that menu item.
  prefs: []
  type: TYPE_NORMAL
- en: Menu items with URLs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far all of the examples I have shown are menu items that do not perform
    any actions when selected. All that you have to do is add the `url` property to
    the menu item in order to make it navigate when clicked on. So, for any menu item
    that you want to navigate the user to a different page, include a `url` property,
    as shown here, and it will do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Menu items with URLs](img/4346OT_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice how the web browser in this screenshot is showing the URL that the **Videos**
    menu item now navigates to.
  prefs: []
  type: TYPE_NORMAL
- en: Menu API configuration options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Kendo UI Menu widget, as should be expected by now, is configurable through
    a full set of API properties and methods. These options are properties that can
    be configured, so that the Menu widget becomes suited to the needs of your web
    page and style. These configurations are specified at the point in code where
    you create the Menu widget. These sections will show you the options you can use.
  prefs: []
  type: TYPE_NORMAL
- en: The animation property
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The animation action of the Kendo UI Menu can be configured for style, speed,
    and direction. When you configure the open action of the menu, Kendo will automatically
    assign the reverse behavior for the `close` action. If you want to configure the
    `close` action independently of the `open` action, then you should configure them
    both separately, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The direction property
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `direction` property determines which direction the menus will open when
    the user hovers over them. The available options here are `top`, `bottom`, `left`,
    and `right`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Some more options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are a few additional options available for configuring menu behavior.
    You can configure how the menu behaves in relation to mouse movement and clicks
    with the `closeOnClick` , `openOnClick`, and `hoverDelay` properties. You can
    configure whether the overall menu is oriented horizontally or vertically with
    the `orientation` property, and you can instruct the Kendo UI framework on how
    you want menus to fit to a page with the `popupCollision` property. All of this
    is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Configuring menu methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some of the methods for the Kendo UI Menu widget require that you get a reference
    to an existing menu item object (not just the HTML element) as a reference point
    for appending or inserting some additional menu items. In this case, you can access
    the menu item objects through a reference to the Kendo Menu like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In this code, you can get a reference to the Kendo Menu object from the same
    line of code where you instantiate it. This way, you can reference this object
    in other parts of your page and JavaScript logic. You can also get a reference
    to the Kendo Menu object by calling `.data(…)` on the HTML element that contains
    it at any point in your code, but doing it in one step is nice.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have this reference, you can access the children inside of the Kendo
    Menu through the `element` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In this code sample, we are accessing the fourth `li` element in the children
    of this particular menu object. The return value here will be a JavaScript object
    that can be used as the reference point for the `append`, `insertAfter`, and `insertBefore`
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: The append(), insertAfter(), and insertBefore() methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `append` method takes two arguments: the JSON notation of the new menu
    item(s) to be appended as children, and a reference to the menu item that will
    be the parent of the newly appended items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This code would append this menu item as a child to the second menu item on
    the page. The `insertAfter` and `insertBefore` methods work exactly the same way,
    except that they insert the new menu items at the same menu level and either after
    or before the reference item respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All of these methods return the Menu object to support method chaining.
  prefs: []
  type: TYPE_NORMAL
- en: The close(), enable(), open(), and remove() methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These methods for the Kendo UI Menu do not require a JavaScript object reference;
    they operate directly on the HTML elements within the menu on the page. Because
    of this, you can use a jQuery selector type syntax to choose which item(s) to
    act upon in a familiar syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `enable` method takes two parameters: the selector for the HTML element(s)
    and then a `true` or `false` value to indicate whether the item should be enabled
    (true) or disabled (false):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This particular code sample will disable the element with an HTML `id` value
    of `secondItem`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other methods here, that is, `close`, `open`, and `remove`, only take a
    single parameter which is the selector of the HTML element(s). Please note that
    the element''s ID values or class names are not assigned by the framework for
    you, you have to assign these values to your elements yourself in order to select
    them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All of these methods return the Menu object to support method chaining.
  prefs: []
  type: TYPE_NORMAL
- en: Menu events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are three events fired by the Kendo UI Menu: `close`, `open`, and `select`.
    Each of these is given an event argument with an `item` property that contains
    the HTML `<li>` element that was closed, opened, or selected, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This code sample shows a method wired up to handle the select event, which
    will then disable all menu items with a class name of `green`. Since this code
    is not considering which specific element was selected, it will fire the same
    code regardless of which element was selected. Here is a different example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This code examines the specific element that was selected and alerts its `innerHTML`
    property back to the user.
  prefs: []
  type: TYPE_NORMAL
- en: The Kendo UI ListView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Kendo UI ListView widget is designed to present a collection of data on
    a web page with a richer set of functionality than a standard HTML list. The ListView
    widget retrieves its data through a Kendo `DataSource` object, it presents its
    data through one or more Kendo Template blocks, and it allows interaction with
    its data by giving the user the ability to both select and edit the data on the
    page.
  prefs: []
  type: TYPE_NORMAL
- en: ListView basics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Basically, the ListView widget displays a collection of data by using a template
    and a `DataSource` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code sample, from the top down, shows some styles for the elements
    that will appear inside the ListView widget. These style declarations are important
    in order to properly lay out the images inside the ListView widget on the web
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We then create the `div` element that will contain the ListView widget and
    the Kendo UI Template that structures the individual ListView elements. This template
    determines how each item in the ListView will be rendered inside the web page.
    Any changes to the ListView items must occur here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We then have the JavaScript object literal that contains some data and the
    instantiation of the ListView where the `dataSource` and `template` properties
    are set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: As always, remember that the `DataSource` object can be fully configured to
    point to remote data sources, can be structured using a schema, or can use any
    of the other options that you might want to take advantage of in a production
    scenario.
  prefs: []
  type: TYPE_NORMAL
- en: '![ListView basics](img/4346OT_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see how each element from the `DataSource` object has been rendered
    with the template, styled, and presented on the page as you would expect.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting elements with ListView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The ListView widget has a richer set of behaviors to offer than simply displaying
    data, however, and to start let''s look at how it allows "selection" of elements.
    In this code sample, I have added some more properties and an event handler to
    the ListView instantiation logic to demonstrate this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The `selectable` property has been set with `multiple` to allow for multiple
    selection of items (you can select multiple items on the page by holding the *Ctrl*
    button on the keyboard while clicking with a mouse). We also added an event handler
    for the `change` event so that we can see an alert box that displays which elements
    have been selected.
  prefs: []
  type: TYPE_NORMAL
- en: In the `notifyUser` event handler function, I want to explain what is happening
    because it looks a bit confusing at first glance. The variable selected is given
    an array value of all of the selected elements' `animalName` property values.
    It does this by using `$.map` on the results of `this.select()`. What is `this.select()`?
    Well, when Kendo fires an event from a widget, it sets the context of that event
    handler so that this refers to the Kendo widget that fired the event. So, in this
    case, this is a reference to the ListView itself. This means that calling `this.select()`
    in this event handler will return a collection of all of the selected elements
    within the ListView. The function as the second parameter of `$.map` then grabs
    the `animalName` property from each of these elements by using its index from
    the `animals` array. The result of this code is an array of strings containing
    all of the `animalName` values of the selected elements from the ListView. This
    is then displayed to the user using `[array].join()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the output with some items selected and the alert box showing from
    the event handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Selecting elements with ListView](img/4346OT_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice how the names of the animals are all showing up in the alert box that
    has popped up on the page. This is great because it means that you can accurately
    track selections that the user makes within your ListView and respond to those
    actions however you need to.
  prefs: []
  type: TYPE_NORMAL
- en: Editing elements with ListView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The ListView widget also provides a good syntax for allowing edits to the data
    within the `DataSource` object. You need to create a separate template to display
    that allows the user to make edits and then make sure that you assign some of
    the Kendo-specific class names, so that it displays and understand the commands
    correctly. Here is the code of the new template. Place it right beneath the template
    we created in the last example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Did you notice the unusual characters in the `href` attribute of the two buttons
    in the template? The double-backslash characters, `\\#`, prevent the hash mark
    from being rendered as part of the Kendo template. If this hash mark was not escaped
    with these backslashes, the template would not render at all.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we have added some more configurations to the JavaScript block that creates
    our ListView widget. Specifically, we now have an `editTemplate` property that
    points to the template that we just created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a screenshot where the name of the Caribou has been edited to Reindeer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Editing elements with ListView](img/4346OT_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: ListView API and configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have already covered several of the aspects of the ListView in our preceding
    examples; here are the remaining configuration properties from the documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: ListView methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The ListView widget has several methods available. Most of them are designed
    to manipulate the items within the ListView, so that you can control the behavior
    through code. Like with any widget, you need a reference to the listView JavaScript
    object before you can call these methods, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the reference through the `.data(...)` method and then you can call the
    ListView-specific methods. Here is a brief overview of the methods that take no
    parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`add`: Inserts an empty item into the ListView and prepares it for editing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cancel`: Cancels changes in currently edited items'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clearSelection`: Clears ListView''s selected items and triggers the `change`
    event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`refresh`: Reloads the data and reprints the ListView'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`save`: Saves the edited ListView item. If validation succeeds, it will call
    the datasource''s `sync` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are a few additional methods that do take parameters.
  prefs: []
  type: TYPE_NORMAL
- en: The edit method
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This method edits the specified ListView item and triggers the `edit` event.
    This method takes a single parameter which is the ListView item that needs to
    be edited. Here is a sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The remove method
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This method removes the specified ListView item and triggers the `remove` event.
    It also triggers the datasource's `sync` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The select method
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This method selects the specified ListView item. If this method is called without
    any arguments, it will return a collection of all of the selected items in the
    ListView. This is what we did in the code sample for selecting items. Here is
    a code sample for using the method with a parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: ListView events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The ListView widget exposes several events for hooking into its lifecycle and
    behavior. We have already seen some of these in our examples. These events can
    all be assigned to handlers during the ListView instantiation as we save earlier
    in the chapter. Here is a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '`change`: Fires when the ListView selection is changed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dataBound`: Fires when the ListView has received data from the `DataSource`
    object and is about to render it'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dataBinding`: Fires when the data is about to be rendered on the page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`edit`: Fires when the ListView enters edit mode'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`remove`: Fires before the ListView item is removed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Menu and ListView widgets are great tools for structuring data on your web
    pages. The Menu widget makes it simple to create interactive JavaScript menus
    for navigation and even for displaying data with graphics. The ListView widget
    should become a standard option for you when you want a standard way of rendering
    collections of data elements on a web page. It gives you the ability to hook up
    functionality that would otherwise require a lot of code and debugging.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take a look at the Kendo UI PanelBar widget. Its
    API is very similar to the Kendo UI Menu widget, as you will see, and it is a
    powerful way to render accordion controls in a web page. Much like the Kendo UI
    Menu widget, its primary responsibility is to organize hierarchical content in
    a way that saves screen space, but still provides a sensible structure for users
    to understand.
  prefs: []
  type: TYPE_NORMAL
