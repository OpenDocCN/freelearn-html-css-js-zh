- en: Chapter 9. Adding Extra Capabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are almost on the final stage of our application. Ext JS provides great capabilities,
    but there are some capabilities that we need to code by ourselves with the help
    of other technologies. Despite possessing a GridPanel with paging, sorting, and
    filter capabilities, sometimes the user is going to expect more from the application.
    Adding features such as printing, the ability to export to Excel and PDF, and
    the ability to export charts to images and PDF can add great value to the application
    and please the final user.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Printing records of a GridPanel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting GridPanel information to PDF and Excel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting charts to PDF and images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using third-party plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting a GridPanel to PDF and Excel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first capability we are going to implement is exporting the contents of
    a GridPanel to PDF and Excel. We will implement these features for the `Films`
    GridPanel we implemented in the preceding chapter. However, the logic is the same
    for any GridPanel you might have in an Ext JS application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we are going to do is add the export buttons to the GridPanel
    toolbar. We will add three buttons: one to **Print** the contents of the GridPanel
    (we will develop this feature later, but let''s add this button right now), one
    button for **Export to PDF**, and one button for **Export to Excel**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting a GridPanel to PDF and Excel](img/0457OT_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Remember that in the preceding chapter, we created a toolbar, `Packt.view.base.TopToolBar`.
    We are going to add these three buttons on this toolbar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: All buttons have `listeners` that we will handle in the ViewController. In this
    case, buttons will be in the `FilmsController` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `Glyphs` class, we are also going to add the following attributes
    to represent the icons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Exporting to PDF
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that the buttons are being displayed on the `Films` GridPanel, it is time
    to go back to `FilmsController` and add these capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first button we are going to listen to is the **Export to PDF** `click`
    event. When the user clicks on this button, we will execute the following method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: What we want to implement is that when the user clicks on the **Export to PDF**
    button, a new tab (`#4`) will be opened with the PDF file in it. This means we
    need to get that **Main** **Panel** class (xtype `mainpanel`) we declared as the
    center item of the Viewport of the application (`#1`), add a new tab to it, and
    as the PDF file will be inside it, we can implement it as **iFrame**. To implement
    iFrame in Ext JS, we can use the iFrame plugin (`#2`) that is distributed within
    the SDK.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the ViewController, we have access to the `Films` View, but we need to
    access `mainpanel`. We can get the `Films` View using the `getView` method and
    then use the `up` method to get `mainpanel`, or we can use `Ext.ComponentQuery`
    to query `mainpanel`. Remember that `Ext.ComponentQuery` returns an array of all
    matching results, but as we know, there is only one `mainPanel` in the application,
    so we can retrieve the first position.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now comes the most important part: Ext JS does not provide the **Export to
    PDF** capability natively. If we want the application to have it, we need to implement
    it using a different technology. In this case, the PDF will be generated on the
    server side (`#3`), and we will only display its output inside the iFrame.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When we execute the code, we will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting to PDF](img/0457OT_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Generating the PDF file on the server – PHP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we need to generate the file on the server side, we can use any framework
    or library that is available for the language we are using on the server. We can
    use *TCPDF* ([http://www.tcpdf.org/](http://www.tcpdf.org/)). There are other
    libraries as well, and you can use the one you are most familiar with.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are using Java, you can use *iText* ([http://itextpdf.com/](http://itextpdf.com/)),
    and if you are using .NET, you can use *excellibrary* ([https://code.google.com/p/excellibrary/](https://code.google.com/p/excellibrary/)).
  prefs: []
  type: TYPE_NORMAL
- en: Generating and viewing the PDF file with JavaScript – HTML5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Thanks to HTML5, it is also possible to generate a PDF file using the HTML5
    API. There are a few solutions that we can use to generate the file without using
    any server-side code and only using JavaScript. One of them is using jsPDF ([https://github.com/MrRio/jsPDF](https://github.com/MrRio/jsPDF)).
  prefs: []
  type: TYPE_NORMAL
- en: By default, the browser is going to use whatever PDF viewer software the user
    has installed on the computer to view the PDF file. It is also possible to use
    a PDF viewer developed with JavaScript called `pdf.js`. This solution is implemented
    and maintained by Mozilla ([https://github.com/mozilla/pdf.js/](https://github.com/mozilla/pdf.js/)).
    There is also an Ext JS plugin developed on `pdf.js` ([https://market.sencha.com/extensions/pdf-panel-without-plugin-needed](https://market.sencha.com/extensions/pdf-panel-without-plugin-needed)).
  prefs: []
  type: TYPE_NORMAL
- en: Exporting to Excel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To export the GridPanel to Excel, we will also use a server-side technology
    to help us.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Ext JS side, the only thing we need to do is to call the URL that will
    generate the Excel file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: On the server side, we will use the *PHPExcel* ([http://phpexcel.codeplex.com/](http://phpexcel.codeplex.com/))
    library to help us generate the Excel file.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are using Java, you can use the Apache POI library ([http://poi.apache.org/](http://poi.apache.org/)),
    and if you are using .NET, you can use *excellibrary* ([https://code.google.com/p/excellibrary/](https://code.google.com/p/excellibrary/)).
  prefs: []
  type: TYPE_NORMAL
- en: If you want to export the GridPanel of any other content from an Ext JS component
    to Excel, PDF, .txt, or a Word document, you can use the same approach.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There is also an Ext JS plugin that exports a grid to an Excel file: [http://goo.gl/E7jif4](http://goo.gl/E7jif4).'
  prefs: []
  type: TYPE_NORMAL
- en: Printing GridPanel content with the GridPrinter plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next functionality we will implement is printing the contents of the GridPanel.
    When the user clicks on the **Print** button, the application will open a new
    browser window and display the contents of the grid in this new window.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we will use a plugin named `Ext.ux.grid.Printer`, which receives
    the GridPanel reference to be printed, gets the information that is on the Store,
    generates HTML from this content, and displays the information in a new window.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The GridPrinter plugin is a third-party plugin available at [https://github.com/loiane/extjs4-ux-gridprinter](https://github.com/loiane/extjs4-ux-gridprinter).
    This plugin will only print the information that is available on the GridPanel
    Store, meaning if you are using the PagingToolbar, the plugin will only generate
    the HTML of the current page. The plugin also supports the RowExpander plugin.
    Please feel free to contribute to this plugin (or any other Ext JS plugin), and
    this way, we can help in growing the Ext JS community! It works with Ext JS 4
    and 5.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the plugin, we are going to get the contents of the `ux` folder
    and place it inside the `app/ux` folder. As Ext JS also ships some plugins within
    the native SDK with the namespace `Ext.ux`, we are going to rename the plugin
    from `Ext.ux.grid.Printer` to `Packt.ux.grid.Printer` to avoid conflict (you can
    search for the occurrences inside the `Printer.js` file and replace it). This
    way, the plugin will be part of the application. The following screenshot demonstrates
    how the project structure will look after installing the plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Printing GridPanel content with the GridPrinter plugin](img/0457OT_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After installing the plugin, we simply need to add it to the `requires` declaration
    of `FilmsController`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'When the user clicks on the **Print** button, the controller will execute the
    following method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `printAutomatically` property means you want the print window to be displayed
    automatically. If set to `false`, the plugin will display the print window, and
    then, if the user wants to print it, they need to go to the browser's menu and
    select **Print** (*Ctrl* + *P*).
  prefs: []
  type: TYPE_NORMAL
- en: To make the plugin work, we need to pass the GridPanel reference to the `print`
    method. In this case, we can get the `Films` GridPanel reference.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we execute the code, we will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Printing GridPanel content with the GridPrinter plugin](img/0457OT_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a Sales by Film Category chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ext JS provides a great set of visual charts we can implement, and users love
    things like this. For this reason, we will implement a chart using three different
    series (pie, column, and bar) where the user can see the **Sales by Film Category**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the final result we will have at the end of
    this topic. As we can see in the following screenshot, we have the chart. Above
    it, we have a toolbar with two buttons: **Change Chart Type**, where the user
    will be able to change the chart series from **Pie** to **Column** or **Bar**,
    and the **Download Chart** button, where the user will be able to download the
    chart in the following formats: **Download as Image** or **Download as PDF**.
    Here''s the screenshot we are discussing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Sales by Film Category chart](img/0457OT_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Ext JS 5 charts and terminology
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we start coding, let's understand a little bit about how Ext JS charts
    work. Ext JS 4 introduced great charting capabilities by leveraging the HTML5
    canvas and SVG features. However, in Ext JS 5, the charts introduced in Ext JS
    4 became deprecated. Ext JS 5 introduces a new Sencha Charts package that comes
    from Sencha Touch, with built-in support for touch, which means we can use touch
    gestures to interact with the charts.
  prefs: []
  type: TYPE_NORMAL
- en: You might ask, but why am I interested in touch support in the charts? There
    are many companies that want to use the same application in tablets without developing
    a new application with the same capabilities for touch devices. Ext JS 5 offers
    this capability. We will discuss more about touch support later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sencha Charts supports three types of charts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cartesian chart**: This represents a chart that uses cartesian coordinates.
    A cartesian chart has two directions, the *x* direction and *y* direction. The
    series and axes are coordinated along these directions. By default, the *x* direction
    is horizontal and the *y* direction is vertical (the directions can be flipped
    as well).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Polar chart**: This represents a chart that uses polar coordinates. A polar
    chart has two axes: an angular axis (which is a circle) and a radial axis (a straight
    line from the center to the edge of the circle). The angular axis is usually a
    category axis while the radial axis is typically numerical.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Space Filling chart**: This creates a chart that fills the entire area of
    the chart, for example, a gauge or a treemap chart.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A chart consists of a **Legend**, **Axis**, **Series**, **Interaction**, and
    **Theme** and can load data from a Store as displayed in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Ext JS 5 charts and terminology](img/0457OT_09_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Series** contains the logic about how the data will be rendered in the
    chart. The series can be **Pie**, **Line**, **Bar**, **Column**, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Axis** is responsible for rendering the chart axis based on the type
    of data. There are three types of axes: `numeric`, `category`, and `time`. The
    `numeric` type is used to render numeric values, `category` is used to render
    data that is a finite set (for example, the names of the months of the year),
    and `time` is used to render data that represents time.'
  prefs: []
  type: TYPE_NORMAL
- en: The **Legend** is responsible for displaying the legend box of the chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sencha Charts also supports interactions. The available interactions are presented
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Crosshair**: This allows the user to get precise values for a specific point
    on the chart. The values are obtained by single-touch dragging on the chart.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CrossZoom**: This allows the user to zoom in on a selected area of the chart.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Item Highlight**: This allows the user to highlight series items in the chart.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Item Info**: This allows displaying detailed information about a series data
    point in a popup panel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pan/Zoom**: This allows the user to navigate the data for one or more chart
    axes by panning or zooming.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rotate**: This allows the user to rotate a polar chart about its central
    point. There is also a special rotate interaction for 3D pie charts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information about charts can be obtained by diving into the *Charts Kitchen
    Sink* example ([http://dev.sencha.com/ext/5.1.0/examples/kitchensink/?charts=true](http://dev.sencha.com/ext/5.1.0/examples/kitchensink/?charts=true))
    and also into the `charts` package ([http://docs.sencha.com/extjs/5.0/5.0.0-apidocs/#!/api/Ext.chart.AbstractChart](http://docs.sencha.com/extjs/5.0/5.0.0-apidocs/#!/api/Ext.chart.AbstractChart))
    in the documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Sencha Charts to the project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A very important detail: Sencha Charts is available for use in Ext JS 5 applications
    via a package, meaning the source code of the charts is not available automatically
    to an application like the grids, forms, and other components. Packages in Sencha
    applications have a similar concept as gems in Ruby or JARs in Java.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To add Sencha Charts to our project, we need to open the `app.json` file located
    in the root folder of the application. Around line 34, we should find the `requires`
    declaration. We need to add `sencha-charts` to `requires`. It is going to look
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: After this change, if we start using charts in the project, our code should
    work.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We cannot forget to have `sencha app watch` executed in a terminal application
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, here''s the last update we are going to do in the `menu` table to be
    able to see the report option in the application menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Creating the Store inside the ViewModel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's go back to our code and start implementing some charts. The Store is going
    to provide the charts with the data. No matter whether we want to create a pie
    chart or column chart or bar chart, we need a Store to provide the information
    we want to display.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we are going to create charts, we need to create a Store that is going to
    hold the collection of data especially for the chart, which means it is not going
    to be used anywhere else in the application. For this reason, we can create it
    directly inside the ViewModel. So we are going to create a new package named `reports`
    inside the `app/view` folder, where we are going to place the files from this
    topic. We are going to start creating the ViewModel this time, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: For this Store, we will not declare a Model; we are going to declare its `fields`
    (`#1`) directly on it. As this Store is going to be used exclusively by the chart,
    there is no need to create a specific Model for it, as we do not intend to reuse
    it later.
  prefs: []
  type: TYPE_NORMAL
- en: We are also going to declare `proxy` (`#2`) with the `ajax`, `url`, and `reader`
    details on it. Most of the models we created in the previous chapters were part
    of a `schema` that contained a `proxy`. This time, we do not have this information
    available, so we need to declare it.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the server side, we can query the data that will feed the chart from the
    `sales_by_ film_category` view from the Sakila database as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Pie chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we are able to retrieve the information we need from the server, let''s
    work on the implementation of the chart. First, we will develop the pie chart,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Let's go through the most important parts of the preceding code; first, we need
    to extend the `PolarChart` class (`#1`) because we want to implement a chart with
    a `pie` series (`#5`).
  prefs: []
  type: TYPE_NORMAL
- en: Next, we are going to add `legend` to this chart, and we are going to dock it
    on the `left` (`#2`). We are also going to add some interactions to this chart
    (`#3`). The user is going to be able to rotate and highlight the slices of `pie`.
    We are going to bind the Store (`#4`) we declared in the ViewModel as well.
  prefs: []
  type: TYPE_NORMAL
- en: Next, there is the `series` configuration that defines what `type` of chart
    we are implementing (`#5`), which is the `pie` chart in this case. The `pie` chart
    needs a field that is going to be used to do the sum and then calculate the fraction
    of each piece. We only have two fields, and `total_sales` (`#10`) is the numeric
    one, so we will use this field. The `donut` configuration (`#6`) sets the radius
    of the donut. This chart is actually a donut chart (because of the hole in the
    middle of the pie).
  prefs: []
  type: TYPE_NORMAL
- en: We can also style our chart (`#7`). The style in this example will add some
    white lines separating each slice of the chart.
  prefs: []
  type: TYPE_NORMAL
- en: Inside each slice, we also want to display its film category so that we can
    easily identify it. We can do this by adding the `label` configuration (`#8`)
    to `series`.
  prefs: []
  type: TYPE_NORMAL
- en: On the `tooltip` configuration, we can define whether we want to display a quick
    tip or not (`#9`). In this case, we want Ext JS to track the movements of the
    mouse, and if the user does a mouseover over any item of the chart, Ext JS will
    display a tip with the name of `category` and the `total_sales` number.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is also possible to define `theme` in the chart. We can do so by adding
    the configuration `theme` in this class. The possible values we can set are: `''green''`,
    `''sky''`, `''red''`, `''purple''`, `''blue''`, `''yellow''`—`''category1''` to
    `''category6''`—and the mentioned theme names with the ''`-gradients''` suffix
    (`''green-gradients''` and so on).'
  prefs: []
  type: TYPE_NORMAL
- en: 3D column chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we can change the chart `type`, we will also implement a column chart that
    looks like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![3D column chart](img/0457OT_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'So let''s get our hands on the code, which is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The column chart extends from the `CartesianChart` class (`#1`) because we want
    to display a chart with *x* and *y* axes. We will also use the same Store we used
    in the pie chart (`#2`), and the user will also be able to highlight (`#3`) the
    columns in this chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the `axes` declaration in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We have two `axes` in a column chart. The *x* axis is going to display `category`
    (`#5`), which is going to be placed at the `bottom`, and the *y* axis is going
    to display the `numeric` (#4) data that is going to be displayed in the `right`
    or `left` (in this example, we chose `left`). In the case of a bar chart, all
    we have to do is swap the axes. The `category` value becomes the *y* axis and
    the `numeric` values become the *x* axis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the `series` configuration to finish configuring our
    chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we are implementing a 3D column chart (`#6`) that can also
    be used as a 3D bar chart. If we want to implement the normal chart, the series
    type would be `'bar'`. As mentioned before, column and bar charts are very similar;
    only the configuration of the *x* and *y* axes are swapped. If we want to display
    a `label` (`#7`), we can also configure one.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that `xField` (`#8`) matches the `Category` axis (`#5`),
    and `yField` (`#9`) matches the `Numeric` axis (vertical/`left` position—(`#4`)).
  prefs: []
  type: TYPE_NORMAL
- en: The bar chart code is exactly the same as the column chart code with a small
    change. We need to invert `Axis` (`Category` will be `left` and `Numeric` will
    be `bottom`), `xField` (which will be `total_sales` instead of `category`), and
    `yField` (which will be `category` instead of `total_sales`).
  prefs: []
  type: TYPE_NORMAL
- en: 'The bar chart is going to look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![3D column chart](img/0457OT_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Chart panel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we want to display a panel and offer the user the possibility to change the
    chart type, we will create a panel and use the Card layout. To refresh our memory,
    the Card layout is mostly used for wizards and also when we have several items
    but want to display only one at a time. And the item that is currently being displayed
    uses the FitLayout.
  prefs: []
  type: TYPE_NORMAL
- en: 'So let''s create a Chart panel, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: So we need to declare `panel` and declare each chart we created as an item.
    So we can declare the pie chart (`#3`), the column chart (`#4`), and the bar chart
    (`#5`) as items of a **Sales by Film Category** panel. By default, the item `0`
    (which is the first item—pie chart) is going to be the default item to be displayed
    when the Chart panel is rendered.
  prefs: []
  type: TYPE_NORMAL
- en: We also cannot forget to declare the ViewModel (`#2`) and the ViewController
    (`#1`), which we are going to create next.
  prefs: []
  type: TYPE_NORMAL
- en: All the classes we mention are `xtype` of which(`#1` to `#5`) are inside `requires`
    declaration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we can declare the toolbar that will contain the button with the menu
    so that the user can choose `Chart Type` and `Download Type`. We will add the
    following code in the place where we have the comment in the preceding code (`#6`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'For the preceding menu, all menu items have the same `listener` declaration
    (`#7`). Instead of having the same code declare three times, we will have it declare
    only once in the ViewController. To help us identify which menu item fired the
    event, we are also going to declare `itemId` for each menu item on lines `#8`,
    `#9`, and `#10`. The output of the preceding code is displayed in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Chart panel](img/0457OT_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As the second `item` of the toolbar, we have the **Download Chart** button.
    Following the same behavior as the **Change Chart Type** button, the **Download
    Chart** button also has a menu with two menu items in it, one for each download
    type, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We will have `listener` (`#11`) for this menu in the ViewController. The output
    for the preceding code will be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Chart panel](img/0457OT_09_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The ViewController
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we develop the two methods we need to implement to close this chapter,
    let''s declare the structure of the `ViewController` for the `reports` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will see how to develop the `onChangeChart` and `onChartDownload` methods.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the chart type
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As the user has the capability to change the chart type by choosing an option
    from the menu, we will develop the following method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: First, we need to get the Chart panel. We can simply retrieve it by calling
    the `getView` method from the ViewController (`#1`).
  prefs: []
  type: TYPE_NORMAL
- en: As the menu item that was clicked on fired the event click, the first parameter
    this method receives is the item itself. We can get its `itemId` property to compare
    which `itemId` the user clicked on, and we set `ActiveItem` accordingly (`#2`,
    `#3`, and `#4`) to the option the user chose.
  prefs: []
  type: TYPE_NORMAL
- en: The `setActiveItem` method is from the Card layout. From the View, we can get
    the layout, which will return an instance of the Card layout, and the method will
    be available.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting charts to images (PNG or JPEG)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On the `onChartDownload` method, we will follow the same logic as we did for
    the **Change Chart Type** menu items. But in this case, we want to save the chart
    as an image (PNG) or PDF file. Here''s how we go about the task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The `Chart` class already has a method named `download`, which we can use to
    download the chart in different formats. This is a native feature from Ext JS.
  prefs: []
  type: TYPE_NORMAL
- en: So first, we need to get a reference of the `Chart` class, which we can get
    through `ActiveItem` of the Chart panel (`#1`).
  prefs: []
  type: TYPE_NORMAL
- en: Then, depending on the user's choice, we will first ask whether the user really
    wants to download the chart in the specific format, and if yes, we will ask Ext
    JS to generate the file. So, if the user chooses to download in PNG (`#2`) or
    PDF (`#3`), we simply need to call the method `download` from the chart reference,
    passing the specific type selected by the user. In this case, the application
    will send a request to `http://svg.sencha.io` and the download will start.
  prefs: []
  type: TYPE_NORMAL
- en: 'According to the documentation, we can pass an object configuration to the
    `download` method with some options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`url`: This is the URL to post the data to. This defaults to the Sencha IO.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`format`: This is the format of the image to export. This defaults to `''png''`.
    The possible values are `png`, `pdf`, `jpeg`, and `gif`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`width`: This is a width value to send to the server to configure the image
    width. This defaults to the natural image width on the Sencha IO server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`height`: This is a height value to send to the server to configure the image
    height. This defaults to the natural image height on the Sencha IO server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filename`: This is the filename of the downloaded image. This defaults to
    `''chart''` on the Sencha IO server. The `config.format` is used as a filename
    extension.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pdf`: This is a PDF-specific option. This configuration is only used if `config.format`
    is set to `''pdf''`. Check the documentation for more details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jpeg`: This is a JPEG-specific option. This configuration is only used if
    `config.format` is set to `''jpeg''`. Check the documentation for more details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are planning to have the application running in a device with touch support,
    it is recommended that you use the method `preview` instead of `download`. The
    `preview` method opens a popup with the chart image, and in this case, the user
    can use the native capability of the device to save the image.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot is from an image that was generated by choosing to
    save the chart as PNG:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting charts to images (PNG or JPEG)](img/0457OT_09_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want to generate the image or the PDF in your own server, you can specify
    the `url` where the data is going to be posted. In the server, you can retrieve
    a POST variable named `data`. The variable has the following content (it is a
    *Base64* image) that can be manipulated in the server to return an image or PDF
    or other required format:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting charts to images (PNG or JPEG)](img/0457OT_09_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to export the content of a GridPanel to PDF,
    Excel, and also a page that is printer-friendly.
  prefs: []
  type: TYPE_NORMAL
- en: We have also learned how to create different types of charts, use only one component
    and change its active item, and export a chart to an image or PDF using Ext JS
    native features.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to test the application, how to enable
    touch support (so that we can execute the application from a tablet or smartphone),
    and also how to enable routing.
  prefs: []
  type: TYPE_NORMAL
