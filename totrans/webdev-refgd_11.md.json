["```js\nvar name = \"john\";\nconsole.log(name);\n```", "```js\nvar name = \"john\";\n(function () {\n  // var name = undefined;\n  if (!name)\n  { var name = \"jane\"; }\n  console.log(name); // \"jane\"\n}());\n```", "```js\nvar name = \"john\";\n(function () {\n  // var name = undefined;\n  if (!name) {\n    let name = \"jane\";\n  }\n  console.log(name); // \"john\"\n}());\n```", "```js\n_xyz123; // variable declared without assigning a value to it\nvarabc = \"Star\"; //variable declared while assigning a value to it\n```", "```js\n(a==undefined){\na=5}\n```", "```js\nConst a=5;\n```", "```js\nconst PI = 3.14159265359;\n\nconsole.log(\"value of PI = \" + PI); //value of PI = 3.14159265359\n\nPI = 3.1415; //<------- Can not re-assign value to PI\n\nconsole.log(\"value of PI = \" + PI); //value of PI = 3.14159265359\n\nconst PI = 2.0312; //<------- Can not re-initialize value of PI\n\nconsole.log(\"value of PI = \" + PI); //Uncaught TypeError: Identifier 'PI' has already been declared\n\nvar PI = 9.2144; //<------- Can not re-declare value of PI\n\nconsole.log(\"value of PI = \" + PI); //Uncaught TypeError: Identifier 'PI' has already been declared.\n```", "```js\nLet student=function(a)\nA+1, yes\nFunction()\nTrue,no\n```", "```js\ntry {\n  demotrycatchfunction(); // may throw any type of exceptions\n}\ncatch (e) {\n  if (e instanceofReferenceError) {\n    // statements to handle ReferenceErrorexceptions\n  } else if (e instanceofSyntaxError\n) {\n  // statements to handle SyntaxError exceptions\n  }\n  else if (e instanceofEvalError) {\n    // statements to handle EvalError exceptions\n  }\n  else {\n    // statements to handle any unspecified exceptions\n    logMyError(e); // pass the exception object to the error handler\n  }\n}\n```", "```js\ntry {\n  //try code - This is the Code block to try\n}\ncatch(error) {\n  //catch code – This is the Code block that handle errors\n}\nfinally {\n  //finally code - This is the Code block to be executed regardless of try catch results\n}\n```", "```js\ntry {\n  //do something\n}\ncatch (Exception e) {\n  try {\n    //do something with little likeliness of output\n  }\n  catch (Exception ex) {\n    try {\n      //do the minimum acceptable\n    }\n    catch (Exception e1) {\n      //More try catches?\n    }\n  }\n}\n```", "```js\nfunctionCheckEligibility(Age) {\n  var result;\n  try { //try block\n    if (Age < 16 { //condition to be tested\n    throw new Error(\"Children below the age of 16 are not allowed. Parent Supervision needed!\"); //incase of false result, an error will be raised\n    }\n  result = age;\n  }\n  catch (e) { //catch block\n    console.log(e.toString()); //error is converted to string and logged into the console\n    throw e; //Uncaught Error\n  }\n  finally { // finally block - It will run in the end regardless of the try, catch results\n    console.log(\"Age doesn't matter!\"); \n  }\n\n  return result;\n};\n```", "```js\nCheckEligibility(14);\n```", "```js\nChildren below the age of 16 are not allowed. Parent Supervision needed!\n```", "```js\nvarstudent=<student>\n<studentInfo>\n<name>Ali</name></studentInfo>\n</student>\n```", "```js\n// An empty arrow function returns undefined\nlet empty =()=>{};\n\n(()=>\"pine\")()// returns \"pine\"\n\nvar simple = a => a >20?20: a;\nsimple(20);// 20\nsimple(10);// 10\n\nlet max =(a, b)=> a > b ?a : b;\n\n// Easy array filtering, mapping, ...\n\nvarsampleArray=[7,4,1,0,3,5,11];\nvar sum =sampleArray.reduce((a, b)=> a + b);// The answer is 29\nvar even =sampleArray.filter(v => v %2==0);// The answer is [4, 0]\nvar odd =sampleArray.filter(v => v %2!=0);// The answer is [7, 1, 3, 5, 11]\nvar double =sampleArray.map(v => v *2);// The answer is[14, 8, 2, 0, 6, 10, 22]\n```", "```js\n//ES5\nfunctionsomeES5Class(fname, age) { // standard way to create an object prototype i.e. constructor function\n  this.fname = fname;\n  this.age = age;\n}\n\nsomeES5Class.prototype.sayName = function() { //prototype property enables us to add new functions to an existing prototype\n  console.log(this.fname);\n}\n\nsomeES5Class.prototype.sayAge = function() { //prototype property enables us to add new functions to an existing prototype\n  console.log(this.age);\n}\n\nvarmyInstance = new someES5Class('Talha', 25); //new keyword is used with a constructor function to create new objects from the same prototype\nmyInstance.sayName(); //the new method can then be called as a regular member\nmyInstance.sayAge();\n\n/*Output:\nTalha\n25*/\n\n//ES6\nclasssomeES6Class { // ES6 class\n  constructor(fname, age) { // a constructor is defined with default parameters\n    this.fname = fname;\n    this.age = age;\n  }\n\n  sayName() { //functions can be added to the class\n    console.log(this.fname);\n  }\n\n  sayAge() { //functions can be added to the class\n    console.log(this.age);\n  }\n}\n\nvarmyInstance = new someES6Class('Talha', 25); //new keyword is used to create new objects from the class\nmyInstance.sayName(); //functions are the class members and can be called directly\nmyInstance.sayAge();\n/*Output:\nTalha\n25*/\n```", "```js\nfunctioncreateStudent(StudentID, name, class) {\n  return {\n    StudentID: StudentID,\n    name: name,\n    class: class,\n  };\n}\n```", "```js\nfunctioncreateStudent(StudentID, name, class) {\n  return {\n    StudentID,\n    name,\n    class,\n  };\n}\n```", "```js\nvarcustomer = {\n  name: \"Samantha\",\n  logName: function() {\n    console.log(this.name);\n  }\n};\n```", "```js\nvarcustomer = {\n  name: \"Samantha\",\n  logName() {\n    console.log(this.name);\n  }\n};\nperson.logName();varobject = {\n  // __prototype__\n  __prototype__: theProtoTypeObj,\n  // Shorthand for 'handler: handler'\n  handler,\n  // Methods\n  toString() {\n    // Super calls\n    return \"x \" + super.toString();\n  },\n  // Dynamic property names\n  [ 'property_' + (() => 20)() ]: 20\n};\n```", "```js\nliteral${substitution_variable}literal\n```", "```js\nletbasic_string = `Kung Fu Panda`;\n\nconsole.log(basic_string);               // \"Kung Fu Panda\"\nconsole.log(typeofbasic_string);        // \"string\"\nconsole.log(basic_string.length);        // 13\n```", "```js\nletbasic_string = `\\`Kung Fu\\` Panda.`;      // `Kung Fu' Panda\n```", "```js\nletmultiline_string = \"Kung Fu Panda, \\n\\\nReleasing in 2016\";\n\nconsole.log(multiline_string);\n```", "```js\nKung Fu Panda\nReleasing in 2016\n```", "```js\nvar settings = {\n  replay: true,\n  save: false\n};\n\n// later\n\nvarlocalReplay = options.replay,\nlocalSave = options.save;\n```", "```js\nvar [ first, last ] = [\"one\", \"hundred\"] // initialize\nconsole.log(first + \" to \" + last); // one to hundred\n\n[first, last] = [last, first] // variable swapping\nconsole.log(first + \" to \" + last); // hundred to one\n```", "```js\nfunction dob() {\n  return [29, \"November\", 1990, \"Thursday\"];\n}\nvar [date, month, year, day] = dob();\nconsole.log(\"My date of birth is on \" + date + \" \" + month); // My date of birth is on 29 November\n```", "```js\nfunction dob() {\n  return {\n    date: 29,\n    month: \"November\",\n    year: 1990,\n    time: {\n      hour: 12, // nested\n      minute: 35,\n      meridian: \"AM\"\n    }\n  };\n}\n\nvar { date: d, month: m, time : { hour: h, meridian: p } } = dob();\n// h is the nested property while year and minute is skipped\n\nconsole.log(\"I was born on \" + d + \" \" + m + \" at \" + h + \" \" + p); // I was born on 29 November at 12 AM\n```", "```js\nfunction multiply(x, y) {\n  y = typeofy !== 'undefined' ?  y : 1;\n\n  returnx*y;\n}\n\nmultiply(10);\n```", "```js\n//Rest Parameter\nfunction sum(…nums) {\n  var result = 0;\n  nums.forEach(function(number) {\n    result += number;\n  });\n  return result;\n}\nconsole.log(sum(1)); // 1\nconsole.log(sum(1, 2, 3)); // 6 \n```", "```js\n//Spread Operator\nfunctionsum2(a, b, c) {\n  return a + b + c;\n}\nvarargs = [1, 2];\nconsole.log(sum(…args, …args, 3)); // 6\n```", "```js\nfunction sum() {\n  return ;\n}\nconsole.log(sum(\n(1, 2)\n//Spread Operator\n\n//Rest Parameter\n//Default Parameter Values\n//Default Parameter Values\nfunctioninc(num, increment = 1) {\n  returnnum + increment;\n}\nconsole.log(inc(2, 2)); // 4\nconsole.log(inc(4)); // 5\n```", "```js\nfunctiongetCuisine(condition) {\n\n  if (condition) {\n    letcuisine = \"Mediterranean\";\n\n    // other code\n\n    returncuisine;\n  }\n  else {\n\n    // cuisine does not exist here\n\n    return null;\n  }\n\n  // cuisine does not exist here\n}\n```", "```js\n// Valid constant\nconst ITEMS = 10;\n\n// Syntax error: missing initialization\nconst ITEM;\n```", "```js\nlet fibonacci = {\n  [Symbol.iterator]() {\n    let x = 0, y = 1;\n    return {\n      next() {\n        [x, y] = [y, x + y];\n        return { done: false, value: y }\n      }\n    }\n  }\n}\n\nfor (vari of fibonacci) {\n  // truncate the sequence at 3000\n  if (i> 3000)\n  break;\n  console.log(i);\n}\n```", "```js\nlet fibonacci = {\n  *[Symbol.iterator]() {\n    let prex = 0, cury = 1\n    for (;;) {\n      [ prex, cury ] = [ cury, prex+curv ] = [\n        yield cury\n    }\n  }\n}\n\nfor (let ni of fibonacci) {\n  if (ni> 3000)\n  break\n  console.log(ni)\n}\n```", "```js\n// same as ECMAScript 5\n\"▯\".length == 2\n\n// new RegExpbehaviour, opt-in 'u'\n\"▯\".match(/./u)[0].length == 2\n\n// new form\n\"\\u{1D306}\"==\"▯\"==\"\\uD834\\uDF06\"\n\n// new String ops\n\"▯\".codePointAt(0) == 0x20BB7\n\n// for-of iterates code points\nfor(var c of \"▯\") {\n  console.log(c);\n}\n```", "```js\nexport function sum(x, y, {\n  return x + y\n}\n\nconsole.log(\"4π = \" + math.sum(math.pi, math.pi, math.pi, math.pi));\n\nconsole.log(\"2π = \" + sum(pi, pi));\n```", "```js\nexportvar e = 2.71828182846;\n\nexport default function(x) {\n  returnMath.log(x);\n}\nconsole.log(\"2π = \" + ln(e)*pi*2);\n```", "```js\nSystem.import('libraries/math').then(function(mx) {\n  console.log(\"π = \" + (mx.pi));\n});\n\n// Create execution sandboxes – new Loaders\nvar loader = new Loader({\n  global: fixup(window)\n});\nloader.eval(\"console.log('live to code!');\");\n\n// Directly manipulate module cache\nSystem.get('jquery');\nSystem.set('jquery', Module({$: $}));\n```", "```js\nVar students=new set();\nStudents.add(10);\nStudents.add(\"Ali\");\n```", "```js\nvarmyMap=newMap();\nmyMap.set(\"pine\",\"apple\");\nmyMap.set(1,\"apple\");\n\nmyMap.size;// 2\nmyMap.has(\"cone\");// will return false\n\nmyMap.has(\"pine\")// will return true\n```", "```js\nvarmyMap=newMap();\nmyMap.set(\"pine\",\"apple\");\n\nmyMap.delete(\"apple\");// Returns true. Successfully removed.\nmyMap.has(\"apple\");// Returns false. The \"apple\" element is no longer present.\n```", "```js\nvarmyMap=newMap();\nmyMap.set(\"0\",\"pine\");\nmyMap.set(1,\"apple\");\nmyMap.set({},\"cone\");\n\nvarmapIter=myMap.entries();\n\nconsole.log(mapIter.next().value);// [\"0\", \"pine\"]\nconsole.log(mapIter.next().value);// [1, \"apple\"]\nconsole.log(mapIter.next().value);// [Object, \"cone\"]\n```", "```js\nfunctionlogMapElements(value, key, map) {\n  console.log(\"m[\"+ key +\"] = \"+ value);\n}\nMap([[\"foo\",3],[\"apple\",{}],[\"cone\", undefined]]).forEach(logMapElements);\n// logs:\n// \"m[pine] = 3\"\n// \"m[apple] = [object Object]\"\n// \"m[cone] = undefined\"\n```", "```js\nvarmyMap=newMap();\nmyMap.set(\"apple\",\"pine\");\n\nmyMap.get(\"apple\");// Returns \"apple\".\nmyMap.get(\"cone\");// Returns undefined.\n```", "```js\nvarmyMap=newMap();\nmyMap.set(\"apple\",\"pine\");\n\nmyMap.has(\"apple\");// returns true\nmyMap.has(\"cone\");// returns false\n```", "```js\nvarmyMap=newMap();\nmyMap.set(\"0\",\"pine\");\nmyMap.set(1,\"apple\");\nmyMap.set({},\"cone\");\n\nvarmapIter=myMap.keys();\n\nconsole.log(mapIter.next().value);// \"0\"\nconsole.log(mapIter.next().value);// 1\nconsole.log(mapIter.next().value);// Object\n```", "```js\nvarmyMap=newMap();\n\n// Add new elements to the map\nmyMap.set(\"apple\",\"pine\");\nmyMap.set(1,\"pineapple\");\n\n// Update an element in the map\nmyMap.set(\"apple\",\"custard\");\n```", "```js\nvarmyMap = new Map();\n\nvarkeyObj = {},\nkeyFunc = function () {},\nkeyString = \"This is a sample string\";\n\n// setting the values\nmyMap.set(keyString, \"value associated to 'This is a sample string'\");\nmyMap.set(keyObj, \"value associated to a keyObj\");\nmyMap.set(keyFunc, \"value associated to a keyFunc\");\n\nmyMap.size; // 3\n\n// getting the values\nmyMap.get(keyString);    // \"value associated to 'This is a sample string'\"\nmyMap.get(keyObj);       // \"value associated to a keyObj\"\nmyMap.get(keyFunc);      // \"value associated to a keyFunc\"\n\nmyMap.get(\"a string\");   // \"value associated to 'This is a sample string'\"\n// because keyString === 'a string'\nmyMap.get({});           // undefined, because keyObj !== {}\nmyMap.get(function() {}) // undefined, because keyFunc !== function () {}\n```", "```js\nvarmyWeakMap1 = new WeakMap(),\nmyWeakMap2 = new WeakMap(),\nvaro1 = {},\no2 = function(){},\no3 = window;\n\nmyWeakMap1.set(o1, 37);\nmyWeakMap1.set(o2, \"pineapple\");\nmyWeakMap2.set(o1, o2); \nmyWeakMap2.set(o3, undefined);\nmyWeakMap2.set(myWeakMap1, myWeakMap2);\n\nmyWeakMap1.get(o2); // \"pineapple\"\nmyWeakMap2.get(o2); // undefined, because there is no value for o2 on myWeakMap2\nmyWeakMap2.get(o3); // undefined, because that is the set value\n\nmyWeakMap1.has(o2); // will return true\nmyWeakMap2.has(o2); // will return false\nmyWeakMap2.has(o3); // will return true\n\nmyWeakMap1.has(o1); // will return true\nmyWeakMap1.delete(o1);\nmyWeakMap1.has(o1); // will return false\n```", "```js\nvarwm = new WeakMap();\nvarobject = {};\n\nwm.set(object, \"pine\");\nwm.set(window, \"apple\");\n\nwm.has(object); // will return true\nwm.has(window); // will return true\n\nwm.clear();\n\nwm.has(object)  // will return false\nwm.has(window)  // will return false\n```", "```js\nvarwm = new WeakMap();\nwm.set(window, \"pineapple\");\n\nwm.delete(window); // Returns true. Successfully removed.\n\nwm.has(window);    // Returns false. The window object is no longer in the WeakMap.\n```", "```js\nvarwm = new WeakMap();\nwm.set(window, \"pine\");\n\nwm.get(window); // Returns \"pine\".\nwm.get(\"apple\");  // Returns undefined.\n```", "```js\nvarwm = new WeakMap();\nwm.set(window, \"pine\");\n\nwm.has(window); // returns true\nwm.has(\"apple\");  // returns false\n```", "```js\nvarwm = new WeakMap();\nvarobject = {};\n\n// Add new elements to the WeakMap\nwm.set(object, \"pine\").set(window, \"apple\"); // chainable\n\n// Update an element in the WeakMap\nwm.set(object, \"cone\");\n```", "```js\nvarmyWeakSet=newWeakSet();\n\nmyWeakSet.add(window);// add the window object to the WeakSet created above\n\nmyWeakSet.has(window);// will return true\n```", "```js\nvarmyWeakSet=newWeakSet();\nvarmyObject={};\n\nmyWeakSet.add(window);\n\nmyWeakSet.delete(myObject);// Will return false\nmyWeakSet.delete(window);// Will return true.\n\nmyWeakSet.has(window);// Will return false.\n```", "```js\nvarws=newWeakSet();\nvarobject={};\nws.add(window);\n\nmySet.has(window);  // will return true\nmySet.has(object);  // will return false\n```", "```js\n// Sets\nvarmySet = new Set();\nmySet.add(\"apple\").add(\"candy\");\nmySet.size === 2;\nmySet.has(\"hello\") === false;\n\n// Maps\nvarmyMap = new Map();\nmyMap.set(\"boy\", 27);\nmyMap.set(f, 25);\nmyMap.get(f) == 25;\n\n// Weak Maps\nvarmyWeakMap = new WeakMap();\nmyWeakMap.set(s, { extra: 99 });\nmyWeakMap.size === undefined\n\n// Weak Sets\nvarmyWeakSet = new WeakSet();\nmyWeakSet.add({ data: 99 });\n```", "```js\nvartargetObject = {};\nvarhandlerObject = {\n  get: function (receiver, book) {\n    return `Title, ${name}!`;\n  }\n};\n\nvarproxyObject = new Proxy(target, handler);\nproxyObject.world === 'Lahore!';\n\n// Proxying a function object\nvartargetObject = function () { return 'Target, I am'; };\nvarhandlerObject = {\n  apply: function (receiver, ...args) {\n    return 'Le proxy';\n  }\n};\n\nvar p = new Proxy(target, handler);\np() === 'Le proxy';\n```", "```js\nvar symb = Symbol(); \n```", "```js\nvar symb = Symbol('abc');\n```", "```js\nSymbol('abc') === Symbol('abc'); //false\n```", "```js\nvar symb = new Symbol(); // TypeError\n```", "```js\nvar symb = Symbol(\"abc\");\ntypeof symb;     // \"symbol\" \nvar symbObj = Object(symb);\ntypeof symbObj;  // \"object\"\n```", "```js\nvarSomeClass = (function() {\n\n  var key = Symbol(\"key\");\n\n  functionSomeClass(privateData) {\n    this[key] = privateData;\n  }\n\n  SomeClass.prototype = {\n    doStuff: function() {\n      ... this[key] ...\n    }\n  };\n\n  returnSomeClass;\n})();\n\nvar c = new SomeClass(\"bye\")\nc[\"key\"] === undefined\n```", "```js\n// Pseudo-code of Array\nclassSomeArray {\n  constructor(...args) { /* ... */ }\n  static [Symbol.create]() {\n\n  }\n}\n\n// User code of Array subclass\nclassSomeArray extends Array {\n  constructor(...args) { super(...args); }\n}\n\n// Two-phase 'new':\n// 1) Call @@create to allocate object\n// 2) Invoke constructor on new instance\nvararr = new SomeArray();\narr[1] = 123;\narr.length == 1\n```", "```js\nvarprom1 = 6000;\nvarprom2 = new Promise(function(resolve, reject) {\n  setTimeout(resolve, 100, \"Here\");\n}); \n\nPromise.all([prom1, prom2]).then(function(values) {\n  console.log(values); // [6000, \"Here\"]\n});\n```", "```js\nvarprom1= new Promise(function(resolve, reject) {\n  resolve('This was Successful!!');\n});\n\nprom1.then(function(value) {\n  console.log(value); // \"This was Successful!!\"\n  throw 'oh, no!';\n}).catch(function(e) {\n  console.log(e); // \"Error found\"\n}).then(function() {\n  console.log('Catch Done!');\n}, function () {\n  console.log('Not fired due to the catch');\n});\n```", "```js\nvarprom1=newPromise(function(resolve, reject) {\n  resolve(\"This was a Success!\");\n  // or\n  // reject (\"Error Found Try Again!\");\n});\n\nprom1.then(function(value) {\n  console.log(value);//This was a Success!\n},function(reason){\n  console.log(reason);// Error Found Try Again!\n});\n```", "```js\nvarp2=newPromise(function(resolve, reject) {\n  resolve(1);\n});\n\np2.then(function(value) {\n  console.log(value);// 1\n  return value +1;\n}).then(function(value) {\n  console.log(value);// 2\n});\n\np2.then(function(value) {\n  console.log(value);// 1\n});\n```", "```js\nfunctionfetch_current_data() {\n  returnfetch(\"current-data.json\").then((response)=> {\n    if(response.headers.get(\"content-type\")!=\"application/json\") {\n      thrownewTypeError();\n    }\n    var j =response.json();\n    // maybe do something with j\n    return j;// fulfillment value given to user of\n    // fetch_current_data().then()\n  });\n}\n```", "```js\nPromise.reject(\"Testing Promise reject\").then(function(reason) {\n  // not called\n},function(reason) {\n  console.log(reason);// \"Testing Promise reject\"\n});\n\nPromise.reject(newError(\"fail\")).then(function(error) {\n  // not called\n},function(error) {\n  console.log(error);// Stacktrace\n});\n```", "```js\nvarmyPromise1=newPromise(function(resolve, reject) {\n  setTimeout(resolve,800,\"first\");\n});\nvarmyPromise2=newPromise(function(resolve, reject) {\n  setTimeout(resolve,300,\"second\");\n});\n\nPromise.race([myPromise1,myPromise2]).then(function(value) {\n  console.log(value);// \"second\"\n  // Both resolve, but myPromise2 is faster\n});\n```", "```js\nNumber.EPSILON\nNumber.isInteger(Infinity) // will return false\nNumber.isNaN(\"NaN\") // will return false\n\nMath.acosh(3) // 1.762747174039086\nMath.hypot(3, 4) // 5\nMath.imul(Math.pow(2, 32) - 1, Math.pow(2, 32) - 2) // 2\n\n\"Neptune\".includes(\"cd\") // This will return false\n\"Mars\".repeat(4) // This will be \"MarsMarsMarsMars\"\n\nArray.from(document.querySelectorAll('*')) // Returns a real Array\nArray.of(1, 2, 3) // Similar to new Array(...), but without special one-arg behavior\n[0, 0, 0].fill(2, 1) // [0,2,2]\n[24, 14, 23, 57, 89, 75, 33].find(x => x == 33) // 33\n[24, 14, 23, 57, 89, 75, 33].findIndex(x => x == 14) // 1\n[1, 2, 3, 4, 5].copyWithin(3, 0) // [1, 2, 3, 1, 2]\n[\"x\", \"y\", \"z\"].entries() // iterator [0, \"x\"], [1,\"y\"], [2,\"z\"]\n[\"x\", \"y\", \"z\"].keys() // iterator 0, 1, 2\n```", "```js\n// ECMAScript 6\nvarvalue11 = 0o65;      // 53 in decimal\nvarvalue22 = 0b100;     // 4 in decimal\n\n0b111110111 === 503 // will return true\n0o767 === 503 // will return true\n```", "```js\n// Object\nvarobject={a:4,b:5};\nReflect.get(object,\"b\");// 5\n\n// Array\nReflect.get([\"first\",\"second\"],1);// \"second\", since array starts with 0 index\n\n// Proxy with a get handler\nvar x ={p:9};\nvarobject=newProxy(x, {\n  get(a,b,c){returnb +\"meow\";}\n});\nReflect.get(object,\"woof\");// \"woofbar\"\n```", "```js\n// Object\nvarobject={};\nReflect.set(object,\"property\",\"value\");// will return true\nobject.property;// \"value\"\n\n// Array\nvararr=[\"cow\",\"cow\",\"cow\"];\nReflect.set(arr,1,\"goat\");// will return true\narr[1];// \"goat\"\n\n// It can truncate an array.\nReflect.set(arr,\"length\",1);// will return true\narr;// [\"goat\"];\n\n// With just one argument, propertyKey and value are \"undefined\".\nvarobject={};\nReflect.set(object);// will return true\nReflect.getOwnPropertyDescriptor(object,\"undefined\");\n// { value: undefined, writable: true, enumerable: true, configurable: true }\n```", "```js\nReflect.has({a:0},\"a\");// will return true\nReflect.has({a:0},\"b\");// will return false\n\n// returns true for properties in the prototype chain\nReflect.has({a:0},\"toString\");\n\n// Proxy with .has() handler method\nobject=newProxy({}, {\n  has(s,d){returns.startsWith(\"cat\");}\n});\nReflect.has(object,\"catastrophe\");// will return true\nReflect.has(object,\"camel\");// will return false\n```", "```js\nReflect.apply(Math.floor, undefined,[3.999]);\n// 3;\n\nReflect.apply(String.fromCharCode, undefined,[80, 97, 107, 105, 115, 116, 97, 110]);\n// \"Pakistan\"\n\nReflect.apply(\"\".charAt,\"stars\",[2]);\n// \"a\"\n```", "```js\nvar d =Reflect.construct(Date,[2015,1,5]);\ndinstanceofDate;// will return true\nd.getFullYear();// 2015\n```", "```js\nfunctionmyConstructor(){}\nvar result =Reflect.construct(Array,[],myConstructor);\n\nReflect.getPrototypeOf(result);// myConstructor.prototype\nArray.isArray(result);// will return true\n```", "```js\nReflect.getOwnPropertyDescriptor({a:\"bye\"},\"a\");\n// {value: \"bye\", writable: true, enumerable: true, configurable: true}\n\nReflect.getOwnPropertyDescriptor({x:\"bye\"},\"y\");\n// undefined\n\nReflect.getOwnPropertyDescriptor([],\"length\");\n// {value: 0, writable: true, enumerable: false, configurable: false}\n```", "```js\nReflect.getOwnPropertyDescriptor(\"woof\",0);\n// TypeError: \"woof\" is not non-null object\n\nObject.getOwnPropertyDescriptor(\"dummy\",0);\n// { value: \"d\", writable: false, enumerable: true, configurable: false }\n```", "```js\nhttp://haseeb.deeurl.com/client-demos/everydayadvice/v3/={};\nReflect.defineProperty(object,\"x\",{value:7});// will return true\nobject.x;// 7\n```", "```js\nif(Reflect.defineProperty(target, property, attributes)) {\n  // will return success\n}\nelse{\n  // will return failure\n}\n```", "```js\nReflect.getPrototypeOf({});// Object.prototype\nReflect.getPrototypeOf(Object.prototype);// will return null\nReflect.getPrototypeOf(Object.create(null));// will return null\n```", "```js\nReflect.setPrototypeOf({},Object.prototype);// will return true\nReflect.setPrototypeOf({},null);// will return true\n\nReflect.setPrototypeOf(Object.freeze({}),null);// will return false\n\nvar target ={};\nvarprototype=Object.create(target);\nReflect.setPrototypeOf(target,prototype);// will return false\n```", "```js\nvarobject={a:11,b:12};\nReflect.deleteProperty(object,\"a\");// will return true\nobject;// { y: 12 }\n\nvararr=[11,12,13,14,15];\nReflect.deleteProperty(arr,\"3\");// will return true\narr;// [11, 12, 13, , 15]\n\n// Returns true if no such property exists\nReflect.deleteProperty({},\"bar\");// will return true\n\n// Returns false if a property is unconfigurable\nReflect.deleteProperty(Object.freeze({bar:1}),\"bar\");// will return false\n```", "```js\nvarobject={a:98,b:99};\n\nfor(var name ofReflect.enumerate(object)) {\n  console.log(name);\n}\n// logs \"a\" and \"b\"\n```", "```js\nvarblank={};\nReflect.isExtensible(blank);// === will return true\n\nReflect.preventExtensions(blank);\nReflect.isExtensible(blank);// === will return false\n```", "```js\nvar blank ={};\nReflect.isExtensible(blank);\n```", "```js\nReflect.ownKeys({a:5,b:6,c:7});\nReflect.ownKeys([]);\n\nvarsymbol=Symbol.for(\"dirt\");\nvarsymbolb=Symbol.for(\"sky\");\nvarobject={[symbol]:0,\"string\":0,\"99\":0,\"4\":0,\n[symbolb]:0,\"100\":0,\"-7\":0,\"second string\":0};\nReflect.ownKeys(object);\n```", "```js\nfunction factorial(n, acc) {\n 'use strict';\n if (n <= 1) return acc;\n return factorial(n - 1, n * acc);\n}\nconsole.log(factorial(5, 1)); //120\nconsole.log(factorial(200, 1)); //Infinity\n\n// Stack overflow in most implementations today,\n// but safe on arbitrary inputs in ES6\nconsole.log(factorial(10000000, 1));\n```"]