- en: Chapter 7. Manipulating Fonts with Less
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We explored how to use the various elements of Less, created a basic page to
    use Less, and covered how to migrate a site to use Less….so, what's next?
  prefs: []
  type: TYPE_NORMAL
- en: Ah yes, working with text or to be more specific, fonts!
  prefs: []
  type: TYPE_NORMAL
- en: It goes without saying that content is king on any website—part of achieving
    the right impact is the careful selection of fonts that should be used on your
    site. We wouldn't use a script-based font if we were designing a news site, as
    the text should be clean and easy to read. However, a script font would be perfect
    to represent the flowing lines associated with dresses sold at a dressmaker's
    outfit.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s all about selecting the right style; Less is perfect to help us manage
    the styles, colors, and sizes of any font we decide to use in our pages. Throughout
    this chapter, you''ll see how you can use some simple principles to make managing
    fonts a cinch with Less. We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating font mixins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using variables to determine sizes dynamically
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using prebuilt libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Catering for the `@media` and `@font-face` support in Less
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are you ready to have some fun with fonts? Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Creating simple font mixins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The key to working with fonts is to start simple and then build it up—there
    is no better place to start than to create a simple mixin in order to manage attributes
    such as font names. Let''s create a simple example where we can see this in action;
    here''s what our mixin will produce:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating simple font mixins](img/00065.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Okay, let''s start creating our mixin; we''ll begin by preparing the markup
    for our demo:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a copy of the `project.html` file we created in [Chapter 3](part0031_split_000.html#page
    "Chapter 3. Getting Started with Less"), *Getting Started with Less*, and then
    modify it as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the following markup to the `<body>` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the file as `basicfonts.html`. In a separate file, add the following Less
    styles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save this as `basicfonts.less`. If you preview the results in a browser, you
    will see the six statements appear in decreasing font sizes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So, let''s take a moment to consider what''s happened here: we created a simple
    mixin that replaced `.fontfamily` with `''Kite One'', Arial, sans-serif;` as the
    font family for the statements on the page. Once the Less file has been compiled,
    each `H` style will use Kite One as the base font (in various sizes), falling
    back to use Arial or sans-serif, if Kite One is not available.'
  prefs: []
  type: TYPE_NORMAL
- en: Extending the mixin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the preceding instance, we could stop here—after all, the mixin we've produced
    works perfectly well. However, it's not the best we can do; if we create similar
    mixins throughout our code, it will soon become a real handful to ensure that
    all are updated, should the font names need to change.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead, we can make a simple change and use a variable name. To see what this
    means, open `basicfonts.less` and then add these two lines at the start:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You might ask, why make this kind of a change? The answer is easy: this reduces
    the number of instances where the code has to be updated if a change is made.
    If you change the fonts being referenced as part of the `@font-family-sans-serif`
    variable, then Less will automatically take care of updating the code—meaning,
    one less job to do! Here, we only needed to change one instance; had there been
    many instances in our code, then Less would have updated them automatically at
    the point of compiling our code.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on and turn our attention to changing the size of the fonts that
    we use—after all, things would be boring if everything was of the same size, right?
  prefs: []
  type: TYPE_NORMAL
- en: Using @font-face with Less
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A downside of using fonts in web pages is that they must exist on your end user's
    PC or laptop. Naturally, with the mix of PC, laptop, and mobile devices now available
    in the market, it would be almost impossible to guarantee that the font will exist!
  prefs: []
  type: TYPE_NORMAL
- en: I say impossible; there are fonts that we can use on a PC or laptop, such as
    Arial, Times New Roman, or Verdana; they are not bad fonts, but they are overused
    and not particularly special. We could, of course, use an external service, such
    as Google Fonts—as we did in the *Creating simple font mixins* section earlier
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: However, we can do better than this by using `@font-face` to embed any font
    in our pages. I say any, but the license for the font must allow embedding in
    a page. Thankfully, if we use a site such as Font Squirrel (as we will do in the
    next exercise), we can easily check and eliminate any fonts that fall outside
    this criteria, when choosing a font.
  prefs: []
  type: TYPE_NORMAL
- en: Enough of the talking; let's turn our attention to using `@font-face` so that
    we can see how it works. We're going to use it in a very simple demo; while it
    might not show much, it perfectly illustrates how you can use `@font-face` with
    Less.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the font files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we get stuck in with writing code, we need to download an appropriate
    font—after all, using something such as Arial or Times New Roman won''t do the
    demo justice! Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: For this demo, we'll use a font from the Font Squirrel site ([http://www.fontsquirrel.com](http://www.fontsquirrel.com)).
    Let's start by browsing to the Font Squirrel site and downloading the PT Sans
    font, which we will use in our demo. We can download it from [http://www.fontsquirrel.com/fonts/PT-Sans](http://www.fontsquirrel.com/fonts/PT-Sans).
    Here, we can also check the details of the license and see the samples of the
    font displayed on the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Webfont Kit** tab and then on the **Download @Font-Face Kit**
    button to download the font; save the compressed archive in the project folder
    as `PT-Sans-fontfacekit.zip`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For now, open up the `ptsans_regular_macroman` folder, extract the four Webfont
    files from within, and place them in a subfolder called `fonts` within our project
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will be revisiting this font in the *Handling different weights* section,
    later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Embedding the font into our demo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Okay, now that we have the font files in place, let''s make a start with the
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: Crank up the editor of your choice—I assume that, for the purpose of this exercise,
    it is Sublime Text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open up a copy of `projects.html`, which we created at the start of the book,
    and then modify it as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following markup to the `<body>` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save it as `fontface.html`. As we can clearly see, it''s a very simple demo—enough
    to show off how to use `@font-face`—it was never meant to be complicated! It isn''t
    complete without the all-important styling; so, go ahead and add the following
    to a new file, saving it as `fontface.less`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you preview the results in a browser, you can expect to see something akin
    to this screenshot:![Embedding the font into our demo](img/00066.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is a simple way to show you how to use `@font-face` with Less; here, we''ve
    displayed a simple sentence using the PT Sans font, styled with different colors
    for each font size. In each call to the `.font-face` mixin, we pass the name of
    the font and the color to be used; the mixin selects the most appropriate format
    of the font based on the browser being used:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Font format | Browser(s) supporting the format |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `TTF` | This works in most browsers, except IE and iPhone |'
  prefs: []
  type: TYPE_TB
- en: '| `EOT` | This is a proprietary font format for use in IE only—it is currently
    not a W3C-recommended standard |'
  prefs: []
  type: TYPE_TB
- en: '| `WOFF` | This is a compressed, emerging standard—currently supported by most
    browsers except Opera Mini |'
  prefs: []
  type: TYPE_TB
- en: '| `SVG` | For use in iPhone/iPad only |'
  prefs: []
  type: TYPE_TB
- en: If you only have access to one format, then WOFF is the best one to choose;
    otherwise, try to include fonts in all the four formats where possible.
  prefs: []
  type: TYPE_NORMAL
- en: Using a prebuilt library to handle fonts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous example, we used `@font-face` to embed a custom font into our
    pages; this removes any constraint on the fonts that we can use, as we can download
    and use suitably licensed fonts. This is great, but we can do better—one of the
    precepts of Less is the DRY principle, which we introduced earlier in the book;
    this is a perfect opportunity to practice what we preach!
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of having to create new mixins to handle `@font-face`, we can use a
    prebuilt library to handle the `@font-face` mixin for us. This means we can remove
    a good chunk of our code, as we will use the mixin from the prebuilt library—let''s
    take a look at this in action:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up a copy of `fontface.html` and alter the link to the Less file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save this as `fontface-ml.html`. In a new file, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will be our Less style sheet—go ahead and save it as `fontface-ml.less`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you preview the results in a browser, you should see little or no difference
    in the output, when compared to the results from the previous exercise. So, what''s
    different? I hear you ask: Why use a prebuilt library?'
  prefs: []
  type: TYPE_NORMAL
- en: 'The answer is easy: you''re forgetting the one key principle—when using Less,
    it doesn''t matter how big the library is as Less only incorporates those styles
    that are *directly referenced in the code during compilation*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you take a look through the library, you will see the `@font-face` mixin
    at or around line `1362`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In this instance, this is all that is being used—we can prove this using a
    DOM Inspector, such as Firebug, to view the compiled CSS styles, as shown in this
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using a prebuilt library to handle fonts](img/00067.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In a small example such as ours, the benefits may not be immediately apparent—once
    this scales up to a much larger site, this will significantly reduce the amount
    of code that you have to write. The key to using a prebuilt library in such an
    instance comes down to choosing the right library—the more we can use from one
    prebuilt library, the better!
  prefs: []
  type: TYPE_NORMAL
- en: Okay, we now have the right fonts in place; we need to ensure that they can
    be sized as appropriate on our pages. Thankfully, Less contains some useful functionality
    that helps make sizing fonts a cinch—let's take a look at how we can use the library
    to help set font sizes in our pages.
  prefs: []
  type: TYPE_NORMAL
- en: Using variables to calculate sizes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have chosen the fonts we want to use, we need to ensure that we
    can set the right size for the occasion; thankfully, Less has a number of techniques
    that we can use to create our CSS styles.
  prefs: []
  type: TYPE_NORMAL
- en: 'The simplest technique is to assign a font size to a set variable and then
    reference this variable throughout your code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the initial variable is set, we can then create a range of font sizes
    automatically, by multiplying the base value with a graduated set of numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'When compiled using a precompiler, Less will convert these into valid CSS font
    sizes as shown in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using variables to calculate sizes](img/00068.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This is a very simple way of defining font sizes; if we need to change the font
    sizes, all we need to do is change the value of `@font-size-base` and Less will
    take care of updating the others automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Moving with the times
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Working with pixels is a consistent, reliable way of defining font sizes—if
    you specify a value of `14px` for an element, that element will be sized at `14px`.
    However, for those using IE, sizes do not cascade well when the zoom function
    is used.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, we can use the `rem` unit—this maintains its value relative to the
    root (HTML) element, instead of its parent. You might notice that I've skipped
    over the use of `em` as an option. The `em` value is set relative to the parent,
    which means elements will not resize well if your visitor decides to use the zooming
    function in IE!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a good discussion on the pros and cons of using `rem`, `em`, and `px` as
    font size formats, take a look at an article by Jonathan Snook—although it is
    a few years old, it still contains some useful details—at [http://snook.ca/archives/html_and_css/font-size-with-rem](http://snook.ca/archives/html_and_css/font-size-with-rem).
  prefs: []
  type: TYPE_NORMAL
- en: Support for `rem` is good within modern browsers, so we just need to provide
    fallback support for any version of IE older than Version 8.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this in mind, we can create a mixin such as the following to handle sizing
    values using the `rem` values, but with a pixel fallback for those who still need
    to use IE8 or below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'When compiled, this produces the following CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Most modern browsers will support the use of the `rem` element without issues
    or will fall back to use the pixel equivalent, if appropriate. Perfect! We now
    have our fonts sized properly; we're good to go, right? Or, are we…?
  prefs: []
  type: TYPE_NORMAL
- en: Handling different weights
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Well, perhaps not; what if we're using multiple variations of a particular font?
    This isn't a problem when using Less—we can reference our font in the normal way
    and use the Less namespacing facility to pick and choose which font styles to
    use for each HTML element. Let's take a look at what this means in practice.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by downloading a copy of the code that accompanies this book; from
    the code download, extract the `weights.html` file that contains our basic text
    and HTML markup. Save a copy of the file within the project folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, go ahead and add the following to a new document, saving it as `weights.less`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If you preview the results in a browser, you will see something akin to this
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Handling different weights](img/00069.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Using the Less namespace functionality is a great way to work with fonts. In
    this example, we've touched again on a technique that we covered in [Chapter 5](part0050_split_000.html#page
    "Chapter 5. Inheritance, Overriding, and Nesting in Less"), *Inheritance, Overriding,
    and Nesting in Less*, where we can pick and choose the styles we want Less to
    compile into valid CSS.
  prefs: []
  type: TYPE_NORMAL
- en: In this instance, we're pulling in one of Google's Web Fonts to create three
    styles as a nested block before calling each of them from within `.para1`, `.para2`,
    and `h1`. It's a great technique to help group common styles together—the real
    benefit of using it is to help better organize your Less styles; Less will convert
    the calling styles (that is, `.para1`, `.para2`, and `h1`) into valid CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't forget to include the `()` in your namespace block, to prevent Less from
    compiling it as a valid CSS block.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've covered the basics of using Less to help manage our fonts, let's
    move on and take a look at some more examples of using fonts with Less, beginning
    with creating the `@media` queries for a responsive design.
  prefs: []
  type: TYPE_NORMAL
- en: Working with @media in Less
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the age of using mobile devices and responsive design, a key element in building
    sites is to allow their use on mobile devices, such as iPads or smartphones.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key to responsive design is the `@media` rule—we can use this to define
    the style at particular breakpoints or sizes of screen estate for different devices.
    To illustrate how this works when using Less, we''ll use a simplified example
    created by Eric Rasch as a basis for an example web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with @media in Less](img/00070.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Eric's original example is available at [http://codepen.io/ericrasch/HzoEx](http://codepen.io/ericrasch/HzoEx).
  prefs: []
  type: TYPE_NORMAL
- en: For this demonstration, we'll break the convention and use the copies of the
    `media.html` and `media.less` files that are available in the code download that
    accompanies this book. I recommend that you run the demo in a browser that has
    a DOM inspector installed, so you can see the different styles in use as we resize
    the browser.
  prefs: []
  type: TYPE_NORMAL
- en: The `media.html` file contains some simple text generated using the **Lorem
    Ipsum** generator at [http://www.lipsum.com](http://www.lipsum.com); this is to
    represent a standard web page.
  prefs: []
  type: TYPE_NORMAL
- en: For reasons of space, we'll work through the important elements of the `media.less`
    file—the rest of the Less markup in this file is purely to make the page look
    attractive.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic media query
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we take a look at the Less file in detail, let''s just remind ourselves
    of how a basic `@media` query looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This translates to setting the background color to `#ccc` (light gray), when
    the screen size is between 520 px and 699 px.
  prefs: []
  type: TYPE_NORMAL
- en: Examining the Less file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a simple enough media query, right? Let's apply this to what we have
    in our Less file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `media.less`, we can see several sections—the first section declares a number
    of variables; these include each of the breakpoints we will use, and the font
    sizes that we will apply to the text in our page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Did you notice the `@tablet` variable and how similar it is to our example query?
    Granted, ours will not be for as large a device as this tablet, but the format
    stays the same, irrespective of the sizes defined.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next comes the mixin that will apply styles to each `@media` rule. The `body:after`
    statement changes the label at the top-left of our screen to display which breakpoint
    is being used at a particular screen size. The section rule determines the width
    and font size to be used for the `<section>` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We finish with the most important part—this ties together all of the mixins
    and variables we''ve defined to arrive at the `@media` CSS rules we will have
    in our compiled style sheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If we run the example from the code download and resize the screen to its maximum
    (that is, greater than `1129px` for this example), we can see that the breakpoint
    in use is **desktop xl**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Examining the Less file](img/00071.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How does our example work? It's easy; we've used a combination of variables
    and a mixin to reproduce the code required for each `@media` query. Although we
    can change each breakpoint to match those devices we want to cater for, the ranges
    used here should cover most devices.
  prefs: []
  type: TYPE_NORMAL
- en: In each statement, we call the `.mediaMixin` mixin and pass to it the desired
    background, content (to describe which breakpoint we are using), width of the
    `<section>` containing the content, and font size. Less compiles each instance
    into a valid CSS rule, which is then interpreted by the browser as appropriate.
    We will take a more in-depth look at using `@media` in [Chapter 8](part0074_split_000.html#page
    "Chapter 8. Media Queries with Less"), *Media Queries with Less*.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have Firefox installed, try pressing *Ctrl* + *Shift* + *M* to activate
    the Responsive Design Mode when viewing this demo—it shows off the demo to a great
    effect!
  prefs: []
  type: TYPE_NORMAL
- en: We've almost come to the end of our journey through using fonts with Less; before
    we move on, let's take a moment to have a little bit of relief and see some of
    the effects you can create when using Less.
  prefs: []
  type: TYPE_NORMAL
- en: Creating special effects using Less
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The beauty of Less is that if you've created valid Less code, it will compile
    to valid CSS—this means we can use it to great effect to produce some interesting
    effects when working with fonts.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you spend a little time searching on the Internet for CSS3-type effects,
    you will no doubt come across some good examples—to show you what I mean, let''s
    take a moment to try reworking two effects using Less: letterpress and emboss.
    For this demo, we''ll use a copy of the `weights.html` page we created earlier
    in this chapter, and alter the title to give it some more emphasis.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by opening up a copy of `weights.html`, which we used in the previous
    demo, and saving it again as `sfx.html`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open up a copy of `weights.less` and add the mixins as highlighted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The mixins won''t be used unless we call them from our Less statements; so,
    go ahead and modify the `h1` block as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file as `sfx.less`. If you preview the results in a browser, you should
    see that the title has more emphasis, as shown in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating special effects using Less](img/00072.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The great thing about Less is that we can easily apply a similar effect to any
    text—all it takes is a little care and planning.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we've used `text-shadow` and `box-shadow`, to which we've passed
    the right combination of values to produce the letterpress and emboss effects
    used in the title. It is worth running the demo for this example to see the effect
    in full color—reproducing it in print doesn't quite do it justice!
  prefs: []
  type: TYPE_NORMAL
- en: It should not be used as an excuse to laden your sites with lots of different
    text effects—this will more likely put your visitors off. With a little care,
    text effects such as the two we've used here can add real emphasis to our page,
    without the use of images.
  prefs: []
  type: TYPE_NORMAL
- en: Taking effects further
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Wait—surely, we don''t need to do anything more, except plan which effects
    we''re going to use, right? Wrong, here''s where the planning comes in: if we''re
    careful about choosing any external mixin libraries we use, we can save ourselves
    even more work.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, we used `text-shadow` here to produce the letterpress example;
    this is available in at least one external mixin library, namely LESS Elements
    (which we introduced in [Chapter 6](part0057_split_000.html#page "Chapter 6. Migrating
    Your Site to Less"), *Migrating Your Site to Less*), and is available at [http://www.lesselements.com](http://www.lesselements.com).
  prefs: []
  type: TYPE_NORMAL
- en: Assuming that you are already using LESS Elements in your project, all we need
    to do is include our calling statement—the mixin will already be part of the LESS
    Elements library. Yes, while it means that we don't necessarily reduce the overall
    code in our project, it does mean we have less to write, which must be a good
    thing!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Phew, what a tour! We covered a lot of content on using fonts when working with
    Less; let's take a moment to recap what we have learned in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We began our journey by learning how to create a simple mixin that helps with
    setting the font family and color to use; we then saw how we could extend the
    mixin to store our font choices as variables. Next, we explored how to use `@font-face`
    when working with Less, and that this removes any constraint on the fonts we can
    use within our pages.
  prefs: []
  type: TYPE_NORMAL
- en: We also saw how we can use a prebuilt library in our code, which helps save
    time on writing mixins, as they can be referenced from libraries such as LESS
    Hat. We then moved on to take a look at the various means available to manage
    font sizes, including using `rem` and why using `ems` is not always as good as
    it might appear.
  prefs: []
  type: TYPE_NORMAL
- en: We then moved on to take a look at using Less to create the `@media` queries
    as part of responsive design, before rounding up the chapter with a brief look
    at some of the special effects you can create with fonts when using Less.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we're going to explore in more detail, a vital technique
    when building sites for multiple devices—namely, how we can use the `@media` rule
    when working with Less.
  prefs: []
  type: TYPE_NORMAL
