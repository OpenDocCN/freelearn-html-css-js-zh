- en: Chapter 7. Manipulating Fonts with Less
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。使用Less操作字体
- en: We explored how to use the various elements of Less, created a basic page to
    use Less, and covered how to migrate a site to use Less….so, what's next?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们探讨了如何使用Less的各种元素，创建了一个基本的页面来使用Less，并介绍了如何将网站迁移到使用Less……那么接下来是什么？
- en: Ah yes, working with text or to be more specific, fonts!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，是的，处理文本或更具体地说，字体！
- en: It goes without saying that content is king on any website—part of achieving
    the right impact is the careful selection of fonts that should be used on your
    site. We wouldn't use a script-based font if we were designing a news site, as
    the text should be clean and easy to read. However, a script font would be perfect
    to represent the flowing lines associated with dresses sold at a dressmaker's
    outfit.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何网站上，内容都是王——实现正确影响的一部分是仔细选择应在您的网站上使用的字体。如果我们正在设计一个新闻网站，我们不会使用基于脚本的字体，因为文本应该是清晰易读的。然而，对于代表裁缝店出售的连衣裙的流动线条，脚本字体将是完美的。
- en: 'It''s all about selecting the right style; Less is perfect to help us manage
    the styles, colors, and sizes of any font we decide to use in our pages. Throughout
    this chapter, you''ll see how you can use some simple principles to make managing
    fonts a cinch with Less. We will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都关乎选择正确的样式；Less完美地帮助我们管理页面中决定使用的任何字体的样式、颜色和大小。在本章中，您将看到如何使用一些简单的原则，让Less轻松管理字体。我们将涵盖以下主题：
- en: Creating font mixins
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建字体混合
- en: Using variables to determine sizes dynamically
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用变量动态确定大小
- en: Using prebuilt libraries
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用预构建库
- en: Catering for the `@media` and `@font-face` support in Less
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持Less中的`@media`和`@font-face`
- en: Are you ready to have some fun with fonts? Let's get started!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你准备好享受字体带来的乐趣了吗？让我们开始吧！
- en: Creating simple font mixins
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建简单的字体混合
- en: 'The key to working with fonts is to start simple and then build it up—there
    is no better place to start than to create a simple mixin in order to manage attributes
    such as font names. Let''s create a simple example where we can see this in action;
    here''s what our mixin will produce:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 处理字体的关键是先从简单开始，然后逐步构建——没有比创建一个简单的混合来管理如字体名称这样的属性更好的起点了。让我们创建一个简单的例子，看看它是如何发挥作用的；以下是我们的混合将生成的内容：
- en: '![Creating simple font mixins](img/00065.jpeg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![创建简单的字体混合](img/00065.jpeg)'
- en: 'Okay, let''s start creating our mixin; we''ll begin by preparing the markup
    for our demo:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，让我们开始创建我们的混合；我们将从为我们的演示准备标记开始：
- en: 'Open a copy of the `project.html` file we created in [Chapter 3](part0031_split_000.html#page
    "Chapter 3. Getting Started with Less"), *Getting Started with Less*, and then
    modify it as shown:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们在[第3章](part0031_split_000.html#page "第3章。使用Less入门")中创建的`project.html`文件副本，然后按照以下方式修改它：
- en: '[PRE0]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, add the following markup to the `<body>` section:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将以下标记添加到`<body>`部分：
- en: '[PRE1]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Save the file as `basicfonts.html`. In a separate file, add the following Less
    styles:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为`basicfonts.html`。在另一个文件中，添加以下Less样式：
- en: '[PRE2]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Save this as `basicfonts.less`. If you preview the results in a browser, you
    will see the six statements appear in decreasing font sizes.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其保存为`basicfonts.less`。如果您在浏览器中预览结果，您将看到六个语句以递减的字体大小出现。
- en: 'So, let''s take a moment to consider what''s happened here: we created a simple
    mixin that replaced `.fontfamily` with `''Kite One'', Arial, sans-serif;` as the
    font family for the statements on the page. Once the Less file has been compiled,
    each `H` style will use Kite One as the base font (in various sizes), falling
    back to use Arial or sans-serif, if Kite One is not available.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们花点时间考虑一下这里发生了什么：我们创建了一个简单的混合，将`.fontfamily`替换为`'Kite One', Arial, sans-serif;`作为页面语句的字体族。一旦Less文件被编译，每个`H`样式都将使用Kite
    One作为基本字体（以各种大小），如果Kite One不可用，则回退到使用Arial或sans-serif。
- en: Extending the mixin
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展混合
- en: In the preceding instance, we could stop here—after all, the mixin we've produced
    works perfectly well. However, it's not the best we can do; if we create similar
    mixins throughout our code, it will soon become a real handful to ensure that
    all are updated, should the font names need to change.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们可以在这里停止——毕竟，我们创建的混合工作得很好。然而，这并不是我们能做的最好的；如果我们在整个代码中创建类似的混合，那么如果字体名称需要更改，确保所有混合都更新将很快变得非常困难。
- en: 'Instead, we can make a simple change and use a variable name. To see what this
    means, open `basicfonts.less` and then add these two lines at the start:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们可以进行一个简单的更改并使用变量名称。为了了解这意味着什么，打开`basicfonts.less`并在开头添加这两行：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You might ask, why make this kind of a change? The answer is easy: this reduces
    the number of instances where the code has to be updated if a change is made.
    If you change the fonts being referenced as part of the `@font-family-sans-serif`
    variable, then Less will automatically take care of updating the code—meaning,
    one less job to do! Here, we only needed to change one instance; had there been
    many instances in our code, then Less would have updated them automatically at
    the point of compiling our code.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问，为什么要进行这种改动？答案很简单：这减少了代码需要更新的实例数量。如果你更改了作为`@font-family-sans-serif`变量一部分引用的字体，那么Less会自动处理代码的更新——这意味着又少了一项工作要做！在这里，我们只需要更改一个实例；如果我们的代码中有许多实例，那么在编译我们的代码时，Less会自动更新它们。
- en: Let's move on and turn our attention to changing the size of the fonts that
    we use—after all, things would be boring if everything was of the same size, right?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续前进，把注意力转向更改我们使用的字体大小——毕竟，如果所有东西都是同一大小，那就太无聊了，对吧？
- en: Using @font-face with Less
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Less中的@font-face
- en: A downside of using fonts in web pages is that they must exist on your end user's
    PC or laptop. Naturally, with the mix of PC, laptop, and mobile devices now available
    in the market, it would be almost impossible to guarantee that the font will exist!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在网页中使用字体的一个缺点是，它们必须存在于你的最终用户个人电脑或笔记本电脑上。自然地，随着市场上现在可用的PC、笔记本电脑和移动设备的混合，几乎不可能保证字体存在！
- en: I say impossible; there are fonts that we can use on a PC or laptop, such as
    Arial, Times New Roman, or Verdana; they are not bad fonts, but they are overused
    and not particularly special. We could, of course, use an external service, such
    as Google Fonts—as we did in the *Creating simple font mixins* section earlier
    in this chapter.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我说不可能；我们可以在PC或笔记本电脑上使用一些字体，例如Arial、Times New Roman或Verdana；它们不是坏字体，但它们被过度使用，并不特别。当然，我们可以使用外部服务，例如Google
    Fonts——就像我们在本章早些时候的*创建简单的字体混合*部分所做的那样。
- en: However, we can do better than this by using `@font-face` to embed any font
    in our pages. I say any, but the license for the font must allow embedding in
    a page. Thankfully, if we use a site such as Font Squirrel (as we will do in the
    next exercise), we can easily check and eliminate any fonts that fall outside
    this criteria, when choosing a font.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们可以通过使用`@font-face`将任何字体嵌入到我们的页面中做得更好。我说的是任何字体，但该字体的许可证必须允许在页面中嵌入。幸运的是，如果我们使用像Font
    Squirrel（我们将在下一个练习中使用）这样的网站，我们可以在选择字体时轻松检查并消除任何不符合这一标准的字体。
- en: Enough of the talking; let's turn our attention to using `@font-face` so that
    we can see how it works. We're going to use it in a very simple demo; while it
    might not show much, it perfectly illustrates how you can use `@font-face` with
    Less.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 谈话到此为止；让我们把注意力转向使用`@font-face`，这样我们就可以看到它是如何工作的。我们将在一个非常简单的演示中使用它；虽然它可能不会展示很多，但它完美地说明了如何使用Less与`@font-face`一起使用。
- en: Downloading the font files
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载字体文件
- en: 'Before we get stuck in with writing code, we need to download an appropriate
    font—after all, using something such as Arial or Times New Roman won''t do the
    demo justice! Perform the following steps:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写代码之前，我们需要下载一个合适的字体——毕竟，使用Arial或Times New Roman这样的字体无法使演示公正！请执行以下步骤：
- en: For this demo, we'll use a font from the Font Squirrel site ([http://www.fontsquirrel.com](http://www.fontsquirrel.com)).
    Let's start by browsing to the Font Squirrel site and downloading the PT Sans
    font, which we will use in our demo. We can download it from [http://www.fontsquirrel.com/fonts/PT-Sans](http://www.fontsquirrel.com/fonts/PT-Sans).
    Here, we can also check the details of the license and see the samples of the
    font displayed on the screen.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个演示，我们将从Font Squirrel网站（[http://www.fontsquirrel.com](http://www.fontsquirrel.com)）使用一个字体。让我们首先浏览到Font
    Squirrel网站，下载PT Sans字体，我们将在我们的演示中使用它。我们可以从[http://www.fontsquirrel.com/fonts/PT-Sans](http://www.fontsquirrel.com/fonts/PT-Sans)下载它。在这里，我们还可以检查许可证的详细信息，并查看屏幕上显示的字体的样本。
- en: Click on the **Webfont Kit** tab and then on the **Download @Font-Face Kit**
    button to download the font; save the compressed archive in the project folder
    as `PT-Sans-fontfacekit.zip`.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Webfont Kit**标签，然后点击**Download @Font-Face Kit**按钮下载字体；将压缩归档保存到项目文件夹中，命名为`PT-Sans-fontfacekit.zip`。
- en: For now, open up the `ptsans_regular_macroman` folder, extract the four Webfont
    files from within, and place them in a subfolder called `fonts` within our project
    folder.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`ptsans_regular_macroman`文件夹，从中提取四个Webfont文件，并将它们放置在我们项目文件夹中的`fonts`子文件夹中。
- en: We will be revisiting this font in the *Handling different weights* section,
    later in this chapter.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章后面的*处理不同权重*部分重新访问这个字体。
- en: Embedding the font into our demo
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将字体嵌入到我们的演示中
- en: 'Okay, now that we have the font files in place, let''s make a start with the
    code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们已经有了字体文件，让我们开始编写代码：
- en: Crank up the editor of your choice—I assume that, for the purpose of this exercise,
    it is Sublime Text.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你选择的编辑器——我假设这个练习的目的使用的是Sublime Text。
- en: 'Open up a copy of `projects.html`, which we created at the start of the book,
    and then modify it as shown:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们在本书开头创建的`projects.html`副本，然后按以下方式修改它：
- en: '[PRE4]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add the following markup to the `<body>` section:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<body>`部分添加以下标记：
- en: '[PRE5]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Save it as `fontface.html`. As we can clearly see, it''s a very simple demo—enough
    to show off how to use `@font-face`—it was never meant to be complicated! It isn''t
    complete without the all-important styling; so, go ahead and add the following
    to a new file, saving it as `fontface.less`:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其保存为`fontface.html`。正如我们清楚地看到的，这是一个非常简单的演示——足以展示如何使用`@font-face`——它从未打算变得复杂！没有所有重要的样式，它就不完整；所以，请继续添加以下内容到一个新文件，并将其保存为`fontface.less`：
- en: '[PRE6]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you preview the results in a browser, you can expect to see something akin
    to this screenshot:![Embedding the font into our demo](img/00066.jpeg)
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你在浏览器中预览结果，你可以期待看到类似以下截图的内容：![将字体嵌入到我们的演示中](img/00066.jpeg)
- en: 'This is a simple way to show you how to use `@font-face` with Less; here, we''ve
    displayed a simple sentence using the PT Sans font, styled with different colors
    for each font size. In each call to the `.font-face` mixin, we pass the name of
    the font and the color to be used; the mixin selects the most appropriate format
    of the font based on the browser being used:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种简单的方法来展示如何使用Less中的`@font-face`；在这里，我们使用PT Sans字体显示了一个简单的句子，并为每个字体大小使用了不同的颜色。在每次调用`.font-face`混合时，我们传递字体名称和要使用的颜色；混合根据所使用的浏览器选择最合适的字体格式：
- en: '| Font format | Browser(s) supporting the format |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 字体格式 | 支持该格式的浏览器 |'
- en: '| --- | --- |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `TTF` | This works in most browsers, except IE and iPhone |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `TTF` | 这在大多数浏览器中工作，除了IE和iPhone |'
- en: '| `EOT` | This is a proprietary font format for use in IE only—it is currently
    not a W3C-recommended standard |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `EOT` | 这是一种仅适用于IE的专有字体格式——目前不是W3C推荐的标准 |'
- en: '| `WOFF` | This is a compressed, emerging standard—currently supported by most
    browsers except Opera Mini |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `WOFF` | 这是一个压缩的、新兴的标准——目前除Opera Mini外，大多数浏览器都支持 |'
- en: '| `SVG` | For use in iPhone/iPad only |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `SVG` | 仅适用于iPhone/iPad |'
- en: If you only have access to one format, then WOFF is the best one to choose;
    otherwise, try to include fonts in all the four formats where possible.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只能访问一种格式，那么WOFF是最好的选择；否则，尽可能包含所有四种格式的字体。
- en: Using a prebuilt library to handle fonts
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用预构建库处理字体
- en: In the previous example, we used `@font-face` to embed a custom font into our
    pages; this removes any constraint on the fonts that we can use, as we can download
    and use suitably licensed fonts. This is great, but we can do better—one of the
    precepts of Less is the DRY principle, which we introduced earlier in the book;
    this is a perfect opportunity to practice what we preach!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，我们使用了`@font-face`将自定义字体嵌入到我们的页面中；这消除了对我们可以使用字体的任何限制，因为我们可以下载并使用适合的授权字体。这很好，但我们还能做得更好——Less的一个原则是DRY（Don't
    Repeat Yourself），我们在本书中较早地介绍了这个原则；这是一个完美的机会来实践我们所宣扬的！
- en: 'Instead of having to create new mixins to handle `@font-face`, we can use a
    prebuilt library to handle the `@font-face` mixin for us. This means we can remove
    a good chunk of our code, as we will use the mixin from the prebuilt library—let''s
    take a look at this in action:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要创建新的混合来处理`@font-face`，我们可以使用预构建库来为我们处理`@font-face`混合。这意味着我们可以删除大量代码，因为我们将从预构建库中使用混合——让我们看看它是如何工作的：
- en: 'Open up a copy of `fontface.html` and alter the link to the Less file, as follows:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`fontface.html`的副本，并按以下方式更改到Less文件的链接：
- en: '[PRE7]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Save this as `fontface-ml.html`. In a new file, add the following code:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其保存为`fontface-ml.html`。在新的文件中，添加以下代码：
- en: '[PRE8]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This will be our Less style sheet—go ahead and save it as `fontface-ml.less`.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将是我们的Less样式表——请将其保存为`fontface-ml.less`。
- en: 'If you preview the results in a browser, you should see little or no difference
    in the output, when compared to the results from the previous exercise. So, what''s
    different? I hear you ask: Why use a prebuilt library?'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在浏览器中预览结果，与上一个练习的结果相比，你应该看到几乎或没有差异。那么，有什么不同呢？我听到你问：为什么使用预构建库？
- en: 'The answer is easy: you''re forgetting the one key principle—when using Less,
    it doesn''t matter how big the library is as Less only incorporates those styles
    that are *directly referenced in the code during compilation*.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 答案很简单：你忘记了其中一个关键原则——当使用 Less 时，不管库有多大，Less 只会包含在编译过程中*直接引用在代码中的*样式。
- en: 'If you take a look through the library, you will see the `@font-face` mixin
    at or around line `1362`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你浏览一下库，你会在大约第 `1362` 行看到 `@font-face` 混合器：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In this instance, this is all that is being used—we can prove this using a
    DOM Inspector, such as Firebug, to view the compiled CSS styles, as shown in this
    screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们只使用了这些内容——我们可以使用 DOM 检查器，例如 Firebug，来查看编译后的 CSS 样式，如本截图所示：
- en: '![Using a prebuilt library to handle fonts](img/00067.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![使用预构建库处理字体](img/00067.jpeg)'
- en: In a small example such as ours, the benefits may not be immediately apparent—once
    this scales up to a much larger site, this will significantly reduce the amount
    of code that you have to write. The key to using a prebuilt library in such an
    instance comes down to choosing the right library—the more we can use from one
    prebuilt library, the better!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们这样的小例子中，好处可能并不立即明显——一旦扩展到更大的网站，这将显著减少你需要编写的代码量。在这种情况下使用预构建库的关键在于选择正确的库——我们能够从预构建库中使用的越多，就越好！
- en: Okay, we now have the right fonts in place; we need to ensure that they can
    be sized as appropriate on our pages. Thankfully, Less contains some useful functionality
    that helps make sizing fonts a cinch—let's take a look at how we can use the library
    to help set font sizes in our pages.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们现在已经放置了正确的字体；我们需要确保它们可以在我们的页面上适当地调整大小。幸运的是，Less 包含一些有用的功能，可以帮助我们轻松地设置字体大小——让我们看看我们如何使用库来帮助我们设置页面上的字体大小。
- en: Using variables to calculate sizes
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用变量计算尺寸
- en: Now that we have chosen the fonts we want to use, we need to ensure that we
    can set the right size for the occasion; thankfully, Less has a number of techniques
    that we can use to create our CSS styles.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经选择了想要使用的字体，我们需要确保我们能够为特定场合设置正确的尺寸；幸运的是，Less 有许多我们可以使用的技巧来创建我们的 CSS 样式。
- en: 'The simplest technique is to assign a font size to a set variable and then
    reference this variable throughout your code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的方法是将字体大小分配给一个集合变量，然后在你的代码中引用这个变量：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Once the initial variable is set, we can then create a range of font sizes
    automatically, by multiplying the base value with a graduated set of numbers:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置了初始变量，我们就可以通过将基本值乘以一系列递增的数字来自动创建一系列字体大小：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When compiled using a precompiler, Less will convert these into valid CSS font
    sizes as shown in this screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用预编译器编译时，Less 会将这些转换为有效的 CSS 字体大小，如本截图所示：
- en: '![Using variables to calculate sizes](img/00068.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![使用变量计算尺寸](img/00068.jpeg)'
- en: This is a very simple way of defining font sizes; if we need to change the font
    sizes, all we need to do is change the value of `@font-size-base` and Less will
    take care of updating the others automatically.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种定义字体大小的非常简单的方法；如果我们需要更改字体大小，我们只需要更改 `@font-size-base` 的值，Less 将自动更新其他值。
- en: Moving with the times
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 顺应时代潮流
- en: Working with pixels is a consistent, reliable way of defining font sizes—if
    you specify a value of `14px` for an element, that element will be sized at `14px`.
    However, for those using IE, sizes do not cascade well when the zoom function
    is used.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用像素来定义字体大小是一种一致、可靠的方法——如果你为一个元素指定了 `14px` 的值，那么该元素的大小将是 `14px`。然而，对于使用 IE 的用户，当使用缩放功能时，大小不会很好地级联。
- en: Instead, we can use the `rem` unit—this maintains its value relative to the
    root (HTML) element, instead of its parent. You might notice that I've skipped
    over the use of `em` as an option. The `em` value is set relative to the parent,
    which means elements will not resize well if your visitor decides to use the zooming
    function in IE!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们可以使用 `rem` 单位——这会保持其值相对于根（HTML）元素，而不是其父元素。你可能注意到我跳过了将 `em` 作为选项的使用。`em`
    值是相对于父元素设置的，这意味着如果您的访客决定在 IE 中使用缩放功能，元素将不会很好地调整大小！
- en: Note
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For a good discussion on the pros and cons of using `rem`, `em`, and `px` as
    font size formats, take a look at an article by Jonathan Snook—although it is
    a few years old, it still contains some useful details—at [http://snook.ca/archives/html_and_css/font-size-with-rem](http://snook.ca/archives/html_and_css/font-size-with-rem).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 关于使用`rem`、`em`和`px`作为字体大小格式的优缺点的好讨论，请参阅Jonathan Snook的文章——尽管它已经几年了，但它仍然包含一些有用的细节——在[http://snook.ca/archives/html_and_css/font-size-with-rem](http://snook.ca/archives/html_and_css/font-size-with-rem)。
- en: Support for `rem` is good within modern browsers, so we just need to provide
    fallback support for any version of IE older than Version 8.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代浏览器中，对`rem`的支持很好，所以我们只需要为版本低于8的任何IE版本提供回退支持。
- en: 'With this in mind, we can create a mixin such as the following to handle sizing
    values using the `rem` values, but with a pixel fallback for those who still need
    to use IE8 or below:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，我们可以创建一个如下所示的mixin来处理使用`rem`值的大小值，但对于仍然需要使用IE8或以下版本的人来说，有一个像素回退：
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'When compiled, this produces the following CSS:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后，这将生成以下CSS：
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Most modern browsers will support the use of the `rem` element without issues
    or will fall back to use the pixel equivalent, if appropriate. Perfect! We now
    have our fonts sized properly; we're good to go, right? Or, are we…?
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现代浏览器将无问题支持使用`rem`元素，或者在适当的情况下回退到使用像素等效值。太好了！我们现在已经正确设置了字体大小；我们可以出发了，对吧？或者，我们是…？
- en: Handling different weights
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理不同的权重
- en: Well, perhaps not; what if we're using multiple variations of a particular font?
    This isn't a problem when using Less—we can reference our font in the normal way
    and use the Less namespacing facility to pick and choose which font styles to
    use for each HTML element. Let's take a look at what this means in practice.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，也许不是；如果我们正在使用特定字体的多个变体呢？在使用Less时这不是问题——我们可以以常规方式引用我们的字体，并使用Less命名空间功能来选择和决定为每个HTML元素使用哪种字体样式。让我们看看这在实践中意味着什么。
- en: Let's start by downloading a copy of the code that accompanies this book; from
    the code download, extract the `weights.html` file that contains our basic text
    and HTML markup. Save a copy of the file within the project folder.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从下载本书附带的代码副本开始；从代码下载中，提取包含我们基本文本和HTML标记的`weights.html`文件。在项目文件夹内保存该文件的副本。
- en: 'Next, go ahead and add the following to a new document, saving it as `weights.less`:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将以下内容添加到一个新文档中，并将其保存为`weights.less`：
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you preview the results in a browser, you will see something akin to this
    screenshot:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在一个浏览器中预览结果，你会看到类似于以下截图的内容：
- en: '![Handling different weights](img/00069.jpeg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![处理不同的权重](img/00069.jpeg)'
- en: Using the Less namespace functionality is a great way to work with fonts. In
    this example, we've touched again on a technique that we covered in [Chapter 5](part0050_split_000.html#page
    "Chapter 5. Inheritance, Overriding, and Nesting in Less"), *Inheritance, Overriding,
    and Nesting in Less*, where we can pick and choose the styles we want Less to
    compile into valid CSS.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Less命名空间功能是处理字体的好方法。在这个例子中，我们又触及了我们之前在[第5章](part0050_split_000.html#page "第5章。Less中的继承、覆盖和嵌套")中介绍的技术，即*Less中的继承、覆盖和嵌套*，在那里我们可以选择和决定Less编译成有效CSS的样式。
- en: In this instance, we're pulling in one of Google's Web Fonts to create three
    styles as a nested block before calling each of them from within `.para1`, `.para2`,
    and `h1`. It's a great technique to help group common styles together—the real
    benefit of using it is to help better organize your Less styles; Less will convert
    the calling styles (that is, `.para1`, `.para2`, and `h1`) into valid CSS.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们正在引入Google的Web字体之一，在调用`.para1`、`.para2`和`h1`之前，创建三个样式作为嵌套块。这是一个帮助将常见样式组合在一起的好技术——使用它的真正好处是帮助更好地组织你的Less样式；Less将调用样式（即`.para1`、`.para2`和`h1`）转换为有效的CSS。
- en: Tip
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Don't forget to include the `()` in your namespace block, to prevent Less from
    compiling it as a valid CSS block.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记在你的命名空间块中包含`()`，以防止Less将其编译为有效的CSS块。
- en: Now that we've covered the basics of using Less to help manage our fonts, let's
    move on and take a look at some more examples of using fonts with Less, beginning
    with creating the `@media` queries for a responsive design.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了使用Less帮助管理字体的基础知识，让我们继续看看使用Less处理字体的更多示例，从创建响应式设计的`@media`查询开始。
- en: Working with @media in Less
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Less中使用@media
- en: In the age of using mobile devices and responsive design, a key element in building
    sites is to allow their use on mobile devices, such as iPads or smartphones.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用移动设备和响应式设计的时代，构建网站的一个关键要素是允许它们在移动设备上使用，例如iPad或智能手机。
- en: 'The key to responsive design is the `@media` rule—we can use this to define
    the style at particular breakpoints or sizes of screen estate for different devices.
    To illustrate how this works when using Less, we''ll use a simplified example
    created by Eric Rasch as a basis for an example web page:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式设计的关键是 `@media` 规则——我们可以使用它来定义特定断点或屏幕状态大小的样式，以适应不同的设备。为了说明使用Less时它是如何工作的，我们将使用Eric
    Rasch创建的简化示例作为示例网页的基础：
- en: '![Working with @media in Less](img/00070.jpeg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![在Less中使用@media](img/00070.jpeg)'
- en: Note
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Eric's original example is available at [http://codepen.io/ericrasch/HzoEx](http://codepen.io/ericrasch/HzoEx).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Eric的原始示例可在 [http://codepen.io/ericrasch/HzoEx](http://codepen.io/ericrasch/HzoEx)
    找到。
- en: For this demonstration, we'll break the convention and use the copies of the
    `media.html` and `media.less` files that are available in the code download that
    accompanies this book. I recommend that you run the demo in a browser that has
    a DOM inspector installed, so you can see the different styles in use as we resize
    the browser.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个演示，我们将打破常规，使用本书附带的代码下载中可用的 `media.html` 和 `media.less` 文件的副本。我建议你在安装了DOM检查器的浏览器中运行这个演示，这样你就可以在我们调整浏览器大小时看到不同的样式。
- en: The `media.html` file contains some simple text generated using the **Lorem
    Ipsum** generator at [http://www.lipsum.com](http://www.lipsum.com); this is to
    represent a standard web page.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`media.html` 文件包含一些使用 **Lorem Ipsum** 生成器在 [http://www.lipsum.com](http://www.lipsum.com)
    生成的简单文本；这是为了表示一个标准网页。'
- en: For reasons of space, we'll work through the important elements of the `media.less`
    file—the rest of the Less markup in this file is purely to make the page look
    attractive.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 由于空间原因，我们将处理 `media.less` 文件中的重要元素——此文件中的其余Less标记纯粹是为了使页面看起来吸引人。
- en: Creating a basic media query
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个基本的媒体查询
- en: 'Before we take a look at the Less file in detail, let''s just remind ourselves
    of how a basic `@media` query looks:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们详细查看Less文件之前，让我们先提醒自己一个基本的 `@media` 查询看起来是什么样子：
- en: '[PRE15]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This translates to setting the background color to `#ccc` (light gray), when
    the screen size is between 520 px and 699 px.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着当屏幕尺寸在520 px和699 px之间时，将背景颜色设置为 `#ccc`（浅灰色）。
- en: Examining the Less file
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查Less文件
- en: This is a simple enough media query, right? Let's apply this to what we have
    in our Less file.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的媒体查询，对吧？让我们将其应用到我们的Less文件中。
- en: 'In `media.less`, we can see several sections—the first section declares a number
    of variables; these include each of the breakpoints we will use, and the font
    sizes that we will apply to the text in our page:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `media.less` 中，我们可以看到几个部分——第一个部分声明了多个变量；这些包括我们将使用的每个断点，以及我们将应用于页面文本中的字体大小：
- en: '[PRE16]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Did you notice the `@tablet` variable and how similar it is to our example query?
    Granted, ours will not be for as large a device as this tablet, but the format
    stays the same, irrespective of the sizes defined.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 你注意到 `@tablet` 变量以及它与我们的示例有多相似吗？诚然，我们的不会用于像这个平板电脑这么大的设备，但格式保持不变，无论定义的尺寸大小如何。
- en: 'Next comes the mixin that will apply styles to each `@media` rule. The `body:after`
    statement changes the label at the top-left of our screen to display which breakpoint
    is being used at a particular screen size. The section rule determines the width
    and font size to be used for the `<section>` block:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是应用样式到每个 `@media` 规则的mixin。`body:after` 语句将屏幕左上角的标签更改为显示特定屏幕尺寸正在使用的断点。部分规则确定用于
    `<section>` 块的宽度和字体大小：
- en: '[PRE17]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We finish with the most important part—this ties together all of the mixins
    and variables we''ve defined to arrive at the `@media` CSS rules we will have
    in our compiled style sheet:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以最重要的部分结束——这将我们定义的所有mixin和变量结合起来，以到达我们编译样式表中将要有的 `@media` CSS规则：
- en: '[PRE18]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If we run the example from the code download and resize the screen to its maximum
    (that is, greater than `1129px` for this example), we can see that the breakpoint
    in use is **desktop xl**:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行代码下载中的示例，并将屏幕调整到最大尺寸（即，对于此示例，大于 `1129px`），我们可以看到正在使用的断点为 **桌面xl**：
- en: '![Examining the Less file](img/00071.jpeg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![检查Less文件](img/00071.jpeg)'
- en: How does our example work? It's easy; we've used a combination of variables
    and a mixin to reproduce the code required for each `@media` query. Although we
    can change each breakpoint to match those devices we want to cater for, the ranges
    used here should cover most devices.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的例子是如何工作的？很简单；我们使用变量和混合器的组合来重现每个 `@media` 查询所需的代码。虽然我们可以更改每个断点以匹配我们想要支持的设备，但这里使用的范围应该覆盖大多数设备。
- en: In each statement, we call the `.mediaMixin` mixin and pass to it the desired
    background, content (to describe which breakpoint we are using), width of the
    `<section>` containing the content, and font size. Less compiles each instance
    into a valid CSS rule, which is then interpreted by the browser as appropriate.
    We will take a more in-depth look at using `@media` in [Chapter 8](part0074_split_000.html#page
    "Chapter 8. Media Queries with Less"), *Media Queries with Less*.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个语句中，我们调用 `.mediaMixin` 混合器，并将其传递所需的背景、内容（描述我们正在使用的断点）、包含内容的 `<section>` 的宽度和字体大小。Less
    将每个实例编译成有效的 CSS 规则，然后浏览器将其解释为适当的规则。我们将在第 8 章 [Media Queries with Less](part0074_split_000.html#page
    "第 8 章。使用 Less 的媒体查询") 中更深入地探讨使用 `@media`。
- en: Tip
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you have Firefox installed, try pressing *Ctrl* + *Shift* + *M* to activate
    the Responsive Design Mode when viewing this demo—it shows off the demo to a great
    effect!
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已安装 Firefox，尝试在查看此演示时按 *Ctrl* + *Shift* + *M* 激活响应式设计模式——它将演示效果展示得非常出色！
- en: We've almost come to the end of our journey through using fonts with Less; before
    we move on, let's take a moment to have a little bit of relief and see some of
    the effects you can create when using Less.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎完成了使用 Less 处理字体的旅程；在我们继续之前，让我们稍微放松一下，看看使用 Less 可以创建的一些效果。
- en: Creating special effects using Less
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Less 创建特殊效果
- en: The beauty of Less is that if you've created valid Less code, it will compile
    to valid CSS—this means we can use it to great effect to produce some interesting
    effects when working with fonts.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Less 的美妙之处在于，如果您创建了有效的 Less 代码，它将编译成有效的 CSS——这意味着我们可以用它产生一些有趣的效果，尤其是在处理字体时。
- en: 'If you spend a little time searching on the Internet for CSS3-type effects,
    you will no doubt come across some good examples—to show you what I mean, let''s
    take a moment to try reworking two effects using Less: letterpress and emboss.
    For this demo, we''ll use a copy of the `weights.html` page we created earlier
    in this chapter, and alter the title to give it some more emphasis.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在互联网上花点时间搜索 CSS3 类型的效果，您无疑会遇到一些很好的例子——为了说明我的意思，让我们花点时间尝试使用 Less 重新制作两个效果：letterpress
    和 emboss。为此演示，我们将使用本章前面创建的 `weights.html` 页面的副本，并将标题修改得更有强调性。
- en: Let's start by opening up a copy of `weights.html`, which we used in the previous
    demo, and saving it again as `sfx.html`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从打开之前演示中使用的 `weights.html` 副本并再次将其保存为 `sfx.html` 开始。
- en: 'Next, open up a copy of `weights.less` and add the mixins as highlighted:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开 `weights.less` 的副本，并添加如下高亮显示的混合器：
- en: '[PRE19]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The mixins won''t be used unless we call them from our Less statements; so,
    go ahead and modify the `h1` block as shown:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 混合器只有在从我们的 Less 语句中调用它们时才会被使用；所以，请按照如下所示修改 `h1` 块：
- en: '[PRE20]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Save the file as `sfx.less`. If you preview the results in a browser, you should
    see that the title has more emphasis, as shown in this screenshot:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件保存为 `sfx.less`。如果您在浏览器中预览结果，应该会看到标题的强调性更强，如截图所示：
- en: '![Creating special effects using Less](img/00072.jpeg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Less 创建特殊效果](img/00072.jpeg)'
- en: The great thing about Less is that we can easily apply a similar effect to any
    text—all it takes is a little care and planning.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Less 的好处之一是我们可以轻松地将类似的效果应用到任何文本上——这只需要一点小心和计划。
- en: In this example, we've used `text-shadow` and `box-shadow`, to which we've passed
    the right combination of values to produce the letterpress and emboss effects
    used in the title. It is worth running the demo for this example to see the effect
    in full color—reproducing it in print doesn't quite do it justice!
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用了 `text-shadow` 和 `box-shadow`，并传递了正确的值组合来产生标题中使用的 letterpress 和
    emboss 效果。值得运行这个示例的演示来看到全色的效果——在打印中并不能完全体现其效果！
- en: It should not be used as an excuse to laden your sites with lots of different
    text effects—this will more likely put your visitors off. With a little care,
    text effects such as the two we've used here can add real emphasis to our page,
    without the use of images.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 不应该将其用作在网站上添加大量不同文本效果的借口——这很可能会让您的访客感到厌烦。只要稍加注意，像我们这里使用的两种效果这样的文本效果就可以在我们的页面上添加真正的强调，而不需要使用图像。
- en: Taking effects further
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步探索效果
- en: 'Wait—surely, we don''t need to do anything more, except plan which effects
    we''re going to use, right? Wrong, here''s where the planning comes in: if we''re
    careful about choosing any external mixin libraries we use, we can save ourselves
    even more work.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 等等——我们肯定不需要做更多的事情，除了计划我们将要使用的效果，对吧？错了，这就是规划介入的地方：如果我们仔细选择我们使用的任何外部混入函数库，我们可以为自己节省更多的工作。
- en: For example, we used `text-shadow` here to produce the letterpress example;
    this is available in at least one external mixin library, namely LESS Elements
    (which we introduced in [Chapter 6](part0057_split_000.html#page "Chapter 6. Migrating
    Your Site to Less"), *Migrating Your Site to Less*), and is available at [http://www.lesselements.com](http://www.lesselements.com).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们在这里使用了 `text-shadow` 来产生压印示例；这至少在一个外部混入函数库中可用，即 LESS Elements（我们在第 6 章[迁移您的网站到
    Less](part0057_split_000.html#page "第 6 章。迁移您的网站到 Less")中介绍过），可在 [http://www.lesselements.com](http://www.lesselements.com)
    获取。
- en: Assuming that you are already using LESS Elements in your project, all we need
    to do is include our calling statement—the mixin will already be part of the LESS
    Elements library. Yes, while it means that we don't necessarily reduce the overall
    code in our project, it does mean we have less to write, which must be a good
    thing!
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您已经在项目中使用了 LESS Elements，我们所需做的只是包含我们的调用语句——混入函数已经成为了 LESS Elements 库的一部分。是的，虽然这意味着我们不一定能减少项目中的整体代码量，但它确实意味着我们需要编写的代码更少，这肯定是一件好事！
- en: Summary
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Phew, what a tour! We covered a lot of content on using fonts when working with
    Less; let's take a moment to recap what we have learned in this chapter.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，真是一次旅行！我们涵盖了在使用 Less 处理字体时的大量内容；让我们花点时间回顾一下本章我们学到了什么。
- en: We began our journey by learning how to create a simple mixin that helps with
    setting the font family and color to use; we then saw how we could extend the
    mixin to store our font choices as variables. Next, we explored how to use `@font-face`
    when working with Less, and that this removes any constraint on the fonts we can
    use within our pages.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始学习如何创建一个简单的混入函数，帮助设置要使用的字体家族和颜色；然后我们看到了如何扩展混入函数以将我们的字体选择存储为变量。接下来，我们探讨了在使用
    Less 时如何使用 `@font-face`，以及这消除了我们在页面中可以使用字体的任何限制。
- en: We also saw how we can use a prebuilt library in our code, which helps save
    time on writing mixins, as they can be referenced from libraries such as LESS
    Hat. We then moved on to take a look at the various means available to manage
    font sizes, including using `rem` and why using `ems` is not always as good as
    it might appear.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到了我们如何在我们的代码中使用预构建的库，这有助于节省编写混入函数的时间，因为它们可以从像 LESS Hat 这样的库中引用。然后我们转向查看管理字体大小可用的各种方法，包括使用
    `rem` 以及为什么使用 `ems` 并不一定像它看起来那样好。
- en: We then moved on to take a look at using Less to create the `@media` queries
    as part of responsive design, before rounding up the chapter with a brief look
    at some of the special effects you can create with fonts when using Less.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们转向使用 Less 创建 `@media` 查询作为响应式设计的一部分，并在本章结束时简要地查看了一些在使用 Less 时可以创建的特殊字体效果。
- en: In the next chapter, we're going to explore in more detail, a vital technique
    when building sites for multiple devices—namely, how we can use the `@media` rule
    when working with Less.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更详细地探讨在为多个设备构建网站时的一项关键技术——即，如何在使用 Less 时使用 `@media` 规则。
