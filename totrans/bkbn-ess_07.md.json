["```js\nvar VariableTagView = Backbone.View.extend({\n    tagName: function() {\n        if (this.collection) {\n            return 'select';\n        } else {\n            return 'input';\n        }\n    }\n});\n```", "```js\nvar FictionBook = Backbone.Model.extend({\n    // insert logic for fiction books here});\nvar NonFictionBook = Backbone.Model.extend({\n    // insert logic for non-fiction books here});\nvar FictionAndNonFictionBooks = Backbone.Collection.extend({\n    model: function(attributes, options) {\n        if (attributes.isFiction) {\n            return new FictionBook(attributes, options);\n        } else {\n            return new NonFictionBook(attributes, options);\n        }\n    },\n    url: '/book'});\n```", "```js\nvar FictionOrNonFictionBooks = Backbone.Collection.extend({\n    constructor: function(models, options) {\n        if (models[0].isFiction) {\n            options.model = FictionBook;\n        } else {\n            options.model = NonFictionBook;\n        }\n        return Backbone.Collection.apply(models, options);\n    }\n});\n```", "```js\nvar loggingMixin = {\n    startLogging: function() {\n        Logger.startLogging(this);\n    },\n    stopLogging: function() {\n        Logger.stopLogging(this);\n    }\n}\n```", "```js\nvar Book = Backbone.Model.extend({\n    defaults: {currentPage: 1},\n\n    read: function() {\n        // TODO: add logic to read a book here\n    }\n});\n```", "```js\nvar bookPrototype = {\n    defaults: {currentPage: 1},\n\n    read: function() {\n        // TODO: add logic to read a book here\n    }\n};Book = Backbone.Model.extend(bookPrototype);\n```", "```js\nbookPrototype.startLogging = loggingMixin.startLogging;\nbookPrototype.stopLogging = loggingMixin.stopLogging;\n```", "```js\nbookPrototype = {\n    defaults: {currentPage: 1},\n\n    read: function() {\n        // TODO: add logic to read a book here\n    },\n    startLogging: $.noop // don't log this class\n};\n```", "```js\nvar Player = Backbone.Model.extend();\nvar bob = new Player({name: 'Robert', score: 2});\nvar jose = new Player({name: 'Jose', score: 7});\nvar sep = new Player({name: 'Sepehr', score: 4});\nwindow.setInterval(1000, function() {\n    bob.fetch();\n    jose.fetch();\n    sep.fetch();\n});\n```", "```js\nvar Scoreboard = Backbone.View.extend({\n    renderScore: function(player, score) {\n        this.$('input[name=\"' + player + '\"]').html(score);\n    });\n});\nvar scoreboard = new Scoreboard();\nBackbone.on('scoreChange', scoreboard.renderScore, scoreboard);\n```", "```js\nPlayer = Backbone.Model.extend({\n    fetch: function() {\n        var promise = Backbone.Model.prototype.fetch.apply(\n                          this, arguments\n                      );\n        promise.done(function() {\n            if (this.hasChanged('score')) {\n                Backbone.trigger('scoreChange', this.get('name'), \n                                 this.get('score'));\n            }\n        });\n        return promise;\n   }\n});\n```", "```js\n// File #1\n$('#datepicker1').datepicker({changeMonth: true});\n// File #2\n$('#datepicker2').datepicker({changeMonth: true});\n```", "```js\nvar CalendarView = Backbone.View.extend({\n    initialize: function() {\n        this.$el.datepicker({changeMonth: true});\n    }\n});\n```", "```js\n// File #1\nnew CalendarView({el: '#datepicker1'});\n// File #2\nnew CalendarView({el: '#datepicker2'});\n```", "```js\nCalendarView = Backbone.View.extend({\n    initialize: function() {\n        this.$el.datepicker({\n            changeMonth: true,\n                         onClose: _.bind(function() {\n                             this.remove();\n                         }, this)\n        });\n    }\n});\n```"]