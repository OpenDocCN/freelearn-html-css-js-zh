["```js\nvar UserView = Backbone.View.extend({\n  render: function () {\n    var html = \"Backbone.js rocks!\";\n    this.$el.html(html);\n    return this;\n  }\n});\n\n// create an instance\nvar userView = new UserView();\n$('#container').append(userView.render().el);\n```", "```js\nvar UserView = Backbone.View.extend({\n  ...\n  el: '#container'\n});\n\n// render it to document body\nnew UserView.render();\n```", "```js\nvar UserView = Backbone.View.extend({\n    tagName : 'p',\n    id : 'user_details',\n    className : 'user-details',\n    attributes : {\n        'data-name' : 'User Details'\n    }\n});\n```", "```js\n<p data-name=\"User Details\" id=\"user_details\" class=\"user-details\"></p>\n```", "```js\nvar UserView = Backbone.View.extend({\n  html: '<button id=\"btn\">Click me</button>',\n  events: {\n    'click #btn': 'onButtonClick'\n  },\n\n  render: function () {\n    this.$el.html(this.html);\n    return this;\n  },\n\n  onButtonClick: function () {\n    console.log('Button clicked');\n  }\n});\n```", "```js\nvar User = Backbone.Model.extend({});\n\n// UserView definition\nvar UserView = Backbone.View.extend({\n// We will use Underscore template\n  template: _.template('Hello <%= firstName %> <%=lastName %>!'),\n\n  render: function () {\n    if (!this.model) {\n      throw \"Model is not set for this view\";\n    }\n\n    var html = this.template(this.model.toJSON());\n    this.$el.html(html);\n    return this;\n  }\n});\n\nvar userView = new UserView({\n// Set a model for this view\n  model: new User({\n    firstName: 'Payel',\n    lastName: 'Pal'\n  })\n});\n\n$('#container').append(userView.render().el);\n```", "```js\ninitialize: function () {\n  this.listenTo(this.model, 'change', this.render);\n  // Or, this.model.on('change', this.render, this);\n}\n\n...\n// Change an attribute of the model\nuserView.model.set('lastName', 'Dey');\n```", "```js\n...\n\ntemplate : _.template('<p><% name %></p><p><%= address %></p>'),\n\ninitialize: function() {\n  this.listenTo(this.model, 'change:address', this.showChangedAddress);\n},\n\nshowChangedAddress: function () {\n  // we are using the same main view template here though \n  // another subtemplate for only the address part can \n  // anyway be used here\n  var html = this.template(this.model.toJSON()),\n\n    // Selector of the element whose value needs to be updated\n    addressElSelector = \".address\",\n\n    // Get only the element with \"address\" class\n    addressElement = $(addressElSelector, html);  \n\n  // Replace only the contents of the .address element\n  this.$(addressElSelector).replaceWith(addressElement);\n}\n\n...\n```", "```js\nvar User = Backbone.Model.extend();\n\n// Users collection\nvar Users = Backbone.Collection.extend({\n  model: User\n});\n\n// Add some data in the collection\nvar users = new Users([{\n  id: 1,\n  name: 'John Doe'\n}, {\n  id: 2,\n  name: 'Dan Smith'\n}]);\n```", "```js\nvar UsersView = Backbone.View.extend({\n  tagName: 'ul',\n  render: function () {\n    var html = '';\n\n    // Iterate over the collection and \n    // add each name as a list item\n    this.collection.each(function (model) {\n      html += '<li>' + model.get('name') + '</li>';\n    }, this);\n\n    this.$el.html(html);\n    return this;\n  }\n});\n\nvar usersView = new UsersView({\n  // add the collection instance\n  collection: users\n});\n\n// Display the view\n$(document.body).append(usersView.render().el);\n```", "```js\nhtml += '<li data-id=\"' + model.get('id) + '\">' + model.get('name') + '</li>';\n```", "```js\n...\nevents: {\n  'click li': 'showUserName'\n},\n\nshowUserName: function (e) {\n  var userId = $(e.target).attr('data-id'),\n    user = this.collection.get(userId);\n\n  if (!user) {\n    return;\n  }\n\n  console.log('Clicked user\\'s name =', user.get('name'));\n}\n...\n```", "```js\nvar UserItemView = Backbone.View.extend({\n  tagName: 'li',\n  template: _.template( '<%= name %>'),\n  events: {\n    'click': 'showUserName'\n  },\n  render: function () {\n    var html = this.template(this.model.toJSON());\n    this.$el.html(html);\n    return this;\n  },\n\n  showUserName: function () {\n    console.log('Clicked user\\'s name =', this.model.get('name'));\n  }\n});\n```", "```js\nrender: function () {\n  var userItemView;\n\n  // clean up the view first \n  this.$el.empty();\n\n  // iterate over the collection and add each name as a list item\n  this.collection.each(function (model) {\n    userItemView = new UserItemView({\n      model: model\n    });\n\n    this.$el.append(userItemView.render().el);\n  }, this);\n\n  return this;\n}\n```", "```js\nrender: function () {\n  // create a document fragment\n  var fragment = document.createDocumentFragment();\n\n  this.collection.each(function (model) {\n    // add each view element to the document fragment\n    fragment.appendChild(new UserItemView({\n      model: model\n    }).render().el);\n  }, this);\n\n  // append the fragment to the DOM\n  this.$el.html(fragment);\n  return this;\n}\n```", "```js\nvar ParentView = Backbone.View.extend({\n  initialize: function () {\n    this.subViews = []; \n\n   // Initializing the child views\n    this.subViews.push(new ChildView(), new ChildView()];\n  },\n\n  render: function () {\n    this.$el.html(this.template);\n\n  // Render each child view\n    _(this.subViews).each(function (view) {\n      this.$el.append(view.render().el);\n    }, this);\n\n    return this;\n  }\n});\n```", "```js\nvar Company = Backbone.View.extend({\n  ...\n  remove: function () {\n    _(this.subViews).each(function (view) {\n      this.stopeListening(view);\n      view.remove();\n    }, this);\n\n    Backbone.View.prototype.remove.call(this, arguments);\n  }\n});\n```", "```js\nremove: function () {Â \n  this.unbind(); // Unbind all local event bindings\n\n  // Unbind reference all such items\n  this.model.unbind('change', this.render, this);  \n\n  // Remove this view\n  Backbone.View.prototype.remove.call(this, arguments);\n\n  // Delete the jQuery wrapped object variable\n  delete this.$el;  \n\n  // Delete the variable reference to this node\n  delete this.el; \n}\n```", "```js\n<script type=\"text/template\" id=\"tpl_user_details\">\n  <h3> <%= name %> </h3>\n  <p><%= about %></p>\n</script>\n```", "```js\nvar userDetailsTpl = $('#tpl_user_details').html();\n```", "```js\n_.templateSettings = {\n  interpolate: /\\{\\{(.+?)\\}\\}/g\n};\n```", "```js\nvar TplManager = {\n  templates: {}\n};\n\nTplManager.templates.userProfile = [\n  '<h3> <%= name %> </h3>',\n  '<img src=\"img/>\"',\n  '<p>Address : <%= address %></p>'\n].join('\\n');\n\nTplManager.templates.userLogin = [\n  '<ul>',\n  '<li>Username: <input type=\"text\" /></li>',\n  '<li>Password: <input type=\"password\" /></li>',\n  '</ul>'\n].join('\\n');\n```", "```js\nvar TplManager = {\n  templates: {},\n  cachedTemplates: {},\n\n  // Returns compiled template\n  getCachedTemplate: function (tplName) {\n    // If compiled template already exists, return that\n    if (this.cachedTemplates.hasOwnProperty(tplName)) {\n      return this.cachedTemplates[tplName];\n    }\n\n    if (this.templates.hasOwnProperty(tplName)) {\n      // Compile and store the template functions \n      this.cachedTemplates[tplName] = _.template(this.templates[tplName]);\n    }\n\n    return this.cachedTemplates[tplName];\n  }\n};\nTplManager.getCachedTemplate('userProfile'); \n```", "```js\n<h3>\n  <%= companyName %>\n</h3>\n<ul>\n  <% employees.forEach(function (employee) { %>\n    <li>\n      <%= employee.name %>\n    </li>\n  <% }); %>\n</ul>\n```", "```js\n<li> <%= name %> </li>\n```", "```js\n<% if(typeof(avatar) === 'undefined') %>\n  <img src=\"img/<%= avatar %>\" />\n<% } else { %>\n  <img src=\"img/default_avatar.png\" />\n<% } %>\n```", "```js\n// A cleaner template\nvar tplString = '<img src=\"img/<%= getAvatar(avatar) %>\" />'; \nvar data = this.model.getJSON();\nvar html = _.template(tplString, _.extend(data, {\n  // A template helper function to be merged with data\n  getAvatar: function (avatar) {\n    return avatar || \"images/default_avatar.png\";\n  }\n}));\n```", "```js\nthis.listenTo(this.model, 'change', this.render);\n```", "```js\nvar UserItemView = Marionette.ItemView.extend({\n  tagName: 'li',\n  template: _.template('<%= firstName %> <%= lastName %>'),\n\n  onRender: function () {\n    // After render functionality here\n  },\n\n  onClose: function () {\n    // Do some cleanup here\n  }\n});\n```", "```js\nvar userItemView = new UserItemView({\n  model: new Backbone.Model({\n    firstName: 'Sudipta',\n    lastName: 'Kundu'\n  })\n});\n\n$(document.body).append(userItemView.render().el);\n\n// Close and destroy the view after 2 seconds\nsetTimeout(function () {\n  // userItemView.close();\n}, 2000); \n```", "```js\n  // Serialize the model or collection for the view. If a model is\n  // found, '.toJSON()' is called. If a collection is found,\n '// .toJSON()'is also called, but is used to populate an 'items'\n  // array in the resulting data. If both are found, defaults to \n  // the model. You can override the 'serializeData' method in your \n  // own view definition, to provide custom serialization for your \n  // view's data.\n  serializeData: function () {\n    var data = {};\n\n    if (this.model) {\n      data = this.model.toJSON();\n    } else if (this.collection) {\n      data = {\n        items: this.collection.toJSON()\n      };\n    }\n\n    return data;\n  }\n```", "```js\n// Create a collection view and pass the item view class\nvar UsersView = Marionette.CollectionView.extend({\n    tagName: 'ul',\n    itemView: UserItemView\n});\n\nvar usersView = new UsersView({\n    collection: new Backbone.Collection([{\n        firstName: 'Sandip',\n        lastName: 'Maity'\n    }, {\n        firstName: 'Debopam',\n        lastName: 'Biswas'\n    }])\n});\n\n$(document.body).append(usersView.render().el); \n```", "```js\n    appendHtml: function (galleryView, imageView, index) {\n      // Put the imageView i.e. ItemView instances \n      // inside element with class \"box-result\"\n      galleryView.$(\".box-result\").append(imageView.el);\n    }\n    ```", "```js\n// Company model\nvar Company = Backbone.Model.extend({\n  defaults: {\n    name: '',\n    specialty: ''\n  }\n});\n```", "```js\n// Employee model\nvar Employee = Backbone.Model.extend({\n  defaults: {\n    name: ''\n  }\n});\n```", "```js\n// Employees collection\nvar Employees = Backbone.Collection.extend({\n  model: Employee\n});\n```", "```js\n// Create an ItemView instance for the child items\nvar EmployeeItemView = Marionette.ItemView.extend({\n  tagName: 'li',\n  template: _.template('<%= name %>')\n});\n```", "```js\n// Create a collection view and pass the item view class\nvar CompanyView = Marionette.CompositeView.extend({\n  template: _.template(['<h2><%= name %> </h2>',\n    '<span><%= specialty %> </span>',\n    '<ul class=\"employees\"></ul>'\n  ].join('')),\n  itemView: EmployeeItemView,\n  itemViewContainer: '.employees',\n\n  // Add a company details to this view's model and collection\n  addCompany: function (data) {\n    if (!data) return;\n\n    if (data.employees) {\n      this.collection = new Employees(data.employees);\n    }\n\n    delete data.employees;\n    this.model = new Company(data);\n  }\n});\n```", "```js\nvar companyView = new CompanyView();\n\n// Add a company details\ncompanyView.addCompany({\n  name: 'Innofied',\n  specialty: 'Team of JavaScript specialists',\n  employees: [{\n    name: 'Swarnendu De'\n  }, {\n    name: 'Sandip Saha'\n  }]\n});\n\n$(document.body).append(companyView.render().el);\n```", "```js\n// Change template delimiter to Mustache type\n_.templateSettings = {\n  interpolate: /\\{\\{(.+?)\\}\\}/g\n};\n\n// User Model\nvar User = Backbone.Model.extend({\n  defaults: {\n    avatar: '',\n    name: '',\n    email: '',\n    phone: '',\n    twitter: ''\n  }\n});\n\n// Users collection\nvar Users = Backbone.Collection.extend({\n  model: User\n});\n```", "```js\n<!â- Layout manager template -->\n<script type=\"text/template\" id=\"tpl_main_content\">\n  <div id=\"main_content\">\n    <div class=\"user-list\"></div>\n    <div class=\"user-details\"></div>\n  </div>\n</script>\n\n<!â- User item template -->\n<script type=\"text/template\" id=\"tpl_user_item\">\n  <a class=\"name\" href=\"#\">{{name}}</a>\n</script>\n\n<!â- User details template -->\n<script type=\"text/template\" id=\"tpl_user_details\">\n  <div class=\"avatar\"><img src=\"img/{{avatar}}\" /></div>\n    <ul>\n      <li><strong>Name:</strong>  {{name}}</li>\n      <li><strong>Email:</strong>  {{email}}</li>\n      <li><strong>Phone:</strong>  {{phone}}</li>\n      <li><strong>Twitter:</strong>  {{twitter}}</li>\n    </ul>\n</script>\n```", "```js\n// UserItem sub view\nvar UserItem = Backbone.View.extend({\n  tagName: 'li',\n  template: '#tpl_user_item',\n  manage: true,\n\n  // LayoutManager uses serialize method to apply the data into template\n  serialize: function () {\n    return this.model.toJSON();\n  }\n});\n```", "```js\n// User List view\nvar UserList = Backbone.View.extend({\n  tagName: 'ul',\n  className: 'nav nav-tabs nav-stacked',\n  manage: true,\n\n  // Before rendering the list, \n  //insert all the child list items into it\n  beforeRender: function () {\n    this.collection.each(function (model) {\n      // insertview method inserts the views \n      // directly inside the parent view\n      this.insertView(new UserItem({\n        model: model\n      }));\n    }, this);\n  }\n});  \n```", "```js\n// Create a collection with some data\nvar users = new Users([{\n  name: 'John Doe',\n  avatar: 'avatar.png',\n  phone: '+88-888-8888',\n  twitter: 'johndoe',\n  email: 'johndoe@example.com'\n}, {\n  name: 'Swarnendu De',\n  avatar: 'avatar.png',\n  phone: '+99-999-9999',\n  twitter: 'swarnendude',\n  email: 'swarnendude@example.com'\n}]);\n\n// Define the main layout\nvar MainLayout = Backbone.Layout.extend({\n  template: \"#tpl_main_content\",\n\n  // Assign the view to specific selectors\n  views: {\n    '.user-list': new UserList({\n      collection: users\n    })\n  }\n});\n```", "```js\n// User Details view\nvar UserDetails = Backbone.View.extend({\n  manage: true,\n  template: '#tpl_user_details',\n\n  serialize: function () {\n    return this.model.toJSON();\n  },\n\n  // Set the selected model \n  setModel: function (model) {\n    if (model) {\n      this.model = model;\n    }\n\n    return this;\n  }\n}); \n```", "```js\nvar UserItem = Backbone.View.extend({\n  ...\n  events: {\n    'click a': 'showDetails'\n  },\n\n  showDetails: function () {\n    // Check Whether details view exists\n    var detailsView = mainLayout.getView('.user-details');\n\n    // If details view doesn't exist, create one, \n    // set the new model and render it\n    if (!detailsView) {\n      mainLayout.setView('.user-details', new UserDetails().setModel(this.model).render());\n    } else {\n      // Set the latest clicked model and re-render\n      detailsView.setModel(this.model).render();\n    }\n  }\n});\n```"]