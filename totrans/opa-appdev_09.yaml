- en: Chapter 9. Building a Chat Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章. 构建聊天应用
- en: We have gone through the basic concepts of Opa and now it's time to build a
    real web application. In this chapter we will build a chat application. The application
    offers one chat room. The users who connect to the application will join the chat
    room automatically and can start discussing immediately. For simplicity, we supply
    a random username when a user joins. The source code for this application can
    be found at [https://github.com/winbomb/opapackt](https://github.com/winbomb/opapackt).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了Opa的基本概念，现在是时候构建一个真正的Web应用了。在本章中，我们将构建一个聊天应用。该应用提供了一个聊天室。连接到应用的用户将自动加入聊天室并可以立即开始讨论。为了简单起见，当用户加入时，我们提供了一个随机用户名。该应用的源代码可以在[https://github.com/winbomb/opapackt](https://github.com/winbomb/opapackt)找到。
- en: 'The following is a screenshot of our chat application:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们聊天应用的截图：
- en: '![Building a Chat Application](img/3749OS_09_01.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![构建聊天应用](img/3749OS_09_01.jpg)'
- en: Creating a project
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建项目
- en: 'To begin developing our chat application, we need to create an Opa project
    using the following Opa command:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始开发我们的聊天应用，我们需要使用以下Opa命令创建一个Opa项目：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This command will create an empty Opa project. Also, it will generate the required
    directories and files automatically with the structure as shown in the following
    screenshot:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将创建一个空白的Opa项目。同时，它将自动生成所需的目录和文件，结构如下所示截图所示：
- en: '![Creating a project](img/3749OS_09_02.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![创建项目](img/3749OS_09_02.jpg)'
- en: 'Let''s have a brief look at what these source code files do:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要看看这些源代码文件的作用：
- en: '`controller.opa`: This file serves as the entry point of the chat application;
    we start the web server in `controller.opa`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`controller.opa`：此文件作为聊天应用的入口点；我们在`controller.opa`中启动了网络服务器。'
- en: '`view.opa`: This file serves as an user interface'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`view.opa`：此文件作为用户界面'
- en: '`model.opa`: This is the model of the chat application; it defines the message,
    network, and the chat room'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model.opa`：这是聊天应用的模式；它定义了消息、网络和聊天室'
- en: '`style.css`: This is an external stylesheet file'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`style.css`：这是一个外部样式表文件'
- en: '`Makefile`: This file is used to build an application'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Makefile`：此文件用于构建应用'
- en: As we do not need database support in the chat application, we can remove `--import-package
    stdlib.database.mongo` from the FLAG option in `Makefile`. Type `make` and `make
    run` to run the empty application.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 由于聊天应用不需要数据库支持，我们可以从`Makefile`中的FLAG选项中删除`--import-package stdlib.database.mongo`。输入`make`和`make
    run`来运行空的应用程序。
- en: Launching the web server
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动网络服务器
- en: Let's begin with `controller.opa`, the entry point of our chat application where
    we launch the web server. We have already discussed the function `Server.start`
    in the *Server module* section of [Chapter 3](ch03.html "Chapter 3. Developing
    Web Applications"), *Developing Web Applications*. In our chat application, we
    will use a handlers group to handle users requests.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`controller.opa`开始，这是我们的聊天应用的入口点，在这里我们启动了网络服务器。我们已经在[第3章](ch03.html "第3章.
    开发Web应用")的*服务器模块*部分讨论了函数`Server.start`，*开发Web应用*。在我们的聊天应用中，我们将使用一个处理器组来处理用户请求。
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: So, what exactly are the arguments that we are passing to the `Server.start`
    function?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们到底传递给`Server.start`函数的参数是什么呢？
- en: 'The line `{resources: @static_resource_direcotry("resources")}` registers a
    resource handler and will serve resource files in the `resources` directory.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '这行代码`{resources: @static_resource_direcotry("resources")}`注册了一个资源处理器，并将为`resources`目录中的资源文件提供服务。'
- en: 'Next, the line `{register: [{css:["/resources/css/style.css"]}]}` registers
    an external CSS file—`style.css`. This permits us to use styles in the `style.css`
    application scope.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，这行代码`{register: [{css:["/resources/css/style.css"]}]}`注册了一个外部CSS文件——`style.css`。这允许我们在`style.css`应用范围内使用样式。'
- en: 'Finally, the line `{title:"Opa Chat", page: View.page}` registers a single
    page handler that will dispatch all other requests to the function `View.page`.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '最后，这行代码`{title:"Opa Chat", page: View.page}`注册了一个单页处理器，它将把所有其他请求分派到函数`View.page`。'
- en: The server uses the default configuration `Server.http` and will run on port
    8080.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器使用默认配置`Server.http`，并将运行在8080端口。
- en: Designing user interface
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计用户界面
- en: When the application starts, all the requests (except requests for resources)
    will be distributed to the function `View.page`, which displays the chat page
    on the browser. Let's take a look at the view part; we define a module named `View`
    in `view.opa`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用启动时，所有请求（除了资源请求）都将被分配到函数`View.page`，该函数在浏览器上显示聊天页面。让我们看看视图部分；我们在`view.opa`中定义了一个名为`View`的模块。
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The module `View` contains functions to display the page on the browser. In
    the first line, `import stdlib.themes.bootstrap.css`, we import Bootstrap styles.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 模块 `View` 包含用于在浏览器上显示页面的函数。在第一行 `import stdlib.themes.bootstrap.css` 中，我们导入
    Bootstrap 样式。
- en: This permits us to use Bootstrap markup in our code, such as `navbar`, `navbar-fix-top`,
    and `btn-primary`. We also registered an external `style.css` file so we can use
    styles in `style.css` such as `conversation` and `footer`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许我们在代码中使用 Bootstrap 标记，例如 `navbar`、`navbar-fix-top` 和 `btn-primary`。我们还注册了一个外部
    `style.css` 文件，这样我们就可以在 `style.css` 中使用样式，如 `conversation` 和 `footer`。
- en: As we can see, this code in the function page follows almost the same syntax
    as HTML. As discussed in the *XHTML* section of [Chapter 3](ch03.html "Chapter 3. Developing
    Web Applications"), *Developing Web Applications*, we can use HTML freely in the
    Opa code, the HTML values having a predefined type `xhtml` in Opa.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，该函数页面中的代码几乎遵循与 HTML 相同的语法。如第 3 章 [XHTML](ch03.html "第 3 章。开发 Web 应用程序")
    中所述，在 [开发 Web 应用程序](ch03.html "第 3 章。开发 Web 应用程序") 一节中讨论过，我们可以在 Opa 代码中自由使用 HTML，HTML
    值在 Opa 中具有预定义的类型 `xhtml`。
- en: Building application logic
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建应用程序逻辑
- en: 'A chat application is all about exchanging messages between users, so we need
    to define a message type. We can find its definition in the first line of `model.opa`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 聊天应用程序完全是关于用户之间交换消息的，因此我们需要定义一个消息类型。我们可以在 `model.opa` 的第一行找到其定义：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It's a very simple type with two fields. The `user` field represents the author
    of the message, and the `text` field represents the content of the message.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个具有两个字段的非常简单的类型。`user` 字段表示消息的作者，而 `text` 字段表示消息的内容。
- en: 'Now that we have the definition of a message, we need a way to pass the messages
    between different clients. As mentioned in [Chapter 5](ch05.html "Chapter 5. Communicating
    between Client and Server"), *Communicating between Client and Server*, Opa provides
    three ways for communicating between clients and servers: session, cell, and network.
    Session is for one-way asynchronous communication; cell is a special case of session
    and is for two-way synchronous communication; and network is for broadcasting
    messages to all observers. Network is the right choice for our purpose:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了消息的定义，我们需要一种方法在不同客户端之间传递消息。如第 5 章 [客户端与服务器之间的通信](ch05.html "第 5 章。客户端与服务器之间的通信")
    中所述，*客户端与服务器之间的通信*，Opa 提供了三种在客户端和服务器之间通信的方式：会话、单元和网络。会话用于单向异步通信；单元是会话的特殊情况，用于双向同步通信；网络用于向所有观察者广播消息。网络是我们目的的正确选择：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This code fragment defines an empty network named `room`. The type of the network
    is `Network.network(message)`, which means it is a network used to transmit data
    of the type `message`. The keyword `private` indicates that it cannot be accessed
    from other modules and the keyword `server` instructs Opa to implement this network
    on the server and not on the client.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码片段定义了一个名为 `room` 的空网络。该网络类型为 `Network.network(message)`，这意味着它是一个用于传输类型为 `message`
    的数据的网络。关键字 `private` 表示它不能从其他模块访问，关键字 `server` 指示 Opa 在服务器上而不是在客户端实现此网络。
- en: We could also have used `Network.cloud(key)` to create a clouded network. This
    type of network will be automatically shared between multiple servers if the application
    is executed with the `cloud` option (for example, `./chat.js --cloud`). When one
    or several servers invoke `Network.cloud(key)` with the same value key, only one
    network is actually created on one of the participating servers (chosen arbitrarily),
    and the network will be shared between servers.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用 `Network.cloud(key)` 来创建一个云网络。如果应用程序以 `cloud` 选项（例如，`./chat.js --cloud`）执行，此类网络将在多个服务器之间自动共享。当一个或多个服务器使用相同值
    key 调用 `Network.cloud(key)` 时，实际上只有一个网络在参与服务器之一（任意选择）上创建，并且该网络将在服务器之间共享。
- en: 'Now that we have our network, the next step is to add the clients to our network
    and broadcast messages to the clients. Therefore, we need two new functions:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了网络，下一步是将客户端添加到我们的网络中并向客户端广播消息。因此，我们需要两个新的函数：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The function `register` registers a callback function to a given network. This
    registered function will be invoked whenever a new message arrives.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`register` 函数将回调函数注册到给定的网络。每当有新消息到达时，将调用此注册的函数。'
- en: The function `broadcast` broadcasts messages to all the clients belonging to
    a given network. Note that the order in which clients receive the message is unspecified.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`broadcast` 函数将消息广播到属于给定网络的全部客户端。请注意，客户端接收消息的顺序是不确定的。'
- en: 'The complete code of `model.opa` is as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`model.opa` 的完整代码如下：'
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Broadcasting and receiving messages
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 广播和接收消息
- en: What is left for us to do is to connect the model and the view. There are two
    distinct functions that we need to accomplish.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做什么剩下的工作是将模型和视图连接起来。我们需要完成两个不同的函数。
- en: We must broadcast the current user's message when the **Post** button is clicked
    on or when *Enter* is pressed in the text field. We must also display new messages
    as they arrive.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 **Post** 按钮上点击或当在文本字段中按下 *Enter* 时，我们必须广播当前用户的消息。我们还必须显示到达的新消息。
- en: 'Let''s first have a look at how we broadcast the user''s message when they
    press *Enter*:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看当用户按下 *Enter* 时，我们是如何广播用户消息的：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When the user presses *Enter*, the `broadcast` function will be invoked. In
    this function, we first get the user''s input using `Dom.get_value`, and then
    we broadcast the message in the second line by calling the `broadcast` method
    in the module `Model`. Finally, we clear the content of the input field. That''s
    all it takes to broadcast the message to all the connected clients. Now let''s
    review how we process new message arrivals. We have already mentioned the function
    `Model.register` in `model.opa`. Recall that it registers a callback function
    to the network. Consider the following code found in `view.opa`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户按下 *Enter* 时，`broadcast` 函数将被调用。在这个函数中，我们首先使用 `Dom.get_value` 获取用户的输入，然后在第二行通过调用模块
    `Model` 中的 `broadcast` 方法来广播消息。最后，我们清除输入字段的内容。这就是将消息广播给所有已连接客户端的全部过程。现在让我们回顾一下我们是如何处理新消息到达的。我们已经在
    `model.opa` 中提到了函数 `Model.register`。回想一下，它将一个回调函数注册到网络中。考虑以下在 `view.opa` 中找到的代码：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When the div `#conversation` is ready, it invokes `Model.register` to register
    the callback function `updatemsg`, which will be called whenever a new message
    arrives:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '当 `div #conversation` 准备就绪时，它会调用 `Model.register` 来注册回调函数 `updatemsg`，该函数将在收到新消息时被调用：'
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the function `updatemsg`, we first construct an HTML fragment representing
    the message we have received. Then, we append a line to the end of the `Dom` element
    with the id `conversation`. Note that we are using the shortcut syntax `=+`. Finally,
    we use the function `Dom.scroll_to_bottom` to scroll the content to the bottom.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `updatemsg` 函数中，我们首先构建一个代表我们收到的消息的 HTML 片段。然后，我们向具有 id `conversation` 的 `Dom`
    元素的末尾添加一行。请注意，我们正在使用快捷语法 `=+`。最后，我们使用 `Dom.scroll_to_bottom` 函数将内容滚动到最底部。
- en: Summary
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have built a real web application in Opa. The application
    uses concepts and methods we have discussed in the previous chapters. First, we
    reviewed how to create an Opa project and how to start the web server. Then, we
    used the Bootstrap markup and customized styles to build the chat page in the
    module `View`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用 Opa 构建了一个真正的网络应用程序。该应用程序使用了我们在前几章中讨论的概念和方法。首先，我们回顾了如何创建 Opa 项目以及如何启动网络服务器。然后，我们使用了
    Bootstrap 标记和自定义样式来构建模块 `View` 中的聊天页面。
- en: Subsequently, we defined the chat message and the chat room in the module `Model`.
    Finally, we put them together to create the chat application.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 随后，我们在模块 `Model` 中定义了聊天消息和聊天室。最后，我们将它们组合起来创建聊天应用程序。
