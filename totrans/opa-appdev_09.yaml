- en: Chapter 9. Building a Chat Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have gone through the basic concepts of Opa and now it's time to build a
    real web application. In this chapter we will build a chat application. The application
    offers one chat room. The users who connect to the application will join the chat
    room automatically and can start discussing immediately. For simplicity, we supply
    a random username when a user joins. The source code for this application can
    be found at [https://github.com/winbomb/opapackt](https://github.com/winbomb/opapackt).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot of our chat application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a Chat Application](img/3749OS_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To begin developing our chat application, we need to create an Opa project
    using the following Opa command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will create an empty Opa project. Also, it will generate the required
    directories and files automatically with the structure as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a project](img/3749OS_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s have a brief look at what these source code files do:'
  prefs: []
  type: TYPE_NORMAL
- en: '`controller.opa`: This file serves as the entry point of the chat application;
    we start the web server in `controller.opa`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`view.opa`: This file serves as an user interface'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model.opa`: This is the model of the chat application; it defines the message,
    network, and the chat room'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`style.css`: This is an external stylesheet file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Makefile`: This file is used to build an application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we do not need database support in the chat application, we can remove `--import-package
    stdlib.database.mongo` from the FLAG option in `Makefile`. Type `make` and `make
    run` to run the empty application.
  prefs: []
  type: TYPE_NORMAL
- en: Launching the web server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's begin with `controller.opa`, the entry point of our chat application where
    we launch the web server. We have already discussed the function `Server.start`
    in the *Server module* section of [Chapter 3](ch03.html "Chapter 3. Developing
    Web Applications"), *Developing Web Applications*. In our chat application, we
    will use a handlers group to handle users requests.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: So, what exactly are the arguments that we are passing to the `Server.start`
    function?
  prefs: []
  type: TYPE_NORMAL
- en: 'The line `{resources: @static_resource_direcotry("resources")}` registers a
    resource handler and will serve resource files in the `resources` directory.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, the line `{register: [{css:["/resources/css/style.css"]}]}` registers
    an external CSS file—`style.css`. This permits us to use styles in the `style.css`
    application scope.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the line `{title:"Opa Chat", page: View.page}` registers a single
    page handler that will dispatch all other requests to the function `View.page`.'
  prefs: []
  type: TYPE_NORMAL
- en: The server uses the default configuration `Server.http` and will run on port
    8080.
  prefs: []
  type: TYPE_NORMAL
- en: Designing user interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When the application starts, all the requests (except requests for resources)
    will be distributed to the function `View.page`, which displays the chat page
    on the browser. Let's take a look at the view part; we define a module named `View`
    in `view.opa`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The module `View` contains functions to display the page on the browser. In
    the first line, `import stdlib.themes.bootstrap.css`, we import Bootstrap styles.
  prefs: []
  type: TYPE_NORMAL
- en: This permits us to use Bootstrap markup in our code, such as `navbar`, `navbar-fix-top`,
    and `btn-primary`. We also registered an external `style.css` file so we can use
    styles in `style.css` such as `conversation` and `footer`.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, this code in the function page follows almost the same syntax
    as HTML. As discussed in the *XHTML* section of [Chapter 3](ch03.html "Chapter 3. Developing
    Web Applications"), *Developing Web Applications*, we can use HTML freely in the
    Opa code, the HTML values having a predefined type `xhtml` in Opa.
  prefs: []
  type: TYPE_NORMAL
- en: Building application logic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A chat application is all about exchanging messages between users, so we need
    to define a message type. We can find its definition in the first line of `model.opa`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: It's a very simple type with two fields. The `user` field represents the author
    of the message, and the `text` field represents the content of the message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have the definition of a message, we need a way to pass the messages
    between different clients. As mentioned in [Chapter 5](ch05.html "Chapter 5. Communicating
    between Client and Server"), *Communicating between Client and Server*, Opa provides
    three ways for communicating between clients and servers: session, cell, and network.
    Session is for one-way asynchronous communication; cell is a special case of session
    and is for two-way synchronous communication; and network is for broadcasting
    messages to all observers. Network is the right choice for our purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This code fragment defines an empty network named `room`. The type of the network
    is `Network.network(message)`, which means it is a network used to transmit data
    of the type `message`. The keyword `private` indicates that it cannot be accessed
    from other modules and the keyword `server` instructs Opa to implement this network
    on the server and not on the client.
  prefs: []
  type: TYPE_NORMAL
- en: We could also have used `Network.cloud(key)` to create a clouded network. This
    type of network will be automatically shared between multiple servers if the application
    is executed with the `cloud` option (for example, `./chat.js --cloud`). When one
    or several servers invoke `Network.cloud(key)` with the same value key, only one
    network is actually created on one of the participating servers (chosen arbitrarily),
    and the network will be shared between servers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our network, the next step is to add the clients to our network
    and broadcast messages to the clients. Therefore, we need two new functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The function `register` registers a callback function to a given network. This
    registered function will be invoked whenever a new message arrives.
  prefs: []
  type: TYPE_NORMAL
- en: The function `broadcast` broadcasts messages to all the clients belonging to
    a given network. Note that the order in which clients receive the message is unspecified.
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete code of `model.opa` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Broadcasting and receiving messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is left for us to do is to connect the model and the view. There are two
    distinct functions that we need to accomplish.
  prefs: []
  type: TYPE_NORMAL
- en: We must broadcast the current user's message when the **Post** button is clicked
    on or when *Enter* is pressed in the text field. We must also display new messages
    as they arrive.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first have a look at how we broadcast the user''s message when they
    press *Enter*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'When the user presses *Enter*, the `broadcast` function will be invoked. In
    this function, we first get the user''s input using `Dom.get_value`, and then
    we broadcast the message in the second line by calling the `broadcast` method
    in the module `Model`. Finally, we clear the content of the input field. That''s
    all it takes to broadcast the message to all the connected clients. Now let''s
    review how we process new message arrivals. We have already mentioned the function
    `Model.register` in `model.opa`. Recall that it registers a callback function
    to the network. Consider the following code found in `view.opa`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'When the div `#conversation` is ready, it invokes `Model.register` to register
    the callback function `updatemsg`, which will be called whenever a new message
    arrives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the function `updatemsg`, we first construct an HTML fragment representing
    the message we have received. Then, we append a line to the end of the `Dom` element
    with the id `conversation`. Note that we are using the shortcut syntax `=+`. Finally,
    we use the function `Dom.scroll_to_bottom` to scroll the content to the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have built a real web application in Opa. The application
    uses concepts and methods we have discussed in the previous chapters. First, we
    reviewed how to create an Opa project and how to start the web server. Then, we
    used the Bootstrap markup and customized styles to build the chat page in the
    module `View`.
  prefs: []
  type: TYPE_NORMAL
- en: Subsequently, we defined the chat message and the chat room in the module `Model`.
    Finally, we put them together to create the chat application.
  prefs: []
  type: TYPE_NORMAL
