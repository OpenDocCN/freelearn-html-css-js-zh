["```js\nExt.define('Checkers.model.Square', {\n    extend: 'Ext.data.Model',\n    config: {\n        fields: [\n            {name: 'squareID', type: 'string'},\n            {name: 'occupiedBy', type: 'string'},\n            {name: 'pieceType', type: 'string'},\n            {name: 'decoration', type: 'string'},\n            {name: 'background', type: 'string'}\n        ],\n        idProperty: 'squareID'\n    }\n});\n```", "```js\n{squareID: 'A1', occupiedBy: 'none', pieceType: 'none', decoration: '', background: 'light'},\n{squareID: 'B1', occupiedBy: 'black', pieceType: 'Piece', decoration: '', background: 'dark'},\n{squareID: 'C1', occupiedBy: 'none', pieceType: 'none', decoration: '', background: 'light'},\n{squareID: 'D1', occupiedBy: 'black', pieceType: 'Piece', decoration: '', background: 'dark'},\n{squareID: 'E1', occupiedBy: 'none', pieceType: 'none', decoration: '', background: 'light'},\n{squareID: 'F1', occupiedBy: 'black', pieceType: 'Piece', decoration: '', background: 'dark'},\n{squareID: 'G1', occupiedBy: 'none', pieceType: 'none', decoration: '', background: 'light'},\n{squareID: 'H1', occupiedBy: 'black', pieceType: 'Piece', decoration: '', background: 'dark'},\n{squareID: 'A2', occupiedBy: 'black', pieceType: 'Piece', decoration: '', background: 'dark'},\n{squareID: 'B2', occupiedBy: 'none', pieceType: 'none', decoration: '', background: 'light'},\n{squareID: 'C2', occupiedBy: 'black', pieceType: 'Piece', decoration: '', background: 'dark'},\n{squareID: 'D2', occupiedBy: 'none', pieceType: 'none', decoration: '', background: 'light'},\n{squareID: 'E2', occupiedBy: 'black', pieceType: 'Piece', decoration: '', background: 'dark'},\n{squareID: 'F2', occupiedBy: 'none', pieceType: 'none', decoration: '', background: 'light'},\n{squareID: 'G2', occupiedBy: 'black', pieceType: 'Piece', decoration: '', background: 'dark'},\n{squareID: 'H2', occupiedBy: 'none', pieceType: 'none', decoration: '', background: 'light'}â€¦\n```", "```js\n{\n    xtype: 'dataview',\n    itemTpl: ['<div class=\"gameSquare {background} {decoration}\">{squareID}',\n              \"<tpl if='occupiedBy != \\\"none\\\" && pieceType != \\\"none\\\"'><img src=\\\"resources/images/{occupiedBy}{pieceType}.png\\\" height=\\\"72\\\" width=\\\"72\\\" /></tpl>\",\n              '</div>'],\n    store: 'BoardStore',\n    height: 619,\n    width: 619,\n    scrollable: false,\n    cls: 'board',\n    margin: 5,\n    padding: 5,\n    mode: 'MULTI'\n}\n```", "```js\n'<div class=\"gameSquare {background} {decoration}\">{squareID}'\n```", "```js\n.gameSquare {\n  height: 72px;\n  width: 72px;\n  margin: 2px;\n  float: left;\n  position: relative;\n}\n```", "```js\n.gameSquare.dark {\n    color: white;\n}\n```", "```js\n.up_left:before {\n    content: '';\n    background: url(\"../images/up_left.png\");\n    height: 32px;\n    width: 32px;\n    margin: 0;\n    padding: 0;\n    position: absolute;\n    top: -16px;\n    left: -16px;\n    z-index: 1000;\n}\n```", "```js\n.removed:after {\n    content: '';\n    background: url(\"../images/removed.png\");\n    height: 72px;\n    width: 72px;\n    position:absolute;\n    top: 0;\n    left: 0;\n    z-index: 1001;\n}\n```", "```js\n<tpl if='occupiedBy != \\\"none\\\" && pieceType != \\\"none\\\"'><img src=\\\"resources/images/{occupiedBy}{pieceType}.png\\\" height=\\\"72\\\" width=\\\"72\\\" /></tpl>\n```", "```js\n.x-item-selected .gameSquare {\n    outline: 3px solid rgba(0,175,0,0.75);\n    color: rgb(0,175,0);\n}\n.x-item-selected .gameSquare.dark {\n    color: rgb(0,255,0);\n}\n```", "```js\n{\n    xtype : 'toolbar',\n    docked: 'bottom',\n    items: [\n        {\n            xtype: 'spacer'\n        },\n        { text: 'Start Turn', action: 'mainButton' },\n        { text: 'Show Previous', action: 'altButton' },\n        {\n        xtype: 'spacer'\n        }\n    ]\n}\n```", "```js\nExt.define('Checkers.controller.Game', {\n extend: 'Ext.app.Controller',\n config: {\n  control: {\n   board: {\n    select: 'doSelect',\n    deselect: 'doDeselect'\n   },\n   mainBtn: {\n    tap: 'doMainBtn'\n   },\n   altBtn: {\n    tap: 'doAltBtn'\n   }\n  },\n  refs: {\n   board: 'main dataview',\n   mainBtn: 'button[action=\"mainButton\"]',\n   altBtn: 'button[action=\"altButton\"]'\n  }\n }\n});\n```", "```js\npreviousTurn: {\n player: null,\n piece: null,\n moves: [],\n removedPieces: []\n},\ncurrentTurn: {\n player: 'black',\n piece: null,\n moves: [],\n removedPieces: [],\n endOfTurn: false,\n hasJumped: false,\n started: false,\n kingable: false\n}\n```", "```js\ndoMainBtn: function(btn) {\n var turn = this.getCurrentTurn();\n if (btn.getText() == 'Start Turn') {\n  btn.setText('Finish Turn!');\n  this.getAltBtn().setText('Clear Moves');\n  turn.started = true;\n  this.setCurrentTurn(turn);\n  this.clearTurn();\n  Ext.Msg.alert(\"Ready to play!\", \"It is \"+turn.player[0].toUpperCase() + turn.player.slice(1)+\"'s turn!\");\n } else {\n  if (turn.moves.length > 1) {\n  this.commitTurn(turn);\n  turn.player = (turn.player == 'red')?'black':'red';\n  this.setCurrentTurn(turn);\n  this.clearTurn();\n  btn.setText('Start Turn');\n  this.getAltBtn().setText('Show Previous');\n   }\n }\n}\n```", "```js\ndoSelect: function (view, record) {\n var turn = this.getCurrentTurn();\n```", "```js\nif (turn.endOfTurn || !turn.started) {\n  return false;\n }\n```", "```js\nif (record.get('background') == 'light') {\n  return false;\n}\n```", "```js\nif (turn.moves.length == 0 && record.get('occupiedBy') != turn.player) {\n return false;\n}\n```", "```js\n} else if (turn.moves.length == 0) {\n  turn.moves.unshift(record);\n  turn.piece = record;\n  this.setCurrentTurn(turn);\n  return true;\n}\n```", "```js\n} else if (this.isLegalMove(turn.moves[0], record)) {\n  turn.moves.unshift(record);\n\n  if (this.isKingable(record)) {\n   turn.kingable = true;\n   this.setEndOfTurn();\n   Ext.Msg.alert(\"King me!\", \"Landing here would cause you to be kinged and end your turn.\");\n  }\n\n  this.setCurrentTurn(turn);\n  this.decorateCurrentTurn();\n  return true;\n } else {\n  return false;\n}\n```", "```js\nisLegalMove: function (from, to) {\n var turn = this.getCurrentTurn(),\n fromID, toID, distance, intermediate;\n\n if (to.get('occupiedBy') != 'none') {\n  return false;\n }\n\n fromID = from.get('squareID').split('');\n toID = to.get('squareID').split(''); \n // This makes the letter element 0, and the number element 1.\n\n distance = Math.abs(toID[1] - fromID[1]);\n\n if (distance == 1 && !turn.hasJumped) {\n  // here we will check for our different piece types: king, black or red\n }\n if (distance == 2) {\n  // here we will check for our different piece types: king, black or red\n }\n\n return false;\n}\n```", "```js\nif (distance == 1 && !turn.hasJumped) {\n```", "```js\nif (turn.piece.get('pieceType') == 'King') {\n    if (toID[0] == this.nextLetter(fromID[0])) {\n        this.setEndOfTurn();\n        return true;\n    } else if (toID[0] == this.previousLetter(fromID[0])) {\n        this.setEndOfTurn();\n        return true;\n    }\n} \n```", "```js\n} else if (turn.piece.get('occupiedBy') == 'red') {\n if (toID[1] < fromID[1]) {\n  if (toID[0] == this.nextLetter(fromID[0])) {\n   this.setEndOfTurn();\n   return true;\n  } else if (toID[0] == this.previousLetter(fromID[0])) {\n   this.setEndOfTurn();\n   return true;\n  }\n }\n}\n```", "```js\n} else {\n if (toID[1] > fromID[1]) {\n  if (toID[0] == this.nextLetter(fromID[0])) \n   { \n    this.setEndOfTurn();\n    return true;\n   } else if (toID[0] == this.previousLetter(fromID[0])) {\n    this.setEndOfTurn();\n    return true;\n   }\n }\n}\n```", "```js\nif (distance == 2) {\n intermediate = this.getIntermediateSquare(from, to);\n```", "```js\nif (turn.piece.get('pieceType') == 'King') {\n  if (intermediate.get('occupiedBy') == 'red' && turn.piece.get('occupiedBy') == 'black') {\n   turn.moves.unshift(intermediate);\n   turn.removedPieces.push(intermediate);\n   turn.hasJumped = true;\n   this.setCurrentTurn(turn);\n   return true;\n  } else if (intermediate.get('occupiedBy') == 'black' && turn.piece.get('occupiedBy') == 'red') {\n   turn.moves.unshift(intermediate);\n   turn.removedPieces.push(intermediate);\n   turn.hasJumped = true;\n   this.setCurrentTurn(turn);\n   return true;\n  }\n }\n```", "```js\n} else if (turn.piece.get('occupiedBy') == 'red') {\n if (toID[1] < fromID[1]) {\n  if (intermediate.get('occupiedBy') == 'black') {\n   turn.moves.unshift(intermediate);\n   turn.removedPieces.push(intermediate);\n   turn.hasJumped = true;\n   this.setCurrentTurn(turn);\n   return true;\n  }\n }\n}\n```", "```js\n} else {\n  if (toID[1] > fromID[1]) {\n   if (intermediate.get('occupiedBy') == 'red') {\n    turn.moves.unshift(intermediate);\n    turn.removedPieces.push(intermediate);\n    turn.hasJumped = true;\n    this.setCurrentTurn(turn);\n    return true;\n   }\n  }\n }\n```", "```js\ndecorateTurn: function(turn) {\n        var i, from, to, fromID, toID, cls;\n\n        for (i = turn.moves.length - 1; i > 0; i--) {\n            from = turn.moves[i];\n            to = turn.moves[i - 1];\n            fromID = from.get('squareID').split('');\n            toID = to.get('squareID').split(''); \n            if (fromID[1] < toID[1]) {\n                cls = 'down';\n            } else {\n                cls = 'up';\n            }\n            if (fromID[0] < toID[0]) {\n                cls += '_right';\n            } else {\n                cls += '_left';\n            }\n            from.set('decoration', cls);\n        }\n\n        for (i = 0; i < turn.removedPieces.length; i++) {\n            cls = turn.removedPieces[i].get('decoration');\n            cls += ' removed';\n            turn.removedPieces[i].set('decoration', cls);\n        }\n\n        this.getBoard().refresh();\n    }\n```", "```js\ndecoratePreviousTurn: function() {\n var turn = this.getPreviousTurn();\n if (turn.player == null && turn.piece == null) {\n  Ext.Msg.alert('Game not started', 'There is no previous turn to show');\n return false;\n}\n this.getBoard().select(turn.moves, false, true);\n return this.decorateTurn(turn);\n}\n```", "```js\nclearTurn: function() {\n var turn = this.getCurrentTurn();\n turn.piece = null;\n turn.moves = [];\n turn.removedPieces = [];\n turn.endOfTurn = false;\n turn.hasJumped = false;\n turn.kingable = false;\n this.setCurrentTurn(turn);\n this.getBoard().deselectAll(true);\n this.clearDecorations();\n},\nclearDecorations: function() {\n var store = this.getBoard().getStore();\n store.each(function(square) {\n  square.set('decoration', '');\n });\n}\n```"]