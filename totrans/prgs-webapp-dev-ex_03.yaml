- en: Making Your Website Secure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's surprising that no website utilizes HTTPS today. Securing a website was
    difficult in the past, but most barriers to security have been erased in recent
    years. Some of those barriers included the price, technical requirements, and
    performance concerns.
  prefs: []
  type: TYPE_NORMAL
- en: To qualify as a progressive web application, a website must be served via HTTPS.
    Service workers are gated behind HTTPS because they run in the background and
    are designed to perform tasks that could compromise privacy if they are not protected.
  prefs: []
  type: TYPE_NORMAL
- en: 'With reduced and eliminated barriers, search engines and browsers have increased
    HTTPS''s visibility to consumers because of improved search engine rankings, visual
    queues in the browser, and the gating APIs behind HTTPS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00028.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This means that every website now has incentives to migrate from HTTP to HTTPS.
    But there are still some issues that you will need to deal with for a successful
    HTTPS strategy.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What SSL/TLS and HTTPS are
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common objections, reasons to migrate today HTTPS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An HTTPS migration strategy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSL history
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Secure Socket Layer** (**SSL**) certificates represent the underpinnings
    of trust in most web and internet transactions. Trust is the key word when it
    comes to SSL and HTTPS. When a website uses SSL, the communication between the
    browser and the server is encrypted, but to obtain an SSL certificate, you must
    establish a level of trust with an issuing authority.
  prefs: []
  type: TYPE_NORMAL
- en: To enable SSL, you must install a certificate on your server. Certificates are
    issued by a **certificate authority** (**CA**). Today, there are many certificate
    authorities, and it would be difficult to list them all. You should search for
    the best provider for your needs. I will discuss a few in this chapter. You will
    also learn about the different types of certificates and the additional features
    that CAs *package* them with. In the not too distant past, Network Solutions was
    the only authority from which available to purchase a certificate.
  prefs: []
  type: TYPE_NORMAL
- en: Not only were they the only game in town, you had to navigate lots of red tape.
    If they did not like your paperwork, they would reject you. It was almost impossible
    for individuals to buy a certificate as domain ownership needed to be tied to
    a registered business.
  prefs: []
  type: TYPE_NORMAL
- en: This limited availability led to high prices for annual certificates. The average
    blog, business, or organization never considered using SSL because of the cost.
    This limited SSL to sites that transferred sensitive information, such as credit
    card and bank account numbers, because of the original barriers.
  prefs: []
  type: TYPE_NORMAL
- en: The certificate cost was not limited to just the annual certificate cost—hosting
    a secure site was prohibitive. Because web technology had not evolved, SSL was
    limited to a single domain per IP address. This meant that sites needed to pay
    for a dedicated IP address and, often, a dedicated web server. $4.99-a-month shared-hosting
    plans were not an option if you wanted encryption.
  prefs: []
  type: TYPE_NORMAL
- en: The HTTPS story has changed since then. There are many free and low-cost certificate
    authorities, removing the annual cost barrier. HTTP protocol and web server technology
    has also advanced. Today, you can host multiple sites on the same IP address using
    different certificates and host headers (domains).
  prefs: []
  type: TYPE_NORMAL
- en: '**Server Name Indication** (**SNI**) was added to the TLS specification in
    2003 ([https://en.wikipedia.org/wiki/Server_Name_Indication](https://en.wikipedia.org/wiki/Server_Name_Indication)).
    This allows servers to host multiple domains on the same IP and port number using
    TLS. Originally, the server managed the host header name translation once the
    HTTP connection was established, or after the TLS handshake.'
  prefs: []
  type: TYPE_NORMAL
- en: The 2003 TLS specification change has the client include the domain name as
    part of the TLS negotiation. Now, web servers can use their internal host header
    tables to determine the desired website.
  prefs: []
  type: TYPE_NORMAL
- en: How does TLS work?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TLS is an encryption protocol that works on top of TCP and sometimes UDP as
    well. Because it sits on top of the transport layer, it allows protocols higher
    in the chain to remain unchanged, such as HTTP, for example.
  prefs: []
  type: TYPE_NORMAL
- en: The protocol hides the actual data being sent across the wire. Attackers can
    only see what port, domain, and IP address are connected with it. They could also
    track how much data is being transferred.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the TCP connection is established, the TLS handshake is started by the
    client (through the browser or another user agent client application). The client
    starts the TLS conversation by asking a series of questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Which version of SSL/TLS is it running?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What cipher suites does it want to use?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What compression methods does it want to use?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The client chooses the highest level of the TLS protocol supported by both the
    client and server. The compression method is also selected.
  prefs: []
  type: TYPE_NORMAL
- en: Once the initial TLS connection is established, the client requests the server's
    certificate. The certificate must be trusted by the client or an authority party
    that the client trusts. Examples of certificate authorities are Network Solutions,
    GeoTrust, Let's Encrypt, and Amazon.
  prefs: []
  type: TYPE_NORMAL
- en: After the certificate is verified, an encryption key is exchanged. The key depends
    on the cipher that is chosen. Once the key is exchanged, the client and server
    are able to perform symmetric encryption.
  prefs: []
  type: TYPE_NORMAL
- en: 'The client tells the server that all future communications are to be encrypted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00029.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The client and server perform a final verification in which the client's MAC
    address is verified by the server. The server receives an initial authentication
    message from the client that is decrypted and sent back to the client for verification.
  prefs: []
  type: TYPE_NORMAL
- en: Encryption keys are generated uniquely for each connection, and are based on
    the authentication message. Assuming the handshake completes successfully, the
    client and the server can now communicate securely.
  prefs: []
  type: TYPE_NORMAL
- en: 'Secure TLS connections between the client and server have at least one of the
    following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: As symmetric cryptography is used to encrypt the transmitted data, it is the
    reason why the connection is secure. The negotiation of a shared secret is both
    secure and reliable ( the negotiated secret is unavailable to eavesdroppers and
    no attacker can modify the communications during the negotiation without being
    detected).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Public-key cryptography is used to authenticate the identity of the communicating
    parties. The authentication procedure could be made optional, but typically it
    is required for the server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To prevent the undetected loss or alteration of the data during transmission,
    each transmitted message includes message integrity check using a message authentication
    code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is HTTPS?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**HTTPS** is HTTP within SSL/TLS. TLS establishes a secure tunnel for bidirectional
    binary data communications between two hosts (the web server and browser). **HTTP**
    (**Hypertext Transport Text Protocol**) is the communications protocol that the
    client and server use to talk to each other:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00030.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: So, think of HTTP as water inside a pipe. The pipe is the TLS encryption and
    the water is the data. The primary difference between HTTPS and the water analogy
    is that HTTPS is bidirectional and plumbing isn't.
  prefs: []
  type: TYPE_NORMAL
- en: There are other communication protocols that support TLS, such as web sockets
    (WSS), email (SMTPS), and FTP (FTPS).
  prefs: []
  type: TYPE_NORMAL
- en: HTTPS advantages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first, and often only, feature you will think of when someone asks about
    SSL or HTTPS is encryption. This is a good reason to use HTTPS, but it is not
    the only reason, and not even the most important reason.
  prefs: []
  type: TYPE_NORMAL
- en: 'HTTPS gives us three security properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Identity**: Certificate proves the server is the real server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Confidentiality**: Only the browser and server can read the data being passed
    between them'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integrity**: The sent data is what the other party receives'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you install an SSL certificate and enable HTTPS, you are telling the world
    that they can trust your site's identity. Once that secure channel of communication
    is opened between the client and server, both can have confidence that the conversation
    is to whom they expect.
  prefs: []
  type: TYPE_NORMAL
- en: Both the client and the server establish a communication channel by verifying
    each other's identity. The certificate is used to verify this identify. Each part
    of the conversation requires a token, known only to the client and server.
  prefs: []
  type: TYPE_NORMAL
- en: Confidentiality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Without HTTPS, your connection could be hijacked via a man in the middle attack.
    The address in the browser may tell you that it is the domain you expect to have
    loaded, but in reality, it could be bad guy in the middle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by defining different scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Normally when you connect to a website using HTTP, the conversation is in plain
    text. In general, the conversation contains nothing sensitive. But a bad person
    could snoop on your traffic and use the information they find to do bad things,
    as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This is amplified when you use public Wi-Fi. These networks are great for connecting
    to the internet for free, but poor for personal security.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the eavesdropping bad guy identifies your session, they could intercept
    the conversation and route you to their server. Now any information you share
    with the desired site is sent to the bad guy''s server instead, as shown in the
    following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00032.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: While somewhat sophisticated, it happens more times than you might think.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s change the scenario so that all those involved are using HTTPS. Now
    all the communication is encrypted. The only thing the bad guy can see is what
    domain(s) you visit, not even the URLs on those domains, as shown in the following
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00033.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The connection between the client and server cannot be hijacked. If a bad actor
    tries to hijack the session, both the client and server know there is a problem
    and the conversation ends.
  prefs: []
  type: TYPE_NORMAL
- en: Integrity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because the connection is encrypted and third-party actors cannot tamper with
    data, each end knows the data is valid. This is because the man-in-the-middle
    attack is thwarted.
  prefs: []
  type: TYPE_NORMAL
- en: It is not just bad guys you need to worry about. Third-party content, such as
    ads, could be injected into a response anywhere along the way with HTTP. For example,
    an ISP or your local coffee shop could modify the request and response to reroute
    you to a different server or change the content you view.
  prefs: []
  type: TYPE_NORMAL
- en: HTTPS gives both the customer and the server confidence that the conversation
    contains the real data. There is no guarantee that the data received by either
    the client or the server is correct when HTTP is used.
  prefs: []
  type: TYPE_NORMAL
- en: Browsers are going out of their way to indicate HTTPS to the customer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Have you noticed those padlocks in the browser address bar? Chances are you
    have, but that you don''t really think about it until you feel something is a
    little fishy. Browsers have gradually been stepping up the user experience for
    the average consumer in recent years:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00034.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Soon, Chrome will start making it very apparent when a page contains either
    a password or credit card field. If those fields are present and not served via
    HTTPS, they will display a big red visual warning indicating to the customer that
    the page is not secure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Recently, Chrome started showing a warning when a site is loaded using HTTP
    when in Incognito mode, as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00035.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Chrome is not the only browser that is increasing visual prompting when a site
    is not served with HTTPS: Microsoft Edge, FireFox, and Opera have all announced
    plans to increase visual cues. This will, of course, lead to fewer and fewer scams
    succeeding, but will also cut into legitimate business conversions because they
    have neglected the application of HTTPS.'
  prefs: []
  type: TYPE_NORMAL
- en: Search engine optimization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google and other search engines have publicly stated that they consider HTTPS
    sites to be more authoritative than nonsecure sites with the same information.
    The reason is twofold. First, the average web surfer will trust an HTTPS site
    more than a non-HTTPS site. It might just be a simple blog, or it could be a giant
    bank—whatever the site is, the perception of security goes a long way.
  prefs: []
  type: TYPE_NORMAL
- en: Independent surveys have shown a correlation between higher rankings and HTTPS
    (see [https://backlinko.com/search-engine-ranking](https://backlinko.com/search-engine-ranking)).
    This makes sense because search ranking signals highly correlate with better user
    experience. HTTPS is a user experience factor because it conveys trust to the
    consumer.
  prefs: []
  type: TYPE_NORMAL
- en: So even if your site does not handle *sensitive *information, you should still
    implement HTTPS to boost your visitor's confidence in your brand and your search
    engine rankings.
  prefs: []
  type: TYPE_NORMAL
- en: The second reason search engines are pushing businesses and organizations to
    implement HTTPS is to verify ownership. You cannot install a legitimate TLS certificate
    without some sort of ownership verification. A certificate issuer will send an
    email to trigger a verification process based on the domain's WHOIS record. When
    you register your domain, you must supply real contact information, including
    an active email address.
  prefs: []
  type: TYPE_NORMAL
- en: Bad guys tend to register domains with fake or false contact information so
    they cannot be traced. By requiring HTTPS, search engines are showing that there
    is a modicum of trust in the site's ownership.
  prefs: []
  type: TYPE_NORMAL
- en: As the web moves toward HTTPS as the default, there will be fewer and fewer
    SPAM websites. Bad guys won't get SSL certificates, at least not easily.
  prefs: []
  type: TYPE_NORMAL
- en: No longer cost-prohibitive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since the beginning of SSL, certificates have come with a cost. Typically, this
    was an annual cost. In the past (around 15 years ago), certificates typically
    cost between $100 and $500 a year. You can think about it like an annual business
    license. In fact, to complete a certificate request, you often needed a proof
    of business or organization. The issuing process was also time-prohibitive. It
    often took 3–14 days to get a certificate. The issuing authority had a staff that
    evaluated every certificate request and the accompanying paperwork. A very archaic
    process for a digital platform.
  prefs: []
  type: TYPE_NORMAL
- en: While enterprises do not blink at a $100-a-year fee for their web site, the
    average small business does. There are thousands of small businesses for every
    enterprise. As well as traditional small businesses, there are millions of businesses,
    blogs, forums, and other entities that make little to no revenue from their site.
    They can barely justify their hosting overhead. HTTPS is just not viable at those
    rates.
  prefs: []
  type: TYPE_NORMAL
- en: Another cost you might not think about is IP addresses. In the beginning, SSL
    required a dedicated IP address. Despite millions of possible IP addresses, there
    were not enough, not even close. The limited supply of IP addresses also raised
    the price of HTTPS. This could have added another $100 or more a year to the cost
    of hosting a site. Today, this has changed. Now a certificate maps to a domain.
    This eliminates this tax.
  prefs: []
  type: TYPE_NORMAL
- en: Today, HTTPS requirements and costs have all relaxed. There are many low-cost
    certificate providers. In fact, you can obtain a certificate for free from Amazon
    or Let's Encrypt ([https://letsencrypt.org](https://letsencrypt.org)). The latest
    stats Let's Encrypt shares are over 50 million certificates issued.
  prefs: []
  type: TYPE_NORMAL
- en: Up to this point, I have referred to SSL, but that name is not exactly correct
    anymore. **Transport Layer Security** (**TLS**) is the proper term used today.
    The security protocol continues to evolve over time. SSL was originally created
    by Netscape, which is now owned by AOL.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid potential legal issues, TLS was first drafted in 1999 in RFC 2246 (see[ https://tools.ietf.org/html/rfc2246](https://tools.ietf.org/html/rfc2246)).
    The primary intent behind the name change was to separate the encryption protocol
    from Netscape and make it more *open* and *free*.
  prefs: []
  type: TYPE_NORMAL
- en: SSL and TLS are interchangeable in general conversation as most people will
    understand what you mean.
  prefs: []
  type: TYPE_NORMAL
- en: 'Which protocol version you implement is limited by your server platform. Because
    TLS 1.2 is very well established at this point, it is difficult to find a server
    platform or browser that does not support version 1.2\. But Qualys has some advice:'
  prefs: []
  type: TYPE_NORMAL
- en: '"There are five protocols in the SSL/TLS family, but not all of them are secure.
    The best practice is to use TLS v1.0 as your main protocol (making sure the BEAST
    attack is mitigated in configuration) and TLS v1.1 and v1.2 if they are supported
    by your server platform. That way, the clients that support newer protocols will
    select them, and those that don''t will fall back to TLS v1.0\. You must not use
    SSL v2.0, because it is insecure."'
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, when you create a TLS certificate, the protocol version is handled
    for you. Later in this chapter, I will go through the steps to create a certificate
    in AWS and Let's Encrypt, both free services.
  prefs: []
  type: TYPE_NORMAL
- en: Modern APIs require HTTPS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are currently at a point in our technological development where new high-value
    APIs and features are being added quickly. These include service workers and HTTP/2,
    both requiring HTTPS. WebRTC and now Geo-Location also require HTTPS. Any API
    that deals with personal information either is or soon will be gated behind HTTPS
    ([https://www.chromium.org/Home/chromium-security/deprecating-powerful-features-on-insecure-origins](https://www.chromium.org/Home/chromium-security/deprecating-powerful-features-on-insecure-origins)).
  prefs: []
  type: TYPE_NORMAL
- en: While these APIs could work without HTTPS, the security wraps these features
    in confidence. Think about it for a moment—the deeper a platform lets you integrate,
    the more they will require of your application.
  prefs: []
  type: TYPE_NORMAL
- en: Requiring HTTPS ensures a minimal amount of security and trust, and thus enough
    faith from potential platforms that you are not going to do evil things.
  prefs: []
  type: TYPE_NORMAL
- en: HTTPS can be significantly faster than HTTP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some technologies designed to make websites faster only work with HTTPS. One
    example is a protocol enhancement known as HTTP/2\. Take the HTTP versus HTTPS
    test to see this in action (see [https://www.httpvshttps.com/](https://www.httpvshttps.com/)
    for details).
  prefs: []
  type: TYPE_NORMAL
- en: 'When I first saw research showing HTTPS to be faster, I admit I was skeptical.
    I saw how much time the encryption adds in network waterfalls. Fortunately, the
    folks managing browsers and network stacks have done us a solid and smoothed out
    many of the issues that cause SSL to be slower than non-SSL, as illustrated in
    the following quote from Adam Langley at Google:'
  prefs: []
  type: TYPE_NORMAL
- en: '"On our production frontend machines, SSL/TLS accounts for less than 1% of
    the CPU load, less than 10 KB of memory per connection and less than 2% of network
    overhead. Many people believe that SSL/TLS takes a lot of CPU time and we hope
    the preceding numbers will help to dispel that."'
  prefs: []
  type: TYPE_NORMAL
- en: Because HTTP/2 multiplexes requests through a single connection, there is only
    one TLS handshake that must be completed. This reduces the time to retrieve assets
    and server load. Now the client and the server only need to perform a single handshake
    and encryption cycle.
  prefs: []
  type: TYPE_NORMAL
- en: 'The goal of HTTP/2 is to improve performance by undoing the shortcomings of
    the HTTP/1.1 specification. HTTP/2 eliminates connections by multiplexing responses,
    compressing headers, prioritizing responses, and allowing server-side push, as
    shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00036.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: All browsers support HTTP/2 and most servers do as well. Windows 2016 was the
    last major operating system to ship HTTP/2 support. Since it is relatively new,
    there are not many production deployments online.
  prefs: []
  type: TYPE_NORMAL
- en: HTTP/2 does not change any of the HTTP semantics. Status codes, verbs, and other
    such phrases are things we have used for years, and thus will not break existing
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: The de facto implementation that standard browsers are enforcing is HTTP/2 over
    TLS. While you could technically use HTTP/2 without TLS, browsers do not allow
    this approach.
  prefs: []
  type: TYPE_NORMAL
- en: The combination of the single connection and TLS handshake in concert with the
    other performance benefits that HTTP/2 offers mean that TLS is consistently faster
    than HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: HTTPS adoption
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: According to the August 2017 Qualys survey (see[ https://www.ssllabs.com/ssl-pulse/](https://www.ssllabs.com/ssl-pulse/)),
    60.2% of the sites they analyzed had proper SSL configuration. It is important
    to note that their survey is limited to 138, 672 of the most popular websites,
    a small sampling of the hundreds of millions of sites currently available online.
  prefs: []
  type: TYPE_NORMAL
- en: 'The HTTP Archive reports 64% of the top 500,000 websites use HTTPS ([https://httparchive.org/reports/state-of-the-web#pctHttps](https://httparchive.org/reports/state-of-the-web#pctHttps))
    shown in the graph. The good news is both surveys show a positive trend toward
    more sites using SSL:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00037.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Unlike the past, every website should now use HTTPS instead of plain text HTTP.
    Securing your website via HTTPS is about more than security—it is about building
    trust. When you implement HTTPS, you not only add a layer of security: Your customers
    can see that dedication to security and feel more comfortable about doing business
    with your brand. Most consumers and non technologists get the purpose of HTTPS.
    They don''t care about the technical implementation, they care about the trust.
    When you implement HTTPS, you are eliminating a layer of stress that your customer
    might have if you didn''t use HTTPS. SSL adds value to your overall user experience,
    and that is why search engines and browsers are pushing everyone toward HTTPS
    everywhere. There are several reasons why you should use HTTPS with every website.'
  prefs: []
  type: TYPE_NORMAL
- en: Different types of SSL certificate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SSL certificate can be organized into two types: **validation level** and **secured
    domains**.
  prefs: []
  type: TYPE_NORMAL
- en: Certificates can be issued for multiple domains and even wildcard domains. But
    because of the extended validation specification, these certificates can only
    be issued for a single domain, not multiple or wildcard domains. This is because
    of the sensitivity of the verification process.
  prefs: []
  type: TYPE_NORMAL
- en: There are a couple of different types of SSL certificates based on the method
    that you choose to confirm your identity. The three levels increase in complexity
    and vary in the type of information requested to validate the certificate.
  prefs: []
  type: TYPE_NORMAL
- en: Domain-validated certificates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **domain-validated SSL certificate** (**DV certificate**) is the most basic,
    and validates the domain associated with the SSL certificate that is registered.
    To validate a DV SSL certificate, the owner (or someone with admin rights) approves
    the certificate request via email or DNS.
  prefs: []
  type: TYPE_NORMAL
- en: The email recipient proves their administrative privileges over the domain by
    acknowledging receipt and sending confirmation to the provider. Additionally,
    they may be required to configure certain DNS records for the associated domain.
    The process may take a few minutes to a few hours to order and validate a DV certificate.
  prefs: []
  type: TYPE_NORMAL
- en: 'This should be the most common type of certificate used because any site can
    quickly install them for little or no cost. If your site might be the target of
    phishing or other forms of fraud, you should probably invest in a certificate
    that requires more authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00038.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Browsers will visually indicate a site that is served with proper HTTPS, typically
    with a green padlock. The domain-validated certificate is the minimal certificate
    required for this status.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows how FireFox displays the certificate''s information.
    Here is my current Love2Dev.com certificate, a domain-validated certificate:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00039.gif)'
  prefs: []
  type: TYPE_IMG
- en: You can see that it only lists the common name (domain) and leaves the Organization
    and Organizational Unit empty.
  prefs: []
  type: TYPE_NORMAL
- en: Organization-validated certificates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An **organization-validated SSL certificate** (**OV certificate**) validates
    the domain ownership, plus the organization information included in the certificate,
    such as the name, city, state, and country. The validation process is similar
    to that of the domain-validated certificate, but it requires additional documentation
    to certify the company's identity. The order can take up to a few days because
    of the company validation process.
  prefs: []
  type: TYPE_NORMAL
- en: Offers more company information and thus trust to the end user. Most consumers
    will never check the details of a certificate, but it can help convey more trust.
  prefs: []
  type: TYPE_NORMAL
- en: Extended-validation SSL certificates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Extended Validation SSL certificates** (**EV certificates**) require more
    company data validation than DV and OV certificates. Domain ownership, organization
    information, and legal proof and documentation are all required. The order may
    take from a few days to a few weeks because of the extended validation process.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A *green address bar* in the browser containing the company name is the distinguishing
    attribute of extended-validation certificates, and is an immediate reward for
    the extended-validation certificate. It is not really a green bar, but your organization''s
    name is listed in the address bar with a nice green font, indicating a trusted
    site, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00040.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Comparing an extended-validated certificate to the preceding example, the Organization
    and Organizational Unit fields have properties, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00041.gif)'
  prefs: []
  type: TYPE_IMG
- en: The OV and EV certificate types do not reflect an increase in the level of encryption;
    instead, these reflect a more stringent validation of the individual/company that
    owns the website domain. A good rule is that the more sensitive the data that
    your site manages, the higher the level of verification you should use.
  prefs: []
  type: TYPE_NORMAL
- en: If you do use an organizational- or extended-validated certificate, make sure
    you start the renewal process ahead of your expiration date. These certificates
    take days and weeks to issue because of the diligence required. If your certificate
    expires, you could go days without being properly secured.
  prefs: []
  type: TYPE_NORMAL
- en: How to obtain and install an SSL certificate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every server platform has its own steps to generate a certificate request and
    install an issued certificate. But the common steps include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Generate a **certificate signing request** (**CSR**)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Order an SSL certificate from a CA
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the intermediate certificate from the CA
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the intermediate certificate on the server
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are multiple certificate authorities to choose from today, such as GeoTrust,
    DigiCert, Symantec, and Network Solutions. You can compare the prices as well
    as the types of certificates that they offer to find the best solution for you.
    We will review the different types of certificates later in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Traditionally, you generate an unsigned key from your web server software or
    administration panel. This is usually a file with an encrypted string. You submit
    this file to the CA as part of the order process.
  prefs: []
  type: TYPE_NORMAL
- en: Once the verification process is complete, the CA will issue the certificate,
    another file. Your web server then allows you to install the certificate for the
    site.
  prefs: []
  type: TYPE_NORMAL
- en: Today, the process has become less manual. Many are making it an automated feature
    that is included with web server control panels. Many are including automated
    LetsEncrypt.org certificates.
  prefs: []
  type: TYPE_NORMAL
- en: WordPress ([https://wordpress.com/](https://wordpress.com/))is the biggest player
    to adopt an HTTPS-only policy. They upgraded all the sites that they host to HTTPS
    in 2017 using a built-in LetsEncrypt tool.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon AWS offers free certificates for Cloud Front and their network load-balancer
    services. These are domain-validated certificates, and take about 30 seconds to
    process; just a shining example of how far the SSL world has come since the mid
    90s.
  prefs: []
  type: TYPE_NORMAL
- en: Migrating a website to HTTPS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Regardless of whether you have a new or existing site, you should have a system
    to ensure that your site is implementing HTTPS correctly. Installing a certificate
    is just the start of the process. You must make sure that different aspects of
    your site are referencing HTTPS correctly.
  prefs: []
  type: TYPE_NORMAL
- en: This includes the links in your pages, handling links to your site, and your
    analytics and search engine profiles.
  prefs: []
  type: TYPE_NORMAL
- en: Even if your site uses HTTPS, the HTTP portion of any page that includes HTTP
    content can be read or modified by attackers. When an HTTPS page has HTTP content,
    it's called **mixed content**. You might think the page is secure, but it isn't
    because of the mixed content.
  prefs: []
  type: TYPE_NORMAL
- en: 'When a page has mixed content, browsers have visual queues to alert the user
    to the insecure state. You cannot rely on seeing https in the address bar—look
    for the green lock. The following screenshot shows an unsecured URL in the browser
    bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00042.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The image shows that Microsoft''s home page is not secure, even though the
    site is loaded via HTTPS. It contains references to insecure assets. The following
    screenshot is an example of what might be causing the problem:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00043.gif)'
  prefs: []
  type: TYPE_IMG
- en: There is more to migrating your site than just cleaning up asset references.
    This section should be a guide or checklist for you to define an HTTPS migration
    strategy for your websites.
  prefs: []
  type: TYPE_NORMAL
- en: As a bonus, this list can serve as a portion of your full site-readiness checklist
    because it includes several best practices that are often overlooked.
  prefs: []
  type: TYPE_NORMAL
- en: Auditing the site for any HTTP:// link references
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It does not matter if you have a single-page website or one that contains a
    million URLs, you need to audit each page for external `http://` link references.
    This include anchor tags as well as any link tags you may have in your document's
    head.
  prefs: []
  type: TYPE_NORMAL
- en: All third-party hosted assets, such as CSS, JavaScript libraries, images and
    fonts on public CDNs, as well as third-party services, such as **Google Analytics**
    (**GA**)**,** are prime targets for HTTP references. These are often overlooked
    because they are not "owned" by the business.
  prefs: []
  type: TYPE_NORMAL
- en: By now, any reputable third-party service offers HTTPS support. If it does not,
    you may need to require them to offer HTTPS or find a new provider it they refuse.
  prefs: []
  type: TYPE_NORMAL
- en: 'As with the preceding Microsoft example , you should also make sure that all
    references to assets in your site are either HTTPS or are simply absent of the
    protocol. This would update the site and be ready for any potential future protocols:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The best practice is to make all references protocol-less. Instead of changing
    all references to `https://`, change them to `//`. This approach is more forward-thinking
    because you are making any future communication protocols that may evolve easier
    to adapt.
  prefs: []
  type: TYPE_NORMAL
- en: When using a protocol-less reference, the user agent applies it to the primary
    protocol of the asset or external link. This way, the user should have a more
    seamless browsing experience.
  prefs: []
  type: TYPE_NORMAL
- en: Auditing content and data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google advises that you should consistently reference external URLs using the
    HTTPS protocol to send a clear signal to the ranking engine that your site has
    HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: Content, such as a blog or general text, is often entered by non developers
    through a content-management interface. This means that the raw content or site
    data is persisted in some form of a database, and would not be part of a source-code
    audit.
  prefs: []
  type: TYPE_NORMAL
- en: You could spider your entire site and produce a report. This could be done with
    a simple node module or some other utility. Similarly, you should also run a script
    over your site's persisted data for external HTTP references.
  prefs: []
  type: TYPE_NORMAL
- en: The key is to audit your entire site to identify these potential problems. Every
    website will require some form of custom audit and update process. I suggest you
    automate as much as you can; that way, you can rapidly make updates and repeat
    the process as part of your build.
  prefs: []
  type: TYPE_NORMAL
- en: Once you update content, deploy (preferably to a test server) and audit the
    results. Chances are that you missed some references and will need to address
    them. Correct those issues and try again, until you pass the test.
  prefs: []
  type: TYPE_NORMAL
- en: Updating social media links
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I wanted to highlight social media links as a common example of the previous
    step. All social media networks use HTTPS. Since most sites link to their social
    media profiles as part of the site's main layout, these should be the first links
    you update.
  prefs: []
  type: TYPE_NORMAL
- en: Because these links are typically contained in the site header, footer, or both,
    they propagate to every page. From a source code perspective, this app-shell file
    is a single file, and in audits like these, it is often overlooked.
  prefs: []
  type: TYPE_NORMAL
- en: When globally updating something, such as the protocol that is being used to
    reference a link, you need to audit your source code as well as your content.
    This includes every archetype file, such as the master and child layout files.
  prefs: []
  type: TYPE_NORMAL
- en: Configure server auto-redirect of HTTP to HTTPS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Legacy links and natural consumer tendency is to reference URLs via HTTP. Your
    web server should be configured to send a 301 redirect to the user agent telling
    them to permanently load the HTTPS address.
  prefs: []
  type: TYPE_NORMAL
- en: A 301 redirect is a permanent address change. You are telling the user agent
    that the address they are seeking is no longer valid, and to instead go to a new
    address. By redirecting HTTP to HTTPS, you are effectively telling the world not
    to ask for insecure content anymore.
  prefs: []
  type: TYPE_NORMAL
- en: This process varies by web server, so consult your platform's documentation
    for more guidance. Most servers can do this using a simple setting.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using a content-delivery network, and you should for any consumer
    site, you should be able to configure this redirection in your CDN configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'A `301` redirect works by receiving a request from a user agent and including
    a 301 header in the server''s response. For example, an HTTP request to `www.example.org`
    would look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The server returns a `301` response, which includes the permanent location,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You should also configure a proper 301 redirect any time you change your site's
    routing. When migrating from HTTP to HTTPS, you are changing every route in your
    site.
  prefs: []
  type: TYPE_NORMAL
- en: Add and verify all domain protocol combinations in webmaster tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The addition and verification of all domain protocol combinations in webmaster
    tools is another commonly overlooked migration task. If you are serious about
    search engine ranking, you will have your site properly registered with both Google
    and Bing's webmaster tools.
  prefs: []
  type: TYPE_NORMAL
- en: Details of both webmaster platforms is out of the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: The best practice is to register all four ways in which your site might be referenced.
    You should register both HTTP and HTTPS versions for your primary domain and the
    www. alias. If you do not have all four registered, you will not have a fully
    registered site, and may suffer some search engine ranking issues.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a canonical HTTPS link
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another SEO practice you might overlook is defining the canonical link. Google
    and other search engines use this as a signal to know the original source of the
    content. In this case, any reference using an HTTP URL will be considered a duplicate
    of the HTTPS version. Take the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You should update this to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This will avoid the duplicate content penalty, which in this case would dilute
    the link juice. By defining a `canonical` link, you are telling the search engine
    where to direct the ranking authority.
  prefs: []
  type: TYPE_NORMAL
- en: Updating Google analytics to default to HTTPS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another update you should make concerns your analytics service. Since GA is
    the most common consumer service, I will demonstrate how to update GA.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the current GA dashboard, there is an ADMIN option at the bottom of the
    menu, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00044.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'This brings up the administration for your site. The center column Property
    has a Property Settings option. Select it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00045.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Property Settings panel, change the Default URL to use the HTTPS protocol
    and save:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00046.gif)'
  prefs: []
  type: TYPE_IMG
- en: Updating the sitemap and RSS feed to HTTPS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just as you did with your site's source code and content, you should also make
    sure your `sitemal.xml` and RSS feed sources are updated to use HTTPS. These files
    are used by search engines and, of course, anyone that subscribes to your RSS
    feed. They serve as a known directory of your website.
  prefs: []
  type: TYPE_NORMAL
- en: The links in your sitemap are considered to be a source of authority to the
    search engines. Links in your RSS feed propagate to feed readers, and thus are
    the way many engaged visitors will enter your site. It is important that you bring
    them through the door in the best way.
  prefs: []
  type: TYPE_NORMAL
- en: Updating your robots.txt file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just in case your `robots.txt` file has full URLs, you should update those
    as well. Generally speaking, you include relative paths if you are allowing and
    disallowing access to spiders. One file you most likely have the full reference
    for is your `sitemap` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: While not as common, some sites maintain a `disavow` file for search engine
    spiders. They do this to avoid penalties from negative links. This file should
    also be updated to use `https://`, which reinforces the site's protocol profile
    with the search engines.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you can see, HTTPS is important to implement, but does require some diligence
    on your part to properly configure your site. As TLS, certificates, and HTTP advances,
    the barriers that previously held sites back from implementing HTTPS have been
    removed.
  prefs: []
  type: TYPE_NORMAL
- en: Progressive web applications require HTTPS because it is a higher level of user
    experience. They also require a registered service worker, which also requires
    HTTPS. HTTPS unlocks the modern web's capabilities; without it, your website is
    relegated to a smaller set of capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Because TLS ensures the conversation between the client and server is not altered
    by a man in the middle, and because eavesdropping is mitigated, all sites should
    adopt HTTPS. You are adding a level of trust for your customers, and opening the
    gates to the latest features the web has to offer.
  prefs: []
  type: TYPE_NORMAL
