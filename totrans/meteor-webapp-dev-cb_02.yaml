- en: Chapter 2. Customizing with Packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding Meteor packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing Meteor packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering new packages with Atmosphere
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a multipage application with Iron Router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a custom package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using npm modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing custom packages to Atmosphere
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The package system in Meteor makes your development life much easier. It also
    speaks to one of Meteor's core principles—modular development. If you want to
    use the entire default Meteor stack, great! If you don't like a particular part
    and want to swap it out with a third-party package, great! It's completely up
    to you. Meteor allows you to quickly add and remove functionality, use the latest
    code shared by others, and create your own reusable code segments. This chapter
    will provide you with the recipes needed to take full advantage of the Meteor
    packages system.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Meteor packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The core **Meteor Development Group** (**MDG**) have developed over 140 packages
    for you to use. These packages provide features and functionality ranging from
    simple display tweaks, to fully integrated account management. Not only are these
    packages useful, but they're extremely easy to add to your project. In addition
    to the core MDG packages, there are hundreds of third-party packages available,
    all of which are free and could be just as easily added. This recipe will show
    you how to add Meteor packages to your project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will need Meteor installed and have a project created. Any project will
    do. You should also have a terminal window open and navigate to the root folder
    of your project, for example, if the name of your project is `packagesTest`, located
    in the `~/Documents/MeteorProjects` folder, you would enter the following command
    in a terminal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's install the `fastclick` package as an example. This package removes the
    300 ms delay for mobile/touchscreens.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your terminal window, in the root folder, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This will install the bootstrap package into your project, with a message similar
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00330.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `meteor add [package name]` command tells Meteor to find the named package
    in the Meteor packages registry and copy the appropriate files over to your project.
    In addition, the package name is added to the declaration files of your project
    so that when Meteor starts up your project, the appropriate files for the named
    project are added and executed.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned, you can install third-party packages using the same `meteor add`
    command. The difference between a core MDG package and a third-party package is
    that third-party packages have the creator''s account ID as a prefix, for example,
    to add the excellent HammerJS package to your app, you need to enter the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Other recipes in this chapter will walk you through discovering and implementing
    third-party packages, so stay tuned!
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Discovering new packages with Atmosphere* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing Meteor packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Removing Meteor packages is just as easy as adding them. This recipe will show
    you how to quickly remove a Meteor package.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will need Meteor installed and have a project created. You should also
    have a terminal window open and navigate to the root folder of your project. For
    example, if the name of your project is `packagesTest`, located in the `~/Documents/MeteorProjects`
    folder, enter the following command in a terminal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s remove the `insecure` Meteor package. In your terminal window, enter
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This will remove the `insecure` package.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `meteor remove [package name]` command will direct Meteor to look for the
    named package in your project declaration files and remove the declaration and
    source files for the package from your project.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s sometimes very helpful to check and see which packages you have added
    to your project. To see this list, enter the following command in your terminal
    window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This will give you a quick list of all the packages contained in your project.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering new packages with Atmosphere
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Meteor is an emerging platform, growing in popularity every day. The Meteor
    community is coming up with new packages and integrations with existing JavaScript
    libraries on almost a daily basis. Because the core Meteor team doesn't have time
    to test and apply every new package made by the community, a package registry,
    with a streamlined installation process, has been created. This package registry
    is called Atmosphere. Atmosphere has a clean, simple UI, which allows you to search
    for, rate, and discover new packages by popularity. This recipe will show you
    how to use Atmosphere to find and implement both Meteor and third-party packages.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There's nothing really to do here, but you'll definitely want to have Meteor
    installed and a project created to start using the packages listed on Atmosphere
    right away!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To discover new packages with Atmosphere, proceed with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In a browser, navigate to [https://atmospherejs.com](https://atmospherejs.com).
    You should see a very simple page with a centered search input box. Let's look
    for the official Twitter `bootstrap` package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in the word `bootstrap` and watch the search results appear as you type.
    You should see something similar to the following screenshot:![How to do it…](img/image00331.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You'll notice that each card in the search results has some statistics at the
    bottom. The down arrow statistic is the number of downloads, which (with the age
    of the package) is the primary statistic in the search results ranking. You will
    see a star, which represents the number of developers that have favorited/starred
    the package. Finally, you will see a gray line in the background, indicating popularity
    over time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The second result (`twbs:bootstrap`) is the official Twitter Bootstrap package.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the `twbs:bootstrap` card and an overview of the package will appear.
    You will see additional information about the package. This includes usage instructions,
    a link to the GitHub repository (if available), an expanded history of the package,
    related packages, dependants, and dependencies. At the very top of the page will
    be the instructions to add the package to your project:![How to do it…](img/image00332.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can copy the text and execute it in a terminal window, in your root project
    folder, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After a brief download process, the official Bootstrap package will be installed
    in your project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As mentioned in the previous example, Atmosphere has several additional discovery
    options. There are links to the package contributors'' profiles (so you can see
    other packages they may have contributed to), as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00333.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'There are links to related packages, as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00334.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'There are links to dependants and dependencies as well, as shown in the following
    screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00335.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Any of these links will help you to discover other packages that will complement
    the original package and could be useful in your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Yet even more options exist for discovering packages in Atmosphere. If you
    navigate back to the home page at [https://atmospherejs.com/](https://atmospherejs.com/)
    and scroll down, you will see sections for **Trending**, **Most Used**, **Recent**,
    and **Top Searches**. All of these are worth perusing to discover some of the
    latest and greatest packages available for use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00336.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Feel free to explore and discover. You'll find some hidden gems in Atmosphere,
    and more than anything else, you'll come to realize that a Meteor package exists
    for almost everything. If it doesn't, create one yourself, with the *Building
    a custom package* recipe found later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Atmosphere site simply puts a user-friendly wrapper on top of the Meteor
    package repository. It does this very well, and the contributors/creators of the
    site are to be commended. Atmosphere is improving over time, and you can contribute
    to its success if you are so inclined. You can check out what's coming down the
    pipe by visiting the Atmosphere FAQ, found at [https://atmospherejs.com/i/faq](https://atmospherejs.com/i/faq).
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you''re in a hurry or really really love the command line, you can perform
    searches in a terminal window, in the root folder of your project. Here''s an
    example of a CLI-based search:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The results will be listed, with a brief explanation for each result, in alphabetical
    order:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more…](img/image00337.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Be sure to note that the results from this can be pretty hefty (there's no prioritization
    of results), so the effectiveness in using a CLI-based search will vary.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Building a custom package* and *Publishing custom packages to Atmosphere*
    recipes in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a multipage application with Iron Router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Iron Router is an extremely useful Atmosphere package. It allows you to quickly
    and easily add multiple server pages to your Meteor project. This recipe will
    show you how to configure your project to use Iron Router.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need to have Meteor installed. You will also need a blank Meteor project
    (see the *Setting up your project file structure* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Optimizing Your Workflow") , *Optimizing Your Workflow*).
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, you will need to add the Iron Router package to your Meteor project.
    You can reference the *Adding Meteor packages* recipe found previously in this
    chapter, or enter the following command in your terminal window, in the root folder
    of your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to create a very simple example of multiple pages and we will use
    a fresh blank project to do so.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, set up the route paths for the multiple pages. Create a subfolder called
    `router` in the `both` subfolder of your project. This can be done in a terminal
    window with the following command after navigating to the root folder of your
    project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create a new file named `router.js` in the `router` folder. Open the `router.js`
    file in a text editor, add the following code, and save your changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, open your `main.html` file, located in the `client` subfolder, in an
    editor. Add the following template declarations to the bottom of the file and
    save your changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, open the `main.js` file found at `[project folder]/client/scripts/main.js`
    in an editor. Locate the `Template.hello.events` method and change the ''`click
    button''` function body to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes to all the files and run your application using the `meteor`
    command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you navigate to your project''s home page in a browser (`http://localhost:3000/`),
    you should see something similar to the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00338.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Click on the button marked **Click Me**, or navigate to `http://localhost:3000/second/`
    and the screen should change to the following:![How to do it…](img/image00339.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can continue to toggle between the two pages by clicking on the onscreen
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Iron Router uses the path in your URL to invoke events in both the client and
    server. In most cases (unless you explicitly set the Iron Router path to render
    on the server, using the `where` parameter) the events and subsequent rendering
    happen in the client only.
  prefs: []
  type: TYPE_NORMAL
- en: In essence, Iron Router uses the path as an arguments list, invoking functions
    and rendering appropriate templates based on the information contained in the
    path.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s break down the code we just entered to get Iron Router up and running,
    starting with `router.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This code snippet tells Iron Router to use the `<template>` tag named `routeexample`
    as the main/default template for the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'We created the `routeexample` template in `main.html`, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The `yield` statement found in this template is known as the main yield. It
    is a placeholder for other templates that will be rendered once Iron Router completes
    its mapping process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Continuing, in `router.js`, we have the `Router.map` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This creates two mapped routes, using the `this.route` function. In each function
    call, the first parameter specifies the name of the route, and because we didn''t
    specify a specific template, it also implies the name of the template to use.
    In this case, we used the `thing1` and `thing2` templates, which we created in
    `main.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: These are very simple templates, and this is what makes them easy to understand
    for our example. Each template renders a simple `div` element with a message inside
    of it, indicating what page the user is on.
  prefs: []
  type: TYPE_NORMAL
- en: Going back to `router.js`, each `this.route` function call has a path argument
    inside of it. This path argument tells Iron Router what to look for in the URL
    to determine mapping. In the case of our first page (rendering the `thing1` template),
    the `path` element was set to "/", or the root path. In the case of our second
    page (rendering the `thing2` template), the `path` was set to "/second".
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, Iron Router was properly mapped, meaning this will have rendered
    the appropriate template based on the mapped routes. We wanted to make switching
    back and forth between the two routes easy, so we modified the `main.js` script
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now, when our button is clicked, we are checking to see whether the name of
    the currently mapped route (found using `Router.current().route.getName()`) is
    `thing1`. If it is, we tell Iron Router to change the currently rendered template
    (and the URL path) to our second template, named `thing2`, with a `path` value
    set to "/second". If the currently mapped route isn't `thing1`, then we toggle
    back to the original mapped route.
  prefs: []
  type: TYPE_NORMAL
- en: The `Router.go` statement changes the URL path, thereby setting events in motion
    to render the appropriate template and insert it into the main yield.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Iron Router is a very sophisticated and powerful package, with many helpful
    features including pre-rendering events, setting data context, and access to server-side
    functions. If you are looking to build a multipage Meteor application, you will
    want to peruse the full documentation, found at [https://github.com/EventedMind/iron-router](https://github.com/EventedMind/iron-router).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a complete app with Iron Router* recipe in [Chapter 12](part0088.xhtml#aid-2JTHG1
    "Chapter 12. Creating Useful Projects"), *Creating Useful Projects*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a custom package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you become more familiar with Meteor, you will want to start creating your
    own custom package, which consolidates the code you may find useful in multiple
    projects. This recipe will walk you through the basics of creating your own personal
    Meteor package.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The only thing you need for this recipe is Meteor and a text editor.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create a package that will allow us to easily write to the console in
    not only the client web console, but also in the server terminal console.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new baseline package, open a terminal window and navigate to where
    you would like your package to reside. Once there, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure you replace `[myMeteorID]` with your own Meteor Developer Account
    ID or with the ID of the Meteor organization you belong to, for example (and for
    the rest of this chapter), we will use the `packtmeteor` organization. So our
    command will look like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will now add the code for our package. Open the file named `testpack.js`
    and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save your changes and create a new file in the same folder named `servertestpack.js`.
    Open this file for editing and add the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now need to make a few modifications to `package.js`, to make sure our package
    will work properly. Open `package.js` and modify the `Package.onUse()` method
    to look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the following code inside the `Package.onUse()` method, just after
    the last `api.AddFiles()` call:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, modify the `Package.onTest()` method by removing the prefix from the
    test''s filename, like so:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save all your changes, and your package will be ready to be used in an application.
    Select a project you have underway, or create a default Meteor project using the
    `meteor create` command, and add a subfolder named `[project root]/packages/`.
    Copy the `testpack/` folder and paste it into the `[project root]/packages/` folder.
    Then, in a terminal window, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your custom package will be registered for use in your project, and you can
    now start your application:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open a browser, navigate to `http://localhost:3000` and open the web console.
    In the web console, enter the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see the following screen in the browser console:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00340.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'You should see the following in the server terminal console:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00341.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Congratulations! You've just created your own personal package.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Packages in Meteor are really just collections of organized files, with a configuration
    file that tells Meteor how to use those files.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we created a default package template using the `meteor create
    --package` command. Note that we followed the `[owner]:[package name]` naming
    convention, which Meteor requires if we want to publish this package on Atmosphere
    for others to use (refer to the *Publishing custom packages to Atmosphere* recipe
    in this chapter for details).
  prefs: []
  type: TYPE_NORMAL
- en: Once created, we added our functionality, which was very simple. We just called
    `console.log()` on the client and on the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we modified the configuration file, which is always named `package.js`.
    The following table shows the three sections that this file contains:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Package.describe()` | This contains the name, summary, and version number
    of our package. |'
  prefs: []
  type: TYPE_TB
- en: '| `Package.onUse()` | This lists dependencies and exposes the methods available
    in our package. |'
  prefs: []
  type: TYPE_TB
- en: '| `Package.onTest()` | This lists dependencies and test methods to be run during
    testing. |'
  prefs: []
  type: TYPE_TB
- en: For this recipe, we didn't modify the `Package.describe()` method. Meteor autocreated
    this section for us and gave us a *version number*, which is required.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Version numbers for packages follow the **Semantic Versioning Specification
    (SemVer)** specification (3 digits + an optional wrap, such as `1.0.2-rc_beta`).
    More information on the SemVer specification can be found at [http://semver.org/](http://semver.org/)
  prefs: []
  type: TYPE_NORMAL
- en: The bulk of our changes occurred in `Package.onUse()`, so we'll go through each
    item in this method.
  prefs: []
  type: TYPE_NORMAL
- en: The `api.versionsFrom()` method specifies which version of Meteor the core packages
    used in your package should come from. This comes in handy because Meteor is updated
    pretty regularly, and some of the dependencies needed to run your package may
    change in later versions. This method allows you to *freeze* the release versions
    of the dependency packages you use in your app to prevent compatibility issues.
  prefs: []
  type: TYPE_NORMAL
- en: The `api.addFiles()` method allows us to include files found in our package
    directory and to specify whether they are client or server-specific. In our case,
    we used `api.addFiles()` with a `client` parameter to tell Meteor that the `testpack.js`
    file was client-specific. We then used a `server` parameter to tell Meteor that
    the `servertestpack.js` file was server-specific.
  prefs: []
  type: TYPE_NORMAL
- en: We then used the `api.export()` method to declare/expose the `TestPack` object.
    This is what enabled us to use the `TestPack.log()` call in the browser's web
    console.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we have the `Package.onTest()` method. It contains two `api.use()`
    method calls, which declare the package dependencies needed to run the `testpack-test.js`
    file during testing.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `api.use()` method isn't exclusive to testing. You can use it in the `Package.onUse()`
    method as well to include the MDG core or third-party packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'After completing our modifications, we copied our entire package over to the
    `packages/` subfolder in our project. This is necessary for any non-deployed package.
    When you use the `meteor add` command to add a package, Meteor checks for the
    package in two places: in the online Meteor package repository (Atmosphere) and
    in the `[project root]/packages/` subfolder. In this case, because our package
    isn''t deployed to Atmosphere, we had a copy of our package in the `packages/`
    subfolder.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Several other options exist for configuring packages (some of which are included
    in other recipes in this chapter). A complete list of these can be found in the
    Meteor documentation, found at [http://docs.meteor.com/#/full/packagejs](http://docs.meteor.com/#/full/packagejs).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using npm modules* and *Publishing custom packages to Atmosphere* recipes
    in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Building custom server methods* recipe in [Chapter 11](part0083.xhtml#aid-2F4UM1
    "Chapter 11. Leveraging Advanced Features"), *Leveraging Advanced Features*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using npm modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Node Package Manager** (**NPM**) has thousands of modules available. Knowing
    how to add an npm module for use in your Meteor project gives you access to all
    of those modules. This recipe will show you how to do this.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need to make sure that you have Meteor and Node/npm installed.
  prefs: []
  type: TYPE_NORMAL
- en: You will also need a project that makes use of a custom-built package. We will
    be using the project from the *Building a custom package* recipe, found in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We first need to add a reference to the npm package that we would like to add,
    which in this case is going to be the `colors` module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside your custom package (the one in the `packages/` subfolder of your app),
    in the `package.js` file, add an `Npm.depends` statement to the end of the file,
    as shown in the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we need to add an `Npm.require` reference to the `colors` module and change
    our `console.log()` command to use a rainbow of fruit flavors. Change your `server-test.js`
    file so it looks like the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save your changes and we are ready to test our updated package. Navigate to
    `http://localhost:3000` in a browser, open the browser web console, and execute
    the following command a few times:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you switch to your console window, you should see a multicolored response,
    as shown in the following screenshot:![How to do it…](img/image00342.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Npm.depends` declaration in `package.js` tells Meteor that whenever it
    starts, it needs to go and install the npm modules listed. In this case, we are
    telling Meteor to go and fetch the `colors` module, version `0.6.2`, from the
    npm registry.
  prefs: []
  type: TYPE_NORMAL
- en: The `Npm.require` function call in `server-test.js` makes the `colors` module
    functionality available on the server. Now, any time we make a `console.log()`
    call, the string passed into the call can have a `.color` reference added to it.
    In our case, we chose `.rainbow`, which makes every letter from the string printed
    out to the console appear in a different color.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To see all the various options available in the npm `colors` module, visit [https://npmjs.org/package/colors](https://npmjs.org/package/colors).
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use any npm module you would like in a custom Meteor package. Some of
    them rely on asynchronous methods and events, so you will have to wrap those modules
    with specific asynchronous Meteor methods. You can read more about these methods
    in [Chapter 11](part0083.xhtml#aid-2F4UM1 "Chapter 11. Leveraging Advanced Features"),
    *Leveraging Advanced Features*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using npm packages directly* recipe in [Chapter 8](part0069.xhtml#aid-21PMQ1
    "Chapter 8. Integrating Third-party Libraries"), *Integrating Third-party Libraries*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Handling asynchronous methods and using asynchronous functions* recipe
    in [Chapter 11](part0083.xhtml#aid-2F4UM1 "Chapter 11. Leveraging Advanced Features"),
    *Leveraging Advanced Features*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing custom packages to Atmosphere
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you've created a useful package and want to share it with the world, Atmosphere
    is the way to go. This recipe will show you how to upload your custom package
    to Atmosphere and provides some best practices for maintaining your package moving
    forward.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create a quick Atmosphere package, please complete the *Using npm modules*
    recipe found in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will also need to create a blank repository on GitHub. Assuming you have
    a GitHub login, navigate to the home page ([https://github.com](https://github.com))
    and create a new repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00343.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Add a title and description to your repository and click on the button marked
    **Create repository**.
  prefs: []
  type: TYPE_NORMAL
- en: To populate your new Git repository, you will need the Git URL, which can be
    copied from the home page of your new Git project. It should look something like
    [https://github.com/strack/packt-testpack.git](https://github.com/strack/packt-testpack.git).
  prefs: []
  type: TYPE_NORMAL
- en: Remember this URL, as you will be using it to populate the content of your new
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To register and upload our package, we need to check our configuration file,
    upload our code to GitHub, and then deploy our package.
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure `package.js`, open the `package.js` file found in the root folder
    of your package. In our case, the file is located at `[project root]/packages/testpack/package.js`.
    We will first modify the summary, as shown in the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we will add the GitHub URL to the `git` property:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will notice that the documentation property references the `README.md`
    file, which means that our GitHub documentation will serve a dual purpose. Open
    `README.md` and add the following line:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To push the code to GitHub, save all of your files and navigate to the root
    folder of your package (not the root folder of your application) in a terminal
    window. In our case, the root folder is `[project root]/packages/testpack/`. Enter
    the following lines to populate the GitHub repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To publish to Atmosphere, call `meteor publish` with the following command
    once it is completed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Voila! You have added your package to Atmosphere.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We deployed all packages directly from the `packages` subfolder of an application.
    A best practice is to develop and deploy your package on its own, independent
    of any application. Refer to the *Building a custom package* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see your package live on Atmosphere by navigating to [https://atmospherejs.com](https://atmospherejs.com)
    and searching for it by name, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00344.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As with any other Meteor package found in Atmosphere, you can add it to any
    of your projects using the `meteor add` command in the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Atmosphere reads the `package.js` file for the data that needs to be published,
    checks to make sure all information is accurate, and then publishes a link to
    your project from a GitHub repository. In this specific case, we added a summary
    to our file, specified the GitHub URL in the `git` property, and (after creating
    the GitHub repository) called `meteor publish` to deploy packages.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: More instructions on how to publish to Atmosphere can be found at [https://atmospherejs.com/i/publishing](https://atmospherejs.com/i/publishing).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding Meteor packages* and *Discovering new packages with Atmosphere*
    recipes in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
