- en: Chapter 4. Creating a Bar Graph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have examined binding data and generating SVG visuals with D3, we
    will turn our attention to creating a bar graph using SVG in this chapter. The
    examples in this chapter will utilize an array static of integers, and use that
    data to calculate the height of bars, their positions, add labels to the bars,
    and add margins and axes to the graph to assist the user in understanding the
    relationships in the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a series of bars that are bound to data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating the position and height of the bars
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a group to uniformly position multiple elements representing a bar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding margins to the graph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and manipulating the style and labels in an axis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding an axis to the graph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The basic bar graph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have explored everything that we need to draw a series of bars based upon
    data in the first three chapters. The first example in this chapter will leverage
    using SVG rectangles for drawing the bars. What we need to do now is calculate
    the size and position of the bars based upon the data.
  prefs: []
  type: TYPE_NORMAL
- en: The code for our bar graph is available at the following location. Open this
    link in your browser, and we will walk through how the code creates the visual
    that follows.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (4.1): [http://goo.gl/TQo2sX](http://goo.gl/TQo2sX)'
  prefs: []
  type: TYPE_NORMAL
- en: '![The basic bar graph](img/B04230_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The code starts with a declaration of the data that is to be represented as
    a graph. This example uses a hard-coded array of integers. We will look at more
    complex data types later in the book; for now, we simply start with this to get
    used to the process of binding and that of creating the bars:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we define two variables that define the width of each bar and the amount
    of spacing between each bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We need to scale the height of each bar relative to the maximum value in the
    data. This is determined by using the `d3.max()` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we create the main SVG element by placing it inside the body of the document,
    and assign a width and height that we know will hold our visual. Finally, and
    as a matter of practice that will be used throughout this book, we will append
    a top-level group element in the SVG tag. We will then place our bars within this
    group instead of placing them directly in the SVG element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I find this practice of using a top-level group useful as it facilitates placing
    multiple complex visuals in the same SVG, such as in the case of creating a dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we are not going to scale the data, and use an assumption that
    the container is the proper size to hold the graph. We will look at better ways
    of doing this, as also for calculating the positions of the bars, in [Chapter
    5](ch05.html "Chapter 5. Using Data and Scales"), *Using Data and Scales*. We
    simply strive to keep it simple for the moment.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to perform two pieces of math to be able to calculate the *x* and *y*
    location of the bars. We are positioning these bars at pixel locations starting
    at the bottom and the left of `graphGroup`. We need two functions to calculate
    these. The first one calculates the *x* location of the left side of the bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: During binding, this will be passed the current datum and its position within
    the `data` array. We do not actually need the value for this calculation. We simply
    calculate a multiple of the sum of the width and padding for the bar based upon
    the array position.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since SVG uses an upper-left origin, we need to calculate the distance from
    the top of the graph as the location from where we start drawing the bar down
    towards the bottom of the visual:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'When we position each bar, we will use a translate transform that takes advantage
    of each of these functions. We can facilitate this by declaring a function which,
    given the current data item and its array position, returns the calculated string
    for the transform property based upon this data and the functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'All we need to do now is generate the SVG visuals from the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Pretty good for just a few lines of code. But all we can tell from the graph
    is the relative sizes of the data. We need more information than this to get an
    effective data visualization.
  prefs: []
  type: TYPE_NORMAL
- en: Adding labels to the bars
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we will add a label holding the value of the datum right at the top of
    each bar. The code for this example is available at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (4.2): [http://goo.gl/3ltkHT](http://goo.gl/3ltkHT)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image demonstrates the resulting visual:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding labels to the bars](img/B04230_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To accomplish this, we will modify our SVG generation such that:'
  prefs: []
  type: TYPE_NORMAL
- en: Each bar is represented by an SVG group instead of a `rect`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside each group that represents a bar, we add an SVG and a text element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The group is then positioned, hence positioning the child elements as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The size of the `rect` is set as before, causing the containing group to expand
    to the same size.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The text is positioned relative to the upper-left corner of its containing group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By grouping these elements in this manner, we can reuse the previous code for
    positioning, and utilize the benefit of the group for locating all the child visuals
    for a bar. Moreover, we only need to size and position those child elements relative
    to their own group, making that math very simple. The code for this is identical
    to the previous example through the declaration of the positioning functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first change is in the creation of the selector that represents the bars:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Instead of creating a `rect`, the code now creates a group element. The group
    is initially empty, and it is assigned the transform that moves it into the appropriate
    position.
  prefs: []
  type: TYPE_NORMAL
- en: Using the selector referred to by `barGroups`, the code now appends a `rect`
    into each group while also setting the appropriate attributes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The next step is to add a `text` element to show the value of the datum. We
    are going to position this text such that it is right at the top of the bar, and
    centered in the bar.
  prefs: []
  type: TYPE_NORMAL
- en: 'To accomplish this, we need a translate transform that represents an offset
    halfway into the bar and at the top. This is common for each bar, so we can define
    a variable that is reused for each:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Next, the we append a text element into each group, setting its text (the string
    value of the datum), the appropriate attributes for the text, and finally, the
    style for the font.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: That was pretty easy, and it is nice to have the labels on the bars, but our
    graph could still really use axes. We will look at adding those next.
  prefs: []
  type: TYPE_NORMAL
- en: Margins and axes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding axes to the graph will give the reader a much better understanding of
    the scope of the graph and the relationship between the values in the data. D3.js
    has very powerful constructs built in for allowing us to create axes.
  prefs: []
  type: TYPE_NORMAL
- en: Axes in D3.js are based upon another concept known as scales. While scales are
    by themselves very useful (we will cover scales in more detail in [Chapter 5](ch05.html
    "Chapter 5. Using Data and Scales"), *Using Data and Scales*), for the remainder
    of this chapter, we will examine using them to create basic axes in our bar chart.
  prefs: []
  type: TYPE_NORMAL
- en: However, before we get to axes, we will first take a short but important diversion
    into the concept of margins, and that of adding a margin to our bar chart to make
    room for the axes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating margins in the bar graph
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Margins have several practical uses in a graph. They can be used to provide
    spacing between the graph and other content on the page, giving the reader clean
    sightlines between their visualization and the other content. However, the real
    practical use of margins is to provide space on one or more sides of the visualization
    for providing axes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image demonstrates what we want to accomplish with margins:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating margins in the bar graph](img/B04230_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The grey portion is where we will place our existing graph. Then, depending
    upon the axes that we decide to use (left, top, right, bottom), we need to provide
    space in our visualization for rendering those axes just outside the graph. Note
    that a single graph could use any or all of the margins for different axes, so
    it is a good practice to build code that plans for all of them.
  prefs: []
  type: TYPE_NORMAL
- en: In D3.js applications, this is generally performed using a concept referred
    to as **margin convention**. We will step through an example of using this concept
    to add margins to our graph. Additionally, instead of using a static size for
    our layout, we will compute the height and width of the graph based upon the number
    of data points in this example.
  prefs: []
  type: TYPE_NORMAL
- en: To get started, load the example from the following information box.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (4.3): [http://goo.gl/HTZ2NG](http://goo.gl/HTZ2NG)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The resulting visualization for the code is seen in the following graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating margins in the bar graph](img/B04230_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Besides the margins, this example adds a grey background to the area behind
    the chart. This highlights the area used for the chart, and emphasizes it relative
    to the margins that are added. It also puts a rectangle around the main SVG element
    to highlight its boundaries, as it helps us see the extent of the margins added
    to the graph.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s step through this example and examine how it differs from the previous
    example. We start with calculating the actual width of the area of the bars:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we declare a JavaScript object that will represent the size of our margins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Using these values, we can calculate the total size of the entire visualization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can create the main SVG element, and set it to the exact size that it
    needs to be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'For the visual effect, the following adds a rectangle that shows us the boundaries
    of the main SVG element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we add a group to hold the main part of the graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'To emphasize the area of the actual graph, a grey `rect` is added to the group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The remainder of the code remains the same.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we have added margins around the graph, and made room on the
    left side for an axis to be drawn. Before we put that in the visualization, let's
    first take a look at an example of creating an axis to learn some of the concepts
    involved.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an axis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To demonstrate the creation of an axis, we will start with creating an axis
    appropriate for placement at the bottom of the graph, referred to as a **bottom**
    axis. This is the default type of axis created with D3.js. So we will start with
    it, and then examine changing the orientation after looking at a few concepts
    related to axes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code for the example that we will walk through, and which
    results in the generation of the subsequent axis:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (4.4): [http://goo.gl/TyDAH6](http://goo.gl/TyDAH6)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an axis](img/B04230_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In our example, we create the scale and axis with the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: To create an axis, we first need to create a **scale** object using `d3.scale()`.
    A scale informs the axis about the range of values it will represent (known as
    the **domain**), and the overall size for which the axis should be rendered in
    the visual (referred to as the **range**). In this example, we are using a **linear**
    scale. A linear scale informs the axis that the values will be linearly interpolated
    from the lower to the higher value, in this case, 0 to 210.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: D3.js scales have uses for things other than axes. We will examine these uses
    in [Chapter 5](ch05.html "Chapter 5. Using Data and Scales"), *Using Data and
    Scales*.
  prefs: []
  type: TYPE_NORMAL
- en: The axis is then created using the `d3.svg.axis()` function, and by passing
    it the scale by chaining a call to `.scale()`.
  prefs: []
  type: TYPE_NORMAL
- en: The axis scale then needs to be associated with a selection, which is performed
    using the `.call()` function. This informs D3.js that when it renders the visual
    that it should call the axis function to render itself.
  prefs: []
  type: TYPE_NORMAL
- en: This feels a little different than the way we have created visual elements so
    far. This technique is used by D3.js because an axis is a complex set of SVG elements
    that need to be generated. The use of `.call()` allows us to separate complex
    rendering logic into a function call during the rendering pipeline, and the design
    of D3.js was made to render axes in this manner.
  prefs: []
  type: TYPE_NORMAL
- en: The labels on the axis are automatically generated by D3.js, and are based upon
    the values of the domain. The visualized size of the axis is specified by the
    range. In this case, since this is a bottom axis, the labelling starts at the
    minimum value of 0, and D3.js uses intervals of 20 for the labels. The last label
    that fits is 200, so D3.js does not actually create a label for the maximum value
    of 210.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the output, the label 0 is clipped. This is because the axis is positioned
    flush to the left of the SVG element. This orientation is such that the line in
    the axis is flush. Since the text for the first label is center-justified on the
    tick, its left half gets clipped. This can be fixed easily with a translation,
    which we will examine when we place the axis next to our graph.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inspecting the rendered axis using Developer tools, you will see the effort
    that D3.js has made to generate the axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an axis](img/B04230_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What D3.js has done is generate a group for each tick on the axis and a single
    path that renders the line of the axis. Each tick group itself consists of a line
    that represents the tick on the axis and the label on the tick.
  prefs: []
  type: TYPE_NORMAL
- en: Examining the output, you will notice that we do not actually see any ticks
    along the axis. This makes it difficult to realize the actual point on the axis
    that is associated with the label. This is due to the default styling that is
    used. We will make this axis look better in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The reason we could not see the ticks on our axis is due to the default thickness
    of the path representing the axis. We can change this by simply modifying the
    style of the path representing the axis as well as the style of the ticks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the following example in your browser to learn how to accomplish this:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (4.5): [http://goo.gl/xmSf2g](http://goo.gl/xmSf2g)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an axis](img/B04230_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This code makes a few small modifications to be able to change the style as
    shown in the following section of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The first change is that we create a group, represented by the variable `axisGroup`,
    to hold the axis that is generated. This will be used so that we can select the
    SVG elements in the axis representing the ticks and the axis line, and change
    their styles.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's good practice to always put the axes in a group. This facilitates style
    changes like the one we are performing in this example. Moreover, it is almost
    always the case that the axis needs to be translated into a specific position
    in the visualization. An axis itself cannot be translated, so placing it in a
    group element and then transforming the group accomplishes this task.
  prefs: []
  type: TYPE_NORMAL
- en: 'Secondly, the code captures the nodes that result from the generation of the
    axis in the `axisNodes` variable. Using `axisNode`, we can then perform two more
    selections to find specific elements in the axis: one for the element with the
    `domain` class, and the other for the line elements with the `line` class. Using
    the results of each of these two selections, the code then sets the `fill`, `stroke`,
    and `stroke-width` properties to make them all one pixel thick black lines.'
  prefs: []
  type: TYPE_NORMAL
- en: Changing the axis orientation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'D3.js axes can be rendered into four different orientations using the `.orient()`
    function on the axis, passing it the name of the orientation that is desired.
    The following table shows the orientation names that can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `''top''` | Horizontal axis, with ticks and labels above the axis line. |'
  prefs: []
  type: TYPE_TB
- en: '| `''bottom''` | Horizontal axis, with ticks and labels below the axis line
    (default) |'
  prefs: []
  type: TYPE_TB
- en: '| `''left''` | Vertical axis, with ticks and labels to the left of the axis
    line |'
  prefs: []
  type: TYPE_TB
- en: '| `''right''` | Vertical axis, with ticks and labels to the right of the axis
    line |'
  prefs: []
  type: TYPE_TB
- en: Essentially, each of these relate to one of the four sides of a graph, such
    as the margins that were covered earlier. There is no effect of this function
    on the location of the axis in the visual (we have to do that ourselves). Instead,
    it decides whether the axis line is horizontal or vertical, and also if the labels
    are on the top or bottom of a horizontal axis or to the left or right of a vertical
    axis.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate this, we will quickly inspect the top, right, and left orientations.
    Open the following link for an example of a top axis:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (4.6): [http://bl.ocks.org/d3byex/8791783ee37ab76a8517](http://bl.ocks.org/d3byex/8791783ee37ab76a8517)'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two small modifications from the previous example. The primary change
    is that when we create the axis, we make a call to `.orient(''top'')`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The second change is that we need to translate the axis down the *Y* axis.
    We do this using the following statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the preceding example is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the axis orientation](img/B04230_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The orientation has moved the label and ticks to the top of the axis line instead
    of below.
  prefs: []
  type: TYPE_NORMAL
- en: The need for a transform is perhaps a little more subtle. If the axis was not
    transformed, all that we would see in the result is a single black line at the
    top of the rendering. This is because the positioning of an axis is relative to
    the path rendering the axis line. In this case, the line would be at *y = 0*,
    and the ticks and text would be clipped as they are above the line and not visible.
  prefs: []
  type: TYPE_NORMAL
- en: Now open the code for the following example, which renders a right-oriented
    axis. We will not examine the code, as it is a single simple change of calling
    `.orient('right')`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (4.7): [http://goo.gl/H16kEo](http://goo.gl/H16kEo)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The result of the preceding code is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the axis orientation](img/B04230_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The following example demonstrates a left-oriented axis. This is again a simple
    change of the parameter to `.orient()`. Additionally, the code also translates
    the axis to the right a bit, as the the ticks and labels would be clipped off
    the left.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (4.8): [http://goo.gl/CNEFyV](http://goo.gl/CNEFyV)'
  prefs: []
  type: TYPE_NORMAL
- en: 'And the results are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the axis orientation](img/B04230_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Inverting the labels on an axis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We want to place a left axis on our bar chart, essentially the output of example
    *4.8*. But if you examine the axis. you will notice that the labels are increasing
    from the top to the bottom. Our graph represents **0** at the bottom with values
    increasing upwards. This axis will not be appropriate for our graph.
  prefs: []
  type: TYPE_NORMAL
- en: 'This inversion of labels is a very simple change to the code. Open the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (4.9): [http://goo.gl/wsm9Ab](http://goo.gl/wsm9Ab)'
  prefs: []
  type: TYPE_NORMAL
- en: The code is identical to example *4.8* except for one change.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We change the order of the values passed to the domain, which will essentially
    reverse the order of the labels. This gives us the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inverting the labels on an axis](img/B04230_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The labels have been reversed into the order that we desire. Note now that the
    label 0 is clipped at the bottom. We will fix this in our next example when we
    combine the axis with the bar graph.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the axis to the graph
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We now have everything that we need to create a bar graph with an axis. Essentially,
    we only need to combine the code from example *4.3* with the axis code from example
    *4.9*. The following example does exactly this:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (4.10): [http://goo.gl/MsKhUk](http://goo.gl/MsKhUk)'
  prefs: []
  type: TYPE_NORMAL
- en: 'And the result is the following graph, which is exactly what we wanted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the axis to the graph](img/B04230_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The code in this example is identical to the one in example *4.3* up to the
    point where we create the group to contain the axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The change here is the translation of the axis along the *X* axis by the width
    of the left margin, and down the *Y* axis by the size of the top margin. For aesthetics,
    the code simply renders the axis with three pixels of padding.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Also note that since we have margin space at the bottom, the **0** label is
    no longer truncated.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you extended your knowledge of using D3 to create a bar graph
    from a collection of integers. You learned how to position and size each element
    of the graph according to its data, and how to position groups of data that contain
    multiple visuals representing a single bar—specifically, how to add a label that
    represents the value of the underlying datum at the top of a bar.
  prefs: []
  type: TYPE_NORMAL
- en: We then examined the facilities in D3.js for creating axes. We introduced the
    concept of a scale, which is an important facet of implementing axes. We further
    examined the different orientations available for an axis, and how to invert the
    order of the labels on an axis. Finally, we combined the axis and the bar graph
    together into an effective visualization of the data.
  prefs: []
  type: TYPE_NORMAL
- en: As great as our bar chart looks in this example, we will still have several
    issues. The overall size of the graph was related to the actual values of the
    data. This was convenient for demonstrating the construction of a bar graph visualization,
    but what if the values are not integers, or if the values are extremely small
    or large? We might not see the bars at all, or the bars may be so large as to
    exceed the size of the main SVG element.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will address these issues by learning more about scales.
    Scales will provide an exceptionally easy means of mapping data into the physical
    dimensions of a visualization. You will also learn about loading data from external
    sources, and about working with data that is more complex in structure than simple
    integers.
  prefs: []
  type: TYPE_NORMAL
