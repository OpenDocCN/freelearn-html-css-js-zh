["```js\napps/\n-- admin/\n-- api/\n-- auth/\n-- frontstore/\n-- shared/\ncore/\n---- helpers/\n---- middlewares\n---- models\n---- services\nconfig/\n---- environments/\n---- strategies\ntests/\n```", "```js\n'use strict';\n\nconst DEF_CURRENCY = 'USD';\nconst DEF_SCALE_FACTOR = 100;\n\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\nconst ObjectId = Schema.ObjectId;\n\nconst MoneySchema = new Schema({\n  amount:   { type: Number, default: 0 },\n  currency: { type: String, default: DEF_CURRENCY },\n  factor:   { type: Number, default: DEF_SCALE_FACTOR }\n}, {\n  _id:      false,\n  toObject: { virtuals: true },\n  toJSON:   { virtuals: true }\n});\n\nMoneySchema\n.virtual('display')\n.set(function(value) {\n  if (value) {\n    this.set('amount', value * this.factor);\n  }\n})\n.get(function() {\n  return this.amount / this.factor;\n});\n\nmodule.exports = mongoose.model('Money', MoneySchema);\n```", "```js\nvar price = new Money();\nprice.display = 18.99;\nconsole.log(price.toObject());\n// { amount: 1899, currency: 'USD', factor: 100, display: 18.99 }\n```", "```js\n'use strict';\n\nconst mongoose = require('mongoose');\nconst Money = require('./money').schema;\nconst commonHelper = require('../helpers/common');\nconst Schema = mongoose.Schema;\nconst ObjectId = Schema.ObjectId;\nconst Mixed = Schema.Types.Mixed;\n\nconst ProductSchema = new Schema({\n  sku:          { type: String, required: true },\n  category:     { type: String },\n  title:        { type: String, required: true },\n  summary:      { type: String },\n  description:  { type: String },\n  slug:         { type: String },\n  images:       { type: [\n    {\n      caption:  { type: String },\n      filename: { type: String }\n    }\n  ] },\n  price:        { type: Money },\n  details:      { type: Mixed },\n  active:       { type: Boolean, default: false }\n});\n\nmodule.exports = mongoose.model('Product', ProductSchema);\n```", "```js\nProductSchema.pre('save', function(next) {\n  this.slug = commonHelper.createSlug(this.title);\n  next();\n});\n```", "```js\n'use strict';\n\nconst mongoose = require('mongoose');\nconst Money = require('./money').schema;\nconst Schema = mongoose.Schema;\nconst ObjectId = Schema.ObjectId;\nconst Mixed = Schema.Types.Mixed;\n\nconst OrderSchema = new Schema({\n  identifier:   { type: String },\n  user:         { type: ObjectId, ref: 'User' },\n  type:         { type: String, default: 'cart' },\n  status:       { type: String, default 'active' },\n  total:        { type: Money },\n  details:      { type: Mixed },\n  shipping:     { type: Mixed },\n  items:        { type: [\n    {\n      sku:      { type: String },\n      qty:      { type: Number, default: 1},\n      title:    { type: String },\n      price:    { type: Money },\n      product:  { type: ObjectId, ref: 'Product' }\n    }\n  ]},\n  expiresAt:    { type: Date, default: null },\n  updatedAt:    { type: Date, default: Date.now },\n  createdAt:    { type: Date, default: Date.now }\n},  {\n  toObject:     { virtuals: true },\n  toJSON:       { virtuals: true }\n});\n\nmodule.exports = mongoose.model('Order', OrderSchema);\n```", "```js\n'use strict';\n\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\nconst ObjectId = Schema.ObjectId;\nconst Mixed = Schema.Types.Mixed;\n\nconst InventorySchema = new Schema({\n  sku:            { type: String },\n  status:         { type: String, default: 'available' },\n  qty:            { type: Number, default: 0 },\n  carted:         { type: [\n    { type: {\n        sku:      { type: String },\n        qty:      { type: Number, default: 1 },\n        order:    { type: ObjectId, ref: 'Order' },\n        product:  { type: ObjectId, ref: 'Product' }\n      }\n    }\n  ]},\n  createdAt:      { type: Date, default: Date.now }\n});\n\nmodule.exports = mongoose.model('Inventory', InventorySchema);\n```", "```js\n    'use strict';\n\n    const MAX_PRODUCT_SHOWN = 50;\n    const _ = require('lodash');\n    const Product = require('../models/product');\n\n    class ProductCatalog {\n      constructor() {\n      }\n    }\n\n    module.exports = ProductCatalog;\n    ```", "```js\n      constructor(opts, ProductModel) {\n        opts = opts || {};\n        this.maxProductsShown = opts.maxProductsShown || MAX_PRODUCT_SHOWN;\n        this.Product = ProductModel || Product;\n      }\n    ```", "```js\n      add(data, callback) {\n        this.Product.create(data, callback);\n      }\n    ```", "```js\n      edit(sku, data, callback) {\n        //  remove sku; this should not change,\n        //  add a new product if it needs to change\n        delete data.sku;\n\n        this.Product.findBySKU(sku, (err, product) => {\n          if (err) {\n            return callback(err);\n          }\n\n          _.assign(product, data);\n          //  tell mongoose to increment the doc version `__v`\n          product.increment();\n          product.save(callback);\n        });\n      }\n    ```", "```js\n      list(query, limit, skip, callback) {\n        if (typeof query === 'funciton') {\n          callback = limit;\n          limit = this.maxProductsShown;\n          skip = 0;\n        }\n\n        // make sure we only allow retriving `50` products from the catalog\n        if (+limit > this.maxProductsShown) {\n          limit = this.maxProductsShown;\n        }\n\n        this.Product.find(query).limit(limit).skip(skip).exec(callback);\n      }\n    ```", "```js\n      details(sku, callback) {\n        this.Product.findBySKU(sku, callback);\n      }\n    ```", "```js\n      detailsBySlug(slug, callback) {\n        this.Product.findBySlug(slug, callback);\n      }\n    Remove a product:\n      remove(sku, callback) {\n        this.Product.findBySKU(sku, (err, product) => {\n          if (err) {\n            return callback(err);\n          }\n\n          product.remove(callback);\n        });\n      }\n    ```", "```js\nconst ProductCatalog = require('../../core/services/product-catalog');\n\n// … rest of the required modules\n\ndescribe('Product catalog', () => {\n  let mongoose;\n  let Product;\n  let productCatalog;\n  let productData = { ... };  //  will hold the product related data\n\n  before(done => {\n    mongoose = require('../../config/mongoose').init();\n    productCatalog = new ProductCatalog();\n    // … more code\n    done();\n  });\n\n  it('should add a new product to the catalog', done => {\n    productCatalog.add(productData, (err, product) => {\n      if (err) { throw err; }\n\n      should.exist(prod);\n      prod.title.should.equal('M.E.A.N. Blueprints');\n      done();\n    });\n  });  \n});\n```", "```js\n      it('should create an inventory item for a product', done => {\n        inventoryManager.create({\n          sku: 'MEANB',\n          qty: 1\n        }, (err, inventoryItem) => {\n          if (err) throw err;\n\n          should.exist(inventoryItem);\n          inventoryItem.sku.should.equal('MEANB');\n          inventoryItem.qty.should.equal(1);\n          done();\n        });\n      });\n    ```", "```js\n      it('should reserve an item if there is enough on stock', done => {\n        inventoryManager.reserve('MEANB', new mongoose.Types.ObjectId(), 2, (err, result) => {\n          if (err) throw err;\n\n          should.exist(result);\n          result.sku.should.equal('MEANB');\n          done();\n        });\n      });\n    ```", "```js\n      it('should not reserve an item if there is not enough on stock', done => {\n        inventoryManager.reserve('MEANB', new mongoose.Types.ObjectId(), 2, (err, result) => {\n          should.not.exist(result);\n          should.exist(err);\n          err.message.should.equal('Stock lever is lower then the desired quantity.');\n          err.status.should.equal(409);\n          err.type.should.equal('not_enough_stock_units')\n          done();\n        });\n      });\n    ```", "```js\n      it('should increase the quantity for an inventory unit', done => {\n        inventoryManager.increase('MEANB', 5, (err, inventory) => {\n          if (err) throw err;\n\n          inventory.qty.should.equal(6);\n          done();\n        });\n      });\n    ```", "```js\n      it('should decrease the quantity for an inventory unit', done => {\n        inventoryManager.decrease('MEANB', 2, (err, inventory) => {\n          if (err) throw err;\n\n          inventory.qty.should.equal(4);\n          done();\n        });\n      });\n    ```", "```js\n    'use strict';\n\n    const Inventory = require('../models/inventory');\n\n    class InventoryManager {\n      constructor() {}\n    }\n\n    module.exports = InventoryManager;\n    ```", "```js\n      constructor(opts, InventoryModel) {\n        this.opts = opts || {};\n        this.Inventory = InventoryModel || Inventory;\n      }\n    ```", "```js\n      create(data, callback) {\n        data.carted = [];\n        this.Inventory.create(data, callback);\n      }\n    ```", "```js\n      _modifyQuantity(sku, qty, reduce, callback) {\n        qty = (reduce) ? qty * -1 : qty;\n\n        this.Inventory.update({\n          sku: sku\n        }, {\n          $inc: { qty: qty }\n        }, (err, result) => {\n          if (err) {\n            return callback(err);\n          }\n\n          if (result.nModified === 0) {\n            let err = new Error('Nothing modified.');\n            err.type = 'nothing_modified';\n            err.status = 400;\n            return callback(err);\n          }\n\n          this.Inventory.findOne({ sku: sku }, callback);\n        });\n      }\n    ```", "```js\n      increase(sku, quantity, callback) {\n        this._modifyQuantity(sku, quantity, false, callback);\n      }\n\n      decrease(sku, quantity, callback) {\n        this._modifyQuantity(sku, quantity, true, callback);\n      }\n    Reserve the quantity in the inventory:\n      reserve(sku, orderId, quantity, callback) {\n        let query = {\n          sku: sku,\n          qty: { $gte: quantity }\n        };\n\n        let update = {\n          $inc: { qty: -quantity },\n          $push: {\n            carted: {\n              qty: quantity,\n              order: orderId\n            }\n          }\n        };\n\n        this.Inventory.update(query, update, (err, result) => {\n          if (err) {\n            return callback(err);\n          }\n\n          if (result.nModified === 0) {\n            let err = new Error('Stock lever is lower then the desired quantity.');\n            err.type = 'not_enough_stock_units';\n            err.status = 409;\n            return callback(err);\n          }\n\n          callback(null, {\n            sku: sku,\n            order: orderId,\n            qty: quantity\n          });\n        });\n      }\n    ```", "```js\n'use strict';\n\nconst EXPIRATION_TIME = 15*60; // 15 minutes\nconst commonHelper = require('../helpers/common');\nconst Order = require('../models/order');\nconst InventoryManager = require('./inventory-manager');\nconst ProductCatalog = require('./product-catalog');\n\nclass ShoppingCart {\n}\n\nmodule.exports = ShoppingCart;\n```", "```js\n  constructor(opts, OrderModel, ProductService, InventoryService) {\n    InventoryService = InventoryService || InventoryManager;\n    ProductService = ProductService || ProductCatalog;\n    this.opts = opts || {};\n    this.opts.expirationTime = this.opts.expirationTime || EXPIRATION_TIME;\n    this.Order = OrderModel || Order;\n    this.inventoryManager = new InventoryService();\n    this.productCatalog = new ProductService();\n  }\n```", "```js\n  createCart(userId, data, callback) {\n    data.user = userId;\n    data.expiresAt = commonHelper.generateExpirationTime(this.opts.expirationTime);\n    this.Order.create(data, callback);\n  }\n```", "```js\n  addProduct(cartId, sku, qty, callback) {\n    this.productCatalog.findBySKU(sku, (err, product) => {\n      if (err) {\n        return callback(err);\n      }\n\n      let prod = {\n        sku: product.sku,\n        qty: qty\n        title: product.title,\n        price: product.price,\n        product: product._id\n      };\n\n      //  push carted items into the order\n      this._pushItems(cartId, prod, (err, result) => {\n        if (err) {\n          return callback(err);\n        }\n\n        //  reserve inventory\n        this.inventoryManager.reserve(product.sku, cartId, qty, (err, result) => {\n          //  roll back our cart updates\n          if (err && err.type === 'not_enough_stock_units') {\n            return this._pullItems(cartId, sku, () => callback(err));\n          }\n\n          // retrive current cart state\n          this.findById(cartId, callback);\n        });\n      });\n    });\n  }\n```", "```js\n  _pushItems(cartId, prod, callback) {\n    let exdate = commonHelper.generateExpirationTime(this.opts.expirationTime);\n    let now = new Date();\n    //  make sure the cart is still active and add items\n    this.Order.update({\n      { _id: cartId, status: 'active' },\n      {\n        $set: { expiresAt: exdate, updatedAt: now },\n        $push: { items: prod }\n      }\n    }, (err, result) => {\n      if (err) {\n        return callback(err);\n      }\n\n      if (result.nModified === 0) {\n        let err = new Error('Cart expired.');\n        err.type = 'cart_expired';\n        err.status = 400;\n        return callback(err);\n      }\n\n      //  TODO: proper response\n      callback(null, result);\n    });\n  }\n```", "```js\n  _pullItems(cartId, sku, callback) {\n    this.Order.update({\n      { _id: cartId },\n      { $pull: { items: { sku: sku } } }\n    }, (err, result) => {\n      if (err) {\n        return callback(err);\n      }\n\n      if (result.nModified === 0) {\n        let err = new Error('Nothing modified.');\n        err.type = 'nothing_modified';\n        err.status = 400;\n        return callback(err);\n      }\n\n      //  TODO: proper response\n      callback(null, result);\n    });\n  }\n```", "```js\n    'use strict'\n\n    const express = require('express');\n    const router = express.Router();\n    const Controller = require('./controller');\n\n    class Auth {\n    }\n    ```", "```js\n      constructor(config, core, app) {\n        this.core = core;\n        this.controller = new Controller(core);\n        this.app = app;\n        this.router = router;\n        this.rootUrl = '/auth';\n        this.regiterRoutes();\n        this.app.use(this.rootUrl, this.router);\n      }\n    ```", "```js\n      regiterRoutes() {\n        this.router.post('/register', this.controller.register);\n\n        /**\n         *  Stateful authentication\n         */\n        this.router.post('/signin', this.controller.signin);\n        this.router.get('/signout', this.controller.signout);\n\n        /**\n         *  Stateless authentication\n         */\n        this.router.post('/basic', this.controller.basic);\n      }\n    ```", "```js\n    const Auth = require('./apps/auth');\n    let auth = new Auth(config, core, app);\n    ```", "```js\n      signin(req, res, next) {\n        passport.authenticate('local', (err, user, info) => {\n          if (err || !user) {\n            return res.status(400).json(info);\n          }\n\n          req.logIn(user, function(err) {\n            if (err) {\n              return next(err);\n            }\n\n            res.status(200).json(user);\n          });\n        })(req, res, next);\n      }\n    ```", "```js\n      basic(req, res, next) {\n        passport.authenticate('basic', (err, user, info) => {\n          if (err) {\n            return next(err);\n          }\n\n          if (!user) {\n            return res.status(400).json({ message: 'Invalid email or password.' });\n          }\n\n          Token.generate({ user: user.id }, (err, token) => {\n            if (err) {\n              return next(err);\n            }\n\n            if (!token) {\n              return res.status(400).json({ message: 'Invalid email or password.' });\n            }\n\n            const result = user.toJSON();\n            result.token = _.pick(token, ['hash', 'expiresAt']);\n\n            res.json(result);\n          });\n\n        })(req, res, next);\n      }\n    ```", "```js\n      register(req, res, next) {\n        const userData = _.pick(req.body, 'name', 'email', 'password');\n\n        User.register(userData, (err, user) => {\n          if (err && (11000 === err.code || 11001 === err.code)) {\n            return res.status(400).json({ message: 'E-mail is already in use.' });\n          }\n\n          if (err) {\n            return next(err);\n          }\n\n          // just in case :)\n          delete user.password;\n          delete user.passwordSalt;\n\n          res.json(user);\n        });\n      }\n    ```", "```js\n'use strict';\n\nconst ProductsRoutes = require('./routes/products');\nconst ProductController = require('./controllers/product');\n\nclass Api {\n  constructor(config, core, app) {\n    let productController = new ProductController(core);\n    let productRoutes = new ProductsRoutes(core, productController);\n\n    this.config = config;\n    this.core = core;\n    this.app = app;\n    this.root = app.get('root');\n    this.rootUrl = '/api';\n\n    this.app.get('/api/status', (req, res, next) => {\n      res.json({ message: 'API is running.' });\n    });\n\n    this.app.use(this.rootUrl, productRoutes.router);\n  }\n}\n\nmodule.exports = Api;\n```", "```js\n    'use strict';\n\n    const _ = require('lodash');\n\n    let productCatalog;\n\n    class ProductsController {\n      constructor(core) {\n        this.core = core;\n        productCatalog = new core.services.ProductCatalog();\n      }\n    Add the create product method:\n      create(req, res, next) {\n        productCatalog.add(req.body, (err, product) => {\n          if (err && err.name === 'ValidationError') {\n            return res.status(400).json(err);\n          }\n\n          if (err) {\n            return next(err);\n          }\n\n          res.status(201).json(product);\n        });\n      }\n    ```", "```js\n      getAll(req, res, next) {\n        const limit = +req.query.limit || 10;\n        const skip = +req.query.skip || 0;\n        const query = {} // you cloud filter products\n\n        productCatalog.list(query, limit, skip, (err, products) => {\n          if (err) {\n            return next(err);\n          }\n\n          res.json(products);\n        });\n      }\n    Implement a method that retrieves a single product:\n      getOne(req, res, next) {\n        productCatalog.details(req.params.sku, (err, product) => {\n          if (err) {\n            return next(err);\n          }\n\n          res.json(product);\n        });\n      }\n    ```", "```js\n'use strict';\n\nconst express = require('express');\nconst router = express.Router();\n\nclass ProductsRoutes {\n  constructor(core, controller) {\n    this.core = core;\n    this.controller = controller;\n    this.router = router;\n    this.authBearer = this.core.authentication.bearer;\n    this.regiterRoutes();\n  }\n\n  regiterRoutes() {\n    this.router.post(\n      '/products',\n      this.authBearer(),\n      this.controller.create\n    );\n\n    this.router.get(\n      '/products',\n      this.authBearer(),\n      this.controller.getAll\n    );\n\n    this.router.get(\n      '/products/:sku',\n      this.authBearer(),\n      this.controller.getOne\n    );\n  }\n}\n\nmodule.exports = ProductsRoutes;\n```", "```js\nfunction bearerAuthentication(req, res, next) {\n  return passport.authenticate('bearer', { session: false });\n}\n```", "```js\napps/\n-- shared/\n---- public\n------ assets/\n---- index.js\n```", "```js\n'use strict';\n\nconst path = require('path');\nconst serveStatic = require('serve-static');\n\nclass Shared {\n  constructor(config, core, app) {\n    this.app = app;\n    this.root = app.get('root');\n    this.rootUrl = '/';\n    this.serverStaticFiles();\n  }\n\n  serverStaticFiles() {\n    let folderPath = path.resolve(this.root, __dirname, './public');\n    this.app.use(this.rootUrl, serveStatic(folderPath));\n  }\n}\n\nmodule.exports = Shared;\n```", "```js\n'use strict';\n\nconst path = require('path');\nconst serveStatic = require('serve-static');\n\nclass Admin {\n  constructor(config, core, app) {\n    this.app = app;\n    this.root = app.get('root');\n    this.rootUrl = '/admin';\n    this.serverStaticFiles();\n  }\n\n  serverStaticFiles() {\n    let folderPath = path.resolve(this.root, __dirname, './public');\n    this.app.use(this.rootUrl, serveStatic(folderPath));\n  }\n}\n\nmodule.exports = Admin;\n```", "```js\n  private request(requestArgs: RequestOptionsArgs, additionalArgs?: RequestOptionsArgs) {\n    let opts = new RequestOptions(requestArgs);\n\n    if (additionalArgs) {\n      opts = opts.merge(additionalArgs);\n    }\n\n    let req:Request = new Request(opts);\n\n    if (!req.headers) {\n      req.headers = new Headers();\n    }\n\n    if (!req.headers.has('Authorization')) {\n      req.headers.append('Authorization', `Bearer ${this.getToken()}`);\n    }\n\n    return this._http.request(req).catch((err: any) => {\n      if (err.status === 401) {\n        this.unauthorized.next(err);\n      }\n\n      return Observable.throw(err);\n    });\n  }\n```", "```js\n  private getToken() {\n    return localStorage.getItem('token');\n  }\n```", "```js\n  public setCurrentUser(user: any) {\n    this.currentUser.next(user);\n  }\n\n  private _initSession() {\n    let user = this._deserialize(localStorage.getItem('currentUser'));\n    this.currentUser = new BehaviorSubject<Response>(user);\n    // persist the user to the local storage\n    this.currentUser.subscribe((user) => {\n      localStorage.setItem('currentUser', this._serialize(user));\n      localStorage.setItem('token', user.token.hash || '');\n    });\n  }\n```", "```js\nauth/\n-- components/\n-- services/\n-- index.ts\n```", "```js\nexport * from './services/auth-http';\n```", "```js\nimport { AuthHttp } from './auth/index';\n```", "```js\nimport { AuthHttp } from './auth/services/auth-http';\n```", "```js\nimport { Injectable } from 'angular2/core';\nimport { Http, Response, Headers } from 'angular2/http';\nimport { Observable } from 'rxjs/Observable';\nimport { ProductService } from './product.service';\nimport { contentHeaders } from '../common/headers';\nimport { Product } from './product.model';\n\ntype ObservableProducts = Observable<Array<Product>>;\n\n@Injectable()\nexport class ProductService {\n  public products: ObservableProducts;\n\n  private _authHttp: AuthHttp;\n  private _productsObservers: any;\n  private _dataStore: { products: Array<Product> };\n\n  constructor(authHttp: Http) {\n    this._authHttp = authHttp;\n    this.products = new Observable(observer => this._productsObservers = observer).share();\n    this._dataStore = { products: [] };\n  }\n}\n```", "```js\n  getAll() {\n    this._authHttp\n    .get('/api/products', { headers: contentHeaders })\n    .map((res: Response) => res.json())\n    .subscribe(products => {\n      this._dataStore.products = products;\n      this._productsObservers.next(this._dataStore.products);\n    });\n  }\n```", "```js\nimport { Component, OnInit } from 'angular2/core';\nimport { ProductService } from '../product.service';\nimport { Router, RouterLink } from 'angular2/router';\nimport { Product } from '../product.model';\n\n@Component({\n    selector: 'product-list',\n    directives: [RouterLink],\n    template: `\n      <div class=\"product-list row\">\n        <h2 class=\"col\">Products list</h2>\n        <div *ngIf=\"products.length === 0\" class=\"empty-product-list col\">\n          <h3>Add your first product to you catalog</h3>\n        </div>\n        <div class=\"col col-25\">\n          <a href=\"#\" [routerLink]=\"['ProductCreate']\" class=\"add-product-sign\">+</a>\n        </div>\n        <div *ngFor=\"#product of products\" class=\"col col-25\">\n          <img src=\"img/208x140?text=product+image&txtsize=18\" />\n          <h3>\n            <a href=\"#\"\n              [routerLink]=\"['ProductEdit', { sku: product.sku }]\">\n              {{ product.title }}\n            </a>\n            </h3>\n        </div>\n      </div>\n    `\n})\nexport class ProductListComponent implements OnInit {\n  public products: Array<Product> = [];\n  private _productService: ProductService;\n\n  constructor(productService: ProductService) {\n    this._productService = productService;\n  }\n\n  ngOnInit() {\n    this._productService.products.subscribe((products) => {\n      this.products = products\n    });\n    this._productService.getAll();\n  }\n}\n```", "```js\nimport { Component } from 'angular2/core';\nimport { RouteConfig, RouterOutlet } from 'angular2/router';\nimport { ProductListComponent } from './product-list.component';\nimport { ProductEditComponent } from './product-edit.component';\nimport { ProductCreateComponent } from './product-create.component';\n\n@RouteConfig([\n  { path: '/', as: 'ProductList', component: ProductListComponent, useAsDefault: true },\n  { path: '/:sku', as: 'ProductEdit', component: ProductEditComponent },\n  { path: '/create', as: 'ProductCreate', component: ProductCreateComponent }\n])\n@Component({\n    selector: 'product-component',\n    directives: [\n      ProductListComponent,\n      RouterOutlet\n    ],\n    template: `\n      <div class=\"col\">\n        <router-outlet></router-outlet>\n      </div>\n    `\n})\nexport class ProductComponent {\n  constructor() {}\n}\n```", "```js\n    'use strict';\n\n    const express = require('express');\n    const nunjucks = require('nunjucks');\n    const router = express.Router();\n    const ProductController = require('./controllers/products');\n\n    class Storefront {\n      constructor(config, core, app) {\n        this.config = config;\n        this.core = core;\n        this.app = app;\n        this.router = router;\n        this.rootUrl = '/';\n        this.productCtrl = new ProductController(core);\n        this.configureViews();\n        this.regiterRoutes();\n        this.app.use(this.rootUrl, this.router);\n      }\n    }\n    ```", "```js\n      configureViews() {\n        let opts = {};\n\n        if (!this.config.nunjucks.cache) {\n          opts.noCache = true;\n        }\n\n        if (this.config.nunjucks.watch) {\n          opts.watch = true;\n        }\n\n        let loader = new nunjucks.FileSystemLoader('apps/frontstore/views', opts);\n\n        this.nunjucksEnv = new nunjucks.Environment(loader);\n        this.nunjucksEnv.express(this.app);\n      }\n    ```", "```js\n      registerRoutes() {\n        this.router.get('/', this.productCtrl.home);\n      }\n    ```", "```js\n'use strict';\n\nlet productCatalog;\n\nclass ProductsController {\n  constructor(core) {\n    this.core = core;\n    productCatalog = new core.services.ProductCatalog();\n  }\n\n  home(req, res, next) {\n    productCatalog.list({}, 10, 0, (err, products) => {\n      if (err) {\n        next(err);\n      }\n\n      res.render('home', { products: products });\n    });\n  }\n}\n\nmodule.exports = ProductsController;\n```", "```js\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>ecommerce</title>\n    {% include \"includes/stylesheets.html\" %}\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"app-wrapper card whiteframe-z2\">\n\n        {% block header %}\n        <header>\n          <div class=\"row\">\n            <div class=\"col\">\n              <h1><a href=\"#\">Awesome store</a></h1>\n              <span class=\"pull-right\">{{ currentUser.email }}</span>\n            </div>\n          </div>\n        </header>\n        {% endblock %}\n\n        <div class=\"row\">\n          {% block content %}{% endblock %}\n        </div>\n\n      </div>\n    <div>\n    {% block footer %}\n    <footer></footer>\n    {% endblock %}\n  </body>\n</html>\n```", "```js\n<link href='https://fonts.googleapis.com/css?family=Work+Sans' rel='stylesheet' type='text/css'>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/assets/css/style.css\">\n```", "```js\n{% extends \"layout.html\" %}\n\n{% block content %}\n  <div class=\"product-list row\">\n    <div class=\"col\">\n    {% for product in products %}\n      {% include \"partials/product.html\" %}\n    {% endfor %}\n    </div>\n  </div>\n{% endblock %}\n```", "```js\n<div class=\"col col-25 product-item\">\n  <a href=\"{{ baseUrl }}/products/{{ product.slug }}\">\n    <img src=\"img/208x140?text=product+image&txtsize=18\" />\n  </a>\n  <h2>\n    <a href=\"{{ baseUrl }}/products/{{ product.slug }}\">{{ product.title }}</a>\n  </h2>\n  <p>{{ product.summary }}</p>\n  <p>price: {{ product.price.display }} {{ product.price.currency}}</p>\n  <p><button class=\"button\">add to cart</button></p>\n</div> \n```"]