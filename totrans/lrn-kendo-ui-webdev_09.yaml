- en: Chapter 9. Implementing the Splitter and TreeView Widgets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 9 章 实现分隔符和树视图小部件
- en: In this chapter, you will learn about two different widgets from the Kendo UI
    Web framework, the Splitter widget and the TreeView widget. The Splitter widget
    is a tool used for organizing content inside of a web page. It creates block-like
    regions within the web page that can contain normal page elements or even additional
    Splitter widget controls to further subdivide the content area. The TreeView widget
    is a tool used for displaying data that is organized hierarchically, such as in
    tree. A good example of data organized this way is a folder structure on a hard
    drive. Folders can contain files or additional folders. When diagrammed, this
    creates a nested structure such as a tree and is well suited for the TreeView
    widget.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解来自 Kendo UI Web 框架的两个不同小部件，即分隔符小部件和树视图小部件。分隔符小部件是一个用于在网页内部组织内容的工具。它创建网页内的块状区域，可以包含常规页面元素，甚至还可以包含额外的分隔符小部件控件以进一步细分内容区域。树视图小部件是一个用于显示以层次结构组织的数据的工具，例如在树中。这种方式组织的数据的一个很好的例子是硬盘上的文件夹结构。文件夹可以包含文件或额外的文件夹。当绘制时，这会创建一个嵌套结构，如树，非常适合树视图小部件。
- en: The Splitter widget
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分隔符小部件
- en: The Kendo UI Splitter widget is a powerful tool for creating a dynamic page
    layout. It generates bordered sections within a web page that can be resized,
    scrolled, collapsed, and nested. These sections are built on top of `div` elements
    and extend these underlying `div` elements with impressive functionality. As you
    see how to use this widget throughout this section, I am sure you can imagine
    many ways of putting it to use.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Kendo UI 分隔符小部件是创建动态页面布局的强大工具。它在一个网页内生成可调整大小、可滚动、可折叠和嵌套的边框区域。这些区域建立在 `div` 元素之上，并扩展了这些底层
    `div` 元素的令人印象深刻的函数。当你看到本节中如何使用此小部件时，我相信你可以想象出许多使用它的方法。
- en: Learning the Splitter widget
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习分隔符小部件
- en: The Kendo UI Splitter widget is designed to extend `div` HTML elements into
    flexible content areas that can split up elements of your web pages, hence the
    name "splitter". These content areas become resizable blocks that allow the user
    to choose which portions of a page should occupy more of the visible screen. Each
    of these blocks can be configured with specific behaviors and options, such as
    scroll bars and the ability to collapse page elements with a single click.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Kendo UI 分隔符小部件旨在将 `div` HTML 元素扩展为灵活的内容区域，这些区域可以分割网页上的元素，因此得名“分隔符”。这些内容区域变为可调整大小的块，使用户可以选择页面的哪些部分应该占据更多的可见屏幕。每个这些块都可以配置特定的行为和选项，例如滚动条和通过单次点击折叠页面元素的能力。
- en: 'Here is a sample of some HTML markup that can be used with the Kendo UI Splitter
    widget. Take special note of how the `div` elements are organized and nested;
    it will become important when you see the JavaScript code that instantiates the
    Kendo objects:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些可以与 Kendo UI 分隔符小部件一起使用的 HTML 标记的示例。请注意 `div` 元素的组织和嵌套；当你看到实例化 Kendo 对象的
    JavaScript 代码时，这将成为重要的一点：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The outer-most `div`, the one with the `id` value of `outerSections`, contains
    three `div` elements between its tags. You can also see that each of these `div`
    elements beneath the `outerSections` `div` contain child `div` elements of their
    own. These child elements will become Kendo UI Splitter widget sections within
    the larger `outerSections` area. Two of these child `div` elements, `topSubSections`
    and `bottomSubSections`, also contain a further nested hierarchy that will become
    nested Kendo UI Splitter widget sections within the `outerTopSection` and `outerBottomSection`
    areas respectively.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最外层的 `div`，其 `id` 值为 `outerSections`，在其标签之间包含三个 `div` 元素。你还可以看到，这些位于 `outerSections`
    `div` 之下的每个 `div` 元素都包含自己的子 `div` 元素。这些子元素将成为更大 `outerSections` 区域内的 Kendo UI
    分隔符小部件部分。其中两个子 `div` 元素，`topSubSections` 和 `bottomSubSections`，还包含一个更进一步的嵌套层次结构，它将成为分别在
    `outerTopSection` 和 `outerBottomSection` 区域内的嵌套 Kendo UI 分隔符小部件部分。
- en: 'In this JavaScript code block, you can see that there are three `kendoSplitter`
    widgets created independently. The first Splitter widget is organized in a vertical
    sequence; it is the outer-most area and will contain the following two Splitter
    widget objects within itself. The second and third Splitter widget areas are organized
    horizontally and are nested within other Splitter widget objects, as you will
    see in the following screenshot:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在此 JavaScript 代码块中，你可以看到创建了三个独立的 `kendoSplitter` 小部件。第一个 Splitter 小部件按垂直顺序组织；它是最外层区域，并将包含以下两个
    Splitter 小部件对象。第二个和第三个 Splitter 小部件区域按水平组织，并嵌套在其他 Splitter 小部件对象中，正如你将在以下屏幕截图中所看到的：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![Learning the Splitter widget](img/4346OT_09_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![学习 Splitter 小部件](img/4346OT_09_01.jpg)'
- en: You can see the three Splitter widget areas that are stacked vertically down
    the page. The top-most area contains two horizontally stacked areas inside of
    it. The bottom-most area contains three horizontally stacked areas. These all
    match to the HTML and JavaScript code that you just saw.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到三个垂直堆叠在页面上的 Splitter 小部件区域。最上面的区域包含其中两个水平堆叠的区域。最下面的区域包含三个水平堆叠的区域。这些都与你刚才看到的
    HTML 和 JavaScript 代码相匹配。
- en: Loading content
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载内容
- en: 'The contents of the Splitter widget areas you just saw were all empty for the
    sake of demonstration. This is not necessary, however. The content areas can contain
    all of the normal HTML content that a `div` element would normally contain. For
    example, you could fill some of the areas up with text, as done in the following
    code snippet:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚才看到的 Splitter 小部件区域的内容都是空的，只是为了演示。然而，这并不是必要的。内容区域可以包含所有 `div` 元素通常包含的正常 HTML
    内容。例如，你可以在以下代码片段中填充一些区域，如下所示：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This text will now appear within the Splitter widget box and be resized or
    collapsed as necessary:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此文本现在将出现在 Splitter 小部件框内，并根据需要调整大小或折叠：
- en: '![Loading content](img/4346OT_09_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![加载内容](img/4346OT_09_02.jpg)'
- en: Loading content with AJAX
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 AJAX 加载内容
- en: A more configurable method of populating the contents of these Splitter widget
    areas is to load it via AJAX calls. To enable this functionality, simply use the
    `contentUrl` property of the JavaScript object literal that defines a Splitter
    widget content area and indicate the page that you want to load via AJAX. The
    Kendo UI Framework will take care of the rest for you.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 AJAX 调用来填充这些 Splitter 小部件区域内容的一种更可配置的方法是加载它。要启用此功能，只需使用定义 Splitter 小部件内容区域的
    JavaScript 对象字面量的 `contentUrl` 属性，并通过 AJAX 指定要加载的页面。Kendo UI 框架将为您处理其余部分。
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Loading content with AJAX](img/4346OT_09_03.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![使用 AJAX 加载内容](img/4346OT_09_03.jpg)'
- en: Hooking into Splitter events
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 钩入 Splitter 事件
- en: The Kendo UI Splitter widget is equipped with a range of rich behaviors. Most
    of these behaviors, whether enacted through a user action or through a method
    call, trigger an event. Like any event in JavaScript, you can attach your own
    event handler functions to these events and respond to the actions with your own
    custom code. This section will show the different events available on the Kendo
    UI Splitter widget and demonstrate how to hook into them.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Kendo UI Splitter 小部件配备了一系列丰富的行为。这些行为中的大多数，无论是通过用户操作还是通过方法调用执行，都会触发一个事件。像 JavaScript
    中的任何事件一样，你可以将这些事件附加到自己的事件处理器函数，并使用自己的自定义代码对这些动作做出响应。本节将展示 Kendo UI Splitter 小部件上可用的不同事件，并演示如何将其钩入。
- en: The collapse event
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 折叠（collapse）事件
- en: 'The `collapse` event fires when a user collapses a Kendo UI Splitter widget
    section by clicking on the collapse icon between two of the panes. This icon appears
    as a small triangle that is pointing in the direction that the `collapse` action
    will move it. The following is the code that is used to wire up the `collapse`
    event with an event handler:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户通过点击两个窗格之间的折叠图标来折叠 Kendo UI Splitter 小部件的某个部分时，将触发 `collapse` 事件。此图标显示为一个指向
    `collapse` 动作将移动的方向的小三角形。以下是将 `collapse` 事件与事件处理器连接的代码：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The contentLoad event
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: contentLoad 事件
- en: 'The `contentLoad` event fires when content is loaded into a Kendo UI Splitter
    widget pane. The normal use of this event is to react to the point when AJAX content
    has finished loading from the remote source. The following is the code that is
    used to wire up the `contentLoad` event with an event handler:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当内容被加载到 Kendo UI Splitter 小部件的窗格中时，将触发 `contentLoad` 事件。此事件的正常用途是在 AJAX 内容从远程源完成加载时做出反应。以下是将
    `contentLoad` 事件与事件处理器连接的代码：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The expand event
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 展开（expand）事件
- en: 'The `expand` event fires when a Kendo UI Splitter widget pane is expanded by
    a user clicking on the expand icon after a pane has been collapsed. This icon
    appears as small triangle pointing in the direction that the pane will expand
    when clicked, as shown here:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击展开图标将 Kendo UI Splitter 小部件的面板展开时，将触发 `expand` 事件。当面板折叠后，此图标将显示为一个指向面板展开方向的三角形，如下所示：
- en: '![The expand event](img/4346OT_09_04.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![展开事件](img/4346OT_09_04.jpg)'
- en: 'The following is the code that is used to wire up the `expand` event with an
    event handler:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将 `expand` 事件与事件处理程序连接的代码：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The layoutChange event
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`layoutChange` 事件'
- en: 'The `layoutChange` event fires when the layout of a Kendo UI Splitter widget
    has changed. This event is more generic than `expand`, `collapse`, and `resize`,
    so it will often appear in conjunction with those events since all of them also
    indicate that the layout has changed. The following is the code that is used to
    wire up the `layoutChange` event with an event handler:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Kendo UI Splitter 小部件的布局发生变化时，将触发 `layoutChange` 事件。此事件比 `expand`、`collapse`
    和 `resize` 更通用，因此它通常与这些事件一起出现，因为所有这些事件也都表示布局已更改。以下是将 `layoutChange` 事件与事件处理程序连接的代码：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The resize event
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`resize` 事件'
- en: 'The `resize` event is fired when a user drags the handle between two Kendo
    UI Splitter widget panes in order to resize them. This event is also triggered
    during `collapse` and `expand`. The following is the code that is used to wire
    up the `resize` event with an event handler:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户拖动两个 Kendo UI Splitter 小部件面板之间的手柄以调整它们的大小时，将触发 `resize` 事件。此事件在 `collapse`
    和 `expand` 期间也会被触发。以下是将 `resize` 事件与事件处理程序连接的代码：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Making calls to Splitter API methods
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调用 Splitter API 方法
- en: The Kendo UI Splitter widget is equipped with a range of methods that enable
    its rich behaviors. Most of these methods, when fired, trigger an event. Like
    any event in JavaScript, you can attach your own event handler functions to these
    events and respond to the actions with your own custom code. This section will
    show the different methods available on the Kendo UI Splitter widget.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Kendo UI Splitter 小部件配备了一系列方法，使其具有丰富的行为。大多数这些方法在触发时都会引发一个事件。像 JavaScript 中的任何事件一样，您可以将自己的事件处理程序函数附加到这些事件上，并使用自己的自定义代码响应用户的操作。本节将展示
    Kendo UI Splitter 小部件上可用的不同方法。
- en: Getting a reference to the splitter object
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取 Splitter 对象的引用
- en: 'The first thing to remember when working with methods on all Kendo UI widgets
    is that you must get a reference to the JavaScript object before these methods
    are available. To do this, you must use the JavaScript method `.data()`. Here
    is an example:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理所有 Kendo UI 小部件上的方法时，首先要记住的是，在可以使用这些方法之前，您必须获取 JavaScript 对象的引用。为此，您必须使用
    JavaScript 方法 `.data()`。以下是一个示例：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Notice how jQuery is used to select the **Document Object Model** (**DOM**)
    element where the Kendo UI Splitter widget has been created and then the `.data()`
    function has been called with the parameter text `kendoSplitter` indicating the
    type of object that we are trying to get. Now that the Kendo UI Splitter widget
    instance has been retrieved, methods can be called from the `splitter` variable
    directly.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 jQuery 如何用于选择 Kendo UI Splitter 小部件创建的 **Document Object Model** (**DOM**)
    元素，然后使用参数文本 `kendoSplitter` 调用 `.data()` 函数，以指示我们试图获取的对象类型。现在，已经检索到 Kendo UI Splitter
    小部件实例，可以直接从 `splitter` 变量调用方法。
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Using the ajaxRequest method
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 `ajaxRequest` 方法
- en: 'The `ajaxRequest` method is used to load AJAX content into a specific Kendo
    UI Splitter widget pane. This method takes three parameters. The first parameter
    is a string used to select the specific pane into which the AJAX content should
    be loaded. It uses jQuery syntax to select the element, so to select an element
    with an `id` value of `pane1`, you would use `#pane1` to select it. The second
    parameter is the URL of the remote endpoint that contains the content to load
    into the pane. The third parameter is optional and is used to send data to the
    remote endpoint if it takes parameters in order to send the data back. Here is
    a code sample showing the method in action:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`ajaxRequest` 方法用于将 AJAX 内容加载到特定的 Kendo UI Splitter 小部件面板中。此方法接受三个参数。第一个参数是一个字符串，用于选择应将
    AJAX 内容加载到其中的特定面板。它使用 jQuery 语法来选择元素，因此要选择具有 `id` 值为 `pane1` 的元素，您将使用 `#pane1`
    来选择它。第二个参数是包含要加载到面板中的内容的远程端点的 URL。第三个参数是可选的，如果远程端点需要参数以发送数据并返回数据，则用于向远程端点发送数据。以下是一个展示此方法如何工作的代码示例：'
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that this method will cause the `contentLoad` event to fire.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，此方法将导致 `contentLoad` 事件被触发。
- en: Using the collapse method
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用折叠方法
- en: 'The `collapse` method is used to collapse a specific Kendo UI Splitter widget
    pane. This method takes one parameter. The parameter is a string used to select
    the specific pane which should be collapsed. It uses jQuery syntax to select the
    element, so to select an element with an `id` value of `pane2`, you would use
    `#pane2` to select it. Here is a code sample of the method in action:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`collapse`方法用于折叠特定Kendo UI Splitter小部件面板。此方法接受一个参数。该参数是一个字符串，用于选择应该被折叠的特定面板。它使用jQuery语法来选择元素，因此要选择具有`id`值为`pane2`的元素，您将使用`#pane2`来选择它。以下是一个方法操作的代码示例：'
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that this method will cause the `layoutChange` and `resize` events to fire,
    but it will not cause the `collapse` event to fire since the user did not initiate
    the action with the mouse.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，此方法将导致`layoutChange`和`resize`事件被触发，但由于用户没有使用鼠标发起操作，因此不会触发`collapse`事件。
- en: Using the expand method
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用展开方法
- en: 'The `expand` method is used to expand a specific Kendo UI Splitter widget pane.
    This method takes one parameter. The parameter is a string used to select the
    specific pane which should be expanded. It uses jQuery syntax to select the element,
    so to select an element with an `id` value of `pane2`, you would use `#pane2`
    to select it. Here is a code sample of the method in action:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`expand`方法用于展开特定Kendo UI Splitter小部件面板。此方法接受一个参数。该参数是一个字符串，用于选择应该被展开的特定面板。它使用jQuery语法来选择元素，因此要选择具有`id`值为`pane2`的元素，您将使用`#pane2`来选择它。以下是一个方法操作的代码示例：'
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that this method will cause the `layoutChange` and `resize` events to fire,
    but it will not cause the `expand` event to fire since the user did not initiate
    the action with the mouse.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，此方法将导致`layoutChange`和`resize`事件被触发，但由于用户没有使用鼠标发起操作，因此不会触发`expand`事件。
- en: Using the max and min methods
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用最大和最小方法
- en: 'The `max` and `min` methods are used to set the maximum or minimum size of
    a specific Kendo UI Splitter widget pane. These methods take two parameters. The
    first parameter is a string used to select the specific pane that will be configured.
    It uses jQuery syntax to select the element, so to select an element with an `id`
    value of `pane3`, you would use `#pane3` to select it. The second parameter is
    a string value representing the new maximum or minimum size. This value is represented
    either as a number of pixels or as a percentage. Here is a code sample of the
    method in action:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`max`和`min`方法用于设置特定Kendo UI Splitter小部件面板的最大或最小大小。这些方法接受两个参数。第一个参数是一个字符串，用于选择将被配置的特定面板。它使用jQuery语法来选择元素，因此要选择具有`id`值为`pane3`的元素，您将使用`#pane3`来选择它。第二个参数是一个表示新最大或最小大小的字符串值。此值表示为像素数或百分比。以下是一个方法操作的代码示例：'
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that this method will not cause any events to fire.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，此方法不会触发任何事件。
- en: Using the size method
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用大小方法
- en: 'The `size` method is used to set the size of a specific Kendo UI Splitter widget
    pane. This method takes two parameters. The first parameter is a string used to
    select the specific pane that will be configured. It uses jQuery syntax to select
    the element, so to select an element with an `id` value of `pane4`, you would
    use `#pane4` to select it. The second parameter is a string value representing
    the new size. This value is represented either as pixels or as a percentage. It
    must fall within the range of the max and min size values. Here is a code sample
    of the method in action:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`size`方法用于设置特定Kendo UI Splitter小部件面板的大小。此方法接受两个参数。第一个参数是一个字符串，用于选择将被配置的特定面板。它使用jQuery语法来选择元素，因此要选择具有`id`值为`pane4`的元素，您将使用`#pane4`来选择它。第二个参数是一个表示新大小的字符串值。此值表示为像素或百分比。它必须在最大和最小大小值范围内。以下是一个方法操作的代码示例：'
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that this method will cause the `layoutChange` and `resize` events to fire.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，此方法将导致`layoutChange`和`resize`事件被触发。
- en: Using the toggle method
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用切换方法
- en: 'The `toggle` method is used to switch the state of a specific Kendo UI Splitter
    widget pane between collapsed and expanded. If the pane is currently expanded,
    the toggle method will collapse it. If the pane is currently collapsed, the toggle
    method will expand it. This method takes two parameters. The first parameter is
    a string used to select the specific pane that will be toggled. It uses jQuery
    syntax to select the element, so to select an element with an `id` value of `pane5`,
    you would use `#pane5` to select it. The second parameter is an optional Boolean
    value (`true` or `false`) that indicates a specific state that the pane should
    be set to irrespective of its current state. A value of `true` sets the pane to
    an expanded state. A value of `false` sets the pane to a collapsed state. Here
    is a code sample of the method in action:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`toggle` 方法用于在特定 Kendo UI Splitter 小部件的面板之间切换折叠和展开状态。如果面板当前是展开的，则 `toggle`
    方法将折叠它。如果面板当前是折叠的，则 `toggle` 方法将展开它。此方法接受两个参数。第一个参数是一个字符串，用于选择将被切换的特定面板。它使用 jQuery
    语法来选择元素，因此要选择一个 `id` 值为 `pane5` 的元素，你会使用 `#pane5` 来选择它。第二个参数是一个可选的布尔值（`true` 或
    `false`），它指示面板应设置为的特定状态，而不考虑其当前状态。`true` 的值将面板设置为展开状态。`false` 的值将面板设置为折叠状态。以下是一个方法操作的代码示例：'
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that this method will cause the `layoutChange` and `resize` events to fire,
    but it will not trigger the `collapse` or `expand` events.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这种方法将导致 `layoutChange` 和 `resize` 事件被触发，但它不会触发 `collapse` 或 `expand` 事件。
- en: TreeView
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TreeView
- en: The Kendo UI TreeView widget is a useful widget when you need to display data
    that is organized hierarchically. Files on a hard disk and business organizational
    structures are good examples of data that is organized in this way. The data has
    a top-level element (such as root folder or a CEO) and then has several individual
    elements (such as files or employees) and groups (such as folders or departments)
    beneath that top-level element. Each group can have further levels of groups such
    that the final diagram can be imagined as a tree with a root and many branches
    (groups of elements) that divide many times and ultimately end with leaves (individual
    elements). As you can imagine, data like this is not always very easy to visualize
    and lay out on a web page. Fortunately, the Kendo UI TreeView widget comes to
    our rescue as an easy way to display this data complete with rich interaction
    and configuration options.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Kendo UI TreeView 小部件在你需要显示组织成层次结构的数据时非常有用。硬盘上的文件和商业组织结构是这种组织方式数据的良好例子。数据有一个顶级元素（例如根文件夹或首席执行官），然后在该顶级元素下有多个单个元素（例如文件或员工）和组（例如文件夹或部门）。每个组可以进一步分组，使得最终的图表可以想象为一棵树，有一个根和许多分支（元素组），这些分支多次分割，最终以叶子（单个元素）结束。正如你可以想象的那样，这种类型的数据并不总是很容易在网页上可视化和布局。幸运的是，Kendo
    UI TreeView 小部件作为显示这种数据的简单方式，提供了丰富的交互和配置选项。
- en: Learning TreeView
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习 TreeView
- en: 'The Kendo UI TreeView widget is designed to work with data that is nested in
    HTML unordered lists. These are a natural fit for a TreeView to work since they
    can be nested hierarchically just as Kendo UI intends to display and organize
    them. Much like the other Kendo UI widgets that organize data, the TreeView widget
    can be instantiated on top of HTML that has already been rendered on a web page
    or it can build the HTML itself when fed data through a data source object. Here
    is a simple example of instantiating a Kendo UI TreeView widget on top of pre-rendered
    HTML:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Kendo UI TreeView 小部件旨在与嵌套在 HTML 无序列表中的数据一起工作。这些对于 TreeView 的工作来说是一个自然的匹配，因为它们可以像
    Kendo UI 想要显示和组织的那样进行层次嵌套。与组织数据的其他 Kendo UI 小部件类似，TreeView 小部件可以创建在已经渲染到网页上的 HTML
    之上，或者当通过数据源对象提供数据时，它可以自己构建 HTML。以下是一个在预渲染的 HTML 上实例化 Kendo UI TreeView 小部件的简单示例：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This page shows an organization chart categorized by department and job function.
    As you can see in the following screenshot, the Kendo UI TreeView widget does
    a nice job of displaying this. The HTML is capable of rendering hierarchical data
    without any assistance from the Kendo UI Framework, but ordinary HTML does not
    offer collapsible sections or any of the other special behaviors that you will
    see as you read on in this section.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 此页面显示按部门和职位功能分类的组织结构图。正如你在下面的屏幕截图中所看到的，Kendo UI TreeView 小部件很好地展示了这一点。HTML 能够在没有
    Kendo UI 框架的帮助下渲染层次数据，但普通的 HTML 不提供可折叠的部分或其他你将在本节中继续阅读时看到的特殊行为。
- en: '![Learning TreeView](img/4346OT_09_05.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![学习 TreeView](img/4346OT_09_05.jpg)'
- en: Binding to a data source
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绑定到数据源
- en: 'As you just saw, the Kendo UI TreeView widget is designed to work either on
    top of existing HTML markup or it can bind to a JavaScript data source. Much like
    the other Kendo UI widgets that are designed to display and organize data, this
    data is best contained within a Kendo `DataSource` object that supports the many
    functions inherent within the Kendo Framework. To display the page that you saw
    earlier in this fashion, you can use the following code:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您刚才看到的，Kendo UI TreeView 小部件旨在在现有 HTML 标记之上工作，或者它可以绑定到 JavaScript 数据源。与其他旨在显示和组织数据的
    Kendo UI 小部件类似，此数据最好包含在支持 Kendo 框架内许多固有功能的 Kendo `DataSource` 对象中。要以前述方式显示您之前看到的页面，可以使用以下代码：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Notice how each element can contain its own list of child elements through
    the items property, such as how the `Software Development` group contains two
    child elements: `Desktop Applications` and `Web Applications`. These child elements
    can also contain their own list of child elements, and so on. This is how a tree
    of data is formed and this is how the Kendo UI TreeView widget processes the data
    into a graphical tree on the web page. As with any Kendo `DataSource` connection,
    the data can be bound to a remote source and does not have to be hardcoded into
    the page.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到每个元素都可以通过 `items` 属性包含自己的子元素列表，例如 `软件开发` 组包含两个子元素：`桌面应用程序` 和 `Web 应用程序`。这些子元素也可以包含自己的子元素列表，依此类推。这就是数据树的形成方式，也是
    Kendo UI TreeView 小部件如何将数据处理成网页上的图形树的方式。与任何 Kendo `DataSource` 连接一样，数据可以绑定到远程源，而无需在页面上硬编码。
- en: Using drag and drop
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用拖放功能
- en: Since the Kendo UI TreeView widget is enabled with special functionality through
    the Kendo Framework, it can do much more than standard HTML unordered lists. One
    of these special functions is `dragAndDrop`. When this feature is enabled on a
    Kendo UI TreeView widget, the user can click on an element in a TreeView and drag
    it around to anywhere else on that TreeView. Not only this, but if there are multiple
    TreeView widgets on the same page with drag and drop enabled, the user can drag
    elements from one TreeView widget to another! To enable this functionality, all
    you have to do is set the `dragAndDrop` property of the Kendo UI TreeView widget
    to `true`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Kendo UI TreeView 小部件通过 Kendo 框架启用了特殊功能，因此它能够执行比标准 HTML 无序列表更多的操作。其中一项特殊功能是
    `dragAndDrop`。当此功能在 Kendo UI TreeView 小部件上启用时，用户可以点击 TreeView 中的某个元素，并将其拖动到 TreeView
    上的任何其他位置。不仅如此，如果同一页面上有多个启用了拖放功能的 TreeView 小部件，用户还可以将元素从一个 TreeView 小部件拖动到另一个！要启用此功能，您只需将
    Kendo UI TreeView 小部件的 `dragAndDrop` 属性设置为 `true`。
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'When this has been enabled, the elements of the TreeView widget show a darkened
    background as a mouse hovers over them to help instruct the user that they are
    interactive. When an element in the TreeView is dragged, an icon appears next
    to it to help indicate what action will happen when the mouse button is released.
    The **+** sign indicates that an item will be added to a hierarchical section,
    as shown in the following screenshot:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当此功能被启用时，TreeView 小部件的元素会在鼠标悬停时显示暗色背景，以帮助指导用户它们是可交互的。当拖动 TreeView 中的元素时，旁边会出现一个图标，以帮助指示鼠标按钮释放时将发生什么操作。**+**
    符号表示将项目添加到层次结构部分，如下面的截图所示：
- en: '![Using drag and drop](img/4346OT_09_07.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![使用拖放功能](img/4346OT_09_07.jpg)'
- en: 'However, if the mouse is hovering in a position that will leave the item within
    a list, the icon changes to a picture that looks like a short list of items. At
    the same time, a small line will appear within the list that will receive the
    item to indicate where it will be placed, as shown here:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果鼠标悬停在将项目留在列表中的位置，图标将变为类似短项目列表的图片。同时，列表中会出现一条小线，以指示项目将被放置的位置，如下所示：
- en: '![Using drag and drop](img/4346OT_09_06.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![使用拖放功能](img/4346OT_09_06.jpg)'
- en: Configuring animation effects
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置动画效果
- en: 'You may have already noticed that the Kendo UI TreeView widget places small
    triangular icons next to each section of the tree layout where items exist underneath
    another item. If you click on one of these triangular icons with your mouse, the
    section will either collapse into a hidden state or will expand into a visible
    state. When this transition between hidden and visible occurs, the Kendo UI Framework
    will animate it with some effects that make it visually appealing. These effects
    can be configured to suit your own personal preference:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，Kendo UI TreeView 小部件在树布局的每个部分旁边放置了小三角形图标，其中包含其他项目下的项目。如果你用鼠标点击这些三角形图标之一，该部分将折叠成隐藏状态或展开成可见状态。当这种隐藏和可见之间的转换发生时，Kendo
    UI 框架会使用一些效果来动画化它，使其视觉上吸引人。这些效果可以根据你自己的个人偏好进行配置：
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Displaying images
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示图片
- en: The Kendo UI TreeView widget is designed to enable an attractive layout for
    your content. To this end, the Kendo UI Framework has built-in support for displaying
    small images inside of the TreeView widget next to the items that you are displaying.
    This can be done in one of two ways. The first way is to use individual image
    files for each image that you want to display. The second way is to use a CSS
    sprite image that contains many images together that are offset by a certain number
    of pixels.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Kendo UI TreeView 小部件旨在为你的内容提供吸引人的布局。为此，Kendo UI 框架内置了对在 TreeView 小部件内部显示小图片的支持，这些图片位于你显示的项目旁边。这可以通过两种方式之一完成。第一种方式是为你想要显示的每个图片使用单独的图像文件。第二种方式是使用包含多个图像的
    CSS 图标精灵图像，这些图像通过一定数量的像素偏移。
- en: 'To use individual image files in a Kendo UI TreeView widget, you can use the
    `imageUrl` property of the TreeView items. The following is how this appears in
    code:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Kendo UI TreeView 小部件中使用单个图像文件，你可以使用 TreeView 项目的 `imageUrl` 属性。以下是如何在代码中显示它的示例：
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Using images like this renders the graphics against the left side of the TreeView
    widget directly in-line with the text of each TreeView item that is decorated
    with an `imageUrl` property, as shown in the following screenshot:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这样的图片渲染图形与 TreeView 小部件的左侧直接对齐，与每个带有 `imageUrl` 属性的 TreeView 项目的文本一起，如以下截图所示：
- en: '![Displaying images](img/4346OT_09_08.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![显示图片](img/4346OT_09_08.jpg)'
- en: 'The other way to use images with your TreeView widget is to reference them
    from a CSS sprite image file. By using sprite images, you can decrease the number
    of times your web page has to call the server for separate image files and this
    can increase the performance of your site. If you have a sprite image that contains
    your images, you can reference it as follows in code:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 TreeView 小部件中的图片的另一种方法是引用 CSS 图标精灵图像文件。通过使用精灵图像，你可以减少网页调用服务器以获取单独图像文件的次数，这可以提高你网站的性能。如果你有一个包含你的图像的精灵图像，你可以在代码中如下引用它：
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Using sprites like this renders the graphics against the left side of the TreeView
    widget directly in-line with the text of each TreeView item that is decorated
    with an `imageUrl` property, similar to how the images were rendered previously.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这样的精灵渲染图形与 TreeView 小部件的左侧直接对齐，与每个带有 `imageUrl` 属性的 TreeView 项目的文本一起，类似于之前图像的渲染方式。
- en: '![Displaying images](img/4346OT_09_09.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![显示图片](img/4346OT_09_09.jpg)'
- en: Using templates
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用模板
- en: 'The Kendo UI TreeView widget is highly configurable. Along with the ability
    to add images and sprites, as you just saw in the previous section, it can also
    be customized through the use of Kendo templates. These templates can be used
    to create a display that is customizable into any display that you want. As an
    example, consider the following code sample that is used to create a special TreeView
    display with icons to the right of each item that can be clicked to remove the
    item from the TreeView display:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Kendo UI TreeView 小部件高度可配置。除了能够添加图片和精灵，正如你在上一节中看到的，它还可以通过使用 Kendo 模板进行自定义。这些模板可以用来创建任何你想要的显示的可定制显示。例如，考虑以下代码示例，它用于创建一个特殊的
    TreeView 显示，其中每个项目旁边都有图标，可以点击以从 TreeView 显示中删除项目：
- en: '[PRE23]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'First, notice the template block at the top of the code sample. The template
    is specifying that the item text is displayed. Then, only if the item does not
    have a collection beneath it, the anchor link is displayed that can be clicked
    to delete the item from the TreeView widget. Second, notice that the template
    is set in the TreeView setup code using the `template` property. Finally, notice
    that the anchor link''s behavior has been wired up using an event handler. The
    function to delete an item from a TreeView relies on the TreeView API and must
    be wired up using JavaScript. Here is a screenshot of the way this looks on a
    web page:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，注意代码示例顶部的模板块。模板指定了要显示项目文本。然后，只有当项目下没有集合时，才会显示可以点击以从TreeView小部件中删除项目的锚点链接。其次，注意模板是通过`template`属性在TreeView设置代码中设置的。最后，注意锚点链接的行为是通过事件处理器连接的。从TreeView中删除项目的函数依赖于TreeView
    API，并且必须使用JavaScript连接。以下是这种方式在网页上的截图：
- en: '![Using templates](img/4346OT_09_10.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![使用模板](img/4346OT_09_10.jpg)'
- en: Hooking into TreeView events
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接到TreeView事件
- en: 'The Kendo UI TreeView widget fires several different types of events during
    the course of its operation. These events provide you, the developer, with the
    opportunity to run your own code in response to actions that the TreeView runs
    as it operates. Some of these actions are directly related to user involvement,
    such as when a user clicks on something. Some of them are more indirect and fire
    as the TreeView widget changes its state such as when it loads content. Since
    there are a large number of events associated with the TreeView widget, we will
    examine them here with brief descriptions for each one:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在其操作过程中，Kendo UI TreeView小部件会触发几种不同类型的事件。这些事件为您，即开发者，提供了在TreeView运行时执行自己的代码的机会。其中一些动作与用户的直接参与有关，例如当用户点击某物时。还有一些动作更为间接，当TreeView小部件改变其状态时触发，例如当它加载内容时。由于与TreeView小部件相关的事件有很多，我们将在此处简要描述每个事件：
- en: '`collapse`: The `collapse` event fires when the user clicks on an arrow icon
    that causes a section of the TreeView widget to collapse.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collapse`：当用户点击一个箭头图标导致TreeView小部件的某个部分折叠时，会触发`collapse`事件。'
- en: '`dataBound`: The `dataBound` event is triggered after the data source change
    event has been processed, such as when items are added or removed from the data
    source or when the data source is initially populated.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dataBound`：在处理数据源更改事件之后，会触发`dataBound`事件，例如当向数据源添加或删除项目，或者当数据源最初被填充时。'
- en: '`drag`: The `drag` event is triggered when an item is dragged from or within
    a TreeView widget. The `drag` event supplies a lot of very specific details about
    its location to the event handler which can be used in your custom code.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drag`：当项目从TreeView小部件中拖动或在其内部拖动时，会触发`drag`事件。`drag`事件向事件处理器提供了关于其位置的许多非常具体的细节，这些细节可以在您的自定义代码中使用。'
- en: '`dragEnd`: The `dragEnd` event is triggered when an item has been released
    at the end of the drag action and it is inserted back into a TreeView widget in
    a new location.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dragEnd`：当拖动操作结束时，项目被释放并重新插入到一个新的位置到TreeView小部件中时，会触发`dragEnd`事件。'
- en: '`dragStart`: The `dragStart` event is triggered at the start of a drag action
    as the user begins to drag an item from a TreeView widget.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dragStart`：当用户开始从TreeView小部件拖动一个项目时，会触发`dragStart`事件。'
- en: '`drop`: The `drop` event is triggered when an item is dropped after a drag
    action. The `drop` event supplies a lot of very specific details about its location
    to the event handler which can be used in your custom code.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drop`：在拖动操作后，项目被放下时，会触发`drop`事件。`drop`事件向事件处理器提供了关于其位置的许多非常具体的细节，这些细节可以在您的自定义代码中使用。'
- en: '`expand`: The `expand` event fires when the user clicks on an arrow icon that
    causes a section of the TreeView widget to expand.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expand`：当用户点击一个箭头图标导致TreeView小部件的某个部分展开时，会触发`expand`事件。'
- en: '`select`: The `select` event is triggered when a node is selected by a user
    clicking on it with the mouse.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`select`：当用户通过鼠标点击节点来选择节点时，会触发`select`事件。'
- en: '`navigate`: The `navigate` event is triggered when the focus changes from one
    TreeView node to something else on the page.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`navigate`：当焦点从页面上的一个TreeView节点转移到其他元素时，会触发`navigate`事件。'
- en: Making calls to the TreeView API methods
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调用TreeView API方法
- en: 'The Kendo UI TreeView widget is equipped with a wide range of methods that
    enable its rich behaviors. These methods allow you to manipulate the TreeView
    widget manually in all of the ways that it supports. By using these API methods,
    you can configure and engage the TreeView widget however your application needs.
    Like the events section just discussed, there are many methods that the TreeView
    widget supports. I will list them all here with brief descriptions:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Kendo UI TreeView 小部件配备了丰富的功能方法，这些方法使其行为更加丰富。这些方法允许您以 TreeView 小部件支持的所有方式手动操作该小部件。通过使用这些
    API 方法，您可以按照应用程序的需求配置和激活 TreeView 小部件。就像刚刚讨论的事件部分一样，TreeView 小部件支持许多方法。我将在这里列出所有这些方法，并附上简要说明：
- en: '`append`: The `append` method appends an element to the end of an existing
    TreeView widget section.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`append`：`append` 方法将一个元素追加到现有 TreeView 小部件部分的末尾。'
- en: '`collapse`: The `collapse` method collapses an expanded TreeView widget section.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`collapse`：`collapse` 方法折叠展开的 TreeView 小部件部分。'
- en: '`dataItem`: The `dataItem` method retrieves a model data item that is bound
    to a TreeView widget element.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dataItem`：`dataItem` 方法检索绑定到 TreeView 小部件元素的模型数据项。'
- en: '`enable`: The `enable` method enables or disables a TreeView widget element.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enable`：`enable` 方法启用或禁用 TreeView 小部件元素。'
- en: '`expand`: The `expand` method expands a collapsed TreeView widget section.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expand`：`expand` 方法展开折叠的 TreeView 小部件部分。'
- en: '`findByText`: The `findByText` method finds a TreeView element by its text
    value.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`findByText`：`findByText` 方法通过其文本值查找 TreeView 元素。'
- en: '`findByUID`: The `findByUID` method finds a TreeView element by its `UID` value.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`findByUID`：`findByUID` 方法通过其 `UID` 值查找 TreeView 元素。'
- en: '`insertAfter`: The `insertAfter` method inserts a new element after the specified
    element in a TreeView widget.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`insertAfter`：`insertAfter` 方法在 TreeView 小部件中指定的元素之后插入一个新元素。'
- en: '`insertBefore`: The `insertBefore` method inserts a new element before the
    specified element in a TreeView widget.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`insertBefore`：`insertBefore` 方法在 TreeView 小部件中指定的元素之前插入一个新元素。'
- en: '`parent`: The `parent` method retrieves the parent of an element in a TreeView
    widget.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parent`：`parent` 方法检索 TreeView 小部件中元素的父元素。'
- en: '`remove`: The `remove` method removes an element from a TreeView widget.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`remove`：`remove` 方法从 TreeView 小部件中删除一个元素。'
- en: '`select`: The `select` method marks an element in a TreeView widget as selected.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`select`：`select` 方法将 TreeView 小部件中的元素标记为选中。'
- en: '`setDataSource`: The `setDataSource` method sets the data source of a TreeView
    widget.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setDataSource`：`setDataSource` 方法设置 TreeView 小部件的数据源。'
- en: '`text`: The `text` method can get or set the text value of an element in a
    TreeView widget.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text`：`text` 方法可以获取或设置 TreeView 小部件中元素的文本值。'
- en: '`toggle`: The `toggle` method collapses an expanded TreeView section or expands
    a collapsed TreeView section.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`toggle`：`toggle` 方法折叠展开的 TreeView 部分或展开折叠的 TreeView 部分。'
- en: Summary
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The Kendo UI Splitter and the Kendo UI TreeView widgets offer a lot of functionality
    as you develop your web pages. The Splitter widget is an impressive tool in organizing
    content sections that are collapsible, expandable, and resizable. This type of
    functionality is not normally so easy. The TreeView widget offers a feature-rich
    version of a hierarchical unordered HTML list with some very useful features for
    graphics, collapsible tree sections, and a large number of methods and events.
    Both of these widgets should add a lot of value to your web site.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发网页的过程中，Kendo UI Splitter 和 Kendo UI TreeView 小部件提供了许多功能。Splitter 小部件是一个组织可折叠、可展开和可调整大小的内容部分的出色工具。这种类型的功能通常并不那么容易实现。TreeView
    小部件提供了一个功能丰富的分层无序列表版本，具有一些非常实用的图形功能、可折叠的树部分以及大量方法和事件。这两个小部件都应该为您的网站增添很多价值。
- en: In the next chapter, you will learn about two final widgets from the Kendo UI
    Web Framework, the Window and the Upload widgets. The Window widget allows you
    create and manage modal pop-up pages with specialized content. The Upload widget
    gives you a richer set of features around the traditional HTML upload element
    for a great file-upload experience for the users of your website.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将了解 Kendo UI Web 框架中的两个最终小部件：Window 和 Upload 小部件。Window 小部件允许您创建和管理具有专用内容的模态弹出页面。Upload
    小部件为传统的 HTML 上传元素提供了一组更丰富的功能，为您的网站用户提供了一个出色的文件上传体验。
