- en: Chapter 9. Implementing the Splitter and TreeView Widgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn about two different widgets from the Kendo UI
    Web framework, the Splitter widget and the TreeView widget. The Splitter widget
    is a tool used for organizing content inside of a web page. It creates block-like
    regions within the web page that can contain normal page elements or even additional
    Splitter widget controls to further subdivide the content area. The TreeView widget
    is a tool used for displaying data that is organized hierarchically, such as in
    tree. A good example of data organized this way is a folder structure on a hard
    drive. Folders can contain files or additional folders. When diagrammed, this
    creates a nested structure such as a tree and is well suited for the TreeView
    widget.
  prefs: []
  type: TYPE_NORMAL
- en: The Splitter widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Kendo UI Splitter widget is a powerful tool for creating a dynamic page
    layout. It generates bordered sections within a web page that can be resized,
    scrolled, collapsed, and nested. These sections are built on top of `div` elements
    and extend these underlying `div` elements with impressive functionality. As you
    see how to use this widget throughout this section, I am sure you can imagine
    many ways of putting it to use.
  prefs: []
  type: TYPE_NORMAL
- en: Learning the Splitter widget
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Kendo UI Splitter widget is designed to extend `div` HTML elements into
    flexible content areas that can split up elements of your web pages, hence the
    name "splitter". These content areas become resizable blocks that allow the user
    to choose which portions of a page should occupy more of the visible screen. Each
    of these blocks can be configured with specific behaviors and options, such as
    scroll bars and the ability to collapse page elements with a single click.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a sample of some HTML markup that can be used with the Kendo UI Splitter
    widget. Take special note of how the `div` elements are organized and nested;
    it will become important when you see the JavaScript code that instantiates the
    Kendo objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The outer-most `div`, the one with the `id` value of `outerSections`, contains
    three `div` elements between its tags. You can also see that each of these `div`
    elements beneath the `outerSections` `div` contain child `div` elements of their
    own. These child elements will become Kendo UI Splitter widget sections within
    the larger `outerSections` area. Two of these child `div` elements, `topSubSections`
    and `bottomSubSections`, also contain a further nested hierarchy that will become
    nested Kendo UI Splitter widget sections within the `outerTopSection` and `outerBottomSection`
    areas respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this JavaScript code block, you can see that there are three `kendoSplitter`
    widgets created independently. The first Splitter widget is organized in a vertical
    sequence; it is the outer-most area and will contain the following two Splitter
    widget objects within itself. The second and third Splitter widget areas are organized
    horizontally and are nested within other Splitter widget objects, as you will
    see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![Learning the Splitter widget](img/4346OT_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see the three Splitter widget areas that are stacked vertically down
    the page. The top-most area contains two horizontally stacked areas inside of
    it. The bottom-most area contains three horizontally stacked areas. These all
    match to the HTML and JavaScript code that you just saw.
  prefs: []
  type: TYPE_NORMAL
- en: Loading content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The contents of the Splitter widget areas you just saw were all empty for the
    sake of demonstration. This is not necessary, however. The content areas can contain
    all of the normal HTML content that a `div` element would normally contain. For
    example, you could fill some of the areas up with text, as done in the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This text will now appear within the Splitter widget box and be resized or
    collapsed as necessary:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Loading content](img/4346OT_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Loading content with AJAX
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A more configurable method of populating the contents of these Splitter widget
    areas is to load it via AJAX calls. To enable this functionality, simply use the
    `contentUrl` property of the JavaScript object literal that defines a Splitter
    widget content area and indicate the page that you want to load via AJAX. The
    Kendo UI Framework will take care of the rest for you.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![Loading content with AJAX](img/4346OT_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Hooking into Splitter events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Kendo UI Splitter widget is equipped with a range of rich behaviors. Most
    of these behaviors, whether enacted through a user action or through a method
    call, trigger an event. Like any event in JavaScript, you can attach your own
    event handler functions to these events and respond to the actions with your own
    custom code. This section will show the different events available on the Kendo
    UI Splitter widget and demonstrate how to hook into them.
  prefs: []
  type: TYPE_NORMAL
- en: The collapse event
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `collapse` event fires when a user collapses a Kendo UI Splitter widget
    section by clicking on the collapse icon between two of the panes. This icon appears
    as a small triangle that is pointing in the direction that the `collapse` action
    will move it. The following is the code that is used to wire up the `collapse`
    event with an event handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The contentLoad event
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `contentLoad` event fires when content is loaded into a Kendo UI Splitter
    widget pane. The normal use of this event is to react to the point when AJAX content
    has finished loading from the remote source. The following is the code that is
    used to wire up the `contentLoad` event with an event handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The expand event
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `expand` event fires when a Kendo UI Splitter widget pane is expanded by
    a user clicking on the expand icon after a pane has been collapsed. This icon
    appears as small triangle pointing in the direction that the pane will expand
    when clicked, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The expand event](img/4346OT_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is the code that is used to wire up the `expand` event with an
    event handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The layoutChange event
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `layoutChange` event fires when the layout of a Kendo UI Splitter widget
    has changed. This event is more generic than `expand`, `collapse`, and `resize`,
    so it will often appear in conjunction with those events since all of them also
    indicate that the layout has changed. The following is the code that is used to
    wire up the `layoutChange` event with an event handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The resize event
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `resize` event is fired when a user drags the handle between two Kendo
    UI Splitter widget panes in order to resize them. This event is also triggered
    during `collapse` and `expand`. The following is the code that is used to wire
    up the `resize` event with an event handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Making calls to Splitter API methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Kendo UI Splitter widget is equipped with a range of methods that enable
    its rich behaviors. Most of these methods, when fired, trigger an event. Like
    any event in JavaScript, you can attach your own event handler functions to these
    events and respond to the actions with your own custom code. This section will
    show the different methods available on the Kendo UI Splitter widget.
  prefs: []
  type: TYPE_NORMAL
- en: Getting a reference to the splitter object
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first thing to remember when working with methods on all Kendo UI widgets
    is that you must get a reference to the JavaScript object before these methods
    are available. To do this, you must use the JavaScript method `.data()`. Here
    is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Notice how jQuery is used to select the **Document Object Model** (**DOM**)
    element where the Kendo UI Splitter widget has been created and then the `.data()`
    function has been called with the parameter text `kendoSplitter` indicating the
    type of object that we are trying to get. Now that the Kendo UI Splitter widget
    instance has been retrieved, methods can be called from the `splitter` variable
    directly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Using the ajaxRequest method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `ajaxRequest` method is used to load AJAX content into a specific Kendo
    UI Splitter widget pane. This method takes three parameters. The first parameter
    is a string used to select the specific pane into which the AJAX content should
    be loaded. It uses jQuery syntax to select the element, so to select an element
    with an `id` value of `pane1`, you would use `#pane1` to select it. The second
    parameter is the URL of the remote endpoint that contains the content to load
    into the pane. The third parameter is optional and is used to send data to the
    remote endpoint if it takes parameters in order to send the data back. Here is
    a code sample showing the method in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that this method will cause the `contentLoad` event to fire.
  prefs: []
  type: TYPE_NORMAL
- en: Using the collapse method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `collapse` method is used to collapse a specific Kendo UI Splitter widget
    pane. This method takes one parameter. The parameter is a string used to select
    the specific pane which should be collapsed. It uses jQuery syntax to select the
    element, so to select an element with an `id` value of `pane2`, you would use
    `#pane2` to select it. Here is a code sample of the method in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that this method will cause the `layoutChange` and `resize` events to fire,
    but it will not cause the `collapse` event to fire since the user did not initiate
    the action with the mouse.
  prefs: []
  type: TYPE_NORMAL
- en: Using the expand method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `expand` method is used to expand a specific Kendo UI Splitter widget pane.
    This method takes one parameter. The parameter is a string used to select the
    specific pane which should be expanded. It uses jQuery syntax to select the element,
    so to select an element with an `id` value of `pane2`, you would use `#pane2`
    to select it. Here is a code sample of the method in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that this method will cause the `layoutChange` and `resize` events to fire,
    but it will not cause the `expand` event to fire since the user did not initiate
    the action with the mouse.
  prefs: []
  type: TYPE_NORMAL
- en: Using the max and min methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `max` and `min` methods are used to set the maximum or minimum size of
    a specific Kendo UI Splitter widget pane. These methods take two parameters. The
    first parameter is a string used to select the specific pane that will be configured.
    It uses jQuery syntax to select the element, so to select an element with an `id`
    value of `pane3`, you would use `#pane3` to select it. The second parameter is
    a string value representing the new maximum or minimum size. This value is represented
    either as a number of pixels or as a percentage. Here is a code sample of the
    method in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that this method will not cause any events to fire.
  prefs: []
  type: TYPE_NORMAL
- en: Using the size method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `size` method is used to set the size of a specific Kendo UI Splitter widget
    pane. This method takes two parameters. The first parameter is a string used to
    select the specific pane that will be configured. It uses jQuery syntax to select
    the element, so to select an element with an `id` value of `pane4`, you would
    use `#pane4` to select it. The second parameter is a string value representing
    the new size. This value is represented either as pixels or as a percentage. It
    must fall within the range of the max and min size values. Here is a code sample
    of the method in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that this method will cause the `layoutChange` and `resize` events to fire.
  prefs: []
  type: TYPE_NORMAL
- en: Using the toggle method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `toggle` method is used to switch the state of a specific Kendo UI Splitter
    widget pane between collapsed and expanded. If the pane is currently expanded,
    the toggle method will collapse it. If the pane is currently collapsed, the toggle
    method will expand it. This method takes two parameters. The first parameter is
    a string used to select the specific pane that will be toggled. It uses jQuery
    syntax to select the element, so to select an element with an `id` value of `pane5`,
    you would use `#pane5` to select it. The second parameter is an optional Boolean
    value (`true` or `false`) that indicates a specific state that the pane should
    be set to irrespective of its current state. A value of `true` sets the pane to
    an expanded state. A value of `false` sets the pane to a collapsed state. Here
    is a code sample of the method in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that this method will cause the `layoutChange` and `resize` events to fire,
    but it will not trigger the `collapse` or `expand` events.
  prefs: []
  type: TYPE_NORMAL
- en: TreeView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Kendo UI TreeView widget is a useful widget when you need to display data
    that is organized hierarchically. Files on a hard disk and business organizational
    structures are good examples of data that is organized in this way. The data has
    a top-level element (such as root folder or a CEO) and then has several individual
    elements (such as files or employees) and groups (such as folders or departments)
    beneath that top-level element. Each group can have further levels of groups such
    that the final diagram can be imagined as a tree with a root and many branches
    (groups of elements) that divide many times and ultimately end with leaves (individual
    elements). As you can imagine, data like this is not always very easy to visualize
    and lay out on a web page. Fortunately, the Kendo UI TreeView widget comes to
    our rescue as an easy way to display this data complete with rich interaction
    and configuration options.
  prefs: []
  type: TYPE_NORMAL
- en: Learning TreeView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Kendo UI TreeView widget is designed to work with data that is nested in
    HTML unordered lists. These are a natural fit for a TreeView to work since they
    can be nested hierarchically just as Kendo UI intends to display and organize
    them. Much like the other Kendo UI widgets that organize data, the TreeView widget
    can be instantiated on top of HTML that has already been rendered on a web page
    or it can build the HTML itself when fed data through a data source object. Here
    is a simple example of instantiating a Kendo UI TreeView widget on top of pre-rendered
    HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This page shows an organization chart categorized by department and job function.
    As you can see in the following screenshot, the Kendo UI TreeView widget does
    a nice job of displaying this. The HTML is capable of rendering hierarchical data
    without any assistance from the Kendo UI Framework, but ordinary HTML does not
    offer collapsible sections or any of the other special behaviors that you will
    see as you read on in this section.
  prefs: []
  type: TYPE_NORMAL
- en: '![Learning TreeView](img/4346OT_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Binding to a data source
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you just saw, the Kendo UI TreeView widget is designed to work either on
    top of existing HTML markup or it can bind to a JavaScript data source. Much like
    the other Kendo UI widgets that are designed to display and organize data, this
    data is best contained within a Kendo `DataSource` object that supports the many
    functions inherent within the Kendo Framework. To display the page that you saw
    earlier in this fashion, you can use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice how each element can contain its own list of child elements through
    the items property, such as how the `Software Development` group contains two
    child elements: `Desktop Applications` and `Web Applications`. These child elements
    can also contain their own list of child elements, and so on. This is how a tree
    of data is formed and this is how the Kendo UI TreeView widget processes the data
    into a graphical tree on the web page. As with any Kendo `DataSource` connection,
    the data can be bound to a remote source and does not have to be hardcoded into
    the page.'
  prefs: []
  type: TYPE_NORMAL
- en: Using drag and drop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since the Kendo UI TreeView widget is enabled with special functionality through
    the Kendo Framework, it can do much more than standard HTML unordered lists. One
    of these special functions is `dragAndDrop`. When this feature is enabled on a
    Kendo UI TreeView widget, the user can click on an element in a TreeView and drag
    it around to anywhere else on that TreeView. Not only this, but if there are multiple
    TreeView widgets on the same page with drag and drop enabled, the user can drag
    elements from one TreeView widget to another! To enable this functionality, all
    you have to do is set the `dragAndDrop` property of the Kendo UI TreeView widget
    to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'When this has been enabled, the elements of the TreeView widget show a darkened
    background as a mouse hovers over them to help instruct the user that they are
    interactive. When an element in the TreeView is dragged, an icon appears next
    to it to help indicate what action will happen when the mouse button is released.
    The **+** sign indicates that an item will be added to a hierarchical section,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using drag and drop](img/4346OT_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'However, if the mouse is hovering in a position that will leave the item within
    a list, the icon changes to a picture that looks like a short list of items. At
    the same time, a small line will appear within the list that will receive the
    item to indicate where it will be placed, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using drag and drop](img/4346OT_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Configuring animation effects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You may have already noticed that the Kendo UI TreeView widget places small
    triangular icons next to each section of the tree layout where items exist underneath
    another item. If you click on one of these triangular icons with your mouse, the
    section will either collapse into a hidden state or will expand into a visible
    state. When this transition between hidden and visible occurs, the Kendo UI Framework
    will animate it with some effects that make it visually appealing. These effects
    can be configured to suit your own personal preference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Displaying images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Kendo UI TreeView widget is designed to enable an attractive layout for
    your content. To this end, the Kendo UI Framework has built-in support for displaying
    small images inside of the TreeView widget next to the items that you are displaying.
    This can be done in one of two ways. The first way is to use individual image
    files for each image that you want to display. The second way is to use a CSS
    sprite image that contains many images together that are offset by a certain number
    of pixels.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use individual image files in a Kendo UI TreeView widget, you can use the
    `imageUrl` property of the TreeView items. The following is how this appears in
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Using images like this renders the graphics against the left side of the TreeView
    widget directly in-line with the text of each TreeView item that is decorated
    with an `imageUrl` property, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying images](img/4346OT_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The other way to use images with your TreeView widget is to reference them
    from a CSS sprite image file. By using sprite images, you can decrease the number
    of times your web page has to call the server for separate image files and this
    can increase the performance of your site. If you have a sprite image that contains
    your images, you can reference it as follows in code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Using sprites like this renders the graphics against the left side of the TreeView
    widget directly in-line with the text of each TreeView item that is decorated
    with an `imageUrl` property, similar to how the images were rendered previously.
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying images](img/4346OT_09_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Kendo UI TreeView widget is highly configurable. Along with the ability
    to add images and sprites, as you just saw in the previous section, it can also
    be customized through the use of Kendo templates. These templates can be used
    to create a display that is customizable into any display that you want. As an
    example, consider the following code sample that is used to create a special TreeView
    display with icons to the right of each item that can be clicked to remove the
    item from the TreeView display:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'First, notice the template block at the top of the code sample. The template
    is specifying that the item text is displayed. Then, only if the item does not
    have a collection beneath it, the anchor link is displayed that can be clicked
    to delete the item from the TreeView widget. Second, notice that the template
    is set in the TreeView setup code using the `template` property. Finally, notice
    that the anchor link''s behavior has been wired up using an event handler. The
    function to delete an item from a TreeView relies on the TreeView API and must
    be wired up using JavaScript. Here is a screenshot of the way this looks on a
    web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using templates](img/4346OT_09_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Hooking into TreeView events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Kendo UI TreeView widget fires several different types of events during
    the course of its operation. These events provide you, the developer, with the
    opportunity to run your own code in response to actions that the TreeView runs
    as it operates. Some of these actions are directly related to user involvement,
    such as when a user clicks on something. Some of them are more indirect and fire
    as the TreeView widget changes its state such as when it loads content. Since
    there are a large number of events associated with the TreeView widget, we will
    examine them here with brief descriptions for each one:'
  prefs: []
  type: TYPE_NORMAL
- en: '`collapse`: The `collapse` event fires when the user clicks on an arrow icon
    that causes a section of the TreeView widget to collapse.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dataBound`: The `dataBound` event is triggered after the data source change
    event has been processed, such as when items are added or removed from the data
    source or when the data source is initially populated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`drag`: The `drag` event is triggered when an item is dragged from or within
    a TreeView widget. The `drag` event supplies a lot of very specific details about
    its location to the event handler which can be used in your custom code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dragEnd`: The `dragEnd` event is triggered when an item has been released
    at the end of the drag action and it is inserted back into a TreeView widget in
    a new location.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dragStart`: The `dragStart` event is triggered at the start of a drag action
    as the user begins to drag an item from a TreeView widget.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`drop`: The `drop` event is triggered when an item is dropped after a drag
    action. The `drop` event supplies a lot of very specific details about its location
    to the event handler which can be used in your custom code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`expand`: The `expand` event fires when the user clicks on an arrow icon that
    causes a section of the TreeView widget to expand.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`select`: The `select` event is triggered when a node is selected by a user
    clicking on it with the mouse.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`navigate`: The `navigate` event is triggered when the focus changes from one
    TreeView node to something else on the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making calls to the TreeView API methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Kendo UI TreeView widget is equipped with a wide range of methods that
    enable its rich behaviors. These methods allow you to manipulate the TreeView
    widget manually in all of the ways that it supports. By using these API methods,
    you can configure and engage the TreeView widget however your application needs.
    Like the events section just discussed, there are many methods that the TreeView
    widget supports. I will list them all here with brief descriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`append`: The `append` method appends an element to the end of an existing
    TreeView widget section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`collapse`: The `collapse` method collapses an expanded TreeView widget section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dataItem`: The `dataItem` method retrieves a model data item that is bound
    to a TreeView widget element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enable`: The `enable` method enables or disables a TreeView widget element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`expand`: The `expand` method expands a collapsed TreeView widget section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`findByText`: The `findByText` method finds a TreeView element by its text
    value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`findByUID`: The `findByUID` method finds a TreeView element by its `UID` value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`insertAfter`: The `insertAfter` method inserts a new element after the specified
    element in a TreeView widget.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`insertBefore`: The `insertBefore` method inserts a new element before the
    specified element in a TreeView widget.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parent`: The `parent` method retrieves the parent of an element in a TreeView
    widget.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`remove`: The `remove` method removes an element from a TreeView widget.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`select`: The `select` method marks an element in a TreeView widget as selected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setDataSource`: The `setDataSource` method sets the data source of a TreeView
    widget.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text`: The `text` method can get or set the text value of an element in a
    TreeView widget.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`toggle`: The `toggle` method collapses an expanded TreeView section or expands
    a collapsed TreeView section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Kendo UI Splitter and the Kendo UI TreeView widgets offer a lot of functionality
    as you develop your web pages. The Splitter widget is an impressive tool in organizing
    content sections that are collapsible, expandable, and resizable. This type of
    functionality is not normally so easy. The TreeView widget offers a feature-rich
    version of a hierarchical unordered HTML list with some very useful features for
    graphics, collapsible tree sections, and a large number of methods and events.
    Both of these widgets should add a lot of value to your web site.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about two final widgets from the Kendo UI
    Web Framework, the Window and the Upload widgets. The Window widget allows you
    create and manage modal pop-up pages with specialized content. The Upload widget
    gives you a richer set of features around the traditional HTML upload element
    for a great file-upload experience for the users of your website.
  prefs: []
  type: TYPE_NORMAL
