- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Saving Form Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The preceding chapter introduced Playwright and SvelteKit routes. The data in
    our `/birthdays` route was hardcoded. In this chapter, we’ll force the *real*
    implementation of the `load` function by adding the ability to add new birthdays
    into the system.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 4**.1* shows the new form we’ll be building. It is attached to the
    bottom of the birthday list at the `/``birthdays` route:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – The form for adding a new birthday](img/Figure_4.1_B19611.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.1 – The form for adding a new birthday
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following key topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Playwright test for data input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test-driving a SvelteKit form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test-driving a SvelteKit form action
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of the chapter, you’ll have a good understanding of how to test-drive
    SvelteKit forms.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code for the chapter can be found online at [https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter04/Start](https://github.com/PacktPublishing/Svelte-with-Test-Driven-Development/tree/main/Chapter04/Start).
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Playwright test for data input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go ahead and add this test to `tests/birthdays.test.js`. It includes all the
    steps required for adding a new birthday to the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After navigating to the `/birthdays` endpoint, it uses the `getByLabel` locator
    function to find an `input` field that has a `Name` label. This is standard HTML
    functionality using the `label` and `input` elements, which we’ll see in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: We use the `fill` function to enter a value into this field, and then we repeat
    the process for the `Date of birth` field. Then, we click the button (any button!),
    and finally, we check that the `Persephone` text appears somewhere on the page.
  prefs: []
  type: TYPE_NORMAL
- en: An important distinction to make here is that `getByText` checks page text rather
    than, say, the values of the `input` fields. So, we can’t just fill in the `Name`
    field and then watch the expectation magically pass.
  prefs: []
  type: TYPE_NORMAL
- en: 'The intent of the Playwright test is to show that the following steps are performed:'
  prefs: []
  type: TYPE_NORMAL
- en: The user fills in a name and date of birth.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user presses the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The system records the birthday in its system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The browser refreshes the page, and the new birthday is displayed as part of
    the loaded page data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With all that in mind, the process we’ll use to make the test pass is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we’ll build a new `BirthdayForm` component that displays a basic HTML
    form with two input fields and a button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we’ll add this to the existing `+page.svelte` file that we built in the
    preceding chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we’ll add a form action to add this birthday, including introducing
    a new data structure to hold our birthdays in the server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That covers our up-front design, all wrapped up in a Playwright test. Next,
    we can begin test-driving the form.
  prefs: []
  type: TYPE_NORMAL
- en: Test-driving a SvelteKit form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, you’ll construct a new component named `BirthdayForm`, together
    with its test suite. This component is an HTML form that comprises two text fields:
    `name` and `dob`. Each `input` element has a corresponding `label` element. There’s
    also a button named **Save** that submits the form.'
  prefs: []
  type: TYPE_NORMAL
- en: SvelteKit handles the submission of our form data from the client to the server.
    We won’t test this behavior in our Vitest test suites, instead leaving it up to
    the Playwright tests to ensure that all pieces slot together correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to build the new form:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file named `src/routes/birthdays/BirthdayForm.test.js` with the
    following first test. This uses the `queryByRole` query function to find an element
    with the `form` role on the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure you run the test and watch it fail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, create a new file named `src/routes/birthdays/BirthdayForm.svelte` with
    the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you run tests now, you’ll see the test still doesn’t pass. That’s because
    the `form` role only becomes available once you *name* a form. Update the implementation
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The test should now pass. Add the next test, as shown in the following code
    block. This test simply checks that we submit the form via a `POST` request, which
    is the usual mechanism for submitting new data to the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make that pass by adding the `method` attribute, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add the third test, as shown in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To make that pass, add an `input` element into the form with a `type` attribute
    set to `submit`. You can also give it `value` as `Save`, which will be used as
    the button name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the next test, we will introduce a nested `describe` block called `name
    field`. We can add a block here for grouping in anticipation of more tests for
    this field. We’ll be adding some more in [*Chapter 5*](B19611_05.xhtml#_idTextAnchor070),
    *Validating* *Form Data*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This test makes use of the `queryByLabelText` function. This is analogous to
    the `page.getByLabel` function that was used in the Playwright test.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is something else in this test that is important: the `input[type=text]`.
    It’s not very clear from the test, but the first expectation in this test checks
    all of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: That a `label` element exists with the `Name` text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That an `input` element exists with the `type` attribute set to `text`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That the `label` element is associated with the `input` element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Part of these checks come from the selector expression itself. Without an explanation
    or understanding of the selector syntax, it’s hard to know the intent behind this
    expectation.
  prefs: []
  type: TYPE_NORMAL
- en: There’s also a second expectation in there to check that the `name` attribute
    is set. This is important so that the SvelteKit form action gets the right named
    parameters back. We’ll add this parameter, `name`, and in the next test, we’ll
    add another one named `dob`.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 8*](B19611_08.xhtml#_idTextAnchor100), *Creating Matchers to Simplify
    Tests*, we’ll refactor these expectations to improve their readability.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s carry on with the next steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To make the test pass, go ahead and add the `label` and `input` elements, as
    shown in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we can repeat the same thing with the `date of` `birth` field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To make that pass, add in a field for the date of birth:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That completes the `BirthdayForm` component.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the form component to the page component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we’ll add `BirthdayForm` into the existing page component for the `/``birthdays`
    route:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by adding this test in `src/routes/birthdays/page.test.js`, as shown.
    We are testing for the presence of `BirthdayForm` simply by checking for an HTML
    element with the `form` role:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using previously prepared work to make tests pass
  prefs: []
  type: TYPE_NORMAL
- en: We *could* make this test pass by just adding a new `form` element, but given
    that we have `form` already prepared in `BirthdayForm`, it makes sense to use
    that. We’ll see how component mocks can be used to make this test more specific
    in [*Chapter 11*](B19611_11.xhtml#_idTextAnchor127), *Replacing Behavior with
    a* *Side-By-Side Implementation*.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make this pass, start by inserting the new `import` statement into `src/routes/birthdays/+page.svelte`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add a reference to the `BirthdayForm` component, together with a heading.
    Since the heading will remain static data, we don’t need a test for that. Our
    Vitest tests are for *behavior* only – things that change when props change or
    **Document Object Model** (**DOM**) events fire:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'While you’re here, you can also update the tag to make sure `div` has the same
    style as the `li` elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You’ve now learned how to test-drive a form component and how to hook it up
    to your `page` component. That’s it for the new `BirthdayForm` component, and
    if you load the dev server now and browse to the `/birthdays` URL, you should
    see the form displayed on the page.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we’ll wire up the **Save** button so that it adds the new
    birthday data into the system.
  prefs: []
  type: TYPE_NORMAL
- en: Test-driving a SvelteKit form action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `form` action is the thing that SvelteKit calls when the form is submitted.
    It is defined in the `+page.server.js` file as an object named `actions`. The
    general form is shown in the following code block. Don’t add this just yet; we’ll
    come to it later on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what we’ll test-drive now. There’s a few things to note:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, the Vitest unit tests can check the behavior of the `form` action, but
    it doesn’t check any of the SvelteKit framework code that invokes the action.
    You’ll recall we took the same approach with the HTML form: we didn’t test the
    `submit` action since that magic is managed by SvelteKit. For testing the framework
    integration, we need the Playwright tests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Second, if you take a look at the preceding code sample, the form action has
    an action parameter with a `formData` function. This returns an item of the `FormData`
    type, which is a built-in DOM type.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we’re going to test the `form` action, we’ll need a way to build these `FormData`
    objects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What we’ll do is create factory methods to generate example objects for use
    in our tests. After that, we’ll build our form action. However, in order to do
    that, we’ll need to replace our hardcoded load function with a *real* implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Building a factory for the FormData objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new file named `src/factories/formDataRequest.js` and add the following
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This function takes a plain JavaScript object and converts it into a `FormData`
    object by repeatedly calling the `append` method with each of the `obj` key-value
    pairs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add the `createFormDataRequest` function, as shown in the following code
    block. It returns a SvelteKit request object that behaves in the same way that
    SvelteKit will:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: You can now use this within your Vitest tests for the form action.
  prefs: []
  type: TYPE_NORMAL
- en: Building a Vitest test suite for the form action
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open the `src/routes/birthdays/page.server.test.js` file and update `load import`
    to also import the `actions` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Just below that, add a new `import` statement for the `createFormDataRequest`
    factory that you just defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, at the bottom of the file, in a new top-level describe block, add the
    following test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This test builds a request, calls our form action with it, and then uses the
    `load` function to check that it’s returned successfully. But there’s a difficulty
    here. Because our `load` function from the preceding chapter had a hardcoded implementation,
    there’s no way for us to add any new data there.
  prefs: []
  type: TYPE_NORMAL
- en: Before we can make this test pass, we need to replace our hardcoded `load` function
    with a version that will then make this test easy to pass.
  prefs: []
  type: TYPE_NORMAL
- en: Skipping tests as part of a TDD workflow
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, we write a *Red* test and are ready to make it *Green*. But the approach
    to making it *Green* involves a whole bunch of refactoring. In these scenarios,
    it is better to rewind by marking the new *Red* test as skipped. Then you can
    safely refactor while you are on *Green*. Once your refactor is complete, un-skip
    your test, and you’re back on *Red*. Now make the test pass given all your refactoring
    work is done.
  prefs: []
  type: TYPE_NORMAL
- en: Why go through this dance? Because you have the safety of a fully *Green* test
    suite to tell whether your Refactor has been completed correctly or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by skipping the test you just added, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Re-run all your tests to check that they are passing, except for the skipped
    test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now in the `src/routes/birthdays/+page.server.js` file, update the implementation
    to read as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This new implementation gives us an `addNew` function that we can use in our
    latest test.
  prefs: []
  type: TYPE_NORMAL
- en: 'Re-run all tests and check that they have passed. Then, you can un-skip the
    latest test and re-run it. You should get a failure, as shown in the following
    block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Okay; we can just add an empty `default` function to get started. Add the following
    to the bottom of the `src/routes/birthdays/+page.server.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run the tests again, you’ll see from the failure that all the plumbing
    seems fine; it’s just that we’re missing the important call to add the birthday:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, make the test pass by adding the call to the `addNew` function that
    already exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Re-run your tests; the tests should all be passing now. And if you run the
    Playwright test, you should find it also passes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Now would be a great time to fire up the dev server and try the form out for
    real.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve now learned how to test-drive a SvelteKit form action, completing the
    last stage of work needed to fully test-drive an entire route.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has covered how to test-drive SvelteKit forms and form actions
    using both Playwright end-to-end tests and Vitest unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: You have seen how Vitest is useful for testing all the peculiarities of individual
    Svelte components but isn’t good at testing the framework code of SvelteKit, such
    as the code that takes an HTML form submit event, builds a server request, and
    invokes your form action. For that, you need a Playwright test.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll build on this form by adding some server-side form
    validations.
  prefs: []
  type: TYPE_NORMAL
