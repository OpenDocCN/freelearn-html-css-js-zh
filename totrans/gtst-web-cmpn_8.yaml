- en: Integrating Web Components with a Web Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we have either created Web Components from scratch
    or used a library to create Web Components. We even created a single-page web
    app using just Web Components. But what if we have an already-existing project?
    What if this is a monolithic frontend web application and we need a way to use
    a web component in this project? And what if we want to use a web component for
    a quick prototyped functionality without much overhead? This could save a lot
    of effort in both time and money.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is just for scenarios like this one; here we will look into ways
    in which we can use Web Components in already-existing projects.
  prefs: []
  type: TYPE_NORMAL
- en: By the way, this chapter is for advanced users.
  prefs: []
  type: TYPE_NORMAL
- en: I am assuming that you have worked on React, Angular, or Vue and that you are
    looking for ways to include Web Components into web applications that are already
    using one or more of these technologies. I am also assuming that you know how
    to run these web applications. However, for the sake of simplicity, we will look
    into the simplest component that uses one of these technologies and how two Vanilla
    Web Components can be included in any of these technologies.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to see the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Integration with already-existing projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Web Components in React
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Web Components in Angular
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Web Components in Vue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The <header-image> web component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s say that we have a web component called `<header-image>` whose purpose
    is to show an image, and, on hover, it should be able to show a text that shows
    a small description of the image. The definition of this web component would look
    something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are simply calling the `super()` method inside the constructor.
    Then we are creating a shadow root for the component and then calling the `render()`
    method. We are also making sure that any of the changes coming in via attributes
    re-render the web component to reflect the updates associated with these attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'As for the `render()` method, it looks something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we are adding an image to the HTML of the shadow root. In addition, we
    are also enabling error handling with the help of the `handleErrors()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This `handleErrors()` method looks for the missing attribute, `alt`, and spits
    out an error message asking the user to enter the `alttext`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use this web component with the following HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now that we know what our web component looks like, let's try to use it in already-existing
    projects. We will start with an existing project that uses React.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Web Components in React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's say that we have a React app. I am going to use the starter app provided
    by React. You are free to try this out in your more complex app. The steps for
    doing so are going to be exactly the same.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a React project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have your own app, you do not need to go through this section.
  prefs: []
  type: TYPE_NORMAL
- en: You can use the following link to set up the project: [https://facebook.github.io/create-react-app/](https://facebook.github.io/create-react-app/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the setup is done, you will be left with a project that can be run using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Adding a React component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the sake of simplicity, I am adding a React component. This React component
    is going to simulate a real life scenario of the component that is responsible
    for including the `<header-image>` web component. Let this React component be `MainBody`;
    its definition would look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, it shows just one line of text and nothing else. If you have
    a more complex component, the steps will be the same. As for the starter app,
    we will include this `MainBody` component in our `App` component first, which
    is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are simply importing the `MainBody` component and using it directly
    in the `App` component.
  prefs: []
  type: TYPE_NORMAL
- en: Integration of Vanilla Web Component in a React component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to use the `<header-image>` component inside the `MainBody` React
    component, we will be adding a few things to the `MainBody` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are importing our `<header-image>` web component from its respective
    location and then registering the custom element in the life cycle callback `componentDidMount()`
    method. Then, we are trying to send in `alt` and `src` via state variables to
    the `<header-image>` component.
  prefs: []
  type: TYPE_NORMAL
- en: The steps are the same for all the React components that are trying to use any
    Vanilla Web Component. Now that we have an understanding of how a web component
    can be used in a React project, let's take a look at how it would look inside
    an Angular app.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Web Components in Angular
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's say that we have an already-existing Angular app. This could be a full-fledged
    project or a starter app, and we want to use the `<header-image>` web component
    in an Angular component. We'll start with the setup.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an Angular project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's say that we want to start with a starter app. We can follow the steps
    given at the following URL to install and serve the starter app: [https://angular.io/guide/quickstart](https://angular.io/guide/quickstart).
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular does not support Vanilla Web Components by default, so even before
    we start using Web Components, though, we need to tell Angular that we want to
    use a web component. We can do so by adding the following code in the `app.module.ts`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This is to tell Angular to expect a custom element that is not built using Angular.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating with Angular
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s say we have a component called `app-main-body` built using Angular
    (`file: main-body.component.ts`) that looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want to include the `<header-image>` web component here, we can simply
    add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we are simply importing the component definition, and then inside the
    `ngOnInit()` callback method, we are registering the custom element. If we look
    at the template file, `main-body.component.html`, the web component can be included
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are passing in `src` as well as `altText` to the `<header-image>` component
    as attribute values. In this way, we can have Web Components built outside of
    Angular for use in Angular projects.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how a Vanilla Web Component can be used in Angular projects,
    let's look at how Web Components can be used in Vue components.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Web Components in Vue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vue is another one of those libraries that is growing incredibly fast, so I
    thought it would be a good thing if we saw how a web component can be included
    in a Vue component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say we have a `<main-body>` Vue component that looks something like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, it does nothing other than show text, just like the main body
    component in Angular and React. Let''s say we want to include the `<header-image>` web
    component to this `<main-body>` component. This would make the `<main-body>` component
    look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are simply importing the `HeaderImage` component and registering the
    web component inside the `created()` callback method. As you can see, it is very
    simple to use a web component inside a Vue component, and the attribute values
    can be passed into the web component via interpolation, as shown in the previous
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Using the process stated in this section, we can add an already-existing web
    component to any Vue project.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked into how we can integrate Web Components into already-existing
    projects that use some of the most famous libraries/frameworks in the frontend
    world. We learned how to add an existing web component built using Vanilla JavaScript
    to a React, Angular, or Vue project. The techniques learned in this chapter can
    be used with any framework or library and in any type of existing project. The
    inclusion of Web Components in already-existing projects is also a good use case
    for the quick prototyping of features, and the components can even be removed
    as soon as their work is done.
  prefs: []
  type: TYPE_NORMAL
- en: I hope that this chapter was useful in helping you create better web applications,
    whether they use Web Components or not.
  prefs: []
  type: TYPE_NORMAL
