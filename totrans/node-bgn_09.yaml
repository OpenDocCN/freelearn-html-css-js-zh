- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Handling HTTP and REST APIs
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理HTTP和REST API
- en: In this chapter, we will learn about the internet from both a historical point
    of view and a practical understanding of the infrastructure behind the internet
    that we know and use every day.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将从历史的角度和我们对互联网基础设施的实际理解来学习互联网。
- en: We will deep dive into the protocols and architectures that make it possible
    to create web projects and will explore the RFCs that are the backbone of the
    current web browsing experience.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将深入探讨那些使得创建网络项目成为可能的协议和架构，并会研究那些构成当前网络浏览体验基础的网络请求规范（RFCs）。
- en: We will master all the components and theoretical concepts around HTTP, URLs,
    and REST APIs.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将掌握围绕HTTP、URLs和REST API的所有组件和理论概念。
- en: 'To sum up, here are the main topics that we will explore in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，以下是本章我们将探讨的主要主题：
- en: The history of the internet and how the internet infrastructure works
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 互联网的历史以及互联网基础设施是如何工作的
- en: What **Requests for Comments** (**RFCs**) are and how to use them
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求评论（RFCs**）是什么以及如何使用它们'
- en: HTTP communications between the server and clients (**Single-Page Applications**
    (**SPAs**) versus server-side rendering)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器和客户端之间的HTTP通信（**单页应用（SPA**）与服务器端渲染）
- en: Mastering HTTP (headers, status codes, payloads, verbs, and more)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 掌握HTTP（头部、状态码、有效载荷、动词等）
- en: Using tools to debug HTTP requests
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用工具调试HTTP请求
- en: How REST APIs are structured
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST API的结构
- en: How the JSON spec works
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON规范的工作原理
- en: How the modern web works under the hood
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现代网络内部的工作原理
- en: By the end of this chapter, you will have a clear idea of all the pieces in
    place that constitute the current internet and how you should build your web projects
    by applying this knowledge learned in this chapter.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将对构成当前互联网的所有组成部分有一个清晰的认识，以及如何通过应用本章学到的知识来构建你的网络项目。
- en: Technical requirements
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code files for the chapter can be found at [https://github.com/PacktPublishing/NodeJS-for-Beginners](https://github.com/PacktPublishing/NodeJS-for-Beginners).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在[https://github.com/PacktPublishing/NodeJS-for-Beginners](https://github.com/PacktPublishing/NodeJS-for-Beginners)找到。
- en: Check out the code in action video for this chapter on [https://youtu.be/GleRpaaR2PQ](https://youtu.be/GleRpaaR2PQ)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 查看本章的代码演示视频，请访问[https://youtu.be/GleRpaaR2PQ](https://youtu.be/GleRpaaR2PQ)
- en: How the internet works under the hood
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 互联网内部的工作原理
- en: 'We use the internet every day, but do we know how it works? Wikipedia defines
    the internet as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们每天都在使用互联网，但我们真的知道它是如何工作的吗？维基百科将互联网定义为如下：
- en: “The Internet (or internet) is the global system of interconnected computer
    networks that uses the Internet protocol suite (TCP/IP) to communicate between
    networks and devices. It is a network of networks that consists of private, public,
    academic, business, and government networks of local to global scope, linked by
    a broad array of electronic, wireless, and optical networking technologies. The
    Internet carries a vast range of information resources and services, such as the
    interlinked hypertext documents and applications of the World Wide Web (WWW),
    electronic mail, telephony, and file sharing.”
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: “互联网（或互联网）是由使用互联网协议套件（TCP/IP）进行网络和设备间通信的全球互联计算机网络组成。它是一个由私有、公共、学术、商业和政府网络组成的网络，这些网络覆盖了从本地到全球的范围，并通过广泛的电子、无线和光网络技术相互连接。互联网承载着广泛的信息资源和服务，如万维网（WWW）的相互链接的超文本文档和应用、电子邮件、电话和文件共享。”
- en: Basically, the internet is a global system that connects computers together
    through networks and employs certain protocols and techniques to enable that communication
    in a resilient way. The internet is used by all kinds of entities and people to
    share information resources and services using tools such as electronic mail,
    file sharing, and so on.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，互联网是一个全球系统，通过网络将计算机连接起来，并采用某些协议和技术以弹性的方式实现通信。互联网被各种实体和个人用于通过电子邮件、文件共享等工具共享信息资源和服务。
- en: But to be honest, this definition is just scratching the surface. To understand
    how the internet works, we need to go back in time and understand how it started.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 但说实话，这个定义只是触及了表面。要了解互联网是如何工作的，我们需要回顾过去，了解它是如何开始的。
- en: History of the internet
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 互联网的历史
- en: The internet as we know it today was not created by a single person or specific
    group of people. The internet is the product of the work of many people who contributed
    to the creation of different technologies and ideas that, over time, became what
    we know today as the modern internet.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们今天所知道的互联网不是由单一个人或特定群体创造的。互联网是许多人为创造不同技术和思想的工作成果，随着时间的推移，这些技术和思想逐渐形成了我们今天所知道的现代互联网。
- en: 'There are two main concepts that we need to keep in mind when we try to understand
    how the internet works from the engineering perspective. These concepts are the
    following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们试图从工程角度理解互联网的工作原理时，有两个主要概念需要我们牢记。这些概念如下：
- en: '**Access to information**: While the computer world was stuck in the mainframe
    era, user terminals had to be connected to a mainframe. The idea of remote access
    started to grow. Over time, humanity discovered that if we connect computers together,
    we can share information and resources between them. Basically, we can segment
    and distribute information and computer resources. We can connect with other people
    and share information with them faster than ever before in the history of humanity.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信息访问**：当计算机世界还处于主机时代时，用户终端必须连接到主机。远程访问的想法开始兴起。随着时间的推移，人类发现如果我们把计算机连接起来，我们可以在它们之间共享信息和资源。基本上，我们可以分割和分配信息和计算机资源。我们可以比人类历史上任何时候都更快地与其他人建立联系并分享信息。'
- en: '**Resilience**: In the 1960s, the US government was concerned about the possibility
    of a nuclear attack that could destroy the communication infrastructure. This
    concern was the seed of the idea of a distributed network without a single point
    of failure that could survive a nuclear attack, and that is the reason why the
    internet is very often referred to as a network of networks.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弹性**：在20世纪60年代，美国政府担心可能发生核攻击，这可能会摧毁通信基础设施。这种担忧是分布式网络想法的种子，这个网络没有单一故障点，可以抵御核攻击，这也是为什么互联网经常被称为网络之网的原因。'
- en: Many more things needed to happen since the 20th century to make the internet
    a reality, but these two concepts remain strong in the architecture of the internet
    today.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 自20世纪以来，为了使互联网成为现实，还需要发生许多更多的事情，但这两个概念在互联网的架构中仍然非常强大。
- en: Important info
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: 'There is a great video that explains the history of the internet in a very
    simple way. You can watch it here: [https://www.youtube.com/watch?v=9hIQjrMHTv4](https://www.youtube.com/watch?v=9hIQjrMHTv4).'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个非常好的视频以非常简单的方式解释了互联网的历史。你可以在这里观看：[https://www.youtube.com/watch?v=9hIQjrMHTv4](https://www.youtube.com/watch?v=9hIQjrMHTv4)。
- en: Internet Infrastructure
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 互联网基础设施
- en: 'Just to give you an idea of the dependency that we all have on the internet,
    there are hundreds of optic fiber cables connecting the world across the oceans
    and seas to make internet connectivity possible. Here is a map of the submarine
    cables that connect the world:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 只为了给你一个我们所有人都对互联网的依赖性的概念，有数百条光纤电缆横跨海洋和海域，使互联网连接成为可能。以下是连接世界的海底电缆地图：
- en: '![Figure 9.1 – Our world is connected by dozens of fiber optic cables across
    the oceans. Screenshot from (https://www.submarinecablemap.com/) CC BY-SA 4.0.](img/B21678_09_01.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图9.1 – 我们的世界通过横跨海洋的数十条光纤电缆连接在一起。截图来自(https://www.submarinecablemap.com/)
    CC BY-SA 4.0.](img/B21678_09_01.jpg)'
- en: Figure 9.1 – Our world is connected by dozens of fiber optic cables across the
    oceans. Screenshot from ([https://www.submarinecablemap.com/](https://www.submarinecablemap.com/))
    CC BY-SA 4.0.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 – 我们的世界通过横跨海洋的数十条光纤电缆连接在一起。截图来自([https://www.submarinecablemap.com/](https://www.submarinecablemap.com/))
    CC BY-SA 4.0。
- en: Optic fiber cables are not the only way to connect to the internet. Other ways
    include satellites and radio waves. Over the years, the speed of the internet
    has increased and the cost of a connection has decreased thanks to endless research
    and innovation in the field of telecommunications.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 光纤电缆并不是连接互联网的唯一方式。其他方式包括卫星和无线电波。多年来，由于电信领域的无尽研究和创新，互联网的速度提高了，连接的成本降低了。
- en: Request for Comments (RFC)
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 请求评论 (RFC)
- en: In this chapter, we will focus a lot on the specifications, protocols, and standards
    that we need to get familiar with in order to make our applications work.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点介绍我们需要熟悉以使我们的应用程序正常工作的规范、协议和标准。
- en: If this is the first time that you’re exploring such exotic topics, you may
    feel overwhelmed by the amount of information that you need to digest. But don’t
    worry, we will explore all these topics in a very simple and functional way.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'The Internet Engineering Task Force (IETF) defines an Request for Comments
    (RFC) as follows ([https://www.ietf.org/standards/rfcs/](https://www.ietf.org/standards/rfcs/)):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: “ RFC documents contain technical specifications and organizational notes for
    the Internet.”
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Basically, RFC is a document that describes some kind of specification/protocol/standard
    to be designed as part of the internet architecture. Any person can submit an
    RFC to the IETF and if the RFC is approved, it becomes a standard while this sounds
    simple, this process can take a long time as the refinement and review process
    is exhaustive.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a simple extract from RFC 2616 ([https://www.rfc-editor.org/rfc/rfc2616.txt](https://www.rfc-editor.org/rfc/rfc2616.txt))
    that describes the **Hypertext Transfer Protocol – HTTP/1.1** in 175 pages:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Yeah, I know… this is not an easy read. I don’t expect you to read the whole
    RFC but we will explore some parts of it in this chapter in a practical way.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: The best aspect of RFCs is that they are free and you can read them online.
    You can find lots of quality information that can help you understand specific
    parts of the internet architecture when you need it.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '**Other RFCs**'
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Just to get rid of that overwhelming feeling, I would like to share with you
    other RFCs that are more fun to read:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '**RFC 2324** ([https://tools.ietf.org/html/rfc2324](https://tools.ietf.org/html/rfc2324)):
    Hyper Text Coffee Pot Control Protocol (HTCPCP/1.0)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RFC 1149** ([https://tools.ietf.org/html/rfc1149](https://tools.ietf.org/html/rfc1149)):
    A Standard for the Transmission of IP Datagrams on Avian Carriers'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And my favorite one:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '**RFC 2549** ([https://datatracker.ietf.org/doc/html/rfc2549](https://datatracker.ietf.org/doc/html/rfc2549)):
    IP over Avian Carriers with Quality of Service; an iteration of RFC 1149'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These funny RFCs can give you familiarity and an idea of the power of the RFC
    discussion format. Basically, if you want to create a new protocol, you can submit
    an RFC to the IETF and if the RFC is approved, it becomes a standard. You can
    read more about the RFC process here: [https://www.rfc-editor.org/about/independent/](https://www.rfc-editor.org/about/independent/).'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: One of the most important protocols that you will need to know as a web developer
    is HTTP. In the next section, we will explore this protocol in detail and will
    learn the different architectures and components it involves and that are in use
    today as the backbone of the internet as we know it.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: HTTP – server and client relationship
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While web development can be a very complex topic, we can simplify it by understanding
    the relationship between the server and the client in the typical web applications.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'We have two main actors, the server and the client:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '**Server**: The server is the computer that is running the application, dealing
    with the database queries, and many other things. This server is often called
    the backend.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器**：服务器是运行应用、处理数据库查询以及许多其他事务的计算机。这个服务器通常被称为后端。'
- en: '**Client**: The client is the piece of software that the end user executes
    on the local machine in the case of web applications. The user employs a web browser
    to execute the software (HTML, CSS, JS, etc.). The client is often called the
    frontend.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端**：在Web应用的情况下，客户端是最终用户在本地机器上执行的软件。用户使用网络浏览器来执行软件（HTML、CSS、JS等）。客户端通常被称为前端。'
- en: The communication between the server and the client is done through HTTP. The
    client sends a request to the server and the server replies with a response. This
    is the typical request/response cycle
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器和客户端之间的通信是通过HTTP完成的。客户端向服务器发送请求，服务器回复响应。这是典型的请求/响应周期
- en: Request and response
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 请求和响应
- en: The request and response are the two main parts of HTTP. The request is sent
    by the client to the server and the server returns a response. The request and
    response are composed of different parts that we will explore in the following
    sections.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 请求和响应是HTTP的两个主要部分。请求由客户端发送到服务器，服务器返回响应。请求和响应由以下章节中将要探讨的不同部分组成。
- en: '![Figure 9.2 – The relationship between the server, internet, and multiple
    clients](img/B21678_09_02.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图9.2 – 服务器、互联网和多个客户端之间的关系](img/B21678_09_02.jpg)'
- en: Figure 9.2 – The relationship between the server, internet, and multiple clients
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2 – 服务器、互联网和多个客户端之间的关系
- en: As we can see in the preceding diagram, one server can handle multiple clients
    at the same time. This is the typical architecture of a web application. The server
    handles the requests from clients and responds with the corresponding response.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，一个服务器可以同时处理多个客户端。这是Web应用的典型架构。服务器处理来自客户端的请求，并返回相应的响应。
- en: 'But very often, one client will send multiple requests to a single server or
    multiple servers. Let’s take a look at the following HTML snippet:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 但非常常见的情况是，一个客户端会向单个服务器或多个服务器发送多个请求。让我们看看以下HTML片段：
- en: '[PRE1]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As we can see, the client sends three requests to three different servers (`server1.com`,
    `server2.com`, and `server3.com`) asking for specific resources. Each server will
    eventually respond with the requested resource.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，客户端向三个不同的服务器（`server1.com`、`server2.com`和`server3.com`）发送三个请求，请求特定的资源。每个服务器最终都会响应并返回所需的资源。
- en: 'As a simple example, let’s go to [https://packtpub.com](https://packtpub.com)
    and open the developer tools in our browser. In the **Network** tab, we can see
    all the requests that the browser is sending to the server and the responses from
    the server:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 作为简单的例子，让我们访问[https://packtpub.com](https://packtpub.com)并在我们的浏览器中打开开发者工具。在**网络**标签页中，我们可以看到浏览器向服务器发送的所有请求以及服务器的响应：
- en: '![Figure 9.3 – Web browser screenshot](img/B21678_09_03.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图9.3 – 网络浏览器截图](img/B21678_09_03.jpg)'
- en: Figure 9.3 – Web browser screenshot
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3 – 网络浏览器截图
- en: 'If you pay attention to the bottom part of *Figure 9**.3*, you can easily see
    that this page is sending more than 60 requests targeting different servers to
    render the page. This is a very common scenario in web applications: the client
    sends multiple requests to the server(s) to get key resources including favicons,
    CSS files, JS files, images, videos, and raw data. If we look at the table, we
    can see each item that is loaded, and can debug and explore each request that
    was made. This can be intimidating at the beginning, but once you know how the
    filter works and you spend some hours working with it you will feel more comfortable.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你注意看*图9**.3*的底部，你可以很容易地看到这个页面正在向不同的服务器发送超过60个请求以渲染页面。这在Web应用中是一个非常常见的场景：客户端向服务器发送多个请求以获取关键资源，包括favicon、CSS文件、JS文件、图片、视频和原始数据。如果我们查看表格，我们可以看到加载的每个项目，并且可以调试和探索所发出的每个请求。这可能在开始时有些令人畏惧，但一旦你了解了过滤器的工作原理，并且花了一些时间与之工作，你会感到更加自在。
- en: Server-side rendering
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务器端渲染
- en: In the beginning, web applications were very simple, and JavaScript was very
    limited in its usage. Web applications were rendered on the server and the client
    just received the HTML, CSS, and JS files. This is called server-side rendering,
    and it is still used in many applications.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在最初，Web应用非常简单，JavaScript的使用非常有限。Web应用在服务器上渲染，客户端只接收HTML、CSS和JS文件。这被称为服务器端渲染，并且在许多应用中仍然在使用。
- en: While this model is still used today, there are some clear disadvantages. Any
    time the user wants to interact with the application, the server needs to render
    the page again and send it to the client. This generates a lot of traffic and
    the user experience is not the best, as there are moments where the website appears
    blank between refreshes.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个模型今天仍在使用，但它有一些明显的缺点。每次用户想要与应用程序交互时，服务器都需要重新渲染页面并发送给客户端。这产生了大量的流量，用户体验也不是最佳，因为在刷新之间，网站会出现空白的情况。
- en: '![Figure 9.4 – The relationship between the server and client in the server-side
    rendering approach](img/B21678_09_04.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图9.4 – 服务器端渲染方法中服务器和客户端之间的关系](img/B21678_09_04.jpg)'
- en: Figure 9.4 – The relationship between the server and client in the server-side
    rendering approach
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4 – 服务器端渲染方法中服务器和客户端之间的关系
- en: This pattern was especially bad in the early days of smartphones, when mobile
    devices were not powerful enough to render the pages and the connection was not
    very good. The user experience was very bad. The solution was to move the rendering
    to the client side, this is called client-side rendering.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式在智能手机的早期阶段尤其糟糕，当时移动设备没有足够强大的功能来渲染页面，而且连接也不是很好。用户体验非常糟糕。解决方案是将渲染移动到客户端，这被称为客户端渲染。
- en: Single-Page Applications (SPAs)
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单页应用程序（SPAs）
- en: In client-side rendering, the server sends the initial HTML, CSS, and JS files
    to the client. Then, JavaScript takes control of the application and renders the
    views on the client side. Thus, the server only sends the data to the client and
    the client renders the page. This is called a **Single-Page Application** (**SPA**)
    and it is the most common pattern today.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端渲染中，服务器将初始的HTML、CSS和JS文件发送到客户端。然后，JavaScript接管应用程序并将在客户端渲染视图。因此，服务器只向客户端发送数据，客户端渲染页面。这被称为**单页应用程序**（SPA），它是今天最常用的模式。
- en: '![Figure 9.5 – The relationship between the server in the AJAX approach](img/B21678_09_05.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图9.5 – AJAX方法中服务器和客户端之间的关系](img/B21678_09_05.jpg)'
- en: Figure 9.5 – The relationship between the server in the AJAX approach
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.5 – AJAX方法中服务器和客户端之间的关系
- en: At first, this pattern was very complicated to implement, but with the evolution
    of JavaScript frameworks, this pattern has become very popular. Today, we have
    a lot of frameworks that can help us to build SPAs easily. Some of the most popular
    frameworks are Angular, React, and Vue.js. The SPA pattern uses the same HTTP
    but in a different way via **Asynchronous JavaScript and XML** (**AJAX**) requests.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，这种模式实现起来非常复杂，但随着JavaScript框架的发展，这种模式变得非常流行。今天，我们有很多框架可以帮助我们轻松构建SPA。其中一些最受欢迎的框架是Angular、React和Vue.js。SPA模式使用相同的HTTP，但通过**异步JavaScript和XML**（AJAX）请求以不同的方式使用。
- en: This new technique introduced a lot of changes and innovations in the way we
    build the backend applications. Backend applications became more like an **Application
    Programming Interface** (**API**) that responds with data to the client, and not
    only to the typical web clients, but now even servers can also use this API to
    exchange information with each other.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这种新技术在构建后端应用程序的方式上引入了许多变化和创新。后端应用程序更像是一个**应用程序编程接口**（API），它向客户端响应数据，而不仅仅是典型的网络客户端，现在服务器也可以使用这个API相互交换信息。
- en: Now that we have a clear idea of the components and possible web architectures,
    it is time to deep dive into HTTP so we can build solid projects using standardized
    communication between the server and the clients.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对组件和可能的网络架构有了清晰的认识，是时候深入探讨HTTP了，这样我们就可以使用标准化的服务器和客户端之间的通信来构建稳固的项目。
- en: Mastering HTTP
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 掌握HTTP
- en: Now that we have a better understanding of the HTTP concept, let’s take a look
    at the different parts of HTTP that we need to understand in order to build a
    web application.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对HTTP概念有了更好的理解，让我们看看构建网络应用需要了解的HTTP的不同部分。
- en: We have already seen the request and response, but let’s take a deeper look
    at the different parts that compose the request and the response (headers, payloads,
    versions, and methods).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了请求和响应，但让我们更深入地看看构成请求和响应的不同部分（头信息、有效载荷、版本和方法）。
- en: HTTP headers
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTTP头信息
- en: Each request and response has a set of headers. These are key-value pairs and
    provide additional information about the request or the response.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 每个请求和响应都有一个头信息集合。这些是键值对，提供了关于请求或响应的额外信息。
- en: While both the request and response headers may look similar, they are not the
    same, although they do share common key-value pairs.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Request headers
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will start by analyzing in *Figure 9**.6* what is included in the request
    header:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.6 – Attributions and copyright licensing by Mozilla Contributors
    is licensed under CC-BY-SA 2.5](img/B21678_09_06.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
- en: Figure 9.6 – Attributions and copyright licensing by Mozilla Contributors is
    licensed under CC-BY-SA 2.5
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s group the different header properties:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'Representation headers: `content-type` and `content-length`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'General headers: `keep-alive` and `upgrade-insecure-requests`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Request headers: `accept`, `accept-encoding`, `accept-language`, `host`, and
    `user-agent`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Just by looking at the headers, we can understand many things about a request,
    such as the type of content the client is expecting, the language, and the browser
    used. The server can use this information to provide a better response to the
    client.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Important info
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'This is just a small list of the possible headers. There are many more headers
    that we can use to provide more information about the request or response. We
    can even create our own key-value pairs. You can find the list of the HTTP headers
    here: [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers).'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Response headers
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will finish by analyzing in the *Figure 9**.7* what is included in the response
    header
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7 – Attributions and copyright licensing by Mozilla Contributors
    is licensed under CC-BY-SA 2.5](img/B21678_09_07.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
- en: Figure 9.7 – Attributions and copyright licensing by Mozilla Contributors is
    licensed under CC-BY-SA 2.5
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'The response headers are very similar to the request headers, but they are
    not the same. They can be grouped as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'Representation headers: `content-type`, `content-encoding`, and `last-modified`'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'General headers: `connection`, `date`, `keep-alive`, and `transfer-encoding`'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Response headers: `access-control-allow-origin`, `etag`, `server`, `set-cookie`,
    `vary`, and `x-frame-options`'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the response headers, we can also provide additional information that will
    help the browsers and the web applications to digest and render the information
    properly.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: The response headers are very important for the security of the application,
    as there are many headers that can prevent certain attacks in the web browser
    environment. For example, we can use `x-frame-options` to prevent the application
    from being loaded in an `iframe`, or use `feature-policy` to prevent the application
    from using features such as the camera or microphone. We will explore this in
    [*Chapter 15*](B21678_15.xhtml#_idTextAnchor394).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Status codes
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Overall, one of the most important pieces of information that we can find in
    the response is the status code.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: 'The status code allows us to understand whether the request was successful
    or not and can even provide more granular feedback. We can classify status codes
    into the following groups:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '1xx: Informational'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '2xx: Success'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '3xx: Redirection'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '4xx: Client Error'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '5xx: Server Error'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The most common status codes are `200 OK`, `201 Created`, `301 Moved Permanently`,
    `400 Bad Request`, `401 Unauthorized`, `403 Forbidden`, `404 Not Found`, `429
    Too Many Requests`, `500 Internal Server Error`, and `503 Service Unavailable`.
    You can find the complete list of the status codes here: [https://developer.mozilla.org/en-US/docs/Web/HTTP/Status](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status).'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, if you know the given status code, you can understand what happened
    with your request. For example, a `429` error code occurs when the client has
    sent too many requests in a given amount of time (“rate limiting”), but if you
    receive a `401` then the error is related to your authentication. Finally, if
    in the same scenario you receive `403`, you are correctly authenticated but you
    don’t have enough permission to perform the given operation, such as deleting
    another user account.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: We all have experienced the `404` error code, which is very common when we try
    to access a resource that doesn’t exist. For example, if we try to access the
    following URL, `https://www.google.com/invented-resource`, we will receive a `404`
    error code.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: 418 I’m a teapot
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a strong culture on the internet to build fancy 404 pages. You can
    find a lot of examples online, but not many people know that there is a special
    error code `418` that RFC 2324 ([https://tools.ietf.org/html/rfc2324](https://tools.ietf.org/html/rfc2324))
    describes as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: “Any attempt to brew coffee with a teapot should result in the error code “418
    I’m a teapot”. The resulting entity body MAY be short and stout.”
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: While this might seem just like a running joke, it is actually supported by
    many entities including Node ([https://github.com/nodejs/node/issues/14644](https://github.com/nodejs/node/issues/14644))
    and Google.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.8 – Web browser screenshot of google.com/teapot](img/B21678_09_08.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
- en: Figure 9.8 – Web browser screenshot of google.com/teapot
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: 'As Shane Brunswick said on the Save 418 Movement website ([https://save418.com/](https://save418.com/)):'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: “It’s a reminder that the underlying processes of computers are still made by
    humans. It’d be a real shame to see 418 go.”
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: 'And I do agree with him: behind these complex systems there are humans, and
    we should not forget that, in the same way that we should not forget that the
    internet could not exist without the open source movement and the hacker culture.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Request methods
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just as status codes are very important to understand responses, the request
    methods are essential to understand requests.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many request methods, but the most common are the following: `GET`,
    `POST`, `PUT`, `PATCH`, and `DELETE`. You can find the complete list of the request
    methods here: [https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods).'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: 'The way that we backend developers use them can differ a bit, but the most
    common way is the following:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '`GET`: Retrieve a resource'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POST`: Create a resource'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PUT`: Update a resource'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PATCH`: Partially update a resource'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELETE`: Delete a resource'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will explore them in detail in [*Chapter 11*](B21678_11.xhtml#_idTextAnchor300)*,*
    when we create an actual REST API with all the endpoints.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: 'In the early days of the internet, we used forms to send data to the server
    and specified the given method in the form. See the following, for example:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The preceding code was a common way to send data to a server in order to create
    a new user, but nowadays we use JavaScript to send data to the server. For example,
    we can use the `fetch` API to send data to the server as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: And then we would use the response to inform the user whether the request was
    successful or not. While using JavaScript to send data to the server is more complex,
    it gives us more flexibility and control over the request.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: When you enter a URL in the browser, the browser sends a `GET` request to the
    server. This is the default method that the browser uses. You have been using
    HTTP methods for a long time without knowing it.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: HTTP payloads
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: HTTP messages can carry a payload, which means that we can send data to the
    server, and servers likewise can send data to their clients. This is often done
    with `POST` requests.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'Payloads can be in many formats, but the most common are the following:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '`application/json`: Used when sharing JSON data'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`application/x-www-form-urlencoded`: Used when sending simple texts in ASCII,
    sending data in the URL'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`multipart/form-data`: Used when sending binary data (such as files) or non-ASCII
    texts'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text/plain`: Used when sending plain text, such as a log file'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can find the complete list of the content types here: [https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types).'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP versions
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'HTTP has evolved over the years, and we have different versions of the protocol:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '| **Version** | **Year** | **Status** |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
- en: '| `HTTP/0.9` | 1991 | Obsolete |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
- en: '| `HTTP/1.0` | 1996 | Obsolete |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
- en: '| `HTTP/1.1` | 1997 | Standard |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
- en: '| `HTTP/2` | 2015 | Standard |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
- en: '| `HTTP/3` | 2022 | Standard |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
- en: Currently, the most used version of the protocol is the `HTTP/1.1` version,
    but the `HTTP/2` version is gaining popularity. The `HTTP/3` version is quite
    new and not widely supported yet.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: 'Nowadays, Node supports the `HTTP/1.1` and `HTTP/2` versions, but it doesn’t
    support the `HTTP/3` version yet. There is an ongoing strategic initiative to
    support it: [https://github.com/nodejs/node/issues/38478](https://github.com/nodejs/node/issues/38478).'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn how important **Uniform Resource Locators**
    (**URLs**) are and how we can use them to structure access to resources in our
    web applications.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Using URLs in web applications
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s take a look at the following table, made by Node.js, that describes the
    different parts of a URL:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.9 – URL structure from the Node.js Official Documentation. Attributions
    and copyright licensing by Node.js Contributors is licensed under MIT](img/B21678_09_09.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
- en: Figure 9.9 – URL structure from the Node.js Official Documentation. Attributions
    and copyright licensing by Node.js Contributors is licensed under MIT
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following chapters, we will use the URL parts a lot, so keep this table
    handy. There are many ways to parse a URL, but the most common way is to use the
    `URL` class:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This class is available in Node.js and in the browser.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: Important info
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: 'Node.js 20 introduced one of the most performant URL parsers available, called
    Ada 2.0: [https://www.yagiz.co/announcing-ada-url-parser-v2-0](https://www.yagiz.co/announcing-ada-url-parser-v2-0).'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how flexible URLs are, let’s explore in the next section how
    we can build a standard layer on top of our web services. This layer is the foundation
    of many online services and SaaS products. We will learn the basics of creating
    web application interfaces (APIs).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: REST APIs in a nutshell
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**REST** stands for **Representational State Transfer**, and is an architectural
    style for building APIs. It was introduced by Roy Fielding in his PhD dissertation
    ([https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm](https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm))
    in 2000.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: In practical terms, the idea is to define a set of resources that can be accessed
    by the client using HTTP, as we explored in the previous section.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: Each resource is identified by a unique URL, and the client can perform operations
    on it using the HTTP methods. The server will respond with a status code and a
    payload when necessary.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let’s say that we have a REST API to manage a database of movies.
    We can define the following resources:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '`/movies`: This resource represents the collection of movies'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/movies/:id`: This resource represents a single movie'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important tip
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: The `:id` part of the URL is a placeholder for the user ID. This is called a
    URL parameter, and takes the form of `/movies/1` or `/movies/12345`, and so on.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: 'The client can perform the following operations on these resources using the
    aforementioned HTTP methods:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '`GET /movies:` Get all the movies'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GET /movies/:id`: Get a single movie'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POST /movies`: Create a new movie'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PUT /movies/:id`: Update a movie'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELETE /movies/:id`: Delete a movie'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most of the time, the server will respond with a JSON payload, but it can also
    respond with other formats such as XML or HTML.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see an example of a REST API in action. We will use simple-api ([https://www.npmjs.com/package/@ulisesgascon/simple-api](https://www.npmjs.com/package/@ulisesgascon/simple-api)),
    which is a very simple HTTP API to build fast prototypes. This API includes Swagger
    documentation that can be used to explore the API.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.10 – Web browser screenshot of the API documentation generated with
    Swagger](img/B21678_09_10.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
- en: Figure 9.10 – Web browser screenshot of the API documentation generated with
    Swagger
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, the API is quite intuitive and easy to use because it follows
    the REST principles. So, you intuitively know how to use it. We can use Swagger
    to explore more details of the payload expected by the API when we create a new
    todo:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.11 – Web browser screenshot of the API documentation generated with
    Swagger](img/B21678_09_11.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
- en: Figure 9.11 – Web browser screenshot of the API documentation generated with
    Swagger
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also possible to explore the potential responses that the API can return
    for any specific endpoint that is available:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.12 – Web browser screenshot of the API documentation generated with
    Swagger](img/B21678_09_12.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
- en: Figure 9.12 – Web browser screenshot of the API documentation generated with
    Swagger
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: If you understand how RESTful APIs work, you will be able to use any API based
    on HTTP. For example, the GitHub API [https://docs.github.com/en/rest](https://docs.github.com/en/rest)
    is a REST API that uses HTTP to expose its services.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a world full of APIs out there, waiting for you to use them to build
    amazing projects. Here is a great list of public APIs: [https://apilist.fun/](https://apilist.fun/)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the previous chapters, we have mentioned JSON, but we haven’t explained
    it in detail, so in the next section we will deep dive into it, as it is the most
    common format to exchange data in modern APIs.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the JSON specification
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**JSON** stands for **JavaScript Object Notation**, and is a lightweight data-interchange
    format. It is easy for humans to read and write, and it is easy for machines to
    parse and generate.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: 'We can easily convert a JavaScript object to a JSON string using the `JSON.stringify()`
    method:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And we can convert a JSON string to a JavaScript object using the `JSON.parse()`
    method:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: While the JSON name includes the world JavaScript, it is a language-independent
    data format. Many programming languages have libraries to parse and generate JSON.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: JSON is the most common format used to exchange data between clients and servers,
    such as when we use or build a REST API.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: The JSON specification is quite simple, and I strongly suggest you read it.
    You can find it at [https://www.ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf](https://www.ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf)
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will explore how to debug HTTP requests so that we can
    build complex projects easily.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: Debugging HTTP requests
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many ways to debug HTTP requests. The most common way is to use the
    developer tools, as these are easily accessible in most web browsers. It is also
    quite helpful when you are developing a website to keep these tools open and navigate
    between the tabs to debug UI components and network requests.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: But there are also other tools that you can use, such as Postman ([https://www.postman.com/](https://www.postman.com/))
    or Insomnia ([https://insomnia.rest/](https://insomnia.rest/)), which were designed
    specifically for this purpose and offer many features out of the box (collections,
    authentication, etc.). These tools are the best option if you don’t have a website
    and you are just testing API endpoints directly.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapters, we will use the developer tools of the browser to debug
    our HTTP transactions and will use Jest to test and debug our HTTP requests.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: Other developers use more advanced tools such as Charles ([https://www.charlesproxy.com/](https://www.charlesproxy.com/))
    or Wireshark ([https://www.wireshark.org/](https://www.wireshark.org/)), but they
    are not necessary for the scope of this book.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: If you are not familiar with the developer tools of your browser, you can read
    more about it in [*Chapter 2*](B21678_02.xhtml#_idTextAnchor036).
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned a lot about the technologies that we will use
    to build our applications and that constitute the foundation of the modern internet.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we have learned how RFC documents are used to define the standards
    of the internet and how we can use them to learn more about the technologies that
    we use.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: Later on, we learned how the server-client architecture works and how HTTP is
    used to exchange data between the client and the server in detail, including HTTP
    methods and status codes.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we explored the URL parts and learned how to use them to build RESTful
    APIs. We also learned about the JSON specification in more detail and how to debug
    HTTP requests.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore how we can use databases to store data
    and how we can interact with them. This is the last piece of the puzzle before
    we can start building our final web application.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Wikipedia* | *IP over Avian* *Carriers*: [https://en.wikipedia.org/wiki/IP_over_Avian_Carriers](https://en.wikipedia.org/wiki/IP_over_Avian_Carriers)'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Wikipedia* | *HTTP*: [https://en.wikipedia.org/wiki/HTTP](https://en.wikipedia.org/wiki/HTTP)'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*History of the* *Internet*: [https://www.youtube.com/watch?v=9hIQjrMHTv4](https://www.youtube.com/watch?v=9hIQjrMHTv4)'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*How the Internet Works in 5* *Minutes*: [https://www.youtube.com/watch?v=7_LPdttKXPc](https://www.youtube.com/watch?v=7_LPdttKXPc)'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*五分钟了解互联网是如何工作的*：[https://www.youtube.com/watch?v=7_LPdttKXPc](https://www.youtube.com/watch?v=7_LPdttKXPc)'
- en: 'An overview of HTTP: [https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview](https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview)'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP 概述：[https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview](https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview)
- en: '*Project Code Rush - The Beginnings of Netscape / Mozilla* *Documentary*: [https://www.youtube.com/watch?v=4Q7FTjhvZ7Y](https://www.youtube.com/watch?v=4Q7FTjhvZ7Y)'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《项目代码狂潮 - Netscape / Mozilla 的起源》* *纪录片*：[https://www.youtube.com/watch?v=4Q7FTjhvZ7Y](https://www.youtube.com/watch?v=4Q7FTjhvZ7Y)'
- en: '*How The Internet Travels Across* *Oceans*: [https://www.youtube.com/watch?v=yd1JhZzoS6A](https://www.youtube.com/watch?v=yd1JhZzoS6A)'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*互联网如何穿越* *海洋*：[https://www.youtube.com/watch?v=yd1JhZzoS6A](https://www.youtube.com/watch?v=yd1JhZzoS6A)'
- en: '*There is a Reason Why Underwater Power Cables are So* *Expensive*: [https://www.youtube.com/watch?v=bkgvqC3M1Tw](https://www.youtube.com/watch?v=bkgvqC3M1Tw)'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*海底电力电缆之所以如此* *昂贵* *的原因：[https://www.youtube.com/watch?v=bkgvqC3M1Tw](https://www.youtube.com/watch?v=bkgvqC3M1Tw)'
- en: '*Jeff Geerling* | *Testing one of the oldest internet* *myths*: [https://www.youtube.com/watch?v=4pz2kMxCu8I](https://www.youtube.com/watch?v=4pz2kMxCu8I)'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*杰夫·吉尔林* | *测试互联网* *最古老的神话*：[https://www.youtube.com/watch?v=4pz2kMxCu8I](https://www.youtube.com/watch?v=4pz2kMxCu8I)'
