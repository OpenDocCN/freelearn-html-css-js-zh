["```js\n{\n     \"intentName1\": \"This is the answer to question 1\",\n     \"intentName2\": \"You do this by selecting 'A' and then pressing 'START'\"\n     ...\n }\n```", "```js\n{\n    \"howItWorks\": \"CircleLoop is a cloud-based business phone system, which allows ... settings.\",\n    \"technicalKnowledge\": \"No. We’ve made it really easy with our simple apps. As long as ... and you’re ready to go.\",\n    ...\n    \"sevenDayTrial\": \"Full user privileges, including the ability to add users ... during your trial period.\"\n}\n```", "```js\nexports.handler = async event => {\n};\n```", "```js\nlet intentName = event.currentIntent.name;\n```", "```js\nconst AWS = require('aws-sdk');\nconst s3 = new AWS.S3();\n```", "```js\nvar params = {\n    Bucket: 'cl-faq',\n    Key: `faq-setup.json`\n};\n\nreturn new Promise((resolve, reject) => {\n    // do something\n    resolve(success);\n    reject(failure);\n})\n```", "```js\nreturn new Promise((resolve, reject) => {\n    s3.getObject(params, function(err, data) {\n        if (err) { // an error occurred\n            reject(handleS3Error(err));\n        } else { // successful response\n            console.log(data);\n            resolve(handleS3Data(data, intentName));\n        }\n    });\n})\n```", "```js\nconst handleS3Error = err => {\n}\n\nconst handleS3Data = (data, intentName) => {\n}\n```", "```js\nlet body = JSON.parse(data.Body);\n```", "```js\nif (!body[intentName]){\n    return handleS3Error(`Intent name ${intentName} was not present in faq-setup.json`);\n}\n```", "```js\nconsole.log('error of: ', err);\nlet errResponse = `Unfortunately I don't know how to answer that. Is there anything else I can help you with?`;\n```", "```js\nsessionAttributes: {},\ndialogAction: {\n    type: '',\n    fulfillmentState: '',\n    slots: {},\n    slotToElicit: '',\n    message: { contentType: 'PlainText', content:  ''};\n}\n```", "```js\nconst lexClose = ({ message, sessionAttributes = {}, fulfillmentState = \"Fulfilled\"}) => {\n    return {\n        sessionAttributes,\n        dialogAction: {\n            type: 'Close',\n            fulfillmentState,\n            message: { contentType: 'PlainText', content: message }\n        }\n    }\n}\n```", "```js\nreturn lexClose({ message: body[intentName] });\n```", "```js\nconst lexElicitIntent = ({ message, sessionAttributes = {} } ) => {\n    return {\n        sessionAttributes,\n        dialogAction: {\n            type: 'ElicitIntent',\n            message: { contentType: 'PlainText', content: message }\n        },\n    };\n}\n```", "```js\nreturn lexElicitIntent({ message: errResponse });\n```", "```js\nconst lexElicitSlot = ({ sessionAttributes = {}, message, intentName, slotToElicit, slots }) => {\n     return {\n         sessionAttributes,\n         dialogAction: {\n             type: 'ElicitSlot',\n             intentName,\n             slots,\n             slotToElicit,\n             message: { contentType: 'PlainText', content: message }\n         },\n     };\n }\n```", "```js\nreturn lexElicitSlot({\n     intentName: 'whichCar',\n     slotToElicit: 'size',\n     slots: {\n         size: null,\n         cost: 'value',\n         doors: 5,\n         gears: null\n     }\n })\n```", "```js\nconst lexElicitIntent = ({ message, sessionAttributes = {} } ) => {\n    return {\n        sessionAttributes,\n        dialogAction: {\n            type: 'ElicitIntent',\n            message: { contentType: 'PlainText', content: message }\n        },\n    };\n}\n```", "```js\nconst lexConfirmIntent = ({ sessionAttributes = {}, intentName, slots, message }) => {\n    return {\n        sessionAttributes,\n        dialogAction: {\n            type: 'ConfirmIntent',\n            intentName,\n            slots,\n            message: { contentType: 'PlainText', content: message }\n        },\n    };\n}\n```", "```js\nconst lexClose = ({ sessionAttributes = {}, fulfillmentState = 'Fulfilled', message }) => {\n     return {\n         sessionAttributes,\n         dialogAction: {\n             type: 'Close',\n             fulfillmentState,\n             message: { contentType: 'PlainText', content: message }\n         },\n     };\n }\n```", "```js\nconst lexDelegate = ({ sessionAttributes = {}, slots }) => { \n    return { \n        sessionAttributes, \n        dialogAction: { type: 'Delegate', slots, }\n    }; \n}\n```"]