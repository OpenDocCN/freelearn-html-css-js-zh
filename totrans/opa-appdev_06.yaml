- en: Chapter 6. Binding with Other Languages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in the *Register handler* section of [Chapter 3](ch03.html "Chapter 3. Developing
    Web Applications"), *Developing Web Applications*, we can register external JavaScript
    code by utilizing the `Resource.register_external_js` function. But, this is not
    how we call external JavaScript functions from Opa. This is only true when we
    wish to invoke Node.js functions. In such cases, we instead bind external functions
    with Opa's binding ability. In this chapter, we will explain how to bind external
    JavaScript or Node.js functions.
  prefs: []
  type: TYPE_NORMAL
- en: Binding JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Opa allows binding of the external functions through its **Binding System Library**
    (**BSL**). If we surf the source code of Opa, we will find in many places that
    Opa binds JavaScript in its source code. Actually, Opa provides three forms of
    binding syntax: `classic` , `jsdoc`, and `new`. The jsdoc syntax is now (Opa 1.1.0)
    the default.'
  prefs: []
  type: TYPE_NORMAL
- en: The first example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's get started with a binding example of JavaScript. Suppose we have finished
    a `test` function in the `test.js` JavaScript file, and then we want to use it
    in the `601.opa` Opa file.
  prefs: []
  type: TYPE_NORMAL
- en: '![The first example](img/3749OS_06_01.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The content of the `test.js` file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We registered the `test` function using the annotation `@register {string ->
    void}`. This indicates that the function being registered has the `string -> void`
    type. To invoke the `test` function in Opa code, we designate the function as
    an external JavaScript function by surrounding the name of the function with the
    special designator `%%`. In the following example, we call the JavaScript `test`
    function located in `test.js` from within the `601.opa` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We call the function using `%%test.test%%("Hello Opa!")`. The word "test" appears
    in this example twice, once preceding the dot and once after the dot. The first
    "test" is the name of the plugin module; in this case it is the filename of `test.js`.
    The second "test" is the name of the function that we define in this file. We
    can compile the JavaScript code and Opa code together by using the following command
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, the registered function name is identical to the original function
    name that we defined in the JavaScript file. However, we can modify the name as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note that we added `test2` to the end of the line that we used to register the
    function. Now, we can invoke it using `%%test.test2%%("Hello Opa!")`.
  prefs: []
  type: TYPE_NORMAL
- en: Using external types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, we may want to handle the Opa types such as list (`a), option ('a),
    or Opa external types that we defined in Opa in JavaScript. In the following example,
    we define a type `Student` and its variable `stu`; variable `lst` is the Opa type
    `list(string)`, which we may not use in JavaScript directly; and the variable
    `arr` is an external type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In our JavaScript file, we define three functions: `func1`, `func2`, and `func3`.
    `func1` accepts type `Student`, `func2` accepts type `list(string)`, and `func3`
    accepts type `llarray(int)`. All these three functions do nothing but print the
    content of their respective arguments to the console. The first thing we should
    do is declare Opa types and external types with the directives `@opaType` and
    `@externType` respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The content of the file `test2.js` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Compile and run `opa test2.js 602.opa --`
  prefs: []
  type: TYPE_NORMAL
- en: Press *F12* in your Chrome browser to open the developer tool and you will see
    the output we printed in the console.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using external types](img/3749OS_06_02.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Binding Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Binding Node.js code is just as easy as binding JavaScript. Let''s see an example:
    suppose we have written a function called `calcMD5` in a Node.js file called `test.nodejs`.
    The function accepts a string and returns its MD5 hash value. The `test.nodejs`
    file contains the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see from the preceding code, we bind Node.js in the same manner that
    we previously used to bind the client-side JavaScript code. We also invoke it
    in the same way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, we compile and run the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Binding Node.js](img/3749OS_06_03.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Binding external functions using the classic syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can also bind external functions with the `classic` syntax. The `classic`
    syntax is a little different from the `jsdoc` syntax. It uses `##` to register
    functions. A typical registration body is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In `classic` syntax, `test2.js` will contain the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now compile the rewritten file using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we talked about how to bind client-side JavaScript and server-side
    Node.js into our Opa code. We described two syntax variations: `classic` syntax
    and `jsdoc` syntax. The examples used in this chapter demonstrated that binding
    JavaScript and Node.js is quite trivial in Opa.'
  prefs: []
  type: TYPE_NORMAL
