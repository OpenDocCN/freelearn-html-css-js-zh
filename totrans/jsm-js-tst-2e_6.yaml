- en: Chapter 6. Light Speed Unit Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 4](ch04.html "Chapter 4. Asynchronous Testing – AJAX"), *Asynchronous
    Testing – AJAX*, we saw how including AJAX testing in the application can increase
    the complexity of the tests. In the example in that chapter, we created a server
    where the results were predictable. It was basically a complex test fixture. Even
    though we could have used a real server implementation, it would increase the
    complexity of the test even more; try changing the state of a server with a database
    or third-party services from the browser—it is not an easy or scalable solution.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: There is also the impact on productivity; these requests take time to process
    and transmit, which hurts the quick feedback loop that unit testing usually provides.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: You can also say that these specs test both the client and the server code and,
    therefore, could not be considered unit tests; rather, they could be considered
    integration tests.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: A solution to all these problems is to use either **stubs** or **fakes** in
    place of the real dependencies of the code. So, instead of making a request to
    the server, we use a test double of the server inside the browser.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: We are going to use the same example from [Chapter 4](ch04.html "Chapter 4. Asynchronous
    Testing – AJAX"), *Asynchronous Testing – AJAX*, and rewrite it using different
    techniques.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Jasmine stubs
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already seen some use cases for Jasmine spies. Remember that a spy is
    a special function that records how it was called. You can think of a stub as
    a spy with behavior.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: We use stubs whenever we want to force a specific path in our specs or replace
    a real implementation for a simpler one.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Let's revisit the example of the acceptance criteria, "Stock when fetched, should
    update its share price", by rewriting it using Jasmine stubs.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: 'We know that the stock''s `fetch` function is implemented using the `$.getJSON`
    function, as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We could use the `spyOn` function to set up a spy on the `getJSON` function
    with the following code:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'But this time, we will use the `and.callFake` function to set a behavior to
    our spy (by default, a spy does nothing and returns undefined). We make the spy
    invoke its `callback` parameter with an object response (`{ sharePrice: 20.18
    }`).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Later, at the expectation, we use the `toEqual` assertion to verify that the
    stock's `sharePrice` has changed.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: To run this spec, you no longer need a server to make the requests to, which
    is a good thing, but there is one issue with this approach. If the fetch function
    gets refactored to use `$.ajax` instead of `$.getJSON`, then the test will fail.
    A better solution, provided by a Jasmine plugin called **jasmine-ajax**, is to
    stub the browser's AJAX infrastructure instead, so the implementation of the AJAX
    request is free to be done in different manners.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Jasmine Ajax
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jasmine Ajax is an official plugin developed to help out the testing of AJAX
    requests. It changes the browser's AJAX request infrastructure to a fake implementation.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: This fake (or mocked) implementation, although simpler, still behaves like the
    real implementation to any code using its API.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模拟（或模拟）实现，虽然更简单，但仍然对使用其 API 的任何代码表现得像真实实现。
- en: Installing the plugin
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装插件
- en: Before we dig into the spec implementation, first we need to add the plugin
    to the project. Go to [https://github.com/jasmine/jasmine-ajax/](https://github.com/jasmine/jasmine-ajax/)
    and download the current release (which should be compatible with the Jasmine
    2.x release). Place it inside the `lib` folder.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入研究规范实现之前，首先我们需要将插件添加到项目中。访问 [https://github.com/jasmine/jasmine-ajax/](https://github.com/jasmine/jasmine-ajax/)
    并下载当前版本（应与 Jasmine 2.x 版本兼容）。将其放置在 `lib` 文件夹中。
- en: 'It is also needed to be added to the `SpecRunner.html` file, so go ahead and
    add another script:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 它还需要添加到 `SpecRunner.html` 文件中，所以请继续添加另一个脚本：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A fake XMLHttpRequest
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模拟的 XMLHttpRequest
- en: Whenever you are using jQuery to make AJAX requests, under the hood it is actually
    using the `XMLHttpRequest` object to perform the request.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 无论何时使用 jQuery 进行 AJAX 请求，实际上底层都是使用 `XMLHttpRequest` 对象来执行请求。
- en: '`XMLHttpRequest` is the standard JavaScript HTTP API. Even though its name
    suggests that it uses XML, it supports other types of content such as JSON; the
    name has remained the same for compatibility reasons.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`XMLHttpRequest` 是标准的 JavaScript HTTP API。尽管其名称暗示它使用 XML，但它支持其他类型的内容，如 JSON；出于兼容性原因，名称保持不变。'
- en: So, instead of stubbing jQuery, we could change the `XMLHttpRequest` object
    with a fake implementation. That is exactly what this plugin does.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们不是模拟 jQuery，而是可以用模拟实现更改 `XMLHttpRequest` 对象。这正是此插件所做的。
- en: 'Let''s rewrite the previous spec to use this fake implementation:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重写之前的规范以使用这个模拟实现：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Drilling the implementation down:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 深入实现：
- en: First, we tell the plugin to replace the original implementation of the `XMLHttpRequest`
    object by a fake implementation using the `jasmine.Ajax.install` function.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们告诉插件使用 `jasmine.Ajax.install` 函数用模拟实现替换 `XMLHttpRequest` 对象的原实现。
- en: We then invoke the `stock.fetch` function, which will invoke `$.getJSON`, creating
    `XMLHttpRequest` anew under the hood.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们调用 `stock.fetch` 函数，这将调用 `$.getJSON`，在底层重新创建 `XMLHttpRequest`。
- en: And finally, we use the `jasmine.Ajax.requests.mostRecent().respondWith` function
    to get the most recently made request and respond to it with a fake response.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们使用 `jasmine.Ajax.requests.mostRecent().respondWith` 函数获取最近发出的请求，并用模拟响应来响应它。
- en: 'We use the `respondWith` function, which accepts an object with three properties:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `respondWith` 函数，它接受一个具有三个属性的对象：
- en: The `status` property to define the HTTP status code.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`status` 属性用于定义 HTTP 状态码。'
- en: The `contentType` (JSON in the example) property.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`contentType`（示例中为 JSON）属性。'
- en: The `responseText` property, which is a text string containing the response
    body for the request.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`responseText` 属性，它是一个包含请求响应体的文本字符串。'
- en: 'Then, it''s all a matter of running the expectations:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，所有的事情都是关于运行预期：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Since the plugin changes the global `XMLHttpRequest` object, you must remember
    to tell Jasmine to restore it to its original implementation after the test runs;
    otherwise, you could interfere with the code from other specs (such as the Jasmine
    jQuery fixtures module). Here''s how you can accomplish this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于插件更改了全局的 `XMLHttpRequest` 对象，你必须记得在测试运行后告诉 Jasmine 恢复其原始实现；否则，可能会干扰其他规范（如
    Jasmine jQuery 固件模块）中的代码。以下是完成此操作的方法：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There is also a slightly different approach to write this spec; here, the request
    is first stubbed (with the response details) and the code to be exercised is executed
    later.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 写这个规范还有稍微不同的方法；在这里，请求首先被模拟（带有响应详情），然后稍后执行要测试的代码。
- en: 'The previous example is changed to the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的示例已更改为以下内容：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It is possible to use the `jasmine.Ajax.stubRequest` function to stub any request
    to a specific request. In the example, it is defined by the URL `http://localhost:8000/stocks/AOUE`,
    and the response definition is as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `jasmine.Ajax.stubRequest` 函数模拟对特定请求的任何请求。在示例中，它由 URL `http://localhost:8000/stocks/AOUE`
    定义，响应定义如下：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The response definition follows the same properties as the previously used `respondWith`
    function.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 响应定义遵循之前使用的 `respondWith` 函数相同的属性。
- en: Summary
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how asynchronous tests can hurt the quick feedback
    loop you can get with unit testing. I showed how you can use either stubs or fakes
    to make your specs run quicker and with fewer dependencies.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了异步测试如何损害你通过单元测试获得的快速反馈循环。我展示了你可以如何使用存根（stubs）或模拟（fakes）来使你的规范（specs）运行更快，并且依赖性更少。
- en: We have seen two different ways in which you could test AJAX requests with a
    simple Jasmine stub and with the more advanced, fake implementation of the `XMLHttpRequest`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了两种不同的方式，你可以使用简单的 Jasmine 存根和更高级的 `XMLHttpRequest` 模拟来实现 AJAX 请求的测试。
- en: You also got more familiar with spies and stubs and should be more comfortable
    using them in different scenarios.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你也对间谍（spies）和存根（stubs）有了更多的了解，应该更习惯于在不同场景中使用它们。
- en: In the next chapter, we are going to go further into the complexity of our application,
    and we will do an overall refactoring to transform it into a fully featured single-page
    application using the `React.js` library.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将进一步探讨我们应用程序的复杂性，并将进行整体重构，将其转换为一个功能齐全的单页应用程序，使用 `React.js` 库。
