- en: Chapter 5. Events and Bindings
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章：事件和绑定
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下内容：
- en: Managing events in `Backbone.js`
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`Backbone.js`中管理事件
- en: Handling events of Backbone objects
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理Backbone对象的事件
- en: Binding a model to a view
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将模型绑定到视图中
- en: Binding a collection to a view
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将集合绑定到视图中
- en: Bidirectional binding with `Backbone.stickit`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Backbone.stickit`进行双向绑定
- en: Binding a model and a collection to a select list
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将模型和集合绑定到选择列表
- en: Handling keyboard shortcuts in a view
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在视图中处理键盘快捷键
- en: Handling router events
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理路由事件
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: This chapter is devoted to the `Backbone.Events` object and its involvement
    in other Backbone objects, such as models, collections, views, and routers.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章专门介绍`Backbone.Events`对象及其在Backbone的其他对象（如模型、集合、视图和路由器）中的作用。
- en: We will learn how to assign a callback to a specific event or how to listen
    to events of other objects. We will also learn how to bind a model or a collection
    to a view in both directions. So if a model is updated, the view automatically
    shows the changes, or if a user inputs data into a view, the model is validated
    and updated.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习如何将回调函数分配给特定事件或如何监听其他对象的事件。我们还将学习如何在两个方向上将模型或集合绑定到视图中。因此，如果模型被更新，视图会自动显示更改，或者如果用户在视图中输入数据，模型将被验证并更新。
- en: Managing events in Backbone.js
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Backbone.js中管理事件
- en: Backbone provides a unified way for triggering and handling events in other
    Backbone objects, such as `Model`, `Collection`, `View`, and `Router`. This becomes
    possible due to the `Backbone.Events` object, which provides this functionality
    and thus can be mixed to any object, including your own.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Backbone提供了一种统一的方式来触发和处理其他Backbone对象（如`Model`、`Collection`、`View`和`Router`）的事件。这得益于`Backbone.Events`对象，它提供了这种功能，因此可以将其混合到任何对象中，包括您自己的对象。
- en: In this recipe, we are going to learn how to mix `Backbone.Events` to your own
    object, how to trigger an event, and how to bind a callback to an event.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将学习如何将`Backbone.Events`混合到您的对象中，如何触发事件以及如何将回调绑定到事件。
- en: How to do it...
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Perform the following steps to handle object events.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以处理对象事件。
- en: Define a new object.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个新对象。
- en: '[PRE0]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Mix `Backbone.Events` to your object.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Backbone.Events`混合到您的对象中。
- en: '[PRE1]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Define a callback function.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个回调函数。
- en: '[PRE2]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Bind the callback using the `on()` method.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`on()`方法绑定回调。
- en: '[PRE3]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Alternatively, you can use the `once()` method to fire the callback once before
    it is unbound.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者，您可以使用`once()`方法在取消绑定之前一次性触发回调。
- en: '[PRE4]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you have a large number of different events for an object, the convention
    is to use colons to name them `poll:start`, or `change:selection`.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果一个对象有大量不同的事件，通常使用冒号来命名它们，例如`poll:start`或`change:selection`。
- en: Trigger an event by calling the `trigger()` method.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过调用`trigger()`方法来触发事件。
- en: '[PRE5]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the `on()` method, `Backbone.Events` saves callback in an associative array
    `_events`, and then in the `trigger()` method it runs all callbacks for that event
    iteratively.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在`on()`方法中，`Backbone.Events`将回调函数保存在关联数组`_events`中，然后在`trigger()`方法中迭代运行该事件的全部回调函数。
- en: There's more...
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: 'In this section, we will learn some important topics about events: unbinding
    callback from the event and listening events of other objects.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习有关事件的一些重要主题：从事件中取消绑定回调和监听其他对象的事件。
- en: Unbinding callback from the event
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从事件中取消绑定回调
- en: To unbind callbacks from the event, we need to use the `off()` method. The following
    line of code will unbind a specific callback we set previously.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要从事件中取消绑定回调，我们需要使用`off()`方法。以下代码行将取消绑定之前设置的特定回调。
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To unbind all callbacks from the event, skip the second parameter.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要从事件中取消绑定所有回调，请跳过第二个参数。
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To unbind a specific callback from all events, skip the first parameter.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要从所有事件中取消绑定特定回调，请跳过第一个参数。
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To unbind all callbacks from all events, skip both parameters.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要从所有事件中取消绑定所有回调，请跳过两个参数。
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Listening to events on other objects
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 监听其他对象的事件
- en: To listen to events on other objects, we can use the `listenTo()` method.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要监听其他对象的事件，我们可以使用`listenTo()`方法。
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It works similar to the `on()` method, but its advantage is that it allows us
    to keep a track of the events, and they can be removed all at once later on.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 它的工作方式类似于`on()`方法，但其优势在于它允许我们跟踪事件，并且可以在稍后一次性删除它们。
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: To stop listening to all objects, run the `stopListening()` method without parameters.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要停止监听所有对象，请运行不带参数的`stopListening()`方法。
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Handling events of Backbone objects
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理Backbone对象的事件
- en: All Backbone objects implement `Backbone.Events`, and some of them provide built-in
    events, to which your objects can listen.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 Backbone 对象都实现了 `Backbone.Events`，其中一些提供了内置事件，你的对象可以监听这些事件。
- en: For example, a `change` event is fired when a model is changed. Especially for
    this event, there are several methods in `Backbone.Model` that can be used in
    the `change` event callback. In this recipe, we are going to learn how to use
    them.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当模型发生变化时，会触发 `change` 事件。特别是对于这个事件，`Backbone.Model` 中有几个方法可以在 `change` 事件回调中使用。在本教程中，我们将学习如何使用它们。
- en: How to do it...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Perform the following steps to handle model events.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤来处理模型事件。
- en: Create a new `model` instance.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 `model` 实例。
- en: '[PRE13]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Bind the callback to the `change` event.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将回调绑定到 `change` 事件。
- en: '[PRE14]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Use the `hasChanged()` method in the event callback to check if the specific
    attribute has been changed since the last `change` event.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在事件回调中使用 `hasChanged()` 方法来检查特定属性自上次 `change` 事件以来是否已更改。
- en: '[PRE15]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Use the `changedAttributes()` method in the event callback to obtain changed
    attributes' hash.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在事件回调中使用 `changedAttributes()` 方法来获取已更改属性的哈希值。
- en: '[PRE16]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Use the `previous()` method in the event callback to get the value of the previous
    attribute.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在事件回调中使用 `previous()` 方法来获取先前属性的值。
- en: '[PRE17]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Use the `previousAttributes()` method in the event callback to get the hash
    of the previous attributes.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在事件回调中使用 `previousAttributes()` 方法来获取先前属性的哈希值。
- en: '[PRE18]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Change a `model` attribute to trigger the `change` event.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改 `model` 属性以触发 `change` 事件。
- en: '[PRE19]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: There's more...
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'In this section, we are going to learn more about events to Backbone objects:
    avoiding event triggering when working with Backbone objects and using built-in
    events.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习更多关于 Backbone 对象的事件：在使用 Backbone 对象时避免事件触发和使用内置事件。
- en: Avoiding event triggering when working with Backbone objects
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在使用 Backbone 对象时避免事件触发
- en: There is a way to avoid event triggering when working with Backbone events.
    This can be helpful if you want to update object properties without making event
    callbacks know about this fact.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Backbone 事件时，有一种方法可以避免事件触发。如果你想在不知道事件回调的情况下更新对象属性，这可能很有用。
- en: 'For example, you can pass `{silent: true}` when updating model values.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '例如，在更新模型值时，你可以传递 `{silent: true}`。'
- en: '[PRE20]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The following line of code is also valid:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行代码也是有效的：
- en: '[PRE21]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Using built-in events
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用内置事件
- en: 'The following events are used with model objects:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下事件与模型对象一起使用：
- en: '**change** (model, options): It is fired when a model''s attributes have changed'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**change** (模型，选项)：当模型的属性发生变化时触发'
- en: '**change:[attribute]** (model, value, options): It is fired when a specific
    attribute has been updated'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**change:[属性]** (模型，值，选项)：当特定属性被更新时触发'
- en: '**destroy** (model, collection, options): It is fired when a model is destroyed'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**destroy** (模型，集合，选项)：当模型被销毁时触发'
- en: '**invalid** (model, error, options): It is fired when a model''s validation
    fails on the client'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**invalid** (模型，错误，选项)：当模型在客户端验证失败时触发'
- en: '**error** (model, xhr, options): It is fired when a model''s save call fails
    on the server'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**error** (模型，XMLHttpRequest，选项)：当模型的保存调用在服务器上失败时触发'
- en: '**sync** (model, resp, options): It is fired when a model has been successfully
    synced with the server'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**sync** (模型，响应，选项)：当模型与服务器成功同步时触发'
- en: 'The following events are used with collections:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下事件与集合一起使用：
- en: '**add** (model, collection, options): It is fired when a model is added to
    a collection'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**add** (模型，集合，选项)：当模型被添加到集合中时触发'
- en: '**remove** (model, collection, options): It is fired when a model is removed
    from a collection'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**remove** (模型，集合，选项)：当模型从集合中移除时触发'
- en: '**reset** (collection, options): It is fired when the entire content of the
    collection has been replaced'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**reset** (集合，选项)：当集合的全部内容被替换时触发'
- en: '**sort** (collection, options): It is fired when the collection has been re-sorted'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**sort** (集合，选项)：当集合被重新排序时触发'
- en: '**sync** (collection, resp, options): It is fired when a collection has been
    successfully synced with the server'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**sync** (集合，响应，选项)：当集合与服务器成功同步时触发'
- en: 'The following events are used with the router object:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下事件与路由对象一起使用：
- en: '**route:[name]** (params): It is fired by the router when a specific route
    is matched'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**route:[名称]** (参数)：当匹配特定路由时由路由器触发'
- en: '**route** (router, route, params): It is fired by history (or router) when
    any route has been matched'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**route** (路由器，路由，参数)：当匹配任何路由时由历史记录（或路由器）触发'
- en: 'The following events are triggered when storage operations are performed:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行存储操作时，以下事件被触发：
- en: '**route:[name]** (params): It is fired by the router when a specific route
    is matched'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**route:[name]** (params)：当匹配特定路由时由路由器触发'
- en: '**route** (router, route, params): It is fired by history (or router) when
    any route has been matched'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**route** (router, route, params)：当任何路由匹配时由历史记录（或路由器）触发'
- en: To handle any triggered event, use the special event `all`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要处理任何触发的事件，请使用特殊事件`all`。
- en: See also
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: You can find the complete built-in events catalog from [http://backbonejs.org/#Events-catalog](http://backbonejs.org/#Events-catalog)
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以从[http://backbonejs.org/#Events-catalog](http://backbonejs.org/#Events-catalog)找到完整的内置事件目录。
- en: 'To check which Backbone methods support `{silent: true}`, please refer to the
    official docs'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '要检查哪些Backbone方法支持`{silent: true}`，请参阅官方文档。'
- en: Binding a model to a view
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将模型绑定到视图
- en: One of the useful features in `Backbone.js` is the ability to bind model changes
    to a view, thus a view is re-rendered every time a model is changed. It allows
    you to write less code and makes your application work like an AJAX app, for example,
    when new data is fetched from a REST server, the user sees the update immediately.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Backbone.js`中的一个有用特性是将模型变化绑定到视图，因此每次模型更改时视图都会重新渲染。这允许你编写更少的代码，并使你的应用程序像AJAX应用程序一样工作，例如，当从REST服务器获取新数据时，用户会立即看到更新。
- en: Let's take an example of the *Rendering a model in a view* recipe from [Chapter
    4](ch04.html "Chapter 4. Views"), *Views*, where we rendered a model with a view
    and modified it, so views is re-rendered every time the model is updated.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以[第4章](ch04.html "第4章。视图")中的*在视图中渲染模型*配方为例，我们在视图中渲染了一个模型并对其进行了修改，因此每次模型更新时视图都会重新渲染。
- en: 'The view which we are going to implement will be rendered as shown in the following
    screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要实现的视图将按照以下截图所示进行渲染：
- en: '![Binding a model to a view](img/2728OS_05_01.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![将模型绑定到视图](img/2728OS_05_01.jpg)'
- en: In the browser console, we can modify the model values, thus the `change` event
    is triggered and the view is re-rendered.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器控制台中，我们可以修改模型值，从而触发`change`事件并重新渲染视图。
- en: '![Binding a model to a view](img/2728OS_05_02.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![将模型绑定到视图](img/2728OS_05_02.jpg)'
- en: How to do it...
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: Perform the following steps to bind a model to a view.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以将模型绑定到视图。
- en: Define a new model.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个新的模型。
- en: '[PRE22]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Define a view that renders this model.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个渲染此模型的视图。
- en: '[PRE23]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Bind the model to `InvoiceItemView` in the `initialize()` method.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`initialize()`方法中将模型绑定到`InvoiceItemView`。
- en: '[PRE24]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Create the model instance.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建模型实例。
- en: '[PRE25]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Create a view instance and pass `model` to it as a parameter.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个视图实例并将`model`作为参数传递给它。
- en: '[PRE26]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Render the view.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 渲染视图。
- en: '[PRE27]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: To check how binding works, export the model to be a global variable, so we
    can update model values in a browser console.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查绑定的工作方式，将模型导出为一个全局变量，这样我们就可以在浏览器控制台中更新模型值。
- en: '[PRE28]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: How it works...
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Both the `Backbone.Model` and `Backbone.View` objects implement `Backbone.Events`,
    so it is possible to listen to model changes in the view and bind the `render()`
    method as a callback for the `change` event.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`Backbone.Model`和`Backbone.View`对象都实现了`Backbone.Events`，因此可以在视图中监听模型变化，并将`render()`方法绑定为`change`事件的回调。'
- en: Binding a collection to a view
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将集合绑定到视图
- en: In this recipe, we are going to learn how to bind a collection to a view. This
    can be very helpful if we have different views working with the same collection,
    or if we want to synchronize data with a REST server.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将学习如何将集合绑定到视图。如果我们有不同视图使用相同的集合，或者我们想要与REST服务器同步数据，这将非常有帮助。
- en: Let's take an example of the *Rendering a model in a view* recipe from [Chapter
    4](ch04.html "Chapter 4. Views"), *Views*, where we rendered a collection with
    subviews and modified it. We are going to add an additional view with the **Add**
    and **Remove** buttons, which will update the collection.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以[第4章](ch04.html "第4章。视图")中的*在视图中渲染模型*配方为例，我们渲染了一个带有子视图的集合并对其进行了修改。我们将添加一个带有**添加**和**删除**按钮的额外视图，这将更新集合。
- en: Also, we will bind appropriate callbacks to the model and collection events
    in our first view, so it is re-rendered automatically when the collection is changed.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将在我们的第一个视图中绑定适当的回调到模型和集合事件，以便在集合更改时自动重新渲染。
- en: '![Binding a collection to a view](img/2728OS_05_03.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![将集合绑定到视图](img/2728OS_05_03.jpg)'
- en: When a user clicks on the **Add** button, he/she is prompted to enter the required
    information to create `InvoiceItemModel`.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击 **添加** 按钮时，会提示用户输入创建 `InvoiceItemModel` 所需的信息。
- en: '![Binding a collection to a view](img/2728OS_05_04.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![将集合绑定到视图](img/2728OS_05_04.jpg)'
- en: After the user goes through all the questions, a new model is created and added
    into a collection, and the corresponding views are updated.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户完成所有问题后，会创建一个新的模型并将其添加到集合中，相应的视图也会更新。
- en: '![Binding a collection to a view](img/2728OS_05_05.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![将集合绑定到视图](img/2728OS_05_05.jpg)'
- en: When the **Remove** button is clicked, the user is promoted to enter the position
    of the item to be removed.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击 **删除** 按钮时，用户会被提示输入要删除的项目位置。
- en: '![Binding a collection to a view](img/2728OS_05_06.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![将集合绑定到视图](img/2728OS_05_06.jpg)'
- en: How to do it...
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Perform the following steps to bind a collection to a view.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以将集合绑定到视图。
- en: Make sure you have the model and collection definitions.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你有模型和集合的定义。
- en: '[PRE29]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Define a view for rendering a single model.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个用于渲染单个模型的视图。
- en: '[PRE30]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In the `initialize()` method of the `InvoiceItemView` object, bind callback
    to handle the `destroy` event of the model.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `InvoiceItemView` 对象的 `initialize()` 方法中，绑定回调以处理模型的 `destroy` 事件。
- en: '[PRE31]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Add the `destroy()` method, which removes the view bound to a model.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `destroy()` 方法，它移除与模型绑定的视图。
- en: '[PRE32]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Define a view for rendering a collection.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个用于渲染集合的视图。
- en: '[PRE33]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Here we used the `append()` method, which adds `InvoiceItemView` into the output
    table. We will use this method later on.
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里我们使用了 `append()` 方法，它将 `InvoiceItemView` 添加到输出表中。我们稍后会使用这个方法。
- en: In the `initialize()` method of the `InvoiceItemListView` object, bind the callback
    to handle the `add` event of the collection.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `InvoiceItemListView` 对象的 `initialize()` 方法中，绑定回调以处理集合的 `add` 事件。
- en: '[PRE34]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Here we have called the same `append()` method.
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里我们调用了相同的 `append()` 方法。
- en: Define the view with Add and Remove controls.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义带有添加和删除控制的视图。
- en: '[PRE35]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Define a view for rendering a whole page.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个用于渲染整个页面的视图。
- en: '[PRE36]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Create and initialize the collection instance with data.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用数据创建并初始化集合实例。
- en: '[PRE37]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Create the whole page view instance and render it.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建整个页面视图实例并渲染它。
- en: '[PRE38]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: How it works...
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When a new model is added to the collection, the `add` event is fired, and the
    model is rendered as a table row and appended to the table.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 当新模型被添加到集合中时，会触发 `add` 事件，并将模型作为表格行渲染并附加到表格中。
- en: When a model is destroyed, the `destroy` event is fired, and a view corresponding
    to this model is removed, also a view element is removed from a DOM tree.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当模型被销毁时，会触发 `destroy` 事件，并且与该模型对应的视图被移除，同时视图元素也会从 DOM 树中移除。
- en: Bidirectional binding with Backbone.stickit
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Backbone.stickit 进行双向绑定
- en: In `Backbone.js`, we can bind a model to a view out of the box, but it is not
    easy to make binding in reverse direction without the need to parse values of
    HTML elements.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Backbone.js` 中，我们可以直接将模型绑定到视图，但如果没有解析 HTML 元素值的需求，反向绑定并不容易。
- en: In this recipe, we will speak about the `Backbone.stickit` extension, which
    allows developers to implement bidirectional binding of the model properties and
    view elements in a simple and native `Backbone.js` way.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将讨论 `Backbone.stickit` 扩展，它允许开发者以简单和原生 `Backbone.js` 的方式实现模型属性和视图元素的双向绑定。
- en: Among many similar extensions, `Backbone.stickit` stands out by its perfect
    documentation, simplicity, and the great advantage that it gives to application
    developers. It was written in New York Times not so long time ago, and its popularity
    is being growing day-by-day. It is definitely one of the coolest extensions for
    `Backbone.js`.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多类似的扩展中，`Backbone.stickit` 因其完美的文档、简洁性和为应用程序开发者带来的巨大优势而脱颖而出。它不久前被纽约时报撰写，并且其受欢迎程度每天都在增长。它无疑是
    `Backbone.js` 中最酷的扩展之一。
- en: 'In this recipe, we are going to build a simple application that has a couple
    of views bound to the same model, so if a user makes changes in the element of
    the first view, the second view is updated automatically. The user interface of
    our application will look like the following screenshot:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将构建一个简单的应用程序，它有两个视图绑定到同一个模型，因此如果用户在第一个视图中更改元素，第二个视图会自动更新。我们应用程序的用户界面将如下截图所示：
- en: '![Bidirectional binding with Backbone.stickit](img/2728OS_05_07.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Backbone.stickit 进行双向绑定](img/2728OS_05_07.jpg)'
- en: There are a couple of views that are bound to the same model. When the user
    enters data into the form, the model and the other view are updated.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个视图绑定到了同一个模型上。当用户在表单中输入数据时，模型和其他视图都会被更新。
- en: Getting ready
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You can download the `Backbone.stickit` extension from the **GitHub** page [https://github.com/nytimes/backbone.stickit](https://github.com/nytimes/backbone.stickit).
    To include this extension into your project, save the `backbone.stickit.js` file
    into the `lib` folder of your project and include the reference to this file in
    `index.html`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从 **GitHub** 页面 [https://github.com/nytimes/backbone.stickit](https://github.com/nytimes/backbone.stickit)
    下载 `Backbone.stickit` 扩展。要将此扩展包含到您的项目中，将 `backbone.stickit.js` 文件保存到项目的 `lib`
    文件夹中，并在 `index.html` 中包含对该文件的引用。
- en: Note
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Including a Backbone extension into your project is described in detail in the
    *Extending an application with plugins* recipe in [Chapter 1](ch01.html "Chapter 1. Understanding
    Backbone"), *Understanding Backbone*.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 1 章](ch01.html "第 1 章。理解 Backbone") 的 *使用插件扩展应用程序* 菜谱中详细描述了将 Backbone 扩展包含到您的项目中，*理解
    Backbone*。
- en: How to do it...
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: Perform the following steps to perform a bidirectional binding.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以执行双向绑定。
- en: Make sure you have a model defined.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您已经定义了一个模型。
- en: '[PRE39]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Define the form view.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义表单视图。
- en: '[PRE40]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Add the bindings hash to the view.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将绑定哈希添加到视图中。
- en: '[PRE41]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Here we used short binding definition, which acts as an alias for the detailed
    definition shown in the next snippet.
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们使用了简短的绑定定义，它作为下一片段中显示的详细定义的别名。
- en: '[PRE42]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Add the `render()` method to the view and call `this.stickit()` after rendering.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `render()` 方法添加到视图，并在渲染后调用 `this.stickit()`。
- en: '[PRE43]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Define the other view in a similar way.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以类似的方式定义其他视图。
- en: '[PRE44]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Create a new `model` instance.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 `model` 实例。
- en: '[PRE45]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Append both views to the HTML body.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个视图都附加到 HTML 主体中。
- en: '[PRE46]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: How it works...
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Whenever the `stickit()` method is called, the stickit extension initializes
    `innerHTML` of the HTML elements, which we have defined in the bindings hash.
    Because of such initialization, Stickit lets us to keep our templates clean, and
    we don't need to pass model values into the `html` variable manually when rendering
    the view.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 每当调用 `stickit()` 方法时，stickit 扩展会初始化我们定义在绑定哈希中的 HTML 元素的 `innerHTML`。由于这种初始化，stickit
    允许我们保持模板的整洁，并且在渲染视图时，我们不需要手动将模型值传递到 `html` 变量中。
- en: For the `InvoiceItemView` view, one-way binding is configured (model to view),
    so every time model properties get changed, the corresponding HTML elements are
    updated.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `InvoiceItemView` 视图，配置了一对一绑定（模型到视图），因此每次模型属性发生变化时，相应的 HTML 元素都会被更新。
- en: For the `InvoiceItemFormView` view, Stickit sets up two-way binding (model to
    view and then, view to model), connecting and reflecting changes in the view elements
    with changes in bound model attributes.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `InvoiceItemFormView` 视图，stickit 设置了双向绑定（模型到视图，然后视图到模型），将视图元素的变化与绑定模型属性的变化连接和反映。
- en: There's more...
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'This section describes advanced usage of the `Backbone.stickit` extension:
    overriding model getters and setters, overriding view element updates, and listening
    to a specific HTML event.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了 `Backbone.stickit` 扩展的高级用法：覆盖模型获取器和设置器、覆盖视图元素更新以及监听特定的 HTML 事件。
- en: Overriding model getters and setters
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 覆盖模型获取器和设置器
- en: When getting or setting properties of a model bound to our view, we can override
    the getting or setting behavior by specifying the `onGet` and `onSet` callbacks.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 当获取或设置绑定到我们视图的模型的属性时，我们可以通过指定 `onGet` 和 `onSet` 回调来覆盖获取或设置行为。
- en: '[PRE47]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Overriding view element updates
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 覆盖视图元素更新
- en: There are different ways in which we can override and customize view element
    updates. We can specify an `update` callback, which is triggered when an HTML
    element gets updated or we can specify `afterUpdate` callback, which will be executed
    afterwards.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过不同的方式覆盖和自定义视图元素更新。我们可以指定一个 `update` 回调，它在 HTML 元素更新时触发，或者我们可以指定 `afterUpdate`
    回调，它将在之后执行。
- en: '[PRE48]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: There is another way in which we can override value update for the view element
    by specifying `updateMethod`. By default it uses the `text` method, but we can
    change its value to `html`. If the `html` method is used, and we want to escape
    model values before assigning it to an HTML element, we can set the `escape` option
    to `true`.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过指定 `updateMethod` 来覆盖视图元素的值更新。默认情况下，它使用 `text` 方法，但我们可以将其值更改为 `html`。如果使用
    `html` 方法，并且我们想在将值分配给 HTML 元素之前对模型值进行转义，我们可以将 `escape` 选项设置为 `true`。
- en: '[PRE49]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Listening to a specific HTML event
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 监听特定的 HTML 事件
- en: By default, for a textbox, textarea and other content-editable HTML elements,
    the `Backbone.stickit` extension listens to the following events, `keyup`, `change`,
    `cut`, and `paste`. For other elements, the `Backbone.stickit` extension listens
    to the `change` event.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，对于文本框、文本区域和其他可编辑内容的HTML元素，`Backbone.stickit`扩展监听以下事件：`keyup`、`change`、`cut`和`paste`。对于其他元素，`Backbone.stickit`扩展监听`change`事件。
- en: However, there is a way to override this setting by specifying the `events`
    array.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，可以通过指定`events`数组来覆盖此设置。
- en: '[PRE50]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: In this case, view-to-model binding will occur on the `blur` event of the `#price`
    textbox.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，视图到模型的绑定将在`#price`文本框的`blur`事件上发生。
- en: See also
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: In the following recipe, we are going to continue learning about the Stickit
    extension. You can also find complete docs on `Backbone.stickit` on the **GitHub**
    page [http://nytimes.github.com/backbone.stickit/](http://nytimes.github.com/backbone.stickit/).
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在以下配方中，我们将继续学习关于Stickit扩展的内容。你还可以在**GitHub**页面[http://nytimes.github.com/backbone.stickit/](http://nytimes.github.com/backbone.stickit/)上找到关于`Backbone.stickit`的完整文档。
- en: Binding a model and a collection to a select list
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将模型和集合绑定到选择列表
- en: In the previous recipe, we talked about how to bind a model to an HTML arbitrary
    element of the view. In this recipe we are going to learn how to bind a model
    to a select element. By changing the value of the select list, we need to change
    the associated property of a bound model.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个配方中，我们讨论了如何将模型绑定到视图的HTML任意元素。在本配方中，我们将学习如何将模型绑定到选择元素。通过更改选择列表的值，我们需要更改绑定模型的关联属性。
- en: This is a bit more complex, because we may want to take key-value pairs for
    select options from an array or a collection. Fortunately, the `Backbone.stickit`
    extension allows us to do this easily.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这有点复杂，因为我们可能希望从数组或集合中获取选择选项的键值对。幸运的是，`Backbone.stickit`扩展允许我们轻松地做到这一点。
- en: In this recipe, we will create a simple example to demonstrate how we can bind
    a model and a collection to a select list.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将创建一个简单的示例来演示我们如何将模型和集合绑定到选择列表。
- en: '![Binding a model and a collection to a select list](img/2728OS_05_08.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![将模型和集合绑定到选择列表](img/2728OS_05_08.jpg)'
- en: Getting ready
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You can download the `Backbone.stickit` extension from the **GitHub** page [https://github.com/nytimes/backbone.stickit](https://github.com/nytimes/backbone.stickit).
    To include this extension into your project, save the `backbone.stickit.js` file
    into the `lib` folder and include the reference to it in `index.html`.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从**GitHub**页面[https://github.com/nytimes/backbone.stickit](https://github.com/nytimes/backbone.stickit)下载`Backbone.stickit`扩展。要将此扩展包含到你的项目中，将`backbone.stickit.js`文件保存到`lib`文件夹中，并在`index.html`中包含对该文件的引用。
- en: Note
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Including the Backbone extension into your project is described in detail in
    the *Extending an application with plugins* recipe in [Chapter 1](ch01.html "Chapter 1. Understanding
    Backbone"), *Understanding Backbone*.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章。理解Backbone")的*使用插件扩展应用程序*配方中详细描述了将Backbone扩展包含到你的项目中，*理解Backbone*。
- en: How to do it...
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Perform the following steps to bind a model and a collection to a select list.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以将模型和集合绑定到选择列表。
- en: Define a model.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个模型。
- en: '[PRE51]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Define a view.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个视图。
- en: '[PRE52]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Add bindings hash to the view.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将绑定哈希添加到视图中。
- en: '[PRE53]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Create a new model instance.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的模型实例。
- en: '[PRE54]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Render the view.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 渲染视图。
- en: '[PRE55]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: How it works...
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`Backbone.stickit` takes values for select list options from the `collection`
    property and assumes that it defines either a path to a collection relative to
    the window object or a function, which returns a collection. Also, an array of
    objects can be used instead of a collection, as shown in the previous example.'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`Backbone.stickit`从`collection`属性获取选择列表选项的值，并假设它定义了相对于窗口对象的集合路径或一个返回集合的函数。也可以使用数组代替集合，如前一个示例所示。'
- en: '`labelPath` indicates a path to a property of a collection object, which is
    used as a label for select list options, and `valuePath` defines the path to an
    option value.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`labelPath`指示一个指向集合对象属性的路径，该属性用作选择列表选项的标签，而`valuePath`定义了选项值的路径。'
- en: See also
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: You can find additional details about binding a model and a collection to a
    select list on the `Bacbkone.stickit` **GitHub** page [http://nytimes.github.com/backbone.stickit/](http://nytimes.github.com/backbone.stickit/)
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在`Bacbkone.stickit`的**GitHub**页面[http://nytimes.github.com/backbone.stickit/](http://nytimes.github.com/backbone.stickit/)上找到有关将模型和集合绑定到选择列表的更多详细信息。
- en: Handling keyboard shortcuts in a view
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在视图中处理键盘快捷键
- en: To perform the best user experience, your application should support various
    types of navigation within an application. One of these ways could be achieved
    by using shortcuts. Shortcut is a combination of keystrokes that provides easier
    access to a command or operation.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供最佳的用户体验，您的应用程序应该支持在应用程序内进行各种类型的导航。其中一种方法可以通过使用快捷键实现。快捷键是一组按键组合，它提供了更容易访问命令或操作的方式。
- en: In this recipe, we are going to handle a couple of shortcuts for a view we implemented
    in the *Binding a collection to a view* recipe.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将处理我们在 *绑定集合到视图* 食谱中实现的视图的一些快捷键。
- en: To perform keyboard shortcut handling, we are going to use the `Moustrap` library
    and the `Backbone.Mousetrap` extension, which provide the functionality we need.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行键盘快捷键处理，我们将使用 `Moustrap` 库和 `Backbone.Moustrap` 扩展，它们提供了我们需要的功能。
- en: Getting ready
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You can download both the `Moustrap` library and the `Backbone.Moustrap` extension
    from the **GitHub** pages [https://github.com/ccampbell/mousetrap](https://github.com/ccampbell/mousetrap)
    and [https://github.com/elasticsales/backbone.mousetrap](https://github.com/elasticsales/backbone.mousetrap)
    respectively.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从 **GitHub** 页面分别下载 `Moustrap` 库和 `Backbone.Moustrap` 扩展：[https://github.com/ccampbell/mousetrap](https://github.com/ccampbell/mousetrap)
    和 [https://github.com/elasticsales/backbone.mousetrap](https://github.com/elasticsales/backbone.mousetrap)。
- en: To include them into your project, save the `mousetrap.js` and `backbone.mousetrap.js`
    files into the `lib` folder and include references to them in `index.html`.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 要将它们包含到您的项目中，请将 `mousetrap.js` 和 `backbone.mousetrap.js` 文件保存到 `lib` 文件夹中，并在
    `index.html` 中包含对它们的引用。
- en: Note
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Including a Backbone extension into your project is described in detail in the
    *Extending an application with plugins* recipe in [Chapter 1](ch01.html "Chapter 1. Understanding
    Backbone"), *Understanding Backbone*.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 1 章](ch01.html "第 1 章。理解 Backbone") 的 *使用插件扩展应用程序* 食谱中详细描述了将 Backbone 扩展包含到您的项目中。
- en: How to do it...
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'To perform keyboard shortcut handling, add the following property into a view
    object:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行键盘快捷键处理，请将以下属性添加到视图对象中：
- en: '[PRE56]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: How it works...
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`Backbone.Mousetrap` automatically delegates keyboard events to a view when
    it''s being created and undelegates when it is removed or when `undelegateEvents()`
    is called.'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`Backbone.Mousetrap` 在创建视图时自动将键盘事件委派给视图，在移除视图或调用 `undelegateEvents()` 时取消委派。'
- en: The following keys, `shift`, `ctrl`, `alt`, `option`, `meta`, and `command`
    are available. Other special keys are `backspace`, `tab`, `enter`, `return`, `capslock`,
    `esc`, `escape`, `space`, `pageup`, `pagedown`, `end`, `home`, `left`, `up`, `right`,
    `down`, `ins`, and `del`.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 以下键 `shift`、`ctrl`、`alt`、`option`、`meta` 和 `command` 都是可用的。其他特殊键包括 `backspace`、`tab`、`enter`、`return`、`capslock`、`esc`、`escape`、`space`、`pageup`、`pagedown`、`end`、`home`、`left`、`up`、`right`、`down`、`ins`
    和 `del`。
- en: You should be able to reference any other key by names, such as `a`, `/`, `$`,
    `*`, or `=`.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够通过名称引用任何其他键，例如 `a`、`/`、`$`、`*` 或 `=`。
- en: By default, Mousetrap prevents shortcut events from being handled when the browser
    is focused on any form element, such as input, text area, or select box. However,
    if you want to handle a shortcut event for such elements, you can add the `mousetrap`
    class to it.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，当浏览器聚焦在任何表单元素（如输入、文本区域或选择框）上时，Mousetrap 会阻止处理快捷键事件。但是，如果您想处理此类元素的快捷键事件，可以向其添加
    `mousetrap` 类。
- en: '[PRE57]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: See also
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'Please visit the following resource in order to learn more about Mousetrap:
    [http://craig.is/killing/mice](http://craig.is/killing/mice)'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请访问以下资源以了解更多关于 Mousetrap 的信息：[http://craig.is/killing/mice](http://craig.is/killing/mice)
- en: Handling router events
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理路由事件
- en: Though there are not many use cases for handling router events, `Backbone.js`
    provides a mechanism to do so. In this recipe, we are going to create a simple
    application that logs router events.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然处理路由事件的用例不多，但 `Backbone.js` 提供了一种机制来实现这一点。在本食谱中，我们将创建一个简单的应用程序来记录路由事件。
- en: '![Handling router events](img/2728OS_05_09.jpg)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![处理路由事件](img/2728OS_05_09.jpg)'
- en: How to do it...
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: Perform the following steps in order to handle router events.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤处理路由事件。
- en: Listen to the `route` event of `Backbone.History`.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监听 `Backbone.History` 的 `route` 事件。
- en: '[PRE58]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Define the `route` event callback.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义 `route` 事件回调。
- en: '[PRE59]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: How it works...
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `route` event is triggered after routing has been successfully performed.
    The `route` event callback accepts the following parameters:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在路由成功执行后，会触发 `route` 事件。`route` 事件回调函数接受以下参数：
- en: '**router**: This parameter indicates a current router in use'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**router**：此参数表示正在使用的当前路由器'
- en: '**route**: This parameter indicates a router callback name'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路由**: 此参数指示一个路由回调名称'
- en: '**params**: This indicates parameters passed to a router callback'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**参数**: 这表示传递给路由回调的参数'
- en: There's more...
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: To handle a specific event for a specific router, listen to the `route:[name]`
    event.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 要处理特定路由的特定事件，请监听 `route:[name]` 事件。
- en: '[PRE60]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: In this case, the event callback accepts the `routes` parameters.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，事件回调接受 `routes` 参数。
- en: See also
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: More information about `routes` can be found in the *Implementing URL routing
    in your application* recipe in [Chapter 1](ch01.html "Chapter 1. Understanding
    Backbone"), *Understanding Backbone*
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多关于 `routes` 的信息可以在[第1章](ch01.html "第1章. 理解Backbone")中找到，在*实现应用程序中的URL路由*配方中，*理解Backbone*
