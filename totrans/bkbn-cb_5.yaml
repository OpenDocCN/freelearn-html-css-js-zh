- en: Chapter 5. Events and Bindings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Managing events in `Backbone.js`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling events of Backbone objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Binding a model to a view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Binding a collection to a view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bidirectional binding with `Backbone.stickit`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Binding a model and a collection to a select list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling keyboard shortcuts in a view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling router events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is devoted to the `Backbone.Events` object and its involvement
    in other Backbone objects, such as models, collections, views, and routers.
  prefs: []
  type: TYPE_NORMAL
- en: We will learn how to assign a callback to a specific event or how to listen
    to events of other objects. We will also learn how to bind a model or a collection
    to a view in both directions. So if a model is updated, the view automatically
    shows the changes, or if a user inputs data into a view, the model is validated
    and updated.
  prefs: []
  type: TYPE_NORMAL
- en: Managing events in Backbone.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Backbone provides a unified way for triggering and handling events in other
    Backbone objects, such as `Model`, `Collection`, `View`, and `Router`. This becomes
    possible due to the `Backbone.Events` object, which provides this functionality
    and thus can be mixed to any object, including your own.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we are going to learn how to mix `Backbone.Events` to your own
    object, how to trigger an event, and how to bind a callback to an event.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Perform the following steps to handle object events.
  prefs: []
  type: TYPE_NORMAL
- en: Define a new object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Mix `Backbone.Events` to your object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Define a callback function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Bind the callback using the `on()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Alternatively, you can use the `once()` method to fire the callback once before
    it is unbound.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have a large number of different events for an object, the convention
    is to use colons to name them `poll:start`, or `change:selection`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Trigger an event by calling the `trigger()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the `on()` method, `Backbone.Events` saves callback in an associative array
    `_events`, and then in the `trigger()` method it runs all callbacks for that event
    iteratively.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will learn some important topics about events: unbinding
    callback from the event and listening events of other objects.'
  prefs: []
  type: TYPE_NORMAL
- en: Unbinding callback from the event
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To unbind callbacks from the event, we need to use the `off()` method. The following
    line of code will unbind a specific callback we set previously.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: To unbind all callbacks from the event, skip the second parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: To unbind a specific callback from all events, skip the first parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: To unbind all callbacks from all events, skip both parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Listening to events on other objects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To listen to events on other objects, we can use the `listenTo()` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: It works similar to the `on()` method, but its advantage is that it allows us
    to keep a track of the events, and they can be removed all at once later on.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: To stop listening to all objects, run the `stopListening()` method without parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Handling events of Backbone objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All Backbone objects implement `Backbone.Events`, and some of them provide built-in
    events, to which your objects can listen.
  prefs: []
  type: TYPE_NORMAL
- en: For example, a `change` event is fired when a model is changed. Especially for
    this event, there are several methods in `Backbone.Model` that can be used in
    the `change` event callback. In this recipe, we are going to learn how to use
    them.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Perform the following steps to handle model events.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `model` instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Bind the callback to the `change` event.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the `hasChanged()` method in the event callback to check if the specific
    attribute has been changed since the last `change` event.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the `changedAttributes()` method in the event callback to obtain changed
    attributes' hash.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the `previous()` method in the event callback to get the value of the previous
    attribute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the `previousAttributes()` method in the event callback to get the hash
    of the previous attributes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Change a `model` attribute to trigger the `change` event.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we are going to learn more about events to Backbone objects:
    avoiding event triggering when working with Backbone objects and using built-in
    events.'
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding event triggering when working with Backbone objects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a way to avoid event triggering when working with Backbone events.
    This can be helpful if you want to update object properties without making event
    callbacks know about this fact.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can pass `{silent: true}` when updating model values.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The following line of code is also valid:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Using built-in events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following events are used with model objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '**change** (model, options): It is fired when a model''s attributes have changed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**change:[attribute]** (model, value, options): It is fired when a specific
    attribute has been updated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**destroy** (model, collection, options): It is fired when a model is destroyed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**invalid** (model, error, options): It is fired when a model''s validation
    fails on the client'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**error** (model, xhr, options): It is fired when a model''s save call fails
    on the server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sync** (model, resp, options): It is fired when a model has been successfully
    synced with the server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following events are used with collections:'
  prefs: []
  type: TYPE_NORMAL
- en: '**add** (model, collection, options): It is fired when a model is added to
    a collection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**remove** (model, collection, options): It is fired when a model is removed
    from a collection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**reset** (collection, options): It is fired when the entire content of the
    collection has been replaced'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sort** (collection, options): It is fired when the collection has been re-sorted'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sync** (collection, resp, options): It is fired when a collection has been
    successfully synced with the server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following events are used with the router object:'
  prefs: []
  type: TYPE_NORMAL
- en: '**route:[name]** (params): It is fired by the router when a specific route
    is matched'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**route** (router, route, params): It is fired by history (or router) when
    any route has been matched'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following events are triggered when storage operations are performed:'
  prefs: []
  type: TYPE_NORMAL
- en: '**route:[name]** (params): It is fired by the router when a specific route
    is matched'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**route** (router, route, params): It is fired by history (or router) when
    any route has been matched'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To handle any triggered event, use the special event `all`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find the complete built-in events catalog from [http://backbonejs.org/#Events-catalog](http://backbonejs.org/#Events-catalog)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To check which Backbone methods support `{silent: true}`, please refer to the
    official docs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Binding a model to a view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the useful features in `Backbone.js` is the ability to bind model changes
    to a view, thus a view is re-rendered every time a model is changed. It allows
    you to write less code and makes your application work like an AJAX app, for example,
    when new data is fetched from a REST server, the user sees the update immediately.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take an example of the *Rendering a model in a view* recipe from [Chapter
    4](ch04.html "Chapter 4. Views"), *Views*, where we rendered a model with a view
    and modified it, so views is re-rendered every time the model is updated.
  prefs: []
  type: TYPE_NORMAL
- en: 'The view which we are going to implement will be rendered as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Binding a model to a view](img/2728OS_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the browser console, we can modify the model values, thus the `change` event
    is triggered and the view is re-rendered.
  prefs: []
  type: TYPE_NORMAL
- en: '![Binding a model to a view](img/2728OS_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Perform the following steps to bind a model to a view.
  prefs: []
  type: TYPE_NORMAL
- en: Define a new model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Define a view that renders this model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Bind the model to `InvoiceItemView` in the `initialize()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the model instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a view instance and pass `model` to it as a parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Render the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To check how binding works, export the model to be a global variable, so we
    can update model values in a browser console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Both the `Backbone.Model` and `Backbone.View` objects implement `Backbone.Events`,
    so it is possible to listen to model changes in the view and bind the `render()`
    method as a callback for the `change` event.
  prefs: []
  type: TYPE_NORMAL
- en: Binding a collection to a view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going to learn how to bind a collection to a view. This
    can be very helpful if we have different views working with the same collection,
    or if we want to synchronize data with a REST server.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take an example of the *Rendering a model in a view* recipe from [Chapter
    4](ch04.html "Chapter 4. Views"), *Views*, where we rendered a collection with
    subviews and modified it. We are going to add an additional view with the **Add**
    and **Remove** buttons, which will update the collection.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we will bind appropriate callbacks to the model and collection events
    in our first view, so it is re-rendered automatically when the collection is changed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Binding a collection to a view](img/2728OS_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When a user clicks on the **Add** button, he/she is prompted to enter the required
    information to create `InvoiceItemModel`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Binding a collection to a view](img/2728OS_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After the user goes through all the questions, a new model is created and added
    into a collection, and the corresponding views are updated.
  prefs: []
  type: TYPE_NORMAL
- en: '![Binding a collection to a view](img/2728OS_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When the **Remove** button is clicked, the user is promoted to enter the position
    of the item to be removed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Binding a collection to a view](img/2728OS_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Perform the following steps to bind a collection to a view.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have the model and collection definitions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Define a view for rendering a single model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `initialize()` method of the `InvoiceItemView` object, bind callback
    to handle the `destroy` event of the model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the `destroy()` method, which removes the view bound to a model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Define a view for rendering a collection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here we used the `append()` method, which adds `InvoiceItemView` into the output
    table. We will use this method later on.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the `initialize()` method of the `InvoiceItemListView` object, bind the callback
    to handle the `add` event of the collection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here we have called the same `append()` method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Define the view with Add and Remove controls.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Define a view for rendering a whole page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create and initialize the collection instance with data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the whole page view instance and render it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a new model is added to the collection, the `add` event is fired, and the
    model is rendered as a table row and appended to the table.
  prefs: []
  type: TYPE_NORMAL
- en: When a model is destroyed, the `destroy` event is fired, and a view corresponding
    to this model is removed, also a view element is removed from a DOM tree.
  prefs: []
  type: TYPE_NORMAL
- en: Bidirectional binding with Backbone.stickit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In `Backbone.js`, we can bind a model to a view out of the box, but it is not
    easy to make binding in reverse direction without the need to parse values of
    HTML elements.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will speak about the `Backbone.stickit` extension, which
    allows developers to implement bidirectional binding of the model properties and
    view elements in a simple and native `Backbone.js` way.
  prefs: []
  type: TYPE_NORMAL
- en: Among many similar extensions, `Backbone.stickit` stands out by its perfect
    documentation, simplicity, and the great advantage that it gives to application
    developers. It was written in New York Times not so long time ago, and its popularity
    is being growing day-by-day. It is definitely one of the coolest extensions for
    `Backbone.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we are going to build a simple application that has a couple
    of views bound to the same model, so if a user makes changes in the element of
    the first view, the second view is updated automatically. The user interface of
    our application will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bidirectional binding with Backbone.stickit](img/2728OS_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There are a couple of views that are bound to the same model. When the user
    enters data into the form, the model and the other view are updated.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can download the `Backbone.stickit` extension from the **GitHub** page [https://github.com/nytimes/backbone.stickit](https://github.com/nytimes/backbone.stickit).
    To include this extension into your project, save the `backbone.stickit.js` file
    into the `lib` folder of your project and include the reference to this file in
    `index.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Including a Backbone extension into your project is described in detail in the
    *Extending an application with plugins* recipe in [Chapter 1](ch01.html "Chapter 1. Understanding
    Backbone"), *Understanding Backbone*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Perform the following steps to perform a bidirectional binding.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have a model defined.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Define the form view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the bindings hash to the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here we used short binding definition, which acts as an alias for the detailed
    definition shown in the next snippet.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the `render()` method to the view and call `this.stickit()` after rendering.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Define the other view in a similar way.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new `model` instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Append both views to the HTML body.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whenever the `stickit()` method is called, the stickit extension initializes
    `innerHTML` of the HTML elements, which we have defined in the bindings hash.
    Because of such initialization, Stickit lets us to keep our templates clean, and
    we don't need to pass model values into the `html` variable manually when rendering
    the view.
  prefs: []
  type: TYPE_NORMAL
- en: For the `InvoiceItemView` view, one-way binding is configured (model to view),
    so every time model properties get changed, the corresponding HTML elements are
    updated.
  prefs: []
  type: TYPE_NORMAL
- en: For the `InvoiceItemFormView` view, Stickit sets up two-way binding (model to
    view and then, view to model), connecting and reflecting changes in the view elements
    with changes in bound model attributes.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section describes advanced usage of the `Backbone.stickit` extension:
    overriding model getters and setters, overriding view element updates, and listening
    to a specific HTML event.'
  prefs: []
  type: TYPE_NORMAL
- en: Overriding model getters and setters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When getting or setting properties of a model bound to our view, we can override
    the getting or setting behavior by specifying the `onGet` and `onSet` callbacks.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Overriding view element updates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are different ways in which we can override and customize view element
    updates. We can specify an `update` callback, which is triggered when an HTML
    element gets updated or we can specify `afterUpdate` callback, which will be executed
    afterwards.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: There is another way in which we can override value update for the view element
    by specifying `updateMethod`. By default it uses the `text` method, but we can
    change its value to `html`. If the `html` method is used, and we want to escape
    model values before assigning it to an HTML element, we can set the `escape` option
    to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Listening to a specific HTML event
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, for a textbox, textarea and other content-editable HTML elements,
    the `Backbone.stickit` extension listens to the following events, `keyup`, `change`,
    `cut`, and `paste`. For other elements, the `Backbone.stickit` extension listens
    to the `change` event.
  prefs: []
  type: TYPE_NORMAL
- en: However, there is a way to override this setting by specifying the `events`
    array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: In this case, view-to-model binding will occur on the `blur` event of the `#price`
    textbox.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the following recipe, we are going to continue learning about the Stickit
    extension. You can also find complete docs on `Backbone.stickit` on the **GitHub**
    page [http://nytimes.github.com/backbone.stickit/](http://nytimes.github.com/backbone.stickit/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Binding a model and a collection to a select list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we talked about how to bind a model to an HTML arbitrary
    element of the view. In this recipe we are going to learn how to bind a model
    to a select element. By changing the value of the select list, we need to change
    the associated property of a bound model.
  prefs: []
  type: TYPE_NORMAL
- en: This is a bit more complex, because we may want to take key-value pairs for
    select options from an array or a collection. Fortunately, the `Backbone.stickit`
    extension allows us to do this easily.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a simple example to demonstrate how we can bind
    a model and a collection to a select list.
  prefs: []
  type: TYPE_NORMAL
- en: '![Binding a model and a collection to a select list](img/2728OS_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can download the `Backbone.stickit` extension from the **GitHub** page [https://github.com/nytimes/backbone.stickit](https://github.com/nytimes/backbone.stickit).
    To include this extension into your project, save the `backbone.stickit.js` file
    into the `lib` folder and include the reference to it in `index.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Including the Backbone extension into your project is described in detail in
    the *Extending an application with plugins* recipe in [Chapter 1](ch01.html "Chapter 1. Understanding
    Backbone"), *Understanding Backbone*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Perform the following steps to bind a model and a collection to a select list.
  prefs: []
  type: TYPE_NORMAL
- en: Define a model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Define a view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add bindings hash to the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new model instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Render the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Backbone.stickit` takes values for select list options from the `collection`
    property and assumes that it defines either a path to a collection relative to
    the window object or a function, which returns a collection. Also, an array of
    objects can be used instead of a collection, as shown in the previous example.'
  prefs: []
  type: TYPE_NORMAL
- en: '`labelPath` indicates a path to a property of a collection object, which is
    used as a label for select list options, and `valuePath` defines the path to an
    option value.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find additional details about binding a model and a collection to a
    select list on the `Bacbkone.stickit` **GitHub** page [http://nytimes.github.com/backbone.stickit/](http://nytimes.github.com/backbone.stickit/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling keyboard shortcuts in a view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To perform the best user experience, your application should support various
    types of navigation within an application. One of these ways could be achieved
    by using shortcuts. Shortcut is a combination of keystrokes that provides easier
    access to a command or operation.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we are going to handle a couple of shortcuts for a view we implemented
    in the *Binding a collection to a view* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: To perform keyboard shortcut handling, we are going to use the `Moustrap` library
    and the `Backbone.Mousetrap` extension, which provide the functionality we need.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can download both the `Moustrap` library and the `Backbone.Moustrap` extension
    from the **GitHub** pages [https://github.com/ccampbell/mousetrap](https://github.com/ccampbell/mousetrap)
    and [https://github.com/elasticsales/backbone.mousetrap](https://github.com/elasticsales/backbone.mousetrap)
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: To include them into your project, save the `mousetrap.js` and `backbone.mousetrap.js`
    files into the `lib` folder and include references to them in `index.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Including a Backbone extension into your project is described in detail in the
    *Extending an application with plugins* recipe in [Chapter 1](ch01.html "Chapter 1. Understanding
    Backbone"), *Understanding Backbone*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To perform keyboard shortcut handling, add the following property into a view
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Backbone.Mousetrap` automatically delegates keyboard events to a view when
    it''s being created and undelegates when it is removed or when `undelegateEvents()`
    is called.'
  prefs: []
  type: TYPE_NORMAL
- en: The following keys, `shift`, `ctrl`, `alt`, `option`, `meta`, and `command`
    are available. Other special keys are `backspace`, `tab`, `enter`, `return`, `capslock`,
    `esc`, `escape`, `space`, `pageup`, `pagedown`, `end`, `home`, `left`, `up`, `right`,
    `down`, `ins`, and `del`.
  prefs: []
  type: TYPE_NORMAL
- en: You should be able to reference any other key by names, such as `a`, `/`, `$`,
    `*`, or `=`.
  prefs: []
  type: TYPE_NORMAL
- en: By default, Mousetrap prevents shortcut events from being handled when the browser
    is focused on any form element, such as input, text area, or select box. However,
    if you want to handle a shortcut event for such elements, you can add the `mousetrap`
    class to it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Please visit the following resource in order to learn more about Mousetrap:
    [http://craig.is/killing/mice](http://craig.is/killing/mice)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling router events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Though there are not many use cases for handling router events, `Backbone.js`
    provides a mechanism to do so. In this recipe, we are going to create a simple
    application that logs router events.
  prefs: []
  type: TYPE_NORMAL
- en: '![Handling router events](img/2728OS_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Perform the following steps in order to handle router events.
  prefs: []
  type: TYPE_NORMAL
- en: Listen to the `route` event of `Backbone.History`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Define the `route` event callback.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `route` event is triggered after routing has been successfully performed.
    The `route` event callback accepts the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**router**: This parameter indicates a current router in use'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**route**: This parameter indicates a router callback name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**params**: This indicates parameters passed to a router callback'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To handle a specific event for a specific router, listen to the `route:[name]`
    event.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the event callback accepts the `routes` parameters.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: More information about `routes` can be found in the *Implementing URL routing
    in your application* recipe in [Chapter 1](ch01.html "Chapter 1. Understanding
    Backbone"), *Understanding Backbone*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
