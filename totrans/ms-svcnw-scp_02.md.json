["```js\nnew GlideRecord('<table_name>');\n```", "```js\nvar glideRecord = new GlideRecord('incident');\n```", "```js\nvar glideRecord = new GlideRecord('incident');\nglideRecord.query();\nwhile (glideRecord.next()) {\n    //Code in this loop will be run against all incident records\n}\n```", "```js\nvariable.addQuery('<field_name>', '<operator>', '<value_to_compare_against_field>')\n```", "```js\nvar glideRecord = new GlideRecord('problem');\nglideRecord.addQuery('priority', 1);\nglideRecord.query();\nwhile (glideRecord.next()) {\n    //Code in this loop will be run against all problem records with a priority of critical.\n}\n```", "```js\nvar glideRecord = new GlideRecord('problem');\nglideRecord.addQuery('priority', 1);\nglideRecord.query();\nif (glideRecord.next()) {\n    //Code in this loop will be run against one problem record with a priority of 1 if one exists.\n}\n```", "```js\nvar glideRecord = new GlideRecord('change_request');\nvar orQuery = glideRecord.addQuery('risk', 1);\norQuery.addOrCondition('risk', 2); \nglideRecord.query();\nwhile (glideRecord.next()) {\n    //Code in this loop will be run against all change request records that are a very high or high risk.\n}\n```", "```js\nvar glideRecord = new GlideRecord('change_request');\nglideRecord.addQuery('risk', '>=', 2); \nglideRecord.query();\nwhile (glideRecord.next()) {\n    //Code in this loop will be run against all change request records that are a very high or high risk.\n}\n```", "```js\nvar glideRecord = new GlideRecord('incident');\nglideRecord.addQuery('urgency', 1); \nglideRecord.query();\nwhile (glideRecord.next()) {\n    //Change all high urgency incidents to medium urgency\n    glideRecord.urgency = 2;\n    glideRecord.update();\n}\n```", "```js\nvar glideRecord = new GlideRecord('incident');\nglideRecord.addQuery('category', 'network'); \nglideRecord.query();\nwhile (glideRecord.next()) {    \n    glideRecord.deleteRecord();\n}\n```", "```js\nvar glideRecord = new GlideRecord('incident');\nglideRecord.addQuery('category', 'network'); \nglideRecord.deleteMultiple();\n```", "```js\nvar userID = gs.getUserID();\n```", "```js\nvar userObject = gs.getUser();\n```", "```js\ngs.getUser().getFullName();\ngs.getUser().getEmail();\ngs.getUser().getLocation();\ngs.getUser().getManagerID();\ngs.getUser().getCompanyID();\n```", "```js\nif (gs.hasRole('admin')) {\n    //Run code for administrators only\n}\n```", "```js\ngs.addInfoMessage('Record saved successfully.');\ngs.addErrorMessage('Error in script.');\n```", "```js\ngs.log('Logging Message');\n```", "```js\ngs.log('Logging Message', 'My Script Log');\n```", "```js\nvar glideDT = new GlideDateTime();\n```", "```js\nvar glideDT = new GlideDateTime();\ngs.log(glideDT.getDisplayValue());\n```", "```js\nvar glideDT = new GlideDateTime();\nglideDT.addDaysLocalTime(1);\n```", "```js\nvar glideDT = new GlideDateTime();\nglideDT.addDaysLocalTime(-1);\n```", "```js\nif  (current.state.changesTo('7')) {\n    //Run some closure script\n}\n```", "```js\nif (current.canCreate()) {\n    //Run some creation script for the current record type\n}\n```", "```js\nvar counter = new GlideAggregate('incident');\ncounter.addAggregate('COUNT');\ncounter.query();\nif (counter.next()) {\n    var noOfIncidents = counter.getAggregate('COUNT');\n}\n```", "```js\nvar stateValue = g_form.getValue('state');\n```", "```js\ng_form.setValue('state', '6');\n```", "```js\ng_form.setMandatory('short_description', true);\n```", "```js\ng_form.setDisplay('assigned_to', false);\n```", "```js\ng_form.setReadOnly('description', true);\n```", "```js\nvar sysID = g_form.getUniqueValue();\n```", "```js\nif (g_form.isNewRecord()) {\n    //Run script only for new records\n}\n```", "```js\nvar userSys_ID = g_user.userID;\n```", "```js\nvar name = g_user.getFullName();\nalert('The logged in user is ' + name);\n```", "```js\nif (g_user.hasRole('itil') {\n    //Run code for user with the itil role only\n}\n```", "```js\nvar incRec = new GlideRecord('incident');\nincRec.addQuery('priority', 1);\nincRec.query();\nwhile (incRec.next()) {\n\n    //Critical incident found, create a new problem record\n    var newProblemRec = new GlideRecord('problem');\n    newProblemRec.cmdb_ci = incRec.cmdb_ci;\n    newProblemRec.short_description = incRec.short_description;\n    var newInsertedRecord = newProblemRec.insert();\n\n    //Update the incident with the problem reference\n    incRec.problem_id = newInsertedRecord;\n    incRec.update();\n} \n```", "```js\nvar userRec = new GlideRecord('sys_user');\nuserRec.get(gs.getUserID());\nuserRec.title = 'Manager';\nuserRec.update();\n```", "```js\nif (gs.hasRole('admin')) {\n    gs.addErrorMessage('Error with solaris server');\n} else if (gs.hasRole('itil')) {\n    gs.addErrorMessage('Server error');\n} else {\n    gs.addErrorMessage('An error has occurred, please contact your administrator');\n}\n```", "```js\nif (g_form.isNewRecord()) {\n    g_form.setValue('category', 'inquiry');\n} \n```", "```js\nif (!g_form.isNewRecord()) {\n}\n```"]