- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting Up the Development Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use Node.js, we first need to prepare our development environment. In this
    chapter, we will cover the details of how to install Node.js and check that everything
    is working as expected, so we can execute JavaScript and Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js is one of the most simple and easy-to-install software, so we will not
    spend too much time on this topic. However, we will cover some important details
    that you need to know in order to be able to work with Node.js in any environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'To sum up, here are the main topics that we will explore in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js in any environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing Node.js versions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Chrome DevTools and the Node.js REPL to interact with JavaScript and Node.js.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to properly set up Node.js in any environment,
    such as Windows, Linux, or macOS. This knowledge will also be applicable when
    you deploy your projects to the cloud or a specific device.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, you will learn how to debug any issues using the debugging tools
    included in your web browsers and the Node.js REPL.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you will learn how to manage multiple versions of Node.js running on
    the same machine. This skill will be very useful when you need to migrate a project
    between different Node.js versions.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code files for the chapter can be found at [https://github.com/PacktPublishing/NodeJS-for-Beginners](https://github.com/PacktPublishing/NodeJS-for-Beginners).
  prefs: []
  type: TYPE_NORMAL
- en: Check out the code in action video for this chapter on [https://youtu.be/xElsOS9Pz4k](https://youtu.be/xElsOS9Pz4k)
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js on macOS, Windows, and Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Node.js can be installed in three different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Downloading the binaries from the official website**: This is the recommended
    option for beginners, as it is the easiest way to install Node.js. You just need
    to download the binaries from the official website and execute the installer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using a package manager**: This is the most common way to install Node.js
    in Linux, FreeBSD, IBM i, Android, and similar environments. You just need to
    use your system’s package manager and install Node.js from there.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build from source**: This is the most advanced way to install Node.js and
    opens the door to many customizations, and it is only recommended for advanced
    users. You need to download the source code from the official repository and compile
    it on your machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: As part of Node.js continuous integration, there are many different environments
    and architectures where Node.js is tested, which means that Node.js maintains
    solid cross-platform support over time.
  prefs: []
  type: TYPE_NORMAL
- en: While writing this book, the latest Node.js version is 20.11.0, so we will use
    this version as a reference. However, you can use the last LTS version available,
    as the installation process is the same for all versions.
  prefs: []
  type: TYPE_NORMAL
- en: The upcoming sections will explain how to install Node.js on various operating
    systems, beginning with macOS.
  prefs: []
  type: TYPE_NORMAL
- en: macOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The easiest way to install Node.js on macOS is by downloading the binaries from
    the official website. You just need to go to the Node.js download page at [https://nodejs.org/en/download/](https://nodejs.org/en/download/),
    download the macOS installer, and follow the installation wizard.
  prefs: []
  type: TYPE_NORMAL
- en: You can also install Node.js using a package manager, but this is not recommended
    for beginners. If you want to install Node.js using a package manager, you can
    use Homebrew ([https://brew.sh/](https://brew.sh/)) or MacPorts ([https://www.macports.org/](https://www.macports.org/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'To use Homebrew, open your Terminal and type the following command, which will
    manage the installation process for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To use MacPorts, open the Terminal and type the following command to start
    the installation process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Next, we’ll see how to install it on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The easiest way to install Node.js on Windows is by downloading the binaries
    from the official website.
  prefs: []
  type: TYPE_NORMAL
- en: You just need to go to the Node.js download page at [https://nodejs.org/en/download/](https://nodejs.org/en/download/),
    download the Windows installer, and follow the installation wizard.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how to install it on Linux next.
  prefs: []
  type: TYPE_NORMAL
- en: Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The best way is to install Node.js using your package manager, but you can also
    use the binaries distributed by NodeSource ([https://github.com/nodesource/distributions/blob/master/README.md](https://github.com/nodesource/distributions/blob/master/README.md)).
    This will cover Debian and Ubuntu-based distributions (deb) as well as Enterprise
    Linux-based distributions (rpm).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at an example using Ubuntu.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, download the setup script from NodeSource using `curl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, review the content of the script (optional):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, execute the script as `root` and install Node.js:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Other environments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Node.js Build Working Group provides an official platform list that includes
    all the supported platforms and architectures with their different tiers of support.
    You can find it at [https://github.com/nodejs/node/blob/main/BUILDING.md#platform-list](https://github.com/nodejs/node/blob/main/BUILDING.md#platform-list).
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, Node.js has an initiative called the unofficial-builds project
    that provides support for other platforms and architectures, including `loong64`,
    `riscv64`, `linux-armv6l`, `linux-x86`, `linux-x64-glibc-217`, and `linux-x64-musl`.
    You can find more information at [https://github.com/nodejs/unofficial-builds](https://github.com/nodejs/unofficial-builds).
  prefs: []
  type: TYPE_NORMAL
- en: If you have solid skills with Docker, you can also use the official Docker images
    provided by Node.js to avoid installing the Node.js binaries on your machine ([https://hub.docker.com/_/node](https://hub.docker.com/_/node)).
  prefs: []
  type: TYPE_NORMAL
- en: Verifying the installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Node.js is shipped with npm. We will now check that both Node.js and npm are
    installed correctly. The installed versions can be different depending on the
    Node.js version that you have installed, but if it is not throwing an error, the
    installation was correct.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the terminal to check that the installation was done properly for
    both (Node.js and npm).
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify the Node.js installation, open your terminal and type the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The expected output is the Node.js version installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify that npm is installed, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The expected output is the npm version installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Congratulations! You just installed Node.js on your machine! In the next section,
    we will get familiarized with the Node.js versions so we will have a better understanding
    of which Node.js version we should use for our next project.
  prefs: []
  type: TYPE_NORMAL
- en: Managing Node.js versions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Node.js is a fast-moving project, so new versions are released every few months.
    To manage the Node.js versions on your machine, you will need to use a Node.js
    version manager.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several Node.js version managers available, but the most popular
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Node Version Manager** (**nvm**): [https://github.com/nvm-sh/nvm](https://github.com/nvm-sh/nvm)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**n**: [https://github.com/tj/n](https://github.com/tj/n)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fast Node Manager** (**fnm**): [https://github.com/Schniz/fnm](https://github.com/Schniz/fnm)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Volta**: [https://github.com/volta-cli/volta](https://github.com/volta-cli/volta)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this book, we will use nvm as the Node.js version manager, but you can use
    any other version manager that you prefer.
  prefs: []
  type: TYPE_NORMAL
- en: Important info
  prefs: []
  type: TYPE_NORMAL
- en: In production environments, you should use the latest LTS version available,
    as this version is the most stable and is supported for a longer time. In most
    cases, there is no need to install a version manager on your production machine,
    as you will use a specific version.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we are familiar with how the Node.js versions are organized, we will
    need some tools to help us handle several Node.js versions in the same environment.
    We will start in the next section with nvm.
  prefs: []
  type: TYPE_NORMAL
- en: Managing Node.js by using nvm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: nvm is the most popular and beginner-friendly way to manage multiple Node.js
    versions on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: I use nvm to manage my Node.js versions, as it is a great tool, but nvm can
    be tricky to install so you will need to follow the installation instructions
    carefully. There is a troubleshooting guide with common issues and solutions at
    [https://github.com/nvm-sh/nvm#installing-and-updating](https://github.com/nvm-sh/nvm#installing-and-updating).
  prefs: []
  type: TYPE_NORMAL
- en: 'This is my preferred way to install nvm in macOS, as it is the easiest way
    to install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'For Linux and macOS, download and execute the installation script from the
    official repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: nvm doesn’t work in Windows, so if you are using Windows, you will need to use
    another version manager or **Windows Subsystem for** **Linux** (**WSL**).
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatives to nvm for Windows are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'nodist: [https://github.com/nullivex/nodist](https://github.com/nullivex/nodist)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'nvm-windows: [https://github.com/coreybutler/nvm-windows](https://github.com/coreybutler/nvm-windows)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Node Version Switcher** (**NVS**): [https://github.com/jasongin/nvs](https://github.com/jasongin/nvs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you have installed nvm, you can use it to install and manage Node.js versions.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and using versions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to use a specific Node.js version, you will need to install it first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You can check the Node.js version in use with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also set a default Node.js version for your machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You can list the installed Node.js versions with the `ls` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The output will be a list of all the installed Node.js versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can list the available Node.js versions with the `ls-remote` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The output will be a list of all the available Node.js versions, and it is a
    very long list!
  prefs: []
  type: TYPE_NORMAL
- en: We tend to accumulate Node.js versions over time, so it is a good practice to
    uninstall the Node.js versions that you are not using anymore.
  prefs: []
  type: TYPE_NORMAL
- en: 'To uninstall a Node.js version, you will need to use the `uninstall` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Using a .nvmrc file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also use a `.nvmrc` file to specify the Node.js version that you want
    to use in a project. This is useful when you are working on a project with other
    developers and you want to make sure that everyone is using the same Node.js version.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use a `.nvmrc` file, you will need to create a file called `.nvmrc` in the
    root of your project with the Node.js version that you want to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, nvm can use the Node.js version specified in the `.nvmrc` file when you
    enter the project directory and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'If the Node.js version specified in the `.nvmrc` file is not installed, nvm
    will throw an error and will not change the Node.js version in use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run the command and the file is not found, nvm will throw an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Now that we are familiar with nvm usage, it is time to start using Node.js in
    our terminal, so in the next section, we will explore how to use Node.js in an
    interactive environment with the Node.js REPL.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js REPL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Yes, Node.js has a REPL, and it is very useful to test code and try new things.
  prefs: []
  type: TYPE_NORMAL
- en: '**REPL** stands for **Read-Evaluate-Print Loop**, and it is a simple interactive
    computer programming environment that takes single user inputs, executes them,
    and returns the result to the user.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start the Node.js REPL, you will need to run the `node` command without
    any arguments. The output will be something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can start writing JavaScript code and it will be executed immediately:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'To exit the REPL, you can use the `.``exit` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use the `.help` command to get a list of all the available commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the Node.js REPL is very simple, but it is useful to test code
    and try new things. You can learn more about the Node.js REPL in the official
    documentation at [https://nodejs.org/en/learn/command-line/how-to-use-the-nodejs-repl](https://nodejs.org/en/learn/command-line/how-to-use-the-nodejs-repl).
  prefs: []
  type: TYPE_NORMAL
- en: As well as the Node.js REPL, we can use web browsers to debug and test our JavaScript
    code. In the next section, we will see this in action using Google Chrome.
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with JavaScript using Chrome DevTools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is a set of utilities included in the Chrome browser ([https://developer.chrome.com/docs/devtools/overview/](https://developer.chrome.com/docs/devtools/overview/))
    defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: “Chrome DevTools is a set of web developer tools built directly into the Google
    Chrome browser. DevTools can help you edit pages on-the-fly and diagnose problems
    quickly, which ultimately helps you build better websites, faster.”
  prefs: []
  type: TYPE_NORMAL
- en: All Chrome-based browsers have Chrome DevTools, so you can use it with any browser
    based on Chromium, such as Google Chrome, Microsoft Edge, Brave, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The Node.js REPL is very useful, but in order to build web applications with
    Node.js, we can use Chrome DevTools for debug purposes. This debugging will be
    limited to client-side JavaScript as the Node.js code is not executed directly
    in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chrome DevTools is a very complete tool, so this can be quite overwhelming
    at first, but we will focus on the most important features for this book: the
    **Console** and **Network** panels.'
  prefs: []
  type: TYPE_NORMAL
- en: The Console panel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Console panel is the primary way to interact with the JavaScript on the
    website. The console is interactive so we can write JavaScript code and it will
    be executed immediately; we can also read the console output.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following video provides a great overview of the tool: [https://www.youtube.com/watch?v=76U0gtuV9AY](https://www.youtube.com/watch?v=76U0gtuV9AY).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read the official documentation here: [https://developer.chrome.com/docs/devtools/console/](https://developer.chrome.com/docs/devtools/console/).'
  prefs: []
  type: TYPE_NORMAL
- en: The Network panel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Network panel is very powerful. It allows us to inspect HTTP requests and
    responses so we can see the headers, body, status code, and so on. This will be
    very useful when we need to debug any kind of web application. You can find a
    great tutorial at [https://www.youtube.com/watch?v=e1gAyQuIFQo](https://www.youtube.com/watch?v=e1gAyQuIFQo).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read the official documentation here: [https://developer.chrome.com/docs/devtools/network/](https://developer.chrome.com/docs/devtools/network/).'
  prefs: []
  type: TYPE_NORMAL
- en: Using Chrome DevTools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our case, we will start from an empty website. We will use the Console panel
    to write JavaScript code that will change the page, and then we will inspect the
    HTTP requests. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In your browser, go to `about:blank`; by default, this will show a blank page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open DevTools by right-clicking on the page and clicking **Inspect**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the `document.body.innerHTML = '<h1>Hello World!</h1>'` and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Web browser screenshot](img/B21678_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – Web browser screenshot
  prefs: []
  type: TYPE_NORMAL
- en: Now, you should see the **Hello World!** text on the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Web browser screenshot with Hello World! text](img/B21678_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – Web browser screenshot with Hello World! text
  prefs: []
  type: TYPE_NORMAL
- en: Go to the **Network** tab and navigate to [https://packt.com](https://packt.com).
    You should see a lot of activity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Web browser activity](img/B21678_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – Web browser activity
  prefs: []
  type: TYPE_NORMAL
- en: This was a simple example for you to get familiar with the Chrome DevTools,
    but you can do much more with it. I recommend you read the official documentation
    to learn more.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! Your environment is ready to start developing new projects
    with Node.js!
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we explored the process of installing Node.js on various operating
    systems. Node.js is compatible with Windows, macOS, and Linux, but we also looked
    at the installation process for other operating systems, including non-officially-supported
    ones.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we delved into the usage of nvm to manage multiple Node.js versions.
    nvm allows you to switch between different versions of Node.js effortlessly. This
    can be particularly useful when working on projects that require specific Node.js
    versions or when testing compatibility across different versions.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, the chapter covered the usage of the Node.js REPL and Chrome DevTools.
    The Node.js REPL is an interactive shell that allows developers to experiment
    with JavaScript code, execute commands, and see immediate output. It provides
    a convenient environment for quickly testing code and debugging issues. Chrome
    DevTools is a set of web development tools built into the Google Chrome browser.
    It allows developers to inspect and debug JavaScript code and debug the network
    request among other things.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about JavaScript fundamentals. You will use
    Chrome DevTools and the Node.js REPL to run the examples and practice.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'How to install Node.js: [https://nodejs.org/en/learn/getting-started/how-to-install-nodejs](https://nodejs.org/en/learn/getting-started/how-to-install-nodejs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Building Node.js from source: [https://github.com/nodejs/node/blob/main/BUILDING.md](https://github.com/nodejs/node/blob/main/BUILDING.md)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Node.js unofficial-builds project: [https://github.com/nodejs/unofficial-builds](https://github.com/nodejs/unofficial-builds)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The official platform list supported by Node.js: [https://github.com/nodejs/node/blob/main/BUILDING.md#platform-list](https://github.com/nodejs/node/blob/main/BUILDING.md#platform-list)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js binaries distributed by NodeSource: [https://github.com/nodesource/distributions/blob/master/README.md](https://github.com/nodesource/distributions/blob/master/README.md)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Official Node.js Docker images: [https://hub.docker.com/_/node](https://hub.docker.com/_/node)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How to use the Node.js REPL: [https://nodejs.org/en/learn/command-line/how-to-use-the-nodejs-repl](https://nodejs.org/en/learn/command-line/how-to-use-the-nodejs-repl)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Chrome DevTools – Console: [https://developer.chrome.com/docs/devtools/console/](https://developer.chrome.com/docs/devtools/console/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Chrome DevTools – Network: [https://developer.chrome.com/docs/devtools/network/](https://developer.chrome.com/docs/devtools/network/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
