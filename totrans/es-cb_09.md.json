["```js\n// main.js \nclass Mission { \n  constructor () { \n    if (this.constructor === Mission) { \n      throw new Error('Mission is an abstract class, must \n      extend'); \n    } \n  } \n}  \n```", "```js\n// main.js \nclass Mission { \n  execute () { \n    this.determinDestination(); \n    this.determinePayload(); \n    this.launch(); \n  } \n} \n```", "```js\n// main.js \nclass LunarRover extends Mission {} \n```", "```js\n// main.js \nclass LunarRover extends Mission \n  constructor (name) { \n    super(); \n    this.name = name; \n  } \n}  \n```", "```js\n// main.js \nclass LunarRover extends Mission {} \n  determinDestination() { \n    this.destination = 'Oceanus Procellarum'; \n  } \n\n  determinePayload() { \n    this.payload = 'Rover with camera and mass spectrometer.'; \n  } \n\n  launch() { \n    console.log(` \nDestination: ${this.destination} \nPlayload: ${this.payload} \nLauched! \nRover Will arrive in a week. \n    `); \n  } \n}  \n```", "```js\n// main.js \nclass LunarRover extends Mission {} \nconstructor (name) { \n    super(); \n    this.name = name; \n  } \n\n  determinDestination() { \n    this.destination = 'Jovian Orbit'; \n  } \n\n  determinePayload() { \n    this.payload = 'Orbiter with decent module.'; \n  } \n\n  launch() { \n    console.log(` \nDestination: ${this.destination} \nPlayload: ${this.payload} \nLauched! \nOrbiter Will arrive in 7 years. \n    `); \n  } \n} \n```", "```js\n// main.js \nexport function main() { \n  const jadeRabbit = new LunarRover('Jade Rabbit'); \n  jadeRabbit.execute(); \n  const galileo = new JovianOrbiter('Galileo'); \n  galileo.execute(); \n} \n```", "```js\n// main.js \nclass Mission { \n  constructor (name) { \n    this.name = name; \n  } \n\n  describe () { \n    console.log(`\n      The ${this.name} mission will be launched by a\n       ${this.rocket.name}\n      rocket, and deliver a ${this.payload.name} to\n      ${this.destination.name}. \n    `); \n  } \n   } \n```", "```js\n// main.js \n\nclass Destination { \n  constructor (name) { \n    this.name = name; \n  } \n} \n\nclass Payload { \n  constructor (name) { \n    this.name = name; \n  } \n} \n\nclass Rocket { \n  constructor (name) { \n    this.name = name; \n  } \n} \n```", "```js\n// main.js \nclass MissionBuilder { \n\n  setMissionName (name) { \n    this.missionName = name; \n    return this; \n  } \n\n  setDestination (destination) { \n    this.destination = destination; \n    return this; \n  } \n\n  setPayload (payload) { \n    this.payload = payload; \n    return this; \n  } \n\n  setRocket (rocket) { \n    this.rocket = rocket; \n    return this; \n  } \n} \n```", "```js\n// main.js \nclass MissionBuilder { \n  build () { \n    const mission = new Mission(this.missionName); \n    mission.rocket = this.rocket; \n    mission.destination = this.destination; \n    mission.payload = this.payload; \n    return mission; \n  } \n}  \n```", "```js\n// main.js \nexport function main() { \n  // build an describe a mission \n  new MissionBuilder() \n    .setMissionName('Jade Rabbit') \n    .setDestination(new Destination('Oceanus Procellarum')) \n    .setPayload(new Payload('Lunar Rover')) \n    .setRocket(new Rocket('Long March 3B Y-23')) \n    .build() \n    .describe(); \n}  \n```", "```js\n// main.js \nclass Mission { \n  constructor (name) { \n    this.name = name; \n  } \n\n  describe () { \n    console.log(` \nThe ${this.name} mission will be launched by a ${this.rocket.name} rocket, and \ndeliver a ${this.payload.name} to ${this.destination.name}. \n    `); \n  } \n} \n```", "```js\n// main.js \nclass Destination { \n  constructor (name) { \n    this.name = name; \n  } \n} \n\nclass Payload { \n  constructor (name) { \n    this.name = name; \n  } \n} \n\nclass Rocket { \n  constructor (name) { \n    this.name = name; \n  } \n} \n```", "```js\n// main.js \n\nconst MarsMissionFactory = { \n  create (name, rocket) { \n    const mission = new Mission(name); \n    mission.destination = new Destination('Martian surface'); \n    mission.payload = new Payload('Mars rover'); \n    mission.rocket = rocket; \n    return mission; \n  } \n}  \n```", "```js\n// main.js \n\nexport function main() { \n  // build an describe a mission \n  MarsMissionFactory \n    .create('Curiosity', new Rocket('Atlas V')) \n    .describe(); \n  MarsMissionFactory \n    .create('Spirit', new Rocket('Delta II')) \n    .describe(); \n} \n```", "```js\n// main.js \n/* visitor that inspects mission */ \nclass MissionInspector { \n  visit (element) { \n    if (element instanceof Mission) { \n      this.visitMission(element); \n    } \n    else if (element instanceof Destination) { \n      this.visitDestination(element); \n    } \n    else if (element instanceof Rocket) { \n      this.visitRocket(element); \n    } \n    else if (element instanceof Payload) { \n      this.visitPayload(element); \n    } \n  } \n} \n```", "```js\n// main.js \nclass MissionInspector { \n  visitMission (mission) { \n    console.log('Mission ok'); \n    mission.describe(); \n     } \n} \n```", "```js\n// main.js \nclass MissionInspector { \n  visitDestination (destination) { \n    const name = destination.name.toLowerCase(); \n\n    if ( \n      name === 'mercury' || \n      name === 'venus' || \n      name === 'earth' || \n      name === 'moon' || \n      name === 'mars' \n    ) { \n      console.log('Destination: ', name, ' approved'); \n    } else { \n      throw new Error('Destination: '' + name + '' not approved      \n      at this time'); \n    } \n     } \n} \n```", "```js\n// main.js \nclass MissionInspector { \n  visitPayload (payload) { \n    const name = payload.name.toLowerCase(); \n    const payloadExpr = /(orbiter)|(rover)/; \n\n    if ( payloadExpr.test(name) ) { \n      console.log('Payload: ', name, ' approved'); \n    } \n    else { \n      throw new Error('Payload: '' + name + '' not approved at \n      this time'); \n    } \n  } \n} \n```", "```js\n// main.js \nclass MissionInspector { \n\n  visitRocket (rocket) { \n    console.log('Rocket: ', rocket.name, ' approved'); \n  } \n} \n```", "```js\n// main.js \nclass Mission { \n\n  // other mission code ... \n\n  accept (visitor) { \n    this.rocket.accept(visitor); \n    this.payload.accept(visitor); \n    this.destination.accept(visitor); \n    visitor.visit(this); \n  } \n  } \n```", "```js\n// main.js \nclass Destination { \n\n  // other mission code ... \n\n  accept (visitor) { \n    visitor.visit(this); \n    } \n  } \n```", "```js\n// main.js \nclass Payload { \n\n  // other mission code ... \n\n  accept (visitor) { \n    visitor.visit(this); \n    } \n  } \n```", "```js\n// main.js \nclass Rocket { \n\n  // other mission code ... \n\n  accept (visitor) { \n    visitor.visit(this); \n    } \n  } \n```", "```js\n// main.js \nexport function main() { \n  // build an describe a mission \n  const jadeRabbit = new MissionBuilder() \n    .setMissionName('Jade Rabbit') \n    .setDestination(new Destination('Moon')) \n    .setPayload(new Payload('Lunar Rover')) \n    .setRocket(new Rocket('Long March 3B Y-23')) \n    .build(); \n\n  const curiosity = new MissionBuilder() \n    .setMissionName('Curiosity') \n    .setDestination(new Destination('Mars')) \n    .setPayload(new Payload('Mars Rover')) \n    .setRocket(new Rocket('Delta II')) \n    .build(); \n\n  // expect error from Destination \n  const buzz = new MissionBuilder() \n    .setMissionName('Buzz Lightyear') \n    .setDestination(new Destination('Too Infinity And Beyond')) \n    .setPayload(new Payload('Interstellar Orbiter')) \n    .setRocket(new Rocket('Self Propelled')) \n    .build(); \n\n  // expect error from payload \n  const terraformer = new MissionBuilder() \n    .setMissionName('Mars Terraformer') \n    .setDestination(new Destination('Mars')) \n    .setPayload(new Payload('Terraformer')) \n    .setRocket(new Rocket('Light Sail')) \n    .build(); \n\n  const inspector = new MissionInspector(); \n\n  [jadeRabbit, curiosity, buzz, terraformer].forEach((mission) => \n   { \n    try { \n      mission.accept(inspector); \n    } catch (e) { console.error(e); } \n  }); \n} \n```", "```js\n// main.js \nclass Rocket { \n  constructor (name) { \n    this.name = name; \n  } \n}  \n```", "```js\n// main.js \nconst RocketManager = { \n  rockets: {}, \n  findOrCreate (name) { \n    const rocket = this.rockets[name] || new Rocket(name); \n    this.rockets[name] = rocket; \n    return rocket; \n  } \n} \n```", "```js\n// main.js \nexport function main() { \n  const atlas = RocketManager.findOrCreate('Atlas V'); \n  const atlasCopy = RocketManager.findOrCreate('Atlas V'); \n  const atlasClone = new Rocket('Atlas V'); \n\n  console.log('Copy is the same: ', atlas === atlasCopy); \n  console.log('Clone is the same: ', atlas === atlasClone); \n} \n```", "```js\n// main.js \nclass Mission { \n  constructor (name) { \n    this.name = name; \n  } \n\n  describe () { \n    console.log(` The ${this.name} mission will be launched by a  \n    ${this.rocket.name}, and deliver a ${this.payload.name} to \n    ${this.destination.name}. \n    `); \n  } \n}  \n```", "```js\n// main.js \nclass Destination { \n  constructor (name) { \n    this.name = name; \n  } \n} \n```", "```js\n// main.js \nclass Payload { \n  constructor (name) { \n    this.name = name; \n  } \n} \n```", "```js\n// main.js \nclass Rocket { \n  constructor (name) { \n    this.name = name; \n  } \n} \n```", "```js\n// main.js \n\nfunction MissionProgramFactoryFn(rocketName, destinationName, payloadName) { \n  return (name) => { \n    const mission = new Mission(name); \n    mission.rocket = new Rocket(rocketName); \n    mission.destination = new Destination(destinationName); \n    mission.payload = new Payload(payloadName); \n    return mission; \n  } \n} \n```", "```js\n// main.js \nexport function main() { \n  const marsRoverProgram = MissionProgramFactoryFn('AtlasV',\n  'MartianSurface', 'Mars Rover'); \n  marsRoverProgram('Curiosity').describe(); \n  marsRoverProgram('Spirit').describe(); \n\n  const interstellarProgram = MissionProgramFactoryFn('Warp \n  Drive',\n  'Vulcan', 'Dimplomatic Vessal'); \n  interstellarProgram('Enterprise E').describe(); \n  interstellarProgram('Defiant').describe(); \n} \n```", "```js\n// main.js \nclass Mission { \n  constructor (name) { \n    this.name = name; \n  } \n\n  describe () { \n    console.log(` \nThe ${this.name} mission will be launched by a ${this.rocket.name} rocket, and \ndeliver a ${this.payload.name} to ${this.destination.name}. \n    `); \n  } \n}  \n```", "```js\n// main.js \nclass Destination { \n  constructor (name) { \n    this.name = name; \n  } \n}  \n```", "```js\n// main.js \nclass Payload { \n  constructor (name) { \n    this.name = name; \n  } \n} \n```", "```js\n// main.js \nclass Rocket { \n  constructor (name) { \n    this.name = name; \n  } \n} \n```", "```js\n// main.js \nclass MissionBuilder { \n  setMissionName (name) { \n    this.missionName = name; \n    return this; \n  } \n\n  setDestination (destination) { \n    this.destination = destination; \n    return this; \n  } \n\n  setPayload (payload) { \n    this.payload = payload; \n    return this; \n  } \n\n  setRocket (rocket) { \n    this.rocket = rocket; \n    return this; \n  } \n}  \n```", "```js\n// main.js \nclass MissionBuilder { \n  build () { \n    const mission = new Mission(this.missionName); \n    mission.rocket = this.rocket; \n    mission.destination = this.destination; \n    mission.payload = this.payload; \n    return mission; \n  } \n} \n```", "```js\n// main.js \n\nconst MarsMissionFactory = { \n  create (name, rocket) { \n    return new MissionBuilder() \n      .setMissionName(name) \n      .setDestination(new Destination('Martian Surface')) \n      .setPayload(new Payload('Mars Rover')) \n      .setRocket(rocket) \n      .build() \n  } \n} \n```", "```js\n// main.js \nexport function main() { \n  // build an describe a mission \n  MarsMissionFactory \n    .create('Curiosity', new Rocket('Atlas V')) \n    .describe(); \n  MarsMissionFactory \n    .create('Spirit', new Rocket('Delta II')) \n    .describe(); \n} \n```"]