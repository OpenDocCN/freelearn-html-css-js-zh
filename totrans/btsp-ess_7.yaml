- en: Chapter 7. Customizing Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we have completed the setup of development and customization
    environment of Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will see how to customize Bootstrap CSS in order to match
    your needs in terms of look and feel. We will use our Bootstrap development environment
    to customize the CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are essentially two methods for customizing the Bootstrap output:'
  prefs: []
  type: TYPE_NORMAL
- en: By updating the Bootstrap source code using the build environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By using the Bootstrap web interface to generate customized code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will explore both the methods in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing using the build environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just to recollect that this is the folder structure of our Bootstrap source
    code bundle we configured in the previous chapter. Please note that the list of
    files and folders can vary depending on the version of Bootstrap you are using.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, we are using Bootstrap 3.3.1:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing using the build environment](img/B03987_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As marked in the preceding screenshot, these are two important folders we will
    be dealing with while customizing the behavior of Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: While it is very rare to change anything in the JavaScript code (in the `js`
    folder as marked in the screenshot), we will concentrate on the LESS files (in
    the `less` folder as marked in the preceding screenshot) to change the Bootstrap
    CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the contents of the `less` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing using the build environment](img/B03987_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, there is a single and separate LESS file for each of the CSS
    components and objects available in Bootstrap, for example, buttons, panels, tables,
    thumbnails, wells, breadcrumbs, Glyphicons, and grids.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, as well as the individual LESS files, we also have generic files such
    as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bootstrap.less`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`theme.less`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`utilities.less`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scaffolding.less`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`variables.less`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each of these files can be explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `bootstrap.less` file is the main collaborator file that encapsulates all
    the individual LESS files and generates the final big fat `bootstrap.css` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `theme.less` file is responsible for mainly generating the `bootstrap-theme.css`
    file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `utilities.less` file creates the general utility classes, for example,
    some of the classes as in [http://getbootstrap.com/css/#helper-classes](http://getbootstrap.com/css/#helper-classes).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `scaffolding.less` file is the main template of Bootstrap CSS file. It defines
    the page structure and template, and sets styles for the default HTML components
    (such as `html`, `body`, and `input`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `variables.less` file is probably one of the most important files which
    we will deal with. This file encapsulates all the LESS variables that have been
    used at various locations in Bootstrap CSS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In order to change and update Bootstrap CSS, we will mostly be changing the
    values of the various variables of this file. Just to recollect that this is our
    **Browse** page as of now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing using the build environment](img/B03987_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s change a few variables and values in the `variables.less` file
    to change the look and feel of this site:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `variables.less` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first section is `Colors`. The default code is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s change this as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the next `Scaffolding` section, change this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'into this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now let''s see what changes this brings to the page. To make this happen, we
    will build the code and deploy it to the web server:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the command prompt, go to the `project` folder using `D:\Bootstrap\node_modules\bootstrap`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Build the project and run this command in the terminal: `grunt dist`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: New set of CSS and JavaScript files will be generated in the `dist` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In order to deploy this updated code, we will copy the `css` folder (copying
    the `css` folder only since we haven't done any changes in JavaScript or Font)
    to the application `bs` folder (refer to [Chapter 2](ch02.html "Chapter 2. Getting
    Started with Bootstrap"), *Getting Started with Bootstrap* where we discussed
    the folder structure of the application we are building).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that you do not need to copy the `css` folder and files manually
    each time you make any changes in those files, instead you can use suitable Grunt
    commands to automatically perform this job for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the new look of our page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing using the build environment](img/B03987_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can see that the background color of our page has been changed, as have
    the font colors. This has been done due to this line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here instead of having body color as white (`#FFF`), we have opted for `#060606`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `@body-bg` element is a LESS variable defined; this variable is used to
    set the background color of the `body` element in the `scaffolding.less` file,
    shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Similarly, the text-color, font-family, font-size, and other styles are also
    set from LESS variables.
  prefs: []
  type: TYPE_NORMAL
- en: All these LESS files contain lines of code and syntaxes as per LESS preprocessor
    language. We are not delving deep into LESS syntaxes here. However, it is advised
    that you get familiar with LESS before tweaking the Bootstrap LESS files.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One good starting point to understand that LESS is their official website—[http://lesscss.org/](http://lesscss.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this way, we keep on changing various LESS variables in the `variables.less`
    file. This is our final version of the look and feel of the **Browse Products**
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing using the build environment](img/B03987_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is how the popup dialog box looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing using the build environment](img/B03987_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Some of the code we have changed in the `variables.less` file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If you are wondering how these LESS files are transformed into proper and browser-consumable
    CSS files, the grunt task `less:compileCore` does the job. It invokes the LESS
    JavaScript compiler in the background, parses the LESS files, and finally generates
    the CSS files.
  prefs: []
  type: TYPE_NORMAL
- en: The LESS JavaScript compiler we are talking about here is `less.js`, located
    in the folder at `D:\Bootstrap\node_modules\bootstrap\node_modules\grunt-contrib-less\tasks`.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, we have seen how we can update Bootstrap LESS files for customizing the
    default look and feel. In this way, you can update any other LESS files as well,
    if needed. The process of updating the JavaScript source files are also the same.
    All JS source files are located in the folder at `D:\Bootstrap\node_modules\bootstrap\js`.
    You can change any of these JS source files, build Bootstrap using grunt, and
    deploy them to the final application location for consumption.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Having said that, the preceding method does force you to update the actual source
    files of Bootstrap itself; thus, your customized code will be overwritten when
    you download an updated version of Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Hence, a better approach will be to create custom versions for each of the overridden
    files and put your customized code inside that. Finally, import and use these
    custom files. Thus, your custom code will not be affected when you download an
    updated version of Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing using Bootstrap web interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The second method to generate the customized CSS files is by using Bootstrap
    web interface—[http://getbootstrap.com/customize/](http://getbootstrap.com/customize/).
  prefs: []
  type: TYPE_NORMAL
- en: This interface enables you to pick and choose which CSS and JavaScript components
    you want in your project. For example, if you don't need the ScrollSpy JS component,
    then why should you deploy the corresponding JS code in your production server?
    The code will be loaded via the `bootstrap.min.js` file, and your HTML page size
    will be unnecessarily bigger. Thus, it is a good practice to avoid loading all
    those JavaScript components, which you actually are not going to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the screenshot of this page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing using Bootstrap web interface](img/B03987_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Another (and probably more important) requirement that you can accomplish via
    this web interface is to customize the Bootstrap CSS by changing the LESS variables
    (all those same variables that we customized in the previous section of this chapter):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing using Bootstrap web interface](img/B03987_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What you only need to do is to update the values of these variables in this
    interface and finally press the **Compile** and **Download** button at the bottom
    of the page.
  prefs: []
  type: TYPE_NORMAL
- en: This will generate the Bootstrap CSS and JS files both in normal and minified
    forms. Of course, you will need to take extra care about the version of Bootstrap
    you are using since this interface will act only on the latest stable version.
    If you are using any specific (and older) version of Bootstrap, you should do
    the customization using the local build environment we have created here. That
    would also enable you to properly maintain your customizations in your local source
    code version control server such as SVN.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to establish the compilation and build
    environment of Bootstrap. In this chapter, we used this environment to generate
    our customized Bootstrap files.
  prefs: []
  type: TYPE_NORMAL
- en: We saw another way of doing this customization by using Bootstrap's official
    web interface.
  prefs: []
  type: TYPE_NORMAL
- en: As we have almost finished our journey exploring Bootstrap, in the next and
    final chapter, we will see how we can extend Bootstrap using a number of other
    third-party frameworks and components.
  prefs: []
  type: TYPE_NORMAL
