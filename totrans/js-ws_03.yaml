- en: 3\. Programming Fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you'll be able to demonstrate JavaScript syntax
    and structure; write comments and debugging code; implement conditional logic
    and looping; write functions and invoke them in the code; and construct events
    that react to user input and update the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter serves as an introduction to the fundamental concepts and structures
    that are involved when working in JavaScript and really, programming in general.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you were introduced to some popular JavaScript tools
    and the various available runtimes for executing code with the modern web browser.
    We also explored web browser interactions and saw how we can control both the
    style and content of elements within the web browser with the use of common JavaScript
    functions in the **Integrated Development Environment** (**IDE**).
  prefs: []
  type: TYPE_NORMAL
- en: You have already seen large chunks of JavaScript code; however, understanding
    what each function works for is a key skill for any good developer. This chapter
    serves as an introduction to the fundamental concepts and structures involved
    in writing programs in JavaScript. We'll cover all the basics, from object types
    to conditionals and looping structures, how to go about writing and invoking functions,
    and even commenting and debugging their code.
  prefs: []
  type: TYPE_NORMAL
- en: From using variables to store and calculate data to using `if/else` statements
    to apply conditions to different variables, this chapter will be one of the most
    important stepping stones in your JavaScript learning path. A detailed understanding
    of Booleans, strings, objects, arrays, functions, arguments, and so on will improve
    your development skills.
  prefs: []
  type: TYPE_NORMAL
- en: Data Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Programming is all about manipulating data. Data can represent values such as
    people's names, temperature, image dimensions, the amount of disk storage, and
    total likes on a discussion group post.
  prefs: []
  type: TYPE_NORMAL
- en: All the data in a program has a data type. The data types that you usually learn
    to use first in JavaScript are number, string, boolean, object, array, and function.
    The number, string, and Boolean data types represent a single value. Objects represent
    more complex data. Functions are for writing programs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some common JavaScript data types with their uses and descriptions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**number**: Any positive or negative value whole numbers, usually called integers
    and floating-point numbers, that can be used in mathematical operations. It is
    used in product prices, checkout totals, the number of likes on a post, the geometry
    value of Pi, and can be used as a random number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**string**: Any set of valid characters that cannot be, or are not intended
    to be, used in computational operations. They are used to comment on a discussion
    post which can be a company name, a street address, name of a place, an account
    number, a telephone number, or a postal number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**boolean**: Any value representing true and false. It is used to check whether
    a form can be submitted, whether a password meets its required characters, whether
    an order balance qualifies for free shipping, and whether a button can be clicked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**object**:  An unordered collection of values, called properties, and code,
    called methods, that are intended to work together. It is used for real-world
    objects such as an order, stopwatch, clock, date, or microwave. They can be used
    for software objects such as a web page document, an HTML element on a web page,
    a CSS style rule, or an HTTP request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**function**: A specialized object data type that represents a block of code.
    The code can use optional input data and optionally return data. They can be used
    for the conversion of data such as temperature, finding a value in a list, updating
    the style of an HTML element, sending data to a web server, revealing a message
    on the screen, or checking for valid data entry formats such as an email address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Representation of Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Data is represented in programs using expressions. If you've ever worked with
    a spreadsheet program, then expressions are analogous to cell formulas. Expressions
    can be resolved to a value representing a specific data type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Expressions can be broken down into smaller parts, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Literal values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functions that return data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Object properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Object methods that return data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A good place to start learning about expressions is with literal values, operators,
    and variables. Functions and objects are covered separately, later in this chapter,
    and we will revisit them through their use in expressions.
  prefs: []
  type: TYPE_NORMAL
- en: Literal Values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Literal values are written into the programming code. Literal values are static.
    This means that they have the same value every time the line of code is executed,
    and they cannot be changed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Literal data needs to be formatted according to the rules for its data type.
    Number, string, and Boolean values are a good place to start so that we can understand
    the formatting of literal values. Functions and object literals are covered in
    their own topics later. Here is a list of some of their types and their rules
    and an example of each valid and invalid case:'
  prefs: []
  type: TYPE_NORMAL
- en: '`1000000`, `101`, `9.876`, and `-0.1234`. Invalid examples include `1,000,000`,
    `$1000000`, and `1 000 000`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''ABC Company''`, `"Earth''s Moon"`, `"She yelled \"duck\"!"`, `''She yelled
    "duck"!''`, and so on. Invalid examples include `ABC Company`, and `"She yelled
    "duck"!"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`true` and `false` are valid examples, whereas invalid examples include `True`,
    `TRUE`, `FALSE`, and `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Operators in Expressions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Operators are used to performing arithmetic, combine text, make logical comparisons,
    and assign values to variables and properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'The operators we look at can be grouped as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Arithmetic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: String
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grouping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparison
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logical
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: typeof
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For math computations, we use arithmetic operators. The string operator allows
    us to combine parts of an expression into a string value. The following table
    describes certain arithmetic operators and some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1: Arithmetic operators'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_03_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.1: Arithmetic operators'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say we could use `+`, which is concatenation. It converts non-string
    data types into strings. The following code shows three separate examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for each would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Expressions are not evaluated left to right. Instead, they are evaluated based
    on a preset operator order, which is called the operator precedence. For example,
    the multiplication operator has higher precedence than the addition operator does.
    You can override the operator's precedence using the grouping operator. It forces
    the evaluation of the expression contained within it before the rest of the expression
    is evaluated.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the `()` operator controls the precedence of expression evaluation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for each of the preceding examples would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Comparing data is an important part of programming. The resulting value of
    comparing data is either true or false. A portion of an expression can be compared
    to another portion using the comparison operators, which are sometimes called
    relational operators. The following table describes certain comparison operators,
    along with examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2: Comparison operators'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_03_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.2: Comparison operators'
  prefs: []
  type: TYPE_NORMAL
- en: 'Multiple parts of an expression can be compared using logical operators. These
    are sometimes called Boolean operators. Some Boolean operators, along with a description
    of them and examples, are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3: Logical operators'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_03_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.3: Logical operators'
  prefs: []
  type: TYPE_NORMAL
- en: Not all operators are symbols. A very helpful operator is `typeof`. It shows
    the data type as a string. The operator is all lowercase letters. Use the group
    operator to get the type of an expression using other operators.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the `typeof` operator controls the precedence of expression evaluation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for each of the preceding examples would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It's good practice to surround operators with a space. Exceptions are to not
    use spaces before or after the grouping operator `( )` and before the logical
    not `!` operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.01: Implementing Expressions and Operators'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will interactively enter number, string, and comparison
    expressions into a web browser console window and review the results. Let''s get
    started. Open the `data-expressions.html` document in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the web developer console window using your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next couple of steps, we will implement a few expressions using number
    data and arithmetic operators. Type the items on the lines beginning with the
    `>` symbol. The console window will show a response on the lines beginning with
    the `<` symbol.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Write the following code to add two literal whole numbers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write the following code to divide the literal whole numbers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, write the following code to divide a real number by a whole number:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Multiplication has a higher order of operator precedence, which is demonstrated
    with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can use parentheses to change the order of operational precedence, as shown
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To show the data type of a real number, we can use `typeof`, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s try the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The output is a syntax error because you cannot have a number in this format
    with spaces (`123 456` `789` is not recognized as a number, but `123456789` is).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can compare two whole numbers using the `>` operator, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Similarly, we can compare two whole numbers using the `<` operator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can switch over and work with string data. Let''s have a look at the
    output when we enter a literal string using double quotes as a delimiter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The next couple of snippets will show different examples of using literal strings.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Using a literal string without delimiters would result in an error since JavaScript
    would not recognize such an input:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can use a literal string using double-quotes. Suppose you want to return
    the statement in double-quotes. You can place the double quotes in between a single
    quote:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `\` escape character to use a delimiter. This turns special characters
    into string characters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A non-mathematic number such as a phone number without delimiters will be converted
    into a number:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A non-mathematic number such as a phone number will appear as follows because
    we are using "":'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can also combine numbers and a literal string, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can use the `==` operator to compare two strings with the same case:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s try comparing two strings with a different case:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When we compare a number with a string with the same numeric value using the
    `==` operator, data type conversion takes place. This is shown in the following
    snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we want data type conversion to not take place before the comparison is
    made, we need to use the `===` operator, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We used several operators and expressions in the preceding exercise. Real-world
    use cases of these operators and expressions would vary, depending on the type
    of applications being developed. However, the preceding exercise is a good starting
    point with regard to using these in actual programs. Note that, so far, the examples
    we used were using literal values. However, this may not always be the case in
    a real-world application. Often, values change dynamically while a program executes,
    and the use of variables in expressions becomes inevitable in such cases. The
    next section teaches you how you can use variables and constants in expressions.
  prefs: []
  type: TYPE_NORMAL
- en: Using Variables and Constants in Expressions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Variables and constants are symbolic names that are assigned to values. The
    value of a variable can be changed after it is assigned. The value that''s assigned
    to a constant cannot be changed. Variables and constants involve the following
    items:'
  prefs: []
  type: TYPE_NORMAL
- en: Declaration keyword
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assignment operator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expressions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Variables and constants need to be `var` and `let`. For constants, the declaration
    keyword is `const`.
  prefs: []
  type: TYPE_NORMAL
- en: Variables and constants require a `=`. The variable's data type is dynamic and
    is the same as the expression.
  prefs: []
  type: TYPE_NORMAL
- en: Variables do not need to be assigned a value when declared. A constant must
    be assigned a value when declared.
  prefs: []
  type: TYPE_NORMAL
- en: 'Have a look at the following examples of declaring a variable without assigning
    a value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Variables that are not assigned a value still have a data type. That data type
    is named `typeof` operator detects undefined data types.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some examples of declaring a variable and assigning a value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Some examples of assigning a value to a variable that''s been previously declared
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Exercise 3.02: Working with Variables Using the Web Browser Console'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will use the web browser console window to work with
    variables. You will practice declaring variables, assigning values, and checking
    their data types. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the `variables.html` file from [https://packt.live/370myse](https://packt.live/370myse)
    in your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the web developer console window using your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type the items onto the lines beginning with the `>` symbol. The console window
    will show a response on the lines beginning with the `<` symbol.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare a variable named `firstName`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write the data type of the variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Assign the string value `Albert` to the `firstName` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To find out what data type our input is, use the `typeof` keyword, as shown
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To find out what value our `firstName` variable is holding, we simply need
    to write the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare a variable and assign it to a number expression:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write the value of `totalLikes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To ascertain the data type, we will once again use `typeof`, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: So far, we haven't changed the values our variables are holding. We shall do
    this in the next step.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Here is the code for changing the value held by `totalLikes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We can use the comparison operator, `>`, to compare the value our variable is
    holding with a reference value. This is done in the next step.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Compare the value of `totalLikes` using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The result is obviously false as the current value of `totalLikes` is `51`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, let's define a new variable and use Boolean expressions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Declare a variable and assign it to a Boolean expression:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write the data type, like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You have now interactively worked with declaring variables, assigned them values,
    and used them in expressions. We defined variables with different inputs such
    as strings, numbers, and Boolean values. You also used the `typeof` operator to
    reveal the data type of a variable. Now, we will progress to another important
    topic — functions.
  prefs: []
  type: TYPE_NORMAL
- en: Functions That Return Values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Functions may be written to return a value. In that case, we can use them in
    expressions. When we use a function, it is also called invoking the function.
  prefs: []
  type: TYPE_NORMAL
- en: To use a function in an expression, you need to include the function name, followed
    by parentheses. If the function requires input, it is placed inside the parentheses
    as valid expressions. These are called arguments. If more than one argument is
    needed, they are separated with commas.
  prefs: []
  type: TYPE_NORMAL
- en: These examples assume that the function will return a value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Have a look at this example on expressing functions that do not require an
    argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'This example shows us expressing a function that has one argument expressed
    as a number literal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'This example shows us expressing a function that has multiple arguments using
    literal values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, this example shows us expressing a function that has multiple arguments
    using variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: When you see a function in an expression, think of it as representing a value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.03: Using Functions in Expressions'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will use a predefined function and then use it in expressions.
    This exercise will show how you can invoke, check, and return the data type, and
    use functions in expressions. For the purpose of this exercise, we will use a
    function defined as `getDiceRoll`. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `use-functions.html` document in your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the web developer, `console window`, using your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The web page has a function named `getDiceRoll`. It returns the value of one
    rolled dice. It has one argument. The argument allows you to supply the number
    of dice to roll. Type the items on the lines beginning with the `>` symbol. The
    console window will show a response on the lines beginning with the `<·` symbol.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Express the data type. Note that a function name without parentheses is used:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Express the return value data type. Note that a function name with parentheses
    is used:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Invoke the function using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We can also invoke functions in math expressions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Invoke the function in a math expression:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We can also invoke functions in a comparison expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Invoke the function in a comparison expression:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: So far, we haven't passed any arguments for our functions. However, remember
    that we do have the option to do so as our function is defined to accept a single
    argument. This argument defines the number of dices that will be rolled. Let's
    try passing an argument in the next step.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Invoke and supply the argument for the number of dice to roll as 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Functions are critical to JavaScript programming. To get you started, we have
    only shown how you can use predefined functions. You will learn to write your
    own functions later in this chapter. However, you may come across scenarios in
    which you may have to use functions that have already been created. This exercise
    was a good starting point in showing you how this can be done.
  prefs: []
  type: TYPE_NORMAL
- en: The Object Data Type
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'JavaScript is designed around object data, thus making it important to understand.
    There are JavaScript objects that have been ready-made for us to use and you,
    as a programmer, will create objects. In either case, JavaScript objects are composed
    of **properties** and **methods**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Property: A value that has an assigned named. Together, they are often called
    a name/value pair. Values can be any type, that is, data, a number, a string,
    a Boolean, or an object. Property values can be changed dynamically.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Method: A function that performs an action.'
  prefs: []
  type: TYPE_NORMAL
- en: Ready-Made Objects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JavaScript has ready-made objects that we can use to help us begin to learn
    how to program. There are many useful objects built into JavaScript. Web browsers
    provide a collection of objects called the Document Object Model (DOM).
  prefs: []
  type: TYPE_NORMAL
- en: 'Some examples of ready-made objects are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`window` is an object in DOM. It has access to the web browser''s open window.
    Often considered a top-level DOM object containing other web browser-created objects
    as its properties, it has methods for setting timer events and printing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`console` is an object in DOM. It provides the ability to output to the web
    browser console window. It is also a property of the window object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`document` is an object in DOM. It has access to a web page''s HTML elements,
    styles, and content. It is also a property of the window object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`location` is an object in DOM. It has information about the current URL. It
    is a property of the window object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Math` is a built-in object. It consists of math constants such as Pi, and
    functions such as rounding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Date` is a built-in object. It provides calendar date and time operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Exercise 3.04: Working with Ready-Made Objects'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will experiment with the properties and methods of ready-made
    objects that are available to JavaScript in the web browser. We will use the random,
    round, ceil, and floor methods to invoke a math object from a pre-defined object.
    Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `objects-ready-made.html` document in your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the web developer console window using your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, we will start with the web browser document object. Type the items on
    the lines beginning with the `>` symbol. The console window will show a response
    on the lines beginning with the `<·` symbol.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Display the document object title property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, display the document object `doctype` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Display the document object `lastModified` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare a variable and assign it to the `HTMLElement` object variable using
    the document object `getElementById` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Display the `pageHeadEleHTMLElement` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write the `pageHeadEle object innerHTML` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s look at the JavaScript built-in `Math` object. Write the Math object
    PI property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Invoke the `random` method for the Math object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Math.random()` method returns a random number from the range `0` and `1`,
    both inclusive. It returns a different value with every call.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Invoke the `random` method for the Math object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Invoke the `random` method for the Math object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the Math object''s `round` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the Math object''s `round` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Math.round()` method returns the number after rounding it off to its nearest
    integer.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Use the Math object''s `ceil` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Match.ceil()` method returns the next smallest integer value that is greater
    than, or equal to, the given argument.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Use the Math object''s `ceil` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the Math object''s `floor` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Math.floor()` method returns the previous largest integer value that is
    less than, or equal to, the given argument.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Use the Math object''s `floor` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is the expression we use to get a random dice value. The floor method
    argument is an expression, that is, `Math.random() * 6`. Its result is added to
    1:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There are many ready-made objects available in JavaScript. They are used just
    like other functions and variables, except we call the functions as methods and
    the variables as properties.
  prefs: []
  type: TYPE_NORMAL
- en: Self-Made Objects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You often have to create objects when developing real-world applications. They
    help you organize a set of data and functions that work together. Think about
    what properties and methods you may use for a stopwatch object.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see that we named the properties and methods as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`elapsedTime` is a property with a data type number. It displays the seconds
    that have elapsed since timing started.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resultsHistory` is a property data type object. It displays a list of previous
    timings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isTiming` is a property data type Boolean. It displays the state of its timing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isPaused` is a property data type Boolean. It displays the state if paused.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`start` is a method data type function. It starts timing and sets `elapsedTime`
    to `0`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pause` is a method data type function. It pauses the timing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resume` is a method data type function. It resumes the timing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stop` is a method data type function. It stops timing and adds the result
    to `resultsHistory`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Object Dot Notation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To reference object properties and methods, you use dot notation. This is the
    object name, followed by a period, and then the name of the property or method.
    Let''s use the `stopWatch` object as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Methods require parentheses after the name. If the method requires data input,
    the data is placed inside the parentheses.
  prefs: []
  type: TYPE_NORMAL
- en: The Array Object
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Arrays are objects that represent a list of values. Each item in the list is
    called an element. To initialize an array, you can set it to an array literal.
    An array literal is a comma-separated list of expressions enclosed in square brackets,
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Elements in arrays can be different data types. Often, all the elements are
    the same data type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Elements in a literal array can be expressions, but they are evaluated and
    only the expression values are stored:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Variables and object properties can contain arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Array elements can be arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'The array objects with useful properties and methods are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`length` is a property with a number data-type that displays the number of
    items in the array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`push` is a method with a number data-type that appends an element and returns
    the new length.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unshift` is a method with a number data-type that prepends an element and
    returns the new length.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shift` is a method with a mixed data-type that removes the first element and
    returns the removed element''s value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pop` is a method with a mixed data-type that removes the last element to return
    the removed element''s value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`concat` is a method with a function data-type that merges two or more arrays
    to return a new array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Console Object
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `console` object has a method called `log` that we can use to test expressions
    in a JavaScript program. It takes an unlimited number of expressions separated
    by commas. All the expressions we enter into the console window would work with
    the `console.log` method. It evaluates the expressions and returns their results
    in the console. Multiple expressions are separated by a space.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `console.log` method will be used in the upcoming exercises. Let''s have
    a look at its syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are some examples of the `console.log` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Programs follow a set of rules that define keywords, symbols, and structure.
    This is called the syntax. We have already learned about many of the syntax rules
    in JavaScript for expressing data, variables, and expressions. You will be required
    to name objects, properties, methods, variables, and functions.
  prefs: []
  type: TYPE_NORMAL
- en: The following is a basic set of rules and conventions. Conventions are another
    term for best practices. Although not following a convention will not cause issues
    in your coding, they can make your code less easy to follow and not palatable
    to other programmers, for example, who may be interviewing you for a job and ask
    to see your code samples.
  prefs: []
  type: TYPE_NORMAL
- en: 'The naming rules and conventions for functions and variables are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 26 upper and lowercase letters (**A-Z, a-z**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any character but the first character can be one of 10 digits (**0-9**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No spaces, dashes, or commas. The underscore (**_**) character is acceptable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capitalization follows camelCase. This means that all characters are lowercase,
    except for the first letters of words and except for the first word in compound
    worded names.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No JavaScript reserved words; for example, you cannot use `typeof`, `var`, `let`,
    and `const`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Semicolon at the End of Code Statements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some programming languages require a semicolon `;` at the end of every executable
    code statement. JavaScript does not have this requirement, except when you have
    more than one executable code statement on the same line of a JavaScript file.
  prefs: []
  type: TYPE_NORMAL
- en: Requiring a semicolon `;` at the end of every executable code statement is more
    of a personal or development team choice. Since the semicolon character `;` is
    used in other languages, often, programmers prefer to use them in JavaScript so
    that they get into the habit of using them and so that they spend less time dealing
    with syntax errors. If you choose to use the semicolon character `;`, then do
    it consistently.
  prefs: []
  type: TYPE_NORMAL
- en: Lines of Code versus Statements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each line in a JavaScript source file does not need to be a single line of executable
    code. You can break a single line of executable code into multiple source file
    lines, or put multiple lines of executable code on a single source file line.
    This flexibility allows you to format the code so that it is easier to follow
    and edit.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a single line of executable code using a single source file
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'However, it may be more desirable to use multiple source file lines, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'You can have more than one line of code on the same line if you use `;` after
    the previous code line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: You will learn that, when JavaScript files are prepared for publishing, you
    can optionally use an optimizer program to compress all the lines in a source
    file into one line. In this way, the invisible end of a line character is removed
    to make the file smaller.
  prefs: []
  type: TYPE_NORMAL
- en: Comments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can add a comment to your code since they are ignored when the program is
    executed. Comments can help us remember what the code does at a future date and
    inform other programmers who may need to use or work with your code.
  prefs: []
  type: TYPE_NORMAL
- en: Commenting is a useful tool to keep a line of code from executing in testing.
    For example, let's say you have one or more lines of code that are not working
    as expected and you want to try alternative code. You can comment on the code
    in question while you try the alternatives.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript has inline commenting, also known as single-line commenting. This
    uses the double forward slash, `//`. All the text following the double slash up
    to the end of the line is ignored when the program is executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at some examples of inline comments. The following comment
    explains the next line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'The comment at the end of the line is explaining the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: JavaScript has block commenting, also known as multi-line commenting. This uses
    the combined forward slash asterisk characters to mark the beginning of the comment,
    and the reverse of a combined asterisk forward-slash to mark the end of the comment.
    All the text between `/*` and `*/` is ignored when the program is executed. Let's
    have a look at the various block comments.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a multiple-line block comment that contains code. This code
    snippet would not be executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'A block comment can be a single line in the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is an example of using `JDoc` block comments for a function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: There are also tools that use syntax to produce documentation of your code from
    comments (for example, JDoc). These tools read your source code and produce a
    documentation guide of your code. Comments increase the bandwidth for web pages,
    so they are often not seen in the source code when you inspect a web page. This
    is because, often, the original JavaScript file is not published, but rather a
    compressed version. The tools that compress the JavaScript file will remove comments
    by default. Comments are helpful for learning. You are encouraged to write comments
    in your code that explain what the code does.
  prefs: []
  type: TYPE_NORMAL
- en: Conditional and Loop Flow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Statements in JavaScript are processed sequentially in the order they''re loaded.
    That order can be changed with conditional and loop code statements. The different
    parts of a control statement are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Code blocks `{…}`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conditional flow statements, such as `if...else, switch, try catch finally`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loop statements, such as `for, do...while, while, for...in, and for...of`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other control statements, such as `labeled`, `break`, and `continue`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will describe each of these in detail in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Code Blocks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Code blocks are statements that are placed between an open and close curly
    bracket. The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Code blocks by themselves do not offer any statement flow advantage until you
    combine them with conditional or loop statements.
  prefs: []
  type: TYPE_NORMAL
- en: Conditional Flow Statements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Conditional statements use logic expressions to choose from among a set of statements
    to process.
  prefs: []
  type: TYPE_NORMAL
- en: if...else Statement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `if`, `else...if`, and `else` statements give you four structures for selecting
    or skipping blocks of code.
  prefs: []
  type: TYPE_NORMAL
- en: if Statement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Code in an `if` statement is processed if the expression evaluates to `true`
    and is skipped if the expression evaluates to `false`. The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'This shows the flow of the `if` statement. If the Boolean expression is `true`,
    the code is processed. If `false`, the code is skipped:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4: The if flowchart'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_03_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.4: The if flowchart'
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.05: Writing an if statement'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will use the `if` statement to test for an even number
    between 1 and 6 and test the results in your web browser console window. Let''s
    get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `if-statement.html` document in your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the web developer console window using your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `if-statement.js` document in your code editor, replace all of its
    content with the following code, and then save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Math.random()` function randomly creates a whole number from `1` to `6`
    and displays it in the console. Here, the `if` statement states that if the remainder
    of the number, divided by two, is not zero, that is, `diceValue % 2 != 0`, then
    the `if` expression is true and the `console.log()` message is displayed in the
    console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Reload the `if-statement.html` web page in your web browser with the console
    window open. Repeat until you see a version of the two examples:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the `if-statement.js` document using bolded lines and then save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Because there is only one line of code in the `if` statement, the block brackets
    are not required.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Reload the `if-statement.html` web page in your web browser with the console
    window open. You should expect the same results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the `if-statement.js` document and add the highlighted line to `console.log()`
    and save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reload the `if-statement.html` web page in your web browser with the console
    window open:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The Dr. Seuss quote is shown regardless of whether the number is even or odd.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `if-statement.js` document lines in bold and save it. We added the
    block delimiters here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reload the `if-statement.html` web page in your web browser with the console
    window open:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can see different outcomes depending on the logical expression of the `if`
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: if Statement and else Statement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can combine an `if` statement with an `else` statement. If the expression
    evaluates to `true`, the code in the `if` statement is processed and the code
    in the `else` statement is skipped. If the expression is false, the reverse happens;
    that is, the code in the `if` statement is skipped and the code in the `else`
    statement is processed. The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'The `if...else` working is visible from the following flowchart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5: The if else flowchart'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_03_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.5: The if else flowchart'
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.06: Writing an if...else Statement'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, a random number is being used for a coin toss. A random value
    equal to .5 or greater is heads and less than .5 is tails. We will assume that
    multiple statement lines are required for each case. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `if-else-statements.html` document in your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the web developer console window using your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `if-else-statements.js` document in your code editor, replace all
    of its content with the following code, and then save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `tossValue` variable is a value from 0 to 1, not including 1\. For now,
    just an `else` statement is used for a head toss.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Reload the `if-else-statements.html` web page in your web browser with the
    console window open. Repeat until you see a version of the two examples:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The numbers that you obtain are likely to be different to the ones presented
    here.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `if-else-statements.js` document, add the following bolded code, and
    then save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the `if` statement expression is `true`, the statements in its block are
    processed and the `else` block statements are skipped. If the `if` block expression
    is `false`, only the statements in the `else` block are processed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Reload the `if-else-statements.html` web page in your web browser with the
    console window open:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Again, you will see different outcomes depending on the logical expression of
    the `if` statement. Consider how an `if` statement may handle toggling a like
    icon on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: if Statements with Multiple else...if Statements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can have one or more `else...if` statements in addition to the `if` statement.
    The `if` statement and each `else...if` statement has its own expression. If the
    code in the first statement has an expression evaluated as `true`, it is processed
    and the code in all the other statements is skipped. If none of the expressions
    evaluate to `true`, all the code statements are skipped. The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'The following flowchart illustrates one or more `else...if` statements in addition
    to the `if` statement. Each of the Boolean expressions is evaluated in the order
    they''re encountered. The code is processed if the first expression is `true`,
    and the code processing procedure skips to the code following the last `else...if`
    statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6: The if and multiple elseif flowchart'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_03_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.6: The if and multiple else...if flowchart'
  prefs: []
  type: TYPE_NORMAL
- en: if Statement, Multiple else...if statements, and the else Statement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can have one `else` statement follow the last `else...if` statement. If
    the code in the first statement has an expression evaluated to `true`, is it processed
    and the code in all other statements is skipped. If none of the expressions evaluate
    to `true`, then the code in the `else` statement is processed. The syntax is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'The following flowchart the illustrates inclusion of the `else` statement,
    along with `else if` statements and the `if` statement. If all the Boolean expressions
    are false, then the code in the `else` block is processed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7: The else statement, along with else...if statements and the if
    statement'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_03_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.7: The `else` statement, along with `else...if` statements and the
    `if` statement'
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.07: Writing an if Statement with Multiple if else Statements and
    the else Statement'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will build a simple game that generates four random game
    numbers from 1 to 21 inclusive. One is the player''s score, one is the target
    score, one is a lucky score, and the last is an unlucky score. The player gets
    a wallet of 20 times the player''s score. There are five possible outcomes, with
    each assigning different wins or losses to the player''s wallet:'
  prefs: []
  type: TYPE_NORMAL
- en: The player's score matches the lucky score, and the lucky score and the unlucky
    score are different. The wallet is increased by the lucky value plus the player's
    score times `10`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The player's score equals the unlucky score, and the lucky score and the unlucky
    score are different. The wallet is reduced to zero.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The player's score equals the target score. The wallet is increased by the difference
    between `21` and the target score times `10`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The player's score beats the target score. The wallet is increased by the difference
    between the player's score and the target score times `10`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The target score beats the player's score. The wallet is decreased by the difference
    between the target score and the player's score times `10`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The steps for completion are as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the `if-else-if-else-statements.html` document in your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the web developer `console window` using your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `if-else-if-else-statements.js` document in your code editor, replace
    all of its content with the following code, and then save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will start by matching the target or exceeding it using the `if` statement
    block, `if (player >= target)`. The `else` statement block stating "Player loses:
    misses target by" covers being below the target.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Reload the `if-else-if-else-statements.html` web page in your web browser with
    the console window open. Repeat until you see a version for each of these three
    examples.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An example of the player''s score exceeding the target is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is an example of the player''s score matching the target. In
    this case, the message is not supporting the logic:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An example of the target exceeding the player''s score is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, we can add a code some handle the player matching the target.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `if-else-if-else-statements.js` document, add the following bolded
    code, and then remove the strikethrough code and save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A new `if` statement block is added to handle the condition when the player
    ties with the target. The original `if` statement block is replaced with an `else...if`
    statement block that only tests for conditions when the player's value exceeds
    the target.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Reload the `if-else-if-else-statements.html` web page in your web browser with
    the console window open. Repeat this until you see a version for each of these
    three examples.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An example of a player''s score exceeding the target is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is an example of a player matching the target. In this case,
    the message is not supporting the logic:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An example of the target exceeding the player''s score is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Edit the `if-else-if-else-statements.js` document, update it using the following
    bolded code, and then save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A variable for the lucky and unlucky number are added and are output to the
    console so that we can observe them:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, we add an `if` statement block when the lucky value does not match the
    unlucky value and the player value matches the lucky value. The use of the logical
    `&&` operator handles the two required tests, both of which need to be true.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This condition preempts the other winning and losing condition `if` statements,
    so it needs to precede them. Add the following bolded code and remove the strikethrough
    code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We also want a condition when the lucky value does not match the unlucky value,
    and the player value matches the unlucky value. Again, the use of the logical
    `&&` operator handles the two required tests, both of which need to be true.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This condition preempts the other winning and losing condition `if` statements,
    so it needs to precede them. Insert the following bolded code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Reload the `if-else-if-else-statements.html` web page in your web browser with
    the console window open. Repeat this until you see a version for each of these
    two examples.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is an example of a player matching the lucky number, but not
    the unlucky number:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is an example of a player matching the unlucky number, but not
    the lucky number:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Edit the `if-else-if-else-statements.js` document, update it with the following
    bolded code, and then save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The initial wallet value is `10` times the player''s score. It is displayed
    along with the other game data:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If there is a match with the lucky number, the wallet is increased by the player's
    score and the lucky score times `10`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If there is a match with the unlucky number, the wallet is decreased to zero:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the player''s score matches the target, the wallet is increased by the difference
    between `21` and the target:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the player''s score exceeds the target, the wallet is increased by the difference
    times `10`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `else` statement block reduces the wallet by the difference between the
    target and the player. It ties `10`, but not below zero.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After the `if`, `if else`, and `else` block statements, the player''s final
    wallet is displayed:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Reload the `if-else-if-else-statements.html` web page in your web browser with
    the console window open. Repeat this until you see a version for each of these
    examples.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is an example of the target exceeding the player''s score and
    the amount being deducted from the wallet exceeding the wallet balance. In this
    case, the wallet is reduced to zero:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is an example of the player''s score exceeding the target score.
    The wallet increased by `10` times the difference exceeded:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is an example of the player''s score matching the target score.
    The wallet increased by `10` times the difference of `21` and the target:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is an example of the player matching the lucky number, but not
    the unlucky number. The wallet is increased by the player and the target times
    `10`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is an example of the player matching the unlucky number, but
    not the lucky number. The wallet is reduced to `0`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This was a much longer exercise. It showed you how multiple `if` statements
    with different logic expressions can work together to produce one outcome. You
    will have noticed that the order of the logical expressions can make a difference
    because in this case, the lucky and unlucky values needed to be resolved before
    the target value expressions. Changing the order would produce a whole set of
    different outcomes.
  prefs: []
  type: TYPE_NORMAL
- en: The break Statement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `break` statement is used within blocks for `loop` statements and the `switch`
    statements. When the `break` statement is encountered inside `loop` statement
    and `switch` statement blocks, program flow continues on the next line following
    the block. The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: The second syntax form is required when it's used within a labeled statement
    block. You will find out more about labeled statements later in this chapter.
    The upcoming exercises will make use of the `break` statement.
  prefs: []
  type: TYPE_NORMAL
- en: switch Statement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `switch` statement defines a block of code divided up by `case` statements
    and an optional `default` statement. The `case` statements are followed by a possible
    value for the `switch` statement expression and then a colon, `:`. Optionally,
    the code will follow a `case` statement. The `default` statement is just followed
    by a colon, `:`.
  prefs: []
  type: TYPE_NORMAL
- en: 'How does it work? The `switch` statement''s expression is evaluated and the
    code following the first `case` statement that has a value that matches the `switch`
    statement''s expression value is processed until a `break` statement is reached.
    Then, any remaining code is skipped. If none of the `case` statement values match
    and there is a `default` statement, then the code following the `default` statement
    is processed. Otherwise, no code is processed. The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a flowchart illustrating the `switch` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8: Switch statement flowchart'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_03_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.8: Switch statement flowchart'
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.08: Writing a switch Statement and Testing It'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to use the `switch` statement by simulating a game where the player
    can move their playing pieces using their keyboard. They can move left with the
    `A` key, right with the `S` key, up with the `W` key, and down with the `Z` key.
    To simulate a random selection of the keys, in either uppercase or lowercase,
    from the `keyNames` string, a variable will be used. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `switch-statement.html` document in your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the web developer console window using your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `switch-statement.js` document in your code editor, replace all of
    its content with the following code, and then save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Math.floor(Math.random() * keys.length)` expression is selecting a number
    from `0` to `7` that is then used by `charAt` to select the character from the
    `keyNames` string variable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run a few tests by reloading the `switch-statement.html` web page in your web
    browser with the console window open. Your results will show selections from the
    `ADWSadws` characters. Here are some examples of the console output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Edit the `switch-statement.js` document so that it includes the following bolded
    lines and then save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `switch` statement expression is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `switch` statement expression converts the character into lowercase so
    that each case statement can check for one value. Here, we are checking whether
    the case value is equal to the switch term:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `switch` statement uses one expression and then determines the lines of
    code to process based on matching the result with the case statements. It is important
    to note that without a `break` statement, all the code to the end of the `switch`
    statement is processed once one case statement matches the expression value. This
    can be an advantage when more than one case statement uses the same code. The
    default statement allows for code that is being processed when none of the case
    statements match the expression value. However, remember that a default statement
    is not required. In this example, if the user pressed a wrong key, nothing would
    happen, which is often the case with game consoles.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Reload the `switch-statement.html` web page in your web browser with the console
    window open. The following are some sample results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Let's use the `IJKL` keys to perform the same tasks. We'll use the `I` key for
    up, the `J` key for left, the `K` key for right, and the `M` key for down.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Edit the `switch-statement.js` document, include the following bolded lines
    and save it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'First, add the new key letters:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the case statements for each:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When case statements are not followed by a break, the next case statement's
    code is also processed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Reload the `switch-statement.html` web page in your web browser with the console
    window open. The following are some sample results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The simulated code does not generate any keys that are not matched by the `case`
    statements. If there were, the entire `switch` statement is skipped. The `switch`
    statement can handle other cases by using the `default` statement.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `switch-statement.js` document, include the following bolded lines,
    and then save it. First, let''s add a few test characters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, let''s add the `default` statement:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reload the `switch-statement.html` web page in your web browser with the console
    window open. Repeat this until you see a result indicating an invalid key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this exercise, if the user pressed a wrong key, nothing would happen, which
    is often the case with game consoles.
  prefs: []
  type: TYPE_NORMAL
- en: Loop Statements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Loop code blocks are also called iterative blocks. They are designed to continue
    processing the code in their blocks until the `loop` statement expression becomes
    false. Iteration is a term that's used to indicate one time through the loop.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: A loop that does not terminate is called an infinite loop. A web browser may
    display a dialog with the option to terminate long-running loops.
  prefs: []
  type: TYPE_NORMAL
- en: for Statement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `for` statement repeats the code until the repeat expression becomes `false`.
    The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: 'The following flowchart depicts how the `for` statement works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9: for statement flowchart'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_03_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.9: for statement flowchart'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first time the `for` statement is reached, the `initialize` statement is
    processed. It normally sets a variable that is used in the repeat expression.
    The post expression changes a value in the repeat expression. After the last line
    of code in the loop is processed, the post expression is processed and then the
    repeat expression is processed. If the repeat expression remains true, the first
    statement in the loop block is processed again. The post expression often makes
    use of the arithmetic operators called increment and decrement and the assignment
    addition and subtraction operators. Some examples of more arithmetic operators
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.10: More arithmetic operators'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_03_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.10: More arithmetic operators'
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.09: Writing a for Loop and Testing It'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This exercise demonstrates using the `for` statement to create an increasing
    counter and decreasing counter. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `for-statement.html` document in your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the web developer console window using your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `for-statement.js` document in your code editor, replace all of its
    content with the following code, and then save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This example is an incrementing counter loop. The `initialize` statement declares
    the `i` variable and assigns it a value of `1`. This is the value it has on the
    first iteration of the loop. At the end of the loop, the repeat expression is
    evaluated and, if true, the line following the loop is processed. The post expression
    uses the increment operator to increase the `i 1` variable at the end of each
    loop.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Reload the `for-statement.html` web page in your web browser with the `console
    window` open. The following are the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the `for-statement.js` document using the following bolded lines and then
    save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This example illustrates a decreasing counter loop. In this example, the post
    expression uses the decrement operator. The repeat expression is changed to be
    true until the `i` variable values are `1` or less. The `initialize` statement
    declares the `i` variable and sets it to `5`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Reload the `for-statement.html` web page in your web browser with the console
    window open. The following are the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the `for-statement.js` document using the following bolded lines and then
    save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This example features the addition assignment operator is used to create a counter
    loop that increments by `2`, starting with `2` and ending with `10`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Reload the `for-statement.html` web page in your web browser with the console
    window open. The following are the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `for` loop is the workhorse for repeating code for a counted number of iterations.
    You will find greater use for it by iterating through arrays.
  prefs: []
  type: TYPE_NORMAL
- en: do...while Statement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `do...while` statement is a loop that executes code until the repeat expression
    value becomes false. The repeat expression is evaluated after all the statements
    have been processed, resulting in the guarantee that they are processed once.
    The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: A semicolon needs to be at the end of the `while` line if you are using it elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the flowchart for the `do…while` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.11: do...while statement flowchart'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_03_11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.11: do...while statement flowchart'
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.10: Writing a do...while Loop and Testing It'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will use the `do…while` loop to simulate iterating the
    roll of two dice until they have the same value. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `do-while-statements.html` document in your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the web developer console window using your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `do-while-statements.js` document in your code editor, replace all
    of its content with the following code, and then save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The second and third lines each compute a random number from `1` to `6` and
    store it in a variable. Those variables are displayed on the third line. These
    lines are always executed once. The `while` condition is true if the values of
    the `die1` and `die2` variables are not equal. If the values are equal, the expression
    is false and the loop repeats. If the values are not equal, any statements that
    follow the `do…while` loop are processed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run a few tests by reloading the `do-while-statements.html` web page in your
    web browser with the `console window` open. Your results will differ due to the
    random values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is an example result of more than one iteration:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following example shows the results of a single iteration. `do…while` loop
    statements are always processed one at a time:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the `do-while-statements.js` document so that it includes the following
    bolded lines and then save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first line, `let iterations`, is declaring a variable named iterations and
    assigning it to `0`. Then, in the `do…while` loop, the iterations variable, `iterations++`,
    is incremented by `1`. After the loop, the matched value and the iterations are
    displayed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run a few tests by reloading the `do-while-statements.html` web page in your
    web browser with the console window open. Your results will differ due to the
    random values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following example is the result of more than one iteration:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following example is the result of a single iteration:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: while Statement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `while` statement is a loop that executes code if the repeat expression
    is `true/false`. The repeat expression is evaluated before any code is executed,
    so there is the possibility that no code is processed if it is `false` the first
    time round. The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: 'The `while` statement flow is illustrated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.12: Code statements in the while block'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_03_12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.12: Code statements in the while block'
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.11: Writing a while Loop and Testing It'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will use the `while` loop to simulate how many dice rolls
    it takes to roll an even number. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `while-statement.html` document in your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the web developer console window using your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `while-statement.js` document in your code editor, replace all of
    its content with the following code, and then save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is just the initial shell for a `while` loop that repeats 10 times. The
    `while` loop's repeat expression is true if the `iterations` variable is below
    the value of `10`. The first time the expression is evaluated, the `iterations`
    variable is `0`. Inside the `while` loop, the `iterations` variable is incremented
    by `1` on the first line and will increase from `0` to `9` on each iteration of
    the loop.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Reload the `while-statement.html` web page in your web browser with the `console
    window` open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The results show the `iterations` variable increasing from `0` to `9` for `10`
    iterations:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the `while-statement.js` document using the following bolded lines and
    then save it. This adds the line to show a dice roll for each iteration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Reload the `while-statement.html` web page in your web browser with the console
    window open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see a list of 10 dice values. Your values will differ:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Edit the `while-statement.js` document using the following bolded lines and
    then save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This adds an `if` block to test for an even number of the dice roll. If `true`,
    the `break` statement terminates the `while` loop and the line following it is
    processed. The two lines following the `while` loop display how many iterations
    occurred and the value of the dice roll for that iteration:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run a few tests by reloading the `while-statement.html` web page in your web
    browser with the console window open:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `while-loop` use a Boolean expression to determine whether any iterations
    of the code it contains occurred. In this case, if the iterations variable was
    greater than 10, no iterations would have occurred.
  prefs: []
  type: TYPE_NORMAL
- en: for...in Statement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `for...in` statement allows us to iterate over an object data type. The
    variable in the `for` expression holds one of the names of the name-value pairs
    of the object, which are the names of the properties and methods of the object.
    The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: You can declare the variable with `const`, `var`, or `let`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.12: Writing a for...in Loop and Testing It'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This exercise applies the for...in loop to the ready-made location object and
    to a programmer-created object. You can access object names and values by using
    them. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `for-in-statement.html` document in your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the web developer console window using your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `for-in-statement.js` document in your code editor, replace all of
    its content with the following code, and then save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This iterates the web browser-created `location` object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Reload the `for-in-statement.html` web page in your web browser with the console
    window open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following output shows the names of all the `location` object''s properties
    and methods:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the `for-in-statement.js` document, add the following bolded text, and
    then save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will add the value of the property or method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Reload the `for-in-statement.html` web page in your web browser with the console
    window open. The values may differ, assuming the web page was opened from a local
    file folder and not using http or https:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'pathname : /PATH_TO/for-in-statement.html'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the `for-in-statement.js` document, replace it with the following code,
    and then save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Below that, add the following code so that we can iterate through the object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Reload the `for-in-statement.html` web page in your web browser with the console
    window open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is an example of the output in the console window:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Looping through the methods and properties of objects can be helpful when the
    code depends on a specific property or name that needs to be present for it to
    work.
  prefs: []
  type: TYPE_NORMAL
- en: for...of Statement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `for...of` statement focuses on iterable objects. Not all objects are iterable.
    Although we will not cover how to create our own iterable objects, there are some
    ready-made iterable objects that you may find the `for∙∙∙of` block useful for.
    The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: You can declare the variable with `const`, `var`, or `let`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3.13: Writing a for...of Loop and Testing It'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This exercise uses the `for...of` statement, which is designed for iterable
    objects. You will learn how some objects may not be iterable objects and generate
    errors. For iterable objects, arrays and strings are used. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `for-of-statement.html` document in your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the web developer console window using your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `for-of-statement.js` document in your code editor, replace all of
    its content with the following code, and then save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Below that, add the following code so that we can iterate through the object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Reload the `for-of-statement.html` web page in your web browser with the console
    window open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An error will occur. We need to code the object so that it''s iterable for
    it to work; however, we are not learning how to do that at this point:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Edit the `for-of-statement.js` document in your code editor, replace all of
    its content with the following code, and then save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A string turns out to be iterable:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reload the `for-of-statement.html` web page in your web browser with the console
    window open:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Edit the `for-of-statement.js` document in your code editor, make the changes
    shown in bold in the following code, and then save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A string turns out to be iterable:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reload the `for-of-statement.html` web page in your web browser with the console
    window open. You will get the same results. The advantage of the `for of` loop
    is that it is more streamlined:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Edit the `for-of-statement.js` document in your code editor, replace all of
    its content with the following code, and then save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An array is iterable:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reload the `for-of-statement.html` web page in your web browser with the `console`
    window open:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Edit the `for-of-statement.js` document in your code editor, make the changes
    shown in bold in the following code, and then save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An array is iterable:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reload the `for-of-statement.html` web page in your web browser with the console
    window open. You will get the same results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Looping through the methods and properties of objects can be helpful when the
    code depends on a specific property or name that needs to be present for it to
    work.
  prefs: []
  type: TYPE_NORMAL
- en: continue Statement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `continue` statement stops execution inside a loop or a labeled loop for
    the current iteration and starts the execution of the next loop iteration. The
    `loop` statements then determine whether another iteration should occur. The syntax
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: The second syntax is for use within a labeled statement block. We will learn
    more about labeled statements later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Labeled Statement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `Labeled` statement is used to create loop flows and conditional flows.
    It names either `block` statements or `loop` statements. The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: When a `loop` statement is named, the statements are processed until a `break`
    statement or `continue` statement is encountered inside the block that references
    the label.
  prefs: []
  type: TYPE_NORMAL
- en: When a `break` statement is encountered, the program flow continues on the line
    after the labeled statement block referenced by the `break` statement. If a `continue`
    statement is encountered, the program flow continues on the first line of the
    block referenced by the `continue` statement. A `continue` statement requires
    the labeled statement to be a loop. Both `break` statements and `continue` statements
    must appear within the labeled statement block that they reference. They cannot
    appear outside the labeled statement block that they reference. They can appear
    in nested labeled blocks and reference outer labeled blocks. Labeled statements
    are less commonly used because they are prone to creating confusing or difficult
    to follow program flow.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is good practice to avoid or find ways to eliminate all labeled statements
    from code. Conditional statements and dividing code into functions or object methods
    are alternatives to labeled statements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at an example of using a labeled loop statement. The loop
    labels the `for` statement, which runs 10 iterations. Each iteration generates
    a random number from `1 to 12`. If the number is even, the `continue` statement
    starts the beginning of the `for` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code snippet is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: 'The label can be eliminated with a better use of the `if` statement to achieve
    the same result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is the same, but with different values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: Writing and Invoking Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Functions are the basic building blocks when it comes to writing JavaScript
    programs. A function is one or more statements that can optionally receive data
    input and provide data output. The statements in a function are not used until
    the function is invoked. Invoking a function is also known as calling the function.
  prefs: []
  type: TYPE_NORMAL
- en: Defining Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JavaScript offers a few ways to define a function. We are going to look at function
    declarations, function expressions, and arrow function expressions as ways to
    define a function.
  prefs: []
  type: TYPE_NORMAL
- en: Function Declaration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can define a function as a statement. This is called a function definition
    or declaration. The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: It starts a line of code with the function keyword. It is followed by a name.
    The name is how the function will appear in other code. The list of comma-separated
    parameters are names for the input values to a function. Parameters are essentially
    variables within the function. They are enclosed in parentheses. The block statement
    then contains the code. Once a function is declared, it can be invoked either
    on a line of code by itself or within an expression. In the case of its use in
    an expression, the function typically returns data.
  prefs: []
  type: TYPE_NORMAL
- en: When a JavaScript function is declared as a statement, it can be invoked by
    statements that appear before it. This is called hoisting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at an example of defining and invoking a function declaration.
    This example has no parameters and returns the value of a single dice roll:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: 'Since it returns a value, we can use it as an expression. Here is an example
    where it is used in an addition expression to get the roll value of two dice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: 'We could improve the function so that it returns the value of a set number
    of dice by creating a parameter. Here, the parameter is the number of dice being
    rolled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: 'The revised expression to invoke for simulating a two-dice roll just requires
    us to pass the parameter values. In this example, the parameter is expressed as
    a number literal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, the parameter is expressed as a variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters can be optional, otherwise the wrong data can be passed. So, functions
    often have code that validates the parameter or provides a default value. In this
    example, the argument of the JavaScript built-in function known as `parseInt`
    is used to convert the argument into an integer. Its results are tested using
    the `isNaN` built-in function, which returns `true` or `false` if the number is
    not a number or the number is less than `1`. If any of that is true, the argument
    value is set to `1`. If not, the supplied number is passed through:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the function always returns a roll of one dice, regardless of an incorrect
    parameter or no parameter. In both of these examples, the value of the roll of
    one dice is returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: 'Exercise 3.14: Writing a Function as a Statement and Invoking It'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This exercise will define a function as a statement and then use it. The function
    we will create will accept one parameter and return an array. If the parameter
    can be validated as a number, then each item in the array has one digit from the
    number starting with the `0` index item holding the digit for the ones place value,
    the 1 index item holding the digit for the `tens` place value, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the `log` method of the `console` object in this exercise. Remember
    that a method is a function that belongs to an object, so it can have parameters.
    The `log` method takes an unlimited number of parameters. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `function-declare.html` document in your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the web developer console window using your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `function-declare.js` document in your code editor, replace all of
    its content with the following code, and then save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This declares the function. Its name is `getDigitsOfNumber`. It has one parameter
    named `num`. It returns the `digits` array:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Reload the `function-declare.html` web page in your web browser with the console
    window open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is no output because the function was not invoked.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Edit the `function-declare.js` document, add the following bolded text to the
    end of the file, and then save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this example, the function is being expressed and is not being invoked.
    Invoking a function requires to append parentheses around the function''s name:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Reload the `function-declare.html` web page in your web browser with the console
    window open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The function is treated as data and is displayed:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Edit the `function-declare.js` document, update it using the following bolded
    text at the end of the file, and then save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This invokes the function in an assignment statement to create the `test456`
    variable:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will add the value of the property or method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Reload the `function-declare.html` web page in your web browser with the console
    window open. The first line of output shows the `num` parameter being displayed
    when the function was invoked. The second output line is the `test456` variable
    being set to the empty array that was returned by the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the `function-declare.js` document, add the following bolded text to the
    beginning of the file, and then save it. This shows invoking the function before
    it is declared. This demonstrates hoisting:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reload the `function-declare.html` web page in your web browser with the console
    window open. These are the results for the invocations of the function before
    and after it was declared:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Edit the `function-declare.js` document, update it using the following bolded
    text, and then save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The second line in the function converts any negative numbers into positive
    numbers and truncates any decimals. The `if` statement tests to assure that the
    `num` parameter contains a number. The `while` loop repeats until the `num` parameter
    becomes zero. Inside the loop, the ones place value is added to the `digits` array
    by dividing by 10 and using the remainder. Then, the ones place value is stripped
    from the `num` parameter:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Reload the `function-declare.html` web page in your web browser with the console
    window open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Each array shows the test value digits split into arrays. The zero-array index
    has the ones place value, the one array index has the tens place value, and the
    two-index position has the hundreds place value:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Edit the `function-declare.js` document, add the following bolded text to the
    end of the file, and then save it. You can run various tests on your functions
    based on the possible inputs and expected outputs. These are a few for you to
    try.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An intermediate variable is not used for these new lines. A function can be
    used wherever an expression can be used. In these additions, it is used as an
    expression for a `log` method parameter:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Reload the `function-declare.html` web page in your web browser with the console
    window open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here are the outputs. The expected results should be an array with all the
    digits or an empty array. Evaluate each output and verify that this was the result.
    If the output was an empty array, determine why:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this exercise, we defined a function as a statement that accepts one parameter
    and return an array. We used the `log` method of the `console` object in this
    exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Function Expression
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this variation, you can define a function as part of an expression. There
    is no name for the function. However, because a function is a data type, it can
    be assigned to a variable. The variable can then be used to invoke the function.
    The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: The syntax is the same, except no function name is needed. A JavaScript function
    declared as an expression cannot be invoked by statements that appear before it.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of defining and invoking a function expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'This example shows the function as part of an assignment expression. The right-hand
    side of the assignment is the function without a name. The left-hand side is the
    variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, the variable can be used to invoke the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: 'Exercise 3.15: Writing a Function as an Expression and Invoking It'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This exercise defines a function as an expression and then uses it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The function returns a single random character from a string. The string is
    the function''s only parameter. If the parameter is not a string or is an empty
    string, then an empty string is returned. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `function-expression.html` document in your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the web developer console window using your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `function-expression.js` document in your code editor, replace all
    of its contents with the following code, and then save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The function, as a literal value, is assigned to the `getRandomStringCharacter`
    variable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then, the variable is displayed in the console. Remember, a function is not
    invoked unless you include parentheses:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reload the `function-expression.html` web page in your web browser with the
    console window open. The actual function is displayed but not invoked, as expected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Edit the `function-expression.js` document, update the lines with the following
    bolded text, and then save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we will invoke the function:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Reload the `function-expression.html` web page in your web browser with the
    console window open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `console.log` statement in the function displays the `source` parameter
    value for each invocation. No parameter was passed in the first invocation. The
    `source` parameter data type is undefined:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Edit the `function-expression.js` document, add the following bolded text above
    the function, and then save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we will invoke the function before it is defined:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Reload the `function-expression.html` web page in your web browser with the
    console window open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see an error in the console. Functions that are defined as expressions
    cannot be invoked before they are defined:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Edit the `function-expression.js` document, update the bolded text, and then
    save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can remove the line that invokes the function before it is defined and finish
    coding the function. The `if` block tests whether the source parameter is not
    undefined and contains characters. In the `if` block, the `Math.floor(Math.random()
    * source.length` expression finds a random character position as a value from
    0 to the length of the `source` parameter minus 1\. The `charAt` string method
    extracts the character at that position it will be returned at:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'These lines are a set of tests of various source values. The first passes no
    parameter. The second, third, and fourth pass a string. The fifth is passing a
    number and the last is passing a Boolean:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Reload the `function-expression.html` web page in your web browser with the
    `console` window open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The function''s output expects a random character in the source parameter.
    If it is not empty, it will return a string and will return an empty string for
    all other values. Reload the web page a few times to get different test results:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE215]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Arrow Function Expression
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Arrow functions were introduced in ES6\. They are defined similarly in an expression,
    such as when defining function expressions. They offer syntactically compact alternatives
    over defining a function expression. There is nothing different in how they are
    invoked. The `=>` symbol is the telltale sign of an arrow function being defined.
    Also, the `function` keyword is not used. The concise variation, without a function
    body, can return an expression with or without a `return` statement. This differs
    from a function expression, which requires the `return` statement to return a
    value. The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameter parentheses are optional when a single parameter is named:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: 'Parentheses are required if there is no parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: JavaScript arrow functions cannot be invoked by statements that appear before
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Defining and Invoking an Arrow Function Expression
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This example shows a single statement arrow function with no parameters. The
    right-hand side of the assignment is the function without a name. The left-hand
    side is the variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, the variable can be used to invoke the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: 'This example shows a multiple statement arrow function with one parameter.
    The right-hand side of the assignment is the function without a name. The left-hand
    side is the variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output of invoking and passing a parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: 'Exercise 3.16: Writing an Arrow Function and Invoking It'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This exercise will show you how to convert a function expression into an arrow
    function. The JavaScript file we''ll be using already contains the function. Let''s
    get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `function-arrow.html` document in your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the web developer `console window` using your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reload the `function-arrow.html` web page in your web browser with the `console
    window` open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first, second from last, and last results are an empty string. The second,
    third, and fourth results show a random character from the string:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE223]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `function-arrow.js` document in your code editor, make changes to
    the bolded lines, and then save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE224]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Reload the `function-arrow.html` web page in your web browser with the `console
    window` open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The results are the same. The first, second from last, and last results are
    an empty string. The second, third, and fourth results show a random character
    from the string:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE225]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Reacting to User Input Events and Updating the DOM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript is used to interact with the DOM. This entails responding to DOM-generated
    events such as a user clicking a button. It also entails updating content and
    HTML elements, such as displaying a notification message.
  prefs: []
  type: TYPE_NORMAL
- en: Elements in the DOM are objects. The `document` object that's provided by JavaScript
    contains the element objects. It also contains methods for accessing the elements
    and updating them.
  prefs: []
  type: TYPE_NORMAL
- en: The DOM HTML Element Object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The HTML elements are represented as objects. Since they are objects, there
    are methods and properties we can use for them. These properties and methods are
    inherited from a hierarchy of DOM objects that are provided by the web browser,
    starting with an object called `Node`. For example, the `ol` element shares methods
    and properties from the following hierarchy of DOM objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: 'It is not necessary to understand all the objects involved, but it is good
    to be aware of them. It''s better to learn about some of the properties and methods
    that are derived from all of those objects. The following are a few of the properties
    and methods that are inherited from a hierarchy of DOM elements above it:'
  prefs: []
  type: TYPE_NORMAL
- en: '`innerHTML`: With the source element, this is the HTML and content contained
    in an element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`innerText`: With the source HTMLElement, this is the rendered text of an element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`addEventListener(`…`)`: With the source element event target, this is used
    to register a function to respond to events such as a user clicking on the element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`appendChild(`…`)`: With the source node, this adds a node to a parent node;
    for example, to add an `li` element to the end of an `ol` element, or to add a
    `p` element to the end of a `div` element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting Access to Elements in the DOM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are `document` objects that contain methods that we can use to
    get one or more `HTMLElemen`t objects from the DOM:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getElementById(element-id)`: The element ID is the ID attribute of the element.
    Returned as an HTMLElement object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getElementsByTagName(element-name)`: The element name is the static name of
    HTML elements such as `body, div, p, footer, ol, and ul`. This returns a `NodeList`
    object. A `NodeList` object is similar to an array of objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getElementsByClassName(css-class-name)`: The css class name is the class attribute
    of the elements. This returns a `NodeList` object. A `NodeList` object is similar
    to an array of objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`querySelector(selectors)`: The selectors are like the selectors that are used
    in CSS. This returns an HTMLElement object for the first element that''s matched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`querySelectorAll(selectors)`: The selectors are like the selectors that are
    used in CSS. This returns a `NodeList` object. A `NodeList` object is similar
    to an array of objects for each element that''s matched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`createElement(tag name)`: This creates an `HTMLElement` object for the HTML
    tag name that''s supplied.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`createTextNode(data)`: This creates a `Text` object that can be placed inside
    an HTML element, for example, inside an `h1` or a `p` element. The data argument
    is a string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is an example of the `document` object''s `getElementById` method
    being used to access a DOM element. This creates an object from an element DOM
    that has the `id` attribute of `user-id`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: 'This is an example of the `document` object''s `getElementByTagName` method
    being used to access DOM elements. This creates a collection of objects representing
    all the `div` elements in the document. Further steps are needed to access each
    element, such as a loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: 'This creates a collection of objects representing all the elements that use
    the `notice` class in the document. Further steps are needed to access each element,
    such as a loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: 'This is an example of the `document` object''s `getElementByClassName` method
    being used to access DOM elements. This creates a collection of objects representing
    all the elements that use the `notice` class in the document. Further steps are
    needed to access each element, such as a loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: Creating Elements and Content in the DOM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You may want JavaScript to add HTML elements and content to a web page. This
    is done by updating the DOM. The `document` object has two methods that are useful
    for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`createElement(tag name)`: Creates an `HTMLElement` object for the HTML tag
    name that''s supplied.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`createTextNode(data)`: Creates a text object that can be placed inside an
    HTML element, for example, inside an `h1` or a `p` element. The data argument
    is a string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is an example of the `document` object''s `createElement` method
    being used to create an `li` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is an example of the `document` object''s `createTextNode` method
    being used to create a `Milk Moon` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: 'Putting this all together, we can append elements and text nodes to the DOM.
    Consider the following HTML list of names for the November full moons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: 'Suppose we want to append another `li` element to the Milk Moon. To do that,
    we use the `document` object''s `createElement` method to create an `li` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: 'The `createElement` method returns an `HTMLElement` object. It provides the
    `appendChild` method, which we can use in this instance. For the `appendChild`
    method argument, the `document` object''s `createTextNode` method can supply the
    required text node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting DOM is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take this a bit further and assume that we have a list of full moon
    names in an array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we want to use the array to populate a `ul` element that has the `id`
    attribute of `full-moons`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: 'First, you may want to remove the existing `li` elements from the `u`l element.
    You can do that by using the `document.getElementById` method and the `innerHTML`
    property of the element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we can loop through the array, appending `li` elements to the moon names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting DOM is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: DOM Events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Events are messages that you can provide to code so that it can handle it;
    for example, the user clicking a button on an HTML page. The document model objects
    use the `addEventListener` method to add your code so that it is processed when
    the event occurs. The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: The target is an object that has the `addEventListener` method. Objects representing
    elements in the DOM have this method.
  prefs: []
  type: TYPE_NORMAL
- en: The event type parameter is a predefined name for the event. For example, `click`
    is the name for a mouse click event. The listener is an object that has the ability
    to "listen" to events. Functions are objects that can "listen" to events. Functions
    that are used as event listeners have one parameter, which is an `Event` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the `addEventListener` method for a click event that uses a function
    literal can be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: 'Exercise 3.17: Working with DOM Manipulation and Events'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This exercise will accept an input value from a web page that aims to guess
    a number from 1 to 10\. A button is used to check the input value against a random
    number that''s generated from 1 to 10\. Depending on whether there''s a match,
    the `display` property of the other elements on the web page is toggled to hide
    or show the element. Also, the number that''s generated is displayed on the page.
    Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `number-guess.html` document in your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the web developer console window using your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, we can start with the web browser `document` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type the items on the lines beginning with the `>` symbol. The console window
    will show a response on the lines beginning with the `<·` symbol.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `number-guess.html` document in your code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s review some of the elements that will be accessed in JavaScript. First
    is the `input` element, which is used for entering the guess value. Note that
    its `id` attribute value is `number-guessed`. We are going to use the `id` attributes
    to get access to all the elements we use in JavaScript:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE244]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next is the `button` element. The `id` attribute is `test-button`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE245]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next is the `p` element. The `id` attribute is `results-msg`. This is the
    container for all the result messages. It has a `class` value of `hidden`. The
    `number-guess.css` file has the `display` property set to `none` for the `hidden`
    class:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE246]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When the web page loads, this `p` element is not shown. The JavaScript will
    either hide or unhide this element:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE247]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `p` element, there are two `span` elements that contain the message
    for a guess that either matches or does not. They also use the `hidden` class.
    This is because, if their parent element is unhidden, these remain hidden until
    the code determines which to unhide. Each `span` element has an `id` attribute.
    The JavaScript will either hide or unhide each of these `span` elements:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE248]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'One more element inside the `p` element is a `span` element to show the number
    to guess. The JavaScript will update this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE249]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `number-guess.js` document in your code editor, replace all of its
    content with the following code, and then save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first line creates an object for the element with `idtest-button` using
    the `document` object's `getElementByID` method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The second line adds the function named `testMatch` as the listener for the
    click event on the button.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following is the `testMatch` function and a message to the console so that
    we can test it:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE250]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Reload the `number-guess.html` web page in your web browser with the console
    window open and click the `Test Your Guess` button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see the following message in the console window:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE251]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Edit the `number-guess.js` document, update it using the bolded text, and then
    save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the top of the file, all the elements we need to access in the HTML have
    been assigned to a variable:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE252]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the DOM interface to get the `value` property from the input element''s
    `guessInputEle` object. In case the user did not enter an integer, the `parseInt`
    JavaScript built-in function will flag that as not a number. Then, the `if` statement
    expression is true only if the number is between 1 and 10 inclusive:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE253]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `if` statement block, the first step is to get a random integer from
    `1` to `10`. Then, we use an `if...else` statement block if the input number matches
    the generated number.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For now, we can test this with outputs to the console window:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE254]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Reload the `number-guess.html` web page in your web browser with the console
    window open, enter an integer from `1` to `10`, and click the `Test Your Guess`
    button a few times.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here are two test results:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE255]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Try invalid values such as letters. There should be no output to the console.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Edit the `number-guess.js` document, update it using the bolded text, and then
    save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we can add in the steps for updating the DOM elements with the results.
    To start, all the result elements are hidden when the button is clicked:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE256]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'First, the hidden container for the message elements is displayed. Then, depending
    on whether there is a match or not, the element showing that result is displayed.
    Finally, the number to guess is updated in the element that was created for it:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE257]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Reload the `number-guess.html` web page in your web browser with the console
    window open and repeatedly click the `Test Your Guess` button with a value entered.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The result of a matching output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.13: Matched value'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_03_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.13: Matched value'
  prefs: []
  type: TYPE_NORMAL
- en: 'The result of a non-matching output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.14: Non matched value'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_03_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.14: Non matched value'
  prefs: []
  type: TYPE_NORMAL
- en: 'The result of an invalid entry output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.15: Invalid entry'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_03_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.15: Invalid entry'
  prefs: []
  type: TYPE_NORMAL
- en: Debugging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JavaScript programs may not work as intended. When that happens, it is usually
    called a bug.
  prefs: []
  type: TYPE_NORMAL
- en: Silent Fail
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The people viewing your web page will not see any error message unless they
    know about the web developer console. This is called a silent fail approach. Silent
    fails keep web pages free of messages that would be cryptic to visitors. However,
    visitors may be puzzled when they try to interact with the web page and nothing
    happens and there are no messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two general categories of bugs: syntax and logic:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Syntax: A syntax bug is a malformed JavaScript code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Logic: A logic error occurs when code that is syntactically correct does not
    perform as intended.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Syntax Bugs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Your console window will show you syntax errors so that they are easy to find
    and correct. Here is an example that shows an error at line 25 of the JavaScript
    file named `convert-celsius-fahrenheit.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.16: Syntax errors in the console window'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_03_16.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.16: Syntax errors in the console window'
  prefs: []
  type: TYPE_NORMAL
- en: 'The error code has a description and a link to the line number in the file.
    When you click that link, the source code file is opened in a window and the line
    that''s involved is brought into view, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.17: Source code for the syntax error'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_03_17.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.17: Source code for the syntax error'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, the error reports an `Unexpected token else`. Now, you need to
    look at the code to find out where the syntax is malformed. In this case, it is
    a missing `{` following the `if` statement on line 21\.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can fix the syntax error in the source file and then reload the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.18: Syntax error at load time'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_03_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.18: Syntax error at load time'
  prefs: []
  type: TYPE_NORMAL
- en: The syntax error appeared at load time. This means that when the JavaScript
    file was loaded by the web browser, the syntax error was revealed.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, a syntax error can appear at runtime. This happens while the code
    is executing, which does not need to happen when it''s loaded, such as with a
    button click, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.19: Code executed on the web page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_03_19.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.19: Code executed on the web page'
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of where the code is executed after the user clicks the Convert
    button on the web page, the user sees no error. Nothing appears to happen when
    the button is clicked. If the web browser console window is open, we will see
    the offending syntax error.
  prefs: []
  type: TYPE_NORMAL
- en: The error message also includes a call stack. A call stack is a list of functions
    and methods that were called to reach the line that was reported in the error
    message. This call stack shows the `getFahrenheit` function containing the failed
    line. Then, it shows that the function was called inside the `convertButtonClickEventHandler`
    method that was assigned to an `HTMLButtonElement` object. Notice that each item
    in the call stack will branch you to a line in the file.
  prefs: []
  type: TYPE_NORMAL
- en: We start at the link that is part of the error message, which opens the source
    view window and takes you to line 38\. The incorrect line is followed by a comment
    showing the correct line. You can see that it is a simple omission of the assignment
    operator. The code line now has to be fixed in the source file and then reloaded.
    Then, the `Convert` button is clicked again to see whether the syntax error has
    been fixed.
  prefs: []
  type: TYPE_NORMAL
- en: Logic Bugs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A logic error occurs when code that is syntactically correct does not perform
    as intended. Logic errors often occur due to data and expressions not using or
    computing the correct values.
  prefs: []
  type: TYPE_NORMAL
- en: When a JavaScript program encounters a logic bug, it stops executing the remaining
    code statements. There is often no error message to pursue.
  prefs: []
  type: TYPE_NORMAL
- en: This makes logic errors more challenging to resolve and you want to use debugging
    tools to aid in their resolution.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fixing bugs is called debugging. Debugging requires tools, skills, and techniques.
    It usually involves correcting the source code.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `console.log` method and showing the values in the console window
    is one tool we can use. This allows you to view values at certain points in the
    program to see whether they are the expected values. One of the drawbacks of this
    approach is that this requires you to put the `console.log` method in your source
    code, which ultimately needs to be removed as a best practice. Another issue is
    that arguments to the `console.log` methods are potentially bugs themselves.
  prefs: []
  type: TYPE_NORMAL
- en: The other alternative is to use a debugger. The top desktop web browsers have
    a JavaScript debugger.
  prefs: []
  type: TYPE_NORMAL
- en: Debuggers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To help resolve logical errors, you usually need a debugger. A debugger is
    a tool that lets you pause a program, follow each step, and examine the data values
    at those steps. Most desktop web browsers have a debugger built into its web developer
    view. Here is an example of the debugger for the Chrome web browser''s developer
    tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.20: Setting breaking points for the Chrome web browser'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_03_20.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.20: Setting breaking points for the Chrome web browser'
  prefs: []
  type: TYPE_NORMAL
- en: One of its most important features is setting breakpoints. A breakpoint pauses
    the code's execution. In this example, there is a breakpoint at line 34\. It is
    shown not only in a `Breakpoints` panel but also in the source window, with a
    symbol on the line number. The symbol on the line number is actually a toggle
    to set or unset breakpoints. The `Breakpoints` panel is handy when you have multiple
    breakpoints spread out in the code and you need to enable or disable them without
    having to find the code line in the source window.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the code execution hits the breakpoint, then you can inspect the expressions
    by hovering a mouse pointer over the code. There is also a window that keeps all
    the data values organized, ready for inspection. For example, the `guessedNumber`
    variable is shown as `5` in two places in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.21: Data value organized in the debugger tool'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_03_21.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.21: Data value organized in the debugger tool'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the execution has been paused, you can control the execution of the code
    using the debugger menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.22: Debugger Menu'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_03_22.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.22: Debugger Menu'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first four choices are a good place to start:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Resume**: The first choice restarts the JavaScript code''s execution until
    it ends or reaches another breakpoint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step Over**: The second choice will not step into a function, but into all
    the code in a function it calls is executed. This is useful because there may
    not only be many functions you have written but also third-party functions that
    have been written that do not require a step-by-step investigation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step Into**: The third choice does step into a function where you can proceed.
    You can think of this as executing one line at a time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step Out**: The fourth choice is a way to step out of a function to the line
    that called it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Activity 3.01: The To-Do List Shuffle Program'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This activity will help you build a `todo` list web page. We will use JavaScript
    to load the list and shuffle the list after it has been loaded. A button labeled
    Shuffle has been added to the HTML file and the `ol` element has been assigned
    the ID, `todo-list`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The high-level steps for the activity are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the `activity.js` file to write your code. This contains coding hint comments
    you may use if you desire. It also includes a function named `getNewShuffledArray`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to load the `li` element `todo` items from JavaScript and then allow
    the user to randomize the list. You may approach the activity in two parts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `todo` list items and create a function that updates the HTML DOM list items
    using an `ol` element and an array as parameters. The function will remove the
    previous `li` elements and iterate through the array to add new `li` elements
    with the values in the array parameter. Test before proceeding. You can find the
    HTML file at [https://packt.live/2XcP1GU](https://packt.live/2XcP1GU)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In `todo` items and your previous function to update the `ol` element's list
    items. It also will use the `getNewShuffledArray` function to randomly shuffle
    an array and return the shuffled array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The output of this activity is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.23: The todo list Shuffle program'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_03_23.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.23: The To-Do list Shuffle program'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The solution to this activity can be found on page 715.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript programming is a problem-solving endeavor. It relies heavily on data
    and data expressions. At the start of this chapter, we mentioned that data could
    be people's names, temperature, image dimensions, the amount of disk storage,
    and total likes on a discussion group post. Data can be values for a user interface,
    such as screen coordinates, sizes, scroll values, colors, and fonts.
  prefs: []
  type: TYPE_NORMAL
- en: A JavaScript program is a series of steps that use data. A program starts with
    an event. An event could be when a web browser finishes loading the web page,
    a mouse event, such as a click or rolling over a spot on the screen, such as a
    button or image, or when some data is received from a web server that was requested
    by JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Once the program begins, it executes the code statements sequentially and is
    directed by flow control statements such as `if`, `switch`, `for`, and `while`.
  prefs: []
  type: TYPE_NORMAL
- en: The code is organized into units called functions. Functions contain code that
    may need to be repeated in more than one part of a program, but with different
    data and different results. Functions can take data as input values and return
    a result; for example, Fahrenheit as input and Celsius as output.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript programs for web pages generally deal with the DOM. The DOM is just
    a large object that's created by the web browser. It is made up of all the data
    and functions
  prefs: []
  type: TYPE_NORMAL
- en: Before you try to solve every coding problem, you may find that other programmers
    have already solved many common problems and make their code available for you
    to use in the form of libraries and frameworks. For example, you could use JavaScript
    and the DOM to write code to animate user interface elements by sliding or fading
    them in and out of view. However, if someone has already solved that coding problem,
    you may want to use their code. In the next chapter, we will look at some popular
    libraries and frameworks that solve a wide range of problems for a web page.
  prefs: []
  type: TYPE_NORMAL
