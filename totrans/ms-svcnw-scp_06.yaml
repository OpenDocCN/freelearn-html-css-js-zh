- en: Advanced Server-Side Scripting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be taking a look at the advanced side of server-side
    scripting. We will explore some more advanced methods and techniques that can
    be used on the server side, building upon what we learned in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will take a look at the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Script includes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scheduled jobs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Background scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Workflow scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Script actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced server script examples
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Script includes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Script includes are at the heart of scripting in ServiceNow, and are arguably
    the most commonly used when it comes to writing code. Script includes are used
    to hold classes of code, and for a lot of the backend script used by the ServiceNow
    platform.
  prefs: []
  type: TYPE_NORMAL
- en: When creating your script include, you first need to give it a name. This name
    will be important, as it will be used in other code to call the methods in your
    script include.
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that the name you choose for your script include does not contain spaces
    in it. It is best to use underscores to separate words in the name.
  prefs: []
  type: TYPE_NORMAL
- en: Once you enter a name for your script include, you will notice that the API
    Name and the script fields are populated. The API name is read-only, and given
    based upon the name of the application this script include is being created in,
    followed by the name of the script include itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'The script field is populated with some introductory script creating a class
    for this script include, taking into account the name of the script include. As
    an example, if we named our script include `script_utils`, we would be given the
    following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This gives us the basic code to create a script include class that can be called
    from the server side. One of the first questions to ask when creating a script
    include is whether the script will be called from the server side only, or from
    the client side. This is because if we are going to be calling the script include
    from the client side (for example, for an AJAX call), we need to tick the Client
    callable checkbox, and in doing this, you will also notice that the code changes,
    too.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our example, this will change the code to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This changed script allows the script include to inherit the `AbstractAjaxProcessor`.
    Without this, AJAX calls will not work, so it is important to remember this if
    the script include will be called on the client.
  prefs: []
  type: TYPE_NORMAL
- en: Although this is the starter code that ServiceNow provides for you, it is not
    necessary to create a class in a script include. You can also simply create a
    function to call in a script include when calling server-side script.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at a short example of how that can be done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This is a simple function that will just return the string of text, but can
    be called simply as a standalone function, rather than creating a whole class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now have a look at creating a script include with a class and methods.
    We can add as many methods as we like to our script include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Our `testMethod` method will return a string when called on the server side.
    To call it, we use the line of code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We can also assign this line of code to a variable or use it for a condition
    check if the method returns true or false.
  prefs: []
  type: TYPE_NORMAL
- en: Script includes can also call each other and methods contained within them.
    When building up the bulk processing of server-side script, it is usually best
    to consider script includes for the job. Looking at the existing script includes
    that come with the ServiceNow platform is a good way to enhance your knowledge
    of writing script includes.
  prefs: []
  type: TYPE_NORMAL
- en: Scheduled jobs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Scheduled jobs are a way of generating a report or record and automatically
    running a script. Creating a report or record is a configuration and does not
    require scripting. What we are interested in for scheduled jobs is the ability
    to automatically run a script.
  prefs: []
  type: TYPE_NORMAL
- en: A scheduled job is a helpful way to run a script at a time of your choosing.
    This can be an overnight job or a script that can run frequently, say, every hour.
    In my experience, running script out of hours is one of the main benefits and
    uses of a scheduled job. Common uses are preparing data for users first thing
    in the morning, or to remove old data.
  prefs: []
  type: TYPE_NORMAL
- en: When creating a scheduled job, we set the frequency of the scheduled job by
    using the run field. The different time options in this field give the developer
    different fields to fill in to schedule the script execution appropriately. If
    the On Demand option is picked, the script will only run if the Execute Now button
    is pressed.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the schedule, we can also add a condition to the scheduled job
    so that it will only run when the condition evaluates to true. If you check the
    Conditional checkbox, then an additional Condition field is displayed. For the
    script in this Condition field, the final expression of the code needs to evaluate
    to true or false.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at an example of a condition script for a scheduled job:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the example, we are checking if the current day is Sunday, and if so, we
    will not run the scheduled job script. The `getDayOfWeek` method gives us the
    day of the week, with one being Monday and seven being Sunday.
  prefs: []
  type: TYPE_NORMAL
- en: The second line of script above can give a syntax error saying that a semicolon
    is missing and an expression is seen when a function call or assignment was expected.
    Normally this would be valid, but for the condition field in a scheduled job we
    are expecting an expression and adding a semicolon here would cause the script
    to break.
  prefs: []
  type: TYPE_NORMAL
- en: Now let us look at the Run this script field. This is the field where we put
    the code that we would like to run at the scheduled time we have defined.
  prefs: []
  type: TYPE_NORMAL
- en: 'For an example, let us log that our code has run and that it is not a Sunday:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We can write any server-side script we like in this field to run at the specified
    time. We will look at a more advanced example later in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see what our scheduled job will look like if we set it to run daily
    at 1:00 a.m. in *Figure 6.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/62e598d5-721a-4ba5-8b41-948d9c466704.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.1: Scheduled job to check if the day is Sunday'
  prefs: []
  type: TYPE_NORMAL
- en: A scheduled job is a great way to run script-performing server-side tasks out
    of business hours.
  prefs: []
  type: TYPE_NORMAL
- en: Background scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Background scripts are server-side scripts that administrators can immediately
    run on the ServiceNow platform. A background script cannot be saved and does not
    exist as a record. However, they can be extremely useful for trialing scripts
    out and fixing one-off issues with an instance.
  prefs: []
  type: TYPE_NORMAL
- en: To start creating a background script, you simply need to select the Scripts
    - Background module in the System Definition application. This brings up a large
    box for the developer to write their code into. If you have administrator access
    and you cannot see the module, there is a system property that can be set that
    means an elevated privilege is required to access background scripts. If this
    is the case, this usually means you need the security_admin role to access background
    scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Because background scripts grant the ability to run any JavaScript on the platform,
    this module is often locked down more securely for security purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few choices and buttons that appear under the large script box
    for background scripts. These are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run script (button): Runs the script currently in the Run script box on the
    server side'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'in scope (drop down): Allows the background script to be run in a different
    scope outside of global, if required'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Execute in sandbox? (checkbox): Executes the script with sandbox restrictions;
    for example, data cannot be inserted, updated, or deleted'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cancel after 4 hours (checkbox): Check to cancel the script if it is still
    running after four hours'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s look at an example of a background script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the example, we are checking for all of the incidents that have the software
    category. In the background script, we are logging each incident we find so that
    we can review the list before we go ahead with the deletion. Once we are happy
    with the list that will be deleted, we will see in the log that we can remove
    the log and remove the comment lines, allowing the deletion to take place.
  prefs: []
  type: TYPE_NORMAL
- en: This type of example is useful when performing a large removal of records to
    gauge the impact before going ahead with the script.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at what the background script will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/73762321-666e-49c6-ba62-dd04a5487b8c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.2: Background script to log records for deletion'
  prefs: []
  type: TYPE_NORMAL
- en: Background scripts are very helpful for running script to check results before
    performing actions, and also to test parts of a script involved in a long process
    so the process does not need to be walked through each time to test the code.
  prefs: []
  type: TYPE_NORMAL
- en: Workflow scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Workflows use a number of activities to build up a process in ServiceNow. These
    activities can often be used on a basic level, without the need for scripting.
    However, to build a more advanced workflow, we can use code to enhance the workflows
    we build.
  prefs: []
  type: TYPE_NORMAL
- en: Scripts can appear in a number of workflow activities, including approvals and
    task creation. For approvals, it is possible to add users and groups to approval
    activities using script. In task creation, we can use script to set values on
    our task before it is created.
  prefs: []
  type: TYPE_NORMAL
- en: The main area for scripting in a workflow, though, is in the Run Script Workflow
    Activity. This activity allows the developer to run any server-side script they
    like at a point in the workflow. This can be used to manipulate records, kick
    off integrations, or perform other outcomes using scripts.
  prefs: []
  type: TYPE_NORMAL
- en: The other area of workflows in which you often come across scripts is in setting
    up approvals. A simple approval workflow activity will simply pick a user or group
    to approve, or perhaps the value of a particular field. However, if you require
    the selection of relevant approvals to be more complicated than this, then you
    may need to use some code.
  prefs: []
  type: TYPE_NORMAL
- en: With scripts, you can add extra elements to who will be selected to approve,
    for example, by checking attributes about the users approving, or the record being
    approved. It may be that if a record has a particular category, it is sent to
    a certain approval group, or that the approver of the record must have a certain
    role. This type of functionality is achievable with script and can cater for many
    other scenarios too.
  prefs: []
  type: TYPE_NORMAL
- en: The potential for building a complex approval system is huge, but be careful
    to make sure that what you create provides value and can be maintained.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us have a look at an example of a workflow script in a Run Script Workflow
    Activity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In the example, we are adding `URGENT` to the short description of the record
    if the priority is critical. We also have access to the current record in the
    workflow script, with the current record being the one from which the workflow
    launched.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us have a look at what this activity will look like, in *Figure 6.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3d7f4875-9f7c-4d35-9f77-4bf124e4c267.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.3: Workflow activity to update the short description based on priority'
  prefs: []
  type: TYPE_NORMAL
- en: Workflow script can be particularly handy for adding an extra layer of functionality
    to your workflows. Sometimes, when you look at the activities available, you cannot
    find one that will meet your requirements, and in this instance, scripting can
    be the solution.
  prefs: []
  type: TYPE_NORMAL
- en: Event management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Events that trigger different outcomes in an instance run in ServiceNow. An
    event can be invoked from any script on the server side. The main outcome from
    an event being triggered is either a notification or a script action. Notifications
    are usually emails, and we will take a look at script actions later on in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, to trigger an event, the event will need to be defined. To define
    an event, we can navigate to System Policy | Events | Registry and click on the
    New button. Upon doing this, we are given the form shown in *Figure 6.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9adebc8d-7c21-48ce-99d8-5cd58cc5415a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.4: New event form'
  prefs: []
  type: TYPE_NORMAL
- en: In the form, we need to give the event a name. Event names are usually words
    split by full stops and underscores, and if you look at the list of events, you
    will see the general format used for events. It is also good practice to fill
    in the table field for reference. The Fired by and Description fields are simple
    text fields, but it is a good idea to fill these in with details of when the event
    should be fired and how the event is fired. Then, the event can be used by others
    or its trigger point easily found by another administrator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have defined an event, we then need to be able to call the event to
    add it to the event queue. We can use the `GlideSystem` method `eventQueue`, as
    shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we would be calling the event `custom.event`, and this
    would need replacing with the name of the event you have created. The second,
    third, and fourth parameters are an object and two strings, respectively. The
    second parameter is almost always the current record, so that the current record
    data can be used once the event is processed. The third and fourth parameter are
    more commonly known as Parm1 and Parm2\. These can be used in scripts or in notifications;
    for example, you are able to send an email to the value held in Parm1.
  prefs: []
  type: TYPE_NORMAL
- en: In the example, we are sending the current logged-in user's ID and name. The
    information sent in these parameters often changes, and is often about the current
    user or a value that is useful once the event has been processed.
  prefs: []
  type: TYPE_NORMAL
- en: We can also use the `GlideSystem` method `eventQueueScheduled`, which is very
    similar, except the fifth parameter is the time at which the event should run.
    This can be set as the value of a field that is of `glide_date_time` type.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see an example of this in the following code, using the same event from
    before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Once an event has been triggered, it will be processed fairly quickly, unless
    it has been scheduled for a certain time, and the events that have been processed
    can be seen in the event logs. To see the event logs, navigate to System Logs
    | Events. From here we can see the  events processed, the processing time, and
    events still to be processed.
  prefs: []
  type: TYPE_NORMAL
- en: Events provide a great way to process multiple scripts or send notifications
    based on a single event, and because an event can be triggered in any server-side
    script, the ways in which an event can be triggered are almost limitless.
  prefs: []
  type: TYPE_NORMAL
- en: Script actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Script actions tend to be some of the lesser-used methods of server-side scripting.
    They are run after an event has run in the system scheduler. This can be helpful
    as a way to run some script at a set point in the future.
  prefs: []
  type: TYPE_NORMAL
- en: There are some system events that will already exist in ServiceNow that you
    can use to run your script actions from, or you can create your own events and
    execute them from any server-side script.
  prefs: []
  type: TYPE_NORMAL
- en: When creating a script action, you need to pick the event to run the script
    action against. This is picked from a list, so make sure the event exists before
    you create the script action. There is also the option to add a condition script,
    which is written in the same style as a business rule. You can also perform condition
    checks in the main script, but if you can use the condition script, it is considered
    better.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at a script action in use. The main script field can run
    any server-side script. Here, we will add a simple log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This example will send a log to the system logs to say that an approval has
    been inserted. This is fine as an example or for debugging, but would not be recommended
    as a script for a production instance, as many approvals are created, and this
    would swamp the logs with this message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at the script action itself, shown in *Figure 6.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/de0b276d-5d9b-41f6-8b96-fd10f0803567.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.5: Approval-logging script action'
  prefs: []
  type: TYPE_NORMAL
- en: Script actions can also be used to set an action to be performed in the future;
    for example, keeping a record on hold until a certain time in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Script examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The advanced server-side techniques we have seen can be used in a number of
    ways, and you will find advanced server-side scripting to be some of the most
    common in the ServiceNow platform.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have seen where to write our advanced server-side code, we can have
    a look at some further examples to solidify our understanding.
  prefs: []
  type: TYPE_NORMAL
- en: Let's have a look at a script include example first. We will write a script
    to return the active tasks of a requested item. This can be helpful for letting
    users know which tasks need to be completed for an item to be fulfilled.
  prefs: []
  type: TYPE_NORMAL
- en: 'First we will take a look at the script include code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We are using the `getActiveTasks` method to get all of the active tasks returned
    to us, passing in the item parameter as the requested item record to get the tasks
    for. Using a `gliderecord` query, we can find all of the tasks, and are returning
    them as an array.
  prefs: []
  type: TYPE_NORMAL
- en: In the example, we have started the creation of an item utilities script include.
    You will often find these in ServiceNow instances having been developed by other
    developers. We have created the first method here, but you would usually build
    up more methods for requested items as part of this class to keep the code organized.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see what the script include will look like in *Figure 6.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ff0e0038-7e12-46a1-b352-0156b8f9f17f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.6: Item utilities script include'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the script include, we need to call it from another location.
    Here, we will do this from a business rule, and simply log the result. You can
    use this type of script include to assist in whether to close out requested items,
    too.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code for the business rule to call the script include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We would run this business rule on the requested item table. In the code block,
    we put the value of the script include into the tasks variable. We also pass the
    current requested item record using `current`. We are just logging the output
    here, but this data could be used for other uses.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us also see what the business rule would look like, in *Figure 6.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e09d3e77-afb0-419a-9e21-5a96f7d59df1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.7: Business rule to log active requested item tasks'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let us have a look at a further example of a scheduled job.
  prefs: []
  type: TYPE_NORMAL
- en: For this example, we will look at deleting all incidents that are over a year
    old. This kind of example shows how we can remove old records overnight for different
    tables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us have a look at what the code would look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In this code, we get the current date and time by initiating a new `GlideDateTime`
    class, and then removing a year from this time. By using a negative number, in
    this case `-1`, we subtract a year from the current date and time. Using a `GlideRecord`
    query, we are finding all of the incidents updated over a year ago, and deleting
    them using `deleteMultiple`. This deletes all of the records without the need
    to query the `Gliderecord`.
  prefs: []
  type: TYPE_NORMAL
- en: This type of overnight job can be great for clearing out old records or performing
    updates, ready for the day ahead.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 6.8* shows what the scheduled job itself looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8153a1c7-bfdb-4c37-b081-ec0a030e4d20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.8: Scheduled job to delete old incidents'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding figure, this scheduled job would run at 1:00
    a.m. and delete the incidents overnight. This is common practice so that system
    resources are not being used during the working day.
  prefs: []
  type: TYPE_NORMAL
- en: It is also best practice to run long-running scripts overnight so that they
    do not impact the instance resources during business hours. There are also jobs
    that run overnight written by ServiceNow included in a brand new instance; for
    example, the `import set deleter`, which cleans up import sets after seven days.
  prefs: []
  type: TYPE_NORMAL
- en: Running overnight scripts is a great way to use scheduled jobs. This can be
    useful for cleaning up old data or setting up reports so that they are available
    to users first thing in the morning.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let us have a look at a workflow script example.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we will use an approval activity to add an approval that is the director
    in charge of the current caller. This involves iterating through managers of users
    in the database until we find one that is a director.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us take a look at the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In the example, we use the `manager` string to keep adding `.manager` to until
    we find a user that is a director. This means saying the manager of the manager
    of the manager, and so on, until a director is found. We can execute this in a
    loop to save time and resources by using `eval`.
  prefs: []
  type: TYPE_NORMAL
- en: '`eval` evaluates the contents of the brackets, rather than treating it as its
    current type: in this case, a string. This allows us to dot walk to find the title
    of the user and get the `sys_id` if we find a director. It is also how we can
    use a loop here, adding `.manager` to the string each time we run through the
    loop. `eval` can be very helpful when using script to find the field you require,
    and then to evaluate it once it is found.'
  prefs: []
  type: TYPE_NORMAL
- en: If no director is found, then no approval will be added at this stage in the
    workflow, as when we get to the top of the organisational tree we would meet a
    user with no manager and exit the loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see the approval activity from the workflow in *Figure 6.9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec3a826e-7951-4fdd-b6f2-c1067c25864f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.9: Approval activity to find and add the user''s director as an approver'
  prefs: []
  type: TYPE_NORMAL
- en: For our final example, we will take a look at a script action.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes we want to put an incident on hold, but incidents can get left on
    hold for extended periods of time. In this example, we will create a new field
    to hold a date and time for the incident to stay on hold until. Once the date
    and time are reached, an event fires which will run our script action and take
    the incident off hold and move the state to in progress.
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve this goal, we also need to set the event to be scheduled in the
    future. Here, we will use a business rule to do this. The code we will need looks
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the business rule, we are using the `GlideSystem` method `eventQueueScheduled`
    to put an event into the system scheduler. We have set the third parameter, or
    what can be referenced as `event.parm1`, in later scripts to be the `sys_id` of
    the current incident. You will also notice that the final fifth parameter is the
    value of our custom field to hold the date and time we want the incident to stay
    on hold until.
  prefs: []
  type: TYPE_NORMAL
- en: This method sets an event into the system scheduler which will run the event
    at the time we have set in the custom on hold until field. The event we are firing
    (`incident.off.hold`) is a custom one we have created for this particular functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Once the event fires, we need to move the incident out of the on hold state
    and into in progress. For this, we are going to use our script action.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code in our script action is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We are using the `event` parameter we set in the business rule to use `gliderecord`
    to get the incident record we want to update. Once we have the record, we can
    change the state to in progress, with a value of two, and reset the on hold until
    field before updating the incident record.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also see the full script action in *Figure 6.10*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/045659ff-7ff3-4e96-a9f0-c69401be6c6d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.10: Script action to take an incident off hold'
  prefs: []
  type: TYPE_NORMAL
- en: This combination of business rule and script action is a very useful technique
    to know for having the ability to run scripts at a specified time in the future.
  prefs: []
  type: TYPE_NORMAL
- en: These practical examples are great for reinforcing the understanding of these
    more advanced server-side script techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Advanced server-side scripting was the theme for this chapter. We looked at
    the greatly used script includes and scheduling scripts using scheduled jobs,
    events, and script actions. We also saw how to write script as part of ServiceNow
    workflows and how to test aspects of our code using background scripts. We finished
    off with some great examples of how to use these advanced server-side techniques.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we look at building your own custom pages by utilizing
    UI pages. We introduce Jelly script and where it appears in ServiceNow, as well
    as show some examples of creating simple custom pages.
  prefs: []
  type: TYPE_NORMAL
