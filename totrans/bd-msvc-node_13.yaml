- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Monitoring Microservices in Node.js
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Node.js中监控微服务
- en: When working with microservices architecture and Node.js, you need to monitor
    microservices in Node.js.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当与微服务架构和Node.js一起工作时，你需要监控Node.js中的微服务。
- en: We’ll start this chapter by understanding the principles of monitoring microservices.
    Monitoring microservices in a Node.js environment is crucial for ensuring the
    health, performance, and reliability of the system. Also, it is an ongoing process
    that requires continuous refinement and adaptation to changing requirements. By
    employing a comprehensive monitoring strategy, teams can proactively identify
    and address issues, optimize performance, and ensure the overall reliability and
    security of the microservices architecture.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从这个章节开始，了解监控微服务的原则。在Node.js环境中监控微服务对于确保系统的健康、性能和可靠性至关重要。此外，它是一个持续的过程，需要不断改进和适应不断变化的需求。通过采用全面的监控策略，团队可以主动识别和解决问题，优化性能，并确保微服务架构的整体可靠性和安全性。
- en: By the end of this chapter, you will have learned how to constantly monitor
    microservices in Node.js.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将学会如何持续监控Node.js中的微服务。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Structured logging and log levels
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构化日志和日志级别
- en: Contextual information and centralized log management
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上下文信息和集中式日志管理
- en: Application-level metrics, distributed tracing, and health checks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序级指标、分布式跟踪和健康检查
- en: Threshold-based alerts and anomaly detection
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于阈值的警报和异常检测
- en: Request tracing, request context propagation, and logging frameworks
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求跟踪、请求上下文传播和日志框架
- en: In the first section, we’re going to show how to monitor with structured logging
    and understand log levels.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一部分，我们将展示如何使用结构化日志进行监控并理解日志级别。
- en: Structured logging and log levels
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结构化日志和日志级别
- en: '**Structured logging** involves organizing log messages in a predefined format,
    typically as key-value pairs or JSON objects, making them more machine-readable
    and enabling easier analysis. **Log levels** indicate the severity or importance
    of a log message.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**结构化日志**涉及将日志消息组织在预定义的格式中，通常为键值对或JSON对象，使其更易于机器读取，并便于分析。**日志级别**表示日志消息的严重性或重要性。'
- en: 'Here are some best practices for structured logging:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些结构化日志的最佳实践：
- en: '`service_name`, and custom fields.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`service_name`和自定义字段。'
- en: '**Contextual information**: Include relevant context information in logs, such
    as user IDs, transaction IDs, and service-specific identifiers. Facilitate correlation
    between logs from different microservices.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上下文信息**：在日志中包含相关的上下文信息，例如用户ID、事务ID和服务特定的标识符。促进不同微服务日志之间的关联。'
- en: '**Error information**: For error logs, include details such as error codes,
    stack traces, and additional diagnostic information. This aids in **root cause
    analysis** (**RCA**) and debugging.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误信息**：对于错误日志，包括错误代码、堆栈跟踪和附加的诊断信息。这有助于**根本原因分析**（RCA）和调试。'
- en: '**Correlation IDs**: Use correlation IDs to trace requests across microservices.
    Include the correlation ID in each log entry related to a specific request.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关联ID**：使用关联ID来追踪跨微服务之间的请求。在每个与特定请求相关的日志条目中包含关联ID。'
- en: '**Structured log libraries**: Leverage structured logging libraries such as
    Winston or Bunyan in Node.js. Customize log formatters to produce structured output.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结构化日志库**：在Node.js中利用结构化日志库，如Winston或Bunyan。自定义日志格式化程序以生成结构化输出。'
- en: In microservices architectures, structured logging is especially valuable for
    correlating logs across services and providing context-rich information.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务架构中，结构化日志对于跨服务关联日志和提供丰富上下文信息特别有价值。
- en: 'Structured logging is a method of creating log records that have a consistent
    and well-defined format, making them easier to search and analyze. Some best practices
    for structured logging are the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 结构化日志是一种创建具有一致和良好定义格式的日志记录的方法，使其更容易搜索和分析。结构化日志的一些最佳实践如下：
- en: Use a standard format, such as JSON, for your log records. This will make them
    machine-readable and compatible with various log management tools.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用标准格式，如JSON，记录日志。这将使它们易于机器读取，并与各种日志管理工具兼容。
- en: Include relevant fields or key-value pairs in your log records, such as timestamp,
    log level, message, source, context, and any custom data. This will help you filter,
    query, and correlate your logs more efficiently.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的日志记录中包含相关字段或键值对，例如时间戳、日志级别、消息、来源、上下文以及任何自定义数据。这将帮助您更有效地过滤、查询和关联日志。
- en: Avoid logging sensitive or personal information, such as passwords, credit card
    numbers, or usernames. This will prevent security breaches and comply with data
    protection regulations.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免记录敏感或个人信息，如密码、信用卡号码或用户名。这将防止安全漏洞并符合数据保护法规。
- en: Use consistent naming and formatting conventions for your fields and values.
    This will make your logs more readable and avoid confusion.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用一致的命名和格式约定为您的字段和值。这将使您的日志更易于阅读并避免混淆。
- en: Use appropriate log levels to indicate the severity and importance of your log
    events. This will help you prioritize and troubleshoot your issues more effectively.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用适当的日志级别来指示日志事件的严重性和重要性。这将帮助您更有效地优先处理和解决您的问题。
- en: 'Here is what’s included in log levels:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这里包括日志级别的以下内容：
- en: '`DEBUG`:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DEBUG`：'
- en: '*Purpose*: Detailed information useful for debugging.'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*目的*：对调试有用的详细信息。'
- en: '*Usage*: Debugging information, variable values, and other detailed insights.'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*用途*：调试信息、变量值和其他详细见解。'
- en: '`INFO`:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INFO`：'
- en: '*Purpose*: General information about system events.'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*目的*：关于系统事件的通用信息。'
- en: '*Usage*: Startup messages, configuration details, and routine system events.'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*用途*：启动消息、配置细节和常规系统事件。'
- en: '`WARN` (**Warning**):'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WARN`（**警告**）：'
- en: '*Purpose*: Indicate potential issues that may not be critical.'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*目的*：指示可能不是关键的问题。'
- en: '*Usage*: Non-fatal issues or conditions that may require attention.'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*用途*：可能需要关注的不致命问题或条件。'
- en: '`ERROR`:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ERROR`：'
- en: '*Purpose*: Indicate critical errors that need attention.'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*目的*：指示需要关注的关键错误。'
- en: '*Usage*: Errors that impact the normal functioning of the system.'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*用途*：影响系统正常功能的问题。'
- en: '`FATAL`/`CRITICAL`:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FATAL`/`CRITICAL`：'
- en: '*Purpose*: Indicate severe errors that lead to a service or application shutdown.'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*目的*：指示导致服务或应用程序关闭的严重错误。'
- en: '*Usage*: Critical errors where the system cannot recover.'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*用途*：系统无法恢复的临界错误。'
- en: Microservices commonly use various log levels to categorize messages based on
    their significance.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务通常使用各种日志级别根据其重要性对消息进行分类。
- en: '*Figure 13**.1* illustrates structured logging:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 13.1* 展示了结构化日志：'
- en: '![Figure 13.1: Structured logging (image by macrovector on Freepik)](img/B14980_13_01.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.1：结构化日志（由 Freepik 上的 macrovector 提供）](img/B14980_13_01.jpg)'
- en: 'Figure 13.1: Structured logging (image by macrovector on Freepik)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.1：结构化日志（由 Freepik 上的 macrovector 提供）
- en: In summary, by adopting structured logging and carefully managing log levels,
    microservices environments can achieve better observability, faster troubleshooting,
    and improved overall system reliability. Consistency and attention to detail in
    log formats contribute to a more effective logging strategy.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，通过采用结构化日志并仔细管理日志级别，微服务环境可以实现更好的可观察性、更快的故障排除和整体系统可靠性的提升。在日志格式上的一致性和对细节的关注有助于更有效的日志策略。
- en: With an understanding of these concepts, let’s now move to contextual information
    and centralized log management.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 理解了这些概念后，我们现在转向上下文信息和集中式日志管理。
- en: Contextual information and centralized log management
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上下文信息和集中式日志管理
- en: Contextual information in logs and centralized log management are essential
    components of effective observability and troubleshooting in microservices architectures.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 日志中的上下文信息和集中式日志管理是微服务架构中有效可观察性和故障排除的关键组成部分。
- en: Contextual information in logs
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志中的上下文信息
- en: '**Contextual information** in logs is very important in microservices because
    it gives developers all the required information to better debug the application.
    Contextual information in logs includes any additional data that can help understand
    the context of a log event, such as the source, the time, the location, the parameters,
    the outcome, or the cause of the event. Contextual information can make logs more
    meaningful, useful, and actionable, as it can provide clues for troubleshooting,
    debugging, monitoring, or analyzing the behavior of an application or a system.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务中，日志中的**上下文信息**非常重要，因为它为开发者提供了所有必要的调试应用程序的信息。日志中的上下文信息包括任何有助于理解日志事件上下文的数据，例如来源、时间、位置、参数、结果或事件的原因。上下文信息可以使日志更具意义、有用和可操作，因为它可以提供故障排除、调试、监控或分析应用程序或系统行为的线索。
- en: 'Here’s why contextual logging is important:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是为什么上下文日志很重要的原因：
- en: '**Traceability**:'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可追溯性**:'
- en: '*What it does*: Helps trace the flow of a request or transaction through multiple
    microservices.'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*功能*: 帮助追踪请求或事务通过多个微服务的流程。'
- en: '*Implementation*: Using a unique identifier, such as a correlation ID, a trace
    ID, or a request ID, to tag each log event that belongs to the same transaction,
    operation, or workflow. This can help to group and filter log events that span
    multiple components or services and to reconstruct the execution path and the
    causal relationships of log events.'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现方式*: 使用唯一标识符，如关联ID、跟踪ID或请求ID，为属于同一事务、操作或工作流程的每个日志事件标记。这有助于对跨越多个组件或服务的日志事件进行分组和筛选，并重建日志事件的执行路径和因果关系。'
- en: '**User context**:'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户上下文**:'
- en: '*What it does*: Provides information about the user associated with a particular
    request.'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*功能*: 提供与特定请求关联的用户信息。'
- en: '*Implementation*: Include user IDs or relevant user context information in
    logs.'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现方式*: 在日志中包含用户ID或相关用户上下文信息。'
- en: '**Service identifier**:'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务标识符**:'
- en: '*What it does*: Identifies the specific microservice generating the log entry.'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*功能*: 识别生成日志条目的特定微服务。'
- en: '*Implementation*: Include service names or IDs in each log entry.'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现方式*: 在每个日志条目中包含服务名称或ID。'
- en: '**Timestamp**:'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间戳**:'
- en: '*What it does*: Indicates when an event occurred, aiding in chronological analysis.'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*功能*: 指示事件发生的时间，有助于按时间顺序分析。'
- en: '*Implementation*: Include timestamps with time zone information.'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现方式*: 在日志中包含带时区信息的时间戳。'
- en: '**Error code**:'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误代码**:'
- en: '*What it does*: Helps categorize and prioritize errors for easier debugging.'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*功能*: 帮助对错误进行分类和优先排序，以便更容易调试。'
- en: '*Implementation*: Include error codes or relevant status indicators.'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现方式*: 在日志中包含错误代码或相关状态指示器。'
- en: '**Environment information**:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境信息**:'
- en: '*What it does*: Indicates the environment (e.g., development, production) in
    which the log was generated.'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*功能*: 指示日志生成时的环境（例如，开发、生产）。'
- en: '*Implementation*: Include environment indicators in logs.'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现方式*: 在日志中包含环境指示器。'
- en: Remember to give all necessary information in logs.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 记得在日志中提供所有必要的信息。
- en: With these concepts learned, we can continue with centralized log management.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 学习了这些概念后，我们可以继续进行集中式日志管理。
- en: Centralized log management
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**集中式日志管理**'
- en: '**Centralized log management** is also very important while developing microservices
    because it can help developers save time and debug problems faster. Centralized
    log management is the process of collecting, storing, analyzing, and managing
    log data from various sources and systems in a single platform. Log data is the
    information generated by applications, devices, servers, networks, or any other
    components that record their activities, events, or changes.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**集中式日志管理**在开发微服务时也非常重要，因为它可以帮助开发者节省时间并更快地调试问题。集中式日志管理是在单个平台上收集、存储、分析和管理来自各种来源和系统的日志数据的过程。日志数据是由应用程序、设备、服务器、网络或任何记录其活动、事件或变化的组件生成的信息。'
- en: 'Here’s why it’s important:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是它为什么重要的原因：
- en: '**Single source of** **truth (SSOT)**:'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单一事实来源 (SSOT)**:'
- en: '*What it does*: Provides a single repository for storing, searching, and analyzing
    logs.'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*功能*: 提供一个用于存储、搜索和分析日志的单个存储库。'
- en: '*Implementation*: Utilize log aggregation tools or centralized logging services.'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现方式*: 利用日志聚合工具或集中式日志服务。'
- en: '**Efficient troubleshooting**:'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高效的故障排除**:'
- en: '*What it does*: Facilitates faster issue identification and resolution through
    a consolidated view.'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*功能*: 通过综合视图促进更快的问题识别和解决。'
- en: '*Implementation*: Use tools such as the ELK Stack (Elasticsearch, Logstash,
    Kibana) or cloud-based logging solutions.'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现*: 使用如ELK Stack（Elasticsearch、Logstash、Kibana）或基于云的日志解决方案等工具。'
- en: '**Alerting** **and monitoring**:'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**警报** **和监控**:'
- en: '*What it does*: Enables real-time monitoring and alerting based on log data.'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*作用*: 基于日志数据实现实时监控和警报。'
- en: '*Implementation*: Set up alerting rules and dashboards for log-based insights.'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现*: 设置基于日志的洞察力的警报规则和仪表板。'
- en: '**Security** **and compliance**:'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全和合规性**:'
- en: '*What it does*: Aids in security analysis and compliance audits.'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*作用*: 帮助进行安全分析和合规性审计。'
- en: '*Implementation*: Centralized storage simplifies the review of logs for security
    incidents.'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现*: 集中式存储简化了安全事件的日志审查。'
- en: In summary, by incorporating contextual information in logs and implementing
    centralized log management, microservices architectures can achieve better visibility,
    faster issue resolution, and improved collaboration across development and operations
    teams. These practices contribute to a more resilient and maintainable microservices
    ecosystem.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，通过在日志中包含上下文信息并实施集中式日志管理，微服务架构可以实现更好的可见性、更快的问题解决以及开发团队和运维团队之间的协作改进。这些实践有助于构建更健壮、更易于维护的微服务生态系统。
- en: Now, we can continue to the next section, in which we will talk about application-level
    metrics, distributed tracing, and health checks.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以继续到下一节，我们将讨论应用级指标、分布式追踪和健康检查。
- en: Application-level metrics, distributed tracing, and health checks
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用级指标、分布式追踪和健康检查
- en: Effective monitoring and observability in microservices involve gathering and
    analyzing various types of data. Application-level metrics, distributed tracing,
    and health checks play crucial roles in understanding the performance, dependencies,
    and overall health of microservices.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务中进行有效的监控和可观察性涉及收集和分析各种类型的数据。应用级指标、分布式追踪和健康检查在理解微服务的性能、依赖关系和整体健康状况方面发挥着关键作用。
- en: Application-level metrics
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用级指标
- en: '**Application-level metrics** are very important to profile logs better. Application-level
    metrics are indicators that measure and monitor the performance, behavior, and
    quality of software applications. Application-level metrics can include aspects
    such as availability, response time, throughput, error rate, user satisfaction,
    resource utilization, and more. Application-level metrics can help developers,
    managers, and stakeholders understand how the application is functioning, identify
    and troubleshoot issues, optimize and improve the application, and ensure a good
    user experience.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**应用级指标**对于更好地分析日志非常重要。应用级指标是衡量和监控软件应用性能、行为和质量的各种指标。应用级指标可以包括可用性、响应时间、吞吐量、错误率、用户满意度、资源利用率等方面。应用级指标可以帮助开发者、经理和利益相关者了解应用的运行情况，识别和解决问题，优化和改进应用，并确保良好的用户体验。'
- en: 'Here’s why they are important:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是它们为什么重要的原因：
- en: '**Performance monitoring**:'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能监控**:'
- en: '*What it does*: Provides insights into the performance of microservices.'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*作用*: 提供对微服务性能的洞察。'
- en: '*Implementation*: Measure response times, throughput, and resource usage.'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现*: 测量响应时间、吞吐量和资源使用。'
- en: '**Resource utilization**:'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源利用率**:'
- en: '*What it does*: Helps identify resource bottlenecks and inefficiencies.'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*作用*: 帮助识别资源瓶颈和低效之处。'
- en: '*Implementation*: Monitor CPU usage, memory consumption, and disk I/O.'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现*: 监控CPU使用、内存消耗和磁盘I/O。'
- en: '**Error rate**:'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误率**:'
- en: '*What it does*: Indicates the frequency and nature of errors.'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*作用*: 指示错误发生的频率和性质。'
- en: '*Implementation*: Track error rates and specific error types.'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现*: 跟踪错误率和特定错误类型。'
- en: '**Throughput**:'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**吞吐量**:'
- en: '*What it does*: Measures the number of requests processed per unit of time.'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*作用*: 衡量单位时间内处理请求数量。'
- en: '*Implementation*: Monitor request or transaction throughput.'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现*: 监控请求或事务吞吐量。'
- en: Understanding the metrics better will offer several benefits in microservices,
    and one of them is that developers can understand better how their code will run
    on the machines.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 更好地理解指标将为微服务带来多项好处，其中之一是开发者可以更好地理解他们的代码如何在机器上运行。
- en: We can continue now with distributed tracing.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以继续分布式追踪。
- en: Distributed tracing
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分布式追踪
- en: '**Distributed tracing** is important because it can identify all requests being
    made by microservices and their dependencies and debug faster. Distributed tracing
    in logs is a technique that allows you to track and monitor the performance and
    behavior of requests that span multiple services, systems, or components in a
    distributed application. Distributed tracing in logs can help you to identify
    and troubleshoot issues, errors, or bottlenecks that occur along the request path
    and optimize and improve the user experience and system reliability.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**分布式跟踪**之所以重要，是因为它可以识别所有由微服务及其依赖项发起的请求，并更快地进行调试。分布式跟踪在日志中是一种允许您跟踪和监控跨越多个服务、系统或组件的分布式应用程序中请求的性能和行为的技术。日志中的分布式跟踪可以帮助您识别和解决请求路径上发生的错误、问题或瓶颈，从而优化和改进用户体验和系统可靠性。'
- en: 'Here’s why distributed tracing is important:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式跟踪之所以重要，有以下原因：
- en: '**Request** **flow visibility**:'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求** **流可见性**:'
- en: '*What it does*: Traces requests as they move through various microservices.'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*它做什么*: 跟踪请求在通过各种微服务中的移动。'
- en: '*Implementation*: Use trace IDs to correlate requests across services.'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现*: 使用跟踪ID关联服务之间的请求。'
- en: '**Latency analysis**:'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**延迟分析**:'
- en: '*What it does*: Helps identify latency bottlenecks in distributed architectures.'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*它做什么*: 帮助识别分布式架构中的延迟瓶颈。'
- en: '*Implementation*: Measure the time taken by each microservice to process a
    request.'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现*: 测量每个微服务处理请求所需的时间。'
- en: '**Dependency mapping**:'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖映射**:'
- en: '*What it does*: Illustrates dependencies between microservices.'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*它做什么*: 展示微服务之间的依赖关系。'
- en: '*Implementation*: Visualize dependencies based on traced requests.'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现*: 基于跟踪请求可视化依赖关系。'
- en: Be mindful of the overhead introduced by collecting metrics and traces, especially
    in high-throughput systems. We can continue now with health checks.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 注意收集指标和跟踪引入的额外开销，尤其是在高吞吐量系统中。我们现在可以继续进行健康检查。
- en: Health checks
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 健康检查
- en: '**Health checks** can help developers and engineers keep an automated eye on
    microservices and identify potential issues before they become a problem.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**健康检查**可以帮助开发人员和工程师自动监控微服务，并在问题成为问题之前识别潜在问题。'
- en: 'Health checks are important for the following reasons:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 健康检查之所以重要，有以下原因：
- en: '**System availability**:'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统可用性**:'
- en: '*What it does*: Ensures microservices are available and responsive.'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*它做什么*: 确保微服务可用且响应。'
- en: '*Implementation*: Regularly check if microservices respond to health check
    requests.'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现*: 定期检查微服务是否响应健康检查请求。'
- en: '**Proactive** **issue detection**:'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主动** **问题检测**:'
- en: '*What it does*: Identifies potential issues before they impact users.'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*它做什么*: 在影响用户之前识别潜在问题。'
- en: '*Implementation*: Include checks for dependencies, database connections, and
    critical components.'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现*: 包括对依赖项、数据库连接和关键组件的检查。'
- en: '`/health`) for health check endpoints.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/health`) 用于健康检查端点。'
- en: Integration can also include detailed information about the health of dependencies
    in health check responses.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 集成还可以包括健康检查响应中依赖项健康状况的详细信息。
- en: In summary, application-level metrics, distributed tracing, and health checks
    are integral components of a robust monitoring and observability strategy in microservices
    architectures. These practices provide valuable insights into the performance,
    dependencies, and health of individual microservices, contributing to a more resilient
    and efficient system.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，应用级指标、分布式跟踪和健康检查是微服务架构中稳健监控和可观察策略的组成部分。这些实践为个别微服务的性能、依赖关系和健康状况提供了宝贵的见解，有助于构建更健壮和高效的系统。
- en: In the next section, we will learn about threshold-based alerts and anomaly
    detection.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将了解基于阈值的警报和异常检测。
- en: Threshold-based alerts and anomaly detection
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于阈值的警报和异常检测
- en: Effective monitoring and alerting are critical components of a robust microservices
    architecture. Threshold-based alerts and anomaly detection mechanisms help identify
    issues, deviations from normal behavior, and potential problems before they impact
    the system’s performance.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的监控和警报是稳健微服务架构的关键组成部分。基于阈值的警报和异常检测机制有助于在影响系统性能之前识别问题、行为偏差和潜在问题。
- en: Threshold-based alerts
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于阈值的警报
- en: '**Threshold-based alerts** can help establish baseline metrics to determine
    normal behavior. It can also allow for adjustable thresholds based on different
    environments (e.g., development and production).'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**基于阈值的警报**可以帮助建立基线指标以确定正常行为。它还可以允许根据不同的环境（例如，开发和生产）调整阈值。'
- en: 'Here’s why threshold-based alerts are important:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是为什么基于阈值的警报很重要的原因：
- en: '**Proactive** **issue detection**:'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主动** **问题检测**：'
- en: '*What it does*: Identifies abnormal conditions based on predefined thresholds.'
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*它做什么*: 基于预定义的阈值识别异常情况。'
- en: '*Implementation*: Set thresholds for key metrics such as response times, error
    rates, and resource utilization.'
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现方式*: 为关键指标（如响应时间、错误率和资源利用率）设置阈值。'
- en: '**Immediate notification**:'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**即时通知**：'
- en: '*What it does*: Triggers alerts to notify stakeholders about issues in real
    time.'
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*它做什么*: 触发警报以实时通知利益相关者有关问题。'
- en: '*Implementation*: Use alerting systems to send notifications via email, messaging
    platforms, or **incident management** (**IM**) tools.'
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现方式*: 使用警报系统通过电子邮件、消息平台或**事件管理**（**IM**）工具发送通知。'
- en: I can show you how alerting is done with **Datadog** and **Splunk**, two popular
    observability tools. Alerting is a feature that allows you to set up rules and
    conditions to notify you when something goes wrong or needs your attention in
    your systems or applications.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以向您展示如何使用**Datadog**和**Splunk**，这两款流行的可观察性工具进行警报。警报是一个功能，允许您设置规则和条件，当您的系统或应用程序中出现问题时或需要您的关注时，通知您。
- en: With Datadog, you can create monitors that alert you about metrics, events,
    logs, integration availability, network endpoints, and more. You can configure
    the monitor type, query, alert threshold, notification message, and recipients.
    You can also set up recovery notifications, anomaly detection, and alert grouping.
    You can view and manage your monitors from the **Monitors** page, where you can
    see their status, history, and configuration. You can also use the Datadog API
    to create, update, or delete monitors programmatically. For more details, you
    can check out the Datadog documentation ([https://docs.datadoghq.com/](https://docs.datadoghq.com/))
    on alerting.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Datadog，您可以创建监控器，当您收到有关指标、事件、日志、集成可用性、网络端点等方面的警报。您可以配置监控器类型、查询、警报阈值、通知消息和收件人。您还可以设置恢复通知、异常检测和警报分组。您可以从**监控器**页面查看和管理您的监控器，在那里您可以查看它们的状态、历史和配置。您还可以使用Datadog
    API以编程方式创建、更新或删除监控器。有关更多详细信息，您可以查看关于警报的Datadog文档([https://docs.datadoghq.com/](https://docs.datadoghq.com/))。
- en: With Splunk, you can create alerts that trigger actions based on the results
    of a saved search. You can configure the alert type, schedule, trigger condition,
    throttle, and actions. You can also set up adaptive thresholding, predictive analytics,
    and alert dependencies. You can view and manage your alerts from the **Alerts**
    page, where you can see their status, history, and configuration. You can also
    use the Splunk REST API to create, update, or delete alerts programmatically.
    For more details, you can check out the Splunk documentation ([https://docs.splunk.com/Documentation](https://docs.splunk.com/Documentation))
    on alerting.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Splunk，您可以创建基于保存搜索结果的触发动作的警报。您可以配置警报类型、计划、触发条件、节流和动作。您还可以设置自适应阈值、预测分析和警报依赖。您可以从**警报**页面查看和管理您的警报，在那里您可以查看它们的状态、历史和配置。您还可以使用Splunk
    REST API以编程方式创建、更新或删除警报。有关更多详细信息，您可以查看关于警报的Splunk文档([https://docs.splunk.com/Documentation](https://docs.splunk.com/Documentation))。
- en: Both Datadog and Splunk offer integrations with various communication and collaboration
    tools, such as Slack, PagerDuty, Jira, and Microsoft Teams, to send alert notifications
    and enable **incident response** (**IR**) workflows. You can also integrate Datadog
    and Splunk to correlate metrics and logs across both platforms.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Datadog和Splunk都提供与各种通信和协作工具的集成，例如Slack、PagerDuty、Jira和Microsoft Teams，以发送警报通知并启用**事件响应**（**IR**）工作流程。您还可以将Datadog和Splunk集成以关联两个平台上的指标和日志。
- en: Now, we can continue with anomaly detection.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以继续讨论异常检测。
- en: Anomaly detection
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异常检测
- en: '**Anomaly detection** can help consider analyzing multiple metrics together
    for a more comprehensive view and use historical data to train models and establish
    normal behavior.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**异常检测**可以帮助考虑分析多个指标以获得更全面的视角，并使用历史数据来训练模型并建立正常行为。'
- en: 'Anomaly detection is important for the following reasons:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 异常检测之所以重要，有以下原因：
- en: '**Identifying** **unusual patterns**:'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**识别** **异常模式**：'
- en: '*What it does*: Detects deviations from normal patterns or behaviors.'
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*它做什么*：检测正常模式或行为中的偏差。'
- en: '*Implementation*: Utilize statistical methods or **machine learning** (**ML**)
    algorithms to identify anomalies.'
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现方式*：利用统计方法或**机器学习**（**ML**）算法来识别异常。'
- en: '**Adaptive monitoring**:'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自适应监控**：'
- en: '*What it does*: Adapts to changes in system behavior over time.'
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*它做什么*：适应系统行为随时间的变化。'
- en: '*Implementation*: Periodically retrain anomaly detection models to account
    for evolving patterns.'
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现方式*：定期重新训练异常检测模型，以适应不断变化的模式。'
- en: '**Advantages of anomaly detection in different sectors** **of industry**:'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**异常检测在不同行业** **领域的优势**：'
- en: '*Manufacturing*: Anomaly detection can help detect faults or defects in machines,
    products, or processes and prevent costly breakdowns, scrap, or rework. For example,
    anomaly detection can monitor the sounds or vibrations of engines and alert the
    operators if there is any abnormality.'
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*制造业*：异常检测可以帮助检测机器、产品或过程中的故障或缺陷，并防止昂贵的故障、废品或返工。例如，异常检测可以监控发动机的声音或振动，并在出现任何异常时向操作员发出警报。'
- en: '*Finance*: Anomaly detection can help detect fraud or money laundering by analyzing
    transactions or spending patterns and flagging any suspicious activities. For
    example, anomaly detection can alert the bank if a customer withdraws a large
    amount of money from an unfamiliar location.'
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*金融*：通过分析交易或消费模式，异常检测可以帮助检测欺诈或洗钱，并标记任何可疑活动。例如，如果客户从一个不熟悉的位置提取大量现金，异常检测可以向银行发出警报。'
- en: '*Healthcare*: Anomaly detection can help monitor patient health and detect
    any signs of diseases or complications by analyzing vital signs, lab results,
    or medical images and flagging any anomalies. For example, anomaly detection can
    alert the doctor if a patient has an irregular heartbeat or a tumor in an X-ray.'
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*医疗保健*：通过分析生命体征、实验室结果或医学影像，异常检测可以帮助监测患者健康并检测任何疾病或并发症的迹象，并标记任何异常。例如，如果患者有异常的心跳或X光片中的肿瘤，异常检测可以向医生发出警报。'
- en: '*Cybersecurity*: Anomaly detection can help detect cyberattacks or intrusions
    by analyzing network traffic or system logs and flagging any malicious or unauthorized
    activities. For example, anomaly detection can alert the security team if a hacker
    tries to access a sensitive database or install malware.'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*网络安全*：通过分析网络流量或系统日志，异常检测可以帮助检测网络攻击或入侵，并标记任何恶意或未经授权的活动。例如，如果黑客试图访问敏感数据库或安装恶意软件，异常检测可以向安全团队发出警报。'
- en: Anomaly detection can incorporate feedback from incident responses to continuously
    improve anomaly detection models.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 异常检测可以结合事件响应的反馈，以持续改进异常检测模型。
- en: In summary, threshold-based alerts and anomaly detection are essential components
    of a proactive monitoring strategy in microservices architectures. They enable
    teams to identify and address issues promptly, contributing to improved system
    reliability and performance. By implementing these practices, organizations can
    enhance the resilience of their microservices ecosystem and provide a better experience
    for users.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，基于阈值的警报和异常检测是微服务架构中主动监控策略的必要组成部分。它们使团队能够及时识别和解决问题，从而提高系统可靠性和性能。通过实施这些实践，组织可以增强其微服务生态系统的弹性，并为用户提供更好的体验。
- en: Now, let’s move on to the next section on request tracing, request context propagation,
    and logging frameworks.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续下一节，关于请求跟踪、请求上下文传播和日志框架。
- en: Request tracing, request context propagation, and logging frameworks
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 请求跟踪、请求上下文传播和日志框架
- en: In microservices architectures, managing and tracing requests as they traverse
    various services is crucial for understanding system behavior, identifying bottlenecks,
    and diagnosing issues. Combining request tracing, context propagation, and effective
    logging frameworks enhances observability and facilitates efficient debugging.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务架构中，管理并跟踪请求在穿越各种服务时的行为对于理解系统行为、识别瓶颈和诊断问题至关重要。结合请求跟踪、上下文传播和有效的日志框架可以增强可观察性并促进高效的调试。
- en: Request tracing
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 请求跟踪
- en: '**Request tracing** can provide end-to-end visibility and performance analysis.
    Request tracing in logs is a technique that lets you capture and analyze the details
    of a specific request processed by your application or system. Request tracing
    in logs can help you to diagnose and troubleshoot issues, errors, or performance
    problems that affect the request and to optimize and improve the user experience
    and system reliability.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**请求跟踪**可以提供端到端可见性和性能分析。日志中的请求跟踪是一种技术，允许您捕获和分析应用程序或系统处理的具体请求的详细信息。日志中的请求跟踪可以帮助您诊断和排除影响请求的问题、错误或性能问题，以优化和改进用户体验和系统可靠性。'
- en: 'Here’s why request tracing is important:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是请求跟踪为何重要的原因：
- en: '**End-to-end visibility**:'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**端到端可见性**：'
- en: '*What it does*: Provides visibility into the entire life cycle of a request
    as it flows through different microservices.'
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*作用*：提供对请求在其通过不同微服务流动过程中的整个生命周期的可见性。'
- en: '*Implementation*: Each microservice generates trace information with a unique
    identifier (trace ID) that is passed along with the request.'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现方式*：每个微服务生成带有唯一标识符（跟踪ID）的跟踪信息，并将其与请求一起传递。'
- en: '**Performance analysis**:'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能分析**：'
- en: '*What it does*: Helps analyze the performance of each microservice involved
    in processing a request.'
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*作用*：帮助分析参与处理请求的每个微服务的性能。'
- en: '*Implementation*: Use tools such as **Zipkin**, **Jaeger**, or **OpenTelemetry**
    to capture and visualize traces.'
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现方式*：使用诸如 **Zipkin**、**Jaeger** 或 **OpenTelemetry** 等工具来捕获和可视化跟踪信息。'
- en: In request tracing, it is a best practice to use correlation IDs (include a
    correlation ID in each request to correlate logs and traces across microservices)
    and sampling (implement sampling to avoid overwhelming the system with trace data
    in high-throughput scenarios).
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在请求跟踪中，使用关联ID（在每个请求中包含关联ID以关联跨微服务的日志和跟踪）和采样（在高吞吐量场景中实现采样以避免系统被跟踪数据淹没）是一种最佳实践。
- en: Request context propagation
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 请求上下文传播
- en: In **request context propagation**, it is important to be aware of context-aware
    processing and consistent logging. Request context propagation in logs is a technique
    that allows you to pass and access contextual information about a request, such
    as the source, the time, the path, the parameters, the outcome, or the error,
    across different components or services that process the request. Request context
    propagation in logs can help you to diagnose and troubleshoot issues, errors,
    or performance problems that affect the request and to optimize and improve the
    user experience and system reliability.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在**请求上下文传播**中，了解上下文感知处理和一致日志记录非常重要。日志中的请求上下文传播是一种技术，允许您在不同组件或服务之间传递和访问有关请求的上下文信息，例如来源、时间、路径、参数、结果或错误。日志中的请求上下文传播可以帮助您诊断和排除影响请求的问题、错误或性能问题，以优化和改进用户体验和系统可靠性。
- en: 'Here’s why it’s important:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是它为何重要的原因：
- en: '**Context-aware processing**:'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上下文感知处理**：'
- en: '*What it does*: Enables microservices to be context-aware by passing contextual
    information along with requests.'
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*作用*：通过在请求中传递上下文信息，使微服务能够感知上下文。'
- en: '*Implementation*: Pass context information (e.g., user identity, transaction
    ID) between microservices.'
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现方式*：在微服务之间传递上下文信息（例如，用户身份，事务ID）。'
- en: '**Consistent logging**:'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致日志记录**：'
- en: '*What it does*: Ensures consistency in logging by propagating context information.'
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*作用*：通过传播上下文信息确保日志的一致性。'
- en: '*Implementation*: Utilize context propagation mechanisms in frameworks such
    as Spring Cloud Sleuth or custom headers.'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现方式*：利用Spring Cloud Sleuth等框架中的上下文传播机制或自定义头。'
- en: 'Request context propagation is important for distributed systems, especially
    microservices, because it allows you to track and monitor the performance and
    behavior of requests that span multiple components or services. Request context
    propagation can help you to do the following:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 请求上下文传播对于分布式系统，尤其是微服务来说非常重要，因为它允许您跟踪和监控跨越多个组件或服务的请求的性能和行为。请求上下文传播可以帮助您完成以下任务：
- en: Diagnose and troubleshoot issues, errors, or performance problems that affect
    the request and optimize and improve the user experience and system reliability.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 诊断和排除影响请求的问题、错误或性能问题，并优化和改进用户体验和系统可靠性。
- en: Enhance the security and compliance of the request by detecting and preventing
    threats, breaches, or violations.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过检测和防止威胁、违规行为或违规来增强请求的安全性和合规性。
- en: Analyze and report on the request’s metrics, trends, and insights.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析和报告请求的指标、趋势和洞察。
- en: As request context propagation can help you to diagnose and troubleshoot, enhance
    security and compliance, and analyze and report, we can also talk about its best
    practices.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 由于请求上下文传播可以帮助您诊断和排除故障、增强安全和合规性以及分析和报告，我们也可以讨论其最佳实践。
- en: 'Some best practices are the following:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 一些最佳实践如下：
- en: '**Minimize overhead**: Optimize context propagation mechanisms to minimize
    overhead, especially in high-throughput systems.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小化开销**：优化上下文传播机制以最小化开销，尤其是在高吞吐量系统中。'
- en: '**Context enrichment**: Enrich context information as the request progresses
    through microservices to capture relevant details.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上下文丰富**：在请求通过微服务的过程中丰富上下文信息，以捕获相关细节。'
- en: Request context propagation works by passing and accessing contextual information
    about a request, such as the source, the time, the path, the parameters, the outcome,
    or the error, across different components or services that process the request.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 请求上下文传播通过在不同处理请求的组件或服务之间传递和访问有关请求的上下文信息来实现，例如源、时间、路径、参数、结果或错误。
- en: Logging frameworks
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志框架
- en: In **logging frameworks**, you need to use best practices for diagnosing information,
    auditing, and performance. Logging frameworks are libraries or modules that allow
    you to generate and format log data from your applications or systems. Log data
    is information that records the activities, events, or changes of your applications
    or systems. Logging frameworks can help you to diagnose and troubleshoot issues,
    errors, or performance problems and to optimize and improve the user experience
    and system reliability.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在**日志框架**中，您需要使用最佳实践来诊断信息、审计和性能。日志框架是库或模块，允许您从您的应用程序或系统中生成和格式化日志数据。日志数据是记录您的应用程序或系统活动、事件或更改的信息。日志框架可以帮助您诊断和排除问题、错误或性能问题，并优化和改进用户体验和系统可靠性。
- en: 'Let us look at logging frameworks in more detail:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看看日志框架：
- en: '**Diagnostic information**:'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**诊断信息**：'
- en: '*What it does*: Provides diagnostic information for troubleshooting and debugging.'
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*作用*：提供用于故障排除和调试的诊断信息。'
- en: '*Implementation*: Log relevant details such as input parameters, response codes,
    and critical events.'
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实施*：记录相关的详细信息，例如输入参数、响应代码和关键事件。'
- en: '**Auditing** **and compliance**:'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**审计** **和合规性**：'
- en: '*What it does*: Facilitates auditing and compliance by capturing significant
    events.'
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*作用*：通过捕获重要事件促进审计和合规性。'
- en: '*Implementation*: Log events that are crucial for compliance requirements.'
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实施*：记录符合合规性要求的关键事件。'
- en: Some best practices for logging frameworks are structured logging, log levels,
    and centralized logging, described in the earlier sections of this chapter, specifically
    *Structured logging and log levels*, and *Contextual information and centralized*
    *log management*.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 本章前面部分描述了一些日志框架的最佳实践，包括结构化日志、日志级别和集中式日志，具体为*结构化日志和日志级别*，以及*上下文信息和集中式* *日志管理*。
- en: In summary, request tracing, context propagation, and effective logging are
    integral components of observability in microservices architectures. They provide
    insights into the flow of requests, enable context-aware processing, and facilitate
    efficient debugging and troubleshooting. By implementing these practices, organizations
    can achieve enhanced visibility, improved system reliability, and faster issue
    resolution in their microservices ecosystem.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，请求跟踪、上下文传播和有效的日志记录是微服务架构中可观测性的核心组成部分。它们提供了对请求流程的洞察，使上下文感知处理成为可能，并促进了高效的调试和故障排除。通过实施这些实践，组织可以在其微服务生态系统中实现增强的可视性、改进的系统可靠性和更快的故障解决。
- en: Summary
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned a lot about microservices and how to monitor
    microservices in Node.js using several principles and tools.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了关于微服务以及如何使用几个原则和工具在Node.js中监控微服务的大量知识。
- en: In summary, monitoring microservices in Node.js involves tracking and analyzing
    various aspects of the microservices to ensure their health and performance. This
    can include monitoring metrics such as response times, error rates, and resource
    usage.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，在Node.js中监控微服务涉及跟踪和分析微服务的各个方面，以确保其健康和性能。这可能包括监控响应时间、错误率和资源使用等指标。
- en: 'Various tools and practices can be used for monitoring microservices in Node.js,
    including the following:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用各种工具和实践来监控Node.js中的微服务，包括以下内容：
- en: '**Logging**: Implementing comprehensive logging in Node.js microservices can
    provide valuable insight into their behavior and performance. Tools such as Winston
    or Bunyan can be used for structured logging.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志**：在Node.js微服务中实施全面的日志记录可以提供对其行为和性能的宝贵见解。可以使用Winston或Bunyan等工具进行结构化日志记录。'
- en: '**Metrics collection**: Using libraries such as Prometheus or StatsD to collect
    and expose metrics from the microservices, allowing for tracking of performance
    data over time.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指标收集**：使用Prometheus或StatsD等库从微服务中收集和公开指标，允许跟踪随时间推移的性能数据。'
- en: '**Tracing**: Implementing distributed tracing using tools such as OpenTracing
    or Jaeger can provide visibility into the flow of requests across microservices,
    helping to identify performance bottlenecks and errors.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跟踪**：使用OpenTracing或Jaeger等工具实施分布式跟踪，可以提供对请求在微服务之间流动的可见性，有助于识别性能瓶颈和错误。'
- en: '**Health checks**: Implementing health checks within microservices to continuously
    monitor their availability and responsiveness.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**健康检查**：在微服务中实施健康检查，以持续监控其可用性和响应性。'
- en: '**Container orchestration platforms**: Utilizing container orchestration platforms
    such as Kubernetes or Docker Swarm can provide built-in monitoring and metrics
    collection capabilities.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器编排平台**：利用Kubernetes或Docker Swarm等容器编排平台可以提供内置的监控和指标收集功能。'
- en: '**Application performance monitoring (APM) tools**: Leveraging APM tools such
    as New Relic, Datadog, or AppDynamics to gain deeper insights into the performance
    of Node.js microservices.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用性能监控（APM）工具**：利用APM工具，如New Relic、Datadog或AppDynamics，以深入了解Node.js微服务的性能。'
- en: By utilizing these tools and best practices, developers can ensure the reliability
    and scalability of their Node.js microservices. In the next chapter, we are going
    to learn about logging in microservices with Node.js.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用这些工具和最佳实践，开发者可以确保他们Node.js微服务的可靠性和可扩展性。在下一章中，我们将学习使用Node.js在微服务中进行日志记录。
- en: Quiz time
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测验时间
- en: What are structured logging and log levels?
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是结构化日志和日志级别？
- en: What is centralized log management?
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是集中式日志管理？
- en: What is application-level metrics?
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用级指标是什么？
- en: What are the logging frameworks?
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是日志框架？
