["```js\nnpm install mongoose --save\n\n```", "```js\n{\n  \"express\": {\n    \"port\": 3000\n  },\n  \"logger\" : {\n    \"filename\": \"logs/run.log\",\n    \"level\": \"silly\"\n  },\n \"mongo\": {\n \"url\":  \"mongodb://localhost/vision\"\n }\n}\n```", "```js\nvar mongoose = require('mongoose')\n, config = require('../configuration')\n, connectionString = config.get(\"mongo:url\")\n, options = { server: { auto_reconnect: true, poolSize: 10 } };\n\nmongoose.connection.open(connectionString, options);\n```", "```js\nvar mongoose = require('mongoose'),\n    Schema = mongoose.Schema;\n\nvar ProjectSchema = new Schema({\n    name         : { type: String, required: true, index: true }\n  , token        : { type: String }\n  , user         : { type: String, required: true, index: true }\n  , created      : { type: Date, default: Date.now }\n  , repositories : [ { type: String } ]\n});\n\nmongoose.model('Project', ProjectSchema);\nmodule.exports = mongoose;\n```", "```js\nmongod\n\n```", "```js\nmodule.exports = {\n  user : '#USER#'\n  token : '#TOKEN#'\n}\n```", "```js\nAs a vision user\nI want to create a new project\nSo that I can monitor the activity of multiple repositories\n```", "```js\ndescribe('when creating a new resource /project', function(){\n  var project = {\n    name: \"new project\"\n    , user: login.user  \n    , token: login.token\n    , repositories    : [ \"12345\", \"9898\" ]\n  };\n\n  it('should respond with 201', function(done){\n    request(app)\n    .post('/project')\n    .send(project)\n    .expect('Content-Type', /json/)\n    .expect(201)\n    .end(function (err, res) {\n      var proj = JSON.parse(res.text);\n      assert.equal(proj.name, project.name);\n      assert.equal(proj.user, login.user);\n      assert.equal(proj.token, login.token);\n      assert.equal(proj.repositories[0], project.repositories[0]);\n      assert.equal(proj.repositories[1], project.repositories[1]);\n      assert.equal(res.header['location'],'/project/' + proj._id);\n      done();\n      });\n    });\n  });\n```", "```js\nbeforeEach(function(done){\n  mongoose.connection.collections['projects'].drop( function(err) {\n  var proj = {\n    name: \"test name\"\n    , user: login.user  \n    , token: login.token\n    , repositories    : [ \"node-plates\" ]\n  };\n\n  mongoose.connection.collections['projects'].insert(proj,function(err, docs) {\n      id = docs[0]._id;\n      done();\n    });\n  });\n})\n```", "```js\nnpm install string --save\n\n```", "```js\nvar ProjectSchema = require('../models').model('Project'); \n\nfunction Project() {};\n\nProject.prototype.post = function(name, data, callback){\n  var query = {'name': name};\n  var project = new ProjectSchema(data);\n\n  ProjectSchema.findOne(query, function(error, proj) {\n    if (error) return callback(error, null);\n    if (proj != null) return callback(null, null);\n\n    project.save(function (error, p) {\n      if (error) return callback(error, null);\n      return callback(null, p);\n    });\n  });\n};\n```", "```js\nvar logger = require(\"../logger\")\n, S = require('string')\n, login = require('../../test/login')\n, ProjectService = require('../project')\n, Project = new ProjectService();\n\nexports.post = function(req, res){\n  logger.info('Post.' + req.body.name);\n\n  if (S(req.body.name).isEmpty() )\n  return res.json(400, 'Bad Request');\n\n  req.body.user = login.user;\n  req.body.token = login.token;\n\n  Project.post(req.body.name, req.body, function(error, project) {\n    if (error) return res.json(500, 'Internal Server Error');\n    if (project == null) return res.json(409, 'Conflict');\n    res.location('/project/' +  project._id);\n    return res.json(201, project);\n  });\n};\n```", "```js\nvar express = require('express')\n  , http = require('http')\n  , config = require('../configuration')\n , db = require('../db')\n  , heartbeat = require('../routes/heartbeat')\n , project = require('../routes/project')\n  , error = require('../routes/error')\n  , notFound = require('../middleware/notFound')\n  , app = express();\n\napp.use(express.bodyParser());\napp.set('port', config.get('express:port'));\napp.use(express.logger({ immediate: true, format: 'dev' }));\napp.get('/heartbeat', heartbeat.index);\napp.post('/project', project.post);\napp.use(notFound.index);\n\nhttp.createServer(app).listen(app.get('port'));\nmodule.exports = app;\n```", "```js\nAs a vision user\nI want to get a project\nSo that I can monitor the activity of selected repositories\n```", "```js\nnpm install underscore --save\n\n```", "```js\ndescribe('when requesting an available resource /project/:id', function(){\n  it('should respond with 200', function(done){\n    request(app)\n    .get('/project/' + id)\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .end(function (err, res) {\n      var proj = JSON.parse(res.text);\n      assert.equal(proj._id, id);\n      assert(_.has(proj, '_id'));\n      assert(_.has(proj, 'name'));\n      assert(_.has(proj, 'user'));\n      assert(_.has(proj, 'token'));\n      assert(_.has(proj, 'created'));\n      assert(_.has(proj, 'repositories'));\n      done();\n    });\n  });\n});\n```", "```js\nProject.prototype.get = function(id, callback){\n  var query = {\"_id\" : id};\n\n  ProjectSchema.findOne(query, function(error, project) {\n    if (error) return callback(error, null);\n    return callback(null, project);\n  });\n};\n```", "```js\nexports.get = function(req, res){\n  logger.info('Request.' + req.url);\n\n  Project.get(req.params.id, function(error, project) {\n    if (error) return res.json(500, 'Internal Server Error');\n    if (project == null) return res.json(404, 'Not Found');\n    return res.json(200, project);\n  });\n};\n```", "```js\napp.get('/project/:id', project.get);\n```", "```js\nAs a vision user\nI want to update a project\nSo that I can change the repositories I monitor\n```", "```js\ndescribe('when updating an existing resource /project/:id', function(){\n  var project = {\n    name: \"new test name\"\n    , user: login.user  \n    , token: login.token\n    , repositories    : [ \"12345\", \"9898\" ]\n  };\n\n  it('should respond with 204', function(done){\n\n    request(app)\n    .put('/project/' + id)\n    .send(project)\n    .expect(204, done);\n  });\n});\n```", "```js\nProject.prototype.put = function(id, update, callback){\n  var query = {\"_id\": id};\n  delete update._id;\n\n  ProjectSchema.findOne(query, function(error, project) {\n    if (error) return callback(error, null);\n    if (project == null) return callback(null, null);\n\n    ProjectSchema.update(query, update, function(error, project) {\n      if (error) return callback(error, null);\n      return callback(null, {});\n    });\n  });\n};\n```", "```js\nexports.put = function(req, res){\n  logger.info('Put.' + req.params.id);\n\n  if (S(req.body.name).isEmpty() )\n  return res.json(400, 'Bad Request');\n\n  req.body.user = login.user;\n  req.body.token = login.token;\n\n  Project.put(req.params.id, req.body, function(error, project) {\n    if (error) return res.json(500, 'Internal Server Error');\n    if (project == null) return res.json(404, 'Not Found');\n    return res.json(204, 'No Content');\n  });\n};\n```", "```js\napp.put('/project/:id', project.put);\n```", "```js\nAs a vision user\nI want to delete a project\nSo that I can remove projects no longer in use\n```", "```js\ndescribe('when deleting an existing resource /project/:id', function(){\n  it('should respond with 204', function(done){\n    request(app)\n    .del('/project/' + id)\n    .expect(204, done);\n  });\n});\n```", "```js\nProject.prototype.del = function(id, callback){\n  var query = {'_id': id};\n\n  ProjectSchema.findOne(query, function(error, project) {\n    if (error) return callback(error, null);\n    if (project == null) return callback(null, null);\n\n    project.remove(function (error) {\n      if (error) return callback(error, null);\n      return callback(null, {});\n    });\n  });\n};\n```", "```js\nexports.del = function(req, res){\n  logger.info('Delete.' + req.params.id);\n\n  Project.del(req.params.id, function(error, project) {\n    if (error) return res.json(500, 'Internal Server Error');\n    if (project == null) return res.json(404, 'Not Found');\n    return res.json(204, 'No Content');\n  });\n};\n```", "```js\napp.del('/project/:id', project.del);\n```", "```js\nAs a vision user\nI want to see a list of projects\nSo that I can select a project I want to monitor\n```", "```js\ndescribe('when requesting resource get all projects', function(){\n  it('should respond with 200', function(done){\n    request(app)\n    .get('/project/?user=' + login.user)\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .end(function (err, res) {\n      var proj = _.first(JSON.parse(res.text))\n      assert(_.has(proj, '_id'));\n      assert(_.has(proj, 'name'));\n      assert(_.has(proj, 'user'));\n      assert(_.has(proj, 'token'));\n      assert(_.has(proj, 'created'));\n      assert(_.has(proj, 'repositories'));\n      done();\n    });\n  });\n});\n```", "```js\nProject.prototype.all = function(id, callback){\n  var query = {\"user\" : id};\n\n  ProjectSchema.find(query, function(error, projects) {\n    if (error) return callback(error, null);\n    return callback(null, projects);\n  });\n};\n```", "```js\nexports.all = function(req, res){\n  logger.info('Request.' + req.url);\n\n  var userId = login.user || req.query.user || req.user.id;\n\n  Project.all(userId, function(error, projects) {\n    if (error) return res.json(500, 'Internal Server Error');\n    if (projects == null) projects = {};\n    return res.json(200, projects);\n  });\n};\n```", "```js\napp.get('/project', project.all);\n```", "```js\nnpm install github --save\n\n```", "```js\nnpm install async --save\n\n```", "```js\nnpm install moment --save\n\n```", "```js\nAs a vision user\nI want to see a list of all repositories for a GitHub account\nSo that I can select and monitor repositories for my project\n```", "```js\ndescribe('when requesting an available resource /project/:id/repos', function(){\n  it('should respond with 200', function(done){\n    this.timeout(5000);\n    request(app)\n    .get('/project/' + id + '/repos/')\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .end(function (err, res) {\n      var repo = _.first(JSON.parse(res.text))\n      assert(_.has(repo, 'id'));\n      assert(_.has(repo, 'name'));\n      assert(_.has(repo, 'description'));\n      done();\n    });\n  });\n});\n```", "```js\nvar GitHubApi = require(\"github\")\n, config = require('../configuration')\n, async =  require(\"async\")\n, moment = require('moment')\n, _ =  require(\"underscore\")\n\nfunction GitHubRepo(token, user) {\n  this.token = token;\n  this.user = user;\n\n  this.github = new GitHubApi({\n    version: \"3.0.0\",\n    timeout: 5000 });\n\n  this.github.authenticate({\n    type: \"oauth\",\n    token: token\n  });\n};\n\nmodule.exports = GitHubRepo;\n```", "```js\nGitHubRepo.prototype.repositories = function(callback) {\n  this.github.repos.getAll({}, function(error, response) {\n    if (error) return callback(error, null);\n    if (response == null) return callback(null, null);\n\n    var items = response.map(function(model) {\n      return _.pick(model, ['id','name', 'description']);\n    });\n\n    callback(null, items);\n  });\n};\n```", "```js\n, GitHubRepo = require('../github')\n\nProject.prototype.repos = function(id, callback){\n  ProjectSchema.findOne({_id: id}, function(error, project) {\n    if (error) return callback(error, null);\n    if (project == null) return callback(null, null);\n\n    var git = new GitHubRepo(project.token, project.user);\n\n    git.repositories(function(error, response){\n      if (error) return callback(error, null);\n      if (response == null) return callback(\"error\", null);\n\n      items = response.map(function(model) {\n        var item = _.pick(model, ['id','name', 'description''description']);\n        var enabled = _.find(project.repositories, function(p){ return p == item.name; });\n        (enabled) ? item.enabled = 'checked' : item.enabled = '';\n        return item;\n      });\n\n      return callback(null, items);\n    });\n  });\n};\n```", "```js\n, ProjectService = require('../project')\n, Project = new ProjectService();\n\nexports.repos = function(req, res){\n  logger.info('Request.' + req.url);\n\n  Project.repos(req.params.id, function(error, repos) {\n    if (error) return res.json(500, 'Internal Server Error');\n    if (repos == null) return res.json(404, 'Not Found');\n    return res.json(200, repos);\n  });\n};\n```", "```js\napp.get('/project/:id/repos', github.repos);\n```", "```js\nAs a vision user\nI want to see a list of multiple repository commits in real time\nSo that I can review those commits\n```", "```js\ndescribe('when requesting an available resource /project/:id/commits', function(){\n  it('should respond with 200', function(done){\n    this.timeout(5000);\n    request(app)\n    .get('/project/' + id + '/commits')\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .end(function (err, res) {\n      var commit = _.first(JSON.parse(res.text))\n      assert(_.has(commit, 'message'));\n      assert(_.has(commit, 'date'));\n      assert(_.has(commit, 'login'));\n      assert(_.has(commit, 'avatar_url'));\n      assert(_.has(commit, 'ago'));\n      assert(_.has(commit, 'repository'));\n      done();\n    });\n  });\n});\n```", "```js\nGitHubRepo.prototype.commits = function(repos, callback) {\n  var me = this;\n  var items = [];\n\n  async.each(repos, function(repo, callback) {\n    me.github.repos.getCommits({ user: me.user,\n      repo: repo }, function(error, response) {\n      if (error) return callback();\n      if (response == null) return callback();\n\n      var repoItems = response.map(function(model) {\n        var item =_.pick(model.commit, ['message']);\n        if (model.commit.committer) _.extend(item, _.pick(model.commit.committer, ['date']));\n        if (model.committer) _.extend(item, _.pick(model.committer, ['login', 'avatar_url']));\n        item.ago = moment(item.date).fromNow();\n        item.repository  = repo;\n        return item;\n      });\n\n      items = _.union(items, repoItems);\n      callback(null, items );\n    });\n  }\n  , function(error) {\n    var top = _.chain(items)\n    .sortBy(function(item){ return item.date })\n    .reverse()\n    .first(10)\n    .value();\n\n    callback(error, top);\n  });\n};\n```", "```js\nProject.prototype.commits = function(id, callback){\n  ProjectSchema.findOne({_id: id}, function(error, project) {\n    if (error) return callback(error, null);\n    if (project == null) return callback(null, null);\n\n    var git = new GitHubRepo(project.token, project.user);\n\n    git.commits(project.repositories, function(error, response){\n      if (error) return callback(error, null);\n      return callback(null, response);\n    });\n  });\n};\n```", "```js\nexports.commits = function(req, res){\n  logger.info('Request.' + req.url);\n\n  Project.commits(req.params.id, function(error, commits) {\n    if (error) return res.json(500, 'Internal Server Error');\n    if (commits == null) return res.json(404, 'Not Found');\n    return res.json(200, commits);\n  });\n};\n```", "```js\napp.get('/project/:id/commits', github.commits);\n```", "```js\nAs a vision user\nI want to see a list of multiple repository issues in real time\nSo that I can review and fix issues\n```", "```js\ndescribe('when requesting an available resource /project/:id/issues', function(){\n  it('should respond with 200', function(done){\n    this.timeout(5000);\n    request(app)\n    .get('/project/' + id + '/issues')\n    .expect('Content-Type', /json/)\n    .expect(200)\n    .end(function (err, res) {\n      var issue = _.first(JSON.parse(res.text))\n      assert(_.has(issue, 'title'));\n      assert(_.has(issue, 'state'));\n      assert(_.has(issue, 'updated_at'));\n      assert(_.has(issue, 'login'));\n      assert(_.has(issue, 'avatar_url'));\n      assert(_.has(issue, 'ago'));\n      assert(_.has(issue, 'repository'));\n      done();\n    });\n  });\n});\n```", "```js\nGitHubRepo.prototype.issues = function(repos, callback) {\n  var me = this;\n  var items = [];\n\n  async.each(repos, function(repo, callback) {\n    me.github.issues.repoIssues({ user: me.user, repo: repo }, function(error, response) {\n      if (error) return callback();\n      if (response == null) return callback();\n\n      var repoItems = response.map(function(model) {\n        var item = _.pick(model, ['title', 'state', 'updated_at']);\n        if (model.user) _.extend(item, _.pick(model.user, ['login', 'avatar_url']));\n        item.ago = moment(item.updated_at).fromNow();\n        item.repository = repo;\n        return item;\n      });\n\n      items = _.union(items, repoItems);\n      callback(null, items );\n    });\n  }\n  , function(error) {\n    var top = _.chain(items)\n    .sortBy(function(item){ return item.updated_at; })\n    .reverse()\n    .first(10)\n    .value();\n\n    callback(error, top);\n  });\n};\n```", "```js\nexports.issues = function(req, res){\n  logger.info('Request.' + req.url);\n\n  Project.findOne({_id: req.params.id}, function(error, project) {\n    if (error) return res.json(500, 'Internal Server Error');\n    if (project == null) return res.json(404, 'Page Not Found');\n\n    var git = new GitHubRepo(project.token, project.user);\n\n    git.issues(project.repositories, function(error, response){\n      if (error) return res.json(500, 'Internal Server Error');\n      return res.json(200, response);\n    });\n  });\n};\n```", "```js\nexports.issues = function(req, res){\n  logger.info('Request.' + req.url);\n\n  Project.issues(req.params.id, function(error, issues) {\n    if (error) return res.json(500, 'Internal Server Error');\n    if (issues == null) return res.json(404, 'Not Found');\n    return res.json(200, issues);\n  });\n};\n```", "```js\napp.get('/project/:id/issues', github.issues);\n```", "```js\nif (req.params.id.match(/^[0-9a-fA-F]{24}$/) == null)\n  return res.json(400, 'Bad Request');\n```", "```js\nexports.validate = function(req, res, next, id){\n  if (id.match(/^[0-9a-fA-F]{24}$/) == null)\n  return res.json(400, 'Bad Request');\n  next();\n}\n```", "```js\n, id = require('../middleware/id')\n..\napp.param('id', id.validate);\n```", "```js\nnpm install require-directory –save\n\n```", "```js\nvar requireDirectory = require('require-directory');\nmodule.exports = requireDirectory(module, __dirname, ignore);\n```", "```js\n  var express = require('express')\n  , http = require('http')\n  , config = require('../configuration')\n  , db = require('../db')\n , routes = require('../routes')\n  , notFound = require('../middleware/notFound')\n , id = require('../middleware/id')\n  , app = express();\n\napp.use(express.bodyParser());\napp.set('port', config.get('express:port'));\napp.use(express.logger({ immediate: true, format: 'dev' }));\napp.param('id', id.validate);\napp.get('/heartbeat', routes.heartbeat.index);\napp.get('/project/:id', routes.project.get);\napp.get('/project', routes.project.all);\napp.post('/project', routes.project.post);\napp.put('/project/:id', routes.project.put);\napp.del('/project/:id', routes.project.del);\napp.get('/project/:id/repos', routes.github.repos);\napp.get('/project/:id/commits', routes.github.commits);\napp.get('/project/:id/issues', routes.github.issues);\napp.use(notFound.index);\n\nhttp.createServer(app).listen(app.get('port'));\nmodule.exports = app;\n```"]