- en: Chapter 1. Plugins and Extensions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章. 插件和扩展
- en: This chapter introduces and defines the Ext JS plugins and extensions, the differences
    between them, and finally shows how to develop a plugin and an extension.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了 Ext JS 插件和扩展的定义，它们之间的区别，并最终展示了如何开发插件和扩展。
- en: 'In this chapter we will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: What a plugin is
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件是什么
- en: What an extension is
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展是什么
- en: Differences between an extension and a plugin, and choosing the best option
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展和插件之间的区别，以及选择最佳选项
- en: Building an Ext JS plugin
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建 Ext JS 插件
- en: Building an Ext JS extension
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建 Ext JS 扩展
- en: In this modern world of JavaScript, Ext JS is the best JavaScript framework
    that includes a vast collection of cross-browser utilities, UI widgets, charts,
    data object stores, and much more.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个现代的 JavaScript 世界中，Ext JS 是包含大量跨浏览器实用工具、UI 小部件、图表、数据对象存储等众多功能的最佳 JavaScript
    框架。
- en: When developing an application, we mostly look for the best functionality support
    and components that offer it to the framework. But we usually face situations
    wherein the framework lacks the specific functionality or component that we need.
    Fortunately, Ext JS has a powerful class system that makes it easy to extend an
    existing functionality or component, or build new ones altogether.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发应用程序时，我们通常寻找最佳功能支持和提供该功能的组件。但通常我们会遇到框架缺乏我们需要的特定功能或组件的情况。幸运的是，Ext JS 拥有一个强大的类系统，这使得扩展现有功能或组件或完全构建新的功能变得容易。
- en: What is a plugin?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插件是什么？
- en: An Ext JS plugin is a class that is used to provide additional functionalities
    to an existing component. Plugins must implement a method named `init`, which
    is called by the component and is passed as the parameter at the initialization
    time, at the beginning of the component's lifecycle. The `destroy` method is invoked
    by the owning component of the plugin, at the time of the component's destruction.
    We don't need to instantiate a plugin class. Plugins are inserted in to a component
    using the plugin's configuration option for that component.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Ext JS 插件是一个用于向现有组件提供额外功能的类。插件必须实现一个名为 `init` 的方法，该方法在组件初始化时由组件调用，并在组件的生命周期开始时作为参数传递。`destroy`
    方法在插件的所有者组件在组件销毁时调用。我们不需要实例化插件类。插件通过使用该组件的插件配置选项插入到组件中。
- en: Plugins are used not only by components to which they are attached, but also
    by all the subclasses derived from that component. We can also use multiple plugins
    in a single component, but we need to be aware that using multiple plugins in
    a single component should not let the plugins conflict with each other.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 插件不仅被它们附加的组件使用，还被从该组件派生的所有子类使用。我们还可以在单个组件中使用多个插件，但我们需要意识到，在单个组件中使用多个插件不应让插件相互冲突。
- en: What is an extension?
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展是什么？
- en: An Ext JS extension is a derived class or a subclass of an existing Ext JS class,
    which is designed to allow the inclusion of additional features. An Ext JS extension
    is mostly used to add custom functionalities or modify the behavior of an existing
    Ext JS class. An Ext JS extension can be as basic as the preconfigured Ext JS
    classes, which basically supply a set of default values to an existing class configuration.
    This type of extension is really helpful in situations where the required functionality
    is repeated at several places. Let us assume we have an application where several
    Ext JS windows have the same help button at the bottom bar. So we can create an
    extension of the Ext JS window, where we can add this help button and can use
    this extension window without providing the repeated code for the button. The
    advantage is that we can easily maintain the code for the help button in one place
    and can get the change in all places.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Ext JS 扩展是一个现有 Ext JS 类的派生类或子类，旨在允许包含额外的功能。Ext JS 扩展主要用于添加自定义功能或修改现有 Ext JS
    类的行为。Ext JS 扩展可以像预配置的 Ext JS 类一样基本，基本上为现有类配置提供一组默认值。这种类型的扩展在需要的功能在多个地方重复出现的情况下非常有用。让我们假设我们有一个应用程序，其中几个
    Ext JS 窗口在底部栏中都有相同的帮助按钮。因此，我们可以创建一个 Ext JS 窗口的扩展，其中我们可以添加这个帮助按钮，并可以使用这个扩展窗口而不需要为按钮提供重复的代码。优势在于我们可以轻松地在单个地方维护帮助按钮的代码，并且可以在所有地方获得更改。
- en: Differences between an extension and a plugin
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展和插件之间的区别
- en: The Ext JS extensions and plugins are used for the same purpose; they add extended
    functionality to Ext JS classes. But they mainly differ in terms of how they are
    written and the reason for which they are used.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Ext JS扩展和插件用于相同的目的；它们向Ext JS类添加扩展功能。但它们主要在编写方式和使用原因方面有所不同。
- en: Ext JS extensions are extension classes or subclasses of Ext JS classes. To
    use these extensions, we need to instantiate these extensions by creating an object.
    We can provide additional properties, functions, and can even override any parent
    member to change its behavior. The extensions are very tightly coupled to the
    classes from which they are derived. The Ext JS extensions are mainly used when
    we need to modify the behavior of an existing class or component, or we need to
    create a fully new class or component.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Ext JS扩展是扩展类或Ext JS类的子类。为了使用这些扩展，我们需要通过创建一个对象来实例化这些扩展。我们可以提供额外的属性、函数，甚至可以覆盖任何父成员以改变其行为。这些扩展与它们派生的类紧密耦合。Ext
    JS扩展主要用于我们需要修改现有类或组件的行为，或者我们需要创建一个全新的类或组件。
- en: Ext JS plugins are also Ext JS classes, but they include the `init` function.
    To use the plugins we don't need to directly instantiate these classes; instead,
    we need to register the plugins in the plugins' configuration option within the
    component. After adding, the options and functions will become available to the
    component itself. The plugins are loosely coupled with the components they are
    plugged in, and they can be easily detachable and interoperable with multiple
    components and derived components. Plugins are used when we need to add features
    to a component. As plugins must be attached to an existing component, creating
    a fully new component, as done in the extensions, is not useful.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Ext JS插件也是Ext JS类，但它们包括`init`函数。为了使用插件，我们不需要直接实例化这些类；相反，我们需要在组件的插件配置选项中注册插件。添加后，选项和函数将可用于组件本身。插件与它们插入的组件松散耦合，并且可以轻松地与多个组件和派生组件交互。插件用于我们需要向组件添加功能时。由于插件必须附加到现有组件，因此像扩展那样创建一个全新的组件是没有用的。
- en: Choosing the best option
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择最佳选项
- en: When we need to enhance or change the functionality of an existing Ext JS component,
    we have several ways to do that, each of which has both advantages and disadvantages.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要增强或更改现有Ext JS组件的功能时，我们有几种方法可以实现，每种方法都有其优点和缺点。
- en: Let us assume we need to develop an SMS text field having a simple functionality
    of changing the text color to red whenever the text length exceeds the allocated
    length for a message; this way the user can see that they are typing more than
    one message. Now, this functionality can be implemented in three different ways
    in Ext JS, which is discussed in the following sections.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们假设我们需要开发一个具有将文本颜色更改为红色以表示文本长度超过消息分配长度的简单功能的短信文本字段；这样用户就可以看到他们正在输入多于一条消息。现在，在Ext
    JS中，这种功能可以通过三种不同的方式实现，以下章节将讨论这一点。
- en: By configuring an existing class
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过配置现有类
- en: We can choose to apply configuration to the existing classes. For example, we
    can create a text field by providing the required SMS functionality as a configuration
    within the listener's configuration, or we can provide event handlers after the
    text field is instantiated with the `on` method.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以选择将配置应用于现有类。例如，我们可以在监听器的配置中提供一个作为配置的所需短信功能来创建一个文本字段，或者我们可以在使用`on`方法实例化文本字段后提供事件处理器。
- en: This is the easiest option when the same functionality is used only at a few
    places. But as soon as the functionality is repeated at several places or in several
    situations, code duplication may arise.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在同一功能只在少数地方使用时最简单的选项。但是，一旦功能在多个地方或多种情况下重复出现，就可能出现代码重复。
- en: By creating a subclass or an extension
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过创建子类或扩展
- en: By creating an extension, we can easily solve the problem as discussed in the
    previous section. So, if we create an extension for the SMS text field by extending
    the Ext JS text field, we can use this extension at as many places as we need,
    and can also create other extensions by using this extension. So, the code is
    centralized for this extension, and changing one place can reflect in all the
    places where this extension is used.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创建一个扩展，我们可以轻松解决上一节中讨论的问题。因此，如果我们通过扩展 Ext JS 文本字段来创建一个 SMS 文本字段的扩展，我们就可以在需要的地方使用这个扩展，也可以通过使用这个扩展来创建其他扩展。所以，这个扩展的代码是集中的，更改一个地方可以在使用这个扩展的所有地方反映出来。
- en: 'But there is a problem: when the same functionality is needed for SMS in other
    subclasses of Ext JS text fields such as Ext JS text area field, we can''t use
    the developed SMS text field extension to take advantage of the SMS functionality.
    Also, assume a situation where there are two subclasses of a base class, each
    of which provides their own facility, and we want to use both the features on
    a single class, then it is not possible in this implementation.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 但存在一个问题：当在其他 Ext JS 文本字段子类（如 Ext JS 文本区域字段）中需要相同的功能时，我们无法使用开发的 SMS 文本字段扩展来利用
    SMS 功能。此外，假设有一个基类的两个子类，每个子类都提供了自己的功能，而我们想在单个类中使用这两个功能，那么在这个实现中这是不可能的。
- en: By creating a plugin
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过创建一个插件
- en: By creating a plugin, we can gain the maximum re-use of a code. As a plugin
    for one class, it is usable by the subclasses of that class, and also, we have
    the flexibility to use multiple plugins in a single component. This is the reason
    why if we create a plugin for the SMS functionality we can use the SMS plugin
    both in the text field and in the text area field. Also, we can use other plugins,
    including this SMS plugin, in the class.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创建一个插件，我们可以最大限度地重用代码。作为一个类的插件，它可以被该类的子类使用，而且我们还有灵活性，可以在单个组件中使用多个插件。这就是为什么如果我们为
    SMS 功能创建一个插件，我们可以在文本字段和文本区域字段中使用 SMS 插件。此外，我们还可以在其他类中使用其他插件，包括这个 SMS 插件。
- en: Building an Ext JS plugin
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 Ext JS 插件
- en: Let us start developing an Ext JS plugin. In this section we will develop a
    simple SMS plugin, targeting the Ext JS `textareafield` component. The feature
    we wish to provide for the SMS functionality is that it should show the number
    of characters and the number of messages on the bottom of the containing field.
    Also, the color of the text of the message should change in order to notify the
    users whenever they exceed the allowed length for a message.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始开发一个 Ext JS 插件。在本节中，我们将开发一个简单的 SMS 插件，针对 Ext JS 的 `textareafield` 组件。我们希望为
    SMS 功能提供的特性是，它应该在包含字段的底部显示字符数和消息数。此外，消息文本的颜色应该改变，以便在用户超过消息允许长度时通知他们。
- en: 'Here, in the following code, the SMS plugin class has been created within the
    `Examples` namespace of an Ext JS application:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，SMS 插件类已被创建在 Ext JS 应用程序的 `Examples` 命名空间内：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在 [http://www.packtpub.com](http://www.packtpub.com) 的账户下载您购买的所有 Packt
    书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问 [http://www.packtpub.com/support](http://www.packtpub.com/support)
    并注册，以便将文件直接通过电子邮件发送给您。
- en: In the preceding plugin class, you can see that within this class we have defined
    a "must implemented" function called `init`. Within the `init` function, we check
    whether the component, on which this plugin is attached, has rendered or not,
    and then call the `handleAfterRender` function whenever the rendering is. Within
    this function, a code is provided, such that when the `change` event fires off
    the `textareafield` component, the `handleChange` function of this class should
    get executed; simultaneously, create an HTML `<div>` element within the `handleAfterRender`
    function, where we want to show the message information regarding the characters
    and message counter. And the `handleChange` function is the handler that calculates
    the message length in order to show the colored, warning text, and call the `updateMessageInfo`
    function to update the message information text for the characters length and
    the number of messages.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can easily add the following plugin to the component:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Also, we can supply configuration options when we are inserting the plugin
    within the `plugins` configuration option to override the default values, as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Building an Ext JS extension
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us start developing an Ext JS extension. In this section we will develop
    an SMS extension that exactly satisfies the same requirements as the earlier-developed
    SMS plugin.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: We already know that an Ext JS extension is a derived class of existing Ext
    JS class, we are going to extend the Ext JS's `textarea` field that facilitates
    for typing multiline text and provides several event handling, rendering and other
    functionalities.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the following code where we have created the `Extension` class under
    the SMS view within the `Examples` namespace of an Ext JS application:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As seen in the preceding code, the `extend` keyword is used as a class property
    to extend the `Ext.form.field.TextArea` class in order to create the extension
    class. Within the `afterRender` event handler, we provide a code so that when
    the `change` event fires off the **textarea** field, we can execute the `handleChange`
    function of this class and also create an Html `<div>` element within this `afterRender`
    event handler where we want to show the message information regarding the characters
    counter and message counter. And from this section, the logic to show the warning,
    message character counter, and message counter is the same as we used in the SMS
    plugin.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can easily create an instance of this extension:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Also, we can supply configuration options when we are creating the instance
    of this class to override the default values:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following is the screenshot where we''ve used the SMS plugin and extension:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '![Building an Ext JS extension](img/3725OS_1_1.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
- en: In the above screenshot we have created an Ext JS window and incorporated the
    SMS extension and SMS plugin. As we have already discussed on the benefit of writing
    a plugin, we can not only use the SMS plugin with text area field, but we can
    also use it with text field.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的截图中，我们创建了一个 Ext JS 窗口，并集成了 SMS 扩展和 SMS 插件。正如我们之前讨论编写插件的好处时提到的，我们不仅可以在文本区域字段中使用
    SMS 插件，还可以在文本字段中使用它。
- en: Summary
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have learned from this chapter what a plugin and an extension are, the differences
    between the two, the facilities they offer, how to use them, and take decisions
    on choosing either an extension or a plugin for the needed functionality. In this
    chapter we've also developed a simple SMS plugin and an SMS extension.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章，我们学习了插件和扩展是什么，两者之间的区别，它们提供的便利，如何使用它们，以及如何根据所需功能选择扩展或插件。在本章中，我们还开发了一个简单的
    SMS 插件和 SMS 扩展。
